.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 596C26F3E610DE6D5D276F697B658023
.rdata:00000000 ; Input CRC32 : AE21E075
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\winmain.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "libcpmtd"
.rdata:00000000 ; must resolve: ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.rdata:00000000 ; must resolve: ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.rdata:00000000 ; must resolve: ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@D@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@_W@std@@2V0locale@2@A
.rdata:00000000 ; includelib "LIBCMTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 ; const WCHAR FLAG_MULTI_INSTANCE
.rdata:00000000 _FLAG_MULTI_INSTANCE:                   ; DATA XREF: WinMain(x,x,x,x)+C8o
.rdata:00000000                 unicode 0, <-multiInst>,0
.rdata:00000016                 align 4
.rdata:00000018 ; const WCHAR FLAG_NO_PLUGIN
.rdata:00000018 _FLAG_NO_PLUGIN:                        ; DATA XREF: WinMain(x,x,x,x)+10Bo
.rdata:00000018                                         ; .rdata:$SG172970o ...
.rdata:00000018                 unicode 0, <-noPlugin>,0
.rdata:0000002C ; const WCHAR FLAG_READONLY
.rdata:0000002C _FLAG_READONLY:                         ; DATA XREF: WinMain(x,x,x,x)+125o
.rdata:0000002C                 unicode 0, <-ro>,0
.rdata:00000034 ; const WCHAR FLAG_NOSESSION
.rdata:00000034 _FLAG_NOSESSION:                        ; DATA XREF: WinMain(x,x,x,x)+13Fo
.rdata:00000034                 unicode 0, <-nosession>,0
.rdata:0000004A                 align 4
.rdata:0000004C ; const WCHAR FLAG_NOTABBAR
.rdata:0000004C _FLAG_NOTABBAR:                         ; DATA XREF: WinMain(x,x,x,x)+F1o
.rdata:0000004C                 unicode 0, <-notabbar>,0
.rdata:00000060 ; const WCHAR FLAG_SYSTRAY
.rdata:00000060 _FLAG_SYSTRAY:                          ; DATA XREF: WinMain(x,x,x,x)+159o
.rdata:00000060                 unicode 0, <-systemtray>,0
.rdata:00000078 ; const WCHAR FLAG_LOADINGTIME
.rdata:00000078 _FLAG_LOADINGTIME:                      ; DATA XREF: WinMain(x,x,x,x)+18Do
.rdata:00000078                 unicode 0, <-loadingTime>,0
.rdata:00000092                 align 4
.rdata:00000094 ; const WCHAR FLAG_HELP
.rdata:00000094 _FLAG_HELP:                             ; DATA XREF: WinMain(x,x,x,x)+AEo
.rdata:00000094                 unicode 0, <--help>,0
.rdata:000000A2                 align 4
.rdata:000000A4 ; const WCHAR FLAG_ALWAYS_ON_TOP
.rdata:000000A4 _FLAG_ALWAYS_ON_TOP:                    ; DATA XREF: WinMain(x,x,x,x)+173o
.rdata:000000A4                 unicode 0, <-alwaysOnTop>,0
.rdata:000000BE                 align 10h
.rdata:000000C0 ; const WCHAR FLAG_OPENSESSIONFILE
.rdata:000000C0 _FLAG_OPENSESSIONFILE:                  ; DATA XREF: WinMain(x,x,x,x)+1A7o
.rdata:000000C0                 unicode 0, <-openSession>,0
.rdata:000000DA                 align 4
.rdata:000000DC ; const WCHAR FLAG_RECURSIVE
.rdata:000000DC _FLAG_RECURSIVE:                        ; DATA XREF: WinMain(x,x,x,x)+1C1o
.rdata:000000DC                 unicode 0, <-r>,0
.rdata:000000E2                 align 4
.rdata:000000E4 ; const WCHAR _SG173087
.rdata:000000E4 $SG173087:                              ; DATA XREF: WinMain(x,x,x,x)+84o
.rdata:000000E4                 unicode 0, <nppInstance>,0
.rdata:000000FC $SG143413       db '12 12 56 1',0       ; DATA XREF: .data:_acTop_xpmo
.rdata:00000107                 align 4
.rdata:00000108 ; const WCHAR _SG173096
.rdata:00000108 $SG173096:                              ; DATA XREF: WinMain(x,x,x,x)+30Fo
.rdata:00000108                 unicode 0, <Notepad++ Command Argument Help>,0
.rdata:00000148 $SG143414       db ' ',9,'c #FFFFFF',0  ; DATA XREF: .data:00001DA4o
.rdata:00000154 $SG143415       db '.',9,'c #8AB2E9',0  ; DATA XREF: .data:00001DA8o
.rdata:00000160 $SG143416       db '+',9,'c #CCDCF6',0  ; DATA XREF: .data:00001DACo
.rdata:0000016C $SG143417       db '@',9,'c #80ABEA',0  ; DATA XREF: .data:00001DB0o
.rdata:00000178 $SG143418       db '#',9,'c #7DA9E8',0  ; DATA XREF: .data:00001DB4o
.rdata:00000184 ; wchar_t _SG173115
.rdata:00000184 $SG173115       dw 0                    ; DATA XREF: WinMain(x,x,x,x)+32Co
.rdata:00000186                 db    0
.rdata:00000187                 db    0
.rdata:00000188 $SG143419       db '$',9,'c #C7DAF3',0  ; DATA XREF: .data:00001DB8o
.rdata:00000194 $SG143420       db '%',9,'c #79A7E6',0  ; DATA XREF: .data:00001DBCo
.rdata:000001A0 $SG143421       db '&',9,'c #ADC8EF',0  ; DATA XREF: .data:00001DC0o
.rdata:000001AC $SG143422       db '*',9,'c #87B0E8',0  ; DATA XREF: .data:00001DC4o
.rdata:000001B8 $SG143423       db '=',9,'c #BBD2F0',0  ; DATA XREF: .data:00001DC8o
.rdata:000001C4 $SG143424       db '-',9,'c #6EA0E2',0  ; DATA XREF: .data:00001DCCo
.rdata:000001D0 $SG143425       db ';',9,'c #A8C7EE',0  ; DATA XREF: .data:00001DD0o
.rdata:000001DC ; wchar_t _SG173122
.rdata:000001DC $SG173122       dw 0                    ; DATA XREF: WinMain(x,x,x,x):loc_24CAo
.rdata:000001DE                 db    0
.rdata:000001DF                 db    0
.rdata:000001E0 $SG143426       db '>',9,'c #A3C2ED',0  ; DATA XREF: .data:00001DD4o
.rdata:000001EC $SG143427       db ',',9,'c #75A4E3',0  ; DATA XREF: .data:00001DD8o
.rdata:000001F8 $SG143428       db 27h,9,'c #A7C4EB',0  ; DATA XREF: .data:00001DDCo
.rdata:00000204 $SG143429       db ')',9,'c #6297E1',0  ; DATA XREF: .data:00001DE0o
.rdata:00000210 $SG143430       db '!',9,'c #A1C1EC',0  ; DATA XREF: .data:00001DE4o
.rdata:0000021C $SG143431       db '~',9,'c #92B7E8',0  ; DATA XREF: .data:00001DE8o
.rdata:00000228 $SG143432       db '{',9,'c #99BBE9',0  ; DATA XREF: .data:00001DECo
.rdata:00000234 $SG143433       db ']',9,'c #6197DD',0  ; DATA XREF: .data:00001DF0o
.rdata:00000240 ; wchar_t _SG173130
.rdata:00000240 $SG173130       dd offset _FLAG_NO_PLUGIN+0Ah
.rdata:00000240                                         ; DATA XREF: WinMain(x,x,x,x)+470o
.rdata:00000240                                         ; "ugin"
.rdata:00000244 $SG143434       db '^',9,'c #96B9E6',0  ; DATA XREF: .data:00001DF4o
.rdata:00000250 $SG143435       db '/',9,'c #538EDB',0  ; DATA XREF: .data:00001DF8o
.rdata:0000025C ; wchar_t _SG173132
.rdata:0000025C $SG173132:                              ; DATA XREF: WinMain(x,x,x,x)+4CDo
.rdata:0000025C                 unicode 0, <" >,0
.rdata:00000262                 align 4
.rdata:00000264 $SG143436       db '(',9,'c #99BBEA',0  ; DATA XREF: .data:00001DFCo
.rdata:00000270 $SG143437       db '_',9,'c #80AAE3',0  ; DATA XREF: .data:00001E00o
.rdata:0000027C $SG143438       db ':',9,'c #81ABE3',0  ; DATA XREF: .data:00001E04o
.rdata:00000288 $SG143439       db '<',9,'c #8AB1E4',0  ; DATA XREF: .data:00001E08o
.rdata:00000294 $SG143440       db '[',9,'c #4B88D6',0  ; DATA XREF: .data:00001E0Co
.rdata:000002A0 $SG143441       db '}',9,'c #4882D1',0  ; DATA XREF: .data:00001E10o
.rdata:000002AC $SG143442       db '|',9,'c #4384D6',0  ; DATA XREF: .data:00001E14o
.rdata:000002B8 $SG143443       db '1',9,'c #90B5E7',0  ; DATA XREF: .data:00001E18o
.rdata:000002C4 $SG143444       db '2',9,'c #74A3E0',0  ; DATA XREF: .data:00001E1Co
.rdata:000002D0 $SG143445       db '3',9,'c #77A4E0',0  ; DATA XREF: .data:00001E20o
.rdata:000002DC $SG143446       db '4',9,'c #81ABE2',0  ; DATA XREF: .data:00001E24o
.rdata:000002E8 $SG143447       db '5',9,'c #437FD3',0  ; DATA XREF: .data:00001E28o
.rdata:000002F4 $SG143448       db '6',9,'c #7FA2DF',0  ; DATA XREF: .data:00001E2Co
.rdata:00000300 $SG143449       db '7',9,'c #3577D2',0  ; DATA XREF: .data:00001E30o
.rdata:0000030C $SG143450       db '8',9,'c #87AFE4',0  ; DATA XREF: .data:00001E34o
.rdata:00000318 $SG143451       db '9',9,'c #72A1DF',0  ; DATA XREF: .data:00001E38o
.rdata:00000324 $SG143452       db '0',9,'c #7CA9E1',0  ; DATA XREF: .data:00001E3Co
.rdata:00000330 $SG143453       db 'a',9,'c #3F7AD0',0  ; DATA XREF: .data:00001E40o
.rdata:0000033C $SG143454       db 'b',9,'c #85A4DE',0  ; DATA XREF: .data:00001E44o
.rdata:00000348 $SG143455       db 'c',9,'c #FBFCFE',0  ; DATA XREF: .data:00001E48o
.rdata:00000354 $SG143456       db 'd',9,'c #236ECD',0  ; DATA XREF: .data:00001E4Co
.rdata:00000360 $SG143457       db 'e',9,'c #7EA8E1',0  ; DATA XREF: .data:00001E50o
.rdata:0000036C $SG143458       db 'f',9,'c #79A6E0',0  ; DATA XREF: .data:00001E54o
.rdata:00000378 $SG143459       db 'g',9,'c #3D77D0',0  ; DATA XREF: .data:00001E58o
.rdata:00000384 $SG143460       db 'h',9,'c #87A4DC',0  ; DATA XREF: .data:00001E5Co
.rdata:00000390 $SG143461       db 'i',9,'c #1A62C9',0  ; DATA XREF: .data:00001E60o
.rdata:0000039C $SG143462       db 'j',9,'c #75A3DF',0  ; DATA XREF: .data:00001E64o
.rdata:000003A8 $SG143463       db 'k',9,'c #3C74CF',0  ; DATA XREF: .data:00001E68o
.rdata:000003B4 $SG143464       db 'l',9,'c #8DA6DE',0  ; DATA XREF: .data:00001E6Co
.rdata:000003C0 ; wchar_t _SG173161
.rdata:000003C0 $SG173161:                              ; DATA XREF: WinMain(x,x,x,x)+74Bo
.rdata:000003C0                 unicode 0, <\updater\>,0
.rdata:000003D4 $SG143465       db 'm',9,'c #1859C4',0  ; DATA XREF: .data:00001E70o
.rdata:000003E0 $SG143466       db 'n',9,'c #3B71CC',0  ; DATA XREF: .data:00001E74o
.rdata:000003EC $SG143467       db 'o',9,'c #8EA5DD',0  ; DATA XREF: .data:00001E78o
.rdata:000003F8 $SG143468       db 'p',9,'c #164EC0',0  ; DATA XREF: .data:00001E7Co
.rdata:00000404 $SG143469       db 'q',9,'c #92A7DD',0  ; DATA XREF: .data:00001E80o
.rdata:00000410 $SG143470       db '    .+      ',0     ; DATA XREF: .data:00001E84o
.rdata:0000041D                 align 10h
.rdata:00000420 $SG143471       db '    @#$     ',0     ; DATA XREF: .data:00001E88o
.rdata:0000042D                 align 10h
.rdata:00000430 $SG143472       db '    %&*=    ',0     ; DATA XREF: .data:00001E8Co
.rdata:0000043D                 align 10h
.rdata:00000440 $SG143473       db '    -;>,',27h,'   ',0 ; DATA XREF: .data:00001E90o
.rdata:0000044D                 align 10h
.rdata:00000450 $SG143474       db '    )!~{]^  ',0     ; DATA XREF: .data:00001E94o
.rdata:0000045D                 align 10h
.rdata:00000460 $SG143475       db '    /(_:<[} ',0     ; DATA XREF: .data:00001E98o
.rdata:0000046D                 align 10h
.rdata:00000470 $SG143476       db '    |123456 ',0     ; DATA XREF: .data:00001E9Co
.rdata:0000047D                 align 10h
.rdata:00000480 $SG143477       db '    7890abc ',0     ; DATA XREF: .data:00001EA0o
.rdata:0000048D                 align 10h
.rdata:00000490 $SG143478       db '    defgh   ',0     ; DATA XREF: .data:00001EA4o
.rdata:0000049D                 align 10h
.rdata:000004A0 $SG143479       db '    ijkl    ',0     ; DATA XREF: .data:00001EA8o
.rdata:000004AD                 align 10h
.rdata:000004B0 $SG143480       db '    mno     ',0     ; DATA XREF: .data:00001EACo
.rdata:000004BD                 align 10h
.rdata:000004C0 $SG143481       db '    pq      ',0     ; DATA XREF: .data:00001EB0o
.rdata:000004CD                 align 10h
.rdata:000004D0 $SG143483       db '12 12 54 1',0       ; DATA XREF: .data:_acBottom_xpmo
.rdata:000004DB                 align 4
.rdata:000004DC $SG143484       db ' ',9,'c #FFFFFF',0  ; DATA XREF: .data:00001EBCo
.rdata:000004E8 $SG143485       db '.',9,'c #C4D7F3',0  ; DATA XREF: .data:00001EC0o
.rdata:000004F4 $SG143486       db '+',9,'c #72A1E3',0  ; DATA XREF: .data:00001EC4o
.rdata:00000500 $SG143487       db '@',9,'c #C1D6F2',0  ; DATA XREF: .data:00001EC8o
.rdata:0000050C $SG143488       db '#',9,'c #6397E1',0  ; DATA XREF: .data:00001ECCo
.rdata:00000518 $SG143489       db '$',9,'c #5990DD',0  ; DATA XREF: .data:00001ED0o
.rdata:00000524 $SG143490       db '%',9,'c #BBD2F0',0  ; DATA XREF: .data:00001ED4o
.rdata:00000530 $SG143491       db '&',9,'c #7AA6E5',0  ; DATA XREF: .data:00001ED8o
.rdata:0000053C $SG143492       db '*',9,'c #9ABDEA',0  ; DATA XREF: .data:00001EDCo
.rdata:00000548 $SG143493       db '=',9,'c #4A87D9',0  ; DATA XREF: .data:00001EE0o
.rdata:00000554 ; wchar_t _SG173190
.rdata:00000554 $SG173190:                              ; DATA XREF: WinMain(x,x,x,x)+75Bo
.rdata:00000554                 unicode 0, <gup.exe>,0
.rdata:00000564 $SG143494       db '-',9,'c #B1CAEE',0  ; DATA XREF: .data:00001EE4o
.rdata:00000570 $SG143495       db ';',9,'c #75A4E3',0  ; DATA XREF: .data:00001EE8o
.rdata:0000057C ; wchar_t _SG173192
.rdata:0000057C $SG173192:                              ; DATA XREF: WinMain(x,x,x,x)+77Ao
.rdata:0000057C                 unicode 0, <-v>,0
.rdata:00000582                 align 4
.rdata:00000584 $SG143496       db '>',9,'c #99BBE9',0  ; DATA XREF: .data:00001EECo
.rdata:00000590 ; wchar_t _SG173193
.rdata:00000590 $SG173193:                              ; DATA XREF: WinMain(x,x,x,x)+78Eo
.rdata:00000590                 unicode 0, <6.792>,0
.rdata:0000059C                 align 10h
.rdata:000005A0 $SG143497       db ',',9,'c #95B9E8',0  ; DATA XREF: .data:00001EF0o
.rdata:000005AC $SG143498       db 27h,9,'c #3A7CD4',0  ; DATA XREF: .data:00001EF4o
.rdata:000005B8 $SG143499       db ')',9,'c #A9C6EC',0  ; DATA XREF: .data:00001EF8o
.rdata:000005C4 $SG143500       db '!',9,'c #71A0E0',0  ; DATA XREF: .data:00001EFCo
.rdata:000005D0 ; const WCHAR COMMAND_ARG_HELP
.rdata:000005D0 _COMMAND_ARG_HELP:                      ; DATA XREF: WinMain(x,x,x,x)+314o
.rdata:000005D0                 unicode 0, <Usage :>
.rdata:000005D0                 dw 2 dup(0Dh)
.rdata:000005D0                 unicode 0, <notepad++ [--help] [-multiInst] [-noPlugin] [-lLanguage] >
.rdata:000005D0                 unicode 0, <[-LlangCode] [-nLineNumber] [-cColumnNumber] [-xLeftPos] >
.rdata:000005D0                 unicode 0, <[-yTopPos] [-nosession] [-notabbar] [-ro] [-systemtray] [>
.rdata:000005D0                 unicode 0, <-loadingTime] [-alwaysOnTop] [-openSession] [-r] [-qnEste>
.rdata:000005D0                 unicode 0, <rEggName | -qtText | -qfCntentFileName] [filePath]>
.rdata:000005D0                 dw 2 dup(0Dh)
.rdata:000005D0                 unicode 0, <    --help : This help message>
.rdata:000005D0                 dw 0Dh
.rdata:000005D0                 unicode 0, <    -multiInst : Launch another Notepad++ instance>
.rdata:000005D0                 dw 0Dh
.rdata:000005D0                 unicode 0, <    -noPlugin : Launch Notepad++ without loading any plug>
.rdata:000005D0                 unicode 0, <in>
.rdata:000005D0                 dw 0Dh
.rdata:000005D0                 unicode 0, <    -l : Open filePath by applying indicated programming >
.rdata:000005D0                 unicode 0, <language>
.rdata:000005D0                 dw 0Dh
.rdata:000005D0                 unicode 0, <    -L : Apply indicated localization, langCode is browse>
.rdata:000005D0                 unicode 0, <r language code>
.rdata:000005D0                 dw 0Dh
.rdata:000005D0                 unicode 0, <    -n : Scroll to indicated line on filePath>
.rdata:000005D0                 dw 0Dh
.rdata:000005D0                 unicode 0, <    -c : Scroll to indicated column on filePath>
.rdata:000005D0                 dw 0Dh
.rdata:000005D0                 unicode 0, <    -x : Move Notepad++ to indicated left side position o>
.rdata:000005D0                 unicode 0, <n the screen>
.rdata:000005D0                 dw 0Dh
.rdata:000005D0                 unicode 0, <    -y : Move Notepad++ to indicated top position on the >
.rdata:000005D0                 unicode 0, <screen>
.rdata:000005D0                 dw 0Dh
.rdata:000005D0                 unicode 0, <    -nosession : Launch Notepad++ without previous sessio>
.rdata:000005D0                 unicode 0, <n>
.rdata:000005D0                 dw 0Dh
.rdata:000005D0                 unicode 0, <    -notabbar : Launch Notepad++ without tabbar>
.rdata:000005D0                 dw 0Dh
.rdata:000005D0                 unicode 0, <    -ro : Make the filePath read only>
.rdata:000005D0                 dw 0Dh
.rdata:000005D0                 unicode 0, <    -systemtray : Launch Notepad++ directly in system tra>
.rdata:000005D0                 unicode 0, <y>
.rdata:000005D0                 dw 0Dh
.rdata:000005D0                 unicode 0, <    -loadingTime : Display Notepad++ loading time>
.rdata:000005D0                 dw 0Dh
.rdata:000005D0                 unicode 0, <    -alwaysOnTop : Make Notepad++ always on top>
.rdata:000005D0                 dw 0Dh
.rdata:000005D0                 unicode 0, <    -openSession : Open a session. filePath must be a ses>
.rdata:000005D0                 unicode 0, <sion file>
.rdata:000005D0                 dw 0Dh
.rdata:000005D0                 unicode 0, <    -r : Open files recursively. This argument will be ig>
.rdata:000005D0                 unicode 0, <nored>
.rdata:000005D0                 dw 0Dh
.rdata:000005D0                 unicode 0, <         if filePath contain no wildcard character>
.rdata:000005D0                 dw 0Dh
.rdata:000005D0                 unicode 0, <    -qn : Launch ghost typing to disply easter egg via it>
.rdata:000005D0                 unicode 0, <s name>
.rdata:000005D0                 dw 0Dh
.rdata:000005D0                 unicode 0, <    -qt : Launch ghost typing to display a text via the g>
.rdata:000005D0                 unicode 0, <iven text>
.rdata:000005D0                 dw 0Dh
.rdata:000005D0                 unicode 0, <    -qf : Launch ghost typing to display a file content v>
.rdata:000005D0                 unicode 0, <ia the file path>
.rdata:000005D0                 dw 0Dh
.rdata:000005D0                 unicode 0, <    filePath : file or folder name to open (absolute or r>
.rdata:000005D0                 unicode 0, <elative path name)>
.rdata:000005D0                 dw 0Dh, 0
.rdata:00001206                 align 4
.rdata:00001208 $SG143501       db '~',9,'c #86AFE5',0  ; DATA XREF: .data:00001F00o
.rdata:00001214 $SG143502       db '{',9,'c #8DB2E6',0  ; DATA XREF: .data:00001F04o
.rdata:00001220 $SG143503       db ']',9,'c #2A72CF',0  ; DATA XREF: .data:00001F08o
.rdata:0000122C $SG143504       db '^',9,'c #73A0E0',0  ; DATA XREF: .data:00001F0Co
.rdata:00001238 $SG143505       db '/',9,'c #6B9DE0',0  ; DATA XREF: .data:00001F10o
.rdata:00001244 $SG143506       db '(',9,'c #95B8E8',0  ; DATA XREF: .data:00001F14o
.rdata:00001250 $SG143507       db '_',9,'c #81ABE3',0  ; DATA XREF: .data:00001F18o
.rdata:0000125C $SG143508       db ':',9,'c #72A1DF',0  ; DATA XREF: .data:00001F1Co
.rdata:00001268 $SG143509       db '<',9,'c #83ADE3',0  ; DATA XREF: .data:00001F20o
.rdata:00001274 $SG143510       db '[',9,'c #1B65C9',0  ; DATA XREF: .data:00001F24o
.rdata:00001280 $SG143511       db '}',9,'c #5F95DC',0  ; DATA XREF: .data:00001F28o
.rdata:0000128C $SG143512       db '|',9,'c #8BB3E5',0  ; DATA XREF: .data:00001F2Co
.rdata:00001298 $SG143513       db '1',9,'c #77A4E0',0  ; DATA XREF: .data:00001F30o
.rdata:000012A4 ; const WCHAR _SG173210
.rdata:000012A4 $SG173210:                              ; DATA XREF: WinMain(x,x,x,x):loc_2A84o
.rdata:000012A4                 unicode 0, <user32.dll>,0
.rdata:000012BA                 align 4
.rdata:000012BC $SG143514       db '2',9,'c #679ADC',0  ; DATA XREF: .data:00001F34o
.rdata:000012C8 $SG143515       db '3',9,'c #7AA6E1',0  ; DATA XREF: .data:00001F38o
.rdata:000012D4 $SG143516       db '4',9,'c #195CC6',0  ; DATA XREF: .data:00001F3Co
.rdata:000012E0 $SG143517       db '5',9,'c #FCFDFE',0  ; DATA XREF: .data:00001F40o
.rdata:000012EC $SG143518       db '6',9,'c #8DB2E4',0  ; DATA XREF: .data:00001F44o
.rdata:000012F8 $SG143519       db '7',9,'c #4885D6',0  ; DATA XREF: .data:00001F48o
.rdata:00001304 $SG143520       db '8',9,'c #7CA9E1',0  ; DATA XREF: .data:00001F4Co
.rdata:00001310 $SG143521       db '9',9,'c #6698DB',0  ; DATA XREF: .data:00001F50o
.rdata:0000131C $SG143522       db '0',9,'c #71A1DE',0  ; DATA XREF: .data:00001F54o
.rdata:00001328 ; CHAR _SG173219[]
.rdata:00001328 $SG173219       db 'ChangeWindowMessageFilter',0
.rdata:00001328                                         ; DATA XREF: WinMain(x,x,x,x)+9E0o
.rdata:00001342                 align 4
.rdata:00001344 $SG143523       db 'a',9,'c #1752C0',0  ; DATA XREF: .data:00001F58o
.rdata:00001350 $SG143524       db 'b',9,'c #88ABE0',0  ; DATA XREF: .data:00001F5Co
.rdata:0000135C $SG143525       db 'c',9,'c #3D77D0',0  ; DATA XREF: .data:00001F60o
.rdata:00001368 $SG143526       db 'd',9,'c #6E9FDD',0  ; DATA XREF: .data:00001F64o
.rdata:00001374 $SG143527       db 'e',9,'c #699BDC',0  ; DATA XREF: .data:00001F68o
.rdata:00001380 $SG143528       db 'f',9,'c #1547BD',0  ; DATA XREF: .data:00001F6Co
.rdata:0000138C $SG143529       db 'g',9,'c #8DA6DE',0  ; DATA XREF: .data:00001F70o
.rdata:00001398 $SG143530       db 'h',9,'c #376BC9',0  ; DATA XREF: .data:00001F74o
.rdata:000013A4 $SG143531       db 'i',9,'c #6295DA',0  ; DATA XREF: .data:00001F78o
.rdata:000013B0 $SG143532       db 'j',9,'c #1440B9',0  ; DATA XREF: .data:00001F7Co
.rdata:000013BC $SG143533       db 'k',9,'c #8DA0DB',0  ; DATA XREF: .data:00001F80o
.rdata:000013C8 ; CHAR _SG173230[]
.rdata:000013C8 $SG173230       db 'ChangeWindowMessageFilterEx',0
.rdata:000013C8                                         ; DATA XREF: WinMain(x,x,x,x)+A17o
.rdata:000013E4 $SG143534       db 'l',9,'c #315FC4',0  ; DATA XREF: .data:00001F84o
.rdata:000013F0 $SG143535       db 'm',9,'c #1339B7',0  ; DATA XREF: .data:00001F88o
.rdata:000013FC $SG143536       db 'n',9,'c #909FDA',0  ; DATA XREF: .data:00001F8Co
.rdata:00001408 $SG143537       db 'o',9,'c #1233B4',0  ; DATA XREF: .data:00001F90o
.rdata:00001414 $SG143538       db '         .+ ',0     ; DATA XREF: .data:00001F94o
.rdata:00001421                 align 4
.rdata:00001424 $SG143539       db '        @#$ ',0     ; DATA XREF: .data:00001F98o
.rdata:00001431                 align 4
.rdata:00001434 $SG143540       db '       %&*= L',0    ; DATA XREF: .data:00001F9Co
.rdata:00001442                 align 4
.rdata:00001444 $SG143541       db '      -;>,',27h,' ',0 ; DATA XREF: .data:00001FA0o
.rdata:00001451                 align 4
.rdata:00001454 $SG143542       db '     )!>~{] ',0     ; DATA XREF: .data:00001FA4o
.rdata:00001461                 align 4
.rdata:00001464 $SG143543       db '    ^/(_:<[ ',0     ; DATA XREF: .data:00001FA8o
.rdata:00001471                 align 4
.rdata:00001474 $SG143544       db '    (}|1234 ',0     ; DATA XREF: .data:00001FACo
.rdata:00001481                 align 4
.rdata:00001484 $SG143545       db '    567890a ',0     ; DATA XREF: .data:00001FB0o
.rdata:00001491                 align 4
.rdata:00001494 $SG173242:                              ; DATA XREF: __catch$_WinMain@16$0+5o
.rdata:00001494                 unicode 0, <God Damned Exception : >,0
.rdata:000014C4 $SG143546       db '      bcdef ',0     ; DATA XREF: .data:00001FB4o
.rdata:000014D1                 align 4
.rdata:000014D4 $SG143547       db '       ghij ',0     ; DATA XREF: .data:00001FB8o
.rdata:000014E1                 align 4
.rdata:000014E4 ; const WCHAR _SG173244
.rdata:000014E4 $SG173244:                              ; DATA XREF: __catch$_WinMain@16$0+29o
.rdata:000014E4                 unicode 0, <%d>,0
.rdata:000014EA                 align 4
.rdata:000014EC $SG143548       db '        klm ',0     ; DATA XREF: .data:00001FBCo
.rdata:000014F9                 align 4
.rdata:000014FC ; const WCHAR _SG173245
.rdata:000014FC $SG173245:                              ; DATA XREF: __catch$_WinMain@16$0+3Do
.rdata:000014FC                 unicode 0, <Int Exception>,0
.rdata:00001518 $SG143549       db '         no ',0     ; DATA XREF: .data:00001FC0o
.rdata:00001525                 align 4
.rdata:00001528 ; CHAR _SG173247[]
.rdata:00001528 $SG173247       db 'Runtime Exception',0
.rdata:00001528                                         ; DATA XREF: __catch$_WinMain@16$1+2o
.rdata:0000153A                 align 4
.rdata:0000153C $SG143551       db '13 14 54 1',0       ; DATA XREF: .data:_bookmark_xpmo
.rdata:00001547                 align 4
.rdata:00001548 $SG143552       db ' ',9,'c None',0     ; DATA XREF: .data:00001FCCo
.rdata:00001551                 align 4
.rdata:00001554 $SG143553       db '.',9,'c #545254',0  ; DATA XREF: .data:00001FD0o
.rdata:00001560 $SG143554       db '+',9,'c #3C3E3C',0  ; DATA XREF: .data:00001FD4o
.rdata:0000156C $SG143555       db '@',9,'c #646464',0  ; DATA XREF: .data:00001FD8o
.rdata:00001578 ; const WCHAR _SG173252
.rdata:00001578 $SG173252:                              ; DATA XREF: __catch$_WinMain@16$2+2Co
.rdata:00001578                 unicode 0, <An exception occured. Notepad++ cannot recover and must b>
.rdata:00001578                 unicode 0, <e shut down.>
.rdata:00001578                 dw 0Dh, 0Ah
.rdata:00001578                 unicode 0, <The exception details are as follows:>
.rdata:00001578                 dw 0Dh, 0Ah
.rdata:00001578                 unicode 0, <Code:>
.rdata:00001578                 dw 9
.rdata:00001578                 unicode 0, <0x%08X>
.rdata:00001578                 dw 0Dh, 0Ah
.rdata:00001578                 unicode 0, <Type:>
.rdata:00001578                 dw 9
.rdata:00001578                 unicode 0, <%S>
.rdata:00001578                 dw 0Dh, 0Ah
.rdata:00001578                 unicode 0, <Exception address: 0x%08X>,0
.rdata:000016B8 $SG143556       db '#',9,'c #A4A4A4',0  ; DATA XREF: .data:00001FDCo
.rdata:000016C4 ; const WCHAR _SG173253
.rdata:000016C4 $SG173253:                              ; DATA XREF: __catch$_WinMain@16$2+43o
.rdata:000016C4                 unicode 0, <Win32Exception>,0
.rdata:000016E2                 align 4
.rdata:000016E4 $SG143557       db '$',9,'c #B7B8B7',0  ; DATA XREF: .data:00001FE0o
.rdata:000016F0 $SG143558       db '%',9,'c #747284',0  ; DATA XREF: .data:00001FE4o
.rdata:000016FC ; CHAR _SG173255[]
.rdata:000016FC $SG173255       db 'General Exception',0
.rdata:000016FC                                         ; DATA XREF: __catch$_WinMain@16$3+2o
.rdata:0000170E                 align 10h
.rdata:00001710 $SG143559       db '&',9,'c #B4B2C4',0  ; DATA XREF: .data:00001FE8o
.rdata:0000171C ; CHAR _SG173256[]
.rdata:0000171C $SG173256       db 'Unknown Exception',0
.rdata:0000171C                                         ; DATA XREF: __catch$_WinMain@16$4+2o
.rdata:0000172E                 align 10h
.rdata:00001730 $SG143560       db '*',9,'c #DCD7E4',0  ; DATA XREF: .data:00001FECo
.rdata:0000173C ; CHAR _SG173257[]
.rdata:0000173C $SG173257       db 'An exception that we did not yet found its name is just caught',0
.rdata:0000173C                                         ; DATA XREF: __catch$_WinMain@16$4+7o
.rdata:0000177B                 align 4
.rdata:0000177C $SG143561       db '=',9,'c #1C1A1C',0  ; DATA XREF: .data:00001FF0o
.rdata:00001788 $SG143562       db '-',9,'c #403E58',0  ; DATA XREF: .data:00001FF4o
.rdata:00001794 $SG143563       db ';',9,'c #5C5A8C',0  ; DATA XREF: .data:00001FF8o
.rdata:000017A0 $SG143564       db '>',9,'c #7C7EAC',0  ; DATA XREF: .data:00001FFCo
.rdata:000017AC $SG143565       db ',',9,'c #7C8EBC',0  ; DATA XREF: .data:00002000o
.rdata:000017B8 $SG143566       db 27h,9,'c #242644',0  ; DATA XREF: .data:00002004o
.rdata:000017C4 $SG143567       db ')',9,'c #282668',0  ; DATA XREF: .data:00002008o
.rdata:000017D0 $SG143568       db '!',9,'c #24367C',0  ; DATA XREF: .data:0000200Co
.rdata:000017DC $SG143569       db '~',9,'c #244A84',0  ; DATA XREF: .data:00002010o
.rdata:000017E8 $SG143570       db '{',9,'c #2C5098',0  ; DATA XREF: .data:00002014o
.rdata:000017F4 ; const WCHAR _SG173267
.rdata:000017F4 $SG173267:                              ; DATA XREF: doException(Notepad_plus_Window &)+32o
.rdata:000017F4                 unicode 0, <Recovery initiating>,0
.rdata:0000181C $SG143571       db ']',9,'c #14162C',0  ; DATA XREF: .data:00002018o
.rdata:00001828 ; const WCHAR _SG173268
.rdata:00001828 $SG173268:                              ; DATA XREF: doException(Notepad_plus_Window &)+37o
.rdata:00001828                 unicode 0, <Notepad++ will attempt to save any unsaved data. However,>
.rdata:00001828                 unicode 0, < dataloss is very likely.>,0
.rdata:000018CE                 align 10h
.rdata:000018D0 $SG143572       db '^',9,'c #142E7C',0  ; DATA XREF: .data:0000201Co
.rdata:000018DC $SG143573       db '/',9,'c #143789',0  ; DATA XREF: .data:00002020o
.rdata:000018E8 $SG143574       db '(',9,'c #204990',0  ; DATA XREF: .data:00002024o
.rdata:000018F4 ; wchar_t _SG173271
.rdata:000018F4 $SG173271:                              ; DATA XREF: doException(Notepad_plus_Window &)+73o
.rdata:000018F4                 unicode 0, <\N++RECOV>,0
.rdata:00001908 $SG143575       db '_',9,'c #174091',0  ; DATA XREF: .data:00002028o
.rdata:00001914 $SG143576       db ':',9,'c #0C0630',0  ; DATA XREF: .data:0000202Co
.rdata:00001920 $SG143577       db '<',9,'c #24327C',0  ; DATA XREF: .data:00002030o
.rdata:0000192C $SG143578       db '[',9,'c #2450A0',0  ; DATA XREF: .data:00002034o
.rdata:00001938 $SG143579       db '}',9,'c #345DB4',0  ; DATA XREF: .data:00002038o
.rdata:00001944 $SG143580       db '|',9,'c #3C68B8',0  ; DATA XREF: .data:0000203Co
.rdata:00001950 ; wchar_t _SG173276
.rdata:00001950 $SG173276:                              ; DATA XREF: doException(Notepad_plus_Window &)+D9o
.rdata:00001950                 unicode 0, <Notepad++ was able to successfully recover some unsaved d>
.rdata:00001950                 unicode 0, <ocuments, or nothing to be saved could be found.>
.rdata:00001950                 dw 0Dh, 0Ah
.rdata:00001950                 unicode 0, <You can find the results at :>
.rdata:00001950                 dw 0Dh, 0Ah, 0
.rdata:00001A66                 align 4
.rdata:00001A68 ; const WCHAR _SG173277
.rdata:00001A68 $SG173277:                              ; DATA XREF: doException(Notepad_plus_Window &)+101o
.rdata:00001A68                 unicode 0, <Recovery success>,0
.rdata:00001A8A                 align 4
.rdata:00001A8C $SG143581       db '1',9,'c #141244',0  ; DATA XREF: .data:00002040o
.rdata:00001A98 $SG143582       db '2',9,'c #24428C',0  ; DATA XREF: .data:00002044o
.rdata:00001AA4 ; const WCHAR _SG173279
.rdata:00001AA4 $SG173279:                              ; DATA XREF: doException(Notepad_plus_Window &)+132o
.rdata:00001AA4                 unicode 0, <Recovery failure>,0
.rdata:00001AC6                 align 4
.rdata:00001AC8 $SG143583       db '3',9,'c #3462B9',0  ; DATA XREF: .data:00002048o
.rdata:00001AD4 $SG143584       db '4',9,'c #4470C4',0  ; DATA XREF: .data:0000204Co
.rdata:00001AE0 ; const WCHAR _SG173280
.rdata:00001AE0 $SG173280:                              ; DATA XREF: doException(Notepad_plus_Window &)+137o
.rdata:00001AE0                 unicode 0, <Unfortunatly, Notepad++ was not able to save your work. W>
.rdata:00001AE0                 unicode 0, <e are sorry for any lost data.>,0
.rdata:00001B90 $SG143585       db '5',9,'c #4C7FD6',0  ; DATA XREF: .data:00002050o
.rdata:00001B9C $SG143586       db '6',9,'c #4472CC',0  ; DATA XREF: .data:00002054o
.rdata:00001BA8 $SG143587       db '7',9,'c #24224C',0  ; DATA XREF: .data:00002058o
.rdata:00001BB4 $SG143588       db '8',9,'c #5C8DEC',0  ; DATA XREF: .data:0000205Co
.rdata:00001BC0 $SG143589       db '9',9,'c #5C94F6',0  ; DATA XREF: .data:00002060o
.rdata:00001BCC $SG143590       db '0',9,'c #5482DF',0  ; DATA XREF: .data:00002064o
.rdata:00001BD8 $SG143591       db 'a',9,'c #619DF7',0  ; DATA XREF: .data:00002068o
.rdata:00001BE4 $SG143592       db 'b',9,'c #6CA6FC',0  ; DATA XREF: .data:0000206Co
.rdata:00001BF0 $SG143593       db 'c',9,'c #64A2FC',0  ; DATA XREF: .data:00002070o
.rdata:00001BFC $SG143594       db 'd',9,'c #1C2E5C',0  ; DATA XREF: .data:00002074o
.rdata:00001C08 $SG143595       db 'e',9,'c #6CA2FC',0  ; DATA XREF: .data:00002078o
.rdata:00001C14 $SG143596       db 'f',9,'c #74B2FC',0  ; DATA XREF: .data:0000207Co
.rdata:00001C20 $SG143597       db 'g',9,'c #7CB8FC',0  ; DATA XREF: .data:00002080o
.rdata:00001C2C $SG143598       db 'h',9,'c #1C3264',0  ; DATA XREF: .data:00002084o
.rdata:00001C38 $SG143599       db 'i',9,'c #346AD4',0  ; DATA XREF: .data:00002088o
.rdata:00001C44 $SG143600       db 'j',9,'c #7CBEFC',0  ; DATA XREF: .data:0000208Co
.rdata:00001C50 $SG143601       db 'k',9,'c #3C72DC',0  ; DATA XREF: .data:00002090o
.rdata:00001C5C $SG143602       db 'l',9,'c #243250',0  ; DATA XREF: .data:00002094o
.rdata:00001C68 $SG143603       db 'm',9,'c #346AB4',0  ; DATA XREF: .data:00002098o
.rdata:00001C74 $SG143604       db 'n',9,'c #3C82DC',0  ; DATA XREF: .data:0000209Co
.rdata:00001C80 $SG143605       db 'o',9,'c #6C6A6C',0  ; DATA XREF: .data:000020A0o
.rdata:00001C8C $SG143606       db '     .+.     ',0    ; DATA XREF: .data:000020A4o
.rdata:00001C9A                 align 4
.rdata:00001C9C $SG143607       db '   @##$##@   ',0    ; DATA XREF: .data:000020A8o
.rdata:00001CAA                 align 4
.rdata:00001CAC $SG143608       db '  @%&***&%@  ',0    ; DATA XREF: .data:000020ACo
.rdata:00001CBA                 align 4
.rdata:00001CBC $SG143609       db ' =-;>,,,>;-= ',0    ; DATA XREF: .data:000020B0o
.rdata:00001CCA                 align 4
.rdata:00001CCC $SG143610       db ' ',27h,')!~{{{~!)',27h,' ',0
.rdata:00001CCC                                         ; DATA XREF: .data:000020B4o
.rdata:00001CDA                 align 4
.rdata:00001CDC $SG143611       db '])^/({{{(_^)]',0    ; DATA XREF: .data:000020B8o
.rdata:00001CEA                 align 4
.rdata:00001CEC $SG143612       db ':<_[}|||}[_<:',0    ; DATA XREF: .data:000020BCo
.rdata:00001CFA                 align 4
.rdata:00001CFC $SG143613       db '12[3455563[21',0    ; DATA XREF: .data:000020C0o
.rdata:00001D0A                 align 4
.rdata:00001D0C $SG143614       db '7_365899063_7',0    ; DATA XREF: .data:000020C4o
.rdata:00001D1A                 align 4
.rdata:00001D1C $SG143615       db ' /|09abc904/ ',0    ; DATA XREF: .data:000020C8o
.rdata:00001D2A                 align 4
.rdata:00001D2C $SG143616       db ' d}8efgfb83d ',0    ; DATA XREF: .data:000020CCo
.rdata:00001D3A                 align 4
.rdata:00001D3C $SG143617       db '  hiafjgakh  ',0    ; DATA XREF: .data:000020D0o
.rdata:00001D4A                 align 4
.rdata:00001D4C $SG143618       db '   l~mnm~l   ',0    ; DATA XREF: .data:000020D4o
.rdata:00001D5A                 align 4
.rdata:00001D5C $SG143619       db '     o@o     ',0    ; DATA XREF: .data:000020D8o
.rdata:00001D6A                 align 4
.rdata:00001D6C ; wchar_t _SG172893
.rdata:00001D6C $SG172893       dw 0                    ; DATA XREF: getParamVal(wchar_t,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+25o
.rdata:00001D6E                 db    0
.rdata:00001D6F                 db    0
.rdata:00001D70 ; wchar_t _SG172910
.rdata:00001D70 $SG172910       dw 0                    ; DATA XREF: getParamValFromString(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+28o
.rdata:00001D72                 db    0
.rdata:00001D73                 db    0
.rdata:00001D74 ; wchar_t _SG172938
.rdata:00001D74 $SG172938       dw 0                    ; DATA XREF: getLocalizationPathFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+57o
.rdata:00001D76                 db    0
.rdata:00001D77                 db    0
.rdata:00001D78 ; const WCHAR _SG172957
.rdata:00001D78 $SG172957:                              ; DATA XREF: getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &)+4Co
.rdata:00001D78                 unicode 0, <-qn>,0
.rdata:00001D80 ; const WCHAR _SG172959
.rdata:00001D80 $SG172959:                              ; DATA XREF: getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &)+6Co
.rdata:00001D80                 unicode 0, <-qt>,0
.rdata:00001D88 ; const WCHAR _SG172961
.rdata:00001D88 $SG172961:                              ; DATA XREF: getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &)+8Co
.rdata:00001D88                 unicode 0, <-qf>,0
.rdata:00001D90 ; wchar_t _SG172962
.rdata:00001D90 $SG172962       dw 0                    ; DATA XREF: getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &)+A0o
.rdata:00001D92                 db    0
.rdata:00001D93                 db    0
.rdata:00001D94 ; wchar_t _SG172968
.rdata:00001D94 $SG172968:                              ; DATA XREF: getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &):loc_389Ao
.rdata:00001D94                 unicode 0, <%20>,0
.rdata:00001D9C ; wchar_t _SG172970
.rdata:00001D9C $SG172970       dd offset _FLAG_NO_PLUGIN+8
.rdata:00001D9C                                         ; DATA XREF: getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &)+13Fo
.rdata:00001D9C _rdata          ends                    ; "lugin"
.rdata:00001D9C
.data:00001DA0 ; ===========================================================================
.data:00001DA0
.data:00001DA0 ; Segment type: Pure data
.data:00001DA0 ; Segment permissions: Read/Write
.data:00001DA0 ; Segment alignment 'qword' can not be represented in assembly
.data:00001DA0 _data           segment para public 'DATA' use32
.data:00001DA0                 assume cs:_data
.data:00001DA0                 ;org 1DA0h
.data:00001DA0 _acTop_xpm      dd offset $SG143413     ; "12 12 56 1"
.data:00001DA4                 dd offset $SG143414     ; " \tc #FFFFFF"
.data:00001DA8                 dd offset $SG143415     ; ".\tc #8AB2E9"
.data:00001DAC                 dd offset $SG143416     ; "+\tc #CCDCF6"
.data:00001DB0                 dd offset $SG143417     ; "@\tc #80ABEA"
.data:00001DB4                 dd offset $SG143418     ; "#\tc #7DA9E8"
.data:00001DB8                 dd offset $SG143419     ; "$\tc #C7DAF3"
.data:00001DBC                 dd offset $SG143420     ; "%\tc #79A7E6"
.data:00001DC0                 dd offset $SG143421     ; "&\tc #ADC8EF"
.data:00001DC4                 dd offset $SG143422     ; "*\tc #87B0E8"
.data:00001DC8                 dd offset $SG143423     ; "=\tc #BBD2F0"
.data:00001DCC                 dd offset $SG143424     ; "-\tc #6EA0E2"
.data:00001DD0                 dd offset $SG143425     ; ";\tc #A8C7EE"
.data:00001DD4                 dd offset $SG143426     ; ">\tc #A3C2ED"
.data:00001DD8                 dd offset $SG143427     ; ",\tc #75A4E3"
.data:00001DDC                 dd offset $SG143428     ; "'\tc #A7C4EB"
.data:00001DE0                 dd offset $SG143429     ; ")\tc #6297E1"
.data:00001DE4                 dd offset $SG143430     ; "!\tc #A1C1EC"
.data:00001DE8                 dd offset $SG143431     ; "~\tc #92B7E8"
.data:00001DEC                 dd offset $SG143432     ; "{\tc #99BBE9"
.data:00001DF0                 dd offset $SG143433     ; "]\tc #6197DD"
.data:00001DF4                 dd offset $SG143434     ; "^\tc #96B9E6"
.data:00001DF8                 dd offset $SG143435     ; "/\tc #538EDB"
.data:00001DFC                 dd offset $SG143436     ; "(\tc #99BBEA"
.data:00001E00                 dd offset $SG143437     ; "_\tc #80AAE3"
.data:00001E04                 dd offset $SG143438     ; ":\tc #81ABE3"
.data:00001E08                 dd offset $SG143439     ; "<\tc #8AB1E4"
.data:00001E0C                 dd offset $SG143440     ; "[\tc #4B88D6"
.data:00001E10                 dd offset $SG143441     ; "}\tc #4882D1"
.data:00001E14                 dd offset $SG143442     ; "|\tc #4384D6"
.data:00001E18                 dd offset $SG143443     ; "1\tc #90B5E7"
.data:00001E1C                 dd offset $SG143444     ; "2\tc #74A3E0"
.data:00001E20                 dd offset $SG143445     ; "3\tc #77A4E0"
.data:00001E24                 dd offset $SG143446     ; "4\tc #81ABE2"
.data:00001E28                 dd offset $SG143447     ; "5\tc #437FD3"
.data:00001E2C                 dd offset $SG143448     ; "6\tc #7FA2DF"
.data:00001E30                 dd offset $SG143449     ; "7\tc #3577D2"
.data:00001E34                 dd offset $SG143450     ; "8\tc #87AFE4"
.data:00001E38                 dd offset $SG143451     ; "9\tc #72A1DF"
.data:00001E3C                 dd offset $SG143452     ; "0\tc #7CA9E1"
.data:00001E40                 dd offset $SG143453     ; "a\tc #3F7AD0"
.data:00001E44                 dd offset $SG143454     ; "b\tc #85A4DE"
.data:00001E48                 dd offset $SG143455     ; "c\tc #FBFCFE"
.data:00001E4C                 dd offset $SG143456     ; "d\tc #236ECD"
.data:00001E50                 dd offset $SG143457     ; "e\tc #7EA8E1"
.data:00001E54                 dd offset $SG143458     ; "f\tc #79A6E0"
.data:00001E58                 dd offset $SG143459     ; "g\tc #3D77D0"
.data:00001E5C                 dd offset $SG143460     ; "h\tc #87A4DC"
.data:00001E60                 dd offset $SG143461     ; "i\tc #1A62C9"
.data:00001E64                 dd offset $SG143462     ; "j\tc #75A3DF"
.data:00001E68                 dd offset $SG143463     ; "k\tc #3C74CF"
.data:00001E6C                 dd offset $SG143464     ; "l\tc #8DA6DE"
.data:00001E70                 dd offset $SG143465     ; "m\tc #1859C4"
.data:00001E74                 dd offset $SG143466     ; "n\tc #3B71CC"
.data:00001E78                 dd offset $SG143467     ; "o\tc #8EA5DD"
.data:00001E7C                 dd offset $SG143468     ; "p\tc #164EC0"
.data:00001E80                 dd offset $SG143469     ; "q\tc #92A7DD"
.data:00001E84                 dd offset $SG143470     ; "    .+      "
.data:00001E88                 dd offset $SG143471     ; "    @#$     "
.data:00001E8C                 dd offset $SG143472     ; "    %&*=    "
.data:00001E90                 dd offset $SG143473     ; "    -;>,'   "
.data:00001E94                 dd offset $SG143474     ; "    )!~{]^  "
.data:00001E98                 dd offset $SG143475     ; "    /(_:<[} "
.data:00001E9C                 dd offset $SG143476     ; "    |123456 "
.data:00001EA0                 dd offset $SG143477     ; "    7890abc "
.data:00001EA4                 dd offset $SG143478     ; "    defgh   "
.data:00001EA8                 dd offset $SG143479     ; "    ijkl    "
.data:00001EAC                 dd offset $SG143480     ; "    mno     "
.data:00001EB0                 dd offset $SG143481     ; "    pq      "
.data:00001EB4                 align 8
.data:00001EB8 _acBottom_xpm   dd offset $SG143483     ; "12 12 54 1"
.data:00001EBC                 dd offset $SG143484     ; " \tc #FFFFFF"
.data:00001EC0                 dd offset $SG143485     ; ".\tc #C4D7F3"
.data:00001EC4                 dd offset $SG143486     ; "+\tc #72A1E3"
.data:00001EC8                 dd offset $SG143487     ; "@\tc #C1D6F2"
.data:00001ECC                 dd offset $SG143488     ; "#\tc #6397E1"
.data:00001ED0                 dd offset $SG143489     ; "$\tc #5990DD"
.data:00001ED4                 dd offset $SG143490     ; "%\tc #BBD2F0"
.data:00001ED8                 dd offset $SG143491     ; "&\tc #7AA6E5"
.data:00001EDC                 dd offset $SG143492     ; "*\tc #9ABDEA"
.data:00001EE0                 dd offset $SG143493     ; "=\tc #4A87D9"
.data:00001EE4                 dd offset $SG143494     ; "-\tc #B1CAEE"
.data:00001EE8                 dd offset $SG143495     ; ";\tc #75A4E3"
.data:00001EEC                 dd offset $SG143496     ; ">\tc #99BBE9"
.data:00001EF0                 dd offset $SG143497     ; ",\tc #95B9E8"
.data:00001EF4                 dd offset $SG143498     ; "'\tc #3A7CD4"
.data:00001EF8                 dd offset $SG143499     ; ")\tc #A9C6EC"
.data:00001EFC                 dd offset $SG143500     ; "!\tc #71A0E0"
.data:00001F00                 dd offset $SG143501     ; "~\tc #86AFE5"
.data:00001F04                 dd offset $SG143502     ; "{\tc #8DB2E6"
.data:00001F08                 dd offset $SG143503     ; "]\tc #2A72CF"
.data:00001F0C                 dd offset $SG143504     ; "^\tc #73A0E0"
.data:00001F10                 dd offset $SG143505     ; "/\tc #6B9DE0"
.data:00001F14                 dd offset $SG143506     ; "(\tc #95B8E8"
.data:00001F18                 dd offset $SG143507     ; "_\tc #81ABE3"
.data:00001F1C                 dd offset $SG143508     ; ":\tc #72A1DF"
.data:00001F20                 dd offset $SG143509     ; "<\tc #83ADE3"
.data:00001F24                 dd offset $SG143510     ; "[\tc #1B65C9"
.data:00001F28                 dd offset $SG143511     ; "}\tc #5F95DC"
.data:00001F2C                 dd offset $SG143512     ; "|\tc #8BB3E5"
.data:00001F30                 dd offset $SG143513     ; "1\tc #77A4E0"
.data:00001F34                 dd offset $SG143514     ; "2\tc #679ADC"
.data:00001F38                 dd offset $SG143515     ; "3\tc #7AA6E1"
.data:00001F3C                 dd offset $SG143516     ; "4\tc #195CC6"
.data:00001F40                 dd offset $SG143517     ; "5\tc #FCFDFE"
.data:00001F44                 dd offset $SG143518     ; "6\tc #8DB2E4"
.data:00001F48                 dd offset $SG143519     ; "7\tc #4885D6"
.data:00001F4C                 dd offset $SG143520     ; "8\tc #7CA9E1"
.data:00001F50                 dd offset $SG143521     ; "9\tc #6698DB"
.data:00001F54                 dd offset $SG143522     ; "0\tc #71A1DE"
.data:00001F58                 dd offset $SG143523     ; "a\tc #1752C0"
.data:00001F5C                 dd offset $SG143524     ; "b\tc #88ABE0"
.data:00001F60                 dd offset $SG143525     ; "c\tc #3D77D0"
.data:00001F64                 dd offset $SG143526     ; "d\tc #6E9FDD"
.data:00001F68                 dd offset $SG143527     ; "e\tc #699BDC"
.data:00001F6C                 dd offset $SG143528     ; "f\tc #1547BD"
.data:00001F70                 dd offset $SG143529     ; "g\tc #8DA6DE"
.data:00001F74                 dd offset $SG143530     ; "h\tc #376BC9"
.data:00001F78                 dd offset $SG143531     ; "i\tc #6295DA"
.data:00001F7C                 dd offset $SG143532     ; "j\tc #1440B9"
.data:00001F80                 dd offset $SG143533     ; "k\tc #8DA0DB"
.data:00001F84                 dd offset $SG143534     ; "l\tc #315FC4"
.data:00001F88                 dd offset $SG143535     ; "m\tc #1339B7"
.data:00001F8C                 dd offset $SG143536     ; "n\tc #909FDA"
.data:00001F90                 dd offset $SG143537     ; "o\tc #1233B4"
.data:00001F94                 dd offset $SG143538     ; "         .+ "
.data:00001F98                 dd offset $SG143539     ; "        @#$ "
.data:00001F9C                 dd offset $SG143540     ; "       %&*= L"
.data:00001FA0                 dd offset $SG143541     ; "      -;>,' "
.data:00001FA4                 dd offset $SG143542     ; "     )!>~{] "
.data:00001FA8                 dd offset $SG143543     ; "    ^/(_:<[ "
.data:00001FAC                 dd offset $SG143544     ; "    (}|1234 "
.data:00001FB0                 dd offset $SG143545     ; "    567890a "
.data:00001FB4                 dd offset $SG143546     ; "      bcdef "
.data:00001FB8                 dd offset $SG143547     ; "       ghij "
.data:00001FBC                 dd offset $SG143548     ; "        klm "
.data:00001FC0                 dd offset $SG143549     ; "         no "
.data:00001FC4                 align 8
.data:00001FC8 _bookmark_xpm   dd offset $SG143551     ; "13 14 54 1"
.data:00001FCC                 dd offset $SG143552     ; " \tc None"
.data:00001FD0                 dd offset $SG143553     ; ".\tc #545254"
.data:00001FD4                 dd offset $SG143554     ; "+\tc #3C3E3C"
.data:00001FD8                 dd offset $SG143555     ; "@\tc #646464"
.data:00001FDC                 dd offset $SG143556     ; "#\tc #A4A4A4"
.data:00001FE0                 dd offset $SG143557     ; "$\tc #B7B8B7"
.data:00001FE4                 dd offset $SG143558     ; "%\tc #747284"
.data:00001FE8                 dd offset $SG143559     ; "&\tc #B4B2C4"
.data:00001FEC                 dd offset $SG143560     ; "*\tc #DCD7E4"
.data:00001FF0                 dd offset $SG143561     ; "=\tc #1C1A1C"
.data:00001FF4                 dd offset $SG143562     ; "-\tc #403E58"
.data:00001FF8                 dd offset $SG143563     ; ";\tc #5C5A8C"
.data:00001FFC                 dd offset $SG143564     ; ">\tc #7C7EAC"
.data:00002000                 dd offset $SG143565     ; ",\tc #7C8EBC"
.data:00002004                 dd offset $SG143566     ; "'\tc #242644"
.data:00002008                 dd offset $SG143567     ; ")\tc #282668"
.data:0000200C                 dd offset $SG143568     ; "!\tc #24367C"
.data:00002010                 dd offset $SG143569     ; "~\tc #244A84"
.data:00002014                 dd offset $SG143570     ; "{\tc #2C5098"
.data:00002018                 dd offset $SG143571     ; "]\tc #14162C"
.data:0000201C                 dd offset $SG143572     ; "^\tc #142E7C"
.data:00002020                 dd offset $SG143573     ; "/\tc #143789"
.data:00002024                 dd offset $SG143574     ; "(\tc #204990"
.data:00002028                 dd offset $SG143575     ; "_\tc #174091"
.data:0000202C                 dd offset $SG143576     ; ":\tc #0C0630"
.data:00002030                 dd offset $SG143577     ; "<\tc #24327C"
.data:00002034                 dd offset $SG143578     ; "[\tc #2450A0"
.data:00002038                 dd offset $SG143579     ; "}\tc #345DB4"
.data:0000203C                 dd offset $SG143580     ; "|\tc #3C68B8"
.data:00002040                 dd offset $SG143581     ; "1\tc #141244"
.data:00002044                 dd offset $SG143582     ; "2\tc #24428C"
.data:00002048                 dd offset $SG143583     ; "3\tc #3462B9"
.data:0000204C                 dd offset $SG143584     ; "4\tc #4470C4"
.data:00002050                 dd offset $SG143585     ; "5\tc #4C7FD6"
.data:00002054                 dd offset $SG143586     ; "6\tc #4472CC"
.data:00002058                 dd offset $SG143587     ; "7\tc #24224C"
.data:0000205C                 dd offset $SG143588     ; "8\tc #5C8DEC"
.data:00002060                 dd offset $SG143589     ; "9\tc #5C94F6"
.data:00002064                 dd offset $SG143590     ; "0\tc #5482DF"
.data:00002068                 dd offset $SG143591     ; "a\tc #619DF7"
.data:0000206C                 dd offset $SG143592     ; "b\tc #6CA6FC"
.data:00002070                 dd offset $SG143593     ; "c\tc #64A2FC"
.data:00002074                 dd offset $SG143594     ; "d\tc #1C2E5C"
.data:00002078                 dd offset $SG143595     ; "e\tc #6CA2FC"
.data:0000207C                 dd offset $SG143596     ; "f\tc #74B2FC"
.data:00002080                 dd offset $SG143597     ; "g\tc #7CB8FC"
.data:00002084                 dd offset $SG143598     ; "h\tc #1C3264"
.data:00002088                 dd offset $SG143599     ; "i\tc #346AD4"
.data:0000208C                 dd offset $SG143600     ; "j\tc #7CBEFC"
.data:00002090                 dd offset $SG143601     ; "k\tc #3C72DC"
.data:00002094                 dd offset $SG143602     ; "l\tc #243250"
.data:00002098                 dd offset $SG143603     ; "m\tc #346AB4"
.data:0000209C                 dd offset $SG143604     ; "n\tc #3C82DC"
.data:000020A0                 dd offset $SG143605     ; "o\tc #6C6A6C"
.data:000020A4                 dd offset $SG143606     ; "     .+.     "
.data:000020A8                 dd offset $SG143607     ; "   @##$##@   "
.data:000020AC                 dd offset $SG143608     ; "  @%&***&%@  "
.data:000020B0                 dd offset $SG143609     ; " =-;>,,,>;-= "
.data:000020B4                 dd offset $SG143610     ; " ')!~{{{~!)' "
.data:000020B8                 dd offset $SG143611     ; "])^/({{{(_^)]"
.data:000020BC                 dd offset $SG143612     ; ":<_[}|||}[_<:"
.data:000020C0                 dd offset $SG143613     ; "12[3455563[21"
.data:000020C4                 dd offset $SG143614     ; "7_365899063_7"
.data:000020C8                 dd offset $SG143615     ; " /|09abc904/ "
.data:000020CC                 dd offset $SG143616     ; " d}8efgfb83d "
.data:000020D0                 dd offset $SG143617     ; "  hiafjgakh  "
.data:000020D4                 dd offset $SG143618     ; "   l~mnm~l   "
.data:000020D8                 dd offset $SG143619     ; "     o@o     "
.data:000020D8 _data           ends
.data:000020D8
.text$mn:000020DC ; ===========================================================================
.text$mn:000020DC
.text$mn:000020DC ; Segment type: Pure code
.text$mn:000020DC ; Segment permissions: Read/Execute
.text$mn:000020DC _text$mn        segment para public 'CODE' use32
.text$mn:000020DC                 assume cs:_text$mn
.text$mn:000020DC                 ;org 20DCh
.text$mn:000020DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000020DC
.text$mn:000020DC ; =============== S U B R O U T I N E =======================================
.text$mn:000020DC
.text$mn:000020DC ; Attributes: bp-based frame
.text$mn:000020DC
.text$mn:000020DC ; int __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)
.text$mn:000020DC                 public _WinMain@16
.text$mn:000020DC _WinMain@16     proc near
.text$mn:000020DC
.text$mn:000020DC var_55D10       = byte ptr -55D10h
.text$mn:000020DC var_55D04       = byte ptr -55D04h
.text$mn:000020DC var_55CF8       = dword ptr -55CF8h
.text$mn:000020DC var_55CF4       = dword ptr -55CF4h
.text$mn:000020DC var_55CF0       = dword ptr -55CF0h
.text$mn:000020DC var_55CE8       = dword ptr -55CE8h
.text$mn:000020DC Msg             = tagMSG ptr -55CE4h
.text$mn:000020DC lParam          = dword ptr -55CC8h
.text$mn:000020DC var_55CC4       = dword ptr -55CC4h
.text$mn:000020DC var_55CC0       = dword ptr -55CC0h
.text$mn:000020DC var_55CBC       = dword ptr -55CBCh
.text$mn:000020DC var_55CB8       = dword ptr -55CB8h
.text$mn:000020DC var_55CB4       = dword ptr -55CB4h
.text$mn:000020DC var_55CAC       = dword ptr -55CACh
.text$mn:000020DC var_55CA8       = dword ptr -55CA8h
.text$mn:000020DC var_55CA4       = dword ptr -55CA4h
.text$mn:000020DC var_55CA0       = dword ptr -55CA0h
.text$mn:000020DC var_55C98       = dword ptr -55C98h
.text$mn:000020DC var_55C94       = dword ptr -55C94h
.text$mn:000020DC var_55C90       = dword ptr -55C90h
.text$mn:000020DC var_55C8C       = dword ptr -55C8Ch
.text$mn:000020DC lpString        = dword ptr -55C88h
.text$mn:000020DC var_55C84       = dword ptr -55C84h
.text$mn:000020DC var_55C80       = dword ptr -55C80h
.text$mn:000020DC var_55C78       = dword ptr -55C78h
.text$mn:000020DC var_55C74       = dword ptr -55C74h
.text$mn:000020DC var_55C70       = dword ptr -55C70h
.text$mn:000020DC var_55C6C       = dword ptr -55C6Ch
.text$mn:000020DC var_55C68       = dword ptr -55C68h
.text$mn:000020DC var_55C64       = dword ptr -55C64h
.text$mn:000020DC var_55C60       = dword ptr -55C60h
.text$mn:000020DC hModule         = dword ptr -55C5Ch
.text$mn:000020DC var_55C58       = dword ptr -55C58h
.text$mn:000020DC var_55C54       = dword ptr -55C54h
.text$mn:000020DC var_55C50       = dword ptr -55C50h
.text$mn:000020DC nCmdShow        = dword ptr -55C4Ch
.text$mn:000020DC var_55C48       = dword ptr -55C48h
.text$mn:000020DC var_55C40       = dword ptr -55C40h
.text$mn:000020DC var_55C2D       = byte ptr -55C2Dh
.text$mn:000020DC var_55C2C       = byte ptr -55C2Ch
.text$mn:000020DC var_55C2B       = byte ptr -55C2Bh
.text$mn:000020DC var_55C2A       = byte ptr -55C2Ah
.text$mn:000020DC var_55C29       = byte ptr -55C29h
.text$mn:000020DC var_55C28       = dword ptr -55C28h
.text$mn:000020DC var_55C24       = dword ptr -55C24h
.text$mn:000020DC hWnd            = dword ptr -55C20h
.text$mn:000020DC var_55C1C       = byte ptr -55C1Ch
.text$mn:000020DC var_55C1B       = byte ptr -55C1Bh
.text$mn:000020DC var_55C1A       = byte ptr -55C1Ah
.text$mn:000020DC var_55C19       = byte ptr -55C19h
.text$mn:000020DC var_55C18       = byte ptr -55C18h
.text$mn:000020DC var_A1C         = byte ptr -0A1Ch
.text$mn:000020DC var_9C8         = byte ptr -9C8h
.text$mn:000020DC var_9AC         = byte ptr -9ACh
.text$mn:000020DC var_990         = byte ptr -990h
.text$mn:000020DC var_974         = byte ptr -974h
.text$mn:000020DC var_958         = dword ptr -958h
.text$mn:000020DC var_93C         = byte ptr -93Ch
.text$mn:000020DC var_920         = dword ptr -920h
.text$mn:000020DC var_904         = byte ptr -904h
.text$mn:000020DC var_903         = byte ptr -903h
.text$mn:000020DC var_902         = byte ptr -902h
.text$mn:000020DC var_901         = byte ptr -901h
.text$mn:000020DC var_900         = byte ptr -900h
.text$mn:000020DC var_8FF         = byte ptr -8FFh
.text$mn:000020DC var_8FE         = byte ptr -8FEh
.text$mn:000020DC var_8FC         = dword ptr -8FCh
.text$mn:000020DC var_8F8         = dword ptr -8F8h
.text$mn:000020DC var_8F4         = dword ptr -8F4h
.text$mn:000020DC var_8F0         = dword ptr -8F0h
.text$mn:000020DC var_8EC         = byte ptr -8ECh
.text$mn:000020DC var_8EB         = byte ptr -8EBh
.text$mn:000020DC var_8EA         = byte ptr -8EAh
.text$mn:000020DC var_8E9         = byte ptr -8E9h
.text$mn:000020DC var_8E8         = dword ptr -8E8h
.text$mn:000020DC var_8E4         = dword ptr -8E4h
.text$mn:000020DC var_8C8         = byte ptr -8C8h
.text$mn:000020DC var_8AC         = byte ptr -8ACh
.text$mn:000020DC var_8A8         = byte ptr -8A8h
.text$mn:000020DC var_14          = dword ptr -14h
.text$mn:000020DC var_10          = dword ptr -10h
.text$mn:000020DC var_C           = dword ptr -0Ch
.text$mn:000020DC var_4           = dword ptr -4
.text$mn:000020DC hInstance       = dword ptr  8
.text$mn:000020DC hPrevInstance   = dword ptr  0Ch
.text$mn:000020DC lpCmdLine       = dword ptr  10h
.text$mn:000020DC nShowCmd        = dword ptr  14h
.text$mn:000020DC
.text$mn:000020DC ; FUNCTION CHUNK AT .text$mn:00002D90 SIZE 00000009 BYTES
.text$mn:000020DC ; FUNCTION CHUNK AT .text$mn:00002E4A SIZE 0000001E BYTES
.text$mn:000020DC
.text$mn:000020DC                 push    ebp
.text$mn:000020DD                 mov     ebp, esp
.text$mn:000020DF                 push    0FFFFFFFFh
.text$mn:000020E1                 push    offset __ehhandler$_WinMain@16
.text$mn:000020E6                 mov     eax, large fs:0
.text$mn:000020EC                 push    eax
.text$mn:000020ED                 push    ecx
.text$mn:000020EE                 mov     eax, 55D00h
.text$mn:000020F3                 call    __chkstk
.text$mn:000020F8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000020FD                 xor     eax, ebp
.text$mn:000020FF                 mov     [ebp+var_14], eax
.text$mn:00002102                 push    ebx
.text$mn:00002103                 push    esi
.text$mn:00002104                 push    edi
.text$mn:00002105                 push    eax
.text$mn:00002106                 lea     eax, [ebp+var_C]
.text$mn:00002109                 mov     large fs:0, eax
.text$mn:0000210F                 mov     [ebp+var_10], esp
.text$mn:00002112                 call    dword ptr ds:__imp__GetCommandLineW@0 ; GetCommandLineW()
.text$mn:00002118                 mov     [ebp+lpString], eax
.text$mn:0000211E                 lea     ecx, [ebp+var_55C40]
.text$mn:00002124                 call    ??0?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::vector<wchar_t const *,std::allocator<wchar_t const *>>(void)
.text$mn:00002129                 mov     [ebp+var_4], 0
.text$mn:00002130                 lea     eax, [ebp+var_55C40]
.text$mn:00002136                 push    eax             ; int
.text$mn:00002137                 mov     ecx, [ebp+lpString]
.text$mn:0000213D                 push    ecx             ; lpString
.text$mn:0000213E                 call    ?parseCommandLine@@YAXPA_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z ; parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)
.text$mn:00002143                 add     esp, 8
.text$mn:00002146                 lea     ecx, [ebp+var_55C2D] ; this
.text$mn:0000214C                 call    ??0MiniDumper@@QAE@XZ ; MiniDumper::MiniDumper(void)
.text$mn:00002151                 mov     [ebp+var_55C19], 1
.text$mn:00002158                 push    0               ; dwErrCode
.text$mn:0000215A                 call    dword ptr ds:__imp__SetLastError@4 ; SetLastError(x)
.text$mn:00002160                 push    offset $SG173087 ; "nppInstance"
.text$mn:00002165                 push    0               ; bInitialOwner
.text$mn:00002167                 push    0               ; lpMutexAttributes
.text$mn:00002169                 call    dword ptr ds:__imp__CreateMutexW@12 ; CreateMutexW(x,x,x)
.text$mn:0000216F                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text$mn:00002175                 cmp     eax, 0B7h ; '+'
.text$mn:0000217A                 jnz     short loc_2183
.text$mn:0000217C                 mov     [ebp+var_55C19], 0
.text$mn:00002183
.text$mn:00002183 loc_2183:                               ; CODE XREF: WinMain(x,x,x,x)+9Ej
.text$mn:00002183                 lea     edx, [ebp+var_55C40]
.text$mn:00002189                 push    edx             ; int
.text$mn:0000218A                 push    offset _FLAG_HELP ; "--help"
.text$mn:0000218F                 call    ?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z ; isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)
.text$mn:00002194                 add     esp, 8
.text$mn:00002197                 mov     [ebp+var_55C2B], al
.text$mn:0000219D                 lea     eax, [ebp+var_55C40]
.text$mn:000021A3                 push    eax             ; int
.text$mn:000021A4                 push    offset _FLAG_MULTI_INSTANCE ; "-multiInst"
.text$mn:000021A9                 call    ?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z ; isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)
.text$mn:000021AE                 add     esp, 8
.text$mn:000021B1                 mov     [ebp+var_55C1C], al
.text$mn:000021B7                 lea     ecx, [ebp+var_904]
.text$mn:000021BD                 call    ??0CmdLineParams@@QAE@XZ ; CmdLineParams::CmdLineParams(void)
.text$mn:000021C2                 mov     byte ptr [ebp+var_4], 1
.text$mn:000021C6                 lea     ecx, [ebp+var_55C40]
.text$mn:000021CC                 push    ecx             ; int
.text$mn:000021CD                 push    offset _FLAG_NOTABBAR ; "-notabbar"
.text$mn:000021D2                 call    ?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z ; isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)
.text$mn:000021D7                 add     esp, 8
.text$mn:000021DA                 mov     [ebp+var_901], al
.text$mn:000021E0                 lea     edx, [ebp+var_55C40]
.text$mn:000021E6                 push    edx             ; int
.text$mn:000021E7                 push    offset _FLAG_NO_PLUGIN ; "-noPlugin"
.text$mn:000021EC                 call    ?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z ; isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)
.text$mn:000021F1                 add     esp, 8
.text$mn:000021F4                 mov     [ebp+var_904], al
.text$mn:000021FA                 lea     eax, [ebp+var_55C40]
.text$mn:00002200                 push    eax             ; int
.text$mn:00002201                 push    offset _FLAG_READONLY ; "-ro"
.text$mn:00002206                 call    ?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z ; isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)
.text$mn:0000220B                 add     esp, 8
.text$mn:0000220E                 mov     [ebp+var_903], al
.text$mn:00002214                 lea     ecx, [ebp+var_55C40]
.text$mn:0000221A                 push    ecx             ; int
.text$mn:0000221B                 push    offset _FLAG_NOSESSION ; "-nosession"
.text$mn:00002220                 call    ?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z ; isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)
.text$mn:00002225                 add     esp, 8
.text$mn:00002228                 mov     [ebp+var_902], al
.text$mn:0000222E                 lea     edx, [ebp+var_55C40]
.text$mn:00002234                 push    edx             ; int
.text$mn:00002235                 push    offset _FLAG_SYSTRAY ; "-systemtray"
.text$mn:0000223A                 call    ?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z ; isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)
.text$mn:0000223F                 add     esp, 8
.text$mn:00002242                 mov     [ebp+var_900], al
.text$mn:00002248                 lea     eax, [ebp+var_55C40]
.text$mn:0000224E                 push    eax             ; int
.text$mn:0000224F                 push    offset _FLAG_ALWAYS_ON_TOP ; "-alwaysOnTop"
.text$mn:00002254                 call    ?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z ; isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)
.text$mn:00002259                 add     esp, 8
.text$mn:0000225C                 mov     [ebp+var_8FE], al
.text$mn:00002262                 lea     ecx, [ebp+var_55C40]
.text$mn:00002268                 push    ecx             ; int
.text$mn:00002269                 push    offset _FLAG_LOADINGTIME ; "-loadingTime"
.text$mn:0000226E                 call    ?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z ; isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)
.text$mn:00002273                 add     esp, 8
.text$mn:00002276                 mov     [ebp+var_8FF], al
.text$mn:0000227C                 lea     edx, [ebp+var_55C40]
.text$mn:00002282                 push    edx             ; int
.text$mn:00002283                 push    offset _FLAG_OPENSESSIONFILE ; "-openSession"
.text$mn:00002288                 call    ?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z ; isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)
.text$mn:0000228D                 add     esp, 8
.text$mn:00002290                 mov     [ebp+var_8EA], al
.text$mn:00002296                 lea     eax, [ebp+var_55C40]
.text$mn:0000229C                 push    eax             ; int
.text$mn:0000229D                 push    offset _FLAG_RECURSIVE ; "-r"
.text$mn:000022A2                 call    ?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z ; isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)
.text$mn:000022A7                 add     esp, 8
.text$mn:000022AA                 mov     [ebp+var_8E9], al
.text$mn:000022B0                 lea     ecx, [ebp+var_55C40]
.text$mn:000022B6                 push    ecx
.text$mn:000022B7                 call    ?getLangTypeFromParam@@YA?AW4LangType@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z ; getLangTypeFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)
.text$mn:000022BC                 add     esp, 4
.text$mn:000022BF                 mov     [ebp+var_8E8], eax
.text$mn:000022C5                 lea     edx, [ebp+var_55C40]
.text$mn:000022CB                 push    edx
.text$mn:000022CC                 lea     eax, [ebp+var_974]
.text$mn:000022D2                 push    eax
.text$mn:000022D3                 call    ?getLocalizationPathFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@@Z ; getLocalizationPathFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)
.text$mn:000022D8                 add     esp, 8
.text$mn:000022DB                 mov     [ebp+var_55C84], eax
.text$mn:000022E1                 mov     ecx, [ebp+var_55C84]
.text$mn:000022E7                 mov     [ebp+var_55C8C], ecx
.text$mn:000022ED                 mov     byte ptr [ebp+var_4], 2
.text$mn:000022F1                 mov     edx, [ebp+var_55C8C]
.text$mn:000022F7                 push    edx
.text$mn:000022F8                 lea     ecx, [ebp+var_8E4]
.text$mn:000022FE                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00002303                 mov     byte ptr [ebp+var_4], 1
.text$mn:00002307                 lea     ecx, [ebp+var_974]
.text$mn:0000230D                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002312                 lea     eax, [ebp+var_55C2C]
.text$mn:00002318                 push    eax
.text$mn:00002319                 lea     ecx, [ebp+var_55C40]
.text$mn:0000231F                 push    ecx
.text$mn:00002320                 push    6Eh ; 'n'
.text$mn:00002322                 call    ?getNumberFromParam@@YAHDAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AA_N@Z ; getNumberFromParam(char,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,bool &)
.text$mn:00002327                 add     esp, 0Ch
.text$mn:0000232A                 mov     [ebp+var_8FC], eax
.text$mn:00002330                 lea     edx, [ebp+var_55C2C]
.text$mn:00002336                 push    edx
.text$mn:00002337                 lea     eax, [ebp+var_55C40]
.text$mn:0000233D                 push    eax
.text$mn:0000233E                 push    63h ; 'c'
.text$mn:00002340                 call    ?getNumberFromParam@@YAHDAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AA_N@Z ; getNumberFromParam(char,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,bool &)
.text$mn:00002345                 add     esp, 0Ch
.text$mn:00002348                 mov     [ebp+var_8F8], eax
.text$mn:0000234E                 lea     ecx, [ebp+var_8EC]
.text$mn:00002354                 push    ecx
.text$mn:00002355                 lea     edx, [ebp+var_55C40]
.text$mn:0000235B                 push    edx
.text$mn:0000235C                 push    78h ; 'x'
.text$mn:0000235E                 call    ?getNumberFromParam@@YAHDAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AA_N@Z ; getNumberFromParam(char,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,bool &)
.text$mn:00002363                 add     esp, 0Ch
.text$mn:00002366                 mov     [ebp+var_8F4], eax
.text$mn:0000236C                 lea     eax, [ebp+var_8EB]
.text$mn:00002372                 push    eax
.text$mn:00002373                 lea     ecx, [ebp+var_55C40]
.text$mn:00002379                 push    ecx
.text$mn:0000237A                 push    79h ; 'y'
.text$mn:0000237C                 call    ?getNumberFromParam@@YAHDAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AA_N@Z ; getNumberFromParam(char,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,bool &)
.text$mn:00002381                 add     esp, 0Ch
.text$mn:00002384                 mov     [ebp+var_8F0], eax
.text$mn:0000238A                 lea     edx, [ebp+var_8AC]
.text$mn:00002390                 push    edx
.text$mn:00002391                 lea     eax, [ebp+var_55C40]
.text$mn:00002397                 push    eax
.text$mn:00002398                 lea     ecx, [ebp+var_990]
.text$mn:0000239E                 push    ecx
.text$mn:0000239F                 call    ?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z ; getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &)
.text$mn:000023A4                 add     esp, 0Ch
.text$mn:000023A7                 mov     [ebp+var_55CAC], eax
.text$mn:000023AD                 mov     edx, [ebp+var_55CAC]
.text$mn:000023B3                 mov     [ebp+var_55C94], edx
.text$mn:000023B9                 mov     byte ptr [ebp+var_4], 3
.text$mn:000023BD                 mov     eax, [ebp+var_55C94]
.text$mn:000023C3                 push    eax
.text$mn:000023C4                 lea     ecx, [ebp+var_8C8]
.text$mn:000023CA                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:000023CF                 mov     byte ptr [ebp+var_4], 1
.text$mn:000023D3                 lea     ecx, [ebp+var_990]
.text$mn:000023D9                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000023DE                 movzx   ecx, [ebp+var_55C2B]
.text$mn:000023E5                 test    ecx, ecx
.text$mn:000023E7                 jz      short loc_23FD
.text$mn:000023E9                 push    0               ; uType
.text$mn:000023EB                 push    offset $SG173096 ; "Notepad++ Command Argument Help"
.text$mn:000023F0                 push    offset _COMMAND_ARG_HELP ; "Usage :\r\rnotepad++ [--help] [-multiIn"...
.text$mn:000023F5                 push    0               ; hWnd
.text$mn:000023F7                 call    dword ptr ds:__imp__MessageBoxW@16 ; MessageBoxW(x,x,x,x)
.text$mn:000023FD
.text$mn:000023FD loc_23FD:                               ; CODE XREF: WinMain(x,x,x,x)+30Bj
.text$mn:000023FD                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00002402                 mov     [ebp+var_55C24], eax
.text$mn:00002408                 push    offset $SG173115 ; Str
.text$mn:0000240D                 lea     edx, [ebp+var_8E4]
.text$mn:00002413                 push    edx             ; int
.text$mn:00002414                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00002419                 add     esp, 8
.text$mn:0000241C                 movzx   eax, al
.text$mn:0000241F                 test    eax, eax
.text$mn:00002421                 jz      short loc_245F
.text$mn:00002423                 sub     esp, 1Ch
.text$mn:00002426                 mov     ecx, esp
.text$mn:00002428                 mov     [ebp+var_55CF4], esp
.text$mn:0000242E                 lea     edx, [ebp+var_8E4]
.text$mn:00002434                 push    edx
.text$mn:00002435                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000243A                 mov     [ebp+var_55CA4], eax
.text$mn:00002440                 mov     eax, [ebp+var_55CA4]
.text$mn:00002446                 mov     [ebp+var_55CF0], eax
.text$mn:0000244C                 mov     byte ptr [ebp+var_4], 4
.text$mn:00002450                 mov     byte ptr [ebp+var_4], 1
.text$mn:00002454                 mov     ecx, [ebp+var_55C24]
.text$mn:0000245A                 call    ?setStartWithLocFileName@NppParameters@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; NppParameters::setStartWithLocFileName(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:0000245F
.text$mn:0000245F loc_245F:                               ; CODE XREF: WinMain(x,x,x,x)+345j
.text$mn:0000245F                 mov     ecx, [ebp+var_55C24] ; this
.text$mn:00002465                 call    ?load@NppParameters@@QAE_NXZ ; NppParameters::load(void)
.text$mn:0000246A                 mov     ecx, [ebp+var_55C24] ; this
.text$mn:00002470                 call    ?asNotepadStyle@NppParameters@@QBE_NXZ ; NppParameters::asNotepadStyle(void)
.text$mn:00002475                 movzx   ecx, al
.text$mn:00002478                 test    ecx, ecx
.text$mn:0000247A                 jz      short loc_2491
.text$mn:0000247C                 mov     [ebp+var_55C1C], 1
.text$mn:00002483                 mov     [ebp+var_901], 1
.text$mn:0000248A                 mov     [ebp+var_902], 1
.text$mn:00002491
.text$mn:00002491 loc_2491:                               ; CODE XREF: WinMain(x,x,x,x)+39Ej
.text$mn:00002491                 mov     ecx, [ebp+var_55C24] ; this
.text$mn:00002497                 call    ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ ; NppParameters::getNppGUI(void)
.text$mn:0000249C                 mov     [ebp+var_55C78], eax
.text$mn:000024A2                 mov     edx, [ebp+var_55C78]
.text$mn:000024A8                 cmp     dword ptr [edx+690h], 2
.text$mn:000024AF                 jnz     short loc_24CA
.text$mn:000024B1                 mov     [ebp+var_55C1C], 1
.text$mn:000024B8                 movzx   eax, [ebp+var_55C19]
.text$mn:000024BF                 test    eax, eax
.text$mn:000024C1                 jnz     short loc_24CA
.text$mn:000024C3                 mov     [ebp+var_902], 1
.text$mn:000024CA
.text$mn:000024CA loc_24CA:                               ; CODE XREF: WinMain(x,x,x,x)+3D3j
.text$mn:000024CA                                         ; WinMain(x,x,x,x)+3E5j
.text$mn:000024CA                 push    offset $SG173122 ; Str
.text$mn:000024CF                 lea     ecx, [ebp+var_8A8]
.text$mn:000024D5                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000024DA                 mov     byte ptr [ebp+var_4], 5
.text$mn:000024DE                 lea     ecx, [ebp+var_55C40]
.text$mn:000024E4                 call    ?size@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::size(void)
.text$mn:000024E9                 mov     [ebp+var_55C80], eax
.text$mn:000024EF                 mov     [ebp+var_55C48], 0
.text$mn:000024F9                 jmp     short loc_250A
.text$mn:000024FB ; ---------------------------------------------------------------------------
.text$mn:000024FB
.text$mn:000024FB loc_24FB:                               ; CODE XREF: WinMain(x,x,x,x):loc_25B9j
.text$mn:000024FB                 mov     ecx, [ebp+var_55C48]
.text$mn:00002501                 add     ecx, 1
.text$mn:00002504                 mov     [ebp+var_55C48], ecx
.text$mn:0000250A
.text$mn:0000250A loc_250A:                               ; CODE XREF: WinMain(x,x,x,x)+41Dj
.text$mn:0000250A                 mov     edx, [ebp+var_55C48]
.text$mn:00002510                 cmp     edx, [ebp+var_55C80]
.text$mn:00002516                 jnb     loc_25BE
.text$mn:0000251C                 mov     eax, [ebp+var_55C48]
.text$mn:00002522                 push    eax
.text$mn:00002523                 lea     ecx, [ebp+var_55C40]
.text$mn:00002529                 call    ?at@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAEAAPB_WI@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::at(uint)
.text$mn:0000252E                 mov     ecx, [eax]
.text$mn:00002530                 mov     [ebp+var_55C60], ecx
.text$mn:00002536                 mov     edx, 2
.text$mn:0000253B                 imul    eax, edx, 0
.text$mn:0000253E                 mov     ecx, [ebp+var_55C60]
.text$mn:00002544                 movzx   edx, word ptr [ecx+eax]
.text$mn:00002548                 test    edx, edx
.text$mn:0000254A                 jz      short loc_25B9
.text$mn:0000254C                 push    offset $SG173130 ; Str
.text$mn:00002551                 lea     ecx, [ebp+var_8A8]
.text$mn:00002557                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:0000255C                 mov     eax, [ebp+var_55C60]
.text$mn:00002562                 push    eax
.text$mn:00002563                 lea     ecx, [ebp+var_9AC]
.text$mn:00002569                 push    ecx
.text$mn:0000256A                 call    ?relativeFilePathToFullFilePath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z ; relativeFilePathToFullFilePath(wchar_t const *)
.text$mn:0000256F                 add     esp, 8
.text$mn:00002572                 mov     [ebp+var_55C74], eax
.text$mn:00002578                 mov     edx, [ebp+var_55C74]
.text$mn:0000257E                 mov     [ebp+var_55C90], edx
.text$mn:00002584                 mov     byte ptr [ebp+var_4], 6
.text$mn:00002588                 mov     eax, [ebp+var_55C90]
.text$mn:0000258E                 push    eax
.text$mn:0000258F                 lea     ecx, [ebp+var_8A8]
.text$mn:00002595                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000259A                 mov     byte ptr [ebp+var_4], 5
.text$mn:0000259E                 lea     ecx, [ebp+var_9AC]
.text$mn:000025A4                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000025A9                 push    offset $SG173132 ; "\" "
.text$mn:000025AE                 lea     ecx, [ebp+var_8A8]
.text$mn:000025B4                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:000025B9
.text$mn:000025B9 loc_25B9:                               ; CODE XREF: WinMain(x,x,x,x)+46Ej
.text$mn:000025B9                 jmp     loc_24FB
.text$mn:000025BE ; ---------------------------------------------------------------------------
.text$mn:000025BE
.text$mn:000025BE loc_25BE:                               ; CODE XREF: WinMain(x,x,x,x)+43Aj
.text$mn:000025BE                 lea     ecx, [ebp+var_9C8]
.text$mn:000025C4                 push    ecx
.text$mn:000025C5                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:000025CA                 mov     ecx, eax
.text$mn:000025CC                 call    ?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; NppParameters::getNppPath(void)
.text$mn:000025D1                 mov     [ebp+var_55C98], eax
.text$mn:000025D7                 mov     edx, [ebp+var_55C98]
.text$mn:000025DD                 mov     [ebp+var_55CA0], edx
.text$mn:000025E3                 mov     byte ptr [ebp+var_4], 7
.text$mn:000025E7                 mov     ecx, [ebp+var_55CA0]
.text$mn:000025ED                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000025F2                 push    eax             ; lpPathName
.text$mn:000025F3                 call    dword ptr ds:__imp__SetCurrentDirectoryW@4 ; SetCurrentDirectoryW(x)
.text$mn:000025F9                 mov     byte ptr [ebp+var_4], 5
.text$mn:000025FD                 lea     ecx, [ebp+var_9C8]
.text$mn:00002603                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002608                 movzx   eax, [ebp+var_55C1C]
.text$mn:0000260F                 test    eax, eax
.text$mn:00002611                 jnz     loc_27F1
.text$mn:00002617                 movzx   ecx, [ebp+var_55C19]
.text$mn:0000261E                 test    ecx, ecx
.text$mn:00002620                 jnz     loc_27F1
.text$mn:00002626                 push    0               ; lpWindowName
.text$mn:00002628                 call    ?getClassName@Notepad_plus_Window@@SAPB_WXZ ; Notepad_plus_Window::getClassName(void)
.text$mn:0000262D                 push    eax             ; lpClassName
.text$mn:0000262E                 call    dword ptr ds:__imp__FindWindowW@8 ; FindWindowW(x,x)
.text$mn:00002634                 mov     [ebp+hWnd], eax
.text$mn:0000263A                 mov     [ebp+var_55C58], 0
.text$mn:00002644                 jmp     short loc_2655
.text$mn:00002646 ; ---------------------------------------------------------------------------
.text$mn:00002646
.text$mn:00002646 loc_2646:                               ; CODE XREF: WinMain(x,x,x,x)+5A7j
.text$mn:00002646                 mov     edx, [ebp+var_55C58]
.text$mn:0000264C                 add     edx, 1
.text$mn:0000264F                 mov     [ebp+var_55C58], edx
.text$mn:00002655
.text$mn:00002655 loc_2655:                               ; CODE XREF: WinMain(x,x,x,x)+568j
.text$mn:00002655                 cmp     [ebp+hWnd], 0
.text$mn:0000265C                 jnz     short loc_2685
.text$mn:0000265E                 cmp     [ebp+var_55C58], 5
.text$mn:00002665                 jge     short loc_2685
.text$mn:00002667                 push    64h ; 'd'       ; dwMilliseconds
.text$mn:00002669                 call    dword ptr ds:__imp__Sleep@4 ; Sleep(x)
.text$mn:0000266F                 push    0               ; lpWindowName
.text$mn:00002671                 call    ?getClassName@Notepad_plus_Window@@SAPB_WXZ ; Notepad_plus_Window::getClassName(void)
.text$mn:00002676                 push    eax             ; lpClassName
.text$mn:00002677                 call    dword ptr ds:__imp__FindWindowW@8 ; FindWindowW(x,x)
.text$mn:0000267D                 mov     [ebp+hWnd], eax
.text$mn:00002683                 jmp     short loc_2646
.text$mn:00002685 ; ---------------------------------------------------------------------------
.text$mn:00002685
.text$mn:00002685 loc_2685:                               ; CODE XREF: WinMain(x,x,x,x)+580j
.text$mn:00002685                                         ; WinMain(x,x,x,x)+589j
.text$mn:00002685                 cmp     [ebp+hWnd], 0
.text$mn:0000268C                 jz      loc_27F1
.text$mn:00002692                 mov     ecx, [ebp+var_55C24] ; this
.text$mn:00002698                 call    ?destroyInstance@NppParameters@@QAEXXZ ; NppParameters::destroyInstance(void)
.text$mn:0000269D                 call    ?getInstance@FileManager@@SAPAV1@XZ ; FileManager::getInstance(void)
.text$mn:000026A2                 mov     ecx, eax        ; this
.text$mn:000026A4                 call    ?destroyInstance@FileManager@@QAEXXZ ; FileManager::destroyInstance(void)
.text$mn:000026A9                 mov     [ebp+nCmdShow], 0
.text$mn:000026B3                 mov     eax, [ebp+hWnd]
.text$mn:000026B9                 push    eax             ; hWnd
.text$mn:000026BA                 call    dword ptr ds:__imp__IsZoomed@4 ; IsZoomed(x)
.text$mn:000026C0                 test    eax, eax
.text$mn:000026C2                 jz      short loc_26D0
.text$mn:000026C4                 mov     [ebp+nCmdShow], 3
.text$mn:000026CE                 jmp     short loc_26EB
.text$mn:000026D0 ; ---------------------------------------------------------------------------
.text$mn:000026D0
.text$mn:000026D0 loc_26D0:                               ; CODE XREF: WinMain(x,x,x,x)+5E6j
.text$mn:000026D0                 mov     ecx, [ebp+hWnd]
.text$mn:000026D6                 push    ecx             ; hWnd
.text$mn:000026D7                 call    dword ptr ds:__imp__IsIconic@4 ; IsIconic(x)
.text$mn:000026DD                 test    eax, eax
.text$mn:000026DF                 jz      short loc_26EB
.text$mn:000026E1                 mov     [ebp+nCmdShow], 9
.text$mn:000026EB
.text$mn:000026EB loc_26EB:                               ; CODE XREF: WinMain(x,x,x,x)+5F2j
.text$mn:000026EB                                         ; WinMain(x,x,x,x)+603j
.text$mn:000026EB                 cmp     [ebp+nCmdShow], 0
.text$mn:000026F2                 jz      short loc_2708
.text$mn:000026F4                 mov     edx, [ebp+nCmdShow]
.text$mn:000026FA                 push    edx             ; nCmdShow
.text$mn:000026FB                 mov     eax, [ebp+hWnd]
.text$mn:00002701                 push    eax             ; hWnd
.text$mn:00002702                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00002708
.text$mn:00002708 loc_2708:                               ; CODE XREF: WinMain(x,x,x,x)+616j
.text$mn:00002708                 mov     ecx, [ebp+hWnd]
.text$mn:0000270E                 push    ecx             ; hWnd
.text$mn:0000270F                 call    dword ptr ds:__imp__SetForegroundWindow@4 ; SetForegroundWindow(x)
.text$mn:00002715                 lea     ecx, [ebp+var_55C40]
.text$mn:0000271B                 call    ?size@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::size(void)
.text$mn:00002720                 test    eax, eax
.text$mn:00002722                 jbe     loc_27AC
.text$mn:00002728                 mov     [ebp+lParam], 0
.text$mn:00002732                 lea     edx, [ebp+var_904]
.text$mn:00002738                 mov     [ebp+var_55CC0], edx
.text$mn:0000273E                 mov     [ebp+var_55CC4], 5Ch ; '\'
.text$mn:00002748                 mov     [ebp+var_55CBC], 2
.text$mn:00002752                 lea     ecx, [ebp+var_8A8]
.text$mn:00002758                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000275D                 mov     [ebp+var_55CB4], eax
.text$mn:00002763                 lea     ecx, [ebp+var_8A8]
.text$mn:00002769                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:0000276E                 lea     eax, [eax+eax+2]
.text$mn:00002772                 mov     [ebp+var_55CB8], eax
.text$mn:00002778                 lea     ecx, [ebp+lParam]
.text$mn:0000277E                 push    ecx             ; lParam
.text$mn:0000277F                 mov     edx, [ebp+hInstance]
.text$mn:00002782                 push    edx             ; wParam
.text$mn:00002783                 push    4Ah ; 'J'       ; Msg
.text$mn:00002785                 mov     eax, [ebp+hWnd]
.text$mn:0000278B                 push    eax             ; hWnd
.text$mn:0000278C                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002792                 lea     ecx, [ebp+var_55CBC]
.text$mn:00002798                 push    ecx             ; lParam
.text$mn:00002799                 mov     edx, [ebp+hInstance]
.text$mn:0000279C                 push    edx             ; wParam
.text$mn:0000279D                 push    4Ah ; 'J'       ; Msg
.text$mn:0000279F                 mov     eax, [ebp+hWnd]
.text$mn:000027A5                 push    eax             ; hWnd
.text$mn:000027A6                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000027AC
.text$mn:000027AC loc_27AC:                               ; CODE XREF: WinMain(x,x,x,x)+646j
.text$mn:000027AC                 mov     [ebp+var_55CA8], 0
.text$mn:000027B6                 mov     byte ptr [ebp+var_4], 1
.text$mn:000027BA                 lea     ecx, [ebp+var_8A8]
.text$mn:000027C0                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000027C5                 mov     byte ptr [ebp+var_4], 0
.text$mn:000027C9                 lea     ecx, [ebp+var_904] ; this
.text$mn:000027CF                 call    ??1CmdLineParams@@QAE@XZ ; CmdLineParams::~CmdLineParams(void)
.text$mn:000027D4                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000027DB                 lea     ecx, [ebp+var_55C40]
.text$mn:000027E1                 call    ??1?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::~vector<wchar_t const *,std::allocator<wchar_t const *>>(void)
.text$mn:000027E6                 mov     eax, [ebp+var_55CA8]
.text$mn:000027EC                 jmp     loc_2E4A
.text$mn:000027F1 ; ---------------------------------------------------------------------------
.text$mn:000027F1
.text$mn:000027F1 loc_27F1:                               ; CODE XREF: WinMain(x,x,x,x)+535j
.text$mn:000027F1                                         ; WinMain(x,x,x,x)+544j ...
.text$mn:000027F1                 lea     ecx, [ebp+var_55C18]
.text$mn:000027F7                 call    ??0Notepad_plus_Window@@QAE@XZ ; Notepad_plus_Window::Notepad_plus_Window(void)
.text$mn:000027FC                 mov     byte ptr [ebp+var_4], 8
.text$mn:00002800                 mov     ecx, [ebp+var_55C24] ; this
.text$mn:00002806                 call    ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ ; NppParameters::getNppGUI(void)
.text$mn:0000280B                 mov     [ebp+var_55C28], eax
.text$mn:00002811                 lea     ecx, [ebp+var_920]
.text$mn:00002817                 push    ecx
.text$mn:00002818                 mov     ecx, [ebp+var_55C24]
.text$mn:0000281E                 call    ?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; NppParameters::getNppPath(void)
.text$mn:00002823                 mov     byte ptr [ebp+var_4], 9
.text$mn:00002827                 push    offset $SG173161 ; "\\updater\\"
.text$mn:0000282C                 lea     ecx, [ebp+var_920]
.text$mn:00002832                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00002837                 push    offset $SG173190 ; "gup.exe"
.text$mn:0000283C                 lea     edx, [ebp+var_920]
.text$mn:00002842                 push    edx             ; int
.text$mn:00002843                 lea     eax, [ebp+var_958]
.text$mn:00002849                 push    eax             ; int
.text$mn:0000284A                 call    ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:0000284F                 add     esp, 0Ch
.text$mn:00002852                 mov     byte ptr [ebp+var_4], 0Ah
.text$mn:00002856                 push    offset $SG173192 ; "-v"
.text$mn:0000285B                 lea     ecx, [ebp+var_93C]
.text$mn:00002861                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002866                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:0000286A                 push    offset $SG173193 ; "6.792"
.text$mn:0000286F                 lea     ecx, [ebp+var_93C]
.text$mn:00002875                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:0000287A                 lea     ecx, [ebp+var_958]
.text$mn:00002880                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002885                 push    eax             ; pszPath
.text$mn:00002886                 call    dword ptr ds:__imp__PathFileExistsW@4 ; PathFileExistsW(x)
.text$mn:0000288C                 cmp     eax, 1
.text$mn:0000288F                 jnz     short loc_289D
.text$mn:00002891                 mov     [ebp+var_55C50], 1
.text$mn:0000289B                 jmp     short loc_28A7
.text$mn:0000289D ; ---------------------------------------------------------------------------
.text$mn:0000289D
.text$mn:0000289D loc_289D:                               ; CODE XREF: WinMain(x,x,x,x)+7B3j
.text$mn:0000289D                 mov     [ebp+var_55C50], 0
.text$mn:000028A7
.text$mn:000028A7 loc_28A7:                               ; CODE XREF: WinMain(x,x,x,x)+7BFj
.text$mn:000028A7                 mov     ecx, [ebp+var_55C28]
.text$mn:000028AD                 mov     dl, byte ptr [ebp+var_55C50]
.text$mn:000028B3                 mov     [ecx+250h], dl
.text$mn:000028B9                 mov     al, byte ptr [ebp+var_55C50]
.text$mn:000028BF                 mov     [ebp+var_55C2A], al
.text$mn:000028C5                 mov     ecx, [ebp+var_55C28]
.text$mn:000028CB                 mov     dl, [ecx+23Ch]
.text$mn:000028D1                 mov     [ebp+var_55C1B], dl
.text$mn:000028D7                 movzx   eax, [ebp+var_55C1B]
.text$mn:000028DE                 test    eax, eax
.text$mn:000028E0                 jz      short loc_2915
.text$mn:000028E2                 push    0               ; int
.text$mn:000028E4                 lea     ecx, [ebp+var_55D04] ; this
.text$mn:000028EA                 call    ??0Date@@QAE@H@Z ; Date::Date(int)
.text$mn:000028EF                 mov     ecx, [ebp+var_55C28]
.text$mn:000028F5                 add     ecx, 244h
.text$mn:000028FB                 push    ecx
.text$mn:000028FC                 lea     ecx, [ebp+var_55D04]
.text$mn:00002902                 call    ??MDate@@QBE_NABV0@@Z ; Date::operator<(Date const &)
.text$mn:00002907                 movzx   edx, al
.text$mn:0000290A                 test    edx, edx
.text$mn:0000290C                 jz      short loc_2915
.text$mn:0000290E                 mov     [ebp+var_55C1B], 0
.text$mn:00002915
.text$mn:00002915 loc_2915:                               ; CODE XREF: WinMain(x,x,x,x)+804j
.text$mn:00002915                                         ; WinMain(x,x,x,x)+830j
.text$mn:00002915                 mov     ecx, [ebp+var_55C24]
.text$mn:0000291B                 call    ?getWinVersion@NppParameters@@QAE?AW4winVer@@XZ ; NppParameters::getWinVersion(void)
.text$mn:00002920                 mov     [ebp+var_55C54], eax
.text$mn:00002926                 cmp     [ebp+var_55C54], 7
.text$mn:0000292D                 jle     short loc_293B
.text$mn:0000292F                 mov     [ebp+var_55C64], 1
.text$mn:00002939                 jmp     short loc_2945
.text$mn:0000293B ; ---------------------------------------------------------------------------
.text$mn:0000293B
.text$mn:0000293B loc_293B:                               ; CODE XREF: WinMain(x,x,x,x)+851j
.text$mn:0000293B                 mov     [ebp+var_55C64], 0
.text$mn:00002945
.text$mn:00002945 loc_2945:                               ; CODE XREF: WinMain(x,x,x,x)+85Dj
.text$mn:00002945                 mov     al, byte ptr [ebp+var_55C64]
.text$mn:0000294B                 mov     [ebp+var_55C29], al
.text$mn:00002951                 movzx   ecx, [ebp+var_55C19]
.text$mn:00002958                 test    ecx, ecx
.text$mn:0000295A                 jz      loc_2A37
.text$mn:00002960                 movzx   edx, [ebp+var_55C2A]
.text$mn:00002967                 test    edx, edx
.text$mn:00002969                 jz      loc_2A37
.text$mn:0000296F                 movzx   eax, [ebp+var_55C1B]
.text$mn:00002976                 test    eax, eax
.text$mn:00002978                 jz      loc_2A37
.text$mn:0000297E                 movzx   ecx, [ebp+var_55C29]
.text$mn:00002985                 test    ecx, ecx
.text$mn:00002987                 jz      loc_2A37
.text$mn:0000298D                 lea     ecx, [ebp+var_920]
.text$mn:00002993                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002998                 push    eax             ; wchar_t *
.text$mn:00002999                 lea     ecx, [ebp+var_93C]
.text$mn:0000299F                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000029A4                 push    eax             ; wchar_t *
.text$mn:000029A5                 lea     ecx, [ebp+var_958]
.text$mn:000029AB                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000029B0                 push    eax             ; Str
.text$mn:000029B1                 lea     ecx, [ebp+var_A1C]
.text$mn:000029B7                 call    ??0Process@@QAE@PB_W00@Z ; Process::Process(wchar_t const *,wchar_t const *,wchar_t const *)
.text$mn:000029BC                 mov     byte ptr [ebp+var_4], 0Ch
.text$mn:000029C0                 lea     ecx, [ebp+var_A1C] ; this
.text$mn:000029C6                 call    ?run@Process@@QAEXXZ ; Process::run(void)
.text$mn:000029CB                 mov     edx, [ebp+var_55C28]
.text$mn:000029D1                 cmp     dword ptr [edx+240h], 0
.text$mn:000029D8                 jge     short loc_29F4
.text$mn:000029DA                 mov     eax, [ebp+var_55C28]
.text$mn:000029E0                 xor     ecx, ecx
.text$mn:000029E2                 sub     ecx, [eax+240h]
.text$mn:000029E8                 mov     edx, [ebp+var_55C28]
.text$mn:000029EE                 mov     [edx+240h], ecx
.text$mn:000029F4
.text$mn:000029F4 loc_29F4:                               ; CODE XREF: WinMain(x,x,x,x)+8FCj
.text$mn:000029F4                 mov     eax, [ebp+var_55C28]
.text$mn:000029FA                 mov     ecx, [eax+240h]
.text$mn:00002A00                 push    ecx             ; int
.text$mn:00002A01                 lea     ecx, [ebp+var_55D10] ; this
.text$mn:00002A07                 call    ??0Date@@QAE@H@Z ; Date::Date(int)
.text$mn:00002A0C                 mov     edx, [ebp+var_55C28]
.text$mn:00002A12                 add     edx, 244h
.text$mn:00002A18                 mov     ecx, [eax]
.text$mn:00002A1A                 mov     [edx], ecx
.text$mn:00002A1C                 mov     ecx, [eax+4]
.text$mn:00002A1F                 mov     [edx+4], ecx
.text$mn:00002A22                 mov     eax, [eax+8]
.text$mn:00002A25                 mov     [edx+8], eax
.text$mn:00002A28                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:00002A2C                 lea     ecx, [ebp+var_A1C] ; this
.text$mn:00002A32                 call    ??1Process@@QAE@XZ ; Process::~Process(void)
.text$mn:00002A37
.text$mn:00002A37 loc_2A37:                               ; CODE XREF: WinMain(x,x,x,x)+87Ej
.text$mn:00002A37                                         ; WinMain(x,x,x,x)+88Dj ...
.text$mn:00002A37                 mov     [ebp+Msg.wParam], 0
.text$mn:00002A41                 call    ?installHandler@Win32Exception@@SAXXZ ; Win32Exception::installHandler(void)
.text$mn:00002A46                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:00002A4A                 lea     ecx, [ebp+var_904]
.text$mn:00002A50                 push    ecx             ; struct CmdLineParams *
.text$mn:00002A51                 lea     ecx, [ebp+var_8A8]
.text$mn:00002A57                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002A5C                 push    eax             ; wchar_t *
.text$mn:00002A5D                 push    0               ; HWND
.text$mn:00002A5F                 mov     edx, [ebp+hInstance]
.text$mn:00002A62                 push    edx             ; HINSTANCE
.text$mn:00002A63                 lea     ecx, [ebp+var_55C18] ; this
.text$mn:00002A69                 call    ?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)
.text$mn:00002A6E                 cmp     [ebp+var_55C54], 0Ah
.text$mn:00002A75                 jge     short loc_2A84
.text$mn:00002A77                 cmp     [ebp+var_55C54], 0
.text$mn:00002A7E                 jnz     loc_2B2C
.text$mn:00002A84
.text$mn:00002A84 loc_2A84:                               ; CODE XREF: WinMain(x,x,x,x)+999j
.text$mn:00002A84                 push    offset $SG173210 ; "user32.dll"
.text$mn:00002A89                 call    dword ptr ds:__imp__GetModuleHandleW@4 ; GetModuleHandleW(x)
.text$mn:00002A8F                 mov     [ebp+hModule], eax
.text$mn:00002A95                 cmp     [ebp+hModule], 0
.text$mn:00002A9C                 jz      loc_2B2C
.text$mn:00002AA2                 mov     ecx, [ebp+var_55C24]
.text$mn:00002AA8                 call    ?getWinVersion@NppParameters@@QAE?AW4winVer@@XZ ; NppParameters::getWinVersion(void)
.text$mn:00002AAD                 cmp     eax, 0Ah
.text$mn:00002AB0                 jnz     short loc_2AE9
.text$mn:00002AB2                 mov     [ebp+var_55CE8], 1
.text$mn:00002ABC                 push    offset $SG173219 ; "ChangeWindowMessageFilter"
.text$mn:00002AC1                 mov     eax, [ebp+hModule]
.text$mn:00002AC7                 push    eax             ; hModule
.text$mn:00002AC8                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text$mn:00002ACE                 mov     [ebp+var_55C68], eax
.text$mn:00002AD4                 cmp     [ebp+var_55C68], 0
.text$mn:00002ADB                 jz      short loc_2AE7
.text$mn:00002ADD                 push    1
.text$mn:00002ADF                 push    4Ah ; 'J'
.text$mn:00002AE1                 call    [ebp+var_55C68]
.text$mn:00002AE7
.text$mn:00002AE7 loc_2AE7:                               ; CODE XREF: WinMain(x,x,x,x)+9FFj
.text$mn:00002AE7                 jmp     short loc_2B2C
.text$mn:00002AE9 ; ---------------------------------------------------------------------------
.text$mn:00002AE9
.text$mn:00002AE9 loc_2AE9:                               ; CODE XREF: WinMain(x,x,x,x)+9D4j
.text$mn:00002AE9                 mov     [ebp+var_55CF8], 1
.text$mn:00002AF3                 push    offset $SG173230 ; "ChangeWindowMessageFilterEx"
.text$mn:00002AF8                 mov     ecx, [ebp+hModule]
.text$mn:00002AFE                 push    ecx             ; hModule
.text$mn:00002AFF                 call    dword ptr ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
.text$mn:00002B05                 mov     [ebp+var_55C70], eax
.text$mn:00002B0B                 cmp     [ebp+var_55C70], 0
.text$mn:00002B12                 jz      short loc_2B2C
.text$mn:00002B14                 push    0
.text$mn:00002B16                 push    1
.text$mn:00002B18                 push    4Ah ; 'J'
.text$mn:00002B1A                 lea     ecx, [ebp+var_55C18] ; this
.text$mn:00002B20                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00002B25                 push    eax
.text$mn:00002B26                 call    [ebp+var_55C70]
.text$mn:00002B2C
.text$mn:00002B2C loc_2B2C:                               ; CODE XREF: WinMain(x,x,x,x)+9A2j
.text$mn:00002B2C                                         ; WinMain(x,x,x,x)+9C0j ...
.text$mn:00002B2C                 mov     [ebp+var_55C1A], 1
.text$mn:00002B33
.text$mn:00002B33 loc_2B33:                               ; CODE XREF: WinMain(x,x,x,x):loc_2BE2j
.text$mn:00002B33                 movzx   edx, [ebp+var_55C1A]
.text$mn:00002B3A                 test    edx, edx
.text$mn:00002B3C                 jz      loc_2BE7
.text$mn:00002B42                 push    0               ; wMsgFilterMax
.text$mn:00002B44                 push    0               ; wMsgFilterMin
.text$mn:00002B46                 push    0               ; hWnd
.text$mn:00002B48                 lea     eax, [ebp+Msg]
.text$mn:00002B4E                 push    eax             ; lpMsg
.text$mn:00002B4F                 call    dword ptr ds:__imp__GetMessageW@16 ; GetMessageW(x,x,x,x)
.text$mn:00002B55                 test    eax, eax
.text$mn:00002B57                 jz      short loc_2B65
.text$mn:00002B59                 mov     [ebp+var_55C6C], 1
.text$mn:00002B63                 jmp     short loc_2B6F
.text$mn:00002B65 ; ---------------------------------------------------------------------------
.text$mn:00002B65
.text$mn:00002B65 loc_2B65:                               ; CODE XREF: WinMain(x,x,x,x)+A7Bj
.text$mn:00002B65                 mov     [ebp+var_55C6C], 0
.text$mn:00002B6F
.text$mn:00002B6F loc_2B6F:                               ; CODE XREF: WinMain(x,x,x,x)+A87j
.text$mn:00002B6F                 mov     cl, byte ptr [ebp+var_55C6C]
.text$mn:00002B75                 mov     [ebp+var_55C1A], cl
.text$mn:00002B7B                 movzx   edx, [ebp+var_55C1A]
.text$mn:00002B82                 test    edx, edx
.text$mn:00002B84                 jz      short loc_2BE2
.text$mn:00002B86                 lea     eax, [ebp+Msg]
.text$mn:00002B8C                 push    eax             ; struct tagMSG *
.text$mn:00002B8D                 lea     ecx, [ebp+var_55C18] ; this
.text$mn:00002B93                 call    ?isDlgsMsg@Notepad_plus_Window@@QBE_NPAUtagMSG@@@Z ; Notepad_plus_Window::isDlgsMsg(tagMSG *)
.text$mn:00002B98                 movzx   ecx, al
.text$mn:00002B9B                 test    ecx, ecx
.text$mn:00002B9D                 jnz     short loc_2BE2
.text$mn:00002B9F                 lea     edx, [ebp+Msg]
.text$mn:00002BA5                 push    edx             ; lpMsg
.text$mn:00002BA6                 lea     ecx, [ebp+var_55C18] ; this
.text$mn:00002BAC                 call    ?getAccTable@Notepad_plus_Window@@QBEPAUHACCEL__@@XZ ; Notepad_plus_Window::getAccTable(void)
.text$mn:00002BB1                 push    eax             ; hAccTable
.text$mn:00002BB2                 lea     ecx, [ebp+var_55C18] ; this
.text$mn:00002BB8                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00002BBD                 push    eax             ; hWnd
.text$mn:00002BBE                 call    dword ptr ds:__imp__TranslateAcceleratorW@12 ; TranslateAcceleratorW(x,x,x)
.text$mn:00002BC4                 test    eax, eax
.text$mn:00002BC6                 jnz     short loc_2BE2
.text$mn:00002BC8                 lea     eax, [ebp+Msg]
.text$mn:00002BCE                 push    eax             ; lpMsg
.text$mn:00002BCF                 call    dword ptr ds:__imp__TranslateMessage@4 ; TranslateMessage(x)
.text$mn:00002BD5                 lea     ecx, [ebp+Msg]
.text$mn:00002BDB                 push    ecx             ; lpMsg
.text$mn:00002BDC                 call    dword ptr ds:__imp__DispatchMessageW@4 ; DispatchMessageW(x)
.text$mn:00002BE2
.text$mn:00002BE2 loc_2BE2:                               ; CODE XREF: WinMain(x,x,x,x)+AA8j
.text$mn:00002BE2                                         ; WinMain(x,x,x,x)+AC1j ...
.text$mn:00002BE2                 jmp     loc_2B33
.text$mn:00002BE7 ; ---------------------------------------------------------------------------
.text$mn:00002BE7
.text$mn:00002BE7 loc_2BE7:                               ; CODE XREF: WinMain(x,x,x,x)+A60j
.text$mn:00002BE7                 jmp     loc_2D90
.text$mn:00002BE7 _WinMain@16     endp
.text$mn:00002BE7
.text$mn:00002BEC
.text$mn:00002BEC ; =============== S U B R O U T I N E =======================================
.text$mn:00002BEC
.text$mn:00002BEC
.text$mn:00002BEC __catch$_WinMain@16$0 proc near         ; DATA XREF: .xdata$x:0000AF54o
.text$mn:00002BEC                 mov     ecx, 0Ch
.text$mn:00002BF1                 mov     esi, offset $SG173242 ; "God Damned Exception : "
.text$mn:00002BF6                 lea     edi, [ebp-8Ch]
.text$mn:00002BFC                 rep movsd
.text$mn:00002BFE                 push    34h ; '4'       ; Size
.text$mn:00002C00                 push    0               ; Val
.text$mn:00002C02                 lea     edx, [ebp-5Ch]
.text$mn:00002C05                 push    edx             ; Dst
.text$mn:00002C06                 call    _memset
.text$mn:00002C0B                 add     esp, 0Ch
.text$mn:00002C0E                 mov     eax, [ebp-55CECh]
.text$mn:00002C14                 push    eax
.text$mn:00002C15                 push    offset $SG173244 ; "%d"
.text$mn:00002C1A                 lea     ecx, [ebp-28h]
.text$mn:00002C1D                 push    ecx             ; LPWSTR
.text$mn:00002C1E                 call    dword ptr ds:__imp__wsprintfW
.text$mn:00002C24                 add     esp, 0Ch
.text$mn:00002C27                 push    0               ; uType
.text$mn:00002C29                 push    offset $SG173245 ; "Int Exception"
.text$mn:00002C2E                 lea     edx, [ebp-28h]
.text$mn:00002C31                 push    edx             ; lpString2
.text$mn:00002C32                 lea     eax, [ebp-8Ch]
.text$mn:00002C38                 push    eax             ; lpString1
.text$mn:00002C39                 call    dword ptr ds:__imp__lstrcatW@8 ; lstrcatW(x,x)
.text$mn:00002C3F                 push    eax             ; lpText
.text$mn:00002C40                 mov     ecx, dword ptr ds:?gNppHWND@Notepad_plus_Window@@2PAUHWND__@@A ; HWND__ * Notepad_plus_Window::gNppHWND
.text$mn:00002C46                 push    ecx             ; hWnd
.text$mn:00002C47                 call    dword ptr ds:__imp__MessageBoxW@16 ; MessageBoxW(x,x,x,x)
.text$mn:00002C4D                 lea     edx, [ebp-55C18h]
.text$mn:00002C53                 push    edx             ; struct Notepad_plus_Window *
.text$mn:00002C54                 call    ?doException@@YAXAAVNotepad_plus_Window@@@Z ; doException(Notepad_plus_Window &)
.text$mn:00002C59                 add     esp, 4
.text$mn:00002C5C                 mov     eax, offset $LN66
.text$mn:00002C61                 retn
.text$mn:00002C61 __catch$_WinMain@16$0 endp
.text$mn:00002C61
.text$mn:00002C62
.text$mn:00002C62 ; =============== S U B R O U T I N E =======================================
.text$mn:00002C62
.text$mn:00002C62
.text$mn:00002C62 __catch$_WinMain@16$1 proc near         ; DATA XREF: .xdata$x:0000AF64o
.text$mn:00002C62                 push    0               ; uType
.text$mn:00002C64                 push    offset $SG173247 ; "Runtime Exception"
.text$mn:00002C69                 mov     eax, [ebp-55CB0h]
.text$mn:00002C6F                 mov     edx, [eax]
.text$mn:00002C71                 mov     ecx, [ebp-55CB0h]
.text$mn:00002C77                 mov     eax, [edx+4]
.text$mn:00002C7A                 call    eax
.text$mn:00002C7C                 push    eax             ; lpText
.text$mn:00002C7D                 mov     ecx, dword ptr ds:?gNppHWND@Notepad_plus_Window@@2PAUHWND__@@A ; HWND__ * Notepad_plus_Window::gNppHWND
.text$mn:00002C83                 push    ecx             ; hWnd
.text$mn:00002C84                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text$mn:00002C8A                 lea     edx, [ebp-55C18h]
.text$mn:00002C90                 push    edx             ; struct Notepad_plus_Window *
.text$mn:00002C91                 call    ?doException@@YAXAAVNotepad_plus_Window@@@Z ; doException(Notepad_plus_Window &)
.text$mn:00002C96                 add     esp, 4
.text$mn:00002C99                 mov     eax, offset $LN68
.text$mn:00002C9E                 retn
.text$mn:00002C9E __catch$_WinMain@16$1 endp
.text$mn:00002C9E
.text$mn:00002C9F
.text$mn:00002C9F ; =============== S U B R O U T I N E =======================================
.text$mn:00002C9F
.text$mn:00002C9F
.text$mn:00002C9F __catch$_WinMain@16$2 proc near         ; DATA XREF: .xdata$x:0000AF74o
.text$mn:00002C9F                 mov     ecx, [ebp-55C44h] ; this
.text$mn:00002CA5                 call    ?where@Win32Exception@@QBEPBXXZ ; Win32Exception::where(void)
.text$mn:00002CAA                 push    eax
.text$mn:00002CAB                 mov     eax, [ebp-55C44h]
.text$mn:00002CB1                 mov     edx, [eax]
.text$mn:00002CB3                 mov     ecx, [ebp-55C44h]
.text$mn:00002CB9                 mov     eax, [edx+4]
.text$mn:00002CBC                 call    eax
.text$mn:00002CBE                 push    eax
.text$mn:00002CBF                 mov     ecx, [ebp-55C44h] ; this
.text$mn:00002CC5                 call    ?code@Win32Exception@@QBEIXZ ; Win32Exception::code(void)
.text$mn:00002CCA                 push    eax
.text$mn:00002CCB                 push    offset $SG173252 ; "An exception occured. Notepad++ cannot "...
.text$mn:00002CD0                 lea     ecx, [ebp-88Ch]
.text$mn:00002CD6                 push    ecx             ; LPWSTR
.text$mn:00002CD7                 call    dword ptr ds:__imp__wsprintfW
.text$mn:00002CDD                 add     esp, 14h
.text$mn:00002CE0                 push    10h             ; uType
.text$mn:00002CE2                 push    offset $SG173253 ; "Win32Exception"
.text$mn:00002CE7                 lea     edx, [ebp-88Ch]
.text$mn:00002CED                 push    edx             ; lpText
.text$mn:00002CEE                 mov     eax, dword ptr ds:?gNppHWND@Notepad_plus_Window@@2PAUHWND__@@A ; HWND__ * Notepad_plus_Window::gNppHWND
.text$mn:00002CF3                 push    eax             ; hWnd
.text$mn:00002CF4                 call    dword ptr ds:__imp__MessageBoxW@16 ; MessageBoxW(x,x,x,x)
.text$mn:00002CFA                 mov     ecx, [ebp-55C44h] ; this
.text$mn:00002D00                 call    ?info@Win32Exception@@QBEPAU_EXCEPTION_POINTERS@@XZ ; Win32Exception::info(void)
.text$mn:00002D05                 push    eax             ; struct _EXCEPTION_POINTERS *
.text$mn:00002D06                 lea     ecx, [ebp-55C2Dh] ; this
.text$mn:00002D0C                 call    ?writeDump@MiniDumper@@QAE_NPAU_EXCEPTION_POINTERS@@@Z ; MiniDumper::writeDump(_EXCEPTION_POINTERS *)
.text$mn:00002D11                 lea     ecx, [ebp-55C18h]
.text$mn:00002D17                 push    ecx             ; struct Notepad_plus_Window *
.text$mn:00002D18                 call    ?doException@@YAXAAVNotepad_plus_Window@@@Z ; doException(Notepad_plus_Window &)
.text$mn:00002D1D                 add     esp, 4
.text$mn:00002D20                 mov     eax, offset $LN70
.text$mn:00002D25                 retn
.text$mn:00002D25 __catch$_WinMain@16$2 endp
.text$mn:00002D25
.text$mn:00002D26
.text$mn:00002D26 ; =============== S U B R O U T I N E =======================================
.text$mn:00002D26
.text$mn:00002D26
.text$mn:00002D26 __catch$_WinMain@16$3 proc near         ; DATA XREF: .xdata$x:0000AF84o
.text$mn:00002D26                 push    0               ; uType
.text$mn:00002D28                 push    offset $SG173255 ; "General Exception"
.text$mn:00002D2D                 mov     edx, [ebp-55C9Ch]
.text$mn:00002D33                 mov     eax, [edx]
.text$mn:00002D35                 mov     ecx, [ebp-55C9Ch]
.text$mn:00002D3B                 mov     edx, [eax+4]
.text$mn:00002D3E                 call    edx
.text$mn:00002D40                 push    eax             ; lpText
.text$mn:00002D41                 mov     eax, dword ptr ds:?gNppHWND@Notepad_plus_Window@@2PAUHWND__@@A ; HWND__ * Notepad_plus_Window::gNppHWND
.text$mn:00002D46                 push    eax             ; hWnd
.text$mn:00002D47                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text$mn:00002D4D                 lea     ecx, [ebp-55C18h]
.text$mn:00002D53                 push    ecx             ; struct Notepad_plus_Window *
.text$mn:00002D54                 call    ?doException@@YAXAAVNotepad_plus_Window@@@Z ; doException(Notepad_plus_Window &)
.text$mn:00002D59                 add     esp, 4
.text$mn:00002D5C                 mov     eax, offset $LN72
.text$mn:00002D61                 retn
.text$mn:00002D61 __catch$_WinMain@16$3 endp
.text$mn:00002D61
.text$mn:00002D62
.text$mn:00002D62 ; =============== S U B R O U T I N E =======================================
.text$mn:00002D62
.text$mn:00002D62
.text$mn:00002D62 __catch$_WinMain@16$4 proc near         ; DATA XREF: .xdata$x:0000AF94o
.text$mn:00002D62                 push    0               ; uType
.text$mn:00002D64                 push    offset $SG173256 ; "Unknown Exception"
.text$mn:00002D69                 push    offset $SG173257 ; "An exception that we did not yet found "...
.text$mn:00002D6E                 mov     edx, dword ptr ds:?gNppHWND@Notepad_plus_Window@@2PAUHWND__@@A ; HWND__ * Notepad_plus_Window::gNppHWND
.text$mn:00002D74                 push    edx             ; hWnd
.text$mn:00002D75                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text$mn:00002D7B                 lea     eax, [ebp-55C18h]
.text$mn:00002D81                 push    eax             ; struct Notepad_plus_Window *
.text$mn:00002D82                 call    ?doException@@YAXAAVNotepad_plus_Window@@@Z ; doException(Notepad_plus_Window &)
.text$mn:00002D87                 add     esp, 4
.text$mn:00002D8A                 mov     eax, offset $LN74
.text$mn:00002D8F                 retn
.text$mn:00002D8F __catch$_WinMain@16$4 endp
.text$mn:00002D8F
.text$mn:00002D90 ; ---------------------------------------------------------------------------
.text$mn:00002D90 ; START OF FUNCTION CHUNK FOR _WinMain@16
.text$mn:00002D90
.text$mn:00002D90 loc_2D90:                               ; CODE XREF: WinMain(x,x,x,x):loc_2BE7j
.text$mn:00002D90                 mov     [ebp+var_4], 0Bh
.text$mn:00002D97                 jmp     short loc_2DA2
.text$mn:00002D97 ; END OF FUNCTION CHUNK FOR _WinMain@16
.text$mn:00002D99
.text$mn:00002D99 ; =============== S U B R O U T I N E =======================================
.text$mn:00002D99
.text$mn:00002D99
.text$mn:00002D99 $LN74           proc near               ; DATA XREF: __catch$_WinMain@16$4+28o
.text$mn:00002D99                 mov     dword ptr [ebp-4], 0Bh
.text$mn:00002DA0                 jmp     short loc_2DCC
.text$mn:00002DA2 ; ---------------------------------------------------------------------------
.text$mn:00002DA2
.text$mn:00002DA2 loc_2DA2:                               ; CODE XREF: WinMain(x,x,x,x)+CBBj
.text$mn:00002DA2                 jmp     short loc_2DAD
.text$mn:00002DA4 ; ---------------------------------------------------------------------------
.text$mn:00002DA4
.text$mn:00002DA4 $LN72:                                  ; DATA XREF: __catch$_WinMain@16$3+36o
.text$mn:00002DA4                 mov     dword ptr [ebp-4], 0Bh
.text$mn:00002DAB                 jmp     short loc_2DCC
.text$mn:00002DAD ; ---------------------------------------------------------------------------
.text$mn:00002DAD
.text$mn:00002DAD loc_2DAD:                               ; CODE XREF: $LN74:loc_2DA2j
.text$mn:00002DAD                 jmp     short loc_2DB8
.text$mn:00002DAF ; ---------------------------------------------------------------------------
.text$mn:00002DAF
.text$mn:00002DAF $LN70:                                  ; DATA XREF: __catch$_WinMain@16$2+81o
.text$mn:00002DAF                 mov     dword ptr [ebp-4], 0Bh
.text$mn:00002DB6                 jmp     short loc_2DCC
.text$mn:00002DB8 ; ---------------------------------------------------------------------------
.text$mn:00002DB8
.text$mn:00002DB8 loc_2DB8:                               ; CODE XREF: $LN74:loc_2DADj
.text$mn:00002DB8                 jmp     short loc_2DC3
.text$mn:00002DBA ; ---------------------------------------------------------------------------
.text$mn:00002DBA
.text$mn:00002DBA $LN68:                                  ; DATA XREF: __catch$_WinMain@16$1+37o
.text$mn:00002DBA                 mov     dword ptr [ebp-4], 0Bh
.text$mn:00002DC1                 jmp     short loc_2DCC
.text$mn:00002DC3 ; ---------------------------------------------------------------------------
.text$mn:00002DC3
.text$mn:00002DC3 loc_2DC3:                               ; CODE XREF: $LN74:loc_2DB8j
.text$mn:00002DC3                 jmp     short loc_2DCC
.text$mn:00002DC5 ; ---------------------------------------------------------------------------
.text$mn:00002DC5
.text$mn:00002DC5 $LN66:                                  ; DATA XREF: __catch$_WinMain@16$0+70o
.text$mn:00002DC5                 mov     dword ptr [ebp-4], 0Bh
.text$mn:00002DCC
.text$mn:00002DCC loc_2DCC:                               ; CODE XREF: $LN74+7j
.text$mn:00002DCC                                         ; $LN74+12j ...
.text$mn:00002DCC                 mov     ecx, [ebp-55CDCh]
.text$mn:00002DD2                 mov     [ebp-55C7Ch], ecx
.text$mn:00002DD8                 mov     byte ptr [ebp-4], 0Ah
.text$mn:00002DDC                 lea     ecx, [ebp-93Ch]
.text$mn:00002DE2                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002DE7                 mov     byte ptr [ebp-4], 9
.text$mn:00002DEB                 lea     ecx, [ebp-958h]
.text$mn:00002DF1                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002DF6                 mov     byte ptr [ebp-4], 8
.text$mn:00002DFA                 lea     ecx, [ebp-920h]
.text$mn:00002E00                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002E05                 mov     byte ptr [ebp-4], 5
.text$mn:00002E09                 lea     ecx, [ebp-55C18h] ; this
.text$mn:00002E0F                 call    ??1Notepad_plus_Window@@UAE@XZ ; Notepad_plus_Window::~Notepad_plus_Window(void)
.text$mn:00002E14                 mov     byte ptr [ebp-4], 1
.text$mn:00002E18                 lea     ecx, [ebp-8A8h]
.text$mn:00002E1E                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002E23                 mov     byte ptr [ebp-4], 0
.text$mn:00002E27                 lea     ecx, [ebp-904h] ; this
.text$mn:00002E2D                 call    ??1CmdLineParams@@QAE@XZ ; CmdLineParams::~CmdLineParams(void)
.text$mn:00002E32                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00002E39                 lea     ecx, [ebp-55C40h]
.text$mn:00002E3F                 call    ??1?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::~vector<wchar_t const *,std::allocator<wchar_t const *>>(void)
.text$mn:00002E44                 mov     eax, [ebp-55C7Ch]
.text$mn:00002E44 $LN74           endp ; sp-analysis failed
.text$mn:00002E44
.text$mn:00002E4A ; START OF FUNCTION CHUNK FOR _WinMain@16
.text$mn:00002E4A
.text$mn:00002E4A loc_2E4A:                               ; CODE XREF: WinMain(x,x,x,x)+710j
.text$mn:00002E4A                 mov     ecx, [ebp+var_C]
.text$mn:00002E4D                 mov     large fs:0, ecx
.text$mn:00002E54                 pop     ecx
.text$mn:00002E55                 pop     edi
.text$mn:00002E56                 pop     esi
.text$mn:00002E57                 pop     ebx
.text$mn:00002E58                 mov     ecx, [ebp+var_14]
.text$mn:00002E5B                 xor     ecx, ebp
.text$mn:00002E5D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00002E62                 mov     esp, ebp
.text$mn:00002E64                 pop     ebp
.text$mn:00002E65                 retn    10h
.text$mn:00002E65 ; END OF FUNCTION CHUNK FOR _WinMain@16
.text$mn:00002E65 ; ---------------------------------------------------------------------------
.text$mn:00002E68                 db 4 dup(0CCh)
.text$mn:00002E6C
.text$mn:00002E6C ; =============== S U B R O U T I N E =======================================
.text$mn:00002E6C
.text$mn:00002E6C ; Attributes: bp-based frame
.text$mn:00002E6C
.text$mn:00002E6C ; bool __cdecl checkSingleFile(LPCWSTR lpString)
.text$mn:00002E6C                 public ?checkSingleFile@@YA_NPB_W@Z
.text$mn:00002E6C ?checkSingleFile@@YA_NPB_W@Z proc near  ; CODE XREF: parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+A9p
.text$mn:00002E6C
.text$mn:00002E6C var_210         = dword ptr -210h
.text$mn:00002E6C Buffer          = word ptr -20Ch
.text$mn:00002E6C Dst             = byte ptr -20Ah
.text$mn:00002E6C var_4           = dword ptr -4
.text$mn:00002E6C lpString        = dword ptr  8
.text$mn:00002E6C
.text$mn:00002E6C                 push    ebp
.text$mn:00002E6D                 mov     ebp, esp
.text$mn:00002E6F                 sub     esp, 210h
.text$mn:00002E75                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002E7A                 xor     eax, ebp
.text$mn:00002E7C                 mov     [ebp+var_4], eax
.text$mn:00002E7F                 cmp     [ebp+lpString], 0
.text$mn:00002E83                 jz      short loc_2E93
.text$mn:00002E85                 mov     eax, [ebp+lpString]
.text$mn:00002E88                 push    eax             ; lpString
.text$mn:00002E89                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00002E8F                 test    eax, eax
.text$mn:00002E91                 jnz     short loc_2E97
.text$mn:00002E93
.text$mn:00002E93 loc_2E93:                               ; CODE XREF: checkSingleFile(wchar_t const *)+17j
.text$mn:00002E93                 xor     al, al
.text$mn:00002E95                 jmp     short loc_2F08
.text$mn:00002E97 ; ---------------------------------------------------------------------------
.text$mn:00002E97
.text$mn:00002E97 loc_2E97:                               ; CODE XREF: checkSingleFile(wchar_t const *)+25j
.text$mn:00002E97                 xor     ecx, ecx
.text$mn:00002E99                 mov     [ebp+Buffer], cx
.text$mn:00002EA0                 push    206h            ; Size
.text$mn:00002EA5                 push    0               ; Val
.text$mn:00002EA7                 lea     edx, [ebp+Dst]
.text$mn:00002EAD                 push    edx             ; Dst
.text$mn:00002EAE                 call    _memset
.text$mn:00002EB3                 add     esp, 0Ch
.text$mn:00002EB6                 push    0               ; lpFilePart
.text$mn:00002EB8                 lea     eax, [ebp+Buffer]
.text$mn:00002EBE                 push    eax             ; lpBuffer
.text$mn:00002EBF                 push    104h            ; nBufferLength
.text$mn:00002EC4                 mov     ecx, [ebp+lpString]
.text$mn:00002EC7                 push    ecx             ; lpFileName
.text$mn:00002EC8                 call    dword ptr ds:__imp__GetFullPathNameW@16 ; GetFullPathNameW(x,x,x,x)
.text$mn:00002ECE                 mov     [ebp+var_210], eax
.text$mn:00002ED4                 cmp     [ebp+var_210], 0
.text$mn:00002EDB                 jnz     short loc_2EE1
.text$mn:00002EDD                 xor     al, al
.text$mn:00002EDF                 jmp     short loc_2F08
.text$mn:00002EE1 ; ---------------------------------------------------------------------------
.text$mn:00002EE1
.text$mn:00002EE1 loc_2EE1:                               ; CODE XREF: checkSingleFile(wchar_t const *)+6Fj
.text$mn:00002EE1                 cmp     [ebp+var_210], 104h
.text$mn:00002EEB                 jbe     short loc_2EF1
.text$mn:00002EED                 xor     al, al
.text$mn:00002EEF                 jmp     short loc_2F08
.text$mn:00002EF1 ; ---------------------------------------------------------------------------
.text$mn:00002EF1
.text$mn:00002EF1 loc_2EF1:                               ; CODE XREF: checkSingleFile(wchar_t const *)+7Fj
.text$mn:00002EF1                 lea     edx, [ebp+Buffer]
.text$mn:00002EF7                 push    edx             ; pszPath
.text$mn:00002EF8                 call    dword ptr ds:__imp__PathFileExistsW@4 ; PathFileExistsW(x)
.text$mn:00002EFE                 test    eax, eax
.text$mn:00002F00                 jz      short loc_2F06
.text$mn:00002F02                 mov     al, 1
.text$mn:00002F04                 jmp     short loc_2F08
.text$mn:00002F06 ; ---------------------------------------------------------------------------
.text$mn:00002F06
.text$mn:00002F06 loc_2F06:                               ; CODE XREF: checkSingleFile(wchar_t const *)+94j
.text$mn:00002F06                 xor     al, al
.text$mn:00002F08
.text$mn:00002F08 loc_2F08:                               ; CODE XREF: checkSingleFile(wchar_t const *)+29j
.text$mn:00002F08                                         ; checkSingleFile(wchar_t const *)+73j ...
.text$mn:00002F08                 mov     ecx, [ebp+var_4]
.text$mn:00002F0B                 xor     ecx, ebp
.text$mn:00002F0D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00002F12                 mov     esp, ebp
.text$mn:00002F14                 pop     ebp
.text$mn:00002F15                 retn
.text$mn:00002F15 ?checkSingleFile@@YA_NPB_W@Z endp
.text$mn:00002F15
.text$mn:00002F15 ; ---------------------------------------------------------------------------
.text$mn:00002F16                 db 6 dup(0CCh)
.text$mn:00002F1C
.text$mn:00002F1C ; =============== S U B R O U T I N E =======================================
.text$mn:00002F1C
.text$mn:00002F1C ; Attributes: bp-based frame
.text$mn:00002F1C
.text$mn:00002F1C ; int __cdecl parseCommandLine(LPCWSTR lpString, int)
.text$mn:00002F1C                 public ?parseCommandLine@@YAXPA_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z
.text$mn:00002F1C ?parseCommandLine@@YAXPA_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z proc near
.text$mn:00002F1C                                         ; CODE XREF: WinMain(x,x,x,x)+62p
.text$mn:00002F1C
.text$mn:00002F1C var_20          = dword ptr -20h
.text$mn:00002F1C var_1C          = dword ptr -1Ch
.text$mn:00002F1C var_18          = dword ptr -18h
.text$mn:00002F1C var_14          = dword ptr -14h
.text$mn:00002F1C var_10          = dword ptr -10h
.text$mn:00002F1C var_C           = dword ptr -0Ch
.text$mn:00002F1C var_8           = word ptr -8
.text$mn:00002F1C var_3           = byte ptr -3
.text$mn:00002F1C var_2           = byte ptr -2
.text$mn:00002F1C var_1           = byte ptr -1
.text$mn:00002F1C lpString        = dword ptr  8
.text$mn:00002F1C arg_4           = dword ptr  0Ch
.text$mn:00002F1C
.text$mn:00002F1C                 push    ebp
.text$mn:00002F1D                 mov     ebp, esp
.text$mn:00002F1F                 sub     esp, 20h
.text$mn:00002F22                 mov     eax, 20h ; ' '
.text$mn:00002F27                 mov     [ebp+var_8], ax
.text$mn:00002F2B                 mov     ecx, 2
.text$mn:00002F30                 imul    edx, ecx, 0
.text$mn:00002F33                 mov     eax, [ebp+lpString]
.text$mn:00002F36                 movzx   ecx, word ptr [eax+edx]
.text$mn:00002F3A                 cmp     ecx, 22h ; '"'
.text$mn:00002F3D                 jnz     short loc_2F51
.text$mn:00002F3F                 mov     edx, 22h ; '"'
.text$mn:00002F44                 mov     [ebp+var_8], dx
.text$mn:00002F48                 mov     eax, [ebp+lpString]
.text$mn:00002F4B                 add     eax, 2
.text$mn:00002F4E                 mov     [ebp+lpString], eax
.text$mn:00002F51
.text$mn:00002F51 loc_2F51:                               ; CODE XREF: parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+21j
.text$mn:00002F51                                         ; parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+68j
.text$mn:00002F51                 mov     ecx, 2
.text$mn:00002F56                 imul    edx, ecx, 0
.text$mn:00002F59                 mov     eax, [ebp+lpString]
.text$mn:00002F5C                 movzx   ecx, word ptr [eax+edx]
.text$mn:00002F60                 test    ecx, ecx
.text$mn:00002F62                 jz      short loc_2F86
.text$mn:00002F64                 mov     edx, 2
.text$mn:00002F69                 imul    eax, edx, 0
.text$mn:00002F6C                 mov     ecx, [ebp+lpString]
.text$mn:00002F6F                 movzx   edx, word ptr [ecx+eax]
.text$mn:00002F73                 movzx   eax, [ebp+var_8]
.text$mn:00002F77                 cmp     edx, eax
.text$mn:00002F79                 jz      short loc_2F86
.text$mn:00002F7B                 mov     ecx, [ebp+lpString]
.text$mn:00002F7E                 add     ecx, 2
.text$mn:00002F81                 mov     [ebp+lpString], ecx
.text$mn:00002F84                 jmp     short loc_2F51
.text$mn:00002F86 ; ---------------------------------------------------------------------------
.text$mn:00002F86
.text$mn:00002F86 loc_2F86:                               ; CODE XREF: parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+46j
.text$mn:00002F86                                         ; parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+5Dj
.text$mn:00002F86                 mov     edx, 2
.text$mn:00002F8B                 imul    eax, edx, 0
.text$mn:00002F8E                 mov     ecx, [ebp+lpString]
.text$mn:00002F91                 movzx   edx, word ptr [ecx+eax]
.text$mn:00002F95                 test    edx, edx
.text$mn:00002F97                 jz      short loc_2FA2
.text$mn:00002F99                 mov     eax, [ebp+lpString]
.text$mn:00002F9C                 add     eax, 2
.text$mn:00002F9F                 mov     [ebp+lpString], eax
.text$mn:00002FA2
.text$mn:00002FA2 loc_2FA2:                               ; CODE XREF: parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+7Bj
.text$mn:00002FA2                                         ; parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+A3j
.text$mn:00002FA2                 mov     ecx, 2
.text$mn:00002FA7                 imul    edx, ecx, 0
.text$mn:00002FAA                 mov     eax, [ebp+lpString]
.text$mn:00002FAD                 movzx   ecx, word ptr [eax+edx]
.text$mn:00002FB1                 cmp     ecx, 20h ; ' '
.text$mn:00002FB4                 jnz     short loc_2FC1
.text$mn:00002FB6                 mov     edx, [ebp+lpString]
.text$mn:00002FB9                 add     edx, 2
.text$mn:00002FBC                 mov     [ebp+lpString], edx
.text$mn:00002FBF                 jmp     short loc_2FA2
.text$mn:00002FC1 ; ---------------------------------------------------------------------------
.text$mn:00002FC1
.text$mn:00002FC1 loc_2FC1:                               ; CODE XREF: parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+98j
.text$mn:00002FC1                 mov     eax, [ebp+lpString]
.text$mn:00002FC4                 push    eax             ; lpString
.text$mn:00002FC5                 call    ?checkSingleFile@@YA_NPB_W@Z ; checkSingleFile(wchar_t const *)
.text$mn:00002FCA                 add     esp, 4
.text$mn:00002FCD                 mov     [ebp+var_3], al
.text$mn:00002FD0                 movzx   ecx, [ebp+var_3]
.text$mn:00002FD4                 test    ecx, ecx
.text$mn:00002FD6                 jz      short loc_2FE9
.text$mn:00002FD8                 lea     edx, [ebp+lpString]
.text$mn:00002FDB                 push    edx
.text$mn:00002FDC                 mov     ecx, [ebp+arg_4]
.text$mn:00002FDF                 call    ?push_back@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAEXABQB_W@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * const &)
.text$mn:00002FE4                 jmp     loc_30E1
.text$mn:00002FE9 ; ---------------------------------------------------------------------------
.text$mn:00002FE9
.text$mn:00002FE9 loc_2FE9:                               ; CODE XREF: parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+BAj
.text$mn:00002FE9                 mov     [ebp+var_1], 0
.text$mn:00002FED                 mov     [ebp+var_2], 1
.text$mn:00002FF1                 mov     ecx, [ebp+arg_4]
.text$mn:00002FF4                 call    ?clear@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAEXXZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::clear(void)
.text$mn:00002FF9                 mov     eax, [ebp+lpString]
.text$mn:00002FFC                 push    eax             ; lpString
.text$mn:00002FFD                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00003003                 mov     [ebp+var_18], eax
.text$mn:00003006                 mov     [ebp+var_C], 0
.text$mn:0000300D                 jmp     short loc_3018
.text$mn:0000300F ; ---------------------------------------------------------------------------
.text$mn:0000300F
.text$mn:0000300F loc_300F:                               ; CODE XREF: parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &):loc_30DCj
.text$mn:0000300F                 mov     ecx, [ebp+var_C]
.text$mn:00003012                 add     ecx, 1
.text$mn:00003015                 mov     [ebp+var_C], ecx
.text$mn:00003018
.text$mn:00003018 loc_3018:                               ; CODE XREF: parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+F1j
.text$mn:00003018                 mov     edx, [ebp+var_C]
.text$mn:0000301B                 cmp     edx, [ebp+var_18]
.text$mn:0000301E                 jnb     loc_30E1
.text$mn:00003024                 mov     eax, [ebp+var_C]
.text$mn:00003027                 mov     ecx, [ebp+lpString]
.text$mn:0000302A                 movzx   edx, word ptr [ecx+eax*2]
.text$mn:0000302E                 mov     [ebp+var_10], edx
.text$mn:00003031                 cmp     [ebp+var_10], 9
.text$mn:00003035                 jz      short loc_3096
.text$mn:00003037                 cmp     [ebp+var_10], 20h ; ' '
.text$mn:0000303B                 jz      short loc_3096
.text$mn:0000303D                 cmp     [ebp+var_10], 22h ; '"'
.text$mn:00003041                 jz      short loc_3045
.text$mn:00003043                 jmp     short loc_30B0
.text$mn:00003045 ; ---------------------------------------------------------------------------
.text$mn:00003045
.text$mn:00003045 loc_3045:                               ; CODE XREF: parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+125j
.text$mn:00003045                 movzx   eax, [ebp+var_1]
.text$mn:00003049                 test    eax, eax
.text$mn:0000304B                 jnz     short loc_3066
.text$mn:0000304D                 mov     ecx, [ebp+var_C]
.text$mn:00003050                 mov     edx, [ebp+lpString]
.text$mn:00003053                 lea     eax, [edx+ecx*2+2]
.text$mn:00003057                 mov     [ebp+var_1C], eax
.text$mn:0000305A                 lea     ecx, [ebp+var_1C]
.text$mn:0000305D                 push    ecx
.text$mn:0000305E                 mov     ecx, [ebp+arg_4]
.text$mn:00003061                 call    ?push_back@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAEX$$QAPB_W@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * &&)
.text$mn:00003066
.text$mn:00003066 loc_3066:                               ; CODE XREF: parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+12Fj
.text$mn:00003066                 movzx   edx, [ebp+var_1]
.text$mn:0000306A                 test    edx, edx
.text$mn:0000306C                 jnz     short loc_3077
.text$mn:0000306E                 mov     [ebp+var_14], 1
.text$mn:00003075                 jmp     short loc_307E
.text$mn:00003077 ; ---------------------------------------------------------------------------
.text$mn:00003077
.text$mn:00003077 loc_3077:                               ; CODE XREF: parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+150j
.text$mn:00003077                 mov     [ebp+var_14], 0
.text$mn:0000307E
.text$mn:0000307E loc_307E:                               ; CODE XREF: parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+159j
.text$mn:0000307E                 mov     al, byte ptr [ebp+var_14]
.text$mn:00003081                 mov     [ebp+var_1], al
.text$mn:00003084                 mov     [ebp+var_2], 0
.text$mn:00003088                 xor     ecx, ecx
.text$mn:0000308A                 mov     edx, [ebp+var_C]
.text$mn:0000308D                 mov     eax, [ebp+lpString]
.text$mn:00003090                 mov     [eax+edx*2], cx
.text$mn:00003094                 jmp     short loc_30DC
.text$mn:00003096 ; ---------------------------------------------------------------------------
.text$mn:00003096
.text$mn:00003096 loc_3096:                               ; CODE XREF: parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+119j
.text$mn:00003096                                         ; parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+11Fj
.text$mn:00003096                 mov     [ebp+var_2], 1
.text$mn:0000309A                 movzx   ecx, [ebp+var_1]
.text$mn:0000309E                 test    ecx, ecx
.text$mn:000030A0                 jnz     short loc_30AE
.text$mn:000030A2                 xor     edx, edx
.text$mn:000030A4                 mov     eax, [ebp+var_C]
.text$mn:000030A7                 mov     ecx, [ebp+lpString]
.text$mn:000030AA                 mov     [ecx+eax*2], dx
.text$mn:000030AE
.text$mn:000030AE loc_30AE:                               ; CODE XREF: parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+184j
.text$mn:000030AE                 jmp     short loc_30DC
.text$mn:000030B0 ; ---------------------------------------------------------------------------
.text$mn:000030B0
.text$mn:000030B0 loc_30B0:                               ; CODE XREF: parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+127j
.text$mn:000030B0                 movzx   edx, [ebp+var_1]
.text$mn:000030B4                 test    edx, edx
.text$mn:000030B6                 jnz     short loc_30DC
.text$mn:000030B8                 movzx   eax, [ebp+var_2]
.text$mn:000030BC                 test    eax, eax
.text$mn:000030BE                 jz      short loc_30DC
.text$mn:000030C0                 mov     ecx, [ebp+var_C]
.text$mn:000030C3                 mov     edx, [ebp+lpString]
.text$mn:000030C6                 lea     eax, [edx+ecx*2]
.text$mn:000030C9                 mov     [ebp+var_20], eax
.text$mn:000030CC                 lea     ecx, [ebp+var_20]
.text$mn:000030CF                 push    ecx
.text$mn:000030D0                 mov     ecx, [ebp+arg_4]
.text$mn:000030D3                 call    ?push_back@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAEX$$QAPB_W@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * &&)
.text$mn:000030D8                 mov     [ebp+var_2], 0
.text$mn:000030DC
.text$mn:000030DC loc_30DC:                               ; CODE XREF: parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+178j
.text$mn:000030DC                                         ; parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &):loc_30AEj ...
.text$mn:000030DC                 jmp     loc_300F
.text$mn:000030E1 ; ---------------------------------------------------------------------------
.text$mn:000030E1
.text$mn:000030E1 loc_30E1:                               ; CODE XREF: parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+C8j
.text$mn:000030E1                                         ; parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+102j
.text$mn:000030E1                 mov     esp, ebp
.text$mn:000030E3                 pop     ebp
.text$mn:000030E4                 retn
.text$mn:000030E4 ?parseCommandLine@@YAXPA_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z endp
.text$mn:000030E4
.text$mn:000030E4 ; ---------------------------------------------------------------------------
.text$mn:000030E5                 db 7 dup(0CCh)
.text$mn:000030EC
.text$mn:000030EC ; =============== S U B R O U T I N E =======================================
.text$mn:000030EC
.text$mn:000030EC ; Attributes: bp-based frame
.text$mn:000030EC
.text$mn:000030EC ; int __cdecl isInList(LPCWSTR lpString1, int)
.text$mn:000030EC                 public ?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z
.text$mn:000030EC ?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z proc near
.text$mn:000030EC                                         ; CODE XREF: WinMain(x,x,x,x)+B3p
.text$mn:000030EC                                         ; WinMain(x,x,x,x)+CDp ...
.text$mn:000030EC
.text$mn:000030EC var_58          = byte ptr -58h
.text$mn:000030EC var_4C          = dword ptr -4Ch
.text$mn:000030EC var_40          = dword ptr -40h
.text$mn:000030EC var_34          = dword ptr -34h
.text$mn:000030EC var_30          = dword ptr -30h
.text$mn:000030EC var_2C          = dword ptr -2Ch
.text$mn:000030EC var_28          = dword ptr -28h
.text$mn:000030EC var_24          = dword ptr -24h
.text$mn:000030EC var_20          = dword ptr -20h
.text$mn:000030EC var_1C          = dword ptr -1Ch
.text$mn:000030EC var_18          = dword ptr -18h
.text$mn:000030EC var_14          = dword ptr -14h
.text$mn:000030EC Dst             = dword ptr -10h
.text$mn:000030EC var_C           = dword ptr -0Ch
.text$mn:000030EC var_4           = dword ptr -4
.text$mn:000030EC lpString1       = dword ptr  8
.text$mn:000030EC arg_4           = dword ptr  0Ch
.text$mn:000030EC
.text$mn:000030EC                 push    ebp
.text$mn:000030ED                 mov     ebp, esp
.text$mn:000030EF                 push    0FFFFFFFFh
.text$mn:000030F1                 push    offset __ehhandler$?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z
.text$mn:000030F6                 mov     eax, large fs:0
.text$mn:000030FC                 push    eax
.text$mn:000030FD                 sub     esp, 4Ch
.text$mn:00003100                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003105                 xor     eax, ebp
.text$mn:00003107                 push    eax
.text$mn:00003108                 lea     eax, [ebp+var_C]
.text$mn:0000310B                 mov     large fs:0, eax
.text$mn:00003111                 mov     ecx, [ebp+arg_4]
.text$mn:00003114                 call    ?size@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::size(void)
.text$mn:00003119                 mov     [ebp+var_14], eax
.text$mn:0000311C                 mov     [ebp+Dst], 0
.text$mn:00003123                 jmp     short loc_312E
.text$mn:00003125 ; ---------------------------------------------------------------------------
.text$mn:00003125
.text$mn:00003125 loc_3125:                               ; CODE XREF: isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &):loc_31ECj
.text$mn:00003125                 mov     eax, [ebp+Dst]
.text$mn:00003128                 add     eax, 1
.text$mn:0000312B                 mov     [ebp+Dst], eax
.text$mn:0000312E
.text$mn:0000312E loc_312E:                               ; CODE XREF: isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+37j
.text$mn:0000312E                 mov     ecx, [ebp+Dst]
.text$mn:00003131                 cmp     ecx, [ebp+var_14]
.text$mn:00003134                 jge     loc_31F1
.text$mn:0000313A                 mov     edx, [ebp+Dst]
.text$mn:0000313D                 push    edx
.text$mn:0000313E                 mov     ecx, [ebp+arg_4]
.text$mn:00003141                 call    ?at@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAEAAPB_WI@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::at(uint)
.text$mn:00003146                 mov     eax, [eax]
.text$mn:00003148                 push    eax             ; lpString2
.text$mn:00003149                 mov     ecx, [ebp+lpString1]
.text$mn:0000314C                 push    ecx             ; lpString1
.text$mn:0000314D                 call    dword ptr ds:__imp__lstrcmpW@8 ; lstrcmpW(x,x)
.text$mn:00003153                 test    eax, eax
.text$mn:00003155                 jnz     loc_31EC
.text$mn:0000315B                 mov     edx, [ebp+Dst]
.text$mn:0000315E                 push    edx             ; Dst
.text$mn:0000315F                 lea     eax, [ebp+var_4C]
.text$mn:00003162                 push    eax             ; int
.text$mn:00003163                 lea     ecx, [ebp+var_58]
.text$mn:00003166                 push    ecx             ; char
.text$mn:00003167                 mov     ecx, [ebp+arg_4]
.text$mn:0000316A                 call    ?begin@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@XZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::begin(void)
.text$mn:0000316F                 mov     [ebp+var_18], eax
.text$mn:00003172                 mov     edx, [ebp+var_18]
.text$mn:00003175                 mov     [ebp+var_1C], edx
.text$mn:00003178                 mov     [ebp+var_4], 0
.text$mn:0000317F                 mov     ecx, [ebp+var_1C]
.text$mn:00003182                 call    ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+(int)
.text$mn:00003187                 mov     [ebp+var_20], eax
.text$mn:0000318A                 mov     eax, [ebp+var_20]
.text$mn:0000318D                 mov     [ebp+var_24], eax
.text$mn:00003190                 mov     byte ptr [ebp+var_4], 1
.text$mn:00003194                 sub     esp, 0Ch
.text$mn:00003197                 mov     ecx, esp
.text$mn:00003199                 mov     [ebp+var_2C], esp
.text$mn:0000319C                 mov     edx, [ebp+var_24]
.text$mn:0000319F                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:000031A0                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>> const &)
.text$mn:000031A5                 mov     [ebp+var_28], eax
.text$mn:000031A8                 mov     eax, [ebp+var_28]
.text$mn:000031AB                 mov     [ebp+var_30], eax
.text$mn:000031AE                 mov     byte ptr [ebp+var_4], 2
.text$mn:000031B2                 lea     ecx, [ebp+var_40]
.text$mn:000031B5                 push    ecx             ; int
.text$mn:000031B6                 mov     byte ptr [ebp+var_4], 1
.text$mn:000031BA                 mov     ecx, [ebp+arg_4]
.text$mn:000031BD                 call    ?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>)
.text$mn:000031C2                 mov     [ebp+var_34], eax
.text$mn:000031C5                 lea     ecx, [ebp+var_40]
.text$mn:000031C8                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$mn:000031CD                 mov     byte ptr [ebp+var_4], 0
.text$mn:000031D1                 lea     ecx, [ebp+var_4C]
.text$mn:000031D4                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$mn:000031D9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000031E0                 lea     ecx, [ebp+var_58]
.text$mn:000031E3                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$mn:000031E8                 mov     al, 1
.text$mn:000031EA                 jmp     short loc_31F3
.text$mn:000031EC ; ---------------------------------------------------------------------------
.text$mn:000031EC
.text$mn:000031EC loc_31EC:                               ; CODE XREF: isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+69j
.text$mn:000031EC                 jmp     loc_3125
.text$mn:000031F1 ; ---------------------------------------------------------------------------
.text$mn:000031F1
.text$mn:000031F1 loc_31F1:                               ; CODE XREF: isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+48j
.text$mn:000031F1                 xor     al, al
.text$mn:000031F3
.text$mn:000031F3 loc_31F3:                               ; CODE XREF: isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+FEj
.text$mn:000031F3                 mov     ecx, [ebp+var_C]
.text$mn:000031F6                 mov     large fs:0, ecx
.text$mn:000031FD                 pop     ecx
.text$mn:000031FE                 mov     esp, ebp
.text$mn:00003200                 pop     ebp
.text$mn:00003201                 retn
.text$mn:00003201 ?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z endp
.text$mn:00003201
.text$mn:00003201 ; ---------------------------------------------------------------------------
.text$mn:00003202                 db 0Ah dup(0CCh)
.text$mn:0000320C
.text$mn:0000320C ; =============== S U B R O U T I N E =======================================
.text$mn:0000320C
.text$mn:0000320C ; Attributes: bp-based frame
.text$mn:0000320C
.text$mn:0000320C ; bool __cdecl getParamVal(wchar_t, class std::vector<wchar_t const *, class std::allocator<wchar_t const *>> &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:0000320C                 public ?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
.text$mn:0000320C ?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z proc near
.text$mn:0000320C                                         ; CODE XREF: getLangTypeFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+41p
.text$mn:0000320C                                         ; getLocalizationPathFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+48p ...
.text$mn:0000320C
.text$mn:0000320C var_5C          = byte ptr -5Ch
.text$mn:0000320C var_50          = dword ptr -50h
.text$mn:0000320C var_44          = dword ptr -44h
.text$mn:0000320C var_38          = dword ptr -38h
.text$mn:0000320C var_34          = dword ptr -34h
.text$mn:0000320C var_30          = dword ptr -30h
.text$mn:0000320C var_2C          = dword ptr -2Ch
.text$mn:0000320C var_28          = dword ptr -28h
.text$mn:0000320C var_24          = dword ptr -24h
.text$mn:0000320C var_20          = dword ptr -20h
.text$mn:0000320C var_1C          = dword ptr -1Ch
.text$mn:0000320C var_18          = dword ptr -18h
.text$mn:0000320C lpString        = dword ptr -14h
.text$mn:0000320C Dst             = dword ptr -10h
.text$mn:0000320C var_C           = dword ptr -0Ch
.text$mn:0000320C var_4           = dword ptr -4
.text$mn:0000320C arg_0           = word ptr  8
.text$mn:0000320C arg_4           = dword ptr  0Ch
.text$mn:0000320C arg_8           = dword ptr  10h
.text$mn:0000320C
.text$mn:0000320C                 push    ebp
.text$mn:0000320D                 mov     ebp, esp
.text$mn:0000320F                 push    0FFFFFFFFh
.text$mn:00003211                 push    offset __ehhandler$?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
.text$mn:00003216                 mov     eax, large fs:0
.text$mn:0000321C                 push    eax
.text$mn:0000321D                 sub     esp, 50h
.text$mn:00003220                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003225                 xor     eax, ebp
.text$mn:00003227                 push    eax
.text$mn:00003228                 lea     eax, [ebp+var_C]
.text$mn:0000322B                 mov     large fs:0, eax
.text$mn:00003231                 push    offset $SG172893 ; Str
.text$mn:00003236                 mov     ecx, [ebp+arg_8]
.text$mn:00003239                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:0000323E                 mov     ecx, [ebp+arg_4]
.text$mn:00003241                 call    ?size@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::size(void)
.text$mn:00003246                 mov     [ebp+var_18], eax
.text$mn:00003249                 mov     [ebp+Dst], 0
.text$mn:00003250                 jmp     short loc_325B
.text$mn:00003252 ; ---------------------------------------------------------------------------
.text$mn:00003252
.text$mn:00003252 loc_3252:                               ; CODE XREF: getParamVal(wchar_t,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &):loc_335Ej
.text$mn:00003252                 mov     eax, [ebp+Dst]
.text$mn:00003255                 add     eax, 1
.text$mn:00003258                 mov     [ebp+Dst], eax
.text$mn:0000325B
.text$mn:0000325B loc_325B:                               ; CODE XREF: getParamVal(wchar_t,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+44j
.text$mn:0000325B                 mov     ecx, [ebp+Dst]
.text$mn:0000325E                 cmp     ecx, [ebp+var_18]
.text$mn:00003261                 jge     loc_3363
.text$mn:00003267                 mov     edx, [ebp+Dst]
.text$mn:0000326A                 push    edx
.text$mn:0000326B                 mov     ecx, [ebp+arg_4]
.text$mn:0000326E                 call    ?at@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAEAAPB_WI@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::at(uint)
.text$mn:00003273                 mov     eax, [eax]
.text$mn:00003275                 mov     [ebp+lpString], eax
.text$mn:00003278                 mov     ecx, 2
.text$mn:0000327D                 imul    edx, ecx, 0
.text$mn:00003280                 mov     eax, [ebp+lpString]
.text$mn:00003283                 movzx   ecx, word ptr [eax+edx]
.text$mn:00003287                 cmp     ecx, 2Dh ; '-'
.text$mn:0000328A                 jnz     loc_335E
.text$mn:00003290                 mov     edx, [ebp+lpString]
.text$mn:00003293                 push    edx             ; lpString
.text$mn:00003294                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:0000329A                 cmp     eax, 2
.text$mn:0000329D                 jl      loc_335E
.text$mn:000032A3                 mov     eax, 2
.text$mn:000032A8                 shl     eax, 0
.text$mn:000032AB                 mov     ecx, [ebp+lpString]
.text$mn:000032AE                 movzx   edx, word ptr [ecx+eax]
.text$mn:000032B2                 movzx   eax, [ebp+arg_0]
.text$mn:000032B6                 cmp     edx, eax
.text$mn:000032B8                 jnz     loc_335E
.text$mn:000032BE                 mov     ecx, [ebp+lpString]
.text$mn:000032C1                 add     ecx, 4
.text$mn:000032C4                 push    ecx             ; Str
.text$mn:000032C5                 mov     ecx, [ebp+arg_8]
.text$mn:000032C8                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:000032CD                 mov     edx, [ebp+Dst]
.text$mn:000032D0                 push    edx             ; Dst
.text$mn:000032D1                 lea     eax, [ebp+var_50]
.text$mn:000032D4                 push    eax             ; int
.text$mn:000032D5                 lea     ecx, [ebp+var_5C]
.text$mn:000032D8                 push    ecx             ; char
.text$mn:000032D9                 mov     ecx, [ebp+arg_4]
.text$mn:000032DC                 call    ?begin@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@XZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::begin(void)
.text$mn:000032E1                 mov     [ebp+var_1C], eax
.text$mn:000032E4                 mov     edx, [ebp+var_1C]
.text$mn:000032E7                 mov     [ebp+var_20], edx
.text$mn:000032EA                 mov     [ebp+var_4], 0
.text$mn:000032F1                 mov     ecx, [ebp+var_20]
.text$mn:000032F4                 call    ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+(int)
.text$mn:000032F9                 mov     [ebp+var_24], eax
.text$mn:000032FC                 mov     eax, [ebp+var_24]
.text$mn:000032FF                 mov     [ebp+var_28], eax
.text$mn:00003302                 mov     byte ptr [ebp+var_4], 1
.text$mn:00003306                 sub     esp, 0Ch
.text$mn:00003309                 mov     ecx, esp
.text$mn:0000330B                 mov     [ebp+var_30], esp
.text$mn:0000330E                 mov     edx, [ebp+var_28]
.text$mn:00003311                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00003312                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>> const &)
.text$mn:00003317                 mov     [ebp+var_2C], eax
.text$mn:0000331A                 mov     eax, [ebp+var_2C]
.text$mn:0000331D                 mov     [ebp+var_34], eax
.text$mn:00003320                 mov     byte ptr [ebp+var_4], 2
.text$mn:00003324                 lea     ecx, [ebp+var_44]
.text$mn:00003327                 push    ecx             ; int
.text$mn:00003328                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000332C                 mov     ecx, [ebp+arg_4]
.text$mn:0000332F                 call    ?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>)
.text$mn:00003334                 mov     [ebp+var_38], eax
.text$mn:00003337                 lea     ecx, [ebp+var_44]
.text$mn:0000333A                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$mn:0000333F                 mov     byte ptr [ebp+var_4], 0
.text$mn:00003343                 lea     ecx, [ebp+var_50]
.text$mn:00003346                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$mn:0000334B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003352                 lea     ecx, [ebp+var_5C]
.text$mn:00003355                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$mn:0000335A                 mov     al, 1
.text$mn:0000335C                 jmp     short loc_3365
.text$mn:0000335E ; ---------------------------------------------------------------------------
.text$mn:0000335E
.text$mn:0000335E loc_335E:                               ; CODE XREF: getParamVal(wchar_t,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+7Ej
.text$mn:0000335E                                         ; getParamVal(wchar_t,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+91j ...
.text$mn:0000335E                 jmp     loc_3252
.text$mn:00003363 ; ---------------------------------------------------------------------------
.text$mn:00003363
.text$mn:00003363 loc_3363:                               ; CODE XREF: getParamVal(wchar_t,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+55j
.text$mn:00003363                 xor     al, al
.text$mn:00003365
.text$mn:00003365 loc_3365:                               ; CODE XREF: getParamVal(wchar_t,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+150j
.text$mn:00003365                 mov     ecx, [ebp+var_C]
.text$mn:00003368                 mov     large fs:0, ecx
.text$mn:0000336F                 pop     ecx
.text$mn:00003370                 mov     esp, ebp
.text$mn:00003372                 pop     ebp
.text$mn:00003373                 retn
.text$mn:00003373 ?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z endp
.text$mn:00003373
.text$mn:00003373 ; ---------------------------------------------------------------------------
.text$mn:00003374                 db 8 dup(0CCh)
.text$mn:0000337C
.text$mn:0000337C ; =============== S U B R O U T I N E =======================================
.text$mn:0000337C
.text$mn:0000337C ; Attributes: bp-based frame
.text$mn:0000337C
.text$mn:0000337C ; int __cdecl getParamValFromString(LPCWSTR lpString, int, int)
.text$mn:0000337C                 public ?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
.text$mn:0000337C ?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z proc near
.text$mn:0000337C                                         ; CODE XREF: getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &)+51p
.text$mn:0000337C                                         ; getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &)+71p ...
.text$mn:0000337C
.text$mn:0000337C var_84          = dword ptr -84h
.text$mn:0000337C var_78          = byte ptr -78h
.text$mn:0000337C var_6C          = dword ptr -6Ch
.text$mn:0000337C var_60          = dword ptr -60h
.text$mn:0000337C var_5C          = dword ptr -5Ch
.text$mn:0000337C var_58          = dword ptr -58h
.text$mn:0000337C var_54          = dword ptr -54h
.text$mn:0000337C var_50          = dword ptr -50h
.text$mn:0000337C var_4C          = dword ptr -4Ch
.text$mn:0000337C var_48          = dword ptr -48h
.text$mn:0000337C var_44          = dword ptr -44h
.text$mn:0000337C var_40          = dword ptr -40h
.text$mn:0000337C Str             = dword ptr -3Ch
.text$mn:0000337C var_38          = dword ptr -38h
.text$mn:0000337C Dst             = dword ptr -34h
.text$mn:0000337C var_2D          = byte ptr -2Dh
.text$mn:0000337C var_2C          = byte ptr -2Ch
.text$mn:0000337C var_10          = dword ptr -10h
.text$mn:0000337C var_C           = dword ptr -0Ch
.text$mn:0000337C var_4           = dword ptr -4
.text$mn:0000337C lpString        = dword ptr  8
.text$mn:0000337C arg_4           = dword ptr  0Ch
.text$mn:0000337C arg_8           = dword ptr  10h
.text$mn:0000337C
.text$mn:0000337C                 push    ebp
.text$mn:0000337D                 mov     ebp, esp
.text$mn:0000337F                 push    0FFFFFFFFh
.text$mn:00003381                 push    offset __ehhandler$?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
.text$mn:00003386                 mov     eax, large fs:0
.text$mn:0000338C                 push    eax
.text$mn:0000338D                 sub     esp, 78h
.text$mn:00003390                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003395                 xor     eax, ebp
.text$mn:00003397                 mov     [ebp+var_10], eax
.text$mn:0000339A                 push    eax
.text$mn:0000339B                 lea     eax, [ebp+var_C]
.text$mn:0000339E                 mov     large fs:0, eax
.text$mn:000033A4                 push    offset $SG172910 ; Str
.text$mn:000033A9                 mov     ecx, [ebp+arg_8]
.text$mn:000033AC                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:000033B1                 mov     ecx, [ebp+arg_4]
.text$mn:000033B4                 call    ?size@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::size(void)
.text$mn:000033B9                 mov     [ebp+var_44], eax
.text$mn:000033BC                 mov     [ebp+Dst], 0
.text$mn:000033C3                 jmp     short loc_33CE
.text$mn:000033C5 ; ---------------------------------------------------------------------------
.text$mn:000033C5
.text$mn:000033C5 loc_33C5:                               ; CODE XREF: getParamValFromString(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+174j
.text$mn:000033C5                 mov     eax, [ebp+Dst]
.text$mn:000033C8                 add     eax, 1
.text$mn:000033CB                 mov     [ebp+Dst], eax
.text$mn:000033CE
.text$mn:000033CE loc_33CE:                               ; CODE XREF: getParamValFromString(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+47j
.text$mn:000033CE                 mov     ecx, [ebp+Dst]
.text$mn:000033D1                 cmp     ecx, [ebp+var_44]
.text$mn:000033D4                 jge     loc_34F5
.text$mn:000033DA                 mov     edx, [ebp+Dst]
.text$mn:000033DD                 push    edx
.text$mn:000033DE                 mov     ecx, [ebp+arg_4]
.text$mn:000033E1                 call    ?at@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAEAAPB_WI@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::at(uint)
.text$mn:000033E6                 mov     eax, [eax]
.text$mn:000033E8                 mov     [ebp+Str], eax
.text$mn:000033EB                 mov     ecx, [ebp+Str]
.text$mn:000033EE                 push    ecx             ; Str
.text$mn:000033EF                 lea     ecx, [ebp+var_2C]
.text$mn:000033F2                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000033F7                 mov     [ebp+var_4], 0
.text$mn:000033FE                 push    0               ; int
.text$mn:00003400                 mov     edx, [ebp+lpString]
.text$mn:00003403                 push    edx             ; Str
.text$mn:00003404                 lea     ecx, [ebp+var_2C]
.text$mn:00003407                 call    ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint)
.text$mn:0000340C                 mov     [ebp+var_38], eax
.text$mn:0000340F                 cmp     [ebp+var_38], 0FFFFFFFFh
.text$mn:00003413                 jz      loc_34E1
.text$mn:00003419                 cmp     [ebp+var_38], 0
.text$mn:0000341D                 jnz     loc_34E1
.text$mn:00003423                 mov     eax, [ebp+lpString]
.text$mn:00003426                 push    eax             ; lpString
.text$mn:00003427                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:0000342D                 mov     ecx, [ebp+Str]
.text$mn:00003430                 lea     edx, [ecx+eax*2]
.text$mn:00003433                 push    edx             ; Str
.text$mn:00003434                 mov     ecx, [ebp+arg_8]
.text$mn:00003437                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:0000343C                 mov     eax, [ebp+Dst]
.text$mn:0000343F                 push    eax             ; Dst
.text$mn:00003440                 lea     ecx, [ebp+var_6C]
.text$mn:00003443                 push    ecx             ; int
.text$mn:00003444                 lea     edx, [ebp+var_78]
.text$mn:00003447                 push    edx             ; char
.text$mn:00003448                 mov     ecx, [ebp+arg_4]
.text$mn:0000344B                 call    ?begin@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@XZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::begin(void)
.text$mn:00003450                 mov     [ebp+var_48], eax
.text$mn:00003453                 mov     eax, [ebp+var_48]
.text$mn:00003456                 mov     [ebp+var_54], eax
.text$mn:00003459                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000345D                 mov     ecx, [ebp+var_54]
.text$mn:00003460                 call    ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+(int)
.text$mn:00003465                 mov     [ebp+var_50], eax
.text$mn:00003468                 mov     ecx, [ebp+var_50]
.text$mn:0000346B                 mov     [ebp+var_40], ecx
.text$mn:0000346E                 mov     byte ptr [ebp+var_4], 2
.text$mn:00003472                 sub     esp, 0Ch
.text$mn:00003475                 mov     ecx, esp
.text$mn:00003477                 mov     [ebp+var_5C], esp
.text$mn:0000347A                 mov     edx, [ebp+var_40]
.text$mn:0000347D                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000347E                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>> const &)
.text$mn:00003483                 mov     [ebp+var_4C], eax
.text$mn:00003486                 mov     eax, [ebp+var_4C]
.text$mn:00003489                 mov     [ebp+var_58], eax
.text$mn:0000348C                 mov     byte ptr [ebp+var_4], 3
.text$mn:00003490                 lea     ecx, [ebp+var_84]
.text$mn:00003496                 push    ecx             ; int
.text$mn:00003497                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000349B                 mov     ecx, [ebp+arg_4]
.text$mn:0000349E                 call    ?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>)
.text$mn:000034A3                 mov     [ebp+var_60], eax
.text$mn:000034A6                 lea     ecx, [ebp+var_84]
.text$mn:000034AC                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$mn:000034B1                 mov     byte ptr [ebp+var_4], 1
.text$mn:000034B5                 lea     ecx, [ebp+var_6C]
.text$mn:000034B8                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$mn:000034BD                 mov     byte ptr [ebp+var_4], 0
.text$mn:000034C1                 lea     ecx, [ebp+var_78]
.text$mn:000034C4                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$mn:000034C9                 mov     [ebp+var_2D], 1
.text$mn:000034CD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000034D4                 lea     ecx, [ebp+var_2C]
.text$mn:000034D7                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000034DC                 mov     al, [ebp+var_2D]
.text$mn:000034DF                 jmp     short loc_34F7
.text$mn:000034E1 ; ---------------------------------------------------------------------------
.text$mn:000034E1
.text$mn:000034E1 loc_34E1:                               ; CODE XREF: getParamValFromString(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+97j
.text$mn:000034E1                                         ; getParamValFromString(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+A1j
.text$mn:000034E1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000034E8                 lea     ecx, [ebp+var_2C]
.text$mn:000034EB                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000034F0                 jmp     loc_33C5
.text$mn:000034F5 ; ---------------------------------------------------------------------------
.text$mn:000034F5
.text$mn:000034F5 loc_34F5:                               ; CODE XREF: getParamValFromString(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+58j
.text$mn:000034F5                 xor     al, al
.text$mn:000034F7
.text$mn:000034F7 loc_34F7:                               ; CODE XREF: getParamValFromString(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+163j
.text$mn:000034F7                 mov     ecx, [ebp+var_C]
.text$mn:000034FA                 mov     large fs:0, ecx
.text$mn:00003501                 pop     ecx
.text$mn:00003502                 mov     ecx, [ebp+var_10]
.text$mn:00003505                 xor     ecx, ebp
.text$mn:00003507                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000350C                 mov     esp, ebp
.text$mn:0000350E                 pop     ebp
.text$mn:0000350F                 retn
.text$mn:0000350F ?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z endp
.text$mn:0000350F
.text$mn:0000350F ; ---------------------------------------------------------------------------
.text$mn:00003510                 db 0Ch dup(0CCh)
.text$mn:0000351C
.text$mn:0000351C ; =============== S U B R O U T I N E =======================================
.text$mn:0000351C
.text$mn:0000351C ; Attributes: bp-based frame
.text$mn:0000351C
.text$mn:0000351C ; enum  LangType __cdecl getLangTypeFromParam(class std::vector<wchar_t const *, class std::allocator<wchar_t const *>> &)
.text$mn:0000351C                 public ?getLangTypeFromParam@@YA?AW4LangType@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z
.text$mn:0000351C ?getLangTypeFromParam@@YA?AW4LangType@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z proc near
.text$mn:0000351C                                         ; CODE XREF: WinMain(x,x,x,x)+1DBp
.text$mn:0000351C
.text$mn:0000351C var_34          = dword ptr -34h
.text$mn:0000351C var_30          = dword ptr -30h
.text$mn:0000351C var_2C          = byte ptr -2Ch
.text$mn:0000351C var_10          = dword ptr -10h
.text$mn:0000351C var_C           = dword ptr -0Ch
.text$mn:0000351C var_4           = dword ptr -4
.text$mn:0000351C arg_0           = dword ptr  8
.text$mn:0000351C
.text$mn:0000351C                 push    ebp
.text$mn:0000351D                 mov     ebp, esp
.text$mn:0000351F                 push    0FFFFFFFFh
.text$mn:00003521                 push    offset __ehhandler$?getLangTypeFromParam@@YA?AW4LangType@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z
.text$mn:00003526                 mov     eax, large fs:0
.text$mn:0000352C                 push    eax
.text$mn:0000352D                 sub     esp, 28h
.text$mn:00003530                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003535                 xor     eax, ebp
.text$mn:00003537                 mov     [ebp+var_10], eax
.text$mn:0000353A                 push    eax
.text$mn:0000353B                 lea     eax, [ebp+var_C]
.text$mn:0000353E                 mov     large fs:0, eax
.text$mn:00003544                 lea     ecx, [ebp+var_2C]
.text$mn:00003547                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000354C                 mov     [ebp+var_4], 0
.text$mn:00003553                 lea     eax, [ebp+var_2C]
.text$mn:00003556                 push    eax
.text$mn:00003557                 mov     ecx, [ebp+arg_0]
.text$mn:0000355A                 push    ecx
.text$mn:0000355B                 push    6Ch ; 'l'
.text$mn:0000355D                 call    ?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; getParamVal(wchar_t,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00003562                 add     esp, 0Ch
.text$mn:00003565                 movzx   edx, al
.text$mn:00003568                 test    edx, edx
.text$mn:0000356A                 jnz     short loc_3587
.text$mn:0000356C                 mov     [ebp+var_34], 39h ; '9'
.text$mn:00003573                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000357A                 lea     ecx, [ebp+var_2C]
.text$mn:0000357D                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003582                 mov     eax, [ebp+var_34]
.text$mn:00003585                 jmp     short loc_35AD
.text$mn:00003587 ; ---------------------------------------------------------------------------
.text$mn:00003587
.text$mn:00003587 loc_3587:                               ; CODE XREF: getLangTypeFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+4Ej
.text$mn:00003587                 lea     ecx, [ebp+var_2C]
.text$mn:0000358A                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000358F                 push    eax
.text$mn:00003590                 call    ?getLangIDFromStr@NppParameters@@SA?AW4LangType@@PB_W@Z ; NppParameters::getLangIDFromStr(wchar_t const *)
.text$mn:00003595                 add     esp, 4
.text$mn:00003598                 mov     [ebp+var_30], eax
.text$mn:0000359B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000035A2                 lea     ecx, [ebp+var_2C]
.text$mn:000035A5                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000035AA                 mov     eax, [ebp+var_30]
.text$mn:000035AD
.text$mn:000035AD loc_35AD:                               ; CODE XREF: getLangTypeFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+69j
.text$mn:000035AD                 mov     ecx, [ebp+var_C]
.text$mn:000035B0                 mov     large fs:0, ecx
.text$mn:000035B7                 pop     ecx
.text$mn:000035B8                 mov     ecx, [ebp+var_10]
.text$mn:000035BB                 xor     ecx, ebp
.text$mn:000035BD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000035C2                 mov     esp, ebp
.text$mn:000035C4                 pop     ebp
.text$mn:000035C5                 retn
.text$mn:000035C5 ?getLangTypeFromParam@@YA?AW4LangType@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z endp
.text$mn:000035C5
.text$mn:000035C5 ; ---------------------------------------------------------------------------
.text$mn:000035C6                 db 6 dup(0CCh)
.text$mn:000035CC
.text$mn:000035CC ; =============== S U B R O U T I N E =======================================
.text$mn:000035CC
.text$mn:000035CC ; Attributes: bp-based frame
.text$mn:000035CC
.text$mn:000035CC ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __cdecl getLocalizationPathFromParam(class std::vector<wchar_t const *, class std::allocator<wchar_t const *>> &)
.text$mn:000035CC                 public ?getLocalizationPathFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@@Z
.text$mn:000035CC ?getLocalizationPathFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@@Z proc near
.text$mn:000035CC                                         ; CODE XREF: WinMain(x,x,x,x)+1F7p
.text$mn:000035CC
.text$mn:000035CC var_4C          = dword ptr -4Ch
.text$mn:000035CC var_48          = byte ptr -48h
.text$mn:000035CC var_2C          = byte ptr -2Ch
.text$mn:000035CC var_10          = dword ptr -10h
.text$mn:000035CC var_C           = dword ptr -0Ch
.text$mn:000035CC var_4           = dword ptr -4
.text$mn:000035CC arg_0           = dword ptr  8
.text$mn:000035CC arg_4           = dword ptr  0Ch
.text$mn:000035CC
.text$mn:000035CC                 push    ebp
.text$mn:000035CD                 mov     ebp, esp
.text$mn:000035CF                 push    0FFFFFFFFh
.text$mn:000035D1                 push    offset __ehhandler$?getLocalizationPathFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@@Z
.text$mn:000035D6                 mov     eax, large fs:0
.text$mn:000035DC                 push    eax
.text$mn:000035DD                 sub     esp, 40h
.text$mn:000035E0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000035E5                 xor     eax, ebp
.text$mn:000035E7                 mov     [ebp+var_10], eax
.text$mn:000035EA                 push    eax
.text$mn:000035EB                 lea     eax, [ebp+var_C]
.text$mn:000035EE                 mov     large fs:0, eax
.text$mn:000035F4                 mov     [ebp+var_4C], 0
.text$mn:000035FB                 lea     ecx, [ebp+var_2C]
.text$mn:000035FE                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003603                 mov     [ebp+var_4], 1
.text$mn:0000360A                 lea     eax, [ebp+var_2C]
.text$mn:0000360D                 push    eax
.text$mn:0000360E                 mov     ecx, [ebp+arg_4]
.text$mn:00003611                 push    ecx
.text$mn:00003612                 push    4Ch ; 'L'
.text$mn:00003614                 call    ?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; getParamVal(wchar_t,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00003619                 add     esp, 0Ch
.text$mn:0000361C                 movzx   edx, al
.text$mn:0000361F                 test    edx, edx
.text$mn:00003621                 jnz     short loc_364A
.text$mn:00003623                 push    offset $SG172938 ; Str
.text$mn:00003628                 mov     ecx, [ebp+arg_0]
.text$mn:0000362B                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00003630                 mov     eax, [ebp+var_4C]
.text$mn:00003633                 or      eax, 1
.text$mn:00003636                 mov     [ebp+var_4C], eax
.text$mn:00003639                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000363D                 lea     ecx, [ebp+var_2C]
.text$mn:00003640                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003645                 mov     eax, [ebp+arg_0]
.text$mn:00003648                 jmp     short loc_3693
.text$mn:0000364A ; ---------------------------------------------------------------------------
.text$mn:0000364A
.text$mn:0000364A loc_364A:                               ; CODE XREF: getLocalizationPathFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+55j
.text$mn:0000364A                 lea     ecx, [ebp+var_2C]
.text$mn:0000364D                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00003652                 push    eax             ; Str
.text$mn:00003653                 lea     ecx, [ebp+var_48]
.text$mn:00003656                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:0000365B                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000365F                 lea     ecx, [ebp+var_48]
.text$mn:00003662                 push    ecx
.text$mn:00003663                 mov     edx, [ebp+arg_0]
.text$mn:00003666                 push    edx
.text$mn:00003667                 call    ?getLocPathFromStr@NppParameters@@SA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV23@@Z ; NppParameters::getLocPathFromStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000366C                 add     esp, 8
.text$mn:0000366F                 mov     eax, [ebp+var_4C]
.text$mn:00003672                 or      eax, 1
.text$mn:00003675                 mov     [ebp+var_4C], eax
.text$mn:00003678                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000367C                 lea     ecx, [ebp+var_48]
.text$mn:0000367F                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003684                 mov     byte ptr [ebp+var_4], 0
.text$mn:00003688                 lea     ecx, [ebp+var_2C]
.text$mn:0000368B                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003690                 mov     eax, [ebp+arg_0]
.text$mn:00003693
.text$mn:00003693 loc_3693:                               ; CODE XREF: getLocalizationPathFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+7Cj
.text$mn:00003693                 mov     ecx, [ebp+var_C]
.text$mn:00003696                 mov     large fs:0, ecx
.text$mn:0000369D                 pop     ecx
.text$mn:0000369E                 mov     ecx, [ebp+var_10]
.text$mn:000036A1                 xor     ecx, ebp
.text$mn:000036A3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000036A8                 mov     esp, ebp
.text$mn:000036AA                 pop     ebp
.text$mn:000036AB                 retn
.text$mn:000036AB ?getLocalizationPathFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@@Z endp
.text$mn:000036AB
.text$mn:000036AC
.text$mn:000036AC ; =============== S U B R O U T I N E =======================================
.text$mn:000036AC
.text$mn:000036AC ; Attributes: bp-based frame
.text$mn:000036AC
.text$mn:000036AC ; int __cdecl getNumberFromParam(char, class std::vector<wchar_t const *, class std::allocator<wchar_t const *>> &, bool &)
.text$mn:000036AC                 public ?getNumberFromParam@@YAHDAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AA_N@Z
.text$mn:000036AC ?getNumberFromParam@@YAHDAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AA_N@Z proc near
.text$mn:000036AC                                         ; CODE XREF: WinMain(x,x,x,x)+246p
.text$mn:000036AC                                         ; WinMain(x,x,x,x)+264p ...
.text$mn:000036AC
.text$mn:000036AC var_34          = dword ptr -34h
.text$mn:000036AC var_30          = dword ptr -30h
.text$mn:000036AC var_2C          = byte ptr -2Ch
.text$mn:000036AC var_10          = dword ptr -10h
.text$mn:000036AC var_C           = dword ptr -0Ch
.text$mn:000036AC var_4           = dword ptr -4
.text$mn:000036AC arg_0           = byte ptr  8
.text$mn:000036AC arg_4           = dword ptr  0Ch
.text$mn:000036AC arg_8           = dword ptr  10h
.text$mn:000036AC
.text$mn:000036AC                 push    ebp
.text$mn:000036AD                 mov     ebp, esp
.text$mn:000036AF                 push    0FFFFFFFFh
.text$mn:000036B1                 push    offset __ehhandler$?getNumberFromParam@@YAHDAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AA_N@Z
.text$mn:000036B6                 mov     eax, large fs:0
.text$mn:000036BC                 push    eax
.text$mn:000036BD                 sub     esp, 28h
.text$mn:000036C0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000036C5                 xor     eax, ebp
.text$mn:000036C7                 mov     [ebp+var_10], eax
.text$mn:000036CA                 push    eax
.text$mn:000036CB                 lea     eax, [ebp+var_C]
.text$mn:000036CE                 mov     large fs:0, eax
.text$mn:000036D4                 lea     ecx, [ebp+var_2C]
.text$mn:000036D7                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000036DC                 mov     [ebp+var_4], 0
.text$mn:000036E3                 lea     eax, [ebp+var_2C]
.text$mn:000036E6                 push    eax
.text$mn:000036E7                 mov     ecx, [ebp+arg_4]
.text$mn:000036EA                 push    ecx
.text$mn:000036EB                 movsx   dx, [ebp+arg_0]
.text$mn:000036F0                 movzx   eax, dx
.text$mn:000036F3                 push    eax
.text$mn:000036F4                 call    ?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; getParamVal(wchar_t,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000036F9                 add     esp, 0Ch
.text$mn:000036FC                 movzx   ecx, al
.text$mn:000036FF                 test    ecx, ecx
.text$mn:00003701                 jnz     short loc_3724
.text$mn:00003703                 mov     edx, [ebp+arg_8]
.text$mn:00003706                 mov     byte ptr [edx], 0
.text$mn:00003709                 mov     [ebp+var_34], 0FFFFFFFFh
.text$mn:00003710                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003717                 lea     ecx, [ebp+var_2C]
.text$mn:0000371A                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000371F                 mov     eax, [ebp+var_34]
.text$mn:00003722                 jmp     short loc_3750
.text$mn:00003724 ; ---------------------------------------------------------------------------
.text$mn:00003724
.text$mn:00003724 loc_3724:                               ; CODE XREF: getNumberFromParam(char,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,bool &)+55j
.text$mn:00003724                 mov     eax, [ebp+arg_8]
.text$mn:00003727                 mov     byte ptr [eax], 1
.text$mn:0000372A                 lea     ecx, [ebp+var_2C]
.text$mn:0000372D                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00003732                 push    eax             ; Str
.text$mn:00003733                 call    __wtoi
.text$mn:00003738                 add     esp, 4
.text$mn:0000373B                 mov     [ebp+var_30], eax
.text$mn:0000373E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003745                 lea     ecx, [ebp+var_2C]
.text$mn:00003748                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000374D                 mov     eax, [ebp+var_30]
.text$mn:00003750
.text$mn:00003750 loc_3750:                               ; CODE XREF: getNumberFromParam(char,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,bool &)+76j
.text$mn:00003750                 mov     ecx, [ebp+var_C]
.text$mn:00003753                 mov     large fs:0, ecx
.text$mn:0000375A                 pop     ecx
.text$mn:0000375B                 mov     ecx, [ebp+var_10]
.text$mn:0000375E                 xor     ecx, ebp
.text$mn:00003760                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00003765                 mov     esp, ebp
.text$mn:00003767                 pop     ebp
.text$mn:00003768                 retn
.text$mn:00003768 ?getNumberFromParam@@YAHDAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AA_N@Z endp
.text$mn:00003768
.text$mn:00003768 ; ---------------------------------------------------------------------------
.text$mn:00003769                 align 4
.text$mn:0000376C
.text$mn:0000376C ; =============== S U B R O U T I N E =======================================
.text$mn:0000376C
.text$mn:0000376C ; Attributes: bp-based frame
.text$mn:0000376C
.text$mn:0000376C ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __cdecl getEasterEggNameFromParam(class std::vector<wchar_t const *, class std::allocator<wchar_t const *>> &, unsigned char &)
.text$mn:0000376C                 public ?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z
.text$mn:0000376C ?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z proc near
.text$mn:0000376C                                         ; CODE XREF: WinMain(x,x,x,x)+2C3p
.text$mn:0000376C
.text$mn:0000376C var_90          = dword ptr -90h
.text$mn:0000376C var_8C          = dword ptr -8Ch
.text$mn:0000376C var_88          = dword ptr -88h
.text$mn:0000376C var_84          = dword ptr -84h
.text$mn:0000376C var_80          = byte ptr -80h
.text$mn:0000376C var_64          = byte ptr -64h
.text$mn:0000376C var_48          = byte ptr -48h
.text$mn:0000376C var_2C          = dword ptr -2Ch
.text$mn:0000376C var_10          = dword ptr -10h
.text$mn:0000376C var_C           = dword ptr -0Ch
.text$mn:0000376C var_4           = dword ptr -4
.text$mn:0000376C arg_0           = dword ptr  8
.text$mn:0000376C arg_4           = dword ptr  0Ch
.text$mn:0000376C arg_8           = dword ptr  10h
.text$mn:0000376C
.text$mn:0000376C                 push    ebp
.text$mn:0000376D                 mov     ebp, esp
.text$mn:0000376F                 push    0FFFFFFFFh
.text$mn:00003771                 push    offset __ehhandler$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z
.text$mn:00003776                 mov     eax, large fs:0
.text$mn:0000377C                 push    eax
.text$mn:0000377D                 sub     esp, 84h
.text$mn:00003783                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003788                 xor     eax, ebp
.text$mn:0000378A                 mov     [ebp+var_10], eax
.text$mn:0000378D                 push    eax
.text$mn:0000378E                 lea     eax, [ebp+var_C]
.text$mn:00003791                 mov     large fs:0, eax
.text$mn:00003797                 mov     [ebp+var_88], 0
.text$mn:000037A1                 lea     ecx, [ebp+var_2C]
.text$mn:000037A4                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000037A9                 mov     [ebp+var_4], 1
.text$mn:000037B0                 lea     eax, [ebp+var_2C]
.text$mn:000037B3                 push    eax             ; int
.text$mn:000037B4                 mov     ecx, [ebp+arg_4]
.text$mn:000037B7                 push    ecx             ; int
.text$mn:000037B8                 push    offset $SG172957 ; "-qn"
.text$mn:000037BD                 call    ?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; getParamValFromString(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000037C2                 add     esp, 0Ch
.text$mn:000037C5                 movzx   edx, al
.text$mn:000037C8                 test    edx, edx
.text$mn:000037CA                 jnz     loc_3894
.text$mn:000037D0                 lea     eax, [ebp+var_2C]
.text$mn:000037D3                 push    eax             ; int
.text$mn:000037D4                 mov     ecx, [ebp+arg_4]
.text$mn:000037D7                 push    ecx             ; int
.text$mn:000037D8                 push    offset $SG172959 ; "-qt"
.text$mn:000037DD                 call    ?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; getParamValFromString(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000037E2                 add     esp, 0Ch
.text$mn:000037E5                 movzx   edx, al
.text$mn:000037E8                 test    edx, edx
.text$mn:000037EA                 jnz     loc_388C
.text$mn:000037F0                 lea     eax, [ebp+var_2C]
.text$mn:000037F3                 push    eax             ; int
.text$mn:000037F4                 mov     ecx, [ebp+arg_4]
.text$mn:000037F7                 push    ecx             ; int
.text$mn:000037F8                 push    offset $SG172961 ; "-qf"
.text$mn:000037FD                 call    ?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; getParamValFromString(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00003802                 add     esp, 0Ch
.text$mn:00003805                 movzx   edx, al
.text$mn:00003808                 test    edx, edx
.text$mn:0000380A                 jnz     short loc_383E
.text$mn:0000380C                 push    offset $SG172962 ; Str
.text$mn:00003811                 mov     ecx, [ebp+arg_0]
.text$mn:00003814                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00003819                 mov     eax, [ebp+var_88]
.text$mn:0000381F                 or      eax, 1
.text$mn:00003822                 mov     [ebp+var_88], eax
.text$mn:00003828                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000382C                 lea     ecx, [ebp+var_2C]
.text$mn:0000382F                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003834                 mov     eax, [ebp+arg_0]
.text$mn:00003837                 jmp     loc_3961
.text$mn:0000383C ; ---------------------------------------------------------------------------
.text$mn:0000383C                 jmp     short loc_388A
.text$mn:0000383E ; ---------------------------------------------------------------------------
.text$mn:0000383E
.text$mn:0000383E loc_383E:                               ; CODE XREF: getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &)+9Ej
.text$mn:0000383E                 lea     ecx, [ebp+var_2C]
.text$mn:00003841                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00003846                 push    eax
.text$mn:00003847                 lea     ecx, [ebp+var_80]
.text$mn:0000384A                 push    ecx
.text$mn:0000384B                 call    ?relativeFilePathToFullFilePath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z ; relativeFilePathToFullFilePath(wchar_t const *)
.text$mn:00003850                 add     esp, 8
.text$mn:00003853                 mov     [ebp+var_90], eax
.text$mn:00003859                 mov     edx, [ebp+var_90]
.text$mn:0000385F                 mov     [ebp+var_8C], edx
.text$mn:00003865                 mov     byte ptr [ebp+var_4], 2
.text$mn:00003869                 mov     eax, [ebp+var_8C]
.text$mn:0000386F                 push    eax
.text$mn:00003870                 lea     ecx, [ebp+var_2C]
.text$mn:00003873                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00003878                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000387C                 lea     ecx, [ebp+var_80]
.text$mn:0000387F                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003884                 mov     ecx, [ebp+arg_8]
.text$mn:00003887                 mov     byte ptr [ecx], 2
.text$mn:0000388A
.text$mn:0000388A loc_388A:                               ; CODE XREF: getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &)+D0j
.text$mn:0000388A                 jmp     short loc_3892
.text$mn:0000388C ; ---------------------------------------------------------------------------
.text$mn:0000388C
.text$mn:0000388C loc_388C:                               ; CODE XREF: getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &)+7Ej
.text$mn:0000388C                 mov     edx, [ebp+arg_8]
.text$mn:0000388F                 mov     byte ptr [edx], 1
.text$mn:00003892
.text$mn:00003892 loc_3892:                               ; CODE XREF: getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &):loc_388Aj
.text$mn:00003892                 jmp     short loc_389A
.text$mn:00003894 ; ---------------------------------------------------------------------------
.text$mn:00003894
.text$mn:00003894 loc_3894:                               ; CODE XREF: getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &)+5Ej
.text$mn:00003894                 mov     eax, [ebp+arg_8]
.text$mn:00003897                 mov     byte ptr [eax], 0
.text$mn:0000389A
.text$mn:0000389A loc_389A:                               ; CODE XREF: getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &):loc_3892j
.text$mn:0000389A                 push    offset $SG172968 ; "%20"
.text$mn:0000389F                 lea     ecx, [ebp+var_48]
.text$mn:000038A2                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000038A7                 mov     byte ptr [ebp+var_4], 3
.text$mn:000038AB                 push    offset $SG172970 ; Str
.text$mn:000038B0                 lea     ecx, [ebp+var_64]
.text$mn:000038B3                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000038B8                 mov     byte ptr [ebp+var_4], 4
.text$mn:000038BC                 mov     [ebp+var_84], 0
.text$mn:000038C6
.text$mn:000038C6 loc_38C6:                               ; CODE XREF: getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &)+1B1j
.text$mn:000038C6                 mov     ecx, [ebp+var_84]
.text$mn:000038CC                 push    ecx
.text$mn:000038CD                 lea     edx, [ebp+var_48]
.text$mn:000038D0                 push    edx
.text$mn:000038D1                 lea     ecx, [ebp+var_2C]
.text$mn:000038D4                 call    ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIABV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint)
.text$mn:000038D9                 mov     [ebp+var_84], eax
.text$mn:000038DF                 mov     eax, [ebp+var_84]
.text$mn:000038E5                 cmp     eax, ds:?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; uint const std::basic_string<char,std::char_traits<char>,std::allocator<char>>::npos
.text$mn:000038EB                 jz      short loc_391F
.text$mn:000038ED                 lea     ecx, [ebp+var_64]
.text$mn:000038F0                 push    ecx
.text$mn:000038F1                 lea     ecx, [ebp+var_48]
.text$mn:000038F4                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:000038F9                 push    eax
.text$mn:000038FA                 mov     edx, [ebp+var_84]
.text$mn:00003900                 push    edx
.text$mn:00003901                 lea     ecx, [ebp+var_2C]
.text$mn:00003904                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00003909                 lea     ecx, [ebp+var_64]
.text$mn:0000390C                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00003911                 add     eax, [ebp+var_84]
.text$mn:00003917                 mov     [ebp+var_84], eax
.text$mn:0000391D                 jmp     short loc_38C6
.text$mn:0000391F ; ---------------------------------------------------------------------------
.text$mn:0000391F
.text$mn:0000391F loc_391F:                               ; CODE XREF: getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &)+17Fj
.text$mn:0000391F                 lea     eax, [ebp+var_2C]
.text$mn:00003922                 push    eax
.text$mn:00003923                 mov     ecx, [ebp+arg_0]
.text$mn:00003926                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000392B                 mov     ecx, [ebp+var_88]
.text$mn:00003931                 or      ecx, 1
.text$mn:00003934                 mov     [ebp+var_88], ecx
.text$mn:0000393A                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000393E                 lea     ecx, [ebp+var_64]
.text$mn:00003941                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003946                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000394A                 lea     ecx, [ebp+var_48]
.text$mn:0000394D                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003952                 mov     byte ptr [ebp+var_4], 0
.text$mn:00003956                 lea     ecx, [ebp+var_2C]
.text$mn:00003959                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000395E                 mov     eax, [ebp+arg_0]
.text$mn:00003961
.text$mn:00003961 loc_3961:                               ; CODE XREF: getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &)+CBj
.text$mn:00003961                 mov     ecx, [ebp+var_C]
.text$mn:00003964                 mov     large fs:0, ecx
.text$mn:0000396B                 pop     ecx
.text$mn:0000396C                 mov     ecx, [ebp+var_10]
.text$mn:0000396F                 xor     ecx, ebp
.text$mn:00003971                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00003976                 mov     esp, ebp
.text$mn:00003978                 pop     ebp
.text$mn:00003979                 retn
.text$mn:00003979 ?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z endp
.text$mn:00003979
.text$mn:00003979 ; ---------------------------------------------------------------------------
.text$mn:0000397A                 align 4
.text$mn:0000397C
.text$mn:0000397C ; =============== S U B R O U T I N E =======================================
.text$mn:0000397C
.text$mn:0000397C ; Attributes: bp-based frame
.text$mn:0000397C
.text$mn:0000397C ; void __cdecl doException(struct Notepad_plus_Window *)
.text$mn:0000397C                 public ?doException@@YAXAAVNotepad_plus_Window@@@Z
.text$mn:0000397C ?doException@@YAXAAVNotepad_plus_Window@@@Z proc near
.text$mn:0000397C                                         ; CODE XREF: __catch$_WinMain@16$0+68p
.text$mn:0000397C                                         ; __catch$_WinMain@16$1+2Fp ...
.text$mn:0000397C
.text$mn:0000397C var_858         = dword ptr -858h
.text$mn:0000397C var_854         = dword ptr -854h
.text$mn:0000397C var_850         = dword ptr -850h
.text$mn:0000397C var_84A         = byte ptr -84Ah
.text$mn:0000397C var_849         = byte ptr -849h
.text$mn:0000397C var_848         = byte ptr -848h
.text$mn:0000397C var_82C         = byte ptr -82Ch
.text$mn:0000397C Buffer          = word ptr -810h
.text$mn:0000397C var_10          = dword ptr -10h
.text$mn:0000397C var_C           = dword ptr -0Ch
.text$mn:0000397C var_4           = dword ptr -4
.text$mn:0000397C arg_0           = dword ptr  8
.text$mn:0000397C
.text$mn:0000397C                 push    ebp
.text$mn:0000397D                 mov     ebp, esp
.text$mn:0000397F                 push    0FFFFFFFFh
.text$mn:00003981                 push    offset __ehhandler$?doException@@YAXAAVNotepad_plus_Window@@@Z
.text$mn:00003986                 mov     eax, large fs:0
.text$mn:0000398C                 push    eax
.text$mn:0000398D                 sub     esp, 84Ch
.text$mn:00003993                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003998                 xor     eax, ebp
.text$mn:0000399A                 mov     [ebp+var_10], eax
.text$mn:0000399D                 push    eax
.text$mn:0000399E                 lea     eax, [ebp+var_C]
.text$mn:000039A1                 mov     large fs:0, eax
.text$mn:000039A7                 call    ?removeHandler@Win32Exception@@SAXXZ ; Win32Exception::removeHandler(void)
.text$mn:000039AC                 push    40h ; '@'       ; uType
.text$mn:000039AE                 push    offset $SG173267 ; "Recovery initiating"
.text$mn:000039B3                 push    offset $SG173268 ; "Notepad++ will attempt to save any unsa"...
.text$mn:000039B8                 mov     eax, dword ptr ds:?gNppHWND@Notepad_plus_Window@@2PAUHWND__@@A ; HWND__ * Notepad_plus_Window::gNppHWND
.text$mn:000039BD                 push    eax             ; hWnd
.text$mn:000039BE                 call    dword ptr ds:__imp__MessageBoxW@16 ; MessageBoxW(x,x,x,x)
.text$mn:000039C4                 lea     ecx, [ebp+Buffer]
.text$mn:000039CA                 push    ecx             ; lpBuffer
.text$mn:000039CB                 push    400h            ; nBufferLength
.text$mn:000039D0                 call    dword ptr ds:__imp__GetTempPathW@8 ; GetTempPathW(x,x)
.text$mn:000039D6                 lea     edx, [ebp+Buffer]
.text$mn:000039DC                 push    edx             ; Str
.text$mn:000039DD                 lea     ecx, [ebp+var_82C]
.text$mn:000039E3                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000039E8                 mov     [ebp+var_4], 0
.text$mn:000039EF                 push    offset $SG173271 ; "\\N++RECOV"
.text$mn:000039F4                 lea     ecx, [ebp+var_82C]
.text$mn:000039FA                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:000039FF                 sub     esp, 1Ch
.text$mn:00003A02                 mov     ecx, esp
.text$mn:00003A04                 mov     [ebp+var_854], esp
.text$mn:00003A0A                 lea     eax, [ebp+var_82C]
.text$mn:00003A10                 push    eax
.text$mn:00003A11                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00003A16                 mov     [ebp+var_850], eax
.text$mn:00003A1C                 mov     ecx, [ebp+var_850]
.text$mn:00003A22                 mov     [ebp+var_858], ecx
.text$mn:00003A28                 mov     byte ptr [ebp+var_4], 1
.text$mn:00003A2C                 mov     byte ptr [ebp+var_4], 0
.text$mn:00003A30                 mov     ecx, [ebp+arg_0]
.text$mn:00003A33                 call    ?emergency@Notepad_plus_Window@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; Notepad_plus_Window::emergency(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:00003A38                 mov     [ebp+var_849], al
.text$mn:00003A3E                 mov     dl, [ebp+var_849]
.text$mn:00003A44                 mov     [ebp+var_84A], dl
.text$mn:00003A4A                 movzx   eax, [ebp+var_84A]
.text$mn:00003A51                 test    eax, eax
.text$mn:00003A53                 jz      short loc_3AAC
.text$mn:00003A55                 push    offset $SG173276 ; "Notepad++ was able to successfully reco"...
.text$mn:00003A5A                 lea     ecx, [ebp+var_848]
.text$mn:00003A60                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00003A65                 mov     byte ptr [ebp+var_4], 2
.text$mn:00003A69                 lea     ecx, [ebp+var_82C]
.text$mn:00003A6F                 push    ecx
.text$mn:00003A70                 lea     ecx, [ebp+var_848]
.text$mn:00003A76                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00003A7B                 push    40h ; '@'       ; uType
.text$mn:00003A7D                 push    offset $SG173277 ; "Recovery success"
.text$mn:00003A82                 lea     ecx, [ebp+var_848]
.text$mn:00003A88                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00003A8D                 push    eax             ; lpText
.text$mn:00003A8E                 mov     edx, dword ptr ds:?gNppHWND@Notepad_plus_Window@@2PAUHWND__@@A ; HWND__ * Notepad_plus_Window::gNppHWND
.text$mn:00003A94                 push    edx             ; hWnd
.text$mn:00003A95                 call    dword ptr ds:__imp__MessageBoxW@16 ; MessageBoxW(x,x,x,x)
.text$mn:00003A9B                 mov     byte ptr [ebp+var_4], 0
.text$mn:00003A9F                 lea     ecx, [ebp+var_848]
.text$mn:00003AA5                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003AAA                 jmp     short loc_3AC4
.text$mn:00003AAC ; ---------------------------------------------------------------------------
.text$mn:00003AAC
.text$mn:00003AAC loc_3AAC:                               ; CODE XREF: doException(Notepad_plus_Window &)+D7j
.text$mn:00003AAC                 push    10h             ; uType
.text$mn:00003AAE                 push    offset $SG173279 ; "Recovery failure"
.text$mn:00003AB3                 push    offset $SG173280 ; "Unfortunatly, Notepad++ was not able to"...
.text$mn:00003AB8                 mov     eax, dword ptr ds:?gNppHWND@Notepad_plus_Window@@2PAUHWND__@@A ; HWND__ * Notepad_plus_Window::gNppHWND
.text$mn:00003ABD                 push    eax             ; hWnd
.text$mn:00003ABE                 call    dword ptr ds:__imp__MessageBoxW@16 ; MessageBoxW(x,x,x,x)
.text$mn:00003AC4
.text$mn:00003AC4 loc_3AC4:                               ; CODE XREF: doException(Notepad_plus_Window &)+12Ej
.text$mn:00003AC4                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003ACB                 lea     ecx, [ebp+var_82C]
.text$mn:00003AD1                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003AD6                 mov     ecx, [ebp+var_C]
.text$mn:00003AD9                 mov     large fs:0, ecx
.text$mn:00003AE0                 pop     ecx
.text$mn:00003AE1                 mov     ecx, [ebp+var_10]
.text$mn:00003AE4                 xor     ecx, ebp
.text$mn:00003AE6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00003AEB                 mov     esp, ebp
.text$mn:00003AED                 pop     ebp
.text$mn:00003AEE                 retn
.text$mn:00003AEE ?doException@@YAXAAVNotepad_plus_Window@@@Z endp
.text$mn:00003AEE
.text$mn:00003AEE ; ---------------------------------------------------------------------------
.text$mn:00003AEF                 align 10h
.text$mn:00003AEF _text$mn        ends
.text$mn:00003AEF
.text$x:00003AF0 ; ===========================================================================
.text$x:00003AF0
.text$x:00003AF0 ; Segment type: Pure code
.text$x:00003AF0 ; Segment permissions: Read/Execute
.text$x:00003AF0 _text$x         segment para public 'CODE' use32
.text$x:00003AF0                 assume cs:_text$x
.text$x:00003AF0                 ;org 3AF0h
.text$x:00003AF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003AF0
.text$x:00003AF0 ; =============== S U B R O U T I N E =======================================
.text$x:00003AF0
.text$x:00003AF0
.text$x:00003AF0 __unwindfunclet$_WinMain@16$6 proc near ; DATA XREF: .xdata$x:0000AF9Co
.text$x:00003AF0                 lea     ecx, [ebp-55C40h]
.text$x:00003AF6                 jmp     ??1?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::~vector<wchar_t const *,std::allocator<wchar_t const *>>(void)
.text$x:00003AF6 __unwindfunclet$_WinMain@16$6 endp
.text$x:00003AF6
.text$x:00003AFB
.text$x:00003AFB ; =============== S U B R O U T I N E =======================================
.text$x:00003AFB
.text$x:00003AFB
.text$x:00003AFB __unwindfunclet$_WinMain@16$7 proc near ; DATA XREF: .xdata$x:0000AFA4o
.text$x:00003AFB                 lea     ecx, [ebp-904h] ; this
.text$x:00003B01                 jmp     ??1CmdLineParams@@QAE@XZ ; CmdLineParams::~CmdLineParams(void)
.text$x:00003B01 __unwindfunclet$_WinMain@16$7 endp
.text$x:00003B01
.text$x:00003B06
.text$x:00003B06 ; =============== S U B R O U T I N E =======================================
.text$x:00003B06
.text$x:00003B06
.text$x:00003B06 __unwindfunclet$_WinMain@16$8 proc near ; DATA XREF: .xdata$x:0000AFACo
.text$x:00003B06                 lea     ecx, [ebp-974h]
.text$x:00003B0C                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003B0C __unwindfunclet$_WinMain@16$8 endp
.text$x:00003B0C
.text$x:00003B11
.text$x:00003B11 ; =============== S U B R O U T I N E =======================================
.text$x:00003B11
.text$x:00003B11
.text$x:00003B11 __unwindfunclet$_WinMain@16$9 proc near ; DATA XREF: .xdata$x:0000AFB4o
.text$x:00003B11                 lea     ecx, [ebp-990h]
.text$x:00003B17                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003B17 __unwindfunclet$_WinMain@16$9 endp
.text$x:00003B17
.text$x:00003B1C
.text$x:00003B1C ; =============== S U B R O U T I N E =======================================
.text$x:00003B1C
.text$x:00003B1C
.text$x:00003B1C __unwindfunclet$_WinMain@16$10 proc near ; DATA XREF: .xdata$x:0000AFBCo
.text$x:00003B1C                 mov     ecx, [ebp-55CF4h]
.text$x:00003B22                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003B22 __unwindfunclet$_WinMain@16$10 endp
.text$x:00003B22
.text$x:00003B27
.text$x:00003B27 ; =============== S U B R O U T I N E =======================================
.text$x:00003B27
.text$x:00003B27
.text$x:00003B27 __unwindfunclet$_WinMain@16$11 proc near ; DATA XREF: .xdata$x:0000AFC4o
.text$x:00003B27                 lea     ecx, [ebp-8A8h]
.text$x:00003B2D                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003B2D __unwindfunclet$_WinMain@16$11 endp
.text$x:00003B2D
.text$x:00003B32
.text$x:00003B32 ; =============== S U B R O U T I N E =======================================
.text$x:00003B32
.text$x:00003B32
.text$x:00003B32 __unwindfunclet$_WinMain@16$12 proc near ; DATA XREF: .xdata$x:0000AFCCo
.text$x:00003B32                 lea     ecx, [ebp-9ACh]
.text$x:00003B38                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003B38 __unwindfunclet$_WinMain@16$12 endp
.text$x:00003B38
.text$x:00003B3D
.text$x:00003B3D ; =============== S U B R O U T I N E =======================================
.text$x:00003B3D
.text$x:00003B3D
.text$x:00003B3D __unwindfunclet$_WinMain@16$13 proc near ; DATA XREF: .xdata$x:0000AFD4o
.text$x:00003B3D                 lea     ecx, [ebp-9C8h]
.text$x:00003B43                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003B43 __unwindfunclet$_WinMain@16$13 endp
.text$x:00003B43
.text$x:00003B48
.text$x:00003B48 ; =============== S U B R O U T I N E =======================================
.text$x:00003B48
.text$x:00003B48
.text$x:00003B48 __unwindfunclet$_WinMain@16$14 proc near ; DATA XREF: .xdata$x:0000AFDCo
.text$x:00003B48                 lea     ecx, [ebp-55C18h] ; this
.text$x:00003B4E                 jmp     ??1Notepad_plus_Window@@UAE@XZ ; Notepad_plus_Window::~Notepad_plus_Window(void)
.text$x:00003B4E __unwindfunclet$_WinMain@16$14 endp
.text$x:00003B4E
.text$x:00003B53
.text$x:00003B53 ; =============== S U B R O U T I N E =======================================
.text$x:00003B53
.text$x:00003B53
.text$x:00003B53 __unwindfunclet$_WinMain@16$15 proc near ; DATA XREF: .xdata$x:0000AFE4o
.text$x:00003B53                 lea     ecx, [ebp-920h]
.text$x:00003B59                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003B59 __unwindfunclet$_WinMain@16$15 endp
.text$x:00003B59
.text$x:00003B5E
.text$x:00003B5E ; =============== S U B R O U T I N E =======================================
.text$x:00003B5E
.text$x:00003B5E
.text$x:00003B5E __unwindfunclet$_WinMain@16$16 proc near ; DATA XREF: .xdata$x:0000AFECo
.text$x:00003B5E                 lea     ecx, [ebp-958h]
.text$x:00003B64                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003B64 __unwindfunclet$_WinMain@16$16 endp
.text$x:00003B64
.text$x:00003B69
.text$x:00003B69 ; =============== S U B R O U T I N E =======================================
.text$x:00003B69
.text$x:00003B69
.text$x:00003B69 __unwindfunclet$_WinMain@16$17 proc near ; DATA XREF: .xdata$x:0000AFF4o
.text$x:00003B69                 lea     ecx, [ebp-93Ch]
.text$x:00003B6F                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003B6F __unwindfunclet$_WinMain@16$17 endp
.text$x:00003B6F
.text$x:00003B74
.text$x:00003B74 ; =============== S U B R O U T I N E =======================================
.text$x:00003B74
.text$x:00003B74
.text$x:00003B74 __unwindfunclet$_WinMain@16$18 proc near ; DATA XREF: .xdata$x:0000AFFCo
.text$x:00003B74                 lea     ecx, [ebp-0A1Ch] ; this
.text$x:00003B7A                 jmp     ??1Process@@QAE@XZ ; Process::~Process(void)
.text$x:00003B7A __unwindfunclet$_WinMain@16$18 endp
.text$x:00003B7A
.text$x:00003B7F
.text$x:00003B7F ; =============== S U B R O U T I N E =======================================
.text$x:00003B7F
.text$x:00003B7F
.text$x:00003B7F __ehhandler$_WinMain@16 proc near       ; DATA XREF: WinMain(x,x,x,x)+5o
.text$x:00003B7F
.text$x:00003B7F arg_4           = dword ptr  8
.text$x:00003B7F
.text$x:00003B7F                 mov     edx, [esp+arg_4]
.text$x:00003B83                 lea     eax, [edx+0Ch]
.text$x:00003B86                 mov     ecx, [edx-55D14h]
.text$x:00003B8C                 xor     ecx, eax
.text$x:00003B8E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003B93                 mov     ecx, [edx-8]
.text$x:00003B96                 xor     ecx, eax
.text$x:00003B98                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003B9D                 mov     eax, offset __ehfuncinfo$_WinMain@16
.text$x:00003BA2                 jmp     ___CxxFrameHandler3
.text$x:00003BA2 __ehhandler$_WinMain@16 endp
.text$x:00003BA2
.text$x:00003BA7
.text$x:00003BA7 ; =============== S U B R O U T I N E =======================================
.text$x:00003BA7
.text$x:00003BA7
.text$x:00003BA7 __unwindfunclet$?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z$0 proc near
.text$x:00003BA7                                         ; DATA XREF: .xdata$x:0000ADA8o
.text$x:00003BA7                 lea     ecx, [ebp-58h]
.text$x:00003BAA                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$x:00003BAA __unwindfunclet$?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z$0 endp
.text$x:00003BAA
.text$x:00003BAF
.text$x:00003BAF ; =============== S U B R O U T I N E =======================================
.text$x:00003BAF
.text$x:00003BAF
.text$x:00003BAF __unwindfunclet$?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z$1 proc near
.text$x:00003BAF                                         ; DATA XREF: .xdata$x:0000ADB0o
.text$x:00003BAF                 lea     ecx, [ebp-4Ch]
.text$x:00003BB2                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$x:00003BB2 __unwindfunclet$?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z$1 endp
.text$x:00003BB2
.text$x:00003BB7
.text$x:00003BB7 ; =============== S U B R O U T I N E =======================================
.text$x:00003BB7
.text$x:00003BB7
.text$x:00003BB7 __unwindfunclet$?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z$2 proc near
.text$x:00003BB7                                         ; DATA XREF: .xdata$x:0000ADB8o
.text$x:00003BB7                 mov     ecx, [ebp-2Ch]
.text$x:00003BBA                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$x:00003BBA __unwindfunclet$?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z$2 endp
.text$x:00003BBA
.text$x:00003BBF
.text$x:00003BBF ; =============== S U B R O U T I N E =======================================
.text$x:00003BBF
.text$x:00003BBF
.text$x:00003BBF __ehhandler$?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z proc near
.text$x:00003BBF                                         ; DATA XREF: isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+5o
.text$x:00003BBF
.text$x:00003BBF arg_4           = dword ptr  8
.text$x:00003BBF
.text$x:00003BBF                 mov     edx, [esp+arg_4]
.text$x:00003BC3                 lea     eax, [edx+0Ch]
.text$x:00003BC6                 mov     ecx, [edx-50h]
.text$x:00003BC9                 xor     ecx, eax
.text$x:00003BCB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003BD0                 mov     eax, offset __ehfuncinfo$?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z
.text$x:00003BD5                 jmp     ___CxxFrameHandler3
.text$x:00003BD5 __ehhandler$?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z endp
.text$x:00003BD5
.text$x:00003BDA
.text$x:00003BDA ; =============== S U B R O U T I N E =======================================
.text$x:00003BDA
.text$x:00003BDA
.text$x:00003BDA __unwindfunclet$?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$0 proc near
.text$x:00003BDA                                         ; DATA XREF: .xdata$x:0000AD90o
.text$x:00003BDA                 lea     ecx, [ebp-5Ch]
.text$x:00003BDD                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$x:00003BDD __unwindfunclet$?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$0 endp
.text$x:00003BDD
.text$x:00003BE2
.text$x:00003BE2 ; =============== S U B R O U T I N E =======================================
.text$x:00003BE2
.text$x:00003BE2
.text$x:00003BE2 __unwindfunclet$?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$1 proc near
.text$x:00003BE2                                         ; DATA XREF: .xdata$x:0000AD98o
.text$x:00003BE2                 lea     ecx, [ebp-50h]
.text$x:00003BE5                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$x:00003BE5 __unwindfunclet$?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$1 endp
.text$x:00003BE5
.text$x:00003BEA
.text$x:00003BEA ; =============== S U B R O U T I N E =======================================
.text$x:00003BEA
.text$x:00003BEA
.text$x:00003BEA __unwindfunclet$?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$2 proc near
.text$x:00003BEA                                         ; DATA XREF: .xdata$x:0000ADA0o
.text$x:00003BEA                 mov     ecx, [ebp-30h]
.text$x:00003BED                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$x:00003BED __unwindfunclet$?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$2 endp
.text$x:00003BED
.text$x:00003BF2
.text$x:00003BF2 ; =============== S U B R O U T I N E =======================================
.text$x:00003BF2
.text$x:00003BF2
.text$x:00003BF2 __ehhandler$?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z proc near
.text$x:00003BF2                                         ; DATA XREF: getParamVal(wchar_t,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+5o
.text$x:00003BF2
.text$x:00003BF2 arg_4           = dword ptr  8
.text$x:00003BF2
.text$x:00003BF2                 mov     edx, [esp+arg_4]
.text$x:00003BF6                 lea     eax, [edx+0Ch]
.text$x:00003BF9                 mov     ecx, [edx-54h]
.text$x:00003BFC                 xor     ecx, eax
.text$x:00003BFE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C03                 mov     eax, offset __ehfuncinfo$?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
.text$x:00003C08                 jmp     ___CxxFrameHandler3
.text$x:00003C08 __ehhandler$?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z endp
.text$x:00003C08
.text$x:00003C0D
.text$x:00003C0D ; =============== S U B R O U T I N E =======================================
.text$x:00003C0D
.text$x:00003C0D
.text$x:00003C0D __unwindfunclet$?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$0 proc near
.text$x:00003C0D                                         ; DATA XREF: .xdata$x:0000ADC0o
.text$x:00003C0D                 lea     ecx, [ebp-2Ch]
.text$x:00003C10                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003C10 __unwindfunclet$?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$0 endp
.text$x:00003C10
.text$x:00003C15
.text$x:00003C15 ; =============== S U B R O U T I N E =======================================
.text$x:00003C15
.text$x:00003C15
.text$x:00003C15 __unwindfunclet$?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$1 proc near
.text$x:00003C15                                         ; DATA XREF: .xdata$x:0000ADC8o
.text$x:00003C15                 lea     ecx, [ebp-78h]
.text$x:00003C18                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$x:00003C18 __unwindfunclet$?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$1 endp
.text$x:00003C18
.text$x:00003C1D
.text$x:00003C1D ; =============== S U B R O U T I N E =======================================
.text$x:00003C1D
.text$x:00003C1D
.text$x:00003C1D __unwindfunclet$?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$2 proc near
.text$x:00003C1D                                         ; DATA XREF: .xdata$x:0000ADD0o
.text$x:00003C1D                 lea     ecx, [ebp-6Ch]
.text$x:00003C20                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$x:00003C20 __unwindfunclet$?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$2 endp
.text$x:00003C20
.text$x:00003C25
.text$x:00003C25 ; =============== S U B R O U T I N E =======================================
.text$x:00003C25
.text$x:00003C25
.text$x:00003C25 __unwindfunclet$?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$3 proc near
.text$x:00003C25                                         ; DATA XREF: .xdata$x:0000ADD8o
.text$x:00003C25                 mov     ecx, [ebp-5Ch]
.text$x:00003C28                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$x:00003C28 __unwindfunclet$?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$3 endp
.text$x:00003C28
.text$x:00003C2D
.text$x:00003C2D ; =============== S U B R O U T I N E =======================================
.text$x:00003C2D
.text$x:00003C2D
.text$x:00003C2D __ehhandler$?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z proc near
.text$x:00003C2D                                         ; DATA XREF: getParamValFromString(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+5o
.text$x:00003C2D
.text$x:00003C2D arg_4           = dword ptr  8
.text$x:00003C2D
.text$x:00003C2D                 mov     edx, [esp+arg_4]
.text$x:00003C31                 lea     eax, [edx+0Ch]
.text$x:00003C34                 mov     ecx, [edx-7Ch]
.text$x:00003C37                 xor     ecx, eax
.text$x:00003C39                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C3E                 mov     ecx, [edx-4]
.text$x:00003C41                 xor     ecx, eax
.text$x:00003C43                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C48                 mov     eax, offset __ehfuncinfo$?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
.text$x:00003C4D                 jmp     ___CxxFrameHandler3
.text$x:00003C4D __ehhandler$?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z endp
.text$x:00003C4D
.text$x:00003C52
.text$x:00003C52 ; =============== S U B R O U T I N E =======================================
.text$x:00003C52
.text$x:00003C52
.text$x:00003C52 __unwindfunclet$?getLangTypeFromParam@@YA?AW4LangType@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z$0 proc near
.text$x:00003C52                                         ; DATA XREF: .xdata$x:0000AD44o
.text$x:00003C52                 lea     ecx, [ebp-2Ch]
.text$x:00003C55                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003C55 __unwindfunclet$?getLangTypeFromParam@@YA?AW4LangType@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z$0 endp
.text$x:00003C55
.text$x:00003C5A
.text$x:00003C5A ; =============== S U B R O U T I N E =======================================
.text$x:00003C5A
.text$x:00003C5A
.text$x:00003C5A __ehhandler$?getLangTypeFromParam@@YA?AW4LangType@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z proc near
.text$x:00003C5A                                         ; DATA XREF: getLangTypeFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+5o
.text$x:00003C5A
.text$x:00003C5A arg_4           = dword ptr  8
.text$x:00003C5A
.text$x:00003C5A                 mov     edx, [esp+arg_4]
.text$x:00003C5E                 lea     eax, [edx+0Ch]
.text$x:00003C61                 mov     ecx, [edx-2Ch]
.text$x:00003C64                 xor     ecx, eax
.text$x:00003C66                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C6B                 mov     ecx, [edx-4]
.text$x:00003C6E                 xor     ecx, eax
.text$x:00003C70                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C75                 mov     eax, offset __ehfuncinfo$?getLangTypeFromParam@@YA?AW4LangType@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z
.text$x:00003C7A                 jmp     ___CxxFrameHandler3
.text$x:00003C7A __ehhandler$?getLangTypeFromParam@@YA?AW4LangType@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z endp
.text$x:00003C7A
.text$x:00003C7F
.text$x:00003C7F ; =============== S U B R O U T I N E =======================================
.text$x:00003C7F
.text$x:00003C7F
.text$x:00003C7F __unwindfunclet$?getLocalizationPathFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@@Z$0 proc near
.text$x:00003C7F                                         ; DATA XREF: .xdata$x:0000AD80o
.text$x:00003C7F                 lea     ecx, [ebp-2Ch]
.text$x:00003C82                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003C82 __unwindfunclet$?getLocalizationPathFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@@Z$0 endp
.text$x:00003C82
.text$x:00003C87
.text$x:00003C87 ; =============== S U B R O U T I N E =======================================
.text$x:00003C87
.text$x:00003C87
.text$x:00003C87 __unwindfunclet$?getLocalizationPathFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@@Z$1 proc near
.text$x:00003C87                                         ; DATA XREF: .xdata$x:0000AD78o
.text$x:00003C87                 mov     eax, [ebp-4Ch]
.text$x:00003C8A                 and     eax, 1
.text$x:00003C8D                 jz      locret_3C9F
.text$x:00003C93                 and     dword ptr [ebp-4Ch], 0FFFFFFFEh
.text$x:00003C97                 mov     ecx, [ebp+8]
.text$x:00003C9A                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003C9F ; ---------------------------------------------------------------------------
.text$x:00003C9F
.text$x:00003C9F locret_3C9F:                            ; CODE XREF: __unwindfunclet$?getLocalizationPathFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@@Z$1+6j
.text$x:00003C9F                 retn
.text$x:00003C9F __unwindfunclet$?getLocalizationPathFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@@Z$1 endp
.text$x:00003C9F
.text$x:00003CA0
.text$x:00003CA0 ; =============== S U B R O U T I N E =======================================
.text$x:00003CA0
.text$x:00003CA0
.text$x:00003CA0 __unwindfunclet$?getLocalizationPathFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@@Z$2 proc near
.text$x:00003CA0                                         ; DATA XREF: .xdata$x:0000AD88o
.text$x:00003CA0                 lea     ecx, [ebp-48h]
.text$x:00003CA3                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003CA3 __unwindfunclet$?getLocalizationPathFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@@Z$2 endp
.text$x:00003CA3
.text$x:00003CA8
.text$x:00003CA8 ; =============== S U B R O U T I N E =======================================
.text$x:00003CA8
.text$x:00003CA8
.text$x:00003CA8 __ehhandler$?getLocalizationPathFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@@Z proc near
.text$x:00003CA8                                         ; DATA XREF: getLocalizationPathFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+5o
.text$x:00003CA8
.text$x:00003CA8 arg_4           = dword ptr  8
.text$x:00003CA8
.text$x:00003CA8                 mov     edx, [esp+arg_4]
.text$x:00003CAC                 lea     eax, [edx+0Ch]
.text$x:00003CAF                 mov     ecx, [edx-44h]
.text$x:00003CB2                 xor     ecx, eax
.text$x:00003CB4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003CB9                 mov     ecx, [edx-4]
.text$x:00003CBC                 xor     ecx, eax
.text$x:00003CBE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003CC3                 mov     eax, offset __ehfuncinfo$?getLocalizationPathFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@@Z
.text$x:00003CC8                 jmp     ___CxxFrameHandler3
.text$x:00003CC8 __ehhandler$?getLocalizationPathFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@@Z endp
.text$x:00003CC8
.text$x:00003CCD
.text$x:00003CCD ; =============== S U B R O U T I N E =======================================
.text$x:00003CCD
.text$x:00003CCD
.text$x:00003CCD __unwindfunclet$?getNumberFromParam@@YAHDAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AA_N@Z$0 proc near
.text$x:00003CCD                                         ; DATA XREF: .xdata$x:0000AD3Co
.text$x:00003CCD                 lea     ecx, [ebp-2Ch]
.text$x:00003CD0                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003CD0 __unwindfunclet$?getNumberFromParam@@YAHDAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AA_N@Z$0 endp
.text$x:00003CD0
.text$x:00003CD5
.text$x:00003CD5 ; =============== S U B R O U T I N E =======================================
.text$x:00003CD5
.text$x:00003CD5
.text$x:00003CD5 __ehhandler$?getNumberFromParam@@YAHDAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AA_N@Z proc near
.text$x:00003CD5                                         ; DATA XREF: getNumberFromParam(char,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,bool &)+5o
.text$x:00003CD5
.text$x:00003CD5 arg_4           = dword ptr  8
.text$x:00003CD5
.text$x:00003CD5                 mov     edx, [esp+arg_4]
.text$x:00003CD9                 lea     eax, [edx+0Ch]
.text$x:00003CDC                 mov     ecx, [edx-2Ch]
.text$x:00003CDF                 xor     ecx, eax
.text$x:00003CE1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003CE6                 mov     ecx, [edx-4]
.text$x:00003CE9                 xor     ecx, eax
.text$x:00003CEB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003CF0                 mov     eax, offset __ehfuncinfo$?getNumberFromParam@@YAHDAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AA_N@Z
.text$x:00003CF5                 jmp     ___CxxFrameHandler3
.text$x:00003CF5 __ehhandler$?getNumberFromParam@@YAHDAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AA_N@Z endp
.text$x:00003CF5
.text$x:00003CFA
.text$x:00003CFA ; =============== S U B R O U T I N E =======================================
.text$x:00003CFA
.text$x:00003CFA
.text$x:00003CFA __unwindfunclet$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z$0 proc near
.text$x:00003CFA                                         ; DATA XREF: .xdata$x:0000AF2Co
.text$x:00003CFA                 lea     ecx, [ebp-2Ch]
.text$x:00003CFD                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003CFD __unwindfunclet$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z$0 endp
.text$x:00003CFD
.text$x:00003D02
.text$x:00003D02 ; =============== S U B R O U T I N E =======================================
.text$x:00003D02
.text$x:00003D02
.text$x:00003D02 __unwindfunclet$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z$1 proc near
.text$x:00003D02                                         ; DATA XREF: .xdata$x:0000AF24o
.text$x:00003D02                 mov     eax, [ebp-88h]
.text$x:00003D08                 and     eax, 1
.text$x:00003D0B                 jz      locret_3D20
.text$x:00003D11                 and     dword ptr [ebp-88h], 0FFFFFFFEh
.text$x:00003D18                 mov     ecx, [ebp+8]
.text$x:00003D1B                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003D20 ; ---------------------------------------------------------------------------
.text$x:00003D20
.text$x:00003D20 locret_3D20:                            ; CODE XREF: __unwindfunclet$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z$1+9j
.text$x:00003D20                 retn
.text$x:00003D20 __unwindfunclet$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z$1 endp
.text$x:00003D20
.text$x:00003D21
.text$x:00003D21 ; =============== S U B R O U T I N E =======================================
.text$x:00003D21
.text$x:00003D21
.text$x:00003D21 __unwindfunclet$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z$2 proc near
.text$x:00003D21                                         ; DATA XREF: .xdata$x:0000AF34o
.text$x:00003D21                 lea     ecx, [ebp-80h]
.text$x:00003D24                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003D24 __unwindfunclet$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z$2 endp
.text$x:00003D24
.text$x:00003D29
.text$x:00003D29 ; =============== S U B R O U T I N E =======================================
.text$x:00003D29
.text$x:00003D29
.text$x:00003D29 __unwindfunclet$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z$3 proc near
.text$x:00003D29                                         ; DATA XREF: .xdata$x:0000AF3Co
.text$x:00003D29                 lea     ecx, [ebp-48h]
.text$x:00003D2C                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003D2C __unwindfunclet$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z$3 endp
.text$x:00003D2C
.text$x:00003D31
.text$x:00003D31 ; =============== S U B R O U T I N E =======================================
.text$x:00003D31
.text$x:00003D31
.text$x:00003D31 __unwindfunclet$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z$4 proc near
.text$x:00003D31                                         ; DATA XREF: .xdata$x:0000AF44o
.text$x:00003D31                 lea     ecx, [ebp-64h]
.text$x:00003D34                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003D34 __unwindfunclet$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z$4 endp
.text$x:00003D34
.text$x:00003D39
.text$x:00003D39 ; =============== S U B R O U T I N E =======================================
.text$x:00003D39
.text$x:00003D39
.text$x:00003D39 __ehhandler$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z proc near
.text$x:00003D39                                         ; DATA XREF: getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &)+5o
.text$x:00003D39
.text$x:00003D39 arg_4           = dword ptr  8
.text$x:00003D39
.text$x:00003D39                 mov     edx, [esp+arg_4]
.text$x:00003D3D                 lea     eax, [edx+0Ch]
.text$x:00003D40                 mov     ecx, [edx-88h]
.text$x:00003D46                 xor     ecx, eax
.text$x:00003D48                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003D4D                 mov     ecx, [edx-4]
.text$x:00003D50                 xor     ecx, eax
.text$x:00003D52                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003D57                 mov     eax, offset __ehfuncinfo$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z
.text$x:00003D5C                 jmp     ___CxxFrameHandler3
.text$x:00003D5C __ehhandler$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z endp
.text$x:00003D5C
.text$x:00003D61
.text$x:00003D61 ; =============== S U B R O U T I N E =======================================
.text$x:00003D61
.text$x:00003D61
.text$x:00003D61 __unwindfunclet$?doException@@YAXAAVNotepad_plus_Window@@@Z$0 proc near
.text$x:00003D61                                         ; DATA XREF: .xdata$x:0000AD60o
.text$x:00003D61                 lea     ecx, [ebp-82Ch]
.text$x:00003D67                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003D67 __unwindfunclet$?doException@@YAXAAVNotepad_plus_Window@@@Z$0 endp
.text$x:00003D67
.text$x:00003D6C
.text$x:00003D6C ; =============== S U B R O U T I N E =======================================
.text$x:00003D6C
.text$x:00003D6C
.text$x:00003D6C __unwindfunclet$?doException@@YAXAAVNotepad_plus_Window@@@Z$1 proc near
.text$x:00003D6C                                         ; DATA XREF: .xdata$x:0000AD68o
.text$x:00003D6C                 mov     ecx, [ebp-854h]
.text$x:00003D72                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003D72 __unwindfunclet$?doException@@YAXAAVNotepad_plus_Window@@@Z$1 endp
.text$x:00003D72
.text$x:00003D77
.text$x:00003D77 ; =============== S U B R O U T I N E =======================================
.text$x:00003D77
.text$x:00003D77
.text$x:00003D77 __unwindfunclet$?doException@@YAXAAVNotepad_plus_Window@@@Z$2 proc near
.text$x:00003D77                                         ; DATA XREF: .xdata$x:0000AD70o
.text$x:00003D77                 lea     ecx, [ebp-848h]
.text$x:00003D7D                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003D7D __unwindfunclet$?doException@@YAXAAVNotepad_plus_Window@@@Z$2 endp
.text$x:00003D7D
.text$x:00003D82
.text$x:00003D82 ; =============== S U B R O U T I N E =======================================
.text$x:00003D82
.text$x:00003D82
.text$x:00003D82 __ehhandler$?doException@@YAXAAVNotepad_plus_Window@@@Z proc near
.text$x:00003D82                                         ; DATA XREF: doException(Notepad_plus_Window &)+5o
.text$x:00003D82
.text$x:00003D82 arg_4           = dword ptr  8
.text$x:00003D82
.text$x:00003D82                 mov     edx, [esp+arg_4]
.text$x:00003D86                 lea     eax, [edx+0Ch]
.text$x:00003D89                 mov     ecx, [edx-850h]
.text$x:00003D8F                 xor     ecx, eax
.text$x:00003D91                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003D96                 mov     ecx, [edx-4]
.text$x:00003D99                 xor     ecx, eax
.text$x:00003D9B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003DA0                 mov     eax, offset __ehfuncinfo$?doException@@YAXAAVNotepad_plus_Window@@@Z
.text$x:00003DA5                 jmp     ___CxxFrameHandler3
.text$x:00003DA5 __ehhandler$?doException@@YAXAAVNotepad_plus_Window@@@Z endp
.text$x:00003DA5
.text$x:00003DA5 ; ---------------------------------------------------------------------------
.text$x:00003DAA                 align 4
.text$x:00003DAA _text$x         ends
.text$x:00003DAA
.text$mn:00003DAC ; ===========================================================================
.text$mn:00003DAC
.text$mn:00003DAC ; Segment type: Pure code
.text$mn:00003DAC ; Segment permissions: Read/Execute
.text$mn:00003DAC _text$mn        segment para public 'CODE' use32
.text$mn:00003DAC                 assume cs:_text$mn
.text$mn:00003DAC                 ;org 3DACh
.text$mn:00003DAC ; COMDAT (pick any)
.text$mn:00003DAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003DAC
.text$mn:00003DAC ; =============== S U B R O U T I N E =======================================
.text$mn:00003DAC
.text$mn:00003DAC ; Attributes: bp-based frame
.text$mn:00003DAC
.text$mn:00003DAC ; bool __cdecl std::operator==<class std::allocator<wchar_t>, class std::allocator<wchar_t>>(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &, struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:00003DAC                 public ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z
.text$mn:00003DAC ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z proc near
.text$mn:00003DAC                                         ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+Cp
.text$mn:00003DAC
.text$mn:00003DAC var_2           = byte ptr -2
.text$mn:00003DAC var_1           = byte ptr -1
.text$mn:00003DAC arg_0           = dword ptr  8
.text$mn:00003DAC arg_4           = dword ptr  0Ch
.text$mn:00003DAC
.text$mn:00003DAC                 push    ebp
.text$mn:00003DAD                 mov     ebp, esp
.text$mn:00003DAF                 push    ecx
.text$mn:00003DB0                 mov     eax, [ebp+arg_4]
.text$mn:00003DB3                 push    eax
.text$mn:00003DB4                 lea     ecx, [ebp+var_1]
.text$mn:00003DB7                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:00003DBC                 push    eax
.text$mn:00003DBD                 mov     ecx, [ebp+arg_0]
.text$mn:00003DC0                 push    ecx
.text$mn:00003DC1                 lea     ecx, [ebp+var_2]
.text$mn:00003DC4                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:00003DC9                 push    eax
.text$mn:00003DCA                 call    ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z ; std::operator==<wchar_t,wchar_t>(std::allocator<wchar_t> const &,std::allocator<wchar_t> const &)
.text$mn:00003DCF                 add     esp, 8
.text$mn:00003DD2                 mov     esp, ebp
.text$mn:00003DD4                 pop     ebp
.text$mn:00003DD5                 retn
.text$mn:00003DD5 ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z endp
.text$mn:00003DD5
.text$mn:00003DD5 ; ---------------------------------------------------------------------------
.text$mn:00003DD6                 align 4
.text$mn:00003DD6 _text$mn        ends
.text$mn:00003DD6
.text$mn:00003DD8 ; ===========================================================================
.text$mn:00003DD8
.text$mn:00003DD8 ; Segment type: Pure code
.text$mn:00003DD8 ; Segment permissions: Read/Execute
.text$mn:00003DD8 _text$mn        segment para public 'CODE' use32
.text$mn:00003DD8                 assume cs:_text$mn
.text$mn:00003DD8                 ;org 3DD8h
.text$mn:00003DD8 ; COMDAT (pick any)
.text$mn:00003DD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003DD8
.text$mn:00003DD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003DD8
.text$mn:00003DD8 ; Attributes: bp-based frame
.text$mn:00003DD8
.text$mn:00003DD8 ; int __cdecl std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int, wchar_t *Str)
.text$mn:00003DD8                 public ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z
.text$mn:00003DD8 ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z proc near
.text$mn:00003DD8                                         ; CODE XREF: std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+Cp
.text$mn:00003DD8
.text$mn:00003DD8 var_4           = dword ptr -4
.text$mn:00003DD8 arg_0           = dword ptr  8
.text$mn:00003DD8 Str             = dword ptr  0Ch
.text$mn:00003DD8
.text$mn:00003DD8                 push    ebp
.text$mn:00003DD9                 mov     ebp, esp
.text$mn:00003DDB                 push    ecx
.text$mn:00003DDC                 mov     eax, [ebp+Str]
.text$mn:00003DDF                 push    eax             ; Str
.text$mn:00003DE0                 mov     ecx, [ebp+arg_0]
.text$mn:00003DE3                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t const *)
.text$mn:00003DE8                 test    eax, eax
.text$mn:00003DEA                 jnz     short loc_3DF5
.text$mn:00003DEC                 mov     [ebp+var_4], 1
.text$mn:00003DF3                 jmp     short loc_3DFC
.text$mn:00003DF5 ; ---------------------------------------------------------------------------
.text$mn:00003DF5
.text$mn:00003DF5 loc_3DF5:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+12j
.text$mn:00003DF5                 mov     [ebp+var_4], 0
.text$mn:00003DFC
.text$mn:00003DFC loc_3DFC:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+1Bj
.text$mn:00003DFC                 mov     al, byte ptr [ebp+var_4]
.text$mn:00003DFF                 mov     esp, ebp
.text$mn:00003E01                 pop     ebp
.text$mn:00003E02                 retn
.text$mn:00003E02 ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z endp
.text$mn:00003E02
.text$mn:00003E02 ; ---------------------------------------------------------------------------
.text$mn:00003E03                 align 4
.text$mn:00003E03 _text$mn        ends
.text$mn:00003E03
.text$mn:00003E04 ; ===========================================================================
.text$mn:00003E04
.text$mn:00003E04 ; Segment type: Pure code
.text$mn:00003E04 ; Segment permissions: Read/Execute
.text$mn:00003E04 _text$mn        segment para public 'CODE' use32
.text$mn:00003E04                 assume cs:_text$mn
.text$mn:00003E04                 ;org 3E04h
.text$mn:00003E04 ; COMDAT (pick any)
.text$mn:00003E04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E04
.text$mn:00003E04 ; =============== S U B R O U T I N E =======================================
.text$mn:00003E04
.text$mn:00003E04 ; Attributes: bp-based frame
.text$mn:00003E04
.text$mn:00003E04 ; bool __cdecl std::operator==<wchar_t, wchar_t>(class std::allocator<wchar_t> const &, class std::allocator<wchar_t> const &)
.text$mn:00003E04                 public ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z
.text$mn:00003E04 ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z proc near
.text$mn:00003E04                                         ; CODE XREF: std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+1Ep
.text$mn:00003E04                 push    ebp
.text$mn:00003E05                 mov     ebp, esp
.text$mn:00003E07                 mov     al, 1
.text$mn:00003E09                 pop     ebp
.text$mn:00003E0A                 retn
.text$mn:00003E0A ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z endp
.text$mn:00003E0A
.text$mn:00003E0A ; ---------------------------------------------------------------------------
.text$mn:00003E0B                 align 4
.text$mn:00003E0B _text$mn        ends
.text$mn:00003E0B
.text$mn:00003E0C ; ===========================================================================
.text$mn:00003E0C
.text$mn:00003E0C ; Segment type: Pure code
.text$mn:00003E0C ; Segment permissions: Read/Execute
.text$mn:00003E0C _text$mn        segment para public 'CODE' use32
.text$mn:00003E0C                 assume cs:_text$mn
.text$mn:00003E0C                 ;org 3E0Ch
.text$mn:00003E0C ; COMDAT (pick any)
.text$mn:00003E0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E0C
.text$mn:00003E0C ; =============== S U B R O U T I N E =======================================
.text$mn:00003E0C
.text$mn:00003E0C ; Attributes: bp-based frame
.text$mn:00003E0C
.text$mn:00003E0C ; bool __cdecl std::operator!=<class std::allocator<wchar_t>, class std::allocator<wchar_t>>(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &, struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:00003E0C                 public ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z
.text$mn:00003E0C ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z proc near
.text$mn:00003E0C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+73p
.text$mn:00003E0C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+2Bp
.text$mn:00003E0C
.text$mn:00003E0C var_4           = dword ptr -4
.text$mn:00003E0C arg_0           = dword ptr  8
.text$mn:00003E0C arg_4           = dword ptr  0Ch
.text$mn:00003E0C
.text$mn:00003E0C                 push    ebp
.text$mn:00003E0D                 mov     ebp, esp
.text$mn:00003E0F                 push    ecx
.text$mn:00003E10                 mov     eax, [ebp+arg_4]
.text$mn:00003E13                 push    eax
.text$mn:00003E14                 mov     ecx, [ebp+arg_0]
.text$mn:00003E17                 push    ecx
.text$mn:00003E18                 call    ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00003E1D                 add     esp, 8
.text$mn:00003E20                 movzx   edx, al
.text$mn:00003E23                 test    edx, edx
.text$mn:00003E25                 jnz     short loc_3E30
.text$mn:00003E27                 mov     [ebp+var_4], 1
.text$mn:00003E2E                 jmp     short loc_3E37
.text$mn:00003E30 ; ---------------------------------------------------------------------------
.text$mn:00003E30
.text$mn:00003E30 loc_3E30:                               ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+19j
.text$mn:00003E30                 mov     [ebp+var_4], 0
.text$mn:00003E37
.text$mn:00003E37 loc_3E37:                               ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+22j
.text$mn:00003E37                 mov     al, byte ptr [ebp+var_4]
.text$mn:00003E3A                 mov     esp, ebp
.text$mn:00003E3C                 pop     ebp
.text$mn:00003E3D                 retn
.text$mn:00003E3D ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z endp
.text$mn:00003E3D
.text$mn:00003E3D ; ---------------------------------------------------------------------------
.text$mn:00003E3E                 align 10h
.text$mn:00003E3E _text$mn        ends
.text$mn:00003E3E
.text$mn:00003E40 ; ===========================================================================
.text$mn:00003E40
.text$mn:00003E40 ; Segment type: Pure code
.text$mn:00003E40 ; Segment permissions: Read/Execute
.text$mn:00003E40 _text$mn        segment para public 'CODE' use32
.text$mn:00003E40                 assume cs:_text$mn
.text$mn:00003E40                 ;org 3E40h
.text$mn:00003E40 ; COMDAT (pick any)
.text$mn:00003E40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E40
.text$mn:00003E40 ; =============== S U B R O U T I N E =======================================
.text$mn:00003E40
.text$mn:00003E40 ; Attributes: bp-based frame
.text$mn:00003E40
.text$mn:00003E40 ; int __cdecl std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int, wchar_t *Str)
.text$mn:00003E40                 public ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z
.text$mn:00003E40 ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z proc near
.text$mn:00003E40                                         ; CODE XREF: WinMain(x,x,x,x)+338p
.text$mn:00003E40
.text$mn:00003E40 var_4           = dword ptr -4
.text$mn:00003E40 arg_0           = dword ptr  8
.text$mn:00003E40 Str             = dword ptr  0Ch
.text$mn:00003E40
.text$mn:00003E40                 push    ebp
.text$mn:00003E41                 mov     ebp, esp
.text$mn:00003E43                 push    ecx
.text$mn:00003E44                 mov     eax, [ebp+Str]
.text$mn:00003E47                 push    eax             ; Str
.text$mn:00003E48                 mov     ecx, [ebp+arg_0]
.text$mn:00003E4B                 push    ecx             ; int
.text$mn:00003E4C                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00003E51                 add     esp, 8
.text$mn:00003E54                 movzx   edx, al
.text$mn:00003E57                 test    edx, edx
.text$mn:00003E59                 jnz     short loc_3E64
.text$mn:00003E5B                 mov     [ebp+var_4], 1
.text$mn:00003E62                 jmp     short loc_3E6B
.text$mn:00003E64 ; ---------------------------------------------------------------------------
.text$mn:00003E64
.text$mn:00003E64 loc_3E64:                               ; CODE XREF: std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+19j
.text$mn:00003E64                 mov     [ebp+var_4], 0
.text$mn:00003E6B
.text$mn:00003E6B loc_3E6B:                               ; CODE XREF: std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+22j
.text$mn:00003E6B                 mov     al, byte ptr [ebp+var_4]
.text$mn:00003E6E                 mov     esp, ebp
.text$mn:00003E70                 pop     ebp
.text$mn:00003E71                 retn
.text$mn:00003E71 ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z endp
.text$mn:00003E71
.text$mn:00003E71 ; ---------------------------------------------------------------------------
.text$mn:00003E72                 align 4
.text$mn:00003E72 _text$mn        ends
.text$mn:00003E72
.text$mn:00003E74 ; ===========================================================================
.text$mn:00003E74
.text$mn:00003E74 ; Segment type: Pure code
.text$mn:00003E74 ; Segment permissions: Read/Execute
.text$mn:00003E74 _text$mn        segment para public 'CODE' use32
.text$mn:00003E74                 assume cs:_text$mn
.text$mn:00003E74                 ;org 3E74h
.text$mn:00003E74 ; COMDAT (pick any)
.text$mn:00003E74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E74
.text$mn:00003E74 ; =============== S U B R O U T I N E =======================================
.text$mn:00003E74
.text$mn:00003E74 ; Attributes: bp-based frame
.text$mn:00003E74
.text$mn:00003E74 ; int __cdecl std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int, int, wchar_t *Str)
.text$mn:00003E74                 public ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
.text$mn:00003E74 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z proc near
.text$mn:00003E74                                         ; CODE XREF: WinMain(x,x,x,x)+76Ep
.text$mn:00003E74
.text$mn:00003E74 var_30          = dword ptr -30h
.text$mn:00003E74 var_2C          = byte ptr -2Ch
.text$mn:00003E74 var_10          = dword ptr -10h
.text$mn:00003E74 var_C           = dword ptr -0Ch
.text$mn:00003E74 var_4           = dword ptr -4
.text$mn:00003E74 arg_0           = dword ptr  8
.text$mn:00003E74 arg_4           = dword ptr  0Ch
.text$mn:00003E74 Str             = dword ptr  10h
.text$mn:00003E74
.text$mn:00003E74                 push    ebp
.text$mn:00003E75                 mov     ebp, esp
.text$mn:00003E77                 push    0FFFFFFFFh
.text$mn:00003E79                 push    offset __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
.text$mn:00003E7E                 mov     eax, large fs:0
.text$mn:00003E84                 push    eax
.text$mn:00003E85                 sub     esp, 24h
.text$mn:00003E88                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003E8D                 xor     eax, ebp
.text$mn:00003E8F                 mov     [ebp+var_10], eax
.text$mn:00003E92                 push    esi
.text$mn:00003E93                 push    eax
.text$mn:00003E94                 lea     eax, [ebp+var_C]
.text$mn:00003E97                 mov     large fs:0, eax
.text$mn:00003E9D                 mov     [ebp+var_30], 0
.text$mn:00003EA4                 lea     ecx, [ebp+var_2C]
.text$mn:00003EA7                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003EAC                 mov     [ebp+var_4], 1
.text$mn:00003EB3                 mov     ecx, [ebp+arg_4]
.text$mn:00003EB6                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00003EBB                 mov     esi, eax
.text$mn:00003EBD                 mov     eax, [ebp+Str]
.text$mn:00003EC0                 push    eax             ; Str
.text$mn:00003EC1                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:00003EC6                 add     esp, 4
.text$mn:00003EC9                 add     esi, eax
.text$mn:00003ECB                 push    esi
.text$mn:00003ECC                 lea     ecx, [ebp+var_2C]
.text$mn:00003ECF                 call    ?reserve@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::reserve(uint)
.text$mn:00003ED4                 mov     ecx, [ebp+arg_4]
.text$mn:00003ED7                 push    ecx
.text$mn:00003ED8                 lea     ecx, [ebp+var_2C]
.text$mn:00003EDB                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00003EE0                 mov     edx, [ebp+Str]
.text$mn:00003EE3                 push    edx             ; Str
.text$mn:00003EE4                 lea     ecx, [ebp+var_2C]
.text$mn:00003EE7                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00003EEC                 lea     eax, [ebp+var_2C]
.text$mn:00003EEF                 push    eax
.text$mn:00003EF0                 mov     ecx, [ebp+arg_0]
.text$mn:00003EF3                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00003EF8                 mov     ecx, [ebp+var_30]
.text$mn:00003EFB                 or      ecx, 1
.text$mn:00003EFE                 mov     [ebp+var_30], ecx
.text$mn:00003F01                 mov     byte ptr [ebp+var_4], 0
.text$mn:00003F05                 lea     ecx, [ebp+var_2C]
.text$mn:00003F08                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003F0D                 mov     eax, [ebp+arg_0]
.text$mn:00003F10                 mov     ecx, [ebp+var_C]
.text$mn:00003F13                 mov     large fs:0, ecx
.text$mn:00003F1A                 pop     ecx
.text$mn:00003F1B                 pop     esi
.text$mn:00003F1C                 mov     ecx, [ebp+var_10]
.text$mn:00003F1F                 xor     ecx, ebp
.text$mn:00003F21                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00003F26                 mov     esp, ebp
.text$mn:00003F28                 pop     ebp
.text$mn:00003F29                 retn
.text$mn:00003F29 ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z endp
.text$mn:00003F29
.text$mn:00003F29 ; ---------------------------------------------------------------------------
.text$mn:00003F2A                 align 4
.text$mn:00003F2A _text$mn        ends
.text$mn:00003F2A
.text$x:00003F2C ; ===========================================================================
.text$x:00003F2C
.text$x:00003F2C ; Segment type: Pure code
.text$x:00003F2C ; Segment permissions: Read/Execute
.text$x:00003F2C _text$x         segment para public 'CODE' use32
.text$x:00003F2C                 assume cs:_text$x
.text$x:00003F2C                 ;org 3F2Ch
.text$x:00003F2C ; COMDAT (pick associative to section at 3E74)
.text$x:00003F2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003F2C
.text$x:00003F2C ; =============== S U B R O U T I N E =======================================
.text$x:00003F2C
.text$x:00003F2C
.text$x:00003F2C __unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$0 proc near
.text$x:00003F2C                                         ; DATA XREF: .xdata$x:0000BE60o
.text$x:00003F2C                 lea     ecx, [ebp-2Ch]
.text$x:00003F2F                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003F2F __unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$0 endp
.text$x:00003F2F
.text$x:00003F34
.text$x:00003F34 ; =============== S U B R O U T I N E =======================================
.text$x:00003F34
.text$x:00003F34
.text$x:00003F34 __unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$1 proc near
.text$x:00003F34                                         ; DATA XREF: .xdata$x:0000BE58o
.text$x:00003F34                 mov     eax, [ebp-30h]
.text$x:00003F37                 and     eax, 1
.text$x:00003F3A                 jz      $LN5_1
.text$x:00003F40                 and     dword ptr [ebp-30h], 0FFFFFFFEh
.text$x:00003F44                 mov     ecx, [ebp+8]
.text$x:00003F47                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003F4C ; ---------------------------------------------------------------------------
.text$x:00003F4C
.text$x:00003F4C $LN5_1:                                 ; CODE XREF: __unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$1+6j
.text$x:00003F4C                 retn
.text$x:00003F4C __unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$1 endp
.text$x:00003F4C
.text$x:00003F4D
.text$x:00003F4D ; =============== S U B R O U T I N E =======================================
.text$x:00003F4D
.text$x:00003F4D
.text$x:00003F4D __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z proc near
.text$x:00003F4D                                         ; DATA XREF: std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+5o
.text$x:00003F4D
.text$x:00003F4D arg_4           = dword ptr  8
.text$x:00003F4D
.text$x:00003F4D                 mov     edx, [esp+arg_4]
.text$x:00003F51                 lea     eax, [edx+0Ch]
.text$x:00003F54                 mov     ecx, [edx-2Ch]
.text$x:00003F57                 xor     ecx, eax
.text$x:00003F59                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003F5E                 mov     ecx, [edx-4]
.text$x:00003F61                 xor     ecx, eax
.text$x:00003F63                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003F68                 mov     eax, offset __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
.text$x:00003F6D                 jmp     ___CxxFrameHandler3
.text$x:00003F6D __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z endp
.text$x:00003F6D
.text$x:00003F6D ; ---------------------------------------------------------------------------
.text$x:00003F72                 align 4
.text$x:00003F72 _text$x         ends
.text$x:00003F72
.text$mn:00003F74 ; ===========================================================================
.text$mn:00003F74
.text$mn:00003F74 ; Segment type: Pure code
.text$mn:00003F74 ; Segment permissions: Read/Execute
.text$mn:00003F74 _text$mn        segment para public 'CODE' use32
.text$mn:00003F74                 assume cs:_text$mn
.text$mn:00003F74                 ;org 3F74h
.text$mn:00003F74 ; COMDAT (pick any)
.text$mn:00003F74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003F74
.text$mn:00003F74 ; =============== S U B R O U T I N E =======================================
.text$mn:00003F74
.text$mn:00003F74 ; Attributes: bp-based frame
.text$mn:00003F74
.text$mn:00003F74 ; char * __cdecl std::_Allocate<char>(unsigned int, char *)
.text$mn:00003F74                 public ??$_Allocate@D@std@@YAPADIPAD@Z
.text$mn:00003F74 ??$_Allocate@D@std@@YAPADIPAD@Z proc near
.text$mn:00003F74                                         ; CODE XREF: std::allocator<char>::allocate(uint)+Dp
.text$mn:00003F74
.text$mn:00003F74 var_4           = dword ptr -4
.text$mn:00003F74 arg_0           = dword ptr  8
.text$mn:00003F74
.text$mn:00003F74                 push    ebp
.text$mn:00003F75                 mov     ebp, esp
.text$mn:00003F77                 push    ecx
.text$mn:00003F78                 mov     [ebp+var_4], 0
.text$mn:00003F7F                 cmp     [ebp+arg_0], 0
.text$mn:00003F83                 jnz     short loc_3F87
.text$mn:00003F85                 jmp     short loc_3FA7
.text$mn:00003F87 ; ---------------------------------------------------------------------------
.text$mn:00003F87
.text$mn:00003F87 loc_3F87:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+Fj
.text$mn:00003F87                 cmp     [ebp+arg_0], 0FFFFFFFFh
.text$mn:00003F8B                 ja      short loc_3FA2
.text$mn:00003F8D                 mov     eax, [ebp+arg_0]
.text$mn:00003F90                 push    eax             ; unsigned int
.text$mn:00003F91                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00003F96                 add     esp, 4
.text$mn:00003F99                 mov     [ebp+var_4], eax
.text$mn:00003F9C                 cmp     [ebp+var_4], 0
.text$mn:00003FA0                 jnz     short loc_3FA7
.text$mn:00003FA2
.text$mn:00003FA2 loc_3FA2:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+17j
.text$mn:00003FA2                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00003FA7
.text$mn:00003FA7 loc_3FA7:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+11j
.text$mn:00003FA7                                         ; std::_Allocate<char>(uint,char *)+2Cj
.text$mn:00003FA7                 mov     eax, [ebp+var_4]
.text$mn:00003FAA                 mov     esp, ebp
.text$mn:00003FAC                 pop     ebp
.text$mn:00003FAD                 retn
.text$mn:00003FAD ??$_Allocate@D@std@@YAPADIPAD@Z endp
.text$mn:00003FAD
.text$mn:00003FAD ; ---------------------------------------------------------------------------
.text$mn:00003FAE                 align 10h
.text$mn:00003FAE _text$mn        ends
.text$mn:00003FAE
.text$mn:00003FB0 ; ===========================================================================
.text$mn:00003FB0
.text$mn:00003FB0 ; Segment type: Pure code
.text$mn:00003FB0 ; Segment permissions: Read/Execute
.text$mn:00003FB0 _text$mn        segment para public 'CODE' use32
.text$mn:00003FB0                 assume cs:_text$mn
.text$mn:00003FB0                 ;org 3FB0h
.text$mn:00003FB0 ; COMDAT (pick any)
.text$mn:00003FB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003FB0
.text$mn:00003FB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00003FB0
.text$mn:00003FB0 ; Attributes: bp-based frame
.text$mn:00003FB0
.text$mn:00003FB0 ; wchar_t const * * __cdecl std::_Allocate<wchar_t const *>(unsigned int, wchar_t const * *)
.text$mn:00003FB0                 public ??$_Allocate@PB_W@std@@YAPAPB_WIPAPB_W@Z
.text$mn:00003FB0 ??$_Allocate@PB_W@std@@YAPAPB_WIPAPB_W@Z proc near
.text$mn:00003FB0                                         ; CODE XREF: std::allocator<wchar_t const *>::allocate(uint)+Dp
.text$mn:00003FB0
.text$mn:00003FB0 var_4           = dword ptr -4
.text$mn:00003FB0 arg_0           = dword ptr  8
.text$mn:00003FB0
.text$mn:00003FB0                 push    ebp
.text$mn:00003FB1                 mov     ebp, esp
.text$mn:00003FB3                 push    ecx
.text$mn:00003FB4                 mov     [ebp+var_4], 0
.text$mn:00003FBB                 cmp     [ebp+arg_0], 0
.text$mn:00003FBF                 jnz     short loc_3FC3
.text$mn:00003FC1                 jmp     short loc_3FE9
.text$mn:00003FC3 ; ---------------------------------------------------------------------------
.text$mn:00003FC3
.text$mn:00003FC3 loc_3FC3:                               ; CODE XREF: std::_Allocate<wchar_t const *>(uint,wchar_t const * *)+Fj
.text$mn:00003FC3                 cmp     [ebp+arg_0], 3FFFFFFFh
.text$mn:00003FCA                 ja      short loc_3FE4
.text$mn:00003FCC                 mov     eax, [ebp+arg_0]
.text$mn:00003FCF                 shl     eax, 2
.text$mn:00003FD2                 push    eax             ; unsigned int
.text$mn:00003FD3                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00003FD8                 add     esp, 4
.text$mn:00003FDB                 mov     [ebp+var_4], eax
.text$mn:00003FDE                 cmp     [ebp+var_4], 0
.text$mn:00003FE2                 jnz     short loc_3FE9
.text$mn:00003FE4
.text$mn:00003FE4 loc_3FE4:                               ; CODE XREF: std::_Allocate<wchar_t const *>(uint,wchar_t const * *)+1Aj
.text$mn:00003FE4                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00003FE9
.text$mn:00003FE9 loc_3FE9:                               ; CODE XREF: std::_Allocate<wchar_t const *>(uint,wchar_t const * *)+11j
.text$mn:00003FE9                                         ; std::_Allocate<wchar_t const *>(uint,wchar_t const * *)+32j
.text$mn:00003FE9                 mov     eax, [ebp+var_4]
.text$mn:00003FEC                 mov     esp, ebp
.text$mn:00003FEE                 pop     ebp
.text$mn:00003FEF                 retn
.text$mn:00003FEF ??$_Allocate@PB_W@std@@YAPAPB_WIPAPB_W@Z endp
.text$mn:00003FEF
.text$mn:00003FEF _text$mn        ends
.text$mn:00003FEF
.text$mn:00003FF0 ; ===========================================================================
.text$mn:00003FF0
.text$mn:00003FF0 ; Segment type: Pure code
.text$mn:00003FF0 ; Segment permissions: Read/Execute
.text$mn:00003FF0 _text$mn        segment para public 'CODE' use32
.text$mn:00003FF0                 assume cs:_text$mn
.text$mn:00003FF0                 ;org 3FF0h
.text$mn:00003FF0 ; COMDAT (pick any)
.text$mn:00003FF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003FF0
.text$mn:00003FF0 ; =============== S U B R O U T I N E =======================================
.text$mn:00003FF0
.text$mn:00003FF0 ; Attributes: bp-based frame
.text$mn:00003FF0
.text$mn:00003FF0 ; struct std::_Container_proxy * __cdecl std::_Allocate<struct std::_Container_proxy>(unsigned int, struct std::_Container_proxy *)
.text$mn:00003FF0                 public ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
.text$mn:00003FF0 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
.text$mn:00003FF0                                         ; CODE XREF: std::allocator<std::_Container_proxy>::allocate(uint)+Dp
.text$mn:00003FF0
.text$mn:00003FF0 var_4           = dword ptr -4
.text$mn:00003FF0 arg_0           = dword ptr  8
.text$mn:00003FF0
.text$mn:00003FF0                 push    ebp
.text$mn:00003FF1                 mov     ebp, esp
.text$mn:00003FF3                 push    ecx
.text$mn:00003FF4                 mov     [ebp+var_4], 0
.text$mn:00003FFB                 cmp     [ebp+arg_0], 0
.text$mn:00003FFF                 jnz     short loc_4003
.text$mn:00004001                 jmp     short loc_4029
.text$mn:00004003 ; ---------------------------------------------------------------------------
.text$mn:00004003
.text$mn:00004003 loc_4003:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+Fj
.text$mn:00004003                 cmp     [ebp+arg_0], 1FFFFFFFh
.text$mn:0000400A                 ja      short loc_4024
.text$mn:0000400C                 mov     eax, [ebp+arg_0]
.text$mn:0000400F                 shl     eax, 3
.text$mn:00004012                 push    eax             ; unsigned int
.text$mn:00004013                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00004018                 add     esp, 4
.text$mn:0000401B                 mov     [ebp+var_4], eax
.text$mn:0000401E                 cmp     [ebp+var_4], 0
.text$mn:00004022                 jnz     short loc_4029
.text$mn:00004024
.text$mn:00004024 loc_4024:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+1Aj
.text$mn:00004024                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00004029
.text$mn:00004029 loc_4029:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+11j
.text$mn:00004029                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+32j
.text$mn:00004029                 mov     eax, [ebp+var_4]
.text$mn:0000402C                 mov     esp, ebp
.text$mn:0000402E                 pop     ebp
.text$mn:0000402F                 retn
.text$mn:0000402F ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z endp
.text$mn:0000402F
.text$mn:0000402F _text$mn        ends
.text$mn:0000402F
.text$mn:00004030 ; ===========================================================================
.text$mn:00004030
.text$mn:00004030 ; Segment type: Pure code
.text$mn:00004030 ; Segment permissions: Read/Execute
.text$mn:00004030 _text$mn        segment para public 'CODE' use32
.text$mn:00004030                 assume cs:_text$mn
.text$mn:00004030                 ;org 4030h
.text$mn:00004030 ; COMDAT (pick any)
.text$mn:00004030                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004030
.text$mn:00004030 ; =============== S U B R O U T I N E =======================================
.text$mn:00004030
.text$mn:00004030 ; Attributes: bp-based frame
.text$mn:00004030
.text$mn:00004030 ; wchar_t * __cdecl std::_Allocate<wchar_t>(unsigned int, wchar_t *)
.text$mn:00004030                 public ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
.text$mn:00004030 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z proc near
.text$mn:00004030                                         ; CODE XREF: std::allocator<wchar_t>::allocate(uint)+Dp
.text$mn:00004030
.text$mn:00004030 var_4           = dword ptr -4
.text$mn:00004030 arg_0           = dword ptr  8
.text$mn:00004030
.text$mn:00004030                 push    ebp
.text$mn:00004031                 mov     ebp, esp
.text$mn:00004033                 push    ecx
.text$mn:00004034                 mov     [ebp+var_4], 0
.text$mn:0000403B                 cmp     [ebp+arg_0], 0
.text$mn:0000403F                 jnz     short loc_4043
.text$mn:00004041                 jmp     short loc_4068
.text$mn:00004043 ; ---------------------------------------------------------------------------
.text$mn:00004043
.text$mn:00004043 loc_4043:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+Fj
.text$mn:00004043                 cmp     [ebp+arg_0], 7FFFFFFFh
.text$mn:0000404A                 ja      short loc_4063
.text$mn:0000404C                 mov     eax, [ebp+arg_0]
.text$mn:0000404F                 shl     eax, 1
.text$mn:00004051                 push    eax             ; unsigned int
.text$mn:00004052                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00004057                 add     esp, 4
.text$mn:0000405A                 mov     [ebp+var_4], eax
.text$mn:0000405D                 cmp     [ebp+var_4], 0
.text$mn:00004061                 jnz     short loc_4068
.text$mn:00004063
.text$mn:00004063 loc_4063:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+1Aj
.text$mn:00004063                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00004068
.text$mn:00004068 loc_4068:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+11j
.text$mn:00004068                                         ; std::_Allocate<wchar_t>(uint,wchar_t *)+31j
.text$mn:00004068                 mov     eax, [ebp+var_4]
.text$mn:0000406B                 mov     esp, ebp
.text$mn:0000406D                 pop     ebp
.text$mn:0000406E                 retn
.text$mn:0000406E ??$_Allocate@_W@std@@YAPA_WIPA_W@Z endp
.text$mn:0000406E
.text$mn:0000406E ; ---------------------------------------------------------------------------
.text$mn:0000406F                 align 10h
.text$mn:0000406F _text$mn        ends
.text$mn:0000406F
.text$mn:00004070 ; ===========================================================================
.text$mn:00004070
.text$mn:00004070 ; Segment type: Pure code
.text$mn:00004070 ; Segment permissions: Read/Execute
.text$mn:00004070 _text$mn        segment para public 'CODE' use32
.text$mn:00004070                 assume cs:_text$mn
.text$mn:00004070                 ;org 4070h
.text$mn:00004070 ; COMDAT (pick any)
.text$mn:00004070                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004070
.text$mn:00004070 ; =============== S U B R O U T I N E =======================================
.text$mn:00004070
.text$mn:00004070 ; Attributes: bp-based frame
.text$mn:00004070
.text$mn:00004070 ; int __cdecl std::_Debug_pointer<char>(int, wchar_t *, unsigned int)
.text$mn:00004070                 public ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
.text$mn:00004070 ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
.text$mn:00004070                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+15p
.text$mn:00004070                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+1Bp
.text$mn:00004070
.text$mn:00004070 arg_0           = dword ptr  8
.text$mn:00004070 arg_4           = dword ptr  0Ch
.text$mn:00004070 arg_8           = dword ptr  10h
.text$mn:00004070
.text$mn:00004070                 push    ebp
.text$mn:00004071                 mov     ebp, esp
.text$mn:00004073                 cmp     [ebp+arg_0], 0
.text$mn:00004077                 jnz     short loc_408E
.text$mn:00004079                 mov     eax, [ebp+arg_8]
.text$mn:0000407C                 push    eax             ; unsigned int
.text$mn:0000407D                 mov     ecx, [ebp+arg_4]
.text$mn:00004080                 push    ecx             ; wchar_t *
.text$mn:00004081                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00004086                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000408B                 add     esp, 0Ch
.text$mn:0000408E
.text$mn:0000408E loc_408E:                               ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+7j
.text$mn:0000408E                 pop     ebp
.text$mn:0000408F                 retn
.text$mn:0000408F ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z endp
.text$mn:0000408F
.text$mn:0000408F _text$mn        ends
.text$mn:0000408F
.text$mn:00004090 ; ===========================================================================
.text$mn:00004090
.text$mn:00004090 ; Segment type: Pure code
.text$mn:00004090 ; Segment permissions: Read/Execute
.text$mn:00004090 _text$mn        segment para public 'CODE' use32
.text$mn:00004090                 assume cs:_text$mn
.text$mn:00004090                 ;org 4090h
.text$mn:00004090 ; COMDAT (pick any)
.text$mn:00004090                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004090
.text$mn:00004090 ; =============== S U B R O U T I N E =======================================
.text$mn:00004090
.text$mn:00004090 ; Attributes: bp-based frame
.text$mn:00004090
.text$mn:00004090 ; int __cdecl std::_Debug_pointer<wchar_t const *>(int, wchar_t *, unsigned int)
.text$mn:00004090                 public ??$_Debug_pointer@PB_W@std@@YAXPAPB_WPB_WI@Z
.text$mn:00004090 ??$_Debug_pointer@PB_W@std@@YAXPAPB_WPB_WI@Z proc near
.text$mn:00004090                                         ; CODE XREF: std::_Debug_range2<wchar_t const * *>(wchar_t const * *,wchar_t const * *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:00004090                                         ; std::_Debug_range2<wchar_t const * *>(wchar_t const * *,wchar_t const * *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:00004090
.text$mn:00004090 arg_0           = dword ptr  8
.text$mn:00004090 arg_4           = dword ptr  0Ch
.text$mn:00004090 arg_8           = dword ptr  10h
.text$mn:00004090
.text$mn:00004090                 push    ebp
.text$mn:00004091                 mov     ebp, esp
.text$mn:00004093                 cmp     [ebp+arg_0], 0
.text$mn:00004097                 jnz     short loc_40AE
.text$mn:00004099                 mov     eax, [ebp+arg_8]
.text$mn:0000409C                 push    eax             ; unsigned int
.text$mn:0000409D                 mov     ecx, [ebp+arg_4]
.text$mn:000040A0                 push    ecx             ; wchar_t *
.text$mn:000040A1                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000040A6                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000040AB                 add     esp, 0Ch
.text$mn:000040AE
.text$mn:000040AE loc_40AE:                               ; CODE XREF: std::_Debug_pointer<wchar_t const *>(wchar_t const * *,wchar_t const *,uint)+7j
.text$mn:000040AE                 pop     ebp
.text$mn:000040AF                 retn
.text$mn:000040AF ??$_Debug_pointer@PB_W@std@@YAXPAPB_WPB_WI@Z endp
.text$mn:000040AF
.text$mn:000040AF _text$mn        ends
.text$mn:000040AF
.text$mn:000040B0 ; ===========================================================================
.text$mn:000040B0
.text$mn:000040B0 ; Segment type: Pure code
.text$mn:000040B0 ; Segment permissions: Read/Execute
.text$mn:000040B0 _text$mn        segment para public 'CODE' use32
.text$mn:000040B0                 assume cs:_text$mn
.text$mn:000040B0                 ;org 40B0h
.text$mn:000040B0 ; COMDAT (pick any)
.text$mn:000040B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000040B0
.text$mn:000040B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000040B0
.text$mn:000040B0 ; Attributes: bp-based frame
.text$mn:000040B0
.text$mn:000040B0 ; int __cdecl std::_Debug_pointer<wchar_t>(int, wchar_t *, unsigned int)
.text$mn:000040B0                 public ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z
.text$mn:000040B0 ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z proc near
.text$mn:000040B0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+15p
.text$mn:000040B0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+1Dp ...
.text$mn:000040B0
.text$mn:000040B0 arg_0           = dword ptr  8
.text$mn:000040B0 arg_4           = dword ptr  0Ch
.text$mn:000040B0 arg_8           = dword ptr  10h
.text$mn:000040B0
.text$mn:000040B0                 push    ebp
.text$mn:000040B1                 mov     ebp, esp
.text$mn:000040B3                 cmp     [ebp+arg_0], 0
.text$mn:000040B7                 jnz     short loc_40CE
.text$mn:000040B9                 mov     eax, [ebp+arg_8]
.text$mn:000040BC                 push    eax             ; unsigned int
.text$mn:000040BD                 mov     ecx, [ebp+arg_4]
.text$mn:000040C0                 push    ecx             ; wchar_t *
.text$mn:000040C1                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000040C6                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000040CB                 add     esp, 0Ch
.text$mn:000040CE
.text$mn:000040CE loc_40CE:                               ; CODE XREF: std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)+7j
.text$mn:000040CE                 pop     ebp
.text$mn:000040CF                 retn
.text$mn:000040CF ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z endp
.text$mn:000040CF
.text$mn:000040CF _text$mn        ends
.text$mn:000040CF
.text$mn:000040D0 ; ===========================================================================
.text$mn:000040D0
.text$mn:000040D0 ; Segment type: Pure code
.text$mn:000040D0 ; Segment permissions: Read/Execute
.text$mn:000040D0 _text$mn        segment para public 'CODE' use32
.text$mn:000040D0                 assume cs:_text$mn
.text$mn:000040D0                 ;org 40D0h
.text$mn:000040D0 ; COMDAT (pick any)
.text$mn:000040D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000040D0
.text$mn:000040D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000040D0
.text$mn:000040D0 ; Attributes: bp-based frame
.text$mn:000040D0
.text$mn:000040D0 ; int __cdecl std::_Debug_range2<wchar_t const * *>(int, int, wchar_t *, unsigned int)
.text$mn:000040D0                 public ??$_Debug_range2@PAPB_W@std@@YAXPAPB_W0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:000040D0 ??$_Debug_range2@PAPB_W@std@@YAXPAPB_W0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:000040D0                                         ; CODE XREF: std::_Debug_range<wchar_t const * *>(wchar_t const * *,wchar_t const * *,wchar_t const *,uint)+2Ap
.text$mn:000040D0
.text$mn:000040D0 arg_0           = dword ptr  8
.text$mn:000040D0 arg_4           = dword ptr  0Ch
.text$mn:000040D0 arg_8           = dword ptr  10h
.text$mn:000040D0 arg_C           = dword ptr  14h
.text$mn:000040D0
.text$mn:000040D0                 push    ebp
.text$mn:000040D1                 mov     ebp, esp
.text$mn:000040D3                 mov     eax, [ebp+arg_0]
.text$mn:000040D6                 cmp     eax, [ebp+arg_4]
.text$mn:000040D9                 jz      short loc_4120
.text$mn:000040DB                 mov     ecx, [ebp+arg_C]
.text$mn:000040DE                 push    ecx             ; unsigned int
.text$mn:000040DF                 mov     edx, [ebp+arg_8]
.text$mn:000040E2                 push    edx             ; wchar_t *
.text$mn:000040E3                 mov     eax, [ebp+arg_0]
.text$mn:000040E6                 push    eax             ; int
.text$mn:000040E7                 call    ??$_Debug_pointer@PB_W@std@@YAXPAPB_WPB_WI@Z ; std::_Debug_pointer<wchar_t const *>(wchar_t const * *,wchar_t const *,uint)
.text$mn:000040EC                 add     esp, 0Ch
.text$mn:000040EF                 mov     ecx, [ebp+arg_C]
.text$mn:000040F2                 push    ecx             ; unsigned int
.text$mn:000040F3                 mov     edx, [ebp+arg_8]
.text$mn:000040F6                 push    edx             ; wchar_t *
.text$mn:000040F7                 mov     eax, [ebp+arg_4]
.text$mn:000040FA                 push    eax             ; int
.text$mn:000040FB                 call    ??$_Debug_pointer@PB_W@std@@YAXPAPB_WPB_WI@Z ; std::_Debug_pointer<wchar_t const *>(wchar_t const * *,wchar_t const *,uint)
.text$mn:00004100                 add     esp, 0Ch
.text$mn:00004103                 mov     ecx, [ebp+arg_4]
.text$mn:00004106                 cmp     ecx, [ebp+arg_0]
.text$mn:00004109                 jnb     short loc_4120
.text$mn:0000410B                 mov     edx, [ebp+arg_C]
.text$mn:0000410E                 push    edx             ; unsigned int
.text$mn:0000410F                 mov     eax, [ebp+arg_8]
.text$mn:00004112                 push    eax             ; wchar_t *
.text$mn:00004113                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:00004118                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000411D                 add     esp, 0Ch
.text$mn:00004120
.text$mn:00004120 loc_4120:                               ; CODE XREF: std::_Debug_range2<wchar_t const * *>(wchar_t const * *,wchar_t const * *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:00004120                                         ; std::_Debug_range2<wchar_t const * *>(wchar_t const * *,wchar_t const * *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:00004120                 pop     ebp
.text$mn:00004121                 retn
.text$mn:00004121 ??$_Debug_range2@PAPB_W@std@@YAXPAPB_W0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:00004121
.text$mn:00004121 ; ---------------------------------------------------------------------------
.text$mn:00004122                 align 4
.text$mn:00004122 _text$mn        ends
.text$mn:00004122
.text$mn:00004124 ; ===========================================================================
.text$mn:00004124
.text$mn:00004124 ; Segment type: Pure code
.text$mn:00004124 ; Segment permissions: Read/Execute
.text$mn:00004124 _text$mn        segment para public 'CODE' use32
.text$mn:00004124                 assume cs:_text$mn
.text$mn:00004124                 ;org 4124h
.text$mn:00004124 ; COMDAT (pick any)
.text$mn:00004124                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004124
.text$mn:00004124 ; =============== S U B R O U T I N E =======================================
.text$mn:00004124
.text$mn:00004124 ; Attributes: bp-based frame
.text$mn:00004124
.text$mn:00004124 ; int __cdecl std::_Debug_range<wchar_t const * *>(int, int, wchar_t *, unsigned int)
.text$mn:00004124                 public ??$_Debug_range@PAPB_W@std@@YAXPAPB_W0PB_WI@Z
.text$mn:00004124 ??$_Debug_range@PAPB_W@std@@YAXPAPB_W0PB_WI@Z proc near
.text$mn:00004124                                         ; CODE XREF: std::_Uninit_move<wchar_t const *,wchar_t const *,wchar_t const *>(wchar_t const * *,wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>> &,wchar_t const * *,std::_Scalar_ptr_iterator_tag)+16p
.text$mn:00004124
.text$mn:00004124 var_1           = byte ptr -1
.text$mn:00004124 arg_0           = dword ptr  8
.text$mn:00004124 arg_4           = dword ptr  0Ch
.text$mn:00004124 arg_8           = dword ptr  10h
.text$mn:00004124 arg_C           = dword ptr  14h
.text$mn:00004124
.text$mn:00004124                 push    ebp
.text$mn:00004125                 mov     ebp, esp
.text$mn:00004127                 push    ecx
.text$mn:00004128                 lea     eax, [ebp+arg_0]
.text$mn:0000412B                 push    eax
.text$mn:0000412C                 lea     ecx, [ebp+var_1]
.text$mn:0000412F                 push    ecx
.text$mn:00004130                 call    ??$_Iter_cat@PAPB_W@std@@YA?AUrandom_access_iterator_tag@0@ABQAPB_W@Z ; std::_Iter_cat<wchar_t const * *>(wchar_t const * * const &)
.text$mn:00004135                 add     esp, 8
.text$mn:00004138                 mov     dl, [eax]
.text$mn:0000413A                 movzx   eax, dl
.text$mn:0000413D                 push    eax
.text$mn:0000413E                 mov     ecx, [ebp+arg_C]
.text$mn:00004141                 push    ecx             ; unsigned int
.text$mn:00004142                 mov     edx, [ebp+arg_8]
.text$mn:00004145                 push    edx             ; wchar_t *
.text$mn:00004146                 mov     eax, [ebp+arg_4]
.text$mn:00004149                 push    eax             ; int
.text$mn:0000414A                 mov     ecx, [ebp+arg_0]
.text$mn:0000414D                 push    ecx             ; int
.text$mn:0000414E                 call    ??$_Debug_range2@PAPB_W@std@@YAXPAPB_W0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<wchar_t const * *>(wchar_t const * *,wchar_t const * *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:00004153                 add     esp, 14h
.text$mn:00004156                 mov     esp, ebp
.text$mn:00004158                 pop     ebp
.text$mn:00004159                 retn
.text$mn:00004159 ??$_Debug_range@PAPB_W@std@@YAXPAPB_W0PB_WI@Z endp
.text$mn:00004159
.text$mn:00004159 ; ---------------------------------------------------------------------------
.text$mn:0000415A                 align 4
.text$mn:0000415A _text$mn        ends
.text$mn:0000415A
.text$mn:0000415C ; ===========================================================================
.text$mn:0000415C
.text$mn:0000415C ; Segment type: Pure code
.text$mn:0000415C ; Segment permissions: Read/Execute
.text$mn:0000415C _text$mn        segment para public 'CODE' use32
.text$mn:0000415C                 assume cs:_text$mn
.text$mn:0000415C                 ;org 415Ch
.text$mn:0000415C ; COMDAT (pick any)
.text$mn:0000415C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000415C
.text$mn:0000415C ; =============== S U B R O U T I N E =======================================
.text$mn:0000415C
.text$mn:0000415C ; Attributes: bp-based frame
.text$mn:0000415C
.text$mn:0000415C ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<wchar_t const *>>>(wchar_t const * *, wchar_t const * *, struct std::_Wrap_alloc<class std::allocator<wchar_t const *>> &)
.text$mn:0000415C                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@@std@@YAXPAPB_W0AAU?$_Wrap_alloc@V?$allocator@PB_W@std@@@0@@Z
.text$mn:0000415C ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@@std@@YAXPAPB_W0AAU?$_Wrap_alloc@V?$allocator@PB_W@std@@@0@@Z proc near
.text$mn:0000415C                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Destroy(wchar_t const * *,wchar_t const * *)+21p
.text$mn:0000415C
.text$mn:0000415C var_1           = byte ptr -1
.text$mn:0000415C arg_0           = dword ptr  8
.text$mn:0000415C arg_4           = dword ptr  0Ch
.text$mn:0000415C arg_8           = dword ptr  10h
.text$mn:0000415C
.text$mn:0000415C                 push    ebp
.text$mn:0000415D                 mov     ebp, esp
.text$mn:0000415F                 push    ecx
.text$mn:00004160                 mov     eax, [ebp+arg_4]
.text$mn:00004163                 push    eax
.text$mn:00004164                 mov     ecx, [ebp+arg_0]
.text$mn:00004167                 push    ecx
.text$mn:00004168                 call    ??$_Ptr_cat@PB_WPB_W@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPB_W0@Z ; std::_Ptr_cat<wchar_t const *,wchar_t const *>(wchar_t const * *,wchar_t const * *)
.text$mn:0000416D                 add     esp, 8
.text$mn:00004170                 mov     [ebp+var_1], al
.text$mn:00004173                 movzx   edx, [ebp+var_1]
.text$mn:00004177                 push    edx
.text$mn:00004178                 mov     eax, [ebp+arg_8]
.text$mn:0000417B                 push    eax
.text$mn:0000417C                 mov     ecx, [ebp+arg_4]
.text$mn:0000417F                 push    ecx
.text$mn:00004180                 mov     edx, [ebp+arg_0]
.text$mn:00004183                 push    edx
.text$mn:00004184                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@@std@@YAXPAPB_W0AAU?$_Wrap_alloc@V?$allocator@PB_W@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<wchar_t const *>>>(wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>> &,std::_Scalar_ptr_iterator_tag)
.text$mn:00004189                 add     esp, 10h
.text$mn:0000418C                 mov     esp, ebp
.text$mn:0000418E                 pop     ebp
.text$mn:0000418F                 retn
.text$mn:0000418F ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@@std@@YAXPAPB_W0AAU?$_Wrap_alloc@V?$allocator@PB_W@std@@@0@@Z endp
.text$mn:0000418F
.text$mn:0000418F _text$mn        ends
.text$mn:0000418F
.text$mn:00004190 ; ===========================================================================
.text$mn:00004190
.text$mn:00004190 ; Segment type: Pure code
.text$mn:00004190 ; Segment permissions: Read/Execute
.text$mn:00004190 _text$mn        segment para public 'CODE' use32
.text$mn:00004190                 assume cs:_text$mn
.text$mn:00004190                 ;org 4190h
.text$mn:00004190 ; COMDAT (pick any)
.text$mn:00004190                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004190
.text$mn:00004190 ; =============== S U B R O U T I N E =======================================
.text$mn:00004190
.text$mn:00004190 ; Attributes: bp-based frame
.text$mn:00004190
.text$mn:00004190 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<wchar_t const *>>>(wchar_t const * *, wchar_t const * *, struct std::_Wrap_alloc<class std::allocator<wchar_t const *>> &, struct std::_Scalar_ptr_iterator_tag)
.text$mn:00004190                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@@std@@YAXPAPB_W0AAU?$_Wrap_alloc@V?$allocator@PB_W@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
.text$mn:00004190 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@@std@@YAXPAPB_W0AAU?$_Wrap_alloc@V?$allocator@PB_W@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00004190                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<wchar_t const *>>>(wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>> &)+28p
.text$mn:00004190                 push    ebp
.text$mn:00004191                 mov     ebp, esp
.text$mn:00004193                 pop     ebp
.text$mn:00004194                 retn
.text$mn:00004194 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@@std@@YAXPAPB_W0AAU?$_Wrap_alloc@V?$allocator@PB_W@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z endp
.text$mn:00004194
.text$mn:00004194 ; ---------------------------------------------------------------------------
.text$mn:00004195                 align 4
.text$mn:00004195 _text$mn        ends
.text$mn:00004195
.text$mn:00004198 ; ===========================================================================
.text$mn:00004198
.text$mn:00004198 ; Segment type: Pure code
.text$mn:00004198 ; Segment permissions: Read/Execute
.text$mn:00004198 _text$mn        segment para public 'CODE' use32
.text$mn:00004198                 assume cs:_text$mn
.text$mn:00004198                 ;org 4198h
.text$mn:00004198 ; COMDAT (pick any)
.text$mn:00004198                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004198
.text$mn:00004198 ; =============== S U B R O U T I N E =======================================
.text$mn:00004198
.text$mn:00004198 ; Attributes: bp-based frame
.text$mn:00004198
.text$mn:00004198 ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<wchar_t const * *>(wchar_t const * * const &)
.text$mn:00004198                 public ??$_Iter_cat@PAPB_W@std@@YA?AUrandom_access_iterator_tag@0@ABQAPB_W@Z
.text$mn:00004198 ??$_Iter_cat@PAPB_W@std@@YA?AUrandom_access_iterator_tag@0@ABQAPB_W@Z proc near
.text$mn:00004198                                         ; CODE XREF: std::_Debug_range<wchar_t const * *>(wchar_t const * *,wchar_t const * *,wchar_t const *,uint)+Cp
.text$mn:00004198
.text$mn:00004198 var_1           = byte ptr -1
.text$mn:00004198 arg_0           = dword ptr  8
.text$mn:00004198
.text$mn:00004198                 push    ebp
.text$mn:00004199                 mov     ebp, esp
.text$mn:0000419B                 push    ecx
.text$mn:0000419C                 mov     eax, [ebp+arg_0]
.text$mn:0000419F                 mov     cl, [ebp+var_1]
.text$mn:000041A2                 mov     [eax], cl
.text$mn:000041A4                 mov     eax, [ebp+arg_0]
.text$mn:000041A7                 mov     esp, ebp
.text$mn:000041A9                 pop     ebp
.text$mn:000041AA                 retn
.text$mn:000041AA ??$_Iter_cat@PAPB_W@std@@YA?AUrandom_access_iterator_tag@0@ABQAPB_W@Z endp
.text$mn:000041AA
.text$mn:000041AA ; ---------------------------------------------------------------------------
.text$mn:000041AB                 align 4
.text$mn:000041AB _text$mn        ends
.text$mn:000041AB
.text$mn:000041AC ; ===========================================================================
.text$mn:000041AC
.text$mn:000041AC ; Segment type: Pure code
.text$mn:000041AC ; Segment permissions: Read/Execute
.text$mn:000041AC _text$mn        segment para public 'CODE' use32
.text$mn:000041AC                 assume cs:_text$mn
.text$mn:000041AC                 ;org 41ACh
.text$mn:000041AC ; COMDAT (pick any)
.text$mn:000041AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000041AC
.text$mn:000041AC ; =============== S U B R O U T I N E =======================================
.text$mn:000041AC
.text$mn:000041AC ; Attributes: bp-based frame
.text$mn:000041AC
.text$mn:000041AC ; int __cdecl std::_Move<wchar_t const * *,wchar_t const * *>(void *Src, int, void *Dst)
.text$mn:000041AC                 public ??$_Move@PAPB_WPAPB_W@std@@YAPAPB_WPAPB_W00@Z
.text$mn:000041AC ??$_Move@PAPB_WPAPB_W@std@@YAPAPB_WPAPB_W00@Z proc near
.text$mn:000041AC                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>)+82p
.text$mn:000041AC
.text$mn:000041AC var_1           = byte ptr -1
.text$mn:000041AC Src             = dword ptr  8
.text$mn:000041AC arg_4           = dword ptr  0Ch
.text$mn:000041AC Dst             = dword ptr  10h
.text$mn:000041AC
.text$mn:000041AC                 push    ebp
.text$mn:000041AD                 mov     ebp, esp
.text$mn:000041AF                 push    ecx
.text$mn:000041B0                 mov     eax, [ebp+Dst]
.text$mn:000041B3                 push    eax
.text$mn:000041B4                 mov     ecx, [ebp+Src]
.text$mn:000041B7                 push    ecx
.text$mn:000041B8                 call    ??$_Ptr_cat@PB_WPB_W@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPB_W0@Z ; std::_Ptr_cat<wchar_t const *,wchar_t const *>(wchar_t const * *,wchar_t const * *)
.text$mn:000041BD                 add     esp, 8
.text$mn:000041C0                 mov     [ebp+var_1], al
.text$mn:000041C3                 movzx   edx, [ebp+var_1]
.text$mn:000041C7                 push    edx
.text$mn:000041C8                 mov     eax, [ebp+Dst]
.text$mn:000041CB                 push    eax             ; Dst
.text$mn:000041CC                 mov     ecx, [ebp+arg_4]
.text$mn:000041CF                 push    ecx             ; int
.text$mn:000041D0                 mov     edx, [ebp+Src]
.text$mn:000041D3                 push    edx             ; Src
.text$mn:000041D4                 call    ??$_Move@PAPB_WPAPB_W@std@@YAPAPB_WPAPB_W00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Move<wchar_t const * *,wchar_t const * *>(wchar_t const * *,wchar_t const * *,wchar_t const * *,std::_Scalar_ptr_iterator_tag)
.text$mn:000041D9                 add     esp, 10h
.text$mn:000041DC                 mov     esp, ebp
.text$mn:000041DE                 pop     ebp
.text$mn:000041DF                 retn
.text$mn:000041DF ??$_Move@PAPB_WPAPB_W@std@@YAPAPB_WPAPB_W00@Z endp
.text$mn:000041DF
.text$mn:000041DF _text$mn        ends
.text$mn:000041DF
.text$mn:000041E0 ; ===========================================================================
.text$mn:000041E0
.text$mn:000041E0 ; Segment type: Pure code
.text$mn:000041E0 ; Segment permissions: Read/Execute
.text$mn:000041E0 _text$mn        segment para public 'CODE' use32
.text$mn:000041E0                 assume cs:_text$mn
.text$mn:000041E0                 ;org 41E0h
.text$mn:000041E0 ; COMDAT (pick any)
.text$mn:000041E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000041E0
.text$mn:000041E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000041E0
.text$mn:000041E0 ; Attributes: bp-based frame
.text$mn:000041E0
.text$mn:000041E0 ; int __cdecl std::_Move<wchar_t const * *,wchar_t const * *>(void *Src, int, void *Dst)
.text$mn:000041E0                 public ??$_Move@PAPB_WPAPB_W@std@@YAPAPB_WPAPB_W00U_Scalar_ptr_iterator_tag@0@@Z
.text$mn:000041E0 ??$_Move@PAPB_WPAPB_W@std@@YAPAPB_WPAPB_W00U_Scalar_ptr_iterator_tag@0@@Z proc near
.text$mn:000041E0                                         ; CODE XREF: std::_Move<wchar_t const * *,wchar_t const * *>(wchar_t const * *,wchar_t const * *,wchar_t const * *)+28p
.text$mn:000041E0
.text$mn:000041E0 var_4           = dword ptr -4
.text$mn:000041E0 Src             = dword ptr  8
.text$mn:000041E0 arg_4           = dword ptr  0Ch
.text$mn:000041E0 Dst             = dword ptr  10h
.text$mn:000041E0
.text$mn:000041E0                 push    ebp
.text$mn:000041E1                 mov     ebp, esp
.text$mn:000041E3                 push    ecx
.text$mn:000041E4                 mov     eax, [ebp+arg_4]
.text$mn:000041E7                 sub     eax, [ebp+Src]
.text$mn:000041EA                 sar     eax, 2
.text$mn:000041ED                 mov     [ebp+var_4], eax
.text$mn:000041F0                 mov     ecx, [ebp+var_4]
.text$mn:000041F3                 shl     ecx, 2
.text$mn:000041F6                 push    ecx             ; Size
.text$mn:000041F7                 mov     edx, [ebp+Src]
.text$mn:000041FA                 push    edx             ; Src
.text$mn:000041FB                 mov     eax, [ebp+Dst]
.text$mn:000041FE                 push    eax             ; Dst
.text$mn:000041FF                 call    _memmove
.text$mn:00004204                 add     esp, 0Ch
.text$mn:00004207                 mov     ecx, [ebp+var_4]
.text$mn:0000420A                 mov     edx, [ebp+Dst]
.text$mn:0000420D                 lea     eax, [edx+ecx*4]
.text$mn:00004210                 mov     esp, ebp
.text$mn:00004212                 pop     ebp
.text$mn:00004213                 retn
.text$mn:00004213 ??$_Move@PAPB_WPAPB_W@std@@YAPAPB_WPAPB_W00U_Scalar_ptr_iterator_tag@0@@Z endp
.text$mn:00004213
.text$mn:00004213 _text$mn        ends
.text$mn:00004213
.text$mn:00004214 ; ===========================================================================
.text$mn:00004214
.text$mn:00004214 ; Segment type: Pure code
.text$mn:00004214 ; Segment permissions: Read/Execute
.text$mn:00004214 _text$mn        segment para public 'CODE' use32
.text$mn:00004214                 assume cs:_text$mn
.text$mn:00004214                 ;org 4214h
.text$mn:00004214 ; COMDAT (pick any)
.text$mn:00004214                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004214
.text$mn:00004214 ; =============== S U B R O U T I N E =======================================
.text$mn:00004214
.text$mn:00004214 ; Attributes: bp-based frame
.text$mn:00004214
.text$mn:00004214 ; struct std::_Scalar_ptr_iterator_tag __cdecl std::_Ptr_cat<wchar_t const *, wchar_t const *>(wchar_t const * *, wchar_t const * *)
.text$mn:00004214                 public ??$_Ptr_cat@PB_WPB_W@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPB_W0@Z
.text$mn:00004214 ??$_Ptr_cat@PB_WPB_W@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPB_W0@Z proc near
.text$mn:00004214                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<wchar_t const *>>>(wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>> &)+Cp
.text$mn:00004214                                         ; std::_Move<wchar_t const * *,wchar_t const * *>(wchar_t const * *,wchar_t const * *,wchar_t const * *)+Cp ...
.text$mn:00004214
.text$mn:00004214 var_1           = byte ptr -1
.text$mn:00004214
.text$mn:00004214                 push    ebp
.text$mn:00004215                 mov     ebp, esp
.text$mn:00004217                 push    ecx
.text$mn:00004218                 mov     al, [ebp+var_1]
.text$mn:0000421B                 mov     esp, ebp
.text$mn:0000421D                 pop     ebp
.text$mn:0000421E                 retn
.text$mn:0000421E ??$_Ptr_cat@PB_WPB_W@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPB_W0@Z endp
.text$mn:0000421E
.text$mn:0000421E ; ---------------------------------------------------------------------------
.text$mn:0000421F                 align 10h
.text$mn:0000421F _text$mn        ends
.text$mn:0000421F
.text$mn:00004220 ; ===========================================================================
.text$mn:00004220
.text$mn:00004220 ; Segment type: Pure code
.text$mn:00004220 ; Segment permissions: Read/Execute
.text$mn:00004220 _text$mn        segment para public 'CODE' use32
.text$mn:00004220                 assume cs:_text$mn
.text$mn:00004220                 ;org 4220h
.text$mn:00004220 ; COMDAT (pick any)
.text$mn:00004220                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004220
.text$mn:00004220 ; =============== S U B R O U T I N E =======================================
.text$mn:00004220
.text$mn:00004220 ; Attributes: bp-based frame
.text$mn:00004220
.text$mn:00004220 ; wchar_t const * * & __cdecl std::_Rechecked<wchar_t const * *, wchar_t const * *>(wchar_t const * * &, wchar_t const * *)
.text$mn:00004220                 public ??$_Rechecked@PAPB_WPAPB_W@std@@YAAAPAPB_WAAPAPB_WPAPB_W@Z
.text$mn:00004220 ??$_Rechecked@PAPB_WPAPB_W@std@@YAAAPAPB_WAAPAPB_WPAPB_W@Z proc near
.text$mn:00004220                                         ; CODE XREF: std::_Uninitialized_move<wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>>>(wchar_t const * *,wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>> &)+3Bp
.text$mn:00004220
.text$mn:00004220 arg_0           = dword ptr  8
.text$mn:00004220 arg_4           = dword ptr  0Ch
.text$mn:00004220
.text$mn:00004220                 push    ebp
.text$mn:00004221                 mov     ebp, esp
.text$mn:00004223                 mov     eax, [ebp+arg_0]
.text$mn:00004226                 mov     ecx, [ebp+arg_4]
.text$mn:00004229                 mov     [eax], ecx
.text$mn:0000422B                 mov     eax, [ebp+arg_0]
.text$mn:0000422E                 pop     ebp
.text$mn:0000422F                 retn
.text$mn:0000422F ??$_Rechecked@PAPB_WPAPB_W@std@@YAAAPAPB_WAAPAPB_WPAPB_W@Z endp
.text$mn:0000422F
.text$mn:0000422F _text$mn        ends
.text$mn:0000422F
.text$mn:00004230 ; ===========================================================================
.text$mn:00004230
.text$mn:00004230 ; Segment type: Pure code
.text$mn:00004230 ; Segment permissions: Read/Execute
.text$mn:00004230 _text$mn        segment para public 'CODE' use32
.text$mn:00004230                 assume cs:_text$mn
.text$mn:00004230                 ;org 4230h
.text$mn:00004230 ; COMDAT (pick any)
.text$mn:00004230                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004230
.text$mn:00004230 ; =============== S U B R O U T I N E =======================================
.text$mn:00004230
.text$mn:00004230 ; Attributes: bp-based frame
.text$mn:00004230
.text$mn:00004230 ; protected: wchar_t const * * __thiscall std::vector<wchar_t const *, class std::allocator<wchar_t const *>>::_Umove<wchar_t const * *>(wchar_t const * *, wchar_t const * *, wchar_t const * *)
.text$mn:00004230                 public ??$_Umove@PAPB_W@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEPAPB_WPAPB_W00@Z
.text$mn:00004230 ??$_Umove@PAPB_W@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEPAPB_WPAPB_W00@Z proc near
.text$mn:00004230                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Reallocate(uint)+65p
.text$mn:00004230
.text$mn:00004230 var_8           = dword ptr -8
.text$mn:00004230 var_1           = byte ptr -1
.text$mn:00004230 arg_0           = dword ptr  8
.text$mn:00004230 arg_4           = dword ptr  0Ch
.text$mn:00004230 arg_8           = dword ptr  10h
.text$mn:00004230
.text$mn:00004230                 push    ebp
.text$mn:00004231                 mov     ebp, esp
.text$mn:00004233                 sub     esp, 8
.text$mn:00004236                 mov     [ebp+var_8], ecx
.text$mn:00004239                 lea     eax, [ebp+var_1]
.text$mn:0000423C                 push    eax
.text$mn:0000423D                 mov     ecx, [ebp+var_8]
.text$mn:00004240                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PB_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Getal(void)
.text$mn:00004245                 lea     ecx, [ebp+var_1]
.text$mn:00004248                 push    ecx
.text$mn:00004249                 mov     edx, [ebp+arg_8]
.text$mn:0000424C                 push    edx
.text$mn:0000424D                 mov     eax, [ebp+arg_4]
.text$mn:00004250                 push    eax
.text$mn:00004251                 mov     ecx, [ebp+arg_0]
.text$mn:00004254                 push    ecx
.text$mn:00004255                 call    ??$_Uninitialized_move@PAPB_WPAPB_WU?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@@std@@YAPAPB_WPAPB_W00AAU?$_Wrap_alloc@V?$allocator@PB_W@std@@@0@@Z ; std::_Uninitialized_move<wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>>>(wchar_t const * *,wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>> &)
.text$mn:0000425A                 add     esp, 10h
.text$mn:0000425D                 mov     esp, ebp
.text$mn:0000425F                 pop     ebp
.text$mn:00004260                 retn    0Ch
.text$mn:00004260 ??$_Umove@PAPB_W@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEPAPB_WPAPB_W00@Z endp
.text$mn:00004260
.text$mn:00004260 ; ---------------------------------------------------------------------------
.text$mn:00004263                 align 4
.text$mn:00004263 _text$mn        ends
.text$mn:00004263
.text$mn:00004264 ; ===========================================================================
.text$mn:00004264
.text$mn:00004264 ; Segment type: Pure code
.text$mn:00004264 ; Segment permissions: Read/Execute
.text$mn:00004264 _text$mn        segment para public 'CODE' use32
.text$mn:00004264                 assume cs:_text$mn
.text$mn:00004264                 ;org 4264h
.text$mn:00004264 ; COMDAT (pick any)
.text$mn:00004264                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004264
.text$mn:00004264 ; =============== S U B R O U T I N E =======================================
.text$mn:00004264
.text$mn:00004264 ; Attributes: bp-based frame
.text$mn:00004264
.text$mn:00004264 ; wchar_t const * * __cdecl std::_Unchecked<wchar_t const * *>(wchar_t const * *)
.text$mn:00004264                 public ??$_Unchecked@PAPB_W@std@@YAPAPB_WPAPB_W@Z
.text$mn:00004264 ??$_Unchecked@PAPB_W@std@@YAPAPB_WPAPB_W@Z proc near
.text$mn:00004264                                         ; CODE XREF: std::_Uninitialized_move<wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>>>(wchar_t const * *,wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>> &)+Bp
.text$mn:00004264                                         ; std::_Uninitialized_move<wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>>>(wchar_t const * *,wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>> &)+18p ...
.text$mn:00004264
.text$mn:00004264 arg_0           = dword ptr  8
.text$mn:00004264
.text$mn:00004264                 push    ebp
.text$mn:00004265                 mov     ebp, esp
.text$mn:00004267                 mov     eax, [ebp+arg_0]
.text$mn:0000426A                 pop     ebp
.text$mn:0000426B                 retn
.text$mn:0000426B ??$_Unchecked@PAPB_W@std@@YAPAPB_WPAPB_W@Z endp
.text$mn:0000426B
.text$mn:0000426B _text$mn        ends
.text$mn:0000426B
.text$mn:0000426C ; ===========================================================================
.text$mn:0000426C
.text$mn:0000426C ; Segment type: Pure code
.text$mn:0000426C ; Segment permissions: Read/Execute
.text$mn:0000426C _text$mn        segment para public 'CODE' use32
.text$mn:0000426C                 assume cs:_text$mn
.text$mn:0000426C                 ;org 426Ch
.text$mn:0000426C ; COMDAT (pick any)
.text$mn:0000426C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000426C
.text$mn:0000426C ; =============== S U B R O U T I N E =======================================
.text$mn:0000426C
.text$mn:0000426C ; Attributes: bp-based frame
.text$mn:0000426C
.text$mn:0000426C ; int __cdecl std::_Uninit_move<wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>>>(void *Src, int, void *Dst, int)
.text$mn:0000426C                 public ??$_Uninit_move@PAPB_WPAPB_WU?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@@std@@YAPAPB_WPAPB_W00AAU?$_Wrap_alloc@V?$allocator@PB_W@std@@@0@@Z
.text$mn:0000426C ??$_Uninit_move@PAPB_WPAPB_WU?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@@std@@YAPAPB_WPAPB_W00AAU?$_Wrap_alloc@V?$allocator@PB_W@std@@@0@@Z proc near
.text$mn:0000426C                                         ; CODE XREF: std::_Uninitialized_move<wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>>>(wchar_t const * *,wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>> &)+2Ep
.text$mn:0000426C
.text$mn:0000426C var_1           = byte ptr -1
.text$mn:0000426C Src             = dword ptr  8
.text$mn:0000426C arg_4           = dword ptr  0Ch
.text$mn:0000426C Dst             = dword ptr  10h
.text$mn:0000426C arg_C           = dword ptr  14h
.text$mn:0000426C
.text$mn:0000426C                 push    ebp
.text$mn:0000426D                 mov     ebp, esp
.text$mn:0000426F                 push    ecx
.text$mn:00004270                 mov     eax, [ebp+Dst]
.text$mn:00004273                 push    eax
.text$mn:00004274                 mov     ecx, [ebp+Src]
.text$mn:00004277                 push    ecx
.text$mn:00004278                 call    ??$_Ptr_cat@PB_WPB_W@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPB_W0@Z ; std::_Ptr_cat<wchar_t const *,wchar_t const *>(wchar_t const * *,wchar_t const * *)
.text$mn:0000427D                 add     esp, 8
.text$mn:00004280                 mov     [ebp+var_1], al
.text$mn:00004283                 movzx   edx, [ebp+var_1]
.text$mn:00004287                 push    edx
.text$mn:00004288                 mov     eax, [ebp+Src]
.text$mn:0000428B                 push    eax
.text$mn:0000428C                 call    ??$_Val_type@PAPB_W@std@@YAPAPB_WPAPB_W@Z ; std::_Val_type<wchar_t const * *>(wchar_t const * *)
.text$mn:00004291                 add     esp, 4
.text$mn:00004294                 push    eax
.text$mn:00004295                 mov     ecx, [ebp+arg_C]
.text$mn:00004298                 push    ecx
.text$mn:00004299                 mov     edx, [ebp+Dst]
.text$mn:0000429C                 push    edx             ; Dst
.text$mn:0000429D                 mov     eax, [ebp+arg_4]
.text$mn:000042A0                 push    eax             ; int
.text$mn:000042A1                 mov     ecx, [ebp+Src]
.text$mn:000042A4                 push    ecx             ; Src
.text$mn:000042A5                 call    ??$_Uninit_move@PB_WPB_WPB_W@std@@YAPAPB_WPAPB_W00AAU?$_Wrap_alloc@V?$allocator@PB_W@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<wchar_t const *,wchar_t const *,wchar_t const *>(wchar_t const * *,wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>> &,wchar_t const * *,std::_Scalar_ptr_iterator_tag)
.text$mn:000042AA                 add     esp, 18h
.text$mn:000042AD                 mov     esp, ebp
.text$mn:000042AF                 pop     ebp
.text$mn:000042B0                 retn
.text$mn:000042B0 ??$_Uninit_move@PAPB_WPAPB_WU?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@@std@@YAPAPB_WPAPB_W00AAU?$_Wrap_alloc@V?$allocator@PB_W@std@@@0@@Z endp
.text$mn:000042B0
.text$mn:000042B0 ; ---------------------------------------------------------------------------
.text$mn:000042B1                 align 4
.text$mn:000042B1 _text$mn        ends
.text$mn:000042B1
.text$mn:000042B4 ; ===========================================================================
.text$mn:000042B4
.text$mn:000042B4 ; Segment type: Pure code
.text$mn:000042B4 ; Segment permissions: Read/Execute
.text$mn:000042B4 _text$mn        segment para public 'CODE' use32
.text$mn:000042B4                 assume cs:_text$mn
.text$mn:000042B4                 ;org 42B4h
.text$mn:000042B4 ; COMDAT (pick any)
.text$mn:000042B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042B4
.text$mn:000042B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000042B4
.text$mn:000042B4 ; Attributes: bp-based frame
.text$mn:000042B4
.text$mn:000042B4 ; int __cdecl std::_Uninit_move<wchar_t const *,wchar_t const *,wchar_t const *>(void *Src, int, void *Dst)
.text$mn:000042B4                 public ??$_Uninit_move@PB_WPB_WPB_W@std@@YAPAPB_WPAPB_W00AAU?$_Wrap_alloc@V?$allocator@PB_W@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
.text$mn:000042B4 ??$_Uninit_move@PB_WPB_WPB_W@std@@YAPAPB_WPAPB_W00AAU?$_Wrap_alloc@V?$allocator@PB_W@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z proc near
.text$mn:000042B4                                         ; CODE XREF: std::_Uninit_move<wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>>>(wchar_t const * *,wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>> &)+39p
.text$mn:000042B4
.text$mn:000042B4 var_4           = dword ptr -4
.text$mn:000042B4 Src             = dword ptr  8
.text$mn:000042B4 arg_4           = dword ptr  0Ch
.text$mn:000042B4 Dst             = dword ptr  10h
.text$mn:000042B4
.text$mn:000042B4                 push    ebp
.text$mn:000042B5                 mov     ebp, esp
.text$mn:000042B7                 push    ecx
.text$mn:000042B8                 push    1D6h            ; unsigned int
.text$mn:000042BD                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000042C2                 mov     eax, [ebp+arg_4]
.text$mn:000042C5                 push    eax             ; int
.text$mn:000042C6                 mov     ecx, [ebp+Src]
.text$mn:000042C9                 push    ecx             ; int
.text$mn:000042CA                 call    ??$_Debug_range@PAPB_W@std@@YAXPAPB_W0PB_WI@Z ; std::_Debug_range<wchar_t const * *>(wchar_t const * *,wchar_t const * *,wchar_t const *,uint)
.text$mn:000042CF                 add     esp, 10h
.text$mn:000042D2                 push    1D7h            ; unsigned int
.text$mn:000042D7                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000042DC                 mov     edx, [ebp+Dst]
.text$mn:000042DF                 push    edx             ; int
.text$mn:000042E0                 call    ??$_Debug_pointer@PB_W@std@@YAXPAPB_WPB_WI@Z ; std::_Debug_pointer<wchar_t const *>(wchar_t const * *,wchar_t const *,uint)
.text$mn:000042E5                 add     esp, 0Ch
.text$mn:000042E8                 mov     eax, [ebp+arg_4]
.text$mn:000042EB                 sub     eax, [ebp+Src]
.text$mn:000042EE                 sar     eax, 2
.text$mn:000042F1                 mov     [ebp+var_4], eax
.text$mn:000042F4                 mov     ecx, [ebp+var_4]
.text$mn:000042F7                 shl     ecx, 2
.text$mn:000042FA                 push    ecx             ; Size
.text$mn:000042FB                 mov     edx, [ebp+Src]
.text$mn:000042FE                 push    edx             ; Src
.text$mn:000042FF                 mov     eax, [ebp+Dst]
.text$mn:00004302                 push    eax             ; Dst
.text$mn:00004303                 call    _memmove
.text$mn:00004308                 add     esp, 0Ch
.text$mn:0000430B                 mov     ecx, [ebp+var_4]
.text$mn:0000430E                 lea     eax, [eax+ecx*4]
.text$mn:00004311                 mov     esp, ebp
.text$mn:00004313                 pop     ebp
.text$mn:00004314                 retn
.text$mn:00004314 ??$_Uninit_move@PB_WPB_WPB_W@std@@YAPAPB_WPAPB_W00AAU?$_Wrap_alloc@V?$allocator@PB_W@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z endp
.text$mn:00004314
.text$mn:00004314 ; ---------------------------------------------------------------------------
.text$mn:00004315                 align 4
.text$mn:00004315 _text$mn        ends
.text$mn:00004315
.text$mn:00004318 ; ===========================================================================
.text$mn:00004318
.text$mn:00004318 ; Segment type: Pure code
.text$mn:00004318 ; Segment permissions: Read/Execute
.text$mn:00004318 _text$mn        segment para public 'CODE' use32
.text$mn:00004318                 assume cs:_text$mn
.text$mn:00004318                 ;org 4318h
.text$mn:00004318 ; COMDAT (pick any)
.text$mn:00004318                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004318
.text$mn:00004318 ; =============== S U B R O U T I N E =======================================
.text$mn:00004318
.text$mn:00004318 ; Attributes: bp-based frame
.text$mn:00004318
.text$mn:00004318 ; wchar_t const * * __cdecl std::_Uninitialized_move<wchar_t const * *, wchar_t const * *, struct std::_Wrap_alloc<class std::allocator<wchar_t const *>>>(wchar_t const * *, wchar_t const * *, wchar_t const * *, struct std::_Wrap_alloc<class std::allocator<wchar_t const *>> &)
.text$mn:00004318                 public ??$_Uninitialized_move@PAPB_WPAPB_WU?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@@std@@YAPAPB_WPAPB_W00AAU?$_Wrap_alloc@V?$allocator@PB_W@std@@@0@@Z
.text$mn:00004318 ??$_Uninitialized_move@PAPB_WPAPB_WU?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@@std@@YAPAPB_WPAPB_W00AAU?$_Wrap_alloc@V?$allocator@PB_W@std@@@0@@Z proc near
.text$mn:00004318                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Umove<wchar_t const * *>(wchar_t const * *,wchar_t const * *,wchar_t const * *)+25p
.text$mn:00004318
.text$mn:00004318 arg_0           = dword ptr  8
.text$mn:00004318 arg_4           = dword ptr  0Ch
.text$mn:00004318 arg_8           = dword ptr  10h
.text$mn:00004318 arg_C           = dword ptr  14h
.text$mn:00004318
.text$mn:00004318                 push    ebp
.text$mn:00004319                 mov     ebp, esp
.text$mn:0000431B                 mov     eax, [ebp+arg_C]
.text$mn:0000431E                 push    eax             ; int
.text$mn:0000431F                 mov     ecx, [ebp+arg_8]
.text$mn:00004322                 push    ecx
.text$mn:00004323                 call    ??$_Unchecked@PAPB_W@std@@YAPAPB_WPAPB_W@Z ; std::_Unchecked<wchar_t const * *>(wchar_t const * *)
.text$mn:00004328                 add     esp, 4
.text$mn:0000432B                 push    eax             ; Dst
.text$mn:0000432C                 mov     edx, [ebp+arg_4]
.text$mn:0000432F                 push    edx
.text$mn:00004330                 call    ??$_Unchecked@PAPB_W@std@@YAPAPB_WPAPB_W@Z ; std::_Unchecked<wchar_t const * *>(wchar_t const * *)
.text$mn:00004335                 add     esp, 4
.text$mn:00004338                 push    eax             ; int
.text$mn:00004339                 mov     eax, [ebp+arg_0]
.text$mn:0000433C                 push    eax
.text$mn:0000433D                 call    ??$_Unchecked@PAPB_W@std@@YAPAPB_WPAPB_W@Z ; std::_Unchecked<wchar_t const * *>(wchar_t const * *)
.text$mn:00004342                 add     esp, 4
.text$mn:00004345                 push    eax             ; Src
.text$mn:00004346                 call    ??$_Uninit_move@PAPB_WPAPB_WU?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@@std@@YAPAPB_WPAPB_W00AAU?$_Wrap_alloc@V?$allocator@PB_W@std@@@0@@Z ; std::_Uninit_move<wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>>>(wchar_t const * *,wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>> &)
.text$mn:0000434B                 add     esp, 10h
.text$mn:0000434E                 push    eax
.text$mn:0000434F                 lea     ecx, [ebp+arg_8]
.text$mn:00004352                 push    ecx
.text$mn:00004353                 call    ??$_Rechecked@PAPB_WPAPB_W@std@@YAAAPAPB_WAAPAPB_WPAPB_W@Z ; std::_Rechecked<wchar_t const * *,wchar_t const * *>(wchar_t const * * &,wchar_t const * *)
.text$mn:00004358                 add     esp, 8
.text$mn:0000435B                 mov     eax, [eax]
.text$mn:0000435D                 pop     ebp
.text$mn:0000435E                 retn
.text$mn:0000435E ??$_Uninitialized_move@PAPB_WPAPB_WU?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@@std@@YAPAPB_WPAPB_W00AAU?$_Wrap_alloc@V?$allocator@PB_W@std@@@0@@Z endp
.text$mn:0000435E
.text$mn:0000435E ; ---------------------------------------------------------------------------
.text$mn:0000435F                 align 10h
.text$mn:0000435F _text$mn        ends
.text$mn:0000435F
.text$mn:00004360 ; ===========================================================================
.text$mn:00004360
.text$mn:00004360 ; Segment type: Pure code
.text$mn:00004360 ; Segment permissions: Read/Execute
.text$mn:00004360 _text$mn        segment para public 'CODE' use32
.text$mn:00004360                 assume cs:_text$mn
.text$mn:00004360                 ;org 4360h
.text$mn:00004360 ; COMDAT (pick any)
.text$mn:00004360                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004360
.text$mn:00004360 ; =============== S U B R O U T I N E =======================================
.text$mn:00004360
.text$mn:00004360 ; Attributes: bp-based frame
.text$mn:00004360
.text$mn:00004360 ; wchar_t const * * __cdecl std::_Val_type<wchar_t const * *>(wchar_t const * *)
.text$mn:00004360                 public ??$_Val_type@PAPB_W@std@@YAPAPB_WPAPB_W@Z
.text$mn:00004360 ??$_Val_type@PAPB_W@std@@YAPAPB_WPAPB_W@Z proc near
.text$mn:00004360                                         ; CODE XREF: std::_Uninit_move<wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>>>(wchar_t const * *,wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>> &)+20p
.text$mn:00004360                 push    ebp
.text$mn:00004361                 mov     ebp, esp
.text$mn:00004363                 xor     eax, eax
.text$mn:00004365                 pop     ebp
.text$mn:00004366                 retn
.text$mn:00004366 ??$_Val_type@PAPB_W@std@@YAPAPB_WPAPB_W@Z endp
.text$mn:00004366
.text$mn:00004366 ; ---------------------------------------------------------------------------
.text$mn:00004367                 align 4
.text$mn:00004367 _text$mn        ends
.text$mn:00004367
.text$mn:00004368 ; ===========================================================================
.text$mn:00004368
.text$mn:00004368 ; Segment type: Pure code
.text$mn:00004368 ; Segment permissions: Read/Execute
.text$mn:00004368 _text$mn        segment para public 'CODE' use32
.text$mn:00004368                 assume cs:_text$mn
.text$mn:00004368                 ;org 4368h
.text$mn:00004368 ; COMDAT (pick any)
.text$mn:00004368                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004368
.text$mn:00004368 ; =============== S U B R O U T I N E =======================================
.text$mn:00004368
.text$mn:00004368 ; Attributes: bp-based frame
.text$mn:00004368
.text$mn:00004368 ; char * __cdecl std::addressof<char>(char &)
.text$mn:00004368                 public ??$addressof@D@std@@YAPADAAD@Z
.text$mn:00004368 ??$addressof@D@std@@YAPADAAD@Z proc near
.text$mn:00004368                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p
.text$mn:00004368                                         ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p ...
.text$mn:00004368
.text$mn:00004368 arg_0           = dword ptr  8
.text$mn:00004368
.text$mn:00004368                 push    ebp
.text$mn:00004369                 mov     ebp, esp
.text$mn:0000436B                 mov     eax, [ebp+arg_0]
.text$mn:0000436E                 pop     ebp
.text$mn:0000436F                 retn
.text$mn:0000436F ??$addressof@D@std@@YAPADAAD@Z endp
.text$mn:0000436F
.text$mn:0000436F _text$mn        ends
.text$mn:0000436F
.text$mn:00004370 ; ===========================================================================
.text$mn:00004370
.text$mn:00004370 ; Segment type: Pure code
.text$mn:00004370 ; Segment permissions: Read/Execute
.text$mn:00004370 _text$mn        segment para public 'CODE' use32
.text$mn:00004370                 assume cs:_text$mn
.text$mn:00004370                 ;org 4370h
.text$mn:00004370 ; COMDAT (pick any)
.text$mn:00004370                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004370
.text$mn:00004370 ; =============== S U B R O U T I N E =======================================
.text$mn:00004370
.text$mn:00004370 ; Attributes: bp-based frame
.text$mn:00004370
.text$mn:00004370 ; wchar_t const * * __cdecl std::addressof<wchar_t const *>(wchar_t const * &)
.text$mn:00004370                 public ??$addressof@PB_W@std@@YAPAPB_WAAPB_W@Z
.text$mn:00004370 ??$addressof@PB_W@std@@YAPAPB_WAAPB_W@Z proc near
.text$mn:00004370                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * &&)+Dp
.text$mn:00004370                                         ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * &&)+2Dp
.text$mn:00004370
.text$mn:00004370 arg_0           = dword ptr  8
.text$mn:00004370
.text$mn:00004370                 push    ebp
.text$mn:00004371                 mov     ebp, esp
.text$mn:00004373                 mov     eax, [ebp+arg_0]
.text$mn:00004376                 pop     ebp
.text$mn:00004377                 retn
.text$mn:00004377 ??$addressof@PB_W@std@@YAPAPB_WAAPB_W@Z endp
.text$mn:00004377
.text$mn:00004377 _text$mn        ends
.text$mn:00004377
.text$mn:00004378 ; ===========================================================================
.text$mn:00004378
.text$mn:00004378 ; Segment type: Pure code
.text$mn:00004378 ; Segment permissions: Read/Execute
.text$mn:00004378 _text$mn        segment para public 'CODE' use32
.text$mn:00004378                 assume cs:_text$mn
.text$mn:00004378                 ;org 4378h
.text$mn:00004378 ; COMDAT (pick any)
.text$mn:00004378                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004378
.text$mn:00004378 ; =============== S U B R O U T I N E =======================================
.text$mn:00004378
.text$mn:00004378 ; Attributes: bp-based frame
.text$mn:00004378
.text$mn:00004378 ; wchar_t const * const * __cdecl std::addressof<wchar_t const * const>(wchar_t const * const &)
.text$mn:00004378                 public ??$addressof@QB_W@std@@YAPBQB_WABQB_W@Z
.text$mn:00004378 ??$addressof@QB_W@std@@YAPBQB_WABQB_W@Z proc near
.text$mn:00004378                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * const &)+Dp
.text$mn:00004378                                         ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * const &)+29p
.text$mn:00004378
.text$mn:00004378 arg_0           = dword ptr  8
.text$mn:00004378
.text$mn:00004378                 push    ebp
.text$mn:00004379                 mov     ebp, esp
.text$mn:0000437B                 mov     eax, [ebp+arg_0]
.text$mn:0000437E                 pop     ebp
.text$mn:0000437F                 retn
.text$mn:0000437F ??$addressof@QB_W@std@@YAPBQB_WABQB_W@Z endp
.text$mn:0000437F
.text$mn:0000437F _text$mn        ends
.text$mn:0000437F
.text$mn:00004380 ; ===========================================================================
.text$mn:00004380
.text$mn:00004380 ; Segment type: Pure code
.text$mn:00004380 ; Segment permissions: Read/Execute
.text$mn:00004380 _text$mn        segment para public 'CODE' use32
.text$mn:00004380                 assume cs:_text$mn
.text$mn:00004380                 ;org 4380h
.text$mn:00004380 ; COMDAT (pick any)
.text$mn:00004380                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004380
.text$mn:00004380 ; =============== S U B R O U T I N E =======================================
.text$mn:00004380
.text$mn:00004380 ; Attributes: bp-based frame
.text$mn:00004380
.text$mn:00004380 ; wchar_t * __cdecl std::addressof<wchar_t>(wchar_t &)
.text$mn:00004380                 public ??$addressof@_W@std@@YAPA_WAA_W@Z
.text$mn:00004380 ??$addressof@_W@std@@YAPA_WAA_W@Z proc near
.text$mn:00004380                                         ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p
.text$mn:00004380                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p ...
.text$mn:00004380
.text$mn:00004380 arg_0           = dword ptr  8
.text$mn:00004380
.text$mn:00004380                 push    ebp
.text$mn:00004381                 mov     ebp, esp
.text$mn:00004383                 mov     eax, [ebp+arg_0]
.text$mn:00004386                 pop     ebp
.text$mn:00004387                 retn
.text$mn:00004387 ??$addressof@_W@std@@YAPA_WAA_W@Z endp
.text$mn:00004387
.text$mn:00004387 _text$mn        ends
.text$mn:00004387
.text$mn:00004388 ; ===========================================================================
.text$mn:00004388
.text$mn:00004388 ; Segment type: Pure code
.text$mn:00004388 ; Segment permissions: Read/Execute
.text$mn:00004388 _text$mn        segment para public 'CODE' use32
.text$mn:00004388                 assume cs:_text$mn
.text$mn:00004388                 ;org 4388h
.text$mn:00004388 ; COMDAT (pick any)
.text$mn:00004388                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004388
.text$mn:00004388 ; =============== S U B R O U T I N E =======================================
.text$mn:00004388
.text$mn:00004388 ; Attributes: bp-based frame
.text$mn:00004388
.text$mn:00004388 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign<class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>>(class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>)
.text$mn:00004388                 public ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.text$mn:00004388 ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z proc near
.text$mn:00004388                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+CBp
.text$mn:00004388
.text$mn:00004388 var_70          = byte ptr -70h
.text$mn:00004388 var_64          = byte ptr -64h
.text$mn:00004388 var_58          = dword ptr -58h
.text$mn:00004388 var_54          = dword ptr -54h
.text$mn:00004388 var_50          = dword ptr -50h
.text$mn:00004388 var_4C          = dword ptr -4Ch
.text$mn:00004388 var_48          = dword ptr -48h
.text$mn:00004388 var_44          = dword ptr -44h
.text$mn:00004388 var_40          = dword ptr -40h
.text$mn:00004388 var_3C          = dword ptr -3Ch
.text$mn:00004388 var_38          = dword ptr -38h
.text$mn:00004388 var_34          = dword ptr -34h
.text$mn:00004388 var_30          = dword ptr -30h
.text$mn:00004388 var_2C          = dword ptr -2Ch
.text$mn:00004388 var_28          = dword ptr -28h
.text$mn:00004388 var_24          = dword ptr -24h
.text$mn:00004388 var_20          = dword ptr -20h
.text$mn:00004388 var_1C          = dword ptr -1Ch
.text$mn:00004388 var_18          = dword ptr -18h
.text$mn:00004388 var_14          = dword ptr -14h
.text$mn:00004388 var_10          = dword ptr -10h
.text$mn:00004388 var_C           = dword ptr -0Ch
.text$mn:00004388 var_4           = dword ptr -4
.text$mn:00004388 arg_0           = byte ptr  8
.text$mn:00004388 arg_C           = byte ptr  14h
.text$mn:00004388
.text$mn:00004388                 push    ebp
.text$mn:00004389                 mov     ebp, esp
.text$mn:0000438B                 push    0FFFFFFFFh
.text$mn:0000438D                 push    offset __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.text$mn:00004392                 mov     eax, large fs:0
.text$mn:00004398                 push    eax
.text$mn:00004399                 sub     esp, 64h
.text$mn:0000439C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000043A1                 xor     eax, ebp
.text$mn:000043A3                 push    eax
.text$mn:000043A4                 lea     eax, [ebp+var_C]
.text$mn:000043A7                 mov     large fs:0, eax
.text$mn:000043AD                 mov     [ebp+var_10], ecx
.text$mn:000043B0                 mov     [ebp+var_4], 1
.text$mn:000043B7                 sub     esp, 0Ch
.text$mn:000043BA                 mov     ecx, esp
.text$mn:000043BC                 mov     [ebp+var_3C], esp
.text$mn:000043BF                 lea     eax, [ebp+arg_C]
.text$mn:000043C2                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:000043C3                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:000043C8                 mov     [ebp+var_14], eax
.text$mn:000043CB                 mov     ecx, [ebp+var_14]
.text$mn:000043CE                 mov     [ebp+var_40], ecx
.text$mn:000043D1                 mov     byte ptr [ebp+var_4], 2
.text$mn:000043D5                 sub     esp, 0Ch
.text$mn:000043D8                 mov     ecx, esp
.text$mn:000043DA                 mov     [ebp+var_44], esp
.text$mn:000043DD                 lea     edx, [ebp+arg_0]
.text$mn:000043E0                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:000043E1                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:000043E6                 mov     [ebp+var_18], eax
.text$mn:000043E9                 mov     eax, [ebp+var_18]
.text$mn:000043EC                 mov     [ebp+var_48], eax
.text$mn:000043EF                 mov     byte ptr [ebp+var_4], 3
.text$mn:000043F3                 lea     ecx, [ebp+var_70]
.text$mn:000043F6                 push    ecx
.text$mn:000043F7                 mov     ecx, [ebp+var_10]
.text$mn:000043FA                 call    ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)
.text$mn:000043FF                 mov     [ebp+var_1C], eax
.text$mn:00004402                 mov     edx, [ebp+var_1C]
.text$mn:00004405                 mov     [ebp+var_20], edx
.text$mn:00004408                 mov     byte ptr [ebp+var_4], 4
.text$mn:0000440C                 sub     esp, 0Ch
.text$mn:0000440F                 mov     ecx, esp
.text$mn:00004411                 mov     [ebp+var_4C], esp
.text$mn:00004414                 mov     eax, [ebp+var_20]
.text$mn:00004417                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00004418                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000441D                 mov     [ebp+var_24], eax
.text$mn:00004420                 mov     ecx, [ebp+var_24]
.text$mn:00004423                 mov     [ebp+var_50], ecx
.text$mn:00004426                 mov     byte ptr [ebp+var_4], 5
.text$mn:0000442A                 lea     edx, [ebp+var_64]
.text$mn:0000442D                 push    edx
.text$mn:0000442E                 mov     ecx, [ebp+var_10]
.text$mn:00004431                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:00004436                 mov     [ebp+var_28], eax
.text$mn:00004439                 mov     eax, [ebp+var_28]
.text$mn:0000443C                 mov     [ebp+var_2C], eax
.text$mn:0000443F                 mov     byte ptr [ebp+var_4], 6
.text$mn:00004443                 sub     esp, 0Ch
.text$mn:00004446                 mov     ecx, esp
.text$mn:00004448                 mov     [ebp+var_54], esp
.text$mn:0000444B                 mov     edx, [ebp+var_2C]
.text$mn:0000444E                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000444F                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00004454                 mov     [ebp+var_30], eax
.text$mn:00004457                 mov     eax, [ebp+var_30]
.text$mn:0000445A                 mov     [ebp+var_58], eax
.text$mn:0000445D                 mov     byte ptr [ebp+var_4], 7
.text$mn:00004461                 mov     byte ptr [ebp+var_4], 9
.text$mn:00004465                 mov     ecx, [ebp+var_10]
.text$mn:00004468                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000446D                 mov     [ebp+var_34], eax
.text$mn:00004470                 mov     ecx, [ebp+var_34]
.text$mn:00004473                 mov     [ebp+var_38], ecx
.text$mn:00004476                 mov     byte ptr [ebp+var_4], 8
.text$mn:0000447A                 lea     ecx, [ebp+var_64]
.text$mn:0000447D                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00004482                 mov     byte ptr [ebp+var_4], 1
.text$mn:00004486                 lea     ecx, [ebp+var_70]
.text$mn:00004489                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000448E                 mov     byte ptr [ebp+var_4], 0
.text$mn:00004492                 lea     ecx, [ebp+arg_0]
.text$mn:00004495                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000449A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000044A1                 lea     ecx, [ebp+arg_C]
.text$mn:000044A4                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:000044A9                 mov     eax, [ebp+var_38]
.text$mn:000044AC                 mov     ecx, [ebp+var_C]
.text$mn:000044AF                 mov     large fs:0, ecx
.text$mn:000044B6                 pop     ecx
.text$mn:000044B7                 mov     esp, ebp
.text$mn:000044B9                 pop     ebp
.text$mn:000044BA                 retn    18h
.text$mn:000044BA ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z endp
.text$mn:000044BA
.text$mn:000044BA ; ---------------------------------------------------------------------------
.text$mn:000044BD                 align 10h
.text$mn:000044BD _text$mn        ends
.text$mn:000044BD
.text$x:000044C0 ; ===========================================================================
.text$x:000044C0
.text$x:000044C0 ; Segment type: Pure code
.text$x:000044C0 ; Segment permissions: Read/Execute
.text$x:000044C0 _text$x         segment para public 'CODE' use32
.text$x:000044C0                 assume cs:_text$x
.text$x:000044C0                 ;org 44C0h
.text$x:000044C0 ; COMDAT (pick associative to section at 4388)
.text$x:000044C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000044C0
.text$x:000044C0 ; =============== S U B R O U T I N E =======================================
.text$x:000044C0
.text$x:000044C0
.text$x:000044C0 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0 proc near
.text$x:000044C0                                         ; DATA XREF: .xdata$x:0000BF60o
.text$x:000044C0                 lea     ecx, [ebp+14h]
.text$x:000044C3                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000044C3 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0 endp
.text$x:000044C3
.text$x:000044C8
.text$x:000044C8 ; =============== S U B R O U T I N E =======================================
.text$x:000044C8
.text$x:000044C8
.text$x:000044C8 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1 proc near
.text$x:000044C8                                         ; DATA XREF: .xdata$x:0000BF68o
.text$x:000044C8                 lea     ecx, [ebp+8]
.text$x:000044CB                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000044CB __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1 endp
.text$x:000044CB
.text$x:000044D0
.text$x:000044D0 ; =============== S U B R O U T I N E =======================================
.text$x:000044D0
.text$x:000044D0
.text$x:000044D0 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2 proc near
.text$x:000044D0                                         ; DATA XREF: .xdata$x:0000BF70o
.text$x:000044D0                 mov     ecx, [ebp-3Ch]
.text$x:000044D3                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000044D3 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2 endp
.text$x:000044D3
.text$x:000044D8
.text$x:000044D8 ; =============== S U B R O U T I N E =======================================
.text$x:000044D8
.text$x:000044D8
.text$x:000044D8 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3 proc near
.text$x:000044D8                                         ; DATA XREF: .xdata$x:0000BF78o
.text$x:000044D8                 mov     ecx, [ebp-44h]
.text$x:000044DB                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000044DB __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3 endp
.text$x:000044DB
.text$x:000044E0
.text$x:000044E0 ; =============== S U B R O U T I N E =======================================
.text$x:000044E0
.text$x:000044E0
.text$x:000044E0 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4 proc near
.text$x:000044E0                                         ; DATA XREF: .xdata$x:0000BF80o
.text$x:000044E0                                         ; .xdata$x:0000BFA0o
.text$x:000044E0                 lea     ecx, [ebp-70h]
.text$x:000044E3                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000044E3 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4 endp
.text$x:000044E3
.text$x:000044E8
.text$x:000044E8 ; =============== S U B R O U T I N E =======================================
.text$x:000044E8
.text$x:000044E8
.text$x:000044E8 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5 proc near
.text$x:000044E8                                         ; DATA XREF: .xdata$x:0000BF88o
.text$x:000044E8                 mov     ecx, [ebp-4Ch]
.text$x:000044EB                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000044EB __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5 endp
.text$x:000044EB
.text$x:000044F0
.text$x:000044F0 ; =============== S U B R O U T I N E =======================================
.text$x:000044F0
.text$x:000044F0
.text$x:000044F0 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6 proc near
.text$x:000044F0                                         ; DATA XREF: .xdata$x:0000BF90o
.text$x:000044F0                                         ; .xdata$x:0000BFA8o
.text$x:000044F0                 lea     ecx, [ebp-64h]
.text$x:000044F3                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000044F3 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6 endp
.text$x:000044F3
.text$x:000044F8
.text$x:000044F8 ; =============== S U B R O U T I N E =======================================
.text$x:000044F8
.text$x:000044F8
.text$x:000044F8 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7 proc near
.text$x:000044F8                                         ; DATA XREF: .xdata$x:0000BF98o
.text$x:000044F8                 mov     ecx, [ebp-54h]
.text$x:000044FB                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000044FB __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7 endp
.text$x:000044FB
.text$x:00004500
.text$x:00004500 ; =============== S U B R O U T I N E =======================================
.text$x:00004500
.text$x:00004500
.text$x:00004500 __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z proc near
.text$x:00004500                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+5o
.text$x:00004500
.text$x:00004500 arg_4           = dword ptr  8
.text$x:00004500
.text$x:00004500                 mov     edx, [esp+arg_4]
.text$x:00004504                 lea     eax, [edx+0Ch]
.text$x:00004507                 mov     ecx, [edx-68h]
.text$x:0000450A                 xor     ecx, eax
.text$x:0000450C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004511                 mov     eax, offset __ehfuncinfo$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.text$x:00004516                 jmp     ___CxxFrameHandler3
.text$x:00004516 __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z endp
.text$x:00004516
.text$x:00004516 ; ---------------------------------------------------------------------------
.text$x:0000451B                 align 4
.text$x:0000451B _text$x         ends
.text$x:0000451B
.text$mn:0000451C ; ===========================================================================
.text$mn:0000451C
.text$mn:0000451C ; Segment type: Pure code
.text$mn:0000451C ; Segment permissions: Read/Execute
.text$mn:0000451C _text$mn        segment para public 'CODE' use32
.text$mn:0000451C                 assume cs:_text$mn
.text$mn:0000451C                 ;org 451Ch
.text$mn:0000451C ; COMDAT (pick any)
.text$mn:0000451C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000451C
.text$mn:0000451C ; =============== S U B R O U T I N E =======================================
.text$mn:0000451C
.text$mn:0000451C ; Attributes: bp-based frame
.text$mn:0000451C
.text$mn:0000451C ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(void *, int)
.text$mn:0000451C                 public ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
.text$mn:0000451C ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:0000451C                                         ; CODE XREF: $LN19+4Bp
.text$mn:0000451C
.text$mn:0000451C var_4           = dword ptr -4
.text$mn:0000451C arg_0           = dword ptr  8
.text$mn:0000451C arg_4           = dword ptr  0Ch
.text$mn:0000451C
.text$mn:0000451C                 push    ebp
.text$mn:0000451D                 mov     ebp, esp
.text$mn:0000451F                 push    ecx
.text$mn:00004520                 mov     [ebp+var_4], ecx
.text$mn:00004523                 mov     eax, [ebp+arg_4]
.text$mn:00004526                 push    eax
.text$mn:00004527                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:0000452C                 add     esp, 4
.text$mn:0000452F                 push    eax             ; int
.text$mn:00004530                 mov     ecx, [ebp+arg_0]
.text$mn:00004533                 push    ecx             ; void *
.text$mn:00004534                 mov     edx, [ebp+var_4]
.text$mn:00004537                 push    edx             ; int
.text$mn:00004538                 call    ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)
.text$mn:0000453D                 add     esp, 0Ch
.text$mn:00004540                 mov     esp, ebp
.text$mn:00004542                 pop     ebp
.text$mn:00004543                 retn    8
.text$mn:00004543 ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z endp
.text$mn:00004543
.text$mn:00004543 ; ---------------------------------------------------------------------------
.text$mn:00004546                 align 4
.text$mn:00004546 _text$mn        ends
.text$mn:00004546
.text$mn:00004548 ; ===========================================================================
.text$mn:00004548
.text$mn:00004548 ; Segment type: Pure code
.text$mn:00004548 ; Segment permissions: Read/Execute
.text$mn:00004548 _text$mn        segment para public 'CODE' use32
.text$mn:00004548                 assume cs:_text$mn
.text$mn:00004548                 ;org 4548h
.text$mn:00004548 ; COMDAT (pick any)
.text$mn:00004548                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004548
.text$mn:00004548 ; =============== S U B R O U T I N E =======================================
.text$mn:00004548
.text$mn:00004548 ; Attributes: bp-based frame
.text$mn:00004548
.text$mn:00004548 ; int __stdcall std::allocator<char>::construct<char *,char * &>(void *, int)
.text$mn:00004548                 public ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:00004548 ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:00004548                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)+17p
.text$mn:00004548
.text$mn:00004548 var_1C          = dword ptr -1Ch
.text$mn:00004548 var_18          = dword ptr -18h
.text$mn:00004548 var_14          = dword ptr -14h
.text$mn:00004548 var_10          = dword ptr -10h
.text$mn:00004548 var_C           = dword ptr -0Ch
.text$mn:00004548 var_4           = dword ptr -4
.text$mn:00004548 arg_0           = dword ptr  8
.text$mn:00004548 arg_4           = dword ptr  0Ch
.text$mn:00004548
.text$mn:00004548                 push    ebp
.text$mn:00004549                 mov     ebp, esp
.text$mn:0000454B                 push    0FFFFFFFFh
.text$mn:0000454D                 push    offset __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:00004552                 mov     eax, large fs:0
.text$mn:00004558                 push    eax
.text$mn:00004559                 sub     esp, 10h
.text$mn:0000455C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004561                 xor     eax, ebp
.text$mn:00004563                 push    eax
.text$mn:00004564                 lea     eax, [ebp+var_C]
.text$mn:00004567                 mov     large fs:0, eax
.text$mn:0000456D                 mov     [ebp+var_18], ecx
.text$mn:00004570                 mov     eax, [ebp+arg_0]
.text$mn:00004573                 push    eax             ; void *
.text$mn:00004574                 push    4               ; unsigned int
.text$mn:00004576                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:0000457B                 add     esp, 8
.text$mn:0000457E                 mov     [ebp+var_10], eax
.text$mn:00004581                 mov     [ebp+var_4], 0
.text$mn:00004588                 cmp     [ebp+var_10], 0
.text$mn:0000458C                 jz      short loc_45A9
.text$mn:0000458E                 mov     ecx, [ebp+arg_4]
.text$mn:00004591                 push    ecx
.text$mn:00004592                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00004597                 add     esp, 4
.text$mn:0000459A                 mov     edx, [ebp+var_10]
.text$mn:0000459D                 mov     eax, [eax]
.text$mn:0000459F                 mov     [edx], eax
.text$mn:000045A1                 mov     ecx, [ebp+var_10]
.text$mn:000045A4                 mov     [ebp+var_14], ecx
.text$mn:000045A7                 jmp     short loc_45B0
.text$mn:000045A9 ; ---------------------------------------------------------------------------
.text$mn:000045A9
.text$mn:000045A9 loc_45A9:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+44j
.text$mn:000045A9                 mov     [ebp+var_14], 0
.text$mn:000045B0
.text$mn:000045B0 loc_45B0:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5Fj
.text$mn:000045B0                 mov     edx, [ebp+var_14]
.text$mn:000045B3                 mov     [ebp+var_1C], edx
.text$mn:000045B6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000045BD                 mov     ecx, [ebp+var_C]
.text$mn:000045C0                 mov     large fs:0, ecx
.text$mn:000045C7                 pop     ecx
.text$mn:000045C8                 mov     esp, ebp
.text$mn:000045CA                 pop     ebp
.text$mn:000045CB                 retn    8
.text$mn:000045CB ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$mn:000045CB
.text$mn:000045CB ; ---------------------------------------------------------------------------
.text$mn:000045CE                 align 10h
.text$mn:000045CE _text$mn        ends
.text$mn:000045CE
.text$x:000045D0 ; ===========================================================================
.text$x:000045D0
.text$x:000045D0 ; Segment type: Pure code
.text$x:000045D0 ; Segment permissions: Read/Execute
.text$x:000045D0 _text$x         segment para public 'CODE' use32
.text$x:000045D0                 assume cs:_text$x
.text$x:000045D0                 ;org 45D0h
.text$x:000045D0 ; COMDAT (pick associative to section at 4548)
.text$x:000045D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000045D0
.text$x:000045D0 ; =============== S U B R O U T I N E =======================================
.text$x:000045D0
.text$x:000045D0
.text$x:000045D0 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
.text$x:000045D0                                         ; DATA XREF: .xdata$x:0000C034o
.text$x:000045D0                 mov     eax, [ebp+8]
.text$x:000045D3                 push    eax
.text$x:000045D4                 mov     eax, [ebp-10h]
.text$x:000045D7                 push    eax             ; void *
.text$x:000045D8                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:000045DD                 add     esp, 8
.text$x:000045E0                 retn
.text$x:000045E0 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 endp
.text$x:000045E0
.text$x:000045E1
.text$x:000045E1 ; =============== S U B R O U T I N E =======================================
.text$x:000045E1
.text$x:000045E1
.text$x:000045E1 __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$x:000045E1                                         ; DATA XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5o
.text$x:000045E1
.text$x:000045E1 arg_4           = dword ptr  8
.text$x:000045E1
.text$x:000045E1                 mov     edx, [esp+arg_4]
.text$x:000045E5                 lea     eax, [edx+0Ch]
.text$x:000045E8                 mov     ecx, [edx-14h]
.text$x:000045EB                 xor     ecx, eax
.text$x:000045ED                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000045F2                 mov     eax, offset __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$x:000045F7                 jmp     ___CxxFrameHandler3
.text$x:000045F7 __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$x:000045F7
.text$x:000045F7 _text$x         ends
.text$x:000045F7
.text$mn:000045FC ; ===========================================================================
.text$mn:000045FC
.text$mn:000045FC ; Segment type: Pure code
.text$mn:000045FC ; Segment permissions: Read/Execute
.text$mn:000045FC _text$mn        segment para public 'CODE' use32
.text$mn:000045FC                 assume cs:_text$mn
.text$mn:000045FC                 ;org 45FCh
.text$mn:000045FC ; COMDAT (pick any)
.text$mn:000045FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000045FC
.text$mn:000045FC ; =============== S U B R O U T I N E =======================================
.text$mn:000045FC
.text$mn:000045FC ; Attributes: bp-based frame
.text$mn:000045FC
.text$mn:000045FC ; int __cdecl std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(int, void *, int)
.text$mn:000045FC                 public ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
.text$mn:000045FC ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
.text$mn:000045FC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+1Cp
.text$mn:000045FC
.text$mn:000045FC arg_0           = dword ptr  8
.text$mn:000045FC arg_4           = dword ptr  0Ch
.text$mn:000045FC arg_8           = dword ptr  10h
.text$mn:000045FC
.text$mn:000045FC                 push    ebp
.text$mn:000045FD                 mov     ebp, esp
.text$mn:000045FF                 mov     eax, [ebp+arg_8]
.text$mn:00004602                 push    eax
.text$mn:00004603                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00004608                 add     esp, 4
.text$mn:0000460B                 push    eax             ; int
.text$mn:0000460C                 mov     ecx, [ebp+arg_4]
.text$mn:0000460F                 push    ecx             ; void *
.text$mn:00004610                 mov     ecx, [ebp+arg_0]
.text$mn:00004613                 call    ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)
.text$mn:00004618                 pop     ebp
.text$mn:00004619                 retn
.text$mn:00004619 ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z endp
.text$mn:00004619
.text$mn:00004619 ; ---------------------------------------------------------------------------
.text$mn:0000461A                 align 4
.text$mn:0000461A _text$mn        ends
.text$mn:0000461A
.text$mn:0000461C ; ===========================================================================
.text$mn:0000461C
.text$mn:0000461C ; Segment type: Pure code
.text$mn:0000461C ; Segment permissions: Read/Execute
.text$mn:0000461C _text$mn        segment para public 'CODE' use32
.text$mn:0000461C                 assume cs:_text$mn
.text$mn:0000461C                 ;org 461Ch
.text$mn:0000461C ; COMDAT (pick any)
.text$mn:0000461C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000461C
.text$mn:0000461C ; =============== S U B R O U T I N E =======================================
.text$mn:0000461C
.text$mn:0000461C ; Attributes: bp-based frame
.text$mn:0000461C
.text$mn:0000461C ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:0000461C                 public ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:0000461C ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:0000461C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+50p
.text$mn:0000461C                                         ; $LN19_0+4Bp
.text$mn:0000461C
.text$mn:0000461C var_4           = dword ptr -4
.text$mn:0000461C arg_0           = dword ptr  8
.text$mn:0000461C arg_4           = dword ptr  0Ch
.text$mn:0000461C
.text$mn:0000461C                 push    ebp
.text$mn:0000461D                 mov     ebp, esp
.text$mn:0000461F                 push    ecx
.text$mn:00004620                 mov     [ebp+var_4], ecx
.text$mn:00004623                 mov     eax, [ebp+arg_4]
.text$mn:00004626                 push    eax
.text$mn:00004627                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:0000462C                 add     esp, 4
.text$mn:0000462F                 push    eax             ; int
.text$mn:00004630                 mov     ecx, [ebp+arg_0]
.text$mn:00004633                 push    ecx             ; void *
.text$mn:00004634                 mov     edx, [ebp+var_4]
.text$mn:00004637                 push    edx             ; int
.text$mn:00004638                 call    ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)
.text$mn:0000463D                 add     esp, 0Ch
.text$mn:00004640                 mov     esp, ebp
.text$mn:00004642                 pop     ebp
.text$mn:00004643                 retn    8
.text$mn:00004643 ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:00004643
.text$mn:00004643 ; ---------------------------------------------------------------------------
.text$mn:00004646                 align 4
.text$mn:00004646 _text$mn        ends
.text$mn:00004646
.text$mn:00004648 ; ===========================================================================
.text$mn:00004648
.text$mn:00004648 ; Segment type: Pure code
.text$mn:00004648 ; Segment permissions: Read/Execute
.text$mn:00004648 _text$mn        segment para public 'CODE' use32
.text$mn:00004648                 assume cs:_text$mn
.text$mn:00004648                 ;org 4648h
.text$mn:00004648 ; COMDAT (pick any)
.text$mn:00004648                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004648
.text$mn:00004648 ; =============== S U B R O U T I N E =======================================
.text$mn:00004648
.text$mn:00004648 ; Attributes: bp-based frame
.text$mn:00004648
.text$mn:00004648 ; int __stdcall std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:00004648                 public ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00004648 ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:00004648                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)+17p
.text$mn:00004648
.text$mn:00004648 var_1C          = dword ptr -1Ch
.text$mn:00004648 var_18          = dword ptr -18h
.text$mn:00004648 var_14          = dword ptr -14h
.text$mn:00004648 var_10          = dword ptr -10h
.text$mn:00004648 var_C           = dword ptr -0Ch
.text$mn:00004648 var_4           = dword ptr -4
.text$mn:00004648 arg_0           = dword ptr  8
.text$mn:00004648 arg_4           = dword ptr  0Ch
.text$mn:00004648
.text$mn:00004648                 push    ebp
.text$mn:00004649                 mov     ebp, esp
.text$mn:0000464B                 push    0FFFFFFFFh
.text$mn:0000464D                 push    offset __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00004652                 mov     eax, large fs:0
.text$mn:00004658                 push    eax
.text$mn:00004659                 sub     esp, 10h
.text$mn:0000465C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004661                 xor     eax, ebp
.text$mn:00004663                 push    eax
.text$mn:00004664                 lea     eax, [ebp+var_C]
.text$mn:00004667                 mov     large fs:0, eax
.text$mn:0000466D                 mov     [ebp+var_18], ecx
.text$mn:00004670                 mov     eax, [ebp+arg_0]
.text$mn:00004673                 push    eax             ; void *
.text$mn:00004674                 push    4               ; unsigned int
.text$mn:00004676                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:0000467B                 add     esp, 8
.text$mn:0000467E                 mov     [ebp+var_10], eax
.text$mn:00004681                 mov     [ebp+var_4], 0
.text$mn:00004688                 cmp     [ebp+var_10], 0
.text$mn:0000468C                 jz      short loc_46A9
.text$mn:0000468E                 mov     ecx, [ebp+arg_4]
.text$mn:00004691                 push    ecx
.text$mn:00004692                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00004697                 add     esp, 4
.text$mn:0000469A                 mov     edx, [ebp+var_10]
.text$mn:0000469D                 mov     eax, [eax]
.text$mn:0000469F                 mov     [edx], eax
.text$mn:000046A1                 mov     ecx, [ebp+var_10]
.text$mn:000046A4                 mov     [ebp+var_14], ecx
.text$mn:000046A7                 jmp     short loc_46B0
.text$mn:000046A9 ; ---------------------------------------------------------------------------
.text$mn:000046A9
.text$mn:000046A9 loc_46A9:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+44j
.text$mn:000046A9                 mov     [ebp+var_14], 0
.text$mn:000046B0
.text$mn:000046B0 loc_46B0:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5Fj
.text$mn:000046B0                 mov     edx, [ebp+var_14]
.text$mn:000046B3                 mov     [ebp+var_1C], edx
.text$mn:000046B6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000046BD                 mov     ecx, [ebp+var_C]
.text$mn:000046C0                 mov     large fs:0, ecx
.text$mn:000046C7                 pop     ecx
.text$mn:000046C8                 mov     esp, ebp
.text$mn:000046CA                 pop     ebp
.text$mn:000046CB                 retn    8
.text$mn:000046CB ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:000046CB
.text$mn:000046CB ; ---------------------------------------------------------------------------
.text$mn:000046CE                 align 10h
.text$mn:000046CE _text$mn        ends
.text$mn:000046CE
.text$x:000046D0 ; ===========================================================================
.text$x:000046D0
.text$x:000046D0 ; Segment type: Pure code
.text$x:000046D0 ; Segment permissions: Read/Execute
.text$x:000046D0 _text$x         segment para public 'CODE' use32
.text$x:000046D0                 assume cs:_text$x
.text$x:000046D0                 ;org 46D0h
.text$x:000046D0 ; COMDAT (pick associative to section at 4648)
.text$x:000046D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000046D0
.text$x:000046D0 ; =============== S U B R O U T I N E =======================================
.text$x:000046D0
.text$x:000046D0
.text$x:000046D0 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 proc near
.text$x:000046D0                                         ; DATA XREF: .xdata$x:0000C060o
.text$x:000046D0                 mov     eax, [ebp+8]
.text$x:000046D3                 push    eax
.text$x:000046D4                 mov     eax, [ebp-10h]
.text$x:000046D7                 push    eax             ; void *
.text$x:000046D8                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:000046DD                 add     esp, 8
.text$x:000046E0                 retn
.text$x:000046E0 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 endp
.text$x:000046E0
.text$x:000046E1
.text$x:000046E1 ; =============== S U B R O U T I N E =======================================
.text$x:000046E1
.text$x:000046E1
.text$x:000046E1 __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$x:000046E1                                         ; DATA XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5o
.text$x:000046E1
.text$x:000046E1 arg_4           = dword ptr  8
.text$x:000046E1
.text$x:000046E1                 mov     edx, [esp+arg_4]
.text$x:000046E5                 lea     eax, [edx+0Ch]
.text$x:000046E8                 mov     ecx, [edx-14h]
.text$x:000046EB                 xor     ecx, eax
.text$x:000046ED                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000046F2                 mov     eax, offset __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$x:000046F7                 jmp     ___CxxFrameHandler3
.text$x:000046F7 __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$x:000046F7
.text$x:000046F7 _text$x         ends
.text$x:000046F7
.text$mn:000046FC ; ===========================================================================
.text$mn:000046FC
.text$mn:000046FC ; Segment type: Pure code
.text$mn:000046FC ; Segment permissions: Read/Execute
.text$mn:000046FC _text$mn        segment para public 'CODE' use32
.text$mn:000046FC                 assume cs:_text$mn
.text$mn:000046FC                 ;org 46FCh
.text$mn:000046FC ; COMDAT (pick any)
.text$mn:000046FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000046FC
.text$mn:000046FC ; =============== S U B R O U T I N E =======================================
.text$mn:000046FC
.text$mn:000046FC ; Attributes: bp-based frame
.text$mn:000046FC
.text$mn:000046FC ; int __cdecl std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(int, void *, int)
.text$mn:000046FC                 public ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z
.text$mn:000046FC ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z proc near
.text$mn:000046FC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+1Cp
.text$mn:000046FC
.text$mn:000046FC arg_0           = dword ptr  8
.text$mn:000046FC arg_4           = dword ptr  0Ch
.text$mn:000046FC arg_8           = dword ptr  10h
.text$mn:000046FC
.text$mn:000046FC                 push    ebp
.text$mn:000046FD                 mov     ebp, esp
.text$mn:000046FF                 mov     eax, [ebp+arg_8]
.text$mn:00004702                 push    eax
.text$mn:00004703                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00004708                 add     esp, 4
.text$mn:0000470B                 push    eax             ; int
.text$mn:0000470C                 mov     ecx, [ebp+arg_4]
.text$mn:0000470F                 push    ecx             ; void *
.text$mn:00004710                 mov     ecx, [ebp+arg_0]
.text$mn:00004713                 call    ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00004718                 pop     ebp
.text$mn:00004719                 retn
.text$mn:00004719 ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z endp
.text$mn:00004719
.text$mn:00004719 ; ---------------------------------------------------------------------------
.text$mn:0000471A                 align 4
.text$mn:0000471A _text$mn        ends
.text$mn:0000471A
.text$mn:0000471C ; ===========================================================================
.text$mn:0000471C
.text$mn:0000471C ; Segment type: Pure code
.text$mn:0000471C ; Segment permissions: Read/Execute
.text$mn:0000471C _text$mn        segment para public 'CODE' use32
.text$mn:0000471C                 assume cs:_text$mn
.text$mn:0000471C                 ;org 471Ch
.text$mn:0000471C ; COMDAT (pick any)
.text$mn:0000471C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000471C
.text$mn:0000471C ; =============== S U B R O U T I N E =======================================
.text$mn:0000471C
.text$mn:0000471C ; Attributes: bp-based frame
.text$mn:0000471C
.text$mn:0000471C ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const * &>(void *, int)
.text$mn:0000471C                 public ??$construct@PB_WAAPB_W@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEXPAPB_WAAPB_W@Z
.text$mn:0000471C ??$construct@PB_WAAPB_W@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEXPAPB_WAAPB_W@Z proc near
.text$mn:0000471C                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * const &)+8Dp
.text$mn:0000471C
.text$mn:0000471C var_4           = dword ptr -4
.text$mn:0000471C arg_0           = dword ptr  8
.text$mn:0000471C arg_4           = dword ptr  0Ch
.text$mn:0000471C
.text$mn:0000471C                 push    ebp
.text$mn:0000471D                 mov     ebp, esp
.text$mn:0000471F                 push    ecx
.text$mn:00004720                 mov     [ebp+var_4], ecx
.text$mn:00004723                 mov     eax, [ebp+arg_4]
.text$mn:00004726                 push    eax
.text$mn:00004727                 call    ??$forward@AAPB_W@std@@YAAAPB_WAAPB_W@Z ; std::forward<wchar_t const * &>(wchar_t const * &)
.text$mn:0000472C                 add     esp, 4
.text$mn:0000472F                 push    eax             ; int
.text$mn:00004730                 mov     ecx, [ebp+arg_0]
.text$mn:00004733                 push    ecx             ; void *
.text$mn:00004734                 mov     edx, [ebp+var_4]
.text$mn:00004737                 push    edx             ; int
.text$mn:00004738                 call    ??$construct@PB_WAAPB_W@?$allocator_traits@V?$allocator@PB_W@std@@@std@@SAXAAV?$allocator@PB_W@1@PAPB_WAAPB_W@Z ; std::allocator_traits<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const * &>(std::allocator<wchar_t const *> &,wchar_t const * *,wchar_t const * &)
.text$mn:0000473D                 add     esp, 0Ch
.text$mn:00004740                 mov     esp, ebp
.text$mn:00004742                 pop     ebp
.text$mn:00004743                 retn    8
.text$mn:00004743 ??$construct@PB_WAAPB_W@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEXPAPB_WAAPB_W@Z endp
.text$mn:00004743
.text$mn:00004743 ; ---------------------------------------------------------------------------
.text$mn:00004746                 align 4
.text$mn:00004746 _text$mn        ends
.text$mn:00004746
.text$mn:00004748 ; ===========================================================================
.text$mn:00004748
.text$mn:00004748 ; Segment type: Pure code
.text$mn:00004748 ; Segment permissions: Read/Execute
.text$mn:00004748 _text$mn        segment para public 'CODE' use32
.text$mn:00004748                 assume cs:_text$mn
.text$mn:00004748                 ;org 4748h
.text$mn:00004748 ; COMDAT (pick any)
.text$mn:00004748                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004748
.text$mn:00004748 ; =============== S U B R O U T I N E =======================================
.text$mn:00004748
.text$mn:00004748 ; Attributes: bp-based frame
.text$mn:00004748
.text$mn:00004748 ; int __stdcall std::allocator<wchar_t const *>::construct<wchar_t const *,wchar_t const * &>(void *, int)
.text$mn:00004748                 public ??$construct@PB_WAAPB_W@?$allocator@PB_W@std@@QAEXPAPB_WAAPB_W@Z
.text$mn:00004748 ??$construct@PB_WAAPB_W@?$allocator@PB_W@std@@QAEXPAPB_WAAPB_W@Z proc near
.text$mn:00004748                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const * &>(std::allocator<wchar_t const *> &,wchar_t const * *,wchar_t const * &)+17p
.text$mn:00004748
.text$mn:00004748 var_1C          = dword ptr -1Ch
.text$mn:00004748 var_18          = dword ptr -18h
.text$mn:00004748 var_14          = dword ptr -14h
.text$mn:00004748 var_10          = dword ptr -10h
.text$mn:00004748 var_C           = dword ptr -0Ch
.text$mn:00004748 var_4           = dword ptr -4
.text$mn:00004748 arg_0           = dword ptr  8
.text$mn:00004748 arg_4           = dword ptr  0Ch
.text$mn:00004748
.text$mn:00004748                 push    ebp
.text$mn:00004749                 mov     ebp, esp
.text$mn:0000474B                 push    0FFFFFFFFh
.text$mn:0000474D                 push    offset __ehhandler$??$construct@PB_WAAPB_W@?$allocator@PB_W@std@@QAEXPAPB_WAAPB_W@Z
.text$mn:00004752                 mov     eax, large fs:0
.text$mn:00004758                 push    eax
.text$mn:00004759                 sub     esp, 10h
.text$mn:0000475C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004761                 xor     eax, ebp
.text$mn:00004763                 push    eax
.text$mn:00004764                 lea     eax, [ebp+var_C]
.text$mn:00004767                 mov     large fs:0, eax
.text$mn:0000476D                 mov     [ebp+var_18], ecx
.text$mn:00004770                 mov     eax, [ebp+arg_0]
.text$mn:00004773                 push    eax             ; void *
.text$mn:00004774                 push    4               ; unsigned int
.text$mn:00004776                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:0000477B                 add     esp, 8
.text$mn:0000477E                 mov     [ebp+var_10], eax
.text$mn:00004781                 mov     [ebp+var_4], 0
.text$mn:00004788                 cmp     [ebp+var_10], 0
.text$mn:0000478C                 jz      short loc_47A9
.text$mn:0000478E                 mov     ecx, [ebp+arg_4]
.text$mn:00004791                 push    ecx
.text$mn:00004792                 call    ??$forward@AAPB_W@std@@YAAAPB_WAAPB_W@Z ; std::forward<wchar_t const * &>(wchar_t const * &)
.text$mn:00004797                 add     esp, 4
.text$mn:0000479A                 mov     edx, [ebp+var_10]
.text$mn:0000479D                 mov     eax, [eax]
.text$mn:0000479F                 mov     [edx], eax
.text$mn:000047A1                 mov     ecx, [ebp+var_10]
.text$mn:000047A4                 mov     [ebp+var_14], ecx
.text$mn:000047A7                 jmp     short loc_47B0
.text$mn:000047A9 ; ---------------------------------------------------------------------------
.text$mn:000047A9
.text$mn:000047A9 loc_47A9:                               ; CODE XREF: std::allocator<wchar_t const *>::construct<wchar_t const *,wchar_t const * &>(wchar_t const * *,wchar_t const * &)+44j
.text$mn:000047A9                 mov     [ebp+var_14], 0
.text$mn:000047B0
.text$mn:000047B0 loc_47B0:                               ; CODE XREF: std::allocator<wchar_t const *>::construct<wchar_t const *,wchar_t const * &>(wchar_t const * *,wchar_t const * &)+5Fj
.text$mn:000047B0                 mov     edx, [ebp+var_14]
.text$mn:000047B3                 mov     [ebp+var_1C], edx
.text$mn:000047B6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000047BD                 mov     ecx, [ebp+var_C]
.text$mn:000047C0                 mov     large fs:0, ecx
.text$mn:000047C7                 pop     ecx
.text$mn:000047C8                 mov     esp, ebp
.text$mn:000047CA                 pop     ebp
.text$mn:000047CB                 retn    8
.text$mn:000047CB ??$construct@PB_WAAPB_W@?$allocator@PB_W@std@@QAEXPAPB_WAAPB_W@Z endp
.text$mn:000047CB
.text$mn:000047CB ; ---------------------------------------------------------------------------
.text$mn:000047CE                 align 10h
.text$mn:000047CE _text$mn        ends
.text$mn:000047CE
.text$x:000047D0 ; ===========================================================================
.text$x:000047D0
.text$x:000047D0 ; Segment type: Pure code
.text$x:000047D0 ; Segment permissions: Read/Execute
.text$x:000047D0 _text$x         segment para public 'CODE' use32
.text$x:000047D0                 assume cs:_text$x
.text$x:000047D0                 ;org 47D0h
.text$x:000047D0 ; COMDAT (pick associative to section at 4748)
.text$x:000047D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000047D0
.text$x:000047D0 ; =============== S U B R O U T I N E =======================================
.text$x:000047D0
.text$x:000047D0
.text$x:000047D0 __unwindfunclet$??$construct@PB_WAAPB_W@?$allocator@PB_W@std@@QAEXPAPB_WAAPB_W@Z$0 proc near
.text$x:000047D0                                         ; DATA XREF: .xdata$x:0000C008o
.text$x:000047D0                 mov     eax, [ebp+8]
.text$x:000047D3                 push    eax
.text$x:000047D4                 mov     eax, [ebp-10h]
.text$x:000047D7                 push    eax             ; void *
.text$x:000047D8                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:000047DD                 add     esp, 8
.text$x:000047E0                 retn
.text$x:000047E0 __unwindfunclet$??$construct@PB_WAAPB_W@?$allocator@PB_W@std@@QAEXPAPB_WAAPB_W@Z$0 endp
.text$x:000047E0
.text$x:000047E1
.text$x:000047E1 ; =============== S U B R O U T I N E =======================================
.text$x:000047E1
.text$x:000047E1
.text$x:000047E1 __ehhandler$??$construct@PB_WAAPB_W@?$allocator@PB_W@std@@QAEXPAPB_WAAPB_W@Z proc near
.text$x:000047E1                                         ; DATA XREF: std::allocator<wchar_t const *>::construct<wchar_t const *,wchar_t const * &>(wchar_t const * *,wchar_t const * &)+5o
.text$x:000047E1
.text$x:000047E1 arg_4           = dword ptr  8
.text$x:000047E1
.text$x:000047E1                 mov     edx, [esp+arg_4]
.text$x:000047E5                 lea     eax, [edx+0Ch]
.text$x:000047E8                 mov     ecx, [edx-14h]
.text$x:000047EB                 xor     ecx, eax
.text$x:000047ED                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000047F2                 mov     eax, offset __ehfuncinfo$??$construct@PB_WAAPB_W@?$allocator@PB_W@std@@QAEXPAPB_WAAPB_W@Z
.text$x:000047F7                 jmp     ___CxxFrameHandler3
.text$x:000047F7 __ehhandler$??$construct@PB_WAAPB_W@?$allocator@PB_W@std@@QAEXPAPB_WAAPB_W@Z endp
.text$x:000047F7
.text$x:000047F7 _text$x         ends
.text$x:000047F7
.text$mn:000047FC ; ===========================================================================
.text$mn:000047FC
.text$mn:000047FC ; Segment type: Pure code
.text$mn:000047FC ; Segment permissions: Read/Execute
.text$mn:000047FC _text$mn        segment para public 'CODE' use32
.text$mn:000047FC                 assume cs:_text$mn
.text$mn:000047FC                 ;org 47FCh
.text$mn:000047FC ; COMDAT (pick any)
.text$mn:000047FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000047FC
.text$mn:000047FC ; =============== S U B R O U T I N E =======================================
.text$mn:000047FC
.text$mn:000047FC ; Attributes: bp-based frame
.text$mn:000047FC
.text$mn:000047FC ; int __cdecl std::allocator_traits<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const * &>(int, void *, int)
.text$mn:000047FC                 public ??$construct@PB_WAAPB_W@?$allocator_traits@V?$allocator@PB_W@std@@@std@@SAXAAV?$allocator@PB_W@1@PAPB_WAAPB_W@Z
.text$mn:000047FC ??$construct@PB_WAAPB_W@?$allocator_traits@V?$allocator@PB_W@std@@@std@@SAXAAV?$allocator@PB_W@1@PAPB_WAAPB_W@Z proc near
.text$mn:000047FC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const * &>(wchar_t const * *,wchar_t const * &)+1Cp
.text$mn:000047FC
.text$mn:000047FC arg_0           = dword ptr  8
.text$mn:000047FC arg_4           = dword ptr  0Ch
.text$mn:000047FC arg_8           = dword ptr  10h
.text$mn:000047FC
.text$mn:000047FC                 push    ebp
.text$mn:000047FD                 mov     ebp, esp
.text$mn:000047FF                 mov     eax, [ebp+arg_8]
.text$mn:00004802                 push    eax
.text$mn:00004803                 call    ??$forward@AAPB_W@std@@YAAAPB_WAAPB_W@Z ; std::forward<wchar_t const * &>(wchar_t const * &)
.text$mn:00004808                 add     esp, 4
.text$mn:0000480B                 push    eax             ; int
.text$mn:0000480C                 mov     ecx, [ebp+arg_4]
.text$mn:0000480F                 push    ecx             ; void *
.text$mn:00004810                 mov     ecx, [ebp+arg_0]
.text$mn:00004813                 call    ??$construct@PB_WAAPB_W@?$allocator@PB_W@std@@QAEXPAPB_WAAPB_W@Z ; std::allocator<wchar_t const *>::construct<wchar_t const *,wchar_t const * &>(wchar_t const * *,wchar_t const * &)
.text$mn:00004818                 pop     ebp
.text$mn:00004819                 retn
.text$mn:00004819 ??$construct@PB_WAAPB_W@?$allocator_traits@V?$allocator@PB_W@std@@@std@@SAXAAV?$allocator@PB_W@1@PAPB_WAAPB_W@Z endp
.text$mn:00004819
.text$mn:00004819 ; ---------------------------------------------------------------------------
.text$mn:0000481A                 align 4
.text$mn:0000481A _text$mn        ends
.text$mn:0000481A
.text$mn:0000481C ; ===========================================================================
.text$mn:0000481C
.text$mn:0000481C ; Segment type: Pure code
.text$mn:0000481C ; Segment permissions: Read/Execute
.text$mn:0000481C _text$mn        segment para public 'CODE' use32
.text$mn:0000481C                 assume cs:_text$mn
.text$mn:0000481C                 ;org 481Ch
.text$mn:0000481C ; COMDAT (pick any)
.text$mn:0000481C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000481C
.text$mn:0000481C ; =============== S U B R O U T I N E =======================================
.text$mn:0000481C
.text$mn:0000481C ; Attributes: bp-based frame
.text$mn:0000481C
.text$mn:0000481C ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const * const &>(void *, int)
.text$mn:0000481C                 public ??$construct@PB_WABQB_W@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEXPAPB_WABQB_W@Z
.text$mn:0000481C ??$construct@PB_WABQB_W@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEXPAPB_WABQB_W@Z proc near
.text$mn:0000481C                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * const &)+EAp
.text$mn:0000481C
.text$mn:0000481C var_4           = dword ptr -4
.text$mn:0000481C arg_0           = dword ptr  8
.text$mn:0000481C arg_4           = dword ptr  0Ch
.text$mn:0000481C
.text$mn:0000481C                 push    ebp
.text$mn:0000481D                 mov     ebp, esp
.text$mn:0000481F                 push    ecx
.text$mn:00004820                 mov     [ebp+var_4], ecx
.text$mn:00004823                 mov     eax, [ebp+arg_4]
.text$mn:00004826                 push    eax
.text$mn:00004827                 call    ??$forward@ABQB_W@std@@YAABQB_WABQB_W@Z ; std::forward<wchar_t const * const &>(wchar_t const * const &)
.text$mn:0000482C                 add     esp, 4
.text$mn:0000482F                 push    eax             ; int
.text$mn:00004830                 mov     ecx, [ebp+arg_0]
.text$mn:00004833                 push    ecx             ; void *
.text$mn:00004834                 mov     edx, [ebp+var_4]
.text$mn:00004837                 push    edx             ; int
.text$mn:00004838                 call    ??$construct@PB_WABQB_W@?$allocator_traits@V?$allocator@PB_W@std@@@std@@SAXAAV?$allocator@PB_W@1@PAPB_WABQB_W@Z ; std::allocator_traits<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const * const &>(std::allocator<wchar_t const *> &,wchar_t const * *,wchar_t const * const &)
.text$mn:0000483D                 add     esp, 0Ch
.text$mn:00004840                 mov     esp, ebp
.text$mn:00004842                 pop     ebp
.text$mn:00004843                 retn    8
.text$mn:00004843 ??$construct@PB_WABQB_W@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEXPAPB_WABQB_W@Z endp
.text$mn:00004843
.text$mn:00004843 ; ---------------------------------------------------------------------------
.text$mn:00004846                 align 4
.text$mn:00004846 _text$mn        ends
.text$mn:00004846
.text$mn:00004848 ; ===========================================================================
.text$mn:00004848
.text$mn:00004848 ; Segment type: Pure code
.text$mn:00004848 ; Segment permissions: Read/Execute
.text$mn:00004848 _text$mn        segment para public 'CODE' use32
.text$mn:00004848                 assume cs:_text$mn
.text$mn:00004848                 ;org 4848h
.text$mn:00004848 ; COMDAT (pick any)
.text$mn:00004848                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004848
.text$mn:00004848 ; =============== S U B R O U T I N E =======================================
.text$mn:00004848
.text$mn:00004848 ; Attributes: bp-based frame
.text$mn:00004848
.text$mn:00004848 ; int __cdecl std::allocator_traits<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const * const &>(int, void *, int)
.text$mn:00004848                 public ??$construct@PB_WABQB_W@?$allocator_traits@V?$allocator@PB_W@std@@@std@@SAXAAV?$allocator@PB_W@1@PAPB_WABQB_W@Z
.text$mn:00004848 ??$construct@PB_WABQB_W@?$allocator_traits@V?$allocator@PB_W@std@@@std@@SAXAAV?$allocator@PB_W@1@PAPB_WABQB_W@Z proc near
.text$mn:00004848                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const * const &>(wchar_t const * *,wchar_t const * const &)+1Cp
.text$mn:00004848
.text$mn:00004848 arg_0           = dword ptr  8
.text$mn:00004848 arg_4           = dword ptr  0Ch
.text$mn:00004848 arg_8           = dword ptr  10h
.text$mn:00004848
.text$mn:00004848                 push    ebp
.text$mn:00004849                 mov     ebp, esp
.text$mn:0000484B                 mov     eax, [ebp+arg_8]
.text$mn:0000484E                 push    eax
.text$mn:0000484F                 call    ??$forward@ABQB_W@std@@YAABQB_WABQB_W@Z ; std::forward<wchar_t const * const &>(wchar_t const * const &)
.text$mn:00004854                 add     esp, 4
.text$mn:00004857                 push    eax             ; int
.text$mn:00004858                 mov     ecx, [ebp+arg_4]
.text$mn:0000485B                 push    ecx             ; void *
.text$mn:0000485C                 mov     ecx, [ebp+arg_0]
.text$mn:0000485F                 call    ?construct@?$allocator@PB_W@std@@QAEXPAPB_WABQB_W@Z ; std::allocator<wchar_t const *>::construct(wchar_t const * *,wchar_t const * const &)
.text$mn:00004864                 pop     ebp
.text$mn:00004865                 retn
.text$mn:00004865 ??$construct@PB_WABQB_W@?$allocator_traits@V?$allocator@PB_W@std@@@std@@SAXAAV?$allocator@PB_W@1@PAPB_WABQB_W@Z endp
.text$mn:00004865
.text$mn:00004865 ; ---------------------------------------------------------------------------
.text$mn:00004866                 align 4
.text$mn:00004866 _text$mn        ends
.text$mn:00004866
.text$mn:00004868 ; ===========================================================================
.text$mn:00004868
.text$mn:00004868 ; Segment type: Pure code
.text$mn:00004868 ; Segment permissions: Read/Execute
.text$mn:00004868 _text$mn        segment para public 'CODE' use32
.text$mn:00004868                 assume cs:_text$mn
.text$mn:00004868                 ;org 4868h
.text$mn:00004868 ; COMDAT (pick any)
.text$mn:00004868                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004868
.text$mn:00004868 ; =============== S U B R O U T I N E =======================================
.text$mn:00004868
.text$mn:00004868 ; Attributes: bp-based frame
.text$mn:00004868
.text$mn:00004868 ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const *>(void *, int)
.text$mn:00004868                 public ??$construct@PB_WPB_W@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEXPAPB_W$$QAPB_W@Z
.text$mn:00004868 ??$construct@PB_WPB_W@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEXPAPB_W$$QAPB_W@Z proc near
.text$mn:00004868                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * &&)+9Ap
.text$mn:00004868                                         ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * &&)+100p
.text$mn:00004868
.text$mn:00004868 var_4           = dword ptr -4
.text$mn:00004868 arg_0           = dword ptr  8
.text$mn:00004868 arg_4           = dword ptr  0Ch
.text$mn:00004868
.text$mn:00004868                 push    ebp
.text$mn:00004869                 mov     ebp, esp
.text$mn:0000486B                 push    ecx
.text$mn:0000486C                 mov     [ebp+var_4], ecx
.text$mn:0000486F                 mov     eax, [ebp+arg_4]
.text$mn:00004872                 push    eax
.text$mn:00004873                 call    ??$forward@PB_W@std@@YA$$QAPB_WAAPB_W@Z ; std::forward<wchar_t const *>(wchar_t const * &)
.text$mn:00004878                 add     esp, 4
.text$mn:0000487B                 push    eax             ; int
.text$mn:0000487C                 mov     ecx, [ebp+arg_0]
.text$mn:0000487F                 push    ecx             ; void *
.text$mn:00004880                 mov     edx, [ebp+var_4]
.text$mn:00004883                 push    edx             ; int
.text$mn:00004884                 call    ??$construct@PB_WPB_W@?$allocator_traits@V?$allocator@PB_W@std@@@std@@SAXAAV?$allocator@PB_W@1@PAPB_W$$QAPB_W@Z ; std::allocator_traits<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const *>(std::allocator<wchar_t const *> &,wchar_t const * *,wchar_t const * &&)
.text$mn:00004889                 add     esp, 0Ch
.text$mn:0000488C                 mov     esp, ebp
.text$mn:0000488E                 pop     ebp
.text$mn:0000488F                 retn    8
.text$mn:0000488F ??$construct@PB_WPB_W@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEXPAPB_W$$QAPB_W@Z endp
.text$mn:0000488F
.text$mn:0000488F ; ---------------------------------------------------------------------------
.text$mn:00004892                 align 4
.text$mn:00004892 _text$mn        ends
.text$mn:00004892
.text$mn:00004894 ; ===========================================================================
.text$mn:00004894
.text$mn:00004894 ; Segment type: Pure code
.text$mn:00004894 ; Segment permissions: Read/Execute
.text$mn:00004894 _text$mn        segment para public 'CODE' use32
.text$mn:00004894                 assume cs:_text$mn
.text$mn:00004894                 ;org 4894h
.text$mn:00004894 ; COMDAT (pick any)
.text$mn:00004894                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004894
.text$mn:00004894 ; =============== S U B R O U T I N E =======================================
.text$mn:00004894
.text$mn:00004894 ; Attributes: bp-based frame
.text$mn:00004894
.text$mn:00004894 ; int __stdcall std::allocator<wchar_t const *>::construct<wchar_t const *,wchar_t const *>(void *, int)
.text$mn:00004894                 public ??$construct@PB_WPB_W@?$allocator@PB_W@std@@QAEXPAPB_W$$QAPB_W@Z
.text$mn:00004894 ??$construct@PB_WPB_W@?$allocator@PB_W@std@@QAEXPAPB_W$$QAPB_W@Z proc near
.text$mn:00004894                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const *>(std::allocator<wchar_t const *> &,wchar_t const * *,wchar_t const * &&)+17p
.text$mn:00004894
.text$mn:00004894 var_1C          = dword ptr -1Ch
.text$mn:00004894 var_18          = dword ptr -18h
.text$mn:00004894 var_14          = dword ptr -14h
.text$mn:00004894 var_10          = dword ptr -10h
.text$mn:00004894 var_C           = dword ptr -0Ch
.text$mn:00004894 var_4           = dword ptr -4
.text$mn:00004894 arg_0           = dword ptr  8
.text$mn:00004894 arg_4           = dword ptr  0Ch
.text$mn:00004894
.text$mn:00004894                 push    ebp
.text$mn:00004895                 mov     ebp, esp
.text$mn:00004897                 push    0FFFFFFFFh
.text$mn:00004899                 push    offset __ehhandler$??$construct@PB_WPB_W@?$allocator@PB_W@std@@QAEXPAPB_W$$QAPB_W@Z
.text$mn:0000489E                 mov     eax, large fs:0
.text$mn:000048A4                 push    eax
.text$mn:000048A5                 sub     esp, 10h
.text$mn:000048A8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000048AD                 xor     eax, ebp
.text$mn:000048AF                 push    eax
.text$mn:000048B0                 lea     eax, [ebp+var_C]
.text$mn:000048B3                 mov     large fs:0, eax
.text$mn:000048B9                 mov     [ebp+var_18], ecx
.text$mn:000048BC                 mov     eax, [ebp+arg_0]
.text$mn:000048BF                 push    eax             ; void *
.text$mn:000048C0                 push    4               ; unsigned int
.text$mn:000048C2                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:000048C7                 add     esp, 8
.text$mn:000048CA                 mov     [ebp+var_10], eax
.text$mn:000048CD                 mov     [ebp+var_4], 0
.text$mn:000048D4                 cmp     [ebp+var_10], 0
.text$mn:000048D8                 jz      short loc_48F5
.text$mn:000048DA                 mov     ecx, [ebp+arg_4]
.text$mn:000048DD                 push    ecx
.text$mn:000048DE                 call    ??$forward@PB_W@std@@YA$$QAPB_WAAPB_W@Z ; std::forward<wchar_t const *>(wchar_t const * &)
.text$mn:000048E3                 add     esp, 4
.text$mn:000048E6                 mov     edx, [ebp+var_10]
.text$mn:000048E9                 mov     eax, [eax]
.text$mn:000048EB                 mov     [edx], eax
.text$mn:000048ED                 mov     ecx, [ebp+var_10]
.text$mn:000048F0                 mov     [ebp+var_14], ecx
.text$mn:000048F3                 jmp     short loc_48FC
.text$mn:000048F5 ; ---------------------------------------------------------------------------
.text$mn:000048F5
.text$mn:000048F5 loc_48F5:                               ; CODE XREF: std::allocator<wchar_t const *>::construct<wchar_t const *,wchar_t const *>(wchar_t const * *,wchar_t const * &&)+44j
.text$mn:000048F5                 mov     [ebp+var_14], 0
.text$mn:000048FC
.text$mn:000048FC loc_48FC:                               ; CODE XREF: std::allocator<wchar_t const *>::construct<wchar_t const *,wchar_t const *>(wchar_t const * *,wchar_t const * &&)+5Fj
.text$mn:000048FC                 mov     edx, [ebp+var_14]
.text$mn:000048FF                 mov     [ebp+var_1C], edx
.text$mn:00004902                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004909                 mov     ecx, [ebp+var_C]
.text$mn:0000490C                 mov     large fs:0, ecx
.text$mn:00004913                 pop     ecx
.text$mn:00004914                 mov     esp, ebp
.text$mn:00004916                 pop     ebp
.text$mn:00004917                 retn    8
.text$mn:00004917 ??$construct@PB_WPB_W@?$allocator@PB_W@std@@QAEXPAPB_W$$QAPB_W@Z endp
.text$mn:00004917
.text$mn:00004917 ; ---------------------------------------------------------------------------
.text$mn:0000491A                 align 4
.text$mn:0000491A _text$mn        ends
.text$mn:0000491A
.text$x:0000491C ; ===========================================================================
.text$x:0000491C
.text$x:0000491C ; Segment type: Pure code
.text$x:0000491C ; Segment permissions: Read/Execute
.text$x:0000491C _text$x         segment para public 'CODE' use32
.text$x:0000491C                 assume cs:_text$x
.text$x:0000491C                 ;org 491Ch
.text$x:0000491C ; COMDAT (pick associative to section at 4894)
.text$x:0000491C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000491C
.text$x:0000491C ; =============== S U B R O U T I N E =======================================
.text$x:0000491C
.text$x:0000491C
.text$x:0000491C __unwindfunclet$??$construct@PB_WPB_W@?$allocator@PB_W@std@@QAEXPAPB_W$$QAPB_W@Z$0 proc near
.text$x:0000491C                                         ; DATA XREF: .xdata$x:0000BFDCo
.text$x:0000491C                 mov     eax, [ebp+8]
.text$x:0000491F                 push    eax
.text$x:00004920                 mov     eax, [ebp-10h]
.text$x:00004923                 push    eax             ; void *
.text$x:00004924                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00004929                 add     esp, 8
.text$x:0000492C                 retn
.text$x:0000492C __unwindfunclet$??$construct@PB_WPB_W@?$allocator@PB_W@std@@QAEXPAPB_W$$QAPB_W@Z$0 endp
.text$x:0000492C
.text$x:0000492D
.text$x:0000492D ; =============== S U B R O U T I N E =======================================
.text$x:0000492D
.text$x:0000492D
.text$x:0000492D __ehhandler$??$construct@PB_WPB_W@?$allocator@PB_W@std@@QAEXPAPB_W$$QAPB_W@Z proc near
.text$x:0000492D                                         ; DATA XREF: std::allocator<wchar_t const *>::construct<wchar_t const *,wchar_t const *>(wchar_t const * *,wchar_t const * &&)+5o
.text$x:0000492D
.text$x:0000492D arg_4           = dword ptr  8
.text$x:0000492D
.text$x:0000492D                 mov     edx, [esp+arg_4]
.text$x:00004931                 lea     eax, [edx+0Ch]
.text$x:00004934                 mov     ecx, [edx-14h]
.text$x:00004937                 xor     ecx, eax
.text$x:00004939                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000493E                 mov     eax, offset __ehfuncinfo$??$construct@PB_WPB_W@?$allocator@PB_W@std@@QAEXPAPB_W$$QAPB_W@Z
.text$x:00004943                 jmp     ___CxxFrameHandler3
.text$x:00004943 __ehhandler$??$construct@PB_WPB_W@?$allocator@PB_W@std@@QAEXPAPB_W$$QAPB_W@Z endp
.text$x:00004943
.text$x:00004943 _text$x         ends
.text$x:00004943
.text$mn:00004948 ; ===========================================================================
.text$mn:00004948
.text$mn:00004948 ; Segment type: Pure code
.text$mn:00004948 ; Segment permissions: Read/Execute
.text$mn:00004948 _text$mn        segment para public 'CODE' use32
.text$mn:00004948                 assume cs:_text$mn
.text$mn:00004948                 ;org 4948h
.text$mn:00004948 ; COMDAT (pick any)
.text$mn:00004948                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004948
.text$mn:00004948 ; =============== S U B R O U T I N E =======================================
.text$mn:00004948
.text$mn:00004948 ; Attributes: bp-based frame
.text$mn:00004948
.text$mn:00004948 ; int __cdecl std::allocator_traits<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const *>(int, void *, int)
.text$mn:00004948                 public ??$construct@PB_WPB_W@?$allocator_traits@V?$allocator@PB_W@std@@@std@@SAXAAV?$allocator@PB_W@1@PAPB_W$$QAPB_W@Z
.text$mn:00004948 ??$construct@PB_WPB_W@?$allocator_traits@V?$allocator@PB_W@std@@@std@@SAXAAV?$allocator@PB_W@1@PAPB_W$$QAPB_W@Z proc near
.text$mn:00004948                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const *>(wchar_t const * *,wchar_t const * &&)+1Cp
.text$mn:00004948
.text$mn:00004948 arg_0           = dword ptr  8
.text$mn:00004948 arg_4           = dword ptr  0Ch
.text$mn:00004948 arg_8           = dword ptr  10h
.text$mn:00004948
.text$mn:00004948                 push    ebp
.text$mn:00004949                 mov     ebp, esp
.text$mn:0000494B                 mov     eax, [ebp+arg_8]
.text$mn:0000494E                 push    eax
.text$mn:0000494F                 call    ??$forward@PB_W@std@@YA$$QAPB_WAAPB_W@Z ; std::forward<wchar_t const *>(wchar_t const * &)
.text$mn:00004954                 add     esp, 4
.text$mn:00004957                 push    eax             ; int
.text$mn:00004958                 mov     ecx, [ebp+arg_4]
.text$mn:0000495B                 push    ecx             ; void *
.text$mn:0000495C                 mov     ecx, [ebp+arg_0]
.text$mn:0000495F                 call    ??$construct@PB_WPB_W@?$allocator@PB_W@std@@QAEXPAPB_W$$QAPB_W@Z ; std::allocator<wchar_t const *>::construct<wchar_t const *,wchar_t const *>(wchar_t const * *,wchar_t const * &&)
.text$mn:00004964                 pop     ebp
.text$mn:00004965                 retn
.text$mn:00004965 ??$construct@PB_WPB_W@?$allocator_traits@V?$allocator@PB_W@std@@@std@@SAXAAV?$allocator@PB_W@1@PAPB_W$$QAPB_W@Z endp
.text$mn:00004965
.text$mn:00004965 ; ---------------------------------------------------------------------------
.text$mn:00004966                 align 4
.text$mn:00004966 _text$mn        ends
.text$mn:00004966
.text$mn:00004968 ; ===========================================================================
.text$mn:00004968
.text$mn:00004968 ; Segment type: Pure code
.text$mn:00004968 ; Segment permissions: Read/Execute
.text$mn:00004968 _text$mn        segment para public 'CODE' use32
.text$mn:00004968                 assume cs:_text$mn
.text$mn:00004968                 ;org 4968h
.text$mn:00004968 ; COMDAT (pick any)
.text$mn:00004968                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004968
.text$mn:00004968 ; =============== S U B R O U T I N E =======================================
.text$mn:00004968
.text$mn:00004968 ; Attributes: bp-based frame
.text$mn:00004968
.text$mn:00004968 ; int __stdcall std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:00004968                 public ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00004968 ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:00004968                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Alloc_proxy(void)+32p
.text$mn:00004968
.text$mn:00004968 var_4           = dword ptr -4
.text$mn:00004968 arg_0           = dword ptr  8
.text$mn:00004968 arg_4           = dword ptr  0Ch
.text$mn:00004968
.text$mn:00004968                 push    ebp
.text$mn:00004969                 mov     ebp, esp
.text$mn:0000496B                 push    ecx
.text$mn:0000496C                 mov     [ebp+var_4], ecx
.text$mn:0000496F                 mov     eax, [ebp+arg_4]
.text$mn:00004972                 push    eax
.text$mn:00004973                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:00004978                 add     esp, 4
.text$mn:0000497B                 push    eax             ; int
.text$mn:0000497C                 mov     ecx, [ebp+arg_0]
.text$mn:0000497F                 push    ecx             ; void *
.text$mn:00004980                 mov     edx, [ebp+var_4]
.text$mn:00004983                 push    edx             ; int
.text$mn:00004984                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00004989                 add     esp, 0Ch
.text$mn:0000498C                 mov     esp, ebp
.text$mn:0000498E                 pop     ebp
.text$mn:0000498F                 retn    8
.text$mn:0000498F ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:0000498F
.text$mn:0000498F ; ---------------------------------------------------------------------------
.text$mn:00004992                 align 4
.text$mn:00004992 _text$mn        ends
.text$mn:00004992
.text$mn:00004994 ; ===========================================================================
.text$mn:00004994
.text$mn:00004994 ; Segment type: Pure code
.text$mn:00004994 ; Segment permissions: Read/Execute
.text$mn:00004994 _text$mn        segment para public 'CODE' use32
.text$mn:00004994                 assume cs:_text$mn
.text$mn:00004994                 ;org 4994h
.text$mn:00004994 ; COMDAT (pick any)
.text$mn:00004994                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004994
.text$mn:00004994 ; =============== S U B R O U T I N E =======================================
.text$mn:00004994
.text$mn:00004994 ; Attributes: bp-based frame
.text$mn:00004994
.text$mn:00004994 ; int __stdcall std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:00004994                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00004994 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:00004994                                         ; CODE XREF: std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *,std::_Container_proxy &&)+17p
.text$mn:00004994                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+32p ...
.text$mn:00004994
.text$mn:00004994 var_1C          = dword ptr -1Ch
.text$mn:00004994 var_18          = dword ptr -18h
.text$mn:00004994 var_14          = dword ptr -14h
.text$mn:00004994 var_10          = dword ptr -10h
.text$mn:00004994 var_C           = dword ptr -0Ch
.text$mn:00004994 var_4           = dword ptr -4
.text$mn:00004994 arg_0           = dword ptr  8
.text$mn:00004994 arg_4           = dword ptr  0Ch
.text$mn:00004994
.text$mn:00004994                 push    ebp
.text$mn:00004995                 mov     ebp, esp
.text$mn:00004997                 push    0FFFFFFFFh
.text$mn:00004999                 push    offset __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:0000499E                 mov     eax, large fs:0
.text$mn:000049A4                 push    eax
.text$mn:000049A5                 sub     esp, 10h
.text$mn:000049A8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000049AD                 xor     eax, ebp
.text$mn:000049AF                 push    eax
.text$mn:000049B0                 lea     eax, [ebp+var_C]
.text$mn:000049B3                 mov     large fs:0, eax
.text$mn:000049B9                 mov     [ebp+var_18], ecx
.text$mn:000049BC                 mov     eax, [ebp+arg_0]
.text$mn:000049BF                 push    eax             ; void *
.text$mn:000049C0                 push    8               ; unsigned int
.text$mn:000049C2                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:000049C7                 add     esp, 8
.text$mn:000049CA                 mov     [ebp+var_10], eax
.text$mn:000049CD                 mov     [ebp+var_4], 0
.text$mn:000049D4                 cmp     [ebp+var_10], 0
.text$mn:000049D8                 jz      short loc_49FB
.text$mn:000049DA                 mov     ecx, [ebp+arg_4]
.text$mn:000049DD                 push    ecx
.text$mn:000049DE                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:000049E3                 add     esp, 4
.text$mn:000049E6                 mov     edx, [eax]
.text$mn:000049E8                 mov     eax, [eax+4]
.text$mn:000049EB                 mov     ecx, [ebp+var_10]
.text$mn:000049EE                 mov     [ecx], edx
.text$mn:000049F0                 mov     [ecx+4], eax
.text$mn:000049F3                 mov     edx, [ebp+var_10]
.text$mn:000049F6                 mov     [ebp+var_14], edx
.text$mn:000049F9                 jmp     short loc_4A02
.text$mn:000049FB ; ---------------------------------------------------------------------------
.text$mn:000049FB
.text$mn:000049FB loc_49FB:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+44j
.text$mn:000049FB                 mov     [ebp+var_14], 0
.text$mn:00004A02
.text$mn:00004A02 loc_4A02:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+65j
.text$mn:00004A02                 mov     eax, [ebp+var_14]
.text$mn:00004A05                 mov     [ebp+var_1C], eax
.text$mn:00004A08                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004A0F                 mov     ecx, [ebp+var_C]
.text$mn:00004A12                 mov     large fs:0, ecx
.text$mn:00004A19                 pop     ecx
.text$mn:00004A1A                 mov     esp, ebp
.text$mn:00004A1C                 pop     ebp
.text$mn:00004A1D                 retn    8
.text$mn:00004A1D ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:00004A1D
.text$mn:00004A1D _text$mn        ends
.text$mn:00004A1D
.text$x:00004A20 ; ===========================================================================
.text$x:00004A20
.text$x:00004A20 ; Segment type: Pure code
.text$x:00004A20 ; Segment permissions: Read/Execute
.text$x:00004A20 _text$x         segment para public 'CODE' use32
.text$x:00004A20                 assume cs:_text$x
.text$x:00004A20                 ;org 4A20h
.text$x:00004A20 ; COMDAT (pick associative to section at 4994)
.text$x:00004A20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004A20
.text$x:00004A20 ; =============== S U B R O U T I N E =======================================
.text$x:00004A20
.text$x:00004A20
.text$x:00004A20 __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
.text$x:00004A20                                         ; DATA XREF: .xdata$x:0000BFB0o
.text$x:00004A20                 mov     eax, [ebp+8]
.text$x:00004A23                 push    eax
.text$x:00004A24                 mov     eax, [ebp-10h]
.text$x:00004A27                 push    eax             ; void *
.text$x:00004A28                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00004A2D                 add     esp, 8
.text$x:00004A30                 retn
.text$x:00004A30 __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 endp
.text$x:00004A30
.text$x:00004A31
.text$x:00004A31 ; =============== S U B R O U T I N E =======================================
.text$x:00004A31
.text$x:00004A31
.text$x:00004A31 __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$x:00004A31                                         ; DATA XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+5o
.text$x:00004A31
.text$x:00004A31 arg_4           = dword ptr  8
.text$x:00004A31
.text$x:00004A31                 mov     edx, [esp+arg_4]
.text$x:00004A35                 lea     eax, [edx+0Ch]
.text$x:00004A38                 mov     ecx, [edx-14h]
.text$x:00004A3B                 xor     ecx, eax
.text$x:00004A3D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004A42                 mov     eax, offset __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$x:00004A47                 jmp     ___CxxFrameHandler3
.text$x:00004A47 __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$x:00004A47
.text$x:00004A47 _text$x         ends
.text$x:00004A47
.text$mn:00004A4C ; ===========================================================================
.text$mn:00004A4C
.text$mn:00004A4C ; Segment type: Pure code
.text$mn:00004A4C ; Segment permissions: Read/Execute
.text$mn:00004A4C _text$mn        segment para public 'CODE' use32
.text$mn:00004A4C                 assume cs:_text$mn
.text$mn:00004A4C                 ;org 4A4Ch
.text$mn:00004A4C ; COMDAT (pick any)
.text$mn:00004A4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A4C
.text$mn:00004A4C ; =============== S U B R O U T I N E =======================================
.text$mn:00004A4C
.text$mn:00004A4C ; Attributes: bp-based frame
.text$mn:00004A4C
.text$mn:00004A4C ; int __cdecl std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(int, void *, int)
.text$mn:00004A4C                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z
.text$mn:00004A4C ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z proc near
.text$mn:00004A4C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+1Cp
.text$mn:00004A4C
.text$mn:00004A4C arg_0           = dword ptr  8
.text$mn:00004A4C arg_4           = dword ptr  0Ch
.text$mn:00004A4C arg_8           = dword ptr  10h
.text$mn:00004A4C
.text$mn:00004A4C                 push    ebp
.text$mn:00004A4D                 mov     ebp, esp
.text$mn:00004A4F                 mov     eax, [ebp+arg_8]
.text$mn:00004A52                 push    eax
.text$mn:00004A53                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:00004A58                 add     esp, 4
.text$mn:00004A5B                 push    eax             ; int
.text$mn:00004A5C                 mov     ecx, [ebp+arg_4]
.text$mn:00004A5F                 push    ecx             ; void *
.text$mn:00004A60                 mov     ecx, [ebp+arg_0]
.text$mn:00004A63                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00004A68                 pop     ebp
.text$mn:00004A69                 retn
.text$mn:00004A69 ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z endp
.text$mn:00004A69
.text$mn:00004A69 ; ---------------------------------------------------------------------------
.text$mn:00004A6A                 align 4
.text$mn:00004A6A _text$mn        ends
.text$mn:00004A6A
.text$mn:00004A6C ; ===========================================================================
.text$mn:00004A6C
.text$mn:00004A6C ; Segment type: Pure code
.text$mn:00004A6C ; Segment permissions: Read/Execute
.text$mn:00004A6C _text$mn        segment para public 'CODE' use32
.text$mn:00004A6C                 assume cs:_text$mn
.text$mn:00004A6C                 ;org 4A6Ch
.text$mn:00004A6C ; COMDAT (pick any)
.text$mn:00004A6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A6C
.text$mn:00004A6C ; =============== S U B R O U T I N E =======================================
.text$mn:00004A6C
.text$mn:00004A6C ; Attributes: bp-based frame
.text$mn:00004A6C
.text$mn:00004A6C ; public: void __thiscall std::_Wrap_alloc<class std::allocator<char>>::destroy<char *>(char * *)
.text$mn:00004A6C                 public ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
.text$mn:00004A6C ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc near
.text$mn:00004A6C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+3Ap
.text$mn:00004A6C
.text$mn:00004A6C var_4           = dword ptr -4
.text$mn:00004A6C arg_0           = dword ptr  8
.text$mn:00004A6C
.text$mn:00004A6C                 push    ebp
.text$mn:00004A6D                 mov     ebp, esp
.text$mn:00004A6F                 push    ecx
.text$mn:00004A70                 mov     [ebp+var_4], ecx
.text$mn:00004A73                 mov     eax, [ebp+arg_0]
.text$mn:00004A76                 push    eax
.text$mn:00004A77                 mov     ecx, [ebp+var_4]
.text$mn:00004A7A                 push    ecx
.text$mn:00004A7B                 call    ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)
.text$mn:00004A80                 add     esp, 8
.text$mn:00004A83                 mov     esp, ebp
.text$mn:00004A85                 pop     ebp
.text$mn:00004A86                 retn    4
.text$mn:00004A86 ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z endp
.text$mn:00004A86
.text$mn:00004A86 ; ---------------------------------------------------------------------------
.text$mn:00004A89                 align 4
.text$mn:00004A89 _text$mn        ends
.text$mn:00004A89
.text$mn:00004A8C ; ===========================================================================
.text$mn:00004A8C
.text$mn:00004A8C ; Segment type: Pure code
.text$mn:00004A8C ; Segment permissions: Read/Execute
.text$mn:00004A8C _text$mn        segment para public 'CODE' use32
.text$mn:00004A8C                 assume cs:_text$mn
.text$mn:00004A8C                 ;org 4A8Ch
.text$mn:00004A8C ; COMDAT (pick any)
.text$mn:00004A8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A8C
.text$mn:00004A8C ; =============== S U B R O U T I N E =======================================
.text$mn:00004A8C
.text$mn:00004A8C ; Attributes: bp-based frame
.text$mn:00004A8C
.text$mn:00004A8C ; public: void __thiscall std::allocator<char>::destroy<char *>(char * *)
.text$mn:00004A8C                 public ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
.text$mn:00004A8C ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
.text$mn:00004A8C                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)+Ap
.text$mn:00004A8C
.text$mn:00004A8C var_4           = dword ptr -4
.text$mn:00004A8C
.text$mn:00004A8C                 push    ebp
.text$mn:00004A8D                 mov     ebp, esp
.text$mn:00004A8F                 push    ecx
.text$mn:00004A90                 mov     [ebp+var_4], ecx
.text$mn:00004A93                 mov     esp, ebp
.text$mn:00004A95                 pop     ebp
.text$mn:00004A96                 retn    4
.text$mn:00004A96 ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z endp
.text$mn:00004A96
.text$mn:00004A96 ; ---------------------------------------------------------------------------
.text$mn:00004A99                 align 4
.text$mn:00004A99 _text$mn        ends
.text$mn:00004A99
.text$mn:00004A9C ; ===========================================================================
.text$mn:00004A9C
.text$mn:00004A9C ; Segment type: Pure code
.text$mn:00004A9C ; Segment permissions: Read/Execute
.text$mn:00004A9C _text$mn        segment para public 'CODE' use32
.text$mn:00004A9C                 assume cs:_text$mn
.text$mn:00004A9C                 ;org 4A9Ch
.text$mn:00004A9C ; COMDAT (pick any)
.text$mn:00004A9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A9C
.text$mn:00004A9C ; =============== S U B R O U T I N E =======================================
.text$mn:00004A9C
.text$mn:00004A9C ; Attributes: bp-based frame
.text$mn:00004A9C
.text$mn:00004A9C ; public: static void __cdecl std::allocator_traits<class std::allocator<char>>::destroy<char *>(class std::allocator<char> &, char * *)
.text$mn:00004A9C                 public ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
.text$mn:00004A9C ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
.text$mn:00004A9C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)+Fp
.text$mn:00004A9C
.text$mn:00004A9C arg_0           = dword ptr  8
.text$mn:00004A9C arg_4           = dword ptr  0Ch
.text$mn:00004A9C
.text$mn:00004A9C                 push    ebp
.text$mn:00004A9D                 mov     ebp, esp
.text$mn:00004A9F                 mov     eax, [ebp+arg_4]
.text$mn:00004AA2                 push    eax
.text$mn:00004AA3                 mov     ecx, [ebp+arg_0]
.text$mn:00004AA6                 call    ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>(char * *)
.text$mn:00004AAB                 pop     ebp
.text$mn:00004AAC                 retn
.text$mn:00004AAC ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z endp
.text$mn:00004AAC
.text$mn:00004AAC ; ---------------------------------------------------------------------------
.text$mn:00004AAD                 align 10h
.text$mn:00004AAD _text$mn        ends
.text$mn:00004AAD
.text$mn:00004AB0 ; ===========================================================================
.text$mn:00004AB0
.text$mn:00004AB0 ; Segment type: Pure code
.text$mn:00004AB0 ; Segment permissions: Read/Execute
.text$mn:00004AB0 _text$mn        segment para public 'CODE' use32
.text$mn:00004AB0                 assume cs:_text$mn
.text$mn:00004AB0                 ;org 4AB0h
.text$mn:00004AB0 ; COMDAT (pick any)
.text$mn:00004AB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004AB0
.text$mn:00004AB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004AB0
.text$mn:00004AB0 ; Attributes: bp-based frame
.text$mn:00004AB0
.text$mn:00004AB0 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00004AB0                 public ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z
.text$mn:00004AB0 ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z proc near
.text$mn:00004AB0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+3Ap
.text$mn:00004AB0
.text$mn:00004AB0 var_4           = dword ptr -4
.text$mn:00004AB0 arg_0           = dword ptr  8
.text$mn:00004AB0
.text$mn:00004AB0                 push    ebp
.text$mn:00004AB1                 mov     ebp, esp
.text$mn:00004AB3                 push    ecx
.text$mn:00004AB4                 mov     [ebp+var_4], ecx
.text$mn:00004AB7                 mov     eax, [ebp+arg_0]
.text$mn:00004ABA                 push    eax
.text$mn:00004ABB                 mov     ecx, [ebp+var_4]
.text$mn:00004ABE                 push    ecx
.text$mn:00004ABF                 call    ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)
.text$mn:00004AC4                 add     esp, 8
.text$mn:00004AC7                 mov     esp, ebp
.text$mn:00004AC9                 pop     ebp
.text$mn:00004ACA                 retn    4
.text$mn:00004ACA ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z endp
.text$mn:00004ACA
.text$mn:00004ACA ; ---------------------------------------------------------------------------
.text$mn:00004ACD                 align 10h
.text$mn:00004ACD _text$mn        ends
.text$mn:00004ACD
.text$mn:00004AD0 ; ===========================================================================
.text$mn:00004AD0
.text$mn:00004AD0 ; Segment type: Pure code
.text$mn:00004AD0 ; Segment permissions: Read/Execute
.text$mn:00004AD0 _text$mn        segment para public 'CODE' use32
.text$mn:00004AD0                 assume cs:_text$mn
.text$mn:00004AD0                 ;org 4AD0h
.text$mn:00004AD0 ; COMDAT (pick any)
.text$mn:00004AD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004AD0
.text$mn:00004AD0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004AD0
.text$mn:00004AD0 ; Attributes: bp-based frame
.text$mn:00004AD0
.text$mn:00004AD0 ; public: void __thiscall std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00004AD0                 public ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z
.text$mn:00004AD0 ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z proc near
.text$mn:00004AD0                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)+Ap
.text$mn:00004AD0
.text$mn:00004AD0 var_4           = dword ptr -4
.text$mn:00004AD0
.text$mn:00004AD0                 push    ebp
.text$mn:00004AD1                 mov     ebp, esp
.text$mn:00004AD3                 push    ecx
.text$mn:00004AD4                 mov     [ebp+var_4], ecx
.text$mn:00004AD7                 mov     esp, ebp
.text$mn:00004AD9                 pop     ebp
.text$mn:00004ADA                 retn    4
.text$mn:00004ADA ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z endp
.text$mn:00004ADA
.text$mn:00004ADA ; ---------------------------------------------------------------------------
.text$mn:00004ADD                 align 10h
.text$mn:00004ADD _text$mn        ends
.text$mn:00004ADD
.text$mn:00004AE0 ; ===========================================================================
.text$mn:00004AE0
.text$mn:00004AE0 ; Segment type: Pure code
.text$mn:00004AE0 ; Segment permissions: Read/Execute
.text$mn:00004AE0 _text$mn        segment para public 'CODE' use32
.text$mn:00004AE0                 assume cs:_text$mn
.text$mn:00004AE0                 ;org 4AE0h
.text$mn:00004AE0 ; COMDAT (pick any)
.text$mn:00004AE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004AE0
.text$mn:00004AE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004AE0
.text$mn:00004AE0 ; Attributes: bp-based frame
.text$mn:00004AE0
.text$mn:00004AE0 ; public: static void __cdecl std::allocator_traits<class std::allocator<wchar_t>>::destroy<wchar_t *>(class std::allocator<wchar_t> &, wchar_t * *)
.text$mn:00004AE0                 public ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z
.text$mn:00004AE0 ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z proc near
.text$mn:00004AE0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)+Fp
.text$mn:00004AE0
.text$mn:00004AE0 arg_0           = dword ptr  8
.text$mn:00004AE0 arg_4           = dword ptr  0Ch
.text$mn:00004AE0
.text$mn:00004AE0                 push    ebp
.text$mn:00004AE1                 mov     ebp, esp
.text$mn:00004AE3                 mov     eax, [ebp+arg_4]
.text$mn:00004AE6                 push    eax
.text$mn:00004AE7                 mov     ecx, [ebp+arg_0]
.text$mn:00004AEA                 call    ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00004AEF                 pop     ebp
.text$mn:00004AF0                 retn
.text$mn:00004AF0 ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z endp
.text$mn:00004AF0
.text$mn:00004AF0 ; ---------------------------------------------------------------------------
.text$mn:00004AF1                 align 4
.text$mn:00004AF1 _text$mn        ends
.text$mn:00004AF1
.text$mn:00004AF4 ; ===========================================================================
.text$mn:00004AF4
.text$mn:00004AF4 ; Segment type: Pure code
.text$mn:00004AF4 ; Segment permissions: Read/Execute
.text$mn:00004AF4 _text$mn        segment para public 'CODE' use32
.text$mn:00004AF4                 assume cs:_text$mn
.text$mn:00004AF4                 ;org 4AF4h
.text$mn:00004AF4 ; COMDAT (pick any)
.text$mn:00004AF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004AF4
.text$mn:00004AF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00004AF4
.text$mn:00004AF4 ; Attributes: bp-based frame
.text$mn:00004AF4
.text$mn:00004AF4 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:00004AF4                 public ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:00004AF4 ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:00004AF4                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Free_proxy(void)+22p
.text$mn:00004AF4
.text$mn:00004AF4 var_4           = dword ptr -4
.text$mn:00004AF4 arg_0           = dword ptr  8
.text$mn:00004AF4
.text$mn:00004AF4                 push    ebp
.text$mn:00004AF5                 mov     ebp, esp
.text$mn:00004AF7                 push    ecx
.text$mn:00004AF8                 mov     [ebp+var_4], ecx
.text$mn:00004AFB                 mov     eax, [ebp+arg_0]
.text$mn:00004AFE                 push    eax
.text$mn:00004AFF                 mov     ecx, [ebp+var_4]
.text$mn:00004B02                 push    ecx
.text$mn:00004B03                 call    ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *)
.text$mn:00004B08                 add     esp, 8
.text$mn:00004B0B                 mov     esp, ebp
.text$mn:00004B0D                 pop     ebp
.text$mn:00004B0E                 retn    4
.text$mn:00004B0E ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:00004B0E
.text$mn:00004B0E ; ---------------------------------------------------------------------------
.text$mn:00004B11                 align 4
.text$mn:00004B11 _text$mn        ends
.text$mn:00004B11
.text$mn:00004B14 ; ===========================================================================
.text$mn:00004B14
.text$mn:00004B14 ; Segment type: Pure code
.text$mn:00004B14 ; Segment permissions: Read/Execute
.text$mn:00004B14 _text$mn        segment para public 'CODE' use32
.text$mn:00004B14                 assume cs:_text$mn
.text$mn:00004B14                 ;org 4B14h
.text$mn:00004B14 ; COMDAT (pick any)
.text$mn:00004B14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B14
.text$mn:00004B14 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B14
.text$mn:00004B14 ; Attributes: bp-based frame
.text$mn:00004B14
.text$mn:00004B14 ; public: void __thiscall std::allocator<struct std::_Container_proxy>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:00004B14                 public ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:00004B14 ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:00004B14                                         ; CODE XREF: std::allocator_traits<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *)+Ap
.text$mn:00004B14                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+22p ...
.text$mn:00004B14
.text$mn:00004B14 var_4           = dword ptr -4
.text$mn:00004B14
.text$mn:00004B14                 push    ebp
.text$mn:00004B15                 mov     ebp, esp
.text$mn:00004B17                 push    ecx
.text$mn:00004B18                 mov     [ebp+var_4], ecx
.text$mn:00004B1B                 mov     esp, ebp
.text$mn:00004B1D                 pop     ebp
.text$mn:00004B1E                 retn    4
.text$mn:00004B1E ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:00004B1E
.text$mn:00004B1E ; ---------------------------------------------------------------------------
.text$mn:00004B21                 align 4
.text$mn:00004B21 _text$mn        ends
.text$mn:00004B21
.text$mn:00004B24 ; ===========================================================================
.text$mn:00004B24
.text$mn:00004B24 ; Segment type: Pure code
.text$mn:00004B24 ; Segment permissions: Read/Execute
.text$mn:00004B24 _text$mn        segment para public 'CODE' use32
.text$mn:00004B24                 assume cs:_text$mn
.text$mn:00004B24                 ;org 4B24h
.text$mn:00004B24 ; COMDAT (pick any)
.text$mn:00004B24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B24
.text$mn:00004B24 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B24
.text$mn:00004B24 ; Attributes: bp-based frame
.text$mn:00004B24
.text$mn:00004B24 ; public: static void __cdecl std::allocator_traits<class std::allocator<struct std::_Container_proxy>>::destroy<struct std::_Container_proxy>(class std::allocator<struct std::_Container_proxy> &, struct std::_Container_proxy *)
.text$mn:00004B24                 public ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z
.text$mn:00004B24 ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z proc near
.text$mn:00004B24                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::_Container_proxy *)+Fp
.text$mn:00004B24
.text$mn:00004B24 arg_0           = dword ptr  8
.text$mn:00004B24 arg_4           = dword ptr  0Ch
.text$mn:00004B24
.text$mn:00004B24                 push    ebp
.text$mn:00004B25                 mov     ebp, esp
.text$mn:00004B27                 mov     eax, [ebp+arg_4]
.text$mn:00004B2A                 push    eax
.text$mn:00004B2B                 mov     ecx, [ebp+arg_0]
.text$mn:00004B2E                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:00004B33                 pop     ebp
.text$mn:00004B34                 retn
.text$mn:00004B34 ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z endp
.text$mn:00004B34
.text$mn:00004B34 ; ---------------------------------------------------------------------------
.text$mn:00004B35                 align 4
.text$mn:00004B35 _text$mn        ends
.text$mn:00004B35
.text$mn:00004B38 ; ===========================================================================
.text$mn:00004B38
.text$mn:00004B38 ; Segment type: Pure code
.text$mn:00004B38 ; Segment permissions: Read/Execute
.text$mn:00004B38 _text$mn        segment para public 'CODE' use32
.text$mn:00004B38                 assume cs:_text$mn
.text$mn:00004B38                 ;org 4B38h
.text$mn:00004B38 ; COMDAT (pick any)
.text$mn:00004B38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B38
.text$mn:00004B38 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B38
.text$mn:00004B38 ; Attributes: bp-based frame
.text$mn:00004B38
.text$mn:00004B38 ; char * & __cdecl std::forward<char * &>(char * &)
.text$mn:00004B38                 public ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
.text$mn:00004B38 ??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
.text$mn:00004B38                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+Bp
.text$mn:00004B38                                         ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)+4Ap ...
.text$mn:00004B38
.text$mn:00004B38 arg_0           = dword ptr  8
.text$mn:00004B38
.text$mn:00004B38                 push    ebp
.text$mn:00004B39                 mov     ebp, esp
.text$mn:00004B3B                 mov     eax, [ebp+arg_0]
.text$mn:00004B3E                 pop     ebp
.text$mn:00004B3F                 retn
.text$mn:00004B3F ??$forward@AAPAD@std@@YAAAPADAAPAD@Z endp
.text$mn:00004B3F
.text$mn:00004B3F _text$mn        ends
.text$mn:00004B3F
.text$mn:00004B40 ; ===========================================================================
.text$mn:00004B40
.text$mn:00004B40 ; Segment type: Pure code
.text$mn:00004B40 ; Segment permissions: Read/Execute
.text$mn:00004B40 _text$mn        segment para public 'CODE' use32
.text$mn:00004B40                 assume cs:_text$mn
.text$mn:00004B40                 ;org 4B40h
.text$mn:00004B40 ; COMDAT (pick any)
.text$mn:00004B40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B40
.text$mn:00004B40 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B40
.text$mn:00004B40 ; Attributes: bp-based frame
.text$mn:00004B40
.text$mn:00004B40 ; wchar_t * & __cdecl std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00004B40                 public ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z
.text$mn:00004B40 ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z proc near
.text$mn:00004B40                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+Bp
.text$mn:00004B40                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+4Ap ...
.text$mn:00004B40
.text$mn:00004B40 arg_0           = dword ptr  8
.text$mn:00004B40
.text$mn:00004B40                 push    ebp
.text$mn:00004B41                 mov     ebp, esp
.text$mn:00004B43                 mov     eax, [ebp+arg_0]
.text$mn:00004B46                 pop     ebp
.text$mn:00004B47                 retn
.text$mn:00004B47 ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z endp
.text$mn:00004B47
.text$mn:00004B47 _text$mn        ends
.text$mn:00004B47
.text$mn:00004B48 ; ===========================================================================
.text$mn:00004B48
.text$mn:00004B48 ; Segment type: Pure code
.text$mn:00004B48 ; Segment permissions: Read/Execute
.text$mn:00004B48 _text$mn        segment para public 'CODE' use32
.text$mn:00004B48                 assume cs:_text$mn
.text$mn:00004B48                 ;org 4B48h
.text$mn:00004B48 ; COMDAT (pick any)
.text$mn:00004B48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B48
.text$mn:00004B48 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B48
.text$mn:00004B48 ; Attributes: bp-based frame
.text$mn:00004B48
.text$mn:00004B48 ; wchar_t const * & __cdecl std::forward<wchar_t const * &>(wchar_t const * &)
.text$mn:00004B48                 public ??$forward@AAPB_W@std@@YAAAPB_WAAPB_W@Z
.text$mn:00004B48 ??$forward@AAPB_W@std@@YAAAPB_WAAPB_W@Z proc near
.text$mn:00004B48                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const * &>(wchar_t const * *,wchar_t const * &)+Bp
.text$mn:00004B48                                         ; std::allocator<wchar_t const *>::construct<wchar_t const *,wchar_t const * &>(wchar_t const * *,wchar_t const * &)+4Ap ...
.text$mn:00004B48
.text$mn:00004B48 arg_0           = dword ptr  8
.text$mn:00004B48
.text$mn:00004B48                 push    ebp
.text$mn:00004B49                 mov     ebp, esp
.text$mn:00004B4B                 mov     eax, [ebp+arg_0]
.text$mn:00004B4E                 pop     ebp
.text$mn:00004B4F                 retn
.text$mn:00004B4F ??$forward@AAPB_W@std@@YAAAPB_WAAPB_W@Z endp
.text$mn:00004B4F
.text$mn:00004B4F _text$mn        ends
.text$mn:00004B4F
.text$mn:00004B50 ; ===========================================================================
.text$mn:00004B50
.text$mn:00004B50 ; Segment type: Pure code
.text$mn:00004B50 ; Segment permissions: Read/Execute
.text$mn:00004B50 _text$mn        segment para public 'CODE' use32
.text$mn:00004B50                 assume cs:_text$mn
.text$mn:00004B50                 ;org 4B50h
.text$mn:00004B50 ; COMDAT (pick any)
.text$mn:00004B50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B50
.text$mn:00004B50 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B50
.text$mn:00004B50 ; Attributes: bp-based frame
.text$mn:00004B50
.text$mn:00004B50 ; wchar_t const * const & __cdecl std::forward<wchar_t const * const &>(wchar_t const * const &)
.text$mn:00004B50                 public ??$forward@ABQB_W@std@@YAABQB_WABQB_W@Z
.text$mn:00004B50 ??$forward@ABQB_W@std@@YAABQB_WABQB_W@Z proc near
.text$mn:00004B50                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const * const &>(wchar_t const * *,wchar_t const * const &)+Bp
.text$mn:00004B50                                         ; std::allocator_traits<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const * const &>(std::allocator<wchar_t const *> &,wchar_t const * *,wchar_t const * const &)+7p
.text$mn:00004B50
.text$mn:00004B50 arg_0           = dword ptr  8
.text$mn:00004B50
.text$mn:00004B50                 push    ebp
.text$mn:00004B51                 mov     ebp, esp
.text$mn:00004B53                 mov     eax, [ebp+arg_0]
.text$mn:00004B56                 pop     ebp
.text$mn:00004B57                 retn
.text$mn:00004B57 ??$forward@ABQB_W@std@@YAABQB_WABQB_W@Z endp
.text$mn:00004B57
.text$mn:00004B57 _text$mn        ends
.text$mn:00004B57
.text$mn:00004B58 ; ===========================================================================
.text$mn:00004B58
.text$mn:00004B58 ; Segment type: Pure code
.text$mn:00004B58 ; Segment permissions: Read/Execute
.text$mn:00004B58 _text$mn        segment para public 'CODE' use32
.text$mn:00004B58                 assume cs:_text$mn
.text$mn:00004B58                 ;org 4B58h
.text$mn:00004B58 ; COMDAT (pick any)
.text$mn:00004B58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B58
.text$mn:00004B58 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B58
.text$mn:00004B58 ; Attributes: bp-based frame
.text$mn:00004B58
.text$mn:00004B58 ; wchar_t const * && __cdecl std::forward<wchar_t const *>(wchar_t const * &)
.text$mn:00004B58                 public ??$forward@PB_W@std@@YA$$QAPB_WAAPB_W@Z
.text$mn:00004B58 ??$forward@PB_W@std@@YA$$QAPB_WAAPB_W@Z proc near
.text$mn:00004B58                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const *>(wchar_t const * *,wchar_t const * &&)+Bp
.text$mn:00004B58                                         ; std::allocator<wchar_t const *>::construct<wchar_t const *,wchar_t const *>(wchar_t const * *,wchar_t const * &&)+4Ap ...
.text$mn:00004B58
.text$mn:00004B58 arg_0           = dword ptr  8
.text$mn:00004B58
.text$mn:00004B58                 push    ebp
.text$mn:00004B59                 mov     ebp, esp
.text$mn:00004B5B                 mov     eax, [ebp+arg_0]
.text$mn:00004B5E                 pop     ebp
.text$mn:00004B5F                 retn
.text$mn:00004B5F ??$forward@PB_W@std@@YA$$QAPB_WAAPB_W@Z endp
.text$mn:00004B5F
.text$mn:00004B5F _text$mn        ends
.text$mn:00004B5F
.text$mn:00004B60 ; ===========================================================================
.text$mn:00004B60
.text$mn:00004B60 ; Segment type: Pure code
.text$mn:00004B60 ; Segment permissions: Read/Execute
.text$mn:00004B60 _text$mn        segment para public 'CODE' use32
.text$mn:00004B60                 assume cs:_text$mn
.text$mn:00004B60                 ;org 4B60h
.text$mn:00004B60 ; COMDAT (pick any)
.text$mn:00004B60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B60
.text$mn:00004B60 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B60
.text$mn:00004B60 ; Attributes: bp-based frame
.text$mn:00004B60
.text$mn:00004B60 ; struct std::_Container_proxy && __cdecl std::forward<struct std::_Container_proxy>(struct std::_Container_proxy &)
.text$mn:00004B60                 public ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
.text$mn:00004B60 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc near
.text$mn:00004B60                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+Bp
.text$mn:00004B60                                         ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+4Ap ...
.text$mn:00004B60
.text$mn:00004B60 arg_0           = dword ptr  8
.text$mn:00004B60
.text$mn:00004B60                 push    ebp
.text$mn:00004B61                 mov     ebp, esp
.text$mn:00004B63                 mov     eax, [ebp+arg_0]
.text$mn:00004B66                 pop     ebp
.text$mn:00004B67                 retn
.text$mn:00004B67 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z endp
.text$mn:00004B67
.text$mn:00004B67 _text$mn        ends
.text$mn:00004B67
.text$mn:00004B68 ; ===========================================================================
.text$mn:00004B68
.text$mn:00004B68 ; Segment type: Pure code
.text$mn:00004B68 ; Segment permissions: Read/Execute
.text$mn:00004B68 _text$mn        segment para public 'CODE' use32
.text$mn:00004B68                 assume cs:_text$mn
.text$mn:00004B68                 ;org 4B68h
.text$mn:00004B68 ; COMDAT (pick any)
.text$mn:00004B68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B68
.text$mn:00004B68 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B68
.text$mn:00004B68 ; Attributes: bp-based frame
.text$mn:00004B68
.text$mn:00004B68 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> && __cdecl std::forward<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:00004B68                 public ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
.text$mn:00004B68 ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z proc near
.text$mn:00004B68                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+54p
.text$mn:00004B68                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+D6p
.text$mn:00004B68
.text$mn:00004B68 arg_0           = dword ptr  8
.text$mn:00004B68
.text$mn:00004B68                 push    ebp
.text$mn:00004B69                 mov     ebp, esp
.text$mn:00004B6B                 mov     eax, [ebp+arg_0]
.text$mn:00004B6E                 pop     ebp
.text$mn:00004B6F                 retn
.text$mn:00004B6F ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z endp
.text$mn:00004B6F
.text$mn:00004B6F _text$mn        ends
.text$mn:00004B6F
.text$mn:00004B70 ; ===========================================================================
.text$mn:00004B70
.text$mn:00004B70 ; Segment type: Pure code
.text$mn:00004B70 ; Segment permissions: Read/Execute
.text$mn:00004B70 _text$mn        segment para public 'CODE' use32
.text$mn:00004B70                 assume cs:_text$mn
.text$mn:00004B70                 ;org 4B70h
.text$mn:00004B70 ; COMDAT (pick any)
.text$mn:00004B70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B70
.text$mn:00004B70 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B70
.text$mn:00004B70 ; Attributes: bp-based frame
.text$mn:00004B70
.text$mn:00004B70 ; int __stdcall std::_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>(struct std::_Iterator_base12 *)
.text$mn:00004B70                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:00004B70 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$mn:00004B70                                         ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>> const &)+2Dp
.text$mn:00004B70
.text$mn:00004B70 var_10          = dword ptr -10h
.text$mn:00004B70 var_C           = dword ptr -0Ch
.text$mn:00004B70 var_4           = dword ptr -4
.text$mn:00004B70 arg_0           = dword ptr  8
.text$mn:00004B70
.text$mn:00004B70                 push    ebp
.text$mn:00004B71                 mov     ebp, esp
.text$mn:00004B73                 push    0FFFFFFFFh
.text$mn:00004B75                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:00004B7A                 mov     eax, large fs:0
.text$mn:00004B80                 push    eax
.text$mn:00004B81                 push    ecx
.text$mn:00004B82                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004B87                 xor     eax, ebp
.text$mn:00004B89                 push    eax
.text$mn:00004B8A                 lea     eax, [ebp+var_C]
.text$mn:00004B8D                 mov     large fs:0, eax
.text$mn:00004B93                 mov     [ebp+var_10], ecx
.text$mn:00004B96                 mov     eax, [ebp+arg_0]
.text$mn:00004B99                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00004B9A                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004B9D                 call    ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)
.text$mn:00004BA2                 mov     [ebp+var_4], 0
.text$mn:00004BA9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004BB0                 mov     eax, [ebp+var_10]
.text$mn:00004BB3                 mov     ecx, [ebp+var_C]
.text$mn:00004BB6                 mov     large fs:0, ecx
.text$mn:00004BBD                 pop     ecx
.text$mn:00004BBE                 mov     esp, ebp
.text$mn:00004BC0                 pop     ebp
.text$mn:00004BC1                 retn    4
.text$mn:00004BC1 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$mn:00004BC1
.text$mn:00004BC1 _text$mn        ends
.text$mn:00004BC1
.text$x:00004BC4 ; ===========================================================================
.text$x:00004BC4
.text$x:00004BC4 ; Segment type: Pure code
.text$x:00004BC4 ; Segment permissions: Read/Execute
.text$x:00004BC4 _text$x         segment para public 'CODE' use32
.text$x:00004BC4                 assume cs:_text$x
.text$x:00004BC4                 ;org 4BC4h
.text$x:00004BC4 ; COMDAT (pick associative to section at 4B70)
.text$x:00004BC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004BC4
.text$x:00004BC4 ; =============== S U B R O U T I N E =======================================
.text$x:00004BC4
.text$x:00004BC4
.text$x:00004BC4 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 proc near
.text$x:00004BC4                                         ; DATA XREF: .xdata$x:0000BBE8o
.text$x:00004BC4                 mov     ecx, [ebp-10h]  ; this
.text$x:00004BC7                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00004BC7 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 endp
.text$x:00004BC7
.text$x:00004BCC
.text$x:00004BCC ; =============== S U B R O U T I N E =======================================
.text$x:00004BCC
.text$x:00004BCC
.text$x:00004BCC __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$x:00004BCC                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12> const &)+5o
.text$x:00004BCC
.text$x:00004BCC arg_4           = dword ptr  8
.text$x:00004BCC
.text$x:00004BCC                 mov     edx, [esp+arg_4]
.text$x:00004BD0                 lea     eax, [edx+0Ch]
.text$x:00004BD3                 mov     ecx, [edx-8]
.text$x:00004BD6                 xor     ecx, eax
.text$x:00004BD8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004BDD                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$x:00004BE2                 jmp     ___CxxFrameHandler3
.text$x:00004BE2 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$x:00004BE2
.text$x:00004BE2 ; ---------------------------------------------------------------------------
.text$x:00004BE7                 align 4
.text$x:00004BE7 _text$x         ends
.text$x:00004BE7
.text$mn:00004BE8 ; ===========================================================================
.text$mn:00004BE8
.text$mn:00004BE8 ; Segment type: Pure code
.text$mn:00004BE8 ; Segment permissions: Read/Execute
.text$mn:00004BE8 _text$mn        segment para public 'CODE' use32
.text$mn:00004BE8                 assume cs:_text$mn
.text$mn:00004BE8                 ;org 4BE8h
.text$mn:00004BE8 ; COMDAT (pick any)
.text$mn:00004BE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004BE8
.text$mn:00004BE8 ; =============== S U B R O U T I N E =======================================
.text$mn:00004BE8
.text$mn:00004BE8 ; Attributes: bp-based frame
.text$mn:00004BE8
.text$mn:00004BE8 ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, wchar_t const *, int, wchar_t const * const *, wchar_t const * const &, struct std::_Iterator_base12>::_Iterator012<struct std::random_access_iterator_tag, wchar_t const *, int, wchar_t const * const *, wchar_t const * const &, struct std::_Iterator_base12>(void)
.text$mn:00004BE8                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00004BE8 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:00004BE8                                         ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(wchar_t const * *,std::_Container_base12 const *)+29p
.text$mn:00004BE8
.text$mn:00004BE8 var_10          = dword ptr -10h
.text$mn:00004BE8 var_C           = dword ptr -0Ch
.text$mn:00004BE8 var_4           = dword ptr -4
.text$mn:00004BE8
.text$mn:00004BE8                 push    ebp
.text$mn:00004BE9                 mov     ebp, esp
.text$mn:00004BEB                 push    0FFFFFFFFh
.text$mn:00004BED                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00004BF2                 mov     eax, large fs:0
.text$mn:00004BF8                 push    eax
.text$mn:00004BF9                 push    ecx
.text$mn:00004BFA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004BFF                 xor     eax, ebp
.text$mn:00004C01                 push    eax
.text$mn:00004C02                 lea     eax, [ebp+var_C]
.text$mn:00004C05                 mov     large fs:0, eax
.text$mn:00004C0B                 mov     [ebp+var_10], ecx
.text$mn:00004C0E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004C11                 call    ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12(void)
.text$mn:00004C16                 mov     [ebp+var_4], 0
.text$mn:00004C1D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004C24                 mov     eax, [ebp+var_10]
.text$mn:00004C27                 mov     ecx, [ebp+var_C]
.text$mn:00004C2A                 mov     large fs:0, ecx
.text$mn:00004C31                 pop     ecx
.text$mn:00004C32                 mov     esp, ebp
.text$mn:00004C34                 pop     ebp
.text$mn:00004C35                 retn
.text$mn:00004C35 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00004C35
.text$mn:00004C35 ; ---------------------------------------------------------------------------
.text$mn:00004C36                 align 4
.text$mn:00004C36 _text$mn        ends
.text$mn:00004C36
.text$x:00004C38 ; ===========================================================================
.text$x:00004C38
.text$x:00004C38 ; Segment type: Pure code
.text$x:00004C38 ; Segment permissions: Read/Execute
.text$x:00004C38 _text$x         segment para public 'CODE' use32
.text$x:00004C38                 assume cs:_text$x
.text$x:00004C38                 ;org 4C38h
.text$x:00004C38 ; COMDAT (pick associative to section at 4BE8)
.text$x:00004C38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004C38
.text$x:00004C38 ; =============== S U B R O U T I N E =======================================
.text$x:00004C38
.text$x:00004C38
.text$x:00004C38 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00004C38                                         ; DATA XREF: .xdata$x:0000BB90o
.text$x:00004C38                 mov     ecx, [ebp-10h]  ; this
.text$x:00004C3B                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00004C3B __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:00004C3B
.text$x:00004C40
.text$x:00004C40 ; =============== S U B R O U T I N E =======================================
.text$x:00004C40
.text$x:00004C40
.text$x:00004C40 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00004C40                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>(void)+5o
.text$x:00004C40
.text$x:00004C40 arg_4           = dword ptr  8
.text$x:00004C40
.text$x:00004C40                 mov     edx, [esp+arg_4]
.text$x:00004C44                 lea     eax, [edx+0Ch]
.text$x:00004C47                 mov     ecx, [edx-8]
.text$x:00004C4A                 xor     ecx, eax
.text$x:00004C4C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004C51                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$x:00004C56                 jmp     ___CxxFrameHandler3
.text$x:00004C56 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:00004C56
.text$x:00004C56 ; ---------------------------------------------------------------------------
.text$x:00004C5B                 align 4
.text$x:00004C5B _text$x         ends
.text$x:00004C5B
.text$mn:00004C5C ; ===========================================================================
.text$mn:00004C5C
.text$mn:00004C5C ; Segment type: Pure code
.text$mn:00004C5C ; Segment permissions: Read/Execute
.text$mn:00004C5C _text$mn        segment para public 'CODE' use32
.text$mn:00004C5C                 assume cs:_text$mn
.text$mn:00004C5C                 ;org 4C5Ch
.text$mn:00004C5C ; COMDAT (pick any)
.text$mn:00004C5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C5C
.text$mn:00004C5C ; =============== S U B R O U T I N E =======================================
.text$mn:00004C5C
.text$mn:00004C5C ; Attributes: bp-based frame
.text$mn:00004C5C
.text$mn:00004C5C ; int __stdcall std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(struct std::_Iterator_base12 *)
.text$mn:00004C5C                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:00004C5C ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$mn:00004C5C                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+2Dp
.text$mn:00004C5C
.text$mn:00004C5C var_10          = dword ptr -10h
.text$mn:00004C5C var_C           = dword ptr -0Ch
.text$mn:00004C5C var_4           = dword ptr -4
.text$mn:00004C5C arg_0           = dword ptr  8
.text$mn:00004C5C
.text$mn:00004C5C                 push    ebp
.text$mn:00004C5D                 mov     ebp, esp
.text$mn:00004C5F                 push    0FFFFFFFFh
.text$mn:00004C61                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:00004C66                 mov     eax, large fs:0
.text$mn:00004C6C                 push    eax
.text$mn:00004C6D                 push    ecx
.text$mn:00004C6E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004C73                 xor     eax, ebp
.text$mn:00004C75                 push    eax
.text$mn:00004C76                 lea     eax, [ebp+var_C]
.text$mn:00004C79                 mov     large fs:0, eax
.text$mn:00004C7F                 mov     [ebp+var_10], ecx
.text$mn:00004C82                 mov     eax, [ebp+arg_0]
.text$mn:00004C85                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00004C86                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004C89                 call    ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)
.text$mn:00004C8E                 mov     [ebp+var_4], 0
.text$mn:00004C95                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004C9C                 mov     eax, [ebp+var_10]
.text$mn:00004C9F                 mov     ecx, [ebp+var_C]
.text$mn:00004CA2                 mov     large fs:0, ecx
.text$mn:00004CA9                 pop     ecx
.text$mn:00004CAA                 mov     esp, ebp
.text$mn:00004CAC                 pop     ebp
.text$mn:00004CAD                 retn    4
.text$mn:00004CAD ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$mn:00004CAD
.text$mn:00004CAD _text$mn        ends
.text$mn:00004CAD
.text$x:00004CB0 ; ===========================================================================
.text$x:00004CB0
.text$x:00004CB0 ; Segment type: Pure code
.text$x:00004CB0 ; Segment permissions: Read/Execute
.text$x:00004CB0 _text$x         segment para public 'CODE' use32
.text$x:00004CB0                 assume cs:_text$x
.text$x:00004CB0                 ;org 4CB0h
.text$x:00004CB0 ; COMDAT (pick associative to section at 4C5C)
.text$x:00004CB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004CB0
.text$x:00004CB0 ; =============== S U B R O U T I N E =======================================
.text$x:00004CB0
.text$x:00004CB0
.text$x:00004CB0 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 proc near
.text$x:00004CB0                                         ; DATA XREF: .xdata$x:0000BDA8o
.text$x:00004CB0                 mov     ecx, [ebp-10h]  ; this
.text$x:00004CB3                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00004CB3 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 endp
.text$x:00004CB3
.text$x:00004CB8
.text$x:00004CB8 ; =============== S U B R O U T I N E =======================================
.text$x:00004CB8
.text$x:00004CB8
.text$x:00004CB8 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$x:00004CB8                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12> const &)+5o
.text$x:00004CB8
.text$x:00004CB8 arg_4           = dword ptr  8
.text$x:00004CB8
.text$x:00004CB8                 mov     edx, [esp+arg_4]
.text$x:00004CBC                 lea     eax, [edx+0Ch]
.text$x:00004CBF                 mov     ecx, [edx-8]
.text$x:00004CC2                 xor     ecx, eax
.text$x:00004CC4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004CC9                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$x:00004CCE                 jmp     ___CxxFrameHandler3
.text$x:00004CCE __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$x:00004CCE
.text$x:00004CCE ; ---------------------------------------------------------------------------
.text$x:00004CD3                 align 4
.text$x:00004CD3 _text$x         ends
.text$x:00004CD3
.text$mn:00004CD4 ; ===========================================================================
.text$mn:00004CD4
.text$mn:00004CD4 ; Segment type: Pure code
.text$mn:00004CD4 ; Segment permissions: Read/Execute
.text$mn:00004CD4 _text$mn        segment para public 'CODE' use32
.text$mn:00004CD4                 assume cs:_text$mn
.text$mn:00004CD4                 ;org 4CD4h
.text$mn:00004CD4 ; COMDAT (pick any)
.text$mn:00004CD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004CD4
.text$mn:00004CD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00004CD4
.text$mn:00004CD4 ; Attributes: bp-based frame
.text$mn:00004CD4
.text$mn:00004CD4 ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>::_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>(void)
.text$mn:00004CD4                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00004CD4 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:00004CD4                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)+29p
.text$mn:00004CD4
.text$mn:00004CD4 var_10          = dword ptr -10h
.text$mn:00004CD4 var_C           = dword ptr -0Ch
.text$mn:00004CD4 var_4           = dword ptr -4
.text$mn:00004CD4
.text$mn:00004CD4                 push    ebp
.text$mn:00004CD5                 mov     ebp, esp
.text$mn:00004CD7                 push    0FFFFFFFFh
.text$mn:00004CD9                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00004CDE                 mov     eax, large fs:0
.text$mn:00004CE4                 push    eax
.text$mn:00004CE5                 push    ecx
.text$mn:00004CE6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004CEB                 xor     eax, ebp
.text$mn:00004CED                 push    eax
.text$mn:00004CEE                 lea     eax, [ebp+var_C]
.text$mn:00004CF1                 mov     large fs:0, eax
.text$mn:00004CF7                 mov     [ebp+var_10], ecx
.text$mn:00004CFA                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004CFD                 call    ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12(void)
.text$mn:00004D02                 mov     [ebp+var_4], 0
.text$mn:00004D09                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004D10                 mov     eax, [ebp+var_10]
.text$mn:00004D13                 mov     ecx, [ebp+var_C]
.text$mn:00004D16                 mov     large fs:0, ecx
.text$mn:00004D1D                 pop     ecx
.text$mn:00004D1E                 mov     esp, ebp
.text$mn:00004D20                 pop     ebp
.text$mn:00004D21                 retn
.text$mn:00004D21 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00004D21
.text$mn:00004D21 ; ---------------------------------------------------------------------------
.text$mn:00004D22                 align 4
.text$mn:00004D22 _text$mn        ends
.text$mn:00004D22
.text$x:00004D24 ; ===========================================================================
.text$x:00004D24
.text$x:00004D24 ; Segment type: Pure code
.text$x:00004D24 ; Segment permissions: Read/Execute
.text$x:00004D24 _text$x         segment para public 'CODE' use32
.text$x:00004D24                 assume cs:_text$x
.text$x:00004D24                 ;org 4D24h
.text$x:00004D24 ; COMDAT (pick associative to section at 4CD4)
.text$x:00004D24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004D24
.text$x:00004D24 ; =============== S U B R O U T I N E =======================================
.text$x:00004D24
.text$x:00004D24
.text$x:00004D24 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00004D24                                         ; DATA XREF: .xdata$x:0000BD50o
.text$x:00004D24                 mov     ecx, [ebp-10h]  ; this
.text$x:00004D27                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00004D27 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:00004D27
.text$x:00004D2C
.text$x:00004D2C ; =============== S U B R O U T I N E =======================================
.text$x:00004D2C
.text$x:00004D2C
.text$x:00004D2C __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00004D2C                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)+5o
.text$x:00004D2C
.text$x:00004D2C arg_4           = dword ptr  8
.text$x:00004D2C
.text$x:00004D2C                 mov     edx, [esp+arg_4]
.text$x:00004D30                 lea     eax, [edx+0Ch]
.text$x:00004D33                 mov     ecx, [edx-8]
.text$x:00004D36                 xor     ecx, eax
.text$x:00004D38                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004D3D                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$x:00004D42                 jmp     ___CxxFrameHandler3
.text$x:00004D42 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:00004D42
.text$x:00004D42 ; ---------------------------------------------------------------------------
.text$x:00004D47                 align 4
.text$x:00004D47 _text$x         ends
.text$x:00004D47
.text$mn:00004D48 ; ===========================================================================
.text$mn:00004D48
.text$mn:00004D48 ; Segment type: Pure code
.text$mn:00004D48 ; Segment permissions: Read/Execute
.text$mn:00004D48 _text$mn        segment para public 'CODE' use32
.text$mn:00004D48                 assume cs:_text$mn
.text$mn:00004D48                 ;org 4D48h
.text$mn:00004D48 ; COMDAT (pick any)
.text$mn:00004D48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004D48
.text$mn:00004D48 ; =============== S U B R O U T I N E =======================================
.text$mn:00004D48
.text$mn:00004D48 ; Attributes: bp-based frame
.text$mn:00004D48
.text$mn:00004D48 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(class std::allocator<char> const &)
.text$mn:00004D48                 public ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:00004D48 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$mn:00004D48                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+34p
.text$mn:00004D48                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+34p
.text$mn:00004D48
.text$mn:00004D48 var_10          = dword ptr -10h
.text$mn:00004D48 var_C           = dword ptr -0Ch
.text$mn:00004D48 var_4           = dword ptr -4
.text$mn:00004D48
.text$mn:00004D48                 push    ebp
.text$mn:00004D49                 mov     ebp, esp
.text$mn:00004D4B                 push    0FFFFFFFFh
.text$mn:00004D4D                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:00004D52                 mov     eax, large fs:0
.text$mn:00004D58                 push    eax
.text$mn:00004D59                 push    ecx
.text$mn:00004D5A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004D5F                 xor     eax, ebp
.text$mn:00004D61                 push    eax
.text$mn:00004D62                 lea     eax, [ebp+var_C]
.text$mn:00004D65                 mov     large fs:0, eax
.text$mn:00004D6B                 mov     [ebp+var_10], ecx
.text$mn:00004D6E                 mov     ecx, [ebp+var_10]
.text$mn:00004D71                 call    ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)
.text$mn:00004D76                 mov     [ebp+var_4], 0
.text$mn:00004D7D                 mov     ecx, [ebp+var_10]
.text$mn:00004D80                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:00004D85                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004D8C                 mov     eax, [ebp+var_10]
.text$mn:00004D8F                 mov     ecx, [ebp+var_C]
.text$mn:00004D92                 mov     large fs:0, ecx
.text$mn:00004D99                 pop     ecx
.text$mn:00004D9A                 mov     esp, ebp
.text$mn:00004D9C                 pop     ebp
.text$mn:00004D9D                 retn    4
.text$mn:00004D9D ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$mn:00004D9D
.text$mn:00004D9D _text$mn        ends
.text$mn:00004D9D
.text$x:00004DA0 ; ===========================================================================
.text$x:00004DA0
.text$x:00004DA0 ; Segment type: Pure code
.text$x:00004DA0 ; Segment permissions: Read/Execute
.text$x:00004DA0 _text$x         segment para public 'CODE' use32
.text$x:00004DA0                 assume cs:_text$x
.text$x:00004DA0                 ;org 4DA0h
.text$x:00004DA0 ; COMDAT (pick associative to section at 4D48)
.text$x:00004DA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004DA0
.text$x:00004DA0 ; =============== S U B R O U T I N E =======================================
.text$x:00004DA0
.text$x:00004DA0
.text$x:00004DA0 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
.text$x:00004DA0                                         ; DATA XREF: .xdata$x:0000B124o
.text$x:00004DA0                 mov     ecx, [ebp-10h]
.text$x:00004DA3                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:00004DA3 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 endp
.text$x:00004DA3
.text$x:00004DA8
.text$x:00004DA8 ; =============== S U B R O U T I N E =======================================
.text$x:00004DA8
.text$x:00004DA8
.text$x:00004DA8 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$x:00004DA8                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+5o
.text$x:00004DA8
.text$x:00004DA8 arg_4           = dword ptr  8
.text$x:00004DA8
.text$x:00004DA8                 mov     edx, [esp+arg_4]
.text$x:00004DAC                 lea     eax, [edx+0Ch]
.text$x:00004DAF                 mov     ecx, [edx-8]
.text$x:00004DB2                 xor     ecx, eax
.text$x:00004DB4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004DB9                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$x:00004DBE                 jmp     ___CxxFrameHandler3
.text$x:00004DBE __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$x:00004DBE
.text$x:00004DBE ; ---------------------------------------------------------------------------
.text$x:00004DC3                 align 4
.text$x:00004DC3 _text$x         ends
.text$x:00004DC3
.text$mn:00004DC4 ; ===========================================================================
.text$mn:00004DC4
.text$mn:00004DC4 ; Segment type: Pure code
.text$mn:00004DC4 ; Segment permissions: Read/Execute
.text$mn:00004DC4 _text$mn        segment para public 'CODE' use32
.text$mn:00004DC4                 assume cs:_text$mn
.text$mn:00004DC4                 ;org 4DC4h
.text$mn:00004DC4 ; COMDAT (pick any)
.text$mn:00004DC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004DC4
.text$mn:00004DC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00004DC4
.text$mn:00004DC4 ; Attributes: bp-based frame
.text$mn:00004DC4
.text$mn:00004DC4 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(class std::allocator<wchar_t> const &)
.text$mn:00004DC4                 public ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:00004DC4 ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:00004DC4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+38p
.text$mn:00004DC4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+43p ...
.text$mn:00004DC4
.text$mn:00004DC4 var_10          = dword ptr -10h
.text$mn:00004DC4 var_C           = dword ptr -0Ch
.text$mn:00004DC4 var_4           = dword ptr -4
.text$mn:00004DC4
.text$mn:00004DC4                 push    ebp
.text$mn:00004DC5                 mov     ebp, esp
.text$mn:00004DC7                 push    0FFFFFFFFh
.text$mn:00004DC9                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:00004DCE                 mov     eax, large fs:0
.text$mn:00004DD4                 push    eax
.text$mn:00004DD5                 push    ecx
.text$mn:00004DD6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004DDB                 xor     eax, ebp
.text$mn:00004DDD                 push    eax
.text$mn:00004DDE                 lea     eax, [ebp+var_C]
.text$mn:00004DE1                 mov     large fs:0, eax
.text$mn:00004DE7                 mov     [ebp+var_10], ecx
.text$mn:00004DEA                 mov     ecx, [ebp+var_10]
.text$mn:00004DED                 call    ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:00004DF2                 mov     [ebp+var_4], 0
.text$mn:00004DF9                 mov     ecx, [ebp+var_10]
.text$mn:00004DFC                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:00004E01                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004E08                 mov     eax, [ebp+var_10]
.text$mn:00004E0B                 mov     ecx, [ebp+var_C]
.text$mn:00004E0E                 mov     large fs:0, ecx
.text$mn:00004E15                 pop     ecx
.text$mn:00004E16                 mov     esp, ebp
.text$mn:00004E18                 pop     ebp
.text$mn:00004E19                 retn    4
.text$mn:00004E19 ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:00004E19
.text$mn:00004E19 _text$mn        ends
.text$mn:00004E19
.text$x:00004E1C ; ===========================================================================
.text$x:00004E1C
.text$x:00004E1C ; Segment type: Pure code
.text$x:00004E1C ; Segment permissions: Read/Execute
.text$x:00004E1C _text$x         segment para public 'CODE' use32
.text$x:00004E1C                 assume cs:_text$x
.text$x:00004E1C                 ;org 4E1Ch
.text$x:00004E1C ; COMDAT (pick associative to section at 4DC4)
.text$x:00004E1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004E1C
.text$x:00004E1C ; =============== S U B R O U T I N E =======================================
.text$x:00004E1C
.text$x:00004E1C
.text$x:00004E1C __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 proc near
.text$x:00004E1C                                         ; DATA XREF: .xdata$x:0000B470o
.text$x:00004E1C                 mov     ecx, [ebp-10h]
.text$x:00004E1F                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:00004E1F __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 endp
.text$x:00004E1F
.text$x:00004E24
.text$x:00004E24 ; =============== S U B R O U T I N E =======================================
.text$x:00004E24
.text$x:00004E24
.text$x:00004E24 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$x:00004E24                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+5o
.text$x:00004E24
.text$x:00004E24 arg_4           = dword ptr  8
.text$x:00004E24
.text$x:00004E24                 mov     edx, [esp+arg_4]
.text$x:00004E28                 lea     eax, [edx+0Ch]
.text$x:00004E2B                 mov     ecx, [edx-8]
.text$x:00004E2E                 xor     ecx, eax
.text$x:00004E30                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004E35                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$x:00004E3A                 jmp     ___CxxFrameHandler3
.text$x:00004E3A __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$x:00004E3A
.text$x:00004E3A ; ---------------------------------------------------------------------------
.text$x:00004E3F                 align 10h
.text$x:00004E3F _text$x         ends
.text$x:00004E3F
.text$mn:00004E40 ; ===========================================================================
.text$mn:00004E40
.text$mn:00004E40 ; Segment type: Pure code
.text$mn:00004E40 ; Segment permissions: Read/Execute
.text$mn:00004E40 _text$mn        segment para public 'CODE' use32
.text$mn:00004E40                 assume cs:_text$mn
.text$mn:00004E40                 ;org 4E40h
.text$mn:00004E40 ; COMDAT (pick any)
.text$mn:00004E40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004E40
.text$mn:00004E40 ; =============== S U B R O U T I N E =======================================
.text$mn:00004E40
.text$mn:00004E40 ; Attributes: bp-based frame
.text$mn:00004E40
.text$mn:00004E40 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(struct std::_Iterator_base12 *)
.text$mn:00004E40                 public ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00004E40 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:00004E40                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+90p
.text$mn:00004E40                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+C7p ...
.text$mn:00004E40
.text$mn:00004E40 var_10          = dword ptr -10h
.text$mn:00004E40 var_C           = dword ptr -0Ch
.text$mn:00004E40 var_4           = dword ptr -4
.text$mn:00004E40 arg_0           = dword ptr  8
.text$mn:00004E40
.text$mn:00004E40                 push    ebp
.text$mn:00004E41                 mov     ebp, esp
.text$mn:00004E43                 push    0FFFFFFFFh
.text$mn:00004E45                 push    offset __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00004E4A                 mov     eax, large fs:0
.text$mn:00004E50                 push    eax
.text$mn:00004E51                 push    ecx
.text$mn:00004E52                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004E57                 xor     eax, ebp
.text$mn:00004E59                 push    eax
.text$mn:00004E5A                 lea     eax, [ebp+var_C]
.text$mn:00004E5D                 mov     large fs:0, eax
.text$mn:00004E63                 mov     [ebp+var_10], ecx
.text$mn:00004E66                 mov     eax, [ebp+arg_0]
.text$mn:00004E69                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00004E6A                 mov     ecx, [ebp+var_10]
.text$mn:00004E6D                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12> const &)
.text$mn:00004E72                 mov     [ebp+var_4], 0
.text$mn:00004E79                 mov     ecx, [ebp+var_10]
.text$mn:00004E7C                 mov     edx, [ebp+arg_0]
.text$mn:00004E7F                 mov     eax, [edx+8]
.text$mn:00004E82                 mov     [ecx+8], eax
.text$mn:00004E85                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004E8C                 mov     eax, [ebp+var_10]
.text$mn:00004E8F                 mov     ecx, [ebp+var_C]
.text$mn:00004E92                 mov     large fs:0, ecx
.text$mn:00004E99                 pop     ecx
.text$mn:00004E9A                 mov     esp, ebp
.text$mn:00004E9C                 pop     ebp
.text$mn:00004E9D                 retn    4
.text$mn:00004E9D ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:00004E9D
.text$mn:00004E9D _text$mn        ends
.text$mn:00004E9D
.text$x:00004EA0 ; ===========================================================================
.text$x:00004EA0
.text$x:00004EA0 ; Segment type: Pure code
.text$x:00004EA0 ; Segment permissions: Read/Execute
.text$x:00004EA0 _text$x         segment para public 'CODE' use32
.text$x:00004EA0                 assume cs:_text$x
.text$x:00004EA0                 ;org 4EA0h
.text$x:00004EA0 ; COMDAT (pick associative to section at 4E40)
.text$x:00004EA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004EA0
.text$x:00004EA0 ; =============== S U B R O U T I N E =======================================
.text$x:00004EA0
.text$x:00004EA0
.text$x:00004EA0 __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00004EA0                                         ; DATA XREF: .xdata$x:0000BE2Co
.text$x:00004EA0                 mov     ecx, [ebp-10h]
.text$x:00004EA3                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$x:00004EA3 __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:00004EA3
.text$x:00004EA8
.text$x:00004EA8 ; =============== S U B R O U T I N E =======================================
.text$x:00004EA8
.text$x:00004EA8
.text$x:00004EA8 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:00004EA8                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+5o
.text$x:00004EA8
.text$x:00004EA8 arg_4           = dword ptr  8
.text$x:00004EA8
.text$x:00004EA8                 mov     edx, [esp+arg_4]
.text$x:00004EAC                 lea     eax, [edx+0Ch]
.text$x:00004EAF                 mov     ecx, [edx-8]
.text$x:00004EB2                 xor     ecx, eax
.text$x:00004EB4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004EB9                 mov     eax, offset __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:00004EBE                 jmp     ___CxxFrameHandler3
.text$x:00004EBE __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:00004EBE
.text$x:00004EBE ; ---------------------------------------------------------------------------
.text$x:00004EC3                 align 4
.text$x:00004EC3 _text$x         ends
.text$x:00004EC3
.text$mn:00004EC4 ; ===========================================================================
.text$mn:00004EC4
.text$mn:00004EC4 ; Segment type: Pure code
.text$mn:00004EC4 ; Segment permissions: Read/Execute
.text$mn:00004EC4 _text$mn        segment para public 'CODE' use32
.text$mn:00004EC4                 assume cs:_text$mn
.text$mn:00004EC4                 ;org 4EC4h
.text$mn:00004EC4 ; COMDAT (pick any)
.text$mn:00004EC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004EC4
.text$mn:00004EC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00004EC4
.text$mn:00004EC4 ; Attributes: bp-based frame
.text$mn:00004EC4
.text$mn:00004EC4 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(int, struct std::_Container_base12 *)
.text$mn:00004EC4                 public ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.text$mn:00004EC4 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z proc near
.text$mn:00004EC4                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)+31p
.text$mn:00004EC4
.text$mn:00004EC4 var_10          = dword ptr -10h
.text$mn:00004EC4 var_C           = dword ptr -0Ch
.text$mn:00004EC4 var_4           = dword ptr -4
.text$mn:00004EC4 arg_0           = dword ptr  8
.text$mn:00004EC4 arg_4           = dword ptr  0Ch
.text$mn:00004EC4
.text$mn:00004EC4                 push    ebp
.text$mn:00004EC5                 mov     ebp, esp
.text$mn:00004EC7                 push    0FFFFFFFFh
.text$mn:00004EC9                 push    offset __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.text$mn:00004ECE                 mov     eax, large fs:0
.text$mn:00004ED4                 push    eax
.text$mn:00004ED5                 push    ecx
.text$mn:00004ED6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004EDB                 xor     eax, ebp
.text$mn:00004EDD                 push    eax
.text$mn:00004EDE                 lea     eax, [ebp+var_C]
.text$mn:00004EE1                 mov     large fs:0, eax
.text$mn:00004EE7                 mov     [ebp+var_10], ecx
.text$mn:00004EEA                 mov     ecx, [ebp+var_10]
.text$mn:00004EED                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$mn:00004EF2                 mov     [ebp+var_4], 0
.text$mn:00004EF9                 mov     eax, [ebp+arg_4]
.text$mn:00004EFC                 push    eax             ; struct std::_Container_base12 *
.text$mn:00004EFD                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004F00                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:00004F05                 mov     ecx, [ebp+var_10]
.text$mn:00004F08                 mov     edx, [ebp+arg_0]
.text$mn:00004F0B                 mov     [ecx+8], edx
.text$mn:00004F0E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004F15                 mov     eax, [ebp+var_10]
.text$mn:00004F18                 mov     ecx, [ebp+var_C]
.text$mn:00004F1B                 mov     large fs:0, ecx
.text$mn:00004F22                 pop     ecx
.text$mn:00004F23                 mov     esp, ebp
.text$mn:00004F25                 pop     ebp
.text$mn:00004F26                 retn    8
.text$mn:00004F26 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z endp
.text$mn:00004F26
.text$mn:00004F26 ; ---------------------------------------------------------------------------
.text$mn:00004F29                 align 4
.text$mn:00004F29 _text$mn        ends
.text$mn:00004F29
.text$x:00004F2C ; ===========================================================================
.text$x:00004F2C
.text$x:00004F2C ; Segment type: Pure code
.text$x:00004F2C ; Segment permissions: Read/Execute
.text$x:00004F2C _text$x         segment para public 'CODE' use32
.text$x:00004F2C                 assume cs:_text$x
.text$x:00004F2C                 ;org 4F2Ch
.text$x:00004F2C ; COMDAT (pick associative to section at 4EC4)
.text$x:00004F2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004F2C
.text$x:00004F2C ; =============== S U B R O U T I N E =======================================
.text$x:00004F2C
.text$x:00004F2C
.text$x:00004F2C __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0 proc near
.text$x:00004F2C                                         ; DATA XREF: .xdata$x:0000BDD4o
.text$x:00004F2C                 mov     ecx, [ebp-10h]
.text$x:00004F2F                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$x:00004F2F __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0 endp
.text$x:00004F2F
.text$x:00004F34
.text$x:00004F34 ; =============== S U B R O U T I N E =======================================
.text$x:00004F34
.text$x:00004F34
.text$x:00004F34 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z proc near
.text$x:00004F34                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)+5o
.text$x:00004F34
.text$x:00004F34 arg_4           = dword ptr  8
.text$x:00004F34
.text$x:00004F34                 mov     edx, [esp+arg_4]
.text$x:00004F38                 lea     eax, [edx+0Ch]
.text$x:00004F3B                 mov     ecx, [edx-8]
.text$x:00004F3E                 xor     ecx, eax
.text$x:00004F40                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004F45                 mov     eax, offset __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.text$x:00004F4A                 jmp     ___CxxFrameHandler3
.text$x:00004F4A __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z endp
.text$x:00004F4A
.text$x:00004F4A ; ---------------------------------------------------------------------------
.text$x:00004F4F                 align 10h
.text$x:00004F4F _text$x         ends
.text$x:00004F4F
.text$mn:00004F50 ; ===========================================================================
.text$mn:00004F50
.text$mn:00004F50 ; Segment type: Pure code
.text$mn:00004F50 ; Segment permissions: Read/Execute
.text$mn:00004F50 _text$mn        segment para public 'CODE' use32
.text$mn:00004F50                 assume cs:_text$mn
.text$mn:00004F50                 ;org 4F50h
.text$mn:00004F50 ; COMDAT (pick any)
.text$mn:00004F50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004F50
.text$mn:00004F50 ; =============== S U B R O U T I N E =======================================
.text$mn:00004F50
.text$mn:00004F50 ; Attributes: bp-based frame
.text$mn:00004F50
.text$mn:00004F50 ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(struct std::_Iterator_base12 *)
.text$mn:00004F50                 public ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00004F50 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:00004F50                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+3Bp
.text$mn:00004F50                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+59p
.text$mn:00004F50
.text$mn:00004F50 var_10          = dword ptr -10h
.text$mn:00004F50 var_C           = dword ptr -0Ch
.text$mn:00004F50 var_4           = dword ptr -4
.text$mn:00004F50 arg_0           = dword ptr  8
.text$mn:00004F50
.text$mn:00004F50                 push    ebp
.text$mn:00004F51                 mov     ebp, esp
.text$mn:00004F53                 push    0FFFFFFFFh
.text$mn:00004F55                 push    offset __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00004F5A                 mov     eax, large fs:0
.text$mn:00004F60                 push    eax
.text$mn:00004F61                 push    ecx
.text$mn:00004F62                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004F67                 xor     eax, ebp
.text$mn:00004F69                 push    eax
.text$mn:00004F6A                 lea     eax, [ebp+var_C]
.text$mn:00004F6D                 mov     large fs:0, eax
.text$mn:00004F73                 mov     [ebp+var_10], ecx
.text$mn:00004F76                 mov     eax, [ebp+arg_0]
.text$mn:00004F79                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00004F7A                 mov     ecx, [ebp+var_10]
.text$mn:00004F7D                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00004F82                 mov     [ebp+var_4], 0
.text$mn:00004F89                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004F90                 mov     eax, [ebp+var_10]
.text$mn:00004F93                 mov     ecx, [ebp+var_C]
.text$mn:00004F96                 mov     large fs:0, ecx
.text$mn:00004F9D                 pop     ecx
.text$mn:00004F9E                 mov     esp, ebp
.text$mn:00004FA0                 pop     ebp
.text$mn:00004FA1                 retn    4
.text$mn:00004FA1 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:00004FA1
.text$mn:00004FA1 _text$mn        ends
.text$mn:00004FA1
.text$x:00004FA4 ; ===========================================================================
.text$x:00004FA4
.text$x:00004FA4 ; Segment type: Pure code
.text$x:00004FA4 ; Segment permissions: Read/Execute
.text$x:00004FA4 _text$x         segment para public 'CODE' use32
.text$x:00004FA4                 assume cs:_text$x
.text$x:00004FA4                 ;org 4FA4h
.text$x:00004FA4 ; COMDAT (pick associative to section at 4F50)
.text$x:00004FA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004FA4
.text$x:00004FA4 ; =============== S U B R O U T I N E =======================================
.text$x:00004FA4
.text$x:00004FA4
.text$x:00004FA4 __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00004FA4                                         ; DATA XREF: .xdata$x:0000BF10o
.text$x:00004FA4                 mov     ecx, [ebp-10h]
.text$x:00004FA7                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00004FA7 __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:00004FA7
.text$x:00004FAC
.text$x:00004FAC ; =============== S U B R O U T I N E =======================================
.text$x:00004FAC
.text$x:00004FAC
.text$x:00004FAC __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:00004FAC                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+5o
.text$x:00004FAC
.text$x:00004FAC arg_4           = dword ptr  8
.text$x:00004FAC
.text$x:00004FAC                 mov     edx, [esp+arg_4]
.text$x:00004FB0                 lea     eax, [edx+0Ch]
.text$x:00004FB3                 mov     ecx, [edx-8]
.text$x:00004FB6                 xor     ecx, eax
.text$x:00004FB8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004FBD                 mov     eax, offset __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:00004FC2                 jmp     ___CxxFrameHandler3
.text$x:00004FC2 __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:00004FC2
.text$x:00004FC2 ; ---------------------------------------------------------------------------
.text$x:00004FC7                 align 4
.text$x:00004FC7 _text$x         ends
.text$x:00004FC7
.text$mn:00004FC8 ; ===========================================================================
.text$mn:00004FC8
.text$mn:00004FC8 ; Segment type: Pure code
.text$mn:00004FC8 ; Segment permissions: Read/Execute
.text$mn:00004FC8 _text$mn        segment para public 'CODE' use32
.text$mn:00004FC8                 assume cs:_text$mn
.text$mn:00004FC8                 ;org 4FC8h
.text$mn:00004FC8 ; COMDAT (pick any)
.text$mn:00004FC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004FC8
.text$mn:00004FC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00004FC8
.text$mn:00004FC8 ; Attributes: bp-based frame
.text$mn:00004FC8
.text$mn:00004FC8 ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(int, struct std::_Container_base12 *)
.text$mn:00004FC8                 public ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.text$mn:00004FC8 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z proc near
.text$mn:00004FC8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)+3Fp
.text$mn:00004FC8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)+48p
.text$mn:00004FC8
.text$mn:00004FC8 var_10          = dword ptr -10h
.text$mn:00004FC8 var_C           = dword ptr -0Ch
.text$mn:00004FC8 var_4           = dword ptr -4
.text$mn:00004FC8 arg_0           = dword ptr  8
.text$mn:00004FC8 arg_4           = dword ptr  0Ch
.text$mn:00004FC8
.text$mn:00004FC8                 push    ebp
.text$mn:00004FC9                 mov     ebp, esp
.text$mn:00004FCB                 push    0FFFFFFFFh
.text$mn:00004FCD                 push    offset __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.text$mn:00004FD2                 mov     eax, large fs:0
.text$mn:00004FD8                 push    eax
.text$mn:00004FD9                 push    ecx
.text$mn:00004FDA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004FDF                 xor     eax, ebp
.text$mn:00004FE1                 push    eax
.text$mn:00004FE2                 lea     eax, [ebp+var_C]
.text$mn:00004FE5                 mov     large fs:0, eax
.text$mn:00004FEB                 mov     [ebp+var_10], ecx
.text$mn:00004FEE                 mov     eax, [ebp+arg_4]
.text$mn:00004FF1                 push    eax             ; struct std::_Container_base12 *
.text$mn:00004FF2                 mov     ecx, [ebp+arg_0]
.text$mn:00004FF5                 push    ecx             ; int
.text$mn:00004FF6                 mov     ecx, [ebp+var_10]
.text$mn:00004FF9                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)
.text$mn:00004FFE                 mov     [ebp+var_4], 0
.text$mn:00005005                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000500C                 mov     eax, [ebp+var_10]
.text$mn:0000500F                 mov     ecx, [ebp+var_C]
.text$mn:00005012                 mov     large fs:0, ecx
.text$mn:00005019                 pop     ecx
.text$mn:0000501A                 mov     esp, ebp
.text$mn:0000501C                 pop     ebp
.text$mn:0000501D                 retn    8
.text$mn:0000501D ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z endp
.text$mn:0000501D
.text$mn:0000501D _text$mn        ends
.text$mn:0000501D
.text$x:00005020 ; ===========================================================================
.text$x:00005020
.text$x:00005020 ; Segment type: Pure code
.text$x:00005020 ; Segment permissions: Read/Execute
.text$x:00005020 _text$x         segment para public 'CODE' use32
.text$x:00005020                 assume cs:_text$x
.text$x:00005020                 ;org 5020h
.text$x:00005020 ; COMDAT (pick associative to section at 4FC8)
.text$x:00005020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005020
.text$x:00005020 ; =============== S U B R O U T I N E =======================================
.text$x:00005020
.text$x:00005020
.text$x:00005020 __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0 proc near
.text$x:00005020                                         ; DATA XREF: .xdata$x:0000BE8Co
.text$x:00005020                 mov     ecx, [ebp-10h]
.text$x:00005023                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00005023 __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0 endp
.text$x:00005023
.text$x:00005028
.text$x:00005028 ; =============== S U B R O U T I N E =======================================
.text$x:00005028
.text$x:00005028
.text$x:00005028 __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z proc near
.text$x:00005028                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)+5o
.text$x:00005028
.text$x:00005028 arg_4           = dword ptr  8
.text$x:00005028
.text$x:00005028                 mov     edx, [esp+arg_4]
.text$x:0000502C                 lea     eax, [edx+0Ch]
.text$x:0000502F                 mov     ecx, [edx-8]
.text$x:00005032                 xor     ecx, eax
.text$x:00005034                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005039                 mov     eax, offset __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.text$x:0000503E                 jmp     ___CxxFrameHandler3
.text$x:0000503E __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z endp
.text$x:0000503E
.text$x:0000503E ; ---------------------------------------------------------------------------
.text$x:00005043                 align 4
.text$x:00005043 _text$x         ends
.text$x:00005043
.text$mn:00005044 ; ===========================================================================
.text$mn:00005044
.text$mn:00005044 ; Segment type: Pure code
.text$mn:00005044 ; Segment permissions: Read/Execute
.text$mn:00005044 _text$mn        segment para public 'CODE' use32
.text$mn:00005044                 assume cs:_text$mn
.text$mn:00005044                 ;org 5044h
.text$mn:00005044 ; COMDAT (pick any)
.text$mn:00005044                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005044
.text$mn:00005044 ; =============== S U B R O U T I N E =======================================
.text$mn:00005044
.text$mn:00005044 ; Attributes: bp-based frame
.text$mn:00005044
.text$mn:00005044 ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::_String_val<struct std::_Simple_types<char>>(void)
.text$mn:00005044                 public ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00005044 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:00005044                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+29p
.text$mn:00005044
.text$mn:00005044 var_10          = dword ptr -10h
.text$mn:00005044 var_C           = dword ptr -0Ch
.text$mn:00005044 var_4           = dword ptr -4
.text$mn:00005044
.text$mn:00005044                 push    ebp
.text$mn:00005045                 mov     ebp, esp
.text$mn:00005047                 push    0FFFFFFFFh
.text$mn:00005049                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:0000504E                 mov     eax, large fs:0
.text$mn:00005054                 push    eax
.text$mn:00005055                 push    ecx
.text$mn:00005056                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000505B                 xor     eax, ebp
.text$mn:0000505D                 push    eax
.text$mn:0000505E                 lea     eax, [ebp+var_C]
.text$mn:00005061                 mov     large fs:0, eax
.text$mn:00005067                 mov     [ebp+var_10], ecx
.text$mn:0000506A                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000506D                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00005072                 mov     [ebp+var_4], 0
.text$mn:00005079                 mov     eax, [ebp+var_10]
.text$mn:0000507C                 mov     dword ptr [eax+14h], 0
.text$mn:00005083                 mov     ecx, [ebp+var_10]
.text$mn:00005086                 mov     dword ptr [ecx+18h], 0
.text$mn:0000508D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005094                 mov     eax, [ebp+var_10]
.text$mn:00005097                 mov     ecx, [ebp+var_C]
.text$mn:0000509A                 mov     large fs:0, ecx
.text$mn:000050A1                 pop     ecx
.text$mn:000050A2                 mov     esp, ebp
.text$mn:000050A4                 pop     ebp
.text$mn:000050A5                 retn
.text$mn:000050A5 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:000050A5
.text$mn:000050A5 ; ---------------------------------------------------------------------------
.text$mn:000050A6                 align 4
.text$mn:000050A6 _text$mn        ends
.text$mn:000050A6
.text$x:000050A8 ; ===========================================================================
.text$x:000050A8
.text$x:000050A8 ; Segment type: Pure code
.text$x:000050A8 ; Segment permissions: Read/Execute
.text$x:000050A8 _text$x         segment para public 'CODE' use32
.text$x:000050A8                 assume cs:_text$x
.text$x:000050A8                 ;org 50A8h
.text$x:000050A8 ; COMDAT (pick associative to section at 5044)
.text$x:000050A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000050A8
.text$x:000050A8 ; =============== S U B R O U T I N E =======================================
.text$x:000050A8
.text$x:000050A8
.text$x:000050A8 __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:000050A8                                         ; DATA XREF: .xdata$x:0000B0CCo
.text$x:000050A8                 mov     ecx, [ebp-10h]  ; this
.text$x:000050AB                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:000050AB __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:000050AB
.text$x:000050B0
.text$x:000050B0 ; =============== S U B R O U T I N E =======================================
.text$x:000050B0
.text$x:000050B0
.text$x:000050B0 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:000050B0                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+5o
.text$x:000050B0
.text$x:000050B0 arg_4           = dword ptr  8
.text$x:000050B0
.text$x:000050B0                 mov     edx, [esp+arg_4]
.text$x:000050B4                 lea     eax, [edx+0Ch]
.text$x:000050B7                 mov     ecx, [edx-8]
.text$x:000050BA                 xor     ecx, eax
.text$x:000050BC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000050C1                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:000050C6                 jmp     ___CxxFrameHandler3
.text$x:000050C6 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:000050C6
.text$x:000050C6 ; ---------------------------------------------------------------------------
.text$x:000050CB                 align 4
.text$x:000050CB _text$x         ends
.text$x:000050CB
.text$mn:000050CC ; ===========================================================================
.text$mn:000050CC
.text$mn:000050CC ; Segment type: Pure code
.text$mn:000050CC ; Segment permissions: Read/Execute
.text$mn:000050CC _text$mn        segment para public 'CODE' use32
.text$mn:000050CC                 assume cs:_text$mn
.text$mn:000050CC                 ;org 50CCh
.text$mn:000050CC ; COMDAT (pick any)
.text$mn:000050CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000050CC
.text$mn:000050CC ; =============== S U B R O U T I N E =======================================
.text$mn:000050CC
.text$mn:000050CC ; Attributes: bp-based frame
.text$mn:000050CC
.text$mn:000050CC ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:000050CC                 public ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000050CC ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:000050CC                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+29p
.text$mn:000050CC
.text$mn:000050CC var_10          = dword ptr -10h
.text$mn:000050CC var_C           = dword ptr -0Ch
.text$mn:000050CC var_4           = dword ptr -4
.text$mn:000050CC
.text$mn:000050CC                 push    ebp
.text$mn:000050CD                 mov     ebp, esp
.text$mn:000050CF                 push    0FFFFFFFFh
.text$mn:000050D1                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000050D6                 mov     eax, large fs:0
.text$mn:000050DC                 push    eax
.text$mn:000050DD                 push    ecx
.text$mn:000050DE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000050E3                 xor     eax, ebp
.text$mn:000050E5                 push    eax
.text$mn:000050E6                 lea     eax, [ebp+var_C]
.text$mn:000050E9                 mov     large fs:0, eax
.text$mn:000050EF                 mov     [ebp+var_10], ecx
.text$mn:000050F2                 mov     ecx, [ebp+var_10] ; this
.text$mn:000050F5                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:000050FA                 mov     [ebp+var_4], 0
.text$mn:00005101                 mov     eax, [ebp+var_10]
.text$mn:00005104                 mov     dword ptr [eax+14h], 0
.text$mn:0000510B                 mov     ecx, [ebp+var_10]
.text$mn:0000510E                 mov     dword ptr [ecx+18h], 0
.text$mn:00005115                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000511C                 mov     eax, [ebp+var_10]
.text$mn:0000511F                 mov     ecx, [ebp+var_C]
.text$mn:00005122                 mov     large fs:0, ecx
.text$mn:00005129                 pop     ecx
.text$mn:0000512A                 mov     esp, ebp
.text$mn:0000512C                 pop     ebp
.text$mn:0000512D                 retn
.text$mn:0000512D ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:0000512D
.text$mn:0000512D ; ---------------------------------------------------------------------------
.text$mn:0000512E                 align 10h
.text$mn:0000512E _text$mn        ends
.text$mn:0000512E
.text$x:00005130 ; ===========================================================================
.text$x:00005130
.text$x:00005130 ; Segment type: Pure code
.text$x:00005130 ; Segment permissions: Read/Execute
.text$x:00005130 _text$x         segment para public 'CODE' use32
.text$x:00005130                 assume cs:_text$x
.text$x:00005130                 ;org 5130h
.text$x:00005130 ; COMDAT (pick associative to section at 50CC)
.text$x:00005130                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005130
.text$x:00005130 ; =============== S U B R O U T I N E =======================================
.text$x:00005130
.text$x:00005130
.text$x:00005130 __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00005130                                         ; DATA XREF: .xdata$x:0000B418o
.text$x:00005130                 mov     ecx, [ebp-10h]  ; this
.text$x:00005133                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00005133 __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:00005133
.text$x:00005138
.text$x:00005138 ; =============== S U B R O U T I N E =======================================
.text$x:00005138
.text$x:00005138
.text$x:00005138 __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:00005138                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:00005138
.text$x:00005138 arg_4           = dword ptr  8
.text$x:00005138
.text$x:00005138                 mov     edx, [esp+arg_4]
.text$x:0000513C                 lea     eax, [edx+0Ch]
.text$x:0000513F                 mov     ecx, [edx-8]
.text$x:00005142                 xor     ecx, eax
.text$x:00005144                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005149                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:0000514E                 jmp     ___CxxFrameHandler3
.text$x:0000514E __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:0000514E
.text$x:0000514E ; ---------------------------------------------------------------------------
.text$x:00005153                 align 4
.text$x:00005153 _text$x         ends
.text$x:00005153
.text$mn:00005154 ; ===========================================================================
.text$mn:00005154
.text$mn:00005154 ; Segment type: Pure code
.text$mn:00005154 ; Segment permissions: Read/Execute
.text$mn:00005154 _text$mn        segment para public 'CODE' use32
.text$mn:00005154                 assume cs:_text$mn
.text$mn:00005154                 ;org 5154h
.text$mn:00005154 ; COMDAT (pick any)
.text$mn:00005154                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005154
.text$mn:00005154 ; =============== S U B R O U T I N E =======================================
.text$mn:00005154
.text$mn:00005154 ; Attributes: bp-based frame
.text$mn:00005154
.text$mn:00005154 ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<wchar_t const *, class std::allocator<wchar_t const *>>>::_Vector_alloc<0, struct std::_Vec_base_types<wchar_t const *, class std::allocator<wchar_t const *>>>(class std::allocator<wchar_t const *> const &)
.text$mn:00005154                 public ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@ABV?$allocator@PB_W@1@@Z
.text$mn:00005154 ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@ABV?$allocator@PB_W@1@@Z proc near
.text$mn:00005154                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::vector<wchar_t const *,std::allocator<wchar_t const *>>(void)+34p
.text$mn:00005154
.text$mn:00005154 var_10          = dword ptr -10h
.text$mn:00005154 var_C           = dword ptr -0Ch
.text$mn:00005154 var_4           = dword ptr -4
.text$mn:00005154
.text$mn:00005154                 push    ebp
.text$mn:00005155                 mov     ebp, esp
.text$mn:00005157                 push    0FFFFFFFFh
.text$mn:00005159                 push    offset __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@ABV?$allocator@PB_W@1@@Z
.text$mn:0000515E                 mov     eax, large fs:0
.text$mn:00005164                 push    eax
.text$mn:00005165                 push    ecx
.text$mn:00005166                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000516B                 xor     eax, ebp
.text$mn:0000516D                 push    eax
.text$mn:0000516E                 lea     eax, [ebp+var_C]
.text$mn:00005171                 mov     large fs:0, eax
.text$mn:00005177                 mov     [ebp+var_10], ecx
.text$mn:0000517A                 mov     ecx, [ebp+var_10]
.text$mn:0000517D                 call    ??0?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<wchar_t const *>>::_Vector_val<std::_Simple_types<wchar_t const *>>(void)
.text$mn:00005182                 mov     [ebp+var_4], 0
.text$mn:00005189                 mov     ecx, [ebp+var_10]
.text$mn:0000518C                 call    ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Alloc_proxy(void)
.text$mn:00005191                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005198                 mov     eax, [ebp+var_10]
.text$mn:0000519B                 mov     ecx, [ebp+var_C]
.text$mn:0000519E                 mov     large fs:0, ecx
.text$mn:000051A5                 pop     ecx
.text$mn:000051A6                 mov     esp, ebp
.text$mn:000051A8                 pop     ebp
.text$mn:000051A9                 retn    4
.text$mn:000051A9 ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@ABV?$allocator@PB_W@1@@Z endp
.text$mn:000051A9
.text$mn:000051A9 _text$mn        ends
.text$mn:000051A9
.text$x:000051AC ; ===========================================================================
.text$x:000051AC
.text$x:000051AC ; Segment type: Pure code
.text$x:000051AC ; Segment permissions: Read/Execute
.text$x:000051AC _text$x         segment para public 'CODE' use32
.text$x:000051AC                 assume cs:_text$x
.text$x:000051AC                 ;org 51ACh
.text$x:000051AC ; COMDAT (pick associative to section at 5154)
.text$x:000051AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000051AC
.text$x:000051AC ; =============== S U B R O U T I N E =======================================
.text$x:000051AC
.text$x:000051AC
.text$x:000051AC __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@ABV?$allocator@PB_W@1@@Z$0 proc near
.text$x:000051AC                                         ; DATA XREF: .xdata$x:0000B914o
.text$x:000051AC                 mov     ecx, [ebp-10h]
.text$x:000051AF                 jmp     ??1?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<wchar_t const *>>::~_Vector_val<std::_Simple_types<wchar_t const *>>(void)
.text$x:000051AF __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@ABV?$allocator@PB_W@1@@Z$0 endp
.text$x:000051AF
.text$x:000051B4
.text$x:000051B4 ; =============== S U B R O U T I N E =======================================
.text$x:000051B4
.text$x:000051B4
.text$x:000051B4 __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@ABV?$allocator@PB_W@1@@Z proc near
.text$x:000051B4                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>(std::allocator<wchar_t const *> const &)+5o
.text$x:000051B4
.text$x:000051B4 arg_4           = dword ptr  8
.text$x:000051B4
.text$x:000051B4                 mov     edx, [esp+arg_4]
.text$x:000051B8                 lea     eax, [edx+0Ch]
.text$x:000051BB                 mov     ecx, [edx-8]
.text$x:000051BE                 xor     ecx, eax
.text$x:000051C0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000051C5                 mov     eax, offset __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@ABV?$allocator@PB_W@1@@Z
.text$x:000051CA                 jmp     ___CxxFrameHandler3
.text$x:000051CA __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@ABV?$allocator@PB_W@1@@Z endp
.text$x:000051CA
.text$x:000051CA ; ---------------------------------------------------------------------------
.text$x:000051CF                 align 10h
.text$x:000051CF _text$x         ends
.text$x:000051CF
.text$mn:000051D0 ; ===========================================================================
.text$mn:000051D0
.text$mn:000051D0 ; Segment type: Pure code
.text$mn:000051D0 ; Segment permissions: Read/Execute
.text$mn:000051D0 _text$mn        segment para public 'CODE' use32
.text$mn:000051D0                 assume cs:_text$mn
.text$mn:000051D0                 ;org 51D0h
.text$mn:000051D0 ; COMDAT (pick any)
.text$mn:000051D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000051D0
.text$mn:000051D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000051D0
.text$mn:000051D0 ; Attributes: bp-based frame
.text$mn:000051D0
.text$mn:000051D0 ; int __stdcall std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(struct std::_Iterator_base12 *)
.text$mn:000051D0                 public ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:000051D0 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:000051D0                                         ; CODE XREF: isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+B4p
.text$mn:000051D0                                         ; getParamVal(wchar_t,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+106p ...
.text$mn:000051D0
.text$mn:000051D0 var_10          = dword ptr -10h
.text$mn:000051D0 var_C           = dword ptr -0Ch
.text$mn:000051D0 var_4           = dword ptr -4
.text$mn:000051D0 arg_0           = dword ptr  8
.text$mn:000051D0
.text$mn:000051D0                 push    ebp
.text$mn:000051D1                 mov     ebp, esp
.text$mn:000051D3                 push    0FFFFFFFFh
.text$mn:000051D5                 push    offset __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:000051DA                 mov     eax, large fs:0
.text$mn:000051E0                 push    eax
.text$mn:000051E1                 push    ecx
.text$mn:000051E2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000051E7                 xor     eax, ebp
.text$mn:000051E9                 push    eax
.text$mn:000051EA                 lea     eax, [ebp+var_C]
.text$mn:000051ED                 mov     large fs:0, eax
.text$mn:000051F3                 mov     [ebp+var_10], ecx
.text$mn:000051F6                 mov     eax, [ebp+arg_0]
.text$mn:000051F9                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:000051FA                 mov     ecx, [ebp+var_10]
.text$mn:000051FD                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12> const &)
.text$mn:00005202                 mov     [ebp+var_4], 0
.text$mn:00005209                 mov     ecx, [ebp+var_10]
.text$mn:0000520C                 mov     edx, [ebp+arg_0]
.text$mn:0000520F                 mov     eax, [edx+8]
.text$mn:00005212                 mov     [ecx+8], eax
.text$mn:00005215                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000521C                 mov     eax, [ebp+var_10]
.text$mn:0000521F                 mov     ecx, [ebp+var_C]
.text$mn:00005222                 mov     large fs:0, ecx
.text$mn:00005229                 pop     ecx
.text$mn:0000522A                 mov     esp, ebp
.text$mn:0000522C                 pop     ebp
.text$mn:0000522D                 retn    4
.text$mn:0000522D ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:0000522D
.text$mn:0000522D _text$mn        ends
.text$mn:0000522D
.text$x:00005230 ; ===========================================================================
.text$x:00005230
.text$x:00005230 ; Segment type: Pure code
.text$x:00005230 ; Segment permissions: Read/Execute
.text$x:00005230 _text$x         segment para public 'CODE' use32
.text$x:00005230                 assume cs:_text$x
.text$x:00005230                 ;org 5230h
.text$x:00005230 ; COMDAT (pick associative to section at 51D0)
.text$x:00005230                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005230
.text$x:00005230 ; =============== S U B R O U T I N E =======================================
.text$x:00005230
.text$x:00005230
.text$x:00005230 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00005230                                         ; DATA XREF: .xdata$x:0000BC6Co
.text$x:00005230                 mov     ecx, [ebp-10h]
.text$x:00005233                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>(void)
.text$x:00005233 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:00005233
.text$x:00005238
.text$x:00005238 ; =============== S U B R O U T I N E =======================================
.text$x:00005238
.text$x:00005238
.text$x:00005238 __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:00005238                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>> const &)+5o
.text$x:00005238
.text$x:00005238 arg_4           = dword ptr  8
.text$x:00005238
.text$x:00005238                 mov     edx, [esp+arg_4]
.text$x:0000523C                 lea     eax, [edx+0Ch]
.text$x:0000523F                 mov     ecx, [edx-8]
.text$x:00005242                 xor     ecx, eax
.text$x:00005244                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005249                 mov     eax, offset __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:0000524E                 jmp     ___CxxFrameHandler3
.text$x:0000524E __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:0000524E
.text$x:0000524E ; ---------------------------------------------------------------------------
.text$x:00005253                 align 4
.text$x:00005253 _text$x         ends
.text$x:00005253
.text$mn:00005254 ; ===========================================================================
.text$mn:00005254
.text$mn:00005254 ; Segment type: Pure code
.text$mn:00005254 ; Segment permissions: Read/Execute
.text$mn:00005254 _text$mn        segment para public 'CODE' use32
.text$mn:00005254                 assume cs:_text$mn
.text$mn:00005254                 ;org 5254h
.text$mn:00005254 ; COMDAT (pick any)
.text$mn:00005254                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005254
.text$mn:00005254 ; =============== S U B R O U T I N E =======================================
.text$mn:00005254
.text$mn:00005254 ; Attributes: bp-based frame
.text$mn:00005254
.text$mn:00005254 ; int __stdcall std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(int, struct std::_Container_base12 *)
.text$mn:00005254                 public ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z
.text$mn:00005254 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z proc near
.text$mn:00005254                                         ; CODE XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(wchar_t const * *,std::_Container_base12 const *)+31p
.text$mn:00005254
.text$mn:00005254 var_10          = dword ptr -10h
.text$mn:00005254 var_C           = dword ptr -0Ch
.text$mn:00005254 var_4           = dword ptr -4
.text$mn:00005254 arg_0           = dword ptr  8
.text$mn:00005254 arg_4           = dword ptr  0Ch
.text$mn:00005254
.text$mn:00005254                 push    ebp
.text$mn:00005255                 mov     ebp, esp
.text$mn:00005257                 push    0FFFFFFFFh
.text$mn:00005259                 push    offset __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z
.text$mn:0000525E                 mov     eax, large fs:0
.text$mn:00005264                 push    eax
.text$mn:00005265                 push    ecx
.text$mn:00005266                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000526B                 xor     eax, ebp
.text$mn:0000526D                 push    eax
.text$mn:0000526E                 lea     eax, [ebp+var_C]
.text$mn:00005271                 mov     large fs:0, eax
.text$mn:00005277                 mov     [ebp+var_10], ecx
.text$mn:0000527A                 mov     ecx, [ebp+var_10]
.text$mn:0000527D                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>(void)
.text$mn:00005282                 mov     [ebp+var_4], 0
.text$mn:00005289                 mov     eax, [ebp+var_10]
.text$mn:0000528C                 mov     ecx, [ebp+arg_0]
.text$mn:0000528F                 mov     [eax+8], ecx
.text$mn:00005292                 mov     edx, [ebp+arg_4]
.text$mn:00005295                 push    edx             ; struct std::_Container_base12 *
.text$mn:00005296                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005299                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:0000529E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000052A5                 mov     eax, [ebp+var_10]
.text$mn:000052A8                 mov     ecx, [ebp+var_C]
.text$mn:000052AB                 mov     large fs:0, ecx
.text$mn:000052B2                 pop     ecx
.text$mn:000052B3                 mov     esp, ebp
.text$mn:000052B5                 pop     ebp
.text$mn:000052B6                 retn    8
.text$mn:000052B6 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z endp
.text$mn:000052B6
.text$mn:000052B6 ; ---------------------------------------------------------------------------
.text$mn:000052B9                 align 4
.text$mn:000052B9 _text$mn        ends
.text$mn:000052B9
.text$x:000052BC ; ===========================================================================
.text$x:000052BC
.text$x:000052BC ; Segment type: Pure code
.text$x:000052BC ; Segment permissions: Read/Execute
.text$x:000052BC _text$x         segment para public 'CODE' use32
.text$x:000052BC                 assume cs:_text$x
.text$x:000052BC                 ;org 52BCh
.text$x:000052BC ; COMDAT (pick associative to section at 5254)
.text$x:000052BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000052BC
.text$x:000052BC ; =============== S U B R O U T I N E =======================================
.text$x:000052BC
.text$x:000052BC
.text$x:000052BC __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z$0 proc near
.text$x:000052BC                                         ; DATA XREF: .xdata$x:0000BC14o
.text$x:000052BC                 mov     ecx, [ebp-10h]
.text$x:000052BF                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>(void)
.text$x:000052BF __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z$0 endp
.text$x:000052BF
.text$x:000052C4
.text$x:000052C4 ; =============== S U B R O U T I N E =======================================
.text$x:000052C4
.text$x:000052C4
.text$x:000052C4 __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z proc near
.text$x:000052C4                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(wchar_t const * *,std::_Container_base12 const *)+5o
.text$x:000052C4
.text$x:000052C4 arg_4           = dword ptr  8
.text$x:000052C4
.text$x:000052C4                 mov     edx, [esp+arg_4]
.text$x:000052C8                 lea     eax, [edx+0Ch]
.text$x:000052CB                 mov     ecx, [edx-8]
.text$x:000052CE                 xor     ecx, eax
.text$x:000052D0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000052D5                 mov     eax, offset __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z
.text$x:000052DA                 jmp     ___CxxFrameHandler3
.text$x:000052DA __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z endp
.text$x:000052DA
.text$x:000052DA ; ---------------------------------------------------------------------------
.text$x:000052DF                 align 10h
.text$x:000052DF _text$x         ends
.text$x:000052DF
.text$mn:000052E0 ; ===========================================================================
.text$mn:000052E0
.text$mn:000052E0 ; Segment type: Pure code
.text$mn:000052E0 ; Segment permissions: Read/Execute
.text$mn:000052E0 _text$mn        segment para public 'CODE' use32
.text$mn:000052E0                 assume cs:_text$mn
.text$mn:000052E0                 ;org 52E0h
.text$mn:000052E0 ; COMDAT (pick any)
.text$mn:000052E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000052E0
.text$mn:000052E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000052E0
.text$mn:000052E0 ; Attributes: bp-based frame
.text$mn:000052E0
.text$mn:000052E0 ; int __stdcall std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(struct std::_Iterator_base12 *)
.text$mn:000052E0                 public ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:000052E0 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:000052E0                                         ; CODE XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+(int)+36p
.text$mn:000052E0                                         ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+(int)+52p
.text$mn:000052E0
.text$mn:000052E0 var_10          = dword ptr -10h
.text$mn:000052E0 var_C           = dword ptr -0Ch
.text$mn:000052E0 var_4           = dword ptr -4
.text$mn:000052E0 arg_0           = dword ptr  8
.text$mn:000052E0
.text$mn:000052E0                 push    ebp
.text$mn:000052E1                 mov     ebp, esp
.text$mn:000052E3                 push    0FFFFFFFFh
.text$mn:000052E5                 push    offset __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:000052EA                 mov     eax, large fs:0
.text$mn:000052F0                 push    eax
.text$mn:000052F1                 push    ecx
.text$mn:000052F2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000052F7                 xor     eax, ebp
.text$mn:000052F9                 push    eax
.text$mn:000052FA                 lea     eax, [ebp+var_C]
.text$mn:000052FD                 mov     large fs:0, eax
.text$mn:00005303                 mov     [ebp+var_10], ecx
.text$mn:00005306                 mov     eax, [ebp+arg_0]
.text$mn:00005309                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:0000530A                 mov     ecx, [ebp+var_10]
.text$mn:0000530D                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>> const &)
.text$mn:00005312                 mov     [ebp+var_4], 0
.text$mn:00005319                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005320                 mov     eax, [ebp+var_10]
.text$mn:00005323                 mov     ecx, [ebp+var_C]
.text$mn:00005326                 mov     large fs:0, ecx
.text$mn:0000532D                 pop     ecx
.text$mn:0000532E                 mov     esp, ebp
.text$mn:00005330                 pop     ebp
.text$mn:00005331                 retn    4
.text$mn:00005331 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:00005331
.text$mn:00005331 _text$mn        ends
.text$mn:00005331
.text$x:00005334 ; ===========================================================================
.text$x:00005334
.text$x:00005334 ; Segment type: Pure code
.text$x:00005334 ; Segment permissions: Read/Execute
.text$x:00005334 _text$x         segment para public 'CODE' use32
.text$x:00005334                 assume cs:_text$x
.text$x:00005334                 ;org 5334h
.text$x:00005334 ; COMDAT (pick associative to section at 52E0)
.text$x:00005334                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005334
.text$x:00005334 ; =============== S U B R O U T I N E =======================================
.text$x:00005334
.text$x:00005334
.text$x:00005334 __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00005334                                         ; DATA XREF: .xdata$x:0000BD24o
.text$x:00005334                 mov     ecx, [ebp-10h]
.text$x:00005337                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$x:00005337 __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:00005337
.text$x:0000533C
.text$x:0000533C ; =============== S U B R O U T I N E =======================================
.text$x:0000533C
.text$x:0000533C
.text$x:0000533C __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:0000533C                                         ; DATA XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>> const &)+5o
.text$x:0000533C
.text$x:0000533C arg_4           = dword ptr  8
.text$x:0000533C
.text$x:0000533C                 mov     edx, [esp+arg_4]
.text$x:00005340                 lea     eax, [edx+0Ch]
.text$x:00005343                 mov     ecx, [edx-8]
.text$x:00005346                 xor     ecx, eax
.text$x:00005348                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000534D                 mov     eax, offset __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:00005352                 jmp     ___CxxFrameHandler3
.text$x:00005352 __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:00005352
.text$x:00005352 ; ---------------------------------------------------------------------------
.text$x:00005357                 align 4
.text$x:00005357 _text$x         ends
.text$x:00005357
.text$mn:00005358 ; ===========================================================================
.text$mn:00005358
.text$mn:00005358 ; Segment type: Pure code
.text$mn:00005358 ; Segment permissions: Read/Execute
.text$mn:00005358 _text$mn        segment para public 'CODE' use32
.text$mn:00005358                 assume cs:_text$mn
.text$mn:00005358                 ;org 5358h
.text$mn:00005358 ; COMDAT (pick any)
.text$mn:00005358                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005358
.text$mn:00005358 ; =============== S U B R O U T I N E =======================================
.text$mn:00005358
.text$mn:00005358 ; Attributes: bp-based frame
.text$mn:00005358
.text$mn:00005358 ; int __stdcall std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(int, struct std::_Container_base12 *)
.text$mn:00005358                 public ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z
.text$mn:00005358 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z proc near
.text$mn:00005358                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Make_iter(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>)+41p
.text$mn:00005358                                         ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::begin(void)+3Dp
.text$mn:00005358
.text$mn:00005358 var_10          = dword ptr -10h
.text$mn:00005358 var_C           = dword ptr -0Ch
.text$mn:00005358 var_4           = dword ptr -4
.text$mn:00005358 arg_0           = dword ptr  8
.text$mn:00005358 arg_4           = dword ptr  0Ch
.text$mn:00005358
.text$mn:00005358                 push    ebp
.text$mn:00005359                 mov     ebp, esp
.text$mn:0000535B                 push    0FFFFFFFFh
.text$mn:0000535D                 push    offset __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z
.text$mn:00005362                 mov     eax, large fs:0
.text$mn:00005368                 push    eax
.text$mn:00005369                 push    ecx
.text$mn:0000536A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000536F                 xor     eax, ebp
.text$mn:00005371                 push    eax
.text$mn:00005372                 lea     eax, [ebp+var_C]
.text$mn:00005375                 mov     large fs:0, eax
.text$mn:0000537B                 mov     [ebp+var_10], ecx
.text$mn:0000537E                 mov     eax, [ebp+arg_4]
.text$mn:00005381                 push    eax             ; struct std::_Container_base12 *
.text$mn:00005382                 mov     ecx, [ebp+arg_0]
.text$mn:00005385                 push    ecx             ; int
.text$mn:00005386                 mov     ecx, [ebp+var_10]
.text$mn:00005389                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(wchar_t const * *,std::_Container_base12 const *)
.text$mn:0000538E                 mov     [ebp+var_4], 0
.text$mn:00005395                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000539C                 mov     eax, [ebp+var_10]
.text$mn:0000539F                 mov     ecx, [ebp+var_C]
.text$mn:000053A2                 mov     large fs:0, ecx
.text$mn:000053A9                 pop     ecx
.text$mn:000053AA                 mov     esp, ebp
.text$mn:000053AC                 pop     ebp
.text$mn:000053AD                 retn    8
.text$mn:000053AD ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z endp
.text$mn:000053AD
.text$mn:000053AD _text$mn        ends
.text$mn:000053AD
.text$x:000053B0 ; ===========================================================================
.text$x:000053B0
.text$x:000053B0 ; Segment type: Pure code
.text$x:000053B0 ; Segment permissions: Read/Execute
.text$x:000053B0 _text$x         segment para public 'CODE' use32
.text$x:000053B0                 assume cs:_text$x
.text$x:000053B0                 ;org 53B0h
.text$x:000053B0 ; COMDAT (pick associative to section at 5358)
.text$x:000053B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000053B0
.text$x:000053B0 ; =============== S U B R O U T I N E =======================================
.text$x:000053B0
.text$x:000053B0
.text$x:000053B0 __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z$0 proc near
.text$x:000053B0                                         ; DATA XREF: .xdata$x:0000BC98o
.text$x:000053B0                 mov     ecx, [ebp-10h]
.text$x:000053B3                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$x:000053B3 __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z$0 endp
.text$x:000053B3
.text$x:000053B8
.text$x:000053B8 ; =============== S U B R O U T I N E =======================================
.text$x:000053B8
.text$x:000053B8
.text$x:000053B8 __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z proc near
.text$x:000053B8                                         ; DATA XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(wchar_t const * *,std::_Container_base12 const *)+5o
.text$x:000053B8
.text$x:000053B8 arg_4           = dword ptr  8
.text$x:000053B8
.text$x:000053B8                 mov     edx, [esp+arg_4]
.text$x:000053BC                 lea     eax, [edx+0Ch]
.text$x:000053BF                 mov     ecx, [edx-8]
.text$x:000053C2                 xor     ecx, eax
.text$x:000053C4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000053C9                 mov     eax, offset __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z
.text$x:000053CE                 jmp     ___CxxFrameHandler3
.text$x:000053CE __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z endp
.text$x:000053CE
.text$x:000053CE ; ---------------------------------------------------------------------------
.text$x:000053D3                 align 4
.text$x:000053D3 _text$x         ends
.text$x:000053D3
.text$mn:000053D4 ; ===========================================================================
.text$mn:000053D4
.text$mn:000053D4 ; Segment type: Pure code
.text$mn:000053D4 ; Segment permissions: Read/Execute
.text$mn:000053D4 _text$mn        segment para public 'CODE' use32
.text$mn:000053D4                 assume cs:_text$mn
.text$mn:000053D4                 ;org 53D4h
.text$mn:000053D4 ; COMDAT (pick any)
.text$mn:000053D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000053D4
.text$mn:000053D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000053D4
.text$mn:000053D4 ; Attributes: bp-based frame
.text$mn:000053D4
.text$mn:000053D4 ; public: __thiscall std::_Vector_val<struct std::_Simple_types<wchar_t const *>>::_Vector_val<struct std::_Simple_types<wchar_t const *>>(void)
.text$mn:000053D4                 public ??0?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ
.text$mn:000053D4 ??0?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ proc near
.text$mn:000053D4                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>(std::allocator<wchar_t const *> const &)+29p
.text$mn:000053D4
.text$mn:000053D4 var_10          = dword ptr -10h
.text$mn:000053D4 var_C           = dword ptr -0Ch
.text$mn:000053D4 var_4           = dword ptr -4
.text$mn:000053D4
.text$mn:000053D4                 push    ebp
.text$mn:000053D5                 mov     ebp, esp
.text$mn:000053D7                 push    0FFFFFFFFh
.text$mn:000053D9                 push    offset __ehhandler$??0?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ
.text$mn:000053DE                 mov     eax, large fs:0
.text$mn:000053E4                 push    eax
.text$mn:000053E5                 push    ecx
.text$mn:000053E6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000053EB                 xor     eax, ebp
.text$mn:000053ED                 push    eax
.text$mn:000053EE                 lea     eax, [ebp+var_C]
.text$mn:000053F1                 mov     large fs:0, eax
.text$mn:000053F7                 mov     [ebp+var_10], ecx
.text$mn:000053FA                 mov     ecx, [ebp+var_10] ; this
.text$mn:000053FD                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00005402                 mov     [ebp+var_4], 0
.text$mn:00005409                 mov     eax, [ebp+var_10]
.text$mn:0000540C                 mov     dword ptr [eax+4], 0
.text$mn:00005413                 mov     ecx, [ebp+var_10]
.text$mn:00005416                 mov     dword ptr [ecx+8], 0
.text$mn:0000541D                 mov     edx, [ebp+var_10]
.text$mn:00005420                 mov     dword ptr [edx+0Ch], 0
.text$mn:00005427                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000542E                 mov     eax, [ebp+var_10]
.text$mn:00005431                 mov     ecx, [ebp+var_C]
.text$mn:00005434                 mov     large fs:0, ecx
.text$mn:0000543B                 pop     ecx
.text$mn:0000543C                 mov     esp, ebp
.text$mn:0000543E                 pop     ebp
.text$mn:0000543F                 retn
.text$mn:0000543F ??0?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ endp
.text$mn:0000543F
.text$mn:0000543F _text$mn        ends
.text$mn:0000543F
.text$x:00005440 ; ===========================================================================
.text$x:00005440
.text$x:00005440 ; Segment type: Pure code
.text$x:00005440 ; Segment permissions: Read/Execute
.text$x:00005440 _text$x         segment para public 'CODE' use32
.text$x:00005440                 assume cs:_text$x
.text$x:00005440                 ;org 5440h
.text$x:00005440 ; COMDAT (pick associative to section at 53D4)
.text$x:00005440                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005440
.text$x:00005440 ; =============== S U B R O U T I N E =======================================
.text$x:00005440
.text$x:00005440
.text$x:00005440 __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00005440                                         ; DATA XREF: .xdata$x:0000B8BCo
.text$x:00005440                 mov     ecx, [ebp-10h]  ; this
.text$x:00005443                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00005443 __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ$0 endp
.text$x:00005443
.text$x:00005448
.text$x:00005448 ; =============== S U B R O U T I N E =======================================
.text$x:00005448
.text$x:00005448
.text$x:00005448 __ehhandler$??0?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ proc near
.text$x:00005448                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<wchar_t const *>>::_Vector_val<std::_Simple_types<wchar_t const *>>(void)+5o
.text$x:00005448
.text$x:00005448 arg_4           = dword ptr  8
.text$x:00005448
.text$x:00005448                 mov     edx, [esp+arg_4]
.text$x:0000544C                 lea     eax, [edx+0Ch]
.text$x:0000544F                 mov     ecx, [edx-8]
.text$x:00005452                 xor     ecx, eax
.text$x:00005454                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005459                 mov     eax, offset __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ
.text$x:0000545E                 jmp     ___CxxFrameHandler3
.text$x:0000545E __ehhandler$??0?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ endp
.text$x:0000545E
.text$x:0000545E ; ---------------------------------------------------------------------------
.text$x:00005463                 align 4
.text$x:00005463 _text$x         ends
.text$x:00005463
.text$mn:00005464 ; ===========================================================================
.text$mn:00005464
.text$mn:00005464 ; Segment type: Pure code
.text$mn:00005464 ; Segment permissions: Read/Execute
.text$mn:00005464 _text$mn        segment para public 'CODE' use32
.text$mn:00005464                 assume cs:_text$mn
.text$mn:00005464                 ;org 5464h
.text$mn:00005464 ; COMDAT (pick any)
.text$mn:00005464                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005464
.text$mn:00005464 ; =============== S U B R O U T I N E =======================================
.text$mn:00005464
.text$mn:00005464 ; Attributes: bp-based frame
.text$mn:00005464
.text$mn:00005464 ; public: __thiscall std::_Wrap_alloc<class std::allocator<char>>::_Wrap_alloc<class std::allocator<char>>(void)
.text$mn:00005464                 public ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
.text$mn:00005464 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
.text$mn:00005464                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)+Ap
.text$mn:00005464
.text$mn:00005464 var_4           = dword ptr -4
.text$mn:00005464
.text$mn:00005464                 push    ebp
.text$mn:00005465                 mov     ebp, esp
.text$mn:00005467                 push    ecx
.text$mn:00005468                 mov     [ebp+var_4], ecx
.text$mn:0000546B                 mov     ecx, [ebp+var_4]
.text$mn:0000546E                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:00005473                 mov     eax, [ebp+var_4]
.text$mn:00005476                 mov     esp, ebp
.text$mn:00005478                 pop     ebp
.text$mn:00005479                 retn
.text$mn:00005479 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ endp
.text$mn:00005479
.text$mn:00005479 ; ---------------------------------------------------------------------------
.text$mn:0000547A                 align 4
.text$mn:0000547A _text$mn        ends
.text$mn:0000547A
.text$mn:0000547C ; ===========================================================================
.text$mn:0000547C
.text$mn:0000547C ; Segment type: Pure code
.text$mn:0000547C ; Segment permissions: Read/Execute
.text$mn:0000547C _text$mn        segment para public 'CODE' use32
.text$mn:0000547C                 assume cs:_text$mn
.text$mn:0000547C                 ;org 547Ch
.text$mn:0000547C ; COMDAT (pick any)
.text$mn:0000547C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000547C
.text$mn:0000547C ; =============== S U B R O U T I N E =======================================
.text$mn:0000547C
.text$mn:0000547C ; Attributes: bp-based frame
.text$mn:0000547C
.text$mn:0000547C ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t const *>>::_Wrap_alloc<class std::allocator<wchar_t const *>>(void)
.text$mn:0000547C                 public ??0?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAE@XZ
.text$mn:0000547C ??0?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAE@XZ proc near
.text$mn:0000547C                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Getal(void)+Ap
.text$mn:0000547C
.text$mn:0000547C var_4           = dword ptr -4
.text$mn:0000547C
.text$mn:0000547C                 push    ebp
.text$mn:0000547D                 mov     ebp, esp
.text$mn:0000547F                 push    ecx
.text$mn:00005480                 mov     [ebp+var_4], ecx
.text$mn:00005483                 mov     ecx, [ebp+var_4]
.text$mn:00005486                 call    ??0?$allocator@PB_W@std@@QAE@XZ ; std::allocator<wchar_t const *>::allocator<wchar_t const *>(void)
.text$mn:0000548B                 mov     eax, [ebp+var_4]
.text$mn:0000548E                 mov     esp, ebp
.text$mn:00005490                 pop     ebp
.text$mn:00005491                 retn
.text$mn:00005491 ??0?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAE@XZ endp
.text$mn:00005491
.text$mn:00005491 ; ---------------------------------------------------------------------------
.text$mn:00005492                 align 4
.text$mn:00005492 _text$mn        ends
.text$mn:00005492
.text$mn:00005494 ; ===========================================================================
.text$mn:00005494
.text$mn:00005494 ; Segment type: Pure code
.text$mn:00005494 ; Segment permissions: Read/Execute
.text$mn:00005494 _text$mn        segment para public 'CODE' use32
.text$mn:00005494                 assume cs:_text$mn
.text$mn:00005494                 ;org 5494h
.text$mn:00005494 ; COMDAT (pick any)
.text$mn:00005494                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005494
.text$mn:00005494 ; =============== S U B R O U T I N E =======================================
.text$mn:00005494
.text$mn:00005494 ; Attributes: bp-based frame
.text$mn:00005494
.text$mn:00005494 ; public: __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>(void)
.text$mn:00005494                 public ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
.text$mn:00005494 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00005494                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Alloc_proxy(void)+Cp
.text$mn:00005494                                         ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Free_proxy(void)+Cp
.text$mn:00005494
.text$mn:00005494 var_4           = dword ptr -4
.text$mn:00005494
.text$mn:00005494                 push    ebp
.text$mn:00005495                 mov     ebp, esp
.text$mn:00005497                 push    ecx
.text$mn:00005498                 mov     [ebp+var_4], ecx
.text$mn:0000549B                 mov     ecx, [ebp+var_4]
.text$mn:0000549E                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:000054A3                 mov     eax, [ebp+var_4]
.text$mn:000054A6                 mov     esp, ebp
.text$mn:000054A8                 pop     ebp
.text$mn:000054A9                 retn
.text$mn:000054A9 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ endp
.text$mn:000054A9
.text$mn:000054A9 ; ---------------------------------------------------------------------------
.text$mn:000054AA                 align 4
.text$mn:000054AA _text$mn        ends
.text$mn:000054AA
.text$mn:000054AC ; ===========================================================================
.text$mn:000054AC
.text$mn:000054AC ; Segment type: Pure code
.text$mn:000054AC ; Segment permissions: Read/Execute
.text$mn:000054AC _text$mn        segment para public 'CODE' use32
.text$mn:000054AC                 assume cs:_text$mn
.text$mn:000054AC                 ;org 54ACh
.text$mn:000054AC ; COMDAT (pick any)
.text$mn:000054AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000054AC
.text$mn:000054AC ; =============== S U B R O U T I N E =======================================
.text$mn:000054AC
.text$mn:000054AC ; Attributes: bp-based frame
.text$mn:000054AC
.text$mn:000054AC ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(class std::allocator<wchar_t> const &)
.text$mn:000054AC                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:000054AC ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:000054AC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)+1Dp
.text$mn:000054AC
.text$mn:000054AC var_4           = dword ptr -4
.text$mn:000054AC arg_0           = dword ptr  8
.text$mn:000054AC
.text$mn:000054AC                 push    ebp
.text$mn:000054AD                 mov     ebp, esp
.text$mn:000054AF                 push    ecx
.text$mn:000054B0                 mov     [ebp+var_4], ecx
.text$mn:000054B3                 mov     eax, [ebp+arg_0]
.text$mn:000054B6                 push    eax
.text$mn:000054B7                 mov     ecx, [ebp+var_4]
.text$mn:000054BA                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:000054BF                 mov     eax, [ebp+var_4]
.text$mn:000054C2                 mov     esp, ebp
.text$mn:000054C4                 pop     ebp
.text$mn:000054C5                 retn    4
.text$mn:000054C5 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:000054C5
.text$mn:000054C5 _text$mn        ends
.text$mn:000054C5
.text$mn:000054C8 ; ===========================================================================
.text$mn:000054C8
.text$mn:000054C8 ; Segment type: Pure code
.text$mn:000054C8 ; Segment permissions: Read/Execute
.text$mn:000054C8 _text$mn        segment para public 'CODE' use32
.text$mn:000054C8                 assume cs:_text$mn
.text$mn:000054C8                 ;org 54C8h
.text$mn:000054C8 ; COMDAT (pick any)
.text$mn:000054C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000054C8
.text$mn:000054C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000054C8
.text$mn:000054C8 ; Attributes: bp-based frame
.text$mn:000054C8
.text$mn:000054C8 ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(void)
.text$mn:000054C8                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ
.text$mn:000054C8 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ proc near
.text$mn:000054C8                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)+Ap
.text$mn:000054C8
.text$mn:000054C8 var_4           = dword ptr -4
.text$mn:000054C8
.text$mn:000054C8                 push    ebp
.text$mn:000054C9                 mov     ebp, esp
.text$mn:000054CB                 push    ecx
.text$mn:000054CC                 mov     [ebp+var_4], ecx
.text$mn:000054CF                 mov     ecx, [ebp+var_4]
.text$mn:000054D2                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:000054D7                 mov     eax, [ebp+var_4]
.text$mn:000054DA                 mov     esp, ebp
.text$mn:000054DC                 pop     ebp
.text$mn:000054DD                 retn
.text$mn:000054DD ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ endp
.text$mn:000054DD
.text$mn:000054DD ; ---------------------------------------------------------------------------
.text$mn:000054DE                 align 10h
.text$mn:000054DE _text$mn        ends
.text$mn:000054DE
.text$mn:000054E0 ; ===========================================================================
.text$mn:000054E0
.text$mn:000054E0 ; Segment type: Pure code
.text$mn:000054E0 ; Segment permissions: Read/Execute
.text$mn:000054E0 _text$mn        segment para public 'CODE' use32
.text$mn:000054E0                 assume cs:_text$mn
.text$mn:000054E0                 ;org 54E0h
.text$mn:000054E0 ; COMDAT (pick any)
.text$mn:000054E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000054E0
.text$mn:000054E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000054E0
.text$mn:000054E0 ; Attributes: bp-based frame
.text$mn:000054E0
.text$mn:000054E0 ; public: __thiscall std::allocator<char>::allocator<char>(void)
.text$mn:000054E0                 public ??0?$allocator@D@std@@QAE@XZ
.text$mn:000054E0 ??0?$allocator@D@std@@QAE@XZ proc near  ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)+Ap
.text$mn:000054E0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+2Bp ...
.text$mn:000054E0
.text$mn:000054E0 var_4           = dword ptr -4
.text$mn:000054E0
.text$mn:000054E0                 push    ebp
.text$mn:000054E1                 mov     ebp, esp
.text$mn:000054E3                 push    ecx
.text$mn:000054E4                 mov     [ebp+var_4], ecx
.text$mn:000054E7                 mov     eax, [ebp+var_4]
.text$mn:000054EA                 mov     esp, ebp
.text$mn:000054EC                 pop     ebp
.text$mn:000054ED                 retn
.text$mn:000054ED ??0?$allocator@D@std@@QAE@XZ endp
.text$mn:000054ED
.text$mn:000054ED ; ---------------------------------------------------------------------------
.text$mn:000054EE                 align 10h
.text$mn:000054EE _text$mn        ends
.text$mn:000054EE
.text$mn:000054F0 ; ===========================================================================
.text$mn:000054F0
.text$mn:000054F0 ; Segment type: Pure code
.text$mn:000054F0 ; Segment permissions: Read/Execute
.text$mn:000054F0 _text$mn        segment para public 'CODE' use32
.text$mn:000054F0                 assume cs:_text$mn
.text$mn:000054F0                 ;org 54F0h
.text$mn:000054F0 ; COMDAT (pick any)
.text$mn:000054F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000054F0
.text$mn:000054F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000054F0
.text$mn:000054F0 ; Attributes: bp-based frame
.text$mn:000054F0
.text$mn:000054F0 ; public: __thiscall std::allocator<wchar_t const *>::allocator<wchar_t const *>(void)
.text$mn:000054F0                 public ??0?$allocator@PB_W@std@@QAE@XZ
.text$mn:000054F0 ??0?$allocator@PB_W@std@@QAE@XZ proc near
.text$mn:000054F0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t const *>>::_Wrap_alloc<std::allocator<wchar_t const *>>(void)+Ap
.text$mn:000054F0                                         ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::vector<wchar_t const *,std::allocator<wchar_t const *>>(void)+2Bp
.text$mn:000054F0
.text$mn:000054F0 var_4           = dword ptr -4
.text$mn:000054F0
.text$mn:000054F0                 push    ebp
.text$mn:000054F1                 mov     ebp, esp
.text$mn:000054F3                 push    ecx
.text$mn:000054F4                 mov     [ebp+var_4], ecx
.text$mn:000054F7                 mov     eax, [ebp+var_4]
.text$mn:000054FA                 mov     esp, ebp
.text$mn:000054FC                 pop     ebp
.text$mn:000054FD                 retn
.text$mn:000054FD ??0?$allocator@PB_W@std@@QAE@XZ endp
.text$mn:000054FD
.text$mn:000054FD ; ---------------------------------------------------------------------------
.text$mn:000054FE                 align 10h
.text$mn:000054FE _text$mn        ends
.text$mn:000054FE
.text$mn:00005500 ; ===========================================================================
.text$mn:00005500
.text$mn:00005500 ; Segment type: Pure code
.text$mn:00005500 ; Segment permissions: Read/Execute
.text$mn:00005500 _text$mn        segment para public 'CODE' use32
.text$mn:00005500                 assume cs:_text$mn
.text$mn:00005500                 ;org 5500h
.text$mn:00005500 ; COMDAT (pick any)
.text$mn:00005500                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005500
.text$mn:00005500 ; =============== S U B R O U T I N E =======================================
.text$mn:00005500
.text$mn:00005500 ; Attributes: bp-based frame
.text$mn:00005500
.text$mn:00005500 ; public: __thiscall std::allocator<struct std::_Container_proxy>::allocator<struct std::_Container_proxy>(void)
.text$mn:00005500                 public ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
.text$mn:00005500 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc near
.text$mn:00005500                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)+Ap
.text$mn:00005500                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+Cp ...
.text$mn:00005500
.text$mn:00005500 var_4           = dword ptr -4
.text$mn:00005500
.text$mn:00005500                 push    ebp
.text$mn:00005501                 mov     ebp, esp
.text$mn:00005503                 push    ecx
.text$mn:00005504                 mov     [ebp+var_4], ecx
.text$mn:00005507                 mov     eax, [ebp+var_4]
.text$mn:0000550A                 mov     esp, ebp
.text$mn:0000550C                 pop     ebp
.text$mn:0000550D                 retn
.text$mn:0000550D ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ endp
.text$mn:0000550D
.text$mn:0000550D ; ---------------------------------------------------------------------------
.text$mn:0000550E                 align 10h
.text$mn:0000550E _text$mn        ends
.text$mn:0000550E
.text$mn:00005510 ; ===========================================================================
.text$mn:00005510
.text$mn:00005510 ; Segment type: Pure code
.text$mn:00005510 ; Segment permissions: Read/Execute
.text$mn:00005510 _text$mn        segment para public 'CODE' use32
.text$mn:00005510                 assume cs:_text$mn
.text$mn:00005510                 ;org 5510h
.text$mn:00005510 ; COMDAT (pick any)
.text$mn:00005510                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005510
.text$mn:00005510 ; =============== S U B R O U T I N E =======================================
.text$mn:00005510
.text$mn:00005510 ; Attributes: bp-based frame
.text$mn:00005510
.text$mn:00005510 ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(class std::allocator<wchar_t> const &)
.text$mn:00005510                 public ??0?$allocator@_W@std@@QAE@ABV01@@Z
.text$mn:00005510 ??0?$allocator@_W@std@@QAE@ABV01@@Z proc near
.text$mn:00005510                                         ; CODE XREF: std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+Bp
.text$mn:00005510                                         ; std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+18p ...
.text$mn:00005510
.text$mn:00005510 var_4           = dword ptr -4
.text$mn:00005510
.text$mn:00005510                 push    ebp
.text$mn:00005511                 mov     ebp, esp
.text$mn:00005513                 push    ecx
.text$mn:00005514                 mov     [ebp+var_4], ecx
.text$mn:00005517                 mov     eax, [ebp+var_4]
.text$mn:0000551A                 mov     esp, ebp
.text$mn:0000551C                 pop     ebp
.text$mn:0000551D                 retn    4
.text$mn:0000551D ??0?$allocator@_W@std@@QAE@ABV01@@Z endp
.text$mn:0000551D
.text$mn:0000551D _text$mn        ends
.text$mn:0000551D
.text$mn:00005520 ; ===========================================================================
.text$mn:00005520
.text$mn:00005520 ; Segment type: Pure code
.text$mn:00005520 ; Segment permissions: Read/Execute
.text$mn:00005520 _text$mn        segment para public 'CODE' use32
.text$mn:00005520                 assume cs:_text$mn
.text$mn:00005520                 ;org 5520h
.text$mn:00005520 ; COMDAT (pick any)
.text$mn:00005520                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005520
.text$mn:00005520 ; =============== S U B R O U T I N E =======================================
.text$mn:00005520
.text$mn:00005520 ; Attributes: bp-based frame
.text$mn:00005520
.text$mn:00005520 ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00005520                 public ??0?$allocator@_W@std@@QAE@XZ
.text$mn:00005520 ??0?$allocator@_W@std@@QAE@XZ proc near ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)+Ap
.text$mn:00005520                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+2Bp ...
.text$mn:00005520
.text$mn:00005520 var_4           = dword ptr -4
.text$mn:00005520
.text$mn:00005520                 push    ebp
.text$mn:00005521                 mov     ebp, esp
.text$mn:00005523                 push    ecx
.text$mn:00005524                 mov     [ebp+var_4], ecx
.text$mn:00005527                 mov     eax, [ebp+var_4]
.text$mn:0000552A                 mov     esp, ebp
.text$mn:0000552C                 pop     ebp
.text$mn:0000552D                 retn
.text$mn:0000552D ??0?$allocator@_W@std@@QAE@XZ endp
.text$mn:0000552D
.text$mn:0000552D ; ---------------------------------------------------------------------------
.text$mn:0000552E                 align 10h
.text$mn:0000552E _text$mn        ends
.text$mn:0000552E
.text$mn:00005530 ; ===========================================================================
.text$mn:00005530
.text$mn:00005530 ; Segment type: Pure code
.text$mn:00005530 ; Segment permissions: Read/Execute
.text$mn:00005530 _text$mn        segment para public 'CODE' use32
.text$mn:00005530                 assume cs:_text$mn
.text$mn:00005530                 ;org 5530h
.text$mn:00005530 ; COMDAT (pick any)
.text$mn:00005530                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005530
.text$mn:00005530 ; =============== S U B R O U T I N E =======================================
.text$mn:00005530
.text$mn:00005530 ; Attributes: bp-based frame
.text$mn:00005530
.text$mn:00005530 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char *Str)
.text$mn:00005530                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:00005530 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$mn:00005530                                         ; CODE XREF: std::_Generic_error_category::message(int)+5Ap
.text$mn:00005530                                         ; std::_Iostream_error_category::message(int)+3Dp ...
.text$mn:00005530
.text$mn:00005530 var_14          = dword ptr -14h
.text$mn:00005530 var_D           = byte ptr -0Dh
.text$mn:00005530 var_C           = dword ptr -0Ch
.text$mn:00005530 var_4           = dword ptr -4
.text$mn:00005530 Str             = dword ptr  8
.text$mn:00005530
.text$mn:00005530                 push    ebp
.text$mn:00005531                 mov     ebp, esp
.text$mn:00005533                 push    0FFFFFFFFh
.text$mn:00005535                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:0000553A                 mov     eax, large fs:0
.text$mn:00005540                 push    eax
.text$mn:00005541                 sub     esp, 8
.text$mn:00005544                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005549                 xor     eax, ebp
.text$mn:0000554B                 push    eax
.text$mn:0000554C                 lea     eax, [ebp+var_C]
.text$mn:0000554F                 mov     large fs:0, eax
.text$mn:00005555                 mov     [ebp+var_14], ecx
.text$mn:00005558                 lea     ecx, [ebp+var_D]
.text$mn:0000555B                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:00005560                 push    eax
.text$mn:00005561                 mov     ecx, [ebp+var_14]
.text$mn:00005564                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:00005569                 mov     [ebp+var_4], 0
.text$mn:00005570                 push    0               ; Size
.text$mn:00005572                 push    0               ; char
.text$mn:00005574                 mov     ecx, [ebp+var_14]
.text$mn:00005577                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:0000557C                 mov     eax, [ebp+Str]
.text$mn:0000557F                 push    eax             ; Str
.text$mn:00005580                 mov     ecx, [ebp+var_14]
.text$mn:00005583                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)
.text$mn:00005588                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000558F                 mov     eax, [ebp+var_14]
.text$mn:00005592                 mov     ecx, [ebp+var_C]
.text$mn:00005595                 mov     large fs:0, ecx
.text$mn:0000559C                 pop     ecx
.text$mn:0000559D                 mov     esp, ebp
.text$mn:0000559F                 pop     ebp
.text$mn:000055A0                 retn    4
.text$mn:000055A0 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$mn:000055A0
.text$mn:000055A0 ; ---------------------------------------------------------------------------
.text$mn:000055A3                 align 4
.text$mn:000055A3 _text$mn        ends
.text$mn:000055A3
.text$x:000055A4 ; ===========================================================================
.text$x:000055A4
.text$x:000055A4 ; Segment type: Pure code
.text$x:000055A4 ; Segment permissions: Read/Execute
.text$x:000055A4 _text$x         segment para public 'CODE' use32
.text$x:000055A4                 assume cs:_text$x
.text$x:000055A4                 ;org 55A4h
.text$x:000055A4 ; COMDAT (pick associative to section at 5530)
.text$x:000055A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000055A4
.text$x:000055A4 ; =============== S U B R O U T I N E =======================================
.text$x:000055A4
.text$x:000055A4
.text$x:000055A4 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
.text$x:000055A4                                         ; DATA XREF: .xdata$x:0000B1A8o
.text$x:000055A4                 mov     ecx, [ebp-14h]
.text$x:000055A7                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:000055A7 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 endp
.text$x:000055A7
.text$x:000055AC
.text$x:000055AC ; =============== S U B R O U T I N E =======================================
.text$x:000055AC
.text$x:000055AC
.text$x:000055AC __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$x:000055AC                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+5o
.text$x:000055AC
.text$x:000055AC arg_4           = dword ptr  8
.text$x:000055AC
.text$x:000055AC                 mov     edx, [esp+arg_4]
.text$x:000055B0                 lea     eax, [edx+0Ch]
.text$x:000055B3                 mov     ecx, [edx-0Ch]
.text$x:000055B6                 xor     ecx, eax
.text$x:000055B8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000055BD                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$x:000055C2                 jmp     ___CxxFrameHandler3
.text$x:000055C2 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$x:000055C2
.text$x:000055C2 ; ---------------------------------------------------------------------------
.text$x:000055C7                 align 4
.text$x:000055C7 _text$x         ends
.text$x:000055C7
.text$mn:000055C8 ; ===========================================================================
.text$mn:000055C8
.text$mn:000055C8 ; Segment type: Pure code
.text$mn:000055C8 ; Segment permissions: Read/Execute
.text$mn:000055C8 _text$mn        segment para public 'CODE' use32
.text$mn:000055C8                 assume cs:_text$mn
.text$mn:000055C8                 ;org 55C8h
.text$mn:000055C8 ; COMDAT (pick any)
.text$mn:000055C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000055C8
.text$mn:000055C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000055C8
.text$mn:000055C8 ; Attributes: bp-based frame
.text$mn:000055C8
.text$mn:000055C8 ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
.text$mn:000055C8                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:000055C8 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$mn:000055C8                                         ; CODE XREF: Notepad_plus_Window::Notepad_plus_Window(void)+6Ap
.text$mn:000055C8
.text$mn:000055C8 var_14          = dword ptr -14h
.text$mn:000055C8 var_D           = byte ptr -0Dh
.text$mn:000055C8 var_C           = dword ptr -0Ch
.text$mn:000055C8 var_4           = dword ptr -4
.text$mn:000055C8
.text$mn:000055C8                 push    ebp
.text$mn:000055C9                 mov     ebp, esp
.text$mn:000055CB                 push    0FFFFFFFFh
.text$mn:000055CD                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:000055D2                 mov     eax, large fs:0
.text$mn:000055D8                 push    eax
.text$mn:000055D9                 sub     esp, 8
.text$mn:000055DC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000055E1                 xor     eax, ebp
.text$mn:000055E3                 push    eax
.text$mn:000055E4                 lea     eax, [ebp+var_C]
.text$mn:000055E7                 mov     large fs:0, eax
.text$mn:000055ED                 mov     [ebp+var_14], ecx
.text$mn:000055F0                 lea     ecx, [ebp+var_D]
.text$mn:000055F3                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:000055F8                 push    eax
.text$mn:000055F9                 mov     ecx, [ebp+var_14]
.text$mn:000055FC                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:00005601                 mov     [ebp+var_4], 0
.text$mn:00005608                 push    0               ; Size
.text$mn:0000560A                 push    0               ; char
.text$mn:0000560C                 mov     ecx, [ebp+var_14]
.text$mn:0000560F                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00005614                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000561B                 mov     eax, [ebp+var_14]
.text$mn:0000561E                 mov     ecx, [ebp+var_C]
.text$mn:00005621                 mov     large fs:0, ecx
.text$mn:00005628                 pop     ecx
.text$mn:00005629                 mov     esp, ebp
.text$mn:0000562B                 pop     ebp
.text$mn:0000562C                 retn
.text$mn:0000562C ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$mn:0000562C
.text$mn:0000562C ; ---------------------------------------------------------------------------
.text$mn:0000562D                 align 10h
.text$mn:0000562D _text$mn        ends
.text$mn:0000562D
.text$x:00005630 ; ===========================================================================
.text$x:00005630
.text$x:00005630 ; Segment type: Pure code
.text$x:00005630 ; Segment permissions: Read/Execute
.text$x:00005630 _text$x         segment para public 'CODE' use32
.text$x:00005630                 assume cs:_text$x
.text$x:00005630                 ;org 5630h
.text$x:00005630 ; COMDAT (pick associative to section at 55C8)
.text$x:00005630                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005630
.text$x:00005630 ; =============== S U B R O U T I N E =======================================
.text$x:00005630
.text$x:00005630
.text$x:00005630 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
.text$x:00005630                                         ; DATA XREF: .xdata$x:0000B17Co
.text$x:00005630                 mov     ecx, [ebp-14h]
.text$x:00005633                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:00005633 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 endp
.text$x:00005633
.text$x:00005638
.text$x:00005638 ; =============== S U B R O U T I N E =======================================
.text$x:00005638
.text$x:00005638
.text$x:00005638 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$x:00005638                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+5o
.text$x:00005638
.text$x:00005638 arg_4           = dword ptr  8
.text$x:00005638
.text$x:00005638                 mov     edx, [esp+arg_4]
.text$x:0000563C                 lea     eax, [edx+0Ch]
.text$x:0000563F                 mov     ecx, [edx-0Ch]
.text$x:00005642                 xor     ecx, eax
.text$x:00005644                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005649                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$x:0000564E                 jmp     ___CxxFrameHandler3
.text$x:0000564E __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$x:0000564E
.text$x:0000564E ; ---------------------------------------------------------------------------
.text$x:00005653                 align 4
.text$x:00005653 _text$x         ends
.text$x:00005653
.text$mn:00005654 ; ===========================================================================
.text$mn:00005654
.text$mn:00005654 ; Segment type: Pure code
.text$mn:00005654 ; Segment permissions: Read/Execute
.text$mn:00005654 _text$mn        segment para public 'CODE' use32
.text$mn:00005654                 assume cs:_text$mn
.text$mn:00005654                 ;org 5654h
.text$mn:00005654 ; COMDAT (pick any)
.text$mn:00005654                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005654
.text$mn:00005654 ; =============== S U B R O U T I N E =======================================
.text$mn:00005654
.text$mn:00005654 ; Attributes: bp-based frame
.text$mn:00005654
.text$mn:00005654 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:00005654                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.text$mn:00005654 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z proc near
.text$mn:00005654                                         ; CODE XREF: getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &)+1BAp
.text$mn:00005654                                         ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+7Fp
.text$mn:00005654
.text$mn:00005654 var_14          = dword ptr -14h
.text$mn:00005654 var_D           = byte ptr -0Dh
.text$mn:00005654 var_C           = dword ptr -0Ch
.text$mn:00005654 var_4           = dword ptr -4
.text$mn:00005654 arg_0           = dword ptr  8
.text$mn:00005654
.text$mn:00005654                 push    ebp
.text$mn:00005655                 mov     ebp, esp
.text$mn:00005657                 push    0FFFFFFFFh
.text$mn:00005659                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.text$mn:0000565E                 mov     eax, large fs:0
.text$mn:00005664                 push    eax
.text$mn:00005665                 sub     esp, 8
.text$mn:00005668                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000566D                 xor     eax, ebp
.text$mn:0000566F                 push    eax
.text$mn:00005670                 lea     eax, [ebp+var_C]
.text$mn:00005673                 mov     large fs:0, eax
.text$mn:00005679                 mov     [ebp+var_14], ecx
.text$mn:0000567C                 lea     eax, [ebp+var_D]
.text$mn:0000567F                 push    eax
.text$mn:00005680                 mov     ecx, [ebp+arg_0]
.text$mn:00005683                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00005688                 push    eax
.text$mn:00005689                 mov     ecx, [ebp+var_14]
.text$mn:0000568C                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00005691                 mov     [ebp+var_4], 0
.text$mn:00005698                 push    0
.text$mn:0000569A                 push    0
.text$mn:0000569C                 mov     ecx, [ebp+var_14]
.text$mn:0000569F                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000056A4                 mov     ecx, [ebp+arg_0]
.text$mn:000056A7                 push    ecx
.text$mn:000056A8                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000056AD                 add     esp, 4
.text$mn:000056B0                 push    eax
.text$mn:000056B1                 mov     ecx, [ebp+var_14]
.text$mn:000056B4                 call    ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:000056B9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000056C0                 mov     eax, [ebp+var_14]
.text$mn:000056C3                 mov     ecx, [ebp+var_C]
.text$mn:000056C6                 mov     large fs:0, ecx
.text$mn:000056CD                 pop     ecx
.text$mn:000056CE                 mov     esp, ebp
.text$mn:000056D0                 pop     ebp
.text$mn:000056D1                 retn    4
.text$mn:000056D1 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z endp
.text$mn:000056D1
.text$mn:000056D1 _text$mn        ends
.text$mn:000056D1
.text$x:000056D4 ; ===========================================================================
.text$x:000056D4
.text$x:000056D4 ; Segment type: Pure code
.text$x:000056D4 ; Segment permissions: Read/Execute
.text$x:000056D4 _text$x         segment para public 'CODE' use32
.text$x:000056D4                 assume cs:_text$x
.text$x:000056D4                 ;org 56D4h
.text$x:000056D4 ; COMDAT (pick associative to section at 5654)
.text$x:000056D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000056D4
.text$x:000056D4 ; =============== S U B R O U T I N E =======================================
.text$x:000056D4
.text$x:000056D4
.text$x:000056D4 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0 proc near
.text$x:000056D4                                         ; DATA XREF: .xdata$x:0000B54Co
.text$x:000056D4                 mov     ecx, [ebp-14h]
.text$x:000056D7                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:000056D7 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0 endp
.text$x:000056D7
.text$x:000056DC
.text$x:000056DC ; =============== S U B R O U T I N E =======================================
.text$x:000056DC
.text$x:000056DC
.text$x:000056DC __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z proc near
.text$x:000056DC                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5o
.text$x:000056DC
.text$x:000056DC arg_4           = dword ptr  8
.text$x:000056DC
.text$x:000056DC                 mov     edx, [esp+arg_4]
.text$x:000056E0                 lea     eax, [edx+0Ch]
.text$x:000056E3                 mov     ecx, [edx-0Ch]
.text$x:000056E6                 xor     ecx, eax
.text$x:000056E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000056ED                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.text$x:000056F2                 jmp     ___CxxFrameHandler3
.text$x:000056F2 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z endp
.text$x:000056F2
.text$x:000056F2 ; ---------------------------------------------------------------------------
.text$x:000056F7                 align 4
.text$x:000056F7 _text$x         ends
.text$x:000056F7
.text$mn:000056F8 ; ===========================================================================
.text$mn:000056F8
.text$mn:000056F8 ; Segment type: Pure code
.text$mn:000056F8 ; Segment permissions: Read/Execute
.text$mn:000056F8 _text$mn        segment para public 'CODE' use32
.text$mn:000056F8                 assume cs:_text$mn
.text$mn:000056F8                 ;org 56F8h
.text$mn:000056F8 ; COMDAT (pick any)
.text$mn:000056F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000056F8
.text$mn:000056F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000056F8
.text$mn:000056F8 ; Attributes: bp-based frame
.text$mn:000056F8
.text$mn:000056F8 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:000056F8                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$mn:000056F8 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z proc near
.text$mn:000056F8                                         ; CODE XREF: WinMain(x,x,x,x)+359p
.text$mn:000056F8                                         ; doException(Notepad_plus_Window &)+95p ...
.text$mn:000056F8
.text$mn:000056F8 var_14          = dword ptr -14h
.text$mn:000056F8 var_E           = byte ptr -0Eh
.text$mn:000056F8 var_D           = byte ptr -0Dh
.text$mn:000056F8 var_C           = dword ptr -0Ch
.text$mn:000056F8 var_4           = dword ptr -4
.text$mn:000056F8 arg_0           = dword ptr  8
.text$mn:000056F8
.text$mn:000056F8                 push    ebp
.text$mn:000056F9                 mov     ebp, esp
.text$mn:000056FB                 push    0FFFFFFFFh
.text$mn:000056FD                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$mn:00005702                 mov     eax, large fs:0
.text$mn:00005708                 push    eax
.text$mn:00005709                 sub     esp, 8
.text$mn:0000570C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005711                 xor     eax, ebp
.text$mn:00005713                 push    eax
.text$mn:00005714                 lea     eax, [ebp+var_C]
.text$mn:00005717                 mov     large fs:0, eax
.text$mn:0000571D                 mov     [ebp+var_14], ecx
.text$mn:00005720                 lea     eax, [ebp+var_D]
.text$mn:00005723                 push    eax
.text$mn:00005724                 lea     ecx, [ebp+var_E]
.text$mn:00005727                 push    ecx
.text$mn:00005728                 mov     ecx, [ebp+arg_0]
.text$mn:0000572B                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00005730                 mov     ecx, eax
.text$mn:00005732                 call    ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)
.text$mn:00005737                 push    eax
.text$mn:00005738                 mov     ecx, [ebp+var_14]
.text$mn:0000573B                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00005740                 mov     [ebp+var_4], 0
.text$mn:00005747                 push    0
.text$mn:00005749                 push    0
.text$mn:0000574B                 mov     ecx, [ebp+var_14]
.text$mn:0000574E                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00005753                 mov     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00005759                 push    edx
.text$mn:0000575A                 push    0
.text$mn:0000575C                 mov     eax, [ebp+arg_0]
.text$mn:0000575F                 push    eax
.text$mn:00005760                 mov     ecx, [ebp+var_14]
.text$mn:00005763                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00005768                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000576F                 mov     eax, [ebp+var_14]
.text$mn:00005772                 mov     ecx, [ebp+var_C]
.text$mn:00005775                 mov     large fs:0, ecx
.text$mn:0000577C                 pop     ecx
.text$mn:0000577D                 mov     esp, ebp
.text$mn:0000577F                 pop     ebp
.text$mn:00005780                 retn    4
.text$mn:00005780 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z endp
.text$mn:00005780
.text$mn:00005780 ; ---------------------------------------------------------------------------
.text$mn:00005783                 align 4
.text$mn:00005783 _text$mn        ends
.text$mn:00005783
.text$x:00005784 ; ===========================================================================
.text$x:00005784
.text$x:00005784 ; Segment type: Pure code
.text$x:00005784 ; Segment permissions: Read/Execute
.text$x:00005784 _text$x         segment para public 'CODE' use32
.text$x:00005784                 assume cs:_text$x
.text$x:00005784                 ;org 5784h
.text$x:00005784 ; COMDAT (pick associative to section at 56F8)
.text$x:00005784                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005784
.text$x:00005784 ; =============== S U B R O U T I N E =======================================
.text$x:00005784
.text$x:00005784
.text$x:00005784 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00005784                                         ; DATA XREF: .xdata$x:0000B4C8o
.text$x:00005784                 mov     ecx, [ebp-14h]
.text$x:00005787                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00005787 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 endp
.text$x:00005787
.text$x:0000578C
.text$x:0000578C ; =============== S U B R O U T I N E =======================================
.text$x:0000578C
.text$x:0000578C
.text$x:0000578C __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z proc near
.text$x:0000578C                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5o
.text$x:0000578C
.text$x:0000578C arg_4           = dword ptr  8
.text$x:0000578C
.text$x:0000578C                 mov     edx, [esp+arg_4]
.text$x:00005790                 lea     eax, [edx+0Ch]
.text$x:00005793                 mov     ecx, [edx-0Ch]
.text$x:00005796                 xor     ecx, eax
.text$x:00005798                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000579D                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$x:000057A2                 jmp     ___CxxFrameHandler3
.text$x:000057A2 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z endp
.text$x:000057A2
.text$x:000057A2 ; ---------------------------------------------------------------------------
.text$x:000057A7                 align 4
.text$x:000057A7 _text$x         ends
.text$x:000057A7
.text$mn:000057A8 ; ===========================================================================
.text$mn:000057A8
.text$mn:000057A8 ; Segment type: Pure code
.text$mn:000057A8 ; Segment permissions: Read/Execute
.text$mn:000057A8 _text$mn        segment para public 'CODE' use32
.text$mn:000057A8                 assume cs:_text$mn
.text$mn:000057A8                 ;org 57A8h
.text$mn:000057A8 ; COMDAT (pick any)
.text$mn:000057A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000057A8
.text$mn:000057A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000057A8
.text$mn:000057A8 ; Attributes: bp-based frame
.text$mn:000057A8
.text$mn:000057A8 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t *Str)
.text$mn:000057A8                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:000057A8 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$mn:000057A8                                         ; CODE XREF: WinMain(x,x,x,x)+3F9p
.text$mn:000057A8                                         ; WinMain(x,x,x,x)+785p ...
.text$mn:000057A8
.text$mn:000057A8 var_14          = dword ptr -14h
.text$mn:000057A8 var_D           = byte ptr -0Dh
.text$mn:000057A8 var_C           = dword ptr -0Ch
.text$mn:000057A8 var_4           = dword ptr -4
.text$mn:000057A8 Str             = dword ptr  8
.text$mn:000057A8
.text$mn:000057A8                 push    ebp
.text$mn:000057A9                 mov     ebp, esp
.text$mn:000057AB                 push    0FFFFFFFFh
.text$mn:000057AD                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:000057B2                 mov     eax, large fs:0
.text$mn:000057B8                 push    eax
.text$mn:000057B9                 sub     esp, 8
.text$mn:000057BC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000057C1                 xor     eax, ebp
.text$mn:000057C3                 push    eax
.text$mn:000057C4                 lea     eax, [ebp+var_C]
.text$mn:000057C7                 mov     large fs:0, eax
.text$mn:000057CD                 mov     [ebp+var_14], ecx
.text$mn:000057D0                 lea     ecx, [ebp+var_D]
.text$mn:000057D3                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:000057D8                 push    eax
.text$mn:000057D9                 mov     ecx, [ebp+var_14]
.text$mn:000057DC                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:000057E1                 mov     [ebp+var_4], 0
.text$mn:000057E8                 push    0
.text$mn:000057EA                 push    0
.text$mn:000057EC                 mov     ecx, [ebp+var_14]
.text$mn:000057EF                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000057F4                 mov     eax, [ebp+Str]
.text$mn:000057F7                 push    eax             ; Str
.text$mn:000057F8                 mov     ecx, [ebp+var_14]
.text$mn:000057FB                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:00005800                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005807                 mov     eax, [ebp+var_14]
.text$mn:0000580A                 mov     ecx, [ebp+var_C]
.text$mn:0000580D                 mov     large fs:0, ecx
.text$mn:00005814                 pop     ecx
.text$mn:00005815                 mov     esp, ebp
.text$mn:00005817                 pop     ebp
.text$mn:00005818                 retn    4
.text$mn:00005818 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$mn:00005818
.text$mn:00005818 ; ---------------------------------------------------------------------------
.text$mn:0000581B                 align 4
.text$mn:0000581B _text$mn        ends
.text$mn:0000581B
.text$x:0000581C ; ===========================================================================
.text$x:0000581C
.text$x:0000581C ; Segment type: Pure code
.text$x:0000581C ; Segment permissions: Read/Execute
.text$x:0000581C _text$x         segment para public 'CODE' use32
.text$x:0000581C                 assume cs:_text$x
.text$x:0000581C                 ;org 581Ch
.text$x:0000581C ; COMDAT (pick associative to section at 57A8)
.text$x:0000581C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000581C
.text$x:0000581C ; =============== S U B R O U T I N E =======================================
.text$x:0000581C
.text$x:0000581C
.text$x:0000581C __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 proc near
.text$x:0000581C                                         ; DATA XREF: .xdata$x:0000B520o
.text$x:0000581C                 mov     ecx, [ebp-14h]
.text$x:0000581F                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:0000581F __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 endp
.text$x:0000581F
.text$x:00005824
.text$x:00005824 ; =============== S U B R O U T I N E =======================================
.text$x:00005824
.text$x:00005824
.text$x:00005824 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$x:00005824                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+5o
.text$x:00005824
.text$x:00005824 arg_4           = dword ptr  8
.text$x:00005824
.text$x:00005824                 mov     edx, [esp+arg_4]
.text$x:00005828                 lea     eax, [edx+0Ch]
.text$x:0000582B                 mov     ecx, [edx-0Ch]
.text$x:0000582E                 xor     ecx, eax
.text$x:00005830                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005835                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$x:0000583A                 jmp     ___CxxFrameHandler3
.text$x:0000583A __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$x:0000583A
.text$x:0000583A ; ---------------------------------------------------------------------------
.text$x:0000583F                 align 10h
.text$x:0000583F _text$x         ends
.text$x:0000583F
.text$mn:00005840 ; ===========================================================================
.text$mn:00005840
.text$mn:00005840 ; Segment type: Pure code
.text$mn:00005840 ; Segment permissions: Read/Execute
.text$mn:00005840 _text$mn        segment para public 'CODE' use32
.text$mn:00005840                 assume cs:_text$mn
.text$mn:00005840                 ;org 5840h
.text$mn:00005840 ; COMDAT (pick any)
.text$mn:00005840                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005840
.text$mn:00005840 ; =============== S U B R O U T I N E =======================================
.text$mn:00005840
.text$mn:00005840 ; Attributes: bp-based frame
.text$mn:00005840
.text$mn:00005840 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:00005840                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00005840 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:00005840                                         ; CODE XREF: getLangTypeFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+2Bp
.text$mn:00005840                                         ; getLocalizationPathFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+32p ...
.text$mn:00005840
.text$mn:00005840 var_14          = dword ptr -14h
.text$mn:00005840 var_D           = byte ptr -0Dh
.text$mn:00005840 var_C           = dword ptr -0Ch
.text$mn:00005840 var_4           = dword ptr -4
.text$mn:00005840
.text$mn:00005840                 push    ebp
.text$mn:00005841                 mov     ebp, esp
.text$mn:00005843                 push    0FFFFFFFFh
.text$mn:00005845                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:0000584A                 mov     eax, large fs:0
.text$mn:00005850                 push    eax
.text$mn:00005851                 sub     esp, 8
.text$mn:00005854                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005859                 xor     eax, ebp
.text$mn:0000585B                 push    eax
.text$mn:0000585C                 lea     eax, [ebp+var_C]
.text$mn:0000585F                 mov     large fs:0, eax
.text$mn:00005865                 mov     [ebp+var_14], ecx
.text$mn:00005868                 lea     ecx, [ebp+var_D]
.text$mn:0000586B                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00005870                 push    eax
.text$mn:00005871                 mov     ecx, [ebp+var_14]
.text$mn:00005874                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00005879                 mov     [ebp+var_4], 0
.text$mn:00005880                 push    0
.text$mn:00005882                 push    0
.text$mn:00005884                 mov     ecx, [ebp+var_14]
.text$mn:00005887                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000588C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005893                 mov     eax, [ebp+var_14]
.text$mn:00005896                 mov     ecx, [ebp+var_C]
.text$mn:00005899                 mov     large fs:0, ecx
.text$mn:000058A0                 pop     ecx
.text$mn:000058A1                 mov     esp, ebp
.text$mn:000058A3                 pop     ebp
.text$mn:000058A4                 retn
.text$mn:000058A4 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:000058A4
.text$mn:000058A4 ; ---------------------------------------------------------------------------
.text$mn:000058A5                 align 4
.text$mn:000058A5 _text$mn        ends
.text$mn:000058A5
.text$x:000058A8 ; ===========================================================================
.text$x:000058A8
.text$x:000058A8 ; Segment type: Pure code
.text$x:000058A8 ; Segment permissions: Read/Execute
.text$x:000058A8 _text$x         segment para public 'CODE' use32
.text$x:000058A8                 assume cs:_text$x
.text$x:000058A8                 ;org 58A8h
.text$x:000058A8 ; COMDAT (pick associative to section at 5840)
.text$x:000058A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000058A8
.text$x:000058A8 ; =============== S U B R O U T I N E =======================================
.text$x:000058A8
.text$x:000058A8
.text$x:000058A8 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:000058A8                                         ; DATA XREF: .xdata$x:0000B4F4o
.text$x:000058A8                 mov     ecx, [ebp-14h]
.text$x:000058AB                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:000058AB __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:000058AB
.text$x:000058B0
.text$x:000058B0 ; =============== S U B R O U T I N E =======================================
.text$x:000058B0
.text$x:000058B0
.text$x:000058B0 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:000058B0                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:000058B0
.text$x:000058B0 arg_4           = dword ptr  8
.text$x:000058B0
.text$x:000058B0                 mov     edx, [esp+arg_4]
.text$x:000058B4                 lea     eax, [edx+0Ch]
.text$x:000058B7                 mov     ecx, [edx-0Ch]
.text$x:000058BA                 xor     ecx, eax
.text$x:000058BC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000058C1                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:000058C6                 jmp     ___CxxFrameHandler3
.text$x:000058C6 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:000058C6
.text$x:000058C6 ; ---------------------------------------------------------------------------
.text$x:000058CB                 align 4
.text$x:000058CB _text$x         ends
.text$x:000058CB
.text$mn:000058CC ; ===========================================================================
.text$mn:000058CC
.text$mn:000058CC ; Segment type: Pure code
.text$mn:000058CC ; Segment permissions: Read/Execute
.text$mn:000058CC _text$mn        segment para public 'CODE' use32
.text$mn:000058CC                 assume cs:_text$mn
.text$mn:000058CC                 ;org 58CCh
.text$mn:000058CC ; COMDAT (pick any)
.text$mn:000058CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000058CC
.text$mn:000058CC ; =============== S U B R O U T I N E =======================================
.text$mn:000058CC
.text$mn:000058CC ; Attributes: bp-based frame
.text$mn:000058CC
.text$mn:000058CC ; public: __thiscall std::vector<wchar_t const *, class std::allocator<wchar_t const *>>::vector<wchar_t const *, class std::allocator<wchar_t const *>>(void)
.text$mn:000058CC                 public ??0?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ
.text$mn:000058CC ??0?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ proc near
.text$mn:000058CC                                         ; CODE XREF: WinMain(x,x,x,x)+48p
.text$mn:000058CC
.text$mn:000058CC var_14          = dword ptr -14h
.text$mn:000058CC var_D           = byte ptr -0Dh
.text$mn:000058CC var_C           = dword ptr -0Ch
.text$mn:000058CC var_4           = dword ptr -4
.text$mn:000058CC
.text$mn:000058CC                 push    ebp
.text$mn:000058CD                 mov     ebp, esp
.text$mn:000058CF                 push    0FFFFFFFFh
.text$mn:000058D1                 push    offset __ehhandler$??0?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ
.text$mn:000058D6                 mov     eax, large fs:0
.text$mn:000058DC                 push    eax
.text$mn:000058DD                 sub     esp, 8
.text$mn:000058E0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000058E5                 xor     eax, ebp
.text$mn:000058E7                 push    eax
.text$mn:000058E8                 lea     eax, [ebp+var_C]
.text$mn:000058EB                 mov     large fs:0, eax
.text$mn:000058F1                 mov     [ebp+var_14], ecx
.text$mn:000058F4                 lea     ecx, [ebp+var_D]
.text$mn:000058F7                 call    ??0?$allocator@PB_W@std@@QAE@XZ ; std::allocator<wchar_t const *>::allocator<wchar_t const *>(void)
.text$mn:000058FC                 push    eax
.text$mn:000058FD                 mov     ecx, [ebp+var_14]
.text$mn:00005900                 call    ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@ABV?$allocator@PB_W@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>(std::allocator<wchar_t const *> const &)
.text$mn:00005905                 mov     [ebp+var_4], 0
.text$mn:0000590C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005913                 mov     eax, [ebp+var_14]
.text$mn:00005916                 mov     ecx, [ebp+var_C]
.text$mn:00005919                 mov     large fs:0, ecx
.text$mn:00005920                 pop     ecx
.text$mn:00005921                 mov     esp, ebp
.text$mn:00005923                 pop     ebp
.text$mn:00005924                 retn
.text$mn:00005924 ??0?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ endp
.text$mn:00005924
.text$mn:00005924 ; ---------------------------------------------------------------------------
.text$mn:00005925                 align 4
.text$mn:00005925 _text$mn        ends
.text$mn:00005925
.text$x:00005928 ; ===========================================================================
.text$x:00005928
.text$x:00005928 ; Segment type: Pure code
.text$x:00005928 ; Segment permissions: Read/Execute
.text$x:00005928 _text$x         segment para public 'CODE' use32
.text$x:00005928                 assume cs:_text$x
.text$x:00005928                 ;org 5928h
.text$x:00005928 ; COMDAT (pick associative to section at 58CC)
.text$x:00005928                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005928
.text$x:00005928 ; =============== S U B R O U T I N E =======================================
.text$x:00005928
.text$x:00005928
.text$x:00005928 __unwindfunclet$??0?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00005928                                         ; DATA XREF: .xdata$x:0000B96Co
.text$x:00005928                 mov     ecx, [ebp-14h]
.text$x:0000592B                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::~_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>(void)
.text$x:0000592B __unwindfunclet$??0?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ$0 endp
.text$x:0000592B
.text$x:00005930
.text$x:00005930 ; =============== S U B R O U T I N E =======================================
.text$x:00005930
.text$x:00005930
.text$x:00005930 __ehhandler$??0?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ proc near
.text$x:00005930                                         ; DATA XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::vector<wchar_t const *,std::allocator<wchar_t const *>>(void)+5o
.text$x:00005930
.text$x:00005930 arg_4           = dword ptr  8
.text$x:00005930
.text$x:00005930                 mov     edx, [esp+arg_4]
.text$x:00005934                 lea     eax, [edx+0Ch]
.text$x:00005937                 mov     ecx, [edx-0Ch]
.text$x:0000593A                 xor     ecx, eax
.text$x:0000593C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005941                 mov     eax, offset __ehfuncinfo$??0?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ
.text$x:00005946                 jmp     ___CxxFrameHandler3
.text$x:00005946 __ehhandler$??0?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ endp
.text$x:00005946
.text$x:00005946 ; ---------------------------------------------------------------------------
.text$x:0000594B                 align 4
.text$x:0000594B _text$x         ends
.text$x:0000594B
.text$mn:0000594C ; ===========================================================================
.text$mn:0000594C
.text$mn:0000594C ; Segment type: Pure code
.text$mn:0000594C ; Segment permissions: Read/Execute
.text$mn:0000594C _text$mn        segment para public 'CODE' use32
.text$mn:0000594C                 assume cs:_text$mn
.text$mn:0000594C                 ;org 594Ch
.text$mn:0000594C ; COMDAT (pick any)
.text$mn:0000594C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000594C
.text$mn:0000594C ; =============== S U B R O U T I N E =======================================
.text$mn:0000594C
.text$mn:0000594C ; Attributes: bp-based frame
.text$mn:0000594C
.text$mn:0000594C ; public: __thiscall CmdLineParams::CmdLineParams(void)
.text$mn:0000594C                 public ??0CmdLineParams@@QAE@XZ
.text$mn:0000594C ??0CmdLineParams@@QAE@XZ proc near      ; CODE XREF: WinMain(x,x,x,x)+E1p
.text$mn:0000594C
.text$mn:0000594C var_10          = dword ptr -10h
.text$mn:0000594C var_C           = dword ptr -0Ch
.text$mn:0000594C var_4           = dword ptr -4
.text$mn:0000594C
.text$mn:0000594C                 push    ebp
.text$mn:0000594D                 mov     ebp, esp
.text$mn:0000594F                 push    0FFFFFFFFh
.text$mn:00005951                 push    offset __ehhandler$??0CmdLineParams@@QAE@XZ
.text$mn:00005956                 mov     eax, large fs:0
.text$mn:0000595C                 push    eax
.text$mn:0000595D                 push    ecx
.text$mn:0000595E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005963                 xor     eax, ebp
.text$mn:00005965                 push    eax
.text$mn:00005966                 lea     eax, [ebp+var_C]
.text$mn:00005969                 mov     large fs:0, eax
.text$mn:0000596F                 mov     [ebp+var_10], ecx
.text$mn:00005972                 mov     eax, [ebp+var_10]
.text$mn:00005975                 mov     byte ptr [eax], 0
.text$mn:00005978                 mov     ecx, [ebp+var_10]
.text$mn:0000597B                 mov     byte ptr [ecx+1], 0
.text$mn:0000597F                 mov     edx, [ebp+var_10]
.text$mn:00005982                 mov     byte ptr [edx+2], 0
.text$mn:00005986                 mov     eax, [ebp+var_10]
.text$mn:00005989                 mov     byte ptr [eax+3], 0
.text$mn:0000598D                 mov     ecx, [ebp+var_10]
.text$mn:00005990                 mov     byte ptr [ecx+4], 0
.text$mn:00005994                 mov     edx, [ebp+var_10]
.text$mn:00005997                 mov     byte ptr [edx+5], 0
.text$mn:0000599B                 mov     eax, [ebp+var_10]
.text$mn:0000599E                 mov     byte ptr [eax+6], 0
.text$mn:000059A2                 mov     ecx, [ebp+var_10]
.text$mn:000059A5                 mov     dword ptr [ecx+8], 0FFFFFFFFh
.text$mn:000059AC                 mov     edx, [ebp+var_10]
.text$mn:000059AF                 mov     dword ptr [edx+0Ch], 0FFFFFFFFh
.text$mn:000059B6                 mov     eax, [ebp+var_10]
.text$mn:000059B9                 mov     byte ptr [eax+18h], 0
.text$mn:000059BD                 mov     ecx, [ebp+var_10]
.text$mn:000059C0                 mov     byte ptr [ecx+19h], 0
.text$mn:000059C4                 mov     edx, [ebp+var_10]
.text$mn:000059C7                 mov     dword ptr [edx+1Ch], 39h ; '9'
.text$mn:000059CE                 push    offset ??_C@_11LOCGONAA@?$AA?$AA@ ; Str
.text$mn:000059D3                 mov     ecx, [ebp+var_10]
.text$mn:000059D6                 add     ecx, 20h ; ' '
.text$mn:000059D9                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000059DE                 mov     [ebp+var_4], 0
.text$mn:000059E5                 push    offset ??_C@_11LOCGONAA@?$AA?$AA@ ; Str
.text$mn:000059EA                 mov     ecx, [ebp+var_10]
.text$mn:000059ED                 add     ecx, 3Ch ; '<'
.text$mn:000059F0                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000059F5                 mov     byte ptr [ebp+var_4], 1
.text$mn:000059F9                 mov     eax, [ebp+var_10]
.text$mn:000059FC                 mov     byte ptr [eax+58h], 0
.text$mn:00005A00                 mov     ecx, [ebp+var_10]
.text$mn:00005A03                 mov     dword ptr [ecx+10h], 0
.text$mn:00005A0A                 mov     edx, [ebp+var_10]
.text$mn:00005A0D                 mov     dword ptr [edx+14h], 0
.text$mn:00005A14                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005A1B                 mov     eax, [ebp+var_10]
.text$mn:00005A1E                 mov     ecx, [ebp+var_C]
.text$mn:00005A21                 mov     large fs:0, ecx
.text$mn:00005A28                 pop     ecx
.text$mn:00005A29                 mov     esp, ebp
.text$mn:00005A2B                 pop     ebp
.text$mn:00005A2C                 retn
.text$mn:00005A2C ??0CmdLineParams@@QAE@XZ endp
.text$mn:00005A2C
.text$mn:00005A2C ; ---------------------------------------------------------------------------
.text$mn:00005A2D                 align 10h
.text$mn:00005A2D _text$mn        ends
.text$mn:00005A2D
.text$x:00005A30 ; ===========================================================================
.text$x:00005A30
.text$x:00005A30 ; Segment type: Pure code
.text$x:00005A30 ; Segment permissions: Read/Execute
.text$x:00005A30 _text$x         segment para public 'CODE' use32
.text$x:00005A30                 assume cs:_text$x
.text$x:00005A30                 ;org 5A30h
.text$x:00005A30 ; COMDAT (pick associative to section at 594C)
.text$x:00005A30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005A30
.text$x:00005A30 ; =============== S U B R O U T I N E =======================================
.text$x:00005A30
.text$x:00005A30
.text$x:00005A30 __unwindfunclet$??0CmdLineParams@@QAE@XZ$0 proc near
.text$x:00005A30                                         ; DATA XREF: .xdata$x:0000B784o
.text$x:00005A30                 mov     ecx, [ebp-10h]
.text$x:00005A33                 add     ecx, 20h ; ' '
.text$x:00005A36                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00005A36 __unwindfunclet$??0CmdLineParams@@QAE@XZ$0 endp
.text$x:00005A36
.text$x:00005A3B
.text$x:00005A3B ; =============== S U B R O U T I N E =======================================
.text$x:00005A3B
.text$x:00005A3B
.text$x:00005A3B __unwindfunclet$??0CmdLineParams@@QAE@XZ$1 proc near
.text$x:00005A3B                                         ; DATA XREF: .xdata$x:0000B78Co
.text$x:00005A3B                 mov     ecx, [ebp-10h]
.text$x:00005A3E                 add     ecx, 3Ch ; '<'
.text$x:00005A41                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00005A41 __unwindfunclet$??0CmdLineParams@@QAE@XZ$1 endp
.text$x:00005A41
.text$x:00005A46
.text$x:00005A46 ; =============== S U B R O U T I N E =======================================
.text$x:00005A46
.text$x:00005A46
.text$x:00005A46 __ehhandler$??0CmdLineParams@@QAE@XZ proc near
.text$x:00005A46                                         ; DATA XREF: CmdLineParams::CmdLineParams(void)+5o
.text$x:00005A46
.text$x:00005A46 arg_4           = dword ptr  8
.text$x:00005A46
.text$x:00005A46                 mov     edx, [esp+arg_4]
.text$x:00005A4A                 lea     eax, [edx+0Ch]
.text$x:00005A4D                 mov     ecx, [edx-8]
.text$x:00005A50                 xor     ecx, eax
.text$x:00005A52                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005A57                 mov     eax, offset __ehfuncinfo$??0CmdLineParams@@QAE@XZ
.text$x:00005A5C                 jmp     ___CxxFrameHandler3
.text$x:00005A5C __ehhandler$??0CmdLineParams@@QAE@XZ endp
.text$x:00005A5C
.text$x:00005A5C ; ---------------------------------------------------------------------------
.text$x:00005A61                 align 4
.text$x:00005A61 _text$x         ends
.text$x:00005A61
.text$mn:00005A64 ; ===========================================================================
.text$mn:00005A64
.text$mn:00005A64 ; Segment type: Pure code
.text$mn:00005A64 ; Segment permissions: Read/Execute
.text$mn:00005A64 _text$mn        segment para public 'CODE' use32
.text$mn:00005A64                 assume cs:_text$mn
.text$mn:00005A64                 ;org 5A64h
.text$mn:00005A64 ; COMDAT (pick any)
.text$mn:00005A64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005A64
.text$mn:00005A64 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A64
.text$mn:00005A64 ; Attributes: bp-based frame
.text$mn:00005A64
.text$mn:00005A64 ; public: __thiscall Notepad_plus_Window::Notepad_plus_Window(void)
.text$mn:00005A64                 public ??0Notepad_plus_Window@@QAE@XZ
.text$mn:00005A64 ??0Notepad_plus_Window@@QAE@XZ proc near
.text$mn:00005A64                                         ; CODE XREF: WinMain(x,x,x,x)+71Bp
.text$mn:00005A64
.text$mn:00005A64 var_10          = dword ptr -10h
.text$mn:00005A64 var_C           = dword ptr -0Ch
.text$mn:00005A64 var_4           = dword ptr -4
.text$mn:00005A64
.text$mn:00005A64                 push    ebp
.text$mn:00005A65                 mov     ebp, esp
.text$mn:00005A67                 push    0FFFFFFFFh
.text$mn:00005A69                 push    offset __ehhandler$??0Notepad_plus_Window@@QAE@XZ
.text$mn:00005A6E                 mov     eax, large fs:0
.text$mn:00005A74                 push    eax
.text$mn:00005A75                 push    ecx
.text$mn:00005A76                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005A7B                 xor     eax, ebp
.text$mn:00005A7D                 push    eax
.text$mn:00005A7E                 lea     eax, [ebp+var_C]
.text$mn:00005A81                 mov     large fs:0, eax
.text$mn:00005A87                 mov     [ebp+var_10], ecx
.text$mn:00005A8A                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005A8D                 call    ??0Window@@QAE@XZ ; Window::Window(void)
.text$mn:00005A92                 mov     [ebp+var_4], 0
.text$mn:00005A99                 mov     eax, [ebp+var_10]
.text$mn:00005A9C                 mov     dword ptr [eax], offset ??_7Notepad_plus_Window@@6B@ ; const Notepad_plus_Window::`vftable'
.text$mn:00005AA2                 mov     ecx, [ebp+var_10]
.text$mn:00005AA5                 add     ecx, 10h
.text$mn:00005AA8                 call    ??0Notepad_plus@@QAE@XZ ; Notepad_plus::Notepad_plus(void)
.text$mn:00005AAD                 mov     byte ptr [ebp+var_4], 1
.text$mn:00005AB1                 mov     ecx, [ebp+var_10]
.text$mn:00005AB4                 mov     byte ptr [ecx+551DCh], 0
.text$mn:00005ABB                 mov     edx, [ebp+var_10]
.text$mn:00005ABE                 mov     byte ptr [edx+551DDh], 0
.text$mn:00005AC5                 mov     ecx, [ebp+var_10]
.text$mn:00005AC8                 add     ecx, 551E0h
.text$mn:00005ACE                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00005AD3                 mov     byte ptr [ebp+var_4], 2
.text$mn:00005AD7                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005ADE                 mov     eax, [ebp+var_10]
.text$mn:00005AE1                 mov     ecx, [ebp+var_C]
.text$mn:00005AE4                 mov     large fs:0, ecx
.text$mn:00005AEB                 pop     ecx
.text$mn:00005AEC                 mov     esp, ebp
.text$mn:00005AEE                 pop     ebp
.text$mn:00005AEF                 retn
.text$mn:00005AEF ??0Notepad_plus_Window@@QAE@XZ endp
.text$mn:00005AEF
.text$mn:00005AEF _text$mn        ends
.text$mn:00005AEF
.text$x:00005AF0 ; ===========================================================================
.text$x:00005AF0
.text$x:00005AF0 ; Segment type: Pure code
.text$x:00005AF0 ; Segment permissions: Read/Execute
.text$x:00005AF0 _text$x         segment para public 'CODE' use32
.text$x:00005AF0                 assume cs:_text$x
.text$x:00005AF0                 ;org 5AF0h
.text$x:00005AF0 ; COMDAT (pick associative to section at 5A64)
.text$x:00005AF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005AF0
.text$x:00005AF0 ; =============== S U B R O U T I N E =======================================
.text$x:00005AF0
.text$x:00005AF0
.text$x:00005AF0 __unwindfunclet$??0Notepad_plus_Window@@QAE@XZ$0 proc near
.text$x:00005AF0                                         ; DATA XREF: .xdata$x:0000BAE4o
.text$x:00005AF0                 mov     ecx, [ebp-10h]  ; this
.text$x:00005AF3                 jmp     ??1Window@@UAE@XZ ; Window::~Window(void)
.text$x:00005AF3 __unwindfunclet$??0Notepad_plus_Window@@QAE@XZ$0 endp
.text$x:00005AF3
.text$x:00005AF8
.text$x:00005AF8 ; =============== S U B R O U T I N E =======================================
.text$x:00005AF8
.text$x:00005AF8
.text$x:00005AF8 __unwindfunclet$??0Notepad_plus_Window@@QAE@XZ$1 proc near
.text$x:00005AF8                                         ; DATA XREF: .xdata$x:0000BAECo
.text$x:00005AF8                 mov     ecx, [ebp-10h]
.text$x:00005AFB                 add     ecx, 10h        ; this
.text$x:00005AFE                 jmp     ??1Notepad_plus@@UAE@XZ ; Notepad_plus::~Notepad_plus(void)
.text$x:00005AFE __unwindfunclet$??0Notepad_plus_Window@@QAE@XZ$1 endp
.text$x:00005AFE
.text$x:00005B03
.text$x:00005B03 ; =============== S U B R O U T I N E =======================================
.text$x:00005B03
.text$x:00005B03
.text$x:00005B03 __unwindfunclet$??0Notepad_plus_Window@@QAE@XZ$2 proc near
.text$x:00005B03                                         ; DATA XREF: .xdata$x:0000BAF4o
.text$x:00005B03                 mov     ecx, [ebp-10h]
.text$x:00005B06                 add     ecx, 551E0h
.text$x:00005B0C                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00005B0C __unwindfunclet$??0Notepad_plus_Window@@QAE@XZ$2 endp
.text$x:00005B0C
.text$x:00005B11
.text$x:00005B11 ; =============== S U B R O U T I N E =======================================
.text$x:00005B11
.text$x:00005B11
.text$x:00005B11 __ehhandler$??0Notepad_plus_Window@@QAE@XZ proc near
.text$x:00005B11                                         ; DATA XREF: Notepad_plus_Window::Notepad_plus_Window(void)+5o
.text$x:00005B11
.text$x:00005B11 arg_4           = dword ptr  8
.text$x:00005B11
.text$x:00005B11                 mov     edx, [esp+arg_4]
.text$x:00005B15                 lea     eax, [edx+0Ch]
.text$x:00005B18                 mov     ecx, [edx-8]
.text$x:00005B1B                 xor     ecx, eax
.text$x:00005B1D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005B22                 mov     eax, offset __ehfuncinfo$??0Notepad_plus_Window@@QAE@XZ
.text$x:00005B27                 jmp     ___CxxFrameHandler3
.text$x:00005B27 __ehhandler$??0Notepad_plus_Window@@QAE@XZ endp
.text$x:00005B27
.text$x:00005B27 _text$x         ends
.text$x:00005B27
.text$mn:00005B2C ; ===========================================================================
.text$mn:00005B2C
.text$mn:00005B2C ; Segment type: Pure code
.text$mn:00005B2C ; Segment permissions: Read/Execute
.text$mn:00005B2C _text$mn        segment para public 'CODE' use32
.text$mn:00005B2C                 assume cs:_text$mn
.text$mn:00005B2C                 ;org 5B2Ch
.text$mn:00005B2C ; COMDAT (pick any)
.text$mn:00005B2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005B2C
.text$mn:00005B2C ; =============== S U B R O U T I N E =======================================
.text$mn:00005B2C
.text$mn:00005B2C ; Attributes: bp-based frame
.text$mn:00005B2C
.text$mn:00005B2C ; int __stdcall Process::Process(wchar_t *Str, wchar_t *, wchar_t *)
.text$mn:00005B2C                 public ??0Process@@QAE@PB_W00@Z
.text$mn:00005B2C ??0Process@@QAE@PB_W00@Z proc near      ; CODE XREF: WinMain(x,x,x,x)+8DBp
.text$mn:00005B2C
.text$mn:00005B2C var_10          = dword ptr -10h
.text$mn:00005B2C var_C           = dword ptr -0Ch
.text$mn:00005B2C var_4           = dword ptr -4
.text$mn:00005B2C Str             = dword ptr  8
.text$mn:00005B2C arg_4           = dword ptr  0Ch
.text$mn:00005B2C arg_8           = dword ptr  10h
.text$mn:00005B2C
.text$mn:00005B2C                 push    ebp
.text$mn:00005B2D                 mov     ebp, esp
.text$mn:00005B2F                 push    0FFFFFFFFh
.text$mn:00005B31                 push    offset __ehhandler$??0Process@@QAE@PB_W00@Z
.text$mn:00005B36                 mov     eax, large fs:0
.text$mn:00005B3C                 push    eax
.text$mn:00005B3D                 push    ecx
.text$mn:00005B3E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005B43                 xor     eax, ebp
.text$mn:00005B45                 push    eax
.text$mn:00005B46                 lea     eax, [ebp+var_C]
.text$mn:00005B49                 mov     large fs:0, eax
.text$mn:00005B4F                 mov     [ebp+var_10], ecx
.text$mn:00005B52                 mov     eax, [ebp+Str]
.text$mn:00005B55                 push    eax             ; Str
.text$mn:00005B56                 mov     ecx, [ebp+var_10]
.text$mn:00005B59                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00005B5E                 mov     [ebp+var_4], 0
.text$mn:00005B65                 mov     ecx, [ebp+arg_4]
.text$mn:00005B68                 push    ecx             ; Str
.text$mn:00005B69                 mov     ecx, [ebp+var_10]
.text$mn:00005B6C                 add     ecx, 1Ch
.text$mn:00005B6F                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00005B74                 mov     byte ptr [ebp+var_4], 1
.text$mn:00005B78                 mov     edx, [ebp+arg_8]
.text$mn:00005B7B                 push    edx             ; Str
.text$mn:00005B7C                 mov     ecx, [ebp+var_10]
.text$mn:00005B7F                 add     ecx, 38h ; '8'
.text$mn:00005B82                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00005B87                 mov     byte ptr [ebp+var_4], 2
.text$mn:00005B8B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005B92                 mov     eax, [ebp+var_10]
.text$mn:00005B95                 mov     ecx, [ebp+var_C]
.text$mn:00005B98                 mov     large fs:0, ecx
.text$mn:00005B9F                 pop     ecx
.text$mn:00005BA0                 mov     esp, ebp
.text$mn:00005BA2                 pop     ebp
.text$mn:00005BA3                 retn    0Ch
.text$mn:00005BA3 ??0Process@@QAE@PB_W00@Z endp
.text$mn:00005BA3
.text$mn:00005BA3 ; ---------------------------------------------------------------------------
.text$mn:00005BA6                 align 4
.text$mn:00005BA6 _text$mn        ends
.text$mn:00005BA6
.text$x:00005BA8 ; ===========================================================================
.text$x:00005BA8
.text$x:00005BA8 ; Segment type: Pure code
.text$x:00005BA8 ; Segment permissions: Read/Execute
.text$x:00005BA8 _text$x         segment para public 'CODE' use32
.text$x:00005BA8                 assume cs:_text$x
.text$x:00005BA8                 ;org 5BA8h
.text$x:00005BA8 ; COMDAT (pick associative to section at 5B2C)
.text$x:00005BA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005BA8
.text$x:00005BA8 ; =============== S U B R O U T I N E =======================================
.text$x:00005BA8
.text$x:00005BA8
.text$x:00005BA8 __unwindfunclet$??0Process@@QAE@PB_W00@Z$0 proc near
.text$x:00005BA8                                         ; DATA XREF: .xdata$x:0000B844o
.text$x:00005BA8                 mov     ecx, [ebp-10h]
.text$x:00005BAB                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00005BAB __unwindfunclet$??0Process@@QAE@PB_W00@Z$0 endp
.text$x:00005BAB
.text$x:00005BB0
.text$x:00005BB0 ; =============== S U B R O U T I N E =======================================
.text$x:00005BB0
.text$x:00005BB0
.text$x:00005BB0 __unwindfunclet$??0Process@@QAE@PB_W00@Z$1 proc near
.text$x:00005BB0                                         ; DATA XREF: .xdata$x:0000B84Co
.text$x:00005BB0                 mov     ecx, [ebp-10h]
.text$x:00005BB3                 add     ecx, 1Ch
.text$x:00005BB6                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00005BB6 __unwindfunclet$??0Process@@QAE@PB_W00@Z$1 endp
.text$x:00005BB6
.text$x:00005BBB
.text$x:00005BBB ; =============== S U B R O U T I N E =======================================
.text$x:00005BBB
.text$x:00005BBB
.text$x:00005BBB __unwindfunclet$??0Process@@QAE@PB_W00@Z$2 proc near
.text$x:00005BBB                                         ; DATA XREF: .xdata$x:0000B854o
.text$x:00005BBB                 mov     ecx, [ebp-10h]
.text$x:00005BBE                 add     ecx, 38h ; '8'
.text$x:00005BC1                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00005BC1 __unwindfunclet$??0Process@@QAE@PB_W00@Z$2 endp
.text$x:00005BC1
.text$x:00005BC6
.text$x:00005BC6 ; =============== S U B R O U T I N E =======================================
.text$x:00005BC6
.text$x:00005BC6
.text$x:00005BC6 __ehhandler$??0Process@@QAE@PB_W00@Z proc near
.text$x:00005BC6                                         ; DATA XREF: Process::Process(wchar_t const *,wchar_t const *,wchar_t const *)+5o
.text$x:00005BC6
.text$x:00005BC6 arg_4           = dword ptr  8
.text$x:00005BC6
.text$x:00005BC6                 mov     edx, [esp+arg_4]
.text$x:00005BCA                 lea     eax, [edx+0Ch]
.text$x:00005BCD                 mov     ecx, [edx-8]
.text$x:00005BD0                 xor     ecx, eax
.text$x:00005BD2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005BD7                 mov     eax, offset __ehfuncinfo$??0Process@@QAE@PB_W00@Z
.text$x:00005BDC                 jmp     ___CxxFrameHandler3
.text$x:00005BDC __ehhandler$??0Process@@QAE@PB_W00@Z endp
.text$x:00005BDC
.text$x:00005BDC ; ---------------------------------------------------------------------------
.text$x:00005BE1                 align 4
.text$x:00005BE1 _text$x         ends
.text$x:00005BE1
.text$mn:00005BE4 ; ===========================================================================
.text$mn:00005BE4
.text$mn:00005BE4 ; Segment type: Pure code
.text$mn:00005BE4 ; Segment permissions: Read/Execute
.text$mn:00005BE4 _text$mn        segment para public 'CODE' use32
.text$mn:00005BE4                 assume cs:_text$mn
.text$mn:00005BE4                 ;org 5BE4h
.text$mn:00005BE4 ; COMDAT (pick any)
.text$mn:00005BE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005BE4
.text$mn:00005BE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005BE4
.text$mn:00005BE4 ; Attributes: bp-based frame
.text$mn:00005BE4
.text$mn:00005BE4 ; _DWORD __thiscall Window::Window(Window *__hidden this)
.text$mn:00005BE4                 public ??0Window@@QAE@XZ
.text$mn:00005BE4 ??0Window@@QAE@XZ proc near             ; CODE XREF: Notepad_plus_Window::Notepad_plus_Window(void)+29p
.text$mn:00005BE4
.text$mn:00005BE4 var_4           = dword ptr -4
.text$mn:00005BE4
.text$mn:00005BE4                 push    ebp
.text$mn:00005BE5                 mov     ebp, esp
.text$mn:00005BE7                 push    ecx
.text$mn:00005BE8                 mov     [ebp+var_4], ecx
.text$mn:00005BEB                 mov     eax, [ebp+var_4]
.text$mn:00005BEE                 mov     dword ptr [eax], offset ??_7Window@@6B@ ; const Window::`vftable'
.text$mn:00005BF4                 mov     ecx, [ebp+var_4]
.text$mn:00005BF7                 mov     dword ptr [ecx+4], 0
.text$mn:00005BFE                 mov     edx, [ebp+var_4]
.text$mn:00005C01                 mov     dword ptr [edx+8], 0
.text$mn:00005C08                 mov     eax, [ebp+var_4]
.text$mn:00005C0B                 mov     dword ptr [eax+0Ch], 0
.text$mn:00005C12                 mov     eax, [ebp+var_4]
.text$mn:00005C15                 mov     esp, ebp
.text$mn:00005C17                 pop     ebp
.text$mn:00005C18                 retn
.text$mn:00005C18 ??0Window@@QAE@XZ endp
.text$mn:00005C18
.text$mn:00005C18 ; ---------------------------------------------------------------------------
.text$mn:00005C19                 align 4
.text$mn:00005C19 _text$mn        ends
.text$mn:00005C19
.text$mn:00005C1C ; ===========================================================================
.text$mn:00005C1C
.text$mn:00005C1C ; Segment type: Pure code
.text$mn:00005C1C ; Segment permissions: Read/Execute
.text$mn:00005C1C _text$mn        segment para public 'CODE' use32
.text$mn:00005C1C                 assume cs:_text$mn
.text$mn:00005C1C                 ;org 5C1Ch
.text$mn:00005C1C ; COMDAT (pick any)
.text$mn:00005C1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C1C
.text$mn:00005C1C ; =============== S U B R O U T I N E =======================================
.text$mn:00005C1C
.text$mn:00005C1C ; Attributes: bp-based frame
.text$mn:00005C1C
.text$mn:00005C1C ; _DWORD __thiscall std::_Container_base12::_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:00005C1C                 public ??0_Container_base12@std@@QAE@XZ
.text$mn:00005C1C ??0_Container_base12@std@@QAE@XZ proc near
.text$mn:00005C1C                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+29p
.text$mn:00005C1C                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+29p ...
.text$mn:00005C1C
.text$mn:00005C1C var_4           = dword ptr -4
.text$mn:00005C1C
.text$mn:00005C1C                 push    ebp
.text$mn:00005C1D                 mov     ebp, esp
.text$mn:00005C1F                 push    ecx
.text$mn:00005C20                 mov     [ebp+var_4], ecx
.text$mn:00005C23                 mov     eax, [ebp+var_4]
.text$mn:00005C26                 mov     dword ptr [eax], 0
.text$mn:00005C2C                 mov     eax, [ebp+var_4]
.text$mn:00005C2F                 mov     esp, ebp
.text$mn:00005C31                 pop     ebp
.text$mn:00005C32                 retn
.text$mn:00005C32 ??0_Container_base12@std@@QAE@XZ endp
.text$mn:00005C32
.text$mn:00005C32 ; ---------------------------------------------------------------------------
.text$mn:00005C33                 align 4
.text$mn:00005C33 _text$mn        ends
.text$mn:00005C33
.text$mn:00005C34 ; ===========================================================================
.text$mn:00005C34
.text$mn:00005C34 ; Segment type: Pure code
.text$mn:00005C34 ; Segment permissions: Read/Execute
.text$mn:00005C34 _text$mn        segment para public 'CODE' use32
.text$mn:00005C34                 assume cs:_text$mn
.text$mn:00005C34                 ;org 5C34h
.text$mn:00005C34 ; COMDAT (pick any)
.text$mn:00005C34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C34
.text$mn:00005C34 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C34
.text$mn:00005C34 ; Attributes: bp-based frame
.text$mn:00005C34
.text$mn:00005C34 ; _DWORD __thiscall std::_Container_proxy::_Container_proxy(std::_Container_proxy *__hidden this)
.text$mn:00005C34                 public ??0_Container_proxy@std@@QAE@XZ
.text$mn:00005C34 ??0_Container_proxy@std@@QAE@XZ proc near
.text$mn:00005C34                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+23p
.text$mn:00005C34                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+23p ...
.text$mn:00005C34
.text$mn:00005C34 var_4           = dword ptr -4
.text$mn:00005C34
.text$mn:00005C34                 push    ebp
.text$mn:00005C35                 mov     ebp, esp
.text$mn:00005C37                 push    ecx
.text$mn:00005C38                 mov     [ebp+var_4], ecx
.text$mn:00005C3B                 mov     eax, [ebp+var_4]
.text$mn:00005C3E                 mov     dword ptr [eax], 0
.text$mn:00005C44                 mov     ecx, [ebp+var_4]
.text$mn:00005C47                 mov     dword ptr [ecx+4], 0
.text$mn:00005C4E                 mov     eax, [ebp+var_4]
.text$mn:00005C51                 mov     esp, ebp
.text$mn:00005C53                 pop     ebp
.text$mn:00005C54                 retn
.text$mn:00005C54 ??0_Container_proxy@std@@QAE@XZ endp
.text$mn:00005C54
.text$mn:00005C54 ; ---------------------------------------------------------------------------
.text$mn:00005C55                 align 4
.text$mn:00005C55 _text$mn        ends
.text$mn:00005C55
.text$mn:00005C58 ; ===========================================================================
.text$mn:00005C58
.text$mn:00005C58 ; Segment type: Pure code
.text$mn:00005C58 ; Segment permissions: Read/Execute
.text$mn:00005C58 _text$mn        segment para public 'CODE' use32
.text$mn:00005C58                 assume cs:_text$mn
.text$mn:00005C58                 ;org 5C58h
.text$mn:00005C58 ; COMDAT (pick any)
.text$mn:00005C58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C58
.text$mn:00005C58 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C58
.text$mn:00005C58 ; Attributes: bp-based frame
.text$mn:00005C58
.text$mn:00005C58 ; _DWORD __thiscall std::_Generic_error_category::_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:00005C58                 public ??0_Generic_error_category@std@@QAE@XZ
.text$mn:00005C58 ??0_Generic_error_category@std@@QAE@XZ proc near
.text$mn:00005C58                                         ; CODE XREF: std::_Iostream_error_category::_Iostream_error_category(void)+29p
.text$mn:00005C58                                         ; std::_System_error_category::_System_error_category(void)+29p ...
.text$mn:00005C58
.text$mn:00005C58 var_10          = dword ptr -10h
.text$mn:00005C58 var_C           = dword ptr -0Ch
.text$mn:00005C58 var_4           = dword ptr -4
.text$mn:00005C58
.text$mn:00005C58                 push    ebp
.text$mn:00005C59                 mov     ebp, esp
.text$mn:00005C5B                 push    0FFFFFFFFh
.text$mn:00005C5D                 push    offset __ehhandler$??0_Generic_error_category@std@@QAE@XZ
.text$mn:00005C62                 mov     eax, large fs:0
.text$mn:00005C68                 push    eax
.text$mn:00005C69                 push    ecx
.text$mn:00005C6A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005C6F                 xor     eax, ebp
.text$mn:00005C71                 push    eax
.text$mn:00005C72                 lea     eax, [ebp+var_C]
.text$mn:00005C75                 mov     large fs:0, eax
.text$mn:00005C7B                 mov     [ebp+var_10], ecx
.text$mn:00005C7E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005C81                 call    ??0error_category@std@@QAE@XZ ; std::error_category::error_category(void)
.text$mn:00005C86                 mov     [ebp+var_4], 0
.text$mn:00005C8D                 mov     eax, [ebp+var_10]
.text$mn:00005C90                 mov     dword ptr [eax], offset ??_7_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`vftable'
.text$mn:00005C96                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005C9D                 mov     eax, [ebp+var_10]
.text$mn:00005CA0                 mov     ecx, [ebp+var_C]
.text$mn:00005CA3                 mov     large fs:0, ecx
.text$mn:00005CAA                 pop     ecx
.text$mn:00005CAB                 mov     esp, ebp
.text$mn:00005CAD                 pop     ebp
.text$mn:00005CAE                 retn
.text$mn:00005CAE ??0_Generic_error_category@std@@QAE@XZ endp
.text$mn:00005CAE
.text$mn:00005CAE ; ---------------------------------------------------------------------------
.text$mn:00005CAF                 align 10h
.text$mn:00005CAF _text$mn        ends
.text$mn:00005CAF
.text$x:00005CB0 ; ===========================================================================
.text$x:00005CB0
.text$x:00005CB0 ; Segment type: Pure code
.text$x:00005CB0 ; Segment permissions: Read/Execute
.text$x:00005CB0 _text$x         segment para public 'CODE' use32
.text$x:00005CB0                 assume cs:_text$x
.text$x:00005CB0                 ;org 5CB0h
.text$x:00005CB0 ; COMDAT (pick associative to section at 5C58)
.text$x:00005CB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005CB0
.text$x:00005CB0 ; =============== S U B R O U T I N E =======================================
.text$x:00005CB0
.text$x:00005CB0
.text$x:00005CB0 __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 proc near
.text$x:00005CB0                                         ; DATA XREF: .xdata$x:0000B28Co
.text$x:00005CB0                 mov     ecx, [ebp-10h]  ; this
.text$x:00005CB3                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:00005CB3 __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 endp
.text$x:00005CB3
.text$x:00005CB8
.text$x:00005CB8 ; =============== S U B R O U T I N E =======================================
.text$x:00005CB8
.text$x:00005CB8
.text$x:00005CB8 __ehhandler$??0_Generic_error_category@std@@QAE@XZ proc near
.text$x:00005CB8                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+5o
.text$x:00005CB8
.text$x:00005CB8 arg_4           = dword ptr  8
.text$x:00005CB8
.text$x:00005CB8                 mov     edx, [esp+arg_4]
.text$x:00005CBC                 lea     eax, [edx+0Ch]
.text$x:00005CBF                 mov     ecx, [edx-8]
.text$x:00005CC2                 xor     ecx, eax
.text$x:00005CC4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005CC9                 mov     eax, offset __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ
.text$x:00005CCE                 jmp     ___CxxFrameHandler3
.text$x:00005CCE __ehhandler$??0_Generic_error_category@std@@QAE@XZ endp
.text$x:00005CCE
.text$x:00005CCE ; ---------------------------------------------------------------------------
.text$x:00005CD3                 align 4
.text$x:00005CD3 _text$x         ends
.text$x:00005CD3
.text$mn:00005CD4 ; ===========================================================================
.text$mn:00005CD4
.text$mn:00005CD4 ; Segment type: Pure code
.text$mn:00005CD4 ; Segment permissions: Read/Execute
.text$mn:00005CD4 _text$mn        segment para public 'CODE' use32
.text$mn:00005CD4                 assume cs:_text$mn
.text$mn:00005CD4                 ;org 5CD4h
.text$mn:00005CD4 ; COMDAT (pick any)
.text$mn:00005CD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005CD4
.text$mn:00005CD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005CD4
.text$mn:00005CD4 ; Attributes: bp-based frame
.text$mn:00005CD4
.text$mn:00005CD4 ; _DWORD __thiscall std::_Ignore::_Ignore(std::_Ignore *__hidden this)
.text$mn:00005CD4                 public ??0_Ignore@std@@QAE@XZ
.text$mn:00005CD4 ??0_Ignore@std@@QAE@XZ proc near        ; CODE XREF: std::`dynamic initializer for 'ignore''(void)+8p
.text$mn:00005CD4
.text$mn:00005CD4 var_4           = dword ptr -4
.text$mn:00005CD4
.text$mn:00005CD4                 push    ebp
.text$mn:00005CD5                 mov     ebp, esp
.text$mn:00005CD7                 push    ecx
.text$mn:00005CD8                 mov     [ebp+var_4], ecx
.text$mn:00005CDB                 mov     eax, [ebp+var_4]
.text$mn:00005CDE                 mov     esp, ebp
.text$mn:00005CE0                 pop     ebp
.text$mn:00005CE1                 retn
.text$mn:00005CE1 ??0_Ignore@std@@QAE@XZ endp
.text$mn:00005CE1
.text$mn:00005CE1 ; ---------------------------------------------------------------------------
.text$mn:00005CE2                 align 4
.text$mn:00005CE2 _text$mn        ends
.text$mn:00005CE2
.text$mn:00005CE4 ; ===========================================================================
.text$mn:00005CE4
.text$mn:00005CE4 ; Segment type: Pure code
.text$mn:00005CE4 ; Segment permissions: Read/Execute
.text$mn:00005CE4 _text$mn        segment para public 'CODE' use32
.text$mn:00005CE4                 assume cs:_text$mn
.text$mn:00005CE4                 ;org 5CE4h
.text$mn:00005CE4 ; COMDAT (pick any)
.text$mn:00005CE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005CE4
.text$mn:00005CE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005CE4
.text$mn:00005CE4 ; Attributes: bp-based frame
.text$mn:00005CE4
.text$mn:00005CE4 ; _DWORD __thiscall std::_Iostream_error_category::_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:00005CE4                 public ??0_Iostream_error_category@std@@QAE@XZ
.text$mn:00005CE4 ??0_Iostream_error_category@std@@QAE@XZ proc near
.text$mn:00005CE4                                         ; CODE XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:00005CE4
.text$mn:00005CE4 var_10          = dword ptr -10h
.text$mn:00005CE4 var_C           = dword ptr -0Ch
.text$mn:00005CE4 var_4           = dword ptr -4
.text$mn:00005CE4
.text$mn:00005CE4                 push    ebp
.text$mn:00005CE5                 mov     ebp, esp
.text$mn:00005CE7                 push    0FFFFFFFFh
.text$mn:00005CE9                 push    offset __ehhandler$??0_Iostream_error_category@std@@QAE@XZ
.text$mn:00005CEE                 mov     eax, large fs:0
.text$mn:00005CF4                 push    eax
.text$mn:00005CF5                 push    ecx
.text$mn:00005CF6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005CFB                 xor     eax, ebp
.text$mn:00005CFD                 push    eax
.text$mn:00005CFE                 lea     eax, [ebp+var_C]
.text$mn:00005D01                 mov     large fs:0, eax
.text$mn:00005D07                 mov     [ebp+var_10], ecx
.text$mn:00005D0A                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005D0D                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:00005D12                 mov     [ebp+var_4], 0
.text$mn:00005D19                 mov     eax, [ebp+var_10]
.text$mn:00005D1C                 mov     dword ptr [eax], offset ??_7_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`vftable'
.text$mn:00005D22                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005D29                 mov     eax, [ebp+var_10]
.text$mn:00005D2C                 mov     ecx, [ebp+var_C]
.text$mn:00005D2F                 mov     large fs:0, ecx
.text$mn:00005D36                 pop     ecx
.text$mn:00005D37                 mov     esp, ebp
.text$mn:00005D39                 pop     ebp
.text$mn:00005D3A                 retn
.text$mn:00005D3A ??0_Iostream_error_category@std@@QAE@XZ endp
.text$mn:00005D3A
.text$mn:00005D3A ; ---------------------------------------------------------------------------
.text$mn:00005D3B                 align 4
.text$mn:00005D3B _text$mn        ends
.text$mn:00005D3B
.text$x:00005D3C ; ===========================================================================
.text$x:00005D3C
.text$x:00005D3C ; Segment type: Pure code
.text$x:00005D3C ; Segment permissions: Read/Execute
.text$x:00005D3C _text$x         segment para public 'CODE' use32
.text$x:00005D3C                 assume cs:_text$x
.text$x:00005D3C                 ;org 5D3Ch
.text$x:00005D3C ; COMDAT (pick associative to section at 5CE4)
.text$x:00005D3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005D3C
.text$x:00005D3C ; =============== S U B R O U T I N E =======================================
.text$x:00005D3C
.text$x:00005D3C
.text$x:00005D3C __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 proc near
.text$x:00005D3C                                         ; DATA XREF: .xdata$x:0000B310o
.text$x:00005D3C                 mov     ecx, [ebp-10h]  ; this
.text$x:00005D3F                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00005D3F __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 endp
.text$x:00005D3F
.text$x:00005D44
.text$x:00005D44 ; =============== S U B R O U T I N E =======================================
.text$x:00005D44
.text$x:00005D44
.text$x:00005D44 __ehhandler$??0_Iostream_error_category@std@@QAE@XZ proc near
.text$x:00005D44                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+5o
.text$x:00005D44
.text$x:00005D44 arg_4           = dword ptr  8
.text$x:00005D44
.text$x:00005D44                 mov     edx, [esp+arg_4]
.text$x:00005D48                 lea     eax, [edx+0Ch]
.text$x:00005D4B                 mov     ecx, [edx-8]
.text$x:00005D4E                 xor     ecx, eax
.text$x:00005D50                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005D55                 mov     eax, offset __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ
.text$x:00005D5A                 jmp     ___CxxFrameHandler3
.text$x:00005D5A __ehhandler$??0_Iostream_error_category@std@@QAE@XZ endp
.text$x:00005D5A
.text$x:00005D5A ; ---------------------------------------------------------------------------
.text$x:00005D5F                 align 10h
.text$x:00005D5F _text$x         ends
.text$x:00005D5F
.text$mn:00005D60 ; ===========================================================================
.text$mn:00005D60
.text$mn:00005D60 ; Segment type: Pure code
.text$mn:00005D60 ; Segment permissions: Read/Execute
.text$mn:00005D60 _text$mn        segment para public 'CODE' use32
.text$mn:00005D60                 assume cs:_text$mn
.text$mn:00005D60                 ;org 5D60h
.text$mn:00005D60 ; COMDAT (pick any)
.text$mn:00005D60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005D60
.text$mn:00005D60 ; =============== S U B R O U T I N E =======================================
.text$mn:00005D60
.text$mn:00005D60 ; Attributes: bp-based frame
.text$mn:00005D60
.text$mn:00005D60 ; _DWORD __thiscall std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 *this, const struct std::_Iterator_base12 *)
.text$mn:00005D60                 public ??0_Iterator_base12@std@@QAE@ABU01@@Z
.text$mn:00005D60 ??0_Iterator_base12@std@@QAE@ABU01@@Z proc near
.text$mn:00005D60                                         ; CODE XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12> const &)+2Dp
.text$mn:00005D60                                         ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12> const &)+2Dp
.text$mn:00005D60
.text$mn:00005D60 var_4           = dword ptr -4
.text$mn:00005D60 arg_0           = dword ptr  8
.text$mn:00005D60
.text$mn:00005D60                 push    ebp
.text$mn:00005D61                 mov     ebp, esp
.text$mn:00005D63                 push    ecx
.text$mn:00005D64                 mov     [ebp+var_4], ecx
.text$mn:00005D67                 mov     eax, [ebp+var_4]
.text$mn:00005D6A                 mov     dword ptr [eax], 0
.text$mn:00005D70                 mov     ecx, [ebp+var_4]
.text$mn:00005D73                 mov     dword ptr [ecx+4], 0
.text$mn:00005D7A                 mov     edx, [ebp+arg_0]
.text$mn:00005D7D                 push    edx
.text$mn:00005D7E                 mov     ecx, [ebp+var_4]
.text$mn:00005D81                 call    ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)
.text$mn:00005D86                 mov     eax, [ebp+var_4]
.text$mn:00005D89                 mov     esp, ebp
.text$mn:00005D8B                 pop     ebp
.text$mn:00005D8C                 retn    4
.text$mn:00005D8C ??0_Iterator_base12@std@@QAE@ABU01@@Z endp
.text$mn:00005D8C
.text$mn:00005D8C ; ---------------------------------------------------------------------------
.text$mn:00005D8F                 align 10h
.text$mn:00005D8F _text$mn        ends
.text$mn:00005D8F
.text$mn:00005D90 ; ===========================================================================
.text$mn:00005D90
.text$mn:00005D90 ; Segment type: Pure code
.text$mn:00005D90 ; Segment permissions: Read/Execute
.text$mn:00005D90 _text$mn        segment para public 'CODE' use32
.text$mn:00005D90                 assume cs:_text$mn
.text$mn:00005D90                 ;org 5D90h
.text$mn:00005D90 ; COMDAT (pick any)
.text$mn:00005D90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005D90
.text$mn:00005D90 ; =============== S U B R O U T I N E =======================================
.text$mn:00005D90
.text$mn:00005D90 ; Attributes: bp-based frame
.text$mn:00005D90
.text$mn:00005D90 ; _DWORD __thiscall std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 *__hidden this)
.text$mn:00005D90                 public ??0_Iterator_base12@std@@QAE@XZ
.text$mn:00005D90 ??0_Iterator_base12@std@@QAE@XZ proc near
.text$mn:00005D90                                         ; CODE XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>(void)+29p
.text$mn:00005D90                                         ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)+29p
.text$mn:00005D90
.text$mn:00005D90 var_4           = dword ptr -4
.text$mn:00005D90
.text$mn:00005D90                 push    ebp
.text$mn:00005D91                 mov     ebp, esp
.text$mn:00005D93                 push    ecx
.text$mn:00005D94                 mov     [ebp+var_4], ecx
.text$mn:00005D97                 mov     eax, [ebp+var_4]
.text$mn:00005D9A                 mov     dword ptr [eax], 0
.text$mn:00005DA0                 mov     ecx, [ebp+var_4]
.text$mn:00005DA3                 mov     dword ptr [ecx+4], 0
.text$mn:00005DAA                 mov     eax, [ebp+var_4]
.text$mn:00005DAD                 mov     esp, ebp
.text$mn:00005DAF                 pop     ebp
.text$mn:00005DB0                 retn
.text$mn:00005DB0 ??0_Iterator_base12@std@@QAE@XZ endp
.text$mn:00005DB0
.text$mn:00005DB0 ; ---------------------------------------------------------------------------
.text$mn:00005DB1                 align 4
.text$mn:00005DB1 _text$mn        ends
.text$mn:00005DB1
.text$mn:00005DB4 ; ===========================================================================
.text$mn:00005DB4
.text$mn:00005DB4 ; Segment type: Pure code
.text$mn:00005DB4 ; Segment permissions: Read/Execute
.text$mn:00005DB4 _text$mn        segment para public 'CODE' use32
.text$mn:00005DB4                 assume cs:_text$mn
.text$mn:00005DB4                 ;org 5DB4h
.text$mn:00005DB4 ; COMDAT (pick any)
.text$mn:00005DB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005DB4
.text$mn:00005DB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005DB4
.text$mn:00005DB4 ; Attributes: bp-based frame
.text$mn:00005DB4
.text$mn:00005DB4 ; _DWORD __thiscall std::_System_error_category::_System_error_category(std::_System_error_category *__hidden this)
.text$mn:00005DB4                 public ??0_System_error_category@std@@QAE@XZ
.text$mn:00005DB4 ??0_System_error_category@std@@QAE@XZ proc near
.text$mn:00005DB4                                         ; CODE XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:00005DB4
.text$mn:00005DB4 var_10          = dword ptr -10h
.text$mn:00005DB4 var_C           = dword ptr -0Ch
.text$mn:00005DB4 var_4           = dword ptr -4
.text$mn:00005DB4
.text$mn:00005DB4                 push    ebp
.text$mn:00005DB5                 mov     ebp, esp
.text$mn:00005DB7                 push    0FFFFFFFFh
.text$mn:00005DB9                 push    offset __ehhandler$??0_System_error_category@std@@QAE@XZ
.text$mn:00005DBE                 mov     eax, large fs:0
.text$mn:00005DC4                 push    eax
.text$mn:00005DC5                 push    ecx
.text$mn:00005DC6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005DCB                 xor     eax, ebp
.text$mn:00005DCD                 push    eax
.text$mn:00005DCE                 lea     eax, [ebp+var_C]
.text$mn:00005DD1                 mov     large fs:0, eax
.text$mn:00005DD7                 mov     [ebp+var_10], ecx
.text$mn:00005DDA                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005DDD                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:00005DE2                 mov     [ebp+var_4], 0
.text$mn:00005DE9                 mov     eax, [ebp+var_10]
.text$mn:00005DEC                 mov     dword ptr [eax], offset ??_7_System_error_category@std@@6B@ ; const std::_System_error_category::`vftable'
.text$mn:00005DF2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005DF9                 mov     eax, [ebp+var_10]
.text$mn:00005DFC                 mov     ecx, [ebp+var_C]
.text$mn:00005DFF                 mov     large fs:0, ecx
.text$mn:00005E06                 pop     ecx
.text$mn:00005E07                 mov     esp, ebp
.text$mn:00005E09                 pop     ebp
.text$mn:00005E0A                 retn
.text$mn:00005E0A ??0_System_error_category@std@@QAE@XZ endp
.text$mn:00005E0A
.text$mn:00005E0A ; ---------------------------------------------------------------------------
.text$mn:00005E0B                 align 4
.text$mn:00005E0B _text$mn        ends
.text$mn:00005E0B
.text$x:00005E0C ; ===========================================================================
.text$x:00005E0C
.text$x:00005E0C ; Segment type: Pure code
.text$x:00005E0C ; Segment permissions: Read/Execute
.text$x:00005E0C _text$x         segment para public 'CODE' use32
.text$x:00005E0C                 assume cs:_text$x
.text$x:00005E0C                 ;org 5E0Ch
.text$x:00005E0C ; COMDAT (pick associative to section at 5DB4)
.text$x:00005E0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005E0C
.text$x:00005E0C ; =============== S U B R O U T I N E =======================================
.text$x:00005E0C
.text$x:00005E0C
.text$x:00005E0C __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 proc near
.text$x:00005E0C                                         ; DATA XREF: .xdata$x:0000B394o
.text$x:00005E0C                 mov     ecx, [ebp-10h]  ; this
.text$x:00005E0F                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00005E0F __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 endp
.text$x:00005E0F
.text$x:00005E14
.text$x:00005E14 ; =============== S U B R O U T I N E =======================================
.text$x:00005E14
.text$x:00005E14
.text$x:00005E14 __ehhandler$??0_System_error_category@std@@QAE@XZ proc near
.text$x:00005E14                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+5o
.text$x:00005E14
.text$x:00005E14 arg_4           = dword ptr  8
.text$x:00005E14
.text$x:00005E14                 mov     edx, [esp+arg_4]
.text$x:00005E18                 lea     eax, [edx+0Ch]
.text$x:00005E1B                 mov     ecx, [edx-8]
.text$x:00005E1E                 xor     ecx, eax
.text$x:00005E20                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005E25                 mov     eax, offset __ehfuncinfo$??0_System_error_category@std@@QAE@XZ
.text$x:00005E2A                 jmp     ___CxxFrameHandler3
.text$x:00005E2A __ehhandler$??0_System_error_category@std@@QAE@XZ endp
.text$x:00005E2A
.text$x:00005E2A ; ---------------------------------------------------------------------------
.text$x:00005E2F                 align 10h
.text$x:00005E2F _text$x         ends
.text$x:00005E2F
.text$mn:00005E30 ; ===========================================================================
.text$mn:00005E30
.text$mn:00005E30 ; Segment type: Pure code
.text$mn:00005E30 ; Segment permissions: Read/Execute
.text$mn:00005E30 _text$mn        segment para public 'CODE' use32
.text$mn:00005E30                 assume cs:_text$mn
.text$mn:00005E30                 ;org 5E30h
.text$mn:00005E30 ; COMDAT (pick any)
.text$mn:00005E30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005E30
.text$mn:00005E30 ; =============== S U B R O U T I N E =======================================
.text$mn:00005E30
.text$mn:00005E30 ; Attributes: bp-based frame
.text$mn:00005E30
.text$mn:00005E30 ; _DWORD __thiscall std::error_category::error_category(std::error_category *__hidden this)
.text$mn:00005E30                 public ??0error_category@std@@QAE@XZ
.text$mn:00005E30 ??0error_category@std@@QAE@XZ proc near ; CODE XREF: std::_Generic_error_category::_Generic_error_category(void)+29p
.text$mn:00005E30
.text$mn:00005E30 var_4           = dword ptr -4
.text$mn:00005E30
.text$mn:00005E30                 push    ebp
.text$mn:00005E31                 mov     ebp, esp
.text$mn:00005E33                 push    ecx
.text$mn:00005E34                 mov     [ebp+var_4], ecx
.text$mn:00005E37                 mov     eax, [ebp+var_4]
.text$mn:00005E3A                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:00005E40                 mov     eax, [ebp+var_4]
.text$mn:00005E43                 mov     esp, ebp
.text$mn:00005E45                 pop     ebp
.text$mn:00005E46                 retn
.text$mn:00005E46 ??0error_category@std@@QAE@XZ endp
.text$mn:00005E46
.text$mn:00005E46 ; ---------------------------------------------------------------------------
.text$mn:00005E47                 align 4
.text$mn:00005E47 _text$mn        ends
.text$mn:00005E47
.text$mn:00005E48 ; ===========================================================================
.text$mn:00005E48
.text$mn:00005E48 ; Segment type: Pure code
.text$mn:00005E48 ; Segment permissions: Read/Execute
.text$mn:00005E48 _text$mn        segment para public 'CODE' use32
.text$mn:00005E48                 assume cs:_text$mn
.text$mn:00005E48                 ;org 5E48h
.text$mn:00005E48 ; COMDAT (pick any)
.text$mn:00005E48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005E48
.text$mn:00005E48 ; =============== S U B R O U T I N E =======================================
.text$mn:00005E48
.text$mn:00005E48 ; Attributes: bp-based frame
.text$mn:00005E48
.text$mn:00005E48 ; _DWORD __thiscall std::error_condition::error_condition(std::error_condition *this, int, const struct std::error_category *)
.text$mn:00005E48                 public ??0error_condition@std@@QAE@HABVerror_category@1@@Z
.text$mn:00005E48 ??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
.text$mn:00005E48                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+24p
.text$mn:00005E48                                         ; std::_System_error_category::default_error_condition(int)+3Dp ...
.text$mn:00005E48
.text$mn:00005E48 var_4           = dword ptr -4
.text$mn:00005E48 arg_0           = dword ptr  8
.text$mn:00005E48 arg_4           = dword ptr  0Ch
.text$mn:00005E48
.text$mn:00005E48                 push    ebp
.text$mn:00005E49                 mov     ebp, esp
.text$mn:00005E4B                 push    ecx
.text$mn:00005E4C                 mov     [ebp+var_4], ecx
.text$mn:00005E4F                 mov     eax, [ebp+var_4]
.text$mn:00005E52                 mov     ecx, [ebp+arg_0]
.text$mn:00005E55                 mov     [eax], ecx
.text$mn:00005E57                 mov     edx, [ebp+var_4]
.text$mn:00005E5A                 mov     eax, [ebp+arg_4]
.text$mn:00005E5D                 mov     [edx+4], eax
.text$mn:00005E60                 mov     eax, [ebp+var_4]
.text$mn:00005E63                 mov     esp, ebp
.text$mn:00005E65                 pop     ebp
.text$mn:00005E66                 retn    8
.text$mn:00005E66 ??0error_condition@std@@QAE@HABVerror_category@1@@Z endp
.text$mn:00005E66
.text$mn:00005E66 ; ---------------------------------------------------------------------------
.text$mn:00005E69                 align 4
.text$mn:00005E69 _text$mn        ends
.text$mn:00005E69
.text$mn:00005E6C ; ===========================================================================
.text$mn:00005E6C
.text$mn:00005E6C ; Segment type: Pure code
.text$mn:00005E6C ; Segment permissions: Read/Execute
.text$mn:00005E6C _text$mn        segment para public 'CODE' use32
.text$mn:00005E6C                 assume cs:_text$mn
.text$mn:00005E6C                 ;org 5E6Ch
.text$mn:00005E6C ; COMDAT (pick any)
.text$mn:00005E6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005E6C
.text$mn:00005E6C ; =============== S U B R O U T I N E =======================================
.text$mn:00005E6C
.text$mn:00005E6C ; Attributes: bp-based frame
.text$mn:00005E6C
.text$mn:00005E6C ; _DWORD __thiscall std::locale::id::id(std::locale::id *this, unsigned int)
.text$mn:00005E6C                 public ??0id@locale@std@@QAE@I@Z
.text$mn:00005E6C ??0id@locale@std@@QAE@I@Z proc near     ; CODE XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+Ap
.text$mn:00005E6C                                         ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+Ap ...
.text$mn:00005E6C
.text$mn:00005E6C var_4           = dword ptr -4
.text$mn:00005E6C arg_0           = dword ptr  8
.text$mn:00005E6C
.text$mn:00005E6C                 push    ebp
.text$mn:00005E6D                 mov     ebp, esp
.text$mn:00005E6F                 push    ecx
.text$mn:00005E70                 mov     [ebp+var_4], ecx
.text$mn:00005E73                 mov     eax, [ebp+var_4]
.text$mn:00005E76                 mov     ecx, [ebp+arg_0]
.text$mn:00005E79                 mov     [eax], ecx
.text$mn:00005E7B                 mov     eax, [ebp+var_4]
.text$mn:00005E7E                 mov     esp, ebp
.text$mn:00005E80                 pop     ebp
.text$mn:00005E81                 retn    4
.text$mn:00005E81 ??0id@locale@std@@QAE@I@Z endp
.text$mn:00005E81
.text$mn:00005E81 _text$mn        ends
.text$mn:00005E81
.text$mn:00005E84 ; ===========================================================================
.text$mn:00005E84
.text$mn:00005E84 ; Segment type: Pure code
.text$mn:00005E84 ; Segment permissions: Read/Execute
.text$mn:00005E84 _text$mn        segment para public 'CODE' use32
.text$mn:00005E84                 assume cs:_text$mn
.text$mn:00005E84                 ;org 5E84h
.text$mn:00005E84 ; COMDAT (pick any)
.text$mn:00005E84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005E84
.text$mn:00005E84 ; =============== S U B R O U T I N E =======================================
.text$mn:00005E84
.text$mn:00005E84 ; Attributes: bp-based frame
.text$mn:00005E84
.text$mn:00005E84 ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, wchar_t const *, int, wchar_t const * const *, wchar_t const * const &, struct std::_Iterator_base12>::~_Iterator012<struct std::random_access_iterator_tag, wchar_t const *, int, wchar_t const * const *, wchar_t const * const &, struct std::_Iterator_base12>(void)
.text$mn:00005E84                 public ??1?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00005E84 ??1?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:00005E84                                         ; CODE XREF: __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z$0+3j
.text$mn:00005E84                                         ; __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z$0+3j ...
.text$mn:00005E84
.text$mn:00005E84 var_10          = dword ptr -10h
.text$mn:00005E84 var_C           = dword ptr -0Ch
.text$mn:00005E84 var_4           = dword ptr -4
.text$mn:00005E84
.text$mn:00005E84                 push    ebp
.text$mn:00005E85                 mov     ebp, esp
.text$mn:00005E87                 push    0FFFFFFFFh
.text$mn:00005E89                 push    offset __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00005E8E                 mov     eax, large fs:0
.text$mn:00005E94                 push    eax
.text$mn:00005E95                 push    ecx
.text$mn:00005E96                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005E9B                 xor     eax, ebp
.text$mn:00005E9D                 push    eax
.text$mn:00005E9E                 lea     eax, [ebp+var_C]
.text$mn:00005EA1                 mov     large fs:0, eax
.text$mn:00005EA7                 mov     [ebp+var_10], ecx
.text$mn:00005EAA                 mov     [ebp+var_4], 0
.text$mn:00005EB1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005EB8                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005EBB                 call    ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$mn:00005EC0                 mov     ecx, [ebp+var_C]
.text$mn:00005EC3                 mov     large fs:0, ecx
.text$mn:00005ECA                 pop     ecx
.text$mn:00005ECB                 mov     esp, ebp
.text$mn:00005ECD                 pop     ebp
.text$mn:00005ECE                 retn
.text$mn:00005ECE ??1?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00005ECE
.text$mn:00005ECE ; ---------------------------------------------------------------------------
.text$mn:00005ECF                 align 10h
.text$mn:00005ECF _text$mn        ends
.text$mn:00005ECF
.text$x:00005ED0 ; ===========================================================================
.text$x:00005ED0
.text$x:00005ED0 ; Segment type: Pure code
.text$x:00005ED0 ; Segment permissions: Read/Execute
.text$x:00005ED0 _text$x         segment para public 'CODE' use32
.text$x:00005ED0                 assume cs:_text$x
.text$x:00005ED0                 ;org 5ED0h
.text$x:00005ED0 ; COMDAT (pick associative to section at 5E84)
.text$x:00005ED0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005ED0
.text$x:00005ED0 ; =============== S U B R O U T I N E =======================================
.text$x:00005ED0
.text$x:00005ED0
.text$x:00005ED0 __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00005ED0                                         ; DATA XREF: .xdata$x:0000BBBCo
.text$x:00005ED0                 mov     ecx, [ebp-10h]  ; this
.text$x:00005ED3                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00005ED3 __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:00005ED3
.text$x:00005ED8
.text$x:00005ED8 ; =============== S U B R O U T I N E =======================================
.text$x:00005ED8
.text$x:00005ED8
.text$x:00005ED8 __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00005ED8                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>(void)+5o
.text$x:00005ED8
.text$x:00005ED8 arg_4           = dword ptr  8
.text$x:00005ED8
.text$x:00005ED8                 mov     edx, [esp+arg_4]
.text$x:00005EDC                 lea     eax, [edx+0Ch]
.text$x:00005EDF                 mov     ecx, [edx-8]
.text$x:00005EE2                 xor     ecx, eax
.text$x:00005EE4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005EE9                 mov     eax, offset __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$x:00005EEE                 jmp     ___CxxFrameHandler3
.text$x:00005EEE __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:00005EEE
.text$x:00005EEE ; ---------------------------------------------------------------------------
.text$x:00005EF3                 align 4
.text$x:00005EF3 _text$x         ends
.text$x:00005EF3
.text$mn:00005EF4 ; ===========================================================================
.text$mn:00005EF4
.text$mn:00005EF4 ; Segment type: Pure code
.text$mn:00005EF4 ; Segment permissions: Read/Execute
.text$mn:00005EF4 _text$mn        segment para public 'CODE' use32
.text$mn:00005EF4                 assume cs:_text$mn
.text$mn:00005EF4                 ;org 5EF4h
.text$mn:00005EF4 ; COMDAT (pick any)
.text$mn:00005EF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005EF4
.text$mn:00005EF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005EF4
.text$mn:00005EF4 ; Attributes: bp-based frame
.text$mn:00005EF4
.text$mn:00005EF4 ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>::~_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>(void)
.text$mn:00005EF4                 public ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00005EF4 ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:00005EF4                                         ; CODE XREF: __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0+3j
.text$mn:00005EF4                                         ; __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0+3j ...
.text$mn:00005EF4
.text$mn:00005EF4 var_10          = dword ptr -10h
.text$mn:00005EF4 var_C           = dword ptr -0Ch
.text$mn:00005EF4 var_4           = dword ptr -4
.text$mn:00005EF4
.text$mn:00005EF4                 push    ebp
.text$mn:00005EF5                 mov     ebp, esp
.text$mn:00005EF7                 push    0FFFFFFFFh
.text$mn:00005EF9                 push    offset __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00005EFE                 mov     eax, large fs:0
.text$mn:00005F04                 push    eax
.text$mn:00005F05                 push    ecx
.text$mn:00005F06                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005F0B                 xor     eax, ebp
.text$mn:00005F0D                 push    eax
.text$mn:00005F0E                 lea     eax, [ebp+var_C]
.text$mn:00005F11                 mov     large fs:0, eax
.text$mn:00005F17                 mov     [ebp+var_10], ecx
.text$mn:00005F1A                 mov     [ebp+var_4], 0
.text$mn:00005F21                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005F28                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005F2B                 call    ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$mn:00005F30                 mov     ecx, [ebp+var_C]
.text$mn:00005F33                 mov     large fs:0, ecx
.text$mn:00005F3A                 pop     ecx
.text$mn:00005F3B                 mov     esp, ebp
.text$mn:00005F3D                 pop     ebp
.text$mn:00005F3E                 retn
.text$mn:00005F3E ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00005F3E
.text$mn:00005F3E ; ---------------------------------------------------------------------------
.text$mn:00005F3F                 align 10h
.text$mn:00005F3F _text$mn        ends
.text$mn:00005F3F
.text$x:00005F40 ; ===========================================================================
.text$x:00005F40
.text$x:00005F40 ; Segment type: Pure code
.text$x:00005F40 ; Segment permissions: Read/Execute
.text$x:00005F40 _text$x         segment para public 'CODE' use32
.text$x:00005F40                 assume cs:_text$x
.text$x:00005F40                 ;org 5F40h
.text$x:00005F40 ; COMDAT (pick associative to section at 5EF4)
.text$x:00005F40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005F40
.text$x:00005F40 ; =============== S U B R O U T I N E =======================================
.text$x:00005F40
.text$x:00005F40
.text$x:00005F40 __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00005F40                                         ; DATA XREF: .xdata$x:0000BD7Co
.text$x:00005F40                 mov     ecx, [ebp-10h]  ; this
.text$x:00005F43                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00005F43 __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:00005F43
.text$x:00005F48
.text$x:00005F48 ; =============== S U B R O U T I N E =======================================
.text$x:00005F48
.text$x:00005F48
.text$x:00005F48 __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00005F48                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)+5o
.text$x:00005F48
.text$x:00005F48 arg_4           = dword ptr  8
.text$x:00005F48
.text$x:00005F48                 mov     edx, [esp+arg_4]
.text$x:00005F4C                 lea     eax, [edx+0Ch]
.text$x:00005F4F                 mov     ecx, [edx-8]
.text$x:00005F52                 xor     ecx, eax
.text$x:00005F54                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005F59                 mov     eax, offset __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$x:00005F5E                 jmp     ___CxxFrameHandler3
.text$x:00005F5E __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:00005F5E
.text$x:00005F5E ; ---------------------------------------------------------------------------
.text$x:00005F63                 align 4
.text$x:00005F63 _text$x         ends
.text$x:00005F63
.text$mn:00005F64 ; ===========================================================================
.text$mn:00005F64
.text$mn:00005F64 ; Segment type: Pure code
.text$mn:00005F64 ; Segment permissions: Read/Execute
.text$mn:00005F64 _text$mn        segment para public 'CODE' use32
.text$mn:00005F64                 assume cs:_text$mn
.text$mn:00005F64                 ;org 5F64h
.text$mn:00005F64 ; COMDAT (pick any)
.text$mn:00005F64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F64
.text$mn:00005F64 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F64
.text$mn:00005F64 ; Attributes: bp-based frame
.text$mn:00005F64
.text$mn:00005F64 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::~_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(void)
.text$mn:00005F64                 public ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:00005F64 ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00005F64                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0+3j
.text$mn:00005F64                                         ; __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0+3j ...
.text$mn:00005F64
.text$mn:00005F64 var_10          = dword ptr -10h
.text$mn:00005F64 var_C           = dword ptr -0Ch
.text$mn:00005F64 var_4           = dword ptr -4
.text$mn:00005F64
.text$mn:00005F64                 push    ebp
.text$mn:00005F65                 mov     ebp, esp
.text$mn:00005F67                 push    0FFFFFFFFh
.text$mn:00005F69                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:00005F6E                 mov     eax, large fs:0
.text$mn:00005F74                 push    eax
.text$mn:00005F75                 push    ecx
.text$mn:00005F76                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005F7B                 xor     eax, ebp
.text$mn:00005F7D                 push    eax
.text$mn:00005F7E                 lea     eax, [ebp+var_C]
.text$mn:00005F81                 mov     large fs:0, eax
.text$mn:00005F87                 mov     [ebp+var_10], ecx
.text$mn:00005F8A                 mov     [ebp+var_4], 0
.text$mn:00005F91                 mov     ecx, [ebp+var_10]
.text$mn:00005F94                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)
.text$mn:00005F99                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005FA0                 mov     ecx, [ebp+var_10]
.text$mn:00005FA3                 call    ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$mn:00005FA8                 mov     ecx, [ebp+var_C]
.text$mn:00005FAB                 mov     large fs:0, ecx
.text$mn:00005FB2                 pop     ecx
.text$mn:00005FB3                 mov     esp, ebp
.text$mn:00005FB5                 pop     ebp
.text$mn:00005FB6                 retn
.text$mn:00005FB6 ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$mn:00005FB6
.text$mn:00005FB6 ; ---------------------------------------------------------------------------
.text$mn:00005FB7                 align 4
.text$mn:00005FB7 _text$mn        ends
.text$mn:00005FB7
.text$x:00005FB8 ; ===========================================================================
.text$x:00005FB8
.text$x:00005FB8 ; Segment type: Pure code
.text$x:00005FB8 ; Segment permissions: Read/Execute
.text$x:00005FB8 _text$x         segment para public 'CODE' use32
.text$x:00005FB8                 assume cs:_text$x
.text$x:00005FB8                 ;org 5FB8h
.text$x:00005FB8 ; COMDAT (pick associative to section at 5F64)
.text$x:00005FB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005FB8
.text$x:00005FB8 ; =============== S U B R O U T I N E =======================================
.text$x:00005FB8
.text$x:00005FB8
.text$x:00005FB8 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00005FB8                                         ; DATA XREF: .xdata$x:0000B150o
.text$x:00005FB8                 mov     ecx, [ebp-10h]
.text$x:00005FBB                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:00005FBB __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00005FBB
.text$x:00005FC0
.text$x:00005FC0 ; =============== S U B R O U T I N E =======================================
.text$x:00005FC0
.text$x:00005FC0
.text$x:00005FC0 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$x:00005FC0                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+5o
.text$x:00005FC0
.text$x:00005FC0 arg_4           = dword ptr  8
.text$x:00005FC0
.text$x:00005FC0                 mov     edx, [esp+arg_4]
.text$x:00005FC4                 lea     eax, [edx+0Ch]
.text$x:00005FC7                 mov     ecx, [edx-8]
.text$x:00005FCA                 xor     ecx, eax
.text$x:00005FCC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005FD1                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$x:00005FD6                 jmp     ___CxxFrameHandler3
.text$x:00005FD6 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$x:00005FD6
.text$x:00005FD6 ; ---------------------------------------------------------------------------
.text$x:00005FDB                 align 4
.text$x:00005FDB _text$x         ends
.text$x:00005FDB
.text$mn:00005FDC ; ===========================================================================
.text$mn:00005FDC
.text$mn:00005FDC ; Segment type: Pure code
.text$mn:00005FDC ; Segment permissions: Read/Execute
.text$mn:00005FDC _text$mn        segment para public 'CODE' use32
.text$mn:00005FDC                 assume cs:_text$mn
.text$mn:00005FDC                 ;org 5FDCh
.text$mn:00005FDC ; COMDAT (pick any)
.text$mn:00005FDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005FDC
.text$mn:00005FDC ; =============== S U B R O U T I N E =======================================
.text$mn:00005FDC
.text$mn:00005FDC ; Attributes: bp-based frame
.text$mn:00005FDC
.text$mn:00005FDC ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::~_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(void)
.text$mn:00005FDC                 public ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00005FDC ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00005FDC                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0+3j
.text$mn:00005FDC                                         ; __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0+3j ...
.text$mn:00005FDC
.text$mn:00005FDC var_10          = dword ptr -10h
.text$mn:00005FDC var_C           = dword ptr -0Ch
.text$mn:00005FDC var_4           = dword ptr -4
.text$mn:00005FDC
.text$mn:00005FDC                 push    ebp
.text$mn:00005FDD                 mov     ebp, esp
.text$mn:00005FDF                 push    0FFFFFFFFh
.text$mn:00005FE1                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00005FE6                 mov     eax, large fs:0
.text$mn:00005FEC                 push    eax
.text$mn:00005FED                 push    ecx
.text$mn:00005FEE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005FF3                 xor     eax, ebp
.text$mn:00005FF5                 push    eax
.text$mn:00005FF6                 lea     eax, [ebp+var_C]
.text$mn:00005FF9                 mov     large fs:0, eax
.text$mn:00005FFF                 mov     [ebp+var_10], ecx
.text$mn:00006002                 mov     [ebp+var_4], 0
.text$mn:00006009                 mov     ecx, [ebp+var_10]
.text$mn:0000600C                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:00006011                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006018                 mov     ecx, [ebp+var_10]
.text$mn:0000601B                 call    ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:00006020                 mov     ecx, [ebp+var_C]
.text$mn:00006023                 mov     large fs:0, ecx
.text$mn:0000602A                 pop     ecx
.text$mn:0000602B                 mov     esp, ebp
.text$mn:0000602D                 pop     ebp
.text$mn:0000602E                 retn
.text$mn:0000602E ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:0000602E
.text$mn:0000602E ; ---------------------------------------------------------------------------
.text$mn:0000602F                 align 10h
.text$mn:0000602F _text$mn        ends
.text$mn:0000602F
.text$x:00006030 ; ===========================================================================
.text$x:00006030
.text$x:00006030 ; Segment type: Pure code
.text$x:00006030 ; Segment permissions: Read/Execute
.text$x:00006030 _text$x         segment para public 'CODE' use32
.text$x:00006030                 assume cs:_text$x
.text$x:00006030                 ;org 6030h
.text$x:00006030 ; COMDAT (pick associative to section at 5FDC)
.text$x:00006030                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006030
.text$x:00006030 ; =============== S U B R O U T I N E =======================================
.text$x:00006030
.text$x:00006030
.text$x:00006030 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00006030                                         ; DATA XREF: .xdata$x:0000B49Co
.text$x:00006030                 mov     ecx, [ebp-10h]
.text$x:00006033                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:00006033 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00006033
.text$x:00006038
.text$x:00006038 ; =============== S U B R O U T I N E =======================================
.text$x:00006038
.text$x:00006038
.text$x:00006038 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:00006038                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+5o
.text$x:00006038
.text$x:00006038 arg_4           = dword ptr  8
.text$x:00006038
.text$x:00006038                 mov     edx, [esp+arg_4]
.text$x:0000603C                 lea     eax, [edx+0Ch]
.text$x:0000603F                 mov     ecx, [edx-8]
.text$x:00006042                 xor     ecx, eax
.text$x:00006044                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006049                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$x:0000604E                 jmp     ___CxxFrameHandler3
.text$x:0000604E __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:0000604E
.text$x:0000604E ; ---------------------------------------------------------------------------
.text$x:00006053                 align 4
.text$x:00006053 _text$x         ends
.text$x:00006053
.text$mn:00006054 ; ===========================================================================
.text$mn:00006054
.text$mn:00006054 ; Segment type: Pure code
.text$mn:00006054 ; Segment permissions: Read/Execute
.text$mn:00006054 _text$mn        segment para public 'CODE' use32
.text$mn:00006054                 assume cs:_text$mn
.text$mn:00006054                 ;org 6054h
.text$mn:00006054 ; COMDAT (pick any)
.text$mn:00006054                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006054
.text$mn:00006054 ; =============== S U B R O U T I N E =======================================
.text$mn:00006054
.text$mn:00006054 ; Attributes: bp-based frame
.text$mn:00006054
.text$mn:00006054 ; public: __thiscall std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::~_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>(void)
.text$mn:00006054                 public ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00006054 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00006054                                         ; CODE XREF: __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5+3j
.text$mn:00006054                                         ; __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7+3j ...
.text$mn:00006054
.text$mn:00006054 var_10          = dword ptr -10h
.text$mn:00006054 var_C           = dword ptr -0Ch
.text$mn:00006054 var_4           = dword ptr -4
.text$mn:00006054
.text$mn:00006054                 push    ebp
.text$mn:00006055                 mov     ebp, esp
.text$mn:00006057                 push    0FFFFFFFFh
.text$mn:00006059                 push    offset __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:0000605E                 mov     eax, large fs:0
.text$mn:00006064                 push    eax
.text$mn:00006065                 push    ecx
.text$mn:00006066                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000606B                 xor     eax, ebp
.text$mn:0000606D                 push    eax
.text$mn:0000606E                 lea     eax, [ebp+var_C]
.text$mn:00006071                 mov     large fs:0, eax
.text$mn:00006077                 mov     [ebp+var_10], ecx
.text$mn:0000607A                 mov     [ebp+var_4], 0
.text$mn:00006081                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006088                 mov     ecx, [ebp+var_10]
.text$mn:0000608B                 call    ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$mn:00006090                 mov     ecx, [ebp+var_C]
.text$mn:00006093                 mov     large fs:0, ecx
.text$mn:0000609A                 pop     ecx
.text$mn:0000609B                 mov     esp, ebp
.text$mn:0000609D                 pop     ebp
.text$mn:0000609E                 retn
.text$mn:0000609E ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:0000609E
.text$mn:0000609E ; ---------------------------------------------------------------------------
.text$mn:0000609F                 align 10h
.text$mn:0000609F _text$mn        ends
.text$mn:0000609F
.text$x:000060A0 ; ===========================================================================
.text$x:000060A0
.text$x:000060A0 ; Segment type: Pure code
.text$x:000060A0 ; Segment permissions: Read/Execute
.text$x:000060A0 _text$x         segment para public 'CODE' use32
.text$x:000060A0                 assume cs:_text$x
.text$x:000060A0                 ;org 60A0h
.text$x:000060A0 ; COMDAT (pick associative to section at 6054)
.text$x:000060A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000060A0
.text$x:000060A0 ; =============== S U B R O U T I N E =======================================
.text$x:000060A0
.text$x:000060A0
.text$x:000060A0 __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:000060A0                                         ; DATA XREF: .xdata$x:0000BE00o
.text$x:000060A0                 mov     ecx, [ebp-10h]
.text$x:000060A3                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$x:000060A3 __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:000060A3
.text$x:000060A8
.text$x:000060A8 ; =============== S U B R O U T I N E =======================================
.text$x:000060A8
.text$x:000060A8
.text$x:000060A8 __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:000060A8                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)+5o
.text$x:000060A8
.text$x:000060A8 arg_4           = dword ptr  8
.text$x:000060A8
.text$x:000060A8                 mov     edx, [esp+arg_4]
.text$x:000060AC                 lea     eax, [edx+0Ch]
.text$x:000060AF                 mov     ecx, [edx-8]
.text$x:000060B2                 xor     ecx, eax
.text$x:000060B4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000060B9                 mov     eax, offset __ehfuncinfo$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$x:000060BE                 jmp     ___CxxFrameHandler3
.text$x:000060BE __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:000060BE
.text$x:000060BE ; ---------------------------------------------------------------------------
.text$x:000060C3                 align 4
.text$x:000060C3 _text$x         ends
.text$x:000060C3
.text$mn:000060C4 ; ===========================================================================
.text$mn:000060C4
.text$mn:000060C4 ; Segment type: Pure code
.text$mn:000060C4 ; Segment permissions: Read/Execute
.text$mn:000060C4 _text$mn        segment para public 'CODE' use32
.text$mn:000060C4                 assume cs:_text$mn
.text$mn:000060C4                 ;org 60C4h
.text$mn:000060C4 ; COMDAT (pick any)
.text$mn:000060C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000060C4
.text$mn:000060C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000060C4
.text$mn:000060C4 ; Attributes: bp-based frame
.text$mn:000060C4
.text$mn:000060C4 ; public: __thiscall std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::~_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>(void)
.text$mn:000060C4                 public ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:000060C4 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:000060C4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+F5p
.text$mn:000060C4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+101p ...
.text$mn:000060C4
.text$mn:000060C4 var_10          = dword ptr -10h
.text$mn:000060C4 var_C           = dword ptr -0Ch
.text$mn:000060C4 var_4           = dword ptr -4
.text$mn:000060C4
.text$mn:000060C4                 push    ebp
.text$mn:000060C5                 mov     ebp, esp
.text$mn:000060C7                 push    0FFFFFFFFh
.text$mn:000060C9                 push    offset __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:000060CE                 mov     eax, large fs:0
.text$mn:000060D4                 push    eax
.text$mn:000060D5                 push    ecx
.text$mn:000060D6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000060DB                 xor     eax, ebp
.text$mn:000060DD                 push    eax
.text$mn:000060DE                 lea     eax, [ebp+var_C]
.text$mn:000060E1                 mov     large fs:0, eax
.text$mn:000060E7                 mov     [ebp+var_10], ecx
.text$mn:000060EA                 mov     [ebp+var_4], 0
.text$mn:000060F1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000060F8                 mov     ecx, [ebp+var_10]
.text$mn:000060FB                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00006100                 mov     ecx, [ebp+var_C]
.text$mn:00006103                 mov     large fs:0, ecx
.text$mn:0000610A                 pop     ecx
.text$mn:0000610B                 mov     esp, ebp
.text$mn:0000610D                 pop     ebp
.text$mn:0000610E                 retn
.text$mn:0000610E ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:0000610E
.text$mn:0000610E ; ---------------------------------------------------------------------------
.text$mn:0000610F                 align 10h
.text$mn:0000610F _text$mn        ends
.text$mn:0000610F
.text$x:00006110 ; ===========================================================================
.text$x:00006110
.text$x:00006110 ; Segment type: Pure code
.text$x:00006110 ; Segment permissions: Read/Execute
.text$x:00006110 _text$x         segment para public 'CODE' use32
.text$x:00006110                 assume cs:_text$x
.text$x:00006110                 ;org 6110h
.text$x:00006110 ; COMDAT (pick associative to section at 60C4)
.text$x:00006110                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006110
.text$x:00006110 ; =============== S U B R O U T I N E =======================================
.text$x:00006110
.text$x:00006110
.text$x:00006110 __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00006110                                         ; DATA XREF: .xdata$x:0000BEE4o
.text$x:00006110                 mov     ecx, [ebp-10h]
.text$x:00006113                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00006113 __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00006113
.text$x:00006118
.text$x:00006118 ; =============== S U B R O U T I N E =======================================
.text$x:00006118
.text$x:00006118
.text$x:00006118 __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:00006118                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)+5o
.text$x:00006118
.text$x:00006118 arg_4           = dword ptr  8
.text$x:00006118
.text$x:00006118                 mov     edx, [esp+arg_4]
.text$x:0000611C                 lea     eax, [edx+0Ch]
.text$x:0000611F                 mov     ecx, [edx-8]
.text$x:00006122                 xor     ecx, eax
.text$x:00006124                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006129                 mov     eax, offset __ehfuncinfo$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$x:0000612E                 jmp     ___CxxFrameHandler3
.text$x:0000612E __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:0000612E
.text$x:0000612E ; ---------------------------------------------------------------------------
.text$x:00006133                 align 4
.text$x:00006133 _text$x         ends
.text$x:00006133
.text$mn:00006134 ; ===========================================================================
.text$mn:00006134
.text$mn:00006134 ; Segment type: Pure code
.text$mn:00006134 ; Segment permissions: Read/Execute
.text$mn:00006134 _text$mn        segment para public 'CODE' use32
.text$mn:00006134                 assume cs:_text$mn
.text$mn:00006134                 ;org 6134h
.text$mn:00006134 ; COMDAT (pick any)
.text$mn:00006134                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006134
.text$mn:00006134 ; =============== S U B R O U T I N E =======================================
.text$mn:00006134
.text$mn:00006134 ; Attributes: bp-based frame
.text$mn:00006134
.text$mn:00006134 ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::~_String_val<struct std::_Simple_types<char>>(void)
.text$mn:00006134                 public ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00006134 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:00006134                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0+3j
.text$mn:00006134                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+3Fp ...
.text$mn:00006134
.text$mn:00006134 var_10          = dword ptr -10h
.text$mn:00006134 var_C           = dword ptr -0Ch
.text$mn:00006134 var_4           = dword ptr -4
.text$mn:00006134
.text$mn:00006134                 push    ebp
.text$mn:00006135                 mov     ebp, esp
.text$mn:00006137                 push    0FFFFFFFFh
.text$mn:00006139                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:0000613E                 mov     eax, large fs:0
.text$mn:00006144                 push    eax
.text$mn:00006145                 push    ecx
.text$mn:00006146                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000614B                 xor     eax, ebp
.text$mn:0000614D                 push    eax
.text$mn:0000614E                 lea     eax, [ebp+var_C]
.text$mn:00006151                 mov     large fs:0, eax
.text$mn:00006157                 mov     [ebp+var_10], ecx
.text$mn:0000615A                 mov     [ebp+var_4], 0
.text$mn:00006161                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006168                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000616B                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00006170                 mov     ecx, [ebp+var_C]
.text$mn:00006173                 mov     large fs:0, ecx
.text$mn:0000617A                 pop     ecx
.text$mn:0000617B                 mov     esp, ebp
.text$mn:0000617D                 pop     ebp
.text$mn:0000617E                 retn
.text$mn:0000617E ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:0000617E
.text$mn:0000617E ; ---------------------------------------------------------------------------
.text$mn:0000617F                 align 10h
.text$mn:0000617F _text$mn        ends
.text$mn:0000617F
.text$x:00006180 ; ===========================================================================
.text$x:00006180
.text$x:00006180 ; Segment type: Pure code
.text$x:00006180 ; Segment permissions: Read/Execute
.text$x:00006180 _text$x         segment para public 'CODE' use32
.text$x:00006180                 assume cs:_text$x
.text$x:00006180                 ;org 6180h
.text$x:00006180 ; COMDAT (pick associative to section at 6134)
.text$x:00006180                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006180
.text$x:00006180 ; =============== S U B R O U T I N E =======================================
.text$x:00006180
.text$x:00006180
.text$x:00006180 __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:00006180                                         ; DATA XREF: .xdata$x:0000B0F8o
.text$x:00006180                 mov     ecx, [ebp-10h]  ; this
.text$x:00006183                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00006183 __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:00006183
.text$x:00006188
.text$x:00006188 ; =============== S U B R O U T I N E =======================================
.text$x:00006188
.text$x:00006188
.text$x:00006188 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:00006188                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)+5o
.text$x:00006188
.text$x:00006188 arg_4           = dword ptr  8
.text$x:00006188
.text$x:00006188                 mov     edx, [esp+arg_4]
.text$x:0000618C                 lea     eax, [edx+0Ch]
.text$x:0000618F                 mov     ecx, [edx-8]
.text$x:00006192                 xor     ecx, eax
.text$x:00006194                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006199                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:0000619E                 jmp     ___CxxFrameHandler3
.text$x:0000619E __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:0000619E
.text$x:0000619E ; ---------------------------------------------------------------------------
.text$x:000061A3                 align 4
.text$x:000061A3 _text$x         ends
.text$x:000061A3
.text$mn:000061A4 ; ===========================================================================
.text$mn:000061A4
.text$mn:000061A4 ; Segment type: Pure code
.text$mn:000061A4 ; Segment permissions: Read/Execute
.text$mn:000061A4 _text$mn        segment para public 'CODE' use32
.text$mn:000061A4                 assume cs:_text$mn
.text$mn:000061A4                 ;org 61A4h
.text$mn:000061A4 ; COMDAT (pick any)
.text$mn:000061A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000061A4
.text$mn:000061A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000061A4
.text$mn:000061A4 ; Attributes: bp-based frame
.text$mn:000061A4
.text$mn:000061A4 ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::~_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:000061A4                 public ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000061A4 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:000061A4                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0+3j
.text$mn:000061A4                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+3Fp ...
.text$mn:000061A4
.text$mn:000061A4 var_10          = dword ptr -10h
.text$mn:000061A4 var_C           = dword ptr -0Ch
.text$mn:000061A4 var_4           = dword ptr -4
.text$mn:000061A4
.text$mn:000061A4                 push    ebp
.text$mn:000061A5                 mov     ebp, esp
.text$mn:000061A7                 push    0FFFFFFFFh
.text$mn:000061A9                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000061AE                 mov     eax, large fs:0
.text$mn:000061B4                 push    eax
.text$mn:000061B5                 push    ecx
.text$mn:000061B6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000061BB                 xor     eax, ebp
.text$mn:000061BD                 push    eax
.text$mn:000061BE                 lea     eax, [ebp+var_C]
.text$mn:000061C1                 mov     large fs:0, eax
.text$mn:000061C7                 mov     [ebp+var_10], ecx
.text$mn:000061CA                 mov     [ebp+var_4], 0
.text$mn:000061D1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000061D8                 mov     ecx, [ebp+var_10] ; this
.text$mn:000061DB                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:000061E0                 mov     ecx, [ebp+var_C]
.text$mn:000061E3                 mov     large fs:0, ecx
.text$mn:000061EA                 pop     ecx
.text$mn:000061EB                 mov     esp, ebp
.text$mn:000061ED                 pop     ebp
.text$mn:000061EE                 retn
.text$mn:000061EE ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:000061EE
.text$mn:000061EE ; ---------------------------------------------------------------------------
.text$mn:000061EF                 align 10h
.text$mn:000061EF _text$mn        ends
.text$mn:000061EF
.text$x:000061F0 ; ===========================================================================
.text$x:000061F0
.text$x:000061F0 ; Segment type: Pure code
.text$x:000061F0 ; Segment permissions: Read/Execute
.text$x:000061F0 _text$x         segment para public 'CODE' use32
.text$x:000061F0                 assume cs:_text$x
.text$x:000061F0                 ;org 61F0h
.text$x:000061F0 ; COMDAT (pick associative to section at 61A4)
.text$x:000061F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000061F0
.text$x:000061F0 ; =============== S U B R O U T I N E =======================================
.text$x:000061F0
.text$x:000061F0
.text$x:000061F0 __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:000061F0                                         ; DATA XREF: .xdata$x:0000B444o
.text$x:000061F0                 mov     ecx, [ebp-10h]  ; this
.text$x:000061F3                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:000061F3 __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:000061F3
.text$x:000061F8
.text$x:000061F8 ; =============== S U B R O U T I N E =======================================
.text$x:000061F8
.text$x:000061F8
.text$x:000061F8 __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:000061F8                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:000061F8
.text$x:000061F8 arg_4           = dword ptr  8
.text$x:000061F8
.text$x:000061F8                 mov     edx, [esp+arg_4]
.text$x:000061FC                 lea     eax, [edx+0Ch]
.text$x:000061FF                 mov     ecx, [edx-8]
.text$x:00006202                 xor     ecx, eax
.text$x:00006204                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006209                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:0000620E                 jmp     ___CxxFrameHandler3
.text$x:0000620E __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:0000620E
.text$x:0000620E ; ---------------------------------------------------------------------------
.text$x:00006213                 align 4
.text$x:00006213 _text$x         ends
.text$x:00006213
.text$mn:00006214 ; ===========================================================================
.text$mn:00006214
.text$mn:00006214 ; Segment type: Pure code
.text$mn:00006214 ; Segment permissions: Read/Execute
.text$mn:00006214 _text$mn        segment para public 'CODE' use32
.text$mn:00006214                 assume cs:_text$mn
.text$mn:00006214                 ;org 6214h
.text$mn:00006214 ; COMDAT (pick any)
.text$mn:00006214                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006214
.text$mn:00006214 ; =============== S U B R O U T I N E =======================================
.text$mn:00006214
.text$mn:00006214 ; Attributes: bp-based frame
.text$mn:00006214
.text$mn:00006214 ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<wchar_t const *, class std::allocator<wchar_t const *>>>::~_Vector_alloc<0, struct std::_Vec_base_types<wchar_t const *, class std::allocator<wchar_t const *>>>(void)
.text$mn:00006214                 public ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@XZ
.text$mn:00006214 ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00006214                                         ; CODE XREF: __unwindfunclet$??0?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ$0+3j
.text$mn:00006214                                         ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::~vector<wchar_t const *,std::allocator<wchar_t const *>>(void)+3Fp ...
.text$mn:00006214
.text$mn:00006214 var_10          = dword ptr -10h
.text$mn:00006214 var_C           = dword ptr -0Ch
.text$mn:00006214 var_4           = dword ptr -4
.text$mn:00006214
.text$mn:00006214                 push    ebp
.text$mn:00006215                 mov     ebp, esp
.text$mn:00006217                 push    0FFFFFFFFh
.text$mn:00006219                 push    offset __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@XZ
.text$mn:0000621E                 mov     eax, large fs:0
.text$mn:00006224                 push    eax
.text$mn:00006225                 push    ecx
.text$mn:00006226                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000622B                 xor     eax, ebp
.text$mn:0000622D                 push    eax
.text$mn:0000622E                 lea     eax, [ebp+var_C]
.text$mn:00006231                 mov     large fs:0, eax
.text$mn:00006237                 mov     [ebp+var_10], ecx
.text$mn:0000623A                 mov     [ebp+var_4], 0
.text$mn:00006241                 mov     ecx, [ebp+var_10]
.text$mn:00006244                 call    ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Free_proxy(void)
.text$mn:00006249                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006250                 mov     ecx, [ebp+var_10]
.text$mn:00006253                 call    ??1?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<wchar_t const *>>::~_Vector_val<std::_Simple_types<wchar_t const *>>(void)
.text$mn:00006258                 mov     ecx, [ebp+var_C]
.text$mn:0000625B                 mov     large fs:0, ecx
.text$mn:00006262                 pop     ecx
.text$mn:00006263                 mov     esp, ebp
.text$mn:00006265                 pop     ebp
.text$mn:00006266                 retn
.text$mn:00006266 ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:00006266
.text$mn:00006266 ; ---------------------------------------------------------------------------
.text$mn:00006267                 align 4
.text$mn:00006267 _text$mn        ends
.text$mn:00006267
.text$x:00006268 ; ===========================================================================
.text$x:00006268
.text$x:00006268 ; Segment type: Pure code
.text$x:00006268 ; Segment permissions: Read/Execute
.text$x:00006268 _text$x         segment para public 'CODE' use32
.text$x:00006268                 assume cs:_text$x
.text$x:00006268                 ;org 6268h
.text$x:00006268 ; COMDAT (pick associative to section at 6214)
.text$x:00006268                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006268
.text$x:00006268 ; =============== S U B R O U T I N E =======================================
.text$x:00006268
.text$x:00006268
.text$x:00006268 __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00006268                                         ; DATA XREF: .xdata$x:0000B940o
.text$x:00006268                 mov     ecx, [ebp-10h]
.text$x:0000626B                 jmp     ??1?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<wchar_t const *>>::~_Vector_val<std::_Simple_types<wchar_t const *>>(void)
.text$x:0000626B __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:0000626B
.text$x:00006270
.text$x:00006270 ; =============== S U B R O U T I N E =======================================
.text$x:00006270
.text$x:00006270
.text$x:00006270 __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:00006270                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::~_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>(void)+5o
.text$x:00006270
.text$x:00006270 arg_4           = dword ptr  8
.text$x:00006270
.text$x:00006270                 mov     edx, [esp+arg_4]
.text$x:00006274                 lea     eax, [edx+0Ch]
.text$x:00006277                 mov     ecx, [edx-8]
.text$x:0000627A                 xor     ecx, eax
.text$x:0000627C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006281                 mov     eax, offset __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@XZ
.text$x:00006286                 jmp     ___CxxFrameHandler3
.text$x:00006286 __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@XZ endp
.text$x:00006286
.text$x:00006286 ; ---------------------------------------------------------------------------
.text$x:0000628B                 align 4
.text$x:0000628B _text$x         ends
.text$x:0000628B
.text$mn:0000628C ; ===========================================================================
.text$mn:0000628C
.text$mn:0000628C ; Segment type: Pure code
.text$mn:0000628C ; Segment permissions: Read/Execute
.text$mn:0000628C _text$mn        segment para public 'CODE' use32
.text$mn:0000628C                 assume cs:_text$mn
.text$mn:0000628C                 ;org 628Ch
.text$mn:0000628C ; COMDAT (pick any)
.text$mn:0000628C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000628C
.text$mn:0000628C ; =============== S U B R O U T I N E =======================================
.text$mn:0000628C
.text$mn:0000628C ; Attributes: bp-based frame
.text$mn:0000628C
.text$mn:0000628C ; public: __thiscall std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<wchar_t const *>>>::~_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<wchar_t const *>>>(void)
.text$mn:0000628C                 public ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ
.text$mn:0000628C ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:0000628C                                         ; CODE XREF: __unwindfunclet$?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z$2+3j
.text$mn:0000628C                                         ; __unwindfunclet$?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$2+3j ...
.text$mn:0000628C
.text$mn:0000628C var_10          = dword ptr -10h
.text$mn:0000628C var_C           = dword ptr -0Ch
.text$mn:0000628C var_4           = dword ptr -4
.text$mn:0000628C
.text$mn:0000628C                 push    ebp
.text$mn:0000628D                 mov     ebp, esp
.text$mn:0000628F                 push    0FFFFFFFFh
.text$mn:00006291                 push    offset __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ
.text$mn:00006296                 mov     eax, large fs:0
.text$mn:0000629C                 push    eax
.text$mn:0000629D                 push    ecx
.text$mn:0000629E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000062A3                 xor     eax, ebp
.text$mn:000062A5                 push    eax
.text$mn:000062A6                 lea     eax, [ebp+var_C]
.text$mn:000062A9                 mov     large fs:0, eax
.text$mn:000062AF                 mov     [ebp+var_10], ecx
.text$mn:000062B2                 mov     [ebp+var_4], 0
.text$mn:000062B9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000062C0                 mov     ecx, [ebp+var_10]
.text$mn:000062C3                 call    ??1?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>(void)
.text$mn:000062C8                 mov     ecx, [ebp+var_C]
.text$mn:000062CB                 mov     large fs:0, ecx
.text$mn:000062D2                 pop     ecx
.text$mn:000062D3                 mov     esp, ebp
.text$mn:000062D5                 pop     ebp
.text$mn:000062D6                 retn
.text$mn:000062D6 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:000062D6
.text$mn:000062D6 ; ---------------------------------------------------------------------------
.text$mn:000062D7                 align 4
.text$mn:000062D7 _text$mn        ends
.text$mn:000062D7
.text$x:000062D8 ; ===========================================================================
.text$x:000062D8
.text$x:000062D8 ; Segment type: Pure code
.text$x:000062D8 ; Segment permissions: Read/Execute
.text$x:000062D8 _text$x         segment para public 'CODE' use32
.text$x:000062D8                 assume cs:_text$x
.text$x:000062D8                 ;org 62D8h
.text$x:000062D8 ; COMDAT (pick associative to section at 628C)
.text$x:000062D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000062D8
.text$x:000062D8 ; =============== S U B R O U T I N E =======================================
.text$x:000062D8
.text$x:000062D8
.text$x:000062D8 __unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:000062D8                                         ; DATA XREF: .xdata$x:0000BC40o
.text$x:000062D8                 mov     ecx, [ebp-10h]
.text$x:000062DB                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t const *,int,wchar_t const * const *,wchar_t const * const &,std::_Iterator_base12>(void)
.text$x:000062DB __unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:000062DB
.text$x:000062E0
.text$x:000062E0 ; =============== S U B R O U T I N E =======================================
.text$x:000062E0
.text$x:000062E0
.text$x:000062E0 __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:000062E0                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)+5o
.text$x:000062E0
.text$x:000062E0 arg_4           = dword ptr  8
.text$x:000062E0
.text$x:000062E0                 mov     edx, [esp+arg_4]
.text$x:000062E4                 lea     eax, [edx+0Ch]
.text$x:000062E7                 mov     ecx, [edx-8]
.text$x:000062EA                 xor     ecx, eax
.text$x:000062EC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000062F1                 mov     eax, offset __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ
.text$x:000062F6                 jmp     ___CxxFrameHandler3
.text$x:000062F6 __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ endp
.text$x:000062F6
.text$x:000062F6 ; ---------------------------------------------------------------------------
.text$x:000062FB                 align 4
.text$x:000062FB _text$x         ends
.text$x:000062FB
.text$mn:000062FC ; ===========================================================================
.text$mn:000062FC
.text$mn:000062FC ; Segment type: Pure code
.text$mn:000062FC ; Segment permissions: Read/Execute
.text$mn:000062FC _text$mn        segment para public 'CODE' use32
.text$mn:000062FC                 assume cs:_text$mn
.text$mn:000062FC                 ;org 62FCh
.text$mn:000062FC ; COMDAT (pick any)
.text$mn:000062FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000062FC
.text$mn:000062FC ; =============== S U B R O U T I N E =======================================
.text$mn:000062FC
.text$mn:000062FC ; Attributes: bp-based frame
.text$mn:000062FC
.text$mn:000062FC ; public: __thiscall std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<wchar_t const *>>>(void)
.text$mn:000062FC                 public ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ
.text$mn:000062FC ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:000062FC                                         ; CODE XREF: isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+DCp
.text$mn:000062FC                                         ; isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+E8p ...
.text$mn:000062FC
.text$mn:000062FC var_10          = dword ptr -10h
.text$mn:000062FC var_C           = dword ptr -0Ch
.text$mn:000062FC var_4           = dword ptr -4
.text$mn:000062FC
.text$mn:000062FC                 push    ebp
.text$mn:000062FD                 mov     ebp, esp
.text$mn:000062FF                 push    0FFFFFFFFh
.text$mn:00006301                 push    offset __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ
.text$mn:00006306                 mov     eax, large fs:0
.text$mn:0000630C                 push    eax
.text$mn:0000630D                 push    ecx
.text$mn:0000630E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006313                 xor     eax, ebp
.text$mn:00006315                 push    eax
.text$mn:00006316                 lea     eax, [ebp+var_C]
.text$mn:00006319                 mov     large fs:0, eax
.text$mn:0000631F                 mov     [ebp+var_10], ecx
.text$mn:00006322                 mov     [ebp+var_4], 0
.text$mn:00006329                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006330                 mov     ecx, [ebp+var_10]
.text$mn:00006333                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$mn:00006338                 mov     ecx, [ebp+var_C]
.text$mn:0000633B                 mov     large fs:0, ecx
.text$mn:00006342                 pop     ecx
.text$mn:00006343                 mov     esp, ebp
.text$mn:00006345                 pop     ebp
.text$mn:00006346                 retn
.text$mn:00006346 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:00006346
.text$mn:00006346 ; ---------------------------------------------------------------------------
.text$mn:00006347                 align 4
.text$mn:00006347 _text$mn        ends
.text$mn:00006347
.text$x:00006348 ; ===========================================================================
.text$x:00006348
.text$x:00006348 ; Segment type: Pure code
.text$x:00006348 ; Segment permissions: Read/Execute
.text$x:00006348 _text$x         segment para public 'CODE' use32
.text$x:00006348                 assume cs:_text$x
.text$x:00006348                 ;org 6348h
.text$x:00006348 ; COMDAT (pick associative to section at 62FC)
.text$x:00006348                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006348
.text$x:00006348 ; =============== S U B R O U T I N E =======================================
.text$x:00006348
.text$x:00006348
.text$x:00006348 __unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00006348                                         ; DATA XREF: .xdata$x:0000BCF8o
.text$x:00006348                 mov     ecx, [ebp-10h]
.text$x:0000634B                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$x:0000634B __unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:0000634B
.text$x:00006350
.text$x:00006350 ; =============== S U B R O U T I N E =======================================
.text$x:00006350
.text$x:00006350
.text$x:00006350 __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:00006350                                         ; DATA XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)+5o
.text$x:00006350
.text$x:00006350 arg_4           = dword ptr  8
.text$x:00006350
.text$x:00006350                 mov     edx, [esp+arg_4]
.text$x:00006354                 lea     eax, [edx+0Ch]
.text$x:00006357                 mov     ecx, [edx-8]
.text$x:0000635A                 xor     ecx, eax
.text$x:0000635C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006361                 mov     eax, offset __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ
.text$x:00006366                 jmp     ___CxxFrameHandler3
.text$x:00006366 __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ endp
.text$x:00006366
.text$x:00006366 ; ---------------------------------------------------------------------------
.text$x:0000636B                 align 4
.text$x:0000636B _text$x         ends
.text$x:0000636B
.text$mn:0000636C ; ===========================================================================
.text$mn:0000636C
.text$mn:0000636C ; Segment type: Pure code
.text$mn:0000636C ; Segment permissions: Read/Execute
.text$mn:0000636C _text$mn        segment para public 'CODE' use32
.text$mn:0000636C                 assume cs:_text$mn
.text$mn:0000636C                 ;org 636Ch
.text$mn:0000636C ; COMDAT (pick any)
.text$mn:0000636C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000636C
.text$mn:0000636C ; =============== S U B R O U T I N E =======================================
.text$mn:0000636C
.text$mn:0000636C ; Attributes: bp-based frame
.text$mn:0000636C
.text$mn:0000636C ; public: __thiscall std::_Vector_val<struct std::_Simple_types<wchar_t const *>>::~_Vector_val<struct std::_Simple_types<wchar_t const *>>(void)
.text$mn:0000636C                 public ??1?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ
.text$mn:0000636C ??1?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ proc near
.text$mn:0000636C                                         ; CODE XREF: __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@ABV?$allocator@PB_W@1@@Z$0+3j
.text$mn:0000636C                                         ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::~_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>(void)+3Fp ...
.text$mn:0000636C
.text$mn:0000636C var_10          = dword ptr -10h
.text$mn:0000636C var_C           = dword ptr -0Ch
.text$mn:0000636C var_4           = dword ptr -4
.text$mn:0000636C
.text$mn:0000636C                 push    ebp
.text$mn:0000636D                 mov     ebp, esp
.text$mn:0000636F                 push    0FFFFFFFFh
.text$mn:00006371                 push    offset __ehhandler$??1?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ
.text$mn:00006376                 mov     eax, large fs:0
.text$mn:0000637C                 push    eax
.text$mn:0000637D                 push    ecx
.text$mn:0000637E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006383                 xor     eax, ebp
.text$mn:00006385                 push    eax
.text$mn:00006386                 lea     eax, [ebp+var_C]
.text$mn:00006389                 mov     large fs:0, eax
.text$mn:0000638F                 mov     [ebp+var_10], ecx
.text$mn:00006392                 mov     [ebp+var_4], 0
.text$mn:00006399                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000063A0                 mov     ecx, [ebp+var_10] ; this
.text$mn:000063A3                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:000063A8                 mov     ecx, [ebp+var_C]
.text$mn:000063AB                 mov     large fs:0, ecx
.text$mn:000063B2                 pop     ecx
.text$mn:000063B3                 mov     esp, ebp
.text$mn:000063B5                 pop     ebp
.text$mn:000063B6                 retn
.text$mn:000063B6 ??1?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ endp
.text$mn:000063B6
.text$mn:000063B6 ; ---------------------------------------------------------------------------
.text$mn:000063B7                 align 4
.text$mn:000063B7 _text$mn        ends
.text$mn:000063B7
.text$x:000063B8 ; ===========================================================================
.text$x:000063B8
.text$x:000063B8 ; Segment type: Pure code
.text$x:000063B8 ; Segment permissions: Read/Execute
.text$x:000063B8 _text$x         segment para public 'CODE' use32
.text$x:000063B8                 assume cs:_text$x
.text$x:000063B8                 ;org 63B8h
.text$x:000063B8 ; COMDAT (pick associative to section at 636C)
.text$x:000063B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000063B8
.text$x:000063B8 ; =============== S U B R O U T I N E =======================================
.text$x:000063B8
.text$x:000063B8
.text$x:000063B8 __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ$0 proc near
.text$x:000063B8                                         ; DATA XREF: .xdata$x:0000B8E8o
.text$x:000063B8                 mov     ecx, [ebp-10h]  ; this
.text$x:000063BB                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:000063BB __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ$0 endp
.text$x:000063BB
.text$x:000063C0
.text$x:000063C0 ; =============== S U B R O U T I N E =======================================
.text$x:000063C0
.text$x:000063C0
.text$x:000063C0 __ehhandler$??1?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ proc near
.text$x:000063C0                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<wchar_t const *>>::~_Vector_val<std::_Simple_types<wchar_t const *>>(void)+5o
.text$x:000063C0
.text$x:000063C0 arg_4           = dword ptr  8
.text$x:000063C0
.text$x:000063C0                 mov     edx, [esp+arg_4]
.text$x:000063C4                 lea     eax, [edx+0Ch]
.text$x:000063C7                 mov     ecx, [edx-8]
.text$x:000063CA                 xor     ecx, eax
.text$x:000063CC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000063D1                 mov     eax, offset __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ
.text$x:000063D6                 jmp     ___CxxFrameHandler3
.text$x:000063D6 __ehhandler$??1?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ endp
.text$x:000063D6
.text$x:000063D6 ; ---------------------------------------------------------------------------
.text$x:000063DB                 align 4
.text$x:000063DB _text$x         ends
.text$x:000063DB
.text$mn:000063DC ; ===========================================================================
.text$mn:000063DC
.text$mn:000063DC ; Segment type: Pure code
.text$mn:000063DC ; Segment permissions: Read/Execute
.text$mn:000063DC _text$mn        segment para public 'CODE' use32
.text$mn:000063DC                 assume cs:_text$mn
.text$mn:000063DC                 ;org 63DCh
.text$mn:000063DC ; COMDAT (pick any)
.text$mn:000063DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000063DC
.text$mn:000063DC ; =============== S U B R O U T I N E =======================================
.text$mn:000063DC
.text$mn:000063DC ; Attributes: bp-based frame
.text$mn:000063DC
.text$mn:000063DC ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::~basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
.text$mn:000063DC                 public ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:000063DC ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$mn:000063DC                                         ; CODE XREF: __unwindfunclet$??0Notepad_plus_Window@@QAE@XZ$2+9j
.text$mn:000063DC                                         ; Notepad_plus_Window::~Notepad_plus_Window(void)+3Ap ...
.text$mn:000063DC
.text$mn:000063DC var_10          = dword ptr -10h
.text$mn:000063DC var_C           = dword ptr -0Ch
.text$mn:000063DC var_4           = dword ptr -4
.text$mn:000063DC
.text$mn:000063DC                 push    ebp
.text$mn:000063DD                 mov     ebp, esp
.text$mn:000063DF                 push    0FFFFFFFFh
.text$mn:000063E1                 push    offset __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:000063E6                 mov     eax, large fs:0
.text$mn:000063EC                 push    eax
.text$mn:000063ED                 push    ecx
.text$mn:000063EE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000063F3                 xor     eax, ebp
.text$mn:000063F5                 push    eax
.text$mn:000063F6                 lea     eax, [ebp+var_C]
.text$mn:000063F9                 mov     large fs:0, eax
.text$mn:000063FF                 mov     [ebp+var_10], ecx
.text$mn:00006402                 mov     [ebp+var_4], 0
.text$mn:00006409                 push    0               ; Size
.text$mn:0000640B                 push    1               ; char
.text$mn:0000640D                 mov     ecx, [ebp+var_10]
.text$mn:00006410                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00006415                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000641C                 mov     ecx, [ebp+var_10]
.text$mn:0000641F                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$mn:00006424                 mov     ecx, [ebp+var_C]
.text$mn:00006427                 mov     large fs:0, ecx
.text$mn:0000642E                 pop     ecx
.text$mn:0000642F                 mov     esp, ebp
.text$mn:00006431                 pop     ebp
.text$mn:00006432                 retn
.text$mn:00006432 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$mn:00006432
.text$mn:00006432 ; ---------------------------------------------------------------------------
.text$mn:00006433                 align 4
.text$mn:00006433 _text$mn        ends
.text$mn:00006433
.text$x:00006434 ; ===========================================================================
.text$x:00006434
.text$x:00006434 ; Segment type: Pure code
.text$x:00006434 ; Segment permissions: Read/Execute
.text$x:00006434 _text$x         segment para public 'CODE' use32
.text$x:00006434                 assume cs:_text$x
.text$x:00006434                 ;org 6434h
.text$x:00006434 ; COMDAT (pick associative to section at 63DC)
.text$x:00006434                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006434
.text$x:00006434 ; =============== S U B R O U T I N E =======================================
.text$x:00006434
.text$x:00006434
.text$x:00006434 __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
.text$x:00006434                                         ; DATA XREF: .xdata$x:0000B1D4o
.text$x:00006434                 mov     ecx, [ebp-10h]
.text$x:00006437                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:00006437 __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 endp
.text$x:00006437
.text$x:0000643C
.text$x:0000643C ; =============== S U B R O U T I N E =======================================
.text$x:0000643C
.text$x:0000643C
.text$x:0000643C __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$x:0000643C                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+5o
.text$x:0000643C
.text$x:0000643C arg_4           = dword ptr  8
.text$x:0000643C
.text$x:0000643C                 mov     edx, [esp+arg_4]
.text$x:00006440                 lea     eax, [edx+0Ch]
.text$x:00006443                 mov     ecx, [edx-8]
.text$x:00006446                 xor     ecx, eax
.text$x:00006448                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000644D                 mov     eax, offset __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$x:00006452                 jmp     ___CxxFrameHandler3
.text$x:00006452 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$x:00006452
.text$x:00006452 ; ---------------------------------------------------------------------------
.text$x:00006457                 align 4
.text$x:00006457 _text$x         ends
.text$x:00006457
.text$mn:00006458 ; ===========================================================================
.text$mn:00006458
.text$mn:00006458 ; Segment type: Pure code
.text$mn:00006458 ; Segment permissions: Read/Execute
.text$mn:00006458 _text$mn        segment para public 'CODE' use32
.text$mn:00006458                 assume cs:_text$mn
.text$mn:00006458                 ;org 6458h
.text$mn:00006458 ; COMDAT (pick any)
.text$mn:00006458                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006458
.text$mn:00006458 ; =============== S U B R O U T I N E =======================================
.text$mn:00006458
.text$mn:00006458 ; Attributes: bp-based frame
.text$mn:00006458
.text$mn:00006458 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::~basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:00006458                 public ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00006458 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:00006458                                         ; CODE XREF: WinMain(x,x,x,x)+231p
.text$mn:00006458                                         ; WinMain(x,x,x,x)+2FDp ...
.text$mn:00006458
.text$mn:00006458 var_10          = dword ptr -10h
.text$mn:00006458 var_C           = dword ptr -0Ch
.text$mn:00006458 var_4           = dword ptr -4
.text$mn:00006458
.text$mn:00006458                 push    ebp
.text$mn:00006459                 mov     ebp, esp
.text$mn:0000645B                 push    0FFFFFFFFh
.text$mn:0000645D                 push    offset __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00006462                 mov     eax, large fs:0
.text$mn:00006468                 push    eax
.text$mn:00006469                 push    ecx
.text$mn:0000646A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000646F                 xor     eax, ebp
.text$mn:00006471                 push    eax
.text$mn:00006472                 lea     eax, [ebp+var_C]
.text$mn:00006475                 mov     large fs:0, eax
.text$mn:0000647B                 mov     [ebp+var_10], ecx
.text$mn:0000647E                 mov     [ebp+var_4], 0
.text$mn:00006485                 push    0
.text$mn:00006487                 push    1
.text$mn:00006489                 mov     ecx, [ebp+var_10]
.text$mn:0000648C                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00006491                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006498                 mov     ecx, [ebp+var_10]
.text$mn:0000649B                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$mn:000064A0                 mov     ecx, [ebp+var_C]
.text$mn:000064A3                 mov     large fs:0, ecx
.text$mn:000064AA                 pop     ecx
.text$mn:000064AB                 mov     esp, ebp
.text$mn:000064AD                 pop     ebp
.text$mn:000064AE                 retn
.text$mn:000064AE ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:000064AE
.text$mn:000064AE ; ---------------------------------------------------------------------------
.text$mn:000064AF                 align 10h
.text$mn:000064AF _text$mn        ends
.text$mn:000064AF
.text$x:000064B0 ; ===========================================================================
.text$x:000064B0
.text$x:000064B0 ; Segment type: Pure code
.text$x:000064B0 ; Segment permissions: Read/Execute
.text$x:000064B0 _text$x         segment para public 'CODE' use32
.text$x:000064B0                 assume cs:_text$x
.text$x:000064B0                 ;org 64B0h
.text$x:000064B0 ; COMDAT (pick associative to section at 6458)
.text$x:000064B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000064B0
.text$x:000064B0 ; =============== S U B R O U T I N E =======================================
.text$x:000064B0
.text$x:000064B0
.text$x:000064B0 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:000064B0                                         ; DATA XREF: .xdata$x:0000B5ACo
.text$x:000064B0                 mov     ecx, [ebp-10h]
.text$x:000064B3                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:000064B3 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:000064B3
.text$x:000064B8
.text$x:000064B8 ; =============== S U B R O U T I N E =======================================
.text$x:000064B8
.text$x:000064B8
.text$x:000064B8 __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:000064B8                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:000064B8
.text$x:000064B8 arg_4           = dword ptr  8
.text$x:000064B8
.text$x:000064B8                 mov     edx, [esp+arg_4]
.text$x:000064BC                 lea     eax, [edx+0Ch]
.text$x:000064BF                 mov     ecx, [edx-8]
.text$x:000064C2                 xor     ecx, eax
.text$x:000064C4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000064C9                 mov     eax, offset __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:000064CE                 jmp     ___CxxFrameHandler3
.text$x:000064CE __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:000064CE
.text$x:000064CE ; ---------------------------------------------------------------------------
.text$x:000064D3                 align 4
.text$x:000064D3 _text$x         ends
.text$x:000064D3
.text$mn:000064D4 ; ===========================================================================
.text$mn:000064D4
.text$mn:000064D4 ; Segment type: Pure code
.text$mn:000064D4 ; Segment permissions: Read/Execute
.text$mn:000064D4 _text$mn        segment para public 'CODE' use32
.text$mn:000064D4                 assume cs:_text$mn
.text$mn:000064D4                 ;org 64D4h
.text$mn:000064D4 ; COMDAT (pick any)
.text$mn:000064D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000064D4
.text$mn:000064D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000064D4
.text$mn:000064D4 ; Attributes: bp-based frame
.text$mn:000064D4
.text$mn:000064D4 ; public: __thiscall std::vector<wchar_t const *, class std::allocator<wchar_t const *>>::~vector<wchar_t const *, class std::allocator<wchar_t const *>>(void)
.text$mn:000064D4                 public ??1?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ
.text$mn:000064D4 ??1?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ proc near
.text$mn:000064D4                                         ; CODE XREF: WinMain(x,x,x,x)+705p
.text$mn:000064D4                                         ; $LN74+A6p ...
.text$mn:000064D4
.text$mn:000064D4 var_10          = dword ptr -10h
.text$mn:000064D4 var_C           = dword ptr -0Ch
.text$mn:000064D4 var_4           = dword ptr -4
.text$mn:000064D4
.text$mn:000064D4                 push    ebp
.text$mn:000064D5                 mov     ebp, esp
.text$mn:000064D7                 push    0FFFFFFFFh
.text$mn:000064D9                 push    offset __ehhandler$??1?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ
.text$mn:000064DE                 mov     eax, large fs:0
.text$mn:000064E4                 push    eax
.text$mn:000064E5                 push    ecx
.text$mn:000064E6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000064EB                 xor     eax, ebp
.text$mn:000064ED                 push    eax
.text$mn:000064EE                 lea     eax, [ebp+var_C]
.text$mn:000064F1                 mov     large fs:0, eax
.text$mn:000064F7                 mov     [ebp+var_10], ecx
.text$mn:000064FA                 mov     [ebp+var_4], 0
.text$mn:00006501                 mov     ecx, [ebp+var_10]
.text$mn:00006504                 call    ?_Tidy@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXXZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Tidy(void)
.text$mn:00006509                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006510                 mov     ecx, [ebp+var_10]
.text$mn:00006513                 call    ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::~_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>(void)
.text$mn:00006518                 mov     ecx, [ebp+var_C]
.text$mn:0000651B                 mov     large fs:0, ecx
.text$mn:00006522                 pop     ecx
.text$mn:00006523                 mov     esp, ebp
.text$mn:00006525                 pop     ebp
.text$mn:00006526                 retn
.text$mn:00006526 ??1?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ endp
.text$mn:00006526
.text$mn:00006526 ; ---------------------------------------------------------------------------
.text$mn:00006527                 align 4
.text$mn:00006527 _text$mn        ends
.text$mn:00006527
.text$x:00006528 ; ===========================================================================
.text$x:00006528
.text$x:00006528 ; Segment type: Pure code
.text$x:00006528 ; Segment permissions: Read/Execute
.text$x:00006528 _text$x         segment para public 'CODE' use32
.text$x:00006528                 assume cs:_text$x
.text$x:00006528                 ;org 6528h
.text$x:00006528 ; COMDAT (pick associative to section at 64D4)
.text$x:00006528                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006528
.text$x:00006528 ; =============== S U B R O U T I N E =======================================
.text$x:00006528
.text$x:00006528
.text$x:00006528 __unwindfunclet$??1?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00006528                                         ; DATA XREF: .xdata$x:0000B998o
.text$x:00006528                 mov     ecx, [ebp-10h]
.text$x:0000652B                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::~_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>(void)
.text$x:0000652B __unwindfunclet$??1?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ$0 endp
.text$x:0000652B
.text$x:00006530
.text$x:00006530 ; =============== S U B R O U T I N E =======================================
.text$x:00006530
.text$x:00006530
.text$x:00006530 __ehhandler$??1?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ proc near
.text$x:00006530                                         ; DATA XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::~vector<wchar_t const *,std::allocator<wchar_t const *>>(void)+5o
.text$x:00006530
.text$x:00006530 arg_4           = dword ptr  8
.text$x:00006530
.text$x:00006530                 mov     edx, [esp+arg_4]
.text$x:00006534                 lea     eax, [edx+0Ch]
.text$x:00006537                 mov     ecx, [edx-8]
.text$x:0000653A                 xor     ecx, eax
.text$x:0000653C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006541                 mov     eax, offset __ehfuncinfo$??1?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ
.text$x:00006546                 jmp     ___CxxFrameHandler3
.text$x:00006546 __ehhandler$??1?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ endp
.text$x:00006546
.text$x:00006546 ; ---------------------------------------------------------------------------
.text$x:0000654B                 align 4
.text$x:0000654B _text$x         ends
.text$x:0000654B
.text$mn:0000654C ; ===========================================================================
.text$mn:0000654C
.text$mn:0000654C ; Segment type: Pure code
.text$mn:0000654C ; Segment permissions: Read/Execute
.text$mn:0000654C _text$mn        segment para public 'CODE' use32
.text$mn:0000654C                 assume cs:_text$mn
.text$mn:0000654C                 ;org 654Ch
.text$mn:0000654C ; COMDAT (pick any)
.text$mn:0000654C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000654C
.text$mn:0000654C ; =============== S U B R O U T I N E =======================================
.text$mn:0000654C
.text$mn:0000654C ; Attributes: bp-based frame
.text$mn:0000654C
.text$mn:0000654C ; _DWORD __thiscall CmdLineParams::~CmdLineParams(CmdLineParams *__hidden this)
.text$mn:0000654C                 public ??1CmdLineParams@@QAE@XZ
.text$mn:0000654C ??1CmdLineParams@@QAE@XZ proc near      ; CODE XREF: WinMain(x,x,x,x)+6F3p
.text$mn:0000654C                                         ; $LN74+94p ...
.text$mn:0000654C
.text$mn:0000654C var_10          = dword ptr -10h
.text$mn:0000654C var_C           = dword ptr -0Ch
.text$mn:0000654C var_4           = dword ptr -4
.text$mn:0000654C
.text$mn:0000654C                 push    ebp
.text$mn:0000654D                 mov     ebp, esp
.text$mn:0000654F                 push    0FFFFFFFFh
.text$mn:00006551                 push    offset __ehhandler$??1CmdLineParams@@QAE@XZ
.text$mn:00006556                 mov     eax, large fs:0
.text$mn:0000655C                 push    eax
.text$mn:0000655D                 push    ecx
.text$mn:0000655E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006563                 xor     eax, ebp
.text$mn:00006565                 push    eax
.text$mn:00006566                 lea     eax, [ebp+var_C]
.text$mn:00006569                 mov     large fs:0, eax
.text$mn:0000656F                 mov     [ebp+var_10], ecx
.text$mn:00006572                 mov     [ebp+var_4], 1
.text$mn:00006579                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000657D                 mov     ecx, [ebp+var_10]
.text$mn:00006580                 add     ecx, 3Ch ; '<'
.text$mn:00006583                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00006588                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000658F                 mov     ecx, [ebp+var_10]
.text$mn:00006592                 add     ecx, 20h ; ' '
.text$mn:00006595                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000659A                 mov     ecx, [ebp+var_C]
.text$mn:0000659D                 mov     large fs:0, ecx
.text$mn:000065A4                 pop     ecx
.text$mn:000065A5                 mov     esp, ebp
.text$mn:000065A7                 pop     ebp
.text$mn:000065A8                 retn
.text$mn:000065A8 ??1CmdLineParams@@QAE@XZ endp
.text$mn:000065A8
.text$mn:000065A8 ; ---------------------------------------------------------------------------
.text$mn:000065A9                 align 4
.text$mn:000065A9 _text$mn        ends
.text$mn:000065A9
.text$x:000065AC ; ===========================================================================
.text$x:000065AC
.text$x:000065AC ; Segment type: Pure code
.text$x:000065AC ; Segment permissions: Read/Execute
.text$x:000065AC _text$x         segment para public 'CODE' use32
.text$x:000065AC                 assume cs:_text$x
.text$x:000065AC                 ;org 65ACh
.text$x:000065AC ; COMDAT (pick associative to section at 654C)
.text$x:000065AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000065AC
.text$x:000065AC ; =============== S U B R O U T I N E =======================================
.text$x:000065AC
.text$x:000065AC
.text$x:000065AC __unwindfunclet$??1CmdLineParams@@QAE@XZ$0 proc near
.text$x:000065AC                                         ; DATA XREF: .xdata$x:0000B7B8o
.text$x:000065AC                 mov     ecx, [ebp-10h]
.text$x:000065AF                 add     ecx, 20h ; ' '
.text$x:000065B2                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000065B2 __unwindfunclet$??1CmdLineParams@@QAE@XZ$0 endp
.text$x:000065B2
.text$x:000065B7
.text$x:000065B7 ; =============== S U B R O U T I N E =======================================
.text$x:000065B7
.text$x:000065B7
.text$x:000065B7 __unwindfunclet$??1CmdLineParams@@QAE@XZ$1 proc near
.text$x:000065B7                                         ; DATA XREF: .xdata$x:0000B7C0o
.text$x:000065B7                 mov     ecx, [ebp-10h]
.text$x:000065BA                 add     ecx, 3Ch ; '<'
.text$x:000065BD                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000065BD __unwindfunclet$??1CmdLineParams@@QAE@XZ$1 endp
.text$x:000065BD
.text$x:000065C2
.text$x:000065C2 ; =============== S U B R O U T I N E =======================================
.text$x:000065C2
.text$x:000065C2
.text$x:000065C2 __ehhandler$??1CmdLineParams@@QAE@XZ proc near
.text$x:000065C2                                         ; DATA XREF: CmdLineParams::~CmdLineParams(void)+5o
.text$x:000065C2
.text$x:000065C2 arg_4           = dword ptr  8
.text$x:000065C2
.text$x:000065C2                 mov     edx, [esp+arg_4]
.text$x:000065C6                 lea     eax, [edx+0Ch]
.text$x:000065C9                 mov     ecx, [edx-8]
.text$x:000065CC                 xor     ecx, eax
.text$x:000065CE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000065D3                 mov     eax, offset __ehfuncinfo$??1CmdLineParams@@QAE@XZ
.text$x:000065D8                 jmp     ___CxxFrameHandler3
.text$x:000065D8 __ehhandler$??1CmdLineParams@@QAE@XZ endp
.text$x:000065D8
.text$x:000065D8 ; ---------------------------------------------------------------------------
.text$x:000065DD                 align 10h
.text$x:000065DD _text$x         ends
.text$x:000065DD
.text$mn:000065E0 ; ===========================================================================
.text$mn:000065E0
.text$mn:000065E0 ; Segment type: Pure code
.text$mn:000065E0 ; Segment permissions: Read/Execute
.text$mn:000065E0 _text$mn        segment para public 'CODE' use32
.text$mn:000065E0                 assume cs:_text$mn
.text$mn:000065E0                 ;org 65E0h
.text$mn:000065E0 ; COMDAT (pick any)
.text$mn:000065E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000065E0
.text$mn:000065E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000065E0
.text$mn:000065E0 ; Attributes: bp-based frame
.text$mn:000065E0
.text$mn:000065E0 ; _DWORD __thiscall Notepad_plus_Window::~Notepad_plus_Window(Notepad_plus_Window *__hidden this)
.text$mn:000065E0                 public ??1Notepad_plus_Window@@UAE@XZ
.text$mn:000065E0 ??1Notepad_plus_Window@@UAE@XZ proc near ; CODE XREF: $LN74+76p
.text$mn:000065E0                                         ; __unwindfunclet$_WinMain@16$14+6j ...
.text$mn:000065E0
.text$mn:000065E0 var_10          = dword ptr -10h
.text$mn:000065E0 var_C           = dword ptr -0Ch
.text$mn:000065E0 var_4           = dword ptr -4
.text$mn:000065E0
.text$mn:000065E0                 push    ebp
.text$mn:000065E1                 mov     ebp, esp
.text$mn:000065E3                 push    0FFFFFFFFh
.text$mn:000065E5                 push    offset __ehhandler$??1Notepad_plus_Window@@UAE@XZ
.text$mn:000065EA                 mov     eax, large fs:0
.text$mn:000065F0                 push    eax
.text$mn:000065F1                 push    ecx
.text$mn:000065F2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000065F7                 xor     eax, ebp
.text$mn:000065F9                 push    eax
.text$mn:000065FA                 lea     eax, [ebp+var_C]
.text$mn:000065FD                 mov     large fs:0, eax
.text$mn:00006603                 mov     [ebp+var_10], ecx
.text$mn:00006606                 mov     [ebp+var_4], 2
.text$mn:0000660D                 mov     byte ptr [ebp+var_4], 1
.text$mn:00006611                 mov     ecx, [ebp+var_10]
.text$mn:00006614                 add     ecx, 551E0h
.text$mn:0000661A                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:0000661F                 mov     byte ptr [ebp+var_4], 0
.text$mn:00006623                 mov     ecx, [ebp+var_10]
.text$mn:00006626                 add     ecx, 10h        ; this
.text$mn:00006629                 call    ??1Notepad_plus@@UAE@XZ ; Notepad_plus::~Notepad_plus(void)
.text$mn:0000662E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006635                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006638                 call    ??1Window@@UAE@XZ ; Window::~Window(void)
.text$mn:0000663D                 mov     ecx, [ebp+var_C]
.text$mn:00006640                 mov     large fs:0, ecx
.text$mn:00006647                 pop     ecx
.text$mn:00006648                 mov     esp, ebp
.text$mn:0000664A                 pop     ebp
.text$mn:0000664B                 retn
.text$mn:0000664B ??1Notepad_plus_Window@@UAE@XZ endp
.text$mn:0000664B
.text$mn:0000664B _text$mn        ends
.text$mn:0000664B
.text$x:0000664C ; ===========================================================================
.text$x:0000664C
.text$x:0000664C ; Segment type: Pure code
.text$x:0000664C ; Segment permissions: Read/Execute
.text$x:0000664C _text$x         segment para public 'CODE' use32
.text$x:0000664C                 assume cs:_text$x
.text$x:0000664C                 ;org 664Ch
.text$x:0000664C ; COMDAT (pick associative to section at 65E0)
.text$x:0000664C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000664C
.text$x:0000664C ; =============== S U B R O U T I N E =======================================
.text$x:0000664C
.text$x:0000664C
.text$x:0000664C __unwindfunclet$??1Notepad_plus_Window@@UAE@XZ$0 proc near
.text$x:0000664C                                         ; DATA XREF: .xdata$x:0000BB54o
.text$x:0000664C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000664F                 jmp     ??1Window@@UAE@XZ ; Window::~Window(void)
.text$x:0000664F __unwindfunclet$??1Notepad_plus_Window@@UAE@XZ$0 endp
.text$x:0000664F
.text$x:00006654
.text$x:00006654 ; =============== S U B R O U T I N E =======================================
.text$x:00006654
.text$x:00006654
.text$x:00006654 __unwindfunclet$??1Notepad_plus_Window@@UAE@XZ$1 proc near
.text$x:00006654                                         ; DATA XREF: .xdata$x:0000BB5Co
.text$x:00006654                 mov     ecx, [ebp-10h]
.text$x:00006657                 add     ecx, 10h        ; this
.text$x:0000665A                 jmp     ??1Notepad_plus@@UAE@XZ ; Notepad_plus::~Notepad_plus(void)
.text$x:0000665A __unwindfunclet$??1Notepad_plus_Window@@UAE@XZ$1 endp
.text$x:0000665A
.text$x:0000665F
.text$x:0000665F ; =============== S U B R O U T I N E =======================================
.text$x:0000665F
.text$x:0000665F
.text$x:0000665F __unwindfunclet$??1Notepad_plus_Window@@UAE@XZ$2 proc near
.text$x:0000665F                                         ; DATA XREF: .xdata$x:0000BB64o
.text$x:0000665F                 mov     ecx, [ebp-10h]
.text$x:00006662                 add     ecx, 551E0h
.text$x:00006668                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00006668 __unwindfunclet$??1Notepad_plus_Window@@UAE@XZ$2 endp
.text$x:00006668
.text$x:0000666D
.text$x:0000666D ; =============== S U B R O U T I N E =======================================
.text$x:0000666D
.text$x:0000666D
.text$x:0000666D __ehhandler$??1Notepad_plus_Window@@UAE@XZ proc near
.text$x:0000666D                                         ; DATA XREF: Notepad_plus_Window::~Notepad_plus_Window(void)+5o
.text$x:0000666D
.text$x:0000666D arg_4           = dword ptr  8
.text$x:0000666D
.text$x:0000666D                 mov     edx, [esp+arg_4]
.text$x:00006671                 lea     eax, [edx+0Ch]
.text$x:00006674                 mov     ecx, [edx-8]
.text$x:00006677                 xor     ecx, eax
.text$x:00006679                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000667E                 mov     eax, offset __ehfuncinfo$??1Notepad_plus_Window@@UAE@XZ
.text$x:00006683                 jmp     ___CxxFrameHandler3
.text$x:00006683 __ehhandler$??1Notepad_plus_Window@@UAE@XZ endp
.text$x:00006683
.text$x:00006683 _text$x         ends
.text$x:00006683
.text$mn:00006688 ; ===========================================================================
.text$mn:00006688
.text$mn:00006688 ; Segment type: Pure code
.text$mn:00006688 ; Segment permissions: Read/Execute
.text$mn:00006688 _text$mn        segment para public 'CODE' use32
.text$mn:00006688                 assume cs:_text$mn
.text$mn:00006688                 ;org 6688h
.text$mn:00006688 ; COMDAT (pick any)
.text$mn:00006688                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006688
.text$mn:00006688 ; =============== S U B R O U T I N E =======================================
.text$mn:00006688
.text$mn:00006688 ; Attributes: bp-based frame
.text$mn:00006688
.text$mn:00006688 ; _DWORD __thiscall Process::~Process(Process *__hidden this)
.text$mn:00006688                 public ??1Process@@QAE@XZ
.text$mn:00006688 ??1Process@@QAE@XZ proc near            ; CODE XREF: WinMain(x,x,x,x)+956p
.text$mn:00006688                                         ; __unwindfunclet$_WinMain@16$18+6j
.text$mn:00006688
.text$mn:00006688 var_10          = dword ptr -10h
.text$mn:00006688 var_C           = dword ptr -0Ch
.text$mn:00006688 var_4           = dword ptr -4
.text$mn:00006688
.text$mn:00006688                 push    ebp
.text$mn:00006689                 mov     ebp, esp
.text$mn:0000668B                 push    0FFFFFFFFh
.text$mn:0000668D                 push    offset __ehhandler$??1Process@@QAE@XZ
.text$mn:00006692                 mov     eax, large fs:0
.text$mn:00006698                 push    eax
.text$mn:00006699                 push    ecx
.text$mn:0000669A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000669F                 xor     eax, ebp
.text$mn:000066A1                 push    eax
.text$mn:000066A2                 lea     eax, [ebp+var_C]
.text$mn:000066A5                 mov     large fs:0, eax
.text$mn:000066AB                 mov     [ebp+var_10], ecx
.text$mn:000066AE                 mov     [ebp+var_4], 2
.text$mn:000066B5                 mov     byte ptr [ebp+var_4], 1
.text$mn:000066B9                 mov     ecx, [ebp+var_10]
.text$mn:000066BC                 add     ecx, 38h ; '8'
.text$mn:000066BF                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000066C4                 mov     byte ptr [ebp+var_4], 0
.text$mn:000066C8                 mov     ecx, [ebp+var_10]
.text$mn:000066CB                 add     ecx, 1Ch
.text$mn:000066CE                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000066D3                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000066DA                 mov     ecx, [ebp+var_10]
.text$mn:000066DD                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000066E2                 mov     ecx, [ebp+var_C]
.text$mn:000066E5                 mov     large fs:0, ecx
.text$mn:000066EC                 pop     ecx
.text$mn:000066ED                 mov     esp, ebp
.text$mn:000066EF                 pop     ebp
.text$mn:000066F0                 retn
.text$mn:000066F0 ??1Process@@QAE@XZ endp
.text$mn:000066F0
.text$mn:000066F0 ; ---------------------------------------------------------------------------
.text$mn:000066F1                 align 4
.text$mn:000066F1 _text$mn        ends
.text$mn:000066F1
.text$x:000066F4 ; ===========================================================================
.text$x:000066F4
.text$x:000066F4 ; Segment type: Pure code
.text$x:000066F4 ; Segment permissions: Read/Execute
.text$x:000066F4 _text$x         segment para public 'CODE' use32
.text$x:000066F4                 assume cs:_text$x
.text$x:000066F4                 ;org 66F4h
.text$x:000066F4 ; COMDAT (pick associative to section at 6688)
.text$x:000066F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000066F4
.text$x:000066F4 ; =============== S U B R O U T I N E =======================================
.text$x:000066F4
.text$x:000066F4
.text$x:000066F4 __unwindfunclet$??1Process@@QAE@XZ$0 proc near
.text$x:000066F4                                         ; DATA XREF: .xdata$x:0000B880o
.text$x:000066F4                 mov     ecx, [ebp-10h]
.text$x:000066F7                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000066F7 __unwindfunclet$??1Process@@QAE@XZ$0 endp
.text$x:000066F7
.text$x:000066FC
.text$x:000066FC ; =============== S U B R O U T I N E =======================================
.text$x:000066FC
.text$x:000066FC
.text$x:000066FC __unwindfunclet$??1Process@@QAE@XZ$1 proc near
.text$x:000066FC                                         ; DATA XREF: .xdata$x:0000B888o
.text$x:000066FC                 mov     ecx, [ebp-10h]
.text$x:000066FF                 add     ecx, 1Ch
.text$x:00006702                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00006702 __unwindfunclet$??1Process@@QAE@XZ$1 endp
.text$x:00006702
.text$x:00006707
.text$x:00006707 ; =============== S U B R O U T I N E =======================================
.text$x:00006707
.text$x:00006707
.text$x:00006707 __unwindfunclet$??1Process@@QAE@XZ$2 proc near
.text$x:00006707                                         ; DATA XREF: .xdata$x:0000B890o
.text$x:00006707                 mov     ecx, [ebp-10h]
.text$x:0000670A                 add     ecx, 38h ; '8'
.text$x:0000670D                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000670D __unwindfunclet$??1Process@@QAE@XZ$2 endp
.text$x:0000670D
.text$x:00006712
.text$x:00006712 ; =============== S U B R O U T I N E =======================================
.text$x:00006712
.text$x:00006712
.text$x:00006712 __ehhandler$??1Process@@QAE@XZ proc near
.text$x:00006712                                         ; DATA XREF: Process::~Process(void)+5o
.text$x:00006712
.text$x:00006712 arg_4           = dword ptr  8
.text$x:00006712
.text$x:00006712                 mov     edx, [esp+arg_4]
.text$x:00006716                 lea     eax, [edx+0Ch]
.text$x:00006719                 mov     ecx, [edx-8]
.text$x:0000671C                 xor     ecx, eax
.text$x:0000671E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006723                 mov     eax, offset __ehfuncinfo$??1Process@@QAE@XZ
.text$x:00006728                 jmp     ___CxxFrameHandler3
.text$x:00006728 __ehhandler$??1Process@@QAE@XZ endp
.text$x:00006728
.text$x:00006728 ; ---------------------------------------------------------------------------
.text$x:0000672D                 align 10h
.text$x:0000672D _text$x         ends
.text$x:0000672D
.text$mn:00006730 ; ===========================================================================
.text$mn:00006730
.text$mn:00006730 ; Segment type: Pure code
.text$mn:00006730 ; Segment permissions: Read/Execute
.text$mn:00006730 _text$mn        segment para public 'CODE' use32
.text$mn:00006730                 assume cs:_text$mn
.text$mn:00006730                 ;org 6730h
.text$mn:00006730 ; COMDAT (pick any)
.text$mn:00006730                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006730
.text$mn:00006730 ; =============== S U B R O U T I N E =======================================
.text$mn:00006730
.text$mn:00006730 ; Attributes: bp-based frame
.text$mn:00006730
.text$mn:00006730 ; _DWORD __thiscall Window::~Window(Window *__hidden this)
.text$mn:00006730                 public ??1Window@@UAE@XZ
.text$mn:00006730 ??1Window@@UAE@XZ proc near             ; CODE XREF: __unwindfunclet$??0Notepad_plus_Window@@QAE@XZ$0+3j
.text$mn:00006730                                         ; Notepad_plus_Window::~Notepad_plus_Window(void)+58p ...
.text$mn:00006730
.text$mn:00006730 var_4           = dword ptr -4
.text$mn:00006730
.text$mn:00006730                 push    ebp
.text$mn:00006731                 mov     ebp, esp
.text$mn:00006733                 push    ecx
.text$mn:00006734                 mov     [ebp+var_4], ecx
.text$mn:00006737                 mov     eax, [ebp+var_4]
.text$mn:0000673A                 mov     dword ptr [eax], offset ??_7Window@@6B@ ; const Window::`vftable'
.text$mn:00006740                 mov     esp, ebp
.text$mn:00006742                 pop     ebp
.text$mn:00006743                 retn
.text$mn:00006743 ??1Window@@UAE@XZ endp
.text$mn:00006743
.text$mn:00006743 _text$mn        ends
.text$mn:00006743
.text$mn:00006744 ; ===========================================================================
.text$mn:00006744
.text$mn:00006744 ; Segment type: Pure code
.text$mn:00006744 ; Segment permissions: Read/Execute
.text$mn:00006744 _text$mn        segment para public 'CODE' use32
.text$mn:00006744                 assume cs:_text$mn
.text$mn:00006744                 ;org 6744h
.text$mn:00006744 ; COMDAT (pick any)
.text$mn:00006744                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006744
.text$mn:00006744 ; =============== S U B R O U T I N E =======================================
.text$mn:00006744
.text$mn:00006744 ; Attributes: bp-based frame
.text$mn:00006744
.text$mn:00006744 ; _DWORD __thiscall std::_Container_base12::~_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:00006744                 public ??1_Container_base12@std@@QAE@XZ
.text$mn:00006744 ??1_Container_base12@std@@QAE@XZ proc near
.text$mn:00006744                                         ; CODE XREF: __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0+3j
.text$mn:00006744                                         ; __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0+3j ...
.text$mn:00006744
.text$mn:00006744 var_4           = dword ptr -4
.text$mn:00006744
.text$mn:00006744                 push    ebp
.text$mn:00006745                 mov     ebp, esp
.text$mn:00006747                 push    ecx
.text$mn:00006748                 mov     [ebp+var_4], ecx
.text$mn:0000674B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000674E                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00006753                 mov     esp, ebp
.text$mn:00006755                 pop     ebp
.text$mn:00006756                 retn
.text$mn:00006756 ??1_Container_base12@std@@QAE@XZ endp
.text$mn:00006756
.text$mn:00006756 ; ---------------------------------------------------------------------------
.text$mn:00006757                 align 4
.text$mn:00006757 _text$mn        ends
.text$mn:00006757
.text$mn:00006758 ; ===========================================================================
.text$mn:00006758
.text$mn:00006758 ; Segment type: Pure code
.text$mn:00006758 ; Segment permissions: Read/Execute
.text$mn:00006758 _text$mn        segment para public 'CODE' use32
.text$mn:00006758                 assume cs:_text$mn
.text$mn:00006758                 ;org 6758h
.text$mn:00006758 ; COMDAT (pick any)
.text$mn:00006758                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006758
.text$mn:00006758 ; =============== S U B R O U T I N E =======================================
.text$mn:00006758
.text$mn:00006758 ; Attributes: bp-based frame
.text$mn:00006758
.text$mn:00006758 ; _DWORD __thiscall std::_Generic_error_category::~_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:00006758                 public ??1_Generic_error_category@std@@UAE@XZ
.text$mn:00006758 ??1_Generic_error_category@std@@UAE@XZ proc near
.text$mn:00006758                                         ; CODE XREF: __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0+3j
.text$mn:00006758                                         ; __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0+3j ...
.text$mn:00006758
.text$mn:00006758 var_10          = dword ptr -10h
.text$mn:00006758 var_C           = dword ptr -0Ch
.text$mn:00006758 var_4           = dword ptr -4
.text$mn:00006758
.text$mn:00006758                 push    ebp
.text$mn:00006759                 mov     ebp, esp
.text$mn:0000675B                 push    0FFFFFFFFh
.text$mn:0000675D                 push    offset __ehhandler$??1_Generic_error_category@std@@UAE@XZ
.text$mn:00006762                 mov     eax, large fs:0
.text$mn:00006768                 push    eax
.text$mn:00006769                 push    ecx
.text$mn:0000676A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000676F                 xor     eax, ebp
.text$mn:00006771                 push    eax
.text$mn:00006772                 lea     eax, [ebp+var_C]
.text$mn:00006775                 mov     large fs:0, eax
.text$mn:0000677B                 mov     [ebp+var_10], ecx
.text$mn:0000677E                 mov     [ebp+var_4], 0
.text$mn:00006785                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000678C                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000678F                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:00006794                 mov     ecx, [ebp+var_C]
.text$mn:00006797                 mov     large fs:0, ecx
.text$mn:0000679E                 pop     ecx
.text$mn:0000679F                 mov     esp, ebp
.text$mn:000067A1                 pop     ebp
.text$mn:000067A2                 retn
.text$mn:000067A2 ??1_Generic_error_category@std@@UAE@XZ endp
.text$mn:000067A2
.text$mn:000067A2 ; ---------------------------------------------------------------------------
.text$mn:000067A3                 align 4
.text$mn:000067A3 _text$mn        ends
.text$mn:000067A3
.text$x:000067A4 ; ===========================================================================
.text$x:000067A4
.text$x:000067A4 ; Segment type: Pure code
.text$x:000067A4 ; Segment permissions: Read/Execute
.text$x:000067A4 _text$x         segment para public 'CODE' use32
.text$x:000067A4                 assume cs:_text$x
.text$x:000067A4                 ;org 67A4h
.text$x:000067A4 ; COMDAT (pick associative to section at 6758)
.text$x:000067A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000067A4
.text$x:000067A4 ; =============== S U B R O U T I N E =======================================
.text$x:000067A4
.text$x:000067A4
.text$x:000067A4 __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 proc near
.text$x:000067A4                                         ; DATA XREF: .xdata$x:0000B2E4o
.text$x:000067A4                 mov     ecx, [ebp-10h]  ; this
.text$x:000067A7                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:000067A7 __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 endp
.text$x:000067A7
.text$x:000067AC
.text$x:000067AC ; =============== S U B R O U T I N E =======================================
.text$x:000067AC
.text$x:000067AC
.text$x:000067AC __ehhandler$??1_Generic_error_category@std@@UAE@XZ proc near
.text$x:000067AC                                         ; DATA XREF: std::_Generic_error_category::~_Generic_error_category(void)+5o
.text$x:000067AC
.text$x:000067AC arg_4           = dword ptr  8
.text$x:000067AC
.text$x:000067AC                 mov     edx, [esp+arg_4]
.text$x:000067B0                 lea     eax, [edx+0Ch]
.text$x:000067B3                 mov     ecx, [edx-8]
.text$x:000067B6                 xor     ecx, eax
.text$x:000067B8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000067BD                 mov     eax, offset __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ
.text$x:000067C2                 jmp     ___CxxFrameHandler3
.text$x:000067C2 __ehhandler$??1_Generic_error_category@std@@UAE@XZ endp
.text$x:000067C2
.text$x:000067C2 ; ---------------------------------------------------------------------------
.text$x:000067C7                 align 4
.text$x:000067C7 _text$x         ends
.text$x:000067C7
.text$mn:000067C8 ; ===========================================================================
.text$mn:000067C8
.text$mn:000067C8 ; Segment type: Pure code
.text$mn:000067C8 ; Segment permissions: Read/Execute
.text$mn:000067C8 _text$mn        segment para public 'CODE' use32
.text$mn:000067C8                 assume cs:_text$mn
.text$mn:000067C8                 ;org 67C8h
.text$mn:000067C8 ; COMDAT (pick any)
.text$mn:000067C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000067C8
.text$mn:000067C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000067C8
.text$mn:000067C8 ; Attributes: bp-based frame
.text$mn:000067C8
.text$mn:000067C8 ; _DWORD __thiscall std::_Iostream_error_category::~_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:000067C8                 public ??1_Iostream_error_category@std@@UAE@XZ
.text$mn:000067C8 ??1_Iostream_error_category@std@@UAE@XZ proc near
.text$mn:000067C8                                         ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:000067C8                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:000067C8
.text$mn:000067C8 var_10          = dword ptr -10h
.text$mn:000067C8 var_C           = dword ptr -0Ch
.text$mn:000067C8 var_4           = dword ptr -4
.text$mn:000067C8
.text$mn:000067C8                 push    ebp
.text$mn:000067C9                 mov     ebp, esp
.text$mn:000067CB                 push    0FFFFFFFFh
.text$mn:000067CD                 push    offset __ehhandler$??1_Iostream_error_category@std@@UAE@XZ
.text$mn:000067D2                 mov     eax, large fs:0
.text$mn:000067D8                 push    eax
.text$mn:000067D9                 push    ecx
.text$mn:000067DA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000067DF                 xor     eax, ebp
.text$mn:000067E1                 push    eax
.text$mn:000067E2                 lea     eax, [ebp+var_C]
.text$mn:000067E5                 mov     large fs:0, eax
.text$mn:000067EB                 mov     [ebp+var_10], ecx
.text$mn:000067EE                 mov     [ebp+var_4], 0
.text$mn:000067F5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000067FC                 mov     ecx, [ebp+var_10] ; this
.text$mn:000067FF                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00006804                 mov     ecx, [ebp+var_C]
.text$mn:00006807                 mov     large fs:0, ecx
.text$mn:0000680E                 pop     ecx
.text$mn:0000680F                 mov     esp, ebp
.text$mn:00006811                 pop     ebp
.text$mn:00006812                 retn
.text$mn:00006812 ??1_Iostream_error_category@std@@UAE@XZ endp
.text$mn:00006812
.text$mn:00006812 ; ---------------------------------------------------------------------------
.text$mn:00006813                 align 4
.text$mn:00006813 _text$mn        ends
.text$mn:00006813
.text$x:00006814 ; ===========================================================================
.text$x:00006814
.text$x:00006814 ; Segment type: Pure code
.text$x:00006814 ; Segment permissions: Read/Execute
.text$x:00006814 _text$x         segment para public 'CODE' use32
.text$x:00006814                 assume cs:_text$x
.text$x:00006814                 ;org 6814h
.text$x:00006814 ; COMDAT (pick associative to section at 67C8)
.text$x:00006814                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006814
.text$x:00006814 ; =============== S U B R O U T I N E =======================================
.text$x:00006814
.text$x:00006814
.text$x:00006814 __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 proc near
.text$x:00006814                                         ; DATA XREF: .xdata$x:0000B368o
.text$x:00006814                 mov     ecx, [ebp-10h]  ; this
.text$x:00006817                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00006817 __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 endp
.text$x:00006817
.text$x:0000681C
.text$x:0000681C ; =============== S U B R O U T I N E =======================================
.text$x:0000681C
.text$x:0000681C
.text$x:0000681C __ehhandler$??1_Iostream_error_category@std@@UAE@XZ proc near
.text$x:0000681C                                         ; DATA XREF: std::_Iostream_error_category::~_Iostream_error_category(void)+5o
.text$x:0000681C
.text$x:0000681C arg_4           = dword ptr  8
.text$x:0000681C
.text$x:0000681C                 mov     edx, [esp+arg_4]
.text$x:00006820                 lea     eax, [edx+0Ch]
.text$x:00006823                 mov     ecx, [edx-8]
.text$x:00006826                 xor     ecx, eax
.text$x:00006828                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000682D                 mov     eax, offset __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ
.text$x:00006832                 jmp     ___CxxFrameHandler3
.text$x:00006832 __ehhandler$??1_Iostream_error_category@std@@UAE@XZ endp
.text$x:00006832
.text$x:00006832 ; ---------------------------------------------------------------------------
.text$x:00006837                 align 4
.text$x:00006837 _text$x         ends
.text$x:00006837
.text$mn:00006838 ; ===========================================================================
.text$mn:00006838
.text$mn:00006838 ; Segment type: Pure code
.text$mn:00006838 ; Segment permissions: Read/Execute
.text$mn:00006838 _text$mn        segment para public 'CODE' use32
.text$mn:00006838                 assume cs:_text$mn
.text$mn:00006838                 ;org 6838h
.text$mn:00006838 ; COMDAT (pick any)
.text$mn:00006838                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006838
.text$mn:00006838 ; =============== S U B R O U T I N E =======================================
.text$mn:00006838
.text$mn:00006838 ; Attributes: bp-based frame
.text$mn:00006838
.text$mn:00006838 ; _DWORD __thiscall std::_Iterator_base12::~_Iterator_base12(std::_Iterator_base12 *__hidden this)
.text$mn:00006838                 public ??1_Iterator_base12@std@@QAE@XZ
.text$mn:00006838 ??1_Iterator_base12@std@@QAE@XZ proc near
.text$mn:00006838                                         ; CODE XREF: __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0+3j
.text$mn:00006838                                         ; __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ$0+3j ...
.text$mn:00006838
.text$mn:00006838 var_14          = byte ptr -14h
.text$mn:00006838 var_10          = dword ptr -10h
.text$mn:00006838 var_C           = dword ptr -0Ch
.text$mn:00006838 var_4           = dword ptr -4
.text$mn:00006838
.text$mn:00006838                 push    ebp
.text$mn:00006839                 mov     ebp, esp
.text$mn:0000683B                 push    0FFFFFFFFh
.text$mn:0000683D                 push    offset __ehhandler$??1_Iterator_base12@std@@QAE@XZ
.text$mn:00006842                 mov     eax, large fs:0
.text$mn:00006848                 push    eax
.text$mn:00006849                 sub     esp, 8
.text$mn:0000684C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006851                 xor     eax, ebp
.text$mn:00006853                 push    eax
.text$mn:00006854                 lea     eax, [ebp+var_C]
.text$mn:00006857                 mov     large fs:0, eax
.text$mn:0000685D                 mov     [ebp+var_10], ecx
.text$mn:00006860                 push    3               ; int
.text$mn:00006862                 lea     ecx, [ebp+var_14] ; this
.text$mn:00006865                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:0000686A                 mov     [ebp+var_4], 0
.text$mn:00006871                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006874                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00006879                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006880                 lea     ecx, [ebp+var_14] ; this
.text$mn:00006883                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00006888                 mov     ecx, [ebp+var_C]
.text$mn:0000688B                 mov     large fs:0, ecx
.text$mn:00006892                 pop     ecx
.text$mn:00006893                 mov     esp, ebp
.text$mn:00006895                 pop     ebp
.text$mn:00006896                 retn
.text$mn:00006896 ??1_Iterator_base12@std@@QAE@XZ endp
.text$mn:00006896
.text$mn:00006896 ; ---------------------------------------------------------------------------
.text$mn:00006897                 align 4
.text$mn:00006897 _text$mn        ends
.text$mn:00006897
.text$x:00006898 ; ===========================================================================
.text$x:00006898
.text$x:00006898 ; Segment type: Pure code
.text$x:00006898 ; Segment permissions: Read/Execute
.text$x:00006898 _text$x         segment para public 'CODE' use32
.text$x:00006898                 assume cs:_text$x
.text$x:00006898                 ;org 6898h
.text$x:00006898 ; COMDAT (pick associative to section at 6838)
.text$x:00006898                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006898
.text$x:00006898 ; =============== S U B R O U T I N E =======================================
.text$x:00006898
.text$x:00006898
.text$x:00006898 __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0 proc near
.text$x:00006898                                         ; DATA XREF: .xdata$x:0000B06Co
.text$x:00006898                 lea     ecx, [ebp-14h]  ; this
.text$x:0000689B                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000689B __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0 endp
.text$x:0000689B
.text$x:000068A0
.text$x:000068A0 ; =============== S U B R O U T I N E =======================================
.text$x:000068A0
.text$x:000068A0
.text$x:000068A0 __ehhandler$??1_Iterator_base12@std@@QAE@XZ proc near
.text$x:000068A0                                         ; DATA XREF: std::_Iterator_base12::~_Iterator_base12(void)+5o
.text$x:000068A0
.text$x:000068A0 arg_4           = dword ptr  8
.text$x:000068A0
.text$x:000068A0                 mov     edx, [esp+arg_4]
.text$x:000068A4                 lea     eax, [edx+0Ch]
.text$x:000068A7                 mov     ecx, [edx-0Ch]
.text$x:000068AA                 xor     ecx, eax
.text$x:000068AC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000068B1                 mov     eax, offset __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
.text$x:000068B6                 jmp     ___CxxFrameHandler3
.text$x:000068B6 __ehhandler$??1_Iterator_base12@std@@QAE@XZ endp
.text$x:000068B6
.text$x:000068B6 ; ---------------------------------------------------------------------------
.text$x:000068BB                 align 4
.text$x:000068BB _text$x         ends
.text$x:000068BB
.text$mn:000068BC ; ===========================================================================
.text$mn:000068BC
.text$mn:000068BC ; Segment type: Pure code
.text$mn:000068BC ; Segment permissions: Read/Execute
.text$mn:000068BC _text$mn        segment para public 'CODE' use32
.text$mn:000068BC                 assume cs:_text$mn
.text$mn:000068BC                 ;org 68BCh
.text$mn:000068BC ; COMDAT (pick any)
.text$mn:000068BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000068BC
.text$mn:000068BC ; =============== S U B R O U T I N E =======================================
.text$mn:000068BC
.text$mn:000068BC ; Attributes: bp-based frame
.text$mn:000068BC
.text$mn:000068BC ; _DWORD __thiscall std::_System_error_category::~_System_error_category(std::_System_error_category *__hidden this)
.text$mn:000068BC                 public ??1_System_error_category@std@@UAE@XZ
.text$mn:000068BC ??1_System_error_category@std@@UAE@XZ proc near
.text$mn:000068BC                                         ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:000068BC                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:000068BC
.text$mn:000068BC var_10          = dword ptr -10h
.text$mn:000068BC var_C           = dword ptr -0Ch
.text$mn:000068BC var_4           = dword ptr -4
.text$mn:000068BC
.text$mn:000068BC                 push    ebp
.text$mn:000068BD                 mov     ebp, esp
.text$mn:000068BF                 push    0FFFFFFFFh
.text$mn:000068C1                 push    offset __ehhandler$??1_System_error_category@std@@UAE@XZ
.text$mn:000068C6                 mov     eax, large fs:0
.text$mn:000068CC                 push    eax
.text$mn:000068CD                 push    ecx
.text$mn:000068CE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000068D3                 xor     eax, ebp
.text$mn:000068D5                 push    eax
.text$mn:000068D6                 lea     eax, [ebp+var_C]
.text$mn:000068D9                 mov     large fs:0, eax
.text$mn:000068DF                 mov     [ebp+var_10], ecx
.text$mn:000068E2                 mov     [ebp+var_4], 0
.text$mn:000068E9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000068F0                 mov     ecx, [ebp+var_10] ; this
.text$mn:000068F3                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:000068F8                 mov     ecx, [ebp+var_C]
.text$mn:000068FB                 mov     large fs:0, ecx
.text$mn:00006902                 pop     ecx
.text$mn:00006903                 mov     esp, ebp
.text$mn:00006905                 pop     ebp
.text$mn:00006906                 retn
.text$mn:00006906 ??1_System_error_category@std@@UAE@XZ endp
.text$mn:00006906
.text$mn:00006906 ; ---------------------------------------------------------------------------
.text$mn:00006907                 align 4
.text$mn:00006907 _text$mn        ends
.text$mn:00006907
.text$x:00006908 ; ===========================================================================
.text$x:00006908
.text$x:00006908 ; Segment type: Pure code
.text$x:00006908 ; Segment permissions: Read/Execute
.text$x:00006908 _text$x         segment para public 'CODE' use32
.text$x:00006908                 assume cs:_text$x
.text$x:00006908                 ;org 6908h
.text$x:00006908 ; COMDAT (pick associative to section at 68BC)
.text$x:00006908                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006908
.text$x:00006908 ; =============== S U B R O U T I N E =======================================
.text$x:00006908
.text$x:00006908
.text$x:00006908 __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 proc near
.text$x:00006908                                         ; DATA XREF: .xdata$x:0000B3ECo
.text$x:00006908                 mov     ecx, [ebp-10h]  ; this
.text$x:0000690B                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:0000690B __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 endp
.text$x:0000690B
.text$x:00006910
.text$x:00006910 ; =============== S U B R O U T I N E =======================================
.text$x:00006910
.text$x:00006910
.text$x:00006910 __ehhandler$??1_System_error_category@std@@UAE@XZ proc near
.text$x:00006910                                         ; DATA XREF: std::_System_error_category::~_System_error_category(void)+5o
.text$x:00006910
.text$x:00006910 arg_4           = dword ptr  8
.text$x:00006910
.text$x:00006910                 mov     edx, [esp+arg_4]
.text$x:00006914                 lea     eax, [edx+0Ch]
.text$x:00006917                 mov     ecx, [edx-8]
.text$x:0000691A                 xor     ecx, eax
.text$x:0000691C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006921                 mov     eax, offset __ehfuncinfo$??1_System_error_category@std@@UAE@XZ
.text$x:00006926                 jmp     ___CxxFrameHandler3
.text$x:00006926 __ehhandler$??1_System_error_category@std@@UAE@XZ endp
.text$x:00006926
.text$x:00006926 ; ---------------------------------------------------------------------------
.text$x:0000692B                 align 4
.text$x:0000692B _text$x         ends
.text$x:0000692B
.text$mn:0000692C ; ===========================================================================
.text$mn:0000692C
.text$mn:0000692C ; Segment type: Pure code
.text$mn:0000692C ; Segment permissions: Read/Execute
.text$mn:0000692C _text$mn        segment para public 'CODE' use32
.text$mn:0000692C                 assume cs:_text$mn
.text$mn:0000692C                 ;org 692Ch
.text$mn:0000692C ; COMDAT (pick any)
.text$mn:0000692C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000692C
.text$mn:0000692C ; =============== S U B R O U T I N E =======================================
.text$mn:0000692C
.text$mn:0000692C ; Attributes: bp-based frame
.text$mn:0000692C
.text$mn:0000692C ; _DWORD __thiscall std::error_category::~error_category(std::error_category *__hidden this)
.text$mn:0000692C                 public ??1error_category@std@@UAE@XZ
.text$mn:0000692C ??1error_category@std@@UAE@XZ proc near ; CODE XREF: __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0+3j
.text$mn:0000692C                                         ; std::_Generic_error_category::~_Generic_error_category(void)+37p ...
.text$mn:0000692C
.text$mn:0000692C var_4           = dword ptr -4
.text$mn:0000692C
.text$mn:0000692C                 push    ebp
.text$mn:0000692D                 mov     ebp, esp
.text$mn:0000692F                 push    ecx
.text$mn:00006930                 mov     [ebp+var_4], ecx
.text$mn:00006933                 mov     eax, [ebp+var_4]
.text$mn:00006936                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:0000693C                 mov     esp, ebp
.text$mn:0000693E                 pop     ebp
.text$mn:0000693F                 retn
.text$mn:0000693F ??1error_category@std@@UAE@XZ endp
.text$mn:0000693F
.text$mn:0000693F _text$mn        ends
.text$mn:0000693F
.text$mn:00006940 ; ===========================================================================
.text$mn:00006940
.text$mn:00006940 ; Segment type: Pure code
.text$mn:00006940 ; Segment permissions: Read/Execute
.text$mn:00006940 _text$mn        segment para public 'CODE' use32
.text$mn:00006940                 assume cs:_text$mn
.text$mn:00006940                 ;org 6940h
.text$mn:00006940 ; COMDAT (pick any)
.text$mn:00006940                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006940
.text$mn:00006940 ; =============== S U B R O U T I N E =======================================
.text$mn:00006940
.text$mn:00006940 ; Attributes: bp-based frame
.text$mn:00006940
.text$mn:00006940 ; void *__cdecl operator new(unsigned int, void *)
.text$mn:00006940                 public ??2@YAPAXIPAX@Z
.text$mn:00006940 ??2@YAPAXIPAX@Z proc near               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+2Ep
.text$mn:00006940                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+2Ep ...
.text$mn:00006940
.text$mn:00006940 arg_4           = dword ptr  0Ch
.text$mn:00006940
.text$mn:00006940                 push    ebp
.text$mn:00006941                 mov     ebp, esp
.text$mn:00006943                 mov     eax, [ebp+arg_4]
.text$mn:00006946                 pop     ebp
.text$mn:00006947                 retn
.text$mn:00006947 ??2@YAPAXIPAX@Z endp
.text$mn:00006947
.text$mn:00006947 _text$mn        ends
.text$mn:00006947
.text$mn:00006948 ; ===========================================================================
.text$mn:00006948
.text$mn:00006948 ; Segment type: Pure code
.text$mn:00006948 ; Segment permissions: Read/Execute
.text$mn:00006948 _text$mn        segment para public 'CODE' use32
.text$mn:00006948                 assume cs:_text$mn
.text$mn:00006948                 ;org 6948h
.text$mn:00006948 ; COMDAT (pick any)
.text$mn:00006948                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006948
.text$mn:00006948 ; =============== S U B R O U T I N E =======================================
.text$mn:00006948
.text$mn:00006948 ; Attributes: bp-based frame
.text$mn:00006948
.text$mn:00006948 ; void __cdecl operator delete(void *)
.text$mn:00006948                 public ??3@YAXPAX0@Z
.text$mn:00006948 ??3@YAXPAX0@Z   proc near               ; CODE XREF: __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0+8p
.text$mn:00006948                                         ; __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0+8p ...
.text$mn:00006948                 push    ebp
.text$mn:00006949                 mov     ebp, esp
.text$mn:0000694B                 pop     ebp
.text$mn:0000694C                 retn
.text$mn:0000694C ??3@YAXPAX0@Z   endp
.text$mn:0000694C
.text$mn:0000694C ; ---------------------------------------------------------------------------
.text$mn:0000694D                 align 10h
.text$mn:0000694D _text$mn        ends
.text$mn:0000694D
.text$mn:00006950 ; ===========================================================================
.text$mn:00006950
.text$mn:00006950 ; Segment type: Pure code
.text$mn:00006950 ; Segment permissions: Read/Execute
.text$mn:00006950 _text$mn        segment para public 'CODE' use32
.text$mn:00006950                 assume cs:_text$mn
.text$mn:00006950                 ;org 6950h
.text$mn:00006950 ; COMDAT (pick any)
.text$mn:00006950                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006950
.text$mn:00006950 ; =============== S U B R O U T I N E =======================================
.text$mn:00006950
.text$mn:00006950 ; Attributes: bp-based frame
.text$mn:00006950
.text$mn:00006950 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator=(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:00006950                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.text$mn:00006950 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z proc near
.text$mn:00006950                                         ; CODE XREF: WinMain(x,x,x,x)+222p
.text$mn:00006950                                         ; WinMain(x,x,x,x)+2EEp ...
.text$mn:00006950
.text$mn:00006950 var_2C          = dword ptr -2Ch
.text$mn:00006950 var_28          = dword ptr -28h
.text$mn:00006950 var_24          = dword ptr -24h
.text$mn:00006950 var_20          = dword ptr -20h
.text$mn:00006950 var_1C          = dword ptr -1Ch
.text$mn:00006950 var_18          = dword ptr -18h
.text$mn:00006950 var_14          = dword ptr -14h
.text$mn:00006950 var_F           = byte ptr -0Fh
.text$mn:00006950 var_E           = byte ptr -0Eh
.text$mn:00006950 var_D           = byte ptr -0Dh
.text$mn:00006950 var_C           = dword ptr -0Ch
.text$mn:00006950 var_4           = dword ptr -4
.text$mn:00006950 arg_0           = dword ptr  8
.text$mn:00006950
.text$mn:00006950                 push    ebp
.text$mn:00006951                 mov     ebp, esp
.text$mn:00006953                 push    0FFFFFFFFh
.text$mn:00006955                 push    offset __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.text$mn:0000695A                 mov     eax, large fs:0
.text$mn:00006960                 push    eax
.text$mn:00006961                 sub     esp, 20h
.text$mn:00006964                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006969                 xor     eax, ebp
.text$mn:0000696B                 push    eax
.text$mn:0000696C                 lea     eax, [ebp+var_C]
.text$mn:0000696F                 mov     large fs:0, eax
.text$mn:00006975                 mov     [ebp+var_14], ecx
.text$mn:00006978                 mov     eax, [ebp+var_14]
.text$mn:0000697B                 cmp     eax, [ebp+arg_0]
.text$mn:0000697E                 jz      loc_6A37
.text$mn:00006984                 push    0
.text$mn:00006986                 push    1
.text$mn:00006988                 mov     ecx, [ebp+var_14]
.text$mn:0000698B                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00006990                 xor     ecx, ecx
.text$mn:00006992                 jz      short loc_69A9
.text$mn:00006994                 lea     edx, [ebp+var_D]
.text$mn:00006997                 push    edx
.text$mn:00006998                 mov     ecx, [ebp+arg_0]
.text$mn:0000699B                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000069A0                 push    eax
.text$mn:000069A1                 mov     ecx, [ebp+var_14]
.text$mn:000069A4                 call    ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Change_alloc(std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:000069A9
.text$mn:000069A9 loc_69A9:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+42j
.text$mn:000069A9                 lea     eax, [ebp+var_E]
.text$mn:000069AC                 push    eax
.text$mn:000069AD                 mov     ecx, [ebp+arg_0]
.text$mn:000069B0                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000069B5                 push    eax
.text$mn:000069B6                 lea     ecx, [ebp+var_F]
.text$mn:000069B9                 push    ecx
.text$mn:000069BA                 mov     ecx, [ebp+var_14]
.text$mn:000069BD                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000069C2                 push    eax
.text$mn:000069C3                 call    ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:000069C8                 add     esp, 8
.text$mn:000069CB                 movzx   edx, al
.text$mn:000069CE                 test    edx, edx
.text$mn:000069D0                 jz      short loc_6A22
.text$mn:000069D2                 sub     esp, 0Ch
.text$mn:000069D5                 mov     eax, esp
.text$mn:000069D7                 mov     [ebp+var_20], esp
.text$mn:000069DA                 push    eax
.text$mn:000069DB                 mov     ecx, [ebp+arg_0]
.text$mn:000069DE                 call    ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)
.text$mn:000069E3                 mov     [ebp+var_18], eax
.text$mn:000069E6                 mov     ecx, [ebp+var_18]
.text$mn:000069E9                 mov     [ebp+var_24], ecx
.text$mn:000069EC                 mov     [ebp+var_4], 0
.text$mn:000069F3                 sub     esp, 0Ch
.text$mn:000069F6                 mov     edx, esp
.text$mn:000069F8                 mov     [ebp+var_28], esp
.text$mn:000069FB                 push    edx
.text$mn:000069FC                 mov     ecx, [ebp+arg_0]
.text$mn:000069FF                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:00006A04                 mov     [ebp+var_1C], eax
.text$mn:00006A07                 mov     eax, [ebp+var_1C]
.text$mn:00006A0A                 mov     [ebp+var_2C], eax
.text$mn:00006A0D                 mov     byte ptr [ebp+var_4], 1
.text$mn:00006A11                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006A18                 mov     ecx, [ebp+var_14]
.text$mn:00006A1B                 call    ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:00006A20                 jmp     short loc_6A37
.text$mn:00006A22 ; ---------------------------------------------------------------------------
.text$mn:00006A22
.text$mn:00006A22 loc_6A22:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+80j
.text$mn:00006A22                 mov     ecx, [ebp+arg_0]
.text$mn:00006A25                 push    ecx
.text$mn:00006A26                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00006A2B                 add     esp, 4
.text$mn:00006A2E                 push    eax
.text$mn:00006A2F                 mov     ecx, [ebp+var_14]
.text$mn:00006A32                 call    ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00006A37
.text$mn:00006A37 loc_6A37:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Ej
.text$mn:00006A37                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+D0j
.text$mn:00006A37                 mov     eax, [ebp+var_14]
.text$mn:00006A3A                 mov     ecx, [ebp+var_C]
.text$mn:00006A3D                 mov     large fs:0, ecx
.text$mn:00006A44                 pop     ecx
.text$mn:00006A45                 mov     esp, ebp
.text$mn:00006A47                 pop     ebp
.text$mn:00006A48                 retn    4
.text$mn:00006A48 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z endp
.text$mn:00006A48
.text$mn:00006A48 ; ---------------------------------------------------------------------------
.text$mn:00006A4B                 align 4
.text$mn:00006A4B _text$mn        ends
.text$mn:00006A4B
.text$x:00006A4C ; ===========================================================================
.text$x:00006A4C
.text$x:00006A4C ; Segment type: Pure code
.text$x:00006A4C ; Segment permissions: Read/Execute
.text$x:00006A4C _text$x         segment para public 'CODE' use32
.text$x:00006A4C                 assume cs:_text$x
.text$x:00006A4C                 ;org 6A4Ch
.text$x:00006A4C ; COMDAT (pick associative to section at 6950)
.text$x:00006A4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006A4C
.text$x:00006A4C ; =============== S U B R O U T I N E =======================================
.text$x:00006A4C
.text$x:00006A4C
.text$x:00006A4C __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$0 proc near
.text$x:00006A4C                                         ; DATA XREF: .xdata$x:0000B578o
.text$x:00006A4C                 mov     ecx, [ebp-20h]
.text$x:00006A4F                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00006A4F __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$0 endp
.text$x:00006A4F
.text$x:00006A54
.text$x:00006A54 ; =============== S U B R O U T I N E =======================================
.text$x:00006A54
.text$x:00006A54
.text$x:00006A54 __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$1 proc near
.text$x:00006A54                                         ; DATA XREF: .xdata$x:0000B580o
.text$x:00006A54                 mov     ecx, [ebp-28h]
.text$x:00006A57                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00006A57 __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$1 endp
.text$x:00006A57
.text$x:00006A5C
.text$x:00006A5C ; =============== S U B R O U T I N E =======================================
.text$x:00006A5C
.text$x:00006A5C
.text$x:00006A5C __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z proc near
.text$x:00006A5C                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5o
.text$x:00006A5C
.text$x:00006A5C arg_4           = dword ptr  8
.text$x:00006A5C
.text$x:00006A5C                 mov     edx, [esp+arg_4]
.text$x:00006A60                 lea     eax, [edx+0Ch]
.text$x:00006A63                 mov     ecx, [edx-24h]
.text$x:00006A66                 xor     ecx, eax
.text$x:00006A68                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006A6D                 mov     eax, offset __ehfuncinfo$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.text$x:00006A72                 jmp     ___CxxFrameHandler3
.text$x:00006A72 __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z endp
.text$x:00006A72
.text$x:00006A72 ; ---------------------------------------------------------------------------
.text$x:00006A77                 align 4
.text$x:00006A77 _text$x         ends
.text$x:00006A77
.text$mn:00006A78 ; ===========================================================================
.text$mn:00006A78
.text$mn:00006A78 ; Segment type: Pure code
.text$mn:00006A78 ; Segment permissions: Read/Execute
.text$mn:00006A78 _text$mn        segment para public 'CODE' use32
.text$mn:00006A78                 assume cs:_text$mn
.text$mn:00006A78                 ;org 6A78h
.text$mn:00006A78 ; COMDAT (pick any)
.text$mn:00006A78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006A78
.text$mn:00006A78 ; =============== S U B R O U T I N E =======================================
.text$mn:00006A78
.text$mn:00006A78 ; Attributes: bp-based frame
.text$mn:00006A78
.text$mn:00006A78 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator=(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00006A78                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
.text$mn:00006A78 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z proc near
.text$mn:00006A78                                         ; CODE XREF: NppParameters::setStartWithLocFileName(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+3Ap
.text$mn:00006A78
.text$mn:00006A78 var_8           = dword ptr -8
.text$mn:00006A78 var_3           = byte ptr -3
.text$mn:00006A78 var_2           = byte ptr -2
.text$mn:00006A78 var_1           = byte ptr -1
.text$mn:00006A78 arg_0           = dword ptr  8
.text$mn:00006A78
.text$mn:00006A78                 push    ebp
.text$mn:00006A79                 mov     ebp, esp
.text$mn:00006A7B                 sub     esp, 8
.text$mn:00006A7E                 mov     [ebp+var_8], ecx
.text$mn:00006A81                 mov     eax, [ebp+var_8]
.text$mn:00006A84                 cmp     eax, [ebp+arg_0]
.text$mn:00006A87                 jz      short loc_6AE3
.text$mn:00006A89                 lea     ecx, [ebp+var_1]
.text$mn:00006A8C                 push    ecx
.text$mn:00006A8D                 mov     ecx, [ebp+arg_0]
.text$mn:00006A90                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00006A95                 push    eax
.text$mn:00006A96                 lea     edx, [ebp+var_2]
.text$mn:00006A99                 push    edx
.text$mn:00006A9A                 mov     ecx, [ebp+var_8]
.text$mn:00006A9D                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00006AA2                 push    eax
.text$mn:00006AA3                 call    ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00006AA8                 add     esp, 8
.text$mn:00006AAB                 movzx   eax, al
.text$mn:00006AAE                 test    eax, eax
.text$mn:00006AB0                 jz      short loc_6AD7
.text$mn:00006AB2                 xor     ecx, ecx
.text$mn:00006AB4                 jz      short loc_6AD7
.text$mn:00006AB6                 push    0
.text$mn:00006AB8                 push    1
.text$mn:00006ABA                 mov     ecx, [ebp+var_8]
.text$mn:00006ABD                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00006AC2                 lea     edx, [ebp+var_3]
.text$mn:00006AC5                 push    edx
.text$mn:00006AC6                 mov     ecx, [ebp+arg_0]
.text$mn:00006AC9                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00006ACE                 push    eax
.text$mn:00006ACF                 mov     ecx, [ebp+var_8]
.text$mn:00006AD2                 call    ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Change_alloc(std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00006AD7
.text$mn:00006AD7 loc_6AD7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+38j
.text$mn:00006AD7                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+3Cj
.text$mn:00006AD7                 mov     eax, [ebp+arg_0]
.text$mn:00006ADA                 push    eax
.text$mn:00006ADB                 mov     ecx, [ebp+var_8]
.text$mn:00006ADE                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00006AE3
.text$mn:00006AE3 loc_6AE3:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Fj
.text$mn:00006AE3                 mov     eax, [ebp+var_8]
.text$mn:00006AE6                 mov     esp, ebp
.text$mn:00006AE8                 pop     ebp
.text$mn:00006AE9                 retn    4
.text$mn:00006AE9 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z endp
.text$mn:00006AE9
.text$mn:00006AE9 _text$mn        ends
.text$mn:00006AE9
.text$mn:00006AEC ; ===========================================================================
.text$mn:00006AEC
.text$mn:00006AEC ; Segment type: Pure code
.text$mn:00006AEC ; Segment permissions: Read/Execute
.text$mn:00006AEC _text$mn        segment para public 'CODE' use32
.text$mn:00006AEC                 assume cs:_text$mn
.text$mn:00006AEC                 ;org 6AECh
.text$mn:00006AEC ; COMDAT (pick any)
.text$mn:00006AEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006AEC
.text$mn:00006AEC ; =============== S U B R O U T I N E =======================================
.text$mn:00006AEC
.text$mn:00006AEC ; Attributes: bp-based frame
.text$mn:00006AEC
.text$mn:00006AEC ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t *Str)
.text$mn:00006AEC                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:00006AEC ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:00006AEC                                         ; CODE XREF: getParamVal(wchar_t,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+2Dp
.text$mn:00006AEC                                         ; getParamVal(wchar_t,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+BCp ...
.text$mn:00006AEC
.text$mn:00006AEC var_4           = dword ptr -4
.text$mn:00006AEC Str             = dword ptr  8
.text$mn:00006AEC
.text$mn:00006AEC                 push    ebp
.text$mn:00006AED                 mov     ebp, esp
.text$mn:00006AEF                 push    ecx
.text$mn:00006AF0                 mov     [ebp+var_4], ecx
.text$mn:00006AF3                 mov     eax, [ebp+Str]
.text$mn:00006AF6                 push    eax             ; Str
.text$mn:00006AF7                 mov     ecx, [ebp+var_4]
.text$mn:00006AFA                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:00006AFF                 mov     esp, ebp
.text$mn:00006B01                 pop     ebp
.text$mn:00006B02                 retn    4
.text$mn:00006B02 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:00006B02
.text$mn:00006B02 ; ---------------------------------------------------------------------------
.text$mn:00006B05                 align 4
.text$mn:00006B05 _text$mn        ends
.text$mn:00006B05
.text$mn:00006B08 ; ===========================================================================
.text$mn:00006B08
.text$mn:00006B08 ; Segment type: Pure code
.text$mn:00006B08 ; Segment permissions: Read/Execute
.text$mn:00006B08 _text$mn        segment para public 'CODE' use32
.text$mn:00006B08                 assume cs:_text$mn
.text$mn:00006B08                 ;org 6B08h
.text$mn:00006B08 ; COMDAT (pick any)
.text$mn:00006B08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B08
.text$mn:00006B08 ; =============== S U B R O U T I N E =======================================
.text$mn:00006B08
.text$mn:00006B08 ; Attributes: bp-based frame
.text$mn:00006B08
.text$mn:00006B08 ; public: struct std::_Iterator_base12 & __thiscall std::_Iterator_base12::operator=(struct std::_Iterator_base12 const &)
.text$mn:00006B08                 public ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$mn:00006B08 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
.text$mn:00006B08                                         ; CODE XREF: std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)+21p
.text$mn:00006B08
.text$mn:00006B08 var_14          = byte ptr -14h
.text$mn:00006B08 var_10          = dword ptr -10h
.text$mn:00006B08 var_C           = dword ptr -0Ch
.text$mn:00006B08 var_4           = dword ptr -4
.text$mn:00006B08 arg_0           = dword ptr  8
.text$mn:00006B08
.text$mn:00006B08                 push    ebp
.text$mn:00006B09                 mov     ebp, esp
.text$mn:00006B0B                 push    0FFFFFFFFh
.text$mn:00006B0D                 push    offset __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$mn:00006B12                 mov     eax, large fs:0
.text$mn:00006B18                 push    eax
.text$mn:00006B19                 sub     esp, 8
.text$mn:00006B1C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006B21                 xor     eax, ebp
.text$mn:00006B23                 push    eax
.text$mn:00006B24                 lea     eax, [ebp+var_C]
.text$mn:00006B27                 mov     large fs:0, eax
.text$mn:00006B2D                 mov     [ebp+var_10], ecx
.text$mn:00006B30                 mov     eax, [ebp+var_10]
.text$mn:00006B33                 mov     ecx, [ebp+arg_0]
.text$mn:00006B36                 mov     edx, [eax]
.text$mn:00006B38                 cmp     edx, [ecx]
.text$mn:00006B3A                 jnz     short loc_6B3E
.text$mn:00006B3C                 jmp     short loc_6B80
.text$mn:00006B3E ; ---------------------------------------------------------------------------
.text$mn:00006B3E
.text$mn:00006B3E loc_6B3E:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+32j
.text$mn:00006B3E                 mov     eax, [ebp+arg_0]
.text$mn:00006B41                 cmp     dword ptr [eax], 0
.text$mn:00006B44                 jz      short loc_6B58
.text$mn:00006B46                 mov     ecx, [ebp+arg_0]
.text$mn:00006B49                 mov     edx, [ecx]
.text$mn:00006B4B                 mov     eax, [edx]
.text$mn:00006B4D                 push    eax             ; struct std::_Container_base12 *
.text$mn:00006B4E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006B51                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:00006B56                 jmp     short loc_6B80
.text$mn:00006B58 ; ---------------------------------------------------------------------------
.text$mn:00006B58
.text$mn:00006B58 loc_6B58:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+3Cj
.text$mn:00006B58                 push    3               ; int
.text$mn:00006B5A                 lea     ecx, [ebp+var_14] ; this
.text$mn:00006B5D                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00006B62                 mov     [ebp+var_4], 0
.text$mn:00006B69                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006B6C                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00006B71                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006B78                 lea     ecx, [ebp+var_14] ; this
.text$mn:00006B7B                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00006B80
.text$mn:00006B80 loc_6B80:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+34j
.text$mn:00006B80                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+4Ej
.text$mn:00006B80                 mov     eax, [ebp+var_10]
.text$mn:00006B83                 mov     ecx, [ebp+var_C]
.text$mn:00006B86                 mov     large fs:0, ecx
.text$mn:00006B8D                 pop     ecx
.text$mn:00006B8E                 mov     esp, ebp
.text$mn:00006B90                 pop     ebp
.text$mn:00006B91                 retn    4
.text$mn:00006B91 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z endp
.text$mn:00006B91
.text$mn:00006B91 _text$mn        ends
.text$mn:00006B91
.text$x:00006B94 ; ===========================================================================
.text$x:00006B94
.text$x:00006B94 ; Segment type: Pure code
.text$x:00006B94 ; Segment permissions: Read/Execute
.text$x:00006B94 _text$x         segment para public 'CODE' use32
.text$x:00006B94                 assume cs:_text$x
.text$x:00006B94                 ;org 6B94h
.text$x:00006B94 ; COMDAT (pick associative to section at 6B08)
.text$x:00006B94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006B94
.text$x:00006B94 ; =============== S U B R O U T I N E =======================================
.text$x:00006B94
.text$x:00006B94
.text$x:00006B94 __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 proc near
.text$x:00006B94                                         ; DATA XREF: .xdata$x:0000B040o
.text$x:00006B94                 lea     ecx, [ebp-14h]  ; this
.text$x:00006B97                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00006B97 __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 endp
.text$x:00006B97
.text$x:00006B9C
.text$x:00006B9C ; =============== S U B R O U T I N E =======================================
.text$x:00006B9C
.text$x:00006B9C
.text$x:00006B9C __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
.text$x:00006B9C                                         ; DATA XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+5o
.text$x:00006B9C
.text$x:00006B9C arg_4           = dword ptr  8
.text$x:00006B9C
.text$x:00006B9C                 mov     edx, [esp+arg_4]
.text$x:00006BA0                 lea     eax, [edx+0Ch]
.text$x:00006BA3                 mov     ecx, [edx-0Ch]
.text$x:00006BA6                 xor     ecx, eax
.text$x:00006BA8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006BAD                 mov     eax, offset __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$x:00006BB2                 jmp     ___CxxFrameHandler3
.text$x:00006BB2 __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z endp
.text$x:00006BB2
.text$x:00006BB2 ; ---------------------------------------------------------------------------
.text$x:00006BB7                 align 4
.text$x:00006BB7 _text$x         ends
.text$x:00006BB7
.text$mn:00006BB8 ; ===========================================================================
.text$mn:00006BB8
.text$mn:00006BB8 ; Segment type: Pure code
.text$mn:00006BB8 ; Segment permissions: Read/Execute
.text$mn:00006BB8 _text$mn        segment para public 'CODE' use32
.text$mn:00006BB8                 assume cs:_text$mn
.text$mn:00006BB8                 ;org 6BB8h
.text$mn:00006BB8 ; COMDAT (pick any)
.text$mn:00006BB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006BB8
.text$mn:00006BB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006BB8
.text$mn:00006BB8 ; Attributes: bp-based frame
.text$mn:00006BB8
.text$mn:00006BB8 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_Iterator_base12 *)
.text$mn:00006BB8                 public ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z
.text$mn:00006BB8 ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z proc near
.text$mn:00006BB8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+39p
.text$mn:00006BB8
.text$mn:00006BB8 var_8           = dword ptr -8
.text$mn:00006BB8 var_4           = dword ptr -4
.text$mn:00006BB8 arg_0           = dword ptr  8
.text$mn:00006BB8
.text$mn:00006BB8                 push    ebp
.text$mn:00006BB9                 mov     ebp, esp
.text$mn:00006BBB                 sub     esp, 8
.text$mn:00006BBE                 mov     [ebp+var_4], ecx
.text$mn:00006BC1                 mov     eax, [ebp+arg_0]
.text$mn:00006BC4                 push    eax             ; std::_Iterator_base12 *
.text$mn:00006BC5                 mov     ecx, [ebp+var_4]
.text$mn:00006BC8                 call    ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00006BCD                 mov     ecx, [ebp+var_4]
.text$mn:00006BD0                 mov     edx, [ebp+arg_0]
.text$mn:00006BD3                 mov     eax, [ecx+8]
.text$mn:00006BD6                 cmp     eax, [edx+8]
.text$mn:00006BD9                 jnz     short loc_6BE4
.text$mn:00006BDB                 mov     [ebp+var_8], 1
.text$mn:00006BE2                 jmp     short loc_6BEB
.text$mn:00006BE4 ; ---------------------------------------------------------------------------
.text$mn:00006BE4
.text$mn:00006BE4 loc_6BE4:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+21j
.text$mn:00006BE4                 mov     [ebp+var_8], 0
.text$mn:00006BEB
.text$mn:00006BEB loc_6BEB:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+2Aj
.text$mn:00006BEB                 mov     al, byte ptr [ebp+var_8]
.text$mn:00006BEE                 mov     esp, ebp
.text$mn:00006BF0                 pop     ebp
.text$mn:00006BF1                 retn    4
.text$mn:00006BF1 ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z endp
.text$mn:00006BF1
.text$mn:00006BF1 _text$mn        ends
.text$mn:00006BF1
.text$mn:00006BF4 ; ===========================================================================
.text$mn:00006BF4
.text$mn:00006BF4 ; Segment type: Pure code
.text$mn:00006BF4 ; Segment permissions: Read/Execute
.text$mn:00006BF4 _text$mn        segment para public 'CODE' use32
.text$mn:00006BF4                 assume cs:_text$mn
.text$mn:00006BF4                 ;org 6BF4h
.text$mn:00006BF4 ; COMDAT (pick any)
.text$mn:00006BF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006BF4
.text$mn:00006BF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00006BF4
.text$mn:00006BF4 ; Attributes: bp-based frame
.text$mn:00006BF4
.text$mn:00006BF4 ; public: bool __thiscall std::error_category::operator==(class std::error_category const &)const
.text$mn:00006BF4                 public ??8error_category@std@@QBE_NABV01@@Z
.text$mn:00006BF4 ??8error_category@std@@QBE_NABV01@@Z proc near
.text$mn:00006BF4                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+1Dp
.text$mn:00006BF4                                         ; std::error_category::equivalent(std::error_code const &,int)+15p
.text$mn:00006BF4
.text$mn:00006BF4 var_8           = dword ptr -8
.text$mn:00006BF4 var_4           = dword ptr -4
.text$mn:00006BF4 arg_0           = dword ptr  8
.text$mn:00006BF4
.text$mn:00006BF4                 push    ebp
.text$mn:00006BF5                 mov     ebp, esp
.text$mn:00006BF7                 sub     esp, 8
.text$mn:00006BFA                 mov     [ebp+var_8], ecx
.text$mn:00006BFD                 mov     eax, [ebp+var_8]
.text$mn:00006C00                 cmp     eax, [ebp+arg_0]
.text$mn:00006C03                 jnz     short loc_6C0E
.text$mn:00006C05                 mov     [ebp+var_4], 1
.text$mn:00006C0C                 jmp     short loc_6C15
.text$mn:00006C0E ; ---------------------------------------------------------------------------
.text$mn:00006C0E
.text$mn:00006C0E loc_6C0E:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+Fj
.text$mn:00006C0E                 mov     [ebp+var_4], 0
.text$mn:00006C15
.text$mn:00006C15 loc_6C15:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+18j
.text$mn:00006C15                 mov     al, byte ptr [ebp+var_4]
.text$mn:00006C18                 mov     esp, ebp
.text$mn:00006C1A                 pop     ebp
.text$mn:00006C1B                 retn    4
.text$mn:00006C1B ??8error_category@std@@QBE_NABV01@@Z endp
.text$mn:00006C1B
.text$mn:00006C1B ; ---------------------------------------------------------------------------
.text$mn:00006C1E                 align 10h
.text$mn:00006C1E _text$mn        ends
.text$mn:00006C1E
.text$mn:00006C20 ; ===========================================================================
.text$mn:00006C20
.text$mn:00006C20 ; Segment type: Pure code
.text$mn:00006C20 ; Segment permissions: Read/Execute
.text$mn:00006C20 _text$mn        segment para public 'CODE' use32
.text$mn:00006C20                 assume cs:_text$mn
.text$mn:00006C20                 ;org 6C20h
.text$mn:00006C20 ; COMDAT (pick any)
.text$mn:00006C20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C20
.text$mn:00006C20 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C20
.text$mn:00006C20 ; Attributes: bp-based frame
.text$mn:00006C20
.text$mn:00006C20 ; int __stdcall std::error_condition::operator==(std::error_condition *)
.text$mn:00006C20                 public ??8error_condition@std@@QBE_NABV01@@Z
.text$mn:00006C20 ??8error_condition@std@@QBE_NABV01@@Z proc near
.text$mn:00006C20                                         ; CODE XREF: std::error_category::equivalent(int,std::error_condition const &)+24p
.text$mn:00006C20
.text$mn:00006C20 var_8           = dword ptr -8
.text$mn:00006C20 var_4           = dword ptr -4
.text$mn:00006C20 arg_0           = dword ptr  8
.text$mn:00006C20
.text$mn:00006C20                 push    ebp
.text$mn:00006C21                 mov     ebp, esp
.text$mn:00006C23                 sub     esp, 8
.text$mn:00006C26                 push    esi
.text$mn:00006C27                 mov     [ebp+var_4], ecx
.text$mn:00006C2A                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00006C2D                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:00006C32                 push    eax
.text$mn:00006C33                 mov     ecx, [ebp+var_4] ; this
.text$mn:00006C36                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:00006C3B                 mov     ecx, eax
.text$mn:00006C3D                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:00006C42                 movzx   eax, al
.text$mn:00006C45                 test    eax, eax
.text$mn:00006C47                 jz      short loc_6C68
.text$mn:00006C49                 mov     ecx, [ebp+var_4] ; this
.text$mn:00006C4C                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:00006C51                 mov     esi, eax
.text$mn:00006C53                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00006C56                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:00006C5B                 cmp     esi, eax
.text$mn:00006C5D                 jnz     short loc_6C68
.text$mn:00006C5F                 mov     [ebp+var_8], 1
.text$mn:00006C66                 jmp     short loc_6C6F
.text$mn:00006C68 ; ---------------------------------------------------------------------------
.text$mn:00006C68
.text$mn:00006C68 loc_6C68:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+27j
.text$mn:00006C68                                         ; std::error_condition::operator==(std::error_condition const &)+3Dj
.text$mn:00006C68                 mov     [ebp+var_8], 0
.text$mn:00006C6F
.text$mn:00006C6F loc_6C6F:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+46j
.text$mn:00006C6F                 mov     al, byte ptr [ebp+var_8]
.text$mn:00006C72                 pop     esi
.text$mn:00006C73                 mov     esp, ebp
.text$mn:00006C75                 pop     ebp
.text$mn:00006C76                 retn    4
.text$mn:00006C76 ??8error_condition@std@@QBE_NABV01@@Z endp
.text$mn:00006C76
.text$mn:00006C76 ; ---------------------------------------------------------------------------
.text$mn:00006C79                 align 4
.text$mn:00006C79 _text$mn        ends
.text$mn:00006C79
.text$mn:00006C7C ; ===========================================================================
.text$mn:00006C7C
.text$mn:00006C7C ; Segment type: Pure code
.text$mn:00006C7C ; Segment permissions: Read/Execute
.text$mn:00006C7C _text$mn        segment para public 'CODE' use32
.text$mn:00006C7C                 assume cs:_text$mn
.text$mn:00006C7C                 ;org 6C7Ch
.text$mn:00006C7C ; COMDAT (pick any)
.text$mn:00006C7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C7C
.text$mn:00006C7C ; =============== S U B R O U T I N E =======================================
.text$mn:00006C7C
.text$mn:00006C7C ; Attributes: bp-based frame
.text$mn:00006C7C
.text$mn:00006C7C ; public: wchar_t const & __thiscall std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::operator*(void)const
.text$mn:00006C7C                 public ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ
.text$mn:00006C7C ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ proc near
.text$mn:00006C7C                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+Ap
.text$mn:00006C7C
.text$mn:00006C7C var_4           = dword ptr -4
.text$mn:00006C7C
.text$mn:00006C7C                 push    ebp
.text$mn:00006C7D                 mov     ebp, esp
.text$mn:00006C7F                 push    ecx
.text$mn:00006C80                 push    esi
.text$mn:00006C81                 mov     [ebp+var_4], ecx
.text$mn:00006C84                 mov     ecx, [ebp+var_4] ; this
.text$mn:00006C87                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00006C8C                 test    eax, eax
.text$mn:00006C8E                 jz      short loc_6CD7
.text$mn:00006C90                 mov     eax, [ebp+var_4]
.text$mn:00006C93                 cmp     dword ptr [eax+8], 0
.text$mn:00006C97                 jz      short loc_6CD7
.text$mn:00006C99                 mov     ecx, [ebp+var_4] ; this
.text$mn:00006C9C                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00006CA1                 mov     ecx, eax
.text$mn:00006CA3                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006CA8                 mov     ecx, [ebp+var_4]
.text$mn:00006CAB                 cmp     [ecx+8], eax
.text$mn:00006CAE                 jb      short loc_6CD7
.text$mn:00006CB0                 mov     ecx, [ebp+var_4] ; this
.text$mn:00006CB3                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00006CB8                 mov     ecx, eax
.text$mn:00006CBA                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006CBF                 mov     esi, eax
.text$mn:00006CC1                 mov     ecx, [ebp+var_4] ; this
.text$mn:00006CC4                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00006CC9                 mov     edx, [eax+14h]
.text$mn:00006CCC                 lea     eax, [esi+edx*2]
.text$mn:00006CCF                 mov     ecx, [ebp+var_4]
.text$mn:00006CD2                 cmp     eax, [ecx+8]
.text$mn:00006CD5                 ja      short loc_6D36
.text$mn:00006CD7
.text$mn:00006CD7 loc_6CD7:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+12j
.text$mn:00006CD7                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+1Bj ...
.text$mn:00006CD7                 push    4Fh ; 'O'       ; unsigned int
.text$mn:00006CD9                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00006CDE                 push    offset ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ ; "string iterator not dereferencable"
.text$mn:00006CE3                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00006CE8                 add     esp, 0Ch
.text$mn:00006CEB                 mov     edx, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:00006CF0                 test    edx, edx
.text$mn:00006CF2                 jz      short loc_6CF8
.text$mn:00006CF4                 xor     eax, eax
.text$mn:00006CF6                 jnz     short loc_6D1B
.text$mn:00006CF8
.text$mn:00006CF8 loc_6CF8:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+76j
.text$mn:00006CF8                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00006CFD                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:00006D02                 push    0
.text$mn:00006D04                 push    50h ; 'P'
.text$mn:00006D06                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00006D0B                 push    2
.text$mn:00006D0D                 call    __CrtDbgReportW
.text$mn:00006D12                 add     esp, 18h
.text$mn:00006D15                 cmp     eax, 1
.text$mn:00006D18                 jnz     short loc_6D1B
.text$mn:00006D1A                 int     3               ; Trap to Debugger
.text$mn:00006D1B
.text$mn:00006D1B loc_6D1B:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+7Aj
.text$mn:00006D1B                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+9Cj
.text$mn:00006D1B                 push    0
.text$mn:00006D1D                 push    50h ; 'P'
.text$mn:00006D1F                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00006D24                 push    offset ??_C@_1MM@BFHGHMKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; "std::_String_const_iterator<class std::"...
.text$mn:00006D29                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:00006D2E                 call    __invalid_parameter
.text$mn:00006D33                 add     esp, 14h
.text$mn:00006D36
.text$mn:00006D36 loc_6D36:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+59j
.text$mn:00006D36                 mov     edx, [ebp+var_4]
.text$mn:00006D39                 mov     eax, [edx+8]
.text$mn:00006D3C                 pop     esi
.text$mn:00006D3D                 mov     esp, ebp
.text$mn:00006D3F                 pop     ebp
.text$mn:00006D40                 retn
.text$mn:00006D40 ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ endp
.text$mn:00006D40
.text$mn:00006D40 ; ---------------------------------------------------------------------------
.text$mn:00006D41                 align 4
.text$mn:00006D41 _text$mn        ends
.text$mn:00006D41
.text$mn:00006D44 ; ===========================================================================
.text$mn:00006D44
.text$mn:00006D44 ; Segment type: Pure code
.text$mn:00006D44 ; Segment permissions: Read/Execute
.text$mn:00006D44 _text$mn        segment para public 'CODE' use32
.text$mn:00006D44                 assume cs:_text$mn
.text$mn:00006D44                 ;org 6D44h
.text$mn:00006D44 ; COMDAT (pick any)
.text$mn:00006D44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D44
.text$mn:00006D44 ; =============== S U B R O U T I N E =======================================
.text$mn:00006D44
.text$mn:00006D44 ; Attributes: bp-based frame
.text$mn:00006D44
.text$mn:00006D44 ; public: wchar_t & __thiscall std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::operator*(void)const
.text$mn:00006D44                 public ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ
.text$mn:00006D44 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ proc near
.text$mn:00006D44                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+135p
.text$mn:00006D44
.text$mn:00006D44 var_4           = dword ptr -4
.text$mn:00006D44
.text$mn:00006D44                 push    ebp
.text$mn:00006D45                 mov     ebp, esp
.text$mn:00006D47                 push    ecx
.text$mn:00006D48                 mov     [ebp+var_4], ecx
.text$mn:00006D4B                 mov     ecx, [ebp+var_4]
.text$mn:00006D4E                 call    ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)
.text$mn:00006D53                 mov     esp, ebp
.text$mn:00006D55                 pop     ebp
.text$mn:00006D56                 retn
.text$mn:00006D56 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ endp
.text$mn:00006D56
.text$mn:00006D56 ; ---------------------------------------------------------------------------
.text$mn:00006D57                 align 4
.text$mn:00006D57 _text$mn        ends
.text$mn:00006D57
.text$mn:00006D58 ; ===========================================================================
.text$mn:00006D58
.text$mn:00006D58 ; Segment type: Pure code
.text$mn:00006D58 ; Segment permissions: Read/Execute
.text$mn:00006D58 _text$mn        segment para public 'CODE' use32
.text$mn:00006D58                 assume cs:_text$mn
.text$mn:00006D58                 ;org 6D58h
.text$mn:00006D58 ; COMDAT (pick any)
.text$mn:00006D58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D58
.text$mn:00006D58 ; =============== S U B R O U T I N E =======================================
.text$mn:00006D58
.text$mn:00006D58 ; Attributes: bp-based frame
.text$mn:00006D58
.text$mn:00006D58 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_Iterator_base12 *)
.text$mn:00006D58                 public ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z
.text$mn:00006D58 ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z proc near
.text$mn:00006D58                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+4Bp
.text$mn:00006D58                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+42p
.text$mn:00006D58
.text$mn:00006D58 var_4           = dword ptr -4
.text$mn:00006D58 arg_0           = dword ptr  8
.text$mn:00006D58
.text$mn:00006D58                 push    ebp
.text$mn:00006D59                 mov     ebp, esp
.text$mn:00006D5B                 push    ecx
.text$mn:00006D5C                 mov     [ebp+var_4], ecx
.text$mn:00006D5F                 mov     eax, [ebp+arg_0]
.text$mn:00006D62                 push    eax             ; std::_Iterator_base12 *
.text$mn:00006D63                 mov     ecx, [ebp+var_4]
.text$mn:00006D66                 call    ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00006D6B                 mov     ecx, [ebp+var_4]
.text$mn:00006D6E                 mov     edx, [ebp+arg_0]
.text$mn:00006D71                 mov     eax, [ecx+8]
.text$mn:00006D74                 sub     eax, [edx+8]
.text$mn:00006D77                 sar     eax, 1
.text$mn:00006D79                 mov     esp, ebp
.text$mn:00006D7B                 pop     ebp
.text$mn:00006D7C                 retn    4
.text$mn:00006D7C ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z endp
.text$mn:00006D7C
.text$mn:00006D7C ; ---------------------------------------------------------------------------
.text$mn:00006D7F                 align 10h
.text$mn:00006D7F _text$mn        ends
.text$mn:00006D7F
.text$mn:00006D80 ; ===========================================================================
.text$mn:00006D80
.text$mn:00006D80 ; Segment type: Pure code
.text$mn:00006D80 ; Segment permissions: Read/Execute
.text$mn:00006D80 _text$mn        segment para public 'CODE' use32
.text$mn:00006D80                 assume cs:_text$mn
.text$mn:00006D80                 ;org 6D80h
.text$mn:00006D80 ; COMDAT (pick any)
.text$mn:00006D80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D80
.text$mn:00006D80 ; =============== S U B R O U T I N E =======================================
.text$mn:00006D80
.text$mn:00006D80 ; Attributes: bp-based frame
.text$mn:00006D80
.text$mn:00006D80 ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_Iterator_base12 *)
.text$mn:00006D80                 public ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.text$mn:00006D80 ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z proc near
.text$mn:00006D80                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+12Cp
.text$mn:00006D80
.text$mn:00006D80 var_28          = byte ptr -28h
.text$mn:00006D80 var_1C          = dword ptr -1Ch
.text$mn:00006D80 var_18          = dword ptr -18h
.text$mn:00006D80 var_14          = dword ptr -14h
.text$mn:00006D80 var_10          = dword ptr -10h
.text$mn:00006D80 var_C           = dword ptr -0Ch
.text$mn:00006D80 var_4           = dword ptr -4
.text$mn:00006D80 arg_0           = dword ptr  8
.text$mn:00006D80
.text$mn:00006D80                 push    ebp
.text$mn:00006D81                 mov     ebp, esp
.text$mn:00006D83                 push    0FFFFFFFFh
.text$mn:00006D85                 push    offset __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.text$mn:00006D8A                 mov     eax, large fs:0
.text$mn:00006D90                 push    eax
.text$mn:00006D91                 sub     esp, 1Ch
.text$mn:00006D94                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006D99                 xor     eax, ebp
.text$mn:00006D9B                 push    eax
.text$mn:00006D9C                 lea     eax, [ebp+var_C]
.text$mn:00006D9F                 mov     large fs:0, eax
.text$mn:00006DA5                 mov     [ebp+var_10], ecx
.text$mn:00006DA8                 mov     eax, [ebp+arg_0]
.text$mn:00006DAB                 push    eax             ; std::_Iterator_base12 *
.text$mn:00006DAC                 mov     ecx, [ebp+var_10]
.text$mn:00006DAF                 push    ecx             ; struct std::_Iterator_base12 *
.text$mn:00006DB0                 lea     ecx, [ebp+var_28]
.text$mn:00006DB3                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00006DB8                 mov     [ebp+var_14], eax
.text$mn:00006DBB                 mov     edx, [ebp+var_14]
.text$mn:00006DBE                 mov     [ebp+var_18], edx
.text$mn:00006DC1                 mov     [ebp+var_4], 0
.text$mn:00006DC8                 mov     ecx, [ebp+var_18]
.text$mn:00006DCB                 call    ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00006DD0                 mov     [ebp+var_1C], eax
.text$mn:00006DD3                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006DDA                 lea     ecx, [ebp+var_28]
.text$mn:00006DDD                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00006DE2                 mov     eax, [ebp+var_1C]
.text$mn:00006DE5                 mov     ecx, [ebp+var_C]
.text$mn:00006DE8                 mov     large fs:0, ecx
.text$mn:00006DEF                 pop     ecx
.text$mn:00006DF0                 mov     esp, ebp
.text$mn:00006DF2                 pop     ebp
.text$mn:00006DF3                 retn    4
.text$mn:00006DF3 ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z endp
.text$mn:00006DF3
.text$mn:00006DF3 ; ---------------------------------------------------------------------------
.text$mn:00006DF6                 align 4
.text$mn:00006DF6 _text$mn        ends
.text$mn:00006DF6
.text$x:00006DF8 ; ===========================================================================
.text$x:00006DF8
.text$x:00006DF8 ; Segment type: Pure code
.text$x:00006DF8 ; Segment permissions: Read/Execute
.text$x:00006DF8 _text$x         segment para public 'CODE' use32
.text$x:00006DF8                 assume cs:_text$x
.text$x:00006DF8                 ;org 6DF8h
.text$x:00006DF8 ; COMDAT (pick associative to section at 6D80)
.text$x:00006DF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006DF8
.text$x:00006DF8 ; =============== S U B R O U T I N E =======================================
.text$x:00006DF8
.text$x:00006DF8
.text$x:00006DF8 __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0 proc near
.text$x:00006DF8                                         ; DATA XREF: .xdata$x:0000BEB8o
.text$x:00006DF8                 lea     ecx, [ebp-28h]
.text$x:00006DFB                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00006DFB __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0 endp
.text$x:00006DFB
.text$x:00006E00
.text$x:00006E00 ; =============== S U B R O U T I N E =======================================
.text$x:00006E00
.text$x:00006E00
.text$x:00006E00 __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z proc near
.text$x:00006E00                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+5o
.text$x:00006E00
.text$x:00006E00 arg_4           = dword ptr  8
.text$x:00006E00
.text$x:00006E00                 mov     edx, [esp+arg_4]
.text$x:00006E04                 lea     eax, [edx+0Ch]
.text$x:00006E07                 mov     ecx, [edx-20h]
.text$x:00006E0A                 xor     ecx, eax
.text$x:00006E0C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006E11                 mov     eax, offset __ehfuncinfo$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.text$x:00006E16                 jmp     ___CxxFrameHandler3
.text$x:00006E16 __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z endp
.text$x:00006E16
.text$x:00006E16 ; ---------------------------------------------------------------------------
.text$x:00006E1B                 align 4
.text$x:00006E1B _text$x         ends
.text$x:00006E1B
.text$mn:00006E1C ; ===========================================================================
.text$mn:00006E1C
.text$mn:00006E1C ; Segment type: Pure code
.text$mn:00006E1C ; Segment permissions: Read/Execute
.text$mn:00006E1C _text$mn        segment para public 'CODE' use32
.text$mn:00006E1C                 assume cs:_text$mn
.text$mn:00006E1C                 ;org 6E1Ch
.text$mn:00006E1C ; COMDAT (pick any)
.text$mn:00006E1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006E1C
.text$mn:00006E1C ; =============== S U B R O U T I N E =======================================
.text$mn:00006E1C
.text$mn:00006E1C ; Attributes: bp-based frame
.text$mn:00006E1C
.text$mn:00006E1C ; public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<wchar_t const *>>> __thiscall std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<wchar_t const *>>>::operator+(int)const
.text$mn:00006E1C                 public ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QBE?AV01@H@Z
.text$mn:00006E1C ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QBE?AV01@H@Z proc near
.text$mn:00006E1C                                         ; CODE XREF: isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+96p
.text$mn:00006E1C                                         ; getParamVal(wchar_t,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+E8p ...
.text$mn:00006E1C
.text$mn:00006E1C var_20          = byte ptr -20h
.text$mn:00006E1C var_14          = dword ptr -14h
.text$mn:00006E1C var_10          = dword ptr -10h
.text$mn:00006E1C var_C           = dword ptr -0Ch
.text$mn:00006E1C var_4           = dword ptr -4
.text$mn:00006E1C arg_0           = dword ptr  8
.text$mn:00006E1C arg_4           = dword ptr  0Ch
.text$mn:00006E1C
.text$mn:00006E1C                 push    ebp
.text$mn:00006E1D                 mov     ebp, esp
.text$mn:00006E1F                 push    0FFFFFFFFh
.text$mn:00006E21                 push    offset __ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QBE?AV01@H@Z
.text$mn:00006E26                 mov     eax, large fs:0
.text$mn:00006E2C                 push    eax
.text$mn:00006E2D                 sub     esp, 14h
.text$mn:00006E30                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006E35                 xor     eax, ebp
.text$mn:00006E37                 push    eax
.text$mn:00006E38                 lea     eax, [ebp+var_C]
.text$mn:00006E3B                 mov     large fs:0, eax
.text$mn:00006E41                 mov     [ebp+var_14], ecx
.text$mn:00006E44                 mov     [ebp+var_10], 0
.text$mn:00006E4B                 mov     eax, [ebp+var_14]
.text$mn:00006E4E                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00006E4F                 lea     ecx, [ebp+var_20]
.text$mn:00006E52                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>> const &)
.text$mn:00006E57                 mov     [ebp+var_4], 1
.text$mn:00006E5E                 mov     ecx, [ebp+arg_4]
.text$mn:00006E61                 push    ecx
.text$mn:00006E62                 lea     ecx, [ebp+var_20]
.text$mn:00006E65                 call    ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+=(int)
.text$mn:00006E6A                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00006E6B                 mov     ecx, [ebp+arg_0]
.text$mn:00006E6E                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>> const &)
.text$mn:00006E73                 mov     edx, [ebp+var_10]
.text$mn:00006E76                 or      edx, 1
.text$mn:00006E79                 mov     [ebp+var_10], edx
.text$mn:00006E7C                 mov     byte ptr [ebp+var_4], 0
.text$mn:00006E80                 lea     ecx, [ebp+var_20]
.text$mn:00006E83                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$mn:00006E88                 mov     eax, [ebp+arg_0]
.text$mn:00006E8B                 mov     ecx, [ebp+var_C]
.text$mn:00006E8E                 mov     large fs:0, ecx
.text$mn:00006E95                 pop     ecx
.text$mn:00006E96                 mov     esp, ebp
.text$mn:00006E98                 pop     ebp
.text$mn:00006E99                 retn    8
.text$mn:00006E99 ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QBE?AV01@H@Z endp
.text$mn:00006E99
.text$mn:00006E99 _text$mn        ends
.text$mn:00006E99
.text$x:00006E9C ; ===========================================================================
.text$x:00006E9C
.text$x:00006E9C ; Segment type: Pure code
.text$x:00006E9C ; Segment permissions: Read/Execute
.text$x:00006E9C _text$x         segment para public 'CODE' use32
.text$x:00006E9C                 assume cs:_text$x
.text$x:00006E9C                 ;org 6E9Ch
.text$x:00006E9C ; COMDAT (pick associative to section at 6E1C)
.text$x:00006E9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006E9C
.text$x:00006E9C ; =============== S U B R O U T I N E =======================================
.text$x:00006E9C
.text$x:00006E9C
.text$x:00006E9C __unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QBE?AV01@H@Z$0 proc near
.text$x:00006E9C                                         ; DATA XREF: .xdata$x:0000BCCCo
.text$x:00006E9C                 lea     ecx, [ebp-20h]
.text$x:00006E9F                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$x:00006E9F __unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QBE?AV01@H@Z$0 endp
.text$x:00006E9F
.text$x:00006EA4
.text$x:00006EA4 ; =============== S U B R O U T I N E =======================================
.text$x:00006EA4
.text$x:00006EA4
.text$x:00006EA4 __unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QBE?AV01@H@Z$1 proc near
.text$x:00006EA4                                         ; DATA XREF: .xdata$x:0000BCC4o
.text$x:00006EA4                 mov     eax, [ebp-10h]
.text$x:00006EA7                 and     eax, 1
.text$x:00006EAA                 jz      $LN5_0
.text$x:00006EB0                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:00006EB4                 mov     ecx, [ebp+8]
.text$x:00006EB7                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$x:00006EBC ; ---------------------------------------------------------------------------
.text$x:00006EBC
.text$x:00006EBC $LN5_0:                                 ; CODE XREF: __unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QBE?AV01@H@Z$1+6j
.text$x:00006EBC                 retn
.text$x:00006EBC __unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QBE?AV01@H@Z$1 endp
.text$x:00006EBC
.text$x:00006EBD
.text$x:00006EBD ; =============== S U B R O U T I N E =======================================
.text$x:00006EBD
.text$x:00006EBD
.text$x:00006EBD __ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QBE?AV01@H@Z proc near
.text$x:00006EBD                                         ; DATA XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+(int)+5o
.text$x:00006EBD
.text$x:00006EBD arg_4           = dword ptr  8
.text$x:00006EBD
.text$x:00006EBD                 mov     edx, [esp+arg_4]
.text$x:00006EC1                 lea     eax, [edx+0Ch]
.text$x:00006EC4                 mov     ecx, [edx-18h]
.text$x:00006EC7                 xor     ecx, eax
.text$x:00006EC9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006ECE                 mov     eax, offset __ehfuncinfo$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QBE?AV01@H@Z
.text$x:00006ED3                 jmp     ___CxxFrameHandler3
.text$x:00006ED3 __ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QBE?AV01@H@Z endp
.text$x:00006ED3
.text$x:00006ED3 _text$x         ends
.text$x:00006ED3
.text$mn:00006ED8 ; ===========================================================================
.text$mn:00006ED8
.text$mn:00006ED8 ; Segment type: Pure code
.text$mn:00006ED8 ; Segment permissions: Read/Execute
.text$mn:00006ED8 _text$mn        segment para public 'CODE' use32
.text$mn:00006ED8                 assume cs:_text$mn
.text$mn:00006ED8                 ;org 6ED8h
.text$mn:00006ED8 ; COMDAT (pick any)
.text$mn:00006ED8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006ED8
.text$mn:00006ED8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006ED8
.text$mn:00006ED8 ; Attributes: bp-based frame
.text$mn:00006ED8
.text$mn:00006ED8 ; public: bool __thiscall Date::operator<(class Date const &)const
.text$mn:00006ED8                 public ??MDate@@QBE_NABV0@@Z
.text$mn:00006ED8 ??MDate@@QBE_NABV0@@Z proc near         ; CODE XREF: WinMain(x,x,x,x)+826p
.text$mn:00006ED8
.text$mn:00006ED8 var_10          = dword ptr -10h
.text$mn:00006ED8 var_C           = dword ptr -0Ch
.text$mn:00006ED8 var_8           = dword ptr -8
.text$mn:00006ED8 var_4           = dword ptr -4
.text$mn:00006ED8 arg_0           = dword ptr  8
.text$mn:00006ED8
.text$mn:00006ED8                 push    ebp
.text$mn:00006ED9                 mov     ebp, esp
.text$mn:00006EDB                 sub     esp, 10h
.text$mn:00006EDE                 mov     [ebp+var_4], ecx
.text$mn:00006EE1                 mov     eax, [ebp+var_4]
.text$mn:00006EE4                 mov     ecx, [ebp+arg_0]
.text$mn:00006EE7                 mov     edx, [eax]
.text$mn:00006EE9                 cmp     edx, [ecx]
.text$mn:00006EEB                 jz      short loc_6F0E
.text$mn:00006EED                 mov     eax, [ebp+var_4]
.text$mn:00006EF0                 mov     ecx, [ebp+arg_0]
.text$mn:00006EF3                 mov     edx, [eax]
.text$mn:00006EF5                 cmp     edx, [ecx]
.text$mn:00006EF7                 jnb     short loc_6F02
.text$mn:00006EF9                 mov     [ebp+var_8], 1
.text$mn:00006F00                 jmp     short loc_6F09
.text$mn:00006F02 ; ---------------------------------------------------------------------------
.text$mn:00006F02
.text$mn:00006F02 loc_6F02:                               ; CODE XREF: Date::operator<(Date const &)+1Fj
.text$mn:00006F02                 mov     [ebp+var_8], 0
.text$mn:00006F09
.text$mn:00006F09 loc_6F09:                               ; CODE XREF: Date::operator<(Date const &)+28j
.text$mn:00006F09                 mov     al, byte ptr [ebp+var_8]
.text$mn:00006F0C                 jmp     short loc_6F60
.text$mn:00006F0E ; ---------------------------------------------------------------------------
.text$mn:00006F0E
.text$mn:00006F0E loc_6F0E:                               ; CODE XREF: Date::operator<(Date const &)+13j
.text$mn:00006F0E                 mov     eax, [ebp+var_4]
.text$mn:00006F11                 mov     ecx, [ebp+arg_0]
.text$mn:00006F14                 mov     edx, [eax+4]
.text$mn:00006F17                 cmp     edx, [ecx+4]
.text$mn:00006F1A                 jz      short loc_6F3F
.text$mn:00006F1C                 mov     eax, [ebp+var_4]
.text$mn:00006F1F                 mov     ecx, [ebp+arg_0]
.text$mn:00006F22                 mov     edx, [eax+4]
.text$mn:00006F25                 cmp     edx, [ecx+4]
.text$mn:00006F28                 jnb     short loc_6F33
.text$mn:00006F2A                 mov     [ebp+var_C], 1
.text$mn:00006F31                 jmp     short loc_6F3A
.text$mn:00006F33 ; ---------------------------------------------------------------------------
.text$mn:00006F33
.text$mn:00006F33 loc_6F33:                               ; CODE XREF: Date::operator<(Date const &)+50j
.text$mn:00006F33                 mov     [ebp+var_C], 0
.text$mn:00006F3A
.text$mn:00006F3A loc_6F3A:                               ; CODE XREF: Date::operator<(Date const &)+59j
.text$mn:00006F3A                 mov     al, byte ptr [ebp+var_C]
.text$mn:00006F3D                 jmp     short loc_6F60
.text$mn:00006F3F ; ---------------------------------------------------------------------------
.text$mn:00006F3F
.text$mn:00006F3F loc_6F3F:                               ; CODE XREF: Date::operator<(Date const &)+42j
.text$mn:00006F3F                 mov     eax, [ebp+var_4]
.text$mn:00006F42                 mov     ecx, [ebp+arg_0]
.text$mn:00006F45                 mov     edx, [eax+8]
.text$mn:00006F48                 cmp     edx, [ecx+8]
.text$mn:00006F4B                 jnb     short loc_6F56
.text$mn:00006F4D                 mov     [ebp+var_10], 1
.text$mn:00006F54                 jmp     short loc_6F5D
.text$mn:00006F56 ; ---------------------------------------------------------------------------
.text$mn:00006F56
.text$mn:00006F56 loc_6F56:                               ; CODE XREF: Date::operator<(Date const &)+73j
.text$mn:00006F56                 mov     [ebp+var_10], 0
.text$mn:00006F5D
.text$mn:00006F5D loc_6F5D:                               ; CODE XREF: Date::operator<(Date const &)+7Cj
.text$mn:00006F5D                 mov     al, byte ptr [ebp+var_10]
.text$mn:00006F60
.text$mn:00006F60 loc_6F60:                               ; CODE XREF: Date::operator<(Date const &)+34j
.text$mn:00006F60                                         ; Date::operator<(Date const &)+65j
.text$mn:00006F60                 mov     esp, ebp
.text$mn:00006F62                 pop     ebp
.text$mn:00006F63                 retn    4
.text$mn:00006F63 ??MDate@@QBE_NABV0@@Z endp
.text$mn:00006F63
.text$mn:00006F63 ; ---------------------------------------------------------------------------
.text$mn:00006F66                 align 4
.text$mn:00006F66 _text$mn        ends
.text$mn:00006F66
.text$mn:00006F68 ; ===========================================================================
.text$mn:00006F68
.text$mn:00006F68 ; Segment type: Pure code
.text$mn:00006F68 ; Segment permissions: Read/Execute
.text$mn:00006F68 _text$mn        segment para public 'CODE' use32
.text$mn:00006F68                 assume cs:_text$mn
.text$mn:00006F68                 ;org 6F68h
.text$mn:00006F68 ; COMDAT (pick any)
.text$mn:00006F68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006F68
.text$mn:00006F68 ; =============== S U B R O U T I N E =======================================
.text$mn:00006F68
.text$mn:00006F68 ; Attributes: bp-based frame
.text$mn:00006F68
.text$mn:00006F68 ; public: class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<wchar_t const *>>> & __thiscall std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<wchar_t const *>>>::operator+=(int)
.text$mn:00006F68                 public ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAEAAV01@H@Z
.text$mn:00006F68 ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAEAAV01@H@Z proc near
.text$mn:00006F68                                         ; CODE XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+=(int)+Ep
.text$mn:00006F68
.text$mn:00006F68 var_4           = dword ptr -4
.text$mn:00006F68 arg_0           = dword ptr  8
.text$mn:00006F68
.text$mn:00006F68                 push    ebp
.text$mn:00006F69                 mov     ebp, esp
.text$mn:00006F6B                 push    ecx
.text$mn:00006F6C                 push    esi
.text$mn:00006F6D                 mov     [ebp+var_4], ecx
.text$mn:00006F70                 mov     ecx, [ebp+var_4] ; this
.text$mn:00006F73                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00006F78                 test    eax, eax
.text$mn:00006F7A                 jz      short loc_6FAE
.text$mn:00006F7C                 mov     eax, [ebp+var_4]
.text$mn:00006F7F                 mov     ecx, [eax+8]
.text$mn:00006F82                 mov     edx, [ebp+arg_0]
.text$mn:00006F85                 lea     esi, [ecx+edx*4]
.text$mn:00006F88                 mov     ecx, [ebp+var_4] ; this
.text$mn:00006F8B                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00006F90                 cmp     esi, [eax+4]
.text$mn:00006F93                 jb      short loc_6FAE
.text$mn:00006F95                 mov     ecx, [ebp+var_4] ; this
.text$mn:00006F98                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00006F9D                 mov     ecx, [ebp+var_4]
.text$mn:00006FA0                 mov     edx, [ecx+8]
.text$mn:00006FA3                 mov     ecx, [ebp+arg_0]
.text$mn:00006FA6                 lea     edx, [edx+ecx*4]
.text$mn:00006FA9                 cmp     [eax+8], edx
.text$mn:00006FAC                 jnb     short loc_7016
.text$mn:00006FAE
.text$mn:00006FAE loc_6FAE:                               ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+=(int)+12j
.text$mn:00006FAE                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+=(int)+2Bj
.text$mn:00006FAE                 push    9Fh ; 'ƒ'       ; unsigned int
.text$mn:00006FB3                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00006FB8                 push    offset ??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@ ; "vector iterator + offset out of range"
.text$mn:00006FBD                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00006FC2                 add     esp, 0Ch
.text$mn:00006FC5                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:00006FCA                 test    eax, eax
.text$mn:00006FCC                 jz      short loc_6FD2
.text$mn:00006FCE                 xor     ecx, ecx
.text$mn:00006FD0                 jnz     short loc_6FF8
.text$mn:00006FD2
.text$mn:00006FD2 loc_6FD2:                               ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+=(int)+64j
.text$mn:00006FD2                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00006FD7                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:00006FDC                 push    0
.text$mn:00006FDE                 push    0A0h ; 'á'
.text$mn:00006FE3                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00006FE8                 push    2
.text$mn:00006FEA                 call    __CrtDbgReportW
.text$mn:00006FEF                 add     esp, 18h
.text$mn:00006FF2                 cmp     eax, 1
.text$mn:00006FF5                 jnz     short loc_6FF8
.text$mn:00006FF7                 int     3               ; Trap to Debugger
.text$mn:00006FF8
.text$mn:00006FF8 loc_6FF8:                               ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+=(int)+68j
.text$mn:00006FF8                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+=(int)+8Dj
.text$mn:00006FF8                 push    0
.text$mn:00006FFA                 push    0A0h ; 'á'
.text$mn:00006FFF                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007004                 push    offset ??_C@_1NO@PBIHDMEP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; "std::_Vector_const_iterator<class std::"...
.text$mn:00007009                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:0000700E                 call    __invalid_parameter
.text$mn:00007013                 add     esp, 14h
.text$mn:00007016
.text$mn:00007016 loc_7016:                               ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+=(int)+44j
.text$mn:00007016                 mov     eax, [ebp+var_4]
.text$mn:00007019                 mov     ecx, [eax+8]
.text$mn:0000701C                 mov     edx, [ebp+arg_0]
.text$mn:0000701F                 lea     eax, [ecx+edx*4]
.text$mn:00007022                 mov     ecx, [ebp+var_4]
.text$mn:00007025                 mov     [ecx+8], eax
.text$mn:00007028                 mov     eax, [ebp+var_4]
.text$mn:0000702B                 pop     esi
.text$mn:0000702C                 mov     esp, ebp
.text$mn:0000702E                 pop     ebp
.text$mn:0000702F                 retn    4
.text$mn:0000702F ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAEAAV01@H@Z endp
.text$mn:0000702F
.text$mn:0000702F ; ---------------------------------------------------------------------------
.text$mn:00007032                 align 4
.text$mn:00007032 _text$mn        ends
.text$mn:00007032
.text$mn:00007034 ; ===========================================================================
.text$mn:00007034
.text$mn:00007034 ; Segment type: Pure code
.text$mn:00007034 ; Segment permissions: Read/Execute
.text$mn:00007034 _text$mn        segment para public 'CODE' use32
.text$mn:00007034                 assume cs:_text$mn
.text$mn:00007034                 ;org 7034h
.text$mn:00007034 ; COMDAT (pick any)
.text$mn:00007034                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007034
.text$mn:00007034 ; =============== S U B R O U T I N E =======================================
.text$mn:00007034
.text$mn:00007034 ; Attributes: bp-based frame
.text$mn:00007034
.text$mn:00007034 ; public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<wchar_t const *>>> & __thiscall std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<wchar_t const *>>>::operator+=(int)
.text$mn:00007034                 public ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAEAAV01@H@Z
.text$mn:00007034 ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAEAAV01@H@Z proc near
.text$mn:00007034                                         ; CODE XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+(int)+49p
.text$mn:00007034
.text$mn:00007034 var_4           = dword ptr -4
.text$mn:00007034 arg_0           = dword ptr  8
.text$mn:00007034
.text$mn:00007034                 push    ebp
.text$mn:00007035                 mov     ebp, esp
.text$mn:00007037                 push    ecx
.text$mn:00007038                 mov     [ebp+var_4], ecx
.text$mn:0000703B                 mov     eax, [ebp+arg_0]
.text$mn:0000703E                 push    eax
.text$mn:0000703F                 mov     ecx, [ebp+var_4]
.text$mn:00007042                 call    ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+=(int)
.text$mn:00007047                 mov     eax, [ebp+var_4]
.text$mn:0000704A                 mov     esp, ebp
.text$mn:0000704C                 pop     ebp
.text$mn:0000704D                 retn    4
.text$mn:0000704D ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAEAAV01@H@Z endp
.text$mn:0000704D
.text$mn:0000704D _text$mn        ends
.text$mn:0000704D
.text$mn:00007050 ; ===========================================================================
.text$mn:00007050
.text$mn:00007050 ; Segment type: Pure code
.text$mn:00007050 ; Segment permissions: Read/Execute
.text$mn:00007050 _text$mn        segment para public 'CODE' use32
.text$mn:00007050                 assume cs:_text$mn
.text$mn:00007050                 ;org 7050h
.text$mn:00007050 ; COMDAT (pick any)
.text$mn:00007050                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007050
.text$mn:00007050 ; =============== S U B R O U T I N E =======================================
.text$mn:00007050
.text$mn:00007050 ; Attributes: bp-based frame
.text$mn:00007050
.text$mn:00007050 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator+=(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00007050                 public ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
.text$mn:00007050 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z proc near
.text$mn:00007050                                         ; CODE XREF: WinMain(x,x,x,x)+4B9p
.text$mn:00007050                                         ; doException(Notepad_plus_Window &)+FAp ...
.text$mn:00007050
.text$mn:00007050 var_4           = dword ptr -4
.text$mn:00007050 arg_0           = dword ptr  8
.text$mn:00007050
.text$mn:00007050                 push    ebp
.text$mn:00007051                 mov     ebp, esp
.text$mn:00007053                 push    ecx
.text$mn:00007054                 mov     [ebp+var_4], ecx
.text$mn:00007057                 mov     eax, [ebp+arg_0]
.text$mn:0000705A                 push    eax
.text$mn:0000705B                 mov     ecx, [ebp+var_4]
.text$mn:0000705E                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00007063                 mov     esp, ebp
.text$mn:00007065                 pop     ebp
.text$mn:00007066                 retn    4
.text$mn:00007066 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z endp
.text$mn:00007066
.text$mn:00007066 ; ---------------------------------------------------------------------------
.text$mn:00007069                 align 4
.text$mn:00007069 _text$mn        ends
.text$mn:00007069
.text$mn:0000706C ; ===========================================================================
.text$mn:0000706C
.text$mn:0000706C ; Segment type: Pure code
.text$mn:0000706C ; Segment permissions: Read/Execute
.text$mn:0000706C _text$mn        segment para public 'CODE' use32
.text$mn:0000706C                 assume cs:_text$mn
.text$mn:0000706C                 ;org 706Ch
.text$mn:0000706C ; COMDAT (pick any)
.text$mn:0000706C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000706C
.text$mn:0000706C ; =============== S U B R O U T I N E =======================================
.text$mn:0000706C
.text$mn:0000706C ; Attributes: bp-based frame
.text$mn:0000706C
.text$mn:0000706C ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t *Str)
.text$mn:0000706C                 public ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:0000706C ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:0000706C                                         ; CODE XREF: WinMain(x,x,x,x)+47Bp
.text$mn:0000706C                                         ; WinMain(x,x,x,x)+4D8p ...
.text$mn:0000706C
.text$mn:0000706C var_4           = dword ptr -4
.text$mn:0000706C Str             = dword ptr  8
.text$mn:0000706C
.text$mn:0000706C                 push    ebp
.text$mn:0000706D                 mov     ebp, esp
.text$mn:0000706F                 push    ecx
.text$mn:00007070                 mov     [ebp+var_4], ecx
.text$mn:00007073                 mov     eax, [ebp+Str]
.text$mn:00007076                 push    eax             ; Str
.text$mn:00007077                 mov     ecx, [ebp+var_4]
.text$mn:0000707A                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)
.text$mn:0000707F                 mov     esp, ebp
.text$mn:00007081                 pop     ebp
.text$mn:00007082                 retn    4
.text$mn:00007082 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:00007082
.text$mn:00007082 ; ---------------------------------------------------------------------------
.text$mn:00007085                 align 4
.text$mn:00007085 _text$mn        ends
.text$mn:00007085
.text$mn:00007088 ; ===========================================================================
.text$mn:00007088
.text$mn:00007088 ; Segment type: Pure code
.text$mn:00007088 ; Segment permissions: Read/Execute
.text$mn:00007088 _text$mn        segment para public 'CODE' use32
.text$mn:00007088                 assume cs:_text$mn
.text$mn:00007088                 ;org 7088h
.text$mn:00007088 ; COMDAT (pick any)
.text$mn:00007088                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007088
.text$mn:00007088 ; =============== S U B R O U T I N E =======================================
.text$mn:00007088
.text$mn:00007088 ; Attributes: bp-based frame
.text$mn:00007088
.text$mn:00007088 ; private: void * __thiscall FileManager::`scalar deleting destructor'(unsigned int)
.text$mn:00007088                 public ??_GFileManager@@AAEPAXI@Z
.text$mn:00007088 ??_GFileManager@@AAEPAXI@Z proc near    ; CODE XREF: FileManager::destroyInstance(void)+22p
.text$mn:00007088
.text$mn:00007088 var_4           = dword ptr -4
.text$mn:00007088 arg_0           = dword ptr  8
.text$mn:00007088
.text$mn:00007088                 push    ebp
.text$mn:00007089                 mov     ebp, esp
.text$mn:0000708B                 push    ecx
.text$mn:0000708C                 mov     [ebp+var_4], ecx
.text$mn:0000708F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007092                 call    ??1FileManager@@AAE@XZ ; FileManager::~FileManager(void)
.text$mn:00007097                 mov     eax, [ebp+arg_0]
.text$mn:0000709A                 and     eax, 1
.text$mn:0000709D                 jz      short loc_70AB
.text$mn:0000709F                 mov     ecx, [ebp+var_4]
.text$mn:000070A2                 push    ecx             ; void *
.text$mn:000070A3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000070A8                 add     esp, 4
.text$mn:000070AB
.text$mn:000070AB loc_70AB:                               ; CODE XREF: FileManager::`scalar deleting destructor'(uint)+15j
.text$mn:000070AB                 mov     eax, [ebp+var_4]
.text$mn:000070AE                 mov     esp, ebp
.text$mn:000070B0                 pop     ebp
.text$mn:000070B1                 retn    4
.text$mn:000070B1 ??_GFileManager@@AAEPAXI@Z endp
.text$mn:000070B1
.text$mn:000070B1 _text$mn        ends
.text$mn:000070B1
.text$mn:000070B4 ; ===========================================================================
.text$mn:000070B4
.text$mn:000070B4 ; Segment type: Pure code
.text$mn:000070B4 ; Segment permissions: Read/Execute
.text$mn:000070B4 _text$mn        segment para public 'CODE' use32
.text$mn:000070B4                 assume cs:_text$mn
.text$mn:000070B4                 ;org 70B4h
.text$mn:000070B4 ; COMDAT (pick any)
.text$mn:000070B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000070B4
.text$mn:000070B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000070B4
.text$mn:000070B4 ; Attributes: bp-based frame
.text$mn:000070B4
.text$mn:000070B4 ; public: virtual void * __thiscall Notepad_plus_Window::`scalar deleting destructor'(unsigned int)
.text$mn:000070B4                 public ??_GNotepad_plus_Window@@UAEPAXI@Z
.text$mn:000070B4 ??_GNotepad_plus_Window@@UAEPAXI@Z proc near
.text$mn:000070B4
.text$mn:000070B4 var_4           = dword ptr -4
.text$mn:000070B4 arg_0           = dword ptr  8
.text$mn:000070B4
.text$mn:000070B4                 push    ebp
.text$mn:000070B5                 mov     ebp, esp
.text$mn:000070B7                 push    ecx
.text$mn:000070B8                 mov     [ebp+var_4], ecx
.text$mn:000070BB                 mov     ecx, [ebp+var_4] ; this
.text$mn:000070BE                 call    ??1Notepad_plus_Window@@UAE@XZ ; Notepad_plus_Window::~Notepad_plus_Window(void)
.text$mn:000070C3                 mov     eax, [ebp+arg_0]
.text$mn:000070C6                 and     eax, 1
.text$mn:000070C9                 jz      short loc_70D7
.text$mn:000070CB                 mov     ecx, [ebp+var_4]
.text$mn:000070CE                 push    ecx             ; void *
.text$mn:000070CF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000070D4                 add     esp, 4
.text$mn:000070D7
.text$mn:000070D7 loc_70D7:                               ; CODE XREF: Notepad_plus_Window::`scalar deleting destructor'(uint)+15j
.text$mn:000070D7                 mov     eax, [ebp+var_4]
.text$mn:000070DA                 mov     esp, ebp
.text$mn:000070DC                 pop     ebp
.text$mn:000070DD                 retn    4
.text$mn:000070DD ??_GNotepad_plus_Window@@UAEPAXI@Z endp
.text$mn:000070DD
.text$mn:000070DD _text$mn        ends
.text$mn:000070DD
.text$mn:000070E0 ; ===========================================================================
.text$mn:000070E0
.text$mn:000070E0 ; Segment type: Pure code
.text$mn:000070E0 ; Segment permissions: Read/Execute
.text$mn:000070E0 _text$mn        segment para public 'CODE' use32
.text$mn:000070E0                 assume cs:_text$mn
.text$mn:000070E0                 ;org 70E0h
.text$mn:000070E0 ; COMDAT (pick any)
.text$mn:000070E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000070E0
.text$mn:000070E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000070E0
.text$mn:000070E0 ; Attributes: bp-based frame
.text$mn:000070E0
.text$mn:000070E0 ; public: virtual void * __thiscall Window::`scalar deleting destructor'(unsigned int)
.text$mn:000070E0                 public ??_GWindow@@UAEPAXI@Z
.text$mn:000070E0 ??_GWindow@@UAEPAXI@Z proc near
.text$mn:000070E0
.text$mn:000070E0 var_4           = dword ptr -4
.text$mn:000070E0 arg_0           = dword ptr  8
.text$mn:000070E0
.text$mn:000070E0                 push    ebp
.text$mn:000070E1                 mov     ebp, esp
.text$mn:000070E3                 push    ecx
.text$mn:000070E4                 mov     [ebp+var_4], ecx
.text$mn:000070E7                 mov     ecx, [ebp+var_4] ; this
.text$mn:000070EA                 call    ??1Window@@UAE@XZ ; Window::~Window(void)
.text$mn:000070EF                 mov     eax, [ebp+arg_0]
.text$mn:000070F2                 and     eax, 1
.text$mn:000070F5                 jz      short loc_7103
.text$mn:000070F7                 mov     ecx, [ebp+var_4]
.text$mn:000070FA                 push    ecx             ; void *
.text$mn:000070FB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007100                 add     esp, 4
.text$mn:00007103
.text$mn:00007103 loc_7103:                               ; CODE XREF: Window::`scalar deleting destructor'(uint)+15j
.text$mn:00007103                 mov     eax, [ebp+var_4]
.text$mn:00007106                 mov     esp, ebp
.text$mn:00007108                 pop     ebp
.text$mn:00007109                 retn    4
.text$mn:00007109 ??_GWindow@@UAEPAXI@Z endp
.text$mn:00007109
.text$mn:00007109 _text$mn        ends
.text$mn:00007109
.text$mn:0000710C ; ===========================================================================
.text$mn:0000710C
.text$mn:0000710C ; Segment type: Pure code
.text$mn:0000710C ; Segment permissions: Read/Execute
.text$mn:0000710C _text$mn        segment para public 'CODE' use32
.text$mn:0000710C                 assume cs:_text$mn
.text$mn:0000710C                 ;org 710Ch
.text$mn:0000710C ; COMDAT (pick any)
.text$mn:0000710C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000710C
.text$mn:0000710C ; =============== S U B R O U T I N E =======================================
.text$mn:0000710C
.text$mn:0000710C ; Attributes: bp-based frame
.text$mn:0000710C
.text$mn:0000710C ; public: virtual void * __thiscall std::_Generic_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:0000710C                 public ??_G_Generic_error_category@std@@UAEPAXI@Z
.text$mn:0000710C ??_G_Generic_error_category@std@@UAEPAXI@Z proc near
.text$mn:0000710C
.text$mn:0000710C var_4           = dword ptr -4
.text$mn:0000710C arg_0           = dword ptr  8
.text$mn:0000710C
.text$mn:0000710C                 push    ebp
.text$mn:0000710D                 mov     ebp, esp
.text$mn:0000710F                 push    ecx
.text$mn:00007110                 mov     [ebp+var_4], ecx
.text$mn:00007113                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007116                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:0000711B                 mov     eax, [ebp+arg_0]
.text$mn:0000711E                 and     eax, 1
.text$mn:00007121                 jz      short loc_712F
.text$mn:00007123                 mov     ecx, [ebp+var_4]
.text$mn:00007126                 push    ecx             ; void *
.text$mn:00007127                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000712C                 add     esp, 4
.text$mn:0000712F
.text$mn:0000712F loc_712F:                               ; CODE XREF: std::_Generic_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:0000712F                 mov     eax, [ebp+var_4]
.text$mn:00007132                 mov     esp, ebp
.text$mn:00007134                 pop     ebp
.text$mn:00007135                 retn    4
.text$mn:00007135 ??_G_Generic_error_category@std@@UAEPAXI@Z endp
.text$mn:00007135
.text$mn:00007135 _text$mn        ends
.text$mn:00007135
.text$mn:00007138 ; ===========================================================================
.text$mn:00007138
.text$mn:00007138 ; Segment type: Pure code
.text$mn:00007138 ; Segment permissions: Read/Execute
.text$mn:00007138 _text$mn        segment para public 'CODE' use32
.text$mn:00007138                 assume cs:_text$mn
.text$mn:00007138                 ;org 7138h
.text$mn:00007138 ; COMDAT (pick any)
.text$mn:00007138                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007138
.text$mn:00007138 ; =============== S U B R O U T I N E =======================================
.text$mn:00007138
.text$mn:00007138 ; Attributes: bp-based frame
.text$mn:00007138
.text$mn:00007138 ; public: virtual void * __thiscall std::_Iostream_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00007138                 public ??_G_Iostream_error_category@std@@UAEPAXI@Z
.text$mn:00007138 ??_G_Iostream_error_category@std@@UAEPAXI@Z proc near
.text$mn:00007138
.text$mn:00007138 var_4           = dword ptr -4
.text$mn:00007138 arg_0           = dword ptr  8
.text$mn:00007138
.text$mn:00007138                 push    ebp
.text$mn:00007139                 mov     ebp, esp
.text$mn:0000713B                 push    ecx
.text$mn:0000713C                 mov     [ebp+var_4], ecx
.text$mn:0000713F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007142                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$mn:00007147                 mov     eax, [ebp+arg_0]
.text$mn:0000714A                 and     eax, 1
.text$mn:0000714D                 jz      short loc_715B
.text$mn:0000714F                 mov     ecx, [ebp+var_4]
.text$mn:00007152                 push    ecx             ; void *
.text$mn:00007153                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007158                 add     esp, 4
.text$mn:0000715B
.text$mn:0000715B loc_715B:                               ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:0000715B                 mov     eax, [ebp+var_4]
.text$mn:0000715E                 mov     esp, ebp
.text$mn:00007160                 pop     ebp
.text$mn:00007161                 retn    4
.text$mn:00007161 ??_G_Iostream_error_category@std@@UAEPAXI@Z endp
.text$mn:00007161
.text$mn:00007161 _text$mn        ends
.text$mn:00007161
.text$mn:00007164 ; ===========================================================================
.text$mn:00007164
.text$mn:00007164 ; Segment type: Pure code
.text$mn:00007164 ; Segment permissions: Read/Execute
.text$mn:00007164 _text$mn        segment para public 'CODE' use32
.text$mn:00007164                 assume cs:_text$mn
.text$mn:00007164                 ;org 7164h
.text$mn:00007164 ; COMDAT (pick any)
.text$mn:00007164                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007164
.text$mn:00007164 ; =============== S U B R O U T I N E =======================================
.text$mn:00007164
.text$mn:00007164 ; Attributes: bp-based frame
.text$mn:00007164
.text$mn:00007164 ; public: virtual void * __thiscall std::_System_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00007164                 public ??_G_System_error_category@std@@UAEPAXI@Z
.text$mn:00007164 ??_G_System_error_category@std@@UAEPAXI@Z proc near
.text$mn:00007164
.text$mn:00007164 var_4           = dword ptr -4
.text$mn:00007164 arg_0           = dword ptr  8
.text$mn:00007164
.text$mn:00007164                 push    ebp
.text$mn:00007165                 mov     ebp, esp
.text$mn:00007167                 push    ecx
.text$mn:00007168                 mov     [ebp+var_4], ecx
.text$mn:0000716B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000716E                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$mn:00007173                 mov     eax, [ebp+arg_0]
.text$mn:00007176                 and     eax, 1
.text$mn:00007179                 jz      short loc_7187
.text$mn:0000717B                 mov     ecx, [ebp+var_4]
.text$mn:0000717E                 push    ecx             ; void *
.text$mn:0000717F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007184                 add     esp, 4
.text$mn:00007187
.text$mn:00007187 loc_7187:                               ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00007187                 mov     eax, [ebp+var_4]
.text$mn:0000718A                 mov     esp, ebp
.text$mn:0000718C                 pop     ebp
.text$mn:0000718D                 retn    4
.text$mn:0000718D ??_G_System_error_category@std@@UAEPAXI@Z endp
.text$mn:0000718D
.text$mn:0000718D _text$mn        ends
.text$mn:0000718D
.text$mn:00007190 ; ===========================================================================
.text$mn:00007190
.text$mn:00007190 ; Segment type: Pure code
.text$mn:00007190 ; Segment permissions: Read/Execute
.text$mn:00007190 _text$mn        segment para public 'CODE' use32
.text$mn:00007190                 assume cs:_text$mn
.text$mn:00007190                 ;org 7190h
.text$mn:00007190 ; COMDAT (pick any)
.text$mn:00007190                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007190
.text$mn:00007190 ; =============== S U B R O U T I N E =======================================
.text$mn:00007190
.text$mn:00007190 ; Attributes: bp-based frame
.text$mn:00007190
.text$mn:00007190 ; public: virtual void * __thiscall std::error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00007190                 public ??_Gerror_category@std@@UAEPAXI@Z
.text$mn:00007190 ??_Gerror_category@std@@UAEPAXI@Z proc near
.text$mn:00007190
.text$mn:00007190 var_4           = dword ptr -4
.text$mn:00007190 arg_0           = dword ptr  8
.text$mn:00007190
.text$mn:00007190                 push    ebp
.text$mn:00007191                 mov     ebp, esp
.text$mn:00007193                 push    ecx
.text$mn:00007194                 mov     [ebp+var_4], ecx
.text$mn:00007197                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000719A                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:0000719F                 mov     eax, [ebp+arg_0]
.text$mn:000071A2                 and     eax, 1
.text$mn:000071A5                 jz      short loc_71B3
.text$mn:000071A7                 mov     ecx, [ebp+var_4]
.text$mn:000071AA                 push    ecx             ; void *
.text$mn:000071AB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000071B0                 add     esp, 4
.text$mn:000071B3
.text$mn:000071B3 loc_71B3:                               ; CODE XREF: std::error_category::`scalar deleting destructor'(uint)+15j
.text$mn:000071B3                 mov     eax, [ebp+var_4]
.text$mn:000071B6                 mov     esp, ebp
.text$mn:000071B8                 pop     ebp
.text$mn:000071B9                 retn    4
.text$mn:000071B9 ??_Gerror_category@std@@UAEPAXI@Z endp
.text$mn:000071B9
.text$mn:000071B9 _text$mn        ends
.text$mn:000071B9
.text$di:000071BC ; ===========================================================================
.text$di:000071BC
.text$di:000071BC ; Segment type: Pure code
.text$di:000071BC ; Segment permissions: Read/Execute
.text$di:000071BC _text$di        segment para public 'CODE' use32
.text$di:000071BC                 assume cs:_text$di
.text$di:000071BC                 ;org 71BCh
.text$di:000071BC ; COMDAT (pick any)
.text$di:000071BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000071BC
.text$di:000071BC ; =============== S U B R O U T I N E =======================================
.text$di:000071BC
.text$di:000071BC ; Attributes: bp-based frame
.text$di:000071BC
.text$di:000071BC ; void __cdecl `dynamic initializer for 'public: static class std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.text$di:000071BC ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$di:000071BC                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Generic_object$initializer$)(void)o
.text$di:000071BC                 push    ebp
.text$di:000071BD                 mov     ebp, esp
.text$di:000071BF                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$di:000071C4                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$di:000071C9                 push    offset ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:000071CE                 call    _atexit
.text$di:000071D3                 add     esp, 4
.text$di:000071D6                 pop     ebp
.text$di:000071D7                 retn
.text$di:000071D7 ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$di:000071D7
.text$di:000071D7 _text$di        ends
.text$di:000071D7
.text$di:000071D8 ; ===========================================================================
.text$di:000071D8
.text$di:000071D8 ; Segment type: Pure code
.text$di:000071D8 ; Segment permissions: Read/Execute
.text$di:000071D8 _text$di        segment para public 'CODE' use32
.text$di:000071D8                 assume cs:_text$di
.text$di:000071D8                 ;org 71D8h
.text$di:000071D8 ; COMDAT (pick any)
.text$di:000071D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000071D8
.text$di:000071D8 ; =============== S U B R O U T I N E =======================================
.text$di:000071D8
.text$di:000071D8 ; Attributes: bp-based frame
.text$di:000071D8
.text$di:000071D8 ; void __cdecl `dynamic initializer for 'public: static class std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.text$di:000071D8 ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$di:000071D8                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Iostream_object$initializer$)(void)o
.text$di:000071D8                 push    ebp
.text$di:000071D9                 mov     ebp, esp
.text$di:000071DB                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$di:000071E0                 call    ??0_Iostream_error_category@std@@QAE@XZ ; std::_Iostream_error_category::_Iostream_error_category(void)
.text$di:000071E5                 push    offset ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:000071EA                 call    _atexit
.text$di:000071EF                 add     esp, 4
.text$di:000071F2                 pop     ebp
.text$di:000071F3                 retn
.text$di:000071F3 ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$di:000071F3
.text$di:000071F3 _text$di        ends
.text$di:000071F3
.text$di:000071F4 ; ===========================================================================
.text$di:000071F4
.text$di:000071F4 ; Segment type: Pure code
.text$di:000071F4 ; Segment permissions: Read/Execute
.text$di:000071F4 _text$di        segment para public 'CODE' use32
.text$di:000071F4                 assume cs:_text$di
.text$di:000071F4                 ;org 71F4h
.text$di:000071F4 ; COMDAT (pick any)
.text$di:000071F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000071F4
.text$di:000071F4 ; =============== S U B R O U T I N E =======================================
.text$di:000071F4
.text$di:000071F4 ; Attributes: bp-based frame
.text$di:000071F4
.text$di:000071F4 ; void __cdecl `dynamic initializer for 'public: static class std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.text$di:000071F4 ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$di:000071F4                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_System_object$initializer$)(void)o
.text$di:000071F4                 push    ebp
.text$di:000071F5                 mov     ebp, esp
.text$di:000071F7                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$di:000071FC                 call    ??0_System_error_category@std@@QAE@XZ ; std::_System_error_category::_System_error_category(void)
.text$di:00007201                 push    offset ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:00007206                 call    _atexit
.text$di:0000720B                 add     esp, 4
.text$di:0000720E                 pop     ebp
.text$di:0000720F                 retn
.text$di:0000720F ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$di:0000720F
.text$di:0000720F _text$di        ends
.text$di:0000720F
.text$di:00007210 ; ===========================================================================
.text$di:00007210
.text$di:00007210 ; Segment type: Pure code
.text$di:00007210 ; Segment permissions: Read/Execute
.text$di:00007210 _text$di        segment para public 'CODE' use32
.text$di:00007210                 assume cs:_text$di
.text$di:00007210                 ;org 7210h
.text$di:00007210 ; COMDAT (pick any)
.text$di:00007210                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007210
.text$di:00007210 ; =============== S U B R O U T I N E =======================================
.text$di:00007210
.text$di:00007210 ; Attributes: bp-based frame
.text$di:00007210
.text$di:00007210 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id''(void)
.text$di:00007210 ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00007210                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id$initializer$)(void)o
.text$di:00007210                 push    ebp
.text$di:00007211                 mov     ebp, esp
.text$di:00007213                 push    0               ; unsigned int
.text$di:00007215                 mov     ecx, offset ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:0000721A                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:0000721F                 pop     ebp
.text$di:00007220                 retn
.text$di:00007220 ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00007220
.text$di:00007220 ; ---------------------------------------------------------------------------
.text$di:00007221                 align 4
.text$di:00007221 _text$di        ends
.text$di:00007221
.text$di:00007224 ; ===========================================================================
.text$di:00007224
.text$di:00007224 ; Segment type: Pure code
.text$di:00007224 ; Segment permissions: Read/Execute
.text$di:00007224 _text$di        segment para public 'CODE' use32
.text$di:00007224                 assume cs:_text$di
.text$di:00007224                 ;org 7224h
.text$di:00007224 ; COMDAT (pick any)
.text$di:00007224                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007224
.text$di:00007224 ; =============== S U B R O U T I N E =======================================
.text$di:00007224
.text$di:00007224 ; Attributes: bp-based frame
.text$di:00007224
.text$di:00007224 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id''(void)
.text$di:00007224 ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00007224                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id$initializer$)(void)o
.text$di:00007224                 push    ebp
.text$di:00007225                 mov     ebp, esp
.text$di:00007227                 push    0               ; unsigned int
.text$di:00007229                 mov     ecx, offset ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:0000722E                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00007233                 pop     ebp
.text$di:00007234                 retn
.text$di:00007234 ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00007234
.text$di:00007234 ; ---------------------------------------------------------------------------
.text$di:00007235                 align 4
.text$di:00007235 _text$di        ends
.text$di:00007235
.text$di:00007238 ; ===========================================================================
.text$di:00007238
.text$di:00007238 ; Segment type: Pure code
.text$di:00007238 ; Segment permissions: Read/Execute
.text$di:00007238 _text$di        segment para public 'CODE' use32
.text$di:00007238                 assume cs:_text$di
.text$di:00007238                 ;org 7238h
.text$di:00007238 ; COMDAT (pick any)
.text$di:00007238                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007238
.text$di:00007238 ; =============== S U B R O U T I N E =======================================
.text$di:00007238
.text$di:00007238 ; Attributes: bp-based frame
.text$di:00007238
.text$di:00007238 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<char>::id''(void)
.text$di:00007238 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00007238                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<char>::id$initializer$)(void)o
.text$di:00007238                 push    ebp
.text$di:00007239                 mov     ebp, esp
.text$di:0000723B                 push    0               ; unsigned int
.text$di:0000723D                 mov     ecx, offset ?id@?$numpunct@D@std@@2V0locale@2@A ; this
.text$di:00007242                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00007247                 pop     ebp
.text$di:00007248                 retn
.text$di:00007248 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00007248
.text$di:00007248 ; ---------------------------------------------------------------------------
.text$di:00007249                 align 4
.text$di:00007249 _text$di        ends
.text$di:00007249
.text$di:0000724C ; ===========================================================================
.text$di:0000724C
.text$di:0000724C ; Segment type: Pure code
.text$di:0000724C ; Segment permissions: Read/Execute
.text$di:0000724C _text$di        segment para public 'CODE' use32
.text$di:0000724C                 assume cs:_text$di
.text$di:0000724C                 ;org 724Ch
.text$di:0000724C ; COMDAT (pick any)
.text$di:0000724C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000724C
.text$di:0000724C ; =============== S U B R O U T I N E =======================================
.text$di:0000724C
.text$di:0000724C ; Attributes: bp-based frame
.text$di:0000724C
.text$di:0000724C ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<wchar_t>::id''(void)
.text$di:0000724C ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:0000724C                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<wchar_t>::id$initializer$)(void)o
.text$di:0000724C                 push    ebp
.text$di:0000724D                 mov     ebp, esp
.text$di:0000724F                 push    0               ; unsigned int
.text$di:00007251                 mov     ecx, offset ?id@?$numpunct@_W@std@@2V0locale@2@A ; this
.text$di:00007256                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:0000725B                 pop     ebp
.text$di:0000725C                 retn
.text$di:0000725C ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ endp
.text$di:0000725C
.text$di:0000725C ; ---------------------------------------------------------------------------
.text$di:0000725D                 align 10h
.text$di:0000725D _text$di        ends
.text$di:0000725D
.text$di:00007260 ; ===========================================================================
.text$di:00007260
.text$di:00007260 ; Segment type: Pure code
.text$di:00007260 ; Segment permissions: Read/Execute
.text$di:00007260 _text$di        segment para public 'CODE' use32
.text$di:00007260                 assume cs:_text$di
.text$di:00007260                 ;org 7260h
.text$di:00007260 ; COMDAT (pick any)
.text$di:00007260                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007260
.text$di:00007260 ; =============== S U B R O U T I N E =======================================
.text$di:00007260
.text$di:00007260 ; Attributes: bp-based frame
.text$di:00007260
.text$di:00007260 ; void __cdecl std::`dynamic initializer for '_Tuple_alloc''(void)
.text$di:00007260 ??__E_Tuple_alloc@std@@YAXXZ proc near  ; DATA XREF: .CRT$XCU:__Tuple_alloc$initializer$o
.text$di:00007260
.text$di:00007260 var_1           = byte ptr -1
.text$di:00007260
.text$di:00007260                 push    ebp
.text$di:00007261                 mov     ebp, esp
.text$di:00007263                 push    ecx
.text$di:00007264                 xor     eax, eax
.text$di:00007266                 mov     [ebp+var_1], al
.text$di:00007269                 mov     esp, ebp
.text$di:0000726B                 pop     ebp
.text$di:0000726C                 retn
.text$di:0000726C ??__E_Tuple_alloc@std@@YAXXZ endp
.text$di:0000726C
.text$di:0000726C ; ---------------------------------------------------------------------------
.text$di:0000726D                 align 10h
.text$di:0000726D _text$di        ends
.text$di:0000726D
.text$di:00007270 ; ===========================================================================
.text$di:00007270
.text$di:00007270 ; Segment type: Pure code
.text$di:00007270 ; Segment permissions: Read/Execute
.text$di:00007270 _text$di        segment para public 'CODE' use32
.text$di:00007270                 assume cs:_text$di
.text$di:00007270                 ;org 7270h
.text$di:00007270 ; COMDAT (pick any)
.text$di:00007270                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007270
.text$di:00007270 ; =============== S U B R O U T I N E =======================================
.text$di:00007270
.text$di:00007270 ; Attributes: bp-based frame
.text$di:00007270
.text$di:00007270 ; void __cdecl std::`dynamic initializer for 'allocator_arg''(void)
.text$di:00007270 ??__Eallocator_arg@std@@YAXXZ proc near ; DATA XREF: .CRT$XCU:_allocator_arg$initializer$o
.text$di:00007270
.text$di:00007270 var_1           = byte ptr -1
.text$di:00007270
.text$di:00007270                 push    ebp
.text$di:00007271                 mov     ebp, esp
.text$di:00007273                 push    ecx
.text$di:00007274                 xor     eax, eax
.text$di:00007276                 mov     [ebp+var_1], al
.text$di:00007279                 mov     esp, ebp
.text$di:0000727B                 pop     ebp
.text$di:0000727C                 retn
.text$di:0000727C ??__Eallocator_arg@std@@YAXXZ endp
.text$di:0000727C
.text$di:0000727C ; ---------------------------------------------------------------------------
.text$di:0000727D                 align 10h
.text$di:0000727D _text$di        ends
.text$di:0000727D
.text$di:00007280 ; ===========================================================================
.text$di:00007280
.text$di:00007280 ; Segment type: Pure code
.text$di:00007280 ; Segment permissions: Read/Execute
.text$di:00007280 _text$di        segment para public 'CODE' use32
.text$di:00007280                 assume cs:_text$di
.text$di:00007280                 ;org 7280h
.text$di:00007280 ; COMDAT (pick any)
.text$di:00007280                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007280
.text$di:00007280 ; =============== S U B R O U T I N E =======================================
.text$di:00007280
.text$di:00007280 ; Attributes: bp-based frame
.text$di:00007280
.text$di:00007280 ; void __cdecl std::`dynamic initializer for 'ignore''(void)
.text$di:00007280 ??__Eignore@std@@YAXXZ proc near        ; DATA XREF: .CRT$XCU:_ignore$initializer$o
.text$di:00007280                 push    ebp
.text$di:00007281                 mov     ebp, esp
.text$di:00007283                 mov     ecx, offset _ignore ; this
.text$di:00007288                 call    ??0_Ignore@std@@QAE@XZ ; std::_Ignore::_Ignore(void)
.text$di:0000728D                 pop     ebp
.text$di:0000728E                 retn
.text$di:0000728E ??__Eignore@std@@YAXXZ endp
.text$di:0000728E
.text$di:0000728E ; ---------------------------------------------------------------------------
.text$di:0000728F                 align 10h
.text$di:0000728F _text$di        ends
.text$di:0000728F
.text$di:00007290 ; ===========================================================================
.text$di:00007290
.text$di:00007290 ; Segment type: Pure code
.text$di:00007290 ; Segment permissions: Read/Execute
.text$di:00007290 _text$di        segment para public 'CODE' use32
.text$di:00007290                 assume cs:_text$di
.text$di:00007290                 ;org 7290h
.text$di:00007290 ; COMDAT (pick any)
.text$di:00007290                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007290
.text$di:00007290 ; =============== S U B R O U T I N E =======================================
.text$di:00007290
.text$di:00007290 ; Attributes: bp-based frame
.text$di:00007290
.text$di:00007290 ; void __cdecl std::`dynamic initializer for 'piecewise_construct''(void)
.text$di:00007290 ??__Epiecewise_construct@std@@YAXXZ proc near
.text$di:00007290                                         ; DATA XREF: .CRT$XCU:_piecewise_construct$initializer$o
.text$di:00007290
.text$di:00007290 var_1           = byte ptr -1
.text$di:00007290
.text$di:00007290                 push    ebp
.text$di:00007291                 mov     ebp, esp
.text$di:00007293                 push    ecx
.text$di:00007294                 xor     eax, eax
.text$di:00007296                 mov     [ebp+var_1], al
.text$di:00007299                 mov     esp, ebp
.text$di:0000729B                 pop     ebp
.text$di:0000729C                 retn
.text$di:0000729C ??__Epiecewise_construct@std@@YAXXZ endp
.text$di:0000729C
.text$di:0000729C ; ---------------------------------------------------------------------------
.text$di:0000729D                 align 10h
.text$di:0000729D _text$di        ends
.text$di:0000729D
.text$yd:000072A0 ; ===========================================================================
.text$yd:000072A0
.text$yd:000072A0 ; Segment type: Pure code
.text$yd:000072A0 ; Segment permissions: Read/Execute
.text$yd:000072A0 _text$yd        segment para public 'CODE' use32
.text$yd:000072A0                 assume cs:_text$yd
.text$yd:000072A0                 ;org 72A0h
.text$yd:000072A0 ; COMDAT (pick any)
.text$yd:000072A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:000072A0
.text$yd:000072A0 ; =============== S U B R O U T I N E =======================================
.text$yd:000072A0
.text$yd:000072A0 ; Attributes: bp-based frame
.text$yd:000072A0
.text$yd:000072A0 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Generic_error_category std::_Error_objects<int>::_Generic_object''()
.text$yd:000072A0 ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$yd:000072A0                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+Do
.text$yd:000072A0                 push    ebp
.text$yd:000072A1                 mov     ebp, esp
.text$yd:000072A3                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$yd:000072A8                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$yd:000072AD                 pop     ebp
.text$yd:000072AE                 retn
.text$yd:000072AE ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$yd:000072AE
.text$yd:000072AE ; ---------------------------------------------------------------------------
.text$yd:000072AF                 align 10h
.text$yd:000072AF _text$yd        ends
.text$yd:000072AF
.text$yd:000072B0 ; ===========================================================================
.text$yd:000072B0
.text$yd:000072B0 ; Segment type: Pure code
.text$yd:000072B0 ; Segment permissions: Read/Execute
.text$yd:000072B0 _text$yd        segment para public 'CODE' use32
.text$yd:000072B0                 assume cs:_text$yd
.text$yd:000072B0                 ;org 72B0h
.text$yd:000072B0 ; COMDAT (pick any)
.text$yd:000072B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:000072B0
.text$yd:000072B0 ; =============== S U B R O U T I N E =======================================
.text$yd:000072B0
.text$yd:000072B0 ; Attributes: bp-based frame
.text$yd:000072B0
.text$yd:000072B0 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''()
.text$yd:000072B0 ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$yd:000072B0                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+Do
.text$yd:000072B0                 push    ebp
.text$yd:000072B1                 mov     ebp, esp
.text$yd:000072B3                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$yd:000072B8                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$yd:000072BD                 pop     ebp
.text$yd:000072BE                 retn
.text$yd:000072BE ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$yd:000072BE
.text$yd:000072BE ; ---------------------------------------------------------------------------
.text$yd:000072BF                 align 10h
.text$yd:000072BF _text$yd        ends
.text$yd:000072BF
.text$yd:000072C0 ; ===========================================================================
.text$yd:000072C0
.text$yd:000072C0 ; Segment type: Pure code
.text$yd:000072C0 ; Segment permissions: Read/Execute
.text$yd:000072C0 _text$yd        segment para public 'CODE' use32
.text$yd:000072C0                 assume cs:_text$yd
.text$yd:000072C0                 ;org 72C0h
.text$yd:000072C0 ; COMDAT (pick any)
.text$yd:000072C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:000072C0
.text$yd:000072C0 ; =============== S U B R O U T I N E =======================================
.text$yd:000072C0
.text$yd:000072C0 ; Attributes: bp-based frame
.text$yd:000072C0
.text$yd:000072C0 ; void __cdecl `dynamic atexit destructor for 'public: static std::_System_error_category std::_Error_objects<int>::_System_object''()
.text$yd:000072C0 ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$yd:000072C0                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+Do
.text$yd:000072C0                 push    ebp
.text$yd:000072C1                 mov     ebp, esp
.text$yd:000072C3                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$yd:000072C8                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$yd:000072CD                 pop     ebp
.text$yd:000072CE                 retn
.text$yd:000072CE ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$yd:000072CE
.text$yd:000072CE ; ---------------------------------------------------------------------------
.text$yd:000072CF                 align 10h
.text$yd:000072CF _text$yd        ends
.text$yd:000072CF
.text$mn:000072D0 ; ===========================================================================
.text$mn:000072D0
.text$mn:000072D0 ; Segment type: Pure code
.text$mn:000072D0 ; Segment permissions: Read/Execute
.text$mn:000072D0 _text$mn        segment para public 'CODE' use32
.text$mn:000072D0                 assume cs:_text$mn
.text$mn:000072D0                 ;org 72D0h
.text$mn:000072D0 ; COMDAT (pick any)
.text$mn:000072D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000072D0
.text$mn:000072D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000072D0
.text$mn:000072D0 ; Attributes: bp-based frame
.text$mn:000072D0
.text$mn:000072D0 ; void __thiscall std::_Iterator_base12::_Adopt(std::_Iterator_base12 *this, const struct std::_Container_base12 *)
.text$mn:000072D0                 public ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$mn:000072D0 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
.text$mn:000072D0                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)+3Cp
.text$mn:000072D0                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(wchar_t const * *,std::_Container_base12 const *)+45p ...
.text$mn:000072D0
.text$mn:000072D0 var_1C          = byte ptr -1Ch
.text$mn:000072D0 var_18          = byte ptr -18h
.text$mn:000072D0 var_14          = dword ptr -14h
.text$mn:000072D0 var_10          = dword ptr -10h
.text$mn:000072D0 var_C           = dword ptr -0Ch
.text$mn:000072D0 var_4           = dword ptr -4
.text$mn:000072D0 arg_0           = dword ptr  8
.text$mn:000072D0
.text$mn:000072D0                 push    ebp
.text$mn:000072D1                 mov     ebp, esp
.text$mn:000072D3                 push    0FFFFFFFFh
.text$mn:000072D5                 push    offset __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$mn:000072DA                 mov     eax, large fs:0
.text$mn:000072E0                 push    eax
.text$mn:000072E1                 sub     esp, 10h
.text$mn:000072E4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000072E9                 xor     eax, ebp
.text$mn:000072EB                 push    eax
.text$mn:000072EC                 lea     eax, [ebp+var_C]
.text$mn:000072EF                 mov     large fs:0, eax
.text$mn:000072F5                 mov     [ebp+var_10], ecx
.text$mn:000072F8                 cmp     [ebp+arg_0], 0
.text$mn:000072FC                 jnz     short loc_7328
.text$mn:000072FE                 push    3               ; int
.text$mn:00007300                 lea     ecx, [ebp+var_18] ; this
.text$mn:00007303                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00007308                 mov     [ebp+var_4], 0
.text$mn:0000730F                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007312                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00007317                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000731E                 lea     ecx, [ebp+var_18] ; this
.text$mn:00007321                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00007326                 jmp     short loc_737F
.text$mn:00007328 ; ---------------------------------------------------------------------------
.text$mn:00007328
.text$mn:00007328 loc_7328:                               ; CODE XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+2Cj
.text$mn:00007328                 mov     eax, [ebp+arg_0]
.text$mn:0000732B                 mov     ecx, [eax]
.text$mn:0000732D                 mov     [ebp+var_14], ecx
.text$mn:00007330                 mov     edx, [ebp+var_10]
.text$mn:00007333                 mov     eax, [edx]
.text$mn:00007335                 cmp     eax, [ebp+var_14]
.text$mn:00007338                 jz      short loc_737F
.text$mn:0000733A                 push    3               ; int
.text$mn:0000733C                 lea     ecx, [ebp+var_1C] ; this
.text$mn:0000733F                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00007344                 mov     [ebp+var_4], 1
.text$mn:0000734B                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000734E                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00007353                 mov     ecx, [ebp+var_10]
.text$mn:00007356                 mov     edx, [ebp+var_14]
.text$mn:00007359                 mov     eax, [edx+4]
.text$mn:0000735C                 mov     [ecx+4], eax
.text$mn:0000735F                 mov     ecx, [ebp+var_14]
.text$mn:00007362                 mov     edx, [ebp+var_10]
.text$mn:00007365                 mov     [ecx+4], edx
.text$mn:00007368                 mov     eax, [ebp+var_10]
.text$mn:0000736B                 mov     ecx, [ebp+var_14]
.text$mn:0000736E                 mov     [eax], ecx
.text$mn:00007370                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007377                 lea     ecx, [ebp+var_1C] ; this
.text$mn:0000737A                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000737F
.text$mn:0000737F loc_737F:                               ; CODE XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+56j
.text$mn:0000737F                                         ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+68j
.text$mn:0000737F                 mov     ecx, [ebp+var_C]
.text$mn:00007382                 mov     large fs:0, ecx
.text$mn:00007389                 pop     ecx
.text$mn:0000738A                 mov     esp, ebp
.text$mn:0000738C                 pop     ebp
.text$mn:0000738D                 retn    4
.text$mn:0000738D ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z endp
.text$mn:0000738D
.text$mn:0000738D _text$mn        ends
.text$mn:0000738D
.text$x:00007390 ; ===========================================================================
.text$x:00007390
.text$x:00007390 ; Segment type: Pure code
.text$x:00007390 ; Segment permissions: Read/Execute
.text$x:00007390 _text$x         segment para public 'CODE' use32
.text$x:00007390                 assume cs:_text$x
.text$x:00007390                 ;org 7390h
.text$x:00007390 ; COMDAT (pick associative to section at 72D0)
.text$x:00007390                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007390
.text$x:00007390 ; =============== S U B R O U T I N E =======================================
.text$x:00007390
.text$x:00007390
.text$x:00007390 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 proc near
.text$x:00007390                                         ; DATA XREF: .xdata$x:0000B098o
.text$x:00007390                 lea     ecx, [ebp-18h]  ; this
.text$x:00007393                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00007393 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 endp
.text$x:00007393
.text$x:00007398
.text$x:00007398 ; =============== S U B R O U T I N E =======================================
.text$x:00007398
.text$x:00007398
.text$x:00007398 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 proc near
.text$x:00007398                                         ; DATA XREF: .xdata$x:0000B0A0o
.text$x:00007398                 lea     ecx, [ebp-1Ch]  ; this
.text$x:0000739B                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000739B __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 endp
.text$x:0000739B
.text$x:000073A0
.text$x:000073A0 ; =============== S U B R O U T I N E =======================================
.text$x:000073A0
.text$x:000073A0
.text$x:000073A0 __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
.text$x:000073A0                                         ; DATA XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+5o
.text$x:000073A0
.text$x:000073A0 arg_4           = dword ptr  8
.text$x:000073A0
.text$x:000073A0                 mov     edx, [esp+arg_4]
.text$x:000073A4                 lea     eax, [edx+0Ch]
.text$x:000073A7                 mov     ecx, [edx-14h]
.text$x:000073AA                 xor     ecx, eax
.text$x:000073AC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000073B1                 mov     eax, offset __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$x:000073B6                 jmp     ___CxxFrameHandler3
.text$x:000073B6 __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z endp
.text$x:000073B6
.text$x:000073B6 ; ---------------------------------------------------------------------------
.text$x:000073BB                 align 4
.text$x:000073BB _text$x         ends
.text$x:000073BB
.text$mn:000073BC ; ===========================================================================
.text$mn:000073BC
.text$mn:000073BC ; Segment type: Pure code
.text$mn:000073BC ; Segment permissions: Read/Execute
.text$mn:000073BC _text$mn        segment para public 'CODE' use32
.text$mn:000073BC                 assume cs:_text$mn
.text$mn:000073BC                 ;org 73BCh
.text$mn:000073BC ; COMDAT (pick any)
.text$mn:000073BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000073BC
.text$mn:000073BC ; =============== S U B R O U T I N E =======================================
.text$mn:000073BC
.text$mn:000073BC ; Attributes: bp-based frame
.text$mn:000073BC
.text$mn:000073BC ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:000073BC                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:000073BC ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:000073BC                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+38p
.text$mn:000073BC
.text$mn:000073BC var_10          = byte ptr -10h
.text$mn:000073BC var_8           = dword ptr -8
.text$mn:000073BC var_1           = byte ptr -1
.text$mn:000073BC
.text$mn:000073BC                 push    ebp
.text$mn:000073BD                 mov     ebp, esp
.text$mn:000073BF                 sub     esp, 10h
.text$mn:000073C2                 mov     [ebp+var_8], ecx
.text$mn:000073C5                 lea     ecx, [ebp+var_1]
.text$mn:000073C8                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:000073CD                 push    1
.text$mn:000073CF                 lea     ecx, [ebp+var_1]
.text$mn:000073D2                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:000073D7                 mov     ecx, [ebp+var_8]
.text$mn:000073DA                 mov     [ecx], eax
.text$mn:000073DC                 lea     ecx, [ebp+var_10] ; this
.text$mn:000073DF                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:000073E4                 push    eax             ; int
.text$mn:000073E5                 mov     edx, [ebp+var_8]
.text$mn:000073E8                 mov     eax, [edx]
.text$mn:000073EA                 push    eax             ; void *
.text$mn:000073EB                 lea     ecx, [ebp+var_1]
.text$mn:000073EE                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:000073F3                 mov     ecx, [ebp+var_8]
.text$mn:000073F6                 mov     edx, [ecx]
.text$mn:000073F8                 mov     eax, [ebp+var_8]
.text$mn:000073FB                 mov     [edx], eax
.text$mn:000073FD                 mov     esp, ebp
.text$mn:000073FF                 pop     ebp
.text$mn:00007400                 retn
.text$mn:00007400 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:00007400
.text$mn:00007400 ; ---------------------------------------------------------------------------
.text$mn:00007401                 align 4
.text$mn:00007401 _text$mn        ends
.text$mn:00007401
.text$mn:00007404 ; ===========================================================================
.text$mn:00007404
.text$mn:00007404 ; Segment type: Pure code
.text$mn:00007404 ; Segment permissions: Read/Execute
.text$mn:00007404 _text$mn        segment para public 'CODE' use32
.text$mn:00007404                 assume cs:_text$mn
.text$mn:00007404                 ;org 7404h
.text$mn:00007404 ; COMDAT (pick any)
.text$mn:00007404                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007404
.text$mn:00007404 ; =============== S U B R O U T I N E =======================================
.text$mn:00007404
.text$mn:00007404 ; Attributes: bp-based frame
.text$mn:00007404
.text$mn:00007404 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:00007404                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:00007404 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00007404                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+38p
.text$mn:00007404
.text$mn:00007404 var_10          = byte ptr -10h
.text$mn:00007404 var_8           = dword ptr -8
.text$mn:00007404 var_1           = byte ptr -1
.text$mn:00007404
.text$mn:00007404                 push    ebp
.text$mn:00007405                 mov     ebp, esp
.text$mn:00007407                 sub     esp, 10h
.text$mn:0000740A                 mov     [ebp+var_8], ecx
.text$mn:0000740D                 lea     ecx, [ebp+var_1]
.text$mn:00007410                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00007415                 push    1
.text$mn:00007417                 lea     ecx, [ebp+var_1]
.text$mn:0000741A                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:0000741F                 mov     ecx, [ebp+var_8]
.text$mn:00007422                 mov     [ecx], eax
.text$mn:00007424                 lea     ecx, [ebp+var_10] ; this
.text$mn:00007427                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:0000742C                 push    eax             ; int
.text$mn:0000742D                 mov     edx, [ebp+var_8]
.text$mn:00007430                 mov     eax, [edx]
.text$mn:00007432                 push    eax             ; void *
.text$mn:00007433                 lea     ecx, [ebp+var_1]
.text$mn:00007436                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:0000743B                 mov     ecx, [ebp+var_8]
.text$mn:0000743E                 mov     edx, [ecx]
.text$mn:00007440                 mov     eax, [ebp+var_8]
.text$mn:00007443                 mov     [edx], eax
.text$mn:00007445                 mov     esp, ebp
.text$mn:00007447                 pop     ebp
.text$mn:00007448                 retn
.text$mn:00007448 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:00007448
.text$mn:00007448 ; ---------------------------------------------------------------------------
.text$mn:00007449                 align 4
.text$mn:00007449 _text$mn        ends
.text$mn:00007449
.text$mn:0000744C ; ===========================================================================
.text$mn:0000744C
.text$mn:0000744C ; Segment type: Pure code
.text$mn:0000744C ; Segment permissions: Read/Execute
.text$mn:0000744C _text$mn        segment para public 'CODE' use32
.text$mn:0000744C                 assume cs:_text$mn
.text$mn:0000744C                 ;org 744Ch
.text$mn:0000744C ; COMDAT (pick any)
.text$mn:0000744C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000744C
.text$mn:0000744C ; =============== S U B R O U T I N E =======================================
.text$mn:0000744C
.text$mn:0000744C ; Attributes: bp-based frame
.text$mn:0000744C
.text$mn:0000744C ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<wchar_t const *, class std::allocator<wchar_t const *>>>::_Alloc_proxy(void)
.text$mn:0000744C                 public ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAEXXZ
.text$mn:0000744C ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:0000744C                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>(std::allocator<wchar_t const *> const &)+38p
.text$mn:0000744C
.text$mn:0000744C var_10          = byte ptr -10h
.text$mn:0000744C var_8           = dword ptr -8
.text$mn:0000744C var_1           = byte ptr -1
.text$mn:0000744C
.text$mn:0000744C                 push    ebp
.text$mn:0000744D                 mov     ebp, esp
.text$mn:0000744F                 sub     esp, 10h
.text$mn:00007452                 mov     [ebp+var_8], ecx
.text$mn:00007455                 lea     ecx, [ebp+var_1]
.text$mn:00007458                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:0000745D                 push    1
.text$mn:0000745F                 lea     ecx, [ebp+var_1]
.text$mn:00007462                 call    ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::allocate(uint)
.text$mn:00007467                 mov     ecx, [ebp+var_8]
.text$mn:0000746A                 mov     [ecx], eax
.text$mn:0000746C                 lea     ecx, [ebp+var_10] ; this
.text$mn:0000746F                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:00007474                 push    eax             ; int
.text$mn:00007475                 mov     edx, [ebp+var_8]
.text$mn:00007478                 mov     eax, [edx]
.text$mn:0000747A                 push    eax             ; void *
.text$mn:0000747B                 lea     ecx, [ebp+var_1]
.text$mn:0000747E                 call    ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00007483                 mov     ecx, [ebp+var_8]
.text$mn:00007486                 mov     edx, [ecx]
.text$mn:00007488                 mov     eax, [ebp+var_8]
.text$mn:0000748B                 mov     [edx], eax
.text$mn:0000748D                 mov     esp, ebp
.text$mn:0000748F                 pop     ebp
.text$mn:00007490                 retn
.text$mn:00007490 ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:00007490
.text$mn:00007490 ; ---------------------------------------------------------------------------
.text$mn:00007491                 align 4
.text$mn:00007491 _text$mn        ends
.text$mn:00007491
.text$mn:00007494 ; ===========================================================================
.text$mn:00007494
.text$mn:00007494 ; Segment type: Pure code
.text$mn:00007494 ; Segment permissions: Read/Execute
.text$mn:00007494 _text$mn        segment para public 'CODE' use32
.text$mn:00007494                 assume cs:_text$mn
.text$mn:00007494                 ;org 7494h
.text$mn:00007494 ; COMDAT (pick any)
.text$mn:00007494                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007494
.text$mn:00007494 ; =============== S U B R O U T I N E =======================================
.text$mn:00007494
.text$mn:00007494 ; Attributes: bp-based frame
.text$mn:00007494
.text$mn:00007494 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Assign_rv(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:00007494                 public ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z
.text$mn:00007494 ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z proc near
.text$mn:00007494                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+60p
.text$mn:00007494                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+E2p
.text$mn:00007494
.text$mn:00007494 var_8           = dword ptr -8
.text$mn:00007494 var_1           = byte ptr -1
.text$mn:00007494 arg_0           = dword ptr  8
.text$mn:00007494
.text$mn:00007494                 push    ebp
.text$mn:00007495                 mov     ebp, esp
.text$mn:00007497                 sub     esp, 8
.text$mn:0000749A                 mov     [ebp+var_8], ecx
.text$mn:0000749D                 mov     eax, [ebp+arg_0]
.text$mn:000074A0                 cmp     dword ptr [eax+18h], 8
.text$mn:000074A4                 jnb     short loc_74C8
.text$mn:000074A6                 mov     ecx, [ebp+arg_0]
.text$mn:000074A9                 mov     edx, [ecx+14h]
.text$mn:000074AC                 add     edx, 1
.text$mn:000074AF                 push    edx             ; int
.text$mn:000074B0                 mov     eax, [ebp+arg_0]
.text$mn:000074B3                 add     eax, 4
.text$mn:000074B6                 push    eax             ; Src
.text$mn:000074B7                 mov     ecx, [ebp+var_8]
.text$mn:000074BA                 add     ecx, 4
.text$mn:000074BD                 push    ecx             ; Dst
.text$mn:000074BE                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:000074C3                 add     esp, 0Ch
.text$mn:000074C6                 jmp     short loc_74F3
.text$mn:000074C8 ; ---------------------------------------------------------------------------
.text$mn:000074C8
.text$mn:000074C8 loc_74C8:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+10j
.text$mn:000074C8                 mov     edx, [ebp+arg_0]
.text$mn:000074CB                 add     edx, 4
.text$mn:000074CE                 push    edx             ; int
.text$mn:000074CF                 mov     eax, [ebp+var_8]
.text$mn:000074D2                 add     eax, 4
.text$mn:000074D5                 push    eax             ; void *
.text$mn:000074D6                 lea     ecx, [ebp+var_1]
.text$mn:000074D9                 push    ecx
.text$mn:000074DA                 mov     ecx, [ebp+var_8]
.text$mn:000074DD                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000074E2                 mov     ecx, eax
.text$mn:000074E4                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:000074E9                 mov     edx, [ebp+arg_0]
.text$mn:000074EC                 mov     dword ptr [edx+4], 0
.text$mn:000074F3
.text$mn:000074F3 loc_74F3:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+32j
.text$mn:000074F3                 mov     eax, [ebp+var_8]
.text$mn:000074F6                 mov     ecx, [ebp+arg_0]
.text$mn:000074F9                 mov     edx, [ecx+14h]
.text$mn:000074FC                 mov     [eax+14h], edx
.text$mn:000074FF                 mov     eax, [ebp+var_8]
.text$mn:00007502                 mov     ecx, [ebp+arg_0]
.text$mn:00007505                 mov     edx, [ecx+18h]
.text$mn:00007508                 mov     [eax+18h], edx
.text$mn:0000750B                 push    0
.text$mn:0000750D                 push    0
.text$mn:0000750F                 mov     ecx, [ebp+arg_0]
.text$mn:00007512                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00007517                 mov     esp, ebp
.text$mn:00007519                 pop     ebp
.text$mn:0000751A                 retn    4
.text$mn:0000751A ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z endp
.text$mn:0000751A
.text$mn:0000751A ; ---------------------------------------------------------------------------
.text$mn:0000751D                 align 10h
.text$mn:0000751D _text$mn        ends
.text$mn:0000751D
.text$mn:00007520 ; ===========================================================================
.text$mn:00007520
.text$mn:00007520 ; Segment type: Pure code
.text$mn:00007520 ; Segment permissions: Read/Execute
.text$mn:00007520 _text$mn        segment para public 'CODE' use32
.text$mn:00007520                 assume cs:_text$mn
.text$mn:00007520                 ;org 7520h
.text$mn:00007520 ; COMDAT (pick any)
.text$mn:00007520                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007520
.text$mn:00007520 ; =============== S U B R O U T I N E =======================================
.text$mn:00007520
.text$mn:00007520 ; Attributes: bp-based frame
.text$mn:00007520
.text$mn:00007520 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Change_alloc(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:00007520                 public ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z
.text$mn:00007520 ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z proc near
.text$mn:00007520                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+54p
.text$mn:00007520                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5Ap
.text$mn:00007520
.text$mn:00007520 var_4           = dword ptr -4
.text$mn:00007520
.text$mn:00007520                 push    ebp
.text$mn:00007521                 mov     ebp, esp
.text$mn:00007523                 push    ecx
.text$mn:00007524                 mov     [ebp+var_4], ecx
.text$mn:00007527                 mov     esp, ebp
.text$mn:00007529                 pop     ebp
.text$mn:0000752A                 retn    4
.text$mn:0000752A ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z endp
.text$mn:0000752A
.text$mn:0000752A ; ---------------------------------------------------------------------------
.text$mn:0000752D                 align 10h
.text$mn:0000752D _text$mn        ends
.text$mn:0000752D
.text$mn:00007530 ; ===========================================================================
.text$mn:00007530
.text$mn:00007530 ; Segment type: Pure code
.text$mn:00007530 ; Segment permissions: Read/Execute
.text$mn:00007530 _text$mn        segment para public 'CODE' use32
.text$mn:00007530                 assume cs:_text$mn
.text$mn:00007530                 ;org 7530h
.text$mn:00007530 ; COMDAT (pick any)
.text$mn:00007530                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007530
.text$mn:00007530 ; =============== S U B R O U T I N E =======================================
.text$mn:00007530
.text$mn:00007530 ; Attributes: bp-based frame
.text$mn:00007530
.text$mn:00007530 ; void __thiscall std::_Iterator_base12::_Clrcont(std::_Iterator_base12 *__hidden this)
.text$mn:00007530                 public ?_Clrcont@_Iterator_base12@std@@QAEXXZ
.text$mn:00007530 ?_Clrcont@_Iterator_base12@std@@QAEXXZ proc near
.text$mn:00007530                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Orphan_range(wchar_t const * *,wchar_t const * *)+80p
.text$mn:00007530
.text$mn:00007530 var_4           = dword ptr -4
.text$mn:00007530
.text$mn:00007530                 push    ebp
.text$mn:00007531                 mov     ebp, esp
.text$mn:00007533                 push    ecx
.text$mn:00007534                 mov     [ebp+var_4], ecx
.text$mn:00007537                 mov     eax, [ebp+var_4]
.text$mn:0000753A                 mov     dword ptr [eax], 0
.text$mn:00007540                 mov     esp, ebp
.text$mn:00007542                 pop     ebp
.text$mn:00007543                 retn
.text$mn:00007543 ?_Clrcont@_Iterator_base12@std@@QAEXXZ endp
.text$mn:00007543
.text$mn:00007543 _text$mn        ends
.text$mn:00007543
.text$mn:00007544 ; ===========================================================================
.text$mn:00007544
.text$mn:00007544 ; Segment type: Pure code
.text$mn:00007544 ; Segment permissions: Read/Execute
.text$mn:00007544 _text$mn        segment para public 'CODE' use32
.text$mn:00007544                 assume cs:_text$mn
.text$mn:00007544                 ;org 7544h
.text$mn:00007544 ; COMDAT (pick any)
.text$mn:00007544                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007544
.text$mn:00007544 ; =============== S U B R O U T I N E =======================================
.text$mn:00007544
.text$mn:00007544 ; Attributes: bp-based frame
.text$mn:00007544
.text$mn:00007544 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_Iterator_base12 *)
.text$mn:00007544                 public ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z
.text$mn:00007544 ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z proc near
.text$mn:00007544                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+10p
.text$mn:00007544                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+Ep
.text$mn:00007544
.text$mn:00007544 var_4           = dword ptr -4
.text$mn:00007544 arg_0           = dword ptr  8
.text$mn:00007544
.text$mn:00007544                 push    ebp
.text$mn:00007545                 mov     ebp, esp
.text$mn:00007547                 push    ecx
.text$mn:00007548                 push    esi
.text$mn:00007549                 mov     [ebp+var_4], ecx
.text$mn:0000754C                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000754F                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00007554                 test    eax, eax
.text$mn:00007556                 jz      short loc_756E
.text$mn:00007558                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000755B                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00007560                 mov     esi, eax
.text$mn:00007562                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00007565                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000756A                 cmp     esi, eax
.text$mn:0000756C                 jz      short loc_75D6
.text$mn:0000756E
.text$mn:0000756E loc_756E:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+12j
.text$mn:0000756E                 push    0FAh ; '·'      ; unsigned int
.text$mn:00007573                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007578                 push    offset ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; "string iterators incompatible"
.text$mn:0000757D                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00007582                 add     esp, 0Ch
.text$mn:00007585                 mov     eax, offset ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ ; "Standard C++ Libraries Invalid Argument"
.text$mn:0000758A                 test    eax, eax
.text$mn:0000758C                 jz      short loc_7592
.text$mn:0000758E                 xor     ecx, ecx
.text$mn:00007590                 jnz     short loc_75B8
.text$mn:00007592
.text$mn:00007592 loc_7592:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+48j
.text$mn:00007592                 push    offset ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ ; "\"Standard C++ Libraries Invalid Argume"...
.text$mn:00007597                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:0000759C                 push    0
.text$mn:0000759E                 push    0FBh ; 'v'
.text$mn:000075A3                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000075A8                 push    2
.text$mn:000075AA                 call    __CrtDbgReportW
.text$mn:000075AF                 add     esp, 18h
.text$mn:000075B2                 cmp     eax, 1
.text$mn:000075B5                 jnz     short loc_75B8
.text$mn:000075B7                 int     3               ; Trap to Debugger
.text$mn:000075B8
.text$mn:000075B8 loc_75B8:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+4Cj
.text$mn:000075B8                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+71j
.text$mn:000075B8                 push    0
.text$mn:000075BA                 push    0FBh ; 'v'
.text$mn:000075BF                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000075C4                 push    offset ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; "std::_String_const_iterator<class std::"...
.text$mn:000075C9                 push    offset ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; "\"invalid argument\""
.text$mn:000075CE                 call    __invalid_parameter
.text$mn:000075D3                 add     esp, 14h
.text$mn:000075D6
.text$mn:000075D6 loc_75D6:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+28j
.text$mn:000075D6                 pop     esi
.text$mn:000075D7                 mov     esp, ebp
.text$mn:000075D9                 pop     ebp
.text$mn:000075DA                 retn    4
.text$mn:000075DA ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z endp
.text$mn:000075DA
.text$mn:000075DA ; ---------------------------------------------------------------------------
.text$mn:000075DD                 align 10h
.text$mn:000075DD _text$mn        ends
.text$mn:000075DD
.text$mn:000075E0 ; ===========================================================================
.text$mn:000075E0
.text$mn:000075E0 ; Segment type: Pure code
.text$mn:000075E0 ; Segment permissions: Read/Execute
.text$mn:000075E0 _text$mn        segment para public 'CODE' use32
.text$mn:000075E0                 assume cs:_text$mn
.text$mn:000075E0                 ;org 75E0h
.text$mn:000075E0 ; COMDAT (pick any)
.text$mn:000075E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000075E0
.text$mn:000075E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000075E0
.text$mn:000075E0 ; Attributes: bp-based frame
.text$mn:000075E0
.text$mn:000075E0 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Copy(unsigned int, unsigned int)
.text$mn:000075E0                 public ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:000075E0 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$mn:000075E0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+37p
.text$mn:000075E0
.text$mn:000075E0 var_20          = dword ptr -20h
.text$mn:000075E0 var_1C          = dword ptr -1Ch
.text$mn:000075E0 var_18          = dword ptr -18h
.text$mn:000075E0 var_11          = byte ptr -11h
.text$mn:000075E0 var_10          = dword ptr -10h
.text$mn:000075E0 var_C           = byte ptr -0Ch
.text$mn:000075E0 var_4           = dword ptr -4
.text$mn:000075E0 arg_0           = dword ptr  8
.text$mn:000075E0
.text$mn:000075E0 ; FUNCTION CHUNK AT .text$mn:00007702 SIZE 00000009 BYTES
.text$mn:000075E0
.text$mn:000075E0                 push    ebp
.text$mn:000075E1                 mov     ebp, esp
.text$mn:000075E3                 push    0FFFFFFFFh
.text$mn:000075E5                 push    offset __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:000075EA                 mov     eax, large fs:0
.text$mn:000075F0                 push    eax
.text$mn:000075F1                 push    ecx
.text$mn:000075F2                 sub     esp, 10h
.text$mn:000075F5                 push    ebx
.text$mn:000075F6                 push    esi
.text$mn:000075F7                 push    edi
.text$mn:000075F8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000075FD                 xor     eax, ebp
.text$mn:000075FF                 push    eax
.text$mn:00007600                 lea     eax, [ebp+var_C]
.text$mn:00007603                 mov     large fs:0, eax
.text$mn:00007609                 mov     [ebp+var_10], esp
.text$mn:0000760C                 mov     [ebp+var_18], ecx
.text$mn:0000760F                 mov     eax, [ebp+arg_0]
.text$mn:00007612                 or      eax, 0Fh
.text$mn:00007615                 mov     [ebp+var_1C], eax
.text$mn:00007618                 mov     ecx, [ebp+var_18]
.text$mn:0000761B                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00007620                 cmp     eax, [ebp+var_1C]
.text$mn:00007623                 jnb     short loc_762D
.text$mn:00007625                 mov     ecx, [ebp+arg_0]
.text$mn:00007628                 mov     [ebp+var_1C], ecx
.text$mn:0000762B                 jmp     short loc_767F
.text$mn:0000762D ; ---------------------------------------------------------------------------
.text$mn:0000762D
.text$mn:0000762D loc_762D:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+43j
.text$mn:0000762D                 mov     edx, [ebp+var_18]
.text$mn:00007630                 mov     ecx, [edx+18h]
.text$mn:00007633                 shr     ecx, 1
.text$mn:00007635                 mov     eax, [ebp+var_1C]
.text$mn:00007638                 xor     edx, edx
.text$mn:0000763A                 mov     esi, 3
.text$mn:0000763F                 div     esi
.text$mn:00007641                 cmp     ecx, eax
.text$mn:00007643                 ja      short loc_7647
.text$mn:00007645                 jmp     short loc_767F
.text$mn:00007647 ; ---------------------------------------------------------------------------
.text$mn:00007647
.text$mn:00007647 loc_7647:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+63j
.text$mn:00007647                 mov     ecx, [ebp+var_18]
.text$mn:0000764A                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:0000764F                 mov     edx, [ebp+var_18]
.text$mn:00007652                 mov     ecx, [edx+18h]
.text$mn:00007655                 shr     ecx, 1
.text$mn:00007657                 sub     eax, ecx
.text$mn:00007659                 mov     edx, [ebp+var_18]
.text$mn:0000765C                 cmp     [edx+18h], eax
.text$mn:0000765F                 ja      short loc_7674
.text$mn:00007661                 mov     eax, [ebp+var_18]
.text$mn:00007664                 mov     ecx, [eax+18h]
.text$mn:00007667                 shr     ecx, 1
.text$mn:00007669                 mov     edx, [ebp+var_18]
.text$mn:0000766C                 add     ecx, [edx+18h]
.text$mn:0000766F                 mov     [ebp+var_1C], ecx
.text$mn:00007672                 jmp     short loc_767F
.text$mn:00007674 ; ---------------------------------------------------------------------------
.text$mn:00007674
.text$mn:00007674 loc_7674:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+7Fj
.text$mn:00007674                 mov     ecx, [ebp+var_18]
.text$mn:00007677                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:0000767C                 mov     [ebp+var_1C], eax
.text$mn:0000767F
.text$mn:0000767F loc_767F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+4Bj
.text$mn:0000767F                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+65j ...
.text$mn:0000767F                 mov     [ebp+var_4], 0
.text$mn:00007686                 mov     eax, [ebp+var_1C]
.text$mn:00007689                 add     eax, 1
.text$mn:0000768C                 push    eax
.text$mn:0000768D                 lea     ecx, [ebp+var_11]
.text$mn:00007690                 push    ecx
.text$mn:00007691                 mov     ecx, [ebp+var_18]
.text$mn:00007694                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00007699                 mov     ecx, eax
.text$mn:0000769B                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:000076A0                 mov     [ebp+var_20], eax
.text$mn:000076A3                 jmp     short loc_7702
.text$mn:000076A3 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$mn:000076A3
.text$mn:000076A5
.text$mn:000076A5 ; =============== S U B R O U T I N E =======================================
.text$mn:000076A5
.text$mn:000076A5
.text$mn:000076A5 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
.text$mn:000076A5                                         ; DATA XREF: .xdata$x:0000B208o
.text$mn:000076A5
.text$mn:000076A5 ; FUNCTION CHUNK AT .text$mn:000076EC SIZE 00000009 BYTES
.text$mn:000076A5 ; FUNCTION CHUNK AT .text$mn:000076FC SIZE 00000006 BYTES
.text$mn:000076A5
.text$mn:000076A5                 mov     [ebp-10h], esp
.text$mn:000076A8                 mov     edx, [ebp+8]
.text$mn:000076AB                 mov     [ebp-1Ch], edx
.text$mn:000076AE                 mov     byte ptr [ebp-4], 2
.text$mn:000076B2                 mov     eax, [ebp-1Ch]
.text$mn:000076B5                 add     eax, 1
.text$mn:000076B8                 push    eax
.text$mn:000076B9                 lea     ecx, [ebp-12h]
.text$mn:000076BC                 push    ecx
.text$mn:000076BD                 mov     ecx, [ebp-18h]
.text$mn:000076C0                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000076C5                 mov     ecx, eax
.text$mn:000076C7                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:000076CC                 mov     [ebp-20h], eax
.text$mn:000076CF                 jmp     short loc_76EC
.text$mn:000076CF __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 endp
.text$mn:000076CF
.text$mn:000076D1
.text$mn:000076D1 ; =============== S U B R O U T I N E =======================================
.text$mn:000076D1
.text$mn:000076D1 ; Attributes: noreturn
.text$mn:000076D1
.text$mn:000076D1 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
.text$mn:000076D1                                         ; DATA XREF: .xdata$x:0000B218o
.text$mn:000076D1                 push    0               ; Size
.text$mn:000076D3                 push    1               ; char
.text$mn:000076D5                 mov     ecx, [ebp-18h]
.text$mn:000076D8                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:000076DD                 push    0
.text$mn:000076DF                 push    0
.text$mn:000076E1                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:000076E1 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 endp
.text$mn:000076E1
.text$mn:000076E6 ; ---------------------------------------------------------------------------
.text$mn:000076E6                 mov     eax, offset $LN17
.text$mn:000076EB                 retn
.text$mn:000076EC ; ---------------------------------------------------------------------------
.text$mn:000076EC ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:000076EC
.text$mn:000076EC loc_76EC:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+2Aj
.text$mn:000076EC                 mov     dword ptr [ebp-4], 1
.text$mn:000076F3                 jmp     short loc_76FC
.text$mn:000076F3 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:000076F5
.text$mn:000076F5 ; =============== S U B R O U T I N E =======================================
.text$mn:000076F5
.text$mn:000076F5
.text$mn:000076F5 $LN17           proc near               ; DATA XREF: .text$mn:000076E6o
.text$mn:000076F5                 mov     dword ptr [ebp-4], 1
.text$mn:000076F5 $LN17           endp ; sp-analysis failed
.text$mn:000076F5
.text$mn:000076FC ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:000076FC
.text$mn:000076FC loc_76FC:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+4Ej
.text$mn:000076FC                 mov     eax, offset $LN19
.text$mn:00007701                 retn
.text$mn:00007701 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00007702 ; ---------------------------------------------------------------------------
.text$mn:00007702 ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00007702
.text$mn:00007702 loc_7702:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+C3j
.text$mn:00007702                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007709                 jmp     short loc_7712
.text$mn:00007709 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:0000770B
.text$mn:0000770B ; =============== S U B R O U T I N E =======================================
.text$mn:0000770B
.text$mn:0000770B
.text$mn:0000770B $LN19           proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:loc_76FCo
.text$mn:0000770B                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00007712
.text$mn:00007712 loc_7712:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+129j
.text$mn:00007712                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:00007716                 jbe     short loc_7731
.text$mn:00007718                 mov     edx, [ebp+0Ch]
.text$mn:0000771B                 push    edx             ; Size
.text$mn:0000771C                 mov     ecx, [ebp-18h]
.text$mn:0000771F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00007724                 push    eax             ; Src
.text$mn:00007725                 mov     eax, [ebp-20h]
.text$mn:00007728                 push    eax             ; Dst
.text$mn:00007729                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:0000772E                 add     esp, 0Ch
.text$mn:00007731
.text$mn:00007731 loc_7731:                               ; CODE XREF: $LN19+Bj
.text$mn:00007731                 push    0               ; Size
.text$mn:00007733                 push    1               ; char
.text$mn:00007735                 mov     ecx, [ebp-18h]
.text$mn:00007738                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:0000773D                 lea     ecx, [ebp-20h]
.text$mn:00007740                 push    ecx             ; int
.text$mn:00007741                 mov     edx, [ebp-18h]
.text$mn:00007744                 add     edx, 4
.text$mn:00007747                 push    edx             ; void *
.text$mn:00007748                 lea     eax, [ebp-13h]
.text$mn:0000774B                 push    eax
.text$mn:0000774C                 mov     ecx, [ebp-18h]
.text$mn:0000774F                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00007754                 mov     ecx, eax
.text$mn:00007756                 call    ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)
.text$mn:0000775B                 mov     ecx, [ebp-18h]
.text$mn:0000775E                 mov     edx, [ebp-1Ch]
.text$mn:00007761                 mov     [ecx+18h], edx
.text$mn:00007764                 mov     eax, [ebp+0Ch]
.text$mn:00007767                 push    eax
.text$mn:00007768                 mov     ecx, [ebp-18h]
.text$mn:0000776B                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00007770                 mov     ecx, [ebp-0Ch]
.text$mn:00007773                 mov     large fs:0, ecx
.text$mn:0000777A                 pop     ecx
.text$mn:0000777B                 pop     edi
.text$mn:0000777C                 pop     esi
.text$mn:0000777D                 pop     ebx
.text$mn:0000777E                 mov     esp, ebp
.text$mn:00007780                 pop     ebp
.text$mn:00007781                 retn    8
.text$mn:00007781 $LN19           endp ; sp-analysis failed
.text$mn:00007781
.text$mn:00007781 _text$mn        ends
.text$mn:00007781
.text$x:00007784 ; ===========================================================================
.text$x:00007784
.text$x:00007784 ; Segment type: Pure code
.text$x:00007784 ; Segment permissions: Read/Execute
.text$x:00007784 _text$x         segment para public 'CODE' use32
.text$x:00007784                 assume cs:_text$x
.text$x:00007784                 ;org 7784h
.text$x:00007784 ; COMDAT (pick associative to section at 75E0)
.text$x:00007784                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007784
.text$x:00007784 ; =============== S U B R O U T I N E =======================================
.text$x:00007784
.text$x:00007784
.text$x:00007784 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$x:00007784                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+5o
.text$x:00007784
.text$x:00007784 arg_4           = dword ptr  8
.text$x:00007784
.text$x:00007784                 mov     edx, [esp+arg_4]
.text$x:00007788                 lea     eax, [edx+0Ch]
.text$x:0000778B                 mov     ecx, [edx-24h]
.text$x:0000778E                 xor     ecx, eax
.text$x:00007790                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007795                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$x:0000779A                 jmp     ___CxxFrameHandler3
.text$x:0000779A __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$x:0000779A
.text$x:0000779A ; ---------------------------------------------------------------------------
.text$x:0000779F                 align 10h
.text$x:0000779F _text$x         ends
.text$x:0000779F
.text$mn:000077A0 ; ===========================================================================
.text$mn:000077A0
.text$mn:000077A0 ; Segment type: Pure code
.text$mn:000077A0 ; Segment permissions: Read/Execute
.text$mn:000077A0 _text$mn        segment para public 'CODE' use32
.text$mn:000077A0                 assume cs:_text$mn
.text$mn:000077A0                 ;org 77A0h
.text$mn:000077A0 ; COMDAT (pick any)
.text$mn:000077A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000077A0
.text$mn:000077A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000077A0
.text$mn:000077A0 ; Attributes: bp-based frame
.text$mn:000077A0
.text$mn:000077A0 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Copy(unsigned int, unsigned int)
.text$mn:000077A0                 public ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:000077A0 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$mn:000077A0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+37p
.text$mn:000077A0
.text$mn:000077A0 var_20          = dword ptr -20h
.text$mn:000077A0 var_1C          = dword ptr -1Ch
.text$mn:000077A0 var_18          = dword ptr -18h
.text$mn:000077A0 var_11          = byte ptr -11h
.text$mn:000077A0 var_10          = dword ptr -10h
.text$mn:000077A0 var_C           = byte ptr -0Ch
.text$mn:000077A0 var_4           = dword ptr -4
.text$mn:000077A0 arg_0           = dword ptr  8
.text$mn:000077A0
.text$mn:000077A0 ; FUNCTION CHUNK AT .text$mn:000078C2 SIZE 00000009 BYTES
.text$mn:000077A0
.text$mn:000077A0                 push    ebp
.text$mn:000077A1                 mov     ebp, esp
.text$mn:000077A3                 push    0FFFFFFFFh
.text$mn:000077A5                 push    offset __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:000077AA                 mov     eax, large fs:0
.text$mn:000077B0                 push    eax
.text$mn:000077B1                 push    ecx
.text$mn:000077B2                 sub     esp, 10h
.text$mn:000077B5                 push    ebx
.text$mn:000077B6                 push    esi
.text$mn:000077B7                 push    edi
.text$mn:000077B8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000077BD                 xor     eax, ebp
.text$mn:000077BF                 push    eax
.text$mn:000077C0                 lea     eax, [ebp+var_C]
.text$mn:000077C3                 mov     large fs:0, eax
.text$mn:000077C9                 mov     [ebp+var_10], esp
.text$mn:000077CC                 mov     [ebp+var_18], ecx
.text$mn:000077CF                 mov     eax, [ebp+arg_0]
.text$mn:000077D2                 or      eax, 7
.text$mn:000077D5                 mov     [ebp+var_1C], eax
.text$mn:000077D8                 mov     ecx, [ebp+var_18]
.text$mn:000077DB                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:000077E0                 cmp     eax, [ebp+var_1C]
.text$mn:000077E3                 jnb     short loc_77ED
.text$mn:000077E5                 mov     ecx, [ebp+arg_0]
.text$mn:000077E8                 mov     [ebp+var_1C], ecx
.text$mn:000077EB                 jmp     short loc_783F
.text$mn:000077ED ; ---------------------------------------------------------------------------
.text$mn:000077ED
.text$mn:000077ED loc_77ED:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+43j
.text$mn:000077ED                 mov     edx, [ebp+var_18]
.text$mn:000077F0                 mov     ecx, [edx+18h]
.text$mn:000077F3                 shr     ecx, 1
.text$mn:000077F5                 mov     eax, [ebp+var_1C]
.text$mn:000077F8                 xor     edx, edx
.text$mn:000077FA                 mov     esi, 3
.text$mn:000077FF                 div     esi
.text$mn:00007801                 cmp     ecx, eax
.text$mn:00007803                 ja      short loc_7807
.text$mn:00007805                 jmp     short loc_783F
.text$mn:00007807 ; ---------------------------------------------------------------------------
.text$mn:00007807
.text$mn:00007807 loc_7807:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+63j
.text$mn:00007807                 mov     ecx, [ebp+var_18]
.text$mn:0000780A                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:0000780F                 mov     edx, [ebp+var_18]
.text$mn:00007812                 mov     ecx, [edx+18h]
.text$mn:00007815                 shr     ecx, 1
.text$mn:00007817                 sub     eax, ecx
.text$mn:00007819                 mov     edx, [ebp+var_18]
.text$mn:0000781C                 cmp     [edx+18h], eax
.text$mn:0000781F                 ja      short loc_7834
.text$mn:00007821                 mov     eax, [ebp+var_18]
.text$mn:00007824                 mov     ecx, [eax+18h]
.text$mn:00007827                 shr     ecx, 1
.text$mn:00007829                 mov     edx, [ebp+var_18]
.text$mn:0000782C                 add     ecx, [edx+18h]
.text$mn:0000782F                 mov     [ebp+var_1C], ecx
.text$mn:00007832                 jmp     short loc_783F
.text$mn:00007834 ; ---------------------------------------------------------------------------
.text$mn:00007834
.text$mn:00007834 loc_7834:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+7Fj
.text$mn:00007834                 mov     ecx, [ebp+var_18]
.text$mn:00007837                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:0000783C                 mov     [ebp+var_1C], eax
.text$mn:0000783F
.text$mn:0000783F loc_783F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+4Bj
.text$mn:0000783F                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+65j ...
.text$mn:0000783F                 mov     [ebp+var_4], 0
.text$mn:00007846                 mov     eax, [ebp+var_1C]
.text$mn:00007849                 add     eax, 1
.text$mn:0000784C                 push    eax
.text$mn:0000784D                 lea     ecx, [ebp+var_11]
.text$mn:00007850                 push    ecx
.text$mn:00007851                 mov     ecx, [ebp+var_18]
.text$mn:00007854                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00007859                 mov     ecx, eax
.text$mn:0000785B                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:00007860                 mov     [ebp+var_20], eax
.text$mn:00007863                 jmp     short loc_78C2
.text$mn:00007863 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$mn:00007863
.text$mn:00007865
.text$mn:00007865 ; =============== S U B R O U T I N E =======================================
.text$mn:00007865
.text$mn:00007865
.text$mn:00007865 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 proc near
.text$mn:00007865                                         ; DATA XREF: .xdata$x:0000B6CCo
.text$mn:00007865
.text$mn:00007865 ; FUNCTION CHUNK AT .text$mn:000078AC SIZE 00000009 BYTES
.text$mn:00007865 ; FUNCTION CHUNK AT .text$mn:000078BC SIZE 00000006 BYTES
.text$mn:00007865
.text$mn:00007865                 mov     [ebp-10h], esp
.text$mn:00007868                 mov     edx, [ebp+8]
.text$mn:0000786B                 mov     [ebp-1Ch], edx
.text$mn:0000786E                 mov     byte ptr [ebp-4], 2
.text$mn:00007872                 mov     eax, [ebp-1Ch]
.text$mn:00007875                 add     eax, 1
.text$mn:00007878                 push    eax
.text$mn:00007879                 lea     ecx, [ebp-12h]
.text$mn:0000787C                 push    ecx
.text$mn:0000787D                 mov     ecx, [ebp-18h]
.text$mn:00007880                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00007885                 mov     ecx, eax
.text$mn:00007887                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:0000788C                 mov     [ebp-20h], eax
.text$mn:0000788F                 jmp     short loc_78AC
.text$mn:0000788F __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 endp
.text$mn:0000788F
.text$mn:00007891
.text$mn:00007891 ; =============== S U B R O U T I N E =======================================
.text$mn:00007891
.text$mn:00007891 ; Attributes: noreturn
.text$mn:00007891
.text$mn:00007891 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 proc near
.text$mn:00007891                                         ; DATA XREF: .xdata$x:0000B6DCo
.text$mn:00007891                 push    0
.text$mn:00007893                 push    1
.text$mn:00007895                 mov     ecx, [ebp-18h]
.text$mn:00007898                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000789D                 push    0
.text$mn:0000789F                 push    0
.text$mn:000078A1                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:000078A1 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 endp
.text$mn:000078A1
.text$mn:000078A6 ; ---------------------------------------------------------------------------
.text$mn:000078A6                 mov     eax, offset $LN17_0
.text$mn:000078AB                 retn
.text$mn:000078AC ; ---------------------------------------------------------------------------
.text$mn:000078AC ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:000078AC
.text$mn:000078AC loc_78AC:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+2Aj
.text$mn:000078AC                 mov     dword ptr [ebp-4], 1
.text$mn:000078B3                 jmp     short loc_78BC
.text$mn:000078B3 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:000078B5
.text$mn:000078B5 ; =============== S U B R O U T I N E =======================================
.text$mn:000078B5
.text$mn:000078B5
.text$mn:000078B5 $LN17_0         proc near               ; DATA XREF: .text$mn:000078A6o
.text$mn:000078B5                 mov     dword ptr [ebp-4], 1
.text$mn:000078B5 $LN17_0         endp ; sp-analysis failed
.text$mn:000078B5
.text$mn:000078BC ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:000078BC
.text$mn:000078BC loc_78BC:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+4Ej
.text$mn:000078BC                 mov     eax, offset $LN19_0
.text$mn:000078C1                 retn
.text$mn:000078C1 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:000078C2 ; ---------------------------------------------------------------------------
.text$mn:000078C2 ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:000078C2
.text$mn:000078C2 loc_78C2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+C3j
.text$mn:000078C2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000078C9                 jmp     short loc_78D2
.text$mn:000078C9 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:000078CB
.text$mn:000078CB ; =============== S U B R O U T I N E =======================================
.text$mn:000078CB
.text$mn:000078CB
.text$mn:000078CB $LN19_0         proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0:loc_78BCo
.text$mn:000078CB                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:000078D2
.text$mn:000078D2 loc_78D2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+129j
.text$mn:000078D2                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:000078D6                 jbe     short loc_78F1
.text$mn:000078D8                 mov     edx, [ebp+0Ch]
.text$mn:000078DB                 push    edx             ; int
.text$mn:000078DC                 mov     ecx, [ebp-18h]
.text$mn:000078DF                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000078E4                 push    eax             ; Src
.text$mn:000078E5                 mov     eax, [ebp-20h]
.text$mn:000078E8                 push    eax             ; Dst
.text$mn:000078E9                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:000078EE                 add     esp, 0Ch
.text$mn:000078F1
.text$mn:000078F1 loc_78F1:                               ; CODE XREF: $LN19_0+Bj
.text$mn:000078F1                 push    0
.text$mn:000078F3                 push    1
.text$mn:000078F5                 mov     ecx, [ebp-18h]
.text$mn:000078F8                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000078FD                 lea     ecx, [ebp-20h]
.text$mn:00007900                 push    ecx             ; int
.text$mn:00007901                 mov     edx, [ebp-18h]
.text$mn:00007904                 add     edx, 4
.text$mn:00007907                 push    edx             ; void *
.text$mn:00007908                 lea     eax, [ebp-13h]
.text$mn:0000790B                 push    eax
.text$mn:0000790C                 mov     ecx, [ebp-18h]
.text$mn:0000790F                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00007914                 mov     ecx, eax
.text$mn:00007916                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:0000791B                 mov     ecx, [ebp-18h]
.text$mn:0000791E                 mov     edx, [ebp-1Ch]
.text$mn:00007921                 mov     [ecx+18h], edx
.text$mn:00007924                 mov     eax, [ebp+0Ch]
.text$mn:00007927                 push    eax
.text$mn:00007928                 mov     ecx, [ebp-18h]
.text$mn:0000792B                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00007930                 mov     ecx, [ebp-0Ch]
.text$mn:00007933                 mov     large fs:0, ecx
.text$mn:0000793A                 pop     ecx
.text$mn:0000793B                 pop     edi
.text$mn:0000793C                 pop     esi
.text$mn:0000793D                 pop     ebx
.text$mn:0000793E                 mov     esp, ebp
.text$mn:00007940                 pop     ebp
.text$mn:00007941                 retn    8
.text$mn:00007941 $LN19_0         endp ; sp-analysis failed
.text$mn:00007941
.text$mn:00007941 _text$mn        ends
.text$mn:00007941
.text$x:00007944 ; ===========================================================================
.text$x:00007944
.text$x:00007944 ; Segment type: Pure code
.text$x:00007944 ; Segment permissions: Read/Execute
.text$x:00007944 _text$x         segment para public 'CODE' use32
.text$x:00007944                 assume cs:_text$x
.text$x:00007944                 ;org 7944h
.text$x:00007944 ; COMDAT (pick associative to section at 77A0)
.text$x:00007944                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007944
.text$x:00007944 ; =============== S U B R O U T I N E =======================================
.text$x:00007944
.text$x:00007944
.text$x:00007944 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$x:00007944                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+5o
.text$x:00007944
.text$x:00007944 arg_4           = dword ptr  8
.text$x:00007944
.text$x:00007944                 mov     edx, [esp+arg_4]
.text$x:00007948                 lea     eax, [edx+0Ch]
.text$x:0000794B                 mov     ecx, [edx-24h]
.text$x:0000794E                 xor     ecx, eax
.text$x:00007950                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007955                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$x:0000795A                 jmp     ___CxxFrameHandler3
.text$x:0000795A __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$x:0000795A
.text$x:0000795A ; ---------------------------------------------------------------------------
.text$x:0000795F                 align 10h
.text$x:0000795F _text$x         ends
.text$x:0000795F
.text$mn:00007960 ; ===========================================================================
.text$mn:00007960
.text$mn:00007960 ; Segment type: Pure code
.text$mn:00007960 ; Segment permissions: Read/Execute
.text$mn:00007960 _text$mn        segment para public 'CODE' use32
.text$mn:00007960                 assume cs:_text$mn
.text$mn:00007960                 ;org 7960h
.text$mn:00007960 ; COMDAT (pick any)
.text$mn:00007960                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007960
.text$mn:00007960 ; =============== S U B R O U T I N E =======================================
.text$mn:00007960
.text$mn:00007960 ; Attributes: bp-based frame
.text$mn:00007960
.text$mn:00007960 ; protected: void __thiscall std::vector<wchar_t const *, class std::allocator<wchar_t const *>>::_Destroy(wchar_t const * *, wchar_t const * *)
.text$mn:00007960                 public ?_Destroy@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXPAPB_W0@Z
.text$mn:00007960 ?_Destroy@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXPAPB_W0@Z proc near
.text$mn:00007960                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Reallocate(uint)+CBp
.text$mn:00007960                                         ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Tidy(void)+2Bp ...
.text$mn:00007960
.text$mn:00007960 var_8           = dword ptr -8
.text$mn:00007960 var_1           = byte ptr -1
.text$mn:00007960 arg_0           = dword ptr  8
.text$mn:00007960 arg_4           = dword ptr  0Ch
.text$mn:00007960
.text$mn:00007960                 push    ebp
.text$mn:00007961                 mov     ebp, esp
.text$mn:00007963                 sub     esp, 8
.text$mn:00007966                 mov     [ebp+var_8], ecx
.text$mn:00007969                 lea     eax, [ebp+var_1]
.text$mn:0000796C                 push    eax
.text$mn:0000796D                 mov     ecx, [ebp+var_8]
.text$mn:00007970                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PB_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Getal(void)
.text$mn:00007975                 lea     ecx, [ebp+var_1]
.text$mn:00007978                 push    ecx
.text$mn:00007979                 mov     edx, [ebp+arg_4]
.text$mn:0000797C                 push    edx
.text$mn:0000797D                 mov     eax, [ebp+arg_0]
.text$mn:00007980                 push    eax
.text$mn:00007981                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@@std@@YAXPAPB_W0AAU?$_Wrap_alloc@V?$allocator@PB_W@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<wchar_t const *>>>(wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>> &)
.text$mn:00007986                 add     esp, 0Ch
.text$mn:00007989                 mov     esp, ebp
.text$mn:0000798B                 pop     ebp
.text$mn:0000798C                 retn    8
.text$mn:0000798C ?_Destroy@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXPAPB_W0@Z endp
.text$mn:0000798C
.text$mn:0000798C ; ---------------------------------------------------------------------------
.text$mn:0000798F                 align 10h
.text$mn:0000798F _text$mn        ends
.text$mn:0000798F
.text$mn:00007990 ; ===========================================================================
.text$mn:00007990
.text$mn:00007990 ; Segment type: Pure code
.text$mn:00007990 ; Segment permissions: Read/Execute
.text$mn:00007990 _text$mn        segment para public 'CODE' use32
.text$mn:00007990                 assume cs:_text$mn
.text$mn:00007990                 ;org 7990h
.text$mn:00007990 ; COMDAT (pick any)
.text$mn:00007990                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007990
.text$mn:00007990 ; =============== S U B R O U T I N E =======================================
.text$mn:00007990
.text$mn:00007990 ; Attributes: bp-based frame
.text$mn:00007990
.text$mn:00007990 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Eos(unsigned int)
.text$mn:00007990                 public ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
.text$mn:00007990 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc near
.text$mn:00007990                                         ; CODE XREF: $LN19+60p
.text$mn:00007990                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+83p ...
.text$mn:00007990
.text$mn:00007990 var_8           = dword ptr -8
.text$mn:00007990 var_1           = byte ptr -1
.text$mn:00007990 arg_0           = dword ptr  8
.text$mn:00007990
.text$mn:00007990                 push    ebp
.text$mn:00007991                 mov     ebp, esp
.text$mn:00007993                 sub     esp, 8
.text$mn:00007996                 mov     [ebp+var_8], ecx
.text$mn:00007999                 mov     [ebp+var_1], 0
.text$mn:0000799D                 mov     eax, [ebp+var_8]
.text$mn:000079A0                 mov     ecx, [ebp+arg_0]
.text$mn:000079A3                 mov     [eax+14h], ecx
.text$mn:000079A6                 lea     edx, [ebp+var_1]
.text$mn:000079A9                 push    edx
.text$mn:000079AA                 mov     ecx, [ebp+var_8]
.text$mn:000079AD                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000079B2                 add     eax, [ebp+arg_0]
.text$mn:000079B5                 push    eax
.text$mn:000079B6                 call    ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign(char &,char const &)
.text$mn:000079BB                 add     esp, 8
.text$mn:000079BE                 mov     esp, ebp
.text$mn:000079C0                 pop     ebp
.text$mn:000079C1                 retn    4
.text$mn:000079C1 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z endp
.text$mn:000079C1
.text$mn:000079C1 _text$mn        ends
.text$mn:000079C1
.text$mn:000079C4 ; ===========================================================================
.text$mn:000079C4
.text$mn:000079C4 ; Segment type: Pure code
.text$mn:000079C4 ; Segment permissions: Read/Execute
.text$mn:000079C4 _text$mn        segment para public 'CODE' use32
.text$mn:000079C4                 assume cs:_text$mn
.text$mn:000079C4                 ;org 79C4h
.text$mn:000079C4 ; COMDAT (pick any)
.text$mn:000079C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000079C4
.text$mn:000079C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000079C4
.text$mn:000079C4 ; Attributes: bp-based frame
.text$mn:000079C4
.text$mn:000079C4 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Eos(unsigned int)
.text$mn:000079C4                 public ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
.text$mn:000079C4 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z proc near
.text$mn:000079C4                                         ; CODE XREF: $LN19_0+60p
.text$mn:000079C4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+83p ...
.text$mn:000079C4
.text$mn:000079C4 var_8           = dword ptr -8
.text$mn:000079C4 var_2           = word ptr -2
.text$mn:000079C4 arg_0           = dword ptr  8
.text$mn:000079C4
.text$mn:000079C4                 push    ebp
.text$mn:000079C5                 mov     ebp, esp
.text$mn:000079C7                 sub     esp, 8
.text$mn:000079CA                 mov     [ebp+var_8], ecx
.text$mn:000079CD                 xor     eax, eax
.text$mn:000079CF                 mov     [ebp+var_2], ax
.text$mn:000079D3                 mov     ecx, [ebp+var_8]
.text$mn:000079D6                 mov     edx, [ebp+arg_0]
.text$mn:000079D9                 mov     [ecx+14h], edx
.text$mn:000079DC                 lea     eax, [ebp+var_2]
.text$mn:000079DF                 push    eax
.text$mn:000079E0                 mov     ecx, [ebp+var_8]
.text$mn:000079E3                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000079E8                 mov     ecx, [ebp+arg_0]
.text$mn:000079EB                 lea     edx, [eax+ecx*2]
.text$mn:000079EE                 push    edx
.text$mn:000079EF                 call    ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ; std::char_traits<wchar_t>::assign(wchar_t &,wchar_t const &)
.text$mn:000079F4                 add     esp, 8
.text$mn:000079F7                 mov     esp, ebp
.text$mn:000079F9                 pop     ebp
.text$mn:000079FA                 retn    4
.text$mn:000079FA ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z endp
.text$mn:000079FA
.text$mn:000079FA ; ---------------------------------------------------------------------------
.text$mn:000079FD                 align 10h
.text$mn:000079FD _text$mn        ends
.text$mn:000079FD
.text$mn:00007A00 ; ===========================================================================
.text$mn:00007A00
.text$mn:00007A00 ; Segment type: Pure code
.text$mn:00007A00 ; Segment permissions: Read/Execute
.text$mn:00007A00 _text$mn        segment para public 'CODE' use32
.text$mn:00007A00                 assume cs:_text$mn
.text$mn:00007A00                 ;org 7A00h
.text$mn:00007A00 ; COMDAT (pick any)
.text$mn:00007A00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007A00
.text$mn:00007A00 ; =============== S U B R O U T I N E =======================================
.text$mn:00007A00
.text$mn:00007A00 ; Attributes: bp-based frame
.text$mn:00007A00
.text$mn:00007A00 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Free_proxy(void)
.text$mn:00007A00                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:00007A00 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00007A00                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+30p
.text$mn:00007A00
.text$mn:00007A00 var_8           = dword ptr -8
.text$mn:00007A00 var_1           = byte ptr -1
.text$mn:00007A00
.text$mn:00007A00                 push    ebp
.text$mn:00007A01                 mov     ebp, esp
.text$mn:00007A03                 sub     esp, 8
.text$mn:00007A06                 mov     [ebp+var_8], ecx
.text$mn:00007A09                 lea     ecx, [ebp+var_1]
.text$mn:00007A0C                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00007A11                 mov     ecx, [ebp+var_8] ; this
.text$mn:00007A14                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00007A19                 mov     eax, [ebp+var_8]
.text$mn:00007A1C                 mov     ecx, [eax]
.text$mn:00007A1E                 push    ecx
.text$mn:00007A1F                 lea     ecx, [ebp+var_1]
.text$mn:00007A22                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:00007A27                 push    1               ; int
.text$mn:00007A29                 mov     edx, [ebp+var_8]
.text$mn:00007A2C                 mov     eax, [edx]
.text$mn:00007A2E                 push    eax             ; void *
.text$mn:00007A2F                 lea     ecx, [ebp+var_1]
.text$mn:00007A32                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:00007A37                 mov     ecx, [ebp+var_8]
.text$mn:00007A3A                 mov     dword ptr [ecx], 0
.text$mn:00007A40                 mov     esp, ebp
.text$mn:00007A42                 pop     ebp
.text$mn:00007A43                 retn
.text$mn:00007A43 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:00007A43
.text$mn:00007A43 _text$mn        ends
.text$mn:00007A43
.text$mn:00007A44 ; ===========================================================================
.text$mn:00007A44
.text$mn:00007A44 ; Segment type: Pure code
.text$mn:00007A44 ; Segment permissions: Read/Execute
.text$mn:00007A44 _text$mn        segment para public 'CODE' use32
.text$mn:00007A44                 assume cs:_text$mn
.text$mn:00007A44                 ;org 7A44h
.text$mn:00007A44 ; COMDAT (pick any)
.text$mn:00007A44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007A44
.text$mn:00007A44 ; =============== S U B R O U T I N E =======================================
.text$mn:00007A44
.text$mn:00007A44 ; Attributes: bp-based frame
.text$mn:00007A44
.text$mn:00007A44 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:00007A44                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:00007A44 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00007A44                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+30p
.text$mn:00007A44
.text$mn:00007A44 var_8           = dword ptr -8
.text$mn:00007A44 var_1           = byte ptr -1
.text$mn:00007A44
.text$mn:00007A44                 push    ebp
.text$mn:00007A45                 mov     ebp, esp
.text$mn:00007A47                 sub     esp, 8
.text$mn:00007A4A                 mov     [ebp+var_8], ecx
.text$mn:00007A4D                 lea     ecx, [ebp+var_1]
.text$mn:00007A50                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00007A55                 mov     ecx, [ebp+var_8] ; this
.text$mn:00007A58                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00007A5D                 mov     eax, [ebp+var_8]
.text$mn:00007A60                 mov     ecx, [eax]
.text$mn:00007A62                 push    ecx
.text$mn:00007A63                 lea     ecx, [ebp+var_1]
.text$mn:00007A66                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:00007A6B                 push    1               ; int
.text$mn:00007A6D                 mov     edx, [ebp+var_8]
.text$mn:00007A70                 mov     eax, [edx]
.text$mn:00007A72                 push    eax             ; void *
.text$mn:00007A73                 lea     ecx, [ebp+var_1]
.text$mn:00007A76                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:00007A7B                 mov     ecx, [ebp+var_8]
.text$mn:00007A7E                 mov     dword ptr [ecx], 0
.text$mn:00007A84                 mov     esp, ebp
.text$mn:00007A86                 pop     ebp
.text$mn:00007A87                 retn
.text$mn:00007A87 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:00007A87
.text$mn:00007A87 _text$mn        ends
.text$mn:00007A87
.text$mn:00007A88 ; ===========================================================================
.text$mn:00007A88
.text$mn:00007A88 ; Segment type: Pure code
.text$mn:00007A88 ; Segment permissions: Read/Execute
.text$mn:00007A88 _text$mn        segment para public 'CODE' use32
.text$mn:00007A88                 assume cs:_text$mn
.text$mn:00007A88                 ;org 7A88h
.text$mn:00007A88 ; COMDAT (pick any)
.text$mn:00007A88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007A88
.text$mn:00007A88 ; =============== S U B R O U T I N E =======================================
.text$mn:00007A88
.text$mn:00007A88 ; Attributes: bp-based frame
.text$mn:00007A88
.text$mn:00007A88 ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<wchar_t const *, class std::allocator<wchar_t const *>>>::_Free_proxy(void)
.text$mn:00007A88                 public ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAEXXZ
.text$mn:00007A88 ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00007A88                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::~_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>(void)+30p
.text$mn:00007A88
.text$mn:00007A88 var_8           = dword ptr -8
.text$mn:00007A88 var_1           = byte ptr -1
.text$mn:00007A88
.text$mn:00007A88                 push    ebp
.text$mn:00007A89                 mov     ebp, esp
.text$mn:00007A8B                 sub     esp, 8
.text$mn:00007A8E                 mov     [ebp+var_8], ecx
.text$mn:00007A91                 lea     ecx, [ebp+var_1]
.text$mn:00007A94                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:00007A99                 mov     ecx, [ebp+var_8] ; this
.text$mn:00007A9C                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00007AA1                 mov     eax, [ebp+var_8]
.text$mn:00007AA4                 mov     ecx, [eax]
.text$mn:00007AA6                 push    ecx
.text$mn:00007AA7                 lea     ecx, [ebp+var_1]
.text$mn:00007AAA                 call    ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:00007AAF                 push    1               ; int
.text$mn:00007AB1                 mov     edx, [ebp+var_8]
.text$mn:00007AB4                 mov     eax, [edx]
.text$mn:00007AB6                 push    eax             ; void *
.text$mn:00007AB7                 lea     ecx, [ebp+var_1]
.text$mn:00007ABA                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::deallocate(std::_Container_proxy *,uint)
.text$mn:00007ABF                 mov     ecx, [ebp+var_8]
.text$mn:00007AC2                 mov     dword ptr [ecx], 0
.text$mn:00007AC8                 mov     esp, ebp
.text$mn:00007ACA                 pop     ebp
.text$mn:00007ACB                 retn
.text$mn:00007ACB ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:00007ACB
.text$mn:00007ACB _text$mn        ends
.text$mn:00007ACB
.text$mn:00007ACC ; ===========================================================================
.text$mn:00007ACC
.text$mn:00007ACC ; Segment type: Pure code
.text$mn:00007ACC ; Segment permissions: Read/Execute
.text$mn:00007ACC _text$mn        segment para public 'CODE' use32
.text$mn:00007ACC                 assume cs:_text$mn
.text$mn:00007ACC                 ;org 7ACCh
.text$mn:00007ACC ; COMDAT (pick any)
.text$mn:00007ACC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007ACC
.text$mn:00007ACC ; =============== S U B R O U T I N E =======================================
.text$mn:00007ACC
.text$mn:00007ACC ; Attributes: bp-based frame
.text$mn:00007ACC
.text$mn:00007ACC ; public: struct std::_Wrap_alloc<class std::allocator<char>> __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Getal(void)const
.text$mn:00007ACC                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
.text$mn:00007ACC ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
.text$mn:00007ACC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+B4p
.text$mn:00007ACC                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+1Bp ...
.text$mn:00007ACC
.text$mn:00007ACC var_4           = dword ptr -4
.text$mn:00007ACC arg_0           = dword ptr  8
.text$mn:00007ACC
.text$mn:00007ACC                 push    ebp
.text$mn:00007ACD                 mov     ebp, esp
.text$mn:00007ACF                 push    ecx
.text$mn:00007AD0                 mov     [ebp+var_4], ecx
.text$mn:00007AD3                 mov     ecx, [ebp+arg_0]
.text$mn:00007AD6                 call    ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)
.text$mn:00007ADB                 mov     eax, [ebp+arg_0]
.text$mn:00007ADE                 mov     esp, ebp
.text$mn:00007AE0                 pop     ebp
.text$mn:00007AE1                 retn    4
.text$mn:00007AE1 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ endp
.text$mn:00007AE1
.text$mn:00007AE1 _text$mn        ends
.text$mn:00007AE1
.text$mn:00007AE4 ; ===========================================================================
.text$mn:00007AE4
.text$mn:00007AE4 ; Segment type: Pure code
.text$mn:00007AE4 ; Segment permissions: Read/Execute
.text$mn:00007AE4 _text$mn        segment para public 'CODE' use32
.text$mn:00007AE4                 assume cs:_text$mn
.text$mn:00007AE4                 ;org 7AE4h
.text$mn:00007AE4 ; COMDAT (pick any)
.text$mn:00007AE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007AE4
.text$mn:00007AE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007AE4
.text$mn:00007AE4 ; Attributes: bp-based frame
.text$mn:00007AE4
.text$mn:00007AE4 ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Getal(void)const
.text$mn:00007AE4                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
.text$mn:00007AE4 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ proc near
.text$mn:00007AE4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Fp
.text$mn:00007AE4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+33p ...
.text$mn:00007AE4
.text$mn:00007AE4 var_4           = dword ptr -4
.text$mn:00007AE4 arg_0           = dword ptr  8
.text$mn:00007AE4
.text$mn:00007AE4                 push    ebp
.text$mn:00007AE5                 mov     ebp, esp
.text$mn:00007AE7                 push    ecx
.text$mn:00007AE8                 mov     [ebp+var_4], ecx
.text$mn:00007AEB                 mov     ecx, [ebp+arg_0]
.text$mn:00007AEE                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)
.text$mn:00007AF3                 mov     eax, [ebp+arg_0]
.text$mn:00007AF6                 mov     esp, ebp
.text$mn:00007AF8                 pop     ebp
.text$mn:00007AF9                 retn    4
.text$mn:00007AF9 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ endp
.text$mn:00007AF9
.text$mn:00007AF9 _text$mn        ends
.text$mn:00007AF9
.text$mn:00007AFC ; ===========================================================================
.text$mn:00007AFC
.text$mn:00007AFC ; Segment type: Pure code
.text$mn:00007AFC ; Segment permissions: Read/Execute
.text$mn:00007AFC _text$mn        segment para public 'CODE' use32
.text$mn:00007AFC                 assume cs:_text$mn
.text$mn:00007AFC                 ;org 7AFCh
.text$mn:00007AFC ; COMDAT (pick any)
.text$mn:00007AFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007AFC
.text$mn:00007AFC ; =============== S U B R O U T I N E =======================================
.text$mn:00007AFC
.text$mn:00007AFC ; Attributes: bp-based frame
.text$mn:00007AFC
.text$mn:00007AFC ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t const *>> __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<wchar_t const *, class std::allocator<wchar_t const *>>>::_Getal(void)const
.text$mn:00007AFC                 public ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PB_W@std@@@2@XZ
.text$mn:00007AFC ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PB_W@std@@@2@XZ proc near
.text$mn:00007AFC                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Umove<wchar_t const * *>(wchar_t const * *,wchar_t const * *,wchar_t const * *)+10p
.text$mn:00007AFC                                         ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Destroy(wchar_t const * *,wchar_t const * *)+10p ...
.text$mn:00007AFC
.text$mn:00007AFC var_4           = dword ptr -4
.text$mn:00007AFC arg_0           = dword ptr  8
.text$mn:00007AFC
.text$mn:00007AFC                 push    ebp
.text$mn:00007AFD                 mov     ebp, esp
.text$mn:00007AFF                 push    ecx
.text$mn:00007B00                 mov     [ebp+var_4], ecx
.text$mn:00007B03                 mov     ecx, [ebp+arg_0]
.text$mn:00007B06                 call    ??0?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t const *>>::_Wrap_alloc<std::allocator<wchar_t const *>>(void)
.text$mn:00007B0B                 mov     eax, [ebp+arg_0]
.text$mn:00007B0E                 mov     esp, ebp
.text$mn:00007B10                 pop     ebp
.text$mn:00007B11                 retn    4
.text$mn:00007B11 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PB_W@std@@@2@XZ endp
.text$mn:00007B11
.text$mn:00007B11 _text$mn        ends
.text$mn:00007B11
.text$mn:00007B14 ; ===========================================================================
.text$mn:00007B14
.text$mn:00007B14 ; Segment type: Pure code
.text$mn:00007B14 ; Segment permissions: Read/Execute
.text$mn:00007B14 _text$mn        segment para public 'CODE' use32
.text$mn:00007B14                 assume cs:_text$mn
.text$mn:00007B14                 ;org 7B14h
.text$mn:00007B14 ; COMDAT (pick any)
.text$mn:00007B14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B14
.text$mn:00007B14 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B14
.text$mn:00007B14 ; Attributes: bp-based frame
.text$mn:00007B14
.text$mn:00007B14 ; const struct std::_Container_base12 *__thiscall std::_Iterator_base12::_Getcont(std::_Iterator_base12 *__hidden this)
.text$mn:00007B14                 public ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
.text$mn:00007B14 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ proc near
.text$mn:00007B14                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+Bp
.text$mn:00007B14                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+20p ...
.text$mn:00007B14
.text$mn:00007B14 var_8           = dword ptr -8
.text$mn:00007B14 var_4           = dword ptr -4
.text$mn:00007B14
.text$mn:00007B14                 push    ebp
.text$mn:00007B15                 mov     ebp, esp
.text$mn:00007B17                 sub     esp, 8
.text$mn:00007B1A                 mov     [ebp+var_4], ecx
.text$mn:00007B1D                 mov     eax, [ebp+var_4]
.text$mn:00007B20                 cmp     dword ptr [eax], 0
.text$mn:00007B23                 jnz     short loc_7B2E
.text$mn:00007B25                 mov     [ebp+var_8], 0
.text$mn:00007B2C                 jmp     short loc_7B38
.text$mn:00007B2E ; ---------------------------------------------------------------------------
.text$mn:00007B2E
.text$mn:00007B2E loc_7B2E:                               ; CODE XREF: std::_Iterator_base12::_Getcont(void)+Fj
.text$mn:00007B2E                 mov     ecx, [ebp+var_4]
.text$mn:00007B31                 mov     edx, [ecx]
.text$mn:00007B33                 mov     eax, [edx]
.text$mn:00007B35                 mov     [ebp+var_8], eax
.text$mn:00007B38
.text$mn:00007B38 loc_7B38:                               ; CODE XREF: std::_Iterator_base12::_Getcont(void)+18j
.text$mn:00007B38                 mov     eax, [ebp+var_8]
.text$mn:00007B3B                 mov     esp, ebp
.text$mn:00007B3D                 pop     ebp
.text$mn:00007B3E                 retn
.text$mn:00007B3E ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ endp
.text$mn:00007B3E
.text$mn:00007B3E ; ---------------------------------------------------------------------------
.text$mn:00007B3F                 align 10h
.text$mn:00007B3F _text$mn        ends
.text$mn:00007B3F
.text$mn:00007B40 ; ===========================================================================
.text$mn:00007B40
.text$mn:00007B40 ; Segment type: Pure code
.text$mn:00007B40 ; Segment permissions: Read/Execute
.text$mn:00007B40 _text$mn        segment para public 'CODE' use32
.text$mn:00007B40                 assume cs:_text$mn
.text$mn:00007B40                 ;org 7B40h
.text$mn:00007B40 ; COMDAT (pick any)
.text$mn:00007B40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B40
.text$mn:00007B40 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B40
.text$mn:00007B40 ; Attributes: bp-based frame
.text$mn:00007B40
.text$mn:00007B40 ; struct std::_Iterator_base12 **__thiscall std::_Container_base12::_Getpfirst(std::_Container_base12 *__hidden this)
.text$mn:00007B40                 public ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
.text$mn:00007B40 ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ proc near
.text$mn:00007B40                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Orphan_range(wchar_t const * *,wchar_t const * *)+3Cp
.text$mn:00007B40
.text$mn:00007B40 var_8           = dword ptr -8
.text$mn:00007B40 var_4           = dword ptr -4
.text$mn:00007B40
.text$mn:00007B40                 push    ebp
.text$mn:00007B41                 mov     ebp, esp
.text$mn:00007B43                 sub     esp, 8
.text$mn:00007B46                 mov     [ebp+var_4], ecx
.text$mn:00007B49                 mov     eax, [ebp+var_4]
.text$mn:00007B4C                 cmp     dword ptr [eax], 0
.text$mn:00007B4F                 jnz     short loc_7B5A
.text$mn:00007B51                 mov     [ebp+var_8], 0
.text$mn:00007B58                 jmp     short loc_7B65
.text$mn:00007B5A ; ---------------------------------------------------------------------------
.text$mn:00007B5A
.text$mn:00007B5A loc_7B5A:                               ; CODE XREF: std::_Container_base12::_Getpfirst(void)+Fj
.text$mn:00007B5A                 mov     ecx, [ebp+var_4]
.text$mn:00007B5D                 mov     edx, [ecx]
.text$mn:00007B5F                 add     edx, 4
.text$mn:00007B62                 mov     [ebp+var_8], edx
.text$mn:00007B65
.text$mn:00007B65 loc_7B65:                               ; CODE XREF: std::_Container_base12::_Getpfirst(void)+18j
.text$mn:00007B65                 mov     eax, [ebp+var_8]
.text$mn:00007B68                 mov     esp, ebp
.text$mn:00007B6A                 pop     ebp
.text$mn:00007B6B                 retn
.text$mn:00007B6B ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ endp
.text$mn:00007B6B
.text$mn:00007B6B _text$mn        ends
.text$mn:00007B6B
.text$mn:00007B6C ; ===========================================================================
.text$mn:00007B6C
.text$mn:00007B6C ; Segment type: Pure code
.text$mn:00007B6C ; Segment permissions: Read/Execute
.text$mn:00007B6C _text$mn        segment para public 'CODE' use32
.text$mn:00007B6C                 assume cs:_text$mn
.text$mn:00007B6C                 ;org 7B6Ch
.text$mn:00007B6C ; COMDAT (pick any)
.text$mn:00007B6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B6C
.text$mn:00007B6C ; =============== S U B R O U T I N E =======================================
.text$mn:00007B6C
.text$mn:00007B6C ; Attributes: bp-based frame
.text$mn:00007B6C
.text$mn:00007B6C ; struct std::_Iterator_base12 **__thiscall std::_Iterator_base12::_Getpnext(std::_Iterator_base12 *__hidden this)
.text$mn:00007B6C                 public ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
.text$mn:00007B6C ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ proc near
.text$mn:00007B6C                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Orphan_range(wchar_t const * *,wchar_t const * *)+71p
.text$mn:00007B6C                                         ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Orphan_range(wchar_t const * *,wchar_t const * *)+8Ap
.text$mn:00007B6C
.text$mn:00007B6C var_4           = dword ptr -4
.text$mn:00007B6C
.text$mn:00007B6C                 push    ebp
.text$mn:00007B6D                 mov     ebp, esp
.text$mn:00007B6F                 push    ecx
.text$mn:00007B70                 mov     [ebp+var_4], ecx
.text$mn:00007B73                 mov     eax, [ebp+var_4]
.text$mn:00007B76                 add     eax, 4
.text$mn:00007B79                 mov     esp, ebp
.text$mn:00007B7B                 pop     ebp
.text$mn:00007B7C                 retn
.text$mn:00007B7C ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ endp
.text$mn:00007B7C
.text$mn:00007B7C ; ---------------------------------------------------------------------------
.text$mn:00007B7D                 align 10h
.text$mn:00007B7D _text$mn        ends
.text$mn:00007B7D
.text$mn:00007B80 ; ===========================================================================
.text$mn:00007B80
.text$mn:00007B80 ; Segment type: Pure code
.text$mn:00007B80 ; Segment permissions: Read/Execute
.text$mn:00007B80 _text$mn        segment para public 'CODE' use32
.text$mn:00007B80                 assume cs:_text$mn
.text$mn:00007B80                 ;org 7B80h
.text$mn:00007B80 ; COMDAT (pick any)
.text$mn:00007B80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B80
.text$mn:00007B80 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B80
.text$mn:00007B80 ; Attributes: bp-based frame
.text$mn:00007B80
.text$mn:00007B80 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Grow(unsigned int, bool)
.text$mn:00007B80                 public ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
.text$mn:00007B80 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
.text$mn:00007B80                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+6Ap
.text$mn:00007B80                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+5Fp
.text$mn:00007B80
.text$mn:00007B80 var_C           = dword ptr -0Ch
.text$mn:00007B80 Size            = dword ptr -8
.text$mn:00007B80 var_4           = dword ptr -4
.text$mn:00007B80 arg_0           = dword ptr  8
.text$mn:00007B80 arg_4           = byte ptr  0Ch
.text$mn:00007B80
.text$mn:00007B80                 push    ebp
.text$mn:00007B81                 mov     ebp, esp
.text$mn:00007B83                 sub     esp, 0Ch
.text$mn:00007B86                 mov     [ebp+var_4], ecx
.text$mn:00007B89                 mov     ecx, [ebp+var_4]
.text$mn:00007B8C                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00007B91                 cmp     eax, [ebp+arg_0]
.text$mn:00007B94                 jnb     short loc_7B9E
.text$mn:00007B96                 mov     ecx, [ebp+var_4]
.text$mn:00007B99                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:00007B9E
.text$mn:00007B9E loc_7B9E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+14j
.text$mn:00007B9E                 mov     eax, [ebp+var_4]
.text$mn:00007BA1                 mov     ecx, [eax+18h]
.text$mn:00007BA4                 cmp     ecx, [ebp+arg_0]
.text$mn:00007BA7                 jnb     short loc_7BBE
.text$mn:00007BA9                 mov     edx, [ebp+var_4]
.text$mn:00007BAC                 mov     eax, [edx+14h]
.text$mn:00007BAF                 push    eax
.text$mn:00007BB0                 mov     ecx, [ebp+arg_0]
.text$mn:00007BB3                 push    ecx
.text$mn:00007BB4                 mov     ecx, [ebp+var_4]
.text$mn:00007BB7                 call    ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)
.text$mn:00007BBC                 jmp     short loc_7C08
.text$mn:00007BBE ; ---------------------------------------------------------------------------
.text$mn:00007BBE
.text$mn:00007BBE loc_7BBE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+27j
.text$mn:00007BBE                 movzx   edx, [ebp+arg_4]
.text$mn:00007BC2                 test    edx, edx
.text$mn:00007BC4                 jz      short loc_7BF8
.text$mn:00007BC6                 cmp     [ebp+arg_0], 10h
.text$mn:00007BCA                 jnb     short loc_7BF8
.text$mn:00007BCC                 mov     eax, [ebp+var_4]
.text$mn:00007BCF                 mov     ecx, [ebp+arg_0]
.text$mn:00007BD2                 cmp     ecx, [eax+14h]
.text$mn:00007BD5                 jnb     short loc_7BDF
.text$mn:00007BD7                 mov     edx, [ebp+arg_0]
.text$mn:00007BDA                 mov     [ebp+Size], edx
.text$mn:00007BDD                 jmp     short loc_7BE8
.text$mn:00007BDF ; ---------------------------------------------------------------------------
.text$mn:00007BDF
.text$mn:00007BDF loc_7BDF:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+55j
.text$mn:00007BDF                 mov     eax, [ebp+var_4]
.text$mn:00007BE2                 mov     ecx, [eax+14h]
.text$mn:00007BE5                 mov     [ebp+Size], ecx
.text$mn:00007BE8
.text$mn:00007BE8 loc_7BE8:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+5Dj
.text$mn:00007BE8                 mov     edx, [ebp+Size]
.text$mn:00007BEB                 push    edx             ; Size
.text$mn:00007BEC                 push    1               ; char
.text$mn:00007BEE                 mov     ecx, [ebp+var_4]
.text$mn:00007BF1                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00007BF6                 jmp     short loc_7C08
.text$mn:00007BF8 ; ---------------------------------------------------------------------------
.text$mn:00007BF8
.text$mn:00007BF8 loc_7BF8:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+44j
.text$mn:00007BF8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+4Aj
.text$mn:00007BF8                 cmp     [ebp+arg_0], 0
.text$mn:00007BFC                 jnz     short loc_7C08
.text$mn:00007BFE                 push    0
.text$mn:00007C00                 mov     ecx, [ebp+var_4]
.text$mn:00007C03                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00007C08
.text$mn:00007C08 loc_7C08:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+3Cj
.text$mn:00007C08                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+76j ...
.text$mn:00007C08                 cmp     [ebp+arg_0], 0
.text$mn:00007C0C                 jbe     short loc_7C17
.text$mn:00007C0E                 mov     [ebp+var_C], 1
.text$mn:00007C15                 jmp     short loc_7C1E
.text$mn:00007C17 ; ---------------------------------------------------------------------------
.text$mn:00007C17
.text$mn:00007C17 loc_7C17:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+8Cj
.text$mn:00007C17                 mov     [ebp+var_C], 0
.text$mn:00007C1E
.text$mn:00007C1E loc_7C1E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+95j
.text$mn:00007C1E                 mov     al, byte ptr [ebp+var_C]
.text$mn:00007C21                 mov     esp, ebp
.text$mn:00007C23                 pop     ebp
.text$mn:00007C24                 retn    8
.text$mn:00007C24 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z endp
.text$mn:00007C24
.text$mn:00007C24 ; ---------------------------------------------------------------------------
.text$mn:00007C27                 align 4
.text$mn:00007C27 _text$mn        ends
.text$mn:00007C27
.text$mn:00007C28 ; ===========================================================================
.text$mn:00007C28
.text$mn:00007C28 ; Segment type: Pure code
.text$mn:00007C28 ; Segment permissions: Read/Execute
.text$mn:00007C28 _text$mn        segment para public 'CODE' use32
.text$mn:00007C28                 assume cs:_text$mn
.text$mn:00007C28                 ;org 7C28h
.text$mn:00007C28 ; COMDAT (pick any)
.text$mn:00007C28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007C28
.text$mn:00007C28 ; =============== S U B R O U T I N E =======================================
.text$mn:00007C28
.text$mn:00007C28 ; Attributes: bp-based frame
.text$mn:00007C28
.text$mn:00007C28 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Grow(unsigned int, bool)
.text$mn:00007C28                 public ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z
.text$mn:00007C28 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z proc near
.text$mn:00007C28                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+6Dp
.text$mn:00007C28                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+8Ep ...
.text$mn:00007C28
.text$mn:00007C28 var_C           = dword ptr -0Ch
.text$mn:00007C28 var_8           = dword ptr -8
.text$mn:00007C28 var_4           = dword ptr -4
.text$mn:00007C28 arg_0           = dword ptr  8
.text$mn:00007C28 arg_4           = byte ptr  0Ch
.text$mn:00007C28
.text$mn:00007C28                 push    ebp
.text$mn:00007C29                 mov     ebp, esp
.text$mn:00007C2B                 sub     esp, 0Ch
.text$mn:00007C2E                 mov     [ebp+var_4], ecx
.text$mn:00007C31                 mov     ecx, [ebp+var_4]
.text$mn:00007C34                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00007C39                 cmp     eax, [ebp+arg_0]
.text$mn:00007C3C                 jnb     short loc_7C46
.text$mn:00007C3E                 mov     ecx, [ebp+var_4]
.text$mn:00007C41                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:00007C46
.text$mn:00007C46 loc_7C46:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+14j
.text$mn:00007C46                 mov     eax, [ebp+var_4]
.text$mn:00007C49                 mov     ecx, [eax+18h]
.text$mn:00007C4C                 cmp     ecx, [ebp+arg_0]
.text$mn:00007C4F                 jnb     short loc_7C66
.text$mn:00007C51                 mov     edx, [ebp+var_4]
.text$mn:00007C54                 mov     eax, [edx+14h]
.text$mn:00007C57                 push    eax
.text$mn:00007C58                 mov     ecx, [ebp+arg_0]
.text$mn:00007C5B                 push    ecx
.text$mn:00007C5C                 mov     ecx, [ebp+var_4]
.text$mn:00007C5F                 call    ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)
.text$mn:00007C64                 jmp     short loc_7CB0
.text$mn:00007C66 ; ---------------------------------------------------------------------------
.text$mn:00007C66
.text$mn:00007C66 loc_7C66:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+27j
.text$mn:00007C66                 movzx   edx, [ebp+arg_4]
.text$mn:00007C6A                 test    edx, edx
.text$mn:00007C6C                 jz      short loc_7CA0
.text$mn:00007C6E                 cmp     [ebp+arg_0], 8
.text$mn:00007C72                 jnb     short loc_7CA0
.text$mn:00007C74                 mov     eax, [ebp+var_4]
.text$mn:00007C77                 mov     ecx, [ebp+arg_0]
.text$mn:00007C7A                 cmp     ecx, [eax+14h]
.text$mn:00007C7D                 jnb     short loc_7C87
.text$mn:00007C7F                 mov     edx, [ebp+arg_0]
.text$mn:00007C82                 mov     [ebp+var_8], edx
.text$mn:00007C85                 jmp     short loc_7C90
.text$mn:00007C87 ; ---------------------------------------------------------------------------
.text$mn:00007C87
.text$mn:00007C87 loc_7C87:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+55j
.text$mn:00007C87                 mov     eax, [ebp+var_4]
.text$mn:00007C8A                 mov     ecx, [eax+14h]
.text$mn:00007C8D                 mov     [ebp+var_8], ecx
.text$mn:00007C90
.text$mn:00007C90 loc_7C90:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+5Dj
.text$mn:00007C90                 mov     edx, [ebp+var_8]
.text$mn:00007C93                 push    edx
.text$mn:00007C94                 push    1
.text$mn:00007C96                 mov     ecx, [ebp+var_4]
.text$mn:00007C99                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00007C9E                 jmp     short loc_7CB0
.text$mn:00007CA0 ; ---------------------------------------------------------------------------
.text$mn:00007CA0
.text$mn:00007CA0 loc_7CA0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+44j
.text$mn:00007CA0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+4Aj
.text$mn:00007CA0                 cmp     [ebp+arg_0], 0
.text$mn:00007CA4                 jnz     short loc_7CB0
.text$mn:00007CA6                 push    0
.text$mn:00007CA8                 mov     ecx, [ebp+var_4]
.text$mn:00007CAB                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00007CB0
.text$mn:00007CB0 loc_7CB0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+3Cj
.text$mn:00007CB0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+76j ...
.text$mn:00007CB0                 cmp     [ebp+arg_0], 0
.text$mn:00007CB4                 jbe     short loc_7CBF
.text$mn:00007CB6                 mov     [ebp+var_C], 1
.text$mn:00007CBD                 jmp     short loc_7CC6
.text$mn:00007CBF ; ---------------------------------------------------------------------------
.text$mn:00007CBF
.text$mn:00007CBF loc_7CBF:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+8Cj
.text$mn:00007CBF                 mov     [ebp+var_C], 0
.text$mn:00007CC6
.text$mn:00007CC6 loc_7CC6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+95j
.text$mn:00007CC6                 mov     al, byte ptr [ebp+var_C]
.text$mn:00007CC9                 mov     esp, ebp
.text$mn:00007CCB                 pop     ebp
.text$mn:00007CCC                 retn    8
.text$mn:00007CCC ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z endp
.text$mn:00007CCC
.text$mn:00007CCC ; ---------------------------------------------------------------------------
.text$mn:00007CCF                 align 10h
.text$mn:00007CCF _text$mn        ends
.text$mn:00007CCF
.text$mn:00007CD0 ; ===========================================================================
.text$mn:00007CD0
.text$mn:00007CD0 ; Segment type: Pure code
.text$mn:00007CD0 ; Segment permissions: Read/Execute
.text$mn:00007CD0 _text$mn        segment para public 'CODE' use32
.text$mn:00007CD0                 assume cs:_text$mn
.text$mn:00007CD0                 ;org 7CD0h
.text$mn:00007CD0 ; COMDAT (pick any)
.text$mn:00007CD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007CD0
.text$mn:00007CD0 ; =============== S U B R O U T I N E =======================================
.text$mn:00007CD0
.text$mn:00007CD0 ; Attributes: bp-based frame
.text$mn:00007CD0
.text$mn:00007CD0 ; protected: unsigned int __thiscall std::vector<wchar_t const *, class std::allocator<wchar_t const *>>::_Grow_to(unsigned int)const
.text$mn:00007CD0                 public ?_Grow_to@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEII@Z
.text$mn:00007CD0 ?_Grow_to@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEII@Z proc near
.text$mn:00007CD0                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Reserve(uint)+45p
.text$mn:00007CD0
.text$mn:00007CD0 var_C           = dword ptr -0Ch
.text$mn:00007CD0 var_8           = dword ptr -8
.text$mn:00007CD0 var_4           = dword ptr -4
.text$mn:00007CD0 arg_0           = dword ptr  8
.text$mn:00007CD0
.text$mn:00007CD0                 push    ebp
.text$mn:00007CD1                 mov     ebp, esp
.text$mn:00007CD3                 sub     esp, 0Ch
.text$mn:00007CD6                 mov     [ebp+var_8], ecx
.text$mn:00007CD9                 mov     ecx, [ebp+var_8]
.text$mn:00007CDC                 call    ?capacity@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::capacity(void)
.text$mn:00007CE1                 mov     [ebp+var_4], eax
.text$mn:00007CE4                 mov     ecx, [ebp+var_8]
.text$mn:00007CE7                 call    ?max_size@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::max_size(void)
.text$mn:00007CEC                 mov     ecx, [ebp+var_4]
.text$mn:00007CEF                 shr     ecx, 1
.text$mn:00007CF1                 sub     eax, ecx
.text$mn:00007CF3                 cmp     eax, [ebp+var_4]
.text$mn:00007CF6                 jnb     short loc_7D01
.text$mn:00007CF8                 mov     [ebp+var_C], 0
.text$mn:00007CFF                 jmp     short loc_7D0C
.text$mn:00007D01 ; ---------------------------------------------------------------------------
.text$mn:00007D01
.text$mn:00007D01 loc_7D01:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Grow_to(uint)+26j
.text$mn:00007D01                 mov     edx, [ebp+var_4]
.text$mn:00007D04                 shr     edx, 1
.text$mn:00007D06                 add     edx, [ebp+var_4]
.text$mn:00007D09                 mov     [ebp+var_C], edx
.text$mn:00007D0C
.text$mn:00007D0C loc_7D0C:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Grow_to(uint)+2Fj
.text$mn:00007D0C                 mov     eax, [ebp+var_C]
.text$mn:00007D0F                 mov     [ebp+var_4], eax
.text$mn:00007D12                 mov     ecx, [ebp+var_4]
.text$mn:00007D15                 cmp     ecx, [ebp+arg_0]
.text$mn:00007D18                 jnb     short loc_7D20
.text$mn:00007D1A                 mov     edx, [ebp+arg_0]
.text$mn:00007D1D                 mov     [ebp+var_4], edx
.text$mn:00007D20
.text$mn:00007D20 loc_7D20:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Grow_to(uint)+48j
.text$mn:00007D20                 mov     eax, [ebp+var_4]
.text$mn:00007D23                 mov     esp, ebp
.text$mn:00007D25                 pop     ebp
.text$mn:00007D26                 retn    4
.text$mn:00007D26 ?_Grow_to@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEII@Z endp
.text$mn:00007D26
.text$mn:00007D26 ; ---------------------------------------------------------------------------
.text$mn:00007D29                 align 4
.text$mn:00007D29 _text$mn        ends
.text$mn:00007D29
.text$mn:00007D2C ; ===========================================================================
.text$mn:00007D2C
.text$mn:00007D2C ; Segment type: Pure code
.text$mn:00007D2C ; Segment permissions: Read/Execute
.text$mn:00007D2C _text$mn        segment para public 'CODE' use32
.text$mn:00007D2C                 assume cs:_text$mn
.text$mn:00007D2C                 ;org 7D2Ch
.text$mn:00007D2C ; COMDAT (pick any)
.text$mn:00007D2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007D2C
.text$mn:00007D2C ; =============== S U B R O U T I N E =======================================
.text$mn:00007D2C
.text$mn:00007D2C ; Attributes: bp-based frame
.text$mn:00007D2C
.text$mn:00007D2C ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Inside(char const *)
.text$mn:00007D2C                 public ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
.text$mn:00007D2C ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
.text$mn:00007D2C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+2Ap
.text$mn:00007D2C
.text$mn:00007D2C var_4           = dword ptr -4
.text$mn:00007D2C arg_0           = dword ptr  8
.text$mn:00007D2C
.text$mn:00007D2C                 push    ebp
.text$mn:00007D2D                 mov     ebp, esp
.text$mn:00007D2F                 push    ecx
.text$mn:00007D30                 mov     [ebp+var_4], ecx
.text$mn:00007D33                 cmp     [ebp+arg_0], 0
.text$mn:00007D37                 jz      short loc_7D59
.text$mn:00007D39                 mov     ecx, [ebp+var_4]
.text$mn:00007D3C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00007D41                 cmp     [ebp+arg_0], eax
.text$mn:00007D44                 jb      short loc_7D59
.text$mn:00007D46                 mov     ecx, [ebp+var_4]
.text$mn:00007D49                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00007D4E                 mov     ecx, [ebp+var_4]
.text$mn:00007D51                 add     eax, [ecx+14h]
.text$mn:00007D54                 cmp     eax, [ebp+arg_0]
.text$mn:00007D57                 ja      short loc_7D5F
.text$mn:00007D59
.text$mn:00007D59 loc_7D59:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+Bj
.text$mn:00007D59                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+18j
.text$mn:00007D59                 xor     al, al
.text$mn:00007D5B                 jmp     short loc_7D61
.text$mn:00007D5D ; ---------------------------------------------------------------------------
.text$mn:00007D5D                 jmp     short loc_7D61
.text$mn:00007D5F ; ---------------------------------------------------------------------------
.text$mn:00007D5F
.text$mn:00007D5F loc_7D5F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Bj
.text$mn:00007D5F                 mov     al, 1
.text$mn:00007D61
.text$mn:00007D61 loc_7D61:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Fj
.text$mn:00007D61                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+31j
.text$mn:00007D61                 mov     esp, ebp
.text$mn:00007D63                 pop     ebp
.text$mn:00007D64                 retn    4
.text$mn:00007D64 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z endp
.text$mn:00007D64
.text$mn:00007D64 ; ---------------------------------------------------------------------------
.text$mn:00007D67                 align 4
.text$mn:00007D67 _text$mn        ends
.text$mn:00007D67
.text$mn:00007D68 ; ===========================================================================
.text$mn:00007D68
.text$mn:00007D68 ; Segment type: Pure code
.text$mn:00007D68 ; Segment permissions: Read/Execute
.text$mn:00007D68 _text$mn        segment para public 'CODE' use32
.text$mn:00007D68                 assume cs:_text$mn
.text$mn:00007D68                 ;org 7D68h
.text$mn:00007D68 ; COMDAT (pick any)
.text$mn:00007D68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007D68
.text$mn:00007D68 ; =============== S U B R O U T I N E =======================================
.text$mn:00007D68
.text$mn:00007D68 ; Attributes: bp-based frame
.text$mn:00007D68
.text$mn:00007D68 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:00007D68                 public ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z
.text$mn:00007D68 ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z proc near
.text$mn:00007D68                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+2Cp
.text$mn:00007D68                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+2Ap ...
.text$mn:00007D68
.text$mn:00007D68 var_4           = dword ptr -4
.text$mn:00007D68 arg_0           = dword ptr  8
.text$mn:00007D68
.text$mn:00007D68                 push    ebp
.text$mn:00007D69                 mov     ebp, esp
.text$mn:00007D6B                 push    ecx
.text$mn:00007D6C                 mov     [ebp+var_4], ecx
.text$mn:00007D6F                 cmp     [ebp+arg_0], 0
.text$mn:00007D73                 jz      short loc_7D98
.text$mn:00007D75                 mov     ecx, [ebp+var_4]
.text$mn:00007D78                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00007D7D                 cmp     [ebp+arg_0], eax
.text$mn:00007D80                 jb      short loc_7D98
.text$mn:00007D82                 mov     ecx, [ebp+var_4]
.text$mn:00007D85                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00007D8A                 mov     ecx, [ebp+var_4]
.text$mn:00007D8D                 mov     edx, [ecx+14h]
.text$mn:00007D90                 lea     eax, [eax+edx*2]
.text$mn:00007D93                 cmp     eax, [ebp+arg_0]
.text$mn:00007D96                 ja      short loc_7D9E
.text$mn:00007D98
.text$mn:00007D98 loc_7D98:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+Bj
.text$mn:00007D98                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+18j
.text$mn:00007D98                 xor     al, al
.text$mn:00007D9A                 jmp     short loc_7DA0
.text$mn:00007D9C ; ---------------------------------------------------------------------------
.text$mn:00007D9C                 jmp     short loc_7DA0
.text$mn:00007D9E ; ---------------------------------------------------------------------------
.text$mn:00007D9E
.text$mn:00007D9E loc_7D9E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+2Ej
.text$mn:00007D9E                 mov     al, 1
.text$mn:00007DA0
.text$mn:00007DA0 loc_7DA0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+32j
.text$mn:00007DA0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+34j
.text$mn:00007DA0                 mov     esp, ebp
.text$mn:00007DA2                 pop     ebp
.text$mn:00007DA3                 retn    4
.text$mn:00007DA3 ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z endp
.text$mn:00007DA3
.text$mn:00007DA3 ; ---------------------------------------------------------------------------
.text$mn:00007DA6                 align 4
.text$mn:00007DA6 _text$mn        ends
.text$mn:00007DA6
.text$mn:00007DA8 ; ===========================================================================
.text$mn:00007DA8
.text$mn:00007DA8 ; Segment type: Pure code
.text$mn:00007DA8 ; Segment permissions: Read/Execute
.text$mn:00007DA8 _text$mn        segment para public 'CODE' use32
.text$mn:00007DA8                 assume cs:_text$mn
.text$mn:00007DA8                 ;org 7DA8h
.text$mn:00007DA8 ; COMDAT (pick any)
.text$mn:00007DA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007DA8
.text$mn:00007DA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00007DA8
.text$mn:00007DA8 ; Attributes: bp-based frame
.text$mn:00007DA8
.text$mn:00007DA8 ; protected: bool __thiscall std::vector<wchar_t const *, class std::allocator<wchar_t const *>>::_Inside(wchar_t const * const *)const
.text$mn:00007DA8                 public ?_Inside@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBE_NPBQB_W@Z
.text$mn:00007DA8 ?_Inside@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBE_NPBQB_W@Z proc near
.text$mn:00007DA8                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * &&)+19p
.text$mn:00007DA8                                         ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * const &)+19p
.text$mn:00007DA8
.text$mn:00007DA8 var_8           = dword ptr -8
.text$mn:00007DA8 var_4           = dword ptr -4
.text$mn:00007DA8 arg_0           = dword ptr  8
.text$mn:00007DA8
.text$mn:00007DA8                 push    ebp
.text$mn:00007DA9                 mov     ebp, esp
.text$mn:00007DAB                 sub     esp, 8
.text$mn:00007DAE                 mov     [ebp+var_4], ecx
.text$mn:00007DB1                 mov     eax, [ebp+var_4]
.text$mn:00007DB4                 mov     ecx, [ebp+arg_0]
.text$mn:00007DB7                 cmp     ecx, [eax+8]
.text$mn:00007DBA                 jnb     short loc_7DD0
.text$mn:00007DBC                 mov     edx, [ebp+var_4]
.text$mn:00007DBF                 mov     eax, [edx+4]
.text$mn:00007DC2                 cmp     eax, [ebp+arg_0]
.text$mn:00007DC5                 ja      short loc_7DD0
.text$mn:00007DC7                 mov     [ebp+var_8], 1
.text$mn:00007DCE                 jmp     short loc_7DD7
.text$mn:00007DD0 ; ---------------------------------------------------------------------------
.text$mn:00007DD0
.text$mn:00007DD0 loc_7DD0:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Inside(wchar_t const * const *)+12j
.text$mn:00007DD0                                         ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Inside(wchar_t const * const *)+1Dj
.text$mn:00007DD0                 mov     [ebp+var_8], 0
.text$mn:00007DD7
.text$mn:00007DD7 loc_7DD7:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Inside(wchar_t const * const *)+26j
.text$mn:00007DD7                 mov     al, byte ptr [ebp+var_8]
.text$mn:00007DDA                 mov     esp, ebp
.text$mn:00007DDC                 pop     ebp
.text$mn:00007DDD                 retn    4
.text$mn:00007DDD ?_Inside@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBE_NPBQB_W@Z endp
.text$mn:00007DDD
.text$mn:00007DDD _text$mn        ends
.text$mn:00007DDD
.text$mn:00007DE0 ; ===========================================================================
.text$mn:00007DE0
.text$mn:00007DE0 ; Segment type: Pure code
.text$mn:00007DE0 ; Segment permissions: Read/Execute
.text$mn:00007DE0 _text$mn        segment para public 'CODE' use32
.text$mn:00007DE0                 assume cs:_text$mn
.text$mn:00007DE0                 ;org 7DE0h
.text$mn:00007DE0 ; COMDAT (pick any)
.text$mn:00007DE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007DE0
.text$mn:00007DE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00007DE0
.text$mn:00007DE0 ; Attributes: bp-based frame
.text$mn:00007DE0
.text$mn:00007DE0 ; public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<wchar_t const *>>> __thiscall std::vector<wchar_t const *, class std::allocator<wchar_t const *>>::_Make_iter(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<wchar_t const *>>>)const
.text$mn:00007DE0                 public ?_Make_iter@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z
.text$mn:00007DE0 ?_Make_iter@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z proc near
.text$mn:00007DE0                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>)+EEp
.text$mn:00007DE0
.text$mn:00007DE0 var_14          = dword ptr -14h
.text$mn:00007DE0 var_10          = dword ptr -10h
.text$mn:00007DE0 var_C           = dword ptr -0Ch
.text$mn:00007DE0 var_4           = dword ptr -4
.text$mn:00007DE0 arg_0           = dword ptr  8
.text$mn:00007DE0 arg_4           = byte ptr  0Ch
.text$mn:00007DE0 arg_C           = dword ptr  14h
.text$mn:00007DE0
.text$mn:00007DE0                 push    ebp
.text$mn:00007DE1                 mov     ebp, esp
.text$mn:00007DE3                 push    0FFFFFFFFh
.text$mn:00007DE5                 push    offset __ehhandler$?_Make_iter@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z
.text$mn:00007DEA                 mov     eax, large fs:0
.text$mn:00007DF0                 push    eax
.text$mn:00007DF1                 sub     esp, 8
.text$mn:00007DF4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007DF9                 xor     eax, ebp
.text$mn:00007DFB                 push    eax
.text$mn:00007DFC                 lea     eax, [ebp+var_C]
.text$mn:00007DFF                 mov     large fs:0, eax
.text$mn:00007E05                 mov     [ebp+var_14], ecx
.text$mn:00007E08                 mov     [ebp+var_10], 0
.text$mn:00007E0F                 mov     [ebp+var_4], 1
.text$mn:00007E16                 mov     eax, [ebp+var_14]
.text$mn:00007E19                 push    eax             ; struct std::_Container_base12 *
.text$mn:00007E1A                 mov     ecx, [ebp+arg_C]
.text$mn:00007E1D                 push    ecx             ; int
.text$mn:00007E1E                 mov     ecx, [ebp+arg_0]
.text$mn:00007E21                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(wchar_t const * *,std::_Container_base12 const *)
.text$mn:00007E26                 mov     edx, [ebp+var_10]
.text$mn:00007E29                 or      edx, 1
.text$mn:00007E2C                 mov     [ebp+var_10], edx
.text$mn:00007E2F                 mov     byte ptr [ebp+var_4], 0
.text$mn:00007E33                 lea     ecx, [ebp+arg_4]
.text$mn:00007E36                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$mn:00007E3B                 mov     eax, [ebp+arg_0]
.text$mn:00007E3E                 mov     ecx, [ebp+var_C]
.text$mn:00007E41                 mov     large fs:0, ecx
.text$mn:00007E48                 pop     ecx
.text$mn:00007E49                 mov     esp, ebp
.text$mn:00007E4B                 pop     ebp
.text$mn:00007E4C                 retn    10h
.text$mn:00007E4C ?_Make_iter@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z endp
.text$mn:00007E4C
.text$mn:00007E4C ; ---------------------------------------------------------------------------
.text$mn:00007E4F                 align 10h
.text$mn:00007E4F _text$mn        ends
.text$mn:00007E4F
.text$x:00007E50 ; ===========================================================================
.text$x:00007E50
.text$x:00007E50 ; Segment type: Pure code
.text$x:00007E50 ; Segment permissions: Read/Execute
.text$x:00007E50 _text$x         segment para public 'CODE' use32
.text$x:00007E50                 assume cs:_text$x
.text$x:00007E50                 ;org 7E50h
.text$x:00007E50 ; COMDAT (pick associative to section at 7DE0)
.text$x:00007E50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007E50
.text$x:00007E50 ; =============== S U B R O U T I N E =======================================
.text$x:00007E50
.text$x:00007E50
.text$x:00007E50 __unwindfunclet$?_Make_iter@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z$0 proc near
.text$x:00007E50                                         ; DATA XREF: .xdata$x:0000B9F8o
.text$x:00007E50                 lea     ecx, [ebp+0Ch]
.text$x:00007E53                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$x:00007E53 __unwindfunclet$?_Make_iter@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z$0 endp
.text$x:00007E53
.text$x:00007E58
.text$x:00007E58 ; =============== S U B R O U T I N E =======================================
.text$x:00007E58
.text$x:00007E58
.text$x:00007E58 __unwindfunclet$?_Make_iter@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z$1 proc near
.text$x:00007E58                                         ; DATA XREF: .xdata$x:0000B9F0o
.text$x:00007E58                 mov     eax, [ebp-10h]
.text$x:00007E5B                 and     eax, 1
.text$x:00007E5E                 jz      $LN5
.text$x:00007E64                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:00007E68                 mov     ecx, [ebp+8]
.text$x:00007E6B                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$x:00007E70 ; ---------------------------------------------------------------------------
.text$x:00007E70
.text$x:00007E70 $LN5:                                   ; CODE XREF: __unwindfunclet$?_Make_iter@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z$1+6j
.text$x:00007E70                 retn
.text$x:00007E70 __unwindfunclet$?_Make_iter@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z$1 endp
.text$x:00007E70
.text$x:00007E71
.text$x:00007E71 ; =============== S U B R O U T I N E =======================================
.text$x:00007E71
.text$x:00007E71
.text$x:00007E71 __ehhandler$?_Make_iter@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z proc near
.text$x:00007E71                                         ; DATA XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Make_iter(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>)+5o
.text$x:00007E71
.text$x:00007E71 arg_4           = dword ptr  8
.text$x:00007E71
.text$x:00007E71                 mov     edx, [esp+arg_4]
.text$x:00007E75                 lea     eax, [edx+0Ch]
.text$x:00007E78                 mov     ecx, [edx-0Ch]
.text$x:00007E7B                 xor     ecx, eax
.text$x:00007E7D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007E82                 mov     eax, offset __ehfuncinfo$?_Make_iter@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z
.text$x:00007E87                 jmp     ___CxxFrameHandler3
.text$x:00007E87 __ehhandler$?_Make_iter@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z endp
.text$x:00007E87
.text$x:00007E87 _text$x         ends
.text$x:00007E87
.text$mn:00007E8C ; ===========================================================================
.text$mn:00007E8C
.text$mn:00007E8C ; Segment type: Pure code
.text$mn:00007E8C ; Segment permissions: Read/Execute
.text$mn:00007E8C _text$mn        segment para public 'CODE' use32
.text$mn:00007E8C                 assume cs:_text$mn
.text$mn:00007E8C                 ;org 7E8Ch
.text$mn:00007E8C ; COMDAT (pick any)
.text$mn:00007E8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007E8C
.text$mn:00007E8C ; =============== S U B R O U T I N E =======================================
.text$mn:00007E8C
.text$mn:00007E8C ; Attributes: bp-based frame
.text$mn:00007E8C
.text$mn:00007E8C ; public: char * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)
.text$mn:00007E8C                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
.text$mn:00007E8C ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
.text$mn:00007E8C                                         ; CODE XREF: $LN19+14p
.text$mn:00007E8C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+1Dp ...
.text$mn:00007E8C
.text$mn:00007E8C var_8           = dword ptr -8
.text$mn:00007E8C var_4           = dword ptr -4
.text$mn:00007E8C
.text$mn:00007E8C                 push    ebp
.text$mn:00007E8D                 mov     ebp, esp
.text$mn:00007E8F                 sub     esp, 8
.text$mn:00007E92                 mov     [ebp+var_4], ecx
.text$mn:00007E95                 mov     eax, [ebp+var_4]
.text$mn:00007E98                 cmp     dword ptr [eax+18h], 10h
.text$mn:00007E9C                 jb      short loc_7EB2
.text$mn:00007E9E                 mov     ecx, [ebp+var_4]
.text$mn:00007EA1                 mov     edx, [ecx+4]
.text$mn:00007EA4                 push    edx
.text$mn:00007EA5                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00007EAA                 add     esp, 4
.text$mn:00007EAD                 mov     [ebp+var_8], eax
.text$mn:00007EB0                 jmp     short loc_7EBB
.text$mn:00007EB2 ; ---------------------------------------------------------------------------
.text$mn:00007EB2
.text$mn:00007EB2 loc_7EB2:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:00007EB2                 mov     eax, [ebp+var_4]
.text$mn:00007EB5                 add     eax, 4
.text$mn:00007EB8                 mov     [ebp+var_8], eax
.text$mn:00007EBB
.text$mn:00007EBB loc_7EBB:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:00007EBB                 mov     eax, [ebp+var_8]
.text$mn:00007EBE                 mov     esp, ebp
.text$mn:00007EC0                 pop     ebp
.text$mn:00007EC1                 retn
.text$mn:00007EC1 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ endp
.text$mn:00007EC1
.text$mn:00007EC1 ; ---------------------------------------------------------------------------
.text$mn:00007EC2                 align 4
.text$mn:00007EC2 _text$mn        ends
.text$mn:00007EC2
.text$mn:00007EC4 ; ===========================================================================
.text$mn:00007EC4
.text$mn:00007EC4 ; Segment type: Pure code
.text$mn:00007EC4 ; Segment permissions: Read/Execute
.text$mn:00007EC4 _text$mn        segment para public 'CODE' use32
.text$mn:00007EC4                 assume cs:_text$mn
.text$mn:00007EC4                 ;org 7EC4h
.text$mn:00007EC4 ; COMDAT (pick any)
.text$mn:00007EC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007EC4
.text$mn:00007EC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007EC4
.text$mn:00007EC4 ; Attributes: bp-based frame
.text$mn:00007EC4
.text$mn:00007EC4 ; public: char const * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)const
.text$mn:00007EC4                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
.text$mn:00007EC4 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
.text$mn:00007EC4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+7Dp
.text$mn:00007EC4
.text$mn:00007EC4 var_8           = dword ptr -8
.text$mn:00007EC4 var_4           = dword ptr -4
.text$mn:00007EC4
.text$mn:00007EC4                 push    ebp
.text$mn:00007EC5                 mov     ebp, esp
.text$mn:00007EC7                 sub     esp, 8
.text$mn:00007ECA                 mov     [ebp+var_4], ecx
.text$mn:00007ECD                 mov     eax, [ebp+var_4]
.text$mn:00007ED0                 cmp     dword ptr [eax+18h], 10h
.text$mn:00007ED4                 jb      short loc_7EEA
.text$mn:00007ED6                 mov     ecx, [ebp+var_4]
.text$mn:00007ED9                 mov     edx, [ecx+4]
.text$mn:00007EDC                 push    edx
.text$mn:00007EDD                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00007EE2                 add     esp, 4
.text$mn:00007EE5                 mov     [ebp+var_8], eax
.text$mn:00007EE8                 jmp     short loc_7EF3
.text$mn:00007EEA ; ---------------------------------------------------------------------------
.text$mn:00007EEA
.text$mn:00007EEA loc_7EEA:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:00007EEA                 mov     eax, [ebp+var_4]
.text$mn:00007EED                 add     eax, 4
.text$mn:00007EF0                 mov     [ebp+var_8], eax
.text$mn:00007EF3
.text$mn:00007EF3 loc_7EF3:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:00007EF3                 mov     eax, [ebp+var_8]
.text$mn:00007EF6                 mov     esp, ebp
.text$mn:00007EF8                 pop     ebp
.text$mn:00007EF9                 retn
.text$mn:00007EF9 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ endp
.text$mn:00007EF9
.text$mn:00007EF9 ; ---------------------------------------------------------------------------
.text$mn:00007EFA                 align 4
.text$mn:00007EFA _text$mn        ends
.text$mn:00007EFA
.text$mn:00007EFC ; ===========================================================================
.text$mn:00007EFC
.text$mn:00007EFC ; Segment type: Pure code
.text$mn:00007EFC ; Segment permissions: Read/Execute
.text$mn:00007EFC _text$mn        segment para public 'CODE' use32
.text$mn:00007EFC                 assume cs:_text$mn
.text$mn:00007EFC                 ;org 7EFCh
.text$mn:00007EFC ; COMDAT (pick any)
.text$mn:00007EFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007EFC
.text$mn:00007EFC ; =============== S U B R O U T I N E =======================================
.text$mn:00007EFC
.text$mn:00007EFC ; Attributes: bp-based frame
.text$mn:00007EFC
.text$mn:00007EFC ; public: wchar_t * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00007EFC                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
.text$mn:00007EFC ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ proc near
.text$mn:00007EFC                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+27p
.text$mn:00007EFC                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+3Ep ...
.text$mn:00007EFC
.text$mn:00007EFC var_8           = dword ptr -8
.text$mn:00007EFC var_4           = dword ptr -4
.text$mn:00007EFC
.text$mn:00007EFC                 push    ebp
.text$mn:00007EFD                 mov     ebp, esp
.text$mn:00007EFF                 sub     esp, 8
.text$mn:00007F02                 mov     [ebp+var_4], ecx
.text$mn:00007F05                 mov     eax, [ebp+var_4]
.text$mn:00007F08                 cmp     dword ptr [eax+18h], 8
.text$mn:00007F0C                 jb      short loc_7F22
.text$mn:00007F0E                 mov     ecx, [ebp+var_4]
.text$mn:00007F11                 mov     edx, [ecx+4]
.text$mn:00007F14                 push    edx
.text$mn:00007F15                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00007F1A                 add     esp, 4
.text$mn:00007F1D                 mov     [ebp+var_8], eax
.text$mn:00007F20                 jmp     short loc_7F2B
.text$mn:00007F22 ; ---------------------------------------------------------------------------
.text$mn:00007F22
.text$mn:00007F22 loc_7F22:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:00007F22                 mov     eax, [ebp+var_4]
.text$mn:00007F25                 add     eax, 4
.text$mn:00007F28                 mov     [ebp+var_8], eax
.text$mn:00007F2B
.text$mn:00007F2B loc_7F2B:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:00007F2B                 mov     eax, [ebp+var_8]
.text$mn:00007F2E                 mov     esp, ebp
.text$mn:00007F30                 pop     ebp
.text$mn:00007F31                 retn
.text$mn:00007F31 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ endp
.text$mn:00007F31
.text$mn:00007F31 ; ---------------------------------------------------------------------------
.text$mn:00007F32                 align 4
.text$mn:00007F32 _text$mn        ends
.text$mn:00007F32
.text$mn:00007F34 ; ===========================================================================
.text$mn:00007F34
.text$mn:00007F34 ; Segment type: Pure code
.text$mn:00007F34 ; Segment permissions: Read/Execute
.text$mn:00007F34 _text$mn        segment para public 'CODE' use32
.text$mn:00007F34                 assume cs:_text$mn
.text$mn:00007F34                 ;org 7F34h
.text$mn:00007F34 ; COMDAT (pick any)
.text$mn:00007F34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007F34
.text$mn:00007F34 ; =============== S U B R O U T I N E =======================================
.text$mn:00007F34
.text$mn:00007F34 ; Attributes: bp-based frame
.text$mn:00007F34
.text$mn:00007F34 ; public: wchar_t const * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)const
.text$mn:00007F34                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
.text$mn:00007F34 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ proc near
.text$mn:00007F34                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+80p
.text$mn:00007F34                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+7Dp ...
.text$mn:00007F34
.text$mn:00007F34 var_8           = dword ptr -8
.text$mn:00007F34 var_4           = dword ptr -4
.text$mn:00007F34
.text$mn:00007F34                 push    ebp
.text$mn:00007F35                 mov     ebp, esp
.text$mn:00007F37                 sub     esp, 8
.text$mn:00007F3A                 mov     [ebp+var_4], ecx
.text$mn:00007F3D                 mov     eax, [ebp+var_4]
.text$mn:00007F40                 cmp     dword ptr [eax+18h], 8
.text$mn:00007F44                 jb      short loc_7F5A
.text$mn:00007F46                 mov     ecx, [ebp+var_4]
.text$mn:00007F49                 mov     edx, [ecx+4]
.text$mn:00007F4C                 push    edx
.text$mn:00007F4D                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00007F52                 add     esp, 4
.text$mn:00007F55                 mov     [ebp+var_8], eax
.text$mn:00007F58                 jmp     short loc_7F63
.text$mn:00007F5A ; ---------------------------------------------------------------------------
.text$mn:00007F5A
.text$mn:00007F5A loc_7F5A:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:00007F5A                 mov     eax, [ebp+var_4]
.text$mn:00007F5D                 add     eax, 4
.text$mn:00007F60                 mov     [ebp+var_8], eax
.text$mn:00007F63
.text$mn:00007F63 loc_7F63:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:00007F63                 mov     eax, [ebp+var_8]
.text$mn:00007F66                 mov     esp, ebp
.text$mn:00007F68                 pop     ebp
.text$mn:00007F69                 retn
.text$mn:00007F69 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ endp
.text$mn:00007F69
.text$mn:00007F69 ; ---------------------------------------------------------------------------
.text$mn:00007F6A                 align 4
.text$mn:00007F6A _text$mn        ends
.text$mn:00007F6A
.text$mn:00007F6C ; ===========================================================================
.text$mn:00007F6C
.text$mn:00007F6C ; Segment type: Pure code
.text$mn:00007F6C ; Segment permissions: Read/Execute
.text$mn:00007F6C _text$mn        segment para public 'CODE' use32
.text$mn:00007F6C                 assume cs:_text$mn
.text$mn:00007F6C                 ;org 7F6Ch
.text$mn:00007F6C ; COMDAT (pick any)
.text$mn:00007F6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007F6C
.text$mn:00007F6C ; =============== S U B R O U T I N E =======================================
.text$mn:00007F6C
.text$mn:00007F6C ; Attributes: bp-based frame
.text$mn:00007F6C
.text$mn:00007F6C ; void __thiscall std::_Container_base12::_Orphan_all(std::_Container_base12 *__hidden this)
.text$mn:00007F6C                 public ?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:00007F6C ?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$mn:00007F6C                                         ; CODE XREF: std::_Container_base12::~_Container_base12(void)+Ap
.text$mn:00007F6C                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+14p ...
.text$mn:00007F6C
.text$mn:00007F6C var_18          = byte ptr -18h
.text$mn:00007F6C var_14          = dword ptr -14h
.text$mn:00007F6C var_10          = dword ptr -10h
.text$mn:00007F6C var_C           = dword ptr -0Ch
.text$mn:00007F6C var_4           = dword ptr -4
.text$mn:00007F6C
.text$mn:00007F6C                 push    ebp
.text$mn:00007F6D                 mov     ebp, esp
.text$mn:00007F6F                 push    0FFFFFFFFh
.text$mn:00007F71                 push    offset __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:00007F76                 mov     eax, large fs:0
.text$mn:00007F7C                 push    eax
.text$mn:00007F7D                 sub     esp, 0Ch
.text$mn:00007F80                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007F85                 xor     eax, ebp
.text$mn:00007F87                 push    eax
.text$mn:00007F88                 lea     eax, [ebp+var_C]
.text$mn:00007F8B                 mov     large fs:0, eax
.text$mn:00007F91                 mov     [ebp+var_14], ecx
.text$mn:00007F94                 mov     eax, [ebp+var_14]
.text$mn:00007F97                 cmp     dword ptr [eax], 0
.text$mn:00007F9A                 jz      short loc_7FF7
.text$mn:00007F9C                 push    3               ; int
.text$mn:00007F9E                 lea     ecx, [ebp+var_18] ; this
.text$mn:00007FA1                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00007FA6                 mov     [ebp+var_4], 0
.text$mn:00007FAD                 mov     ecx, [ebp+var_14]
.text$mn:00007FB0                 mov     edx, [ecx]
.text$mn:00007FB2                 add     edx, 4
.text$mn:00007FB5                 mov     [ebp+var_10], edx
.text$mn:00007FB8                 jmp     short loc_7FC7
.text$mn:00007FBA ; ---------------------------------------------------------------------------
.text$mn:00007FBA
.text$mn:00007FBA loc_7FBA:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+6Ej
.text$mn:00007FBA                 mov     eax, [ebp+var_10]
.text$mn:00007FBD                 mov     ecx, [eax]
.text$mn:00007FBF                 mov     edx, [ebp+var_10]
.text$mn:00007FC2                 mov     eax, [ecx+4]
.text$mn:00007FC5                 mov     [edx], eax
.text$mn:00007FC7
.text$mn:00007FC7 loc_7FC7:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+4Cj
.text$mn:00007FC7                 mov     ecx, [ebp+var_10]
.text$mn:00007FCA                 cmp     dword ptr [ecx], 0
.text$mn:00007FCD                 jz      short loc_7FDC
.text$mn:00007FCF                 mov     edx, [ebp+var_10]
.text$mn:00007FD2                 mov     eax, [edx]
.text$mn:00007FD4                 mov     dword ptr [eax], 0
.text$mn:00007FDA                 jmp     short loc_7FBA
.text$mn:00007FDC ; ---------------------------------------------------------------------------
.text$mn:00007FDC
.text$mn:00007FDC loc_7FDC:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+61j
.text$mn:00007FDC                 mov     ecx, [ebp+var_14]
.text$mn:00007FDF                 mov     edx, [ecx]
.text$mn:00007FE1                 mov     dword ptr [edx+4], 0
.text$mn:00007FE8                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007FEF                 lea     ecx, [ebp+var_18] ; this
.text$mn:00007FF2                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00007FF7
.text$mn:00007FF7 loc_7FF7:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+2Ej
.text$mn:00007FF7                 mov     ecx, [ebp+var_C]
.text$mn:00007FFA                 mov     large fs:0, ecx
.text$mn:00008001                 pop     ecx
.text$mn:00008002                 mov     esp, ebp
.text$mn:00008004                 pop     ebp
.text$mn:00008005                 retn
.text$mn:00008005 ?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$mn:00008005
.text$mn:00008005 ; ---------------------------------------------------------------------------
.text$mn:00008006                 align 4
.text$mn:00008006 _text$mn        ends
.text$mn:00008006
.text$x:00008008 ; ===========================================================================
.text$x:00008008
.text$x:00008008 ; Segment type: Pure code
.text$x:00008008 ; Segment permissions: Read/Execute
.text$x:00008008 _text$x         segment para public 'CODE' use32
.text$x:00008008                 assume cs:_text$x
.text$x:00008008                 ;org 8008h
.text$x:00008008 ; COMDAT (pick associative to section at 7F6C)
.text$x:00008008                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008008
.text$x:00008008 ; =============== S U B R O U T I N E =======================================
.text$x:00008008
.text$x:00008008
.text$x:00008008 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 proc near
.text$x:00008008                                         ; DATA XREF: .xdata$x:0000B014o
.text$x:00008008                 lea     ecx, [ebp-18h]  ; this
.text$x:0000800B                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000800B __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 endp
.text$x:0000800B
.text$x:00008010
.text$x:00008010 ; =============== S U B R O U T I N E =======================================
.text$x:00008010
.text$x:00008010
.text$x:00008010 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$x:00008010                                         ; DATA XREF: std::_Container_base12::_Orphan_all(void)+5o
.text$x:00008010
.text$x:00008010 arg_4           = dword ptr  8
.text$x:00008010
.text$x:00008010                 mov     edx, [esp+arg_4]
.text$x:00008014                 lea     eax, [edx+0Ch]
.text$x:00008017                 mov     ecx, [edx-10h]
.text$x:0000801A                 xor     ecx, eax
.text$x:0000801C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008021                 mov     eax, offset __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$x:00008026                 jmp     ___CxxFrameHandler3
.text$x:00008026 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$x:00008026
.text$x:00008026 ; ---------------------------------------------------------------------------
.text$x:0000802B                 align 4
.text$x:0000802B _text$x         ends
.text$x:0000802B
.text$mn:0000802C ; ===========================================================================
.text$mn:0000802C
.text$mn:0000802C ; Segment type: Pure code
.text$mn:0000802C ; Segment permissions: Read/Execute
.text$mn:0000802C _text$mn        segment para public 'CODE' use32
.text$mn:0000802C                 assume cs:_text$mn
.text$mn:0000802C                 ;org 802Ch
.text$mn:0000802C ; COMDAT (pick any)
.text$mn:0000802C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000802C
.text$mn:0000802C ; =============== S U B R O U T I N E =======================================
.text$mn:0000802C
.text$mn:0000802C ; Attributes: bp-based frame
.text$mn:0000802C
.text$mn:0000802C ; void __thiscall std::_Iterator_base12::_Orphan_me(std::_Iterator_base12 *__hidden this)
.text$mn:0000802C                 public ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
.text$mn:0000802C ?_Orphan_me@_Iterator_base12@std@@QAEXXZ proc near
.text$mn:0000802C                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+3Cp
.text$mn:0000802C                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+64p ...
.text$mn:0000802C
.text$mn:0000802C var_8           = dword ptr -8
.text$mn:0000802C var_4           = dword ptr -4
.text$mn:0000802C
.text$mn:0000802C                 push    ebp
.text$mn:0000802D                 mov     ebp, esp
.text$mn:0000802F                 sub     esp, 8
.text$mn:00008032                 mov     [ebp+var_8], ecx
.text$mn:00008035                 mov     eax, [ebp+var_8]
.text$mn:00008038                 cmp     dword ptr [eax], 0
.text$mn:0000803B                 jz      short loc_809A
.text$mn:0000803D                 mov     ecx, [ebp+var_8]
.text$mn:00008040                 mov     edx, [ecx]
.text$mn:00008042                 add     edx, 4
.text$mn:00008045                 mov     [ebp+var_4], edx
.text$mn:00008048
.text$mn:00008048 loc_8048:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+39j
.text$mn:00008048                 mov     eax, [ebp+var_4]
.text$mn:0000804B                 cmp     dword ptr [eax], 0
.text$mn:0000804E                 jz      short loc_8067
.text$mn:00008050                 mov     ecx, [ebp+var_4]
.text$mn:00008053                 mov     edx, [ecx]
.text$mn:00008055                 cmp     edx, [ebp+var_8]
.text$mn:00008058                 jz      short loc_8067
.text$mn:0000805A                 mov     eax, [ebp+var_4]
.text$mn:0000805D                 mov     ecx, [eax]
.text$mn:0000805F                 add     ecx, 4
.text$mn:00008062                 mov     [ebp+var_4], ecx
.text$mn:00008065                 jmp     short loc_8048
.text$mn:00008067 ; ---------------------------------------------------------------------------
.text$mn:00008067
.text$mn:00008067 loc_8067:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+22j
.text$mn:00008067                                         ; std::_Iterator_base12::_Orphan_me(void)+2Cj
.text$mn:00008067                 mov     edx, [ebp+var_4]
.text$mn:0000806A                 cmp     dword ptr [edx], 0
.text$mn:0000806D                 jnz     short loc_8086
.text$mn:0000806F                 push    0C9h ; '+'      ; unsigned int
.text$mn:00008074                 push    offset ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008079                 push    offset ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; "ITERATOR LIST CORRUPTED!"
.text$mn:0000807E                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00008083                 add     esp, 0Ch
.text$mn:00008086
.text$mn:00008086 loc_8086:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+41j
.text$mn:00008086                 mov     eax, [ebp+var_4]
.text$mn:00008089                 mov     ecx, [ebp+var_8]
.text$mn:0000808C                 mov     edx, [ecx+4]
.text$mn:0000808F                 mov     [eax], edx
.text$mn:00008091                 mov     eax, [ebp+var_8]
.text$mn:00008094                 mov     dword ptr [eax], 0
.text$mn:0000809A
.text$mn:0000809A loc_809A:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+Fj
.text$mn:0000809A                 mov     esp, ebp
.text$mn:0000809C                 pop     ebp
.text$mn:0000809D                 retn
.text$mn:0000809D ?_Orphan_me@_Iterator_base12@std@@QAEXXZ endp
.text$mn:0000809D
.text$mn:0000809D ; ---------------------------------------------------------------------------
.text$mn:0000809E                 align 10h
.text$mn:0000809E _text$mn        ends
.text$mn:0000809E
.text$mn:000080A0 ; ===========================================================================
.text$mn:000080A0
.text$mn:000080A0 ; Segment type: Pure code
.text$mn:000080A0 ; Segment permissions: Read/Execute
.text$mn:000080A0 _text$mn        segment para public 'CODE' use32
.text$mn:000080A0                 assume cs:_text$mn
.text$mn:000080A0                 ;org 80A0h
.text$mn:000080A0 ; COMDAT (pick any)
.text$mn:000080A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000080A0
.text$mn:000080A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000080A0
.text$mn:000080A0 ; Attributes: bp-based frame
.text$mn:000080A0
.text$mn:000080A0 ; protected: void __thiscall std::vector<wchar_t const *, class std::allocator<wchar_t const *>>::_Orphan_range(wchar_t const * *, wchar_t const * *)const
.text$mn:000080A0                 public ?_Orphan_range@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXPAPB_W0@Z
.text$mn:000080A0 ?_Orphan_range@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXPAPB_W0@Z proc near
.text$mn:000080A0                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>)+B1p
.text$mn:000080A0                                         ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * &&)+6Ap ...
.text$mn:000080A0
.text$mn:000080A0 var_18          = byte ptr -18h
.text$mn:000080A0 var_14          = dword ptr -14h
.text$mn:000080A0 var_10          = dword ptr -10h
.text$mn:000080A0 var_C           = dword ptr -0Ch
.text$mn:000080A0 var_4           = dword ptr -4
.text$mn:000080A0 arg_0           = dword ptr  8
.text$mn:000080A0 arg_4           = dword ptr  0Ch
.text$mn:000080A0
.text$mn:000080A0                 push    ebp
.text$mn:000080A1                 mov     ebp, esp
.text$mn:000080A3                 push    0FFFFFFFFh
.text$mn:000080A5                 push    offset __ehhandler$?_Orphan_range@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXPAPB_W0@Z
.text$mn:000080AA                 mov     eax, large fs:0
.text$mn:000080B0                 push    eax
.text$mn:000080B1                 sub     esp, 0Ch
.text$mn:000080B4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000080B9                 xor     eax, ebp
.text$mn:000080BB                 push    eax
.text$mn:000080BC                 lea     eax, [ebp+var_C]
.text$mn:000080BF                 mov     large fs:0, eax
.text$mn:000080C5                 mov     [ebp+var_14], ecx
.text$mn:000080C8                 push    3               ; int
.text$mn:000080CA                 lea     ecx, [ebp+var_18] ; this
.text$mn:000080CD                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:000080D2                 mov     [ebp+var_4], 0
.text$mn:000080D9                 mov     ecx, [ebp+var_14] ; this
.text$mn:000080DC                 call    ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst(void)
.text$mn:000080E1                 mov     [ebp+var_10], eax
.text$mn:000080E4                 cmp     [ebp+var_10], 0
.text$mn:000080E8                 jz      short loc_8138
.text$mn:000080EA
.text$mn:000080EA loc_80EA:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Orphan_range(wchar_t const * *,wchar_t const * *):loc_8136j
.text$mn:000080EA                 mov     eax, [ebp+var_10]
.text$mn:000080ED                 cmp     dword ptr [eax], 0
.text$mn:000080F0                 jz      short loc_8138
.text$mn:000080F2                 mov     ecx, [ebp+var_10]
.text$mn:000080F5                 mov     edx, [ecx]
.text$mn:000080F7                 mov     eax, [edx+8]
.text$mn:000080FA                 cmp     eax, [ebp+arg_0]
.text$mn:000080FD                 jb      short loc_810C
.text$mn:000080FF                 mov     ecx, [ebp+var_10]
.text$mn:00008102                 mov     edx, [ecx]
.text$mn:00008104                 mov     eax, [ebp+arg_4]
.text$mn:00008107                 cmp     eax, [edx+8]
.text$mn:0000810A                 jnb     short loc_811B
.text$mn:0000810C
.text$mn:0000810C loc_810C:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Orphan_range(wchar_t const * *,wchar_t const * *)+5Dj
.text$mn:0000810C                 mov     ecx, [ebp+var_10]
.text$mn:0000810F                 mov     ecx, [ecx]      ; this
.text$mn:00008111                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:00008116                 mov     [ebp+var_10], eax
.text$mn:00008119                 jmp     short loc_8136
.text$mn:0000811B ; ---------------------------------------------------------------------------
.text$mn:0000811B
.text$mn:0000811B loc_811B:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Orphan_range(wchar_t const * *,wchar_t const * *)+6Aj
.text$mn:0000811B                 mov     edx, [ebp+var_10]
.text$mn:0000811E                 mov     ecx, [edx]      ; this
.text$mn:00008120                 call    ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont(void)
.text$mn:00008125                 mov     eax, [ebp+var_10]
.text$mn:00008128                 mov     ecx, [eax]      ; this
.text$mn:0000812A                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:0000812F                 mov     ecx, [ebp+var_10]
.text$mn:00008132                 mov     edx, [eax]
.text$mn:00008134                 mov     [ecx], edx
.text$mn:00008136
.text$mn:00008136 loc_8136:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Orphan_range(wchar_t const * *,wchar_t const * *)+79j
.text$mn:00008136                 jmp     short loc_80EA
.text$mn:00008138 ; ---------------------------------------------------------------------------
.text$mn:00008138
.text$mn:00008138 loc_8138:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Orphan_range(wchar_t const * *,wchar_t const * *)+48j
.text$mn:00008138                                         ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Orphan_range(wchar_t const * *,wchar_t const * *)+50j
.text$mn:00008138                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000813F                 lea     ecx, [ebp+var_18] ; this
.text$mn:00008142                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00008147                 mov     ecx, [ebp+var_C]
.text$mn:0000814A                 mov     large fs:0, ecx
.text$mn:00008151                 pop     ecx
.text$mn:00008152                 mov     esp, ebp
.text$mn:00008154                 pop     ebp
.text$mn:00008155                 retn    8
.text$mn:00008155 ?_Orphan_range@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXPAPB_W0@Z endp
.text$mn:00008155
.text$mn:00008155 _text$mn        ends
.text$mn:00008155
.text$x:00008158 ; ===========================================================================
.text$x:00008158
.text$x:00008158 ; Segment type: Pure code
.text$x:00008158 ; Segment permissions: Read/Execute
.text$x:00008158 _text$x         segment para public 'CODE' use32
.text$x:00008158                 assume cs:_text$x
.text$x:00008158                 ;org 8158h
.text$x:00008158 ; COMDAT (pick associative to section at 80A0)
.text$x:00008158                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008158
.text$x:00008158 ; =============== S U B R O U T I N E =======================================
.text$x:00008158
.text$x:00008158
.text$x:00008158 __unwindfunclet$?_Orphan_range@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXPAPB_W0@Z$0 proc near
.text$x:00008158                                         ; DATA XREF: .xdata$x:0000BAB8o
.text$x:00008158                 lea     ecx, [ebp-18h]  ; this
.text$x:0000815B                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000815B __unwindfunclet$?_Orphan_range@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXPAPB_W0@Z$0 endp
.text$x:0000815B
.text$x:00008160
.text$x:00008160 ; =============== S U B R O U T I N E =======================================
.text$x:00008160
.text$x:00008160
.text$x:00008160 __ehhandler$?_Orphan_range@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXPAPB_W0@Z proc near
.text$x:00008160                                         ; DATA XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Orphan_range(wchar_t const * *,wchar_t const * *)+5o
.text$x:00008160
.text$x:00008160 arg_4           = dword ptr  8
.text$x:00008160
.text$x:00008160                 mov     edx, [esp+arg_4]
.text$x:00008164                 lea     eax, [edx+0Ch]
.text$x:00008167                 mov     ecx, [edx-10h]
.text$x:0000816A                 xor     ecx, eax
.text$x:0000816C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008171                 mov     eax, offset __ehfuncinfo$?_Orphan_range@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXPAPB_W0@Z
.text$x:00008176                 jmp     ___CxxFrameHandler3
.text$x:00008176 __ehhandler$?_Orphan_range@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXPAPB_W0@Z endp
.text$x:00008176
.text$x:00008176 ; ---------------------------------------------------------------------------
.text$x:0000817B                 align 4
.text$x:0000817B _text$x         ends
.text$x:0000817B
.text$mn:0000817C ; ===========================================================================
.text$mn:0000817C
.text$mn:0000817C ; Segment type: Pure code
.text$mn:0000817C ; Segment permissions: Read/Execute
.text$mn:0000817C _text$mn        segment para public 'CODE' use32
.text$mn:0000817C                 assume cs:_text$mn
.text$mn:0000817C                 ;org 817Ch
.text$mn:0000817C ; COMDAT (pick any)
.text$mn:0000817C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000817C
.text$mn:0000817C ; =============== S U B R O U T I N E =======================================
.text$mn:0000817C
.text$mn:0000817C ; Attributes: bp-based frame
.text$mn:0000817C
.text$mn:0000817C ; public: static unsigned int __cdecl std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Pdif(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>)
.text$mn:0000817C                 public ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.text$mn:0000817C ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z proc near
.text$mn:0000817C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+89p
.text$mn:0000817C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+FAp ...
.text$mn:0000817C
.text$mn:0000817C var_14          = dword ptr -14h
.text$mn:0000817C var_10          = dword ptr -10h
.text$mn:0000817C var_C           = dword ptr -0Ch
.text$mn:0000817C var_4           = dword ptr -4
.text$mn:0000817C arg_0           = byte ptr  8
.text$mn:0000817C arg_8           = dword ptr  10h
.text$mn:0000817C arg_C           = byte ptr  14h
.text$mn:0000817C
.text$mn:0000817C                 push    ebp
.text$mn:0000817D                 mov     ebp, esp
.text$mn:0000817F                 push    0FFFFFFFFh
.text$mn:00008181                 push    offset __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.text$mn:00008186                 mov     eax, large fs:0
.text$mn:0000818C                 push    eax
.text$mn:0000818D                 sub     esp, 8
.text$mn:00008190                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008195                 xor     eax, ebp
.text$mn:00008197                 push    eax
.text$mn:00008198                 lea     eax, [ebp+var_C]
.text$mn:0000819B                 mov     large fs:0, eax
.text$mn:000081A1                 mov     [ebp+var_4], 1
.text$mn:000081A8                 cmp     [ebp+arg_8], 0
.text$mn:000081AC                 jnz     short loc_81B7
.text$mn:000081AE                 mov     [ebp+var_10], 0
.text$mn:000081B5                 jmp     short loc_81C6
.text$mn:000081B7 ; ---------------------------------------------------------------------------
.text$mn:000081B7
.text$mn:000081B7 loc_81B7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+30j
.text$mn:000081B7                 lea     eax, [ebp+arg_C]
.text$mn:000081BA                 push    eax             ; std::_Iterator_base12 *
.text$mn:000081BB                 lea     ecx, [ebp+arg_0]
.text$mn:000081BE                 call    ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:000081C3                 mov     [ebp+var_10], eax
.text$mn:000081C6
.text$mn:000081C6 loc_81C6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+39j
.text$mn:000081C6                 mov     ecx, [ebp+var_10]
.text$mn:000081C9                 mov     [ebp+var_14], ecx
.text$mn:000081CC                 mov     byte ptr [ebp+var_4], 0
.text$mn:000081D0                 lea     ecx, [ebp+arg_0]
.text$mn:000081D3                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:000081D8                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000081DF                 lea     ecx, [ebp+arg_C]
.text$mn:000081E2                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:000081E7                 mov     eax, [ebp+var_14]
.text$mn:000081EA                 mov     ecx, [ebp+var_C]
.text$mn:000081ED                 mov     large fs:0, ecx
.text$mn:000081F4                 pop     ecx
.text$mn:000081F5                 mov     esp, ebp
.text$mn:000081F7                 pop     ebp
.text$mn:000081F8                 retn
.text$mn:000081F8 ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z endp
.text$mn:000081F8
.text$mn:000081F8 ; ---------------------------------------------------------------------------
.text$mn:000081F9                 align 4
.text$mn:000081F9 _text$mn        ends
.text$mn:000081F9
.text$x:000081FC ; ===========================================================================
.text$x:000081FC
.text$x:000081FC ; Segment type: Pure code
.text$x:000081FC ; Segment permissions: Read/Execute
.text$x:000081FC _text$x         segment para public 'CODE' use32
.text$x:000081FC                 assume cs:_text$x
.text$x:000081FC                 ;org 81FCh
.text$x:000081FC ; COMDAT (pick associative to section at 817C)
.text$x:000081FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000081FC
.text$x:000081FC ; =============== S U B R O U T I N E =======================================
.text$x:000081FC
.text$x:000081FC
.text$x:000081FC __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$0 proc near
.text$x:000081FC                                         ; DATA XREF: .xdata$x:0000B750o
.text$x:000081FC                 lea     ecx, [ebp+14h]
.text$x:000081FF                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000081FF __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$0 endp
.text$x:000081FF
.text$x:00008204
.text$x:00008204 ; =============== S U B R O U T I N E =======================================
.text$x:00008204
.text$x:00008204
.text$x:00008204 __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$1 proc near
.text$x:00008204                                         ; DATA XREF: .xdata$x:0000B758o
.text$x:00008204                 lea     ecx, [ebp+8]
.text$x:00008207                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00008207 __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$1 endp
.text$x:00008207
.text$x:0000820C
.text$x:0000820C ; =============== S U B R O U T I N E =======================================
.text$x:0000820C
.text$x:0000820C
.text$x:0000820C __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z proc near
.text$x:0000820C                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+5o
.text$x:0000820C
.text$x:0000820C arg_4           = dword ptr  8
.text$x:0000820C
.text$x:0000820C                 mov     edx, [esp+arg_4]
.text$x:00008210                 lea     eax, [edx+0Ch]
.text$x:00008213                 mov     ecx, [edx-0Ch]
.text$x:00008216                 xor     ecx, eax
.text$x:00008218                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000821D                 mov     eax, offset __ehfuncinfo$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.text$x:00008222                 jmp     ___CxxFrameHandler3
.text$x:00008222 __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z endp
.text$x:00008222
.text$x:00008222 ; ---------------------------------------------------------------------------
.text$x:00008227                 align 4
.text$x:00008227 _text$x         ends
.text$x:00008227
.text$mn:00008228 ; ===========================================================================
.text$mn:00008228
.text$mn:00008228 ; Segment type: Pure code
.text$mn:00008228 ; Segment permissions: Read/Execute
.text$mn:00008228 _text$mn        segment para public 'CODE' use32
.text$mn:00008228                 assume cs:_text$mn
.text$mn:00008228                 ;org 8228h
.text$mn:00008228 ; COMDAT (pick any)
.text$mn:00008228                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008228
.text$mn:00008228 ; =============== S U B R O U T I N E =======================================
.text$mn:00008228
.text$mn:00008228 ; Attributes: bp-based frame
.text$mn:00008228
.text$mn:00008228 ; protected: void __thiscall std::vector<wchar_t const *, class std::allocator<wchar_t const *>>::_Reallocate(unsigned int)
.text$mn:00008228                 public ?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z
.text$mn:00008228 ?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z proc near
.text$mn:00008228                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Reserve(uint)+4Ep
.text$mn:00008228
.text$mn:00008228 var_20          = dword ptr -20h
.text$mn:00008228 var_1C          = dword ptr -1Ch
.text$mn:00008228 var_18          = dword ptr -18h
.text$mn:00008228 var_13          = byte ptr -13h
.text$mn:00008228 var_11          = byte ptr -11h
.text$mn:00008228 var_10          = dword ptr -10h
.text$mn:00008228 var_C           = dword ptr -0Ch
.text$mn:00008228 var_4           = dword ptr -4
.text$mn:00008228 arg_0           = dword ptr  8
.text$mn:00008228
.text$mn:00008228 ; FUNCTION CHUNK AT .text$mn:000082BE SIZE 00000009 BYTES
.text$mn:00008228 ; FUNCTION CHUNK AT .text$mn:000082CE SIZE 00000097 BYTES
.text$mn:00008228
.text$mn:00008228                 push    ebp
.text$mn:00008229                 mov     ebp, esp
.text$mn:0000822B                 push    0FFFFFFFFh
.text$mn:0000822D                 push    offset __ehhandler$?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z
.text$mn:00008232                 mov     eax, large fs:0
.text$mn:00008238                 push    eax
.text$mn:00008239                 push    ecx
.text$mn:0000823A                 sub     esp, 10h
.text$mn:0000823D                 push    ebx
.text$mn:0000823E                 push    esi
.text$mn:0000823F                 push    edi
.text$mn:00008240                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008245                 xor     eax, ebp
.text$mn:00008247                 push    eax
.text$mn:00008248                 lea     eax, [ebp+var_C]
.text$mn:0000824B                 mov     large fs:0, eax
.text$mn:00008251                 mov     [ebp+var_10], esp
.text$mn:00008254                 mov     [ebp+var_18], ecx
.text$mn:00008257                 mov     eax, [ebp+arg_0]
.text$mn:0000825A                 push    eax
.text$mn:0000825B                 lea     ecx, [ebp+var_11]
.text$mn:0000825E                 push    ecx
.text$mn:0000825F                 mov     ecx, [ebp+var_18]
.text$mn:00008262                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PB_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Getal(void)
.text$mn:00008267                 mov     ecx, eax
.text$mn:00008269                 call    ?allocate@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEPAPB_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t const *>>::allocate(uint)
.text$mn:0000826E                 mov     [ebp+var_1C], eax
.text$mn:00008271                 mov     [ebp+var_4], 0
.text$mn:00008278                 mov     edx, [ebp+var_1C]
.text$mn:0000827B                 push    edx
.text$mn:0000827C                 mov     eax, [ebp+var_18]
.text$mn:0000827F                 mov     ecx, [eax+8]
.text$mn:00008282                 push    ecx
.text$mn:00008283                 mov     edx, [ebp+var_18]
.text$mn:00008286                 mov     eax, [edx+4]
.text$mn:00008289                 push    eax
.text$mn:0000828A                 mov     ecx, [ebp+var_18]
.text$mn:0000828D                 call    ??$_Umove@PAPB_W@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEPAPB_WPAPB_W00@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Umove<wchar_t const * *>(wchar_t const * *,wchar_t const * *,wchar_t const * *)
.text$mn:00008292                 jmp     short loc_82BE
.text$mn:00008292 ?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z endp
.text$mn:00008292
.text$mn:00008294
.text$mn:00008294 ; =============== S U B R O U T I N E =======================================
.text$mn:00008294
.text$mn:00008294 ; Attributes: noreturn
.text$mn:00008294
.text$mn:00008294 __catch$?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z$0 proc near
.text$mn:00008294                                         ; DATA XREF: .xdata$x:0000BA68o
.text$mn:00008294                 mov     ecx, [ebp+8]
.text$mn:00008297                 push    ecx             ; int
.text$mn:00008298                 mov     edx, [ebp-1Ch]
.text$mn:0000829B                 push    edx             ; void *
.text$mn:0000829C                 lea     eax, [ebp-12h]
.text$mn:0000829F                 push    eax
.text$mn:000082A0                 mov     ecx, [ebp-18h]
.text$mn:000082A3                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PB_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Getal(void)
.text$mn:000082A8                 mov     ecx, eax
.text$mn:000082AA                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEXPAPB_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t const *>>::deallocate(wchar_t const * *,uint)
.text$mn:000082AF                 push    0
.text$mn:000082B1                 push    0
.text$mn:000082B3                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:000082B3 __catch$?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z$0 endp
.text$mn:000082B3
.text$mn:000082B8 ; ---------------------------------------------------------------------------
.text$mn:000082B8                 mov     eax, offset $LN8_0
.text$mn:000082BD                 retn
.text$mn:000082BE ; ---------------------------------------------------------------------------
.text$mn:000082BE ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z
.text$mn:000082BE
.text$mn:000082BE loc_82BE:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Reallocate(uint)+6Aj
.text$mn:000082BE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000082C5                 jmp     short loc_82CE
.text$mn:000082C5 ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z
.text$mn:000082C7
.text$mn:000082C7 ; =============== S U B R O U T I N E =======================================
.text$mn:000082C7
.text$mn:000082C7
.text$mn:000082C7 $LN8_0          proc near               ; DATA XREF: .text$mn:000082B8o
.text$mn:000082C7                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:000082C7 $LN8_0          endp ; sp-analysis failed
.text$mn:000082C7
.text$mn:000082CE ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z
.text$mn:000082CE
.text$mn:000082CE loc_82CE:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Reallocate(uint)+9Dj
.text$mn:000082CE                 mov     ecx, [ebp+var_18]
.text$mn:000082D1                 call    ?size@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::size(void)
.text$mn:000082D6                 mov     [ebp+var_20], eax
.text$mn:000082D9                 mov     ecx, [ebp+var_18]
.text$mn:000082DC                 cmp     dword ptr [ecx+4], 0
.text$mn:000082E0                 jz      short loc_8322
.text$mn:000082E2                 mov     edx, [ebp+var_18]
.text$mn:000082E5                 mov     eax, [edx+8]
.text$mn:000082E8                 push    eax
.text$mn:000082E9                 mov     ecx, [ebp+var_18]
.text$mn:000082EC                 mov     edx, [ecx+4]
.text$mn:000082EF                 push    edx
.text$mn:000082F0                 mov     ecx, [ebp+var_18]
.text$mn:000082F3                 call    ?_Destroy@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXPAPB_W0@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Destroy(wchar_t const * *,wchar_t const * *)
.text$mn:000082F8                 mov     eax, [ebp+var_18]
.text$mn:000082FB                 mov     ecx, [ebp+var_18]
.text$mn:000082FE                 mov     edx, [eax+0Ch]
.text$mn:00008301                 sub     edx, [ecx+4]
.text$mn:00008304                 sar     edx, 2
.text$mn:00008307                 push    edx             ; int
.text$mn:00008308                 mov     eax, [ebp+var_18]
.text$mn:0000830B                 mov     ecx, [eax+4]
.text$mn:0000830E                 push    ecx             ; void *
.text$mn:0000830F                 lea     edx, [ebp+var_13]
.text$mn:00008312                 push    edx
.text$mn:00008313                 mov     ecx, [ebp+var_18]
.text$mn:00008316                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PB_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Getal(void)
.text$mn:0000831B                 mov     ecx, eax
.text$mn:0000831D                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEXPAPB_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t const *>>::deallocate(wchar_t const * *,uint)
.text$mn:00008322
.text$mn:00008322 loc_8322:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Reallocate(uint)+B8j
.text$mn:00008322                 mov     ecx, [ebp+var_18] ; this
.text$mn:00008325                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000832A                 mov     eax, [ebp+arg_0]
.text$mn:0000832D                 mov     ecx, [ebp+var_1C]
.text$mn:00008330                 lea     edx, [ecx+eax*4]
.text$mn:00008333                 mov     eax, [ebp+var_18]
.text$mn:00008336                 mov     [eax+0Ch], edx
.text$mn:00008339                 mov     ecx, [ebp+var_20]
.text$mn:0000833C                 mov     edx, [ebp+var_1C]
.text$mn:0000833F                 lea     eax, [edx+ecx*4]
.text$mn:00008342                 mov     ecx, [ebp+var_18]
.text$mn:00008345                 mov     [ecx+8], eax
.text$mn:00008348                 mov     edx, [ebp+var_18]
.text$mn:0000834B                 mov     eax, [ebp+var_1C]
.text$mn:0000834E                 mov     [edx+4], eax
.text$mn:00008351                 mov     ecx, [ebp+var_C]
.text$mn:00008354                 mov     large fs:0, ecx
.text$mn:0000835B                 pop     ecx
.text$mn:0000835C                 pop     edi
.text$mn:0000835D                 pop     esi
.text$mn:0000835E                 pop     ebx
.text$mn:0000835F                 mov     esp, ebp
.text$mn:00008361                 pop     ebp
.text$mn:00008362                 retn    4
.text$mn:00008362 ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z
.text$mn:00008362 ; ---------------------------------------------------------------------------
.text$mn:00008365                 align 4
.text$mn:00008365 _text$mn        ends
.text$mn:00008365
.text$x:00008368 ; ===========================================================================
.text$x:00008368
.text$x:00008368 ; Segment type: Pure code
.text$x:00008368 ; Segment permissions: Read/Execute
.text$x:00008368 _text$x         segment para public 'CODE' use32
.text$x:00008368                 assume cs:_text$x
.text$x:00008368                 ;org 8368h
.text$x:00008368 ; COMDAT (pick associative to section at 8228)
.text$x:00008368                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008368
.text$x:00008368 ; =============== S U B R O U T I N E =======================================
.text$x:00008368
.text$x:00008368
.text$x:00008368 __ehhandler$?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z proc near
.text$x:00008368                                         ; DATA XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Reallocate(uint)+5o
.text$x:00008368
.text$x:00008368 arg_4           = dword ptr  8
.text$x:00008368
.text$x:00008368                 mov     edx, [esp+arg_4]
.text$x:0000836C                 lea     eax, [edx+0Ch]
.text$x:0000836F                 mov     ecx, [edx-24h]
.text$x:00008372                 xor     ecx, eax
.text$x:00008374                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008379                 mov     eax, offset __ehfuncinfo$?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z
.text$x:0000837E                 jmp     ___CxxFrameHandler3
.text$x:0000837E __ehhandler$?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z endp
.text$x:0000837E
.text$x:0000837E ; ---------------------------------------------------------------------------
.text$x:00008383                 align 4
.text$x:00008383 _text$x         ends
.text$x:00008383
.text$mn:00008384 ; ===========================================================================
.text$mn:00008384
.text$mn:00008384 ; Segment type: Pure code
.text$mn:00008384 ; Segment permissions: Read/Execute
.text$mn:00008384 _text$mn        segment para public 'CODE' use32
.text$mn:00008384                 assume cs:_text$mn
.text$mn:00008384                 ;org 8384h
.text$mn:00008384 ; COMDAT (pick any)
.text$mn:00008384                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008384
.text$mn:00008384 ; =============== S U B R O U T I N E =======================================
.text$mn:00008384
.text$mn:00008384 ; Attributes: bp-based frame
.text$mn:00008384
.text$mn:00008384 ; protected: void __thiscall std::vector<wchar_t const *, class std::allocator<wchar_t const *>>::_Reserve(unsigned int)
.text$mn:00008384                 public ?_Reserve@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z
.text$mn:00008384 ?_Reserve@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z proc near
.text$mn:00008384                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * &&)+54p
.text$mn:00008384                                         ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * &&)+C3p ...
.text$mn:00008384
.text$mn:00008384 var_4           = dword ptr -4
.text$mn:00008384 arg_0           = dword ptr  8
.text$mn:00008384
.text$mn:00008384                 push    ebp
.text$mn:00008385                 mov     ebp, esp
.text$mn:00008387                 push    ecx
.text$mn:00008388                 push    esi
.text$mn:00008389                 mov     [ebp+var_4], ecx
.text$mn:0000838C                 mov     ecx, [ebp+var_4]
.text$mn:0000838F                 call    ?_Unused_capacity@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Unused_capacity(void)
.text$mn:00008394                 cmp     eax, [ebp+arg_0]
.text$mn:00008397                 jnb     short loc_83D7
.text$mn:00008399                 mov     ecx, [ebp+var_4]
.text$mn:0000839C                 call    ?max_size@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::max_size(void)
.text$mn:000083A1                 mov     esi, eax
.text$mn:000083A3                 mov     ecx, [ebp+var_4]
.text$mn:000083A6                 call    ?size@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::size(void)
.text$mn:000083AB                 sub     esi, eax
.text$mn:000083AD                 cmp     esi, [ebp+arg_0]
.text$mn:000083B0                 jnb     short loc_83BA
.text$mn:000083B2                 mov     ecx, [ebp+var_4]
.text$mn:000083B5                 call    ?_Xlen@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXXZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Xlen(void)
.text$mn:000083BA
.text$mn:000083BA loc_83BA:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Reserve(uint)+2Cj
.text$mn:000083BA                 mov     ecx, [ebp+var_4]
.text$mn:000083BD                 call    ?size@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::size(void)
.text$mn:000083C2                 add     eax, [ebp+arg_0]
.text$mn:000083C5                 push    eax
.text$mn:000083C6                 mov     ecx, [ebp+var_4]
.text$mn:000083C9                 call    ?_Grow_to@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEII@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Grow_to(uint)
.text$mn:000083CE                 push    eax
.text$mn:000083CF                 mov     ecx, [ebp+var_4]
.text$mn:000083D2                 call    ?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Reallocate(uint)
.text$mn:000083D7
.text$mn:000083D7 loc_83D7:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Reserve(uint)+13j
.text$mn:000083D7                 pop     esi
.text$mn:000083D8                 mov     esp, ebp
.text$mn:000083DA                 pop     ebp
.text$mn:000083DB                 retn    4
.text$mn:000083DB ?_Reserve@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z endp
.text$mn:000083DB
.text$mn:000083DB ; ---------------------------------------------------------------------------
.text$mn:000083DE                 align 10h
.text$mn:000083DE _text$mn        ends
.text$mn:000083DE
.text$mn:000083E0 ; ===========================================================================
.text$mn:000083E0
.text$mn:000083E0 ; Segment type: Pure code
.text$mn:000083E0 ; Segment permissions: Read/Execute
.text$mn:000083E0 _text$mn        segment para public 'CODE' use32
.text$mn:000083E0                 assume cs:_text$mn
.text$mn:000083E0                 ;org 83E0h
.text$mn:000083E0 ; COMDAT (pick any)
.text$mn:000083E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000083E0
.text$mn:000083E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000083E0
.text$mn:000083E0 ; Attributes: bp-based frame
.text$mn:000083E0
.text$mn:000083E0 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(char, size_t Size)
.text$mn:000083E0                 public ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
.text$mn:000083E0 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
.text$mn:000083E0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+47p
.text$mn:000083E0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+47p ...
.text$mn:000083E0
.text$mn:000083E0 var_C           = dword ptr -0Ch
.text$mn:000083E0 var_8           = dword ptr -8
.text$mn:000083E0 var_2           = byte ptr -2
.text$mn:000083E0 var_1           = byte ptr -1
.text$mn:000083E0 arg_0           = byte ptr  8
.text$mn:000083E0 Size            = dword ptr  0Ch
.text$mn:000083E0
.text$mn:000083E0                 push    ebp
.text$mn:000083E1                 mov     ebp, esp
.text$mn:000083E3                 sub     esp, 0Ch
.text$mn:000083E6                 mov     [ebp+var_8], ecx
.text$mn:000083E9                 movzx   eax, [ebp+arg_0]
.text$mn:000083ED                 test    eax, eax
.text$mn:000083EF                 jnz     short loc_83F3
.text$mn:000083F1                 jmp     short loc_8466
.text$mn:000083F3 ; ---------------------------------------------------------------------------
.text$mn:000083F3
.text$mn:000083F3 loc_83F3:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+Fj
.text$mn:000083F3                 mov     ecx, [ebp+var_8]
.text$mn:000083F6                 cmp     dword ptr [ecx+18h], 10h
.text$mn:000083FA                 jb      short loc_8466
.text$mn:000083FC                 mov     edx, [ebp+var_8]
.text$mn:000083FF                 mov     eax, [edx+4]
.text$mn:00008402                 mov     [ebp+var_C], eax
.text$mn:00008405                 mov     ecx, [ebp+var_8]
.text$mn:00008408                 add     ecx, 4
.text$mn:0000840B                 push    ecx
.text$mn:0000840C                 lea     edx, [ebp+var_1]
.text$mn:0000840F                 push    edx
.text$mn:00008410                 mov     ecx, [ebp+var_8]
.text$mn:00008413                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00008418                 mov     ecx, eax
.text$mn:0000841A                 call    ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)
.text$mn:0000841F                 cmp     [ebp+Size], 0
.text$mn:00008423                 jbe     short loc_8445
.text$mn:00008425                 mov     eax, [ebp+Size]
.text$mn:00008428                 push    eax             ; Size
.text$mn:00008429                 mov     ecx, [ebp+var_C]
.text$mn:0000842C                 push    ecx
.text$mn:0000842D                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00008432                 add     esp, 4
.text$mn:00008435                 push    eax             ; Src
.text$mn:00008436                 mov     edx, [ebp+var_8]
.text$mn:00008439                 add     edx, 4
.text$mn:0000843C                 push    edx             ; Dst
.text$mn:0000843D                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00008442                 add     esp, 0Ch
.text$mn:00008445
.text$mn:00008445 loc_8445:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+43j
.text$mn:00008445                 mov     eax, [ebp+var_8]
.text$mn:00008448                 mov     ecx, [eax+18h]
.text$mn:0000844B                 add     ecx, 1
.text$mn:0000844E                 push    ecx             ; int
.text$mn:0000844F                 mov     edx, [ebp+var_C]
.text$mn:00008452                 push    edx             ; void *
.text$mn:00008453                 lea     eax, [ebp+var_2]
.text$mn:00008456                 push    eax
.text$mn:00008457                 mov     ecx, [ebp+var_8]
.text$mn:0000845A                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:0000845F                 mov     ecx, eax
.text$mn:00008461                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)
.text$mn:00008466
.text$mn:00008466 loc_8466:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+11j
.text$mn:00008466                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+1Aj
.text$mn:00008466                 mov     ecx, [ebp+var_8]
.text$mn:00008469                 mov     dword ptr [ecx+18h], 0Fh
.text$mn:00008470                 mov     edx, [ebp+Size]
.text$mn:00008473                 push    edx
.text$mn:00008474                 mov     ecx, [ebp+var_8]
.text$mn:00008477                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000847C                 mov     esp, ebp
.text$mn:0000847E                 pop     ebp
.text$mn:0000847F                 retn    8
.text$mn:0000847F ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z endp
.text$mn:0000847F
.text$mn:0000847F ; ---------------------------------------------------------------------------
.text$mn:00008482                 align 4
.text$mn:00008482 _text$mn        ends
.text$mn:00008482
.text$mn:00008484 ; ===========================================================================
.text$mn:00008484
.text$mn:00008484 ; Segment type: Pure code
.text$mn:00008484 ; Segment permissions: Read/Execute
.text$mn:00008484 _text$mn        segment para public 'CODE' use32
.text$mn:00008484                 assume cs:_text$mn
.text$mn:00008484                 ;org 8484h
.text$mn:00008484 ; COMDAT (pick any)
.text$mn:00008484                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008484
.text$mn:00008484 ; =============== S U B R O U T I N E =======================================
.text$mn:00008484
.text$mn:00008484 ; Attributes: bp-based frame
.text$mn:00008484
.text$mn:00008484 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Tidy(bool, unsigned int)
.text$mn:00008484                 public ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z
.text$mn:00008484 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z proc near
.text$mn:00008484                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+4Bp
.text$mn:00008484                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+56p ...
.text$mn:00008484
.text$mn:00008484 var_C           = dword ptr -0Ch
.text$mn:00008484 var_8           = dword ptr -8
.text$mn:00008484 var_2           = byte ptr -2
.text$mn:00008484 var_1           = byte ptr -1
.text$mn:00008484 arg_0           = byte ptr  8
.text$mn:00008484 arg_4           = dword ptr  0Ch
.text$mn:00008484
.text$mn:00008484                 push    ebp
.text$mn:00008485                 mov     ebp, esp
.text$mn:00008487                 sub     esp, 0Ch
.text$mn:0000848A                 mov     [ebp+var_8], ecx
.text$mn:0000848D                 movzx   eax, [ebp+arg_0]
.text$mn:00008491                 test    eax, eax
.text$mn:00008493                 jnz     short loc_8497
.text$mn:00008495                 jmp     short loc_850A
.text$mn:00008497 ; ---------------------------------------------------------------------------
.text$mn:00008497
.text$mn:00008497 loc_8497:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+Fj
.text$mn:00008497                 mov     ecx, [ebp+var_8]
.text$mn:0000849A                 cmp     dword ptr [ecx+18h], 8
.text$mn:0000849E                 jb      short loc_850A
.text$mn:000084A0                 mov     edx, [ebp+var_8]
.text$mn:000084A3                 mov     eax, [edx+4]
.text$mn:000084A6                 mov     [ebp+var_C], eax
.text$mn:000084A9                 mov     ecx, [ebp+var_8]
.text$mn:000084AC                 add     ecx, 4
.text$mn:000084AF                 push    ecx
.text$mn:000084B0                 lea     edx, [ebp+var_1]
.text$mn:000084B3                 push    edx
.text$mn:000084B4                 mov     ecx, [ebp+var_8]
.text$mn:000084B7                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000084BC                 mov     ecx, eax
.text$mn:000084BE                 call    ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:000084C3                 cmp     [ebp+arg_4], 0
.text$mn:000084C7                 jbe     short loc_84E9
.text$mn:000084C9                 mov     eax, [ebp+arg_4]
.text$mn:000084CC                 push    eax             ; int
.text$mn:000084CD                 mov     ecx, [ebp+var_C]
.text$mn:000084D0                 push    ecx
.text$mn:000084D1                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:000084D6                 add     esp, 4
.text$mn:000084D9                 push    eax             ; Src
.text$mn:000084DA                 mov     edx, [ebp+var_8]
.text$mn:000084DD                 add     edx, 4
.text$mn:000084E0                 push    edx             ; Dst
.text$mn:000084E1                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:000084E6                 add     esp, 0Ch
.text$mn:000084E9
.text$mn:000084E9 loc_84E9:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+43j
.text$mn:000084E9                 mov     eax, [ebp+var_8]
.text$mn:000084EC                 mov     ecx, [eax+18h]
.text$mn:000084EF                 add     ecx, 1
.text$mn:000084F2                 push    ecx             ; int
.text$mn:000084F3                 mov     edx, [ebp+var_C]
.text$mn:000084F6                 push    edx             ; void *
.text$mn:000084F7                 lea     eax, [ebp+var_2]
.text$mn:000084FA                 push    eax
.text$mn:000084FB                 mov     ecx, [ebp+var_8]
.text$mn:000084FE                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00008503                 mov     ecx, eax
.text$mn:00008505                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)
.text$mn:0000850A
.text$mn:0000850A loc_850A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+11j
.text$mn:0000850A                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+1Aj
.text$mn:0000850A                 mov     ecx, [ebp+var_8]
.text$mn:0000850D                 mov     dword ptr [ecx+18h], 7
.text$mn:00008514                 mov     edx, [ebp+arg_4]
.text$mn:00008517                 push    edx
.text$mn:00008518                 mov     ecx, [ebp+var_8]
.text$mn:0000851B                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00008520                 mov     esp, ebp
.text$mn:00008522                 pop     ebp
.text$mn:00008523                 retn    8
.text$mn:00008523 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z endp
.text$mn:00008523
.text$mn:00008523 ; ---------------------------------------------------------------------------
.text$mn:00008526                 align 4
.text$mn:00008526 _text$mn        ends
.text$mn:00008526
.text$mn:00008528 ; ===========================================================================
.text$mn:00008528
.text$mn:00008528 ; Segment type: Pure code
.text$mn:00008528 ; Segment permissions: Read/Execute
.text$mn:00008528 _text$mn        segment para public 'CODE' use32
.text$mn:00008528                 assume cs:_text$mn
.text$mn:00008528                 ;org 8528h
.text$mn:00008528 ; COMDAT (pick any)
.text$mn:00008528                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008528
.text$mn:00008528 ; =============== S U B R O U T I N E =======================================
.text$mn:00008528
.text$mn:00008528 ; Attributes: bp-based frame
.text$mn:00008528
.text$mn:00008528 ; protected: void __thiscall std::vector<wchar_t const *, class std::allocator<wchar_t const *>>::_Tidy(void)
.text$mn:00008528                 public ?_Tidy@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXXZ
.text$mn:00008528 ?_Tidy@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXXZ proc near
.text$mn:00008528                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::~vector<wchar_t const *,std::allocator<wchar_t const *>>(void)+30p
.text$mn:00008528
.text$mn:00008528 var_8           = dword ptr -8
.text$mn:00008528 var_1           = byte ptr -1
.text$mn:00008528
.text$mn:00008528                 push    ebp
.text$mn:00008529                 mov     ebp, esp
.text$mn:0000852B                 sub     esp, 8
.text$mn:0000852E                 mov     [ebp+var_8], ecx
.text$mn:00008531                 mov     eax, [ebp+var_8]
.text$mn:00008534                 cmp     dword ptr [eax+4], 0
.text$mn:00008538                 jz      short loc_85A0
.text$mn:0000853A                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000853D                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00008542                 mov     ecx, [ebp+var_8]
.text$mn:00008545                 mov     edx, [ecx+8]
.text$mn:00008548                 push    edx
.text$mn:00008549                 mov     eax, [ebp+var_8]
.text$mn:0000854C                 mov     ecx, [eax+4]
.text$mn:0000854F                 push    ecx
.text$mn:00008550                 mov     ecx, [ebp+var_8]
.text$mn:00008553                 call    ?_Destroy@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXPAPB_W0@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Destroy(wchar_t const * *,wchar_t const * *)
.text$mn:00008558                 mov     edx, [ebp+var_8]
.text$mn:0000855B                 mov     eax, [ebp+var_8]
.text$mn:0000855E                 mov     ecx, [edx+0Ch]
.text$mn:00008561                 sub     ecx, [eax+4]
.text$mn:00008564                 sar     ecx, 2
.text$mn:00008567                 push    ecx             ; int
.text$mn:00008568                 mov     edx, [ebp+var_8]
.text$mn:0000856B                 mov     eax, [edx+4]
.text$mn:0000856E                 push    eax             ; void *
.text$mn:0000856F                 lea     ecx, [ebp+var_1]
.text$mn:00008572                 push    ecx
.text$mn:00008573                 mov     ecx, [ebp+var_8]
.text$mn:00008576                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PB_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Getal(void)
.text$mn:0000857B                 mov     ecx, eax
.text$mn:0000857D                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEXPAPB_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t const *>>::deallocate(wchar_t const * *,uint)
.text$mn:00008582                 mov     edx, [ebp+var_8]
.text$mn:00008585                 mov     dword ptr [edx+4], 0
.text$mn:0000858C                 mov     eax, [ebp+var_8]
.text$mn:0000858F                 mov     dword ptr [eax+8], 0
.text$mn:00008596                 mov     ecx, [ebp+var_8]
.text$mn:00008599                 mov     dword ptr [ecx+0Ch], 0
.text$mn:000085A0
.text$mn:000085A0 loc_85A0:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Tidy(void)+10j
.text$mn:000085A0                 mov     esp, ebp
.text$mn:000085A2                 pop     ebp
.text$mn:000085A3                 retn
.text$mn:000085A3 ?_Tidy@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXXZ endp
.text$mn:000085A3
.text$mn:000085A3 _text$mn        ends
.text$mn:000085A3
.text$mn:000085A4 ; ===========================================================================
.text$mn:000085A4
.text$mn:000085A4 ; Segment type: Pure code
.text$mn:000085A4 ; Segment permissions: Read/Execute
.text$mn:000085A4 _text$mn        segment para public 'CODE' use32
.text$mn:000085A4                 assume cs:_text$mn
.text$mn:000085A4                 ;org 85A4h
.text$mn:000085A4 ; COMDAT (pick any)
.text$mn:000085A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000085A4
.text$mn:000085A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000085A4
.text$mn:000085A4 ; Attributes: bp-based frame
.text$mn:000085A4
.text$mn:000085A4 ; public: unsigned int __thiscall std::vector<wchar_t const *, class std::allocator<wchar_t const *>>::_Unused_capacity(void)const
.text$mn:000085A4                 public ?_Unused_capacity@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ
.text$mn:000085A4 ?_Unused_capacity@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ proc near
.text$mn:000085A4                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Reserve(uint)+Bp
.text$mn:000085A4
.text$mn:000085A4 var_4           = dword ptr -4
.text$mn:000085A4
.text$mn:000085A4                 push    ebp
.text$mn:000085A5                 mov     ebp, esp
.text$mn:000085A7                 push    ecx
.text$mn:000085A8                 mov     [ebp+var_4], ecx
.text$mn:000085AB                 mov     eax, [ebp+var_4]
.text$mn:000085AE                 mov     ecx, [ebp+var_4]
.text$mn:000085B1                 mov     eax, [eax+0Ch]
.text$mn:000085B4                 sub     eax, [ecx+8]
.text$mn:000085B7                 sar     eax, 2
.text$mn:000085BA                 mov     esp, ebp
.text$mn:000085BC                 pop     ebp
.text$mn:000085BD                 retn
.text$mn:000085BD ?_Unused_capacity@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ endp
.text$mn:000085BD
.text$mn:000085BD ; ---------------------------------------------------------------------------
.text$mn:000085BE                 align 10h
.text$mn:000085BE _text$mn        ends
.text$mn:000085BE
.text$mn:000085C0 ; ===========================================================================
.text$mn:000085C0
.text$mn:000085C0 ; Segment type: Pure code
.text$mn:000085C0 ; Segment permissions: Read/Execute
.text$mn:000085C0 _text$mn        segment para public 'CODE' use32
.text$mn:000085C0                 assume cs:_text$mn
.text$mn:000085C0                 ;org 85C0h
.text$mn:000085C0 ; COMDAT (pick any)
.text$mn:000085C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000085C0
.text$mn:000085C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000085C0
.text$mn:000085C0 ; Attributes: bp-based frame
.text$mn:000085C0
.text$mn:000085C0 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xlen(void)const
.text$mn:000085C0                 public ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:000085C0 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:000085C0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+19p
.text$mn:000085C0
.text$mn:000085C0 var_4           = dword ptr -4
.text$mn:000085C0
.text$mn:000085C0                 push    ebp
.text$mn:000085C1                 mov     ebp, esp
.text$mn:000085C3                 push    ecx
.text$mn:000085C4                 mov     [ebp+var_4], ecx
.text$mn:000085C7                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:000085CC                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:000085D1                 mov     esp, ebp
.text$mn:000085D3                 pop     ebp
.text$mn:000085D4                 retn
.text$mn:000085D4 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:000085D4
.text$mn:000085D4 ; ---------------------------------------------------------------------------
.text$mn:000085D5                 align 4
.text$mn:000085D5 _text$mn        ends
.text$mn:000085D5
.text$mn:000085D8 ; ===========================================================================
.text$mn:000085D8
.text$mn:000085D8 ; Segment type: Pure code
.text$mn:000085D8 ; Segment permissions: Read/Execute
.text$mn:000085D8 _text$mn        segment para public 'CODE' use32
.text$mn:000085D8                 assume cs:_text$mn
.text$mn:000085D8                 ;org 85D8h
.text$mn:000085D8 ; COMDAT (pick any)
.text$mn:000085D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000085D8
.text$mn:000085D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000085D8
.text$mn:000085D8 ; Attributes: bp-based frame
.text$mn:000085D8
.text$mn:000085D8 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xlen(void)const
.text$mn:000085D8                 public ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:000085D8 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:000085D8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+19p
.text$mn:000085D8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Dp ...
.text$mn:000085D8
.text$mn:000085D8 var_4           = dword ptr -4
.text$mn:000085D8
.text$mn:000085D8                 push    ebp
.text$mn:000085D9                 mov     ebp, esp
.text$mn:000085DB                 push    ecx
.text$mn:000085DC                 mov     [ebp+var_4], ecx
.text$mn:000085DF                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:000085E4                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:000085E9                 mov     esp, ebp
.text$mn:000085EB                 pop     ebp
.text$mn:000085EC                 retn
.text$mn:000085EC ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:000085EC
.text$mn:000085EC ; ---------------------------------------------------------------------------
.text$mn:000085ED                 align 10h
.text$mn:000085ED _text$mn        ends
.text$mn:000085ED
.text$mn:000085F0 ; ===========================================================================
.text$mn:000085F0
.text$mn:000085F0 ; Segment type: Pure code
.text$mn:000085F0 ; Segment permissions: Read/Execute
.text$mn:000085F0 _text$mn        segment para public 'CODE' use32
.text$mn:000085F0                 assume cs:_text$mn
.text$mn:000085F0                 ;org 85F0h
.text$mn:000085F0 ; COMDAT (pick any)
.text$mn:000085F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000085F0
.text$mn:000085F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000085F0
.text$mn:000085F0 ; Attributes: bp-based frame
.text$mn:000085F0
.text$mn:000085F0 ; protected: void __thiscall std::vector<wchar_t const *, class std::allocator<wchar_t const *>>::_Xlen(void)const
.text$mn:000085F0                 public ?_Xlen@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXXZ
.text$mn:000085F0 ?_Xlen@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXXZ proc near
.text$mn:000085F0                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Reserve(uint)+31p
.text$mn:000085F0
.text$mn:000085F0 var_4           = dword ptr -4
.text$mn:000085F0
.text$mn:000085F0                 push    ebp
.text$mn:000085F1                 mov     ebp, esp
.text$mn:000085F3                 push    ecx
.text$mn:000085F4                 mov     [ebp+var_4], ecx
.text$mn:000085F7                 push    offset ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; "vector<T> too long"
.text$mn:000085FC                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:00008601                 mov     esp, ebp
.text$mn:00008603                 pop     ebp
.text$mn:00008604                 retn
.text$mn:00008604 ?_Xlen@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXXZ endp
.text$mn:00008604
.text$mn:00008604 ; ---------------------------------------------------------------------------
.text$mn:00008605                 align 4
.text$mn:00008605 _text$mn        ends
.text$mn:00008605
.text$mn:00008608 ; ===========================================================================
.text$mn:00008608
.text$mn:00008608 ; Segment type: Pure code
.text$mn:00008608 ; Segment permissions: Read/Execute
.text$mn:00008608 _text$mn        segment para public 'CODE' use32
.text$mn:00008608                 assume cs:_text$mn
.text$mn:00008608                 ;org 8608h
.text$mn:00008608 ; COMDAT (pick any)
.text$mn:00008608                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008608
.text$mn:00008608 ; =============== S U B R O U T I N E =======================================
.text$mn:00008608
.text$mn:00008608 ; Attributes: bp-based frame
.text$mn:00008608
.text$mn:00008608 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xran(void)const
.text$mn:00008608                 public ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:00008608 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:00008608                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+19p
.text$mn:00008608                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+15p ...
.text$mn:00008608
.text$mn:00008608 var_4           = dword ptr -4
.text$mn:00008608
.text$mn:00008608                 push    ebp
.text$mn:00008609                 mov     ebp, esp
.text$mn:0000860B                 push    ecx
.text$mn:0000860C                 mov     [ebp+var_4], ecx
.text$mn:0000860F                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:00008614                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:00008619                 mov     esp, ebp
.text$mn:0000861B                 pop     ebp
.text$mn:0000861C                 retn
.text$mn:0000861C ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:0000861C
.text$mn:0000861C ; ---------------------------------------------------------------------------
.text$mn:0000861D                 align 10h
.text$mn:0000861D _text$mn        ends
.text$mn:0000861D
.text$mn:00008620 ; ===========================================================================
.text$mn:00008620
.text$mn:00008620 ; Segment type: Pure code
.text$mn:00008620 ; Segment permissions: Read/Execute
.text$mn:00008620 _text$mn        segment para public 'CODE' use32
.text$mn:00008620                 assume cs:_text$mn
.text$mn:00008620                 ;org 8620h
.text$mn:00008620 ; COMDAT (pick any)
.text$mn:00008620                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008620
.text$mn:00008620 ; =============== S U B R O U T I N E =======================================
.text$mn:00008620
.text$mn:00008620 ; Attributes: bp-based frame
.text$mn:00008620
.text$mn:00008620 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xran(void)const
.text$mn:00008620                 public ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:00008620 ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:00008620                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p
.text$mn:00008620                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p ...
.text$mn:00008620
.text$mn:00008620 var_4           = dword ptr -4
.text$mn:00008620
.text$mn:00008620                 push    ebp
.text$mn:00008621                 mov     ebp, esp
.text$mn:00008623                 push    ecx
.text$mn:00008624                 mov     [ebp+var_4], ecx
.text$mn:00008627                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:0000862C                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:00008631                 mov     esp, ebp
.text$mn:00008633                 pop     ebp
.text$mn:00008634                 retn
.text$mn:00008634 ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:00008634
.text$mn:00008634 ; ---------------------------------------------------------------------------
.text$mn:00008635                 align 4
.text$mn:00008635 _text$mn        ends
.text$mn:00008635
.text$mn:00008638 ; ===========================================================================
.text$mn:00008638
.text$mn:00008638 ; Segment type: Pure code
.text$mn:00008638 ; Segment permissions: Read/Execute
.text$mn:00008638 _text$mn        segment para public 'CODE' use32
.text$mn:00008638                 assume cs:_text$mn
.text$mn:00008638                 ;org 8638h
.text$mn:00008638 ; COMDAT (pick any)
.text$mn:00008638                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008638
.text$mn:00008638 ; =============== S U B R O U T I N E =======================================
.text$mn:00008638
.text$mn:00008638 ; Attributes: bp-based frame
.text$mn:00008638
.text$mn:00008638 ; protected: void __thiscall std::vector<wchar_t const *, class std::allocator<wchar_t const *>>::_Xran(void)const
.text$mn:00008638                 public ?_Xran@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXXZ
.text$mn:00008638 ?_Xran@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXXZ proc near
.text$mn:00008638                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::at(uint)+17p
.text$mn:00008638
.text$mn:00008638 var_4           = dword ptr -4
.text$mn:00008638
.text$mn:00008638                 push    ebp
.text$mn:00008639                 mov     ebp, esp
.text$mn:0000863B                 push    ecx
.text$mn:0000863C                 mov     [ebp+var_4], ecx
.text$mn:0000863F                 push    offset ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@ ; "invalid vector<T> subscript"
.text$mn:00008644                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:00008649                 mov     esp, ebp
.text$mn:0000864B                 pop     ebp
.text$mn:0000864C                 retn
.text$mn:0000864C ?_Xran@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXXZ endp
.text$mn:0000864C
.text$mn:0000864C ; ---------------------------------------------------------------------------
.text$mn:0000864D                 align 10h
.text$mn:0000864D _text$mn        ends
.text$mn:0000864D
.text$mn:00008650 ; ===========================================================================
.text$mn:00008650
.text$mn:00008650 ; Segment type: Pure code
.text$mn:00008650 ; Segment permissions: Read/Execute
.text$mn:00008650 _text$mn        segment para public 'CODE' use32
.text$mn:00008650                 assume cs:_text$mn
.text$mn:00008650                 ;org 8650h
.text$mn:00008650 ; COMDAT (pick any)
.text$mn:00008650                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008650
.text$mn:00008650 ; =============== S U B R O U T I N E =======================================
.text$mn:00008650
.text$mn:00008650 ; Attributes: bp-based frame
.text$mn:00008650
.text$mn:00008650 ; public: char * __thiscall std::_Wrap_alloc<class std::allocator<char>>::allocate(unsigned int)
.text$mn:00008650                 public ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
.text$mn:00008650 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
.text$mn:00008650                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+BBp
.text$mn:00008650                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+22p
.text$mn:00008650
.text$mn:00008650 var_4           = dword ptr -4
.text$mn:00008650 arg_0           = dword ptr  8
.text$mn:00008650
.text$mn:00008650                 push    ebp
.text$mn:00008651                 mov     ebp, esp
.text$mn:00008653                 push    ecx
.text$mn:00008654                 mov     [ebp+var_4], ecx
.text$mn:00008657                 mov     eax, [ebp+arg_0]
.text$mn:0000865A                 push    eax
.text$mn:0000865B                 mov     ecx, [ebp+var_4]
.text$mn:0000865E                 call    ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate(uint)
.text$mn:00008663                 mov     esp, ebp
.text$mn:00008665                 pop     ebp
.text$mn:00008666                 retn    4
.text$mn:00008666 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z endp
.text$mn:00008666
.text$mn:00008666 ; ---------------------------------------------------------------------------
.text$mn:00008669                 align 4
.text$mn:00008669 _text$mn        ends
.text$mn:00008669
.text$mn:0000866C ; ===========================================================================
.text$mn:0000866C
.text$mn:0000866C ; Segment type: Pure code
.text$mn:0000866C ; Segment permissions: Read/Execute
.text$mn:0000866C _text$mn        segment para public 'CODE' use32
.text$mn:0000866C                 assume cs:_text$mn
.text$mn:0000866C                 ;org 866Ch
.text$mn:0000866C ; COMDAT (pick any)
.text$mn:0000866C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000866C
.text$mn:0000866C ; =============== S U B R O U T I N E =======================================
.text$mn:0000866C
.text$mn:0000866C ; Attributes: bp-based frame
.text$mn:0000866C
.text$mn:0000866C ; public: wchar_t const * * __thiscall std::_Wrap_alloc<class std::allocator<wchar_t const *>>::allocate(unsigned int)
.text$mn:0000866C                 public ?allocate@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEPAPB_WI@Z
.text$mn:0000866C ?allocate@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEPAPB_WI@Z proc near
.text$mn:0000866C                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Reallocate(uint)+41p
.text$mn:0000866C
.text$mn:0000866C var_4           = dword ptr -4
.text$mn:0000866C arg_0           = dword ptr  8
.text$mn:0000866C
.text$mn:0000866C                 push    ebp
.text$mn:0000866D                 mov     ebp, esp
.text$mn:0000866F                 push    ecx
.text$mn:00008670                 mov     [ebp+var_4], ecx
.text$mn:00008673                 mov     eax, [ebp+arg_0]
.text$mn:00008676                 push    eax
.text$mn:00008677                 mov     ecx, [ebp+var_4]
.text$mn:0000867A                 call    ?allocate@?$allocator@PB_W@std@@QAEPAPB_WI@Z ; std::allocator<wchar_t const *>::allocate(uint)
.text$mn:0000867F                 mov     esp, ebp
.text$mn:00008681                 pop     ebp
.text$mn:00008682                 retn    4
.text$mn:00008682 ?allocate@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEPAPB_WI@Z endp
.text$mn:00008682
.text$mn:00008682 ; ---------------------------------------------------------------------------
.text$mn:00008685                 align 4
.text$mn:00008685 _text$mn        ends
.text$mn:00008685
.text$mn:00008688 ; ===========================================================================
.text$mn:00008688
.text$mn:00008688 ; Segment type: Pure code
.text$mn:00008688 ; Segment permissions: Read/Execute
.text$mn:00008688 _text$mn        segment para public 'CODE' use32
.text$mn:00008688                 assume cs:_text$mn
.text$mn:00008688                 ;org 8688h
.text$mn:00008688 ; COMDAT (pick any)
.text$mn:00008688                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008688
.text$mn:00008688 ; =============== S U B R O U T I N E =======================================
.text$mn:00008688
.text$mn:00008688 ; Attributes: bp-based frame
.text$mn:00008688
.text$mn:00008688 ; public: struct std::_Container_proxy * __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::allocate(unsigned int)
.text$mn:00008688                 public ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:00008688 ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:00008688                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Alloc_proxy(void)+16p
.text$mn:00008688
.text$mn:00008688 var_4           = dword ptr -4
.text$mn:00008688 arg_0           = dword ptr  8
.text$mn:00008688
.text$mn:00008688                 push    ebp
.text$mn:00008689                 mov     ebp, esp
.text$mn:0000868B                 push    ecx
.text$mn:0000868C                 mov     [ebp+var_4], ecx
.text$mn:0000868F                 mov     eax, [ebp+arg_0]
.text$mn:00008692                 push    eax
.text$mn:00008693                 mov     ecx, [ebp+var_4]
.text$mn:00008696                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:0000869B                 mov     esp, ebp
.text$mn:0000869D                 pop     ebp
.text$mn:0000869E                 retn    4
.text$mn:0000869E ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:0000869E
.text$mn:0000869E ; ---------------------------------------------------------------------------
.text$mn:000086A1                 align 4
.text$mn:000086A1 _text$mn        ends
.text$mn:000086A1
.text$mn:000086A4 ; ===========================================================================
.text$mn:000086A4
.text$mn:000086A4 ; Segment type: Pure code
.text$mn:000086A4 ; Segment permissions: Read/Execute
.text$mn:000086A4 _text$mn        segment para public 'CODE' use32
.text$mn:000086A4                 assume cs:_text$mn
.text$mn:000086A4                 ;org 86A4h
.text$mn:000086A4 ; COMDAT (pick any)
.text$mn:000086A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000086A4
.text$mn:000086A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000086A4
.text$mn:000086A4 ; Attributes: bp-based frame
.text$mn:000086A4
.text$mn:000086A4 ; public: wchar_t * __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::allocate(unsigned int)
.text$mn:000086A4                 public ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z
.text$mn:000086A4 ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z proc near
.text$mn:000086A4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+BBp
.text$mn:000086A4                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+22p
.text$mn:000086A4
.text$mn:000086A4 var_4           = dword ptr -4
.text$mn:000086A4 arg_0           = dword ptr  8
.text$mn:000086A4
.text$mn:000086A4                 push    ebp
.text$mn:000086A5                 mov     ebp, esp
.text$mn:000086A7                 push    ecx
.text$mn:000086A8                 mov     [ebp+var_4], ecx
.text$mn:000086AB                 mov     eax, [ebp+arg_0]
.text$mn:000086AE                 push    eax
.text$mn:000086AF                 mov     ecx, [ebp+var_4]
.text$mn:000086B2                 call    ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate(uint)
.text$mn:000086B7                 mov     esp, ebp
.text$mn:000086B9                 pop     ebp
.text$mn:000086BA                 retn    4
.text$mn:000086BA ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z endp
.text$mn:000086BA
.text$mn:000086BA ; ---------------------------------------------------------------------------
.text$mn:000086BD                 align 10h
.text$mn:000086BD _text$mn        ends
.text$mn:000086BD
.text$mn:000086C0 ; ===========================================================================
.text$mn:000086C0
.text$mn:000086C0 ; Segment type: Pure code
.text$mn:000086C0 ; Segment permissions: Read/Execute
.text$mn:000086C0 _text$mn        segment para public 'CODE' use32
.text$mn:000086C0                 assume cs:_text$mn
.text$mn:000086C0                 ;org 86C0h
.text$mn:000086C0 ; COMDAT (pick any)
.text$mn:000086C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000086C0
.text$mn:000086C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000086C0
.text$mn:000086C0 ; Attributes: bp-based frame
.text$mn:000086C0
.text$mn:000086C0 ; public: char * __thiscall std::allocator<char>::allocate(unsigned int)
.text$mn:000086C0                 public ?allocate@?$allocator@D@std@@QAEPADI@Z
.text$mn:000086C0 ?allocate@?$allocator@D@std@@QAEPADI@Z proc near
.text$mn:000086C0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::allocate(uint)+Ep
.text$mn:000086C0
.text$mn:000086C0 var_4           = dword ptr -4
.text$mn:000086C0 arg_0           = dword ptr  8
.text$mn:000086C0
.text$mn:000086C0                 push    ebp
.text$mn:000086C1                 mov     ebp, esp
.text$mn:000086C3                 push    ecx
.text$mn:000086C4                 mov     [ebp+var_4], ecx
.text$mn:000086C7                 push    0
.text$mn:000086C9                 mov     eax, [ebp+arg_0]
.text$mn:000086CC                 push    eax
.text$mn:000086CD                 call    ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>(uint,char *)
.text$mn:000086D2                 add     esp, 8
.text$mn:000086D5                 mov     esp, ebp
.text$mn:000086D7                 pop     ebp
.text$mn:000086D8                 retn    4
.text$mn:000086D8 ?allocate@?$allocator@D@std@@QAEPADI@Z endp
.text$mn:000086D8
.text$mn:000086D8 ; ---------------------------------------------------------------------------
.text$mn:000086DB                 align 4
.text$mn:000086DB _text$mn        ends
.text$mn:000086DB
.text$mn:000086DC ; ===========================================================================
.text$mn:000086DC
.text$mn:000086DC ; Segment type: Pure code
.text$mn:000086DC ; Segment permissions: Read/Execute
.text$mn:000086DC _text$mn        segment para public 'CODE' use32
.text$mn:000086DC                 assume cs:_text$mn
.text$mn:000086DC                 ;org 86DCh
.text$mn:000086DC ; COMDAT (pick any)
.text$mn:000086DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000086DC
.text$mn:000086DC ; =============== S U B R O U T I N E =======================================
.text$mn:000086DC
.text$mn:000086DC ; Attributes: bp-based frame
.text$mn:000086DC
.text$mn:000086DC ; public: wchar_t const * * __thiscall std::allocator<wchar_t const *>::allocate(unsigned int)
.text$mn:000086DC                 public ?allocate@?$allocator@PB_W@std@@QAEPAPB_WI@Z
.text$mn:000086DC ?allocate@?$allocator@PB_W@std@@QAEPAPB_WI@Z proc near
.text$mn:000086DC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t const *>>::allocate(uint)+Ep
.text$mn:000086DC
.text$mn:000086DC var_4           = dword ptr -4
.text$mn:000086DC arg_0           = dword ptr  8
.text$mn:000086DC
.text$mn:000086DC                 push    ebp
.text$mn:000086DD                 mov     ebp, esp
.text$mn:000086DF                 push    ecx
.text$mn:000086E0                 mov     [ebp+var_4], ecx
.text$mn:000086E3                 push    0
.text$mn:000086E5                 mov     eax, [ebp+arg_0]
.text$mn:000086E8                 push    eax
.text$mn:000086E9                 call    ??$_Allocate@PB_W@std@@YAPAPB_WIPAPB_W@Z ; std::_Allocate<wchar_t const *>(uint,wchar_t const * *)
.text$mn:000086EE                 add     esp, 8
.text$mn:000086F1                 mov     esp, ebp
.text$mn:000086F3                 pop     ebp
.text$mn:000086F4                 retn    4
.text$mn:000086F4 ?allocate@?$allocator@PB_W@std@@QAEPAPB_WI@Z endp
.text$mn:000086F4
.text$mn:000086F4 ; ---------------------------------------------------------------------------
.text$mn:000086F7                 align 4
.text$mn:000086F7 _text$mn        ends
.text$mn:000086F7
.text$mn:000086F8 ; ===========================================================================
.text$mn:000086F8
.text$mn:000086F8 ; Segment type: Pure code
.text$mn:000086F8 ; Segment permissions: Read/Execute
.text$mn:000086F8 _text$mn        segment para public 'CODE' use32
.text$mn:000086F8                 assume cs:_text$mn
.text$mn:000086F8                 ;org 86F8h
.text$mn:000086F8 ; COMDAT (pick any)
.text$mn:000086F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000086F8
.text$mn:000086F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000086F8
.text$mn:000086F8 ; Attributes: bp-based frame
.text$mn:000086F8
.text$mn:000086F8 ; public: struct std::_Container_proxy * __thiscall std::allocator<struct std::_Container_proxy>::allocate(unsigned int)
.text$mn:000086F8                 public ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:000086F8 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:000086F8                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+16p
.text$mn:000086F8                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+16p ...
.text$mn:000086F8
.text$mn:000086F8 var_4           = dword ptr -4
.text$mn:000086F8 arg_0           = dword ptr  8
.text$mn:000086F8
.text$mn:000086F8                 push    ebp
.text$mn:000086F9                 mov     ebp, esp
.text$mn:000086FB                 push    ecx
.text$mn:000086FC                 mov     [ebp+var_4], ecx
.text$mn:000086FF                 push    0
.text$mn:00008701                 mov     eax, [ebp+arg_0]
.text$mn:00008704                 push    eax
.text$mn:00008705                 call    ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)
.text$mn:0000870A                 add     esp, 8
.text$mn:0000870D                 mov     esp, ebp
.text$mn:0000870F                 pop     ebp
.text$mn:00008710                 retn    4
.text$mn:00008710 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:00008710
.text$mn:00008710 ; ---------------------------------------------------------------------------
.text$mn:00008713                 align 4
.text$mn:00008713 _text$mn        ends
.text$mn:00008713
.text$mn:00008714 ; ===========================================================================
.text$mn:00008714
.text$mn:00008714 ; Segment type: Pure code
.text$mn:00008714 ; Segment permissions: Read/Execute
.text$mn:00008714 _text$mn        segment para public 'CODE' use32
.text$mn:00008714                 assume cs:_text$mn
.text$mn:00008714                 ;org 8714h
.text$mn:00008714 ; COMDAT (pick any)
.text$mn:00008714                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008714
.text$mn:00008714 ; =============== S U B R O U T I N E =======================================
.text$mn:00008714
.text$mn:00008714 ; Attributes: bp-based frame
.text$mn:00008714
.text$mn:00008714 ; public: wchar_t * __thiscall std::allocator<wchar_t>::allocate(unsigned int)
.text$mn:00008714                 public ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
.text$mn:00008714 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z proc near
.text$mn:00008714                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)+Ep
.text$mn:00008714
.text$mn:00008714 var_4           = dword ptr -4
.text$mn:00008714 arg_0           = dword ptr  8
.text$mn:00008714
.text$mn:00008714                 push    ebp
.text$mn:00008715                 mov     ebp, esp
.text$mn:00008717                 push    ecx
.text$mn:00008718                 mov     [ebp+var_4], ecx
.text$mn:0000871B                 push    0
.text$mn:0000871D                 mov     eax, [ebp+arg_0]
.text$mn:00008720                 push    eax
.text$mn:00008721                 call    ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>(uint,wchar_t *)
.text$mn:00008726                 add     esp, 8
.text$mn:00008729                 mov     esp, ebp
.text$mn:0000872B                 pop     ebp
.text$mn:0000872C                 retn    4
.text$mn:0000872C ?allocate@?$allocator@_W@std@@QAEPA_WI@Z endp
.text$mn:0000872C
.text$mn:0000872C ; ---------------------------------------------------------------------------
.text$mn:0000872F                 align 10h
.text$mn:0000872F _text$mn        ends
.text$mn:0000872F
.text$mn:00008730 ; ===========================================================================
.text$mn:00008730
.text$mn:00008730 ; Segment type: Pure code
.text$mn:00008730 ; Segment permissions: Read/Execute
.text$mn:00008730 _text$mn        segment para public 'CODE' use32
.text$mn:00008730                 assume cs:_text$mn
.text$mn:00008730                 ;org 8730h
.text$mn:00008730 ; COMDAT (pick any)
.text$mn:00008730                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008730
.text$mn:00008730 ; =============== S U B R O U T I N E =======================================
.text$mn:00008730
.text$mn:00008730 ; Attributes: bp-based frame
.text$mn:00008730
.text$mn:00008730 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::append(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00008730                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
.text$mn:00008730 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z proc near
.text$mn:00008730                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Ep
.text$mn:00008730
.text$mn:00008730 var_4           = dword ptr -4
.text$mn:00008730 arg_0           = dword ptr  8
.text$mn:00008730
.text$mn:00008730                 push    ebp
.text$mn:00008731                 mov     ebp, esp
.text$mn:00008733                 push    ecx
.text$mn:00008734                 mov     [ebp+var_4], ecx
.text$mn:00008737                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000873C                 push    eax
.text$mn:0000873D                 push    0
.text$mn:0000873F                 mov     ecx, [ebp+arg_0]
.text$mn:00008742                 push    ecx
.text$mn:00008743                 mov     ecx, [ebp+var_4]
.text$mn:00008746                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000874B                 mov     esp, ebp
.text$mn:0000874D                 pop     ebp
.text$mn:0000874E                 retn    4
.text$mn:0000874E ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z endp
.text$mn:0000874E
.text$mn:0000874E ; ---------------------------------------------------------------------------
.text$mn:00008751                 align 4
.text$mn:00008751 _text$mn        ends
.text$mn:00008751
.text$mn:00008754 ; ===========================================================================
.text$mn:00008754
.text$mn:00008754 ; Segment type: Pure code
.text$mn:00008754 ; Segment permissions: Read/Execute
.text$mn:00008754 _text$mn        segment para public 'CODE' use32
.text$mn:00008754                 assume cs:_text$mn
.text$mn:00008754                 ;org 8754h
.text$mn:00008754 ; COMDAT (pick any)
.text$mn:00008754                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008754
.text$mn:00008754 ; =============== S U B R O U T I N E =======================================
.text$mn:00008754
.text$mn:00008754 ; Attributes: bp-based frame
.text$mn:00008754
.text$mn:00008754 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::append(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:00008754                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00008754 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00008754                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+16p
.text$mn:00008754                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+53p
.text$mn:00008754
.text$mn:00008754 var_8           = dword ptr -8
.text$mn:00008754 var_4           = dword ptr -4
.text$mn:00008754 arg_0           = dword ptr  8
.text$mn:00008754 arg_4           = dword ptr  0Ch
.text$mn:00008754 arg_8           = dword ptr  10h
.text$mn:00008754
.text$mn:00008754                 push    ebp
.text$mn:00008755                 mov     ebp, esp
.text$mn:00008757                 sub     esp, 8
.text$mn:0000875A                 mov     [ebp+var_4], ecx
.text$mn:0000875D                 mov     ecx, [ebp+arg_0]
.text$mn:00008760                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00008765                 cmp     eax, [ebp+arg_4]
.text$mn:00008768                 jnb     short loc_8772
.text$mn:0000876A                 mov     ecx, [ebp+var_4]
.text$mn:0000876D                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00008772
.text$mn:00008772 loc_8772:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:00008772                 mov     ecx, [ebp+arg_0]
.text$mn:00008775                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000877A                 sub     eax, [ebp+arg_4]
.text$mn:0000877D                 mov     [ebp+var_8], eax
.text$mn:00008780                 mov     eax, [ebp+var_8]
.text$mn:00008783                 cmp     eax, [ebp+arg_8]
.text$mn:00008786                 jnb     short loc_878E
.text$mn:00008788                 mov     ecx, [ebp+var_8]
.text$mn:0000878B                 mov     [ebp+arg_8], ecx
.text$mn:0000878E
.text$mn:0000878E loc_878E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:0000878E                 mov     edx, [ebp+var_4]
.text$mn:00008791                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00008796                 sub     eax, [edx+14h]
.text$mn:00008799                 cmp     eax, [ebp+arg_8]
.text$mn:0000879C                 ja      short loc_87A6
.text$mn:0000879E                 mov     ecx, [ebp+var_4]
.text$mn:000087A1                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:000087A6
.text$mn:000087A6 loc_87A6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+48j
.text$mn:000087A6                 cmp     [ebp+arg_8], 0
.text$mn:000087AA                 jbe     short loc_8806
.text$mn:000087AC                 mov     ecx, [ebp+var_4]
.text$mn:000087AF                 mov     edx, [ecx+14h]
.text$mn:000087B2                 add     edx, [ebp+arg_8]
.text$mn:000087B5                 mov     [ebp+var_8], edx
.text$mn:000087B8                 push    0
.text$mn:000087BA                 mov     eax, [ebp+var_8]
.text$mn:000087BD                 push    eax
.text$mn:000087BE                 mov     ecx, [ebp+var_4]
.text$mn:000087C1                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:000087C6                 movzx   ecx, al
.text$mn:000087C9                 test    ecx, ecx
.text$mn:000087CB                 jz      short loc_8806
.text$mn:000087CD                 mov     edx, [ebp+arg_8]
.text$mn:000087D0                 push    edx             ; int
.text$mn:000087D1                 mov     ecx, [ebp+arg_0]
.text$mn:000087D4                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000087D9                 mov     ecx, [ebp+arg_4]
.text$mn:000087DC                 lea     edx, [eax+ecx*2]
.text$mn:000087DF                 push    edx             ; Src
.text$mn:000087E0                 mov     ecx, [ebp+var_4]
.text$mn:000087E3                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000087E8                 mov     ecx, [ebp+var_4]
.text$mn:000087EB                 mov     edx, [ecx+14h]
.text$mn:000087EE                 lea     eax, [eax+edx*2]
.text$mn:000087F1                 push    eax             ; Dst
.text$mn:000087F2                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:000087F7                 add     esp, 0Ch
.text$mn:000087FA                 mov     ecx, [ebp+var_8]
.text$mn:000087FD                 push    ecx
.text$mn:000087FE                 mov     ecx, [ebp+var_4]
.text$mn:00008801                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00008806
.text$mn:00008806 loc_8806:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+56j
.text$mn:00008806                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+77j
.text$mn:00008806                 mov     eax, [ebp+var_4]
.text$mn:00008809                 mov     esp, ebp
.text$mn:0000880B                 pop     ebp
.text$mn:0000880C                 retn    0Ch
.text$mn:0000880C ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:0000880C
.text$mn:0000880C ; ---------------------------------------------------------------------------
.text$mn:0000880F                 align 10h
.text$mn:0000880F _text$mn        ends
.text$mn:0000880F
.text$mn:00008810 ; ===========================================================================
.text$mn:00008810
.text$mn:00008810 ; Segment type: Pure code
.text$mn:00008810 ; Segment permissions: Read/Execute
.text$mn:00008810 _text$mn        segment para public 'CODE' use32
.text$mn:00008810                 assume cs:_text$mn
.text$mn:00008810                 ;org 8810h
.text$mn:00008810 ; COMDAT (pick any)
.text$mn:00008810                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008810
.text$mn:00008810 ; =============== S U B R O U T I N E =======================================
.text$mn:00008810
.text$mn:00008810 ; Attributes: bp-based frame
.text$mn:00008810
.text$mn:00008810 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t *Str)
.text$mn:00008810                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:00008810 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:00008810                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)+Ep
.text$mn:00008810
.text$mn:00008810 var_4           = dword ptr -4
.text$mn:00008810 Str             = dword ptr  8
.text$mn:00008810
.text$mn:00008810                 push    ebp
.text$mn:00008811                 mov     ebp, esp
.text$mn:00008813                 push    ecx
.text$mn:00008814                 mov     [ebp+var_4], ecx
.text$mn:00008817                 push    43Eh            ; unsigned int
.text$mn:0000881C                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008821                 mov     eax, [ebp+Str]
.text$mn:00008824                 push    eax             ; int
.text$mn:00008825                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000882A                 add     esp, 0Ch
.text$mn:0000882D                 mov     ecx, [ebp+Str]
.text$mn:00008830                 push    ecx             ; Str
.text$mn:00008831                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:00008836                 add     esp, 4
.text$mn:00008839                 push    eax             ; int
.text$mn:0000883A                 mov     edx, [ebp+Str]
.text$mn:0000883D                 push    edx             ; Src
.text$mn:0000883E                 mov     ecx, [ebp+var_4]
.text$mn:00008841                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)
.text$mn:00008846                 mov     esp, ebp
.text$mn:00008848                 pop     ebp
.text$mn:00008849                 retn    4
.text$mn:00008849 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:00008849
.text$mn:00008849 _text$mn        ends
.text$mn:00008849
.text$mn:0000884C ; ===========================================================================
.text$mn:0000884C
.text$mn:0000884C ; Segment type: Pure code
.text$mn:0000884C ; Segment permissions: Read/Execute
.text$mn:0000884C _text$mn        segment para public 'CODE' use32
.text$mn:0000884C                 assume cs:_text$mn
.text$mn:0000884C                 ;org 884Ch
.text$mn:0000884C ; COMDAT (pick any)
.text$mn:0000884C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000884C
.text$mn:0000884C ; =============== S U B R O U T I N E =======================================
.text$mn:0000884C
.text$mn:0000884C ; Attributes: bp-based frame
.text$mn:0000884C
.text$mn:0000884C ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(void *Src, int)
.text$mn:0000884C                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:0000884C ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:0000884C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+31p
.text$mn:0000884C
.text$mn:0000884C var_8           = dword ptr -8
.text$mn:0000884C var_4           = dword ptr -4
.text$mn:0000884C Src             = dword ptr  8
.text$mn:0000884C arg_4           = dword ptr  0Ch
.text$mn:0000884C
.text$mn:0000884C                 push    ebp
.text$mn:0000884D                 mov     ebp, esp
.text$mn:0000884F                 sub     esp, 8
.text$mn:00008852                 mov     [ebp+var_4], ecx
.text$mn:00008855                 cmp     [ebp+arg_4], 0
.text$mn:00008859                 jz      short loc_8871
.text$mn:0000885B                 push    42Ah            ; unsigned int
.text$mn:00008860                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008865                 mov     eax, [ebp+Src]
.text$mn:00008868                 push    eax             ; int
.text$mn:00008869                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000886E                 add     esp, 0Ch
.text$mn:00008871
.text$mn:00008871 loc_8871:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+Dj
.text$mn:00008871                 mov     ecx, [ebp+Src]
.text$mn:00008874                 push    ecx
.text$mn:00008875                 mov     ecx, [ebp+var_4]
.text$mn:00008878                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:0000887D                 movzx   edx, al
.text$mn:00008880                 test    edx, edx
.text$mn:00008882                 jz      short loc_88A6
.text$mn:00008884                 mov     eax, [ebp+arg_4]
.text$mn:00008887                 push    eax
.text$mn:00008888                 mov     ecx, [ebp+var_4]
.text$mn:0000888B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00008890                 mov     ecx, [ebp+Src]
.text$mn:00008893                 sub     ecx, eax
.text$mn:00008895                 sar     ecx, 1
.text$mn:00008897                 push    ecx
.text$mn:00008898                 mov     edx, [ebp+var_4]
.text$mn:0000889B                 push    edx
.text$mn:0000889C                 mov     ecx, [ebp+var_4]
.text$mn:0000889F                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:000088A4                 jmp     short loc_8917
.text$mn:000088A6 ; ---------------------------------------------------------------------------
.text$mn:000088A6
.text$mn:000088A6 loc_88A6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+36j
.text$mn:000088A6                 mov     eax, [ebp+var_4]
.text$mn:000088A9                 mov     ecx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:000088AF                 sub     ecx, [eax+14h]
.text$mn:000088B2                 cmp     ecx, [ebp+arg_4]
.text$mn:000088B5                 ja      short loc_88BF
.text$mn:000088B7                 mov     ecx, [ebp+var_4]
.text$mn:000088BA                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:000088BF
.text$mn:000088BF loc_88BF:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+69j
.text$mn:000088BF                 cmp     [ebp+arg_4], 0
.text$mn:000088C3                 jbe     short loc_8914
.text$mn:000088C5                 mov     edx, [ebp+var_4]
.text$mn:000088C8                 mov     eax, [edx+14h]
.text$mn:000088CB                 add     eax, [ebp+arg_4]
.text$mn:000088CE                 mov     [ebp+var_8], eax
.text$mn:000088D1                 push    0
.text$mn:000088D3                 mov     ecx, [ebp+var_8]
.text$mn:000088D6                 push    ecx
.text$mn:000088D7                 mov     ecx, [ebp+var_4]
.text$mn:000088DA                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:000088DF                 movzx   edx, al
.text$mn:000088E2                 test    edx, edx
.text$mn:000088E4                 jz      short loc_8914
.text$mn:000088E6                 mov     eax, [ebp+arg_4]
.text$mn:000088E9                 push    eax             ; int
.text$mn:000088EA                 mov     ecx, [ebp+Src]
.text$mn:000088ED                 push    ecx             ; Src
.text$mn:000088EE                 mov     ecx, [ebp+var_4]
.text$mn:000088F1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000088F6                 mov     edx, [ebp+var_4]
.text$mn:000088F9                 mov     ecx, [edx+14h]
.text$mn:000088FC                 lea     edx, [eax+ecx*2]
.text$mn:000088FF                 push    edx             ; Dst
.text$mn:00008900                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00008905                 add     esp, 0Ch
.text$mn:00008908                 mov     eax, [ebp+var_8]
.text$mn:0000890B                 push    eax
.text$mn:0000890C                 mov     ecx, [ebp+var_4]
.text$mn:0000890F                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00008914
.text$mn:00008914 loc_8914:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+77j
.text$mn:00008914                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+98j
.text$mn:00008914                 mov     eax, [ebp+var_4]
.text$mn:00008917
.text$mn:00008917 loc_8917:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+58j
.text$mn:00008917                 mov     esp, ebp
.text$mn:00008919                 pop     ebp
.text$mn:0000891A                 retn    8
.text$mn:0000891A ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:0000891A
.text$mn:0000891A ; ---------------------------------------------------------------------------
.text$mn:0000891D                 align 10h
.text$mn:0000891D _text$mn        ends
.text$mn:0000891D
.text$mn:00008920 ; ===========================================================================
.text$mn:00008920
.text$mn:00008920 ; Segment type: Pure code
.text$mn:00008920 ; Segment permissions: Read/Execute
.text$mn:00008920 _text$mn        segment para public 'CODE' use32
.text$mn:00008920                 assume cs:_text$mn
.text$mn:00008920                 ;org 8920h
.text$mn:00008920 ; COMDAT (pick any)
.text$mn:00008920                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008920
.text$mn:00008920 ; =============== S U B R O U T I N E =======================================
.text$mn:00008920
.text$mn:00008920 ; Attributes: bp-based frame
.text$mn:00008920
.text$mn:00008920 ; bool __thiscall NppParameters::asNotepadStyle(NppParameters *__hidden this)
.text$mn:00008920                 public ?asNotepadStyle@NppParameters@@QBE_NXZ
.text$mn:00008920 ?asNotepadStyle@NppParameters@@QBE_NXZ proc near
.text$mn:00008920                                         ; CODE XREF: WinMain(x,x,x,x)+394p
.text$mn:00008920
.text$mn:00008920 var_4           = dword ptr -4
.text$mn:00008920
.text$mn:00008920                 push    ebp
.text$mn:00008921                 mov     ebp, esp
.text$mn:00008923                 push    ecx
.text$mn:00008924                 mov     [ebp+var_4], ecx
.text$mn:00008927                 mov     eax, [ebp+var_4]
.text$mn:0000892A                 mov     al, [eax+1CC18h]
.text$mn:00008930                 mov     esp, ebp
.text$mn:00008932                 pop     ebp
.text$mn:00008933                 retn
.text$mn:00008933 ?asNotepadStyle@NppParameters@@QBE_NXZ endp
.text$mn:00008933
.text$mn:00008933 _text$mn        ends
.text$mn:00008933
.text$mn:00008934 ; ===========================================================================
.text$mn:00008934
.text$mn:00008934 ; Segment type: Pure code
.text$mn:00008934 ; Segment permissions: Read/Execute
.text$mn:00008934 _text$mn        segment para public 'CODE' use32
.text$mn:00008934                 assume cs:_text$mn
.text$mn:00008934                 ;org 8934h
.text$mn:00008934 ; COMDAT (pick any)
.text$mn:00008934                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008934
.text$mn:00008934 ; =============== S U B R O U T I N E =======================================
.text$mn:00008934
.text$mn:00008934 ; Attributes: bp-based frame
.text$mn:00008934
.text$mn:00008934 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::assign(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, unsigned int, unsigned int)
.text$mn:00008934                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00008934 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00008934                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+4Fp
.text$mn:00008934
.text$mn:00008934 Size            = dword ptr -8
.text$mn:00008934 var_4           = dword ptr -4
.text$mn:00008934 arg_0           = dword ptr  8
.text$mn:00008934 arg_4           = dword ptr  0Ch
.text$mn:00008934 arg_8           = dword ptr  10h
.text$mn:00008934
.text$mn:00008934                 push    ebp
.text$mn:00008935                 mov     ebp, esp
.text$mn:00008937                 sub     esp, 8
.text$mn:0000893A                 mov     [ebp+var_4], ecx
.text$mn:0000893D                 mov     ecx, [ebp+arg_0]
.text$mn:00008940                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:00008945                 cmp     eax, [ebp+arg_4]
.text$mn:00008948                 jnb     short loc_8952
.text$mn:0000894A                 mov     ecx, [ebp+var_4]
.text$mn:0000894D                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:00008952
.text$mn:00008952 loc_8952:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+14j
.text$mn:00008952                 mov     ecx, [ebp+arg_0]
.text$mn:00008955                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:0000895A                 sub     eax, [ebp+arg_4]
.text$mn:0000895D                 mov     [ebp+Size], eax
.text$mn:00008960                 mov     eax, [ebp+arg_8]
.text$mn:00008963                 cmp     eax, [ebp+Size]
.text$mn:00008966                 jnb     short loc_896E
.text$mn:00008968                 mov     ecx, [ebp+arg_8]
.text$mn:0000896B                 mov     [ebp+Size], ecx
.text$mn:0000896E
.text$mn:0000896E loc_896E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+32j
.text$mn:0000896E                 mov     edx, [ebp+var_4]
.text$mn:00008971                 cmp     edx, [ebp+arg_0]
.text$mn:00008974                 jnz     short loc_8995
.text$mn:00008976                 mov     eax, [ebp+arg_4]
.text$mn:00008979                 add     eax, [ebp+Size]
.text$mn:0000897C                 push    eax
.text$mn:0000897D                 mov     ecx, [ebp+var_4]
.text$mn:00008980                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)
.text$mn:00008985                 mov     ecx, [ebp+arg_4]
.text$mn:00008988                 push    ecx
.text$mn:00008989                 push    0
.text$mn:0000898B                 mov     ecx, [ebp+var_4]
.text$mn:0000898E                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)
.text$mn:00008993                 jmp     short loc_89D7
.text$mn:00008995 ; ---------------------------------------------------------------------------
.text$mn:00008995
.text$mn:00008995 loc_8995:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+40j
.text$mn:00008995                 push    0
.text$mn:00008997                 mov     edx, [ebp+Size]
.text$mn:0000899A                 push    edx
.text$mn:0000899B                 mov     ecx, [ebp+var_4]
.text$mn:0000899E                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:000089A3                 movzx   eax, al
.text$mn:000089A6                 test    eax, eax
.text$mn:000089A8                 jz      short loc_89D7
.text$mn:000089AA                 mov     ecx, [ebp+Size]
.text$mn:000089AD                 push    ecx             ; Size
.text$mn:000089AE                 mov     ecx, [ebp+arg_0]
.text$mn:000089B1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000089B6                 add     eax, [ebp+arg_4]
.text$mn:000089B9                 push    eax             ; Src
.text$mn:000089BA                 mov     ecx, [ebp+var_4]
.text$mn:000089BD                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000089C2                 push    eax             ; Dst
.text$mn:000089C3                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:000089C8                 add     esp, 0Ch
.text$mn:000089CB                 mov     edx, [ebp+Size]
.text$mn:000089CE                 push    edx
.text$mn:000089CF                 mov     ecx, [ebp+var_4]
.text$mn:000089D2                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:000089D7
.text$mn:000089D7 loc_89D7:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Fj
.text$mn:000089D7                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+74j
.text$mn:000089D7                 mov     eax, [ebp+var_4]
.text$mn:000089DA                 mov     esp, ebp
.text$mn:000089DC                 pop     ebp
.text$mn:000089DD                 retn    0Ch
.text$mn:000089DD ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:000089DD
.text$mn:000089DD _text$mn        ends
.text$mn:000089DD
.text$mn:000089E0 ; ===========================================================================
.text$mn:000089E0
.text$mn:000089E0 ; Segment type: Pure code
.text$mn:000089E0 ; Segment permissions: Read/Execute
.text$mn:000089E0 _text$mn        segment para public 'CODE' use32
.text$mn:000089E0                 assume cs:_text$mn
.text$mn:000089E0                 ;org 89E0h
.text$mn:000089E0 ; COMDAT (pick any)
.text$mn:000089E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000089E0
.text$mn:000089E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000089E0
.text$mn:000089E0 ; Attributes: bp-based frame
.text$mn:000089E0
.text$mn:000089E0 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char *Str)
.text$mn:000089E0                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
.text$mn:000089E0 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
.text$mn:000089E0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+53p
.text$mn:000089E0
.text$mn:000089E0 var_4           = dword ptr -4
.text$mn:000089E0 Str             = dword ptr  8
.text$mn:000089E0
.text$mn:000089E0                 push    ebp
.text$mn:000089E1                 mov     ebp, esp
.text$mn:000089E3                 push    ecx
.text$mn:000089E4                 mov     [ebp+var_4], ecx
.text$mn:000089E7                 push    490h            ; unsigned int
.text$mn:000089EC                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000089F1                 mov     eax, [ebp+Str]
.text$mn:000089F4                 push    eax             ; int
.text$mn:000089F5                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:000089FA                 add     esp, 0Ch
.text$mn:000089FD                 mov     ecx, [ebp+Str]
.text$mn:00008A00                 push    ecx             ; Str
.text$mn:00008A01                 call    ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length(char const *)
.text$mn:00008A06                 add     esp, 4
.text$mn:00008A09                 push    eax             ; Size
.text$mn:00008A0A                 mov     edx, [ebp+Str]
.text$mn:00008A0D                 push    edx             ; Src
.text$mn:00008A0E                 mov     ecx, [ebp+var_4]
.text$mn:00008A11                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)
.text$mn:00008A16                 mov     esp, ebp
.text$mn:00008A18                 pop     ebp
.text$mn:00008A19                 retn    4
.text$mn:00008A19 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z endp
.text$mn:00008A19
.text$mn:00008A19 _text$mn        ends
.text$mn:00008A19
.text$mn:00008A1C ; ===========================================================================
.text$mn:00008A1C
.text$mn:00008A1C ; Segment type: Pure code
.text$mn:00008A1C ; Segment permissions: Read/Execute
.text$mn:00008A1C _text$mn        segment para public 'CODE' use32
.text$mn:00008A1C                 assume cs:_text$mn
.text$mn:00008A1C                 ;org 8A1Ch
.text$mn:00008A1C ; COMDAT (pick any)
.text$mn:00008A1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008A1C
.text$mn:00008A1C ; =============== S U B R O U T I N E =======================================
.text$mn:00008A1C
.text$mn:00008A1C ; Attributes: bp-based frame
.text$mn:00008A1C
.text$mn:00008A1C ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(void *Src, size_t Size)
.text$mn:00008A1C                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
.text$mn:00008A1C ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
.text$mn:00008A1C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+31p
.text$mn:00008A1C
.text$mn:00008A1C var_4           = dword ptr -4
.text$mn:00008A1C Src             = dword ptr  8
.text$mn:00008A1C Size            = dword ptr  0Ch
.text$mn:00008A1C
.text$mn:00008A1C                 push    ebp
.text$mn:00008A1D                 mov     ebp, esp
.text$mn:00008A1F                 push    ecx
.text$mn:00008A20                 mov     [ebp+var_4], ecx
.text$mn:00008A23                 cmp     [ebp+Size], 0
.text$mn:00008A27                 jz      short loc_8A3F
.text$mn:00008A29                 push    47Fh            ; unsigned int
.text$mn:00008A2E                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008A33                 mov     eax, [ebp+Src]
.text$mn:00008A36                 push    eax             ; int
.text$mn:00008A37                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00008A3C                 add     esp, 0Ch
.text$mn:00008A3F
.text$mn:00008A3F loc_8A3F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+Bj
.text$mn:00008A3F                 mov     ecx, [ebp+Src]
.text$mn:00008A42                 push    ecx
.text$mn:00008A43                 mov     ecx, [ebp+var_4]
.text$mn:00008A46                 call    ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)
.text$mn:00008A4B                 movzx   edx, al
.text$mn:00008A4E                 test    edx, edx
.text$mn:00008A50                 jz      short loc_8A72
.text$mn:00008A52                 mov     eax, [ebp+Size]
.text$mn:00008A55                 push    eax
.text$mn:00008A56                 mov     ecx, [ebp+var_4]
.text$mn:00008A59                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008A5E                 mov     ecx, [ebp+Src]
.text$mn:00008A61                 sub     ecx, eax
.text$mn:00008A63                 push    ecx
.text$mn:00008A64                 mov     edx, [ebp+var_4]
.text$mn:00008A67                 push    edx
.text$mn:00008A68                 mov     ecx, [ebp+var_4]
.text$mn:00008A6B                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:00008A70                 jmp     short loc_8AAF
.text$mn:00008A72 ; ---------------------------------------------------------------------------
.text$mn:00008A72
.text$mn:00008A72 loc_8A72:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+34j
.text$mn:00008A72                 push    0
.text$mn:00008A74                 mov     eax, [ebp+Size]
.text$mn:00008A77                 push    eax
.text$mn:00008A78                 mov     ecx, [ebp+var_4]
.text$mn:00008A7B                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:00008A80                 movzx   ecx, al
.text$mn:00008A83                 test    ecx, ecx
.text$mn:00008A85                 jz      short loc_8AAC
.text$mn:00008A87                 mov     edx, [ebp+Size]
.text$mn:00008A8A                 push    edx             ; Size
.text$mn:00008A8B                 mov     eax, [ebp+Src]
.text$mn:00008A8E                 push    eax             ; Src
.text$mn:00008A8F                 mov     ecx, [ebp+var_4]
.text$mn:00008A92                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008A97                 push    eax             ; Dst
.text$mn:00008A98                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00008A9D                 add     esp, 0Ch
.text$mn:00008AA0                 mov     ecx, [ebp+Size]
.text$mn:00008AA3                 push    ecx
.text$mn:00008AA4                 mov     ecx, [ebp+var_4]
.text$mn:00008AA7                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00008AAC
.text$mn:00008AAC loc_8AAC:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+69j
.text$mn:00008AAC                 mov     eax, [ebp+var_4]
.text$mn:00008AAF
.text$mn:00008AAF loc_8AAF:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+54j
.text$mn:00008AAF                 mov     esp, ebp
.text$mn:00008AB1                 pop     ebp
.text$mn:00008AB2                 retn    8
.text$mn:00008AB2 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z endp
.text$mn:00008AB2
.text$mn:00008AB2 ; ---------------------------------------------------------------------------
.text$mn:00008AB5                 align 4
.text$mn:00008AB5 _text$mn        ends
.text$mn:00008AB5
.text$mn:00008AB8 ; ===========================================================================
.text$mn:00008AB8
.text$mn:00008AB8 ; Segment type: Pure code
.text$mn:00008AB8 ; Segment permissions: Read/Execute
.text$mn:00008AB8 _text$mn        segment para public 'CODE' use32
.text$mn:00008AB8                 assume cs:_text$mn
.text$mn:00008AB8                 ;org 8AB8h
.text$mn:00008AB8 ; COMDAT (pick any)
.text$mn:00008AB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008AB8
.text$mn:00008AB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00008AB8
.text$mn:00008AB8 ; Attributes: bp-based frame
.text$mn:00008AB8
.text$mn:00008AB8 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00008AB8                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
.text$mn:00008AB8 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z proc near
.text$mn:00008AB8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+66p
.text$mn:00008AB8
.text$mn:00008AB8 var_4           = dword ptr -4
.text$mn:00008AB8 arg_0           = dword ptr  8
.text$mn:00008AB8
.text$mn:00008AB8                 push    ebp
.text$mn:00008AB9                 mov     ebp, esp
.text$mn:00008ABB                 push    ecx
.text$mn:00008ABC                 mov     [ebp+var_4], ecx
.text$mn:00008ABF                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00008AC4                 push    eax
.text$mn:00008AC5                 push    0
.text$mn:00008AC7                 mov     ecx, [ebp+arg_0]
.text$mn:00008ACA                 push    ecx
.text$mn:00008ACB                 mov     ecx, [ebp+var_4]
.text$mn:00008ACE                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00008AD3                 mov     esp, ebp
.text$mn:00008AD5                 pop     ebp
.text$mn:00008AD6                 retn    4
.text$mn:00008AD6 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z endp
.text$mn:00008AD6
.text$mn:00008AD6 ; ---------------------------------------------------------------------------
.text$mn:00008AD9                 align 4
.text$mn:00008AD9 _text$mn        ends
.text$mn:00008AD9
.text$mn:00008ADC ; ===========================================================================
.text$mn:00008ADC
.text$mn:00008ADC ; Segment type: Pure code
.text$mn:00008ADC ; Segment permissions: Read/Execute
.text$mn:00008ADC _text$mn        segment para public 'CODE' use32
.text$mn:00008ADC                 assume cs:_text$mn
.text$mn:00008ADC                 ;org 8ADCh
.text$mn:00008ADC ; COMDAT (pick any)
.text$mn:00008ADC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008ADC
.text$mn:00008ADC ; =============== S U B R O U T I N E =======================================
.text$mn:00008ADC
.text$mn:00008ADC ; Attributes: bp-based frame
.text$mn:00008ADC
.text$mn:00008ADC ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:00008ADC                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00008ADC ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00008ADC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+6Bp
.text$mn:00008ADC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+16p ...
.text$mn:00008ADC
.text$mn:00008ADC var_8           = dword ptr -8
.text$mn:00008ADC var_4           = dword ptr -4
.text$mn:00008ADC arg_0           = dword ptr  8
.text$mn:00008ADC arg_4           = dword ptr  0Ch
.text$mn:00008ADC arg_8           = dword ptr  10h
.text$mn:00008ADC
.text$mn:00008ADC                 push    ebp
.text$mn:00008ADD                 mov     ebp, esp
.text$mn:00008ADF                 sub     esp, 8
.text$mn:00008AE2                 mov     [ebp+var_4], ecx
.text$mn:00008AE5                 mov     ecx, [ebp+arg_0]
.text$mn:00008AE8                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00008AED                 cmp     eax, [ebp+arg_4]
.text$mn:00008AF0                 jnb     short loc_8AFA
.text$mn:00008AF2                 mov     ecx, [ebp+var_4]
.text$mn:00008AF5                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00008AFA
.text$mn:00008AFA loc_8AFA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:00008AFA                 mov     ecx, [ebp+arg_0]
.text$mn:00008AFD                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00008B02                 sub     eax, [ebp+arg_4]
.text$mn:00008B05                 mov     [ebp+var_8], eax
.text$mn:00008B08                 mov     eax, [ebp+arg_8]
.text$mn:00008B0B                 cmp     eax, [ebp+var_8]
.text$mn:00008B0E                 jnb     short loc_8B16
.text$mn:00008B10                 mov     ecx, [ebp+arg_8]
.text$mn:00008B13                 mov     [ebp+var_8], ecx
.text$mn:00008B16
.text$mn:00008B16 loc_8B16:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:00008B16                 mov     edx, [ebp+var_4]
.text$mn:00008B19                 cmp     edx, [ebp+arg_0]
.text$mn:00008B1C                 jnz     short loc_8B3D
.text$mn:00008B1E                 mov     eax, [ebp+arg_4]
.text$mn:00008B21                 add     eax, [ebp+var_8]
.text$mn:00008B24                 push    eax
.text$mn:00008B25                 mov     ecx, [ebp+var_4]
.text$mn:00008B28                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)
.text$mn:00008B2D                 mov     ecx, [ebp+arg_4]
.text$mn:00008B30                 push    ecx
.text$mn:00008B31                 push    0
.text$mn:00008B33                 mov     ecx, [ebp+var_4]
.text$mn:00008B36                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)
.text$mn:00008B3B                 jmp     short loc_8B82
.text$mn:00008B3D ; ---------------------------------------------------------------------------
.text$mn:00008B3D
.text$mn:00008B3D loc_8B3D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+40j
.text$mn:00008B3D                 push    0
.text$mn:00008B3F                 mov     edx, [ebp+var_8]
.text$mn:00008B42                 push    edx
.text$mn:00008B43                 mov     ecx, [ebp+var_4]
.text$mn:00008B46                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00008B4B                 movzx   eax, al
.text$mn:00008B4E                 test    eax, eax
.text$mn:00008B50                 jz      short loc_8B82
.text$mn:00008B52                 mov     ecx, [ebp+var_8]
.text$mn:00008B55                 push    ecx             ; int
.text$mn:00008B56                 mov     ecx, [ebp+arg_0]
.text$mn:00008B59                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00008B5E                 mov     edx, [ebp+arg_4]
.text$mn:00008B61                 lea     eax, [eax+edx*2]
.text$mn:00008B64                 push    eax             ; Src
.text$mn:00008B65                 mov     ecx, [ebp+var_4]
.text$mn:00008B68                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00008B6D                 push    eax             ; Dst
.text$mn:00008B6E                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00008B73                 add     esp, 0Ch
.text$mn:00008B76                 mov     ecx, [ebp+var_8]
.text$mn:00008B79                 push    ecx
.text$mn:00008B7A                 mov     ecx, [ebp+var_4]
.text$mn:00008B7D                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00008B82
.text$mn:00008B82 loc_8B82:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Fj
.text$mn:00008B82                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+74j
.text$mn:00008B82                 mov     eax, [ebp+var_4]
.text$mn:00008B85                 mov     esp, ebp
.text$mn:00008B87                 pop     ebp
.text$mn:00008B88                 retn    0Ch
.text$mn:00008B88 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:00008B88
.text$mn:00008B88 ; ---------------------------------------------------------------------------
.text$mn:00008B8B                 align 4
.text$mn:00008B8B _text$mn        ends
.text$mn:00008B8B
.text$mn:00008B8C ; ===========================================================================
.text$mn:00008B8C
.text$mn:00008B8C ; Segment type: Pure code
.text$mn:00008B8C ; Segment permissions: Read/Execute
.text$mn:00008B8C _text$mn        segment para public 'CODE' use32
.text$mn:00008B8C                 assume cs:_text$mn
.text$mn:00008B8C                 ;org 8B8Ch
.text$mn:00008B8C ; COMDAT (pick any)
.text$mn:00008B8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008B8C
.text$mn:00008B8C ; =============== S U B R O U T I N E =======================================
.text$mn:00008B8C
.text$mn:00008B8C ; Attributes: bp-based frame
.text$mn:00008B8C
.text$mn:00008B8C ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t *Str)
.text$mn:00008B8C                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:00008B8C ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:00008B8C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+53p
.text$mn:00008B8C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)+Ep
.text$mn:00008B8C
.text$mn:00008B8C var_4           = dword ptr -4
.text$mn:00008B8C Str             = dword ptr  8
.text$mn:00008B8C
.text$mn:00008B8C                 push    ebp
.text$mn:00008B8D                 mov     ebp, esp
.text$mn:00008B8F                 push    ecx
.text$mn:00008B90                 mov     [ebp+var_4], ecx
.text$mn:00008B93                 push    490h            ; unsigned int
.text$mn:00008B98                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008B9D                 mov     eax, [ebp+Str]
.text$mn:00008BA0                 push    eax             ; int
.text$mn:00008BA1                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00008BA6                 add     esp, 0Ch
.text$mn:00008BA9                 mov     ecx, [ebp+Str]
.text$mn:00008BAC                 push    ecx             ; Str
.text$mn:00008BAD                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:00008BB2                 add     esp, 4
.text$mn:00008BB5                 push    eax             ; int
.text$mn:00008BB6                 mov     edx, [ebp+Str]
.text$mn:00008BB9                 push    edx             ; Src
.text$mn:00008BBA                 mov     ecx, [ebp+var_4]
.text$mn:00008BBD                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)
.text$mn:00008BC2                 mov     esp, ebp
.text$mn:00008BC4                 pop     ebp
.text$mn:00008BC5                 retn    4
.text$mn:00008BC5 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:00008BC5
.text$mn:00008BC5 _text$mn        ends
.text$mn:00008BC5
.text$mn:00008BC8 ; ===========================================================================
.text$mn:00008BC8
.text$mn:00008BC8 ; Segment type: Pure code
.text$mn:00008BC8 ; Segment permissions: Read/Execute
.text$mn:00008BC8 _text$mn        segment para public 'CODE' use32
.text$mn:00008BC8                 assume cs:_text$mn
.text$mn:00008BC8                 ;org 8BC8h
.text$mn:00008BC8 ; COMDAT (pick any)
.text$mn:00008BC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008BC8
.text$mn:00008BC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00008BC8
.text$mn:00008BC8 ; Attributes: bp-based frame
.text$mn:00008BC8
.text$mn:00008BC8 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(void *Src, int)
.text$mn:00008BC8                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:00008BC8 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:00008BC8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+31p
.text$mn:00008BC8
.text$mn:00008BC8 var_4           = dword ptr -4
.text$mn:00008BC8 Src             = dword ptr  8
.text$mn:00008BC8 arg_4           = dword ptr  0Ch
.text$mn:00008BC8
.text$mn:00008BC8                 push    ebp
.text$mn:00008BC9                 mov     ebp, esp
.text$mn:00008BCB                 push    ecx
.text$mn:00008BCC                 mov     [ebp+var_4], ecx
.text$mn:00008BCF                 cmp     [ebp+arg_4], 0
.text$mn:00008BD3                 jz      short loc_8BEB
.text$mn:00008BD5                 push    47Fh            ; unsigned int
.text$mn:00008BDA                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008BDF                 mov     eax, [ebp+Src]
.text$mn:00008BE2                 push    eax             ; int
.text$mn:00008BE3                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00008BE8                 add     esp, 0Ch
.text$mn:00008BEB
.text$mn:00008BEB loc_8BEB:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+Bj
.text$mn:00008BEB                 mov     ecx, [ebp+Src]
.text$mn:00008BEE                 push    ecx
.text$mn:00008BEF                 mov     ecx, [ebp+var_4]
.text$mn:00008BF2                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:00008BF7                 movzx   edx, al
.text$mn:00008BFA                 test    edx, edx
.text$mn:00008BFC                 jz      short loc_8C20
.text$mn:00008BFE                 mov     eax, [ebp+arg_4]
.text$mn:00008C01                 push    eax
.text$mn:00008C02                 mov     ecx, [ebp+var_4]
.text$mn:00008C05                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00008C0A                 mov     ecx, [ebp+Src]
.text$mn:00008C0D                 sub     ecx, eax
.text$mn:00008C0F                 sar     ecx, 1
.text$mn:00008C11                 push    ecx
.text$mn:00008C12                 mov     edx, [ebp+var_4]
.text$mn:00008C15                 push    edx
.text$mn:00008C16                 mov     ecx, [ebp+var_4]
.text$mn:00008C19                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00008C1E                 jmp     short loc_8C5D
.text$mn:00008C20 ; ---------------------------------------------------------------------------
.text$mn:00008C20
.text$mn:00008C20 loc_8C20:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+34j
.text$mn:00008C20                 push    0
.text$mn:00008C22                 mov     eax, [ebp+arg_4]
.text$mn:00008C25                 push    eax
.text$mn:00008C26                 mov     ecx, [ebp+var_4]
.text$mn:00008C29                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00008C2E                 movzx   ecx, al
.text$mn:00008C31                 test    ecx, ecx
.text$mn:00008C33                 jz      short loc_8C5A
.text$mn:00008C35                 mov     edx, [ebp+arg_4]
.text$mn:00008C38                 push    edx             ; int
.text$mn:00008C39                 mov     eax, [ebp+Src]
.text$mn:00008C3C                 push    eax             ; Src
.text$mn:00008C3D                 mov     ecx, [ebp+var_4]
.text$mn:00008C40                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00008C45                 push    eax             ; Dst
.text$mn:00008C46                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00008C4B                 add     esp, 0Ch
.text$mn:00008C4E                 mov     ecx, [ebp+arg_4]
.text$mn:00008C51                 push    ecx
.text$mn:00008C52                 mov     ecx, [ebp+var_4]
.text$mn:00008C55                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00008C5A
.text$mn:00008C5A loc_8C5A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+6Bj
.text$mn:00008C5A                 mov     eax, [ebp+var_4]
.text$mn:00008C5D
.text$mn:00008C5D loc_8C5D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+56j
.text$mn:00008C5D                 mov     esp, ebp
.text$mn:00008C5F                 pop     ebp
.text$mn:00008C60                 retn    8
.text$mn:00008C60 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:00008C60
.text$mn:00008C60 ; ---------------------------------------------------------------------------
.text$mn:00008C63                 align 4
.text$mn:00008C63 _text$mn        ends
.text$mn:00008C63
.text$mn:00008C64 ; ===========================================================================
.text$mn:00008C64
.text$mn:00008C64 ; Segment type: Pure code
.text$mn:00008C64 ; Segment permissions: Read/Execute
.text$mn:00008C64 _text$mn        segment para public 'CODE' use32
.text$mn:00008C64                 assume cs:_text$mn
.text$mn:00008C64                 ;org 8C64h
.text$mn:00008C64 ; COMDAT (pick any)
.text$mn:00008C64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008C64
.text$mn:00008C64 ; =============== S U B R O U T I N E =======================================
.text$mn:00008C64
.text$mn:00008C64 ; Attributes: bp-based frame
.text$mn:00008C64
.text$mn:00008C64 ; public: static void __cdecl std::char_traits<char>::assign(char &, char const &)
.text$mn:00008C64                 public ?assign@?$char_traits@D@std@@SAXAADABD@Z
.text$mn:00008C64 ?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
.text$mn:00008C64                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+26p
.text$mn:00008C64
.text$mn:00008C64 arg_0           = dword ptr  8
.text$mn:00008C64 arg_4           = dword ptr  0Ch
.text$mn:00008C64
.text$mn:00008C64                 push    ebp
.text$mn:00008C65                 mov     ebp, esp
.text$mn:00008C67                 mov     eax, [ebp+arg_0]
.text$mn:00008C6A                 mov     ecx, [ebp+arg_4]
.text$mn:00008C6D                 mov     dl, [ecx]
.text$mn:00008C6F                 mov     [eax], dl
.text$mn:00008C71                 pop     ebp
.text$mn:00008C72                 retn
.text$mn:00008C72 ?assign@?$char_traits@D@std@@SAXAADABD@Z endp
.text$mn:00008C72
.text$mn:00008C72 ; ---------------------------------------------------------------------------
.text$mn:00008C73                 align 4
.text$mn:00008C73 _text$mn        ends
.text$mn:00008C73
.text$mn:00008C74 ; ===========================================================================
.text$mn:00008C74
.text$mn:00008C74 ; Segment type: Pure code
.text$mn:00008C74 ; Segment permissions: Read/Execute
.text$mn:00008C74 _text$mn        segment para public 'CODE' use32
.text$mn:00008C74                 assume cs:_text$mn
.text$mn:00008C74                 ;org 8C74h
.text$mn:00008C74 ; COMDAT (pick any)
.text$mn:00008C74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008C74
.text$mn:00008C74 ; =============== S U B R O U T I N E =======================================
.text$mn:00008C74
.text$mn:00008C74 ; Attributes: bp-based frame
.text$mn:00008C74
.text$mn:00008C74 ; public: static void __cdecl std::char_traits<wchar_t>::assign(wchar_t &, wchar_t const &)
.text$mn:00008C74                 public ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
.text$mn:00008C74 ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z proc near
.text$mn:00008C74                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)+2Bp
.text$mn:00008C74
.text$mn:00008C74 arg_0           = dword ptr  8
.text$mn:00008C74 arg_4           = dword ptr  0Ch
.text$mn:00008C74
.text$mn:00008C74                 push    ebp
.text$mn:00008C75                 mov     ebp, esp
.text$mn:00008C77                 mov     eax, [ebp+arg_0]
.text$mn:00008C7A                 mov     ecx, [ebp+arg_4]
.text$mn:00008C7D                 mov     dx, [ecx]
.text$mn:00008C80                 mov     [eax], dx
.text$mn:00008C83                 pop     ebp
.text$mn:00008C84                 retn
.text$mn:00008C84 ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z endp
.text$mn:00008C84
.text$mn:00008C84 ; ---------------------------------------------------------------------------
.text$mn:00008C85                 align 4
.text$mn:00008C85 _text$mn        ends
.text$mn:00008C85
.text$mn:00008C88 ; ===========================================================================
.text$mn:00008C88
.text$mn:00008C88 ; Segment type: Pure code
.text$mn:00008C88 ; Segment permissions: Read/Execute
.text$mn:00008C88 _text$mn        segment para public 'CODE' use32
.text$mn:00008C88                 assume cs:_text$mn
.text$mn:00008C88                 ;org 8C88h
.text$mn:00008C88 ; COMDAT (pick any)
.text$mn:00008C88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008C88
.text$mn:00008C88 ; =============== S U B R O U T I N E =======================================
.text$mn:00008C88
.text$mn:00008C88 ; Attributes: bp-based frame
.text$mn:00008C88
.text$mn:00008C88 ; public: wchar_t const * & __thiscall std::vector<wchar_t const *, class std::allocator<wchar_t const *>>::at(unsigned int)
.text$mn:00008C88                 public ?at@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAEAAPB_WI@Z
.text$mn:00008C88 ?at@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAEAAPB_WI@Z proc near
.text$mn:00008C88                                         ; CODE XREF: WinMain(x,x,x,x)+44Dp
.text$mn:00008C88                                         ; isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+55p ...
.text$mn:00008C88
.text$mn:00008C88 var_4           = dword ptr -4
.text$mn:00008C88 arg_0           = dword ptr  8
.text$mn:00008C88
.text$mn:00008C88                 push    ebp
.text$mn:00008C89                 mov     ebp, esp
.text$mn:00008C8B                 push    ecx
.text$mn:00008C8C                 mov     [ebp+var_4], ecx
.text$mn:00008C8F                 mov     ecx, [ebp+var_4]
.text$mn:00008C92                 call    ?size@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::size(void)
.text$mn:00008C97                 cmp     eax, [ebp+arg_0]
.text$mn:00008C9A                 ja      short loc_8CA4
.text$mn:00008C9C                 mov     ecx, [ebp+var_4]
.text$mn:00008C9F                 call    ?_Xran@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXXZ ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Xran(void)
.text$mn:00008CA4
.text$mn:00008CA4 loc_8CA4:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::at(uint)+12j
.text$mn:00008CA4                 mov     eax, [ebp+var_4]
.text$mn:00008CA7                 mov     ecx, [eax+4]
.text$mn:00008CAA                 mov     edx, [ebp+arg_0]
.text$mn:00008CAD                 lea     eax, [ecx+edx*4]
.text$mn:00008CB0                 mov     esp, ebp
.text$mn:00008CB2                 pop     ebp
.text$mn:00008CB3                 retn    4
.text$mn:00008CB3 ?at@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAEAAPB_WI@Z endp
.text$mn:00008CB3
.text$mn:00008CB3 ; ---------------------------------------------------------------------------
.text$mn:00008CB6                 align 4
.text$mn:00008CB6 _text$mn        ends
.text$mn:00008CB6
.text$mn:00008CB8 ; ===========================================================================
.text$mn:00008CB8
.text$mn:00008CB8 ; Segment type: Pure code
.text$mn:00008CB8 ; Segment permissions: Read/Execute
.text$mn:00008CB8 _text$mn        segment para public 'CODE' use32
.text$mn:00008CB8                 assume cs:_text$mn
.text$mn:00008CB8                 ;org 8CB8h
.text$mn:00008CB8 ; COMDAT (pick any)
.text$mn:00008CB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008CB8
.text$mn:00008CB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00008CB8
.text$mn:00008CB8 ; Attributes: bp-based frame
.text$mn:00008CB8
.text$mn:00008CB8 ; public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>> __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::begin(void)
.text$mn:00008CB8                 public ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:00008CB8 ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$mn:00008CB8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+A9p
.text$mn:00008CB8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+AFp ...
.text$mn:00008CB8
.text$mn:00008CB8 var_14          = dword ptr -14h
.text$mn:00008CB8 var_10          = dword ptr -10h
.text$mn:00008CB8 var_C           = dword ptr -0Ch
.text$mn:00008CB8 var_4           = dword ptr -4
.text$mn:00008CB8 arg_0           = dword ptr  8
.text$mn:00008CB8
.text$mn:00008CB8                 push    ebp
.text$mn:00008CB9                 mov     ebp, esp
.text$mn:00008CBB                 push    0FFFFFFFFh
.text$mn:00008CBD                 push    offset __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:00008CC2                 mov     eax, large fs:0
.text$mn:00008CC8                 push    eax
.text$mn:00008CC9                 sub     esp, 8
.text$mn:00008CCC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008CD1                 xor     eax, ebp
.text$mn:00008CD3                 push    eax
.text$mn:00008CD4                 lea     eax, [ebp+var_C]
.text$mn:00008CD7                 mov     large fs:0, eax
.text$mn:00008CDD                 mov     [ebp+var_10], ecx
.text$mn:00008CE0                 mov     [ebp+var_14], 0
.text$mn:00008CE7                 mov     eax, [ebp+var_10]
.text$mn:00008CEA                 push    eax             ; struct std::_Container_base12 *
.text$mn:00008CEB                 mov     ecx, [ebp+var_10]
.text$mn:00008CEE                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00008CF3                 push    eax             ; int
.text$mn:00008CF4                 mov     ecx, [ebp+arg_0]
.text$mn:00008CF7                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)
.text$mn:00008CFC                 mov     [ebp+var_4], 0
.text$mn:00008D03                 mov     ecx, [ebp+var_14]
.text$mn:00008D06                 or      ecx, 1
.text$mn:00008D09                 mov     [ebp+var_14], ecx
.text$mn:00008D0C                 mov     eax, [ebp+arg_0]
.text$mn:00008D0F                 mov     ecx, [ebp+var_C]
.text$mn:00008D12                 mov     large fs:0, ecx
.text$mn:00008D19                 pop     ecx
.text$mn:00008D1A                 mov     esp, ebp
.text$mn:00008D1C                 pop     ebp
.text$mn:00008D1D                 retn    4
.text$mn:00008D1D ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$mn:00008D1D
.text$mn:00008D1D _text$mn        ends
.text$mn:00008D1D
.text$x:00008D20 ; ===========================================================================
.text$x:00008D20
.text$x:00008D20 ; Segment type: Pure code
.text$x:00008D20 ; Segment permissions: Read/Execute
.text$x:00008D20 _text$x         segment para public 'CODE' use32
.text$x:00008D20                 assume cs:_text$x
.text$x:00008D20                 ;org 8D20h
.text$x:00008D20 ; COMDAT (pick associative to section at 8CB8)
.text$x:00008D20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008D20
.text$x:00008D20 ; =============== S U B R O U T I N E =======================================
.text$x:00008D20
.text$x:00008D20
.text$x:00008D20 __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 proc near
.text$x:00008D20                                         ; DATA XREF: .xdata$x:0000B66Co
.text$x:00008D20                 mov     eax, [ebp-14h]
.text$x:00008D23                 and     eax, 1
.text$x:00008D26                 jz      $LN4
.text$x:00008D2C                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:00008D30                 mov     ecx, [ebp+8]
.text$x:00008D33                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00008D38 ; ---------------------------------------------------------------------------
.text$x:00008D38
.text$x:00008D38 $LN4:                                   ; CODE XREF: __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0+6j
.text$x:00008D38                 retn
.text$x:00008D38 __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 endp
.text$x:00008D38
.text$x:00008D39
.text$x:00008D39 ; =============== S U B R O U T I N E =======================================
.text$x:00008D39
.text$x:00008D39
.text$x:00008D39 __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$x:00008D39                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)+5o
.text$x:00008D39
.text$x:00008D39 arg_4           = dword ptr  8
.text$x:00008D39
.text$x:00008D39                 mov     edx, [esp+arg_4]
.text$x:00008D3D                 lea     eax, [edx+0Ch]
.text$x:00008D40                 mov     ecx, [edx-0Ch]
.text$x:00008D43                 xor     ecx, eax
.text$x:00008D45                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008D4A                 mov     eax, offset __ehfuncinfo$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$x:00008D4F                 jmp     ___CxxFrameHandler3
.text$x:00008D4F __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$x:00008D4F
.text$x:00008D4F _text$x         ends
.text$x:00008D4F
.text$mn:00008D54 ; ===========================================================================
.text$mn:00008D54
.text$mn:00008D54 ; Segment type: Pure code
.text$mn:00008D54 ; Segment permissions: Read/Execute
.text$mn:00008D54 _text$mn        segment para public 'CODE' use32
.text$mn:00008D54                 assume cs:_text$mn
.text$mn:00008D54                 ;org 8D54h
.text$mn:00008D54 ; COMDAT (pick any)
.text$mn:00008D54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008D54
.text$mn:00008D54 ; =============== S U B R O U T I N E =======================================
.text$mn:00008D54
.text$mn:00008D54 ; Attributes: bp-based frame
.text$mn:00008D54
.text$mn:00008D54 ; public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<wchar_t const *>>> __thiscall std::vector<wchar_t const *, class std::allocator<wchar_t const *>>::begin(void)
.text$mn:00008D54                 public ?begin@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@XZ
.text$mn:00008D54 ?begin@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@XZ proc near
.text$mn:00008D54                                         ; CODE XREF: isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+7Ep
.text$mn:00008D54                                         ; getParamVal(wchar_t,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+D0p ...
.text$mn:00008D54
.text$mn:00008D54 var_14          = dword ptr -14h
.text$mn:00008D54 var_10          = dword ptr -10h
.text$mn:00008D54 var_C           = dword ptr -0Ch
.text$mn:00008D54 var_4           = dword ptr -4
.text$mn:00008D54 arg_0           = dword ptr  8
.text$mn:00008D54
.text$mn:00008D54                 push    ebp
.text$mn:00008D55                 mov     ebp, esp
.text$mn:00008D57                 push    0FFFFFFFFh
.text$mn:00008D59                 push    offset __ehhandler$?begin@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@XZ
.text$mn:00008D5E                 mov     eax, large fs:0
.text$mn:00008D64                 push    eax
.text$mn:00008D65                 sub     esp, 8
.text$mn:00008D68                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008D6D                 xor     eax, ebp
.text$mn:00008D6F                 push    eax
.text$mn:00008D70                 lea     eax, [ebp+var_C]
.text$mn:00008D73                 mov     large fs:0, eax
.text$mn:00008D79                 mov     [ebp+var_10], ecx
.text$mn:00008D7C                 mov     [ebp+var_14], 0
.text$mn:00008D83                 mov     eax, [ebp+var_10]
.text$mn:00008D86                 push    eax             ; struct std::_Container_base12 *
.text$mn:00008D87                 mov     ecx, [ebp+var_10]
.text$mn:00008D8A                 mov     edx, [ecx+4]
.text$mn:00008D8D                 push    edx             ; int
.text$mn:00008D8E                 mov     ecx, [ebp+arg_0]
.text$mn:00008D91                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(wchar_t const * *,std::_Container_base12 const *)
.text$mn:00008D96                 mov     [ebp+var_4], 0
.text$mn:00008D9D                 mov     eax, [ebp+var_14]
.text$mn:00008DA0                 or      eax, 1
.text$mn:00008DA3                 mov     [ebp+var_14], eax
.text$mn:00008DA6                 mov     eax, [ebp+arg_0]
.text$mn:00008DA9                 mov     ecx, [ebp+var_C]
.text$mn:00008DAC                 mov     large fs:0, ecx
.text$mn:00008DB3                 pop     ecx
.text$mn:00008DB4                 mov     esp, ebp
.text$mn:00008DB6                 pop     ebp
.text$mn:00008DB7                 retn    4
.text$mn:00008DB7 ?begin@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@XZ endp
.text$mn:00008DB7
.text$mn:00008DB7 ; ---------------------------------------------------------------------------
.text$mn:00008DBA                 align 4
.text$mn:00008DBA _text$mn        ends
.text$mn:00008DBA
.text$x:00008DBC ; ===========================================================================
.text$x:00008DBC
.text$x:00008DBC ; Segment type: Pure code
.text$x:00008DBC ; Segment permissions: Read/Execute
.text$x:00008DBC _text$x         segment para public 'CODE' use32
.text$x:00008DBC                 assume cs:_text$x
.text$x:00008DBC                 ;org 8DBCh
.text$x:00008DBC ; COMDAT (pick associative to section at 8D54)
.text$x:00008DBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008DBC
.text$x:00008DBC ; =============== S U B R O U T I N E =======================================
.text$x:00008DBC
.text$x:00008DBC
.text$x:00008DBC __unwindfunclet$?begin@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@XZ$0 proc near
.text$x:00008DBC                                         ; DATA XREF: .xdata$x:0000B9C4o
.text$x:00008DBC                 mov     eax, [ebp-14h]
.text$x:00008DBF                 and     eax, 1
.text$x:00008DC2                 jz      $LN4_2
.text$x:00008DC8                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:00008DCC                 mov     ecx, [ebp+8]
.text$x:00008DCF                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$x:00008DD4 ; ---------------------------------------------------------------------------
.text$x:00008DD4
.text$x:00008DD4 $LN4_2:                                 ; CODE XREF: __unwindfunclet$?begin@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@XZ$0+6j
.text$x:00008DD4                 retn
.text$x:00008DD4 __unwindfunclet$?begin@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@XZ$0 endp
.text$x:00008DD4
.text$x:00008DD5
.text$x:00008DD5 ; =============== S U B R O U T I N E =======================================
.text$x:00008DD5
.text$x:00008DD5
.text$x:00008DD5 __ehhandler$?begin@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@XZ proc near
.text$x:00008DD5                                         ; DATA XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::begin(void)+5o
.text$x:00008DD5
.text$x:00008DD5 arg_4           = dword ptr  8
.text$x:00008DD5
.text$x:00008DD5                 mov     edx, [esp+arg_4]
.text$x:00008DD9                 lea     eax, [edx+0Ch]
.text$x:00008DDC                 mov     ecx, [edx-0Ch]
.text$x:00008DDF                 xor     ecx, eax
.text$x:00008DE1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008DE6                 mov     eax, offset __ehfuncinfo$?begin@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@XZ
.text$x:00008DEB                 jmp     ___CxxFrameHandler3
.text$x:00008DEB __ehhandler$?begin@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@XZ endp
.text$x:00008DEB
.text$x:00008DEB _text$x         ends
.text$x:00008DEB
.text$mn:00008DF0 ; ===========================================================================
.text$mn:00008DF0
.text$mn:00008DF0 ; Segment type: Pure code
.text$mn:00008DF0 ; Segment permissions: Read/Execute
.text$mn:00008DF0 _text$mn        segment para public 'CODE' use32
.text$mn:00008DF0                 assume cs:_text$mn
.text$mn:00008DF0                 ;org 8DF0h
.text$mn:00008DF0 ; COMDAT (pick any)
.text$mn:00008DF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008DF0
.text$mn:00008DF0 ; =============== S U B R O U T I N E =======================================
.text$mn:00008DF0
.text$mn:00008DF0 ; Attributes: bp-based frame
.text$mn:00008DF0
.text$mn:00008DF0 ; public: wchar_t const * __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::c_str(void)const
.text$mn:00008DF0                 public ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
.text$mn:00008DF0 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ proc near
.text$mn:00008DF0                                         ; CODE XREF: WinMain(x,x,x,x)+511p
.text$mn:00008DF0                                         ; WinMain(x,x,x,x)+67Cp ...
.text$mn:00008DF0
.text$mn:00008DF0 var_4           = dword ptr -4
.text$mn:00008DF0
.text$mn:00008DF0                 push    ebp
.text$mn:00008DF1                 mov     ebp, esp
.text$mn:00008DF3                 push    ecx
.text$mn:00008DF4                 mov     [ebp+var_4], ecx
.text$mn:00008DF7                 mov     ecx, [ebp+var_4]
.text$mn:00008DFA                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00008DFF                 mov     esp, ebp
.text$mn:00008E01                 pop     ebp
.text$mn:00008E02                 retn
.text$mn:00008E02 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ endp
.text$mn:00008E02
.text$mn:00008E02 ; ---------------------------------------------------------------------------
.text$mn:00008E03                 align 4
.text$mn:00008E03 _text$mn        ends
.text$mn:00008E03
.text$mn:00008E04 ; ===========================================================================
.text$mn:00008E04
.text$mn:00008E04 ; Segment type: Pure code
.text$mn:00008E04 ; Segment permissions: Read/Execute
.text$mn:00008E04 _text$mn        segment para public 'CODE' use32
.text$mn:00008E04                 assume cs:_text$mn
.text$mn:00008E04                 ;org 8E04h
.text$mn:00008E04 ; COMDAT (pick any)
.text$mn:00008E04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E04
.text$mn:00008E04 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E04
.text$mn:00008E04 ; Attributes: bp-based frame
.text$mn:00008E04
.text$mn:00008E04 ; public: unsigned int __thiscall std::vector<wchar_t const *, class std::allocator<wchar_t const *>>::capacity(void)const
.text$mn:00008E04                 public ?capacity@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ
.text$mn:00008E04 ?capacity@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ proc near
.text$mn:00008E04                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Grow_to(uint)+Cp
.text$mn:00008E04
.text$mn:00008E04 var_4           = dword ptr -4
.text$mn:00008E04
.text$mn:00008E04                 push    ebp
.text$mn:00008E05                 mov     ebp, esp
.text$mn:00008E07                 push    ecx
.text$mn:00008E08                 mov     [ebp+var_4], ecx
.text$mn:00008E0B                 mov     eax, [ebp+var_4]
.text$mn:00008E0E                 mov     ecx, [ebp+var_4]
.text$mn:00008E11                 mov     eax, [eax+0Ch]
.text$mn:00008E14                 sub     eax, [ecx+4]
.text$mn:00008E17                 sar     eax, 2
.text$mn:00008E1A                 mov     esp, ebp
.text$mn:00008E1C                 pop     ebp
.text$mn:00008E1D                 retn
.text$mn:00008E1D ?capacity@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ endp
.text$mn:00008E1D
.text$mn:00008E1D ; ---------------------------------------------------------------------------
.text$mn:00008E1E                 align 10h
.text$mn:00008E1E _text$mn        ends
.text$mn:00008E1E
.text$mn:00008E20 ; ===========================================================================
.text$mn:00008E20
.text$mn:00008E20 ; Segment type: Pure code
.text$mn:00008E20 ; Segment permissions: Read/Execute
.text$mn:00008E20 _text$mn        segment para public 'CODE' use32
.text$mn:00008E20                 assume cs:_text$mn
.text$mn:00008E20                 ;org 8E20h
.text$mn:00008E20 ; COMDAT (pick any)
.text$mn:00008E20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E20
.text$mn:00008E20 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E20
.text$mn:00008E20 ; Attributes: bp-based frame
.text$mn:00008E20
.text$mn:00008E20 ; const struct std::error_category *__thiscall std::error_code::category(std::error_code *__hidden this)
.text$mn:00008E20                 public ?category@error_code@std@@QBEABVerror_category@2@XZ
.text$mn:00008E20 ?category@error_code@std@@QBEABVerror_category@2@XZ proc near
.text$mn:00008E20                                         ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+Cp
.text$mn:00008E20
.text$mn:00008E20 var_4           = dword ptr -4
.text$mn:00008E20
.text$mn:00008E20                 push    ebp
.text$mn:00008E21                 mov     ebp, esp
.text$mn:00008E23                 push    ecx
.text$mn:00008E24                 mov     [ebp+var_4], ecx
.text$mn:00008E27                 mov     eax, [ebp+var_4]
.text$mn:00008E2A                 mov     eax, [eax+4]
.text$mn:00008E2D                 mov     esp, ebp
.text$mn:00008E2F                 pop     ebp
.text$mn:00008E30                 retn
.text$mn:00008E30 ?category@error_code@std@@QBEABVerror_category@2@XZ endp
.text$mn:00008E30
.text$mn:00008E30 ; ---------------------------------------------------------------------------
.text$mn:00008E31                 align 4
.text$mn:00008E31 _text$mn        ends
.text$mn:00008E31
.text$mn:00008E34 ; ===========================================================================
.text$mn:00008E34
.text$mn:00008E34 ; Segment type: Pure code
.text$mn:00008E34 ; Segment permissions: Read/Execute
.text$mn:00008E34 _text$mn        segment para public 'CODE' use32
.text$mn:00008E34                 assume cs:_text$mn
.text$mn:00008E34                 ;org 8E34h
.text$mn:00008E34 ; COMDAT (pick any)
.text$mn:00008E34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E34
.text$mn:00008E34 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E34
.text$mn:00008E34 ; Attributes: bp-based frame
.text$mn:00008E34
.text$mn:00008E34 ; const struct std::error_category *__thiscall std::error_condition::category(std::error_condition *__hidden this)
.text$mn:00008E34                 public ?category@error_condition@std@@QBEABVerror_category@2@XZ
.text$mn:00008E34 ?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
.text$mn:00008E34                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+Dp
.text$mn:00008E34                                         ; std::error_condition::operator==(std::error_condition const &)+16p
.text$mn:00008E34
.text$mn:00008E34 var_4           = dword ptr -4
.text$mn:00008E34
.text$mn:00008E34                 push    ebp
.text$mn:00008E35                 mov     ebp, esp
.text$mn:00008E37                 push    ecx
.text$mn:00008E38                 mov     [ebp+var_4], ecx
.text$mn:00008E3B                 mov     eax, [ebp+var_4]
.text$mn:00008E3E                 mov     eax, [eax+4]
.text$mn:00008E41                 mov     esp, ebp
.text$mn:00008E43                 pop     ebp
.text$mn:00008E44                 retn
.text$mn:00008E44 ?category@error_condition@std@@QBEABVerror_category@2@XZ endp
.text$mn:00008E44
.text$mn:00008E44 ; ---------------------------------------------------------------------------
.text$mn:00008E45                 align 4
.text$mn:00008E45 _text$mn        ends
.text$mn:00008E45
.text$mn:00008E48 ; ===========================================================================
.text$mn:00008E48
.text$mn:00008E48 ; Segment type: Pure code
.text$mn:00008E48 ; Segment permissions: Read/Execute
.text$mn:00008E48 _text$mn        segment para public 'CODE' use32
.text$mn:00008E48                 assume cs:_text$mn
.text$mn:00008E48                 ;org 8E48h
.text$mn:00008E48 ; COMDAT (pick any)
.text$mn:00008E48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E48
.text$mn:00008E48 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E48
.text$mn:00008E48 ; Attributes: bp-based frame
.text$mn:00008E48
.text$mn:00008E48 ; public: void __thiscall std::vector<wchar_t const *, class std::allocator<wchar_t const *>>::clear(void)
.text$mn:00008E48                 public ?clear@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAEXXZ
.text$mn:00008E48 ?clear@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAEXXZ proc near
.text$mn:00008E48                                         ; CODE XREF: parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+D8p
.text$mn:00008E48
.text$mn:00008E48 var_4           = dword ptr -4
.text$mn:00008E48
.text$mn:00008E48                 push    ebp
.text$mn:00008E49                 mov     ebp, esp
.text$mn:00008E4B                 push    ecx
.text$mn:00008E4C                 mov     [ebp+var_4], ecx
.text$mn:00008E4F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00008E52                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00008E57                 mov     eax, [ebp+var_4]
.text$mn:00008E5A                 mov     ecx, [eax+8]
.text$mn:00008E5D                 push    ecx
.text$mn:00008E5E                 mov     edx, [ebp+var_4]
.text$mn:00008E61                 mov     eax, [edx+4]
.text$mn:00008E64                 push    eax
.text$mn:00008E65                 mov     ecx, [ebp+var_4]
.text$mn:00008E68                 call    ?_Destroy@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXPAPB_W0@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Destroy(wchar_t const * *,wchar_t const * *)
.text$mn:00008E6D                 mov     ecx, [ebp+var_4]
.text$mn:00008E70                 mov     edx, [ebp+var_4]
.text$mn:00008E73                 mov     eax, [edx+4]
.text$mn:00008E76                 mov     [ecx+8], eax
.text$mn:00008E79                 mov     esp, ebp
.text$mn:00008E7B                 pop     ebp
.text$mn:00008E7C                 retn
.text$mn:00008E7C ?clear@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAEXXZ endp
.text$mn:00008E7C
.text$mn:00008E7C ; ---------------------------------------------------------------------------
.text$mn:00008E7D                 align 10h
.text$mn:00008E7D _text$mn        ends
.text$mn:00008E7D
.text$mn:00008E80 ; ===========================================================================
.text$mn:00008E80
.text$mn:00008E80 ; Segment type: Pure code
.text$mn:00008E80 ; Segment permissions: Read/Execute
.text$mn:00008E80 _text$mn        segment para public 'CODE' use32
.text$mn:00008E80                 assume cs:_text$mn
.text$mn:00008E80                 ;org 8E80h
.text$mn:00008E80 ; COMDAT (pick any)
.text$mn:00008E80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E80
.text$mn:00008E80 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E80
.text$mn:00008E80 ; Attributes: bp-based frame
.text$mn:00008E80
.text$mn:00008E80 ; unsigned int __thiscall Win32Exception::code(Win32Exception *__hidden this)
.text$mn:00008E80                 public ?code@Win32Exception@@QBEIXZ
.text$mn:00008E80 ?code@Win32Exception@@QBEIXZ proc near  ; CODE XREF: __catch$_WinMain@16$2+26p
.text$mn:00008E80
.text$mn:00008E80 var_4           = dword ptr -4
.text$mn:00008E80
.text$mn:00008E80                 push    ebp
.text$mn:00008E81                 mov     ebp, esp
.text$mn:00008E83                 push    ecx
.text$mn:00008E84                 mov     [ebp+var_4], ecx
.text$mn:00008E87                 mov     eax, [ebp+var_4]
.text$mn:00008E8A                 mov     eax, [eax+14h]
.text$mn:00008E8D                 mov     esp, ebp
.text$mn:00008E8F                 pop     ebp
.text$mn:00008E90                 retn
.text$mn:00008E90 ?code@Win32Exception@@QBEIXZ endp
.text$mn:00008E90
.text$mn:00008E90 ; ---------------------------------------------------------------------------
.text$mn:00008E91                 align 4
.text$mn:00008E91 _text$mn        ends
.text$mn:00008E91
.text$mn:00008E94 ; ===========================================================================
.text$mn:00008E94
.text$mn:00008E94 ; Segment type: Pure code
.text$mn:00008E94 ; Segment permissions: Read/Execute
.text$mn:00008E94 _text$mn        segment para public 'CODE' use32
.text$mn:00008E94                 assume cs:_text$mn
.text$mn:00008E94                 ;org 8E94h
.text$mn:00008E94 ; COMDAT (pick any)
.text$mn:00008E94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E94
.text$mn:00008E94 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E94
.text$mn:00008E94 ; Attributes: bp-based frame
.text$mn:00008E94
.text$mn:00008E94 ; public: int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::compare(unsigned int, unsigned int, wchar_t const *, unsigned int)const
.text$mn:00008E94                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z
.text$mn:00008E94 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z proc near
.text$mn:00008E94                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t const *)+3Ap
.text$mn:00008E94
.text$mn:00008E94 var_18          = dword ptr -18h
.text$mn:00008E94 var_14          = dword ptr -14h
.text$mn:00008E94 var_10          = dword ptr -10h
.text$mn:00008E94 var_C           = dword ptr -0Ch
.text$mn:00008E94 var_8           = dword ptr -8
.text$mn:00008E94 var_4           = dword ptr -4
.text$mn:00008E94 arg_0           = dword ptr  8
.text$mn:00008E94 arg_4           = dword ptr  0Ch
.text$mn:00008E94 arg_8           = dword ptr  10h
.text$mn:00008E94 arg_C           = dword ptr  14h
.text$mn:00008E94
.text$mn:00008E94                 push    ebp
.text$mn:00008E95                 mov     ebp, esp
.text$mn:00008E97                 sub     esp, 18h
.text$mn:00008E9A                 mov     [ebp+var_4], ecx
.text$mn:00008E9D                 cmp     [ebp+arg_C], 0
.text$mn:00008EA1                 jz      short loc_8EB9
.text$mn:00008EA3                 push    87Dh            ; unsigned int
.text$mn:00008EA8                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008EAD                 mov     eax, [ebp+arg_8]
.text$mn:00008EB0                 push    eax             ; int
.text$mn:00008EB1                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00008EB6                 add     esp, 0Ch
.text$mn:00008EB9
.text$mn:00008EB9 loc_8EB9:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+Dj
.text$mn:00008EB9                 mov     ecx, [ebp+var_4]
.text$mn:00008EBC                 mov     edx, [ecx+14h]
.text$mn:00008EBF                 cmp     edx, [ebp+arg_0]
.text$mn:00008EC2                 jnb     short loc_8ECC
.text$mn:00008EC4                 mov     ecx, [ebp+var_4]
.text$mn:00008EC7                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00008ECC
.text$mn:00008ECC loc_8ECC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+2Ej
.text$mn:00008ECC                 mov     eax, [ebp+var_4]
.text$mn:00008ECF                 mov     ecx, [eax+14h]
.text$mn:00008ED2                 sub     ecx, [ebp+arg_0]
.text$mn:00008ED5                 cmp     ecx, [ebp+arg_4]
.text$mn:00008ED8                 jnb     short loc_8EE6
.text$mn:00008EDA                 mov     edx, [ebp+var_4]
.text$mn:00008EDD                 mov     eax, [edx+14h]
.text$mn:00008EE0                 sub     eax, [ebp+arg_0]
.text$mn:00008EE3                 mov     [ebp+arg_4], eax
.text$mn:00008EE6
.text$mn:00008EE6 loc_8EE6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+44j
.text$mn:00008EE6                 mov     ecx, [ebp+arg_4]
.text$mn:00008EE9                 cmp     ecx, [ebp+arg_C]
.text$mn:00008EEC                 jnb     short loc_8EF6
.text$mn:00008EEE                 mov     edx, [ebp+arg_4]
.text$mn:00008EF1                 mov     [ebp+var_8], edx
.text$mn:00008EF4                 jmp     short loc_8EFC
.text$mn:00008EF6 ; ---------------------------------------------------------------------------
.text$mn:00008EF6
.text$mn:00008EF6 loc_8EF6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+58j
.text$mn:00008EF6                 mov     eax, [ebp+arg_C]
.text$mn:00008EF9                 mov     [ebp+var_8], eax
.text$mn:00008EFC
.text$mn:00008EFC loc_8EFC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+60j
.text$mn:00008EFC                 mov     ecx, [ebp+var_8]
.text$mn:00008EFF                 push    ecx
.text$mn:00008F00                 mov     edx, [ebp+arg_8]
.text$mn:00008F03                 push    edx
.text$mn:00008F04                 mov     ecx, [ebp+var_4]
.text$mn:00008F07                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00008F0C                 mov     ecx, [ebp+arg_0]
.text$mn:00008F0F                 lea     edx, [eax+ecx*2]
.text$mn:00008F12                 push    edx
.text$mn:00008F13                 call    ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z ; std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)
.text$mn:00008F18                 add     esp, 0Ch
.text$mn:00008F1B                 mov     [ebp+var_C], eax
.text$mn:00008F1E                 cmp     [ebp+var_C], 0
.text$mn:00008F22                 jz      short loc_8F2C
.text$mn:00008F24                 mov     eax, [ebp+var_C]
.text$mn:00008F27                 mov     [ebp+var_18], eax
.text$mn:00008F2A                 jmp     short loc_8F61
.text$mn:00008F2C ; ---------------------------------------------------------------------------
.text$mn:00008F2C
.text$mn:00008F2C loc_8F2C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+8Ej
.text$mn:00008F2C                 mov     ecx, [ebp+arg_4]
.text$mn:00008F2F                 cmp     ecx, [ebp+arg_C]
.text$mn:00008F32                 jnb     short loc_8F3D
.text$mn:00008F34                 mov     [ebp+var_14], 0FFFFFFFFh
.text$mn:00008F3B                 jmp     short loc_8F5B
.text$mn:00008F3D ; ---------------------------------------------------------------------------
.text$mn:00008F3D
.text$mn:00008F3D loc_8F3D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+9Ej
.text$mn:00008F3D                 mov     edx, [ebp+arg_4]
.text$mn:00008F40                 cmp     edx, [ebp+arg_C]
.text$mn:00008F43                 jnz     short loc_8F4E
.text$mn:00008F45                 mov     [ebp+var_10], 0
.text$mn:00008F4C                 jmp     short loc_8F55
.text$mn:00008F4E ; ---------------------------------------------------------------------------
.text$mn:00008F4E
.text$mn:00008F4E loc_8F4E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+AFj
.text$mn:00008F4E                 mov     [ebp+var_10], 1
.text$mn:00008F55
.text$mn:00008F55 loc_8F55:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+B8j
.text$mn:00008F55                 mov     eax, [ebp+var_10]
.text$mn:00008F58                 mov     [ebp+var_14], eax
.text$mn:00008F5B
.text$mn:00008F5B loc_8F5B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+A7j
.text$mn:00008F5B                 mov     ecx, [ebp+var_14]
.text$mn:00008F5E                 mov     [ebp+var_18], ecx
.text$mn:00008F61
.text$mn:00008F61 loc_8F61:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+96j
.text$mn:00008F61                 mov     eax, [ebp+var_18]
.text$mn:00008F64                 mov     esp, ebp
.text$mn:00008F66                 pop     ebp
.text$mn:00008F67                 retn    10h
.text$mn:00008F67 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z endp
.text$mn:00008F67
.text$mn:00008F67 ; ---------------------------------------------------------------------------
.text$mn:00008F6A                 align 4
.text$mn:00008F6A _text$mn        ends
.text$mn:00008F6A
.text$mn:00008F6C ; ===========================================================================
.text$mn:00008F6C
.text$mn:00008F6C ; Segment type: Pure code
.text$mn:00008F6C ; Segment permissions: Read/Execute
.text$mn:00008F6C _text$mn        segment para public 'CODE' use32
.text$mn:00008F6C                 assume cs:_text$mn
.text$mn:00008F6C                 ;org 8F6Ch
.text$mn:00008F6C ; COMDAT (pick any)
.text$mn:00008F6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008F6C
.text$mn:00008F6C ; =============== S U B R O U T I N E =======================================
.text$mn:00008F6C
.text$mn:00008F6C ; Attributes: bp-based frame
.text$mn:00008F6C
.text$mn:00008F6C ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t *Str)
.text$mn:00008F6C                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z
.text$mn:00008F6C ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z proc near
.text$mn:00008F6C                                         ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+Bp
.text$mn:00008F6C
.text$mn:00008F6C var_4           = dword ptr -4
.text$mn:00008F6C Str             = dword ptr  8
.text$mn:00008F6C
.text$mn:00008F6C                 push    ebp
.text$mn:00008F6D                 mov     ebp, esp
.text$mn:00008F6F                 push    ecx
.text$mn:00008F70                 mov     [ebp+var_4], ecx
.text$mn:00008F73                 push    86Eh            ; unsigned int
.text$mn:00008F78                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008F7D                 mov     eax, [ebp+Str]
.text$mn:00008F80                 push    eax             ; int
.text$mn:00008F81                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00008F86                 add     esp, 0Ch
.text$mn:00008F89                 mov     ecx, [ebp+Str]
.text$mn:00008F8C                 push    ecx             ; Str
.text$mn:00008F8D                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:00008F92                 add     esp, 4
.text$mn:00008F95                 push    eax
.text$mn:00008F96                 mov     edx, [ebp+Str]
.text$mn:00008F99                 push    edx
.text$mn:00008F9A                 mov     eax, [ebp+var_4]
.text$mn:00008F9D                 mov     ecx, [eax+14h]
.text$mn:00008FA0                 push    ecx
.text$mn:00008FA1                 push    0
.text$mn:00008FA3                 mov     ecx, [ebp+var_4]
.text$mn:00008FA6                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)
.text$mn:00008FAB                 mov     esp, ebp
.text$mn:00008FAD                 pop     ebp
.text$mn:00008FAE                 retn    4
.text$mn:00008FAE ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z endp
.text$mn:00008FAE
.text$mn:00008FAE ; ---------------------------------------------------------------------------
.text$mn:00008FB1                 align 4
.text$mn:00008FB1 _text$mn        ends
.text$mn:00008FB1
.text$mn:00008FB4 ; ===========================================================================
.text$mn:00008FB4
.text$mn:00008FB4 ; Segment type: Pure code
.text$mn:00008FB4 ; Segment permissions: Read/Execute
.text$mn:00008FB4 _text$mn        segment para public 'CODE' use32
.text$mn:00008FB4                 assume cs:_text$mn
.text$mn:00008FB4                 ;org 8FB4h
.text$mn:00008FB4 ; COMDAT (pick any)
.text$mn:00008FB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008FB4
.text$mn:00008FB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00008FB4
.text$mn:00008FB4 ; Attributes: bp-based frame
.text$mn:00008FB4
.text$mn:00008FB4 ; public: static int __cdecl std::char_traits<wchar_t>::compare(wchar_t const *, wchar_t const *, unsigned int)
.text$mn:00008FB4                 public ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z
.text$mn:00008FB4 ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z proc near
.text$mn:00008FB4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+7Fp
.text$mn:00008FB4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+CBp
.text$mn:00008FB4
.text$mn:00008FB4 var_4           = dword ptr -4
.text$mn:00008FB4 arg_0           = dword ptr  8
.text$mn:00008FB4 arg_4           = dword ptr  0Ch
.text$mn:00008FB4 arg_8           = dword ptr  10h
.text$mn:00008FB4
.text$mn:00008FB4                 push    ebp
.text$mn:00008FB5                 mov     ebp, esp
.text$mn:00008FB7                 push    ecx
.text$mn:00008FB8                 cmp     [ebp+arg_8], 0
.text$mn:00008FBC                 jnz     short loc_8FC7
.text$mn:00008FBE                 mov     [ebp+var_4], 0
.text$mn:00008FC5                 jmp     short loc_8FDE
.text$mn:00008FC7 ; ---------------------------------------------------------------------------
.text$mn:00008FC7
.text$mn:00008FC7 loc_8FC7:                               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+8j
.text$mn:00008FC7                 mov     eax, [ebp+arg_8]
.text$mn:00008FCA                 push    eax
.text$mn:00008FCB                 mov     ecx, [ebp+arg_4]
.text$mn:00008FCE                 push    ecx
.text$mn:00008FCF                 mov     edx, [ebp+arg_0]
.text$mn:00008FD2                 push    edx
.text$mn:00008FD3                 call    _wmemcmp
.text$mn:00008FD8                 add     esp, 0Ch
.text$mn:00008FDB                 mov     [ebp+var_4], eax
.text$mn:00008FDE
.text$mn:00008FDE loc_8FDE:                               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+11j
.text$mn:00008FDE                 mov     eax, [ebp+var_4]
.text$mn:00008FE1                 mov     esp, ebp
.text$mn:00008FE3                 pop     ebp
.text$mn:00008FE4                 retn
.text$mn:00008FE4 ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z endp
.text$mn:00008FE4
.text$mn:00008FE4 ; ---------------------------------------------------------------------------
.text$mn:00008FE5                 align 4
.text$mn:00008FE5 _text$mn        ends
.text$mn:00008FE5
.text$mn:00008FE8 ; ===========================================================================
.text$mn:00008FE8
.text$mn:00008FE8 ; Segment type: Pure code
.text$mn:00008FE8 ; Segment permissions: Read/Execute
.text$mn:00008FE8 _text$mn        segment para public 'CODE' use32
.text$mn:00008FE8                 assume cs:_text$mn
.text$mn:00008FE8                 ;org 8FE8h
.text$mn:00008FE8 ; COMDAT (pick any)
.text$mn:00008FE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008FE8
.text$mn:00008FE8 ; =============== S U B R O U T I N E =======================================
.text$mn:00008FE8
.text$mn:00008FE8 ; Attributes: bp-based frame
.text$mn:00008FE8
.text$mn:00008FE8 ; int __stdcall std::allocator<wchar_t const *>::construct(void *, int)
.text$mn:00008FE8                 public ?construct@?$allocator@PB_W@std@@QAEXPAPB_WABQB_W@Z
.text$mn:00008FE8 ?construct@?$allocator@PB_W@std@@QAEXPAPB_WABQB_W@Z proc near
.text$mn:00008FE8                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const * const &>(std::allocator<wchar_t const *> &,wchar_t const * *,wchar_t const * const &)+17p
.text$mn:00008FE8
.text$mn:00008FE8 var_C           = dword ptr -0Ch
.text$mn:00008FE8 var_8           = dword ptr -8
.text$mn:00008FE8 var_4           = dword ptr -4
.text$mn:00008FE8 arg_0           = dword ptr  8
.text$mn:00008FE8 arg_4           = dword ptr  0Ch
.text$mn:00008FE8
.text$mn:00008FE8                 push    ebp
.text$mn:00008FE9                 mov     ebp, esp
.text$mn:00008FEB                 sub     esp, 0Ch
.text$mn:00008FEE                 mov     [ebp+var_C], ecx
.text$mn:00008FF1                 mov     eax, [ebp+arg_0]
.text$mn:00008FF4                 push    eax             ; void *
.text$mn:00008FF5                 push    4               ; unsigned int
.text$mn:00008FF7                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00008FFC                 add     esp, 8
.text$mn:00008FFF                 mov     [ebp+var_4], eax
.text$mn:00009002                 cmp     [ebp+var_4], 0
.text$mn:00009006                 jz      short loc_901A
.text$mn:00009008                 mov     ecx, [ebp+var_4]
.text$mn:0000900B                 mov     edx, [ebp+arg_4]
.text$mn:0000900E                 mov     eax, [edx]
.text$mn:00009010                 mov     [ecx], eax
.text$mn:00009012                 mov     ecx, [ebp+var_4]
.text$mn:00009015                 mov     [ebp+var_8], ecx
.text$mn:00009018                 jmp     short loc_9021
.text$mn:0000901A ; ---------------------------------------------------------------------------
.text$mn:0000901A
.text$mn:0000901A loc_901A:                               ; CODE XREF: std::allocator<wchar_t const *>::construct(wchar_t const * *,wchar_t const * const &)+1Ej
.text$mn:0000901A                 mov     [ebp+var_8], 0
.text$mn:00009021
.text$mn:00009021 loc_9021:                               ; CODE XREF: std::allocator<wchar_t const *>::construct(wchar_t const * *,wchar_t const * const &)+30j
.text$mn:00009021                 mov     esp, ebp
.text$mn:00009023                 pop     ebp
.text$mn:00009024                 retn    8
.text$mn:00009024 ?construct@?$allocator@PB_W@std@@QAEXPAPB_WABQB_W@Z endp
.text$mn:00009024
.text$mn:00009024 ; ---------------------------------------------------------------------------
.text$mn:00009027                 align 4
.text$mn:00009027 _text$mn        ends
.text$mn:00009027
.text$mn:00009028 ; ===========================================================================
.text$mn:00009028
.text$mn:00009028 ; Segment type: Pure code
.text$mn:00009028 ; Segment permissions: Read/Execute
.text$mn:00009028 _text$mn        segment para public 'CODE' use32
.text$mn:00009028                 assume cs:_text$mn
.text$mn:00009028                 ;org 9028h
.text$mn:00009028 ; COMDAT (pick any)
.text$mn:00009028                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009028
.text$mn:00009028 ; =============== S U B R O U T I N E =======================================
.text$mn:00009028
.text$mn:00009028 ; Attributes: bp-based frame
.text$mn:00009028
.text$mn:00009028 ; int __cdecl std::char_traits<char>::copy(void *Dst, void *Src, size_t Size)
.text$mn:00009028                 public ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:00009028 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near ; CODE XREF: $LN19+1Ep
.text$mn:00009028                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+5Dp ...
.text$mn:00009028
.text$mn:00009028 var_4           = dword ptr -4
.text$mn:00009028 Dst             = dword ptr  8
.text$mn:00009028 Src             = dword ptr  0Ch
.text$mn:00009028 Size            = dword ptr  10h
.text$mn:00009028
.text$mn:00009028                 push    ebp
.text$mn:00009029                 mov     ebp, esp
.text$mn:0000902B                 push    ecx
.text$mn:0000902C                 cmp     [ebp+Size], 0
.text$mn:00009030                 jnz     short loc_903A
.text$mn:00009032                 mov     eax, [ebp+Dst]
.text$mn:00009035                 mov     [ebp+var_4], eax
.text$mn:00009038                 jmp     short loc_9051
.text$mn:0000903A ; ---------------------------------------------------------------------------
.text$mn:0000903A
.text$mn:0000903A loc_903A:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+8j
.text$mn:0000903A                 mov     ecx, [ebp+Size]
.text$mn:0000903D                 push    ecx             ; Size
.text$mn:0000903E                 mov     edx, [ebp+Src]
.text$mn:00009041                 push    edx             ; Src
.text$mn:00009042                 mov     eax, [ebp+Dst]
.text$mn:00009045                 push    eax             ; Dst
.text$mn:00009046                 call    _memcpy
.text$mn:0000904B                 add     esp, 0Ch
.text$mn:0000904E                 mov     [ebp+var_4], eax
.text$mn:00009051
.text$mn:00009051 loc_9051:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+10j
.text$mn:00009051                 mov     eax, [ebp+var_4]
.text$mn:00009054                 mov     esp, ebp
.text$mn:00009056                 pop     ebp
.text$mn:00009057                 retn
.text$mn:00009057 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:00009057
.text$mn:00009057 _text$mn        ends
.text$mn:00009057
.text$mn:00009058 ; ===========================================================================
.text$mn:00009058
.text$mn:00009058 ; Segment type: Pure code
.text$mn:00009058 ; Segment permissions: Read/Execute
.text$mn:00009058 _text$mn        segment para public 'CODE' use32
.text$mn:00009058                 assume cs:_text$mn
.text$mn:00009058                 ;org 9058h
.text$mn:00009058 ; COMDAT (pick any)
.text$mn:00009058                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009058
.text$mn:00009058 ; =============== S U B R O U T I N E =======================================
.text$mn:00009058
.text$mn:00009058 ; Attributes: bp-based frame
.text$mn:00009058
.text$mn:00009058 ; int __cdecl std::char_traits<wchar_t>::copy(void *Dst, void *Src, int)
.text$mn:00009058                 public ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:00009058 ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:00009058                                         ; CODE XREF: $LN19_0+1Ep
.text$mn:00009058                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+5Dp ...
.text$mn:00009058
.text$mn:00009058 var_4           = dword ptr -4
.text$mn:00009058 Dst             = dword ptr  8
.text$mn:00009058 Src             = dword ptr  0Ch
.text$mn:00009058 arg_8           = dword ptr  10h
.text$mn:00009058
.text$mn:00009058                 push    ebp
.text$mn:00009059                 mov     ebp, esp
.text$mn:0000905B                 push    ecx
.text$mn:0000905C                 cmp     [ebp+arg_8], 0
.text$mn:00009060                 jnz     short loc_906A
.text$mn:00009062                 mov     eax, [ebp+Dst]
.text$mn:00009065                 mov     [ebp+var_4], eax
.text$mn:00009068                 jmp     short loc_9081
.text$mn:0000906A ; ---------------------------------------------------------------------------
.text$mn:0000906A
.text$mn:0000906A loc_906A:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+8j
.text$mn:0000906A                 mov     ecx, [ebp+arg_8]
.text$mn:0000906D                 push    ecx             ; int
.text$mn:0000906E                 mov     edx, [ebp+Src]
.text$mn:00009071                 push    edx             ; Src
.text$mn:00009072                 mov     eax, [ebp+Dst]
.text$mn:00009075                 push    eax             ; Dst
.text$mn:00009076                 call    _wmemcpy
.text$mn:0000907B                 add     esp, 0Ch
.text$mn:0000907E                 mov     [ebp+var_4], eax
.text$mn:00009081
.text$mn:00009081 loc_9081:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+10j
.text$mn:00009081                 mov     eax, [ebp+var_4]
.text$mn:00009084                 mov     esp, ebp
.text$mn:00009086                 pop     ebp
.text$mn:00009087                 retn
.text$mn:00009087 ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:00009087
.text$mn:00009087 _text$mn        ends
.text$mn:00009087
.text$mn:00009088 ; ===========================================================================
.text$mn:00009088
.text$mn:00009088 ; Segment type: Pure code
.text$mn:00009088 ; Segment permissions: Read/Execute
.text$mn:00009088 _text$mn        segment para public 'CODE' use32
.text$mn:00009088                 assume cs:_text$mn
.text$mn:00009088                 ;org 9088h
.text$mn:00009088 ; COMDAT (pick any)
.text$mn:00009088                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009088
.text$mn:00009088 ; =============== S U B R O U T I N E =======================================
.text$mn:00009088
.text$mn:00009088 ; Attributes: bp-based frame
.text$mn:00009088
.text$mn:00009088 ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::deallocate(void *, int)
.text$mn:00009088                 public ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
.text$mn:00009088 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
.text$mn:00009088                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+81p
.text$mn:00009088
.text$mn:00009088 var_4           = dword ptr -4
.text$mn:00009088 arg_0           = dword ptr  8
.text$mn:00009088 arg_4           = dword ptr  0Ch
.text$mn:00009088
.text$mn:00009088                 push    ebp
.text$mn:00009089                 mov     ebp, esp
.text$mn:0000908B                 push    ecx
.text$mn:0000908C                 mov     [ebp+var_4], ecx
.text$mn:0000908F                 mov     eax, [ebp+arg_4]
.text$mn:00009092                 push    eax             ; int
.text$mn:00009093                 mov     ecx, [ebp+arg_0]
.text$mn:00009096                 push    ecx             ; void *
.text$mn:00009097                 mov     ecx, [ebp+var_4]
.text$mn:0000909A                 call    ?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate(char *,uint)
.text$mn:0000909F                 mov     esp, ebp
.text$mn:000090A1                 pop     ebp
.text$mn:000090A2                 retn    8
.text$mn:000090A2 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z endp
.text$mn:000090A2
.text$mn:000090A2 ; ---------------------------------------------------------------------------
.text$mn:000090A5                 align 4
.text$mn:000090A5 _text$mn        ends
.text$mn:000090A5
.text$mn:000090A8 ; ===========================================================================
.text$mn:000090A8
.text$mn:000090A8 ; Segment type: Pure code
.text$mn:000090A8 ; Segment permissions: Read/Execute
.text$mn:000090A8 _text$mn        segment para public 'CODE' use32
.text$mn:000090A8                 assume cs:_text$mn
.text$mn:000090A8                 ;org 90A8h
.text$mn:000090A8 ; COMDAT (pick any)
.text$mn:000090A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000090A8
.text$mn:000090A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000090A8
.text$mn:000090A8 ; Attributes: bp-based frame
.text$mn:000090A8
.text$mn:000090A8 ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t const *>>::deallocate(void *, int)
.text$mn:000090A8                 public ?deallocate@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEXPAPB_WI@Z
.text$mn:000090A8 ?deallocate@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEXPAPB_WI@Z proc near
.text$mn:000090A8                                         ; CODE XREF: __catch$?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z$0+16p
.text$mn:000090A8                                         ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Reallocate(uint)+F5p ...
.text$mn:000090A8
.text$mn:000090A8 var_4           = dword ptr -4
.text$mn:000090A8 arg_0           = dword ptr  8
.text$mn:000090A8 arg_4           = dword ptr  0Ch
.text$mn:000090A8
.text$mn:000090A8                 push    ebp
.text$mn:000090A9                 mov     ebp, esp
.text$mn:000090AB                 push    ecx
.text$mn:000090AC                 mov     [ebp+var_4], ecx
.text$mn:000090AF                 mov     eax, [ebp+arg_4]
.text$mn:000090B2                 push    eax             ; int
.text$mn:000090B3                 mov     ecx, [ebp+arg_0]
.text$mn:000090B6                 push    ecx             ; void *
.text$mn:000090B7                 mov     ecx, [ebp+var_4]
.text$mn:000090BA                 call    ?deallocate@?$allocator@PB_W@std@@QAEXPAPB_WI@Z ; std::allocator<wchar_t const *>::deallocate(wchar_t const * *,uint)
.text$mn:000090BF                 mov     esp, ebp
.text$mn:000090C1                 pop     ebp
.text$mn:000090C2                 retn    8
.text$mn:000090C2 ?deallocate@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEXPAPB_WI@Z endp
.text$mn:000090C2
.text$mn:000090C2 ; ---------------------------------------------------------------------------
.text$mn:000090C5                 align 4
.text$mn:000090C5 _text$mn        ends
.text$mn:000090C5
.text$mn:000090C8 ; ===========================================================================
.text$mn:000090C8
.text$mn:000090C8 ; Segment type: Pure code
.text$mn:000090C8 ; Segment permissions: Read/Execute
.text$mn:000090C8 _text$mn        segment para public 'CODE' use32
.text$mn:000090C8                 assume cs:_text$mn
.text$mn:000090C8                 ;org 90C8h
.text$mn:000090C8 ; COMDAT (pick any)
.text$mn:000090C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000090C8
.text$mn:000090C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000090C8
.text$mn:000090C8 ; Attributes: bp-based frame
.text$mn:000090C8
.text$mn:000090C8 ; int __stdcall std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::deallocate(void *, int)
.text$mn:000090C8                 public ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:000090C8 ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:000090C8                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Free_proxy(void)+32p
.text$mn:000090C8
.text$mn:000090C8 var_4           = dword ptr -4
.text$mn:000090C8 arg_0           = dword ptr  8
.text$mn:000090C8 arg_4           = dword ptr  0Ch
.text$mn:000090C8
.text$mn:000090C8                 push    ebp
.text$mn:000090C9                 mov     ebp, esp
.text$mn:000090CB                 push    ecx
.text$mn:000090CC                 mov     [ebp+var_4], ecx
.text$mn:000090CF                 mov     eax, [ebp+arg_4]
.text$mn:000090D2                 push    eax             ; int
.text$mn:000090D3                 mov     ecx, [ebp+arg_0]
.text$mn:000090D6                 push    ecx             ; void *
.text$mn:000090D7                 mov     ecx, [ebp+var_4]
.text$mn:000090DA                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:000090DF                 mov     esp, ebp
.text$mn:000090E1                 pop     ebp
.text$mn:000090E2                 retn    8
.text$mn:000090E2 ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:000090E2
.text$mn:000090E2 ; ---------------------------------------------------------------------------
.text$mn:000090E5                 align 4
.text$mn:000090E5 _text$mn        ends
.text$mn:000090E5
.text$mn:000090E8 ; ===========================================================================
.text$mn:000090E8
.text$mn:000090E8 ; Segment type: Pure code
.text$mn:000090E8 ; Segment permissions: Read/Execute
.text$mn:000090E8 _text$mn        segment para public 'CODE' use32
.text$mn:000090E8                 assume cs:_text$mn
.text$mn:000090E8                 ;org 90E8h
.text$mn:000090E8 ; COMDAT (pick any)
.text$mn:000090E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000090E8
.text$mn:000090E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000090E8
.text$mn:000090E8 ; Attributes: bp-based frame
.text$mn:000090E8
.text$mn:000090E8 ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(void *, int)
.text$mn:000090E8                 public ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z
.text$mn:000090E8 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z proc near
.text$mn:000090E8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+81p
.text$mn:000090E8
.text$mn:000090E8 var_4           = dword ptr -4
.text$mn:000090E8 arg_0           = dword ptr  8
.text$mn:000090E8 arg_4           = dword ptr  0Ch
.text$mn:000090E8
.text$mn:000090E8                 push    ebp
.text$mn:000090E9                 mov     ebp, esp
.text$mn:000090EB                 push    ecx
.text$mn:000090EC                 mov     [ebp+var_4], ecx
.text$mn:000090EF                 mov     eax, [ebp+arg_4]
.text$mn:000090F2                 push    eax             ; int
.text$mn:000090F3                 mov     ecx, [ebp+arg_0]
.text$mn:000090F6                 push    ecx             ; void *
.text$mn:000090F7                 mov     ecx, [ebp+var_4]
.text$mn:000090FA                 call    ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ; std::allocator<wchar_t>::deallocate(wchar_t *,uint)
.text$mn:000090FF                 mov     esp, ebp
.text$mn:00009101                 pop     ebp
.text$mn:00009102                 retn    8
.text$mn:00009102 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z endp
.text$mn:00009102
.text$mn:00009102 ; ---------------------------------------------------------------------------
.text$mn:00009105                 align 4
.text$mn:00009105 _text$mn        ends
.text$mn:00009105
.text$mn:00009108 ; ===========================================================================
.text$mn:00009108
.text$mn:00009108 ; Segment type: Pure code
.text$mn:00009108 ; Segment permissions: Read/Execute
.text$mn:00009108 _text$mn        segment para public 'CODE' use32
.text$mn:00009108                 assume cs:_text$mn
.text$mn:00009108                 ;org 9108h
.text$mn:00009108 ; COMDAT (pick any)
.text$mn:00009108                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009108
.text$mn:00009108 ; =============== S U B R O U T I N E =======================================
.text$mn:00009108
.text$mn:00009108 ; Attributes: bp-based frame
.text$mn:00009108
.text$mn:00009108 ; int __stdcall std::allocator<char>::deallocate(void *, int)
.text$mn:00009108                 public ?deallocate@?$allocator@D@std@@QAEXPADI@Z
.text$mn:00009108 ?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
.text$mn:00009108                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)+12p
.text$mn:00009108
.text$mn:00009108 var_4           = dword ptr -4
.text$mn:00009108 arg_0           = dword ptr  8
.text$mn:00009108
.text$mn:00009108                 push    ebp
.text$mn:00009109                 mov     ebp, esp
.text$mn:0000910B                 push    ecx
.text$mn:0000910C                 mov     [ebp+var_4], ecx
.text$mn:0000910F                 mov     eax, [ebp+arg_0]
.text$mn:00009112                 push    eax             ; void *
.text$mn:00009113                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00009118                 add     esp, 4
.text$mn:0000911B                 mov     esp, ebp
.text$mn:0000911D                 pop     ebp
.text$mn:0000911E                 retn    8
.text$mn:0000911E ?deallocate@?$allocator@D@std@@QAEXPADI@Z endp
.text$mn:0000911E
.text$mn:0000911E ; ---------------------------------------------------------------------------
.text$mn:00009121                 align 4
.text$mn:00009121 _text$mn        ends
.text$mn:00009121
.text$mn:00009124 ; ===========================================================================
.text$mn:00009124
.text$mn:00009124 ; Segment type: Pure code
.text$mn:00009124 ; Segment permissions: Read/Execute
.text$mn:00009124 _text$mn        segment para public 'CODE' use32
.text$mn:00009124                 assume cs:_text$mn
.text$mn:00009124                 ;org 9124h
.text$mn:00009124 ; COMDAT (pick any)
.text$mn:00009124                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009124
.text$mn:00009124 ; =============== S U B R O U T I N E =======================================
.text$mn:00009124
.text$mn:00009124 ; Attributes: bp-based frame
.text$mn:00009124
.text$mn:00009124 ; int __stdcall std::allocator<wchar_t const *>::deallocate(void *, int)
.text$mn:00009124                 public ?deallocate@?$allocator@PB_W@std@@QAEXPAPB_WI@Z
.text$mn:00009124 ?deallocate@?$allocator@PB_W@std@@QAEXPAPB_WI@Z proc near
.text$mn:00009124                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t const *>>::deallocate(wchar_t const * *,uint)+12p
.text$mn:00009124
.text$mn:00009124 var_4           = dword ptr -4
.text$mn:00009124 arg_0           = dword ptr  8
.text$mn:00009124
.text$mn:00009124                 push    ebp
.text$mn:00009125                 mov     ebp, esp
.text$mn:00009127                 push    ecx
.text$mn:00009128                 mov     [ebp+var_4], ecx
.text$mn:0000912B                 mov     eax, [ebp+arg_0]
.text$mn:0000912E                 push    eax             ; void *
.text$mn:0000912F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00009134                 add     esp, 4
.text$mn:00009137                 mov     esp, ebp
.text$mn:00009139                 pop     ebp
.text$mn:0000913A                 retn    8
.text$mn:0000913A ?deallocate@?$allocator@PB_W@std@@QAEXPAPB_WI@Z endp
.text$mn:0000913A
.text$mn:0000913A ; ---------------------------------------------------------------------------
.text$mn:0000913D                 align 10h
.text$mn:0000913D _text$mn        ends
.text$mn:0000913D
.text$mn:00009140 ; ===========================================================================
.text$mn:00009140
.text$mn:00009140 ; Segment type: Pure code
.text$mn:00009140 ; Segment permissions: Read/Execute
.text$mn:00009140 _text$mn        segment para public 'CODE' use32
.text$mn:00009140                 assume cs:_text$mn
.text$mn:00009140                 ;org 9140h
.text$mn:00009140 ; COMDAT (pick any)
.text$mn:00009140                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009140
.text$mn:00009140 ; =============== S U B R O U T I N E =======================================
.text$mn:00009140
.text$mn:00009140 ; Attributes: bp-based frame
.text$mn:00009140
.text$mn:00009140 ; int __stdcall std::allocator<std::_Container_proxy>::deallocate(void *, int)
.text$mn:00009140                 public ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:00009140 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:00009140                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+32p
.text$mn:00009140                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)+32p ...
.text$mn:00009140
.text$mn:00009140 var_4           = dword ptr -4
.text$mn:00009140 arg_0           = dword ptr  8
.text$mn:00009140
.text$mn:00009140                 push    ebp
.text$mn:00009141                 mov     ebp, esp
.text$mn:00009143                 push    ecx
.text$mn:00009144                 mov     [ebp+var_4], ecx
.text$mn:00009147                 mov     eax, [ebp+arg_0]
.text$mn:0000914A                 push    eax             ; void *
.text$mn:0000914B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00009150                 add     esp, 4
.text$mn:00009153                 mov     esp, ebp
.text$mn:00009155                 pop     ebp
.text$mn:00009156                 retn    8
.text$mn:00009156 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:00009156
.text$mn:00009156 ; ---------------------------------------------------------------------------
.text$mn:00009159                 align 4
.text$mn:00009159 _text$mn        ends
.text$mn:00009159
.text$mn:0000915C ; ===========================================================================
.text$mn:0000915C
.text$mn:0000915C ; Segment type: Pure code
.text$mn:0000915C ; Segment permissions: Read/Execute
.text$mn:0000915C _text$mn        segment para public 'CODE' use32
.text$mn:0000915C                 assume cs:_text$mn
.text$mn:0000915C                 ;org 915Ch
.text$mn:0000915C ; COMDAT (pick any)
.text$mn:0000915C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000915C
.text$mn:0000915C ; =============== S U B R O U T I N E =======================================
.text$mn:0000915C
.text$mn:0000915C ; Attributes: bp-based frame
.text$mn:0000915C
.text$mn:0000915C ; int __stdcall std::allocator<wchar_t>::deallocate(void *, int)
.text$mn:0000915C                 public ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
.text$mn:0000915C ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z proc near
.text$mn:0000915C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)+12p
.text$mn:0000915C
.text$mn:0000915C var_4           = dword ptr -4
.text$mn:0000915C arg_0           = dword ptr  8
.text$mn:0000915C
.text$mn:0000915C                 push    ebp
.text$mn:0000915D                 mov     ebp, esp
.text$mn:0000915F                 push    ecx
.text$mn:00009160                 mov     [ebp+var_4], ecx
.text$mn:00009163                 mov     eax, [ebp+arg_0]
.text$mn:00009166                 push    eax             ; void *
.text$mn:00009167                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000916C                 add     esp, 4
.text$mn:0000916F                 mov     esp, ebp
.text$mn:00009171                 pop     ebp
.text$mn:00009172                 retn    8
.text$mn:00009172 ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z endp
.text$mn:00009172
.text$mn:00009172 ; ---------------------------------------------------------------------------
.text$mn:00009175                 align 4
.text$mn:00009175 _text$mn        ends
.text$mn:00009175
.text$mn:00009178 ; ===========================================================================
.text$mn:00009178
.text$mn:00009178 ; Segment type: Pure code
.text$mn:00009178 ; Segment permissions: Read/Execute
.text$mn:00009178 _text$mn        segment para public 'CODE' use32
.text$mn:00009178                 assume cs:_text$mn
.text$mn:00009178                 ;org 9178h
.text$mn:00009178 ; COMDAT (pick any)
.text$mn:00009178                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009178
.text$mn:00009178 ; =============== S U B R O U T I N E =======================================
.text$mn:00009178
.text$mn:00009178 ; Attributes: bp-based frame
.text$mn:00009178
.text$mn:00009178 ; public: virtual class std::error_condition __thiscall std::_System_error_category::default_error_condition(int)const
.text$mn:00009178                 public ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:00009178 ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:00009178                                         ; DATA XREF: .rdata:0000C230o
.text$mn:00009178
.text$mn:00009178 var_4           = dword ptr -4
.text$mn:00009178 arg_0           = dword ptr  8
.text$mn:00009178 arg_4           = dword ptr  0Ch
.text$mn:00009178
.text$mn:00009178                 push    ebp
.text$mn:00009179                 mov     ebp, esp
.text$mn:0000917B                 push    ecx
.text$mn:0000917C                 mov     [ebp+var_4], ecx
.text$mn:0000917F                 mov     eax, [ebp+arg_4]
.text$mn:00009182                 push    eax             ; int
.text$mn:00009183                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:00009188                 add     esp, 4
.text$mn:0000918B                 test    eax, eax
.text$mn:0000918D                 jz      short loc_91A8
.text$mn:0000918F                 call    ?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category(void)
.text$mn:00009194                 push    eax             ; struct std::error_category *
.text$mn:00009195                 mov     ecx, [ebp+arg_4]
.text$mn:00009198                 push    ecx             ; int
.text$mn:00009199                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000919C                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:000091A1                 mov     eax, [ebp+arg_0]
.text$mn:000091A4                 jmp     short loc_91BD
.text$mn:000091A6 ; ---------------------------------------------------------------------------
.text$mn:000091A6                 jmp     short loc_91BD
.text$mn:000091A8 ; ---------------------------------------------------------------------------
.text$mn:000091A8
.text$mn:000091A8 loc_91A8:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+15j
.text$mn:000091A8                 call    ?system_category@std@@YAABVerror_category@1@XZ ; std::system_category(void)
.text$mn:000091AD                 push    eax             ; struct std::error_category *
.text$mn:000091AE                 mov     edx, [ebp+arg_4]
.text$mn:000091B1                 push    edx             ; int
.text$mn:000091B2                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000091B5                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:000091BA                 mov     eax, [ebp+arg_0]
.text$mn:000091BD
.text$mn:000091BD loc_91BD:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+2Cj
.text$mn:000091BD                                         ; std::_System_error_category::default_error_condition(int)+2Ej
.text$mn:000091BD                 mov     esp, ebp
.text$mn:000091BF                 pop     ebp
.text$mn:000091C0                 retn    8
.text$mn:000091C0 ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:000091C0
.text$mn:000091C0 ; ---------------------------------------------------------------------------
.text$mn:000091C3                 align 4
.text$mn:000091C3 _text$mn        ends
.text$mn:000091C3
.text$mn:000091C4 ; ===========================================================================
.text$mn:000091C4
.text$mn:000091C4 ; Segment type: Pure code
.text$mn:000091C4 ; Segment permissions: Read/Execute
.text$mn:000091C4 _text$mn        segment para public 'CODE' use32
.text$mn:000091C4                 assume cs:_text$mn
.text$mn:000091C4                 ;org 91C4h
.text$mn:000091C4 ; COMDAT (pick any)
.text$mn:000091C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000091C4
.text$mn:000091C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000091C4
.text$mn:000091C4 ; Attributes: bp-based frame
.text$mn:000091C4
.text$mn:000091C4 ; public: virtual class std::error_condition __thiscall std::error_category::default_error_condition(int)const
.text$mn:000091C4                 public ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:000091C4 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:000091C4                                         ; DATA XREF: .rdata:0000C1A0o
.text$mn:000091C4                                         ; .rdata:0000C1BCo ...
.text$mn:000091C4
.text$mn:000091C4 var_4           = dword ptr -4
.text$mn:000091C4 arg_0           = dword ptr  8
.text$mn:000091C4 arg_4           = dword ptr  0Ch
.text$mn:000091C4
.text$mn:000091C4                 push    ebp
.text$mn:000091C5                 mov     ebp, esp
.text$mn:000091C7                 push    ecx
.text$mn:000091C8                 mov     [ebp+var_4], ecx
.text$mn:000091CB                 mov     eax, [ebp+var_4]
.text$mn:000091CE                 push    eax             ; struct std::error_category *
.text$mn:000091CF                 mov     ecx, [ebp+arg_4]
.text$mn:000091D2                 push    ecx             ; int
.text$mn:000091D3                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000091D6                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:000091DB                 mov     eax, [ebp+arg_0]
.text$mn:000091DE                 mov     esp, ebp
.text$mn:000091E0                 pop     ebp
.text$mn:000091E1                 retn    8
.text$mn:000091E1 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:000091E1
.text$mn:000091E1 _text$mn        ends
.text$mn:000091E1
.text$mn:000091E4 ; ===========================================================================
.text$mn:000091E4
.text$mn:000091E4 ; Segment type: Pure code
.text$mn:000091E4 ; Segment permissions: Read/Execute
.text$mn:000091E4 _text$mn        segment para public 'CODE' use32
.text$mn:000091E4                 assume cs:_text$mn
.text$mn:000091E4                 ;org 91E4h
.text$mn:000091E4 ; COMDAT (pick any)
.text$mn:000091E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000091E4
.text$mn:000091E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000091E4
.text$mn:000091E4 ; Attributes: bp-based frame
.text$mn:000091E4
.text$mn:000091E4 ; void __thiscall Notepad_plus_Window::destroy(Notepad_plus_Window *__hidden this)
.text$mn:000091E4                 public ?destroy@Notepad_plus_Window@@UAEXXZ
.text$mn:000091E4 ?destroy@Notepad_plus_Window@@UAEXXZ proc near
.text$mn:000091E4                                         ; DATA XREF: .rdata:0000C2A0o
.text$mn:000091E4
.text$mn:000091E4 var_4           = dword ptr -4
.text$mn:000091E4
.text$mn:000091E4                 push    ebp
.text$mn:000091E5                 mov     ebp, esp
.text$mn:000091E7                 push    ecx
.text$mn:000091E8                 mov     [ebp+var_4], ecx
.text$mn:000091EB                 mov     eax, [ebp+var_4]
.text$mn:000091EE                 mov     ecx, [eax+0Ch]
.text$mn:000091F1                 push    ecx             ; hWnd
.text$mn:000091F2                 call    dword ptr ds:__imp__DestroyWindow@4 ; DestroyWindow(x)
.text$mn:000091F8                 mov     esp, ebp
.text$mn:000091FA                 pop     ebp
.text$mn:000091FB                 retn
.text$mn:000091FB ?destroy@Notepad_plus_Window@@UAEXXZ endp
.text$mn:000091FB
.text$mn:000091FB _text$mn        ends
.text$mn:000091FB
.text$mn:000091FC ; ===========================================================================
.text$mn:000091FC
.text$mn:000091FC ; Segment type: Pure code
.text$mn:000091FC ; Segment permissions: Read/Execute
.text$mn:000091FC _text$mn        segment para public 'CODE' use32
.text$mn:000091FC                 assume cs:_text$mn
.text$mn:000091FC                 ;org 91FCh
.text$mn:000091FC ; COMDAT (pick any)
.text$mn:000091FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000091FC
.text$mn:000091FC ; =============== S U B R O U T I N E =======================================
.text$mn:000091FC
.text$mn:000091FC ; Attributes: bp-based frame
.text$mn:000091FC
.text$mn:000091FC ; void __thiscall FileManager::destroyInstance(FileManager *__hidden this)
.text$mn:000091FC                 public ?destroyInstance@FileManager@@QAEXXZ
.text$mn:000091FC ?destroyInstance@FileManager@@QAEXXZ proc near
.text$mn:000091FC                                         ; CODE XREF: WinMain(x,x,x,x)+5C8p
.text$mn:000091FC
.text$mn:000091FC var_10          = dword ptr -10h
.text$mn:000091FC var_C           = dword ptr -0Ch
.text$mn:000091FC var_8           = dword ptr -8
.text$mn:000091FC var_4           = dword ptr -4
.text$mn:000091FC
.text$mn:000091FC                 push    ebp
.text$mn:000091FD                 mov     ebp, esp
.text$mn:000091FF                 sub     esp, 10h
.text$mn:00009202                 mov     [ebp+var_10], ecx
.text$mn:00009205                 mov     eax, dword ptr ds:?_pSelf@FileManager@@0PAV1@A ; FileManager * FileManager::_pSelf
.text$mn:0000920A                 mov     [ebp+var_8], eax
.text$mn:0000920D                 mov     ecx, [ebp+var_8]
.text$mn:00009210                 mov     [ebp+var_4], ecx
.text$mn:00009213                 cmp     [ebp+var_4], 0
.text$mn:00009217                 jz      short loc_9228
.text$mn:00009219                 push    1
.text$mn:0000921B                 mov     ecx, [ebp+var_4]
.text$mn:0000921E                 call    ??_GFileManager@@AAEPAXI@Z ; FileManager::`scalar deleting destructor'(uint)
.text$mn:00009223                 mov     [ebp+var_C], eax
.text$mn:00009226                 jmp     short loc_922F
.text$mn:00009228 ; ---------------------------------------------------------------------------
.text$mn:00009228
.text$mn:00009228 loc_9228:                               ; CODE XREF: FileManager::destroyInstance(void)+1Bj
.text$mn:00009228                 mov     [ebp+var_C], 0
.text$mn:0000922F
.text$mn:0000922F loc_922F:                               ; CODE XREF: FileManager::destroyInstance(void)+2Aj
.text$mn:0000922F                 mov     esp, ebp
.text$mn:00009231                 pop     ebp
.text$mn:00009232                 retn
.text$mn:00009232 ?destroyInstance@FileManager@@QAEXXZ endp
.text$mn:00009232
.text$mn:00009232 ; ---------------------------------------------------------------------------
.text$mn:00009233                 align 4
.text$mn:00009233 _text$mn        ends
.text$mn:00009233
.text$mn:00009234 ; ===========================================================================
.text$mn:00009234
.text$mn:00009234 ; Segment type: Pure code
.text$mn:00009234 ; Segment permissions: Read/Execute
.text$mn:00009234 _text$mn        segment para public 'CODE' use32
.text$mn:00009234                 assume cs:_text$mn
.text$mn:00009234                 ;org 9234h
.text$mn:00009234 ; COMDAT (pick any)
.text$mn:00009234                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009234
.text$mn:00009234 ; =============== S U B R O U T I N E =======================================
.text$mn:00009234
.text$mn:00009234 ; Attributes: bp-based frame
.text$mn:00009234
.text$mn:00009234 ; void __thiscall Window::display(Window *this, bool)
.text$mn:00009234                 public ?display@Window@@UBEX_N@Z
.text$mn:00009234 ?display@Window@@UBEX_N@Z proc near     ; DATA XREF: .rdata:0000C270o
.text$mn:00009234                                         ; .rdata:0000C2A4o
.text$mn:00009234
.text$mn:00009234 var_8           = dword ptr -8
.text$mn:00009234 nCmdShow        = dword ptr -4
.text$mn:00009234 arg_0           = byte ptr  8
.text$mn:00009234
.text$mn:00009234                 push    ebp
.text$mn:00009235                 mov     ebp, esp
.text$mn:00009237                 sub     esp, 8
.text$mn:0000923A                 mov     [ebp+var_8], ecx
.text$mn:0000923D                 movzx   eax, [ebp+arg_0]
.text$mn:00009241                 test    eax, eax
.text$mn:00009243                 jz      short loc_924E
.text$mn:00009245                 mov     [ebp+nCmdShow], 5
.text$mn:0000924C                 jmp     short loc_9255
.text$mn:0000924E ; ---------------------------------------------------------------------------
.text$mn:0000924E
.text$mn:0000924E loc_924E:                               ; CODE XREF: Window::display(bool)+Fj
.text$mn:0000924E                 mov     [ebp+nCmdShow], 0
.text$mn:00009255
.text$mn:00009255 loc_9255:                               ; CODE XREF: Window::display(bool)+18j
.text$mn:00009255                 mov     ecx, [ebp+nCmdShow]
.text$mn:00009258                 push    ecx             ; nCmdShow
.text$mn:00009259                 mov     edx, [ebp+var_8]
.text$mn:0000925C                 mov     eax, [edx+0Ch]
.text$mn:0000925F                 push    eax             ; hWnd
.text$mn:00009260                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00009266                 mov     esp, ebp
.text$mn:00009268                 pop     ebp
.text$mn:00009269                 retn    4
.text$mn:00009269 ?display@Window@@UBEX_N@Z endp
.text$mn:00009269
.text$mn:00009269 _text$mn        ends
.text$mn:00009269
.text$mn:0000926C ; ===========================================================================
.text$mn:0000926C
.text$mn:0000926C ; Segment type: Pure code
.text$mn:0000926C ; Segment permissions: Read/Execute
.text$mn:0000926C _text$mn        segment para public 'CODE' use32
.text$mn:0000926C                 assume cs:_text$mn
.text$mn:0000926C                 ;org 926Ch
.text$mn:0000926C ; COMDAT (pick any)
.text$mn:0000926C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000926C
.text$mn:0000926C ; =============== S U B R O U T I N E =======================================
.text$mn:0000926C
.text$mn:0000926C ; Attributes: bp-based frame
.text$mn:0000926C
.text$mn:0000926C ; public: bool __thiscall Notepad_plus_Window::emergency(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>)
.text$mn:0000926C                 public ?emergency@Notepad_plus_Window@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$mn:0000926C ?emergency@Notepad_plus_Window@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z proc near
.text$mn:0000926C                                         ; CODE XREF: doException(Notepad_plus_Window &)+B7p
.text$mn:0000926C
.text$mn:0000926C var_20          = dword ptr -20h
.text$mn:0000926C var_1C          = dword ptr -1Ch
.text$mn:0000926C var_18          = dword ptr -18h
.text$mn:0000926C var_14          = dword ptr -14h
.text$mn:0000926C var_E           = byte ptr -0Eh
.text$mn:0000926C var_D           = byte ptr -0Dh
.text$mn:0000926C var_C           = dword ptr -0Ch
.text$mn:0000926C var_4           = dword ptr -4
.text$mn:0000926C arg_0           = byte ptr  8
.text$mn:0000926C
.text$mn:0000926C                 push    ebp
.text$mn:0000926D                 mov     ebp, esp
.text$mn:0000926F                 push    0FFFFFFFFh
.text$mn:00009271                 push    offset __ehhandler$?emergency@Notepad_plus_Window@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$mn:00009276                 mov     eax, large fs:0
.text$mn:0000927C                 push    eax
.text$mn:0000927D                 sub     esp, 14h
.text$mn:00009280                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009285                 xor     eax, ebp
.text$mn:00009287                 push    eax
.text$mn:00009288                 lea     eax, [ebp+var_C]
.text$mn:0000928B                 mov     large fs:0, eax
.text$mn:00009291                 mov     [ebp+var_18], ecx
.text$mn:00009294                 mov     [ebp+var_4], 0
.text$mn:0000929B                 sub     esp, 1Ch
.text$mn:0000929E                 mov     ecx, esp
.text$mn:000092A0                 mov     [ebp+var_1C], esp
.text$mn:000092A3                 lea     eax, [ebp+arg_0]
.text$mn:000092A6                 push    eax
.text$mn:000092A7                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000092AC                 mov     [ebp+var_14], eax
.text$mn:000092AF                 mov     ecx, [ebp+var_14]
.text$mn:000092B2                 mov     [ebp+var_20], ecx
.text$mn:000092B5                 mov     byte ptr [ebp+var_4], 1
.text$mn:000092B9                 mov     ecx, [ebp+var_18]
.text$mn:000092BC                 add     ecx, 10h
.text$mn:000092BF                 mov     byte ptr [ebp+var_4], 0
.text$mn:000092C3                 call    ?emergency@Notepad_plus@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; Notepad_plus::emergency(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:000092C8                 mov     [ebp+var_D], al
.text$mn:000092CB                 mov     dl, [ebp+var_D]
.text$mn:000092CE                 mov     [ebp+var_E], dl
.text$mn:000092D1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000092D8                 lea     ecx, [ebp+arg_0]
.text$mn:000092DB                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000092E0                 mov     al, [ebp+var_E]
.text$mn:000092E3                 mov     ecx, [ebp+var_C]
.text$mn:000092E6                 mov     large fs:0, ecx
.text$mn:000092ED                 pop     ecx
.text$mn:000092EE                 mov     esp, ebp
.text$mn:000092F0                 pop     ebp
.text$mn:000092F1                 retn    1Ch
.text$mn:000092F1 ?emergency@Notepad_plus_Window@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z endp
.text$mn:000092F1
.text$mn:000092F1 _text$mn        ends
.text$mn:000092F1
.text$x:000092F4 ; ===========================================================================
.text$x:000092F4
.text$x:000092F4 ; Segment type: Pure code
.text$x:000092F4 ; Segment permissions: Read/Execute
.text$x:000092F4 _text$x         segment para public 'CODE' use32
.text$x:000092F4                 assume cs:_text$x
.text$x:000092F4                 ;org 92F4h
.text$x:000092F4 ; COMDAT (pick associative to section at 926C)
.text$x:000092F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000092F4
.text$x:000092F4 ; =============== S U B R O U T I N E =======================================
.text$x:000092F4
.text$x:000092F4
.text$x:000092F4 __unwindfunclet$?emergency@Notepad_plus_Window@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0 proc near
.text$x:000092F4                                         ; DATA XREF: .xdata$x:0000BB20o
.text$x:000092F4                 lea     ecx, [ebp+8]
.text$x:000092F7                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000092F7 __unwindfunclet$?emergency@Notepad_plus_Window@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0 endp
.text$x:000092F7
.text$x:000092FC
.text$x:000092FC ; =============== S U B R O U T I N E =======================================
.text$x:000092FC
.text$x:000092FC
.text$x:000092FC __unwindfunclet$?emergency@Notepad_plus_Window@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$1 proc near
.text$x:000092FC                                         ; DATA XREF: .xdata$x:0000BB28o
.text$x:000092FC                 mov     ecx, [ebp-1Ch]
.text$x:000092FF                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000092FF __unwindfunclet$?emergency@Notepad_plus_Window@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$1 endp
.text$x:000092FF
.text$x:00009304
.text$x:00009304 ; =============== S U B R O U T I N E =======================================
.text$x:00009304
.text$x:00009304
.text$x:00009304 __ehhandler$?emergency@Notepad_plus_Window@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z proc near
.text$x:00009304                                         ; DATA XREF: Notepad_plus_Window::emergency(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+5o
.text$x:00009304
.text$x:00009304 arg_4           = dword ptr  8
.text$x:00009304
.text$x:00009304                 mov     edx, [esp+arg_4]
.text$x:00009308                 lea     eax, [edx+0Ch]
.text$x:0000930B                 mov     ecx, [edx-18h]
.text$x:0000930E                 xor     ecx, eax
.text$x:00009310                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009315                 mov     eax, offset __ehfuncinfo$?emergency@Notepad_plus_Window@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$x:0000931A                 jmp     ___CxxFrameHandler3
.text$x:0000931A __ehhandler$?emergency@Notepad_plus_Window@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z endp
.text$x:0000931A
.text$x:0000931A ; ---------------------------------------------------------------------------
.text$x:0000931F                 align 10h
.text$x:0000931F _text$x         ends
.text$x:0000931F
.text$mn:00009320 ; ===========================================================================
.text$mn:00009320
.text$mn:00009320 ; Segment type: Pure code
.text$mn:00009320 ; Segment permissions: Read/Execute
.text$mn:00009320 _text$mn        segment para public 'CODE' use32
.text$mn:00009320                 assume cs:_text$mn
.text$mn:00009320                 ;org 9320h
.text$mn:00009320 ; COMDAT (pick any)
.text$mn:00009320                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009320
.text$mn:00009320 ; =============== S U B R O U T I N E =======================================
.text$mn:00009320
.text$mn:00009320 ; Attributes: bp-based frame
.text$mn:00009320
.text$mn:00009320 ; public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>> __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::end(void)
.text$mn:00009320                 public ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:00009320 ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$mn:00009320                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+72p
.text$mn:00009320                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+8Ep
.text$mn:00009320
.text$mn:00009320 var_14          = dword ptr -14h
.text$mn:00009320 var_10          = dword ptr -10h
.text$mn:00009320 var_C           = dword ptr -0Ch
.text$mn:00009320 var_4           = dword ptr -4
.text$mn:00009320 arg_0           = dword ptr  8
.text$mn:00009320
.text$mn:00009320                 push    ebp
.text$mn:00009321                 mov     ebp, esp
.text$mn:00009323                 push    0FFFFFFFFh
.text$mn:00009325                 push    offset __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:0000932A                 mov     eax, large fs:0
.text$mn:00009330                 push    eax
.text$mn:00009331                 sub     esp, 8
.text$mn:00009334                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009339                 xor     eax, ebp
.text$mn:0000933B                 push    eax
.text$mn:0000933C                 lea     eax, [ebp+var_C]
.text$mn:0000933F                 mov     large fs:0, eax
.text$mn:00009345                 mov     [ebp+var_10], ecx
.text$mn:00009348                 mov     [ebp+var_14], 0
.text$mn:0000934F                 mov     eax, [ebp+var_10]
.text$mn:00009352                 push    eax             ; struct std::_Container_base12 *
.text$mn:00009353                 mov     ecx, [ebp+var_10]
.text$mn:00009356                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000935B                 mov     ecx, [ebp+var_10]
.text$mn:0000935E                 mov     edx, [ecx+14h]
.text$mn:00009361                 lea     eax, [eax+edx*2]
.text$mn:00009364                 push    eax             ; int
.text$mn:00009365                 mov     ecx, [ebp+arg_0]
.text$mn:00009368                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)
.text$mn:0000936D                 mov     [ebp+var_4], 0
.text$mn:00009374                 mov     ecx, [ebp+var_14]
.text$mn:00009377                 or      ecx, 1
.text$mn:0000937A                 mov     [ebp+var_14], ecx
.text$mn:0000937D                 mov     eax, [ebp+arg_0]
.text$mn:00009380                 mov     ecx, [ebp+var_C]
.text$mn:00009383                 mov     large fs:0, ecx
.text$mn:0000938A                 pop     ecx
.text$mn:0000938B                 mov     esp, ebp
.text$mn:0000938D                 pop     ebp
.text$mn:0000938E                 retn    4
.text$mn:0000938E ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$mn:0000938E
.text$mn:0000938E ; ---------------------------------------------------------------------------
.text$mn:00009391                 align 4
.text$mn:00009391 _text$mn        ends
.text$mn:00009391
.text$x:00009394 ; ===========================================================================
.text$x:00009394
.text$x:00009394 ; Segment type: Pure code
.text$x:00009394 ; Segment permissions: Read/Execute
.text$x:00009394 _text$x         segment para public 'CODE' use32
.text$x:00009394                 assume cs:_text$x
.text$x:00009394                 ;org 9394h
.text$x:00009394 ; COMDAT (pick associative to section at 9320)
.text$x:00009394                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009394
.text$x:00009394 ; =============== S U B R O U T I N E =======================================
.text$x:00009394
.text$x:00009394
.text$x:00009394 __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 proc near
.text$x:00009394                                         ; DATA XREF: .xdata$x:0000B698o
.text$x:00009394                 mov     eax, [ebp-14h]
.text$x:00009397                 and     eax, 1
.text$x:0000939A                 jz      $LN4_0
.text$x:000093A0                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:000093A4                 mov     ecx, [ebp+8]
.text$x:000093A7                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000093AC ; ---------------------------------------------------------------------------
.text$x:000093AC
.text$x:000093AC $LN4_0:                                 ; CODE XREF: __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0+6j
.text$x:000093AC                 retn
.text$x:000093AC __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 endp
.text$x:000093AC
.text$x:000093AD
.text$x:000093AD ; =============== S U B R O U T I N E =======================================
.text$x:000093AD
.text$x:000093AD
.text$x:000093AD __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$x:000093AD                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)+5o
.text$x:000093AD
.text$x:000093AD arg_4           = dword ptr  8
.text$x:000093AD
.text$x:000093AD                 mov     edx, [esp+arg_4]
.text$x:000093B1                 lea     eax, [edx+0Ch]
.text$x:000093B4                 mov     ecx, [edx-0Ch]
.text$x:000093B7                 xor     ecx, eax
.text$x:000093B9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000093BE                 mov     eax, offset __ehfuncinfo$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$x:000093C3                 jmp     ___CxxFrameHandler3
.text$x:000093C3 __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$x:000093C3
.text$x:000093C3 _text$x         ends
.text$x:000093C3
.text$mn:000093C8 ; ===========================================================================
.text$mn:000093C8
.text$mn:000093C8 ; Segment type: Pure code
.text$mn:000093C8 ; Segment permissions: Read/Execute
.text$mn:000093C8 _text$mn        segment para public 'CODE' use32
.text$mn:000093C8                 assume cs:_text$mn
.text$mn:000093C8                 ;org 93C8h
.text$mn:000093C8 ; COMDAT (pick any)
.text$mn:000093C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000093C8
.text$mn:000093C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000093C8
.text$mn:000093C8 ; Attributes: bp-based frame
.text$mn:000093C8
.text$mn:000093C8 ; bool __thiscall std::error_category::equivalent(std::error_category *this, const struct std::error_code *, int)
.text$mn:000093C8                 public ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
.text$mn:000093C8 ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
.text$mn:000093C8                                         ; DATA XREF: .rdata:0000C1A4o
.text$mn:000093C8                                         ; .rdata:0000C1C0o ...
.text$mn:000093C8
.text$mn:000093C8 var_8           = dword ptr -8
.text$mn:000093C8 var_4           = dword ptr -4
.text$mn:000093C8 arg_0           = dword ptr  8
.text$mn:000093C8 arg_4           = dword ptr  0Ch
.text$mn:000093C8
.text$mn:000093C8                 push    ebp
.text$mn:000093C9                 mov     ebp, esp
.text$mn:000093CB                 sub     esp, 8
.text$mn:000093CE                 mov     [ebp+var_8], ecx
.text$mn:000093D1                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000093D4                 call    ?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category(void)
.text$mn:000093D9                 push    eax
.text$mn:000093DA                 mov     ecx, [ebp+var_8]
.text$mn:000093DD                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:000093E2                 movzx   eax, al
.text$mn:000093E5                 test    eax, eax
.text$mn:000093E7                 jz      short loc_93FF
.text$mn:000093E9                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000093EC                 call    ?value@error_code@std@@QBEHXZ ; std::error_code::value(void)
.text$mn:000093F1                 cmp     eax, [ebp+arg_4]
.text$mn:000093F4                 jnz     short loc_93FF
.text$mn:000093F6                 mov     [ebp+var_4], 1
.text$mn:000093FD                 jmp     short loc_9406
.text$mn:000093FF ; ---------------------------------------------------------------------------
.text$mn:000093FF
.text$mn:000093FF loc_93FF:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+1Fj
.text$mn:000093FF                                         ; std::error_category::equivalent(std::error_code const &,int)+2Cj
.text$mn:000093FF                 mov     [ebp+var_4], 0
.text$mn:00009406
.text$mn:00009406 loc_9406:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+35j
.text$mn:00009406                 mov     al, byte ptr [ebp+var_4]
.text$mn:00009409                 mov     esp, ebp
.text$mn:0000940B                 pop     ebp
.text$mn:0000940C                 retn    8
.text$mn:0000940C ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z endp
.text$mn:0000940C
.text$mn:0000940C ; ---------------------------------------------------------------------------
.text$mn:0000940F                 align 10h
.text$mn:0000940F _text$mn        ends
.text$mn:0000940F
.text$mn:00009410 ; ===========================================================================
.text$mn:00009410
.text$mn:00009410 ; Segment type: Pure code
.text$mn:00009410 ; Segment permissions: Read/Execute
.text$mn:00009410 _text$mn        segment para public 'CODE' use32
.text$mn:00009410                 assume cs:_text$mn
.text$mn:00009410                 ;org 9410h
.text$mn:00009410 ; COMDAT (pick any)
.text$mn:00009410                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009410
.text$mn:00009410 ; =============== S U B R O U T I N E =======================================
.text$mn:00009410
.text$mn:00009410 ; Attributes: bp-based frame
.text$mn:00009410
.text$mn:00009410 ; bool __thiscall std::error_category::equivalent(std::error_category *this, int, const struct std::error_condition *)
.text$mn:00009410                 public ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
.text$mn:00009410 ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
.text$mn:00009410                                         ; DATA XREF: .rdata:0000C1A8o
.text$mn:00009410                                         ; .rdata:0000C1C4o ...
.text$mn:00009410
.text$mn:00009410 var_C           = byte ptr -0Ch
.text$mn:00009410 var_4           = dword ptr -4
.text$mn:00009410 arg_0           = dword ptr  8
.text$mn:00009410 arg_4           = dword ptr  0Ch
.text$mn:00009410
.text$mn:00009410                 push    ebp
.text$mn:00009411                 mov     ebp, esp
.text$mn:00009413                 sub     esp, 0Ch
.text$mn:00009416                 mov     [ebp+var_4], ecx
.text$mn:00009419                 mov     eax, [ebp+arg_4]
.text$mn:0000941C                 push    eax             ; std::error_condition *
.text$mn:0000941D                 mov     ecx, [ebp+arg_0]
.text$mn:00009420                 push    ecx
.text$mn:00009421                 lea     edx, [ebp+var_C]
.text$mn:00009424                 push    edx
.text$mn:00009425                 mov     eax, [ebp+var_4]
.text$mn:00009428                 mov     edx, [eax]
.text$mn:0000942A                 mov     ecx, [ebp+var_4]
.text$mn:0000942D                 mov     eax, [edx+0Ch]
.text$mn:00009430                 call    eax
.text$mn:00009432                 mov     ecx, eax
.text$mn:00009434                 call    ??8error_condition@std@@QBE_NABV01@@Z ; std::error_condition::operator==(std::error_condition const &)
.text$mn:00009439                 mov     esp, ebp
.text$mn:0000943B                 pop     ebp
.text$mn:0000943C                 retn    8
.text$mn:0000943C ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z endp
.text$mn:0000943C
.text$mn:0000943C ; ---------------------------------------------------------------------------
.text$mn:0000943F                 align 10h
.text$mn:0000943F _text$mn        ends
.text$mn:0000943F
.text$mn:00009440 ; ===========================================================================
.text$mn:00009440
.text$mn:00009440 ; Segment type: Pure code
.text$mn:00009440 ; Segment permissions: Read/Execute
.text$mn:00009440 _text$mn        segment para public 'CODE' use32
.text$mn:00009440                 assume cs:_text$mn
.text$mn:00009440                 ;org 9440h
.text$mn:00009440 ; COMDAT (pick any)
.text$mn:00009440                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009440
.text$mn:00009440 ; =============== S U B R O U T I N E =======================================
.text$mn:00009440
.text$mn:00009440 ; Attributes: bp-based frame
.text$mn:00009440
.text$mn:00009440 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int)
.text$mn:00009440                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
.text$mn:00009440 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
.text$mn:00009440                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+4Cp
.text$mn:00009440
.text$mn:00009440 var_4           = dword ptr -4
.text$mn:00009440 arg_0           = dword ptr  8
.text$mn:00009440
.text$mn:00009440                 push    ebp
.text$mn:00009441                 mov     ebp, esp
.text$mn:00009443                 push    ecx
.text$mn:00009444                 mov     [ebp+var_4], ecx
.text$mn:00009447                 mov     eax, [ebp+var_4]
.text$mn:0000944A                 mov     ecx, [eax+14h]
.text$mn:0000944D                 cmp     ecx, [ebp+arg_0]
.text$mn:00009450                 jnb     short loc_945A
.text$mn:00009452                 mov     ecx, [ebp+var_4]
.text$mn:00009455                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:0000945A
.text$mn:0000945A loc_945A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+10j
.text$mn:0000945A                 mov     edx, [ebp+arg_0]
.text$mn:0000945D                 push    edx
.text$mn:0000945E                 mov     ecx, [ebp+var_4]
.text$mn:00009461                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00009466                 mov     eax, [ebp+var_4]
.text$mn:00009469                 mov     esp, ebp
.text$mn:0000946B                 pop     ebp
.text$mn:0000946C                 retn    4
.text$mn:0000946C ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z endp
.text$mn:0000946C
.text$mn:0000946C ; ---------------------------------------------------------------------------
.text$mn:0000946F                 align 10h
.text$mn:0000946F _text$mn        ends
.text$mn:0000946F
.text$mn:00009470 ; ===========================================================================
.text$mn:00009470
.text$mn:00009470 ; Segment type: Pure code
.text$mn:00009470 ; Segment permissions: Read/Execute
.text$mn:00009470 _text$mn        segment para public 'CODE' use32
.text$mn:00009470                 assume cs:_text$mn
.text$mn:00009470                 ;org 9470h
.text$mn:00009470 ; COMDAT (pick any)
.text$mn:00009470                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009470
.text$mn:00009470 ; =============== S U B R O U T I N E =======================================
.text$mn:00009470
.text$mn:00009470 ; Attributes: bp-based frame
.text$mn:00009470
.text$mn:00009470 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int, unsigned int)
.text$mn:00009470                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
.text$mn:00009470 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
.text$mn:00009470                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Ap
.text$mn:00009470
.text$mn:00009470 var_C           = dword ptr -0Ch
.text$mn:00009470 Dst             = dword ptr -8
.text$mn:00009470 var_4           = dword ptr -4
.text$mn:00009470 arg_0           = dword ptr  8
.text$mn:00009470 arg_4           = dword ptr  0Ch
.text$mn:00009470
.text$mn:00009470                 push    ebp
.text$mn:00009471                 mov     ebp, esp
.text$mn:00009473                 sub     esp, 0Ch
.text$mn:00009476                 mov     [ebp+var_4], ecx
.text$mn:00009479                 mov     eax, [ebp+var_4]
.text$mn:0000947C                 mov     ecx, [eax+14h]
.text$mn:0000947F                 cmp     ecx, [ebp+arg_0]
.text$mn:00009482                 jnb     short loc_948C
.text$mn:00009484                 mov     ecx, [ebp+var_4]
.text$mn:00009487                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:0000948C
.text$mn:0000948C loc_948C:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+12j
.text$mn:0000948C                 mov     edx, [ebp+var_4]
.text$mn:0000948F                 mov     eax, [edx+14h]
.text$mn:00009492                 sub     eax, [ebp+arg_0]
.text$mn:00009495                 cmp     eax, [ebp+arg_4]
.text$mn:00009498                 ja      short loc_94A8
.text$mn:0000949A                 mov     ecx, [ebp+arg_0]
.text$mn:0000949D                 push    ecx
.text$mn:0000949E                 mov     ecx, [ebp+var_4]
.text$mn:000094A1                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:000094A6                 jmp     short loc_94EE
.text$mn:000094A8 ; ---------------------------------------------------------------------------
.text$mn:000094A8
.text$mn:000094A8 loc_94A8:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+28j
.text$mn:000094A8                 cmp     [ebp+arg_4], 0
.text$mn:000094AC                 jbe     short loc_94EE
.text$mn:000094AE                 mov     ecx, [ebp+var_4]
.text$mn:000094B1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000094B6                 add     eax, [ebp+arg_0]
.text$mn:000094B9                 mov     [ebp+Dst], eax
.text$mn:000094BC                 mov     edx, [ebp+var_4]
.text$mn:000094BF                 mov     eax, [edx+14h]
.text$mn:000094C2                 sub     eax, [ebp+arg_4]
.text$mn:000094C5                 mov     [ebp+var_C], eax
.text$mn:000094C8                 mov     ecx, [ebp+var_C]
.text$mn:000094CB                 sub     ecx, [ebp+arg_0]
.text$mn:000094CE                 push    ecx             ; Size
.text$mn:000094CF                 mov     edx, [ebp+Dst]
.text$mn:000094D2                 add     edx, [ebp+arg_4]
.text$mn:000094D5                 push    edx             ; Src
.text$mn:000094D6                 mov     eax, [ebp+Dst]
.text$mn:000094D9                 push    eax             ; Dst
.text$mn:000094DA                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:000094DF                 add     esp, 0Ch
.text$mn:000094E2                 mov     ecx, [ebp+var_C]
.text$mn:000094E5                 push    ecx
.text$mn:000094E6                 mov     ecx, [ebp+var_4]
.text$mn:000094E9                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:000094EE
.text$mn:000094EE loc_94EE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+36j
.text$mn:000094EE                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+3Cj
.text$mn:000094EE                 mov     eax, [ebp+var_4]
.text$mn:000094F1                 mov     esp, ebp
.text$mn:000094F3                 pop     ebp
.text$mn:000094F4                 retn    8
.text$mn:000094F4 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z endp
.text$mn:000094F4
.text$mn:000094F4 ; ---------------------------------------------------------------------------
.text$mn:000094F7                 align 4
.text$mn:000094F7 _text$mn        ends
.text$mn:000094F7
.text$mn:000094F8 ; ===========================================================================
.text$mn:000094F8
.text$mn:000094F8 ; Segment type: Pure code
.text$mn:000094F8 ; Segment permissions: Read/Execute
.text$mn:000094F8 _text$mn        segment para public 'CODE' use32
.text$mn:000094F8                 assume cs:_text$mn
.text$mn:000094F8                 ;org 94F8h
.text$mn:000094F8 ; COMDAT (pick any)
.text$mn:000094F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000094F8
.text$mn:000094F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000094F8
.text$mn:000094F8 ; Attributes: bp-based frame
.text$mn:000094F8
.text$mn:000094F8 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int)
.text$mn:000094F8                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z
.text$mn:000094F8 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z proc near
.text$mn:000094F8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Cp
.text$mn:000094F8
.text$mn:000094F8 var_4           = dword ptr -4
.text$mn:000094F8 arg_0           = dword ptr  8
.text$mn:000094F8
.text$mn:000094F8                 push    ebp
.text$mn:000094F9                 mov     ebp, esp
.text$mn:000094FB                 push    ecx
.text$mn:000094FC                 mov     [ebp+var_4], ecx
.text$mn:000094FF                 mov     eax, [ebp+var_4]
.text$mn:00009502                 mov     ecx, [eax+14h]
.text$mn:00009505                 cmp     ecx, [ebp+arg_0]
.text$mn:00009508                 jnb     short loc_9512
.text$mn:0000950A                 mov     ecx, [ebp+var_4]
.text$mn:0000950D                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00009512
.text$mn:00009512 loc_9512:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)+10j
.text$mn:00009512                 mov     edx, [ebp+arg_0]
.text$mn:00009515                 push    edx
.text$mn:00009516                 mov     ecx, [ebp+var_4]
.text$mn:00009519                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000951E                 mov     eax, [ebp+var_4]
.text$mn:00009521                 mov     esp, ebp
.text$mn:00009523                 pop     ebp
.text$mn:00009524                 retn    4
.text$mn:00009524 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z endp
.text$mn:00009524
.text$mn:00009524 ; ---------------------------------------------------------------------------
.text$mn:00009527                 align 4
.text$mn:00009527 _text$mn        ends
.text$mn:00009527
.text$mn:00009528 ; ===========================================================================
.text$mn:00009528
.text$mn:00009528 ; Segment type: Pure code
.text$mn:00009528 ; Segment permissions: Read/Execute
.text$mn:00009528 _text$mn        segment para public 'CODE' use32
.text$mn:00009528                 assume cs:_text$mn
.text$mn:00009528                 ;org 9528h
.text$mn:00009528 ; COMDAT (pick any)
.text$mn:00009528                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009528
.text$mn:00009528 ; =============== S U B R O U T I N E =======================================
.text$mn:00009528
.text$mn:00009528 ; Attributes: bp-based frame
.text$mn:00009528
.text$mn:00009528 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int, unsigned int)
.text$mn:00009528                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
.text$mn:00009528 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z proc near
.text$mn:00009528                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Ap
.text$mn:00009528                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+10Cp
.text$mn:00009528
.text$mn:00009528 var_C           = dword ptr -0Ch
.text$mn:00009528 Dst             = dword ptr -8
.text$mn:00009528 var_4           = dword ptr -4
.text$mn:00009528 arg_0           = dword ptr  8
.text$mn:00009528 arg_4           = dword ptr  0Ch
.text$mn:00009528
.text$mn:00009528                 push    ebp
.text$mn:00009529                 mov     ebp, esp
.text$mn:0000952B                 sub     esp, 0Ch
.text$mn:0000952E                 mov     [ebp+var_4], ecx
.text$mn:00009531                 mov     eax, [ebp+var_4]
.text$mn:00009534                 mov     ecx, [eax+14h]
.text$mn:00009537                 cmp     ecx, [ebp+arg_0]
.text$mn:0000953A                 jnb     short loc_9544
.text$mn:0000953C                 mov     ecx, [ebp+var_4]
.text$mn:0000953F                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00009544
.text$mn:00009544 loc_9544:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+12j
.text$mn:00009544                 mov     edx, [ebp+var_4]
.text$mn:00009547                 mov     eax, [edx+14h]
.text$mn:0000954A                 sub     eax, [ebp+arg_0]
.text$mn:0000954D                 cmp     eax, [ebp+arg_4]
.text$mn:00009550                 ja      short loc_9560
.text$mn:00009552                 mov     ecx, [ebp+arg_0]
.text$mn:00009555                 push    ecx
.text$mn:00009556                 mov     ecx, [ebp+var_4]
.text$mn:00009559                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000955E                 jmp     short loc_95AC
.text$mn:00009560 ; ---------------------------------------------------------------------------
.text$mn:00009560
.text$mn:00009560 loc_9560:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+28j
.text$mn:00009560                 cmp     [ebp+arg_4], 0
.text$mn:00009564                 jbe     short loc_95AC
.text$mn:00009566                 mov     ecx, [ebp+var_4]
.text$mn:00009569                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000956E                 mov     edx, [ebp+arg_0]
.text$mn:00009571                 lea     eax, [eax+edx*2]
.text$mn:00009574                 mov     [ebp+Dst], eax
.text$mn:00009577                 mov     ecx, [ebp+var_4]
.text$mn:0000957A                 mov     edx, [ecx+14h]
.text$mn:0000957D                 sub     edx, [ebp+arg_4]
.text$mn:00009580                 mov     [ebp+var_C], edx
.text$mn:00009583                 mov     eax, [ebp+var_C]
.text$mn:00009586                 sub     eax, [ebp+arg_0]
.text$mn:00009589                 push    eax             ; int
.text$mn:0000958A                 mov     ecx, [ebp+arg_4]
.text$mn:0000958D                 mov     edx, [ebp+Dst]
.text$mn:00009590                 lea     eax, [edx+ecx*2]
.text$mn:00009593                 push    eax             ; Src
.text$mn:00009594                 mov     ecx, [ebp+Dst]
.text$mn:00009597                 push    ecx             ; Dst
.text$mn:00009598                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000959D                 add     esp, 0Ch
.text$mn:000095A0                 mov     edx, [ebp+var_C]
.text$mn:000095A3                 push    edx
.text$mn:000095A4                 mov     ecx, [ebp+var_4]
.text$mn:000095A7                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000095AC
.text$mn:000095AC loc_95AC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+36j
.text$mn:000095AC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+3Cj
.text$mn:000095AC                 mov     eax, [ebp+var_4]
.text$mn:000095AF                 mov     esp, ebp
.text$mn:000095B1                 pop     ebp
.text$mn:000095B2                 retn    8
.text$mn:000095B2 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z endp
.text$mn:000095B2
.text$mn:000095B2 ; ---------------------------------------------------------------------------
.text$mn:000095B5                 align 4
.text$mn:000095B5 _text$mn        ends
.text$mn:000095B5
.text$mn:000095B8 ; ===========================================================================
.text$mn:000095B8
.text$mn:000095B8 ; Segment type: Pure code
.text$mn:000095B8 ; Segment permissions: Read/Execute
.text$mn:000095B8 _text$mn        segment para public 'CODE' use32
.text$mn:000095B8                 assume cs:_text$mn
.text$mn:000095B8                 ;org 95B8h
.text$mn:000095B8 ; COMDAT (pick any)
.text$mn:000095B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000095B8
.text$mn:000095B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000095B8
.text$mn:000095B8 ; Attributes: bp-based frame
.text$mn:000095B8
.text$mn:000095B8 ; int __stdcall std::vector<wchar_t const *,std::allocator<wchar_t const *>>::erase(int, char, int, void *Dst)
.text$mn:000095B8                 public ?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z
.text$mn:000095B8 ?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z proc near
.text$mn:000095B8                                         ; CODE XREF: isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+D1p
.text$mn:000095B8                                         ; getParamVal(wchar_t,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+123p ...
.text$mn:000095B8
.text$mn:000095B8 var_24          = dword ptr -24h
.text$mn:000095B8 var_20          = dword ptr -20h
.text$mn:000095B8 var_1C          = dword ptr -1Ch
.text$mn:000095B8 var_18          = dword ptr -18h
.text$mn:000095B8 var_14          = dword ptr -14h
.text$mn:000095B8 var_10          = dword ptr -10h
.text$mn:000095B8 var_C           = dword ptr -0Ch
.text$mn:000095B8 var_4           = dword ptr -4
.text$mn:000095B8 arg_0           = dword ptr  8
.text$mn:000095B8 arg_4           = byte ptr  0Ch
.text$mn:000095B8 Dst             = dword ptr  14h
.text$mn:000095B8
.text$mn:000095B8                 push    ebp
.text$mn:000095B9                 mov     ebp, esp
.text$mn:000095BB                 push    0FFFFFFFFh
.text$mn:000095BD                 push    offset __ehhandler$?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z
.text$mn:000095C2                 mov     eax, large fs:0
.text$mn:000095C8                 push    eax
.text$mn:000095C9                 sub     esp, 18h
.text$mn:000095CC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000095D1                 xor     eax, ebp
.text$mn:000095D3                 push    eax
.text$mn:000095D4                 lea     eax, [ebp+var_C]
.text$mn:000095D7                 mov     large fs:0, eax
.text$mn:000095DD                 mov     [ebp+var_10], ecx
.text$mn:000095E0                 mov     [ebp+var_14], 0
.text$mn:000095E7                 mov     [ebp+var_4], 1
.text$mn:000095EE                 lea     ecx, [ebp+arg_4] ; this
.text$mn:000095F1                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:000095F6                 cmp     eax, [ebp+var_10]
.text$mn:000095F9                 jnz     short loc_9611
.text$mn:000095FB                 mov     eax, [ebp+var_10]
.text$mn:000095FE                 mov     ecx, [ebp+Dst]
.text$mn:00009601                 cmp     ecx, [eax+4]
.text$mn:00009604                 jb      short loc_9611
.text$mn:00009606                 mov     edx, [ebp+var_10]
.text$mn:00009609                 mov     eax, [edx+8]
.text$mn:0000960C                 cmp     eax, [ebp+Dst]
.text$mn:0000960F                 ja      short loc_9628
.text$mn:00009611
.text$mn:00009611 loc_9611:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>)+41j
.text$mn:00009611                                         ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>)+4Cj
.text$mn:00009611                 push    5A2h            ; unsigned int
.text$mn:00009616                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000961B                 push    offset ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@ ; "vector erase iterator outside range"
.text$mn:00009620                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00009625                 add     esp, 0Ch
.text$mn:00009628
.text$mn:00009628 loc_9628:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>)+57j
.text$mn:00009628                 mov     ecx, [ebp+Dst]
.text$mn:0000962B                 push    ecx             ; Dst
.text$mn:0000962C                 mov     edx, [ebp+var_10]
.text$mn:0000962F                 mov     eax, [edx+8]
.text$mn:00009632                 push    eax             ; int
.text$mn:00009633                 mov     ecx, [ebp+Dst]
.text$mn:00009636                 add     ecx, 4
.text$mn:00009639                 push    ecx             ; Src
.text$mn:0000963A                 call    ??$_Move@PAPB_WPAPB_W@std@@YAPAPB_WPAPB_W00@Z ; std::_Move<wchar_t const * *,wchar_t const * *>(wchar_t const * *,wchar_t const * *,wchar_t const * *)
.text$mn:0000963F                 add     esp, 0Ch
.text$mn:00009642                 mov     edx, [ebp+var_10]
.text$mn:00009645                 mov     eax, [edx+8]
.text$mn:00009648                 push    eax
.text$mn:00009649                 mov     ecx, [ebp+var_10]
.text$mn:0000964C                 mov     edx, [ecx+8]
.text$mn:0000964F                 sub     edx, 4
.text$mn:00009652                 push    edx
.text$mn:00009653                 mov     ecx, [ebp+var_10]
.text$mn:00009656                 call    ?_Destroy@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXPAPB_W0@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Destroy(wchar_t const * *,wchar_t const * *)
.text$mn:0000965B                 mov     eax, [ebp+var_10]
.text$mn:0000965E                 mov     ecx, [eax+8]
.text$mn:00009661                 push    ecx
.text$mn:00009662                 mov     edx, [ebp+Dst]
.text$mn:00009665                 push    edx
.text$mn:00009666                 mov     ecx, [ebp+var_10]
.text$mn:00009669                 call    ?_Orphan_range@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXPAPB_W0@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Orphan_range(wchar_t const * *,wchar_t const * *)
.text$mn:0000966E                 mov     eax, [ebp+var_10]
.text$mn:00009671                 mov     ecx, [eax+8]
.text$mn:00009674                 sub     ecx, 4
.text$mn:00009677                 mov     edx, [ebp+var_10]
.text$mn:0000967A                 mov     [edx+8], ecx
.text$mn:0000967D                 sub     esp, 0Ch
.text$mn:00009680                 mov     ecx, esp
.text$mn:00009682                 mov     [ebp+var_1C], esp
.text$mn:00009685                 lea     eax, [ebp+arg_4]
.text$mn:00009688                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00009689                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>> const &)
.text$mn:0000968E                 mov     [ebp+var_18], eax
.text$mn:00009691                 mov     ecx, [ebp+var_18]
.text$mn:00009694                 mov     [ebp+var_20], ecx
.text$mn:00009697                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000969B                 mov     edx, [ebp+arg_0]
.text$mn:0000969E                 push    edx
.text$mn:0000969F                 mov     byte ptr [ebp+var_4], 1
.text$mn:000096A3                 mov     ecx, [ebp+var_10]
.text$mn:000096A6                 call    ?_Make_iter@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Make_iter(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>)
.text$mn:000096AB                 mov     [ebp+var_24], eax
.text$mn:000096AE                 mov     eax, [ebp+var_14]
.text$mn:000096B1                 or      eax, 1
.text$mn:000096B4                 mov     [ebp+var_14], eax
.text$mn:000096B7                 mov     byte ptr [ebp+var_4], 0
.text$mn:000096BB                 lea     ecx, [ebp+arg_4]
.text$mn:000096BE                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$mn:000096C3                 mov     eax, [ebp+arg_0]
.text$mn:000096C6                 mov     ecx, [ebp+var_C]
.text$mn:000096C9                 mov     large fs:0, ecx
.text$mn:000096D0                 pop     ecx
.text$mn:000096D1                 mov     esp, ebp
.text$mn:000096D3                 pop     ebp
.text$mn:000096D4                 retn    10h
.text$mn:000096D4 ?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z endp
.text$mn:000096D4
.text$mn:000096D4 ; ---------------------------------------------------------------------------
.text$mn:000096D7                 align 4
.text$mn:000096D7 _text$mn        ends
.text$mn:000096D7
.text$x:000096D8 ; ===========================================================================
.text$x:000096D8
.text$x:000096D8 ; Segment type: Pure code
.text$x:000096D8 ; Segment permissions: Read/Execute
.text$x:000096D8 _text$x         segment para public 'CODE' use32
.text$x:000096D8                 assume cs:_text$x
.text$x:000096D8                 ;org 96D8h
.text$x:000096D8 ; COMDAT (pick associative to section at 95B8)
.text$x:000096D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000096D8
.text$x:000096D8 ; =============== S U B R O U T I N E =======================================
.text$x:000096D8
.text$x:000096D8
.text$x:000096D8 __unwindfunclet$?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z$0 proc near
.text$x:000096D8                                         ; DATA XREF: .xdata$x:0000BA2Co
.text$x:000096D8                 lea     ecx, [ebp+0Ch]
.text$x:000096DB                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$x:000096DB __unwindfunclet$?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z$0 endp
.text$x:000096DB
.text$x:000096E0
.text$x:000096E0 ; =============== S U B R O U T I N E =======================================
.text$x:000096E0
.text$x:000096E0
.text$x:000096E0 __unwindfunclet$?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z$1 proc near
.text$x:000096E0                                         ; DATA XREF: .xdata$x:0000BA34o
.text$x:000096E0                 mov     ecx, [ebp-1Ch]
.text$x:000096E3                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$x:000096E3 __unwindfunclet$?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z$1 endp
.text$x:000096E3
.text$x:000096E8
.text$x:000096E8 ; =============== S U B R O U T I N E =======================================
.text$x:000096E8
.text$x:000096E8
.text$x:000096E8 __unwindfunclet$?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z$2 proc near
.text$x:000096E8                                         ; DATA XREF: .xdata$x:0000BA24o
.text$x:000096E8                 mov     eax, [ebp-14h]
.text$x:000096EB                 and     eax, 1
.text$x:000096EE                 jz      $LN8
.text$x:000096F4                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:000096F8                 mov     ecx, [ebp+8]
.text$x:000096FB                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>(void)
.text$x:00009700 ; ---------------------------------------------------------------------------
.text$x:00009700
.text$x:00009700 $LN8:                                   ; CODE XREF: __unwindfunclet$?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z$2+6j
.text$x:00009700                 retn
.text$x:00009700 __unwindfunclet$?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z$2 endp
.text$x:00009700
.text$x:00009701
.text$x:00009701 ; =============== S U B R O U T I N E =======================================
.text$x:00009701
.text$x:00009701
.text$x:00009701 __ehhandler$?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z proc near
.text$x:00009701                                         ; DATA XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>)+5o
.text$x:00009701
.text$x:00009701 arg_4           = dword ptr  8
.text$x:00009701
.text$x:00009701                 mov     edx, [esp+arg_4]
.text$x:00009705                 lea     eax, [edx+0Ch]
.text$x:00009708                 mov     ecx, [edx-1Ch]
.text$x:0000970B                 xor     ecx, eax
.text$x:0000970D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009712                 mov     eax, offset __ehfuncinfo$?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z
.text$x:00009717                 jmp     ___CxxFrameHandler3
.text$x:00009717 __ehhandler$?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z endp
.text$x:00009717
.text$x:00009717 _text$x         ends
.text$x:00009717
.text$mn:0000971C ; ===========================================================================
.text$mn:0000971C
.text$mn:0000971C ; Segment type: Pure code
.text$mn:0000971C ; Segment permissions: Read/Execute
.text$mn:0000971C _text$mn        segment para public 'CODE' use32
.text$mn:0000971C                 assume cs:_text$mn
.text$mn:0000971C                 ;org 971Ch
.text$mn:0000971C ; COMDAT (pick any)
.text$mn:0000971C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000971C
.text$mn:0000971C ; =============== S U B R O U T I N E =======================================
.text$mn:0000971C
.text$mn:0000971C ; Attributes: bp-based frame
.text$mn:0000971C
.text$mn:0000971C ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::find(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int)const
.text$mn:0000971C                 public ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIABV12@I@Z
.text$mn:0000971C ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIABV12@I@Z proc near
.text$mn:0000971C                                         ; CODE XREF: getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &)+168p
.text$mn:0000971C
.text$mn:0000971C var_4           = dword ptr -4
.text$mn:0000971C arg_0           = dword ptr  8
.text$mn:0000971C arg_4           = dword ptr  0Ch
.text$mn:0000971C
.text$mn:0000971C                 push    ebp
.text$mn:0000971D                 mov     ebp, esp
.text$mn:0000971F                 push    ecx
.text$mn:00009720                 mov     [ebp+var_4], ecx
.text$mn:00009723                 mov     ecx, [ebp+arg_0]
.text$mn:00009726                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000972B                 push    eax
.text$mn:0000972C                 mov     eax, [ebp+arg_4]
.text$mn:0000972F                 push    eax
.text$mn:00009730                 mov     ecx, [ebp+arg_0]
.text$mn:00009733                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009738                 push    eax
.text$mn:00009739                 mov     ecx, [ebp+var_4]
.text$mn:0000973C                 call    ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)
.text$mn:00009741                 mov     esp, ebp
.text$mn:00009743                 pop     ebp
.text$mn:00009744                 retn    8
.text$mn:00009744 ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIABV12@I@Z endp
.text$mn:00009744
.text$mn:00009744 ; ---------------------------------------------------------------------------
.text$mn:00009747                 align 4
.text$mn:00009747 _text$mn        ends
.text$mn:00009747
.text$mn:00009748 ; ===========================================================================
.text$mn:00009748
.text$mn:00009748 ; Segment type: Pure code
.text$mn:00009748 ; Segment permissions: Read/Execute
.text$mn:00009748 _text$mn        segment para public 'CODE' use32
.text$mn:00009748                 assume cs:_text$mn
.text$mn:00009748                 ;org 9748h
.text$mn:00009748 ; COMDAT (pick any)
.text$mn:00009748                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009748
.text$mn:00009748 ; =============== S U B R O U T I N E =======================================
.text$mn:00009748
.text$mn:00009748 ; Attributes: bp-based frame
.text$mn:00009748
.text$mn:00009748 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t *Str, int)
.text$mn:00009748                 public ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z
.text$mn:00009748 ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z proc near
.text$mn:00009748                                         ; CODE XREF: getParamValFromString(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+8Bp
.text$mn:00009748
.text$mn:00009748 var_4           = dword ptr -4
.text$mn:00009748 Str             = dword ptr  8
.text$mn:00009748 arg_4           = dword ptr  0Ch
.text$mn:00009748
.text$mn:00009748                 push    ebp
.text$mn:00009749                 mov     ebp, esp
.text$mn:0000974B                 push    ecx
.text$mn:0000974C                 mov     [ebp+var_4], ecx
.text$mn:0000974F                 push    77Eh            ; unsigned int
.text$mn:00009754                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009759                 mov     eax, [ebp+Str]
.text$mn:0000975C                 push    eax             ; int
.text$mn:0000975D                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00009762                 add     esp, 0Ch
.text$mn:00009765                 mov     ecx, [ebp+Str]
.text$mn:00009768                 push    ecx             ; Str
.text$mn:00009769                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:0000976E                 add     esp, 4
.text$mn:00009771                 push    eax
.text$mn:00009772                 mov     edx, [ebp+arg_4]
.text$mn:00009775                 push    edx
.text$mn:00009776                 mov     eax, [ebp+Str]
.text$mn:00009779                 push    eax
.text$mn:0000977A                 mov     ecx, [ebp+var_4]
.text$mn:0000977D                 call    ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)
.text$mn:00009782                 mov     esp, ebp
.text$mn:00009784                 pop     ebp
.text$mn:00009785                 retn    8
.text$mn:00009785 ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z endp
.text$mn:00009785
.text$mn:00009785 _text$mn        ends
.text$mn:00009785
.text$mn:00009788 ; ===========================================================================
.text$mn:00009788
.text$mn:00009788 ; Segment type: Pure code
.text$mn:00009788 ; Segment permissions: Read/Execute
.text$mn:00009788 _text$mn        segment para public 'CODE' use32
.text$mn:00009788                 assume cs:_text$mn
.text$mn:00009788                 ;org 9788h
.text$mn:00009788 ; COMDAT (pick any)
.text$mn:00009788                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009788
.text$mn:00009788 ; =============== S U B R O U T I N E =======================================
.text$mn:00009788
.text$mn:00009788 ; Attributes: bp-based frame
.text$mn:00009788
.text$mn:00009788 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::find(wchar_t const *, unsigned int, unsigned int)const
.text$mn:00009788                 public ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z
.text$mn:00009788 ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z proc near
.text$mn:00009788                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint)+20p
.text$mn:00009788                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint)+35p
.text$mn:00009788
.text$mn:00009788 var_10          = dword ptr -10h
.text$mn:00009788 var_C           = dword ptr -0Ch
.text$mn:00009788 var_8           = dword ptr -8
.text$mn:00009788 var_4           = dword ptr -4
.text$mn:00009788 arg_0           = dword ptr  8
.text$mn:00009788 arg_4           = dword ptr  0Ch
.text$mn:00009788 arg_8           = dword ptr  10h
.text$mn:00009788
.text$mn:00009788                 push    ebp
.text$mn:00009789                 mov     ebp, esp
.text$mn:0000978B                 sub     esp, 10h
.text$mn:0000978E                 mov     [ebp+var_8], ecx
.text$mn:00009791                 cmp     [ebp+arg_8], 0
.text$mn:00009795                 jz      short loc_97AD
.text$mn:00009797                 push    768h            ; unsigned int
.text$mn:0000979C                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000097A1                 mov     eax, [ebp+arg_0]
.text$mn:000097A4                 push    eax             ; int
.text$mn:000097A5                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:000097AA                 add     esp, 0Ch
.text$mn:000097AD
.text$mn:000097AD loc_97AD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+Dj
.text$mn:000097AD                 cmp     [ebp+arg_8], 0
.text$mn:000097B1                 jnz     short loc_97C6
.text$mn:000097B3                 mov     ecx, [ebp+var_8]
.text$mn:000097B6                 mov     edx, [ebp+arg_4]
.text$mn:000097B9                 cmp     edx, [ecx+14h]
.text$mn:000097BC                 ja      short loc_97C6
.text$mn:000097BE                 mov     eax, [ebp+arg_4]
.text$mn:000097C1                 jmp     loc_9879
.text$mn:000097C6 ; ---------------------------------------------------------------------------
.text$mn:000097C6
.text$mn:000097C6 loc_97C6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+29j
.text$mn:000097C6                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+34j
.text$mn:000097C6                 mov     eax, [ebp+var_8]
.text$mn:000097C9                 mov     ecx, [ebp+arg_4]
.text$mn:000097CC                 cmp     ecx, [eax+14h]
.text$mn:000097CF                 jnb     loc_9874
.text$mn:000097D5                 mov     edx, [ebp+var_8]
.text$mn:000097D8                 mov     eax, [edx+14h]
.text$mn:000097DB                 sub     eax, [ebp+arg_4]
.text$mn:000097DE                 mov     [ebp+var_4], eax
.text$mn:000097E1                 mov     ecx, [ebp+arg_8]
.text$mn:000097E4                 cmp     ecx, [ebp+var_4]
.text$mn:000097E7                 ja      loc_9874
.text$mn:000097ED                 mov     edx, [ebp+arg_8]
.text$mn:000097F0                 sub     edx, 1
.text$mn:000097F3                 mov     eax, [ebp+var_4]
.text$mn:000097F6                 sub     eax, edx
.text$mn:000097F8                 mov     [ebp+var_4], eax
.text$mn:000097FB                 mov     ecx, [ebp+var_8]
.text$mn:000097FE                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009803                 mov     ecx, [ebp+arg_4]
.text$mn:00009806                 lea     edx, [eax+ecx*2]
.text$mn:00009809                 mov     [ebp+var_10], edx
.text$mn:0000980C                 jmp     short loc_982A
.text$mn:0000980E ; ---------------------------------------------------------------------------
.text$mn:0000980E
.text$mn:0000980E loc_980E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint):loc_9872j
.text$mn:0000980E                 mov     eax, [ebp+var_C]
.text$mn:00009811                 sub     eax, [ebp+var_10]
.text$mn:00009814                 sar     eax, 1
.text$mn:00009816                 add     eax, 1
.text$mn:00009819                 mov     ecx, [ebp+var_4]
.text$mn:0000981C                 sub     ecx, eax
.text$mn:0000981E                 mov     [ebp+var_4], ecx
.text$mn:00009821                 mov     edx, [ebp+var_C]
.text$mn:00009824                 add     edx, 2
.text$mn:00009827                 mov     [ebp+var_10], edx
.text$mn:0000982A
.text$mn:0000982A loc_982A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+84j
.text$mn:0000982A                 mov     eax, [ebp+arg_0]
.text$mn:0000982D                 push    eax
.text$mn:0000982E                 mov     ecx, [ebp+var_4]
.text$mn:00009831                 push    ecx
.text$mn:00009832                 mov     edx, [ebp+var_10]
.text$mn:00009835                 push    edx
.text$mn:00009836                 call    ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z ; std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)
.text$mn:0000983B                 add     esp, 0Ch
.text$mn:0000983E                 mov     [ebp+var_C], eax
.text$mn:00009841                 cmp     [ebp+var_C], 0
.text$mn:00009845                 jz      short loc_9874
.text$mn:00009847                 mov     eax, [ebp+arg_8]
.text$mn:0000984A                 push    eax
.text$mn:0000984B                 mov     ecx, [ebp+arg_0]
.text$mn:0000984E                 push    ecx
.text$mn:0000984F                 mov     edx, [ebp+var_C]
.text$mn:00009852                 push    edx
.text$mn:00009853                 call    ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z ; std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)
.text$mn:00009858                 add     esp, 0Ch
.text$mn:0000985B                 test    eax, eax
.text$mn:0000985D                 jnz     short loc_9872
.text$mn:0000985F                 mov     ecx, [ebp+var_8]
.text$mn:00009862                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009867                 mov     ecx, [ebp+var_C]
.text$mn:0000986A                 sub     ecx, eax
.text$mn:0000986C                 sar     ecx, 1
.text$mn:0000986E                 mov     eax, ecx
.text$mn:00009870                 jmp     short loc_9879
.text$mn:00009872 ; ---------------------------------------------------------------------------
.text$mn:00009872
.text$mn:00009872 loc_9872:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+D5j
.text$mn:00009872                 jmp     short loc_980E
.text$mn:00009874 ; ---------------------------------------------------------------------------
.text$mn:00009874
.text$mn:00009874 loc_9874:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+47j
.text$mn:00009874                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+5Fj ...
.text$mn:00009874                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00009879
.text$mn:00009879 loc_9879:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+39j
.text$mn:00009879                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+E8j
.text$mn:00009879                 mov     esp, ebp
.text$mn:0000987B                 pop     ebp
.text$mn:0000987C                 retn    0Ch
.text$mn:0000987C ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z endp
.text$mn:0000987C
.text$mn:0000987C ; ---------------------------------------------------------------------------
.text$mn:0000987F                 align 10h
.text$mn:0000987F _text$mn        ends
.text$mn:0000987F
.text$mn:00009880 ; ===========================================================================
.text$mn:00009880
.text$mn:00009880 ; Segment type: Pure code
.text$mn:00009880 ; Segment permissions: Read/Execute
.text$mn:00009880 _text$mn        segment para public 'CODE' use32
.text$mn:00009880                 assume cs:_text$mn
.text$mn:00009880                 ;org 9880h
.text$mn:00009880 ; COMDAT (pick any)
.text$mn:00009880                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009880
.text$mn:00009880 ; =============== S U B R O U T I N E =======================================
.text$mn:00009880
.text$mn:00009880 ; Attributes: bp-based frame
.text$mn:00009880
.text$mn:00009880 ; public: static wchar_t const * __cdecl std::char_traits<wchar_t>::find(wchar_t const *, unsigned int, wchar_t const &)
.text$mn:00009880                 public ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z
.text$mn:00009880 ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z proc near
.text$mn:00009880                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+AEp
.text$mn:00009880
.text$mn:00009880 var_4           = dword ptr -4
.text$mn:00009880 arg_0           = dword ptr  8
.text$mn:00009880 arg_4           = dword ptr  0Ch
.text$mn:00009880 arg_8           = dword ptr  10h
.text$mn:00009880
.text$mn:00009880                 push    ebp
.text$mn:00009881                 mov     ebp, esp
.text$mn:00009883                 push    ecx
.text$mn:00009884                 cmp     [ebp+arg_4], 0
.text$mn:00009888                 jnz     short loc_9893
.text$mn:0000988A                 mov     [ebp+var_4], 0
.text$mn:00009891                 jmp     short loc_98AD
.text$mn:00009893 ; ---------------------------------------------------------------------------
.text$mn:00009893
.text$mn:00009893 loc_9893:                               ; CODE XREF: std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)+8j
.text$mn:00009893                 mov     eax, [ebp+arg_4]
.text$mn:00009896                 push    eax
.text$mn:00009897                 mov     ecx, [ebp+arg_8]
.text$mn:0000989A                 movzx   edx, word ptr [ecx]
.text$mn:0000989D                 push    edx
.text$mn:0000989E                 mov     eax, [ebp+arg_0]
.text$mn:000098A1                 push    eax
.text$mn:000098A2                 call    _wmemchr
.text$mn:000098A7                 add     esp, 0Ch
.text$mn:000098AA                 mov     [ebp+var_4], eax
.text$mn:000098AD
.text$mn:000098AD loc_98AD:                               ; CODE XREF: std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)+11j
.text$mn:000098AD                 mov     eax, [ebp+var_4]
.text$mn:000098B0                 mov     esp, ebp
.text$mn:000098B2                 pop     ebp
.text$mn:000098B3                 retn
.text$mn:000098B3 ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z endp
.text$mn:000098B3
.text$mn:000098B3 _text$mn        ends
.text$mn:000098B3
.text$mn:000098B4 ; ===========================================================================
.text$mn:000098B4
.text$mn:000098B4 ; Segment type: Pure code
.text$mn:000098B4 ; Segment permissions: Read/Execute
.text$mn:000098B4 _text$mn        segment para public 'CODE' use32
.text$mn:000098B4                 assume cs:_text$mn
.text$mn:000098B4                 ;org 98B4h
.text$mn:000098B4 ; COMDAT (pick any)
.text$mn:000098B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000098B4
.text$mn:000098B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000098B4
.text$mn:000098B4 ; Attributes: bp-based frame
.text$mn:000098B4
.text$mn:000098B4 ; const struct std::error_category *__cdecl std::generic_category()
.text$mn:000098B4                 public ?generic_category@std@@YAABVerror_category@1@XZ
.text$mn:000098B4 ?generic_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:000098B4                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+17p
.text$mn:000098B4                 push    ebp
.text$mn:000098B5                 mov     ebp, esp
.text$mn:000098B7                 mov     eax, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.text$mn:000098BC                 pop     ebp
.text$mn:000098BD                 retn
.text$mn:000098BD ?generic_category@std@@YAABVerror_category@1@XZ endp
.text$mn:000098BD
.text$mn:000098BD ; ---------------------------------------------------------------------------
.text$mn:000098BE                 align 10h
.text$mn:000098BE _text$mn        ends
.text$mn:000098BE
.text$mn:000098C0 ; ===========================================================================
.text$mn:000098C0
.text$mn:000098C0 ; Segment type: Pure code
.text$mn:000098C0 ; Segment permissions: Read/Execute
.text$mn:000098C0 _text$mn        segment para public 'CODE' use32
.text$mn:000098C0                 assume cs:_text$mn
.text$mn:000098C0                 ;org 98C0h
.text$mn:000098C0 ; COMDAT (pick any)
.text$mn:000098C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000098C0
.text$mn:000098C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000098C0
.text$mn:000098C0 ; Attributes: bp-based frame
.text$mn:000098C0
.text$mn:000098C0 ; HACCEL __thiscall Accelerator::getAccTable(Accelerator *__hidden this)
.text$mn:000098C0                 public ?getAccTable@Accelerator@@QBEPAUHACCEL__@@XZ
.text$mn:000098C0 ?getAccTable@Accelerator@@QBEPAUHACCEL__@@XZ proc near
.text$mn:000098C0                                         ; CODE XREF: Notepad_plus::getAccTable(void)+10p
.text$mn:000098C0
.text$mn:000098C0 var_4           = dword ptr -4
.text$mn:000098C0
.text$mn:000098C0                 push    ebp
.text$mn:000098C1                 mov     ebp, esp
.text$mn:000098C3                 push    ecx
.text$mn:000098C4                 mov     [ebp+var_4], ecx
.text$mn:000098C7                 mov     eax, [ebp+var_4]
.text$mn:000098CA                 mov     eax, [eax+8]
.text$mn:000098CD                 mov     esp, ebp
.text$mn:000098CF                 pop     ebp
.text$mn:000098D0                 retn
.text$mn:000098D0 ?getAccTable@Accelerator@@QBEPAUHACCEL__@@XZ endp
.text$mn:000098D0
.text$mn:000098D0 ; ---------------------------------------------------------------------------
.text$mn:000098D1                 align 4
.text$mn:000098D1 _text$mn        ends
.text$mn:000098D1
.text$mn:000098D4 ; ===========================================================================
.text$mn:000098D4
.text$mn:000098D4 ; Segment type: Pure code
.text$mn:000098D4 ; Segment permissions: Read/Execute
.text$mn:000098D4 _text$mn        segment para public 'CODE' use32
.text$mn:000098D4                 assume cs:_text$mn
.text$mn:000098D4                 ;org 98D4h
.text$mn:000098D4 ; COMDAT (pick any)
.text$mn:000098D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000098D4
.text$mn:000098D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000098D4
.text$mn:000098D4 ; Attributes: bp-based frame
.text$mn:000098D4
.text$mn:000098D4 ; HACCEL __thiscall Notepad_plus::getAccTable(Notepad_plus *__hidden this)
.text$mn:000098D4                 public ?getAccTable@Notepad_plus@@QBEPAUHACCEL__@@XZ
.text$mn:000098D4 ?getAccTable@Notepad_plus@@QBEPAUHACCEL__@@XZ proc near
.text$mn:000098D4                                         ; CODE XREF: Notepad_plus_Window::getAccTable(void)+Dp
.text$mn:000098D4
.text$mn:000098D4 var_4           = dword ptr -4
.text$mn:000098D4
.text$mn:000098D4                 push    ebp
.text$mn:000098D5                 mov     ebp, esp
.text$mn:000098D7                 push    ecx
.text$mn:000098D8                 mov     [ebp+var_4], ecx
.text$mn:000098DB                 mov     ecx, [ebp+var_4]
.text$mn:000098DE                 add     ecx, 54B98h     ; this
.text$mn:000098E4                 call    ?getAccTable@Accelerator@@QBEPAUHACCEL__@@XZ ; Accelerator::getAccTable(void)
.text$mn:000098E9                 mov     esp, ebp
.text$mn:000098EB                 pop     ebp
.text$mn:000098EC                 retn
.text$mn:000098EC ?getAccTable@Notepad_plus@@QBEPAUHACCEL__@@XZ endp
.text$mn:000098EC
.text$mn:000098EC ; ---------------------------------------------------------------------------
.text$mn:000098ED                 align 10h
.text$mn:000098ED _text$mn        ends
.text$mn:000098ED
.text$mn:000098F0 ; ===========================================================================
.text$mn:000098F0
.text$mn:000098F0 ; Segment type: Pure code
.text$mn:000098F0 ; Segment permissions: Read/Execute
.text$mn:000098F0 _text$mn        segment para public 'CODE' use32
.text$mn:000098F0                 assume cs:_text$mn
.text$mn:000098F0                 ;org 98F0h
.text$mn:000098F0 ; COMDAT (pick any)
.text$mn:000098F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000098F0
.text$mn:000098F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000098F0
.text$mn:000098F0 ; Attributes: bp-based frame
.text$mn:000098F0
.text$mn:000098F0 ; HACCEL __thiscall Notepad_plus_Window::getAccTable(Notepad_plus_Window *__hidden this)
.text$mn:000098F0                 public ?getAccTable@Notepad_plus_Window@@QBEPAUHACCEL__@@XZ
.text$mn:000098F0 ?getAccTable@Notepad_plus_Window@@QBEPAUHACCEL__@@XZ proc near
.text$mn:000098F0                                         ; CODE XREF: WinMain(x,x,x,x)+AD0p
.text$mn:000098F0
.text$mn:000098F0 var_4           = dword ptr -4
.text$mn:000098F0
.text$mn:000098F0                 push    ebp
.text$mn:000098F1                 mov     ebp, esp
.text$mn:000098F3                 push    ecx
.text$mn:000098F4                 mov     [ebp+var_4], ecx
.text$mn:000098F7                 mov     ecx, [ebp+var_4]
.text$mn:000098FA                 add     ecx, 10h        ; this
.text$mn:000098FD                 call    ?getAccTable@Notepad_plus@@QBEPAUHACCEL__@@XZ ; Notepad_plus::getAccTable(void)
.text$mn:00009902                 mov     esp, ebp
.text$mn:00009904                 pop     ebp
.text$mn:00009905                 retn
.text$mn:00009905 ?getAccTable@Notepad_plus_Window@@QBEPAUHACCEL__@@XZ endp
.text$mn:00009905
.text$mn:00009905 ; ---------------------------------------------------------------------------
.text$mn:00009906                 align 4
.text$mn:00009906 _text$mn        ends
.text$mn:00009906
.text$mn:00009908 ; ===========================================================================
.text$mn:00009908
.text$mn:00009908 ; Segment type: Pure code
.text$mn:00009908 ; Segment permissions: Read/Execute
.text$mn:00009908 _text$mn        segment para public 'CODE' use32
.text$mn:00009908                 assume cs:_text$mn
.text$mn:00009908                 ;org 9908h
.text$mn:00009908 ; COMDAT (pick any)
.text$mn:00009908                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009908
.text$mn:00009908 ; =============== S U B R O U T I N E =======================================
.text$mn:00009908
.text$mn:00009908 ; Attributes: bp-based frame
.text$mn:00009908
.text$mn:00009908 ; const wchar_t *__cdecl Notepad_plus_Window::getClassName()
.text$mn:00009908                 public ?getClassName@Notepad_plus_Window@@SAPB_WXZ
.text$mn:00009908 ?getClassName@Notepad_plus_Window@@SAPB_WXZ proc near
.text$mn:00009908                                         ; CODE XREF: WinMain(x,x,x,x)+54Cp
.text$mn:00009908                                         ; WinMain(x,x,x,x)+595p
.text$mn:00009908                 push    ebp
.text$mn:00009909                 mov     ebp, esp
.text$mn:0000990B                 mov     eax, offset ?_className@Notepad_plus_Window@@0QB_WB ; wchar_t const * const Notepad_plus_Window::_className
.text$mn:00009910                 pop     ebp
.text$mn:00009911                 retn
.text$mn:00009911 ?getClassName@Notepad_plus_Window@@SAPB_WXZ endp
.text$mn:00009911
.text$mn:00009911 ; ---------------------------------------------------------------------------
.text$mn:00009912                 align 4
.text$mn:00009912 _text$mn        ends
.text$mn:00009912
.text$mn:00009914 ; ===========================================================================
.text$mn:00009914
.text$mn:00009914 ; Segment type: Pure code
.text$mn:00009914 ; Segment permissions: Read/Execute
.text$mn:00009914 _text$mn        segment para public 'CODE' use32
.text$mn:00009914                 assume cs:_text$mn
.text$mn:00009914                 ;org 9914h
.text$mn:00009914 ; COMDAT (pick any)
.text$mn:00009914                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009914
.text$mn:00009914 ; =============== S U B R O U T I N E =======================================
.text$mn:00009914
.text$mn:00009914 ; Attributes: bp-based frame
.text$mn:00009914
.text$mn:00009914 ; void __thiscall Window::getClientRect(Window *this, struct tagRECT *)
.text$mn:00009914                 public ?getClientRect@Window@@UBEXAAUtagRECT@@@Z
.text$mn:00009914 ?getClientRect@Window@@UBEXAAUtagRECT@@@Z proc near
.text$mn:00009914                                         ; DATA XREF: .rdata:0000C280o
.text$mn:00009914                                         ; .rdata:0000C2B4o
.text$mn:00009914
.text$mn:00009914 var_4           = dword ptr -4
.text$mn:00009914 lpRect          = dword ptr  8
.text$mn:00009914
.text$mn:00009914                 push    ebp
.text$mn:00009915                 mov     ebp, esp
.text$mn:00009917                 push    ecx
.text$mn:00009918                 mov     [ebp+var_4], ecx
.text$mn:0000991B                 mov     eax, [ebp+lpRect]
.text$mn:0000991E                 push    eax             ; lpRect
.text$mn:0000991F                 mov     ecx, [ebp+var_4]
.text$mn:00009922                 mov     edx, [ecx+0Ch]
.text$mn:00009925                 push    edx             ; hWnd
.text$mn:00009926                 call    dword ptr ds:__imp__GetClientRect@8 ; GetClientRect(x,x)
.text$mn:0000992C                 mov     esp, ebp
.text$mn:0000992E                 pop     ebp
.text$mn:0000992F                 retn    4
.text$mn:0000992F ?getClientRect@Window@@UBEXAAUtagRECT@@@Z endp
.text$mn:0000992F
.text$mn:0000992F ; ---------------------------------------------------------------------------
.text$mn:00009932                 align 4
.text$mn:00009932 _text$mn        ends
.text$mn:00009932
.text$mn:00009934 ; ===========================================================================
.text$mn:00009934
.text$mn:00009934 ; Segment type: Pure code
.text$mn:00009934 ; Segment permissions: Read/Execute
.text$mn:00009934 _text$mn        segment para public 'CODE' use32
.text$mn:00009934                 assume cs:_text$mn
.text$mn:00009934                 ;org 9934h
.text$mn:00009934 ; COMDAT (pick any)
.text$mn:00009934                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009934
.text$mn:00009934 ; =============== S U B R O U T I N E =======================================
.text$mn:00009934
.text$mn:00009934 ; Attributes: bp-based frame
.text$mn:00009934
.text$mn:00009934 ; HWND __thiscall Window::getHSelf(Window *__hidden this)
.text$mn:00009934                 public ?getHSelf@Window@@QBEPAUHWND__@@XZ
.text$mn:00009934 ?getHSelf@Window@@QBEPAUHWND__@@XZ proc near
.text$mn:00009934                                         ; CODE XREF: WinMain(x,x,x,x)+A44p
.text$mn:00009934                                         ; WinMain(x,x,x,x)+ADCp
.text$mn:00009934
.text$mn:00009934 var_4           = dword ptr -4
.text$mn:00009934
.text$mn:00009934                 push    ebp
.text$mn:00009935                 mov     ebp, esp
.text$mn:00009937                 push    ecx
.text$mn:00009938                 mov     [ebp+var_4], ecx
.text$mn:0000993B                 mov     eax, [ebp+var_4]
.text$mn:0000993E                 mov     eax, [eax+0Ch]
.text$mn:00009941                 mov     esp, ebp
.text$mn:00009943                 pop     ebp
.text$mn:00009944                 retn
.text$mn:00009944 ?getHSelf@Window@@QBEPAUHWND__@@XZ endp
.text$mn:00009944
.text$mn:00009944 ; ---------------------------------------------------------------------------
.text$mn:00009945                 align 4
.text$mn:00009945 _text$mn        ends
.text$mn:00009945
.text$mn:00009948 ; ===========================================================================
.text$mn:00009948
.text$mn:00009948 ; Segment type: Pure code
.text$mn:00009948 ; Segment permissions: Read/Execute
.text$mn:00009948 _text$mn        segment para public 'CODE' use32
.text$mn:00009948                 assume cs:_text$mn
.text$mn:00009948                 ;org 9948h
.text$mn:00009948 ; COMDAT (pick any)
.text$mn:00009948                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009948
.text$mn:00009948 ; =============== S U B R O U T I N E =======================================
.text$mn:00009948
.text$mn:00009948 ; Attributes: bp-based frame
.text$mn:00009948
.text$mn:00009948 ; int __thiscall Window::getHeight(Window *__hidden this)
.text$mn:00009948                 public ?getHeight@Window@@UBEHXZ
.text$mn:00009948 ?getHeight@Window@@UBEHXZ proc near     ; DATA XREF: .rdata:0000C28Co
.text$mn:00009948                                         ; .rdata:0000C2C0o
.text$mn:00009948
.text$mn:00009948 var_18          = dword ptr -18h
.text$mn:00009948 Rect            = tagRECT ptr -14h
.text$mn:00009948 var_4           = dword ptr -4
.text$mn:00009948
.text$mn:00009948                 push    ebp
.text$mn:00009949                 mov     ebp, esp
.text$mn:0000994B                 sub     esp, 18h
.text$mn:0000994E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009953                 xor     eax, ebp
.text$mn:00009955                 mov     [ebp+var_4], eax
.text$mn:00009958                 mov     [ebp+var_18], ecx
.text$mn:0000995B                 lea     eax, [ebp+Rect]
.text$mn:0000995E                 push    eax             ; lpRect
.text$mn:0000995F                 mov     ecx, [ebp+var_18]
.text$mn:00009962                 mov     edx, [ecx+0Ch]
.text$mn:00009965                 push    edx             ; hWnd
.text$mn:00009966                 call    dword ptr ds:__imp__GetClientRect@8 ; GetClientRect(x,x)
.text$mn:0000996C                 mov     eax, [ebp+var_18]
.text$mn:0000996F                 mov     ecx, [eax+0Ch]
.text$mn:00009972                 push    ecx             ; hWnd
.text$mn:00009973                 call    dword ptr ds:__imp__IsWindowVisible@4 ; IsWindowVisible(x)
.text$mn:00009979                 cmp     eax, 1
.text$mn:0000997C                 jnz     short loc_9986
.text$mn:0000997E                 mov     eax, [ebp+Rect.bottom]
.text$mn:00009981                 sub     eax, [ebp+Rect.top]
.text$mn:00009984                 jmp     short loc_9988
.text$mn:00009986 ; ---------------------------------------------------------------------------
.text$mn:00009986
.text$mn:00009986 loc_9986:                               ; CODE XREF: Window::getHeight(void)+34j
.text$mn:00009986                 xor     eax, eax
.text$mn:00009988
.text$mn:00009988 loc_9988:                               ; CODE XREF: Window::getHeight(void)+3Cj
.text$mn:00009988                 mov     ecx, [ebp+var_4]
.text$mn:0000998B                 xor     ecx, ebp
.text$mn:0000998D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00009992                 mov     esp, ebp
.text$mn:00009994                 pop     ebp
.text$mn:00009995                 retn
.text$mn:00009995 ?getHeight@Window@@UBEHXZ endp
.text$mn:00009995
.text$mn:00009995 ; ---------------------------------------------------------------------------
.text$mn:00009996                 align 4
.text$mn:00009996 _text$mn        ends
.text$mn:00009996
.text$mn:00009998 ; ===========================================================================
.text$mn:00009998
.text$mn:00009998 ; Segment type: Pure code
.text$mn:00009998 ; Segment permissions: Read/Execute
.text$mn:00009998 _text$mn        segment para public 'CODE' use32
.text$mn:00009998                 assume cs:_text$mn
.text$mn:00009998                 ;org 9998h
.text$mn:00009998 ; COMDAT (pick any)
.text$mn:00009998                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009998
.text$mn:00009998 ; =============== S U B R O U T I N E =======================================
.text$mn:00009998
.text$mn:00009998 ; Attributes: bp-based frame
.text$mn:00009998
.text$mn:00009998 ; struct FileManager *__cdecl FileManager::getInstance()
.text$mn:00009998                 public ?getInstance@FileManager@@SAPAV1@XZ
.text$mn:00009998 ?getInstance@FileManager@@SAPAV1@XZ proc near
.text$mn:00009998                                         ; CODE XREF: WinMain(x,x,x,x)+5C1p
.text$mn:00009998                 push    ebp
.text$mn:00009999                 mov     ebp, esp
.text$mn:0000999B                 mov     eax, dword ptr ds:?_pSelf@FileManager@@0PAV1@A ; FileManager * FileManager::_pSelf
.text$mn:000099A0                 pop     ebp
.text$mn:000099A1                 retn
.text$mn:000099A1 ?getInstance@FileManager@@SAPAV1@XZ endp
.text$mn:000099A1
.text$mn:000099A1 ; ---------------------------------------------------------------------------
.text$mn:000099A2                 align 4
.text$mn:000099A2 _text$mn        ends
.text$mn:000099A2
.text$mn:000099A4 ; ===========================================================================
.text$mn:000099A4
.text$mn:000099A4 ; Segment type: Pure code
.text$mn:000099A4 ; Segment permissions: Read/Execute
.text$mn:000099A4 _text$mn        segment para public 'CODE' use32
.text$mn:000099A4                 assume cs:_text$mn
.text$mn:000099A4                 ;org 99A4h
.text$mn:000099A4 ; COMDAT (pick any)
.text$mn:000099A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000099A4
.text$mn:000099A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000099A4
.text$mn:000099A4 ; Attributes: bp-based frame
.text$mn:000099A4
.text$mn:000099A4 ; struct NppParameters *__cdecl NppParameters::getInstance()
.text$mn:000099A4                 public ?getInstance@NppParameters@@SAPAV1@XZ
.text$mn:000099A4 ?getInstance@NppParameters@@SAPAV1@XZ proc near
.text$mn:000099A4                                         ; CODE XREF: WinMain(x,x,x,x):loc_23FDp
.text$mn:000099A4                                         ; WinMain(x,x,x,x)+4E9p
.text$mn:000099A4                 push    ebp
.text$mn:000099A5                 mov     ebp, esp
.text$mn:000099A7                 mov     eax, dword ptr ds:?_pSelf@NppParameters@@0PAV1@A ; NppParameters * NppParameters::_pSelf
.text$mn:000099AC                 pop     ebp
.text$mn:000099AD                 retn
.text$mn:000099AD ?getInstance@NppParameters@@SAPAV1@XZ endp
.text$mn:000099AD
.text$mn:000099AD ; ---------------------------------------------------------------------------
.text$mn:000099AE                 align 10h
.text$mn:000099AE _text$mn        ends
.text$mn:000099AE
.text$mn:000099B0 ; ===========================================================================
.text$mn:000099B0
.text$mn:000099B0 ; Segment type: Pure code
.text$mn:000099B0 ; Segment permissions: Read/Execute
.text$mn:000099B0 _text$mn        segment para public 'CODE' use32
.text$mn:000099B0                 assume cs:_text$mn
.text$mn:000099B0                 ;org 99B0h
.text$mn:000099B0 ; COMDAT (pick any)
.text$mn:000099B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000099B0
.text$mn:000099B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000099B0
.text$mn:000099B0 ; Attributes: bp-based frame
.text$mn:000099B0
.text$mn:000099B0 ; const struct NppGUI *__thiscall NppParameters::getNppGUI(NppParameters *__hidden this)
.text$mn:000099B0                 public ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ
.text$mn:000099B0 ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ proc near
.text$mn:000099B0                                         ; CODE XREF: WinMain(x,x,x,x)+3BBp
.text$mn:000099B0                                         ; WinMain(x,x,x,x)+72Ap
.text$mn:000099B0
.text$mn:000099B0 var_4           = dword ptr -4
.text$mn:000099B0
.text$mn:000099B0                 push    ebp
.text$mn:000099B1                 mov     ebp, esp
.text$mn:000099B3                 push    ecx
.text$mn:000099B4                 mov     [ebp+var_4], ecx
.text$mn:000099B7                 mov     eax, [ebp+var_4]
.text$mn:000099BA                 add     eax, 118h
.text$mn:000099BF                 mov     esp, ebp
.text$mn:000099C1                 pop     ebp
.text$mn:000099C2                 retn
.text$mn:000099C2 ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ endp
.text$mn:000099C2
.text$mn:000099C2 ; ---------------------------------------------------------------------------
.text$mn:000099C3                 align 4
.text$mn:000099C3 _text$mn        ends
.text$mn:000099C3
.text$mn:000099C4 ; ===========================================================================
.text$mn:000099C4
.text$mn:000099C4 ; Segment type: Pure code
.text$mn:000099C4 ; Segment permissions: Read/Execute
.text$mn:000099C4 _text$mn        segment para public 'CODE' use32
.text$mn:000099C4                 assume cs:_text$mn
.text$mn:000099C4                 ;org 99C4h
.text$mn:000099C4 ; COMDAT (pick any)
.text$mn:000099C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000099C4
.text$mn:000099C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000099C4
.text$mn:000099C4 ; Attributes: bp-based frame
.text$mn:000099C4
.text$mn:000099C4 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __thiscall NppParameters::getNppPath(void)const
.text$mn:000099C4                 public ?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.text$mn:000099C4 ?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ proc near
.text$mn:000099C4                                         ; CODE XREF: WinMain(x,x,x,x)+4F0p
.text$mn:000099C4                                         ; WinMain(x,x,x,x)+742p
.text$mn:000099C4
.text$mn:000099C4 var_14          = dword ptr -14h
.text$mn:000099C4 var_10          = dword ptr -10h
.text$mn:000099C4 var_C           = dword ptr -0Ch
.text$mn:000099C4 var_4           = dword ptr -4
.text$mn:000099C4 arg_0           = dword ptr  8
.text$mn:000099C4
.text$mn:000099C4                 push    ebp
.text$mn:000099C5                 mov     ebp, esp
.text$mn:000099C7                 push    0FFFFFFFFh
.text$mn:000099C9                 push    offset __ehhandler$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.text$mn:000099CE                 mov     eax, large fs:0
.text$mn:000099D4                 push    eax
.text$mn:000099D5                 sub     esp, 8
.text$mn:000099D8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000099DD                 xor     eax, ebp
.text$mn:000099DF                 push    eax
.text$mn:000099E0                 lea     eax, [ebp+var_C]
.text$mn:000099E3                 mov     large fs:0, eax
.text$mn:000099E9                 mov     [ebp+var_14], ecx
.text$mn:000099EC                 mov     [ebp+var_10], 0
.text$mn:000099F3                 mov     eax, [ebp+var_14]
.text$mn:000099F6                 add     eax, 1CAC0h
.text$mn:000099FB                 push    eax
.text$mn:000099FC                 mov     ecx, [ebp+arg_0]
.text$mn:000099FF                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00009A04                 mov     [ebp+var_4], 0
.text$mn:00009A0B                 mov     ecx, [ebp+var_10]
.text$mn:00009A0E                 or      ecx, 1
.text$mn:00009A11                 mov     [ebp+var_10], ecx
.text$mn:00009A14                 mov     eax, [ebp+arg_0]
.text$mn:00009A17                 mov     ecx, [ebp+var_C]
.text$mn:00009A1A                 mov     large fs:0, ecx
.text$mn:00009A21                 pop     ecx
.text$mn:00009A22                 mov     esp, ebp
.text$mn:00009A24                 pop     ebp
.text$mn:00009A25                 retn    4
.text$mn:00009A25 ?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ endp
.text$mn:00009A25
.text$mn:00009A25 _text$mn        ends
.text$mn:00009A25
.text$x:00009A28 ; ===========================================================================
.text$x:00009A28
.text$x:00009A28 ; Segment type: Pure code
.text$x:00009A28 ; Segment permissions: Read/Execute
.text$x:00009A28 _text$x         segment para public 'CODE' use32
.text$x:00009A28                 assume cs:_text$x
.text$x:00009A28                 ;org 9A28h
.text$x:00009A28 ; COMDAT (pick associative to section at 99C4)
.text$x:00009A28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009A28
.text$x:00009A28 ; =============== S U B R O U T I N E =======================================
.text$x:00009A28
.text$x:00009A28
.text$x:00009A28 __unwindfunclet$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0 proc near
.text$x:00009A28                                         ; DATA XREF: .xdata$x:0000B7ECo
.text$x:00009A28                 mov     eax, [ebp-10h]
.text$x:00009A2B                 and     eax, 1
.text$x:00009A2E                 jz      $LN4_1
.text$x:00009A34                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:00009A38                 mov     ecx, [ebp+8]
.text$x:00009A3B                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00009A40 ; ---------------------------------------------------------------------------
.text$x:00009A40
.text$x:00009A40 $LN4_1:                                 ; CODE XREF: __unwindfunclet$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0+6j
.text$x:00009A40                 retn
.text$x:00009A40 __unwindfunclet$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0 endp
.text$x:00009A40
.text$x:00009A41
.text$x:00009A41 ; =============== S U B R O U T I N E =======================================
.text$x:00009A41
.text$x:00009A41
.text$x:00009A41 __ehhandler$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ proc near
.text$x:00009A41                                         ; DATA XREF: NppParameters::getNppPath(void)+5o
.text$x:00009A41
.text$x:00009A41 arg_4           = dword ptr  8
.text$x:00009A41
.text$x:00009A41                 mov     edx, [esp+arg_4]
.text$x:00009A45                 lea     eax, [edx+0Ch]
.text$x:00009A48                 mov     ecx, [edx-0Ch]
.text$x:00009A4B                 xor     ecx, eax
.text$x:00009A4D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009A52                 mov     eax, offset __ehfuncinfo$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.text$x:00009A57                 jmp     ___CxxFrameHandler3
.text$x:00009A57 __ehhandler$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ endp
.text$x:00009A57
.text$x:00009A57 _text$x         ends
.text$x:00009A57
.text$mn:00009A5C ; ===========================================================================
.text$mn:00009A5C
.text$mn:00009A5C ; Segment type: Pure code
.text$mn:00009A5C ; Segment permissions: Read/Execute
.text$mn:00009A5C _text$mn        segment para public 'CODE' use32
.text$mn:00009A5C                 assume cs:_text$mn
.text$mn:00009A5C                 ;org 9A5Ch
.text$mn:00009A5C ; COMDAT (pick any)
.text$mn:00009A5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009A5C
.text$mn:00009A5C ; =============== S U B R O U T I N E =======================================
.text$mn:00009A5C
.text$mn:00009A5C ; Attributes: bp-based frame
.text$mn:00009A5C
.text$mn:00009A5C ; int __thiscall Window::getWidth(Window *__hidden this)
.text$mn:00009A5C                 public ?getWidth@Window@@UBEHXZ
.text$mn:00009A5C ?getWidth@Window@@UBEHXZ proc near      ; DATA XREF: .rdata:0000C288o
.text$mn:00009A5C                                         ; .rdata:0000C2BCo
.text$mn:00009A5C
.text$mn:00009A5C var_18          = dword ptr -18h
.text$mn:00009A5C Rect            = tagRECT ptr -14h
.text$mn:00009A5C var_4           = dword ptr -4
.text$mn:00009A5C
.text$mn:00009A5C                 push    ebp
.text$mn:00009A5D                 mov     ebp, esp
.text$mn:00009A5F                 sub     esp, 18h
.text$mn:00009A62                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009A67                 xor     eax, ebp
.text$mn:00009A69                 mov     [ebp+var_4], eax
.text$mn:00009A6C                 mov     [ebp+var_18], ecx
.text$mn:00009A6F                 lea     eax, [ebp+Rect]
.text$mn:00009A72                 push    eax             ; lpRect
.text$mn:00009A73                 mov     ecx, [ebp+var_18]
.text$mn:00009A76                 mov     edx, [ecx+0Ch]
.text$mn:00009A79                 push    edx             ; hWnd
.text$mn:00009A7A                 call    dword ptr ds:__imp__GetClientRect@8 ; GetClientRect(x,x)
.text$mn:00009A80                 mov     eax, [ebp+Rect.right]
.text$mn:00009A83                 sub     eax, [ebp+Rect.left]
.text$mn:00009A86                 mov     ecx, [ebp+var_4]
.text$mn:00009A89                 xor     ecx, ebp
.text$mn:00009A8B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00009A90                 mov     esp, ebp
.text$mn:00009A92                 pop     ebp
.text$mn:00009A93                 retn
.text$mn:00009A93 ?getWidth@Window@@UBEHXZ endp
.text$mn:00009A93
.text$mn:00009A93 _text$mn        ends
.text$mn:00009A93
.text$mn:00009A94 ; ===========================================================================
.text$mn:00009A94
.text$mn:00009A94 ; Segment type: Pure code
.text$mn:00009A94 ; Segment permissions: Read/Execute
.text$mn:00009A94 _text$mn        segment para public 'CODE' use32
.text$mn:00009A94                 assume cs:_text$mn
.text$mn:00009A94                 ;org 9A94h
.text$mn:00009A94 ; COMDAT (pick any)
.text$mn:00009A94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009A94
.text$mn:00009A94 ; =============== S U B R O U T I N E =======================================
.text$mn:00009A94
.text$mn:00009A94 ; Attributes: bp-based frame
.text$mn:00009A94
.text$mn:00009A94 ; public: enum  winVer __thiscall NppParameters::getWinVersion(void)
.text$mn:00009A94                 public ?getWinVersion@NppParameters@@QAE?AW4winVer@@XZ
.text$mn:00009A94 ?getWinVersion@NppParameters@@QAE?AW4winVer@@XZ proc near
.text$mn:00009A94                                         ; CODE XREF: WinMain(x,x,x,x)+83Fp
.text$mn:00009A94                                         ; WinMain(x,x,x,x)+9CCp
.text$mn:00009A94
.text$mn:00009A94 var_4           = dword ptr -4
.text$mn:00009A94
.text$mn:00009A94                 push    ebp
.text$mn:00009A95                 mov     ebp, esp
.text$mn:00009A97                 push    ecx
.text$mn:00009A98                 mov     [ebp+var_4], ecx
.text$mn:00009A9B                 mov     eax, [ebp+var_4]
.text$mn:00009A9E                 mov     eax, [eax+1CC1Ch]
.text$mn:00009AA4                 mov     esp, ebp
.text$mn:00009AA6                 pop     ebp
.text$mn:00009AA7                 retn
.text$mn:00009AA7 ?getWinVersion@NppParameters@@QAE?AW4winVer@@XZ endp
.text$mn:00009AA7
.text$mn:00009AA7 _text$mn        ends
.text$mn:00009AA7
.text$mn:00009AA8 ; ===========================================================================
.text$mn:00009AA8
.text$mn:00009AA8 ; Segment type: Pure code
.text$mn:00009AA8 ; Segment permissions: Read/Execute
.text$mn:00009AA8 _text$mn        segment para public 'CODE' use32
.text$mn:00009AA8                 assume cs:_text$mn
.text$mn:00009AA8                 ;org 9AA8h
.text$mn:00009AA8 ; COMDAT (pick any)
.text$mn:00009AA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009AA8
.text$mn:00009AA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00009AA8
.text$mn:00009AA8 ; Attributes: bp-based frame
.text$mn:00009AA8
.text$mn:00009AA8 ; void __thiscall Window::getWindowRect(Window *this, struct tagRECT *)
.text$mn:00009AA8                 public ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z
.text$mn:00009AA8 ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z proc near
.text$mn:00009AA8                                         ; DATA XREF: .rdata:0000C284o
.text$mn:00009AA8                                         ; .rdata:0000C2B8o
.text$mn:00009AA8
.text$mn:00009AA8 var_4           = dword ptr -4
.text$mn:00009AA8 lpRect          = dword ptr  8
.text$mn:00009AA8
.text$mn:00009AA8                 push    ebp
.text$mn:00009AA9                 mov     ebp, esp
.text$mn:00009AAB                 push    ecx
.text$mn:00009AAC                 mov     [ebp+var_4], ecx
.text$mn:00009AAF                 mov     eax, [ebp+lpRect]
.text$mn:00009AB2                 push    eax             ; lpRect
.text$mn:00009AB3                 mov     ecx, [ebp+var_4]
.text$mn:00009AB6                 mov     edx, [ecx+0Ch]
.text$mn:00009AB9                 push    edx             ; hWnd
.text$mn:00009ABA                 call    dword ptr ds:__imp__GetWindowRect@8 ; GetWindowRect(x,x)
.text$mn:00009AC0                 mov     esp, ebp
.text$mn:00009AC2                 pop     ebp
.text$mn:00009AC3                 retn    4
.text$mn:00009AC3 ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z endp
.text$mn:00009AC3
.text$mn:00009AC3 ; ---------------------------------------------------------------------------
.text$mn:00009AC6                 align 4
.text$mn:00009AC6 _text$mn        ends
.text$mn:00009AC6
.text$mn:00009AC8 ; ===========================================================================
.text$mn:00009AC8
.text$mn:00009AC8 ; Segment type: Pure code
.text$mn:00009AC8 ; Segment permissions: Read/Execute
.text$mn:00009AC8 _text$mn        segment para public 'CODE' use32
.text$mn:00009AC8                 assume cs:_text$mn
.text$mn:00009AC8                 ;org 9AC8h
.text$mn:00009AC8 ; COMDAT (pick any)
.text$mn:00009AC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009AC8
.text$mn:00009AC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00009AC8
.text$mn:00009AC8 ; Attributes: bp-based frame
.text$mn:00009AC8
.text$mn:00009AC8 ; struct _EXCEPTION_POINTERS *__thiscall Win32Exception::info(Win32Exception *__hidden this)
.text$mn:00009AC8                 public ?info@Win32Exception@@QBEPAU_EXCEPTION_POINTERS@@XZ
.text$mn:00009AC8 ?info@Win32Exception@@QBEPAU_EXCEPTION_POINTERS@@XZ proc near
.text$mn:00009AC8                                         ; CODE XREF: __catch$_WinMain@16$2+61p
.text$mn:00009AC8
.text$mn:00009AC8 var_4           = dword ptr -4
.text$mn:00009AC8
.text$mn:00009AC8                 push    ebp
.text$mn:00009AC9                 mov     ebp, esp
.text$mn:00009ACB                 push    ecx
.text$mn:00009ACC                 mov     [ebp+var_4], ecx
.text$mn:00009ACF                 mov     eax, [ebp+var_4]
.text$mn:00009AD2                 mov     eax, [eax+18h]
.text$mn:00009AD5                 mov     esp, ebp
.text$mn:00009AD7                 pop     ebp
.text$mn:00009AD8                 retn
.text$mn:00009AD8 ?info@Win32Exception@@QBEPAU_EXCEPTION_POINTERS@@XZ endp
.text$mn:00009AD8
.text$mn:00009AD8 ; ---------------------------------------------------------------------------
.text$mn:00009AD9                 align 4
.text$mn:00009AD9 _text$mn        ends
.text$mn:00009AD9
.text$mn:00009ADC ; ===========================================================================
.text$mn:00009ADC
.text$mn:00009ADC ; Segment type: Pure code
.text$mn:00009ADC ; Segment permissions: Read/Execute
.text$mn:00009ADC _text$mn        segment para public 'CODE' use32
.text$mn:00009ADC                 assume cs:_text$mn
.text$mn:00009ADC                 ;org 9ADCh
.text$mn:00009ADC ; COMDAT (pick any)
.text$mn:00009ADC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009ADC
.text$mn:00009ADC ; =============== S U B R O U T I N E =======================================
.text$mn:00009ADC
.text$mn:00009ADC ; Attributes: bp-based frame
.text$mn:00009ADC
.text$mn:00009ADC ; void __thiscall Window::init(Window *this, HINSTANCE, HWND)
.text$mn:00009ADC                 public ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z
.text$mn:00009ADC ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z proc near
.text$mn:00009ADC                                         ; DATA XREF: .rdata:0000C268o
.text$mn:00009ADC                                         ; .rdata:0000C29Co
.text$mn:00009ADC
.text$mn:00009ADC var_4           = dword ptr -4
.text$mn:00009ADC arg_0           = dword ptr  8
.text$mn:00009ADC arg_4           = dword ptr  0Ch
.text$mn:00009ADC
.text$mn:00009ADC                 push    ebp
.text$mn:00009ADD                 mov     ebp, esp
.text$mn:00009ADF                 push    ecx
.text$mn:00009AE0                 mov     [ebp+var_4], ecx
.text$mn:00009AE3                 mov     eax, [ebp+var_4]
.text$mn:00009AE6                 mov     ecx, [ebp+arg_0]
.text$mn:00009AE9                 mov     [eax+4], ecx
.text$mn:00009AEC                 mov     edx, [ebp+var_4]
.text$mn:00009AEF                 mov     eax, [ebp+arg_4]
.text$mn:00009AF2                 mov     [edx+8], eax
.text$mn:00009AF5                 mov     esp, ebp
.text$mn:00009AF7                 pop     ebp
.text$mn:00009AF8                 retn    8
.text$mn:00009AF8 ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z endp
.text$mn:00009AF8
.text$mn:00009AF8 ; ---------------------------------------------------------------------------
.text$mn:00009AFB                 align 4
.text$mn:00009AFB _text$mn        ends
.text$mn:00009AFB
.text$mn:00009AFC ; ===========================================================================
.text$mn:00009AFC
.text$mn:00009AFC ; Segment type: Pure code
.text$mn:00009AFC ; Segment permissions: Read/Execute
.text$mn:00009AFC _text$mn        segment para public 'CODE' use32
.text$mn:00009AFC                 assume cs:_text$mn
.text$mn:00009AFC                 ;org 9AFCh
.text$mn:00009AFC ; COMDAT (pick any)
.text$mn:00009AFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009AFC
.text$mn:00009AFC ; =============== S U B R O U T I N E =======================================
.text$mn:00009AFC
.text$mn:00009AFC ; Attributes: bp-based frame
.text$mn:00009AFC
.text$mn:00009AFC ; bool __thiscall Window::isVisible(Window *__hidden this)
.text$mn:00009AFC                 public ?isVisible@Window@@UBE_NXZ
.text$mn:00009AFC ?isVisible@Window@@UBE_NXZ proc near    ; DATA XREF: .rdata:0000C290o
.text$mn:00009AFC                                         ; .rdata:0000C2C4o
.text$mn:00009AFC
.text$mn:00009AFC var_8           = dword ptr -8
.text$mn:00009AFC var_1           = byte ptr -1
.text$mn:00009AFC
.text$mn:00009AFC                 push    ebp
.text$mn:00009AFD                 mov     ebp, esp
.text$mn:00009AFF                 sub     esp, 8
.text$mn:00009B02                 mov     [ebp+var_8], ecx
.text$mn:00009B05                 mov     eax, [ebp+var_8]
.text$mn:00009B08                 mov     ecx, [eax+0Ch]
.text$mn:00009B0B                 push    ecx             ; hWnd
.text$mn:00009B0C                 call    dword ptr ds:__imp__IsWindowVisible@4 ; IsWindowVisible(x)
.text$mn:00009B12                 test    eax, eax
.text$mn:00009B14                 jz      short loc_9B1C
.text$mn:00009B16                 mov     [ebp+var_1], 1
.text$mn:00009B1A                 jmp     short loc_9B20
.text$mn:00009B1C ; ---------------------------------------------------------------------------
.text$mn:00009B1C
.text$mn:00009B1C loc_9B1C:                               ; CODE XREF: Window::isVisible(void)+18j
.text$mn:00009B1C                 mov     [ebp+var_1], 0
.text$mn:00009B20
.text$mn:00009B20 loc_9B20:                               ; CODE XREF: Window::isVisible(void)+1Ej
.text$mn:00009B20                 mov     al, [ebp+var_1]
.text$mn:00009B23                 mov     esp, ebp
.text$mn:00009B25                 pop     ebp
.text$mn:00009B26                 retn
.text$mn:00009B26 ?isVisible@Window@@UBE_NXZ endp
.text$mn:00009B26
.text$mn:00009B26 ; ---------------------------------------------------------------------------
.text$mn:00009B27                 align 4
.text$mn:00009B27 _text$mn        ends
.text$mn:00009B27
.text$mn:00009B28 ; ===========================================================================
.text$mn:00009B28
.text$mn:00009B28 ; Segment type: Pure code
.text$mn:00009B28 ; Segment permissions: Read/Execute
.text$mn:00009B28 _text$mn        segment para public 'CODE' use32
.text$mn:00009B28                 assume cs:_text$mn
.text$mn:00009B28                 ;org 9B28h
.text$mn:00009B28 ; COMDAT (pick any)
.text$mn:00009B28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009B28
.text$mn:00009B28 ; =============== S U B R O U T I N E =======================================
.text$mn:00009B28
.text$mn:00009B28 ; Attributes: bp-based frame
.text$mn:00009B28
.text$mn:00009B28 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::length(void)const
.text$mn:00009B28                 public ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:00009B28 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:00009B28                                         ; CODE XREF: WinMain(x,x,x,x)+68Dp
.text$mn:00009B28                                         ; getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &)+188p ...
.text$mn:00009B28
.text$mn:00009B28 var_4           = dword ptr -4
.text$mn:00009B28
.text$mn:00009B28                 push    ebp
.text$mn:00009B29                 mov     ebp, esp
.text$mn:00009B2B                 push    ecx
.text$mn:00009B2C                 mov     [ebp+var_4], ecx
.text$mn:00009B2F                 mov     eax, [ebp+var_4]
.text$mn:00009B32                 mov     eax, [eax+14h]
.text$mn:00009B35                 mov     esp, ebp
.text$mn:00009B37                 pop     ebp
.text$mn:00009B38                 retn
.text$mn:00009B38 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:00009B38
.text$mn:00009B38 ; ---------------------------------------------------------------------------
.text$mn:00009B39                 align 4
.text$mn:00009B39 _text$mn        ends
.text$mn:00009B39
.text$mn:00009B3C ; ===========================================================================
.text$mn:00009B3C
.text$mn:00009B3C ; Segment type: Pure code
.text$mn:00009B3C ; Segment permissions: Read/Execute
.text$mn:00009B3C _text$mn        segment para public 'CODE' use32
.text$mn:00009B3C                 assume cs:_text$mn
.text$mn:00009B3C                 ;org 9B3Ch
.text$mn:00009B3C ; COMDAT (pick any)
.text$mn:00009B3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009B3C
.text$mn:00009B3C ; =============== S U B R O U T I N E =======================================
.text$mn:00009B3C
.text$mn:00009B3C ; Attributes: bp-based frame
.text$mn:00009B3C
.text$mn:00009B3C ; int __cdecl std::char_traits<char>::length(char *Str)
.text$mn:00009B3C                 public ?length@?$char_traits@D@std@@SAIPBD@Z
.text$mn:00009B3C ?length@?$char_traits@D@std@@SAIPBD@Z proc near
.text$mn:00009B3C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+21p
.text$mn:00009B3C
.text$mn:00009B3C var_4           = dword ptr -4
.text$mn:00009B3C Str             = dword ptr  8
.text$mn:00009B3C
.text$mn:00009B3C                 push    ebp
.text$mn:00009B3D                 mov     ebp, esp
.text$mn:00009B3F                 push    ecx
.text$mn:00009B40                 mov     eax, [ebp+Str]
.text$mn:00009B43                 movsx   ecx, byte ptr [eax]
.text$mn:00009B46                 test    ecx, ecx
.text$mn:00009B48                 jnz     short loc_9B53
.text$mn:00009B4A                 mov     [ebp+var_4], 0
.text$mn:00009B51                 jmp     short loc_9B62
.text$mn:00009B53 ; ---------------------------------------------------------------------------
.text$mn:00009B53
.text$mn:00009B53 loc_9B53:                               ; CODE XREF: std::char_traits<char>::length(char const *)+Cj
.text$mn:00009B53                 mov     edx, [ebp+Str]
.text$mn:00009B56                 push    edx             ; Str
.text$mn:00009B57                 call    _strlen
.text$mn:00009B5C                 add     esp, 4
.text$mn:00009B5F                 mov     [ebp+var_4], eax
.text$mn:00009B62
.text$mn:00009B62 loc_9B62:                               ; CODE XREF: std::char_traits<char>::length(char const *)+15j
.text$mn:00009B62                 mov     eax, [ebp+var_4]
.text$mn:00009B65                 mov     esp, ebp
.text$mn:00009B67                 pop     ebp
.text$mn:00009B68                 retn
.text$mn:00009B68 ?length@?$char_traits@D@std@@SAIPBD@Z endp
.text$mn:00009B68
.text$mn:00009B68 ; ---------------------------------------------------------------------------
.text$mn:00009B69                 align 4
.text$mn:00009B69 _text$mn        ends
.text$mn:00009B69
.text$mn:00009B6C ; ===========================================================================
.text$mn:00009B6C
.text$mn:00009B6C ; Segment type: Pure code
.text$mn:00009B6C ; Segment permissions: Read/Execute
.text$mn:00009B6C _text$mn        segment para public 'CODE' use32
.text$mn:00009B6C                 assume cs:_text$mn
.text$mn:00009B6C                 ;org 9B6Ch
.text$mn:00009B6C ; COMDAT (pick any)
.text$mn:00009B6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009B6C
.text$mn:00009B6C ; =============== S U B R O U T I N E =======================================
.text$mn:00009B6C
.text$mn:00009B6C ; Attributes: bp-based frame
.text$mn:00009B6C
.text$mn:00009B6C ; int __cdecl std::char_traits<wchar_t>::length(wchar_t *Str)
.text$mn:00009B6C                 public ?length@?$char_traits@_W@std@@SAIPB_W@Z
.text$mn:00009B6C ?length@?$char_traits@_W@std@@SAIPB_W@Z proc near
.text$mn:00009B6C                                         ; CODE XREF: std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+4Dp
.text$mn:00009B6C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+21p ...
.text$mn:00009B6C
.text$mn:00009B6C var_4           = dword ptr -4
.text$mn:00009B6C Str             = dword ptr  8
.text$mn:00009B6C
.text$mn:00009B6C                 push    ebp
.text$mn:00009B6D                 mov     ebp, esp
.text$mn:00009B6F                 push    ecx
.text$mn:00009B70                 mov     eax, [ebp+Str]
.text$mn:00009B73                 movzx   ecx, word ptr [eax]
.text$mn:00009B76                 test    ecx, ecx
.text$mn:00009B78                 jnz     short loc_9B83
.text$mn:00009B7A                 mov     [ebp+var_4], 0
.text$mn:00009B81                 jmp     short loc_9B92
.text$mn:00009B83 ; ---------------------------------------------------------------------------
.text$mn:00009B83
.text$mn:00009B83 loc_9B83:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+Cj
.text$mn:00009B83                 mov     edx, [ebp+Str]
.text$mn:00009B86                 push    edx             ; Str
.text$mn:00009B87                 call    _wcslen
.text$mn:00009B8C                 add     esp, 4
.text$mn:00009B8F                 mov     [ebp+var_4], eax
.text$mn:00009B92
.text$mn:00009B92 loc_9B92:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+15j
.text$mn:00009B92                 mov     eax, [ebp+var_4]
.text$mn:00009B95                 mov     esp, ebp
.text$mn:00009B97                 pop     ebp
.text$mn:00009B98                 retn
.text$mn:00009B98 ?length@?$char_traits@_W@std@@SAIPB_W@Z endp
.text$mn:00009B98
.text$mn:00009B98 ; ---------------------------------------------------------------------------
.text$mn:00009B99                 align 4
.text$mn:00009B99 _text$mn        ends
.text$mn:00009B99
.text$mn:00009B9C ; ===========================================================================
.text$mn:00009B9C
.text$mn:00009B9C ; Segment type: Pure code
.text$mn:00009B9C ; Segment permissions: Read/Execute
.text$mn:00009B9C _text$mn        segment para public 'CODE' use32
.text$mn:00009B9C                 assume cs:_text$mn
.text$mn:00009B9C                 ;org 9B9Ch
.text$mn:00009B9C ; COMDAT (pick any)
.text$mn:00009B9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009B9C
.text$mn:00009B9C ; =============== S U B R O U T I N E =======================================
.text$mn:00009B9C
.text$mn:00009B9C ; Attributes: bp-based frame
.text$mn:00009B9C
.text$mn:00009B9C ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<char>>::max_size(void)const
.text$mn:00009B9C                 public ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
.text$mn:00009B9C ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
.text$mn:00009B9C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+17p
.text$mn:00009B9C
.text$mn:00009B9C var_4           = dword ptr -4
.text$mn:00009B9C
.text$mn:00009B9C                 push    ebp
.text$mn:00009B9D                 mov     ebp, esp
.text$mn:00009B9F                 push    ecx
.text$mn:00009BA0                 mov     [ebp+var_4], ecx
.text$mn:00009BA3                 mov     eax, [ebp+var_4]
.text$mn:00009BA6                 push    eax
.text$mn:00009BA7                 call    ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)
.text$mn:00009BAC                 add     esp, 4
.text$mn:00009BAF                 mov     esp, ebp
.text$mn:00009BB1                 pop     ebp
.text$mn:00009BB2                 retn
.text$mn:00009BB2 ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ endp
.text$mn:00009BB2
.text$mn:00009BB2 ; ---------------------------------------------------------------------------
.text$mn:00009BB3                 align 4
.text$mn:00009BB3 _text$mn        ends
.text$mn:00009BB3
.text$mn:00009BB4 ; ===========================================================================
.text$mn:00009BB4
.text$mn:00009BB4 ; Segment type: Pure code
.text$mn:00009BB4 ; Segment permissions: Read/Execute
.text$mn:00009BB4 _text$mn        segment para public 'CODE' use32
.text$mn:00009BB4                 assume cs:_text$mn
.text$mn:00009BB4                 ;org 9BB4h
.text$mn:00009BB4 ; COMDAT (pick any)
.text$mn:00009BB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009BB4
.text$mn:00009BB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00009BB4
.text$mn:00009BB4 ; Attributes: bp-based frame
.text$mn:00009BB4
.text$mn:00009BB4 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<wchar_t const *>>::max_size(void)const
.text$mn:00009BB4                 public ?max_size@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QBEIXZ
.text$mn:00009BB4 ?max_size@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QBEIXZ proc near
.text$mn:00009BB4                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::max_size(void)+17p
.text$mn:00009BB4
.text$mn:00009BB4 var_4           = dword ptr -4
.text$mn:00009BB4
.text$mn:00009BB4                 push    ebp
.text$mn:00009BB5                 mov     ebp, esp
.text$mn:00009BB7                 push    ecx
.text$mn:00009BB8                 mov     [ebp+var_4], ecx
.text$mn:00009BBB                 mov     eax, [ebp+var_4]
.text$mn:00009BBE                 push    eax
.text$mn:00009BBF                 call    ?max_size@?$allocator_traits@V?$allocator@PB_W@std@@@std@@SAIABV?$allocator@PB_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t const *>>::max_size(std::allocator<wchar_t const *> const &)
.text$mn:00009BC4                 add     esp, 4
.text$mn:00009BC7                 mov     esp, ebp
.text$mn:00009BC9                 pop     ebp
.text$mn:00009BCA                 retn
.text$mn:00009BCA ?max_size@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QBEIXZ endp
.text$mn:00009BCA
.text$mn:00009BCA ; ---------------------------------------------------------------------------
.text$mn:00009BCB                 align 4
.text$mn:00009BCB _text$mn        ends
.text$mn:00009BCB
.text$mn:00009BCC ; ===========================================================================
.text$mn:00009BCC
.text$mn:00009BCC ; Segment type: Pure code
.text$mn:00009BCC ; Segment permissions: Read/Execute
.text$mn:00009BCC _text$mn        segment para public 'CODE' use32
.text$mn:00009BCC                 assume cs:_text$mn
.text$mn:00009BCC                 ;org 9BCCh
.text$mn:00009BCC ; COMDAT (pick any)
.text$mn:00009BCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009BCC
.text$mn:00009BCC ; =============== S U B R O U T I N E =======================================
.text$mn:00009BCC
.text$mn:00009BCC ; Attributes: bp-based frame
.text$mn:00009BCC
.text$mn:00009BCC ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::max_size(void)const
.text$mn:00009BCC                 public ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ
.text$mn:00009BCC ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ proc near
.text$mn:00009BCC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+17p
.text$mn:00009BCC
.text$mn:00009BCC var_4           = dword ptr -4
.text$mn:00009BCC
.text$mn:00009BCC                 push    ebp
.text$mn:00009BCD                 mov     ebp, esp
.text$mn:00009BCF                 push    ecx
.text$mn:00009BD0                 mov     [ebp+var_4], ecx
.text$mn:00009BD3                 mov     eax, [ebp+var_4]
.text$mn:00009BD6                 push    eax
.text$mn:00009BD7                 call    ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)
.text$mn:00009BDC                 add     esp, 4
.text$mn:00009BDF                 mov     esp, ebp
.text$mn:00009BE1                 pop     ebp
.text$mn:00009BE2                 retn
.text$mn:00009BE2 ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ endp
.text$mn:00009BE2
.text$mn:00009BE2 ; ---------------------------------------------------------------------------
.text$mn:00009BE3                 align 4
.text$mn:00009BE3 _text$mn        ends
.text$mn:00009BE3
.text$mn:00009BE4 ; ===========================================================================
.text$mn:00009BE4
.text$mn:00009BE4 ; Segment type: Pure code
.text$mn:00009BE4 ; Segment permissions: Read/Execute
.text$mn:00009BE4 _text$mn        segment para public 'CODE' use32
.text$mn:00009BE4                 assume cs:_text$mn
.text$mn:00009BE4                 ;org 9BE4h
.text$mn:00009BE4 ; COMDAT (pick any)
.text$mn:00009BE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009BE4
.text$mn:00009BE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00009BE4
.text$mn:00009BE4 ; Attributes: bp-based frame
.text$mn:00009BE4
.text$mn:00009BE4 ; public: unsigned int __thiscall std::allocator<char>::max_size(void)const
.text$mn:00009BE4                 public ?max_size@?$allocator@D@std@@QBEIXZ
.text$mn:00009BE4 ?max_size@?$allocator@D@std@@QBEIXZ proc near
.text$mn:00009BE4                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)+6p
.text$mn:00009BE4
.text$mn:00009BE4 var_4           = dword ptr -4
.text$mn:00009BE4
.text$mn:00009BE4                 push    ebp
.text$mn:00009BE5                 mov     ebp, esp
.text$mn:00009BE7                 push    ecx
.text$mn:00009BE8                 mov     [ebp+var_4], ecx
.text$mn:00009BEB                 or      eax, 0FFFFFFFFh
.text$mn:00009BEE                 mov     esp, ebp
.text$mn:00009BF0                 pop     ebp
.text$mn:00009BF1                 retn
.text$mn:00009BF1 ?max_size@?$allocator@D@std@@QBEIXZ endp
.text$mn:00009BF1
.text$mn:00009BF1 ; ---------------------------------------------------------------------------
.text$mn:00009BF2                 align 4
.text$mn:00009BF2 _text$mn        ends
.text$mn:00009BF2
.text$mn:00009BF4 ; ===========================================================================
.text$mn:00009BF4
.text$mn:00009BF4 ; Segment type: Pure code
.text$mn:00009BF4 ; Segment permissions: Read/Execute
.text$mn:00009BF4 _text$mn        segment para public 'CODE' use32
.text$mn:00009BF4                 assume cs:_text$mn
.text$mn:00009BF4                 ;org 9BF4h
.text$mn:00009BF4 ; COMDAT (pick any)
.text$mn:00009BF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009BF4
.text$mn:00009BF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00009BF4
.text$mn:00009BF4 ; Attributes: bp-based frame
.text$mn:00009BF4
.text$mn:00009BF4 ; public: unsigned int __thiscall std::allocator<wchar_t const *>::max_size(void)const
.text$mn:00009BF4                 public ?max_size@?$allocator@PB_W@std@@QBEIXZ
.text$mn:00009BF4 ?max_size@?$allocator@PB_W@std@@QBEIXZ proc near
.text$mn:00009BF4                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t const *>>::max_size(std::allocator<wchar_t const *> const &)+6p
.text$mn:00009BF4
.text$mn:00009BF4 var_4           = dword ptr -4
.text$mn:00009BF4
.text$mn:00009BF4                 push    ebp
.text$mn:00009BF5                 mov     ebp, esp
.text$mn:00009BF7                 push    ecx
.text$mn:00009BF8                 mov     [ebp+var_4], ecx
.text$mn:00009BFB                 mov     eax, 3FFFFFFFh
.text$mn:00009C00                 mov     esp, ebp
.text$mn:00009C02                 pop     ebp
.text$mn:00009C03                 retn
.text$mn:00009C03 ?max_size@?$allocator@PB_W@std@@QBEIXZ endp
.text$mn:00009C03
.text$mn:00009C03 _text$mn        ends
.text$mn:00009C03
.text$mn:00009C04 ; ===========================================================================
.text$mn:00009C04
.text$mn:00009C04 ; Segment type: Pure code
.text$mn:00009C04 ; Segment permissions: Read/Execute
.text$mn:00009C04 _text$mn        segment para public 'CODE' use32
.text$mn:00009C04                 assume cs:_text$mn
.text$mn:00009C04                 ;org 9C04h
.text$mn:00009C04 ; COMDAT (pick any)
.text$mn:00009C04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009C04
.text$mn:00009C04 ; =============== S U B R O U T I N E =======================================
.text$mn:00009C04
.text$mn:00009C04 ; Attributes: bp-based frame
.text$mn:00009C04
.text$mn:00009C04 ; public: unsigned int __thiscall std::allocator<wchar_t>::max_size(void)const
.text$mn:00009C04                 public ?max_size@?$allocator@_W@std@@QBEIXZ
.text$mn:00009C04 ?max_size@?$allocator@_W@std@@QBEIXZ proc near
.text$mn:00009C04                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)+6p
.text$mn:00009C04
.text$mn:00009C04 var_4           = dword ptr -4
.text$mn:00009C04
.text$mn:00009C04                 push    ebp
.text$mn:00009C05                 mov     ebp, esp
.text$mn:00009C07                 push    ecx
.text$mn:00009C08                 mov     [ebp+var_4], ecx
.text$mn:00009C0B                 mov     eax, 7FFFFFFFh
.text$mn:00009C10                 mov     esp, ebp
.text$mn:00009C12                 pop     ebp
.text$mn:00009C13                 retn
.text$mn:00009C13 ?max_size@?$allocator@_W@std@@QBEIXZ endp
.text$mn:00009C13
.text$mn:00009C13 _text$mn        ends
.text$mn:00009C13
.text$mn:00009C14 ; ===========================================================================
.text$mn:00009C14
.text$mn:00009C14 ; Segment type: Pure code
.text$mn:00009C14 ; Segment permissions: Read/Execute
.text$mn:00009C14 _text$mn        segment para public 'CODE' use32
.text$mn:00009C14                 assume cs:_text$mn
.text$mn:00009C14                 ;org 9C14h
.text$mn:00009C14 ; COMDAT (pick any)
.text$mn:00009C14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009C14
.text$mn:00009C14 ; =============== S U B R O U T I N E =======================================
.text$mn:00009C14
.text$mn:00009C14 ; Attributes: bp-based frame
.text$mn:00009C14
.text$mn:00009C14 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<char>>::max_size(class std::allocator<char> const &)
.text$mn:00009C14                 public ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
.text$mn:00009C14 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z proc near
.text$mn:00009C14                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::max_size(void)+Bp
.text$mn:00009C14
.text$mn:00009C14 arg_0           = dword ptr  8
.text$mn:00009C14
.text$mn:00009C14                 push    ebp
.text$mn:00009C15                 mov     ebp, esp
.text$mn:00009C17                 mov     ecx, [ebp+arg_0]
.text$mn:00009C1A                 call    ?max_size@?$allocator@D@std@@QBEIXZ ; std::allocator<char>::max_size(void)
.text$mn:00009C1F                 pop     ebp
.text$mn:00009C20                 retn
.text$mn:00009C20 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z endp
.text$mn:00009C20
.text$mn:00009C20 ; ---------------------------------------------------------------------------
.text$mn:00009C21                 align 4
.text$mn:00009C21 _text$mn        ends
.text$mn:00009C21
.text$mn:00009C24 ; ===========================================================================
.text$mn:00009C24
.text$mn:00009C24 ; Segment type: Pure code
.text$mn:00009C24 ; Segment permissions: Read/Execute
.text$mn:00009C24 _text$mn        segment para public 'CODE' use32
.text$mn:00009C24                 assume cs:_text$mn
.text$mn:00009C24                 ;org 9C24h
.text$mn:00009C24 ; COMDAT (pick any)
.text$mn:00009C24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009C24
.text$mn:00009C24 ; =============== S U B R O U T I N E =======================================
.text$mn:00009C24
.text$mn:00009C24 ; Attributes: bp-based frame
.text$mn:00009C24
.text$mn:00009C24 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<wchar_t const *>>::max_size(class std::allocator<wchar_t const *> const &)
.text$mn:00009C24                 public ?max_size@?$allocator_traits@V?$allocator@PB_W@std@@@std@@SAIABV?$allocator@PB_W@2@@Z
.text$mn:00009C24 ?max_size@?$allocator_traits@V?$allocator@PB_W@std@@@std@@SAIABV?$allocator@PB_W@2@@Z proc near
.text$mn:00009C24                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t const *>>::max_size(void)+Bp
.text$mn:00009C24
.text$mn:00009C24 arg_0           = dword ptr  8
.text$mn:00009C24
.text$mn:00009C24                 push    ebp
.text$mn:00009C25                 mov     ebp, esp
.text$mn:00009C27                 mov     ecx, [ebp+arg_0]
.text$mn:00009C2A                 call    ?max_size@?$allocator@PB_W@std@@QBEIXZ ; std::allocator<wchar_t const *>::max_size(void)
.text$mn:00009C2F                 pop     ebp
.text$mn:00009C30                 retn
.text$mn:00009C30 ?max_size@?$allocator_traits@V?$allocator@PB_W@std@@@std@@SAIABV?$allocator@PB_W@2@@Z endp
.text$mn:00009C30
.text$mn:00009C30 ; ---------------------------------------------------------------------------
.text$mn:00009C31                 align 4
.text$mn:00009C31 _text$mn        ends
.text$mn:00009C31
.text$mn:00009C34 ; ===========================================================================
.text$mn:00009C34
.text$mn:00009C34 ; Segment type: Pure code
.text$mn:00009C34 ; Segment permissions: Read/Execute
.text$mn:00009C34 _text$mn        segment para public 'CODE' use32
.text$mn:00009C34                 assume cs:_text$mn
.text$mn:00009C34                 ;org 9C34h
.text$mn:00009C34 ; COMDAT (pick any)
.text$mn:00009C34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009C34
.text$mn:00009C34 ; =============== S U B R O U T I N E =======================================
.text$mn:00009C34
.text$mn:00009C34 ; Attributes: bp-based frame
.text$mn:00009C34
.text$mn:00009C34 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<wchar_t>>::max_size(class std::allocator<wchar_t> const &)
.text$mn:00009C34                 public ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
.text$mn:00009C34 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z proc near
.text$mn:00009C34                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)+Bp
.text$mn:00009C34
.text$mn:00009C34 arg_0           = dword ptr  8
.text$mn:00009C34
.text$mn:00009C34                 push    ebp
.text$mn:00009C35                 mov     ebp, esp
.text$mn:00009C37                 mov     ecx, [ebp+arg_0]
.text$mn:00009C3A                 call    ?max_size@?$allocator@_W@std@@QBEIXZ ; std::allocator<wchar_t>::max_size(void)
.text$mn:00009C3F                 pop     ebp
.text$mn:00009C40                 retn
.text$mn:00009C40 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z endp
.text$mn:00009C40
.text$mn:00009C40 ; ---------------------------------------------------------------------------
.text$mn:00009C41                 align 4
.text$mn:00009C41 _text$mn        ends
.text$mn:00009C41
.text$mn:00009C44 ; ===========================================================================
.text$mn:00009C44
.text$mn:00009C44 ; Segment type: Pure code
.text$mn:00009C44 ; Segment permissions: Read/Execute
.text$mn:00009C44 _text$mn        segment para public 'CODE' use32
.text$mn:00009C44                 assume cs:_text$mn
.text$mn:00009C44                 ;org 9C44h
.text$mn:00009C44 ; COMDAT (pick any)
.text$mn:00009C44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009C44
.text$mn:00009C44 ; =============== S U B R O U T I N E =======================================
.text$mn:00009C44
.text$mn:00009C44 ; Attributes: bp-based frame
.text$mn:00009C44
.text$mn:00009C44 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::max_size(void)const
.text$mn:00009C44                 public ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:00009C44 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:00009C44                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+3Bp
.text$mn:00009C44                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+6Ap ...
.text$mn:00009C44
.text$mn:00009C44 var_10          = dword ptr -10h
.text$mn:00009C44 var_C           = dword ptr -0Ch
.text$mn:00009C44 var_8           = dword ptr -8
.text$mn:00009C44 var_1           = byte ptr -1
.text$mn:00009C44
.text$mn:00009C44                 push    ebp
.text$mn:00009C45                 mov     ebp, esp
.text$mn:00009C47                 sub     esp, 10h
.text$mn:00009C4A                 mov     [ebp+var_10], ecx
.text$mn:00009C4D                 lea     eax, [ebp+var_1]
.text$mn:00009C50                 push    eax
.text$mn:00009C51                 mov     ecx, [ebp+var_10]
.text$mn:00009C54                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00009C59                 mov     ecx, eax
.text$mn:00009C5B                 call    ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char>>::max_size(void)
.text$mn:00009C60                 mov     [ebp+var_8], eax
.text$mn:00009C63                 cmp     [ebp+var_8], 1
.text$mn:00009C67                 ja      short loc_9C72
.text$mn:00009C69                 mov     [ebp+var_C], 1
.text$mn:00009C70                 jmp     short loc_9C7B
.text$mn:00009C72 ; ---------------------------------------------------------------------------
.text$mn:00009C72
.text$mn:00009C72 loc_9C72:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+23j
.text$mn:00009C72                 mov     ecx, [ebp+var_8]
.text$mn:00009C75                 sub     ecx, 1
.text$mn:00009C78                 mov     [ebp+var_C], ecx
.text$mn:00009C7B
.text$mn:00009C7B loc_9C7B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+2Cj
.text$mn:00009C7B                 mov     eax, [ebp+var_C]
.text$mn:00009C7E                 mov     esp, ebp
.text$mn:00009C80                 pop     ebp
.text$mn:00009C81                 retn
.text$mn:00009C81 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:00009C81
.text$mn:00009C81 ; ---------------------------------------------------------------------------
.text$mn:00009C82                 align 4
.text$mn:00009C82 _text$mn        ends
.text$mn:00009C82
.text$mn:00009C84 ; ===========================================================================
.text$mn:00009C84
.text$mn:00009C84 ; Segment type: Pure code
.text$mn:00009C84 ; Segment permissions: Read/Execute
.text$mn:00009C84 _text$mn        segment para public 'CODE' use32
.text$mn:00009C84                 assume cs:_text$mn
.text$mn:00009C84                 ;org 9C84h
.text$mn:00009C84 ; COMDAT (pick any)
.text$mn:00009C84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009C84
.text$mn:00009C84 ; =============== S U B R O U T I N E =======================================
.text$mn:00009C84
.text$mn:00009C84 ; Attributes: bp-based frame
.text$mn:00009C84
.text$mn:00009C84 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::max_size(void)const
.text$mn:00009C84                 public ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:00009C84 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:00009C84                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+3Bp
.text$mn:00009C84                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+6Ap ...
.text$mn:00009C84
.text$mn:00009C84 var_10          = dword ptr -10h
.text$mn:00009C84 var_C           = dword ptr -0Ch
.text$mn:00009C84 var_8           = dword ptr -8
.text$mn:00009C84 var_1           = byte ptr -1
.text$mn:00009C84
.text$mn:00009C84                 push    ebp
.text$mn:00009C85                 mov     ebp, esp
.text$mn:00009C87                 sub     esp, 10h
.text$mn:00009C8A                 mov     [ebp+var_10], ecx
.text$mn:00009C8D                 lea     eax, [ebp+var_1]
.text$mn:00009C90                 push    eax
.text$mn:00009C91                 mov     ecx, [ebp+var_10]
.text$mn:00009C94                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00009C99                 mov     ecx, eax
.text$mn:00009C9B                 call    ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)
.text$mn:00009CA0                 mov     [ebp+var_8], eax
.text$mn:00009CA3                 cmp     [ebp+var_8], 1
.text$mn:00009CA7                 ja      short loc_9CB2
.text$mn:00009CA9                 mov     [ebp+var_C], 1
.text$mn:00009CB0                 jmp     short loc_9CBB
.text$mn:00009CB2 ; ---------------------------------------------------------------------------
.text$mn:00009CB2
.text$mn:00009CB2 loc_9CB2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+23j
.text$mn:00009CB2                 mov     ecx, [ebp+var_8]
.text$mn:00009CB5                 sub     ecx, 1
.text$mn:00009CB8                 mov     [ebp+var_C], ecx
.text$mn:00009CBB
.text$mn:00009CBB loc_9CBB:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+2Cj
.text$mn:00009CBB                 mov     eax, [ebp+var_C]
.text$mn:00009CBE                 mov     esp, ebp
.text$mn:00009CC0                 pop     ebp
.text$mn:00009CC1                 retn
.text$mn:00009CC1 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:00009CC1
.text$mn:00009CC1 ; ---------------------------------------------------------------------------
.text$mn:00009CC2                 align 4
.text$mn:00009CC2 _text$mn        ends
.text$mn:00009CC2
.text$mn:00009CC4 ; ===========================================================================
.text$mn:00009CC4
.text$mn:00009CC4 ; Segment type: Pure code
.text$mn:00009CC4 ; Segment permissions: Read/Execute
.text$mn:00009CC4 _text$mn        segment para public 'CODE' use32
.text$mn:00009CC4                 assume cs:_text$mn
.text$mn:00009CC4                 ;org 9CC4h
.text$mn:00009CC4 ; COMDAT (pick any)
.text$mn:00009CC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009CC4
.text$mn:00009CC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00009CC4
.text$mn:00009CC4 ; Attributes: bp-based frame
.text$mn:00009CC4
.text$mn:00009CC4 ; public: unsigned int __thiscall std::vector<wchar_t const *, class std::allocator<wchar_t const *>>::max_size(void)const
.text$mn:00009CC4                 public ?max_size@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ
.text$mn:00009CC4 ?max_size@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ proc near
.text$mn:00009CC4                                         ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Grow_to(uint)+17p
.text$mn:00009CC4                                         ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Reserve(uint)+18p
.text$mn:00009CC4
.text$mn:00009CC4 var_8           = dword ptr -8
.text$mn:00009CC4 var_1           = byte ptr -1
.text$mn:00009CC4
.text$mn:00009CC4                 push    ebp
.text$mn:00009CC5                 mov     ebp, esp
.text$mn:00009CC7                 sub     esp, 8
.text$mn:00009CCA                 mov     [ebp+var_8], ecx
.text$mn:00009CCD                 lea     eax, [ebp+var_1]
.text$mn:00009CD0                 push    eax
.text$mn:00009CD1                 mov     ecx, [ebp+var_8]
.text$mn:00009CD4                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PB_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Getal(void)
.text$mn:00009CD9                 mov     ecx, eax
.text$mn:00009CDB                 call    ?max_size@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<wchar_t const *>>::max_size(void)
.text$mn:00009CE0                 mov     esp, ebp
.text$mn:00009CE2                 pop     ebp
.text$mn:00009CE3                 retn
.text$mn:00009CE3 ?max_size@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ endp
.text$mn:00009CE3
.text$mn:00009CE3 _text$mn        ends
.text$mn:00009CE3
.text$mn:00009CE4 ; ===========================================================================
.text$mn:00009CE4
.text$mn:00009CE4 ; Segment type: Pure code
.text$mn:00009CE4 ; Segment permissions: Read/Execute
.text$mn:00009CE4 _text$mn        segment para public 'CODE' use32
.text$mn:00009CE4                 assume cs:_text$mn
.text$mn:00009CE4                 ;org 9CE4h
.text$mn:00009CE4 ; COMDAT (pick any)
.text$mn:00009CE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009CE4
.text$mn:00009CE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00009CE4
.text$mn:00009CE4 ; Attributes: bp-based frame
.text$mn:00009CE4
.text$mn:00009CE4 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Generic_error_category::message(int)const
.text$mn:00009CE4                 public ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00009CE4 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:00009CE4                                         ; CODE XREF: std::_Iostream_error_category::message(int)+64p
.text$mn:00009CE4                                         ; DATA XREF: .rdata:0000C1B8o
.text$mn:00009CE4
.text$mn:00009CE4 var_1C          = dword ptr -1Ch
.text$mn:00009CE4 var_18          = dword ptr -18h
.text$mn:00009CE4 Str             = dword ptr -14h
.text$mn:00009CE4 var_10          = dword ptr -10h
.text$mn:00009CE4 var_C           = dword ptr -0Ch
.text$mn:00009CE4 var_4           = dword ptr -4
.text$mn:00009CE4 arg_0           = dword ptr  8
.text$mn:00009CE4 arg_4           = dword ptr  0Ch
.text$mn:00009CE4
.text$mn:00009CE4                 push    ebp
.text$mn:00009CE5                 mov     ebp, esp
.text$mn:00009CE7                 push    0FFFFFFFFh
.text$mn:00009CE9                 push    offset __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00009CEE                 mov     eax, large fs:0
.text$mn:00009CF4                 push    eax
.text$mn:00009CF5                 sub     esp, 10h
.text$mn:00009CF8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009CFD                 xor     eax, ebp
.text$mn:00009CFF                 push    eax
.text$mn:00009D00                 lea     eax, [ebp+var_C]
.text$mn:00009D03                 mov     large fs:0, eax
.text$mn:00009D09                 mov     [ebp+var_1C], ecx
.text$mn:00009D0C                 mov     [ebp+var_18], 0
.text$mn:00009D13                 mov     eax, [ebp+arg_4]
.text$mn:00009D16                 push    eax             ; int
.text$mn:00009D17                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:00009D1C                 add     esp, 4
.text$mn:00009D1F                 mov     [ebp+var_10], eax
.text$mn:00009D22                 cmp     [ebp+var_10], 0
.text$mn:00009D26                 jz      short loc_9D30
.text$mn:00009D28                 mov     ecx, [ebp+var_10]
.text$mn:00009D2B                 mov     [ebp+Str], ecx
.text$mn:00009D2E                 jmp     short loc_9D37
.text$mn:00009D30 ; ---------------------------------------------------------------------------
.text$mn:00009D30
.text$mn:00009D30 loc_9D30:                               ; CODE XREF: std::_Generic_error_category::message(int)+42j
.text$mn:00009D30                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:00009D37
.text$mn:00009D37 loc_9D37:                               ; CODE XREF: std::_Generic_error_category::message(int)+4Aj
.text$mn:00009D37                 mov     edx, [ebp+Str]
.text$mn:00009D3A                 push    edx             ; Str
.text$mn:00009D3B                 mov     ecx, [ebp+arg_0]
.text$mn:00009D3E                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00009D43                 mov     [ebp+var_4], 0
.text$mn:00009D4A                 mov     eax, [ebp+var_18]
.text$mn:00009D4D                 or      eax, 1
.text$mn:00009D50                 mov     [ebp+var_18], eax
.text$mn:00009D53                 mov     eax, [ebp+arg_0]
.text$mn:00009D56                 mov     ecx, [ebp+var_C]
.text$mn:00009D59                 mov     large fs:0, ecx
.text$mn:00009D60                 pop     ecx
.text$mn:00009D61                 mov     esp, ebp
.text$mn:00009D63                 pop     ebp
.text$mn:00009D64                 retn    8
.text$mn:00009D64 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:00009D64
.text$mn:00009D64 ; ---------------------------------------------------------------------------
.text$mn:00009D67                 align 4
.text$mn:00009D67 _text$mn        ends
.text$mn:00009D67
.text$x:00009D68 ; ===========================================================================
.text$x:00009D68
.text$x:00009D68 ; Segment type: Pure code
.text$x:00009D68 ; Segment permissions: Read/Execute
.text$x:00009D68 _text$x         segment para public 'CODE' use32
.text$x:00009D68                 assume cs:_text$x
.text$x:00009D68                 ;org 9D68h
.text$x:00009D68 ; COMDAT (pick associative to section at 9CE4)
.text$x:00009D68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009D68
.text$x:00009D68 ; =============== S U B R O U T I N E =======================================
.text$x:00009D68
.text$x:00009D68
.text$x:00009D68 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:00009D68                                         ; DATA XREF: .xdata$x:0000B2B8o
.text$x:00009D68                 mov     eax, [ebp-18h]
.text$x:00009D6B                 and     eax, 1
.text$x:00009D6E                 jz      $LN6
.text$x:00009D74                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:00009D78                 mov     ecx, [ebp+8]
.text$x:00009D7B                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00009D80 ; ---------------------------------------------------------------------------
.text$x:00009D80
.text$x:00009D80 $LN6:                                   ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:00009D80                 retn
.text$x:00009D80 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:00009D80
.text$x:00009D81
.text$x:00009D81 ; =============== S U B R O U T I N E =======================================
.text$x:00009D81
.text$x:00009D81
.text$x:00009D81 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:00009D81                                         ; DATA XREF: std::_Generic_error_category::message(int)+5o
.text$x:00009D81
.text$x:00009D81 arg_4           = dword ptr  8
.text$x:00009D81
.text$x:00009D81                 mov     edx, [esp+arg_4]
.text$x:00009D85                 lea     eax, [edx+0Ch]
.text$x:00009D88                 mov     ecx, [edx-14h]
.text$x:00009D8B                 xor     ecx, eax
.text$x:00009D8D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009D92                 mov     eax, offset __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:00009D97                 jmp     ___CxxFrameHandler3
.text$x:00009D97 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:00009D97
.text$x:00009D97 _text$x         ends
.text$x:00009D97
.text$mn:00009D9C ; ===========================================================================
.text$mn:00009D9C
.text$mn:00009D9C ; Segment type: Pure code
.text$mn:00009D9C ; Segment permissions: Read/Execute
.text$mn:00009D9C _text$mn        segment para public 'CODE' use32
.text$mn:00009D9C                 assume cs:_text$mn
.text$mn:00009D9C                 ;org 9D9Ch
.text$mn:00009D9C ; COMDAT (pick any)
.text$mn:00009D9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009D9C
.text$mn:00009D9C ; =============== S U B R O U T I N E =======================================
.text$mn:00009D9C
.text$mn:00009D9C ; Attributes: bp-based frame
.text$mn:00009D9C
.text$mn:00009D9C ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Iostream_error_category::message(int)const
.text$mn:00009D9C                 public ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00009D9C ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:00009D9C                                         ; DATA XREF: .rdata:0000C1ECo
.text$mn:00009D9C
.text$mn:00009D9C var_14          = dword ptr -14h
.text$mn:00009D9C var_10          = dword ptr -10h
.text$mn:00009D9C var_C           = dword ptr -0Ch
.text$mn:00009D9C var_4           = dword ptr -4
.text$mn:00009D9C arg_0           = dword ptr  8
.text$mn:00009D9C arg_4           = dword ptr  0Ch
.text$mn:00009D9C
.text$mn:00009D9C                 push    ebp
.text$mn:00009D9D                 mov     ebp, esp
.text$mn:00009D9F                 push    0FFFFFFFFh
.text$mn:00009DA1                 push    offset __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00009DA6                 mov     eax, large fs:0
.text$mn:00009DAC                 push    eax
.text$mn:00009DAD                 sub     esp, 8
.text$mn:00009DB0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009DB5                 xor     eax, ebp
.text$mn:00009DB7                 push    eax
.text$mn:00009DB8                 lea     eax, [ebp+var_C]
.text$mn:00009DBB                 mov     large fs:0, eax
.text$mn:00009DC1                 mov     [ebp+var_14], ecx
.text$mn:00009DC4                 mov     [ebp+var_10], 0
.text$mn:00009DCB                 cmp     [ebp+arg_4], 1
.text$mn:00009DCF                 jnz     short loc_9DF5
.text$mn:00009DD1                 push    offset ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ ; "iostream stream error"
.text$mn:00009DD6                 mov     ecx, [ebp+arg_0]
.text$mn:00009DD9                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00009DDE                 mov     [ebp+var_4], 0
.text$mn:00009DE5                 mov     eax, [ebp+var_10]
.text$mn:00009DE8                 or      eax, 1
.text$mn:00009DEB                 mov     [ebp+var_10], eax
.text$mn:00009DEE                 mov     eax, [ebp+arg_0]
.text$mn:00009DF1                 jmp     short loc_9E18
.text$mn:00009DF3 ; ---------------------------------------------------------------------------
.text$mn:00009DF3                 jmp     short loc_9E18
.text$mn:00009DF5 ; ---------------------------------------------------------------------------
.text$mn:00009DF5
.text$mn:00009DF5 loc_9DF5:                               ; CODE XREF: std::_Iostream_error_category::message(int)+33j
.text$mn:00009DF5                 mov     ecx, [ebp+arg_4]
.text$mn:00009DF8                 push    ecx
.text$mn:00009DF9                 mov     edx, [ebp+arg_0]
.text$mn:00009DFC                 push    edx
.text$mn:00009DFD                 mov     ecx, [ebp+var_14]
.text$mn:00009E00                 call    ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.text$mn:00009E05                 mov     [ebp+var_4], 0
.text$mn:00009E0C                 mov     eax, [ebp+var_10]
.text$mn:00009E0F                 or      eax, 1
.text$mn:00009E12                 mov     [ebp+var_10], eax
.text$mn:00009E15                 mov     eax, [ebp+arg_0]
.text$mn:00009E18
.text$mn:00009E18 loc_9E18:                               ; CODE XREF: std::_Iostream_error_category::message(int)+55j
.text$mn:00009E18                                         ; std::_Iostream_error_category::message(int)+57j
.text$mn:00009E18                 mov     ecx, [ebp+var_C]
.text$mn:00009E1B                 mov     large fs:0, ecx
.text$mn:00009E22                 pop     ecx
.text$mn:00009E23                 mov     esp, ebp
.text$mn:00009E25                 pop     ebp
.text$mn:00009E26                 retn    8
.text$mn:00009E26 ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:00009E26
.text$mn:00009E26 ; ---------------------------------------------------------------------------
.text$mn:00009E29                 align 4
.text$mn:00009E29 _text$mn        ends
.text$mn:00009E29
.text$x:00009E2C ; ===========================================================================
.text$x:00009E2C
.text$x:00009E2C ; Segment type: Pure code
.text$x:00009E2C ; Segment permissions: Read/Execute
.text$x:00009E2C _text$x         segment para public 'CODE' use32
.text$x:00009E2C                 assume cs:_text$x
.text$x:00009E2C                 ;org 9E2Ch
.text$x:00009E2C ; COMDAT (pick associative to section at 9D9C)
.text$x:00009E2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009E2C
.text$x:00009E2C ; =============== S U B R O U T I N E =======================================
.text$x:00009E2C
.text$x:00009E2C
.text$x:00009E2C __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:00009E2C                                         ; DATA XREF: .xdata$x:0000B33Co
.text$x:00009E2C                 mov     eax, [ebp-10h]
.text$x:00009E2F                 and     eax, 1
.text$x:00009E32                 jz      $LN6_0
.text$x:00009E38                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:00009E3C                 mov     ecx, [ebp+8]
.text$x:00009E3F                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00009E44 ; ---------------------------------------------------------------------------
.text$x:00009E44
.text$x:00009E44 $LN6_0:                                 ; CODE XREF: __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:00009E44                 retn
.text$x:00009E44 __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:00009E44
.text$x:00009E45
.text$x:00009E45 ; =============== S U B R O U T I N E =======================================
.text$x:00009E45
.text$x:00009E45
.text$x:00009E45 __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:00009E45                                         ; DATA XREF: std::_Iostream_error_category::message(int)+5o
.text$x:00009E45
.text$x:00009E45 arg_4           = dword ptr  8
.text$x:00009E45
.text$x:00009E45                 mov     edx, [esp+arg_4]
.text$x:00009E49                 lea     eax, [edx+0Ch]
.text$x:00009E4C                 mov     ecx, [edx-0Ch]
.text$x:00009E4F                 xor     ecx, eax
.text$x:00009E51                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009E56                 mov     eax, offset __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:00009E5B                 jmp     ___CxxFrameHandler3
.text$x:00009E5B __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:00009E5B
.text$x:00009E5B _text$x         ends
.text$x:00009E5B
.text$mn:00009E60 ; ===========================================================================
.text$mn:00009E60
.text$mn:00009E60 ; Segment type: Pure code
.text$mn:00009E60 ; Segment permissions: Read/Execute
.text$mn:00009E60 _text$mn        segment para public 'CODE' use32
.text$mn:00009E60                 assume cs:_text$mn
.text$mn:00009E60                 ;org 9E60h
.text$mn:00009E60 ; COMDAT (pick any)
.text$mn:00009E60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009E60
.text$mn:00009E60 ; =============== S U B R O U T I N E =======================================
.text$mn:00009E60
.text$mn:00009E60 ; Attributes: bp-based frame
.text$mn:00009E60
.text$mn:00009E60 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_System_error_category::message(int)const
.text$mn:00009E60                 public ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00009E60 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:00009E60                                         ; DATA XREF: .rdata:0000C22Co
.text$mn:00009E60
.text$mn:00009E60 var_1C          = dword ptr -1Ch
.text$mn:00009E60 var_18          = dword ptr -18h
.text$mn:00009E60 Str             = dword ptr -14h
.text$mn:00009E60 var_10          = dword ptr -10h
.text$mn:00009E60 var_C           = dword ptr -0Ch
.text$mn:00009E60 var_4           = dword ptr -4
.text$mn:00009E60 arg_0           = dword ptr  8
.text$mn:00009E60 arg_4           = dword ptr  0Ch
.text$mn:00009E60
.text$mn:00009E60                 push    ebp
.text$mn:00009E61                 mov     ebp, esp
.text$mn:00009E63                 push    0FFFFFFFFh
.text$mn:00009E65                 push    offset __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00009E6A                 mov     eax, large fs:0
.text$mn:00009E70                 push    eax
.text$mn:00009E71                 sub     esp, 10h
.text$mn:00009E74                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009E79                 xor     eax, ebp
.text$mn:00009E7B                 push    eax
.text$mn:00009E7C                 lea     eax, [ebp+var_C]
.text$mn:00009E7F                 mov     large fs:0, eax
.text$mn:00009E85                 mov     [ebp+var_1C], ecx
.text$mn:00009E88                 mov     [ebp+var_18], 0
.text$mn:00009E8F                 mov     eax, [ebp+arg_4]
.text$mn:00009E92                 push    eax             ; int
.text$mn:00009E93                 call    ?_Winerror_map@std@@YAPBDH@Z ; std::_Winerror_map(int)
.text$mn:00009E98                 add     esp, 4
.text$mn:00009E9B                 mov     [ebp+var_10], eax
.text$mn:00009E9E                 cmp     [ebp+var_10], 0
.text$mn:00009EA2                 jz      short loc_9EAC
.text$mn:00009EA4                 mov     ecx, [ebp+var_10]
.text$mn:00009EA7                 mov     [ebp+Str], ecx
.text$mn:00009EAA                 jmp     short loc_9EB3
.text$mn:00009EAC ; ---------------------------------------------------------------------------
.text$mn:00009EAC
.text$mn:00009EAC loc_9EAC:                               ; CODE XREF: std::_System_error_category::message(int)+42j
.text$mn:00009EAC                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:00009EB3
.text$mn:00009EB3 loc_9EB3:                               ; CODE XREF: std::_System_error_category::message(int)+4Aj
.text$mn:00009EB3                 mov     edx, [ebp+Str]
.text$mn:00009EB6                 push    edx             ; Str
.text$mn:00009EB7                 mov     ecx, [ebp+arg_0]
.text$mn:00009EBA                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00009EBF                 mov     [ebp+var_4], 0
.text$mn:00009EC6                 mov     eax, [ebp+var_18]
.text$mn:00009EC9                 or      eax, 1
.text$mn:00009ECC                 mov     [ebp+var_18], eax
.text$mn:00009ECF                 mov     eax, [ebp+arg_0]
.text$mn:00009ED2                 mov     ecx, [ebp+var_C]
.text$mn:00009ED5                 mov     large fs:0, ecx
.text$mn:00009EDC                 pop     ecx
.text$mn:00009EDD                 mov     esp, ebp
.text$mn:00009EDF                 pop     ebp
.text$mn:00009EE0                 retn    8
.text$mn:00009EE0 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:00009EE0
.text$mn:00009EE0 ; ---------------------------------------------------------------------------
.text$mn:00009EE3                 align 4
.text$mn:00009EE3 _text$mn        ends
.text$mn:00009EE3
.text$x:00009EE4 ; ===========================================================================
.text$x:00009EE4
.text$x:00009EE4 ; Segment type: Pure code
.text$x:00009EE4 ; Segment permissions: Read/Execute
.text$x:00009EE4 _text$x         segment para public 'CODE' use32
.text$x:00009EE4                 assume cs:_text$x
.text$x:00009EE4                 ;org 9EE4h
.text$x:00009EE4 ; COMDAT (pick associative to section at 9E60)
.text$x:00009EE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009EE4
.text$x:00009EE4 ; =============== S U B R O U T I N E =======================================
.text$x:00009EE4
.text$x:00009EE4
.text$x:00009EE4 __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:00009EE4                                         ; DATA XREF: .xdata$x:0000B3C0o
.text$x:00009EE4                 mov     eax, [ebp-18h]
.text$x:00009EE7                 and     eax, 1
.text$x:00009EEA                 jz      $LN6_1
.text$x:00009EF0                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:00009EF4                 mov     ecx, [ebp+8]
.text$x:00009EF7                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00009EFC ; ---------------------------------------------------------------------------
.text$x:00009EFC
.text$x:00009EFC $LN6_1:                                 ; CODE XREF: __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:00009EFC                 retn
.text$x:00009EFC __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:00009EFC
.text$x:00009EFD
.text$x:00009EFD ; =============== S U B R O U T I N E =======================================
.text$x:00009EFD
.text$x:00009EFD
.text$x:00009EFD __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:00009EFD                                         ; DATA XREF: std::_System_error_category::message(int)+5o
.text$x:00009EFD
.text$x:00009EFD arg_4           = dword ptr  8
.text$x:00009EFD
.text$x:00009EFD                 mov     edx, [esp+arg_4]
.text$x:00009F01                 lea     eax, [edx+0Ch]
.text$x:00009F04                 mov     ecx, [edx-14h]
.text$x:00009F07                 xor     ecx, eax
.text$x:00009F09                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009F0E                 mov     eax, offset __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:00009F13                 jmp     ___CxxFrameHandler3
.text$x:00009F13 __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:00009F13
.text$x:00009F13 _text$x         ends
.text$x:00009F13
.text$mn:00009F18 ; ===========================================================================
.text$mn:00009F18
.text$mn:00009F18 ; Segment type: Pure code
.text$mn:00009F18 ; Segment permissions: Read/Execute
.text$mn:00009F18 _text$mn        segment para public 'CODE' use32
.text$mn:00009F18                 assume cs:_text$mn
.text$mn:00009F18                 ;org 9F18h
.text$mn:00009F18 ; COMDAT (pick any)
.text$mn:00009F18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F18
.text$mn:00009F18 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F18
.text$mn:00009F18 ; Attributes: bp-based frame
.text$mn:00009F18
.text$mn:00009F18 ; int __cdecl std::char_traits<char>::move(void *Dst, void *Src, size_t Size)
.text$mn:00009F18                 public ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:00009F18 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
.text$mn:00009F18                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+6Ap
.text$mn:00009F18
.text$mn:00009F18 var_4           = dword ptr -4
.text$mn:00009F18 Dst             = dword ptr  8
.text$mn:00009F18 Src             = dword ptr  0Ch
.text$mn:00009F18 Size            = dword ptr  10h
.text$mn:00009F18
.text$mn:00009F18                 push    ebp
.text$mn:00009F19                 mov     ebp, esp
.text$mn:00009F1B                 push    ecx
.text$mn:00009F1C                 cmp     [ebp+Size], 0
.text$mn:00009F20                 jnz     short loc_9F2A
.text$mn:00009F22                 mov     eax, [ebp+Dst]
.text$mn:00009F25                 mov     [ebp+var_4], eax
.text$mn:00009F28                 jmp     short loc_9F41
.text$mn:00009F2A ; ---------------------------------------------------------------------------
.text$mn:00009F2A
.text$mn:00009F2A loc_9F2A:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+8j
.text$mn:00009F2A                 mov     ecx, [ebp+Size]
.text$mn:00009F2D                 push    ecx             ; Size
.text$mn:00009F2E                 mov     edx, [ebp+Src]
.text$mn:00009F31                 push    edx             ; Src
.text$mn:00009F32                 mov     eax, [ebp+Dst]
.text$mn:00009F35                 push    eax             ; Dst
.text$mn:00009F36                 call    _memmove
.text$mn:00009F3B                 add     esp, 0Ch
.text$mn:00009F3E                 mov     [ebp+var_4], eax
.text$mn:00009F41
.text$mn:00009F41 loc_9F41:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+10j
.text$mn:00009F41                 mov     eax, [ebp+var_4]
.text$mn:00009F44                 mov     esp, ebp
.text$mn:00009F46                 pop     ebp
.text$mn:00009F47                 retn
.text$mn:00009F47 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:00009F47
.text$mn:00009F47 _text$mn        ends
.text$mn:00009F47
.text$mn:00009F48 ; ===========================================================================
.text$mn:00009F48
.text$mn:00009F48 ; Segment type: Pure code
.text$mn:00009F48 ; Segment permissions: Read/Execute
.text$mn:00009F48 _text$mn        segment para public 'CODE' use32
.text$mn:00009F48                 assume cs:_text$mn
.text$mn:00009F48                 ;org 9F48h
.text$mn:00009F48 ; COMDAT (pick any)
.text$mn:00009F48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F48
.text$mn:00009F48 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F48
.text$mn:00009F48 ; Attributes: bp-based frame
.text$mn:00009F48
.text$mn:00009F48 ; int __cdecl std::char_traits<wchar_t>::move(void *Dst, void *Src, int)
.text$mn:00009F48                 public ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:00009F48 ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:00009F48                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Ap
.text$mn:00009F48                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+70p ...
.text$mn:00009F48
.text$mn:00009F48 var_4           = dword ptr -4
.text$mn:00009F48 Dst             = dword ptr  8
.text$mn:00009F48 Src             = dword ptr  0Ch
.text$mn:00009F48 arg_8           = dword ptr  10h
.text$mn:00009F48
.text$mn:00009F48                 push    ebp
.text$mn:00009F49                 mov     ebp, esp
.text$mn:00009F4B                 push    ecx
.text$mn:00009F4C                 cmp     [ebp+arg_8], 0
.text$mn:00009F50                 jnz     short loc_9F5A
.text$mn:00009F52                 mov     eax, [ebp+Dst]
.text$mn:00009F55                 mov     [ebp+var_4], eax
.text$mn:00009F58                 jmp     short loc_9F71
.text$mn:00009F5A ; ---------------------------------------------------------------------------
.text$mn:00009F5A
.text$mn:00009F5A loc_9F5A:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+8j
.text$mn:00009F5A                 mov     ecx, [ebp+arg_8]
.text$mn:00009F5D                 push    ecx             ; int
.text$mn:00009F5E                 mov     edx, [ebp+Src]
.text$mn:00009F61                 push    edx             ; Src
.text$mn:00009F62                 mov     eax, [ebp+Dst]
.text$mn:00009F65                 push    eax             ; Dst
.text$mn:00009F66                 call    _wmemmove
.text$mn:00009F6B                 add     esp, 0Ch
.text$mn:00009F6E                 mov     [ebp+var_4], eax
.text$mn:00009F71
.text$mn:00009F71 loc_9F71:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+10j
.text$mn:00009F71                 mov     eax, [ebp+var_4]
.text$mn:00009F74                 mov     esp, ebp
.text$mn:00009F76                 pop     ebp
.text$mn:00009F77                 retn
.text$mn:00009F77 ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:00009F77
.text$mn:00009F77 _text$mn        ends
.text$mn:00009F77
.text$mn:00009F78 ; ===========================================================================
.text$mn:00009F78
.text$mn:00009F78 ; Segment type: Pure code
.text$mn:00009F78 ; Segment permissions: Read/Execute
.text$mn:00009F78 _text$mn        segment para public 'CODE' use32
.text$mn:00009F78                 assume cs:_text$mn
.text$mn:00009F78                 ;org 9F78h
.text$mn:00009F78 ; COMDAT (pick any)
.text$mn:00009F78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F78
.text$mn:00009F78 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F78
.text$mn:00009F78 ; Attributes: bp-based frame
.text$mn:00009F78
.text$mn:00009F78 ; const char *__thiscall std::_Generic_error_category::name(std::_Generic_error_category *__hidden this)
.text$mn:00009F78                 public ?name@_Generic_error_category@std@@UBEPBDXZ
.text$mn:00009F78 ?name@_Generic_error_category@std@@UBEPBDXZ proc near
.text$mn:00009F78                                         ; DATA XREF: .rdata:0000C1B4o
.text$mn:00009F78
.text$mn:00009F78 var_4           = dword ptr -4
.text$mn:00009F78
.text$mn:00009F78                 push    ebp
.text$mn:00009F79                 mov     ebp, esp
.text$mn:00009F7B                 push    ecx
.text$mn:00009F7C                 mov     [ebp+var_4], ecx
.text$mn:00009F7F                 mov     eax, offset ??_C@_07DCLBNMLN@generic?$AA@ ; "generic"
.text$mn:00009F84                 mov     esp, ebp
.text$mn:00009F86                 pop     ebp
.text$mn:00009F87                 retn
.text$mn:00009F87 ?name@_Generic_error_category@std@@UBEPBDXZ endp
.text$mn:00009F87
.text$mn:00009F87 _text$mn        ends
.text$mn:00009F87
.text$mn:00009F88 ; ===========================================================================
.text$mn:00009F88
.text$mn:00009F88 ; Segment type: Pure code
.text$mn:00009F88 ; Segment permissions: Read/Execute
.text$mn:00009F88 _text$mn        segment para public 'CODE' use32
.text$mn:00009F88                 assume cs:_text$mn
.text$mn:00009F88                 ;org 9F88h
.text$mn:00009F88 ; COMDAT (pick any)
.text$mn:00009F88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F88
.text$mn:00009F88 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F88
.text$mn:00009F88 ; Attributes: bp-based frame
.text$mn:00009F88
.text$mn:00009F88 ; const char *__thiscall std::_Iostream_error_category::name(std::_Iostream_error_category *__hidden this)
.text$mn:00009F88                 public ?name@_Iostream_error_category@std@@UBEPBDXZ
.text$mn:00009F88 ?name@_Iostream_error_category@std@@UBEPBDXZ proc near
.text$mn:00009F88                                         ; DATA XREF: .rdata:0000C1E8o
.text$mn:00009F88
.text$mn:00009F88 var_4           = dword ptr -4
.text$mn:00009F88
.text$mn:00009F88                 push    ebp
.text$mn:00009F89                 mov     ebp, esp
.text$mn:00009F8B                 push    ecx
.text$mn:00009F8C                 mov     [ebp+var_4], ecx
.text$mn:00009F8F                 mov     eax, offset ??_C@_08LLGCOLLL@iostream?$AA@ ; "iostream"
.text$mn:00009F94                 mov     esp, ebp
.text$mn:00009F96                 pop     ebp
.text$mn:00009F97                 retn
.text$mn:00009F97 ?name@_Iostream_error_category@std@@UBEPBDXZ endp
.text$mn:00009F97
.text$mn:00009F97 _text$mn        ends
.text$mn:00009F97
.text$mn:00009F98 ; ===========================================================================
.text$mn:00009F98
.text$mn:00009F98 ; Segment type: Pure code
.text$mn:00009F98 ; Segment permissions: Read/Execute
.text$mn:00009F98 _text$mn        segment para public 'CODE' use32
.text$mn:00009F98                 assume cs:_text$mn
.text$mn:00009F98                 ;org 9F98h
.text$mn:00009F98 ; COMDAT (pick any)
.text$mn:00009F98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F98
.text$mn:00009F98 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F98
.text$mn:00009F98 ; Attributes: bp-based frame
.text$mn:00009F98
.text$mn:00009F98 ; const char *__thiscall std::_System_error_category::name(std::_System_error_category *__hidden this)
.text$mn:00009F98                 public ?name@_System_error_category@std@@UBEPBDXZ
.text$mn:00009F98 ?name@_System_error_category@std@@UBEPBDXZ proc near
.text$mn:00009F98                                         ; DATA XREF: .rdata:0000C228o
.text$mn:00009F98
.text$mn:00009F98 var_4           = dword ptr -4
.text$mn:00009F98
.text$mn:00009F98                 push    ebp
.text$mn:00009F99                 mov     ebp, esp
.text$mn:00009F9B                 push    ecx
.text$mn:00009F9C                 mov     [ebp+var_4], ecx
.text$mn:00009F9F                 mov     eax, offset ??_C@_06FHFOAHML@system?$AA@ ; "system"
.text$mn:00009FA4                 mov     esp, ebp
.text$mn:00009FA6                 pop     ebp
.text$mn:00009FA7                 retn
.text$mn:00009FA7 ?name@_System_error_category@std@@UBEPBDXZ endp
.text$mn:00009FA7
.text$mn:00009FA7 _text$mn        ends
.text$mn:00009FA7
.text$mn:00009FA8 ; ===========================================================================
.text$mn:00009FA8
.text$mn:00009FA8 ; Segment type: Pure code
.text$mn:00009FA8 ; Segment permissions: Read/Execute
.text$mn:00009FA8 _text$mn        segment para public 'CODE' use32
.text$mn:00009FA8                 assume cs:_text$mn
.text$mn:00009FA8                 ;org 9FA8h
.text$mn:00009FA8 ; COMDAT (pick any)
.text$mn:00009FA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009FA8
.text$mn:00009FA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00009FA8
.text$mn:00009FA8 ; Attributes: bp-based frame
.text$mn:00009FA8
.text$mn:00009FA8 ; public: void __thiscall std::vector<wchar_t const *, class std::allocator<wchar_t const *>>::push_back(wchar_t const * &&)
.text$mn:00009FA8                 public ?push_back@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAEX$$QAPB_W@Z
.text$mn:00009FA8 ?push_back@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAEX$$QAPB_W@Z proc near
.text$mn:00009FA8                                         ; CODE XREF: parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+145p
.text$mn:00009FA8                                         ; parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+1B7p
.text$mn:00009FA8
.text$mn:00009FA8 var_C           = dword ptr -0Ch
.text$mn:00009FA8 var_8           = dword ptr -8
.text$mn:00009FA8 var_2           = byte ptr -2
.text$mn:00009FA8 var_1           = byte ptr -1
.text$mn:00009FA8 arg_0           = dword ptr  8
.text$mn:00009FA8
.text$mn:00009FA8                 push    ebp
.text$mn:00009FA9                 mov     ebp, esp
.text$mn:00009FAB                 sub     esp, 0Ch
.text$mn:00009FAE                 mov     [ebp+var_8], ecx
.text$mn:00009FB1                 mov     eax, [ebp+arg_0]
.text$mn:00009FB4                 push    eax
.text$mn:00009FB5                 call    ??$addressof@PB_W@std@@YAPAPB_WAAPB_W@Z ; std::addressof<wchar_t const *>(wchar_t const * &)
.text$mn:00009FBA                 add     esp, 4
.text$mn:00009FBD                 push    eax
.text$mn:00009FBE                 mov     ecx, [ebp+var_8]
.text$mn:00009FC1                 call    ?_Inside@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBE_NPBQB_W@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Inside(wchar_t const * const *)
.text$mn:00009FC6                 movzx   ecx, al
.text$mn:00009FC9                 test    ecx, ecx
.text$mn:00009FCB                 jz      loc_A058
.text$mn:00009FD1                 mov     edx, [ebp+arg_0]
.text$mn:00009FD4                 push    edx
.text$mn:00009FD5                 call    ??$addressof@PB_W@std@@YAPAPB_WAAPB_W@Z ; std::addressof<wchar_t const *>(wchar_t const * &)
.text$mn:00009FDA                 add     esp, 4
.text$mn:00009FDD                 mov     ecx, [ebp+var_8]
.text$mn:00009FE0                 sub     eax, [ecx+4]
.text$mn:00009FE3                 sar     eax, 2
.text$mn:00009FE6                 mov     [ebp+var_C], eax
.text$mn:00009FE9                 mov     edx, [ebp+var_8]
.text$mn:00009FEC                 mov     eax, [ebp+var_8]
.text$mn:00009FEF                 mov     ecx, [edx+8]
.text$mn:00009FF2                 cmp     ecx, [eax+0Ch]
.text$mn:00009FF5                 jnz     short loc_A001
.text$mn:00009FF7                 push    1
.text$mn:00009FF9                 mov     ecx, [ebp+var_8]
.text$mn:00009FFC                 call    ?_Reserve@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Reserve(uint)
.text$mn:0000A001
.text$mn:0000A001 loc_A001:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * &&)+4Dj
.text$mn:0000A001                 mov     edx, [ebp+var_8]
.text$mn:0000A004                 mov     eax, [edx+8]
.text$mn:0000A007                 push    eax
.text$mn:0000A008                 mov     ecx, [ebp+var_8]
.text$mn:0000A00B                 mov     edx, [ecx+8]
.text$mn:0000A00E                 push    edx
.text$mn:0000A00F                 mov     ecx, [ebp+var_8]
.text$mn:0000A012                 call    ?_Orphan_range@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXPAPB_W0@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Orphan_range(wchar_t const * *,wchar_t const * *)
.text$mn:0000A017                 mov     eax, [ebp+var_8]
.text$mn:0000A01A                 mov     ecx, [eax+4]
.text$mn:0000A01D                 mov     edx, [ebp+var_C]
.text$mn:0000A020                 lea     eax, [ecx+edx*4]
.text$mn:0000A023                 push    eax
.text$mn:0000A024                 call    ??$forward@PB_W@std@@YA$$QAPB_WAAPB_W@Z ; std::forward<wchar_t const *>(wchar_t const * &)
.text$mn:0000A029                 add     esp, 4
.text$mn:0000A02C                 push    eax             ; int
.text$mn:0000A02D                 mov     ecx, [ebp+var_8]
.text$mn:0000A030                 mov     edx, [ecx+8]
.text$mn:0000A033                 push    edx             ; void *
.text$mn:0000A034                 lea     eax, [ebp+var_1]
.text$mn:0000A037                 push    eax
.text$mn:0000A038                 mov     ecx, [ebp+var_8]
.text$mn:0000A03B                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PB_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Getal(void)
.text$mn:0000A040                 mov     ecx, eax
.text$mn:0000A042                 call    ??$construct@PB_WPB_W@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEXPAPB_W$$QAPB_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const *>(wchar_t const * *,wchar_t const * &&)
.text$mn:0000A047                 mov     ecx, [ebp+var_8]
.text$mn:0000A04A                 mov     edx, [ecx+8]
.text$mn:0000A04D                 add     edx, 4
.text$mn:0000A050                 mov     eax, [ebp+var_8]
.text$mn:0000A053                 mov     [eax+8], edx
.text$mn:0000A056                 jmp     short loc_A0BC
.text$mn:0000A058 ; ---------------------------------------------------------------------------
.text$mn:0000A058
.text$mn:0000A058 loc_A058:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * &&)+23j
.text$mn:0000A058                 mov     ecx, [ebp+var_8]
.text$mn:0000A05B                 mov     edx, [ebp+var_8]
.text$mn:0000A05E                 mov     eax, [ecx+8]
.text$mn:0000A061                 cmp     eax, [edx+0Ch]
.text$mn:0000A064                 jnz     short loc_A070
.text$mn:0000A066                 push    1
.text$mn:0000A068                 mov     ecx, [ebp+var_8]
.text$mn:0000A06B                 call    ?_Reserve@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Reserve(uint)
.text$mn:0000A070
.text$mn:0000A070 loc_A070:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * &&)+BCj
.text$mn:0000A070                 mov     ecx, [ebp+var_8]
.text$mn:0000A073                 mov     edx, [ecx+8]
.text$mn:0000A076                 push    edx
.text$mn:0000A077                 mov     eax, [ebp+var_8]
.text$mn:0000A07A                 mov     ecx, [eax+8]
.text$mn:0000A07D                 push    ecx
.text$mn:0000A07E                 mov     ecx, [ebp+var_8]
.text$mn:0000A081                 call    ?_Orphan_range@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXPAPB_W0@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Orphan_range(wchar_t const * *,wchar_t const * *)
.text$mn:0000A086                 mov     edx, [ebp+arg_0]
.text$mn:0000A089                 push    edx
.text$mn:0000A08A                 call    ??$forward@PB_W@std@@YA$$QAPB_WAAPB_W@Z ; std::forward<wchar_t const *>(wchar_t const * &)
.text$mn:0000A08F                 add     esp, 4
.text$mn:0000A092                 push    eax             ; int
.text$mn:0000A093                 mov     eax, [ebp+var_8]
.text$mn:0000A096                 mov     ecx, [eax+8]
.text$mn:0000A099                 push    ecx             ; void *
.text$mn:0000A09A                 lea     edx, [ebp+var_2]
.text$mn:0000A09D                 push    edx
.text$mn:0000A09E                 mov     ecx, [ebp+var_8]
.text$mn:0000A0A1                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PB_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Getal(void)
.text$mn:0000A0A6                 mov     ecx, eax
.text$mn:0000A0A8                 call    ??$construct@PB_WPB_W@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEXPAPB_W$$QAPB_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const *>(wchar_t const * *,wchar_t const * &&)
.text$mn:0000A0AD                 mov     eax, [ebp+var_8]
.text$mn:0000A0B0                 mov     ecx, [eax+8]
.text$mn:0000A0B3                 add     ecx, 4
.text$mn:0000A0B6                 mov     edx, [ebp+var_8]
.text$mn:0000A0B9                 mov     [edx+8], ecx
.text$mn:0000A0BC
.text$mn:0000A0BC loc_A0BC:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * &&)+AEj
.text$mn:0000A0BC                 mov     esp, ebp
.text$mn:0000A0BE                 pop     ebp
.text$mn:0000A0BF                 retn    4
.text$mn:0000A0BF ?push_back@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAEX$$QAPB_W@Z endp
.text$mn:0000A0BF
.text$mn:0000A0BF ; ---------------------------------------------------------------------------
.text$mn:0000A0C2                 align 4
.text$mn:0000A0C2 _text$mn        ends
.text$mn:0000A0C2
.text$mn:0000A0C4 ; ===========================================================================
.text$mn:0000A0C4
.text$mn:0000A0C4 ; Segment type: Pure code
.text$mn:0000A0C4 ; Segment permissions: Read/Execute
.text$mn:0000A0C4 _text$mn        segment para public 'CODE' use32
.text$mn:0000A0C4                 assume cs:_text$mn
.text$mn:0000A0C4                 ;org 0A0C4h
.text$mn:0000A0C4 ; COMDAT (pick any)
.text$mn:0000A0C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A0C4
.text$mn:0000A0C4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A0C4
.text$mn:0000A0C4 ; Attributes: bp-based frame
.text$mn:0000A0C4
.text$mn:0000A0C4 ; public: void __thiscall std::vector<wchar_t const *, class std::allocator<wchar_t const *>>::push_back(wchar_t const * const &)
.text$mn:0000A0C4                 public ?push_back@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAEXABQB_W@Z
.text$mn:0000A0C4 ?push_back@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAEXABQB_W@Z proc near
.text$mn:0000A0C4                                         ; CODE XREF: parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+C3p
.text$mn:0000A0C4
.text$mn:0000A0C4 var_C           = dword ptr -0Ch
.text$mn:0000A0C4 var_8           = dword ptr -8
.text$mn:0000A0C4 var_2           = byte ptr -2
.text$mn:0000A0C4 var_1           = byte ptr -1
.text$mn:0000A0C4 arg_0           = dword ptr  8
.text$mn:0000A0C4
.text$mn:0000A0C4                 push    ebp
.text$mn:0000A0C5                 mov     ebp, esp
.text$mn:0000A0C7                 sub     esp, 0Ch
.text$mn:0000A0CA                 mov     [ebp+var_8], ecx
.text$mn:0000A0CD                 mov     eax, [ebp+arg_0]
.text$mn:0000A0D0                 push    eax
.text$mn:0000A0D1                 call    ??$addressof@QB_W@std@@YAPBQB_WABQB_W@Z ; std::addressof<wchar_t const * const>(wchar_t const * const &)
.text$mn:0000A0D6                 add     esp, 4
.text$mn:0000A0D9                 push    eax
.text$mn:0000A0DA                 mov     ecx, [ebp+var_8]
.text$mn:0000A0DD                 call    ?_Inside@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBE_NPBQB_W@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Inside(wchar_t const * const *)
.text$mn:0000A0E2                 movzx   ecx, al
.text$mn:0000A0E5                 test    ecx, ecx
.text$mn:0000A0E7                 jz      short loc_A167
.text$mn:0000A0E9                 mov     edx, [ebp+arg_0]
.text$mn:0000A0EC                 push    edx
.text$mn:0000A0ED                 call    ??$addressof@QB_W@std@@YAPBQB_WABQB_W@Z ; std::addressof<wchar_t const * const>(wchar_t const * const &)
.text$mn:0000A0F2                 add     esp, 4
.text$mn:0000A0F5                 mov     ecx, [ebp+var_8]
.text$mn:0000A0F8                 sub     eax, [ecx+4]
.text$mn:0000A0FB                 sar     eax, 2
.text$mn:0000A0FE                 mov     [ebp+var_C], eax
.text$mn:0000A101                 mov     edx, [ebp+var_8]
.text$mn:0000A104                 mov     eax, [ebp+var_8]
.text$mn:0000A107                 mov     ecx, [edx+8]
.text$mn:0000A10A                 cmp     ecx, [eax+0Ch]
.text$mn:0000A10D                 jnz     short loc_A119
.text$mn:0000A10F                 push    1
.text$mn:0000A111                 mov     ecx, [ebp+var_8]
.text$mn:0000A114                 call    ?_Reserve@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Reserve(uint)
.text$mn:0000A119
.text$mn:0000A119 loc_A119:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * const &)+49j
.text$mn:0000A119                 mov     edx, [ebp+var_8]
.text$mn:0000A11C                 mov     eax, [edx+8]
.text$mn:0000A11F                 push    eax
.text$mn:0000A120                 mov     ecx, [ebp+var_8]
.text$mn:0000A123                 mov     edx, [ecx+8]
.text$mn:0000A126                 push    edx
.text$mn:0000A127                 mov     ecx, [ebp+var_8]
.text$mn:0000A12A                 call    ?_Orphan_range@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXPAPB_W0@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Orphan_range(wchar_t const * *,wchar_t const * *)
.text$mn:0000A12F                 mov     eax, [ebp+var_8]
.text$mn:0000A132                 mov     ecx, [eax+4]
.text$mn:0000A135                 mov     edx, [ebp+var_C]
.text$mn:0000A138                 lea     eax, [ecx+edx*4]
.text$mn:0000A13B                 push    eax             ; int
.text$mn:0000A13C                 mov     ecx, [ebp+var_8]
.text$mn:0000A13F                 mov     edx, [ecx+8]
.text$mn:0000A142                 push    edx             ; void *
.text$mn:0000A143                 lea     eax, [ebp+var_1]
.text$mn:0000A146                 push    eax
.text$mn:0000A147                 mov     ecx, [ebp+var_8]
.text$mn:0000A14A                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PB_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Getal(void)
.text$mn:0000A14F                 mov     ecx, eax
.text$mn:0000A151                 call    ??$construct@PB_WAAPB_W@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEXPAPB_WAAPB_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const * &>(wchar_t const * *,wchar_t const * &)
.text$mn:0000A156                 mov     ecx, [ebp+var_8]
.text$mn:0000A159                 mov     edx, [ecx+8]
.text$mn:0000A15C                 add     edx, 4
.text$mn:0000A15F                 mov     eax, [ebp+var_8]
.text$mn:0000A162                 mov     [eax+8], edx
.text$mn:0000A165                 jmp     short loc_A1C2
.text$mn:0000A167 ; ---------------------------------------------------------------------------
.text$mn:0000A167
.text$mn:0000A167 loc_A167:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * const &)+23j
.text$mn:0000A167                 mov     ecx, [ebp+var_8]
.text$mn:0000A16A                 mov     edx, [ebp+var_8]
.text$mn:0000A16D                 mov     eax, [ecx+8]
.text$mn:0000A170                 cmp     eax, [edx+0Ch]
.text$mn:0000A173                 jnz     short loc_A17F
.text$mn:0000A175                 push    1
.text$mn:0000A177                 mov     ecx, [ebp+var_8]
.text$mn:0000A17A                 call    ?_Reserve@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Reserve(uint)
.text$mn:0000A17F
.text$mn:0000A17F loc_A17F:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * const &)+AFj
.text$mn:0000A17F                 mov     ecx, [ebp+var_8]
.text$mn:0000A182                 mov     edx, [ecx+8]
.text$mn:0000A185                 push    edx
.text$mn:0000A186                 mov     eax, [ebp+var_8]
.text$mn:0000A189                 mov     ecx, [eax+8]
.text$mn:0000A18C                 push    ecx
.text$mn:0000A18D                 mov     ecx, [ebp+var_8]
.text$mn:0000A190                 call    ?_Orphan_range@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXPAPB_W0@Z ; std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Orphan_range(wchar_t const * *,wchar_t const * *)
.text$mn:0000A195                 mov     edx, [ebp+arg_0]
.text$mn:0000A198                 push    edx             ; int
.text$mn:0000A199                 mov     eax, [ebp+var_8]
.text$mn:0000A19C                 mov     ecx, [eax+8]
.text$mn:0000A19F                 push    ecx             ; void *
.text$mn:0000A1A0                 lea     edx, [ebp+var_2]
.text$mn:0000A1A3                 push    edx
.text$mn:0000A1A4                 mov     ecx, [ebp+var_8]
.text$mn:0000A1A7                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PB_W@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<wchar_t const *,std::allocator<wchar_t const *>>>::_Getal(void)
.text$mn:0000A1AC                 mov     ecx, eax
.text$mn:0000A1AE                 call    ??$construct@PB_WABQB_W@?$_Wrap_alloc@V?$allocator@PB_W@std@@@std@@QAEXPAPB_WABQB_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t const *>>::construct<wchar_t const *,wchar_t const * const &>(wchar_t const * *,wchar_t const * const &)
.text$mn:0000A1B3                 mov     eax, [ebp+var_8]
.text$mn:0000A1B6                 mov     ecx, [eax+8]
.text$mn:0000A1B9                 add     ecx, 4
.text$mn:0000A1BC                 mov     edx, [ebp+var_8]
.text$mn:0000A1BF                 mov     [edx+8], ecx
.text$mn:0000A1C2
.text$mn:0000A1C2 loc_A1C2:                               ; CODE XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::push_back(wchar_t const * const &)+A1j
.text$mn:0000A1C2                 mov     esp, ebp
.text$mn:0000A1C4                 pop     ebp
.text$mn:0000A1C5                 retn    4
.text$mn:0000A1C5 ?push_back@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAEXABQB_W@Z endp
.text$mn:0000A1C5
.text$mn:0000A1C5 _text$mn        ends
.text$mn:0000A1C5
.text$mn:0000A1C8 ; ===========================================================================
.text$mn:0000A1C8
.text$mn:0000A1C8 ; Segment type: Pure code
.text$mn:0000A1C8 ; Segment permissions: Read/Execute
.text$mn:0000A1C8 _text$mn        segment para public 'CODE' use32
.text$mn:0000A1C8                 assume cs:_text$mn
.text$mn:0000A1C8                 ;org 0A1C8h
.text$mn:0000A1C8 ; COMDAT (pick any)
.text$mn:0000A1C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A1C8
.text$mn:0000A1C8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A1C8
.text$mn:0000A1C8 ; Attributes: bp-based frame
.text$mn:0000A1C8
.text$mn:0000A1C8 ; void __thiscall Window::reSizeTo(Window *this, struct tagRECT *)
.text$mn:0000A1C8                 public ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z
.text$mn:0000A1C8 ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z proc near
.text$mn:0000A1C8                                         ; DATA XREF: .rdata:0000C274o
.text$mn:0000A1C8                                         ; .rdata:0000C2A8o
.text$mn:0000A1C8
.text$mn:0000A1C8 var_4           = dword ptr -4
.text$mn:0000A1C8 arg_0           = dword ptr  8
.text$mn:0000A1C8
.text$mn:0000A1C8                 push    ebp
.text$mn:0000A1C9                 mov     ebp, esp
.text$mn:0000A1CB                 push    ecx
.text$mn:0000A1CC                 mov     [ebp+var_4], ecx
.text$mn:0000A1CF                 push    1               ; bRepaint
.text$mn:0000A1D1                 mov     eax, [ebp+arg_0]
.text$mn:0000A1D4                 mov     ecx, [eax+0Ch]
.text$mn:0000A1D7                 push    ecx             ; nHeight
.text$mn:0000A1D8                 mov     edx, [ebp+arg_0]
.text$mn:0000A1DB                 mov     eax, [edx+8]
.text$mn:0000A1DE                 push    eax             ; nWidth
.text$mn:0000A1DF                 mov     ecx, [ebp+arg_0]
.text$mn:0000A1E2                 mov     edx, [ecx+4]
.text$mn:0000A1E5                 push    edx             ; Y
.text$mn:0000A1E6                 mov     eax, [ebp+arg_0]
.text$mn:0000A1E9                 mov     ecx, [eax]
.text$mn:0000A1EB                 push    ecx             ; X
.text$mn:0000A1EC                 mov     edx, [ebp+var_4]
.text$mn:0000A1EF                 mov     eax, [edx+0Ch]
.text$mn:0000A1F2                 push    eax             ; hWnd
.text$mn:0000A1F3                 call    dword ptr ds:__imp__MoveWindow@24 ; MoveWindow(x,x,x,x,x,x)
.text$mn:0000A1F9                 push    0
.text$mn:0000A1FB                 mov     ecx, [ebp+var_4]
.text$mn:0000A1FE                 mov     edx, [ecx]
.text$mn:0000A200                 mov     ecx, [ebp+var_4]
.text$mn:0000A203                 mov     eax, [edx+18h]
.text$mn:0000A206                 call    eax
.text$mn:0000A208                 mov     esp, ebp
.text$mn:0000A20A                 pop     ebp
.text$mn:0000A20B                 retn    4
.text$mn:0000A20B ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z endp
.text$mn:0000A20B
.text$mn:0000A20B ; ---------------------------------------------------------------------------
.text$mn:0000A20E                 align 10h
.text$mn:0000A20E _text$mn        ends
.text$mn:0000A20E
.text$mn:0000A210 ; ===========================================================================
.text$mn:0000A210
.text$mn:0000A210 ; Segment type: Pure code
.text$mn:0000A210 ; Segment permissions: Read/Execute
.text$mn:0000A210 _text$mn        segment para public 'CODE' use32
.text$mn:0000A210                 assume cs:_text$mn
.text$mn:0000A210                 ;org 0A210h
.text$mn:0000A210 ; COMDAT (pick any)
.text$mn:0000A210                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A210
.text$mn:0000A210 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A210
.text$mn:0000A210 ; Attributes: bp-based frame
.text$mn:0000A210
.text$mn:0000A210 ; void __thiscall Window::reSizeToWH(Window *this, struct tagRECT *)
.text$mn:0000A210                 public ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z
.text$mn:0000A210 ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z proc near
.text$mn:0000A210                                         ; DATA XREF: .rdata:0000C278o
.text$mn:0000A210                                         ; .rdata:0000C2ACo
.text$mn:0000A210
.text$mn:0000A210 var_4           = dword ptr -4
.text$mn:0000A210 arg_0           = dword ptr  8
.text$mn:0000A210
.text$mn:0000A210                 push    ebp
.text$mn:0000A211                 mov     ebp, esp
.text$mn:0000A213                 push    ecx
.text$mn:0000A214                 mov     [ebp+var_4], ecx
.text$mn:0000A217                 push    1               ; bRepaint
.text$mn:0000A219                 mov     eax, [ebp+arg_0]
.text$mn:0000A21C                 mov     ecx, [ebp+arg_0]
.text$mn:0000A21F                 mov     edx, [eax+0Ch]
.text$mn:0000A222                 sub     edx, [ecx+4]
.text$mn:0000A225                 push    edx             ; nHeight
.text$mn:0000A226                 mov     eax, [ebp+arg_0]
.text$mn:0000A229                 mov     ecx, [ebp+arg_0]
.text$mn:0000A22C                 mov     edx, [eax+8]
.text$mn:0000A22F                 sub     edx, [ecx]
.text$mn:0000A231                 push    edx             ; nWidth
.text$mn:0000A232                 mov     eax, [ebp+arg_0]
.text$mn:0000A235                 mov     ecx, [eax+4]
.text$mn:0000A238                 push    ecx             ; Y
.text$mn:0000A239                 mov     edx, [ebp+arg_0]
.text$mn:0000A23C                 mov     eax, [edx]
.text$mn:0000A23E                 push    eax             ; X
.text$mn:0000A23F                 mov     ecx, [ebp+var_4]
.text$mn:0000A242                 mov     edx, [ecx+0Ch]
.text$mn:0000A245                 push    edx             ; hWnd
.text$mn:0000A246                 call    dword ptr ds:__imp__MoveWindow@24 ; MoveWindow(x,x,x,x,x,x)
.text$mn:0000A24C                 push    0
.text$mn:0000A24E                 mov     eax, [ebp+var_4]
.text$mn:0000A251                 mov     edx, [eax]
.text$mn:0000A253                 mov     ecx, [ebp+var_4]
.text$mn:0000A256                 mov     eax, [edx+18h]
.text$mn:0000A259                 call    eax
.text$mn:0000A25B                 mov     esp, ebp
.text$mn:0000A25D                 pop     ebp
.text$mn:0000A25E                 retn    4
.text$mn:0000A25E ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z endp
.text$mn:0000A25E
.text$mn:0000A25E ; ---------------------------------------------------------------------------
.text$mn:0000A261                 align 4
.text$mn:0000A261 _text$mn        ends
.text$mn:0000A261
.text$mn:0000A264 ; ===========================================================================
.text$mn:0000A264
.text$mn:0000A264 ; Segment type: Pure code
.text$mn:0000A264 ; Segment permissions: Read/Execute
.text$mn:0000A264 _text$mn        segment para public 'CODE' use32
.text$mn:0000A264                 assume cs:_text$mn
.text$mn:0000A264                 ;org 0A264h
.text$mn:0000A264 ; COMDAT (pick any)
.text$mn:0000A264                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A264
.text$mn:0000A264 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A264
.text$mn:0000A264 ; Attributes: bp-based frame
.text$mn:0000A264
.text$mn:0000A264 ; void __thiscall Window::redraw(Window *this, bool)
.text$mn:0000A264                 public ?redraw@Window@@UBEX_N@Z
.text$mn:0000A264 ?redraw@Window@@UBEX_N@Z proc near      ; DATA XREF: .rdata:0000C27Co
.text$mn:0000A264                                         ; .rdata:0000C2B0o
.text$mn:0000A264
.text$mn:0000A264 var_4           = dword ptr -4
.text$mn:0000A264 arg_0           = byte ptr  8
.text$mn:0000A264
.text$mn:0000A264                 push    ebp
.text$mn:0000A265                 mov     ebp, esp
.text$mn:0000A267                 push    ecx
.text$mn:0000A268                 mov     [ebp+var_4], ecx
.text$mn:0000A26B                 push    1               ; bErase
.text$mn:0000A26D                 push    0               ; lpRect
.text$mn:0000A26F                 mov     eax, [ebp+var_4]
.text$mn:0000A272                 mov     ecx, [eax+0Ch]
.text$mn:0000A275                 push    ecx             ; hWnd
.text$mn:0000A276                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text$mn:0000A27C                 movzx   edx, [ebp+arg_0]
.text$mn:0000A280                 test    edx, edx
.text$mn:0000A282                 jz      short loc_A291
.text$mn:0000A284                 mov     eax, [ebp+var_4]
.text$mn:0000A287                 mov     ecx, [eax+0Ch]
.text$mn:0000A28A                 push    ecx             ; hWnd
.text$mn:0000A28B                 call    dword ptr ds:__imp__UpdateWindow@4 ; UpdateWindow(x)
.text$mn:0000A291
.text$mn:0000A291 loc_A291:                               ; CODE XREF: Window::redraw(bool)+1Ej
.text$mn:0000A291                 mov     esp, ebp
.text$mn:0000A293                 pop     ebp
.text$mn:0000A294                 retn    4
.text$mn:0000A294 ?redraw@Window@@UBEX_N@Z endp
.text$mn:0000A294
.text$mn:0000A294 ; ---------------------------------------------------------------------------
.text$mn:0000A297                 align 4
.text$mn:0000A297 _text$mn        ends
.text$mn:0000A297
.text$mn:0000A298 ; ===========================================================================
.text$mn:0000A298
.text$mn:0000A298 ; Segment type: Pure code
.text$mn:0000A298 ; Segment permissions: Read/Execute
.text$mn:0000A298 _text$mn        segment para public 'CODE' use32
.text$mn:0000A298                 assume cs:_text$mn
.text$mn:0000A298                 ;org 0A298h
.text$mn:0000A298 ; COMDAT (pick any)
.text$mn:0000A298                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A298
.text$mn:0000A298 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A298
.text$mn:0000A298 ; Attributes: bp-based frame
.text$mn:0000A298
.text$mn:0000A298 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::replace(unsigned int, unsigned int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:0000A298                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@@Z
.text$mn:0000A298 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@@Z proc near
.text$mn:0000A298                                         ; CODE XREF: getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &)+198p
.text$mn:0000A298
.text$mn:0000A298 var_4           = dword ptr -4
.text$mn:0000A298 arg_0           = dword ptr  8
.text$mn:0000A298 arg_4           = dword ptr  0Ch
.text$mn:0000A298 arg_8           = dword ptr  10h
.text$mn:0000A298
.text$mn:0000A298                 push    ebp
.text$mn:0000A299                 mov     ebp, esp
.text$mn:0000A29B                 push    ecx
.text$mn:0000A29C                 mov     [ebp+var_4], ecx
.text$mn:0000A29F                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000A2A4                 push    eax
.text$mn:0000A2A5                 push    0
.text$mn:0000A2A7                 mov     ecx, [ebp+arg_8]
.text$mn:0000A2AA                 push    ecx
.text$mn:0000A2AB                 mov     edx, [ebp+arg_4]
.text$mn:0000A2AE                 push    edx
.text$mn:0000A2AF                 mov     eax, [ebp+arg_0]
.text$mn:0000A2B2                 push    eax
.text$mn:0000A2B3                 mov     ecx, [ebp+var_4]
.text$mn:0000A2B6                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000A2BB                 mov     esp, ebp
.text$mn:0000A2BD                 pop     ebp
.text$mn:0000A2BE                 retn    0Ch
.text$mn:0000A2BE ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@@Z endp
.text$mn:0000A2BE
.text$mn:0000A2BE ; ---------------------------------------------------------------------------
.text$mn:0000A2C1                 align 4
.text$mn:0000A2C1 _text$mn        ends
.text$mn:0000A2C1
.text$mn:0000A2C4 ; ===========================================================================
.text$mn:0000A2C4
.text$mn:0000A2C4 ; Segment type: Pure code
.text$mn:0000A2C4 ; Segment permissions: Read/Execute
.text$mn:0000A2C4 _text$mn        segment para public 'CODE' use32
.text$mn:0000A2C4                 assume cs:_text$mn
.text$mn:0000A2C4                 ;org 0A2C4h
.text$mn:0000A2C4 ; COMDAT (pick any)
.text$mn:0000A2C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A2C4
.text$mn:0000A2C4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A2C4
.text$mn:0000A2C4 ; Attributes: bp-based frame
.text$mn:0000A2C4
.text$mn:0000A2C4 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::replace(unsigned int, unsigned int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:0000A2C4                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z
.text$mn:0000A2C4 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z proc near
.text$mn:0000A2C4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+1Ep
.text$mn:0000A2C4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+5Bp
.text$mn:0000A2C4
.text$mn:0000A2C4 var_10          = dword ptr -10h
.text$mn:0000A2C4 var_C           = dword ptr -0Ch
.text$mn:0000A2C4 var_8           = dword ptr -8
.text$mn:0000A2C4 var_4           = dword ptr -4
.text$mn:0000A2C4 arg_0           = dword ptr  8
.text$mn:0000A2C4 arg_4           = dword ptr  0Ch
.text$mn:0000A2C4 arg_8           = dword ptr  10h
.text$mn:0000A2C4 arg_C           = dword ptr  14h
.text$mn:0000A2C4 arg_10          = dword ptr  18h
.text$mn:0000A2C4
.text$mn:0000A2C4                 push    ebp
.text$mn:0000A2C5                 mov     ebp, esp
.text$mn:0000A2C7                 sub     esp, 10h
.text$mn:0000A2CA                 mov     [ebp+var_4], ecx
.text$mn:0000A2CD                 mov     eax, [ebp+var_4]
.text$mn:0000A2D0                 mov     ecx, [eax+14h]
.text$mn:0000A2D3                 cmp     ecx, [ebp+arg_0]
.text$mn:0000A2D6                 jb      short loc_A2E5
.text$mn:0000A2D8                 mov     ecx, [ebp+arg_8]
.text$mn:0000A2DB                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000A2E0                 cmp     eax, [ebp+arg_C]
.text$mn:0000A2E3                 jnb     short loc_A2ED
.text$mn:0000A2E5
.text$mn:0000A2E5 loc_A2E5:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+12j
.text$mn:0000A2E5                 mov     ecx, [ebp+var_4]
.text$mn:0000A2E8                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000A2ED
.text$mn:0000A2ED loc_A2ED:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+1Fj
.text$mn:0000A2ED                 mov     edx, [ebp+var_4]
.text$mn:0000A2F0                 mov     eax, [edx+14h]
.text$mn:0000A2F3                 sub     eax, [ebp+arg_0]
.text$mn:0000A2F6                 cmp     eax, [ebp+arg_4]
.text$mn:0000A2F9                 jnb     short loc_A307
.text$mn:0000A2FB                 mov     ecx, [ebp+var_4]
.text$mn:0000A2FE                 mov     edx, [ecx+14h]
.text$mn:0000A301                 sub     edx, [ebp+arg_0]
.text$mn:0000A304                 mov     [ebp+arg_4], edx
.text$mn:0000A307
.text$mn:0000A307 loc_A307:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+35j
.text$mn:0000A307                 mov     ecx, [ebp+arg_8]
.text$mn:0000A30A                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000A30F                 sub     eax, [ebp+arg_C]
.text$mn:0000A312                 mov     [ebp+var_10], eax
.text$mn:0000A315                 mov     eax, [ebp+var_10]
.text$mn:0000A318                 cmp     eax, [ebp+arg_10]
.text$mn:0000A31B                 jnb     short loc_A323
.text$mn:0000A31D                 mov     ecx, [ebp+var_10]
.text$mn:0000A320                 mov     [ebp+arg_10], ecx
.text$mn:0000A323
.text$mn:0000A323 loc_A323:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+57j
.text$mn:0000A323                 mov     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000A329                 sub     edx, [ebp+arg_10]
.text$mn:0000A32C                 mov     eax, [ebp+var_4]
.text$mn:0000A32F                 mov     ecx, [eax+14h]
.text$mn:0000A332                 sub     ecx, [ebp+arg_4]
.text$mn:0000A335                 cmp     edx, ecx
.text$mn:0000A337                 ja      short loc_A341
.text$mn:0000A339                 mov     ecx, [ebp+var_4]
.text$mn:0000A33C                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000A341
.text$mn:0000A341 loc_A341:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+73j
.text$mn:0000A341                 mov     edx, [ebp+var_4]
.text$mn:0000A344                 mov     eax, [edx+14h]
.text$mn:0000A347                 sub     eax, [ebp+arg_4]
.text$mn:0000A34A                 sub     eax, [ebp+arg_0]
.text$mn:0000A34D                 mov     [ebp+var_8], eax
.text$mn:0000A350                 mov     ecx, [ebp+var_4]
.text$mn:0000A353                 mov     edx, [ecx+14h]
.text$mn:0000A356                 add     edx, [ebp+arg_10]
.text$mn:0000A359                 sub     edx, [ebp+arg_4]
.text$mn:0000A35C                 mov     [ebp+var_C], edx
.text$mn:0000A35F                 mov     eax, [ebp+var_4]
.text$mn:0000A362                 mov     ecx, [eax+14h]
.text$mn:0000A365                 cmp     ecx, [ebp+var_C]
.text$mn:0000A368                 jnb     short loc_A378
.text$mn:0000A36A                 push    0
.text$mn:0000A36C                 mov     edx, [ebp+var_C]
.text$mn:0000A36F                 push    edx
.text$mn:0000A370                 mov     ecx, [ebp+var_4]
.text$mn:0000A373                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000A378
.text$mn:0000A378 loc_A378:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+A4j
.text$mn:0000A378                 mov     eax, [ebp+var_4]
.text$mn:0000A37B                 cmp     eax, [ebp+arg_8]
.text$mn:0000A37E                 jz      short loc_A3E5
.text$mn:0000A380                 mov     ecx, [ebp+var_8]
.text$mn:0000A383                 push    ecx             ; int
.text$mn:0000A384                 mov     ecx, [ebp+var_4]
.text$mn:0000A387                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A38C                 mov     edx, [ebp+arg_0]
.text$mn:0000A38F                 lea     eax, [eax+edx*2]
.text$mn:0000A392                 mov     ecx, [ebp+arg_4]
.text$mn:0000A395                 lea     edx, [eax+ecx*2]
.text$mn:0000A398                 push    edx             ; Src
.text$mn:0000A399                 mov     ecx, [ebp+var_4]
.text$mn:0000A39C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A3A1                 mov     ecx, [ebp+arg_0]
.text$mn:0000A3A4                 lea     edx, [eax+ecx*2]
.text$mn:0000A3A7                 mov     eax, [ebp+arg_10]
.text$mn:0000A3AA                 lea     ecx, [edx+eax*2]
.text$mn:0000A3AD                 push    ecx             ; Dst
.text$mn:0000A3AE                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000A3B3                 add     esp, 0Ch
.text$mn:0000A3B6                 mov     edx, [ebp+arg_10]
.text$mn:0000A3B9                 push    edx             ; int
.text$mn:0000A3BA                 mov     ecx, [ebp+arg_8]
.text$mn:0000A3BD                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A3C2                 mov     ecx, [ebp+arg_C]
.text$mn:0000A3C5                 lea     edx, [eax+ecx*2]
.text$mn:0000A3C8                 push    edx             ; Src
.text$mn:0000A3C9                 mov     ecx, [ebp+var_4]
.text$mn:0000A3CC                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A3D1                 mov     ecx, [ebp+arg_0]
.text$mn:0000A3D4                 lea     edx, [eax+ecx*2]
.text$mn:0000A3D7                 push    edx             ; Dst
.text$mn:0000A3D8                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000A3DD                 add     esp, 0Ch
.text$mn:0000A3E0                 jmp     loc_A5CE
.text$mn:0000A3E5 ; ---------------------------------------------------------------------------
.text$mn:0000A3E5
.text$mn:0000A3E5 loc_A3E5:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+BAj
.text$mn:0000A3E5                 mov     eax, [ebp+arg_10]
.text$mn:0000A3E8                 cmp     eax, [ebp+arg_4]
.text$mn:0000A3EB                 ja      short loc_A452
.text$mn:0000A3ED                 mov     ecx, [ebp+arg_10]
.text$mn:0000A3F0                 push    ecx             ; int
.text$mn:0000A3F1                 mov     ecx, [ebp+var_4]
.text$mn:0000A3F4                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A3F9                 mov     edx, [ebp+arg_C]
.text$mn:0000A3FC                 lea     eax, [eax+edx*2]
.text$mn:0000A3FF                 push    eax             ; Src
.text$mn:0000A400                 mov     ecx, [ebp+var_4]
.text$mn:0000A403                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A408                 mov     ecx, [ebp+arg_0]
.text$mn:0000A40B                 lea     edx, [eax+ecx*2]
.text$mn:0000A40E                 push    edx             ; Dst
.text$mn:0000A40F                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000A414                 add     esp, 0Ch
.text$mn:0000A417                 mov     eax, [ebp+var_8]
.text$mn:0000A41A                 push    eax             ; int
.text$mn:0000A41B                 mov     ecx, [ebp+var_4]
.text$mn:0000A41E                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A423                 mov     ecx, [ebp+arg_0]
.text$mn:0000A426                 lea     edx, [eax+ecx*2]
.text$mn:0000A429                 mov     eax, [ebp+arg_4]
.text$mn:0000A42C                 lea     ecx, [edx+eax*2]
.text$mn:0000A42F                 push    ecx             ; Src
.text$mn:0000A430                 mov     ecx, [ebp+var_4]
.text$mn:0000A433                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A438                 mov     edx, [ebp+arg_0]
.text$mn:0000A43B                 lea     eax, [eax+edx*2]
.text$mn:0000A43E                 mov     ecx, [ebp+arg_10]
.text$mn:0000A441                 lea     edx, [eax+ecx*2]
.text$mn:0000A444                 push    edx             ; Dst
.text$mn:0000A445                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000A44A                 add     esp, 0Ch
.text$mn:0000A44D                 jmp     loc_A5CE
.text$mn:0000A452 ; ---------------------------------------------------------------------------
.text$mn:0000A452
.text$mn:0000A452 loc_A452:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+127j
.text$mn:0000A452                 mov     eax, [ebp+arg_C]
.text$mn:0000A455                 cmp     eax, [ebp+arg_0]
.text$mn:0000A458                 ja      short loc_A4BF
.text$mn:0000A45A                 mov     ecx, [ebp+var_8]
.text$mn:0000A45D                 push    ecx             ; int
.text$mn:0000A45E                 mov     ecx, [ebp+var_4]
.text$mn:0000A461                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A466                 mov     edx, [ebp+arg_0]
.text$mn:0000A469                 lea     eax, [eax+edx*2]
.text$mn:0000A46C                 mov     ecx, [ebp+arg_4]
.text$mn:0000A46F                 lea     edx, [eax+ecx*2]
.text$mn:0000A472                 push    edx             ; Src
.text$mn:0000A473                 mov     ecx, [ebp+var_4]
.text$mn:0000A476                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A47B                 mov     ecx, [ebp+arg_0]
.text$mn:0000A47E                 lea     edx, [eax+ecx*2]
.text$mn:0000A481                 mov     eax, [ebp+arg_10]
.text$mn:0000A484                 lea     ecx, [edx+eax*2]
.text$mn:0000A487                 push    ecx             ; Dst
.text$mn:0000A488                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000A48D                 add     esp, 0Ch
.text$mn:0000A490                 mov     edx, [ebp+arg_10]
.text$mn:0000A493                 push    edx             ; int
.text$mn:0000A494                 mov     ecx, [ebp+var_4]
.text$mn:0000A497                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A49C                 mov     ecx, [ebp+arg_C]
.text$mn:0000A49F                 lea     edx, [eax+ecx*2]
.text$mn:0000A4A2                 push    edx             ; Src
.text$mn:0000A4A3                 mov     ecx, [ebp+var_4]
.text$mn:0000A4A6                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A4AB                 mov     ecx, [ebp+arg_0]
.text$mn:0000A4AE                 lea     edx, [eax+ecx*2]
.text$mn:0000A4B1                 push    edx             ; Dst
.text$mn:0000A4B2                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000A4B7                 add     esp, 0Ch
.text$mn:0000A4BA                 jmp     loc_A5CE
.text$mn:0000A4BF ; ---------------------------------------------------------------------------
.text$mn:0000A4BF
.text$mn:0000A4BF loc_A4BF:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+194j
.text$mn:0000A4BF                 mov     eax, [ebp+arg_0]
.text$mn:0000A4C2                 add     eax, [ebp+arg_4]
.text$mn:0000A4C5                 cmp     eax, [ebp+arg_C]
.text$mn:0000A4C8                 ja      short loc_A535
.text$mn:0000A4CA                 mov     ecx, [ebp+var_8]
.text$mn:0000A4CD                 push    ecx             ; int
.text$mn:0000A4CE                 mov     ecx, [ebp+var_4]
.text$mn:0000A4D1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A4D6                 mov     edx, [ebp+arg_0]
.text$mn:0000A4D9                 lea     eax, [eax+edx*2]
.text$mn:0000A4DC                 mov     ecx, [ebp+arg_4]
.text$mn:0000A4DF                 lea     edx, [eax+ecx*2]
.text$mn:0000A4E2                 push    edx             ; Src
.text$mn:0000A4E3                 mov     ecx, [ebp+var_4]
.text$mn:0000A4E6                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A4EB                 mov     ecx, [ebp+arg_0]
.text$mn:0000A4EE                 lea     edx, [eax+ecx*2]
.text$mn:0000A4F1                 mov     eax, [ebp+arg_10]
.text$mn:0000A4F4                 lea     ecx, [edx+eax*2]
.text$mn:0000A4F7                 push    ecx             ; Dst
.text$mn:0000A4F8                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000A4FD                 add     esp, 0Ch
.text$mn:0000A500                 mov     edx, [ebp+arg_10]
.text$mn:0000A503                 push    edx             ; int
.text$mn:0000A504                 mov     ecx, [ebp+var_4]
.text$mn:0000A507                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A50C                 mov     ecx, [ebp+arg_C]
.text$mn:0000A50F                 add     ecx, [ebp+arg_10]
.text$mn:0000A512                 sub     ecx, [ebp+arg_4]
.text$mn:0000A515                 lea     edx, [eax+ecx*2]
.text$mn:0000A518                 push    edx             ; Src
.text$mn:0000A519                 mov     ecx, [ebp+var_4]
.text$mn:0000A51C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A521                 mov     ecx, [ebp+arg_0]
.text$mn:0000A524                 lea     edx, [eax+ecx*2]
.text$mn:0000A527                 push    edx             ; Dst
.text$mn:0000A528                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000A52D                 add     esp, 0Ch
.text$mn:0000A530                 jmp     loc_A5CE
.text$mn:0000A535 ; ---------------------------------------------------------------------------
.text$mn:0000A535
.text$mn:0000A535 loc_A535:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+204j
.text$mn:0000A535                 mov     eax, [ebp+arg_4]
.text$mn:0000A538                 push    eax             ; int
.text$mn:0000A539                 mov     ecx, [ebp+var_4]
.text$mn:0000A53C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A541                 mov     ecx, [ebp+arg_C]
.text$mn:0000A544                 lea     edx, [eax+ecx*2]
.text$mn:0000A547                 push    edx             ; Src
.text$mn:0000A548                 mov     ecx, [ebp+var_4]
.text$mn:0000A54B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A550                 mov     ecx, [ebp+arg_0]
.text$mn:0000A553                 lea     edx, [eax+ecx*2]
.text$mn:0000A556                 push    edx             ; Dst
.text$mn:0000A557                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000A55C                 add     esp, 0Ch
.text$mn:0000A55F                 mov     eax, [ebp+var_8]
.text$mn:0000A562                 push    eax             ; int
.text$mn:0000A563                 mov     ecx, [ebp+var_4]
.text$mn:0000A566                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A56B                 mov     ecx, [ebp+arg_0]
.text$mn:0000A56E                 lea     edx, [eax+ecx*2]
.text$mn:0000A571                 mov     eax, [ebp+arg_4]
.text$mn:0000A574                 lea     ecx, [edx+eax*2]
.text$mn:0000A577                 push    ecx             ; Src
.text$mn:0000A578                 mov     ecx, [ebp+var_4]
.text$mn:0000A57B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A580                 mov     edx, [ebp+arg_0]
.text$mn:0000A583                 lea     eax, [eax+edx*2]
.text$mn:0000A586                 mov     ecx, [ebp+arg_10]
.text$mn:0000A589                 lea     edx, [eax+ecx*2]
.text$mn:0000A58C                 push    edx             ; Dst
.text$mn:0000A58D                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000A592                 add     esp, 0Ch
.text$mn:0000A595                 mov     eax, [ebp+arg_10]
.text$mn:0000A598                 sub     eax, [ebp+arg_4]
.text$mn:0000A59B                 push    eax             ; int
.text$mn:0000A59C                 mov     ecx, [ebp+var_4]
.text$mn:0000A59F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A5A4                 mov     ecx, [ebp+arg_C]
.text$mn:0000A5A7                 lea     edx, [eax+ecx*2]
.text$mn:0000A5AA                 mov     eax, [ebp+arg_10]
.text$mn:0000A5AD                 lea     ecx, [edx+eax*2]
.text$mn:0000A5B0                 push    ecx             ; Src
.text$mn:0000A5B1                 mov     ecx, [ebp+var_4]
.text$mn:0000A5B4                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A5B9                 mov     edx, [ebp+arg_0]
.text$mn:0000A5BC                 lea     eax, [eax+edx*2]
.text$mn:0000A5BF                 mov     ecx, [ebp+arg_4]
.text$mn:0000A5C2                 lea     edx, [eax+ecx*2]
.text$mn:0000A5C5                 push    edx             ; Dst
.text$mn:0000A5C6                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000A5CB                 add     esp, 0Ch
.text$mn:0000A5CE
.text$mn:0000A5CE loc_A5CE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+11Cj
.text$mn:0000A5CE                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+189j ...
.text$mn:0000A5CE                 mov     eax, [ebp+var_C]
.text$mn:0000A5D1                 push    eax
.text$mn:0000A5D2                 mov     ecx, [ebp+var_4]
.text$mn:0000A5D5                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000A5DA                 mov     eax, [ebp+var_4]
.text$mn:0000A5DD                 mov     esp, ebp
.text$mn:0000A5DF                 pop     ebp
.text$mn:0000A5E0                 retn    14h
.text$mn:0000A5E0 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z endp
.text$mn:0000A5E0
.text$mn:0000A5E0 ; ---------------------------------------------------------------------------
.text$mn:0000A5E3                 align 4
.text$mn:0000A5E3 _text$mn        ends
.text$mn:0000A5E3
.text$mn:0000A5E4 ; ===========================================================================
.text$mn:0000A5E4
.text$mn:0000A5E4 ; Segment type: Pure code
.text$mn:0000A5E4 ; Segment permissions: Read/Execute
.text$mn:0000A5E4 _text$mn        segment para public 'CODE' use32
.text$mn:0000A5E4                 assume cs:_text$mn
.text$mn:0000A5E4                 ;org 0A5E4h
.text$mn:0000A5E4 ; COMDAT (pick any)
.text$mn:0000A5E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A5E4
.text$mn:0000A5E4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A5E4
.text$mn:0000A5E4 ; Attributes: bp-based frame
.text$mn:0000A5E4
.text$mn:0000A5E4 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(int, int, void *Src, int)
.text$mn:0000A5E4                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z
.text$mn:0000A5E4 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z proc near
.text$mn:0000A5E4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+201p
.text$mn:0000A5E4
.text$mn:0000A5E4 var_C           = dword ptr -0Ch
.text$mn:0000A5E4 var_8           = dword ptr -8
.text$mn:0000A5E4 var_4           = dword ptr -4
.text$mn:0000A5E4 arg_0           = dword ptr  8
.text$mn:0000A5E4 arg_4           = dword ptr  0Ch
.text$mn:0000A5E4 Src             = dword ptr  10h
.text$mn:0000A5E4 arg_C           = dword ptr  14h
.text$mn:0000A5E4
.text$mn:0000A5E4                 push    ebp
.text$mn:0000A5E5                 mov     ebp, esp
.text$mn:0000A5E7                 sub     esp, 0Ch
.text$mn:0000A5EA                 mov     [ebp+var_4], ecx
.text$mn:0000A5ED                 cmp     [ebp+arg_C], 0
.text$mn:0000A5F1                 jz      short loc_A609
.text$mn:0000A5F3                 push    5A9h            ; unsigned int
.text$mn:0000A5F8                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A5FD                 mov     eax, [ebp+Src]
.text$mn:0000A600                 push    eax             ; int
.text$mn:0000A601                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000A606                 add     esp, 0Ch
.text$mn:0000A609
.text$mn:0000A609 loc_A609:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+Dj
.text$mn:0000A609                 mov     ecx, [ebp+Src]
.text$mn:0000A60C                 push    ecx
.text$mn:0000A60D                 mov     ecx, [ebp+var_4]
.text$mn:0000A610                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:0000A615                 movzx   edx, al
.text$mn:0000A618                 test    edx, edx
.text$mn:0000A61A                 jz      short loc_A649
.text$mn:0000A61C                 mov     eax, [ebp+arg_C]
.text$mn:0000A61F                 push    eax
.text$mn:0000A620                 mov     ecx, [ebp+var_4]
.text$mn:0000A623                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A628                 mov     ecx, [ebp+Src]
.text$mn:0000A62B                 sub     ecx, eax
.text$mn:0000A62D                 sar     ecx, 1
.text$mn:0000A62F                 push    ecx
.text$mn:0000A630                 mov     edx, [ebp+var_4]
.text$mn:0000A633                 push    edx
.text$mn:0000A634                 mov     eax, [ebp+arg_4]
.text$mn:0000A637                 push    eax
.text$mn:0000A638                 mov     ecx, [ebp+arg_0]
.text$mn:0000A63B                 push    ecx
.text$mn:0000A63C                 mov     ecx, [ebp+var_4]
.text$mn:0000A63F                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000A644                 jmp     loc_A77E
.text$mn:0000A649 ; ---------------------------------------------------------------------------
.text$mn:0000A649
.text$mn:0000A649 loc_A649:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+36j
.text$mn:0000A649                 mov     edx, [ebp+var_4]
.text$mn:0000A64C                 mov     eax, [edx+14h]
.text$mn:0000A64F                 cmp     eax, [ebp+arg_0]
.text$mn:0000A652                 jnb     short loc_A65C
.text$mn:0000A654                 mov     ecx, [ebp+var_4]
.text$mn:0000A657                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000A65C
.text$mn:0000A65C loc_A65C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+6Ej
.text$mn:0000A65C                 mov     ecx, [ebp+var_4]
.text$mn:0000A65F                 mov     edx, [ecx+14h]
.text$mn:0000A662                 sub     edx, [ebp+arg_0]
.text$mn:0000A665                 cmp     edx, [ebp+arg_4]
.text$mn:0000A668                 jnb     short loc_A676
.text$mn:0000A66A                 mov     eax, [ebp+var_4]
.text$mn:0000A66D                 mov     ecx, [eax+14h]
.text$mn:0000A670                 sub     ecx, [ebp+arg_0]
.text$mn:0000A673                 mov     [ebp+arg_4], ecx
.text$mn:0000A676
.text$mn:0000A676 loc_A676:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+84j
.text$mn:0000A676                 or      edx, 0FFFFFFFFh
.text$mn:0000A679                 sub     edx, [ebp+arg_C]
.text$mn:0000A67C                 mov     eax, [ebp+var_4]
.text$mn:0000A67F                 mov     ecx, [eax+14h]
.text$mn:0000A682                 sub     ecx, [ebp+arg_4]
.text$mn:0000A685                 cmp     edx, ecx
.text$mn:0000A687                 ja      short loc_A691
.text$mn:0000A689                 mov     ecx, [ebp+var_4]
.text$mn:0000A68C                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000A691
.text$mn:0000A691 loc_A691:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+A3j
.text$mn:0000A691                 mov     edx, [ebp+var_4]
.text$mn:0000A694                 mov     eax, [edx+14h]
.text$mn:0000A697                 sub     eax, [ebp+arg_4]
.text$mn:0000A69A                 sub     eax, [ebp+arg_0]
.text$mn:0000A69D                 mov     [ebp+var_8], eax
.text$mn:0000A6A0                 mov     ecx, [ebp+arg_C]
.text$mn:0000A6A3                 cmp     ecx, [ebp+arg_4]
.text$mn:0000A6A6                 jnb     short loc_A6DE
.text$mn:0000A6A8                 mov     edx, [ebp+var_8]
.text$mn:0000A6AB                 push    edx             ; int
.text$mn:0000A6AC                 mov     ecx, [ebp+var_4]
.text$mn:0000A6AF                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A6B4                 mov     ecx, [ebp+arg_0]
.text$mn:0000A6B7                 lea     edx, [eax+ecx*2]
.text$mn:0000A6BA                 mov     eax, [ebp+arg_4]
.text$mn:0000A6BD                 lea     ecx, [edx+eax*2]
.text$mn:0000A6C0                 push    ecx             ; Src
.text$mn:0000A6C1                 mov     ecx, [ebp+var_4]
.text$mn:0000A6C4                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A6C9                 mov     edx, [ebp+arg_0]
.text$mn:0000A6CC                 lea     eax, [eax+edx*2]
.text$mn:0000A6CF                 mov     ecx, [ebp+arg_C]
.text$mn:0000A6D2                 lea     edx, [eax+ecx*2]
.text$mn:0000A6D5                 push    edx             ; Dst
.text$mn:0000A6D6                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000A6DB                 add     esp, 0Ch
.text$mn:0000A6DE
.text$mn:0000A6DE loc_A6DE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+C2j
.text$mn:0000A6DE                 cmp     [ebp+arg_C], 0
.text$mn:0000A6E2                 ja      short loc_A6EE
.text$mn:0000A6E4                 cmp     [ebp+arg_4], 0
.text$mn:0000A6E8                 jbe     loc_A77B
.text$mn:0000A6EE
.text$mn:0000A6EE loc_A6EE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+FEj
.text$mn:0000A6EE                 mov     eax, [ebp+var_4]
.text$mn:0000A6F1                 mov     ecx, [eax+14h]
.text$mn:0000A6F4                 add     ecx, [ebp+arg_C]
.text$mn:0000A6F7                 sub     ecx, [ebp+arg_4]
.text$mn:0000A6FA                 mov     [ebp+var_C], ecx
.text$mn:0000A6FD                 push    0
.text$mn:0000A6FF                 mov     edx, [ebp+var_C]
.text$mn:0000A702                 push    edx
.text$mn:0000A703                 mov     ecx, [ebp+var_4]
.text$mn:0000A706                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000A70B                 movzx   eax, al
.text$mn:0000A70E                 test    eax, eax
.text$mn:0000A710                 jz      short loc_A77B
.text$mn:0000A712                 mov     ecx, [ebp+arg_4]
.text$mn:0000A715                 cmp     ecx, [ebp+arg_C]
.text$mn:0000A718                 jnb     short loc_A750
.text$mn:0000A71A                 mov     edx, [ebp+var_8]
.text$mn:0000A71D                 push    edx             ; int
.text$mn:0000A71E                 mov     ecx, [ebp+var_4]
.text$mn:0000A721                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A726                 mov     ecx, [ebp+arg_0]
.text$mn:0000A729                 lea     edx, [eax+ecx*2]
.text$mn:0000A72C                 mov     eax, [ebp+arg_4]
.text$mn:0000A72F                 lea     ecx, [edx+eax*2]
.text$mn:0000A732                 push    ecx             ; Src
.text$mn:0000A733                 mov     ecx, [ebp+var_4]
.text$mn:0000A736                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A73B                 mov     edx, [ebp+arg_0]
.text$mn:0000A73E                 lea     eax, [eax+edx*2]
.text$mn:0000A741                 mov     ecx, [ebp+arg_C]
.text$mn:0000A744                 lea     edx, [eax+ecx*2]
.text$mn:0000A747                 push    edx             ; Dst
.text$mn:0000A748                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000A74D                 add     esp, 0Ch
.text$mn:0000A750
.text$mn:0000A750 loc_A750:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+134j
.text$mn:0000A750                 mov     eax, [ebp+arg_C]
.text$mn:0000A753                 push    eax             ; int
.text$mn:0000A754                 mov     ecx, [ebp+Src]
.text$mn:0000A757                 push    ecx             ; Src
.text$mn:0000A758                 mov     ecx, [ebp+var_4]
.text$mn:0000A75B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A760                 mov     edx, [ebp+arg_0]
.text$mn:0000A763                 lea     eax, [eax+edx*2]
.text$mn:0000A766                 push    eax             ; Dst
.text$mn:0000A767                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000A76C                 add     esp, 0Ch
.text$mn:0000A76F                 mov     ecx, [ebp+var_C]
.text$mn:0000A772                 push    ecx
.text$mn:0000A773                 mov     ecx, [ebp+var_4]
.text$mn:0000A776                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000A77B
.text$mn:0000A77B loc_A77B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+104j
.text$mn:0000A77B                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+12Cj
.text$mn:0000A77B                 mov     eax, [ebp+var_4]
.text$mn:0000A77E
.text$mn:0000A77E loc_A77E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+60j
.text$mn:0000A77E                 mov     esp, ebp
.text$mn:0000A780                 pop     ebp
.text$mn:0000A781                 retn    10h
.text$mn:0000A781 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z endp
.text$mn:0000A781
.text$mn:0000A781 _text$mn        ends
.text$mn:0000A781
.text$mn:0000A784 ; ===========================================================================
.text$mn:0000A784
.text$mn:0000A784 ; Segment type: Pure code
.text$mn:0000A784 ; Segment permissions: Read/Execute
.text$mn:0000A784 _text$mn        segment para public 'CODE' use32
.text$mn:0000A784                 assume cs:_text$mn
.text$mn:0000A784                 ;org 0A784h
.text$mn:0000A784 ; COMDAT (pick any)
.text$mn:0000A784                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A784
.text$mn:0000A784 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A784
.text$mn:0000A784 ; Attributes: bp-based frame
.text$mn:0000A784
.text$mn:0000A784 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::replace(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>)
.text$mn:0000A784                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.text$mn:0000A784 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z proc near
.text$mn:0000A784                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+E0p
.text$mn:0000A784
.text$mn:0000A784 var_AC          = byte ptr -0ACh
.text$mn:0000A784 var_A0          = byte ptr -0A0h
.text$mn:0000A784 var_94          = dword ptr -94h
.text$mn:0000A784 var_90          = dword ptr -90h
.text$mn:0000A784 var_8C          = dword ptr -8Ch
.text$mn:0000A784 var_88          = dword ptr -88h
.text$mn:0000A784 var_84          = dword ptr -84h
.text$mn:0000A784 var_80          = dword ptr -80h
.text$mn:0000A784 var_7C          = dword ptr -7Ch
.text$mn:0000A784 var_78          = dword ptr -78h
.text$mn:0000A784 var_74          = dword ptr -74h
.text$mn:0000A784 var_70          = dword ptr -70h
.text$mn:0000A784 var_6C          = dword ptr -6Ch
.text$mn:0000A784 var_68          = dword ptr -68h
.text$mn:0000A784 var_64          = dword ptr -64h
.text$mn:0000A784 var_60          = dword ptr -60h
.text$mn:0000A784 var_5C          = dword ptr -5Ch
.text$mn:0000A784 var_58          = dword ptr -58h
.text$mn:0000A784 var_54          = dword ptr -54h
.text$mn:0000A784 var_50          = dword ptr -50h
.text$mn:0000A784 var_4C          = dword ptr -4Ch
.text$mn:0000A784 var_48          = dword ptr -48h
.text$mn:0000A784 var_44          = dword ptr -44h
.text$mn:0000A784 var_40          = dword ptr -40h
.text$mn:0000A784 var_3C          = dword ptr -3Ch
.text$mn:0000A784 var_38          = dword ptr -38h
.text$mn:0000A784 var_34          = dword ptr -34h
.text$mn:0000A784 var_30          = dword ptr -30h
.text$mn:0000A784 var_2C          = dword ptr -2Ch
.text$mn:0000A784 var_28          = dword ptr -28h
.text$mn:0000A784 var_24          = dword ptr -24h
.text$mn:0000A784 var_20          = dword ptr -20h
.text$mn:0000A784 var_1C          = dword ptr -1Ch
.text$mn:0000A784 var_18          = dword ptr -18h
.text$mn:0000A784 var_14          = dword ptr -14h
.text$mn:0000A784 var_10          = dword ptr -10h
.text$mn:0000A784 var_C           = dword ptr -0Ch
.text$mn:0000A784 var_4           = dword ptr -4
.text$mn:0000A784 arg_0           = byte ptr  8
.text$mn:0000A784 arg_C           = byte ptr  14h
.text$mn:0000A784 arg_18          = byte ptr  20h
.text$mn:0000A784 arg_24          = byte ptr  2Ch
.text$mn:0000A784
.text$mn:0000A784                 push    ebp
.text$mn:0000A785                 mov     ebp, esp
.text$mn:0000A787                 push    0FFFFFFFFh
.text$mn:0000A789                 push    offset __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.text$mn:0000A78E                 mov     eax, large fs:0
.text$mn:0000A794                 push    eax
.text$mn:0000A795                 sub     esp, 0A0h
.text$mn:0000A79B                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000A7A0                 xor     eax, ebp
.text$mn:0000A7A2                 push    eax
.text$mn:0000A7A3                 lea     eax, [ebp+var_C]
.text$mn:0000A7A6                 mov     large fs:0, eax
.text$mn:0000A7AC                 mov     [ebp+var_10], ecx
.text$mn:0000A7AF                 mov     [ebp+var_4], 3
.text$mn:0000A7B6                 lea     eax, [ebp+arg_24]
.text$mn:0000A7B9                 push    eax             ; std::_Iterator_base12 *
.text$mn:0000A7BA                 lea     ecx, [ebp+arg_18]
.text$mn:0000A7BD                 call    ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000A7C2                 movzx   ecx, al
.text$mn:0000A7C5                 test    ecx, ecx
.text$mn:0000A7C7                 jz      loc_A8A9
.text$mn:0000A7CD                 sub     esp, 0Ch
.text$mn:0000A7D0                 mov     ecx, esp
.text$mn:0000A7D2                 mov     [ebp+var_58], esp
.text$mn:0000A7D5                 lea     edx, [ebp+arg_0]
.text$mn:0000A7D8                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000A7D9                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000A7DE                 mov     [ebp+var_54], eax
.text$mn:0000A7E1                 mov     eax, [ebp+var_54]
.text$mn:0000A7E4                 mov     [ebp+var_60], eax
.text$mn:0000A7E7                 mov     byte ptr [ebp+var_4], 4
.text$mn:0000A7EB                 sub     esp, 0Ch
.text$mn:0000A7EE                 mov     ecx, esp
.text$mn:0000A7F0                 mov     [ebp+var_80], esp
.text$mn:0000A7F3                 lea     edx, [ebp+arg_C]
.text$mn:0000A7F6                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000A7F7                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000A7FC                 mov     [ebp+var_38], eax
.text$mn:0000A7FF                 mov     eax, [ebp+var_38]
.text$mn:0000A802                 mov     [ebp+var_68], eax
.text$mn:0000A805                 mov     byte ptr [ebp+var_4], 5
.text$mn:0000A809                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000A80D                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000A812                 add     esp, 18h
.text$mn:0000A815                 mov     [ebp+var_20], eax
.text$mn:0000A818                 mov     ecx, [ebp+var_20]
.text$mn:0000A81B                 push    ecx
.text$mn:0000A81C                 lea     edx, [ebp+var_A0]
.text$mn:0000A822                 push    edx
.text$mn:0000A823                 mov     ecx, [ebp+var_10]
.text$mn:0000A826                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:0000A82B                 mov     [ebp+var_48], eax
.text$mn:0000A82E                 mov     eax, [ebp+var_48]
.text$mn:0000A831                 mov     [ebp+var_28], eax
.text$mn:0000A834                 mov     byte ptr [ebp+var_4], 6
.text$mn:0000A838                 sub     esp, 0Ch
.text$mn:0000A83B                 mov     ecx, esp
.text$mn:0000A83D                 mov     [ebp+var_90], esp
.text$mn:0000A843                 mov     edx, [ebp+var_28]
.text$mn:0000A846                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000A847                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000A84C                 mov     [ebp+var_40], eax
.text$mn:0000A84F                 mov     eax, [ebp+var_40]
.text$mn:0000A852                 mov     [ebp+var_70], eax
.text$mn:0000A855                 mov     byte ptr [ebp+var_4], 7
.text$mn:0000A859                 sub     esp, 0Ch
.text$mn:0000A85C                 mov     ecx, esp
.text$mn:0000A85E                 mov     [ebp+var_88], esp
.text$mn:0000A864                 lea     edx, [ebp+arg_0]
.text$mn:0000A867                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000A868                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000A86D                 mov     [ebp+var_30], eax
.text$mn:0000A870                 mov     eax, [ebp+var_30]
.text$mn:0000A873                 mov     [ebp+var_78], eax
.text$mn:0000A876                 mov     byte ptr [ebp+var_4], 8
.text$mn:0000A87A                 mov     byte ptr [ebp+var_4], 6
.text$mn:0000A87E                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000A883                 add     esp, 18h
.text$mn:0000A886                 mov     [ebp+var_50], eax
.text$mn:0000A889                 mov     ecx, [ebp+var_50]
.text$mn:0000A88C                 push    ecx
.text$mn:0000A88D                 mov     ecx, [ebp+var_10]
.text$mn:0000A890                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)
.text$mn:0000A895                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000A899                 lea     ecx, [ebp+var_A0]
.text$mn:0000A89F                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000A8A4                 jmp     loc_A999
.text$mn:0000A8A9 ; ---------------------------------------------------------------------------
.text$mn:0000A8A9
.text$mn:0000A8A9 loc_A8A9:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+43j
.text$mn:0000A8A9                 lea     edx, [ebp+arg_18]
.text$mn:0000A8AC                 push    edx             ; std::_Iterator_base12 *
.text$mn:0000A8AD                 lea     ecx, [ebp+arg_24]
.text$mn:0000A8B0                 call    ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000A8B5                 push    eax             ; int
.text$mn:0000A8B6                 lea     ecx, [ebp+arg_18]
.text$mn:0000A8B9                 call    ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)
.text$mn:0000A8BE                 push    eax             ; Src
.text$mn:0000A8BF                 sub     esp, 0Ch
.text$mn:0000A8C2                 mov     ecx, esp
.text$mn:0000A8C4                 mov     [ebp+var_94], esp
.text$mn:0000A8CA                 lea     eax, [ebp+arg_0]
.text$mn:0000A8CD                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:0000A8CE                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000A8D3                 mov     [ebp+var_18], eax
.text$mn:0000A8D6                 mov     ecx, [ebp+var_18]
.text$mn:0000A8D9                 mov     [ebp+var_5C], ecx
.text$mn:0000A8DC                 mov     byte ptr [ebp+var_4], 9
.text$mn:0000A8E0                 sub     esp, 0Ch
.text$mn:0000A8E3                 mov     ecx, esp
.text$mn:0000A8E5                 mov     [ebp+var_64], esp
.text$mn:0000A8E8                 lea     edx, [ebp+arg_C]
.text$mn:0000A8EB                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000A8EC                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000A8F1                 mov     [ebp+var_1C], eax
.text$mn:0000A8F4                 mov     eax, [ebp+var_1C]
.text$mn:0000A8F7                 mov     [ebp+var_6C], eax
.text$mn:0000A8FA                 mov     byte ptr [ebp+var_4], 0Ah
.text$mn:0000A8FE                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000A902                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000A907                 add     esp, 18h
.text$mn:0000A90A                 mov     [ebp+var_24], eax
.text$mn:0000A90D                 mov     ecx, [ebp+var_24]
.text$mn:0000A910                 push    ecx             ; int
.text$mn:0000A911                 lea     edx, [ebp+var_AC]
.text$mn:0000A917                 push    edx
.text$mn:0000A918                 mov     ecx, [ebp+var_10]
.text$mn:0000A91B                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:0000A920                 mov     [ebp+var_2C], eax
.text$mn:0000A923                 mov     eax, [ebp+var_2C]
.text$mn:0000A926                 mov     [ebp+var_34], eax
.text$mn:0000A929                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:0000A92D                 sub     esp, 0Ch
.text$mn:0000A930                 mov     ecx, esp
.text$mn:0000A932                 mov     [ebp+var_74], esp
.text$mn:0000A935                 mov     edx, [ebp+var_34]
.text$mn:0000A938                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000A939                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000A93E                 mov     [ebp+var_3C], eax
.text$mn:0000A941                 mov     eax, [ebp+var_3C]
.text$mn:0000A944                 mov     [ebp+var_7C], eax
.text$mn:0000A947                 mov     byte ptr [ebp+var_4], 0Ch
.text$mn:0000A94B                 sub     esp, 0Ch
.text$mn:0000A94E                 mov     ecx, esp
.text$mn:0000A950                 mov     [ebp+var_84], esp
.text$mn:0000A956                 lea     edx, [ebp+arg_0]
.text$mn:0000A959                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000A95A                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000A95F                 mov     [ebp+var_44], eax
.text$mn:0000A962                 mov     eax, [ebp+var_44]
.text$mn:0000A965                 mov     [ebp+var_8C], eax
.text$mn:0000A96B                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:0000A96F                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:0000A973                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000A978                 add     esp, 18h
.text$mn:0000A97B                 mov     [ebp+var_4C], eax
.text$mn:0000A97E                 mov     ecx, [ebp+var_4C]
.text$mn:0000A981                 push    ecx             ; int
.text$mn:0000A982                 mov     ecx, [ebp+var_10]
.text$mn:0000A985                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)
.text$mn:0000A98A                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000A98E                 lea     ecx, [ebp+var_AC]
.text$mn:0000A994                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000A999
.text$mn:0000A999 loc_A999:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+120j
.text$mn:0000A999                 mov     edx, [ebp+var_10]
.text$mn:0000A99C                 mov     [ebp+var_14], edx
.text$mn:0000A99F                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000A9A3                 lea     ecx, [ebp+arg_0]
.text$mn:0000A9A6                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000A9AB                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000A9AF                 lea     ecx, [ebp+arg_C]
.text$mn:0000A9B2                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000A9B7                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000A9BB                 lea     ecx, [ebp+arg_18]
.text$mn:0000A9BE                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000A9C3                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000A9CA                 lea     ecx, [ebp+arg_24]
.text$mn:0000A9CD                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000A9D2                 mov     eax, [ebp+var_14]
.text$mn:0000A9D5                 mov     ecx, [ebp+var_C]
.text$mn:0000A9D8                 mov     large fs:0, ecx
.text$mn:0000A9DF                 pop     ecx
.text$mn:0000A9E0                 mov     esp, ebp
.text$mn:0000A9E2                 pop     ebp
.text$mn:0000A9E3                 retn    30h
.text$mn:0000A9E3 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z endp
.text$mn:0000A9E3
.text$mn:0000A9E3 ; ---------------------------------------------------------------------------
.text$mn:0000A9E6                 align 4
.text$mn:0000A9E6 _text$mn        ends
.text$mn:0000A9E6
.text$x:0000A9E8 ; ===========================================================================
.text$x:0000A9E8
.text$x:0000A9E8 ; Segment type: Pure code
.text$x:0000A9E8 ; Segment permissions: Read/Execute
.text$x:0000A9E8 _text$x         segment para public 'CODE' use32
.text$x:0000A9E8                 assume cs:_text$x
.text$x:0000A9E8                 ;org 0A9E8h
.text$x:0000A9E8 ; COMDAT (pick associative to section at A784)
.text$x:0000A9E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A9E8
.text$x:0000A9E8 ; =============== S U B R O U T I N E =======================================
.text$x:0000A9E8
.text$x:0000A9E8
.text$x:0000A9E8 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$0 proc near
.text$x:0000A9E8                                         ; DATA XREF: .xdata$x:0000B5FCo
.text$x:0000A9E8                 lea     ecx, [ebp+2Ch]
.text$x:0000A9EB                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000A9EB __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$0 endp
.text$x:0000A9EB
.text$x:0000A9F0
.text$x:0000A9F0 ; =============== S U B R O U T I N E =======================================
.text$x:0000A9F0
.text$x:0000A9F0
.text$x:0000A9F0 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$1 proc near
.text$x:0000A9F0                                         ; DATA XREF: .xdata$x:0000B604o
.text$x:0000A9F0                 lea     ecx, [ebp+20h]
.text$x:0000A9F3                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000A9F3 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$1 endp
.text$x:0000A9F3
.text$x:0000A9F8
.text$x:0000A9F8 ; =============== S U B R O U T I N E =======================================
.text$x:0000A9F8
.text$x:0000A9F8
.text$x:0000A9F8 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$2 proc near
.text$x:0000A9F8                                         ; DATA XREF: .xdata$x:0000B60Co
.text$x:0000A9F8                 lea     ecx, [ebp+14h]
.text$x:0000A9FB                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000A9FB __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$2 endp
.text$x:0000A9FB
.text$x:0000AA00
.text$x:0000AA00 ; =============== S U B R O U T I N E =======================================
.text$x:0000AA00
.text$x:0000AA00
.text$x:0000AA00 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$3 proc near
.text$x:0000AA00                                         ; DATA XREF: .xdata$x:0000B614o
.text$x:0000AA00                 lea     ecx, [ebp+8]
.text$x:0000AA03                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000AA03 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$3 endp
.text$x:0000AA03
.text$x:0000AA08
.text$x:0000AA08 ; =============== S U B R O U T I N E =======================================
.text$x:0000AA08
.text$x:0000AA08
.text$x:0000AA08 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$4 proc near
.text$x:0000AA08                                         ; DATA XREF: .xdata$x:0000B61Co
.text$x:0000AA08                 mov     ecx, [ebp-58h]
.text$x:0000AA0B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000AA0B __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$4 endp
.text$x:0000AA0B
.text$x:0000AA10
.text$x:0000AA10 ; =============== S U B R O U T I N E =======================================
.text$x:0000AA10
.text$x:0000AA10
.text$x:0000AA10 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$5 proc near
.text$x:0000AA10                                         ; DATA XREF: .xdata$x:0000B624o
.text$x:0000AA10                 mov     ecx, [ebp-80h]
.text$x:0000AA13                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000AA13 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$5 endp
.text$x:0000AA13
.text$x:0000AA18
.text$x:0000AA18 ; =============== S U B R O U T I N E =======================================
.text$x:0000AA18
.text$x:0000AA18
.text$x:0000AA18 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$6 proc near
.text$x:0000AA18                                         ; DATA XREF: .xdata$x:0000B62Co
.text$x:0000AA18                 lea     ecx, [ebp-0A0h]
.text$x:0000AA1E                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000AA1E __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$6 endp
.text$x:0000AA1E
.text$x:0000AA23
.text$x:0000AA23 ; =============== S U B R O U T I N E =======================================
.text$x:0000AA23
.text$x:0000AA23
.text$x:0000AA23 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$7 proc near
.text$x:0000AA23                                         ; DATA XREF: .xdata$x:0000B634o
.text$x:0000AA23                 mov     ecx, [ebp-90h]
.text$x:0000AA29                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000AA29 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$7 endp
.text$x:0000AA29
.text$x:0000AA2E
.text$x:0000AA2E ; =============== S U B R O U T I N E =======================================
.text$x:0000AA2E
.text$x:0000AA2E
.text$x:0000AA2E __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$8 proc near
.text$x:0000AA2E                                         ; DATA XREF: .xdata$x:0000B63Co
.text$x:0000AA2E                 mov     ecx, [ebp-88h]
.text$x:0000AA34                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000AA34 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$8 endp
.text$x:0000AA34
.text$x:0000AA39
.text$x:0000AA39 ; =============== S U B R O U T I N E =======================================
.text$x:0000AA39
.text$x:0000AA39
.text$x:0000AA39 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$9 proc near
.text$x:0000AA39                                         ; DATA XREF: .xdata$x:0000B644o
.text$x:0000AA39                 mov     ecx, [ebp-94h]
.text$x:0000AA3F                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000AA3F __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$9 endp
.text$x:0000AA3F
.text$x:0000AA44
.text$x:0000AA44 ; =============== S U B R O U T I N E =======================================
.text$x:0000AA44
.text$x:0000AA44
.text$x:0000AA44 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$10 proc near
.text$x:0000AA44                                         ; DATA XREF: .xdata$x:0000B64Co
.text$x:0000AA44                 mov     ecx, [ebp-64h]
.text$x:0000AA47                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000AA47 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$10 endp
.text$x:0000AA47
.text$x:0000AA4C
.text$x:0000AA4C ; =============== S U B R O U T I N E =======================================
.text$x:0000AA4C
.text$x:0000AA4C
.text$x:0000AA4C __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$11 proc near
.text$x:0000AA4C                                         ; DATA XREF: .xdata$x:0000B654o
.text$x:0000AA4C                 lea     ecx, [ebp-0ACh]
.text$x:0000AA52                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000AA52 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$11 endp
.text$x:0000AA52
.text$x:0000AA57
.text$x:0000AA57 ; =============== S U B R O U T I N E =======================================
.text$x:0000AA57
.text$x:0000AA57
.text$x:0000AA57 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$12 proc near
.text$x:0000AA57                                         ; DATA XREF: .xdata$x:0000B65Co
.text$x:0000AA57                 mov     ecx, [ebp-74h]
.text$x:0000AA5A                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000AA5A __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$12 endp
.text$x:0000AA5A
.text$x:0000AA5F
.text$x:0000AA5F ; =============== S U B R O U T I N E =======================================
.text$x:0000AA5F
.text$x:0000AA5F
.text$x:0000AA5F __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$13 proc near
.text$x:0000AA5F                                         ; DATA XREF: .xdata$x:0000B664o
.text$x:0000AA5F                 mov     ecx, [ebp-84h]
.text$x:0000AA65                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000AA65 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$13 endp
.text$x:0000AA65
.text$x:0000AA6A
.text$x:0000AA6A ; =============== S U B R O U T I N E =======================================
.text$x:0000AA6A
.text$x:0000AA6A
.text$x:0000AA6A __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z proc near
.text$x:0000AA6A                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+5o
.text$x:0000AA6A
.text$x:0000AA6A arg_4           = dword ptr  8
.text$x:0000AA6A
.text$x:0000AA6A                 mov     edx, [esp+arg_4]
.text$x:0000AA6E                 lea     eax, [edx+0Ch]
.text$x:0000AA71                 mov     ecx, [edx-0A4h]
.text$x:0000AA77                 xor     ecx, eax
.text$x:0000AA79                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000AA7E                 mov     eax, offset __ehfuncinfo$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.text$x:0000AA83                 jmp     ___CxxFrameHandler3
.text$x:0000AA83 __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z endp
.text$x:0000AA83
.text$x:0000AA83 _text$x         ends
.text$x:0000AA83
.text$mn:0000AA88 ; ===========================================================================
.text$mn:0000AA88
.text$mn:0000AA88 ; Segment type: Pure code
.text$mn:0000AA88 ; Segment permissions: Read/Execute
.text$mn:0000AA88 _text$mn        segment para public 'CODE' use32
.text$mn:0000AA88                 assume cs:_text$mn
.text$mn:0000AA88                 ;org 0AA88h
.text$mn:0000AA88 ; COMDAT (pick any)
.text$mn:0000AA88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AA88
.text$mn:0000AA88 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AA88
.text$mn:0000AA88 ; Attributes: bp-based frame
.text$mn:0000AA88
.text$mn:0000AA88 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::reserve(unsigned int)
.text$mn:0000AA88                 public ?reserve@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
.text$mn:0000AA88 ?reserve@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z proc near
.text$mn:0000AA88                                         ; CODE XREF: std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+5Bp
.text$mn:0000AA88
.text$mn:0000AA88 var_8           = dword ptr -8
.text$mn:0000AA88 var_4           = dword ptr -4
.text$mn:0000AA88 arg_0           = dword ptr  8
.text$mn:0000AA88
.text$mn:0000AA88                 push    ebp
.text$mn:0000AA89                 mov     ebp, esp
.text$mn:0000AA8B                 sub     esp, 8
.text$mn:0000AA8E                 mov     [ebp+var_4], ecx
.text$mn:0000AA91                 mov     eax, [ebp+var_4]
.text$mn:0000AA94                 mov     ecx, [eax+14h]
.text$mn:0000AA97                 cmp     ecx, [ebp+arg_0]
.text$mn:0000AA9A                 ja      short loc_AAD1
.text$mn:0000AA9C                 mov     edx, [ebp+var_4]
.text$mn:0000AA9F                 mov     eax, [edx+18h]
.text$mn:0000AAA2                 cmp     eax, [ebp+arg_0]
.text$mn:0000AAA5                 jz      short loc_AAD1
.text$mn:0000AAA7                 mov     ecx, [ebp+var_4]
.text$mn:0000AAAA                 mov     edx, [ecx+14h]
.text$mn:0000AAAD                 mov     [ebp+var_8], edx
.text$mn:0000AAB0                 push    1
.text$mn:0000AAB2                 mov     eax, [ebp+arg_0]
.text$mn:0000AAB5                 push    eax
.text$mn:0000AAB6                 mov     ecx, [ebp+var_4]
.text$mn:0000AAB9                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000AABE                 movzx   ecx, al
.text$mn:0000AAC1                 test    ecx, ecx
.text$mn:0000AAC3                 jz      short loc_AAD1
.text$mn:0000AAC5                 mov     edx, [ebp+var_8]
.text$mn:0000AAC8                 push    edx
.text$mn:0000AAC9                 mov     ecx, [ebp+var_4]
.text$mn:0000AACC                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000AAD1
.text$mn:0000AAD1 loc_AAD1:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::reserve(uint)+12j
.text$mn:0000AAD1                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::reserve(uint)+1Dj ...
.text$mn:0000AAD1                 mov     esp, ebp
.text$mn:0000AAD3                 pop     ebp
.text$mn:0000AAD4                 retn    4
.text$mn:0000AAD4 ?reserve@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z endp
.text$mn:0000AAD4
.text$mn:0000AAD4 ; ---------------------------------------------------------------------------
.text$mn:0000AAD7                 align 4
.text$mn:0000AAD7 _text$mn        ends
.text$mn:0000AAD7
.text$mn:0000AAD8 ; ===========================================================================
.text$mn:0000AAD8
.text$mn:0000AAD8 ; Segment type: Pure code
.text$mn:0000AAD8 ; Segment permissions: Read/Execute
.text$mn:0000AAD8 _text$mn        segment para public 'CODE' use32
.text$mn:0000AAD8                 assume cs:_text$mn
.text$mn:0000AAD8                 ;org 0AAD8h
.text$mn:0000AAD8 ; COMDAT (pick any)
.text$mn:0000AAD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AAD8
.text$mn:0000AAD8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AAD8
.text$mn:0000AAD8 ; Attributes: bp-based frame
.text$mn:0000AAD8
.text$mn:0000AAD8 ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::select_on_container_copy_construction(void)const
.text$mn:0000AAD8                 public ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ
.text$mn:0000AAD8 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ proc near
.text$mn:0000AAD8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+3Ap
.text$mn:0000AAD8
.text$mn:0000AAD8 var_8           = dword ptr -8
.text$mn:0000AAD8 var_1           = byte ptr -1
.text$mn:0000AAD8 arg_0           = dword ptr  8
.text$mn:0000AAD8
.text$mn:0000AAD8                 push    ebp
.text$mn:0000AAD9                 mov     ebp, esp
.text$mn:0000AADB                 sub     esp, 8
.text$mn:0000AADE                 mov     [ebp+var_8], ecx
.text$mn:0000AAE1                 mov     eax, [ebp+var_8]
.text$mn:0000AAE4                 push    eax
.text$mn:0000AAE5                 lea     ecx, [ebp+var_1]
.text$mn:0000AAE8                 push    ecx
.text$mn:0000AAE9                 call    ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ; std::allocator_traits<std::allocator<wchar_t>>::select_on_container_copy_construction(std::allocator<wchar_t> const &)
.text$mn:0000AAEE                 add     esp, 8
.text$mn:0000AAF1                 push    eax
.text$mn:0000AAF2                 mov     ecx, [ebp+arg_0]
.text$mn:0000AAF5                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(std::allocator<wchar_t> const &)
.text$mn:0000AAFA                 mov     eax, [ebp+arg_0]
.text$mn:0000AAFD                 mov     esp, ebp
.text$mn:0000AAFF                 pop     ebp
.text$mn:0000AB00                 retn    4
.text$mn:0000AB00 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ endp
.text$mn:0000AB00
.text$mn:0000AB00 ; ---------------------------------------------------------------------------
.text$mn:0000AB03                 align 4
.text$mn:0000AB03 _text$mn        ends
.text$mn:0000AB03
.text$mn:0000AB04 ; ===========================================================================
.text$mn:0000AB04
.text$mn:0000AB04 ; Segment type: Pure code
.text$mn:0000AB04 ; Segment permissions: Read/Execute
.text$mn:0000AB04 _text$mn        segment para public 'CODE' use32
.text$mn:0000AB04                 assume cs:_text$mn
.text$mn:0000AB04                 ;org 0AB04h
.text$mn:0000AB04 ; COMDAT (pick any)
.text$mn:0000AB04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AB04
.text$mn:0000AB04 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AB04
.text$mn:0000AB04 ; Attributes: bp-based frame
.text$mn:0000AB04
.text$mn:0000AB04 ; public: class std::allocator<wchar_t> __thiscall std::allocator<wchar_t>::select_on_container_copy_construction(void)const
.text$mn:0000AB04                 public ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ
.text$mn:0000AB04 ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ proc near
.text$mn:0000AB04                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::select_on_container_copy_construction(std::allocator<wchar_t> const &)+Ap
.text$mn:0000AB04
.text$mn:0000AB04 var_4           = dword ptr -4
.text$mn:0000AB04 arg_0           = dword ptr  8
.text$mn:0000AB04
.text$mn:0000AB04                 push    ebp
.text$mn:0000AB05                 mov     ebp, esp
.text$mn:0000AB07                 push    ecx
.text$mn:0000AB08                 mov     [ebp+var_4], ecx
.text$mn:0000AB0B                 mov     eax, [ebp+var_4]
.text$mn:0000AB0E                 push    eax
.text$mn:0000AB0F                 mov     ecx, [ebp+arg_0]
.text$mn:0000AB12                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:0000AB17                 mov     eax, [ebp+arg_0]
.text$mn:0000AB1A                 mov     esp, ebp
.text$mn:0000AB1C                 pop     ebp
.text$mn:0000AB1D                 retn    4
.text$mn:0000AB1D ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ endp
.text$mn:0000AB1D
.text$mn:0000AB1D _text$mn        ends
.text$mn:0000AB1D
.text$mn:0000AB20 ; ===========================================================================
.text$mn:0000AB20
.text$mn:0000AB20 ; Segment type: Pure code
.text$mn:0000AB20 ; Segment permissions: Read/Execute
.text$mn:0000AB20 _text$mn        segment para public 'CODE' use32
.text$mn:0000AB20                 assume cs:_text$mn
.text$mn:0000AB20                 ;org 0AB20h
.text$mn:0000AB20 ; COMDAT (pick any)
.text$mn:0000AB20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AB20
.text$mn:0000AB20 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AB20
.text$mn:0000AB20 ; Attributes: bp-based frame
.text$mn:0000AB20
.text$mn:0000AB20 ; public: static class std::allocator<wchar_t> __cdecl std::allocator_traits<class std::allocator<wchar_t>>::select_on_container_copy_construction(class std::allocator<wchar_t> const &)
.text$mn:0000AB20                 public ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z
.text$mn:0000AB20 ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z proc near
.text$mn:0000AB20                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)+11p
.text$mn:0000AB20
.text$mn:0000AB20 arg_0           = dword ptr  8
.text$mn:0000AB20 arg_4           = dword ptr  0Ch
.text$mn:0000AB20
.text$mn:0000AB20                 push    ebp
.text$mn:0000AB21                 mov     ebp, esp
.text$mn:0000AB23                 mov     eax, [ebp+arg_0]
.text$mn:0000AB26                 push    eax
.text$mn:0000AB27                 mov     ecx, [ebp+arg_4]
.text$mn:0000AB2A                 call    ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ ; std::allocator<wchar_t>::select_on_container_copy_construction(void)
.text$mn:0000AB2F                 mov     eax, [ebp+arg_0]
.text$mn:0000AB32                 pop     ebp
.text$mn:0000AB33                 retn
.text$mn:0000AB33 ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z endp
.text$mn:0000AB33
.text$mn:0000AB33 _text$mn        ends
.text$mn:0000AB33
.text$mn:0000AB34 ; ===========================================================================
.text$mn:0000AB34
.text$mn:0000AB34 ; Segment type: Pure code
.text$mn:0000AB34 ; Segment permissions: Read/Execute
.text$mn:0000AB34 _text$mn        segment para public 'CODE' use32
.text$mn:0000AB34                 assume cs:_text$mn
.text$mn:0000AB34                 ;org 0AB34h
.text$mn:0000AB34 ; COMDAT (pick any)
.text$mn:0000AB34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AB34
.text$mn:0000AB34 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AB34
.text$mn:0000AB34 ; Attributes: bp-based frame
.text$mn:0000AB34
.text$mn:0000AB34 ; public: void __thiscall NppParameters::setStartWithLocFileName(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>)
.text$mn:0000AB34                 public ?setStartWithLocFileName@NppParameters@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$mn:0000AB34 ?setStartWithLocFileName@NppParameters@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z proc near
.text$mn:0000AB34                                         ; CODE XREF: WinMain(x,x,x,x)+37Ep
.text$mn:0000AB34
.text$mn:0000AB34 var_10          = dword ptr -10h
.text$mn:0000AB34 var_C           = dword ptr -0Ch
.text$mn:0000AB34 var_4           = dword ptr -4
.text$mn:0000AB34 arg_0           = byte ptr  8
.text$mn:0000AB34
.text$mn:0000AB34                 push    ebp
.text$mn:0000AB35                 mov     ebp, esp
.text$mn:0000AB37                 push    0FFFFFFFFh
.text$mn:0000AB39                 push    offset __ehhandler$?setStartWithLocFileName@NppParameters@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$mn:0000AB3E                 mov     eax, large fs:0
.text$mn:0000AB44                 push    eax
.text$mn:0000AB45                 push    ecx
.text$mn:0000AB46                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000AB4B                 xor     eax, ebp
.text$mn:0000AB4D                 push    eax
.text$mn:0000AB4E                 lea     eax, [ebp+var_C]
.text$mn:0000AB51                 mov     large fs:0, eax
.text$mn:0000AB57                 mov     [ebp+var_10], ecx
.text$mn:0000AB5A                 mov     [ebp+var_4], 0
.text$mn:0000AB61                 lea     eax, [ebp+arg_0]
.text$mn:0000AB64                 push    eax
.text$mn:0000AB65                 mov     ecx, [ebp+var_10]
.text$mn:0000AB68                 add     ecx, 1C9CCh
.text$mn:0000AB6E                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000AB73                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000AB7A                 lea     ecx, [ebp+arg_0]
.text$mn:0000AB7D                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000AB82                 mov     ecx, [ebp+var_C]
.text$mn:0000AB85                 mov     large fs:0, ecx
.text$mn:0000AB8C                 pop     ecx
.text$mn:0000AB8D                 mov     esp, ebp
.text$mn:0000AB8F                 pop     ebp
.text$mn:0000AB90                 retn    1Ch
.text$mn:0000AB90 ?setStartWithLocFileName@NppParameters@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z endp
.text$mn:0000AB90
.text$mn:0000AB90 ; ---------------------------------------------------------------------------
.text$mn:0000AB93                 align 4
.text$mn:0000AB93 _text$mn        ends
.text$mn:0000AB93
.text$x:0000AB94 ; ===========================================================================
.text$x:0000AB94
.text$x:0000AB94 ; Segment type: Pure code
.text$x:0000AB94 ; Segment permissions: Read/Execute
.text$x:0000AB94 _text$x         segment para public 'CODE' use32
.text$x:0000AB94                 assume cs:_text$x
.text$x:0000AB94                 ;org 0AB94h
.text$x:0000AB94 ; COMDAT (pick associative to section at AB34)
.text$x:0000AB94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000AB94
.text$x:0000AB94 ; =============== S U B R O U T I N E =======================================
.text$x:0000AB94
.text$x:0000AB94
.text$x:0000AB94 __unwindfunclet$?setStartWithLocFileName@NppParameters@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0 proc near
.text$x:0000AB94                                         ; DATA XREF: .xdata$x:0000B818o
.text$x:0000AB94                 lea     ecx, [ebp+8]
.text$x:0000AB97                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000AB97 __unwindfunclet$?setStartWithLocFileName@NppParameters@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0 endp
.text$x:0000AB97
.text$x:0000AB9C
.text$x:0000AB9C ; =============== S U B R O U T I N E =======================================
.text$x:0000AB9C
.text$x:0000AB9C
.text$x:0000AB9C __ehhandler$?setStartWithLocFileName@NppParameters@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z proc near
.text$x:0000AB9C                                         ; DATA XREF: NppParameters::setStartWithLocFileName(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+5o
.text$x:0000AB9C
.text$x:0000AB9C arg_4           = dword ptr  8
.text$x:0000AB9C
.text$x:0000AB9C                 mov     edx, [esp+arg_4]
.text$x:0000ABA0                 lea     eax, [edx+0Ch]
.text$x:0000ABA3                 mov     ecx, [edx-8]
.text$x:0000ABA6                 xor     ecx, eax
.text$x:0000ABA8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000ABAD                 mov     eax, offset __ehfuncinfo$?setStartWithLocFileName@NppParameters@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$x:0000ABB2                 jmp     ___CxxFrameHandler3
.text$x:0000ABB2 __ehhandler$?setStartWithLocFileName@NppParameters@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z endp
.text$x:0000ABB2
.text$x:0000ABB2 ; ---------------------------------------------------------------------------
.text$x:0000ABB7                 align 4
.text$x:0000ABB7 _text$x         ends
.text$x:0000ABB7
.text$mn:0000ABB8 ; ===========================================================================
.text$mn:0000ABB8
.text$mn:0000ABB8 ; Segment type: Pure code
.text$mn:0000ABB8 ; Segment permissions: Read/Execute
.text$mn:0000ABB8 _text$mn        segment para public 'CODE' use32
.text$mn:0000ABB8                 assume cs:_text$mn
.text$mn:0000ABB8                 ;org 0ABB8h
.text$mn:0000ABB8 ; COMDAT (pick any)
.text$mn:0000ABB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ABB8
.text$mn:0000ABB8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ABB8
.text$mn:0000ABB8 ; Attributes: bp-based frame
.text$mn:0000ABB8
.text$mn:0000ABB8 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::size(void)const
.text$mn:0000ABB8                 public ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:0000ABB8 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:0000ABB8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+Cp
.text$mn:0000ABB8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+21p
.text$mn:0000ABB8
.text$mn:0000ABB8 var_4           = dword ptr -4
.text$mn:0000ABB8
.text$mn:0000ABB8                 push    ebp
.text$mn:0000ABB9                 mov     ebp, esp
.text$mn:0000ABBB                 push    ecx
.text$mn:0000ABBC                 mov     [ebp+var_4], ecx
.text$mn:0000ABBF                 mov     eax, [ebp+var_4]
.text$mn:0000ABC2                 mov     eax, [eax+14h]
.text$mn:0000ABC5                 mov     esp, ebp
.text$mn:0000ABC7                 pop     ebp
.text$mn:0000ABC8                 retn
.text$mn:0000ABC8 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:0000ABC8
.text$mn:0000ABC8 ; ---------------------------------------------------------------------------
.text$mn:0000ABC9                 align 4
.text$mn:0000ABC9 _text$mn        ends
.text$mn:0000ABC9
.text$mn:0000ABCC ; ===========================================================================
.text$mn:0000ABCC
.text$mn:0000ABCC ; Segment type: Pure code
.text$mn:0000ABCC ; Segment permissions: Read/Execute
.text$mn:0000ABCC _text$mn        segment para public 'CODE' use32
.text$mn:0000ABCC                 assume cs:_text$mn
.text$mn:0000ABCC                 ;org 0ABCCh
.text$mn:0000ABCC ; COMDAT (pick any)
.text$mn:0000ABCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ABCC
.text$mn:0000ABCC ; =============== S U B R O U T I N E =======================================
.text$mn:0000ABCC
.text$mn:0000ABCC ; Attributes: bp-based frame
.text$mn:0000ABCC
.text$mn:0000ABCC ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::size(void)const
.text$mn:0000ABCC                 public ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:0000ABCC ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:0000ABCC                                         ; CODE XREF: std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+42p
.text$mn:0000ABCC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+Cp ...
.text$mn:0000ABCC
.text$mn:0000ABCC var_4           = dword ptr -4
.text$mn:0000ABCC
.text$mn:0000ABCC                 push    ebp
.text$mn:0000ABCD                 mov     ebp, esp
.text$mn:0000ABCF                 push    ecx
.text$mn:0000ABD0                 mov     [ebp+var_4], ecx
.text$mn:0000ABD3                 mov     eax, [ebp+var_4]
.text$mn:0000ABD6                 mov     eax, [eax+14h]
.text$mn:0000ABD9                 mov     esp, ebp
.text$mn:0000ABDB                 pop     ebp
.text$mn:0000ABDC                 retn
.text$mn:0000ABDC ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:0000ABDC
.text$mn:0000ABDC ; ---------------------------------------------------------------------------
.text$mn:0000ABDD                 align 10h
.text$mn:0000ABDD _text$mn        ends
.text$mn:0000ABDD
.text$mn:0000ABE0 ; ===========================================================================
.text$mn:0000ABE0
.text$mn:0000ABE0 ; Segment type: Pure code
.text$mn:0000ABE0 ; Segment permissions: Read/Execute
.text$mn:0000ABE0 _text$mn        segment para public 'CODE' use32
.text$mn:0000ABE0                 assume cs:_text$mn
.text$mn:0000ABE0                 ;org 0ABE0h
.text$mn:0000ABE0 ; COMDAT (pick any)
.text$mn:0000ABE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ABE0
.text$mn:0000ABE0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ABE0
.text$mn:0000ABE0 ; Attributes: bp-based frame
.text$mn:0000ABE0
.text$mn:0000ABE0 ; public: unsigned int __thiscall std::vector<wchar_t const *, class std::allocator<wchar_t const *>>::size(void)const
.text$mn:0000ABE0                 public ?size@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ
.text$mn:0000ABE0 ?size@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ proc near
.text$mn:0000ABE0                                         ; CODE XREF: WinMain(x,x,x,x)+408p
.text$mn:0000ABE0                                         ; WinMain(x,x,x,x)+63Fp ...
.text$mn:0000ABE0
.text$mn:0000ABE0 var_4           = dword ptr -4
.text$mn:0000ABE0
.text$mn:0000ABE0                 push    ebp
.text$mn:0000ABE1                 mov     ebp, esp
.text$mn:0000ABE3                 push    ecx
.text$mn:0000ABE4                 mov     [ebp+var_4], ecx
.text$mn:0000ABE7                 mov     eax, [ebp+var_4]
.text$mn:0000ABEA                 mov     ecx, [ebp+var_4]
.text$mn:0000ABED                 mov     eax, [eax+8]
.text$mn:0000ABF0                 sub     eax, [ecx+4]
.text$mn:0000ABF3                 sar     eax, 2
.text$mn:0000ABF6                 mov     esp, ebp
.text$mn:0000ABF8                 pop     ebp
.text$mn:0000ABF9                 retn
.text$mn:0000ABF9 ?size@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBEIXZ endp
.text$mn:0000ABF9
.text$mn:0000ABF9 ; ---------------------------------------------------------------------------
.text$mn:0000ABFA                 align 4
.text$mn:0000ABFA _text$mn        ends
.text$mn:0000ABFA
.text$mn:0000ABFC ; ===========================================================================
.text$mn:0000ABFC
.text$mn:0000ABFC ; Segment type: Pure code
.text$mn:0000ABFC ; Segment permissions: Read/Execute
.text$mn:0000ABFC _text$mn        segment para public 'CODE' use32
.text$mn:0000ABFC                 assume cs:_text$mn
.text$mn:0000ABFC                 ;org 0ABFCh
.text$mn:0000ABFC ; COMDAT (pick any)
.text$mn:0000ABFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ABFC
.text$mn:0000ABFC ; =============== S U B R O U T I N E =======================================
.text$mn:0000ABFC
.text$mn:0000ABFC ; Attributes: bp-based frame
.text$mn:0000ABFC
.text$mn:0000ABFC ; const struct std::error_category *__cdecl std::system_category()
.text$mn:0000ABFC                 public ?system_category@std@@YAABVerror_category@1@XZ
.text$mn:0000ABFC ?system_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:0000ABFC                                         ; CODE XREF: std::_System_error_category::default_error_condition(int):loc_91A8p
.text$mn:0000ABFC                 push    ebp
.text$mn:0000ABFD                 mov     ebp, esp
.text$mn:0000ABFF                 mov     eax, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_System_error_category std::_Error_objects<int>::_System_object
.text$mn:0000AC04                 pop     ebp
.text$mn:0000AC05                 retn
.text$mn:0000AC05 ?system_category@std@@YAABVerror_category@1@XZ endp
.text$mn:0000AC05
.text$mn:0000AC05 ; ---------------------------------------------------------------------------
.text$mn:0000AC06                 align 4
.text$mn:0000AC06 _text$mn        ends
.text$mn:0000AC06
.text$mn:0000AC08 ; ===========================================================================
.text$mn:0000AC08
.text$mn:0000AC08 ; Segment type: Pure code
.text$mn:0000AC08 ; Segment permissions: Read/Execute
.text$mn:0000AC08 _text$mn        segment para public 'CODE' use32
.text$mn:0000AC08                 assume cs:_text$mn
.text$mn:0000AC08                 ;org 0AC08h
.text$mn:0000AC08 ; COMDAT (pick any)
.text$mn:0000AC08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AC08
.text$mn:0000AC08 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AC08
.text$mn:0000AC08 ; Attributes: bp-based frame
.text$mn:0000AC08
.text$mn:0000AC08 ; int __thiscall std::error_code::value(std::error_code *__hidden this)
.text$mn:0000AC08                 public ?value@error_code@std@@QBEHXZ
.text$mn:0000AC08 ?value@error_code@std@@QBEHXZ proc near ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+24p
.text$mn:0000AC08
.text$mn:0000AC08 var_4           = dword ptr -4
.text$mn:0000AC08
.text$mn:0000AC08                 push    ebp
.text$mn:0000AC09                 mov     ebp, esp
.text$mn:0000AC0B                 push    ecx
.text$mn:0000AC0C                 mov     [ebp+var_4], ecx
.text$mn:0000AC0F                 mov     eax, [ebp+var_4]
.text$mn:0000AC12                 mov     eax, [eax]
.text$mn:0000AC14                 mov     esp, ebp
.text$mn:0000AC16                 pop     ebp
.text$mn:0000AC17                 retn
.text$mn:0000AC17 ?value@error_code@std@@QBEHXZ endp
.text$mn:0000AC17
.text$mn:0000AC17 _text$mn        ends
.text$mn:0000AC17
.text$mn:0000AC18 ; ===========================================================================
.text$mn:0000AC18
.text$mn:0000AC18 ; Segment type: Pure code
.text$mn:0000AC18 ; Segment permissions: Read/Execute
.text$mn:0000AC18 _text$mn        segment para public 'CODE' use32
.text$mn:0000AC18                 assume cs:_text$mn
.text$mn:0000AC18                 ;org 0AC18h
.text$mn:0000AC18 ; COMDAT (pick any)
.text$mn:0000AC18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AC18
.text$mn:0000AC18 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AC18
.text$mn:0000AC18 ; Attributes: bp-based frame
.text$mn:0000AC18
.text$mn:0000AC18 ; int __thiscall std::error_condition::value(std::error_condition *__hidden this)
.text$mn:0000AC18                 public ?value@error_condition@std@@QBEHXZ
.text$mn:0000AC18 ?value@error_condition@std@@QBEHXZ proc near
.text$mn:0000AC18                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+2Cp
.text$mn:0000AC18                                         ; std::error_condition::operator==(std::error_condition const &)+36p
.text$mn:0000AC18
.text$mn:0000AC18 var_4           = dword ptr -4
.text$mn:0000AC18
.text$mn:0000AC18                 push    ebp
.text$mn:0000AC19                 mov     ebp, esp
.text$mn:0000AC1B                 push    ecx
.text$mn:0000AC1C                 mov     [ebp+var_4], ecx
.text$mn:0000AC1F                 mov     eax, [ebp+var_4]
.text$mn:0000AC22                 mov     eax, [eax]
.text$mn:0000AC24                 mov     esp, ebp
.text$mn:0000AC26                 pop     ebp
.text$mn:0000AC27                 retn
.text$mn:0000AC27 ?value@error_condition@std@@QBEHXZ endp
.text$mn:0000AC27
.text$mn:0000AC27 _text$mn        ends
.text$mn:0000AC27
.text$mn:0000AC28 ; ===========================================================================
.text$mn:0000AC28
.text$mn:0000AC28 ; Segment type: Pure code
.text$mn:0000AC28 ; Segment permissions: Read/Execute
.text$mn:0000AC28 _text$mn        segment para public 'CODE' use32
.text$mn:0000AC28                 assume cs:_text$mn
.text$mn:0000AC28                 ;org 0AC28h
.text$mn:0000AC28 ; COMDAT (pick any)
.text$mn:0000AC28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AC28
.text$mn:0000AC28 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AC28
.text$mn:0000AC28 ; Attributes: bp-based frame
.text$mn:0000AC28
.text$mn:0000AC28 ; const void *__thiscall Win32Exception::where(Win32Exception *__hidden this)
.text$mn:0000AC28                 public ?where@Win32Exception@@QBEPBXXZ
.text$mn:0000AC28 ?where@Win32Exception@@QBEPBXXZ proc near
.text$mn:0000AC28                                         ; CODE XREF: __catch$_WinMain@16$2+6p
.text$mn:0000AC28
.text$mn:0000AC28 var_4           = dword ptr -4
.text$mn:0000AC28
.text$mn:0000AC28                 push    ebp
.text$mn:0000AC29                 mov     ebp, esp
.text$mn:0000AC2B                 push    ecx
.text$mn:0000AC2C                 mov     [ebp+var_4], ecx
.text$mn:0000AC2F                 mov     eax, [ebp+var_4]
.text$mn:0000AC32                 mov     eax, [eax+10h]
.text$mn:0000AC35                 mov     esp, ebp
.text$mn:0000AC37                 pop     ebp
.text$mn:0000AC38                 retn
.text$mn:0000AC38 ?where@Win32Exception@@QBEPBXXZ endp
.text$mn:0000AC38
.text$mn:0000AC38 ; ---------------------------------------------------------------------------
.text$mn:0000AC39                 align 4
.text$mn:0000AC39 _text$mn        ends
.text$mn:0000AC39
.text$mn:0000AC3C ; ===========================================================================
.text$mn:0000AC3C
.text$mn:0000AC3C ; Segment type: Pure code
.text$mn:0000AC3C ; Segment permissions: Read/Execute
.text$mn:0000AC3C _text$mn        segment para public 'CODE' use32
.text$mn:0000AC3C                 assume cs:_text$mn
.text$mn:0000AC3C                 ;org 0AC3Ch
.text$mn:0000AC3C ; COMDAT (pick any)
.text$mn:0000AC3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AC3C
.text$mn:0000AC3C ; =============== S U B R O U T I N E =======================================
.text$mn:0000AC3C
.text$mn:0000AC3C ; Attributes: bp-based frame
.text$mn:0000AC3C
.text$mn:0000AC3C                 public _hypot
.text$mn:0000AC3C _hypot          proc near
.text$mn:0000AC3C
.text$mn:0000AC3C var_10          = qword ptr -10h
.text$mn:0000AC3C var_8           = qword ptr -8
.text$mn:0000AC3C arg_0           = qword ptr  8
.text$mn:0000AC3C arg_8           = qword ptr  10h
.text$mn:0000AC3C
.text$mn:0000AC3C                 push    ebp
.text$mn:0000AC3D                 mov     ebp, esp
.text$mn:0000AC3F                 sub     esp, 8
.text$mn:0000AC42                 movsd   xmm0, [ebp+arg_8]
.text$mn:0000AC47                 movsd   [esp+8+var_8], xmm0
.text$mn:0000AC4C                 sub     esp, 8
.text$mn:0000AC4F                 movsd   xmm0, [ebp+arg_0]
.text$mn:0000AC54                 movsd   [esp+10h+var_10], xmm0
.text$mn:0000AC59                 call    __hypot
.text$mn:0000AC5E                 add     esp, 10h
.text$mn:0000AC61                 pop     ebp
.text$mn:0000AC62                 retn
.text$mn:0000AC62 _hypot          endp
.text$mn:0000AC62
.text$mn:0000AC62 ; ---------------------------------------------------------------------------
.text$mn:0000AC63                 align 4
.text$mn:0000AC63 _text$mn        ends
.text$mn:0000AC63
.text$mn:0000AC64 ; ===========================================================================
.text$mn:0000AC64
.text$mn:0000AC64 ; Segment type: Pure code
.text$mn:0000AC64 ; Segment permissions: Read/Execute
.text$mn:0000AC64 _text$mn        segment para public 'CODE' use32
.text$mn:0000AC64                 assume cs:_text$mn
.text$mn:0000AC64                 ;org 0AC64h
.text$mn:0000AC64 ; COMDAT (pick any)
.text$mn:0000AC64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AC64
.text$mn:0000AC64 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AC64
.text$mn:0000AC64 ; Attributes: bp-based frame
.text$mn:0000AC64
.text$mn:0000AC64                 public _wmemchr
.text$mn:0000AC64 _wmemchr        proc near               ; CODE XREF: std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)+22p
.text$mn:0000AC64
.text$mn:0000AC64 arg_0           = dword ptr  8
.text$mn:0000AC64 arg_4           = word ptr  0Ch
.text$mn:0000AC64 arg_8           = dword ptr  10h
.text$mn:0000AC64
.text$mn:0000AC64                 push    ebp
.text$mn:0000AC65                 mov     ebp, esp
.text$mn:0000AC67                 jmp     short loc_AC7B
.text$mn:0000AC69 ; ---------------------------------------------------------------------------
.text$mn:0000AC69
.text$mn:0000AC69 loc_AC69:                               ; CODE XREF: _wmemchr:loc_AC94j
.text$mn:0000AC69                 mov     eax, [ebp+arg_0]
.text$mn:0000AC6C                 add     eax, 2
.text$mn:0000AC6F                 mov     [ebp+arg_0], eax
.text$mn:0000AC72                 mov     ecx, [ebp+arg_8]
.text$mn:0000AC75                 sub     ecx, 1
.text$mn:0000AC78                 mov     [ebp+arg_8], ecx
.text$mn:0000AC7B
.text$mn:0000AC7B loc_AC7B:                               ; CODE XREF: _wmemchr+3j
.text$mn:0000AC7B                 cmp     [ebp+arg_8], 0
.text$mn:0000AC7F                 jbe     short loc_AC96
.text$mn:0000AC81                 mov     edx, [ebp+arg_0]
.text$mn:0000AC84                 movzx   eax, word ptr [edx]
.text$mn:0000AC87                 movzx   ecx, [ebp+arg_4]
.text$mn:0000AC8B                 cmp     eax, ecx
.text$mn:0000AC8D                 jnz     short loc_AC94
.text$mn:0000AC8F                 mov     eax, [ebp+arg_0]
.text$mn:0000AC92                 jmp     short loc_AC98
.text$mn:0000AC94 ; ---------------------------------------------------------------------------
.text$mn:0000AC94
.text$mn:0000AC94 loc_AC94:                               ; CODE XREF: _wmemchr+29j
.text$mn:0000AC94                 jmp     short loc_AC69
.text$mn:0000AC96 ; ---------------------------------------------------------------------------
.text$mn:0000AC96
.text$mn:0000AC96 loc_AC96:                               ; CODE XREF: _wmemchr+1Bj
.text$mn:0000AC96                 xor     eax, eax
.text$mn:0000AC98
.text$mn:0000AC98 loc_AC98:                               ; CODE XREF: _wmemchr+2Ej
.text$mn:0000AC98                 pop     ebp
.text$mn:0000AC99                 retn
.text$mn:0000AC99 _wmemchr        endp
.text$mn:0000AC99
.text$mn:0000AC99 ; ---------------------------------------------------------------------------
.text$mn:0000AC9A                 align 4
.text$mn:0000AC9A _text$mn        ends
.text$mn:0000AC9A
.text$mn:0000AC9C ; ===========================================================================
.text$mn:0000AC9C
.text$mn:0000AC9C ; Segment type: Pure code
.text$mn:0000AC9C ; Segment permissions: Read/Execute
.text$mn:0000AC9C _text$mn        segment para public 'CODE' use32
.text$mn:0000AC9C                 assume cs:_text$mn
.text$mn:0000AC9C                 ;org 0AC9Ch
.text$mn:0000AC9C ; COMDAT (pick any)
.text$mn:0000AC9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AC9C
.text$mn:0000AC9C ; =============== S U B R O U T I N E =======================================
.text$mn:0000AC9C
.text$mn:0000AC9C ; Attributes: bp-based frame
.text$mn:0000AC9C
.text$mn:0000AC9C                 public _wmemcmp
.text$mn:0000AC9C _wmemcmp        proc near               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+1Fp
.text$mn:0000AC9C
.text$mn:0000AC9C var_4           = dword ptr -4
.text$mn:0000AC9C arg_0           = dword ptr  8
.text$mn:0000AC9C arg_4           = dword ptr  0Ch
.text$mn:0000AC9C arg_8           = dword ptr  10h
.text$mn:0000AC9C
.text$mn:0000AC9C                 push    ebp
.text$mn:0000AC9D                 mov     ebp, esp
.text$mn:0000AC9F                 push    ecx
.text$mn:0000ACA0                 jmp     short loc_ACBD
.text$mn:0000ACA2 ; ---------------------------------------------------------------------------
.text$mn:0000ACA2
.text$mn:0000ACA2 loc_ACA2:                               ; CODE XREF: _wmemcmp:loc_ACF8j
.text$mn:0000ACA2                 mov     eax, [ebp+arg_0]
.text$mn:0000ACA5                 add     eax, 2
.text$mn:0000ACA8                 mov     [ebp+arg_0], eax
.text$mn:0000ACAB                 mov     ecx, [ebp+arg_4]
.text$mn:0000ACAE                 add     ecx, 2
.text$mn:0000ACB1                 mov     [ebp+arg_4], ecx
.text$mn:0000ACB4                 mov     edx, [ebp+arg_8]
.text$mn:0000ACB7                 sub     edx, 1
.text$mn:0000ACBA                 mov     [ebp+arg_8], edx
.text$mn:0000ACBD
.text$mn:0000ACBD loc_ACBD:                               ; CODE XREF: _wmemcmp+4j
.text$mn:0000ACBD                 cmp     [ebp+arg_8], 0
.text$mn:0000ACC1                 jbe     short loc_ACFA
.text$mn:0000ACC3                 mov     eax, [ebp+arg_0]
.text$mn:0000ACC6                 movzx   ecx, word ptr [eax]
.text$mn:0000ACC9                 mov     edx, [ebp+arg_4]
.text$mn:0000ACCC                 movzx   eax, word ptr [edx]
.text$mn:0000ACCF                 cmp     ecx, eax
.text$mn:0000ACD1                 jz      short loc_ACF8
.text$mn:0000ACD3                 mov     ecx, [ebp+arg_0]
.text$mn:0000ACD6                 movzx   edx, word ptr [ecx]
.text$mn:0000ACD9                 mov     eax, [ebp+arg_4]
.text$mn:0000ACDC                 movzx   ecx, word ptr [eax]
.text$mn:0000ACDF                 cmp     edx, ecx
.text$mn:0000ACE1                 jge     short loc_ACEC
.text$mn:0000ACE3                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000ACEA                 jmp     short loc_ACF3
.text$mn:0000ACEC ; ---------------------------------------------------------------------------
.text$mn:0000ACEC
.text$mn:0000ACEC loc_ACEC:                               ; CODE XREF: _wmemcmp+45j
.text$mn:0000ACEC                 mov     [ebp+var_4], 1
.text$mn:0000ACF3
.text$mn:0000ACF3 loc_ACF3:                               ; CODE XREF: _wmemcmp+4Ej
.text$mn:0000ACF3                 mov     eax, [ebp+var_4]
.text$mn:0000ACF6                 jmp     short loc_ACFC
.text$mn:0000ACF8 ; ---------------------------------------------------------------------------
.text$mn:0000ACF8
.text$mn:0000ACF8 loc_ACF8:                               ; CODE XREF: _wmemcmp+35j
.text$mn:0000ACF8                 jmp     short loc_ACA2
.text$mn:0000ACFA ; ---------------------------------------------------------------------------
.text$mn:0000ACFA
.text$mn:0000ACFA loc_ACFA:                               ; CODE XREF: _wmemcmp+25j
.text$mn:0000ACFA                 xor     eax, eax
.text$mn:0000ACFC
.text$mn:0000ACFC loc_ACFC:                               ; CODE XREF: _wmemcmp+5Aj
.text$mn:0000ACFC                 mov     esp, ebp
.text$mn:0000ACFE                 pop     ebp
.text$mn:0000ACFF                 retn
.text$mn:0000ACFF _wmemcmp        endp
.text$mn:0000ACFF
.text$mn:0000ACFF _text$mn        ends
.text$mn:0000ACFF
.text$mn:0000AD00 ; ===========================================================================
.text$mn:0000AD00
.text$mn:0000AD00 ; Segment type: Pure code
.text$mn:0000AD00 ; Segment permissions: Read/Execute
.text$mn:0000AD00 _text$mn        segment para public 'CODE' use32
.text$mn:0000AD00                 assume cs:_text$mn
.text$mn:0000AD00                 ;org 0AD00h
.text$mn:0000AD00 ; COMDAT (pick any)
.text$mn:0000AD00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AD00
.text$mn:0000AD00 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AD00
.text$mn:0000AD00 ; Attributes: bp-based frame
.text$mn:0000AD00
.text$mn:0000AD00 ; int __cdecl wmemcpy(void *Dst, void *Src, int)
.text$mn:0000AD00                 public _wmemcpy
.text$mn:0000AD00 _wmemcpy        proc near               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:0000AD00
.text$mn:0000AD00 Dst             = dword ptr  8
.text$mn:0000AD00 Src             = dword ptr  0Ch
.text$mn:0000AD00 arg_8           = dword ptr  10h
.text$mn:0000AD00
.text$mn:0000AD00                 push    ebp
.text$mn:0000AD01                 mov     ebp, esp
.text$mn:0000AD03                 mov     eax, [ebp+arg_8]
.text$mn:0000AD06                 shl     eax, 1
.text$mn:0000AD08                 push    eax             ; Size
.text$mn:0000AD09                 mov     ecx, [ebp+Src]
.text$mn:0000AD0C                 push    ecx             ; Src
.text$mn:0000AD0D                 mov     edx, [ebp+Dst]
.text$mn:0000AD10                 push    edx             ; Dst
.text$mn:0000AD11                 call    _memcpy
.text$mn:0000AD16                 add     esp, 0Ch
.text$mn:0000AD19                 pop     ebp
.text$mn:0000AD1A                 retn
.text$mn:0000AD1A _wmemcpy        endp
.text$mn:0000AD1A
.text$mn:0000AD1A ; ---------------------------------------------------------------------------
.text$mn:0000AD1B                 align 4
.text$mn:0000AD1B _text$mn        ends
.text$mn:0000AD1B
.text$mn:0000AD1C ; ===========================================================================
.text$mn:0000AD1C
.text$mn:0000AD1C ; Segment type: Pure code
.text$mn:0000AD1C ; Segment permissions: Read/Execute
.text$mn:0000AD1C _text$mn        segment para public 'CODE' use32
.text$mn:0000AD1C                 assume cs:_text$mn
.text$mn:0000AD1C                 ;org 0AD1Ch
.text$mn:0000AD1C ; COMDAT (pick any)
.text$mn:0000AD1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AD1C
.text$mn:0000AD1C ; =============== S U B R O U T I N E =======================================
.text$mn:0000AD1C
.text$mn:0000AD1C ; Attributes: bp-based frame
.text$mn:0000AD1C
.text$mn:0000AD1C ; int __cdecl wmemmove(void *Dst, void *Src, int)
.text$mn:0000AD1C                 public _wmemmove
.text$mn:0000AD1C _wmemmove       proc near               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:0000AD1C
.text$mn:0000AD1C Dst             = dword ptr  8
.text$mn:0000AD1C Src             = dword ptr  0Ch
.text$mn:0000AD1C arg_8           = dword ptr  10h
.text$mn:0000AD1C
.text$mn:0000AD1C                 push    ebp
.text$mn:0000AD1D                 mov     ebp, esp
.text$mn:0000AD1F                 mov     eax, [ebp+arg_8]
.text$mn:0000AD22                 shl     eax, 1
.text$mn:0000AD24                 push    eax             ; Size
.text$mn:0000AD25                 mov     ecx, [ebp+Src]
.text$mn:0000AD28                 push    ecx             ; Src
.text$mn:0000AD29                 mov     edx, [ebp+Dst]
.text$mn:0000AD2C                 push    edx             ; Dst
.text$mn:0000AD2D                 call    _memmove
.text$mn:0000AD32                 add     esp, 0Ch
.text$mn:0000AD35                 pop     ebp
.text$mn:0000AD36                 retn
.text$mn:0000AD36 _wmemmove       endp
.text$mn:0000AD36
.text$mn:0000AD36 ; ---------------------------------------------------------------------------
.text$mn:0000AD37                 align 4
.text$mn:0000AD37 _text$mn        ends
.text$mn:0000AD37
.xdata$x:0000AD38 ; ===========================================================================
.xdata$x:0000AD38
.xdata$x:0000AD38 ; Segment type: Pure data
.xdata$x:0000AD38 ; Segment permissions: Read
.xdata$x:0000AD38 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000AD38                 assume cs:_xdata$x
.xdata$x:0000AD38                 ;org 0AD38h
.xdata$x:0000AD38 __unwindtable$?getNumberFromParam@@YAHDAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AA_N@Z db 0FFh
.xdata$x:0000AD38                                         ; DATA XREF: .xdata$x:0000AE2Co
.xdata$x:0000AD39                 db 0FFh
.xdata$x:0000AD3A                 db 0FFh
.xdata$x:0000AD3B                 db 0FFh
.xdata$x:0000AD3C                 dd offset __unwindfunclet$?getNumberFromParam@@YAHDAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AA_N@Z$0
.xdata$x:0000AD40 __unwindtable$?getLangTypeFromParam@@YA?AW4LangType@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z db 0FFh
.xdata$x:0000AD40                                         ; DATA XREF: .xdata$x:0000AE74o
.xdata$x:0000AD41                 db 0FFh
.xdata$x:0000AD42                 db 0FFh
.xdata$x:0000AD43                 db 0FFh
.xdata$x:0000AD44                 dd offset __unwindfunclet$?getLangTypeFromParam@@YA?AW4LangType@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z$0
.xdata$x:0000AD48 __tryblocktable$_WinMain@16 db  0Dh     ; DATA XREF: .xdata$x:0000AF0Co
.xdata$x:0000AD49                 db    0
.xdata$x:0000AD4A                 db    0
.xdata$x:0000AD4B                 db    0
.xdata$x:0000AD4C                 db  0Dh
.xdata$x:0000AD4D                 db    0
.xdata$x:0000AD4E                 db    0
.xdata$x:0000AD4F                 db    0
.xdata$x:0000AD50                 db  0Eh
.xdata$x:0000AD51                 db    0
.xdata$x:0000AD52                 db    0
.xdata$x:0000AD53                 db    0
.xdata$x:0000AD54                 db    5
.xdata$x:0000AD55                 db    0
.xdata$x:0000AD56                 db    0
.xdata$x:0000AD57                 db    0
.xdata$x:0000AD58                 dd offset __catchsym$_WinMain@16$19
.xdata$x:0000AD5C __unwindtable$?doException@@YAXAAVNotepad_plus_Window@@@Z db 0FFh
.xdata$x:0000AD5C                                         ; DATA XREF: .xdata$x:0000ADE4o
.xdata$x:0000AD5D                 db 0FFh
.xdata$x:0000AD5E                 db 0FFh
.xdata$x:0000AD5F                 db 0FFh
.xdata$x:0000AD60                 dd offset __unwindfunclet$?doException@@YAXAAVNotepad_plus_Window@@@Z$0
.xdata$x:0000AD64                 align 8
.xdata$x:0000AD68                 dd offset __unwindfunclet$?doException@@YAXAAVNotepad_plus_Window@@@Z$1
.xdata$x:0000AD6C                 align 10h
.xdata$x:0000AD70                 dd offset __unwindfunclet$?doException@@YAXAAVNotepad_plus_Window@@@Z$2
.xdata$x:0000AD74 __unwindtable$?getLocalizationPathFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@@Z db 0FFh
.xdata$x:0000AD74                                         ; DATA XREF: .xdata$x:0000AE50o
.xdata$x:0000AD75                 db 0FFh
.xdata$x:0000AD76                 db 0FFh
.xdata$x:0000AD77                 db 0FFh
.xdata$x:0000AD78                 dd offset __unwindfunclet$?getLocalizationPathFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@@Z$1
.xdata$x:0000AD7C                 align 10h
.xdata$x:0000AD80                 dd offset __unwindfunclet$?getLocalizationPathFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@@Z$0
.xdata$x:0000AD84                 db    1
.xdata$x:0000AD85                 db    0
.xdata$x:0000AD86                 db    0
.xdata$x:0000AD87                 db    0
.xdata$x:0000AD88                 dd offset __unwindfunclet$?getLocalizationPathFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@@Z$2
.xdata$x:0000AD8C __unwindtable$?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z db 0FFh
.xdata$x:0000AD8C                                         ; DATA XREF: .xdata$x:0000AEBCo
.xdata$x:0000AD8D                 db 0FFh
.xdata$x:0000AD8E                 db 0FFh
.xdata$x:0000AD8F                 db 0FFh
.xdata$x:0000AD90                 dd offset __unwindfunclet$?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$0
.xdata$x:0000AD94                 align 8
.xdata$x:0000AD98                 dd offset __unwindfunclet$?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$1
.xdata$x:0000AD9C                 db    1
.xdata$x:0000AD9D                 db    0
.xdata$x:0000AD9E                 db    0
.xdata$x:0000AD9F                 db    0
.xdata$x:0000ADA0                 dd offset __unwindfunclet$?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$2
.xdata$x:0000ADA4 __unwindtable$?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z db 0FFh
.xdata$x:0000ADA4                                         ; DATA XREF: .xdata$x:0000AEE0o
.xdata$x:0000ADA5                 db 0FFh
.xdata$x:0000ADA6                 db 0FFh
.xdata$x:0000ADA7                 db 0FFh
.xdata$x:0000ADA8                 dd offset __unwindfunclet$?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z$0
.xdata$x:0000ADAC                 align 10h
.xdata$x:0000ADB0                 dd offset __unwindfunclet$?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z$1
.xdata$x:0000ADB4                 db    1
.xdata$x:0000ADB5                 db    0
.xdata$x:0000ADB6                 db    0
.xdata$x:0000ADB7                 db    0
.xdata$x:0000ADB8                 dd offset __unwindfunclet$?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z$2
.xdata$x:0000ADBC __unwindtable$?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z db 0FFh
.xdata$x:0000ADBC                                         ; DATA XREF: .xdata$x:0000AE98o
.xdata$x:0000ADBD                 db 0FFh
.xdata$x:0000ADBE                 db 0FFh
.xdata$x:0000ADBF                 db 0FFh
.xdata$x:0000ADC0                 dd offset __unwindfunclet$?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$0
.xdata$x:0000ADC4                 align 8
.xdata$x:0000ADC8                 dd offset __unwindfunclet$?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$1
.xdata$x:0000ADCC                 db    1
.xdata$x:0000ADCD                 db    0
.xdata$x:0000ADCE                 db    0
.xdata$x:0000ADCF                 db    0
.xdata$x:0000ADD0                 dd offset __unwindfunclet$?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$2
.xdata$x:0000ADD4                 db    2
.xdata$x:0000ADD5                 db    0
.xdata$x:0000ADD6                 db    0
.xdata$x:0000ADD7                 db    0
.xdata$x:0000ADD8                 dd offset __unwindfunclet$?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$3
.xdata$x:0000ADDC __ehfuncinfo$?doException@@YAXAAVNotepad_plus_Window@@@Z db  22h ; "
.xdata$x:0000ADDC                                         ; DATA XREF: __ehhandler$?doException@@YAXAAVNotepad_plus_Window@@@Z+1Eo
.xdata$x:0000ADDD                 db    5
.xdata$x:0000ADDE                 db  93h ; ô
.xdata$x:0000ADDF                 db  19h
.xdata$x:0000ADE0                 db    3
.xdata$x:0000ADE1                 db    0
.xdata$x:0000ADE2                 db    0
.xdata$x:0000ADE3                 db    0
.xdata$x:0000ADE4                 dd offset __unwindtable$?doException@@YAXAAVNotepad_plus_Window@@@Z
.xdata$x:0000ADE8                 align 20h
.xdata$x:0000AE00 __ehfuncinfo$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z db  22h ; "
.xdata$x:0000AE00                                         ; DATA XREF: __ehhandler$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z+1Eo
.xdata$x:0000AE01                 db    5
.xdata$x:0000AE02                 db  93h ; ô
.xdata$x:0000AE03                 db  19h
.xdata$x:0000AE04                 db    5
.xdata$x:0000AE05                 db    0
.xdata$x:0000AE06                 db    0
.xdata$x:0000AE07                 db    0
.xdata$x:0000AE08                 dd offset __unwindtable$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z
.xdata$x:0000AE0C                 db    0
.xdata$x:0000AE0D                 db    0
.xdata$x:0000AE0E                 db    0
.xdata$x:0000AE0F                 db    0
.xdata$x:0000AE10                 db    0
.xdata$x:0000AE11                 db    0
.xdata$x:0000AE12                 db    0
.xdata$x:0000AE13                 db    0
.xdata$x:0000AE14                 db    0
.xdata$x:0000AE15                 db    0
.xdata$x:0000AE16                 db    0
.xdata$x:0000AE17                 db    0
.xdata$x:0000AE18                 db    0
.xdata$x:0000AE19                 db    0
.xdata$x:0000AE1A                 db    0
.xdata$x:0000AE1B                 db    0
.xdata$x:0000AE1C                 db    0
.xdata$x:0000AE1D                 db    0
.xdata$x:0000AE1E                 db    0
.xdata$x:0000AE1F                 db    0
.xdata$x:0000AE20                 db    0
.xdata$x:0000AE21                 db    0
.xdata$x:0000AE22                 db    0
.xdata$x:0000AE23                 db    0
.xdata$x:0000AE24 __ehfuncinfo$?getNumberFromParam@@YAHDAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AA_N@Z db  22h ; "
.xdata$x:0000AE24                                         ; DATA XREF: __ehhandler$?getNumberFromParam@@YAHDAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AA_N@Z+1Bo
.xdata$x:0000AE25                 db    5
.xdata$x:0000AE26                 db  93h ; ô
.xdata$x:0000AE27                 db  19h
.xdata$x:0000AE28                 db    1
.xdata$x:0000AE29                 db    0
.xdata$x:0000AE2A                 db    0
.xdata$x:0000AE2B                 db    0
.xdata$x:0000AE2C                 dd offset __unwindtable$?getNumberFromParam@@YAHDAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AA_N@Z
.xdata$x:0000AE30                 db    0
.xdata$x:0000AE31                 db    0
.xdata$x:0000AE32                 db    0
.xdata$x:0000AE33                 db    0
.xdata$x:0000AE34                 db    0
.xdata$x:0000AE35                 db    0
.xdata$x:0000AE36                 db    0
.xdata$x:0000AE37                 db    0
.xdata$x:0000AE38                 db    0
.xdata$x:0000AE39                 db    0
.xdata$x:0000AE3A                 db    0
.xdata$x:0000AE3B                 db    0
.xdata$x:0000AE3C                 db    0
.xdata$x:0000AE3D                 db    0
.xdata$x:0000AE3E                 db    0
.xdata$x:0000AE3F                 db    0
.xdata$x:0000AE40                 db    0
.xdata$x:0000AE41                 db    0
.xdata$x:0000AE42                 db    0
.xdata$x:0000AE43                 db    0
.xdata$x:0000AE44                 db    0
.xdata$x:0000AE45                 db    0
.xdata$x:0000AE46                 db    0
.xdata$x:0000AE47                 db    0
.xdata$x:0000AE48 __ehfuncinfo$?getLocalizationPathFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@@Z db  22h ; "
.xdata$x:0000AE48                                         ; DATA XREF: __ehhandler$?getLocalizationPathFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@@Z+1Bo
.xdata$x:0000AE49                 db    5
.xdata$x:0000AE4A                 db  93h ; ô
.xdata$x:0000AE4B                 db  19h
.xdata$x:0000AE4C                 db    3
.xdata$x:0000AE4D                 db    0
.xdata$x:0000AE4E                 db    0
.xdata$x:0000AE4F                 db    0
.xdata$x:0000AE50                 dd offset __unwindtable$?getLocalizationPathFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@@Z
.xdata$x:0000AE54                 db    0
.xdata$x:0000AE55                 db    0
.xdata$x:0000AE56                 db    0
.xdata$x:0000AE57                 db    0
.xdata$x:0000AE58                 db    0
.xdata$x:0000AE59                 db    0
.xdata$x:0000AE5A                 db    0
.xdata$x:0000AE5B                 db    0
.xdata$x:0000AE5C                 db    0
.xdata$x:0000AE5D                 db    0
.xdata$x:0000AE5E                 db    0
.xdata$x:0000AE5F                 db    0
.xdata$x:0000AE60                 db    0
.xdata$x:0000AE61                 db    0
.xdata$x:0000AE62                 db    0
.xdata$x:0000AE63                 db    0
.xdata$x:0000AE64                 db    0
.xdata$x:0000AE65                 db    0
.xdata$x:0000AE66                 db    0
.xdata$x:0000AE67                 db    0
.xdata$x:0000AE68                 db    0
.xdata$x:0000AE69                 db    0
.xdata$x:0000AE6A                 db    0
.xdata$x:0000AE6B                 db    0
.xdata$x:0000AE6C __ehfuncinfo$?getLangTypeFromParam@@YA?AW4LangType@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z db  22h ; "
.xdata$x:0000AE6C                                         ; DATA XREF: __ehhandler$?getLangTypeFromParam@@YA?AW4LangType@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z+1Bo
.xdata$x:0000AE6D                 db    5
.xdata$x:0000AE6E                 db  93h ; ô
.xdata$x:0000AE6F                 db  19h
.xdata$x:0000AE70                 db    1
.xdata$x:0000AE71                 db    0
.xdata$x:0000AE72                 db    0
.xdata$x:0000AE73                 db    0
.xdata$x:0000AE74                 dd offset __unwindtable$?getLangTypeFromParam@@YA?AW4LangType@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z
.xdata$x:0000AE78                 db    0
.xdata$x:0000AE79                 db    0
.xdata$x:0000AE7A                 db    0
.xdata$x:0000AE7B                 db    0
.xdata$x:0000AE7C                 db    0
.xdata$x:0000AE7D                 db    0
.xdata$x:0000AE7E                 db    0
.xdata$x:0000AE7F                 db    0
.xdata$x:0000AE80                 db    0
.xdata$x:0000AE81                 db    0
.xdata$x:0000AE82                 db    0
.xdata$x:0000AE83                 db    0
.xdata$x:0000AE84                 db    0
.xdata$x:0000AE85                 db    0
.xdata$x:0000AE86                 db    0
.xdata$x:0000AE87                 db    0
.xdata$x:0000AE88                 db    0
.xdata$x:0000AE89                 db    0
.xdata$x:0000AE8A                 db    0
.xdata$x:0000AE8B                 db    0
.xdata$x:0000AE8C                 db    0
.xdata$x:0000AE8D                 db    0
.xdata$x:0000AE8E                 db    0
.xdata$x:0000AE8F                 db    0
.xdata$x:0000AE90 __ehfuncinfo$?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z db  22h ; "
.xdata$x:0000AE90                                         ; DATA XREF: __ehhandler$?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z+1Bo
.xdata$x:0000AE91                 db    5
.xdata$x:0000AE92                 db  93h ; ô
.xdata$x:0000AE93                 db  19h
.xdata$x:0000AE94                 db    4
.xdata$x:0000AE95                 db    0
.xdata$x:0000AE96                 db    0
.xdata$x:0000AE97                 db    0
.xdata$x:0000AE98                 dd offset __unwindtable$?getParamValFromString@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
.xdata$x:0000AE9C                 db    0
.xdata$x:0000AE9D                 db    0
.xdata$x:0000AE9E                 db    0
.xdata$x:0000AE9F                 db    0
.xdata$x:0000AEA0                 db    0
.xdata$x:0000AEA1                 db    0
.xdata$x:0000AEA2                 db    0
.xdata$x:0000AEA3                 db    0
.xdata$x:0000AEA4                 db    0
.xdata$x:0000AEA5                 db    0
.xdata$x:0000AEA6                 db    0
.xdata$x:0000AEA7                 db    0
.xdata$x:0000AEA8                 db    0
.xdata$x:0000AEA9                 db    0
.xdata$x:0000AEAA                 db    0
.xdata$x:0000AEAB                 db    0
.xdata$x:0000AEAC                 db    0
.xdata$x:0000AEAD                 db    0
.xdata$x:0000AEAE                 db    0
.xdata$x:0000AEAF                 db    0
.xdata$x:0000AEB0                 db    0
.xdata$x:0000AEB1                 db    0
.xdata$x:0000AEB2                 db    0
.xdata$x:0000AEB3                 db    0
.xdata$x:0000AEB4 __ehfuncinfo$?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z db  22h ; "
.xdata$x:0000AEB4                                         ; DATA XREF: __ehhandler$?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z+11o
.xdata$x:0000AEB5                 db    5
.xdata$x:0000AEB6                 db  93h ; ô
.xdata$x:0000AEB7                 db  19h
.xdata$x:0000AEB8                 db    3
.xdata$x:0000AEB9                 db    0
.xdata$x:0000AEBA                 db    0
.xdata$x:0000AEBB                 db    0
.xdata$x:0000AEBC                 dd offset __unwindtable$?getParamVal@@YA_N_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
.xdata$x:0000AEC0                 db    0
.xdata$x:0000AEC1                 db    0
.xdata$x:0000AEC2                 db    0
.xdata$x:0000AEC3                 db    0
.xdata$x:0000AEC4                 db    0
.xdata$x:0000AEC5                 db    0
.xdata$x:0000AEC6                 db    0
.xdata$x:0000AEC7                 db    0
.xdata$x:0000AEC8                 db    0
.xdata$x:0000AEC9                 db    0
.xdata$x:0000AECA                 db    0
.xdata$x:0000AECB                 db    0
.xdata$x:0000AECC                 db    0
.xdata$x:0000AECD                 db    0
.xdata$x:0000AECE                 db    0
.xdata$x:0000AECF                 db    0
.xdata$x:0000AED0                 db    0
.xdata$x:0000AED1                 db    0
.xdata$x:0000AED2                 db    0
.xdata$x:0000AED3                 db    0
.xdata$x:0000AED4                 db    0
.xdata$x:0000AED5                 db    0
.xdata$x:0000AED6                 db    0
.xdata$x:0000AED7                 db    0
.xdata$x:0000AED8 __ehfuncinfo$?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z db  22h ; "
.xdata$x:0000AED8                                         ; DATA XREF: __ehhandler$?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z+11o
.xdata$x:0000AED9                 db    5
.xdata$x:0000AEDA                 db  93h ; ô
.xdata$x:0000AEDB                 db  19h
.xdata$x:0000AEDC                 db    3
.xdata$x:0000AEDD                 db    0
.xdata$x:0000AEDE                 db    0
.xdata$x:0000AEDF                 db    0
.xdata$x:0000AEE0                 dd offset __unwindtable$?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z
.xdata$x:0000AEE4                 db    0
.xdata$x:0000AEE5                 db    0
.xdata$x:0000AEE6                 db    0
.xdata$x:0000AEE7                 db    0
.xdata$x:0000AEE8                 db    0
.xdata$x:0000AEE9                 db    0
.xdata$x:0000AEEA                 db    0
.xdata$x:0000AEEB                 db    0
.xdata$x:0000AEEC                 db    0
.xdata$x:0000AEED                 db    0
.xdata$x:0000AEEE                 db    0
.xdata$x:0000AEEF                 db    0
.xdata$x:0000AEF0                 db    0
.xdata$x:0000AEF1                 db    0
.xdata$x:0000AEF2                 db    0
.xdata$x:0000AEF3                 db    0
.xdata$x:0000AEF4                 db    0
.xdata$x:0000AEF5                 db    0
.xdata$x:0000AEF6                 db    0
.xdata$x:0000AEF7                 db    0
.xdata$x:0000AEF8                 db    0
.xdata$x:0000AEF9                 db    0
.xdata$x:0000AEFA                 db    0
.xdata$x:0000AEFB                 db    0
.xdata$x:0000AEFC __ehfuncinfo$_WinMain@16 db  22h ; "    ; DATA XREF: __ehhandler$_WinMain@16+1Eo
.xdata$x:0000AEFD                 db    5
.xdata$x:0000AEFE                 db  93h ; ô
.xdata$x:0000AEFF                 db  19h
.xdata$x:0000AF00                 db  0Fh
.xdata$x:0000AF01                 db    0
.xdata$x:0000AF02                 db    0
.xdata$x:0000AF03                 db    0
.xdata$x:0000AF04                 dd offset __unwindtable$_WinMain@16
.xdata$x:0000AF08                 db    1
.xdata$x:0000AF09                 db    0
.xdata$x:0000AF0A                 db    0
.xdata$x:0000AF0B                 db    0
.xdata$x:0000AF0C                 dd offset __tryblocktable$_WinMain@16
.xdata$x:0000AF10                 align 20h
.xdata$x:0000AF20 __unwindtable$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z db 0FFh
.xdata$x:0000AF20                                         ; DATA XREF: .xdata$x:0000AE08o
.xdata$x:0000AF21                 db 0FFh
.xdata$x:0000AF22                 db 0FFh
.xdata$x:0000AF23                 db 0FFh
.xdata$x:0000AF24                 dd offset __unwindfunclet$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z$1
.xdata$x:0000AF28                 db    0
.xdata$x:0000AF29                 db    0
.xdata$x:0000AF2A                 db    0
.xdata$x:0000AF2B                 db    0
.xdata$x:0000AF2C                 dd offset __unwindfunclet$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z$0
.xdata$x:0000AF30                 db    1
.xdata$x:0000AF31                 db    0
.xdata$x:0000AF32                 db    0
.xdata$x:0000AF33                 db    0
.xdata$x:0000AF34                 dd offset __unwindfunclet$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z$2
.xdata$x:0000AF38                 db    1
.xdata$x:0000AF39                 db    0
.xdata$x:0000AF3A                 db    0
.xdata$x:0000AF3B                 db    0
.xdata$x:0000AF3C                 dd offset __unwindfunclet$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z$3
.xdata$x:0000AF40                 db    3
.xdata$x:0000AF41                 db    0
.xdata$x:0000AF42                 db    0
.xdata$x:0000AF43                 db    0
.xdata$x:0000AF44                 dd offset __unwindfunclet$?getEasterEggNameFromParam@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@PB_WV?$allocator@PB_W@std@@@2@AAE@Z$4
.xdata$x:0000AF48 __catchsym$_WinMain@16$19 db    0       ; DATA XREF: .xdata$x:0000AD58o
.xdata$x:0000AF49                 db    0
.xdata$x:0000AF4A                 db    0
.xdata$x:0000AF4B                 db    0
.xdata$x:0000AF4C                 dd offset ??_R0H@8      ; int `RTTI Type Descriptor'
.xdata$x:0000AF50                 db  14h
.xdata$x:0000AF51                 db 0A3h ; ú
.xdata$x:0000AF52                 db 0FAh ; ·
.xdata$x:0000AF53                 db 0FFh
.xdata$x:0000AF54                 dd offset __catch$_WinMain@16$0
.xdata$x:0000AF58                 db    8
.xdata$x:0000AF59                 db    0
.xdata$x:0000AF5A                 db    0
.xdata$x:0000AF5B                 db    0
.xdata$x:0000AF5C                 dd offset ??_R0?AVruntime_error@std@@@8 ; std::runtime_error `RTTI Type Descriptor'
.xdata$x:0000AF60                 db  50h ; P
.xdata$x:0000AF61                 db 0A3h ; ú
.xdata$x:0000AF62                 db 0FAh ; ·
.xdata$x:0000AF63                 db 0FFh
.xdata$x:0000AF64                 dd offset __catch$_WinMain@16$1
.xdata$x:0000AF68                 db    9
.xdata$x:0000AF69                 db    0
.xdata$x:0000AF6A                 db    0
.xdata$x:0000AF6B                 db    0
.xdata$x:0000AF6C                 dd offset ??_R0?AVWin32Exception@@@8 ; Win32Exception `RTTI Type Descriptor'
.xdata$x:0000AF70                 db 0BCh ; +
.xdata$x:0000AF71                 db 0A3h ; ú
.xdata$x:0000AF72                 db 0FAh ; ·
.xdata$x:0000AF73                 db 0FFh
.xdata$x:0000AF74                 dd offset __catch$_WinMain@16$2
.xdata$x:0000AF78                 db    8
.xdata$x:0000AF79                 db    0
.xdata$x:0000AF7A                 db    0
.xdata$x:0000AF7B                 db    0
.xdata$x:0000AF7C                 dd offset ??_R0?AVexception@std@@@8 ; std::exception `RTTI Type Descriptor'
.xdata$x:0000AF80                 db  64h ; d
.xdata$x:0000AF81                 db 0A3h ; ú
.xdata$x:0000AF82                 db 0FAh ; ·
.xdata$x:0000AF83                 db 0FFh
.xdata$x:0000AF84                 dd offset __catch$_WinMain@16$3
.xdata$x:0000AF88                 db    0
.xdata$x:0000AF89                 db    0
.xdata$x:0000AF8A                 db    0
.xdata$x:0000AF8B                 db    0
.xdata$x:0000AF8C                 db    0
.xdata$x:0000AF8D                 db    0
.xdata$x:0000AF8E                 db    0
.xdata$x:0000AF8F                 db    0
.xdata$x:0000AF90                 db    0
.xdata$x:0000AF91                 db    0
.xdata$x:0000AF92                 db    0
.xdata$x:0000AF93                 db    0
.xdata$x:0000AF94                 dd offset __catch$_WinMain@16$4
.xdata$x:0000AF98 __unwindtable$_WinMain@16 db 0FFh       ; DATA XREF: .xdata$x:0000AF04o
.xdata$x:0000AF99                 db 0FFh
.xdata$x:0000AF9A                 db 0FFh
.xdata$x:0000AF9B                 db 0FFh
.xdata$x:0000AF9C                 dd offset __unwindfunclet$_WinMain@16$6
.xdata$x:0000AFA0                 db    0
.xdata$x:0000AFA1                 db    0
.xdata$x:0000AFA2                 db    0
.xdata$x:0000AFA3                 db    0
.xdata$x:0000AFA4                 dd offset __unwindfunclet$_WinMain@16$7
.xdata$x:0000AFA8                 db    1
.xdata$x:0000AFA9                 db    0
.xdata$x:0000AFAA                 db    0
.xdata$x:0000AFAB                 db    0
.xdata$x:0000AFAC                 dd offset __unwindfunclet$_WinMain@16$8
.xdata$x:0000AFB0                 db    1
.xdata$x:0000AFB1                 db    0
.xdata$x:0000AFB2                 db    0
.xdata$x:0000AFB3                 db    0
.xdata$x:0000AFB4                 dd offset __unwindfunclet$_WinMain@16$9
.xdata$x:0000AFB8                 db    1
.xdata$x:0000AFB9                 db    0
.xdata$x:0000AFBA                 db    0
.xdata$x:0000AFBB                 db    0
.xdata$x:0000AFBC                 dd offset __unwindfunclet$_WinMain@16$10
.xdata$x:0000AFC0                 db    1
.xdata$x:0000AFC1                 db    0
.xdata$x:0000AFC2                 db    0
.xdata$x:0000AFC3                 db    0
.xdata$x:0000AFC4                 dd offset __unwindfunclet$_WinMain@16$11
.xdata$x:0000AFC8                 db    5
.xdata$x:0000AFC9                 db    0
.xdata$x:0000AFCA                 db    0
.xdata$x:0000AFCB                 db    0
.xdata$x:0000AFCC                 dd offset __unwindfunclet$_WinMain@16$12
.xdata$x:0000AFD0                 db    5
.xdata$x:0000AFD1                 db    0
.xdata$x:0000AFD2                 db    0
.xdata$x:0000AFD3                 db    0
.xdata$x:0000AFD4                 dd offset __unwindfunclet$_WinMain@16$13
.xdata$x:0000AFD8                 db    5
.xdata$x:0000AFD9                 db    0
.xdata$x:0000AFDA                 db    0
.xdata$x:0000AFDB                 db    0
.xdata$x:0000AFDC                 dd offset __unwindfunclet$_WinMain@16$14
.xdata$x:0000AFE0                 db    8
.xdata$x:0000AFE1                 db    0
.xdata$x:0000AFE2                 db    0
.xdata$x:0000AFE3                 db    0
.xdata$x:0000AFE4                 dd offset __unwindfunclet$_WinMain@16$15
.xdata$x:0000AFE8                 db    9
.xdata$x:0000AFE9                 db    0
.xdata$x:0000AFEA                 db    0
.xdata$x:0000AFEB                 db    0
.xdata$x:0000AFEC                 dd offset __unwindfunclet$_WinMain@16$16
.xdata$x:0000AFF0                 db  0Ah
.xdata$x:0000AFF1                 db    0
.xdata$x:0000AFF2                 db    0
.xdata$x:0000AFF3                 db    0
.xdata$x:0000AFF4                 dd offset __unwindfunclet$_WinMain@16$17
.xdata$x:0000AFF8                 db  0Bh
.xdata$x:0000AFF9                 db    0
.xdata$x:0000AFFA                 db    0
.xdata$x:0000AFFB                 db    0
.xdata$x:0000AFFC                 dd offset __unwindfunclet$_WinMain@16$18
.xdata$x:0000B000                 db  0Bh
.xdata$x:0000B001                 db    0
.xdata$x:0000B002                 db    0
.xdata$x:0000B003                 db    0
.xdata$x:0000B004                 db    0
.xdata$x:0000B005                 db    0
.xdata$x:0000B006                 db    0
.xdata$x:0000B007                 db    0
.xdata$x:0000B008                 db  0Bh
.xdata$x:0000B009                 db    0
.xdata$x:0000B00A                 db    0
.xdata$x:0000B00B                 db    0
.xdata$x:0000B00C                 db    0
.xdata$x:0000B00D                 db    0
.xdata$x:0000B00E                 db    0
.xdata$x:0000B00F                 db    0
.xdata$x:0000B00F _xdata$x        ends
.xdata$x:0000B00F
.xdata$x:0000B010 ; ===========================================================================
.xdata$x:0000B010
.xdata$x:0000B010 ; Segment type: Pure data
.xdata$x:0000B010 ; Segment permissions: Read
.xdata$x:0000B010 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B010                 assume cs:_xdata$x
.xdata$x:0000B010                 ;org 0B010h
.xdata$x:0000B010 ; COMDAT (pick associative to section at 7F6C)
.xdata$x:0000B010 __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ db 0FFh
.xdata$x:0000B010                                         ; DATA XREF: .xdata$x:0000B020o
.xdata$x:0000B011                 db 0FFh
.xdata$x:0000B012                 db 0FFh
.xdata$x:0000B013                 db 0FFh
.xdata$x:0000B014                 dd offset __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
.xdata$x:0000B018 __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ db  22h ; "
.xdata$x:0000B018                                         ; DATA XREF: __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ+11o
.xdata$x:0000B019                 db    5
.xdata$x:0000B01A                 db  93h ; ô
.xdata$x:0000B01B                 db  19h
.xdata$x:0000B01C                 db    1
.xdata$x:0000B01D                 db    0
.xdata$x:0000B01E                 db    0
.xdata$x:0000B01F                 db    0
.xdata$x:0000B020                 dd offset __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
.xdata$x:0000B024                 db    0
.xdata$x:0000B025                 db    0
.xdata$x:0000B026                 db    0
.xdata$x:0000B027                 db    0
.xdata$x:0000B028                 db    0
.xdata$x:0000B029                 db    0
.xdata$x:0000B02A                 db    0
.xdata$x:0000B02B                 db    0
.xdata$x:0000B02C                 db    0
.xdata$x:0000B02D                 db    0
.xdata$x:0000B02E                 db    0
.xdata$x:0000B02F                 db    0
.xdata$x:0000B030                 db    0
.xdata$x:0000B031                 db    0
.xdata$x:0000B032                 db    0
.xdata$x:0000B033                 db    0
.xdata$x:0000B034                 db    0
.xdata$x:0000B035                 db    0
.xdata$x:0000B036                 db    0
.xdata$x:0000B037                 db    0
.xdata$x:0000B038                 db    0
.xdata$x:0000B039                 db    0
.xdata$x:0000B03A                 db    0
.xdata$x:0000B03B                 db    0
.xdata$x:0000B03B _xdata$x        ends
.xdata$x:0000B03B
.xdata$x:0000B03C ; ===========================================================================
.xdata$x:0000B03C
.xdata$x:0000B03C ; Segment type: Pure data
.xdata$x:0000B03C ; Segment permissions: Read
.xdata$x:0000B03C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B03C                 assume cs:_xdata$x
.xdata$x:0000B03C                 ;org 0B03Ch
.xdata$x:0000B03C ; COMDAT (pick associative to section at 6B08)
.xdata$x:0000B03C __unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z db 0FFh
.xdata$x:0000B03C                                         ; DATA XREF: .xdata$x:0000B04Co
.xdata$x:0000B03D                 db 0FFh
.xdata$x:0000B03E                 db 0FFh
.xdata$x:0000B03F                 db 0FFh
.xdata$x:0000B040                 dd offset __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0
.xdata$x:0000B044 __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z db  22h ; "
.xdata$x:0000B044                                         ; DATA XREF: __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z+11o
.xdata$x:0000B045                 db    5
.xdata$x:0000B046                 db  93h ; ô
.xdata$x:0000B047                 db  19h
.xdata$x:0000B048                 db    1
.xdata$x:0000B049                 db    0
.xdata$x:0000B04A                 db    0
.xdata$x:0000B04B                 db    0
.xdata$x:0000B04C                 dd offset __unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.xdata$x:0000B050                 db    0
.xdata$x:0000B051                 db    0
.xdata$x:0000B052                 db    0
.xdata$x:0000B053                 db    0
.xdata$x:0000B054                 db    0
.xdata$x:0000B055                 db    0
.xdata$x:0000B056                 db    0
.xdata$x:0000B057                 db    0
.xdata$x:0000B058                 db    0
.xdata$x:0000B059                 db    0
.xdata$x:0000B05A                 db    0
.xdata$x:0000B05B                 db    0
.xdata$x:0000B05C                 db    0
.xdata$x:0000B05D                 db    0
.xdata$x:0000B05E                 db    0
.xdata$x:0000B05F                 db    0
.xdata$x:0000B060                 db    0
.xdata$x:0000B061                 db    0
.xdata$x:0000B062                 db    0
.xdata$x:0000B063                 db    0
.xdata$x:0000B064                 db    0
.xdata$x:0000B065                 db    0
.xdata$x:0000B066                 db    0
.xdata$x:0000B067                 db    0
.xdata$x:0000B067 _xdata$x        ends
.xdata$x:0000B067
.xdata$x:0000B068 ; ===========================================================================
.xdata$x:0000B068
.xdata$x:0000B068 ; Segment type: Pure data
.xdata$x:0000B068 ; Segment permissions: Read
.xdata$x:0000B068 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B068                 assume cs:_xdata$x
.xdata$x:0000B068                 ;org 0B068h
.xdata$x:0000B068 ; COMDAT (pick associative to section at 6838)
.xdata$x:0000B068 __unwindtable$??1_Iterator_base12@std@@QAE@XZ db 0FFh
.xdata$x:0000B068                                         ; DATA XREF: .xdata$x:0000B078o
.xdata$x:0000B069                 db 0FFh
.xdata$x:0000B06A                 db 0FFh
.xdata$x:0000B06B                 db 0FFh
.xdata$x:0000B06C                 dd offset __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0
.xdata$x:0000B070 __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ db  22h ; "
.xdata$x:0000B070                                         ; DATA XREF: __ehhandler$??1_Iterator_base12@std@@QAE@XZ+11o
.xdata$x:0000B071                 db    5
.xdata$x:0000B072                 db  93h ; ô
.xdata$x:0000B073                 db  19h
.xdata$x:0000B074                 db    1
.xdata$x:0000B075                 db    0
.xdata$x:0000B076                 db    0
.xdata$x:0000B077                 db    0
.xdata$x:0000B078                 dd offset __unwindtable$??1_Iterator_base12@std@@QAE@XZ
.xdata$x:0000B07C                 db    0
.xdata$x:0000B07D                 db    0
.xdata$x:0000B07E                 db    0
.xdata$x:0000B07F                 db    0
.xdata$x:0000B080                 db    0
.xdata$x:0000B081                 db    0
.xdata$x:0000B082                 db    0
.xdata$x:0000B083                 db    0
.xdata$x:0000B084                 db    0
.xdata$x:0000B085                 db    0
.xdata$x:0000B086                 db    0
.xdata$x:0000B087                 db    0
.xdata$x:0000B088                 db    0
.xdata$x:0000B089                 db    0
.xdata$x:0000B08A                 db    0
.xdata$x:0000B08B                 db    0
.xdata$x:0000B08C                 db    0
.xdata$x:0000B08D                 db    0
.xdata$x:0000B08E                 db    0
.xdata$x:0000B08F                 db    0
.xdata$x:0000B090                 db    0
.xdata$x:0000B091                 db    0
.xdata$x:0000B092                 db    0
.xdata$x:0000B093                 db    0
.xdata$x:0000B093 _xdata$x        ends
.xdata$x:0000B093
.xdata$x:0000B094 ; ===========================================================================
.xdata$x:0000B094
.xdata$x:0000B094 ; Segment type: Pure data
.xdata$x:0000B094 ; Segment permissions: Read
.xdata$x:0000B094 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B094                 assume cs:_xdata$x
.xdata$x:0000B094                 ;org 0B094h
.xdata$x:0000B094 ; COMDAT (pick associative to section at 72D0)
.xdata$x:0000B094 __unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z db 0FFh
.xdata$x:0000B094                                         ; DATA XREF: .xdata$x:0000B0ACo
.xdata$x:0000B095                 db 0FFh
.xdata$x:0000B096                 db 0FFh
.xdata$x:0000B097                 db 0FFh
.xdata$x:0000B098                 dd offset __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0
.xdata$x:0000B09C                 db 0FFh
.xdata$x:0000B09D                 db 0FFh
.xdata$x:0000B09E                 db 0FFh
.xdata$x:0000B09F                 db 0FFh
.xdata$x:0000B0A0                 dd offset __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1
.xdata$x:0000B0A4 __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z db  22h ; "
.xdata$x:0000B0A4                                         ; DATA XREF: __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z+11o
.xdata$x:0000B0A5                 db    5
.xdata$x:0000B0A6                 db  93h ; ô
.xdata$x:0000B0A7                 db  19h
.xdata$x:0000B0A8                 db    2
.xdata$x:0000B0A9                 db    0
.xdata$x:0000B0AA                 db    0
.xdata$x:0000B0AB                 db    0
.xdata$x:0000B0AC                 dd offset __unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.xdata$x:0000B0B0                 db    0
.xdata$x:0000B0B1                 db    0
.xdata$x:0000B0B2                 db    0
.xdata$x:0000B0B3                 db    0
.xdata$x:0000B0B4                 db    0
.xdata$x:0000B0B5                 db    0
.xdata$x:0000B0B6                 db    0
.xdata$x:0000B0B7                 db    0
.xdata$x:0000B0B8                 db    0
.xdata$x:0000B0B9                 db    0
.xdata$x:0000B0BA                 db    0
.xdata$x:0000B0BB                 db    0
.xdata$x:0000B0BC                 db    0
.xdata$x:0000B0BD                 db    0
.xdata$x:0000B0BE                 db    0
.xdata$x:0000B0BF                 db    0
.xdata$x:0000B0C0                 db    0
.xdata$x:0000B0C1                 db    0
.xdata$x:0000B0C2                 db    0
.xdata$x:0000B0C3                 db    0
.xdata$x:0000B0C4                 db    0
.xdata$x:0000B0C5                 db    0
.xdata$x:0000B0C6                 db    0
.xdata$x:0000B0C7                 db    0
.xdata$x:0000B0C7 _xdata$x        ends
.xdata$x:0000B0C7
.xdata$x:0000B0C8 ; ===========================================================================
.xdata$x:0000B0C8
.xdata$x:0000B0C8 ; Segment type: Pure data
.xdata$x:0000B0C8 ; Segment permissions: Read
.xdata$x:0000B0C8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B0C8                 assume cs:_xdata$x
.xdata$x:0000B0C8                 ;org 0B0C8h
.xdata$x:0000B0C8 ; COMDAT (pick associative to section at 5044)
.xdata$x:0000B0C8 __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000B0C8                                         ; DATA XREF: .xdata$x:0000B0D8o
.xdata$x:0000B0C9                 db 0FFh
.xdata$x:0000B0CA                 db 0FFh
.xdata$x:0000B0CB                 db 0FFh
.xdata$x:0000B0CC                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:0000B0D0 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000B0D0                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:0000B0D1                 db    5
.xdata$x:0000B0D2                 db  93h ; ô
.xdata$x:0000B0D3                 db  19h
.xdata$x:0000B0D4                 db    1
.xdata$x:0000B0D5                 db    0
.xdata$x:0000B0D6                 db    0
.xdata$x:0000B0D7                 db    0
.xdata$x:0000B0D8                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:0000B0DC                 db    0
.xdata$x:0000B0DD                 db    0
.xdata$x:0000B0DE                 db    0
.xdata$x:0000B0DF                 db    0
.xdata$x:0000B0E0                 db    0
.xdata$x:0000B0E1                 db    0
.xdata$x:0000B0E2                 db    0
.xdata$x:0000B0E3                 db    0
.xdata$x:0000B0E4                 db    0
.xdata$x:0000B0E5                 db    0
.xdata$x:0000B0E6                 db    0
.xdata$x:0000B0E7                 db    0
.xdata$x:0000B0E8                 db    0
.xdata$x:0000B0E9                 db    0
.xdata$x:0000B0EA                 db    0
.xdata$x:0000B0EB                 db    0
.xdata$x:0000B0EC                 db    0
.xdata$x:0000B0ED                 db    0
.xdata$x:0000B0EE                 db    0
.xdata$x:0000B0EF                 db    0
.xdata$x:0000B0F0                 db    0
.xdata$x:0000B0F1                 db    0
.xdata$x:0000B0F2                 db    0
.xdata$x:0000B0F3                 db    0
.xdata$x:0000B0F3 _xdata$x        ends
.xdata$x:0000B0F3
.xdata$x:0000B0F4 ; ===========================================================================
.xdata$x:0000B0F4
.xdata$x:0000B0F4 ; Segment type: Pure data
.xdata$x:0000B0F4 ; Segment permissions: Read
.xdata$x:0000B0F4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B0F4                 assume cs:_xdata$x
.xdata$x:0000B0F4                 ;org 0B0F4h
.xdata$x:0000B0F4 ; COMDAT (pick associative to section at 6134)
.xdata$x:0000B0F4 __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000B0F4                                         ; DATA XREF: .xdata$x:0000B104o
.xdata$x:0000B0F5                 db 0FFh
.xdata$x:0000B0F6                 db 0FFh
.xdata$x:0000B0F7                 db 0FFh
.xdata$x:0000B0F8                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:0000B0FC __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000B0FC                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:0000B0FD                 db    5
.xdata$x:0000B0FE                 db  93h ; ô
.xdata$x:0000B0FF                 db  19h
.xdata$x:0000B100                 db    1
.xdata$x:0000B101                 db    0
.xdata$x:0000B102                 db    0
.xdata$x:0000B103                 db    0
.xdata$x:0000B104                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:0000B108                 align 20h
.xdata$x:0000B108 _xdata$x        ends
.xdata$x:0000B108
.xdata$x:0000B120 ; ===========================================================================
.xdata$x:0000B120
.xdata$x:0000B120 ; Segment type: Pure data
.xdata$x:0000B120 ; Segment permissions: Read
.xdata$x:0000B120 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B120                 assume cs:_xdata$x
.xdata$x:0000B120                 ;org 0B120h
.xdata$x:0000B120 ; COMDAT (pick associative to section at 4D48)
.xdata$x:0000B120 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db 0FFh
.xdata$x:0000B120                                         ; DATA XREF: .xdata$x:0000B130o
.xdata$x:0000B121                 db 0FFh
.xdata$x:0000B122                 db 0FFh
.xdata$x:0000B123                 db 0FFh
.xdata$x:0000B124                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
.xdata$x:0000B128 __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db  22h ; "
.xdata$x:0000B128                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z+11o
.xdata$x:0000B129                 db    5
.xdata$x:0000B12A                 db  93h ; ô
.xdata$x:0000B12B                 db  19h
.xdata$x:0000B12C                 db    1
.xdata$x:0000B12D                 db    0
.xdata$x:0000B12E                 db    0
.xdata$x:0000B12F                 db    0
.xdata$x:0000B130                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.xdata$x:0000B134                 db    0
.xdata$x:0000B135                 db    0
.xdata$x:0000B136                 db    0
.xdata$x:0000B137                 db    0
.xdata$x:0000B138                 db    0
.xdata$x:0000B139                 db    0
.xdata$x:0000B13A                 db    0
.xdata$x:0000B13B                 db    0
.xdata$x:0000B13C                 db    0
.xdata$x:0000B13D                 db    0
.xdata$x:0000B13E                 db    0
.xdata$x:0000B13F                 db    0
.xdata$x:0000B140                 db    0
.xdata$x:0000B141                 db    0
.xdata$x:0000B142                 db    0
.xdata$x:0000B143                 db    0
.xdata$x:0000B144                 db    0
.xdata$x:0000B145                 db    0
.xdata$x:0000B146                 db    0
.xdata$x:0000B147                 db    0
.xdata$x:0000B148                 db    0
.xdata$x:0000B149                 db    0
.xdata$x:0000B14A                 db    0
.xdata$x:0000B14B                 db    0
.xdata$x:0000B14B _xdata$x        ends
.xdata$x:0000B14B
.xdata$x:0000B14C ; ===========================================================================
.xdata$x:0000B14C
.xdata$x:0000B14C ; Segment type: Pure data
.xdata$x:0000B14C ; Segment permissions: Read
.xdata$x:0000B14C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B14C                 assume cs:_xdata$x
.xdata$x:0000B14C                 ;org 0B14Ch
.xdata$x:0000B14C ; COMDAT (pick associative to section at 5F64)
.xdata$x:0000B14C __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000B14C                                         ; DATA XREF: .xdata$x:0000B15Co
.xdata$x:0000B14D                 db 0FFh
.xdata$x:0000B14E                 db 0FFh
.xdata$x:0000B14F                 db 0FFh
.xdata$x:0000B150                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000B154 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000B154                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000B155                 db    5
.xdata$x:0000B156                 db  93h ; ô
.xdata$x:0000B157                 db  19h
.xdata$x:0000B158                 db    1
.xdata$x:0000B159                 db    0
.xdata$x:0000B15A                 db    0
.xdata$x:0000B15B                 db    0
.xdata$x:0000B15C                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.xdata$x:0000B160                 db    0
.xdata$x:0000B161                 db    0
.xdata$x:0000B162                 db    0
.xdata$x:0000B163                 db    0
.xdata$x:0000B164                 db    0
.xdata$x:0000B165                 db    0
.xdata$x:0000B166                 db    0
.xdata$x:0000B167                 db    0
.xdata$x:0000B168                 db    0
.xdata$x:0000B169                 db    0
.xdata$x:0000B16A                 db    0
.xdata$x:0000B16B                 db    0
.xdata$x:0000B16C                 db    0
.xdata$x:0000B16D                 db    0
.xdata$x:0000B16E                 db    0
.xdata$x:0000B16F                 db    0
.xdata$x:0000B170                 db    0
.xdata$x:0000B171                 db    0
.xdata$x:0000B172                 db    0
.xdata$x:0000B173                 db    0
.xdata$x:0000B174                 db    0
.xdata$x:0000B175                 db    0
.xdata$x:0000B176                 db    0
.xdata$x:0000B177                 db    0
.xdata$x:0000B177 _xdata$x        ends
.xdata$x:0000B177
.xdata$x:0000B178 ; ===========================================================================
.xdata$x:0000B178
.xdata$x:0000B178 ; Segment type: Pure data
.xdata$x:0000B178 ; Segment permissions: Read
.xdata$x:0000B178 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B178                 assume cs:_xdata$x
.xdata$x:0000B178                 ;org 0B178h
.xdata$x:0000B178 ; COMDAT (pick associative to section at 55C8)
.xdata$x:0000B178 __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000B178                                         ; DATA XREF: .xdata$x:0000B188o
.xdata$x:0000B179                 db 0FFh
.xdata$x:0000B17A                 db 0FFh
.xdata$x:0000B17B                 db 0FFh
.xdata$x:0000B17C                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
.xdata$x:0000B180 __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000B180                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ+11o
.xdata$x:0000B181                 db    5
.xdata$x:0000B182                 db  93h ; ô
.xdata$x:0000B183                 db  19h
.xdata$x:0000B184                 db    1
.xdata$x:0000B185                 db    0
.xdata$x:0000B186                 db    0
.xdata$x:0000B187                 db    0
.xdata$x:0000B188                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.xdata$x:0000B18C                 db    0
.xdata$x:0000B18D                 db    0
.xdata$x:0000B18E                 db    0
.xdata$x:0000B18F                 db    0
.xdata$x:0000B190                 db    0
.xdata$x:0000B191                 db    0
.xdata$x:0000B192                 db    0
.xdata$x:0000B193                 db    0
.xdata$x:0000B194                 db    0
.xdata$x:0000B195                 db    0
.xdata$x:0000B196                 db    0
.xdata$x:0000B197                 db    0
.xdata$x:0000B198                 db    0
.xdata$x:0000B199                 db    0
.xdata$x:0000B19A                 db    0
.xdata$x:0000B19B                 db    0
.xdata$x:0000B19C                 db    0
.xdata$x:0000B19D                 db    0
.xdata$x:0000B19E                 db    0
.xdata$x:0000B19F                 db    0
.xdata$x:0000B1A0                 db    0
.xdata$x:0000B1A1                 db    0
.xdata$x:0000B1A2                 db    0
.xdata$x:0000B1A3                 db    0
.xdata$x:0000B1A3 _xdata$x        ends
.xdata$x:0000B1A3
.xdata$x:0000B1A4 ; ===========================================================================
.xdata$x:0000B1A4
.xdata$x:0000B1A4 ; Segment type: Pure data
.xdata$x:0000B1A4 ; Segment permissions: Read
.xdata$x:0000B1A4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B1A4                 assume cs:_xdata$x
.xdata$x:0000B1A4                 ;org 0B1A4h
.xdata$x:0000B1A4 ; COMDAT (pick associative to section at 5530)
.xdata$x:0000B1A4 __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db 0FFh
.xdata$x:0000B1A4                                         ; DATA XREF: .xdata$x:0000B1B4o
.xdata$x:0000B1A5                 db 0FFh
.xdata$x:0000B1A6                 db 0FFh
.xdata$x:0000B1A7                 db 0FFh
.xdata$x:0000B1A8                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
.xdata$x:0000B1AC __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db  22h ; "
.xdata$x:0000B1AC                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z+11o
.xdata$x:0000B1AD                 db    5
.xdata$x:0000B1AE                 db  93h ; ô
.xdata$x:0000B1AF                 db  19h
.xdata$x:0000B1B0                 db    1
.xdata$x:0000B1B1                 db    0
.xdata$x:0000B1B2                 db    0
.xdata$x:0000B1B3                 db    0
.xdata$x:0000B1B4                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.xdata$x:0000B1B8                 db    0
.xdata$x:0000B1B9                 db    0
.xdata$x:0000B1BA                 db    0
.xdata$x:0000B1BB                 db    0
.xdata$x:0000B1BC                 db    0
.xdata$x:0000B1BD                 db    0
.xdata$x:0000B1BE                 db    0
.xdata$x:0000B1BF                 db    0
.xdata$x:0000B1C0                 db    0
.xdata$x:0000B1C1                 db    0
.xdata$x:0000B1C2                 db    0
.xdata$x:0000B1C3                 db    0
.xdata$x:0000B1C4                 db    0
.xdata$x:0000B1C5                 db    0
.xdata$x:0000B1C6                 db    0
.xdata$x:0000B1C7                 db    0
.xdata$x:0000B1C8                 db    0
.xdata$x:0000B1C9                 db    0
.xdata$x:0000B1CA                 db    0
.xdata$x:0000B1CB                 db    0
.xdata$x:0000B1CC                 db    0
.xdata$x:0000B1CD                 db    0
.xdata$x:0000B1CE                 db    0
.xdata$x:0000B1CF                 db    0
.xdata$x:0000B1CF _xdata$x        ends
.xdata$x:0000B1CF
.xdata$x:0000B1D0 ; ===========================================================================
.xdata$x:0000B1D0
.xdata$x:0000B1D0 ; Segment type: Pure data
.xdata$x:0000B1D0 ; Segment permissions: Read
.xdata$x:0000B1D0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B1D0                 assume cs:_xdata$x
.xdata$x:0000B1D0                 ;org 0B1D0h
.xdata$x:0000B1D0 ; COMDAT (pick associative to section at 63DC)
.xdata$x:0000B1D0 __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000B1D0                                         ; DATA XREF: .xdata$x:0000B1E0o
.xdata$x:0000B1D1                 db 0FFh
.xdata$x:0000B1D2                 db 0FFh
.xdata$x:0000B1D3                 db 0FFh
.xdata$x:0000B1D4                 dd offset __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
.xdata$x:0000B1D8 __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000B1D8                                         ; DATA XREF: __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ+11o
.xdata$x:0000B1D9                 db    5
.xdata$x:0000B1DA                 db  93h ; ô
.xdata$x:0000B1DB                 db  19h
.xdata$x:0000B1DC                 db    1
.xdata$x:0000B1DD                 db    0
.xdata$x:0000B1DE                 db    0
.xdata$x:0000B1DF                 db    0
.xdata$x:0000B1E0                 dd offset __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.xdata$x:0000B1E4                 db    0
.xdata$x:0000B1E5                 db    0
.xdata$x:0000B1E6                 db    0
.xdata$x:0000B1E7                 db    0
.xdata$x:0000B1E8                 db    0
.xdata$x:0000B1E9                 db    0
.xdata$x:0000B1EA                 db    0
.xdata$x:0000B1EB                 db    0
.xdata$x:0000B1EC                 db    0
.xdata$x:0000B1ED                 db    0
.xdata$x:0000B1EE                 db    0
.xdata$x:0000B1EF                 db    0
.xdata$x:0000B1F0                 db    0
.xdata$x:0000B1F1                 db    0
.xdata$x:0000B1F2                 db    0
.xdata$x:0000B1F3                 db    0
.xdata$x:0000B1F4                 db    0
.xdata$x:0000B1F5                 db    0
.xdata$x:0000B1F6                 db    0
.xdata$x:0000B1F7                 db    0
.xdata$x:0000B1F8                 db    0
.xdata$x:0000B1F9                 db    0
.xdata$x:0000B1FA                 db    0
.xdata$x:0000B1FB                 db    0
.xdata$x:0000B1FB _xdata$x        ends
.xdata$x:0000B1FB
.xdata$x:0000B1FC ; ===========================================================================
.xdata$x:0000B1FC
.xdata$x:0000B1FC ; Segment type: Pure data
.xdata$x:0000B1FC ; Segment permissions: Read
.xdata$x:0000B1FC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B1FC                 assume cs:_xdata$x
.xdata$x:0000B1FC                 ;org 0B1FCh
.xdata$x:0000B1FC ; COMDAT (pick associative to section at 75E0)
.xdata$x:0000B1FC __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 db    0
.xdata$x:0000B1FC                                         ; DATA XREF: .xdata$x:0000B284o
.xdata$x:0000B1FD                 db    0
.xdata$x:0000B1FE                 db    0
.xdata$x:0000B1FF                 db    0
.xdata$x:0000B200                 db    0
.xdata$x:0000B201                 db    0
.xdata$x:0000B202                 db    0
.xdata$x:0000B203                 db    0
.xdata$x:0000B204                 db    0
.xdata$x:0000B205                 db    0
.xdata$x:0000B206                 db    0
.xdata$x:0000B207                 db    0
.xdata$x:0000B208                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.xdata$x:0000B20C __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 db    0
.xdata$x:0000B20C                                         ; DATA XREF: .xdata$x:0000B270o
.xdata$x:0000B20D                 db    0
.xdata$x:0000B20E                 db    0
.xdata$x:0000B20F                 db    0
.xdata$x:0000B210                 db    0
.xdata$x:0000B211                 db    0
.xdata$x:0000B212                 db    0
.xdata$x:0000B213                 db    0
.xdata$x:0000B214                 db    0
.xdata$x:0000B215                 db    0
.xdata$x:0000B216                 db    0
.xdata$x:0000B217                 db    0
.xdata$x:0000B218                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
.xdata$x:0000B21C __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db 0FFh
.xdata$x:0000B21C                                         ; DATA XREF: .xdata$x:0000B244o
.xdata$x:0000B21D                 db 0FFh
.xdata$x:0000B21E                 db 0FFh
.xdata$x:0000B21F                 db 0FFh
.xdata$x:0000B220                 db    0
.xdata$x:0000B221                 db    0
.xdata$x:0000B222                 db    0
.xdata$x:0000B223                 db    0
.xdata$x:0000B224                 db 0FFh
.xdata$x:0000B225                 db 0FFh
.xdata$x:0000B226                 db 0FFh
.xdata$x:0000B227                 db 0FFh
.xdata$x:0000B228                 db    0
.xdata$x:0000B229                 db    0
.xdata$x:0000B22A                 db    0
.xdata$x:0000B22B                 db    0
.xdata$x:0000B22C                 db    1
.xdata$x:0000B22D                 db    0
.xdata$x:0000B22E                 db    0
.xdata$x:0000B22F                 db    0
.xdata$x:0000B230                 db    0
.xdata$x:0000B231                 db    0
.xdata$x:0000B232                 db    0
.xdata$x:0000B233                 db    0
.xdata$x:0000B234                 db    1
.xdata$x:0000B235                 db    0
.xdata$x:0000B236                 db    0
.xdata$x:0000B237                 db    0
.xdata$x:0000B238                 db    0
.xdata$x:0000B239                 db    0
.xdata$x:0000B23A                 db    0
.xdata$x:0000B23B                 db    0
.xdata$x:0000B23C __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:0000B23C                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z+11o
.xdata$x:0000B23D                 db    5
.xdata$x:0000B23E                 db  93h ; ô
.xdata$x:0000B23F                 db  19h
.xdata$x:0000B240                 db    4
.xdata$x:0000B241                 db    0
.xdata$x:0000B242                 db    0
.xdata$x:0000B243                 db    0
.xdata$x:0000B244                 dd offset __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:0000B248                 db    2
.xdata$x:0000B249                 db    0
.xdata$x:0000B24A                 db    0
.xdata$x:0000B24B                 db    0
.xdata$x:0000B24C                 dd offset __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:0000B250                 align 20h
.xdata$x:0000B260 __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db    2
.xdata$x:0000B260                                         ; DATA XREF: .xdata$x:0000B24Co
.xdata$x:0000B261                 db    0
.xdata$x:0000B262                 db    0
.xdata$x:0000B263                 db    0
.xdata$x:0000B264                 db    2
.xdata$x:0000B265                 db    0
.xdata$x:0000B266                 db    0
.xdata$x:0000B267                 db    0
.xdata$x:0000B268                 db    3
.xdata$x:0000B269                 db    0
.xdata$x:0000B26A                 db    0
.xdata$x:0000B26B                 db    0
.xdata$x:0000B26C                 db    1
.xdata$x:0000B26D                 db    0
.xdata$x:0000B26E                 db    0
.xdata$x:0000B26F                 db    0
.xdata$x:0000B270                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
.xdata$x:0000B274                 db    0
.xdata$x:0000B275                 db    0
.xdata$x:0000B276                 db    0
.xdata$x:0000B277                 db    0
.xdata$x:0000B278                 db    0
.xdata$x:0000B279                 db    0
.xdata$x:0000B27A                 db    0
.xdata$x:0000B27B                 db    0
.xdata$x:0000B27C                 db    3
.xdata$x:0000B27D                 db    0
.xdata$x:0000B27E                 db    0
.xdata$x:0000B27F                 db    0
.xdata$x:0000B280                 db    1
.xdata$x:0000B281                 db    0
.xdata$x:0000B282                 db    0
.xdata$x:0000B283                 db    0
.xdata$x:0000B284                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
.xdata$x:0000B284 _xdata$x        ends
.xdata$x:0000B284
.xdata$x:0000B288 ; ===========================================================================
.xdata$x:0000B288
.xdata$x:0000B288 ; Segment type: Pure data
.xdata$x:0000B288 ; Segment permissions: Read
.xdata$x:0000B288 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B288                 assume cs:_xdata$x
.xdata$x:0000B288                 ;org 0B288h
.xdata$x:0000B288 ; COMDAT (pick associative to section at 5C58)
.xdata$x:0000B288 __unwindtable$??0_Generic_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000B288                                         ; DATA XREF: .xdata$x:0000B298o
.xdata$x:0000B289                 db 0FFh
.xdata$x:0000B28A                 db 0FFh
.xdata$x:0000B28B                 db 0FFh
.xdata$x:0000B28C                 dd offset __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0
.xdata$x:0000B290 __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000B290                                         ; DATA XREF: __ehhandler$??0_Generic_error_category@std@@QAE@XZ+11o
.xdata$x:0000B291                 db    5
.xdata$x:0000B292                 db  93h ; ô
.xdata$x:0000B293                 db  19h
.xdata$x:0000B294                 db    1
.xdata$x:0000B295                 db    0
.xdata$x:0000B296                 db    0
.xdata$x:0000B297                 db    0
.xdata$x:0000B298                 dd offset __unwindtable$??0_Generic_error_category@std@@QAE@XZ
.xdata$x:0000B29C                 db    0
.xdata$x:0000B29D                 db    0
.xdata$x:0000B29E                 db    0
.xdata$x:0000B29F                 db    0
.xdata$x:0000B2A0                 db    0
.xdata$x:0000B2A1                 db    0
.xdata$x:0000B2A2                 db    0
.xdata$x:0000B2A3                 db    0
.xdata$x:0000B2A4                 db    0
.xdata$x:0000B2A5                 db    0
.xdata$x:0000B2A6                 db    0
.xdata$x:0000B2A7                 db    0
.xdata$x:0000B2A8                 db    0
.xdata$x:0000B2A9                 db    0
.xdata$x:0000B2AA                 db    0
.xdata$x:0000B2AB                 db    0
.xdata$x:0000B2AC                 db    0
.xdata$x:0000B2AD                 db    0
.xdata$x:0000B2AE                 db    0
.xdata$x:0000B2AF                 db    0
.xdata$x:0000B2B0                 db    0
.xdata$x:0000B2B1                 db    0
.xdata$x:0000B2B2                 db    0
.xdata$x:0000B2B3                 db    0
.xdata$x:0000B2B3 _xdata$x        ends
.xdata$x:0000B2B3
.xdata$x:0000B2B4 ; ===========================================================================
.xdata$x:0000B2B4
.xdata$x:0000B2B4 ; Segment type: Pure data
.xdata$x:0000B2B4 ; Segment permissions: Read
.xdata$x:0000B2B4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B2B4                 assume cs:_xdata$x
.xdata$x:0000B2B4                 ;org 0B2B4h
.xdata$x:0000B2B4 ; COMDAT (pick associative to section at 9CE4)
.xdata$x:0000B2B4 __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:0000B2B4                                         ; DATA XREF: .xdata$x:0000B2C4o
.xdata$x:0000B2B5                 db 0FFh
.xdata$x:0000B2B6                 db 0FFh
.xdata$x:0000B2B7                 db 0FFh
.xdata$x:0000B2B8                 dd offset __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:0000B2BC __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:0000B2BC                                         ; DATA XREF: __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:0000B2BD                 db    5
.xdata$x:0000B2BE                 db  93h ; ô
.xdata$x:0000B2BF                 db  19h
.xdata$x:0000B2C0                 db    1
.xdata$x:0000B2C1                 db    0
.xdata$x:0000B2C2                 db    0
.xdata$x:0000B2C3                 db    0
.xdata$x:0000B2C4                 dd offset __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000B2C8                 align 20h
.xdata$x:0000B2C8 _xdata$x        ends
.xdata$x:0000B2C8
.xdata$x:0000B2E0 ; ===========================================================================
.xdata$x:0000B2E0
.xdata$x:0000B2E0 ; Segment type: Pure data
.xdata$x:0000B2E0 ; Segment permissions: Read
.xdata$x:0000B2E0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B2E0                 assume cs:_xdata$x
.xdata$x:0000B2E0                 ;org 0B2E0h
.xdata$x:0000B2E0 ; COMDAT (pick associative to section at 6758)
.xdata$x:0000B2E0 __unwindtable$??1_Generic_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000B2E0                                         ; DATA XREF: .xdata$x:0000B2F0o
.xdata$x:0000B2E1                 db 0FFh
.xdata$x:0000B2E2                 db 0FFh
.xdata$x:0000B2E3                 db 0FFh
.xdata$x:0000B2E4                 dd offset __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0
.xdata$x:0000B2E8 __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000B2E8                                         ; DATA XREF: __ehhandler$??1_Generic_error_category@std@@UAE@XZ+11o
.xdata$x:0000B2E9                 db    5
.xdata$x:0000B2EA                 db  93h ; ô
.xdata$x:0000B2EB                 db  19h
.xdata$x:0000B2EC                 db    1
.xdata$x:0000B2ED                 db    0
.xdata$x:0000B2EE                 db    0
.xdata$x:0000B2EF                 db    0
.xdata$x:0000B2F0                 dd offset __unwindtable$??1_Generic_error_category@std@@UAE@XZ
.xdata$x:0000B2F4                 db    0
.xdata$x:0000B2F5                 db    0
.xdata$x:0000B2F6                 db    0
.xdata$x:0000B2F7                 db    0
.xdata$x:0000B2F8                 db    0
.xdata$x:0000B2F9                 db    0
.xdata$x:0000B2FA                 db    0
.xdata$x:0000B2FB                 db    0
.xdata$x:0000B2FC                 db    0
.xdata$x:0000B2FD                 db    0
.xdata$x:0000B2FE                 db    0
.xdata$x:0000B2FF                 db    0
.xdata$x:0000B300                 db    0
.xdata$x:0000B301                 db    0
.xdata$x:0000B302                 db    0
.xdata$x:0000B303                 db    0
.xdata$x:0000B304                 db    0
.xdata$x:0000B305                 db    0
.xdata$x:0000B306                 db    0
.xdata$x:0000B307                 db    0
.xdata$x:0000B308                 db    0
.xdata$x:0000B309                 db    0
.xdata$x:0000B30A                 db    0
.xdata$x:0000B30B                 db    0
.xdata$x:0000B30B _xdata$x        ends
.xdata$x:0000B30B
.xdata$x:0000B30C ; ===========================================================================
.xdata$x:0000B30C
.xdata$x:0000B30C ; Segment type: Pure data
.xdata$x:0000B30C ; Segment permissions: Read
.xdata$x:0000B30C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B30C                 assume cs:_xdata$x
.xdata$x:0000B30C                 ;org 0B30Ch
.xdata$x:0000B30C ; COMDAT (pick associative to section at 5CE4)
.xdata$x:0000B30C __unwindtable$??0_Iostream_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000B30C                                         ; DATA XREF: .xdata$x:0000B31Co
.xdata$x:0000B30D                 db 0FFh
.xdata$x:0000B30E                 db 0FFh
.xdata$x:0000B30F                 db 0FFh
.xdata$x:0000B310                 dd offset __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0
.xdata$x:0000B314 __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000B314                                         ; DATA XREF: __ehhandler$??0_Iostream_error_category@std@@QAE@XZ+11o
.xdata$x:0000B315                 db    5
.xdata$x:0000B316                 db  93h ; ô
.xdata$x:0000B317                 db  19h
.xdata$x:0000B318                 db    1
.xdata$x:0000B319                 db    0
.xdata$x:0000B31A                 db    0
.xdata$x:0000B31B                 db    0
.xdata$x:0000B31C                 dd offset __unwindtable$??0_Iostream_error_category@std@@QAE@XZ
.xdata$x:0000B320                 db    0
.xdata$x:0000B321                 db    0
.xdata$x:0000B322                 db    0
.xdata$x:0000B323                 db    0
.xdata$x:0000B324                 db    0
.xdata$x:0000B325                 db    0
.xdata$x:0000B326                 db    0
.xdata$x:0000B327                 db    0
.xdata$x:0000B328                 db    0
.xdata$x:0000B329                 db    0
.xdata$x:0000B32A                 db    0
.xdata$x:0000B32B                 db    0
.xdata$x:0000B32C                 db    0
.xdata$x:0000B32D                 db    0
.xdata$x:0000B32E                 db    0
.xdata$x:0000B32F                 db    0
.xdata$x:0000B330                 db    0
.xdata$x:0000B331                 db    0
.xdata$x:0000B332                 db    0
.xdata$x:0000B333                 db    0
.xdata$x:0000B334                 db    0
.xdata$x:0000B335                 db    0
.xdata$x:0000B336                 db    0
.xdata$x:0000B337                 db    0
.xdata$x:0000B337 _xdata$x        ends
.xdata$x:0000B337
.xdata$x:0000B338 ; ===========================================================================
.xdata$x:0000B338
.xdata$x:0000B338 ; Segment type: Pure data
.xdata$x:0000B338 ; Segment permissions: Read
.xdata$x:0000B338 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B338                 assume cs:_xdata$x
.xdata$x:0000B338                 ;org 0B338h
.xdata$x:0000B338 ; COMDAT (pick associative to section at 9D9C)
.xdata$x:0000B338 __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:0000B338                                         ; DATA XREF: .xdata$x:0000B348o
.xdata$x:0000B339                 db 0FFh
.xdata$x:0000B33A                 db 0FFh
.xdata$x:0000B33B                 db 0FFh
.xdata$x:0000B33C                 dd offset __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:0000B340 __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:0000B340                                         ; DATA XREF: __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:0000B341                 db    5
.xdata$x:0000B342                 db  93h ; ô
.xdata$x:0000B343                 db  19h
.xdata$x:0000B344                 db    1
.xdata$x:0000B345                 db    0
.xdata$x:0000B346                 db    0
.xdata$x:0000B347                 db    0
.xdata$x:0000B348                 dd offset __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000B34C                 db    0
.xdata$x:0000B34D                 db    0
.xdata$x:0000B34E                 db    0
.xdata$x:0000B34F                 db    0
.xdata$x:0000B350                 db    0
.xdata$x:0000B351                 db    0
.xdata$x:0000B352                 db    0
.xdata$x:0000B353                 db    0
.xdata$x:0000B354                 db    0
.xdata$x:0000B355                 db    0
.xdata$x:0000B356                 db    0
.xdata$x:0000B357                 db    0
.xdata$x:0000B358                 db    0
.xdata$x:0000B359                 db    0
.xdata$x:0000B35A                 db    0
.xdata$x:0000B35B                 db    0
.xdata$x:0000B35C                 db    0
.xdata$x:0000B35D                 db    0
.xdata$x:0000B35E                 db    0
.xdata$x:0000B35F                 db    0
.xdata$x:0000B360                 db    0
.xdata$x:0000B361                 db    0
.xdata$x:0000B362                 db    0
.xdata$x:0000B363                 db    0
.xdata$x:0000B363 _xdata$x        ends
.xdata$x:0000B363
.xdata$x:0000B364 ; ===========================================================================
.xdata$x:0000B364
.xdata$x:0000B364 ; Segment type: Pure data
.xdata$x:0000B364 ; Segment permissions: Read
.xdata$x:0000B364 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B364                 assume cs:_xdata$x
.xdata$x:0000B364                 ;org 0B364h
.xdata$x:0000B364 ; COMDAT (pick associative to section at 67C8)
.xdata$x:0000B364 __unwindtable$??1_Iostream_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000B364                                         ; DATA XREF: .xdata$x:0000B374o
.xdata$x:0000B365                 db 0FFh
.xdata$x:0000B366                 db 0FFh
.xdata$x:0000B367                 db 0FFh
.xdata$x:0000B368                 dd offset __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0
.xdata$x:0000B36C __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000B36C                                         ; DATA XREF: __ehhandler$??1_Iostream_error_category@std@@UAE@XZ+11o
.xdata$x:0000B36D                 db    5
.xdata$x:0000B36E                 db  93h ; ô
.xdata$x:0000B36F                 db  19h
.xdata$x:0000B370                 db    1
.xdata$x:0000B371                 db    0
.xdata$x:0000B372                 db    0
.xdata$x:0000B373                 db    0
.xdata$x:0000B374                 dd offset __unwindtable$??1_Iostream_error_category@std@@UAE@XZ
.xdata$x:0000B378                 db    0
.xdata$x:0000B379                 db    0
.xdata$x:0000B37A                 db    0
.xdata$x:0000B37B                 db    0
.xdata$x:0000B37C                 db    0
.xdata$x:0000B37D                 db    0
.xdata$x:0000B37E                 db    0
.xdata$x:0000B37F                 db    0
.xdata$x:0000B380                 db    0
.xdata$x:0000B381                 db    0
.xdata$x:0000B382                 db    0
.xdata$x:0000B383                 db    0
.xdata$x:0000B384                 db    0
.xdata$x:0000B385                 db    0
.xdata$x:0000B386                 db    0
.xdata$x:0000B387                 db    0
.xdata$x:0000B388                 db    0
.xdata$x:0000B389                 db    0
.xdata$x:0000B38A                 db    0
.xdata$x:0000B38B                 db    0
.xdata$x:0000B38C                 db    0
.xdata$x:0000B38D                 db    0
.xdata$x:0000B38E                 db    0
.xdata$x:0000B38F                 db    0
.xdata$x:0000B38F _xdata$x        ends
.xdata$x:0000B38F
.xdata$x:0000B390 ; ===========================================================================
.xdata$x:0000B390
.xdata$x:0000B390 ; Segment type: Pure data
.xdata$x:0000B390 ; Segment permissions: Read
.xdata$x:0000B390 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B390                 assume cs:_xdata$x
.xdata$x:0000B390                 ;org 0B390h
.xdata$x:0000B390 ; COMDAT (pick associative to section at 5DB4)
.xdata$x:0000B390 __unwindtable$??0_System_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000B390                                         ; DATA XREF: .xdata$x:0000B3A0o
.xdata$x:0000B391                 db 0FFh
.xdata$x:0000B392                 db 0FFh
.xdata$x:0000B393                 db 0FFh
.xdata$x:0000B394                 dd offset __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0
.xdata$x:0000B398 __ehfuncinfo$??0_System_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000B398                                         ; DATA XREF: __ehhandler$??0_System_error_category@std@@QAE@XZ+11o
.xdata$x:0000B399                 db    5
.xdata$x:0000B39A                 db  93h ; ô
.xdata$x:0000B39B                 db  19h
.xdata$x:0000B39C                 db    1
.xdata$x:0000B39D                 db    0
.xdata$x:0000B39E                 db    0
.xdata$x:0000B39F                 db    0
.xdata$x:0000B3A0                 dd offset __unwindtable$??0_System_error_category@std@@QAE@XZ
.xdata$x:0000B3A4                 db    0
.xdata$x:0000B3A5                 db    0
.xdata$x:0000B3A6                 db    0
.xdata$x:0000B3A7                 db    0
.xdata$x:0000B3A8                 db    0
.xdata$x:0000B3A9                 db    0
.xdata$x:0000B3AA                 db    0
.xdata$x:0000B3AB                 db    0
.xdata$x:0000B3AC                 db    0
.xdata$x:0000B3AD                 db    0
.xdata$x:0000B3AE                 db    0
.xdata$x:0000B3AF                 db    0
.xdata$x:0000B3B0                 db    0
.xdata$x:0000B3B1                 db    0
.xdata$x:0000B3B2                 db    0
.xdata$x:0000B3B3                 db    0
.xdata$x:0000B3B4                 db    0
.xdata$x:0000B3B5                 db    0
.xdata$x:0000B3B6                 db    0
.xdata$x:0000B3B7                 db    0
.xdata$x:0000B3B8                 db    0
.xdata$x:0000B3B9                 db    0
.xdata$x:0000B3BA                 db    0
.xdata$x:0000B3BB                 db    0
.xdata$x:0000B3BB _xdata$x        ends
.xdata$x:0000B3BB
.xdata$x:0000B3BC ; ===========================================================================
.xdata$x:0000B3BC
.xdata$x:0000B3BC ; Segment type: Pure data
.xdata$x:0000B3BC ; Segment permissions: Read
.xdata$x:0000B3BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B3BC                 assume cs:_xdata$x
.xdata$x:0000B3BC                 ;org 0B3BCh
.xdata$x:0000B3BC ; COMDAT (pick associative to section at 9E60)
.xdata$x:0000B3BC __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:0000B3BC                                         ; DATA XREF: .xdata$x:0000B3CCo
.xdata$x:0000B3BD                 db 0FFh
.xdata$x:0000B3BE                 db 0FFh
.xdata$x:0000B3BF                 db 0FFh
.xdata$x:0000B3C0                 dd offset __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:0000B3C4 __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:0000B3C4                                         ; DATA XREF: __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:0000B3C5                 db    5
.xdata$x:0000B3C6                 db  93h ; ô
.xdata$x:0000B3C7                 db  19h
.xdata$x:0000B3C8                 db    1
.xdata$x:0000B3C9                 db    0
.xdata$x:0000B3CA                 db    0
.xdata$x:0000B3CB                 db    0
.xdata$x:0000B3CC                 dd offset __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000B3D0                 db    0
.xdata$x:0000B3D1                 db    0
.xdata$x:0000B3D2                 db    0
.xdata$x:0000B3D3                 db    0
.xdata$x:0000B3D4                 db    0
.xdata$x:0000B3D5                 db    0
.xdata$x:0000B3D6                 db    0
.xdata$x:0000B3D7                 db    0
.xdata$x:0000B3D8                 db    0
.xdata$x:0000B3D9                 db    0
.xdata$x:0000B3DA                 db    0
.xdata$x:0000B3DB                 db    0
.xdata$x:0000B3DC                 db    0
.xdata$x:0000B3DD                 db    0
.xdata$x:0000B3DE                 db    0
.xdata$x:0000B3DF                 db    0
.xdata$x:0000B3E0                 db    0
.xdata$x:0000B3E1                 db    0
.xdata$x:0000B3E2                 db    0
.xdata$x:0000B3E3                 db    0
.xdata$x:0000B3E4                 db    0
.xdata$x:0000B3E5                 db    0
.xdata$x:0000B3E6                 db    0
.xdata$x:0000B3E7                 db    0
.xdata$x:0000B3E7 _xdata$x        ends
.xdata$x:0000B3E7
.xdata$x:0000B3E8 ; ===========================================================================
.xdata$x:0000B3E8
.xdata$x:0000B3E8 ; Segment type: Pure data
.xdata$x:0000B3E8 ; Segment permissions: Read
.xdata$x:0000B3E8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B3E8                 assume cs:_xdata$x
.xdata$x:0000B3E8                 ;org 0B3E8h
.xdata$x:0000B3E8 ; COMDAT (pick associative to section at 68BC)
.xdata$x:0000B3E8 __unwindtable$??1_System_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000B3E8                                         ; DATA XREF: .xdata$x:0000B3F8o
.xdata$x:0000B3E9                 db 0FFh
.xdata$x:0000B3EA                 db 0FFh
.xdata$x:0000B3EB                 db 0FFh
.xdata$x:0000B3EC                 dd offset __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0
.xdata$x:0000B3F0 __ehfuncinfo$??1_System_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000B3F0                                         ; DATA XREF: __ehhandler$??1_System_error_category@std@@UAE@XZ+11o
.xdata$x:0000B3F1                 db    5
.xdata$x:0000B3F2                 db  93h ; ô
.xdata$x:0000B3F3                 db  19h
.xdata$x:0000B3F4                 db    1
.xdata$x:0000B3F5                 db    0
.xdata$x:0000B3F6                 db    0
.xdata$x:0000B3F7                 db    0
.xdata$x:0000B3F8                 dd offset __unwindtable$??1_System_error_category@std@@UAE@XZ
.xdata$x:0000B3FC                 db    0
.xdata$x:0000B3FD                 db    0
.xdata$x:0000B3FE                 db    0
.xdata$x:0000B3FF                 db    0
.xdata$x:0000B400                 db    0
.xdata$x:0000B401                 db    0
.xdata$x:0000B402                 db    0
.xdata$x:0000B403                 db    0
.xdata$x:0000B404                 db    0
.xdata$x:0000B405                 db    0
.xdata$x:0000B406                 db    0
.xdata$x:0000B407                 db    0
.xdata$x:0000B408                 db    0
.xdata$x:0000B409                 db    0
.xdata$x:0000B40A                 db    0
.xdata$x:0000B40B                 db    0
.xdata$x:0000B40C                 db    0
.xdata$x:0000B40D                 db    0
.xdata$x:0000B40E                 db    0
.xdata$x:0000B40F                 db    0
.xdata$x:0000B410                 db    0
.xdata$x:0000B411                 db    0
.xdata$x:0000B412                 db    0
.xdata$x:0000B413                 db    0
.xdata$x:0000B413 _xdata$x        ends
.xdata$x:0000B413
.xdata$x:0000B414 ; ===========================================================================
.xdata$x:0000B414
.xdata$x:0000B414 ; Segment type: Pure data
.xdata$x:0000B414 ; Segment permissions: Read
.xdata$x:0000B414 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B414                 assume cs:_xdata$x
.xdata$x:0000B414                 ;org 0B414h
.xdata$x:0000B414 ; COMDAT (pick associative to section at 50CC)
.xdata$x:0000B414 __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000B414                                         ; DATA XREF: .xdata$x:0000B424o
.xdata$x:0000B415                 db 0FFh
.xdata$x:0000B416                 db 0FFh
.xdata$x:0000B417                 db 0FFh
.xdata$x:0000B418                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:0000B41C __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000B41C                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:0000B41D                 db    5
.xdata$x:0000B41E                 db  93h ; ô
.xdata$x:0000B41F                 db  19h
.xdata$x:0000B420                 db    1
.xdata$x:0000B421                 db    0
.xdata$x:0000B422                 db    0
.xdata$x:0000B423                 db    0
.xdata$x:0000B424                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:0000B428                 align 20h
.xdata$x:0000B428 _xdata$x        ends
.xdata$x:0000B428
.xdata$x:0000B440 ; ===========================================================================
.xdata$x:0000B440
.xdata$x:0000B440 ; Segment type: Pure data
.xdata$x:0000B440 ; Segment permissions: Read
.xdata$x:0000B440 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B440                 assume cs:_xdata$x
.xdata$x:0000B440                 ;org 0B440h
.xdata$x:0000B440 ; COMDAT (pick associative to section at 61A4)
.xdata$x:0000B440 __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000B440                                         ; DATA XREF: .xdata$x:0000B450o
.xdata$x:0000B441                 db 0FFh
.xdata$x:0000B442                 db 0FFh
.xdata$x:0000B443                 db 0FFh
.xdata$x:0000B444                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:0000B448 __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000B448                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:0000B449                 db    5
.xdata$x:0000B44A                 db  93h ; ô
.xdata$x:0000B44B                 db  19h
.xdata$x:0000B44C                 db    1
.xdata$x:0000B44D                 db    0
.xdata$x:0000B44E                 db    0
.xdata$x:0000B44F                 db    0
.xdata$x:0000B450                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:0000B454                 db    0
.xdata$x:0000B455                 db    0
.xdata$x:0000B456                 db    0
.xdata$x:0000B457                 db    0
.xdata$x:0000B458                 db    0
.xdata$x:0000B459                 db    0
.xdata$x:0000B45A                 db    0
.xdata$x:0000B45B                 db    0
.xdata$x:0000B45C                 db    0
.xdata$x:0000B45D                 db    0
.xdata$x:0000B45E                 db    0
.xdata$x:0000B45F                 db    0
.xdata$x:0000B460                 db    0
.xdata$x:0000B461                 db    0
.xdata$x:0000B462                 db    0
.xdata$x:0000B463                 db    0
.xdata$x:0000B464                 db    0
.xdata$x:0000B465                 db    0
.xdata$x:0000B466                 db    0
.xdata$x:0000B467                 db    0
.xdata$x:0000B468                 db    0
.xdata$x:0000B469                 db    0
.xdata$x:0000B46A                 db    0
.xdata$x:0000B46B                 db    0
.xdata$x:0000B46B _xdata$x        ends
.xdata$x:0000B46B
.xdata$x:0000B46C ; ===========================================================================
.xdata$x:0000B46C
.xdata$x:0000B46C ; Segment type: Pure data
.xdata$x:0000B46C ; Segment permissions: Read
.xdata$x:0000B46C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B46C                 assume cs:_xdata$x
.xdata$x:0000B46C                 ;org 0B46Ch
.xdata$x:0000B46C ; COMDAT (pick associative to section at 4DC4)
.xdata$x:0000B46C __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db 0FFh
.xdata$x:0000B46C                                         ; DATA XREF: .xdata$x:0000B47Co
.xdata$x:0000B46D                 db 0FFh
.xdata$x:0000B46E                 db 0FFh
.xdata$x:0000B46F                 db 0FFh
.xdata$x:0000B470                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0
.xdata$x:0000B474 __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db  22h ; "
.xdata$x:0000B474                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z+11o
.xdata$x:0000B475                 db    5
.xdata$x:0000B476                 db  93h ; ô
.xdata$x:0000B477                 db  19h
.xdata$x:0000B478                 db    1
.xdata$x:0000B479                 db    0
.xdata$x:0000B47A                 db    0
.xdata$x:0000B47B                 db    0
.xdata$x:0000B47C                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.xdata$x:0000B480                 db    0
.xdata$x:0000B481                 db    0
.xdata$x:0000B482                 db    0
.xdata$x:0000B483                 db    0
.xdata$x:0000B484                 db    0
.xdata$x:0000B485                 db    0
.xdata$x:0000B486                 db    0
.xdata$x:0000B487                 db    0
.xdata$x:0000B488                 db    0
.xdata$x:0000B489                 db    0
.xdata$x:0000B48A                 db    0
.xdata$x:0000B48B                 db    0
.xdata$x:0000B48C                 db    0
.xdata$x:0000B48D                 db    0
.xdata$x:0000B48E                 db    0
.xdata$x:0000B48F                 db    0
.xdata$x:0000B490                 db    0
.xdata$x:0000B491                 db    0
.xdata$x:0000B492                 db    0
.xdata$x:0000B493                 db    0
.xdata$x:0000B494                 db    0
.xdata$x:0000B495                 db    0
.xdata$x:0000B496                 db    0
.xdata$x:0000B497                 db    0
.xdata$x:0000B497 _xdata$x        ends
.xdata$x:0000B497
.xdata$x:0000B498 ; ===========================================================================
.xdata$x:0000B498
.xdata$x:0000B498 ; Segment type: Pure data
.xdata$x:0000B498 ; Segment permissions: Read
.xdata$x:0000B498 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B498                 assume cs:_xdata$x
.xdata$x:0000B498                 ;org 0B498h
.xdata$x:0000B498 ; COMDAT (pick associative to section at 5FDC)
.xdata$x:0000B498 __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000B498                                         ; DATA XREF: .xdata$x:0000B4A8o
.xdata$x:0000B499                 db 0FFh
.xdata$x:0000B49A                 db 0FFh
.xdata$x:0000B49B                 db 0FFh
.xdata$x:0000B49C                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000B4A0 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000B4A0                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000B4A1                 db    5
.xdata$x:0000B4A2                 db  93h ; ô
.xdata$x:0000B4A3                 db  19h
.xdata$x:0000B4A4                 db    1
.xdata$x:0000B4A5                 db    0
.xdata$x:0000B4A6                 db    0
.xdata$x:0000B4A7                 db    0
.xdata$x:0000B4A8                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:0000B4AC                 db    0
.xdata$x:0000B4AD                 db    0
.xdata$x:0000B4AE                 db    0
.xdata$x:0000B4AF                 db    0
.xdata$x:0000B4B0                 db    0
.xdata$x:0000B4B1                 db    0
.xdata$x:0000B4B2                 db    0
.xdata$x:0000B4B3                 db    0
.xdata$x:0000B4B4                 db    0
.xdata$x:0000B4B5                 db    0
.xdata$x:0000B4B6                 db    0
.xdata$x:0000B4B7                 db    0
.xdata$x:0000B4B8                 db    0
.xdata$x:0000B4B9                 db    0
.xdata$x:0000B4BA                 db    0
.xdata$x:0000B4BB                 db    0
.xdata$x:0000B4BC                 db    0
.xdata$x:0000B4BD                 db    0
.xdata$x:0000B4BE                 db    0
.xdata$x:0000B4BF                 db    0
.xdata$x:0000B4C0                 db    0
.xdata$x:0000B4C1                 db    0
.xdata$x:0000B4C2                 db    0
.xdata$x:0000B4C3                 db    0
.xdata$x:0000B4C3 _xdata$x        ends
.xdata$x:0000B4C3
.xdata$x:0000B4C4 ; ===========================================================================
.xdata$x:0000B4C4
.xdata$x:0000B4C4 ; Segment type: Pure data
.xdata$x:0000B4C4 ; Segment permissions: Read
.xdata$x:0000B4C4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B4C4                 assume cs:_xdata$x
.xdata$x:0000B4C4                 ;org 0B4C4h
.xdata$x:0000B4C4 ; COMDAT (pick associative to section at 56F8)
.xdata$x:0000B4C4 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000B4C4                                         ; DATA XREF: .xdata$x:0000B4D4o
.xdata$x:0000B4C5                 db 0FFh
.xdata$x:0000B4C6                 db 0FFh
.xdata$x:0000B4C7                 db 0FFh
.xdata$x:0000B4C8                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0
.xdata$x:0000B4CC __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000B4CC                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000B4CD                 db    5
.xdata$x:0000B4CE                 db  93h ; ô
.xdata$x:0000B4CF                 db  19h
.xdata$x:0000B4D0                 db    1
.xdata$x:0000B4D1                 db    0
.xdata$x:0000B4D2                 db    0
.xdata$x:0000B4D3                 db    0
.xdata$x:0000B4D4                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.xdata$x:0000B4D8                 db    0
.xdata$x:0000B4D9                 db    0
.xdata$x:0000B4DA                 db    0
.xdata$x:0000B4DB                 db    0
.xdata$x:0000B4DC                 db    0
.xdata$x:0000B4DD                 db    0
.xdata$x:0000B4DE                 db    0
.xdata$x:0000B4DF                 db    0
.xdata$x:0000B4E0                 db    0
.xdata$x:0000B4E1                 db    0
.xdata$x:0000B4E2                 db    0
.xdata$x:0000B4E3                 db    0
.xdata$x:0000B4E4                 db    0
.xdata$x:0000B4E5                 db    0
.xdata$x:0000B4E6                 db    0
.xdata$x:0000B4E7                 db    0
.xdata$x:0000B4E8                 db    0
.xdata$x:0000B4E9                 db    0
.xdata$x:0000B4EA                 db    0
.xdata$x:0000B4EB                 db    0
.xdata$x:0000B4EC                 db    0
.xdata$x:0000B4ED                 db    0
.xdata$x:0000B4EE                 db    0
.xdata$x:0000B4EF                 db    0
.xdata$x:0000B4EF _xdata$x        ends
.xdata$x:0000B4EF
.xdata$x:0000B4F0 ; ===========================================================================
.xdata$x:0000B4F0
.xdata$x:0000B4F0 ; Segment type: Pure data
.xdata$x:0000B4F0 ; Segment permissions: Read
.xdata$x:0000B4F0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B4F0                 assume cs:_xdata$x
.xdata$x:0000B4F0                 ;org 0B4F0h
.xdata$x:0000B4F0 ; COMDAT (pick associative to section at 5840)
.xdata$x:0000B4F0 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000B4F0                                         ; DATA XREF: .xdata$x:0000B500o
.xdata$x:0000B4F1                 db 0FFh
.xdata$x:0000B4F2                 db 0FFh
.xdata$x:0000B4F3                 db 0FFh
.xdata$x:0000B4F4                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:0000B4F8 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000B4F8                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:0000B4F9                 db    5
.xdata$x:0000B4FA                 db  93h ; ô
.xdata$x:0000B4FB                 db  19h
.xdata$x:0000B4FC                 db    1
.xdata$x:0000B4FD                 db    0
.xdata$x:0000B4FE                 db    0
.xdata$x:0000B4FF                 db    0
.xdata$x:0000B500                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:0000B504                 db    0
.xdata$x:0000B505                 db    0
.xdata$x:0000B506                 db    0
.xdata$x:0000B507                 db    0
.xdata$x:0000B508                 db    0
.xdata$x:0000B509                 db    0
.xdata$x:0000B50A                 db    0
.xdata$x:0000B50B                 db    0
.xdata$x:0000B50C                 db    0
.xdata$x:0000B50D                 db    0
.xdata$x:0000B50E                 db    0
.xdata$x:0000B50F                 db    0
.xdata$x:0000B510                 db    0
.xdata$x:0000B511                 db    0
.xdata$x:0000B512                 db    0
.xdata$x:0000B513                 db    0
.xdata$x:0000B514                 db    0
.xdata$x:0000B515                 db    0
.xdata$x:0000B516                 db    0
.xdata$x:0000B517                 db    0
.xdata$x:0000B518                 db    0
.xdata$x:0000B519                 db    0
.xdata$x:0000B51A                 db    0
.xdata$x:0000B51B                 db    0
.xdata$x:0000B51B _xdata$x        ends
.xdata$x:0000B51B
.xdata$x:0000B51C ; ===========================================================================
.xdata$x:0000B51C
.xdata$x:0000B51C ; Segment type: Pure data
.xdata$x:0000B51C ; Segment permissions: Read
.xdata$x:0000B51C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B51C                 assume cs:_xdata$x
.xdata$x:0000B51C                 ;org 0B51Ch
.xdata$x:0000B51C ; COMDAT (pick associative to section at 57A8)
.xdata$x:0000B51C __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db 0FFh
.xdata$x:0000B51C                                         ; DATA XREF: .xdata$x:0000B52Co
.xdata$x:0000B51D                 db 0FFh
.xdata$x:0000B51E                 db 0FFh
.xdata$x:0000B51F                 db 0FFh
.xdata$x:0000B520                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0
.xdata$x:0000B524 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db  22h ; "
.xdata$x:0000B524                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z+11o
.xdata$x:0000B525                 db    5
.xdata$x:0000B526                 db  93h ; ô
.xdata$x:0000B527                 db  19h
.xdata$x:0000B528                 db    1
.xdata$x:0000B529                 db    0
.xdata$x:0000B52A                 db    0
.xdata$x:0000B52B                 db    0
.xdata$x:0000B52C                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.xdata$x:0000B530                 db    0
.xdata$x:0000B531                 db    0
.xdata$x:0000B532                 db    0
.xdata$x:0000B533                 db    0
.xdata$x:0000B534                 db    0
.xdata$x:0000B535                 db    0
.xdata$x:0000B536                 db    0
.xdata$x:0000B537                 db    0
.xdata$x:0000B538                 db    0
.xdata$x:0000B539                 db    0
.xdata$x:0000B53A                 db    0
.xdata$x:0000B53B                 db    0
.xdata$x:0000B53C                 db    0
.xdata$x:0000B53D                 db    0
.xdata$x:0000B53E                 db    0
.xdata$x:0000B53F                 db    0
.xdata$x:0000B540                 db    0
.xdata$x:0000B541                 db    0
.xdata$x:0000B542                 db    0
.xdata$x:0000B543                 db    0
.xdata$x:0000B544                 db    0
.xdata$x:0000B545                 db    0
.xdata$x:0000B546                 db    0
.xdata$x:0000B547                 db    0
.xdata$x:0000B547 _xdata$x        ends
.xdata$x:0000B547
.xdata$x:0000B548 ; ===========================================================================
.xdata$x:0000B548
.xdata$x:0000B548 ; Segment type: Pure data
.xdata$x:0000B548 ; Segment permissions: Read
.xdata$x:0000B548 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B548                 assume cs:_xdata$x
.xdata$x:0000B548                 ;org 0B548h
.xdata$x:0000B548 ; COMDAT (pick associative to section at 5654)
.xdata$x:0000B548 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z db 0FFh
.xdata$x:0000B548                                         ; DATA XREF: .xdata$x:0000B558o
.xdata$x:0000B549                 db 0FFh
.xdata$x:0000B54A                 db 0FFh
.xdata$x:0000B54B                 db 0FFh
.xdata$x:0000B54C                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0
.xdata$x:0000B550 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z db  22h ; "
.xdata$x:0000B550                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z+11o
.xdata$x:0000B551                 db    5
.xdata$x:0000B552                 db  93h ; ô
.xdata$x:0000B553                 db  19h
.xdata$x:0000B554                 db    1
.xdata$x:0000B555                 db    0
.xdata$x:0000B556                 db    0
.xdata$x:0000B557                 db    0
.xdata$x:0000B558                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.xdata$x:0000B55C                 db    0
.xdata$x:0000B55D                 db    0
.xdata$x:0000B55E                 db    0
.xdata$x:0000B55F                 db    0
.xdata$x:0000B560                 db    0
.xdata$x:0000B561                 db    0
.xdata$x:0000B562                 db    0
.xdata$x:0000B563                 db    0
.xdata$x:0000B564                 db    0
.xdata$x:0000B565                 db    0
.xdata$x:0000B566                 db    0
.xdata$x:0000B567                 db    0
.xdata$x:0000B568                 db    0
.xdata$x:0000B569                 db    0
.xdata$x:0000B56A                 db    0
.xdata$x:0000B56B                 db    0
.xdata$x:0000B56C                 db    0
.xdata$x:0000B56D                 db    0
.xdata$x:0000B56E                 db    0
.xdata$x:0000B56F                 db    0
.xdata$x:0000B570                 db    0
.xdata$x:0000B571                 db    0
.xdata$x:0000B572                 db    0
.xdata$x:0000B573                 db    0
.xdata$x:0000B573 _xdata$x        ends
.xdata$x:0000B573
.xdata$x:0000B574 ; ===========================================================================
.xdata$x:0000B574
.xdata$x:0000B574 ; Segment type: Pure data
.xdata$x:0000B574 ; Segment permissions: Read
.xdata$x:0000B574 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B574                 assume cs:_xdata$x
.xdata$x:0000B574                 ;org 0B574h
.xdata$x:0000B574 ; COMDAT (pick associative to section at 6950)
.xdata$x:0000B574 __unwindtable$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z db 0FFh
.xdata$x:0000B574                                         ; DATA XREF: .xdata$x:0000B58Co
.xdata$x:0000B575                 db 0FFh
.xdata$x:0000B576                 db 0FFh
.xdata$x:0000B577                 db 0FFh
.xdata$x:0000B578                 dd offset __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$0
.xdata$x:0000B57C                 align 10h
.xdata$x:0000B580                 dd offset __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$1
.xdata$x:0000B584 __ehfuncinfo$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z db  22h ; "
.xdata$x:0000B584                                         ; DATA XREF: __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z+11o
.xdata$x:0000B585                 db    5
.xdata$x:0000B586                 db  93h ; ô
.xdata$x:0000B587                 db  19h
.xdata$x:0000B588                 db    2
.xdata$x:0000B589                 db    0
.xdata$x:0000B58A                 db    0
.xdata$x:0000B58B                 db    0
.xdata$x:0000B58C                 dd offset __unwindtable$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.xdata$x:0000B590                 db    0
.xdata$x:0000B591                 db    0
.xdata$x:0000B592                 db    0
.xdata$x:0000B593                 db    0
.xdata$x:0000B594                 db    0
.xdata$x:0000B595                 db    0
.xdata$x:0000B596                 db    0
.xdata$x:0000B597                 db    0
.xdata$x:0000B598                 db    0
.xdata$x:0000B599                 db    0
.xdata$x:0000B59A                 db    0
.xdata$x:0000B59B                 db    0
.xdata$x:0000B59C                 db    0
.xdata$x:0000B59D                 db    0
.xdata$x:0000B59E                 db    0
.xdata$x:0000B59F                 db    0
.xdata$x:0000B5A0                 db    0
.xdata$x:0000B5A1                 db    0
.xdata$x:0000B5A2                 db    0
.xdata$x:0000B5A3                 db    0
.xdata$x:0000B5A4                 db    0
.xdata$x:0000B5A5                 db    0
.xdata$x:0000B5A6                 db    0
.xdata$x:0000B5A7                 db    0
.xdata$x:0000B5A7 _xdata$x        ends
.xdata$x:0000B5A7
.xdata$x:0000B5A8 ; ===========================================================================
.xdata$x:0000B5A8
.xdata$x:0000B5A8 ; Segment type: Pure data
.xdata$x:0000B5A8 ; Segment permissions: Read
.xdata$x:0000B5A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B5A8                 assume cs:_xdata$x
.xdata$x:0000B5A8                 ;org 0B5A8h
.xdata$x:0000B5A8 ; COMDAT (pick associative to section at 6458)
.xdata$x:0000B5A8 __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000B5A8                                         ; DATA XREF: .xdata$x:0000B5B8o
.xdata$x:0000B5A9                 db 0FFh
.xdata$x:0000B5AA                 db 0FFh
.xdata$x:0000B5AB                 db 0FFh
.xdata$x:0000B5AC                 dd offset __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:0000B5B0 __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000B5B0                                         ; DATA XREF: __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:0000B5B1                 db    5
.xdata$x:0000B5B2                 db  93h ; ô
.xdata$x:0000B5B3                 db  19h
.xdata$x:0000B5B4                 db    1
.xdata$x:0000B5B5                 db    0
.xdata$x:0000B5B6                 db    0
.xdata$x:0000B5B7                 db    0
.xdata$x:0000B5B8                 dd offset __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:0000B5BC                 db    0
.xdata$x:0000B5BD                 db    0
.xdata$x:0000B5BE                 db    0
.xdata$x:0000B5BF                 db    0
.xdata$x:0000B5C0                 db    0
.xdata$x:0000B5C1                 db    0
.xdata$x:0000B5C2                 db    0
.xdata$x:0000B5C3                 db    0
.xdata$x:0000B5C4                 db    0
.xdata$x:0000B5C5                 db    0
.xdata$x:0000B5C6                 db    0
.xdata$x:0000B5C7                 db    0
.xdata$x:0000B5C8                 db    0
.xdata$x:0000B5C9                 db    0
.xdata$x:0000B5CA                 db    0
.xdata$x:0000B5CB                 db    0
.xdata$x:0000B5CC                 db    0
.xdata$x:0000B5CD                 db    0
.xdata$x:0000B5CE                 db    0
.xdata$x:0000B5CF                 db    0
.xdata$x:0000B5D0                 db    0
.xdata$x:0000B5D1                 db    0
.xdata$x:0000B5D2                 db    0
.xdata$x:0000B5D3                 db    0
.xdata$x:0000B5D3 _xdata$x        ends
.xdata$x:0000B5D3
.xdata$x:0000B5D4 ; ===========================================================================
.xdata$x:0000B5D4
.xdata$x:0000B5D4 ; Segment type: Pure data
.xdata$x:0000B5D4 ; Segment permissions: Read
.xdata$x:0000B5D4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B5D4                 assume cs:_xdata$x
.xdata$x:0000B5D4                 ;org 0B5D4h
.xdata$x:0000B5D4 ; COMDAT (pick associative to section at A784)
.xdata$x:0000B5D4 __ehfuncinfo$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z db  22h ; "
.xdata$x:0000B5D4                                         ; DATA XREF: __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z+14o
.xdata$x:0000B5D5                 db    5
.xdata$x:0000B5D6                 db  93h ; ô
.xdata$x:0000B5D7                 db  19h
.xdata$x:0000B5D8                 db  0Eh
.xdata$x:0000B5D9                 db    0
.xdata$x:0000B5DA                 db    0
.xdata$x:0000B5DB                 db    0
.xdata$x:0000B5DC                 dd offset __unwindtable$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.xdata$x:0000B5E0                 db    0
.xdata$x:0000B5E1                 db    0
.xdata$x:0000B5E2                 db    0
.xdata$x:0000B5E3                 db    0
.xdata$x:0000B5E4                 db    0
.xdata$x:0000B5E5                 db    0
.xdata$x:0000B5E6                 db    0
.xdata$x:0000B5E7                 db    0
.xdata$x:0000B5E8                 db    0
.xdata$x:0000B5E9                 db    0
.xdata$x:0000B5EA                 db    0
.xdata$x:0000B5EB                 db    0
.xdata$x:0000B5EC                 db    0
.xdata$x:0000B5ED                 db    0
.xdata$x:0000B5EE                 db    0
.xdata$x:0000B5EF                 db    0
.xdata$x:0000B5F0                 db    0
.xdata$x:0000B5F1                 db    0
.xdata$x:0000B5F2                 db    0
.xdata$x:0000B5F3                 db    0
.xdata$x:0000B5F4                 db    0
.xdata$x:0000B5F5                 db    0
.xdata$x:0000B5F6                 db    0
.xdata$x:0000B5F7                 db    0
.xdata$x:0000B5F8 __unwindtable$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z db 0FFh
.xdata$x:0000B5F8                                         ; DATA XREF: .xdata$x:0000B5DCo
.xdata$x:0000B5F9                 db 0FFh
.xdata$x:0000B5FA                 db 0FFh
.xdata$x:0000B5FB                 db 0FFh
.xdata$x:0000B5FC                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$0
.xdata$x:0000B600                 db    0
.xdata$x:0000B601                 db    0
.xdata$x:0000B602                 db    0
.xdata$x:0000B603                 db    0
.xdata$x:0000B604                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$1
.xdata$x:0000B608                 db    1
.xdata$x:0000B609                 db    0
.xdata$x:0000B60A                 db    0
.xdata$x:0000B60B                 db    0
.xdata$x:0000B60C                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$2
.xdata$x:0000B610                 db    2
.xdata$x:0000B611                 db    0
.xdata$x:0000B612                 db    0
.xdata$x:0000B613                 db    0
.xdata$x:0000B614                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$3
.xdata$x:0000B618                 db    3
.xdata$x:0000B619                 db    0
.xdata$x:0000B61A                 db    0
.xdata$x:0000B61B                 db    0
.xdata$x:0000B61C                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$4
.xdata$x:0000B620                 db    4
.xdata$x:0000B621                 db    0
.xdata$x:0000B622                 db    0
.xdata$x:0000B623                 db    0
.xdata$x:0000B624                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$5
.xdata$x:0000B628                 db    3
.xdata$x:0000B629                 db    0
.xdata$x:0000B62A                 db    0
.xdata$x:0000B62B                 db    0
.xdata$x:0000B62C                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$6
.xdata$x:0000B630                 db    6
.xdata$x:0000B631                 db    0
.xdata$x:0000B632                 db    0
.xdata$x:0000B633                 db    0
.xdata$x:0000B634                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$7
.xdata$x:0000B638                 db    7
.xdata$x:0000B639                 db    0
.xdata$x:0000B63A                 db    0
.xdata$x:0000B63B                 db    0
.xdata$x:0000B63C                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$8
.xdata$x:0000B640                 db    3
.xdata$x:0000B641                 db    0
.xdata$x:0000B642                 db    0
.xdata$x:0000B643                 db    0
.xdata$x:0000B644                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$9
.xdata$x:0000B648                 db    9
.xdata$x:0000B649                 db    0
.xdata$x:0000B64A                 db    0
.xdata$x:0000B64B                 db    0
.xdata$x:0000B64C                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$10
.xdata$x:0000B650                 db    3
.xdata$x:0000B651                 db    0
.xdata$x:0000B652                 db    0
.xdata$x:0000B653                 db    0
.xdata$x:0000B654                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$11
.xdata$x:0000B658                 db  0Bh
.xdata$x:0000B659                 db    0
.xdata$x:0000B65A                 db    0
.xdata$x:0000B65B                 db    0
.xdata$x:0000B65C                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$12
.xdata$x:0000B660                 db  0Ch
.xdata$x:0000B661                 db    0
.xdata$x:0000B662                 db    0
.xdata$x:0000B663                 db    0
.xdata$x:0000B664                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$13
.xdata$x:0000B664 _xdata$x        ends
.xdata$x:0000B664
.xdata$x:0000B668 ; ===========================================================================
.xdata$x:0000B668
.xdata$x:0000B668 ; Segment type: Pure data
.xdata$x:0000B668 ; Segment permissions: Read
.xdata$x:0000B668 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B668                 assume cs:_xdata$x
.xdata$x:0000B668                 ;org 0B668h
.xdata$x:0000B668 ; COMDAT (pick associative to section at 8CB8)
.xdata$x:0000B668 __unwindtable$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db 0FFh
.xdata$x:0000B668                                         ; DATA XREF: .xdata$x:0000B678o
.xdata$x:0000B669                 db 0FFh
.xdata$x:0000B66A                 db 0FFh
.xdata$x:0000B66B                 db 0FFh
.xdata$x:0000B66C                 dd offset __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0
.xdata$x:0000B670 __ehfuncinfo$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000B670                                         ; DATA XREF: __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ+11o
.xdata$x:0000B671                 db    5
.xdata$x:0000B672                 db  93h ; ô
.xdata$x:0000B673                 db  19h
.xdata$x:0000B674                 db    1
.xdata$x:0000B675                 db    0
.xdata$x:0000B676                 db    0
.xdata$x:0000B677                 db    0
.xdata$x:0000B678                 dd offset __unwindtable$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.xdata$x:0000B67C                 db    0
.xdata$x:0000B67D                 db    0
.xdata$x:0000B67E                 db    0
.xdata$x:0000B67F                 db    0
.xdata$x:0000B680                 db    0
.xdata$x:0000B681                 db    0
.xdata$x:0000B682                 db    0
.xdata$x:0000B683                 db    0
.xdata$x:0000B684                 db    0
.xdata$x:0000B685                 db    0
.xdata$x:0000B686                 db    0
.xdata$x:0000B687                 db    0
.xdata$x:0000B688                 db    0
.xdata$x:0000B689                 db    0
.xdata$x:0000B68A                 db    0
.xdata$x:0000B68B                 db    0
.xdata$x:0000B68C                 db    0
.xdata$x:0000B68D                 db    0
.xdata$x:0000B68E                 db    0
.xdata$x:0000B68F                 db    0
.xdata$x:0000B690                 db    0
.xdata$x:0000B691                 db    0
.xdata$x:0000B692                 db    0
.xdata$x:0000B693                 db    0
.xdata$x:0000B693 _xdata$x        ends
.xdata$x:0000B693
.xdata$x:0000B694 ; ===========================================================================
.xdata$x:0000B694
.xdata$x:0000B694 ; Segment type: Pure data
.xdata$x:0000B694 ; Segment permissions: Read
.xdata$x:0000B694 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B694                 assume cs:_xdata$x
.xdata$x:0000B694                 ;org 0B694h
.xdata$x:0000B694 ; COMDAT (pick associative to section at 9320)
.xdata$x:0000B694 __unwindtable$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db 0FFh
.xdata$x:0000B694                                         ; DATA XREF: .xdata$x:0000B6A4o
.xdata$x:0000B695                 db 0FFh
.xdata$x:0000B696                 db 0FFh
.xdata$x:0000B697                 db 0FFh
.xdata$x:0000B698                 dd offset __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0
.xdata$x:0000B69C __ehfuncinfo$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000B69C                                         ; DATA XREF: __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ+11o
.xdata$x:0000B69D                 db    5
.xdata$x:0000B69E                 db  93h ; ô
.xdata$x:0000B69F                 db  19h
.xdata$x:0000B6A0                 db    1
.xdata$x:0000B6A1                 db    0
.xdata$x:0000B6A2                 db    0
.xdata$x:0000B6A3                 db    0
.xdata$x:0000B6A4                 dd offset __unwindtable$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.xdata$x:0000B6A8                 align 20h
.xdata$x:0000B6A8 _xdata$x        ends
.xdata$x:0000B6A8
.xdata$x:0000B6C0 ; ===========================================================================
.xdata$x:0000B6C0
.xdata$x:0000B6C0 ; Segment type: Pure data
.xdata$x:0000B6C0 ; Segment permissions: Read
.xdata$x:0000B6C0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B6C0                 assume cs:_xdata$x
.xdata$x:0000B6C0                 ;org 0B6C0h
.xdata$x:0000B6C0 ; COMDAT (pick associative to section at 77A0)
.xdata$x:0000B6C0 __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5 db    0
.xdata$x:0000B6C0                                         ; DATA XREF: .xdata$x:0000B748o
.xdata$x:0000B6C1                 db    0
.xdata$x:0000B6C2                 db    0
.xdata$x:0000B6C3                 db    0
.xdata$x:0000B6C4                 db    0
.xdata$x:0000B6C5                 db    0
.xdata$x:0000B6C6                 db    0
.xdata$x:0000B6C7                 db    0
.xdata$x:0000B6C8                 db    0
.xdata$x:0000B6C9                 db    0
.xdata$x:0000B6CA                 db    0
.xdata$x:0000B6CB                 db    0
.xdata$x:0000B6CC                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.xdata$x:0000B6D0 __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4 db    0
.xdata$x:0000B6D0                                         ; DATA XREF: .xdata$x:0000B734o
.xdata$x:0000B6D1                 db    0
.xdata$x:0000B6D2                 db    0
.xdata$x:0000B6D3                 db    0
.xdata$x:0000B6D4                 db    0
.xdata$x:0000B6D5                 db    0
.xdata$x:0000B6D6                 db    0
.xdata$x:0000B6D7                 db    0
.xdata$x:0000B6D8                 db    0
.xdata$x:0000B6D9                 db    0
.xdata$x:0000B6DA                 db    0
.xdata$x:0000B6DB                 db    0
.xdata$x:0000B6DC                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1
.xdata$x:0000B6E0 __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db 0FFh
.xdata$x:0000B6E0                                         ; DATA XREF: .xdata$x:0000B708o
.xdata$x:0000B6E1                 db 0FFh
.xdata$x:0000B6E2                 db 0FFh
.xdata$x:0000B6E3                 db 0FFh
.xdata$x:0000B6E4                 db    0
.xdata$x:0000B6E5                 db    0
.xdata$x:0000B6E6                 db    0
.xdata$x:0000B6E7                 db    0
.xdata$x:0000B6E8                 db 0FFh
.xdata$x:0000B6E9                 db 0FFh
.xdata$x:0000B6EA                 db 0FFh
.xdata$x:0000B6EB                 db 0FFh
.xdata$x:0000B6EC                 db    0
.xdata$x:0000B6ED                 db    0
.xdata$x:0000B6EE                 db    0
.xdata$x:0000B6EF                 db    0
.xdata$x:0000B6F0                 db    1
.xdata$x:0000B6F1                 db    0
.xdata$x:0000B6F2                 db    0
.xdata$x:0000B6F3                 db    0
.xdata$x:0000B6F4                 db    0
.xdata$x:0000B6F5                 db    0
.xdata$x:0000B6F6                 db    0
.xdata$x:0000B6F7                 db    0
.xdata$x:0000B6F8                 db    1
.xdata$x:0000B6F9                 db    0
.xdata$x:0000B6FA                 db    0
.xdata$x:0000B6FB                 db    0
.xdata$x:0000B6FC                 db    0
.xdata$x:0000B6FD                 db    0
.xdata$x:0000B6FE                 db    0
.xdata$x:0000B6FF                 db    0
.xdata$x:0000B700 __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:0000B700                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z+11o
.xdata$x:0000B701                 db    5
.xdata$x:0000B702                 db  93h ; ô
.xdata$x:0000B703                 db  19h
.xdata$x:0000B704                 db    4
.xdata$x:0000B705                 db    0
.xdata$x:0000B706                 db    0
.xdata$x:0000B707                 db    0
.xdata$x:0000B708                 dd offset __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:0000B70C                 db    2
.xdata$x:0000B70D                 db    0
.xdata$x:0000B70E                 db    0
.xdata$x:0000B70F                 db    0
.xdata$x:0000B710                 dd offset __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:0000B714                 db    0
.xdata$x:0000B715                 db    0
.xdata$x:0000B716                 db    0
.xdata$x:0000B717                 db    0
.xdata$x:0000B718                 db    0
.xdata$x:0000B719                 db    0
.xdata$x:0000B71A                 db    0
.xdata$x:0000B71B                 db    0
.xdata$x:0000B71C                 db    0
.xdata$x:0000B71D                 db    0
.xdata$x:0000B71E                 db    0
.xdata$x:0000B71F                 db    0
.xdata$x:0000B720                 db    0
.xdata$x:0000B721                 db    0
.xdata$x:0000B722                 db    0
.xdata$x:0000B723                 db    0
.xdata$x:0000B724 __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db    2
.xdata$x:0000B724                                         ; DATA XREF: .xdata$x:0000B710o
.xdata$x:0000B725                 db    0
.xdata$x:0000B726                 db    0
.xdata$x:0000B727                 db    0
.xdata$x:0000B728                 db    2
.xdata$x:0000B729                 db    0
.xdata$x:0000B72A                 db    0
.xdata$x:0000B72B                 db    0
.xdata$x:0000B72C                 db    3
.xdata$x:0000B72D                 db    0
.xdata$x:0000B72E                 db    0
.xdata$x:0000B72F                 db    0
.xdata$x:0000B730                 db    1
.xdata$x:0000B731                 db    0
.xdata$x:0000B732                 db    0
.xdata$x:0000B733                 db    0
.xdata$x:0000B734                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4
.xdata$x:0000B738                 align 10h
.xdata$x:0000B740                 db    3
.xdata$x:0000B741                 db    0
.xdata$x:0000B742                 db    0
.xdata$x:0000B743                 db    0
.xdata$x:0000B744                 db    1
.xdata$x:0000B745                 db    0
.xdata$x:0000B746                 db    0
.xdata$x:0000B747                 db    0
.xdata$x:0000B748                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5
.xdata$x:0000B748 _xdata$x        ends
.xdata$x:0000B748
.xdata$x:0000B74C ; ===========================================================================
.xdata$x:0000B74C
.xdata$x:0000B74C ; Segment type: Pure data
.xdata$x:0000B74C ; Segment permissions: Read
.xdata$x:0000B74C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B74C                 assume cs:_xdata$x
.xdata$x:0000B74C                 ;org 0B74Ch
.xdata$x:0000B74C ; COMDAT (pick associative to section at 817C)
.xdata$x:0000B74C __unwindtable$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z db 0FFh
.xdata$x:0000B74C                                         ; DATA XREF: .xdata$x:0000B764o
.xdata$x:0000B74D                 db 0FFh
.xdata$x:0000B74E                 db 0FFh
.xdata$x:0000B74F                 db 0FFh
.xdata$x:0000B750                 dd offset __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$0
.xdata$x:0000B754                 align 8
.xdata$x:0000B758                 dd offset __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$1
.xdata$x:0000B75C __ehfuncinfo$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z db  22h ; "
.xdata$x:0000B75C                                         ; DATA XREF: __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z+11o
.xdata$x:0000B75D                 db    5
.xdata$x:0000B75E                 db  93h ; ô
.xdata$x:0000B75F                 db  19h
.xdata$x:0000B760                 db    2
.xdata$x:0000B761                 db    0
.xdata$x:0000B762                 db    0
.xdata$x:0000B763                 db    0
.xdata$x:0000B764                 dd offset __unwindtable$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.xdata$x:0000B768                 align 20h
.xdata$x:0000B768 _xdata$x        ends
.xdata$x:0000B768
.xdata$x:0000B780 ; ===========================================================================
.xdata$x:0000B780
.xdata$x:0000B780 ; Segment type: Pure data
.xdata$x:0000B780 ; Segment permissions: Read
.xdata$x:0000B780 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B780                 assume cs:_xdata$x
.xdata$x:0000B780                 ;org 0B780h
.xdata$x:0000B780 ; COMDAT (pick associative to section at 594C)
.xdata$x:0000B780 __unwindtable$??0CmdLineParams@@QAE@XZ db 0FFh
.xdata$x:0000B780                                         ; DATA XREF: .xdata$x:0000B798o
.xdata$x:0000B781                 db 0FFh
.xdata$x:0000B782                 db 0FFh
.xdata$x:0000B783                 db 0FFh
.xdata$x:0000B784                 dd offset __unwindfunclet$??0CmdLineParams@@QAE@XZ$0
.xdata$x:0000B788                 db    0
.xdata$x:0000B789                 db    0
.xdata$x:0000B78A                 db    0
.xdata$x:0000B78B                 db    0
.xdata$x:0000B78C                 dd offset __unwindfunclet$??0CmdLineParams@@QAE@XZ$1
.xdata$x:0000B790 __ehfuncinfo$??0CmdLineParams@@QAE@XZ db  22h ; "
.xdata$x:0000B790                                         ; DATA XREF: __ehhandler$??0CmdLineParams@@QAE@XZ+11o
.xdata$x:0000B791                 db    5
.xdata$x:0000B792                 db  93h ; ô
.xdata$x:0000B793                 db  19h
.xdata$x:0000B794                 db    2
.xdata$x:0000B795                 db    0
.xdata$x:0000B796                 db    0
.xdata$x:0000B797                 db    0
.xdata$x:0000B798                 dd offset __unwindtable$??0CmdLineParams@@QAE@XZ
.xdata$x:0000B79C                 db    0
.xdata$x:0000B79D                 db    0
.xdata$x:0000B79E                 db    0
.xdata$x:0000B79F                 db    0
.xdata$x:0000B7A0                 db    0
.xdata$x:0000B7A1                 db    0
.xdata$x:0000B7A2                 db    0
.xdata$x:0000B7A3                 db    0
.xdata$x:0000B7A4                 db    0
.xdata$x:0000B7A5                 db    0
.xdata$x:0000B7A6                 db    0
.xdata$x:0000B7A7                 db    0
.xdata$x:0000B7A8                 db    0
.xdata$x:0000B7A9                 db    0
.xdata$x:0000B7AA                 db    0
.xdata$x:0000B7AB                 db    0
.xdata$x:0000B7AC                 db    0
.xdata$x:0000B7AD                 db    0
.xdata$x:0000B7AE                 db    0
.xdata$x:0000B7AF                 db    0
.xdata$x:0000B7B0                 db    0
.xdata$x:0000B7B1                 db    0
.xdata$x:0000B7B2                 db    0
.xdata$x:0000B7B3                 db    0
.xdata$x:0000B7B3 _xdata$x        ends
.xdata$x:0000B7B3
.xdata$x:0000B7B4 ; ===========================================================================
.xdata$x:0000B7B4
.xdata$x:0000B7B4 ; Segment type: Pure data
.xdata$x:0000B7B4 ; Segment permissions: Read
.xdata$x:0000B7B4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B7B4                 assume cs:_xdata$x
.xdata$x:0000B7B4                 ;org 0B7B4h
.xdata$x:0000B7B4 ; COMDAT (pick associative to section at 654C)
.xdata$x:0000B7B4 __unwindtable$??1CmdLineParams@@QAE@XZ db 0FFh
.xdata$x:0000B7B4                                         ; DATA XREF: .xdata$x:0000B7CCo
.xdata$x:0000B7B5                 db 0FFh
.xdata$x:0000B7B6                 db 0FFh
.xdata$x:0000B7B7                 db 0FFh
.xdata$x:0000B7B8                 dd offset __unwindfunclet$??1CmdLineParams@@QAE@XZ$0
.xdata$x:0000B7BC                 align 10h
.xdata$x:0000B7C0                 dd offset __unwindfunclet$??1CmdLineParams@@QAE@XZ$1
.xdata$x:0000B7C4 __ehfuncinfo$??1CmdLineParams@@QAE@XZ db  22h ; "
.xdata$x:0000B7C4                                         ; DATA XREF: __ehhandler$??1CmdLineParams@@QAE@XZ+11o
.xdata$x:0000B7C5                 db    5
.xdata$x:0000B7C6                 db  93h ; ô
.xdata$x:0000B7C7                 db  19h
.xdata$x:0000B7C8                 db    2
.xdata$x:0000B7C9                 db    0
.xdata$x:0000B7CA                 db    0
.xdata$x:0000B7CB                 db    0
.xdata$x:0000B7CC                 dd offset __unwindtable$??1CmdLineParams@@QAE@XZ
.xdata$x:0000B7D0                 db    0
.xdata$x:0000B7D1                 db    0
.xdata$x:0000B7D2                 db    0
.xdata$x:0000B7D3                 db    0
.xdata$x:0000B7D4                 db    0
.xdata$x:0000B7D5                 db    0
.xdata$x:0000B7D6                 db    0
.xdata$x:0000B7D7                 db    0
.xdata$x:0000B7D8                 db    0
.xdata$x:0000B7D9                 db    0
.xdata$x:0000B7DA                 db    0
.xdata$x:0000B7DB                 db    0
.xdata$x:0000B7DC                 db    0
.xdata$x:0000B7DD                 db    0
.xdata$x:0000B7DE                 db    0
.xdata$x:0000B7DF                 db    0
.xdata$x:0000B7E0                 db    0
.xdata$x:0000B7E1                 db    0
.xdata$x:0000B7E2                 db    0
.xdata$x:0000B7E3                 db    0
.xdata$x:0000B7E4                 db    0
.xdata$x:0000B7E5                 db    0
.xdata$x:0000B7E6                 db    0
.xdata$x:0000B7E7                 db    0
.xdata$x:0000B7E7 _xdata$x        ends
.xdata$x:0000B7E7
.xdata$x:0000B7E8 ; ===========================================================================
.xdata$x:0000B7E8
.xdata$x:0000B7E8 ; Segment type: Pure data
.xdata$x:0000B7E8 ; Segment permissions: Read
.xdata$x:0000B7E8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B7E8                 assume cs:_xdata$x
.xdata$x:0000B7E8                 ;org 0B7E8h
.xdata$x:0000B7E8 ; COMDAT (pick associative to section at 99C4)
.xdata$x:0000B7E8 __unwindtable$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ db 0FFh
.xdata$x:0000B7E8                                         ; DATA XREF: .xdata$x:0000B7F8o
.xdata$x:0000B7E9                 db 0FFh
.xdata$x:0000B7EA                 db 0FFh
.xdata$x:0000B7EB                 db 0FFh
.xdata$x:0000B7EC                 dd offset __unwindfunclet$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0
.xdata$x:0000B7F0 __ehfuncinfo$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ db  22h ; "
.xdata$x:0000B7F0                                         ; DATA XREF: __ehhandler$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ+11o
.xdata$x:0000B7F1                 db    5
.xdata$x:0000B7F2                 db  93h ; ô
.xdata$x:0000B7F3                 db  19h
.xdata$x:0000B7F4                 db    1
.xdata$x:0000B7F5                 db    0
.xdata$x:0000B7F6                 db    0
.xdata$x:0000B7F7                 db    0
.xdata$x:0000B7F8                 dd offset __unwindtable$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.xdata$x:0000B7FC                 db    0
.xdata$x:0000B7FD                 db    0
.xdata$x:0000B7FE                 db    0
.xdata$x:0000B7FF                 db    0
.xdata$x:0000B800                 db    0
.xdata$x:0000B801                 db    0
.xdata$x:0000B802                 db    0
.xdata$x:0000B803                 db    0
.xdata$x:0000B804                 db    0
.xdata$x:0000B805                 db    0
.xdata$x:0000B806                 db    0
.xdata$x:0000B807                 db    0
.xdata$x:0000B808                 db    0
.xdata$x:0000B809                 db    0
.xdata$x:0000B80A                 db    0
.xdata$x:0000B80B                 db    0
.xdata$x:0000B80C                 db    0
.xdata$x:0000B80D                 db    0
.xdata$x:0000B80E                 db    0
.xdata$x:0000B80F                 db    0
.xdata$x:0000B810                 db    0
.xdata$x:0000B811                 db    0
.xdata$x:0000B812                 db    0
.xdata$x:0000B813                 db    0
.xdata$x:0000B813 _xdata$x        ends
.xdata$x:0000B813
.xdata$x:0000B814 ; ===========================================================================
.xdata$x:0000B814
.xdata$x:0000B814 ; Segment type: Pure data
.xdata$x:0000B814 ; Segment permissions: Read
.xdata$x:0000B814 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B814                 assume cs:_xdata$x
.xdata$x:0000B814                 ;org 0B814h
.xdata$x:0000B814 ; COMDAT (pick associative to section at AB34)
.xdata$x:0000B814 __unwindtable$?setStartWithLocFileName@NppParameters@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z db 0FFh
.xdata$x:0000B814                                         ; DATA XREF: .xdata$x:0000B824o
.xdata$x:0000B815                 db 0FFh
.xdata$x:0000B816                 db 0FFh
.xdata$x:0000B817                 db 0FFh
.xdata$x:0000B818                 dd offset __unwindfunclet$?setStartWithLocFileName@NppParameters@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0
.xdata$x:0000B81C __ehfuncinfo$?setStartWithLocFileName@NppParameters@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z db  22h ; "
.xdata$x:0000B81C                                         ; DATA XREF: __ehhandler$?setStartWithLocFileName@NppParameters@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z+11o
.xdata$x:0000B81D                 db    5
.xdata$x:0000B81E                 db  93h ; ô
.xdata$x:0000B81F                 db  19h
.xdata$x:0000B820                 db    1
.xdata$x:0000B821                 db    0
.xdata$x:0000B822                 db    0
.xdata$x:0000B823                 db    0
.xdata$x:0000B824                 dd offset __unwindtable$?setStartWithLocFileName@NppParameters@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.xdata$x:0000B828                 align 20h
.xdata$x:0000B828 _xdata$x        ends
.xdata$x:0000B828
.xdata$x:0000B840 ; ===========================================================================
.xdata$x:0000B840
.xdata$x:0000B840 ; Segment type: Pure data
.xdata$x:0000B840 ; Segment permissions: Read
.xdata$x:0000B840 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B840                 assume cs:_xdata$x
.xdata$x:0000B840                 ;org 0B840h
.xdata$x:0000B840 ; COMDAT (pick associative to section at 5B2C)
.xdata$x:0000B840 __unwindtable$??0Process@@QAE@PB_W00@Z db 0FFh
.xdata$x:0000B840                                         ; DATA XREF: .xdata$x:0000B860o
.xdata$x:0000B841                 db 0FFh
.xdata$x:0000B842                 db 0FFh
.xdata$x:0000B843                 db 0FFh
.xdata$x:0000B844                 dd offset __unwindfunclet$??0Process@@QAE@PB_W00@Z$0
.xdata$x:0000B848                 db    0
.xdata$x:0000B849                 db    0
.xdata$x:0000B84A                 db    0
.xdata$x:0000B84B                 db    0
.xdata$x:0000B84C                 dd offset __unwindfunclet$??0Process@@QAE@PB_W00@Z$1
.xdata$x:0000B850                 db    1
.xdata$x:0000B851                 db    0
.xdata$x:0000B852                 db    0
.xdata$x:0000B853                 db    0
.xdata$x:0000B854                 dd offset __unwindfunclet$??0Process@@QAE@PB_W00@Z$2
.xdata$x:0000B858 __ehfuncinfo$??0Process@@QAE@PB_W00@Z db  22h ; "
.xdata$x:0000B858                                         ; DATA XREF: __ehhandler$??0Process@@QAE@PB_W00@Z+11o
.xdata$x:0000B859                 db    5
.xdata$x:0000B85A                 db  93h ; ô
.xdata$x:0000B85B                 db  19h
.xdata$x:0000B85C                 db    3
.xdata$x:0000B85D                 db    0
.xdata$x:0000B85E                 db    0
.xdata$x:0000B85F                 db    0
.xdata$x:0000B860                 dd offset __unwindtable$??0Process@@QAE@PB_W00@Z
.xdata$x:0000B864                 db    0
.xdata$x:0000B865                 db    0
.xdata$x:0000B866                 db    0
.xdata$x:0000B867                 db    0
.xdata$x:0000B868                 db    0
.xdata$x:0000B869                 db    0
.xdata$x:0000B86A                 db    0
.xdata$x:0000B86B                 db    0
.xdata$x:0000B86C                 db    0
.xdata$x:0000B86D                 db    0
.xdata$x:0000B86E                 db    0
.xdata$x:0000B86F                 db    0
.xdata$x:0000B870                 db    0
.xdata$x:0000B871                 db    0
.xdata$x:0000B872                 db    0
.xdata$x:0000B873                 db    0
.xdata$x:0000B874                 db    0
.xdata$x:0000B875                 db    0
.xdata$x:0000B876                 db    0
.xdata$x:0000B877                 db    0
.xdata$x:0000B878                 db    0
.xdata$x:0000B879                 db    0
.xdata$x:0000B87A                 db    0
.xdata$x:0000B87B                 db    0
.xdata$x:0000B87B _xdata$x        ends
.xdata$x:0000B87B
.xdata$x:0000B87C ; ===========================================================================
.xdata$x:0000B87C
.xdata$x:0000B87C ; Segment type: Pure data
.xdata$x:0000B87C ; Segment permissions: Read
.xdata$x:0000B87C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B87C                 assume cs:_xdata$x
.xdata$x:0000B87C                 ;org 0B87Ch
.xdata$x:0000B87C ; COMDAT (pick associative to section at 6688)
.xdata$x:0000B87C __unwindtable$??1Process@@QAE@XZ db 0FFh ; DATA XREF: .xdata$x:0000B89Co
.xdata$x:0000B87D                 db 0FFh
.xdata$x:0000B87E                 db 0FFh
.xdata$x:0000B87F                 db 0FFh
.xdata$x:0000B880                 dd offset __unwindfunclet$??1Process@@QAE@XZ$0
.xdata$x:0000B884                 align 8
.xdata$x:0000B888                 dd offset __unwindfunclet$??1Process@@QAE@XZ$1
.xdata$x:0000B88C                 db    1
.xdata$x:0000B88D                 db    0
.xdata$x:0000B88E                 db    0
.xdata$x:0000B88F                 db    0
.xdata$x:0000B890                 dd offset __unwindfunclet$??1Process@@QAE@XZ$2
.xdata$x:0000B894 __ehfuncinfo$??1Process@@QAE@XZ db  22h ; "
.xdata$x:0000B894                                         ; DATA XREF: __ehhandler$??1Process@@QAE@XZ+11o
.xdata$x:0000B895                 db    5
.xdata$x:0000B896                 db  93h ; ô
.xdata$x:0000B897                 db  19h
.xdata$x:0000B898                 db    3
.xdata$x:0000B899                 db    0
.xdata$x:0000B89A                 db    0
.xdata$x:0000B89B                 db    0
.xdata$x:0000B89C                 dd offset __unwindtable$??1Process@@QAE@XZ
.xdata$x:0000B8A0                 db    0
.xdata$x:0000B8A1                 db    0
.xdata$x:0000B8A2                 db    0
.xdata$x:0000B8A3                 db    0
.xdata$x:0000B8A4                 db    0
.xdata$x:0000B8A5                 db    0
.xdata$x:0000B8A6                 db    0
.xdata$x:0000B8A7                 db    0
.xdata$x:0000B8A8                 db    0
.xdata$x:0000B8A9                 db    0
.xdata$x:0000B8AA                 db    0
.xdata$x:0000B8AB                 db    0
.xdata$x:0000B8AC                 db    0
.xdata$x:0000B8AD                 db    0
.xdata$x:0000B8AE                 db    0
.xdata$x:0000B8AF                 db    0
.xdata$x:0000B8B0                 db    0
.xdata$x:0000B8B1                 db    0
.xdata$x:0000B8B2                 db    0
.xdata$x:0000B8B3                 db    0
.xdata$x:0000B8B4                 db    0
.xdata$x:0000B8B5                 db    0
.xdata$x:0000B8B6                 db    0
.xdata$x:0000B8B7                 db    0
.xdata$x:0000B8B7 _xdata$x        ends
.xdata$x:0000B8B7
.xdata$x:0000B8B8 ; ===========================================================================
.xdata$x:0000B8B8
.xdata$x:0000B8B8 ; Segment type: Pure data
.xdata$x:0000B8B8 ; Segment permissions: Read
.xdata$x:0000B8B8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B8B8                 assume cs:_xdata$x
.xdata$x:0000B8B8                 ;org 0B8B8h
.xdata$x:0000B8B8 ; COMDAT (pick associative to section at 53D4)
.xdata$x:0000B8B8 __unwindtable$??0?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000B8B8                                         ; DATA XREF: .xdata$x:0000B8C8o
.xdata$x:0000B8B9                 db 0FFh
.xdata$x:0000B8BA                 db 0FFh
.xdata$x:0000B8BB                 db 0FFh
.xdata$x:0000B8BC                 dd offset __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ$0
.xdata$x:0000B8C0 __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000B8C0                                         ; DATA XREF: __ehhandler$??0?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ+11o
.xdata$x:0000B8C1                 db    5
.xdata$x:0000B8C2                 db  93h ; ô
.xdata$x:0000B8C3                 db  19h
.xdata$x:0000B8C4                 db    1
.xdata$x:0000B8C5                 db    0
.xdata$x:0000B8C6                 db    0
.xdata$x:0000B8C7                 db    0
.xdata$x:0000B8C8                 dd offset __unwindtable$??0?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ
.xdata$x:0000B8CC                 db    0
.xdata$x:0000B8CD                 db    0
.xdata$x:0000B8CE                 db    0
.xdata$x:0000B8CF                 db    0
.xdata$x:0000B8D0                 db    0
.xdata$x:0000B8D1                 db    0
.xdata$x:0000B8D2                 db    0
.xdata$x:0000B8D3                 db    0
.xdata$x:0000B8D4                 db    0
.xdata$x:0000B8D5                 db    0
.xdata$x:0000B8D6                 db    0
.xdata$x:0000B8D7                 db    0
.xdata$x:0000B8D8                 db    0
.xdata$x:0000B8D9                 db    0
.xdata$x:0000B8DA                 db    0
.xdata$x:0000B8DB                 db    0
.xdata$x:0000B8DC                 db    0
.xdata$x:0000B8DD                 db    0
.xdata$x:0000B8DE                 db    0
.xdata$x:0000B8DF                 db    0
.xdata$x:0000B8E0                 db    0
.xdata$x:0000B8E1                 db    0
.xdata$x:0000B8E2                 db    0
.xdata$x:0000B8E3                 db    0
.xdata$x:0000B8E3 _xdata$x        ends
.xdata$x:0000B8E3
.xdata$x:0000B8E4 ; ===========================================================================
.xdata$x:0000B8E4
.xdata$x:0000B8E4 ; Segment type: Pure data
.xdata$x:0000B8E4 ; Segment permissions: Read
.xdata$x:0000B8E4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B8E4                 assume cs:_xdata$x
.xdata$x:0000B8E4                 ;org 0B8E4h
.xdata$x:0000B8E4 ; COMDAT (pick associative to section at 636C)
.xdata$x:0000B8E4 __unwindtable$??1?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000B8E4                                         ; DATA XREF: .xdata$x:0000B8F4o
.xdata$x:0000B8E5                 db 0FFh
.xdata$x:0000B8E6                 db 0FFh
.xdata$x:0000B8E7                 db 0FFh
.xdata$x:0000B8E8                 dd offset __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ$0
.xdata$x:0000B8EC __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000B8EC                                         ; DATA XREF: __ehhandler$??1?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ+11o
.xdata$x:0000B8ED                 db    5
.xdata$x:0000B8EE                 db  93h ; ô
.xdata$x:0000B8EF                 db  19h
.xdata$x:0000B8F0                 db    1
.xdata$x:0000B8F1                 db    0
.xdata$x:0000B8F2                 db    0
.xdata$x:0000B8F3                 db    0
.xdata$x:0000B8F4                 dd offset __unwindtable$??1?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@QAE@XZ
.xdata$x:0000B8F8                 db    0
.xdata$x:0000B8F9                 db    0
.xdata$x:0000B8FA                 db    0
.xdata$x:0000B8FB                 db    0
.xdata$x:0000B8FC                 db    0
.xdata$x:0000B8FD                 db    0
.xdata$x:0000B8FE                 db    0
.xdata$x:0000B8FF                 db    0
.xdata$x:0000B900                 db    0
.xdata$x:0000B901                 db    0
.xdata$x:0000B902                 db    0
.xdata$x:0000B903                 db    0
.xdata$x:0000B904                 db    0
.xdata$x:0000B905                 db    0
.xdata$x:0000B906                 db    0
.xdata$x:0000B907                 db    0
.xdata$x:0000B908                 db    0
.xdata$x:0000B909                 db    0
.xdata$x:0000B90A                 db    0
.xdata$x:0000B90B                 db    0
.xdata$x:0000B90C                 db    0
.xdata$x:0000B90D                 db    0
.xdata$x:0000B90E                 db    0
.xdata$x:0000B90F                 db    0
.xdata$x:0000B90F _xdata$x        ends
.xdata$x:0000B90F
.xdata$x:0000B910 ; ===========================================================================
.xdata$x:0000B910
.xdata$x:0000B910 ; Segment type: Pure data
.xdata$x:0000B910 ; Segment permissions: Read
.xdata$x:0000B910 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B910                 assume cs:_xdata$x
.xdata$x:0000B910                 ;org 0B910h
.xdata$x:0000B910 ; COMDAT (pick associative to section at 5154)
.xdata$x:0000B910 __unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@ABV?$allocator@PB_W@1@@Z db 0FFh
.xdata$x:0000B910                                         ; DATA XREF: .xdata$x:0000B920o
.xdata$x:0000B911                 db 0FFh
.xdata$x:0000B912                 db 0FFh
.xdata$x:0000B913                 db 0FFh
.xdata$x:0000B914                 dd offset __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@ABV?$allocator@PB_W@1@@Z$0
.xdata$x:0000B918 __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@ABV?$allocator@PB_W@1@@Z db  22h ; "
.xdata$x:0000B918                                         ; DATA XREF: __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@ABV?$allocator@PB_W@1@@Z+11o
.xdata$x:0000B919                 db    5
.xdata$x:0000B91A                 db  93h ; ô
.xdata$x:0000B91B                 db  19h
.xdata$x:0000B91C                 db    1
.xdata$x:0000B91D                 db    0
.xdata$x:0000B91E                 db    0
.xdata$x:0000B91F                 db    0
.xdata$x:0000B920                 dd offset __unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@ABV?$allocator@PB_W@1@@Z
.xdata$x:0000B924                 db    0
.xdata$x:0000B925                 db    0
.xdata$x:0000B926                 db    0
.xdata$x:0000B927                 db    0
.xdata$x:0000B928                 db    0
.xdata$x:0000B929                 db    0
.xdata$x:0000B92A                 db    0
.xdata$x:0000B92B                 db    0
.xdata$x:0000B92C                 db    0
.xdata$x:0000B92D                 db    0
.xdata$x:0000B92E                 db    0
.xdata$x:0000B92F                 db    0
.xdata$x:0000B930                 db    0
.xdata$x:0000B931                 db    0
.xdata$x:0000B932                 db    0
.xdata$x:0000B933                 db    0
.xdata$x:0000B934                 db    0
.xdata$x:0000B935                 db    0
.xdata$x:0000B936                 db    0
.xdata$x:0000B937                 db    0
.xdata$x:0000B938                 db    0
.xdata$x:0000B939                 db    0
.xdata$x:0000B93A                 db    0
.xdata$x:0000B93B                 db    0
.xdata$x:0000B93B _xdata$x        ends
.xdata$x:0000B93B
.xdata$x:0000B93C ; ===========================================================================
.xdata$x:0000B93C
.xdata$x:0000B93C ; Segment type: Pure data
.xdata$x:0000B93C ; Segment permissions: Read
.xdata$x:0000B93C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B93C                 assume cs:_xdata$x
.xdata$x:0000B93C                 ;org 0B93Ch
.xdata$x:0000B93C ; COMDAT (pick associative to section at 6214)
.xdata$x:0000B93C __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000B93C                                         ; DATA XREF: .xdata$x:0000B94Co
.xdata$x:0000B93D                 db 0FFh
.xdata$x:0000B93E                 db 0FFh
.xdata$x:0000B93F                 db 0FFh
.xdata$x:0000B940                 dd offset __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000B944 __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000B944                                         ; DATA XREF: __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000B945                 db    5
.xdata$x:0000B946                 db  93h ; ô
.xdata$x:0000B947                 db  19h
.xdata$x:0000B948                 db    1
.xdata$x:0000B949                 db    0
.xdata$x:0000B94A                 db    0
.xdata$x:0000B94B                 db    0
.xdata$x:0000B94C                 dd offset __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PB_WV?$allocator@PB_W@std@@@std@@@std@@QAE@XZ
.xdata$x:0000B950                 db    0
.xdata$x:0000B951                 db    0
.xdata$x:0000B952                 db    0
.xdata$x:0000B953                 db    0
.xdata$x:0000B954                 db    0
.xdata$x:0000B955                 db    0
.xdata$x:0000B956                 db    0
.xdata$x:0000B957                 db    0
.xdata$x:0000B958                 db    0
.xdata$x:0000B959                 db    0
.xdata$x:0000B95A                 db    0
.xdata$x:0000B95B                 db    0
.xdata$x:0000B95C                 db    0
.xdata$x:0000B95D                 db    0
.xdata$x:0000B95E                 db    0
.xdata$x:0000B95F                 db    0
.xdata$x:0000B960                 db    0
.xdata$x:0000B961                 db    0
.xdata$x:0000B962                 db    0
.xdata$x:0000B963                 db    0
.xdata$x:0000B964                 db    0
.xdata$x:0000B965                 db    0
.xdata$x:0000B966                 db    0
.xdata$x:0000B967                 db    0
.xdata$x:0000B967 _xdata$x        ends
.xdata$x:0000B967
.xdata$x:0000B968 ; ===========================================================================
.xdata$x:0000B968
.xdata$x:0000B968 ; Segment type: Pure data
.xdata$x:0000B968 ; Segment permissions: Read
.xdata$x:0000B968 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B968                 assume cs:_xdata$x
.xdata$x:0000B968                 ;org 0B968h
.xdata$x:0000B968 ; COMDAT (pick associative to section at 58CC)
.xdata$x:0000B968 __unwindtable$??0?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000B968                                         ; DATA XREF: .xdata$x:0000B978o
.xdata$x:0000B969                 db 0FFh
.xdata$x:0000B96A                 db 0FFh
.xdata$x:0000B96B                 db 0FFh
.xdata$x:0000B96C                 dd offset __unwindfunclet$??0?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ$0
.xdata$x:0000B970 __ehfuncinfo$??0?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000B970                                         ; DATA XREF: __ehhandler$??0?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ+11o
.xdata$x:0000B971                 db    5
.xdata$x:0000B972                 db  93h ; ô
.xdata$x:0000B973                 db  19h
.xdata$x:0000B974                 db    1
.xdata$x:0000B975                 db    0
.xdata$x:0000B976                 db    0
.xdata$x:0000B977                 db    0
.xdata$x:0000B978                 dd offset __unwindtable$??0?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ
.xdata$x:0000B97C                 db    0
.xdata$x:0000B97D                 db    0
.xdata$x:0000B97E                 db    0
.xdata$x:0000B97F                 db    0
.xdata$x:0000B980                 db    0
.xdata$x:0000B981                 db    0
.xdata$x:0000B982                 db    0
.xdata$x:0000B983                 db    0
.xdata$x:0000B984                 db    0
.xdata$x:0000B985                 db    0
.xdata$x:0000B986                 db    0
.xdata$x:0000B987                 db    0
.xdata$x:0000B988                 db    0
.xdata$x:0000B989                 db    0
.xdata$x:0000B98A                 db    0
.xdata$x:0000B98B                 db    0
.xdata$x:0000B98C                 db    0
.xdata$x:0000B98D                 db    0
.xdata$x:0000B98E                 db    0
.xdata$x:0000B98F                 db    0
.xdata$x:0000B990                 db    0
.xdata$x:0000B991                 db    0
.xdata$x:0000B992                 db    0
.xdata$x:0000B993                 db    0
.xdata$x:0000B993 _xdata$x        ends
.xdata$x:0000B993
.xdata$x:0000B994 ; ===========================================================================
.xdata$x:0000B994
.xdata$x:0000B994 ; Segment type: Pure data
.xdata$x:0000B994 ; Segment permissions: Read
.xdata$x:0000B994 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B994                 assume cs:_xdata$x
.xdata$x:0000B994                 ;org 0B994h
.xdata$x:0000B994 ; COMDAT (pick associative to section at 64D4)
.xdata$x:0000B994 __unwindtable$??1?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000B994                                         ; DATA XREF: .xdata$x:0000B9A4o
.xdata$x:0000B995                 db 0FFh
.xdata$x:0000B996                 db 0FFh
.xdata$x:0000B997                 db 0FFh
.xdata$x:0000B998                 dd offset __unwindfunclet$??1?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ$0
.xdata$x:0000B99C __ehfuncinfo$??1?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000B99C                                         ; DATA XREF: __ehhandler$??1?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ+11o
.xdata$x:0000B99D                 db    5
.xdata$x:0000B99E                 db  93h ; ô
.xdata$x:0000B99F                 db  19h
.xdata$x:0000B9A0                 db    1
.xdata$x:0000B9A1                 db    0
.xdata$x:0000B9A2                 db    0
.xdata$x:0000B9A3                 db    0
.xdata$x:0000B9A4                 dd offset __unwindtable$??1?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE@XZ
.xdata$x:0000B9A8                 align 20h
.xdata$x:0000B9A8 _xdata$x        ends
.xdata$x:0000B9A8
.xdata$x:0000B9C0 ; ===========================================================================
.xdata$x:0000B9C0
.xdata$x:0000B9C0 ; Segment type: Pure data
.xdata$x:0000B9C0 ; Segment permissions: Read
.xdata$x:0000B9C0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B9C0                 assume cs:_xdata$x
.xdata$x:0000B9C0                 ;org 0B9C0h
.xdata$x:0000B9C0 ; COMDAT (pick associative to section at 8D54)
.xdata$x:0000B9C0 __unwindtable$?begin@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@XZ db 0FFh
.xdata$x:0000B9C0                                         ; DATA XREF: .xdata$x:0000B9D0o
.xdata$x:0000B9C1                 db 0FFh
.xdata$x:0000B9C2                 db 0FFh
.xdata$x:0000B9C3                 db 0FFh
.xdata$x:0000B9C4                 dd offset __unwindfunclet$?begin@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@XZ$0
.xdata$x:0000B9C8 __ehfuncinfo$?begin@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000B9C8                                         ; DATA XREF: __ehhandler$?begin@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@XZ+11o
.xdata$x:0000B9C9                 db    5
.xdata$x:0000B9CA                 db  93h ; ô
.xdata$x:0000B9CB                 db  19h
.xdata$x:0000B9CC                 db    1
.xdata$x:0000B9CD                 db    0
.xdata$x:0000B9CE                 db    0
.xdata$x:0000B9CF                 db    0
.xdata$x:0000B9D0                 dd offset __unwindtable$?begin@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@XZ
.xdata$x:0000B9D4                 db    0
.xdata$x:0000B9D5                 db    0
.xdata$x:0000B9D6                 db    0
.xdata$x:0000B9D7                 db    0
.xdata$x:0000B9D8                 db    0
.xdata$x:0000B9D9                 db    0
.xdata$x:0000B9DA                 db    0
.xdata$x:0000B9DB                 db    0
.xdata$x:0000B9DC                 db    0
.xdata$x:0000B9DD                 db    0
.xdata$x:0000B9DE                 db    0
.xdata$x:0000B9DF                 db    0
.xdata$x:0000B9E0                 db    0
.xdata$x:0000B9E1                 db    0
.xdata$x:0000B9E2                 db    0
.xdata$x:0000B9E3                 db    0
.xdata$x:0000B9E4                 db    0
.xdata$x:0000B9E5                 db    0
.xdata$x:0000B9E6                 db    0
.xdata$x:0000B9E7                 db    0
.xdata$x:0000B9E8                 db    0
.xdata$x:0000B9E9                 db    0
.xdata$x:0000B9EA                 db    0
.xdata$x:0000B9EB                 db    0
.xdata$x:0000B9EB _xdata$x        ends
.xdata$x:0000B9EB
.xdata$x:0000B9EC ; ===========================================================================
.xdata$x:0000B9EC
.xdata$x:0000B9EC ; Segment type: Pure data
.xdata$x:0000B9EC ; Segment permissions: Read
.xdata$x:0000B9EC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000B9EC                 assume cs:_xdata$x
.xdata$x:0000B9EC                 ;org 0B9ECh
.xdata$x:0000B9EC ; COMDAT (pick associative to section at 7DE0)
.xdata$x:0000B9EC __unwindtable$?_Make_iter@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z db 0FFh
.xdata$x:0000B9EC                                         ; DATA XREF: .xdata$x:0000BA04o
.xdata$x:0000B9ED                 db 0FFh
.xdata$x:0000B9EE                 db 0FFh
.xdata$x:0000B9EF                 db 0FFh
.xdata$x:0000B9F0                 dd offset __unwindfunclet$?_Make_iter@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z$1
.xdata$x:0000B9F4                 align 8
.xdata$x:0000B9F8                 dd offset __unwindfunclet$?_Make_iter@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z$0
.xdata$x:0000B9FC __ehfuncinfo$?_Make_iter@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z db  22h ; "
.xdata$x:0000B9FC                                         ; DATA XREF: __ehhandler$?_Make_iter@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z+11o
.xdata$x:0000B9FD                 db    5
.xdata$x:0000B9FE                 db  93h ; ô
.xdata$x:0000B9FF                 db  19h
.xdata$x:0000BA00                 db    2
.xdata$x:0000BA01                 db    0
.xdata$x:0000BA02                 db    0
.xdata$x:0000BA03                 db    0
.xdata$x:0000BA04                 dd offset __unwindtable$?_Make_iter@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z
.xdata$x:0000BA08                 align 20h
.xdata$x:0000BA08 _xdata$x        ends
.xdata$x:0000BA08
.xdata$x:0000BA20 ; ===========================================================================
.xdata$x:0000BA20
.xdata$x:0000BA20 ; Segment type: Pure data
.xdata$x:0000BA20 ; Segment permissions: Read
.xdata$x:0000BA20 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BA20                 assume cs:_xdata$x
.xdata$x:0000BA20                 ;org 0BA20h
.xdata$x:0000BA20 ; COMDAT (pick associative to section at 95B8)
.xdata$x:0000BA20 __unwindtable$?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z db 0FFh
.xdata$x:0000BA20                                         ; DATA XREF: .xdata$x:0000BA40o
.xdata$x:0000BA21                 db 0FFh
.xdata$x:0000BA22                 db 0FFh
.xdata$x:0000BA23                 db 0FFh
.xdata$x:0000BA24                 dd offset __unwindfunclet$?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z$2
.xdata$x:0000BA28                 db    0
.xdata$x:0000BA29                 db    0
.xdata$x:0000BA2A                 db    0
.xdata$x:0000BA2B                 db    0
.xdata$x:0000BA2C                 dd offset __unwindfunclet$?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z$0
.xdata$x:0000BA30                 db    1
.xdata$x:0000BA31                 db    0
.xdata$x:0000BA32                 db    0
.xdata$x:0000BA33                 db    0
.xdata$x:0000BA34                 dd offset __unwindfunclet$?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z$1
.xdata$x:0000BA38 __ehfuncinfo$?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z db  22h ; "
.xdata$x:0000BA38                                         ; DATA XREF: __ehhandler$?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z+11o
.xdata$x:0000BA39                 db    5
.xdata$x:0000BA3A                 db  93h ; ô
.xdata$x:0000BA3B                 db  19h
.xdata$x:0000BA3C                 db    3
.xdata$x:0000BA3D                 db    0
.xdata$x:0000BA3E                 db    0
.xdata$x:0000BA3F                 db    0
.xdata$x:0000BA40                 dd offset __unwindtable$?erase@?$vector@PB_WV?$allocator@PB_W@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@2@@Z
.xdata$x:0000BA44                 db    0
.xdata$x:0000BA45                 db    0
.xdata$x:0000BA46                 db    0
.xdata$x:0000BA47                 db    0
.xdata$x:0000BA48                 db    0
.xdata$x:0000BA49                 db    0
.xdata$x:0000BA4A                 db    0
.xdata$x:0000BA4B                 db    0
.xdata$x:0000BA4C                 db    0
.xdata$x:0000BA4D                 db    0
.xdata$x:0000BA4E                 db    0
.xdata$x:0000BA4F                 db    0
.xdata$x:0000BA50                 db    0
.xdata$x:0000BA51                 db    0
.xdata$x:0000BA52                 db    0
.xdata$x:0000BA53                 db    0
.xdata$x:0000BA54                 db    0
.xdata$x:0000BA55                 db    0
.xdata$x:0000BA56                 db    0
.xdata$x:0000BA57                 db    0
.xdata$x:0000BA58                 db    0
.xdata$x:0000BA59                 db    0
.xdata$x:0000BA5A                 db    0
.xdata$x:0000BA5B                 db    0
.xdata$x:0000BA5B _xdata$x        ends
.xdata$x:0000BA5B
.xdata$x:0000BA5C ; ===========================================================================
.xdata$x:0000BA5C
.xdata$x:0000BA5C ; Segment type: Pure data
.xdata$x:0000BA5C ; Segment permissions: Read
.xdata$x:0000BA5C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BA5C                 assume cs:_xdata$x
.xdata$x:0000BA5C                 ;org 0BA5Ch
.xdata$x:0000BA5C ; COMDAT (pick associative to section at 8228)
.xdata$x:0000BA5C __catchsym$?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z$2 db    0
.xdata$x:0000BA5C                                         ; DATA XREF: .xdata$x:0000BA8Co
.xdata$x:0000BA5D                 db    0
.xdata$x:0000BA5E                 db    0
.xdata$x:0000BA5F                 db    0
.xdata$x:0000BA60                 db    0
.xdata$x:0000BA61                 db    0
.xdata$x:0000BA62                 db    0
.xdata$x:0000BA63                 db    0
.xdata$x:0000BA64                 db    0
.xdata$x:0000BA65                 db    0
.xdata$x:0000BA66                 db    0
.xdata$x:0000BA67                 db    0
.xdata$x:0000BA68                 dd offset __catch$?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z$0
.xdata$x:0000BA6C __unwindtable$?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z db 0FFh
.xdata$x:0000BA6C                                         ; DATA XREF: .xdata$x:0000BA98o
.xdata$x:0000BA6D                 db 0FFh
.xdata$x:0000BA6E                 db 0FFh
.xdata$x:0000BA6F                 db 0FFh
.xdata$x:0000BA70                 db    0
.xdata$x:0000BA71                 db    0
.xdata$x:0000BA72                 db    0
.xdata$x:0000BA73                 db    0
.xdata$x:0000BA74                 db 0FFh
.xdata$x:0000BA75                 db 0FFh
.xdata$x:0000BA76                 db 0FFh
.xdata$x:0000BA77                 db 0FFh
.xdata$x:0000BA78                 db    0
.xdata$x:0000BA79                 db    0
.xdata$x:0000BA7A                 db    0
.xdata$x:0000BA7B                 db    0
.xdata$x:0000BA7C __tryblocktable$?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z db    0
.xdata$x:0000BA7C                                         ; DATA XREF: .xdata$x:0000BAA0o
.xdata$x:0000BA7D                 db    0
.xdata$x:0000BA7E                 db    0
.xdata$x:0000BA7F                 db    0
.xdata$x:0000BA80                 db    0
.xdata$x:0000BA81                 db    0
.xdata$x:0000BA82                 db    0
.xdata$x:0000BA83                 db    0
.xdata$x:0000BA84                 db    1
.xdata$x:0000BA85                 db    0
.xdata$x:0000BA86                 db    0
.xdata$x:0000BA87                 db    0
.xdata$x:0000BA88                 db    1
.xdata$x:0000BA89                 db    0
.xdata$x:0000BA8A                 db    0
.xdata$x:0000BA8B                 db    0
.xdata$x:0000BA8C                 dd offset __catchsym$?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z$2
.xdata$x:0000BA90 __ehfuncinfo$?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z db  22h ; "
.xdata$x:0000BA90                                         ; DATA XREF: __ehhandler$?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z+11o
.xdata$x:0000BA91                 db    5
.xdata$x:0000BA92                 db  93h ; ô
.xdata$x:0000BA93                 db  19h
.xdata$x:0000BA94                 db    2
.xdata$x:0000BA95                 db    0
.xdata$x:0000BA96                 db    0
.xdata$x:0000BA97                 db    0
.xdata$x:0000BA98                 dd offset __unwindtable$?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z
.xdata$x:0000BA9C                 db    1
.xdata$x:0000BA9D                 db    0
.xdata$x:0000BA9E                 db    0
.xdata$x:0000BA9F                 db    0
.xdata$x:0000BAA0                 dd offset __tryblocktable$?_Reallocate@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IAEXI@Z
.xdata$x:0000BAA4                 db    0
.xdata$x:0000BAA5                 db    0
.xdata$x:0000BAA6                 db    0
.xdata$x:0000BAA7                 db    0
.xdata$x:0000BAA8                 db    0
.xdata$x:0000BAA9                 db    0
.xdata$x:0000BAAA                 db    0
.xdata$x:0000BAAB                 db    0
.xdata$x:0000BAAC                 db    0
.xdata$x:0000BAAD                 db    0
.xdata$x:0000BAAE                 db    0
.xdata$x:0000BAAF                 db    0
.xdata$x:0000BAB0                 db    0
.xdata$x:0000BAB1                 db    0
.xdata$x:0000BAB2                 db    0
.xdata$x:0000BAB3                 db    0
.xdata$x:0000BAB3 _xdata$x        ends
.xdata$x:0000BAB3
.xdata$x:0000BAB4 ; ===========================================================================
.xdata$x:0000BAB4
.xdata$x:0000BAB4 ; Segment type: Pure data
.xdata$x:0000BAB4 ; Segment permissions: Read
.xdata$x:0000BAB4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BAB4                 assume cs:_xdata$x
.xdata$x:0000BAB4                 ;org 0BAB4h
.xdata$x:0000BAB4 ; COMDAT (pick associative to section at 80A0)
.xdata$x:0000BAB4 __unwindtable$?_Orphan_range@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXPAPB_W0@Z db 0FFh
.xdata$x:0000BAB4                                         ; DATA XREF: .xdata$x:0000BAC4o
.xdata$x:0000BAB5                 db 0FFh
.xdata$x:0000BAB6                 db 0FFh
.xdata$x:0000BAB7                 db 0FFh
.xdata$x:0000BAB8                 dd offset __unwindfunclet$?_Orphan_range@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXPAPB_W0@Z$0
.xdata$x:0000BABC __ehfuncinfo$?_Orphan_range@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXPAPB_W0@Z db  22h ; "
.xdata$x:0000BABC                                         ; DATA XREF: __ehhandler$?_Orphan_range@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXPAPB_W0@Z+11o
.xdata$x:0000BABD                 db    5
.xdata$x:0000BABE                 db  93h ; ô
.xdata$x:0000BABF                 db  19h
.xdata$x:0000BAC0                 db    1
.xdata$x:0000BAC1                 db    0
.xdata$x:0000BAC2                 db    0
.xdata$x:0000BAC3                 db    0
.xdata$x:0000BAC4                 dd offset __unwindtable$?_Orphan_range@?$vector@PB_WV?$allocator@PB_W@std@@@std@@IBEXPAPB_W0@Z
.xdata$x:0000BAC8                 align 20h
.xdata$x:0000BAC8 _xdata$x        ends
.xdata$x:0000BAC8
.xdata$x:0000BAE0 ; ===========================================================================
.xdata$x:0000BAE0
.xdata$x:0000BAE0 ; Segment type: Pure data
.xdata$x:0000BAE0 ; Segment permissions: Read
.xdata$x:0000BAE0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BAE0                 assume cs:_xdata$x
.xdata$x:0000BAE0                 ;org 0BAE0h
.xdata$x:0000BAE0 ; COMDAT (pick associative to section at 5A64)
.xdata$x:0000BAE0 __unwindtable$??0Notepad_plus_Window@@QAE@XZ db 0FFh
.xdata$x:0000BAE0                                         ; DATA XREF: .xdata$x:0000BB00o
.xdata$x:0000BAE1                 db 0FFh
.xdata$x:0000BAE2                 db 0FFh
.xdata$x:0000BAE3                 db 0FFh
.xdata$x:0000BAE4                 dd offset __unwindfunclet$??0Notepad_plus_Window@@QAE@XZ$0
.xdata$x:0000BAE8                 db    0
.xdata$x:0000BAE9                 db    0
.xdata$x:0000BAEA                 db    0
.xdata$x:0000BAEB                 db    0
.xdata$x:0000BAEC                 dd offset __unwindfunclet$??0Notepad_plus_Window@@QAE@XZ$1
.xdata$x:0000BAF0                 db    1
.xdata$x:0000BAF1                 db    0
.xdata$x:0000BAF2                 db    0
.xdata$x:0000BAF3                 db    0
.xdata$x:0000BAF4                 dd offset __unwindfunclet$??0Notepad_plus_Window@@QAE@XZ$2
.xdata$x:0000BAF8 __ehfuncinfo$??0Notepad_plus_Window@@QAE@XZ db  22h ; "
.xdata$x:0000BAF8                                         ; DATA XREF: __ehhandler$??0Notepad_plus_Window@@QAE@XZ+11o
.xdata$x:0000BAF9                 db    5
.xdata$x:0000BAFA                 db  93h ; ô
.xdata$x:0000BAFB                 db  19h
.xdata$x:0000BAFC                 db    3
.xdata$x:0000BAFD                 db    0
.xdata$x:0000BAFE                 db    0
.xdata$x:0000BAFF                 db    0
.xdata$x:0000BB00                 dd offset __unwindtable$??0Notepad_plus_Window@@QAE@XZ
.xdata$x:0000BB04                 db    0
.xdata$x:0000BB05                 db    0
.xdata$x:0000BB06                 db    0
.xdata$x:0000BB07                 db    0
.xdata$x:0000BB08                 db    0
.xdata$x:0000BB09                 db    0
.xdata$x:0000BB0A                 db    0
.xdata$x:0000BB0B                 db    0
.xdata$x:0000BB0C                 db    0
.xdata$x:0000BB0D                 db    0
.xdata$x:0000BB0E                 db    0
.xdata$x:0000BB0F                 db    0
.xdata$x:0000BB10                 db    0
.xdata$x:0000BB11                 db    0
.xdata$x:0000BB12                 db    0
.xdata$x:0000BB13                 db    0
.xdata$x:0000BB14                 db    0
.xdata$x:0000BB15                 db    0
.xdata$x:0000BB16                 db    0
.xdata$x:0000BB17                 db    0
.xdata$x:0000BB18                 db    0
.xdata$x:0000BB19                 db    0
.xdata$x:0000BB1A                 db    0
.xdata$x:0000BB1B                 db    0
.xdata$x:0000BB1B _xdata$x        ends
.xdata$x:0000BB1B
.xdata$x:0000BB1C ; ===========================================================================
.xdata$x:0000BB1C
.xdata$x:0000BB1C ; Segment type: Pure data
.xdata$x:0000BB1C ; Segment permissions: Read
.xdata$x:0000BB1C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BB1C                 assume cs:_xdata$x
.xdata$x:0000BB1C                 ;org 0BB1Ch
.xdata$x:0000BB1C ; COMDAT (pick associative to section at 926C)
.xdata$x:0000BB1C __unwindtable$?emergency@Notepad_plus_Window@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z db 0FFh
.xdata$x:0000BB1C                                         ; DATA XREF: .xdata$x:0000BB34o
.xdata$x:0000BB1D                 db 0FFh
.xdata$x:0000BB1E                 db 0FFh
.xdata$x:0000BB1F                 db 0FFh
.xdata$x:0000BB20                 dd offset __unwindfunclet$?emergency@Notepad_plus_Window@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0
.xdata$x:0000BB24                 align 8
.xdata$x:0000BB28                 dd offset __unwindfunclet$?emergency@Notepad_plus_Window@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$1
.xdata$x:0000BB2C __ehfuncinfo$?emergency@Notepad_plus_Window@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z db  22h ; "
.xdata$x:0000BB2C                                         ; DATA XREF: __ehhandler$?emergency@Notepad_plus_Window@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z+11o
.xdata$x:0000BB2D                 db    5
.xdata$x:0000BB2E                 db  93h ; ô
.xdata$x:0000BB2F                 db  19h
.xdata$x:0000BB30                 db    2
.xdata$x:0000BB31                 db    0
.xdata$x:0000BB32                 db    0
.xdata$x:0000BB33                 db    0
.xdata$x:0000BB34                 dd offset __unwindtable$?emergency@Notepad_plus_Window@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.xdata$x:0000BB38                 db    0
.xdata$x:0000BB39                 db    0
.xdata$x:0000BB3A                 db    0
.xdata$x:0000BB3B                 db    0
.xdata$x:0000BB3C                 db    0
.xdata$x:0000BB3D                 db    0
.xdata$x:0000BB3E                 db    0
.xdata$x:0000BB3F                 db    0
.xdata$x:0000BB40                 db    0
.xdata$x:0000BB41                 db    0
.xdata$x:0000BB42                 db    0
.xdata$x:0000BB43                 db    0
.xdata$x:0000BB44                 db    0
.xdata$x:0000BB45                 db    0
.xdata$x:0000BB46                 db    0
.xdata$x:0000BB47                 db    0
.xdata$x:0000BB48                 db    0
.xdata$x:0000BB49                 db    0
.xdata$x:0000BB4A                 db    0
.xdata$x:0000BB4B                 db    0
.xdata$x:0000BB4C                 db    0
.xdata$x:0000BB4D                 db    0
.xdata$x:0000BB4E                 db    0
.xdata$x:0000BB4F                 db    0
.xdata$x:0000BB4F _xdata$x        ends
.xdata$x:0000BB4F
.xdata$x:0000BB50 ; ===========================================================================
.xdata$x:0000BB50
.xdata$x:0000BB50 ; Segment type: Pure data
.xdata$x:0000BB50 ; Segment permissions: Read
.xdata$x:0000BB50 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BB50                 assume cs:_xdata$x
.xdata$x:0000BB50                 ;org 0BB50h
.xdata$x:0000BB50 ; COMDAT (pick associative to section at 65E0)
.xdata$x:0000BB50 __unwindtable$??1Notepad_plus_Window@@UAE@XZ db 0FFh
.xdata$x:0000BB50                                         ; DATA XREF: .xdata$x:0000BB70o
.xdata$x:0000BB51                 db 0FFh
.xdata$x:0000BB52                 db 0FFh
.xdata$x:0000BB53                 db 0FFh
.xdata$x:0000BB54                 dd offset __unwindfunclet$??1Notepad_plus_Window@@UAE@XZ$0
.xdata$x:0000BB58                 db    0
.xdata$x:0000BB59                 db    0
.xdata$x:0000BB5A                 db    0
.xdata$x:0000BB5B                 db    0
.xdata$x:0000BB5C                 dd offset __unwindfunclet$??1Notepad_plus_Window@@UAE@XZ$1
.xdata$x:0000BB60                 db    1
.xdata$x:0000BB61                 db    0
.xdata$x:0000BB62                 db    0
.xdata$x:0000BB63                 db    0
.xdata$x:0000BB64                 dd offset __unwindfunclet$??1Notepad_plus_Window@@UAE@XZ$2
.xdata$x:0000BB68 __ehfuncinfo$??1Notepad_plus_Window@@UAE@XZ db  22h ; "
.xdata$x:0000BB68                                         ; DATA XREF: __ehhandler$??1Notepad_plus_Window@@UAE@XZ+11o
.xdata$x:0000BB69                 db    5
.xdata$x:0000BB6A                 db  93h ; ô
.xdata$x:0000BB6B                 db  19h
.xdata$x:0000BB6C                 db    3
.xdata$x:0000BB6D                 db    0
.xdata$x:0000BB6E                 db    0
.xdata$x:0000BB6F                 db    0
.xdata$x:0000BB70                 dd offset __unwindtable$??1Notepad_plus_Window@@UAE@XZ
.xdata$x:0000BB74                 db    0
.xdata$x:0000BB75                 db    0
.xdata$x:0000BB76                 db    0
.xdata$x:0000BB77                 db    0
.xdata$x:0000BB78                 db    0
.xdata$x:0000BB79                 db    0
.xdata$x:0000BB7A                 db    0
.xdata$x:0000BB7B                 db    0
.xdata$x:0000BB7C                 db    0
.xdata$x:0000BB7D                 db    0
.xdata$x:0000BB7E                 db    0
.xdata$x:0000BB7F                 db    0
.xdata$x:0000BB80                 db    0
.xdata$x:0000BB81                 db    0
.xdata$x:0000BB82                 db    0
.xdata$x:0000BB83                 db    0
.xdata$x:0000BB84                 db    0
.xdata$x:0000BB85                 db    0
.xdata$x:0000BB86                 db    0
.xdata$x:0000BB87                 db    0
.xdata$x:0000BB88                 db    0
.xdata$x:0000BB89                 db    0
.xdata$x:0000BB8A                 db    0
.xdata$x:0000BB8B                 db    0
.xdata$x:0000BB8B _xdata$x        ends
.xdata$x:0000BB8B
.xdata$x:0000BB8C ; ===========================================================================
.xdata$x:0000BB8C
.xdata$x:0000BB8C ; Segment type: Pure data
.xdata$x:0000BB8C ; Segment permissions: Read
.xdata$x:0000BB8C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BB8C                 assume cs:_xdata$x
.xdata$x:0000BB8C                 ;org 0BB8Ch
.xdata$x:0000BB8C ; COMDAT (pick associative to section at 4BE8)
.xdata$x:0000BB8C __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000BB8C                                         ; DATA XREF: .xdata$x:0000BB9Co
.xdata$x:0000BB8D                 db 0FFh
.xdata$x:0000BB8E                 db 0FFh
.xdata$x:0000BB8F                 db 0FFh
.xdata$x:0000BB90                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:0000BB94 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000BB94                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:0000BB95                 db    5
.xdata$x:0000BB96                 db  93h ; ô
.xdata$x:0000BB97                 db  19h
.xdata$x:0000BB98                 db    1
.xdata$x:0000BB99                 db    0
.xdata$x:0000BB9A                 db    0
.xdata$x:0000BB9B                 db    0
.xdata$x:0000BB9C                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:0000BBA0                 db    0
.xdata$x:0000BBA1                 db    0
.xdata$x:0000BBA2                 db    0
.xdata$x:0000BBA3                 db    0
.xdata$x:0000BBA4                 db    0
.xdata$x:0000BBA5                 db    0
.xdata$x:0000BBA6                 db    0
.xdata$x:0000BBA7                 db    0
.xdata$x:0000BBA8                 db    0
.xdata$x:0000BBA9                 db    0
.xdata$x:0000BBAA                 db    0
.xdata$x:0000BBAB                 db    0
.xdata$x:0000BBAC                 db    0
.xdata$x:0000BBAD                 db    0
.xdata$x:0000BBAE                 db    0
.xdata$x:0000BBAF                 db    0
.xdata$x:0000BBB0                 db    0
.xdata$x:0000BBB1                 db    0
.xdata$x:0000BBB2                 db    0
.xdata$x:0000BBB3                 db    0
.xdata$x:0000BBB4                 db    0
.xdata$x:0000BBB5                 db    0
.xdata$x:0000BBB6                 db    0
.xdata$x:0000BBB7                 db    0
.xdata$x:0000BBB7 _xdata$x        ends
.xdata$x:0000BBB7
.xdata$x:0000BBB8 ; ===========================================================================
.xdata$x:0000BBB8
.xdata$x:0000BBB8 ; Segment type: Pure data
.xdata$x:0000BBB8 ; Segment permissions: Read
.xdata$x:0000BBB8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BBB8                 assume cs:_xdata$x
.xdata$x:0000BBB8                 ;org 0BBB8h
.xdata$x:0000BBB8 ; COMDAT (pick associative to section at 5E84)
.xdata$x:0000BBB8 __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000BBB8                                         ; DATA XREF: .xdata$x:0000BBC8o
.xdata$x:0000BBB9                 db 0FFh
.xdata$x:0000BBBA                 db 0FFh
.xdata$x:0000BBBB                 db 0FFh
.xdata$x:0000BBBC                 dd offset __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:0000BBC0 __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000BBC0                                         ; DATA XREF: __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:0000BBC1                 db    5
.xdata$x:0000BBC2                 db  93h ; ô
.xdata$x:0000BBC3                 db  19h
.xdata$x:0000BBC4                 db    1
.xdata$x:0000BBC5                 db    0
.xdata$x:0000BBC6                 db    0
.xdata$x:0000BBC7                 db    0
.xdata$x:0000BBC8                 dd offset __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:0000BBCC                 db    0
.xdata$x:0000BBCD                 db    0
.xdata$x:0000BBCE                 db    0
.xdata$x:0000BBCF                 db    0
.xdata$x:0000BBD0                 db    0
.xdata$x:0000BBD1                 db    0
.xdata$x:0000BBD2                 db    0
.xdata$x:0000BBD3                 db    0
.xdata$x:0000BBD4                 db    0
.xdata$x:0000BBD5                 db    0
.xdata$x:0000BBD6                 db    0
.xdata$x:0000BBD7                 db    0
.xdata$x:0000BBD8                 db    0
.xdata$x:0000BBD9                 db    0
.xdata$x:0000BBDA                 db    0
.xdata$x:0000BBDB                 db    0
.xdata$x:0000BBDC                 db    0
.xdata$x:0000BBDD                 db    0
.xdata$x:0000BBDE                 db    0
.xdata$x:0000BBDF                 db    0
.xdata$x:0000BBE0                 db    0
.xdata$x:0000BBE1                 db    0
.xdata$x:0000BBE2                 db    0
.xdata$x:0000BBE3                 db    0
.xdata$x:0000BBE3 _xdata$x        ends
.xdata$x:0000BBE3
.xdata$x:0000BBE4 ; ===========================================================================
.xdata$x:0000BBE4
.xdata$x:0000BBE4 ; Segment type: Pure data
.xdata$x:0000BBE4 ; Segment permissions: Read
.xdata$x:0000BBE4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BBE4                 assume cs:_xdata$x
.xdata$x:0000BBE4                 ;org 0BBE4h
.xdata$x:0000BBE4 ; COMDAT (pick associative to section at 4B70)
.xdata$x:0000BBE4 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z db 0FFh
.xdata$x:0000BBE4                                         ; DATA XREF: .xdata$x:0000BBF4o
.xdata$x:0000BBE5                 db 0FFh
.xdata$x:0000BBE6                 db 0FFh
.xdata$x:0000BBE7                 db 0FFh
.xdata$x:0000BBE8                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
.xdata$x:0000BBEC __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z db  22h ; "
.xdata$x:0000BBEC                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z+11o
.xdata$x:0000BBED                 db    5
.xdata$x:0000BBEE                 db  93h ; ô
.xdata$x:0000BBEF                 db  19h
.xdata$x:0000BBF0                 db    1
.xdata$x:0000BBF1                 db    0
.xdata$x:0000BBF2                 db    0
.xdata$x:0000BBF3                 db    0
.xdata$x:0000BBF4                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PB_WHPBQB_WABQB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.xdata$x:0000BBF8                 db    0
.xdata$x:0000BBF9                 db    0
.xdata$x:0000BBFA                 db    0
.xdata$x:0000BBFB                 db    0
.xdata$x:0000BBFC                 db    0
.xdata$x:0000BBFD                 db    0
.xdata$x:0000BBFE                 db    0
.xdata$x:0000BBFF                 db    0
.xdata$x:0000BC00                 db    0
.xdata$x:0000BC01                 db    0
.xdata$x:0000BC02                 db    0
.xdata$x:0000BC03                 db    0
.xdata$x:0000BC04                 db    0
.xdata$x:0000BC05                 db    0
.xdata$x:0000BC06                 db    0
.xdata$x:0000BC07                 db    0
.xdata$x:0000BC08                 db    0
.xdata$x:0000BC09                 db    0
.xdata$x:0000BC0A                 db    0
.xdata$x:0000BC0B                 db    0
.xdata$x:0000BC0C                 db    0
.xdata$x:0000BC0D                 db    0
.xdata$x:0000BC0E                 db    0
.xdata$x:0000BC0F                 db    0
.xdata$x:0000BC0F _xdata$x        ends
.xdata$x:0000BC0F
.xdata$x:0000BC10 ; ===========================================================================
.xdata$x:0000BC10
.xdata$x:0000BC10 ; Segment type: Pure data
.xdata$x:0000BC10 ; Segment permissions: Read
.xdata$x:0000BC10 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BC10                 assume cs:_xdata$x
.xdata$x:0000BC10                 ;org 0BC10h
.xdata$x:0000BC10 ; COMDAT (pick associative to section at 5254)
.xdata$x:0000BC10 __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z db 0FFh
.xdata$x:0000BC10                                         ; DATA XREF: .xdata$x:0000BC20o
.xdata$x:0000BC11                 db 0FFh
.xdata$x:0000BC12                 db 0FFh
.xdata$x:0000BC13                 db 0FFh
.xdata$x:0000BC14                 dd offset __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z$0
.xdata$x:0000BC18 __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z db  22h ; "
.xdata$x:0000BC18                                         ; DATA XREF: __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z+11o
.xdata$x:0000BC19                 db    5
.xdata$x:0000BC1A                 db  93h ; ô
.xdata$x:0000BC1B                 db  19h
.xdata$x:0000BC1C                 db    1
.xdata$x:0000BC1D                 db    0
.xdata$x:0000BC1E                 db    0
.xdata$x:0000BC1F                 db    0
.xdata$x:0000BC20                 dd offset __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z
.xdata$x:0000BC24                 db    0
.xdata$x:0000BC25                 db    0
.xdata$x:0000BC26                 db    0
.xdata$x:0000BC27                 db    0
.xdata$x:0000BC28                 db    0
.xdata$x:0000BC29                 db    0
.xdata$x:0000BC2A                 db    0
.xdata$x:0000BC2B                 db    0
.xdata$x:0000BC2C                 db    0
.xdata$x:0000BC2D                 db    0
.xdata$x:0000BC2E                 db    0
.xdata$x:0000BC2F                 db    0
.xdata$x:0000BC30                 db    0
.xdata$x:0000BC31                 db    0
.xdata$x:0000BC32                 db    0
.xdata$x:0000BC33                 db    0
.xdata$x:0000BC34                 db    0
.xdata$x:0000BC35                 db    0
.xdata$x:0000BC36                 db    0
.xdata$x:0000BC37                 db    0
.xdata$x:0000BC38                 db    0
.xdata$x:0000BC39                 db    0
.xdata$x:0000BC3A                 db    0
.xdata$x:0000BC3B                 db    0
.xdata$x:0000BC3B _xdata$x        ends
.xdata$x:0000BC3B
.xdata$x:0000BC3C ; ===========================================================================
.xdata$x:0000BC3C
.xdata$x:0000BC3C ; Segment type: Pure data
.xdata$x:0000BC3C ; Segment permissions: Read
.xdata$x:0000BC3C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BC3C                 assume cs:_xdata$x
.xdata$x:0000BC3C                 ;org 0BC3Ch
.xdata$x:0000BC3C ; COMDAT (pick associative to section at 628C)
.xdata$x:0000BC3C __unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000BC3C                                         ; DATA XREF: .xdata$x:0000BC4Co
.xdata$x:0000BC3D                 db 0FFh
.xdata$x:0000BC3E                 db 0FFh
.xdata$x:0000BC3F                 db 0FFh
.xdata$x:0000BC40                 dd offset __unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000BC44 __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000BC44                                         ; DATA XREF: __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000BC45                 db    5
.xdata$x:0000BC46                 db  93h ; ô
.xdata$x:0000BC47                 db  19h
.xdata$x:0000BC48                 db    1
.xdata$x:0000BC49                 db    0
.xdata$x:0000BC4A                 db    0
.xdata$x:0000BC4B                 db    0
.xdata$x:0000BC4C                 dd offset __unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ
.xdata$x:0000BC50                 db    0
.xdata$x:0000BC51                 db    0
.xdata$x:0000BC52                 db    0
.xdata$x:0000BC53                 db    0
.xdata$x:0000BC54                 db    0
.xdata$x:0000BC55                 db    0
.xdata$x:0000BC56                 db    0
.xdata$x:0000BC57                 db    0
.xdata$x:0000BC58                 db    0
.xdata$x:0000BC59                 db    0
.xdata$x:0000BC5A                 db    0
.xdata$x:0000BC5B                 db    0
.xdata$x:0000BC5C                 db    0
.xdata$x:0000BC5D                 db    0
.xdata$x:0000BC5E                 db    0
.xdata$x:0000BC5F                 db    0
.xdata$x:0000BC60                 db    0
.xdata$x:0000BC61                 db    0
.xdata$x:0000BC62                 db    0
.xdata$x:0000BC63                 db    0
.xdata$x:0000BC64                 db    0
.xdata$x:0000BC65                 db    0
.xdata$x:0000BC66                 db    0
.xdata$x:0000BC67                 db    0
.xdata$x:0000BC67 _xdata$x        ends
.xdata$x:0000BC67
.xdata$x:0000BC68 ; ===========================================================================
.xdata$x:0000BC68
.xdata$x:0000BC68 ; Segment type: Pure data
.xdata$x:0000BC68 ; Segment permissions: Read
.xdata$x:0000BC68 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BC68                 assume cs:_xdata$x
.xdata$x:0000BC68                 ;org 0BC68h
.xdata$x:0000BC68 ; COMDAT (pick associative to section at 51D0)
.xdata$x:0000BC68 __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000BC68                                         ; DATA XREF: .xdata$x:0000BC78o
.xdata$x:0000BC69                 db 0FFh
.xdata$x:0000BC6A                 db 0FFh
.xdata$x:0000BC6B                 db 0FFh
.xdata$x:0000BC6C                 dd offset __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:0000BC70 __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000BC70                                         ; DATA XREF: __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000BC71                 db    5
.xdata$x:0000BC72                 db  93h ; ô
.xdata$x:0000BC73                 db  19h
.xdata$x:0000BC74                 db    1
.xdata$x:0000BC75                 db    0
.xdata$x:0000BC76                 db    0
.xdata$x:0000BC77                 db    0
.xdata$x:0000BC78                 dd offset __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:0000BC7C                 db    0
.xdata$x:0000BC7D                 db    0
.xdata$x:0000BC7E                 db    0
.xdata$x:0000BC7F                 db    0
.xdata$x:0000BC80                 db    0
.xdata$x:0000BC81                 db    0
.xdata$x:0000BC82                 db    0
.xdata$x:0000BC83                 db    0
.xdata$x:0000BC84                 db    0
.xdata$x:0000BC85                 db    0
.xdata$x:0000BC86                 db    0
.xdata$x:0000BC87                 db    0
.xdata$x:0000BC88                 db    0
.xdata$x:0000BC89                 db    0
.xdata$x:0000BC8A                 db    0
.xdata$x:0000BC8B                 db    0
.xdata$x:0000BC8C                 db    0
.xdata$x:0000BC8D                 db    0
.xdata$x:0000BC8E                 db    0
.xdata$x:0000BC8F                 db    0
.xdata$x:0000BC90                 db    0
.xdata$x:0000BC91                 db    0
.xdata$x:0000BC92                 db    0
.xdata$x:0000BC93                 db    0
.xdata$x:0000BC93 _xdata$x        ends
.xdata$x:0000BC93
.xdata$x:0000BC94 ; ===========================================================================
.xdata$x:0000BC94
.xdata$x:0000BC94 ; Segment type: Pure data
.xdata$x:0000BC94 ; Segment permissions: Read
.xdata$x:0000BC94 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BC94                 assume cs:_xdata$x
.xdata$x:0000BC94                 ;org 0BC94h
.xdata$x:0000BC94 ; COMDAT (pick associative to section at 5358)
.xdata$x:0000BC94 __unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z db 0FFh
.xdata$x:0000BC94                                         ; DATA XREF: .xdata$x:0000BCA4o
.xdata$x:0000BC95                 db 0FFh
.xdata$x:0000BC96                 db 0FFh
.xdata$x:0000BC97                 db 0FFh
.xdata$x:0000BC98                 dd offset __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z$0
.xdata$x:0000BC9C __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z db  22h ; "
.xdata$x:0000BC9C                                         ; DATA XREF: __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z+11o
.xdata$x:0000BC9D                 db    5
.xdata$x:0000BC9E                 db  93h ; ô
.xdata$x:0000BC9F                 db  19h
.xdata$x:0000BCA0                 db    1
.xdata$x:0000BCA1                 db    0
.xdata$x:0000BCA2                 db    0
.xdata$x:0000BCA3                 db    0
.xdata$x:0000BCA4                 dd offset __unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@PAPB_WPBU_Container_base12@1@@Z
.xdata$x:0000BCA8                 align 20h
.xdata$x:0000BCA8 _xdata$x        ends
.xdata$x:0000BCA8
.xdata$x:0000BCC0 ; ===========================================================================
.xdata$x:0000BCC0
.xdata$x:0000BCC0 ; Segment type: Pure data
.xdata$x:0000BCC0 ; Segment permissions: Read
.xdata$x:0000BCC0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BCC0                 assume cs:_xdata$x
.xdata$x:0000BCC0                 ;org 0BCC0h
.xdata$x:0000BCC0 ; COMDAT (pick associative to section at 6E1C)
.xdata$x:0000BCC0 __unwindtable$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QBE?AV01@H@Z db 0FFh
.xdata$x:0000BCC0                                         ; DATA XREF: .xdata$x:0000BCD8o
.xdata$x:0000BCC1                 db 0FFh
.xdata$x:0000BCC2                 db 0FFh
.xdata$x:0000BCC3                 db 0FFh
.xdata$x:0000BCC4                 dd offset __unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QBE?AV01@H@Z$1
.xdata$x:0000BCC8                 db    0
.xdata$x:0000BCC9                 db    0
.xdata$x:0000BCCA                 db    0
.xdata$x:0000BCCB                 db    0
.xdata$x:0000BCCC                 dd offset __unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QBE?AV01@H@Z$0
.xdata$x:0000BCD0 __ehfuncinfo$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QBE?AV01@H@Z db  22h ; "
.xdata$x:0000BCD0                                         ; DATA XREF: __ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QBE?AV01@H@Z+11o
.xdata$x:0000BCD1                 db    5
.xdata$x:0000BCD2                 db  93h ; ô
.xdata$x:0000BCD3                 db  19h
.xdata$x:0000BCD4                 db    2
.xdata$x:0000BCD5                 db    0
.xdata$x:0000BCD6                 db    0
.xdata$x:0000BCD7                 db    0
.xdata$x:0000BCD8                 dd offset __unwindtable$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QBE?AV01@H@Z
.xdata$x:0000BCDC                 db    0
.xdata$x:0000BCDD                 db    0
.xdata$x:0000BCDE                 db    0
.xdata$x:0000BCDF                 db    0
.xdata$x:0000BCE0                 db    0
.xdata$x:0000BCE1                 db    0
.xdata$x:0000BCE2                 db    0
.xdata$x:0000BCE3                 db    0
.xdata$x:0000BCE4                 db    0
.xdata$x:0000BCE5                 db    0
.xdata$x:0000BCE6                 db    0
.xdata$x:0000BCE7                 db    0
.xdata$x:0000BCE8                 db    0
.xdata$x:0000BCE9                 db    0
.xdata$x:0000BCEA                 db    0
.xdata$x:0000BCEB                 db    0
.xdata$x:0000BCEC                 db    0
.xdata$x:0000BCED                 db    0
.xdata$x:0000BCEE                 db    0
.xdata$x:0000BCEF                 db    0
.xdata$x:0000BCF0                 db    0
.xdata$x:0000BCF1                 db    0
.xdata$x:0000BCF2                 db    0
.xdata$x:0000BCF3                 db    0
.xdata$x:0000BCF3 _xdata$x        ends
.xdata$x:0000BCF3
.xdata$x:0000BCF4 ; ===========================================================================
.xdata$x:0000BCF4
.xdata$x:0000BCF4 ; Segment type: Pure data
.xdata$x:0000BCF4 ; Segment permissions: Read
.xdata$x:0000BCF4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BCF4                 assume cs:_xdata$x
.xdata$x:0000BCF4                 ;org 0BCF4h
.xdata$x:0000BCF4 ; COMDAT (pick associative to section at 62FC)
.xdata$x:0000BCF4 __unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000BCF4                                         ; DATA XREF: .xdata$x:0000BD04o
.xdata$x:0000BCF5                 db 0FFh
.xdata$x:0000BCF6                 db 0FFh
.xdata$x:0000BCF7                 db 0FFh
.xdata$x:0000BCF8                 dd offset __unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000BCFC __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000BCFC                                         ; DATA XREF: __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000BCFD                 db    5
.xdata$x:0000BCFE                 db  93h ; ô
.xdata$x:0000BCFF                 db  19h
.xdata$x:0000BD00                 db    1
.xdata$x:0000BD01                 db    0
.xdata$x:0000BD02                 db    0
.xdata$x:0000BD03                 db    0
.xdata$x:0000BD04                 dd offset __unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@XZ
.xdata$x:0000BD08                 align 20h
.xdata$x:0000BD08 _xdata$x        ends
.xdata$x:0000BD08
.xdata$x:0000BD20 ; ===========================================================================
.xdata$x:0000BD20
.xdata$x:0000BD20 ; Segment type: Pure data
.xdata$x:0000BD20 ; Segment permissions: Read
.xdata$x:0000BD20 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BD20                 assume cs:_xdata$x
.xdata$x:0000BD20                 ;org 0BD20h
.xdata$x:0000BD20 ; COMDAT (pick associative to section at 52E0)
.xdata$x:0000BD20 __unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000BD20                                         ; DATA XREF: .xdata$x:0000BD30o
.xdata$x:0000BD21                 db 0FFh
.xdata$x:0000BD22                 db 0FFh
.xdata$x:0000BD23                 db 0FFh
.xdata$x:0000BD24                 dd offset __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:0000BD28 __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000BD28                                         ; DATA XREF: __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000BD29                 db    5
.xdata$x:0000BD2A                 db  93h ; ô
.xdata$x:0000BD2B                 db  19h
.xdata$x:0000BD2C                 db    1
.xdata$x:0000BD2D                 db    0
.xdata$x:0000BD2E                 db    0
.xdata$x:0000BD2F                 db    0
.xdata$x:0000BD30                 dd offset __unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PB_W@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:0000BD34                 db    0
.xdata$x:0000BD35                 db    0
.xdata$x:0000BD36                 db    0
.xdata$x:0000BD37                 db    0
.xdata$x:0000BD38                 db    0
.xdata$x:0000BD39                 db    0
.xdata$x:0000BD3A                 db    0
.xdata$x:0000BD3B                 db    0
.xdata$x:0000BD3C                 db    0
.xdata$x:0000BD3D                 db    0
.xdata$x:0000BD3E                 db    0
.xdata$x:0000BD3F                 db    0
.xdata$x:0000BD40                 db    0
.xdata$x:0000BD41                 db    0
.xdata$x:0000BD42                 db    0
.xdata$x:0000BD43                 db    0
.xdata$x:0000BD44                 db    0
.xdata$x:0000BD45                 db    0
.xdata$x:0000BD46                 db    0
.xdata$x:0000BD47                 db    0
.xdata$x:0000BD48                 db    0
.xdata$x:0000BD49                 db    0
.xdata$x:0000BD4A                 db    0
.xdata$x:0000BD4B                 db    0
.xdata$x:0000BD4B _xdata$x        ends
.xdata$x:0000BD4B
.xdata$x:0000BD4C ; ===========================================================================
.xdata$x:0000BD4C
.xdata$x:0000BD4C ; Segment type: Pure data
.xdata$x:0000BD4C ; Segment permissions: Read
.xdata$x:0000BD4C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BD4C                 assume cs:_xdata$x
.xdata$x:0000BD4C                 ;org 0BD4Ch
.xdata$x:0000BD4C ; COMDAT (pick associative to section at 4CD4)
.xdata$x:0000BD4C __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000BD4C                                         ; DATA XREF: .xdata$x:0000BD5Co
.xdata$x:0000BD4D                 db 0FFh
.xdata$x:0000BD4E                 db 0FFh
.xdata$x:0000BD4F                 db 0FFh
.xdata$x:0000BD50                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:0000BD54 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000BD54                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:0000BD55                 db    5
.xdata$x:0000BD56                 db  93h ; ô
.xdata$x:0000BD57                 db  19h
.xdata$x:0000BD58                 db    1
.xdata$x:0000BD59                 db    0
.xdata$x:0000BD5A                 db    0
.xdata$x:0000BD5B                 db    0
.xdata$x:0000BD5C                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:0000BD60                 db    0
.xdata$x:0000BD61                 db    0
.xdata$x:0000BD62                 db    0
.xdata$x:0000BD63                 db    0
.xdata$x:0000BD64                 db    0
.xdata$x:0000BD65                 db    0
.xdata$x:0000BD66                 db    0
.xdata$x:0000BD67                 db    0
.xdata$x:0000BD68                 db    0
.xdata$x:0000BD69                 db    0
.xdata$x:0000BD6A                 db    0
.xdata$x:0000BD6B                 db    0
.xdata$x:0000BD6C                 db    0
.xdata$x:0000BD6D                 db    0
.xdata$x:0000BD6E                 db    0
.xdata$x:0000BD6F                 db    0
.xdata$x:0000BD70                 db    0
.xdata$x:0000BD71                 db    0
.xdata$x:0000BD72                 db    0
.xdata$x:0000BD73                 db    0
.xdata$x:0000BD74                 db    0
.xdata$x:0000BD75                 db    0
.xdata$x:0000BD76                 db    0
.xdata$x:0000BD77                 db    0
.xdata$x:0000BD77 _xdata$x        ends
.xdata$x:0000BD77
.xdata$x:0000BD78 ; ===========================================================================
.xdata$x:0000BD78
.xdata$x:0000BD78 ; Segment type: Pure data
.xdata$x:0000BD78 ; Segment permissions: Read
.xdata$x:0000BD78 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BD78                 assume cs:_xdata$x
.xdata$x:0000BD78                 ;org 0BD78h
.xdata$x:0000BD78 ; COMDAT (pick associative to section at 5EF4)
.xdata$x:0000BD78 __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000BD78                                         ; DATA XREF: .xdata$x:0000BD88o
.xdata$x:0000BD79                 db 0FFh
.xdata$x:0000BD7A                 db 0FFh
.xdata$x:0000BD7B                 db 0FFh
.xdata$x:0000BD7C                 dd offset __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:0000BD80 __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000BD80                                         ; DATA XREF: __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:0000BD81                 db    5
.xdata$x:0000BD82                 db  93h ; ô
.xdata$x:0000BD83                 db  19h
.xdata$x:0000BD84                 db    1
.xdata$x:0000BD85                 db    0
.xdata$x:0000BD86                 db    0
.xdata$x:0000BD87                 db    0
.xdata$x:0000BD88                 dd offset __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:0000BD8C                 db    0
.xdata$x:0000BD8D                 db    0
.xdata$x:0000BD8E                 db    0
.xdata$x:0000BD8F                 db    0
.xdata$x:0000BD90                 db    0
.xdata$x:0000BD91                 db    0
.xdata$x:0000BD92                 db    0
.xdata$x:0000BD93                 db    0
.xdata$x:0000BD94                 db    0
.xdata$x:0000BD95                 db    0
.xdata$x:0000BD96                 db    0
.xdata$x:0000BD97                 db    0
.xdata$x:0000BD98                 db    0
.xdata$x:0000BD99                 db    0
.xdata$x:0000BD9A                 db    0
.xdata$x:0000BD9B                 db    0
.xdata$x:0000BD9C                 db    0
.xdata$x:0000BD9D                 db    0
.xdata$x:0000BD9E                 db    0
.xdata$x:0000BD9F                 db    0
.xdata$x:0000BDA0                 db    0
.xdata$x:0000BDA1                 db    0
.xdata$x:0000BDA2                 db    0
.xdata$x:0000BDA3                 db    0
.xdata$x:0000BDA3 _xdata$x        ends
.xdata$x:0000BDA3
.xdata$x:0000BDA4 ; ===========================================================================
.xdata$x:0000BDA4
.xdata$x:0000BDA4 ; Segment type: Pure data
.xdata$x:0000BDA4 ; Segment permissions: Read
.xdata$x:0000BDA4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BDA4                 assume cs:_xdata$x
.xdata$x:0000BDA4                 ;org 0BDA4h
.xdata$x:0000BDA4 ; COMDAT (pick associative to section at 4C5C)
.xdata$x:0000BDA4 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z db 0FFh
.xdata$x:0000BDA4                                         ; DATA XREF: .xdata$x:0000BDB4o
.xdata$x:0000BDA5                 db 0FFh
.xdata$x:0000BDA6                 db 0FFh
.xdata$x:0000BDA7                 db 0FFh
.xdata$x:0000BDA8                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
.xdata$x:0000BDAC __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z db  22h ; "
.xdata$x:0000BDAC                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z+11o
.xdata$x:0000BDAD                 db    5
.xdata$x:0000BDAE                 db  93h ; ô
.xdata$x:0000BDAF                 db  19h
.xdata$x:0000BDB0                 db    1
.xdata$x:0000BDB1                 db    0
.xdata$x:0000BDB2                 db    0
.xdata$x:0000BDB3                 db    0
.xdata$x:0000BDB4                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.xdata$x:0000BDB8                 db    0
.xdata$x:0000BDB9                 db    0
.xdata$x:0000BDBA                 db    0
.xdata$x:0000BDBB                 db    0
.xdata$x:0000BDBC                 db    0
.xdata$x:0000BDBD                 db    0
.xdata$x:0000BDBE                 db    0
.xdata$x:0000BDBF                 db    0
.xdata$x:0000BDC0                 db    0
.xdata$x:0000BDC1                 db    0
.xdata$x:0000BDC2                 db    0
.xdata$x:0000BDC3                 db    0
.xdata$x:0000BDC4                 db    0
.xdata$x:0000BDC5                 db    0
.xdata$x:0000BDC6                 db    0
.xdata$x:0000BDC7                 db    0
.xdata$x:0000BDC8                 db    0
.xdata$x:0000BDC9                 db    0
.xdata$x:0000BDCA                 db    0
.xdata$x:0000BDCB                 db    0
.xdata$x:0000BDCC                 db    0
.xdata$x:0000BDCD                 db    0
.xdata$x:0000BDCE                 db    0
.xdata$x:0000BDCF                 db    0
.xdata$x:0000BDCF _xdata$x        ends
.xdata$x:0000BDCF
.xdata$x:0000BDD0 ; ===========================================================================
.xdata$x:0000BDD0
.xdata$x:0000BDD0 ; Segment type: Pure data
.xdata$x:0000BDD0 ; Segment permissions: Read
.xdata$x:0000BDD0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BDD0                 assume cs:_xdata$x
.xdata$x:0000BDD0                 ;org 0BDD0h
.xdata$x:0000BDD0 ; COMDAT (pick associative to section at 4EC4)
.xdata$x:0000BDD0 __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z db 0FFh
.xdata$x:0000BDD0                                         ; DATA XREF: .xdata$x:0000BDE0o
.xdata$x:0000BDD1                 db 0FFh
.xdata$x:0000BDD2                 db 0FFh
.xdata$x:0000BDD3                 db 0FFh
.xdata$x:0000BDD4                 dd offset __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0
.xdata$x:0000BDD8 __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z db  22h ; "
.xdata$x:0000BDD8                                         ; DATA XREF: __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z+11o
.xdata$x:0000BDD9                 db    5
.xdata$x:0000BDDA                 db  93h ; ô
.xdata$x:0000BDDB                 db  19h
.xdata$x:0000BDDC                 db    1
.xdata$x:0000BDDD                 db    0
.xdata$x:0000BDDE                 db    0
.xdata$x:0000BDDF                 db    0
.xdata$x:0000BDE0                 dd offset __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.xdata$x:0000BDE4                 db    0
.xdata$x:0000BDE5                 db    0
.xdata$x:0000BDE6                 db    0
.xdata$x:0000BDE7                 db    0
.xdata$x:0000BDE8                 db    0
.xdata$x:0000BDE9                 db    0
.xdata$x:0000BDEA                 db    0
.xdata$x:0000BDEB                 db    0
.xdata$x:0000BDEC                 db    0
.xdata$x:0000BDED                 db    0
.xdata$x:0000BDEE                 db    0
.xdata$x:0000BDEF                 db    0
.xdata$x:0000BDF0                 db    0
.xdata$x:0000BDF1                 db    0
.xdata$x:0000BDF2                 db    0
.xdata$x:0000BDF3                 db    0
.xdata$x:0000BDF4                 db    0
.xdata$x:0000BDF5                 db    0
.xdata$x:0000BDF6                 db    0
.xdata$x:0000BDF7                 db    0
.xdata$x:0000BDF8                 db    0
.xdata$x:0000BDF9                 db    0
.xdata$x:0000BDFA                 db    0
.xdata$x:0000BDFB                 db    0
.xdata$x:0000BDFB _xdata$x        ends
.xdata$x:0000BDFB
.xdata$x:0000BDFC ; ===========================================================================
.xdata$x:0000BDFC
.xdata$x:0000BDFC ; Segment type: Pure data
.xdata$x:0000BDFC ; Segment permissions: Read
.xdata$x:0000BDFC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BDFC                 assume cs:_xdata$x
.xdata$x:0000BDFC                 ;org 0BDFCh
.xdata$x:0000BDFC ; COMDAT (pick associative to section at 6054)
.xdata$x:0000BDFC __unwindtable$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000BDFC                                         ; DATA XREF: .xdata$x:0000BE0Co
.xdata$x:0000BDFD                 db 0FFh
.xdata$x:0000BDFE                 db 0FFh
.xdata$x:0000BDFF                 db 0FFh
.xdata$x:0000BE00                 dd offset __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000BE04 __ehfuncinfo$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000BE04                                         ; DATA XREF: __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000BE05                 db    5
.xdata$x:0000BE06                 db  93h ; ô
.xdata$x:0000BE07                 db  19h
.xdata$x:0000BE08                 db    1
.xdata$x:0000BE09                 db    0
.xdata$x:0000BE0A                 db    0
.xdata$x:0000BE0B                 db    0
.xdata$x:0000BE0C                 dd offset __unwindtable$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:0000BE10                 db    0
.xdata$x:0000BE11                 db    0
.xdata$x:0000BE12                 db    0
.xdata$x:0000BE13                 db    0
.xdata$x:0000BE14                 db    0
.xdata$x:0000BE15                 db    0
.xdata$x:0000BE16                 db    0
.xdata$x:0000BE17                 db    0
.xdata$x:0000BE18                 db    0
.xdata$x:0000BE19                 db    0
.xdata$x:0000BE1A                 db    0
.xdata$x:0000BE1B                 db    0
.xdata$x:0000BE1C                 db    0
.xdata$x:0000BE1D                 db    0
.xdata$x:0000BE1E                 db    0
.xdata$x:0000BE1F                 db    0
.xdata$x:0000BE20                 db    0
.xdata$x:0000BE21                 db    0
.xdata$x:0000BE22                 db    0
.xdata$x:0000BE23                 db    0
.xdata$x:0000BE24                 db    0
.xdata$x:0000BE25                 db    0
.xdata$x:0000BE26                 db    0
.xdata$x:0000BE27                 db    0
.xdata$x:0000BE27 _xdata$x        ends
.xdata$x:0000BE27
.xdata$x:0000BE28 ; ===========================================================================
.xdata$x:0000BE28
.xdata$x:0000BE28 ; Segment type: Pure data
.xdata$x:0000BE28 ; Segment permissions: Read
.xdata$x:0000BE28 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BE28                 assume cs:_xdata$x
.xdata$x:0000BE28                 ;org 0BE28h
.xdata$x:0000BE28 ; COMDAT (pick associative to section at 4E40)
.xdata$x:0000BE28 __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000BE28                                         ; DATA XREF: .xdata$x:0000BE38o
.xdata$x:0000BE29                 db 0FFh
.xdata$x:0000BE2A                 db 0FFh
.xdata$x:0000BE2B                 db 0FFh
.xdata$x:0000BE2C                 dd offset __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:0000BE30 __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000BE30                                         ; DATA XREF: __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000BE31                 db    5
.xdata$x:0000BE32                 db  93h ; ô
.xdata$x:0000BE33                 db  19h
.xdata$x:0000BE34                 db    1
.xdata$x:0000BE35                 db    0
.xdata$x:0000BE36                 db    0
.xdata$x:0000BE37                 db    0
.xdata$x:0000BE38                 dd offset __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:0000BE3C                 db    0
.xdata$x:0000BE3D                 db    0
.xdata$x:0000BE3E                 db    0
.xdata$x:0000BE3F                 db    0
.xdata$x:0000BE40                 db    0
.xdata$x:0000BE41                 db    0
.xdata$x:0000BE42                 db    0
.xdata$x:0000BE43                 db    0
.xdata$x:0000BE44                 db    0
.xdata$x:0000BE45                 db    0
.xdata$x:0000BE46                 db    0
.xdata$x:0000BE47                 db    0
.xdata$x:0000BE48                 db    0
.xdata$x:0000BE49                 db    0
.xdata$x:0000BE4A                 db    0
.xdata$x:0000BE4B                 db    0
.xdata$x:0000BE4C                 db    0
.xdata$x:0000BE4D                 db    0
.xdata$x:0000BE4E                 db    0
.xdata$x:0000BE4F                 db    0
.xdata$x:0000BE50                 db    0
.xdata$x:0000BE51                 db    0
.xdata$x:0000BE52                 db    0
.xdata$x:0000BE53                 db    0
.xdata$x:0000BE53 _xdata$x        ends
.xdata$x:0000BE53
.xdata$x:0000BE54 ; ===========================================================================
.xdata$x:0000BE54
.xdata$x:0000BE54 ; Segment type: Pure data
.xdata$x:0000BE54 ; Segment permissions: Read
.xdata$x:0000BE54 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BE54                 assume cs:_xdata$x
.xdata$x:0000BE54                 ;org 0BE54h
.xdata$x:0000BE54 ; COMDAT (pick associative to section at 3E74)
.xdata$x:0000BE54 __unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z db 0FFh
.xdata$x:0000BE54                                         ; DATA XREF: .xdata$x:0000BE6Co
.xdata$x:0000BE55                 db 0FFh
.xdata$x:0000BE56                 db 0FFh
.xdata$x:0000BE57                 db 0FFh
.xdata$x:0000BE58                 dd offset __unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$1
.xdata$x:0000BE5C                 align 10h
.xdata$x:0000BE60                 dd offset __unwindfunclet$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z$0
.xdata$x:0000BE64 __ehfuncinfo$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z db  22h ; "
.xdata$x:0000BE64                                         ; DATA XREF: __ehhandler$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z+1Bo
.xdata$x:0000BE65                 db    5
.xdata$x:0000BE66                 db  93h ; ô
.xdata$x:0000BE67                 db  19h
.xdata$x:0000BE68                 db    2
.xdata$x:0000BE69                 db    0
.xdata$x:0000BE6A                 db    0
.xdata$x:0000BE6B                 db    0
.xdata$x:0000BE6C                 dd offset __unwindtable$??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@PB_W@Z
.xdata$x:0000BE70                 db    0
.xdata$x:0000BE71                 db    0
.xdata$x:0000BE72                 db    0
.xdata$x:0000BE73                 db    0
.xdata$x:0000BE74                 db    0
.xdata$x:0000BE75                 db    0
.xdata$x:0000BE76                 db    0
.xdata$x:0000BE77                 db    0
.xdata$x:0000BE78                 db    0
.xdata$x:0000BE79                 db    0
.xdata$x:0000BE7A                 db    0
.xdata$x:0000BE7B                 db    0
.xdata$x:0000BE7C                 db    0
.xdata$x:0000BE7D                 db    0
.xdata$x:0000BE7E                 db    0
.xdata$x:0000BE7F                 db    0
.xdata$x:0000BE80                 db    0
.xdata$x:0000BE81                 db    0
.xdata$x:0000BE82                 db    0
.xdata$x:0000BE83                 db    0
.xdata$x:0000BE84                 db    0
.xdata$x:0000BE85                 db    0
.xdata$x:0000BE86                 db    0
.xdata$x:0000BE87                 db    0
.xdata$x:0000BE87 _xdata$x        ends
.xdata$x:0000BE87
.xdata$x:0000BE88 ; ===========================================================================
.xdata$x:0000BE88
.xdata$x:0000BE88 ; Segment type: Pure data
.xdata$x:0000BE88 ; Segment permissions: Read
.xdata$x:0000BE88 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BE88                 assume cs:_xdata$x
.xdata$x:0000BE88                 ;org 0BE88h
.xdata$x:0000BE88 ; COMDAT (pick associative to section at 4FC8)
.xdata$x:0000BE88 __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z db 0FFh
.xdata$x:0000BE88                                         ; DATA XREF: .xdata$x:0000BE98o
.xdata$x:0000BE89                 db 0FFh
.xdata$x:0000BE8A                 db 0FFh
.xdata$x:0000BE8B                 db 0FFh
.xdata$x:0000BE8C                 dd offset __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0
.xdata$x:0000BE90 __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z db  22h ; "
.xdata$x:0000BE90                                         ; DATA XREF: __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z+11o
.xdata$x:0000BE91                 db    5
.xdata$x:0000BE92                 db  93h ; ô
.xdata$x:0000BE93                 db  19h
.xdata$x:0000BE94                 db    1
.xdata$x:0000BE95                 db    0
.xdata$x:0000BE96                 db    0
.xdata$x:0000BE97                 db    0
.xdata$x:0000BE98                 dd offset __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.xdata$x:0000BE9C                 db    0
.xdata$x:0000BE9D                 db    0
.xdata$x:0000BE9E                 db    0
.xdata$x:0000BE9F                 db    0
.xdata$x:0000BEA0                 db    0
.xdata$x:0000BEA1                 db    0
.xdata$x:0000BEA2                 db    0
.xdata$x:0000BEA3                 db    0
.xdata$x:0000BEA4                 db    0
.xdata$x:0000BEA5                 db    0
.xdata$x:0000BEA6                 db    0
.xdata$x:0000BEA7                 db    0
.xdata$x:0000BEA8                 db    0
.xdata$x:0000BEA9                 db    0
.xdata$x:0000BEAA                 db    0
.xdata$x:0000BEAB                 db    0
.xdata$x:0000BEAC                 db    0
.xdata$x:0000BEAD                 db    0
.xdata$x:0000BEAE                 db    0
.xdata$x:0000BEAF                 db    0
.xdata$x:0000BEB0                 db    0
.xdata$x:0000BEB1                 db    0
.xdata$x:0000BEB2                 db    0
.xdata$x:0000BEB3                 db    0
.xdata$x:0000BEB3 _xdata$x        ends
.xdata$x:0000BEB3
.xdata$x:0000BEB4 ; ===========================================================================
.xdata$x:0000BEB4
.xdata$x:0000BEB4 ; Segment type: Pure data
.xdata$x:0000BEB4 ; Segment permissions: Read
.xdata$x:0000BEB4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BEB4                 assume cs:_xdata$x
.xdata$x:0000BEB4                 ;org 0BEB4h
.xdata$x:0000BEB4 ; COMDAT (pick associative to section at 6D80)
.xdata$x:0000BEB4 __unwindtable$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z db 0FFh
.xdata$x:0000BEB4                                         ; DATA XREF: .xdata$x:0000BEC4o
.xdata$x:0000BEB5                 db 0FFh
.xdata$x:0000BEB6                 db 0FFh
.xdata$x:0000BEB7                 db 0FFh
.xdata$x:0000BEB8                 dd offset __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0
.xdata$x:0000BEBC __ehfuncinfo$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z db  22h ; "
.xdata$x:0000BEBC                                         ; DATA XREF: __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z+11o
.xdata$x:0000BEBD                 db    5
.xdata$x:0000BEBE                 db  93h ; ô
.xdata$x:0000BEBF                 db  19h
.xdata$x:0000BEC0                 db    1
.xdata$x:0000BEC1                 db    0
.xdata$x:0000BEC2                 db    0
.xdata$x:0000BEC3                 db    0
.xdata$x:0000BEC4                 dd offset __unwindtable$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.xdata$x:0000BEC8                 align 20h
.xdata$x:0000BEC8 _xdata$x        ends
.xdata$x:0000BEC8
.xdata$x:0000BEE0 ; ===========================================================================
.xdata$x:0000BEE0
.xdata$x:0000BEE0 ; Segment type: Pure data
.xdata$x:0000BEE0 ; Segment permissions: Read
.xdata$x:0000BEE0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BEE0                 assume cs:_xdata$x
.xdata$x:0000BEE0                 ;org 0BEE0h
.xdata$x:0000BEE0 ; COMDAT (pick associative to section at 60C4)
.xdata$x:0000BEE0 __unwindtable$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000BEE0                                         ; DATA XREF: .xdata$x:0000BEF0o
.xdata$x:0000BEE1                 db 0FFh
.xdata$x:0000BEE2                 db 0FFh
.xdata$x:0000BEE3                 db 0FFh
.xdata$x:0000BEE4                 dd offset __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000BEE8 __ehfuncinfo$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000BEE8                                         ; DATA XREF: __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000BEE9                 db    5
.xdata$x:0000BEEA                 db  93h ; ô
.xdata$x:0000BEEB                 db  19h
.xdata$x:0000BEEC                 db    1
.xdata$x:0000BEED                 db    0
.xdata$x:0000BEEE                 db    0
.xdata$x:0000BEEF                 db    0
.xdata$x:0000BEF0                 dd offset __unwindtable$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:0000BEF4                 db    0
.xdata$x:0000BEF5                 db    0
.xdata$x:0000BEF6                 db    0
.xdata$x:0000BEF7                 db    0
.xdata$x:0000BEF8                 db    0
.xdata$x:0000BEF9                 db    0
.xdata$x:0000BEFA                 db    0
.xdata$x:0000BEFB                 db    0
.xdata$x:0000BEFC                 db    0
.xdata$x:0000BEFD                 db    0
.xdata$x:0000BEFE                 db    0
.xdata$x:0000BEFF                 db    0
.xdata$x:0000BF00                 db    0
.xdata$x:0000BF01                 db    0
.xdata$x:0000BF02                 db    0
.xdata$x:0000BF03                 db    0
.xdata$x:0000BF04                 db    0
.xdata$x:0000BF05                 db    0
.xdata$x:0000BF06                 db    0
.xdata$x:0000BF07                 db    0
.xdata$x:0000BF08                 db    0
.xdata$x:0000BF09                 db    0
.xdata$x:0000BF0A                 db    0
.xdata$x:0000BF0B                 db    0
.xdata$x:0000BF0B _xdata$x        ends
.xdata$x:0000BF0B
.xdata$x:0000BF0C ; ===========================================================================
.xdata$x:0000BF0C
.xdata$x:0000BF0C ; Segment type: Pure data
.xdata$x:0000BF0C ; Segment permissions: Read
.xdata$x:0000BF0C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BF0C                 assume cs:_xdata$x
.xdata$x:0000BF0C                 ;org 0BF0Ch
.xdata$x:0000BF0C ; COMDAT (pick associative to section at 4F50)
.xdata$x:0000BF0C __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000BF0C                                         ; DATA XREF: .xdata$x:0000BF1Co
.xdata$x:0000BF0D                 db 0FFh
.xdata$x:0000BF0E                 db 0FFh
.xdata$x:0000BF0F                 db 0FFh
.xdata$x:0000BF10                 dd offset __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:0000BF14 __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000BF14                                         ; DATA XREF: __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000BF15                 db    5
.xdata$x:0000BF16                 db  93h ; ô
.xdata$x:0000BF17                 db  19h
.xdata$x:0000BF18                 db    1
.xdata$x:0000BF19                 db    0
.xdata$x:0000BF1A                 db    0
.xdata$x:0000BF1B                 db    0
.xdata$x:0000BF1C                 dd offset __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:0000BF20                 db    0
.xdata$x:0000BF21                 db    0
.xdata$x:0000BF22                 db    0
.xdata$x:0000BF23                 db    0
.xdata$x:0000BF24                 db    0
.xdata$x:0000BF25                 db    0
.xdata$x:0000BF26                 db    0
.xdata$x:0000BF27                 db    0
.xdata$x:0000BF28                 db    0
.xdata$x:0000BF29                 db    0
.xdata$x:0000BF2A                 db    0
.xdata$x:0000BF2B                 db    0
.xdata$x:0000BF2C                 db    0
.xdata$x:0000BF2D                 db    0
.xdata$x:0000BF2E                 db    0
.xdata$x:0000BF2F                 db    0
.xdata$x:0000BF30                 db    0
.xdata$x:0000BF31                 db    0
.xdata$x:0000BF32                 db    0
.xdata$x:0000BF33                 db    0
.xdata$x:0000BF34                 db    0
.xdata$x:0000BF35                 db    0
.xdata$x:0000BF36                 db    0
.xdata$x:0000BF37                 db    0
.xdata$x:0000BF37 _xdata$x        ends
.xdata$x:0000BF37
.xdata$x:0000BF38 ; ===========================================================================
.xdata$x:0000BF38
.xdata$x:0000BF38 ; Segment type: Pure data
.xdata$x:0000BF38 ; Segment permissions: Read
.xdata$x:0000BF38 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BF38                 assume cs:_xdata$x
.xdata$x:0000BF38                 ;org 0BF38h
.xdata$x:0000BF38 ; COMDAT (pick associative to section at 4388)
.xdata$x:0000BF38 __ehfuncinfo$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z db  22h ; "
.xdata$x:0000BF38                                         ; DATA XREF: __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z+11o
.xdata$x:0000BF39                 db    5
.xdata$x:0000BF3A                 db  93h ; ô
.xdata$x:0000BF3B                 db  19h
.xdata$x:0000BF3C                 db  0Ah
.xdata$x:0000BF3D                 db    0
.xdata$x:0000BF3E                 db    0
.xdata$x:0000BF3F                 db    0
.xdata$x:0000BF40                 dd offset __unwindtable$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.xdata$x:0000BF44                 db    0
.xdata$x:0000BF45                 db    0
.xdata$x:0000BF46                 db    0
.xdata$x:0000BF47                 db    0
.xdata$x:0000BF48                 db    0
.xdata$x:0000BF49                 db    0
.xdata$x:0000BF4A                 db    0
.xdata$x:0000BF4B                 db    0
.xdata$x:0000BF4C                 db    0
.xdata$x:0000BF4D                 db    0
.xdata$x:0000BF4E                 db    0
.xdata$x:0000BF4F                 db    0
.xdata$x:0000BF50                 db    0
.xdata$x:0000BF51                 db    0
.xdata$x:0000BF52                 db    0
.xdata$x:0000BF53                 db    0
.xdata$x:0000BF54                 db    0
.xdata$x:0000BF55                 db    0
.xdata$x:0000BF56                 db    0
.xdata$x:0000BF57                 db    0
.xdata$x:0000BF58                 db    0
.xdata$x:0000BF59                 db    0
.xdata$x:0000BF5A                 db    0
.xdata$x:0000BF5B                 db    0
.xdata$x:0000BF5C __unwindtable$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z db 0FFh
.xdata$x:0000BF5C                                         ; DATA XREF: .xdata$x:0000BF40o
.xdata$x:0000BF5D                 db 0FFh
.xdata$x:0000BF5E                 db 0FFh
.xdata$x:0000BF5F                 db 0FFh
.xdata$x:0000BF60                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0
.xdata$x:0000BF64                 align 8
.xdata$x:0000BF68                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1
.xdata$x:0000BF6C                 db    1
.xdata$x:0000BF6D                 db    0
.xdata$x:0000BF6E                 db    0
.xdata$x:0000BF6F                 db    0
.xdata$x:0000BF70                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2
.xdata$x:0000BF74                 db    2
.xdata$x:0000BF75                 db    0
.xdata$x:0000BF76                 db    0
.xdata$x:0000BF77                 db    0
.xdata$x:0000BF78                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3
.xdata$x:0000BF7C                 db    3
.xdata$x:0000BF7D                 db    0
.xdata$x:0000BF7E                 db    0
.xdata$x:0000BF7F                 db    0
.xdata$x:0000BF80                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4
.xdata$x:0000BF84                 db    4
.xdata$x:0000BF85                 db    0
.xdata$x:0000BF86                 db    0
.xdata$x:0000BF87                 db    0
.xdata$x:0000BF88                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5
.xdata$x:0000BF8C                 db    5
.xdata$x:0000BF8D                 db    0
.xdata$x:0000BF8E                 db    0
.xdata$x:0000BF8F                 db    0
.xdata$x:0000BF90                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6
.xdata$x:0000BF94                 db    6
.xdata$x:0000BF95                 db    0
.xdata$x:0000BF96                 db    0
.xdata$x:0000BF97                 db    0
.xdata$x:0000BF98                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7
.xdata$x:0000BF9C                 db    1
.xdata$x:0000BF9D                 db    0
.xdata$x:0000BF9E                 db    0
.xdata$x:0000BF9F                 db    0
.xdata$x:0000BFA0                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4
.xdata$x:0000BFA4                 db    8
.xdata$x:0000BFA5                 db    0
.xdata$x:0000BFA6                 db    0
.xdata$x:0000BFA7                 db    0
.xdata$x:0000BFA8                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6
.xdata$x:0000BFA8 _xdata$x        ends
.xdata$x:0000BFA8
.xdata$x:0000BFAC ; ===========================================================================
.xdata$x:0000BFAC
.xdata$x:0000BFAC ; Segment type: Pure data
.xdata$x:0000BFAC ; Segment permissions: Read
.xdata$x:0000BFAC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BFAC                 assume cs:_xdata$x
.xdata$x:0000BFAC                 ;org 0BFACh
.xdata$x:0000BFAC ; COMDAT (pick associative to section at 4994)
.xdata$x:0000BFAC __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db 0FFh
.xdata$x:0000BFAC                                         ; DATA XREF: .xdata$x:0000BFBCo
.xdata$x:0000BFAD                 db 0FFh
.xdata$x:0000BFAE                 db 0FFh
.xdata$x:0000BFAF                 db 0FFh
.xdata$x:0000BFB0                 dd offset __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
.xdata$x:0000BFB4 __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db  22h ; "
.xdata$x:0000BFB4                                         ; DATA XREF: __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z+11o
.xdata$x:0000BFB5                 db    5
.xdata$x:0000BFB6                 db  93h ; ô
.xdata$x:0000BFB7                 db  19h
.xdata$x:0000BFB8                 db    1
.xdata$x:0000BFB9                 db    0
.xdata$x:0000BFBA                 db    0
.xdata$x:0000BFBB                 db    0
.xdata$x:0000BFBC                 dd offset __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.xdata$x:0000BFC0                 db    0
.xdata$x:0000BFC1                 db    0
.xdata$x:0000BFC2                 db    0
.xdata$x:0000BFC3                 db    0
.xdata$x:0000BFC4                 db    0
.xdata$x:0000BFC5                 db    0
.xdata$x:0000BFC6                 db    0
.xdata$x:0000BFC7                 db    0
.xdata$x:0000BFC8                 db    0
.xdata$x:0000BFC9                 db    0
.xdata$x:0000BFCA                 db    0
.xdata$x:0000BFCB                 db    0
.xdata$x:0000BFCC                 db    0
.xdata$x:0000BFCD                 db    0
.xdata$x:0000BFCE                 db    0
.xdata$x:0000BFCF                 db    0
.xdata$x:0000BFD0                 db    0
.xdata$x:0000BFD1                 db    0
.xdata$x:0000BFD2                 db    0
.xdata$x:0000BFD3                 db    0
.xdata$x:0000BFD4                 db    0
.xdata$x:0000BFD5                 db    0
.xdata$x:0000BFD6                 db    0
.xdata$x:0000BFD7                 db    0
.xdata$x:0000BFD7 _xdata$x        ends
.xdata$x:0000BFD7
.xdata$x:0000BFD8 ; ===========================================================================
.xdata$x:0000BFD8
.xdata$x:0000BFD8 ; Segment type: Pure data
.xdata$x:0000BFD8 ; Segment permissions: Read
.xdata$x:0000BFD8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BFD8                 assume cs:_xdata$x
.xdata$x:0000BFD8                 ;org 0BFD8h
.xdata$x:0000BFD8 ; COMDAT (pick associative to section at 4894)
.xdata$x:0000BFD8 __unwindtable$??$construct@PB_WPB_W@?$allocator@PB_W@std@@QAEXPAPB_W$$QAPB_W@Z db 0FFh
.xdata$x:0000BFD8                                         ; DATA XREF: .xdata$x:0000BFE8o
.xdata$x:0000BFD9                 db 0FFh
.xdata$x:0000BFDA                 db 0FFh
.xdata$x:0000BFDB                 db 0FFh
.xdata$x:0000BFDC                 dd offset __unwindfunclet$??$construct@PB_WPB_W@?$allocator@PB_W@std@@QAEXPAPB_W$$QAPB_W@Z$0
.xdata$x:0000BFE0 __ehfuncinfo$??$construct@PB_WPB_W@?$allocator@PB_W@std@@QAEXPAPB_W$$QAPB_W@Z db  22h ; "
.xdata$x:0000BFE0                                         ; DATA XREF: __ehhandler$??$construct@PB_WPB_W@?$allocator@PB_W@std@@QAEXPAPB_W$$QAPB_W@Z+11o
.xdata$x:0000BFE1                 db    5
.xdata$x:0000BFE2                 db  93h ; ô
.xdata$x:0000BFE3                 db  19h
.xdata$x:0000BFE4                 db    1
.xdata$x:0000BFE5                 db    0
.xdata$x:0000BFE6                 db    0
.xdata$x:0000BFE7                 db    0
.xdata$x:0000BFE8                 dd offset __unwindtable$??$construct@PB_WPB_W@?$allocator@PB_W@std@@QAEXPAPB_W$$QAPB_W@Z
.xdata$x:0000BFEC                 db    0
.xdata$x:0000BFED                 db    0
.xdata$x:0000BFEE                 db    0
.xdata$x:0000BFEF                 db    0
.xdata$x:0000BFF0                 db    0
.xdata$x:0000BFF1                 db    0
.xdata$x:0000BFF2                 db    0
.xdata$x:0000BFF3                 db    0
.xdata$x:0000BFF4                 db    0
.xdata$x:0000BFF5                 db    0
.xdata$x:0000BFF6                 db    0
.xdata$x:0000BFF7                 db    0
.xdata$x:0000BFF8                 db    0
.xdata$x:0000BFF9                 db    0
.xdata$x:0000BFFA                 db    0
.xdata$x:0000BFFB                 db    0
.xdata$x:0000BFFC                 db    0
.xdata$x:0000BFFD                 db    0
.xdata$x:0000BFFE                 db    0
.xdata$x:0000BFFF                 db    0
.xdata$x:0000C000                 db    0
.xdata$x:0000C001                 db    0
.xdata$x:0000C002                 db    0
.xdata$x:0000C003                 db    0
.xdata$x:0000C003 _xdata$x        ends
.xdata$x:0000C003
.xdata$x:0000C004 ; ===========================================================================
.xdata$x:0000C004
.xdata$x:0000C004 ; Segment type: Pure data
.xdata$x:0000C004 ; Segment permissions: Read
.xdata$x:0000C004 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C004                 assume cs:_xdata$x
.xdata$x:0000C004                 ;org 0C004h
.xdata$x:0000C004 ; COMDAT (pick associative to section at 4748)
.xdata$x:0000C004 __unwindtable$??$construct@PB_WAAPB_W@?$allocator@PB_W@std@@QAEXPAPB_WAAPB_W@Z db 0FFh
.xdata$x:0000C004                                         ; DATA XREF: .xdata$x:0000C014o
.xdata$x:0000C005                 db 0FFh
.xdata$x:0000C006                 db 0FFh
.xdata$x:0000C007                 db 0FFh
.xdata$x:0000C008                 dd offset __unwindfunclet$??$construct@PB_WAAPB_W@?$allocator@PB_W@std@@QAEXPAPB_WAAPB_W@Z$0
.xdata$x:0000C00C __ehfuncinfo$??$construct@PB_WAAPB_W@?$allocator@PB_W@std@@QAEXPAPB_WAAPB_W@Z db  22h ; "
.xdata$x:0000C00C                                         ; DATA XREF: __ehhandler$??$construct@PB_WAAPB_W@?$allocator@PB_W@std@@QAEXPAPB_WAAPB_W@Z+11o
.xdata$x:0000C00D                 db    5
.xdata$x:0000C00E                 db  93h ; ô
.xdata$x:0000C00F                 db  19h
.xdata$x:0000C010                 db    1
.xdata$x:0000C011                 db    0
.xdata$x:0000C012                 db    0
.xdata$x:0000C013                 db    0
.xdata$x:0000C014                 dd offset __unwindtable$??$construct@PB_WAAPB_W@?$allocator@PB_W@std@@QAEXPAPB_WAAPB_W@Z
.xdata$x:0000C018                 db    0
.xdata$x:0000C019                 db    0
.xdata$x:0000C01A                 db    0
.xdata$x:0000C01B                 db    0
.xdata$x:0000C01C                 db    0
.xdata$x:0000C01D                 db    0
.xdata$x:0000C01E                 db    0
.xdata$x:0000C01F                 db    0
.xdata$x:0000C020                 db    0
.xdata$x:0000C021                 db    0
.xdata$x:0000C022                 db    0
.xdata$x:0000C023                 db    0
.xdata$x:0000C024                 db    0
.xdata$x:0000C025                 db    0
.xdata$x:0000C026                 db    0
.xdata$x:0000C027                 db    0
.xdata$x:0000C028                 db    0
.xdata$x:0000C029                 db    0
.xdata$x:0000C02A                 db    0
.xdata$x:0000C02B                 db    0
.xdata$x:0000C02C                 db    0
.xdata$x:0000C02D                 db    0
.xdata$x:0000C02E                 db    0
.xdata$x:0000C02F                 db    0
.xdata$x:0000C02F _xdata$x        ends
.xdata$x:0000C02F
.xdata$x:0000C030 ; ===========================================================================
.xdata$x:0000C030
.xdata$x:0000C030 ; Segment type: Pure data
.xdata$x:0000C030 ; Segment permissions: Read
.xdata$x:0000C030 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C030                 assume cs:_xdata$x
.xdata$x:0000C030                 ;org 0C030h
.xdata$x:0000C030 ; COMDAT (pick associative to section at 4548)
.xdata$x:0000C030 __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db 0FFh
.xdata$x:0000C030                                         ; DATA XREF: .xdata$x:0000C040o
.xdata$x:0000C031                 db 0FFh
.xdata$x:0000C032                 db 0FFh
.xdata$x:0000C033                 db 0FFh
.xdata$x:0000C034                 dd offset __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
.xdata$x:0000C038 __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db  22h ; "
.xdata$x:0000C038                                         ; DATA XREF: __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z+11o
.xdata$x:0000C039                 db    5
.xdata$x:0000C03A                 db  93h ; ô
.xdata$x:0000C03B                 db  19h
.xdata$x:0000C03C                 db    1
.xdata$x:0000C03D                 db    0
.xdata$x:0000C03E                 db    0
.xdata$x:0000C03F                 db    0
.xdata$x:0000C040                 dd offset __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.xdata$x:0000C044                 db    0
.xdata$x:0000C045                 db    0
.xdata$x:0000C046                 db    0
.xdata$x:0000C047                 db    0
.xdata$x:0000C048                 db    0
.xdata$x:0000C049                 db    0
.xdata$x:0000C04A                 db    0
.xdata$x:0000C04B                 db    0
.xdata$x:0000C04C                 db    0
.xdata$x:0000C04D                 db    0
.xdata$x:0000C04E                 db    0
.xdata$x:0000C04F                 db    0
.xdata$x:0000C050                 db    0
.xdata$x:0000C051                 db    0
.xdata$x:0000C052                 db    0
.xdata$x:0000C053                 db    0
.xdata$x:0000C054                 db    0
.xdata$x:0000C055                 db    0
.xdata$x:0000C056                 db    0
.xdata$x:0000C057                 db    0
.xdata$x:0000C058                 db    0
.xdata$x:0000C059                 db    0
.xdata$x:0000C05A                 db    0
.xdata$x:0000C05B                 db    0
.xdata$x:0000C05B _xdata$x        ends
.xdata$x:0000C05B
.xdata$x:0000C05C ; ===========================================================================
.xdata$x:0000C05C
.xdata$x:0000C05C ; Segment type: Pure data
.xdata$x:0000C05C ; Segment permissions: Read
.xdata$x:0000C05C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C05C                 assume cs:_xdata$x
.xdata$x:0000C05C                 ;org 0C05Ch
.xdata$x:0000C05C ; COMDAT (pick associative to section at 4648)
.xdata$x:0000C05C __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db 0FFh
.xdata$x:0000C05C                                         ; DATA XREF: .xdata$x:0000C06Co
.xdata$x:0000C05D                 db 0FFh
.xdata$x:0000C05E                 db 0FFh
.xdata$x:0000C05F                 db 0FFh
.xdata$x:0000C060                 dd offset __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0
.xdata$x:0000C064 __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db  22h ; "
.xdata$x:0000C064                                         ; DATA XREF: __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z+11o
.xdata$x:0000C065                 db    5
.xdata$x:0000C066                 db  93h ; ô
.xdata$x:0000C067                 db  19h
.xdata$x:0000C068                 db    1
.xdata$x:0000C069                 db    0
.xdata$x:0000C06A                 db    0
.xdata$x:0000C06B                 db    0
.xdata$x:0000C06C                 dd offset __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.xdata$x:0000C070                 db    0
.xdata$x:0000C071                 db    0
.xdata$x:0000C072                 db    0
.xdata$x:0000C073                 db    0
.xdata$x:0000C074                 db    0
.xdata$x:0000C075                 db    0
.xdata$x:0000C076                 db    0
.xdata$x:0000C077                 db    0
.xdata$x:0000C078                 db    0
.xdata$x:0000C079                 db    0
.xdata$x:0000C07A                 db    0
.xdata$x:0000C07B                 db    0
.xdata$x:0000C07C                 db    0
.xdata$x:0000C07D                 db    0
.xdata$x:0000C07E                 db    0
.xdata$x:0000C07F                 db    0
.xdata$x:0000C080                 db    0
.xdata$x:0000C081                 db    0
.xdata$x:0000C082                 db    0
.xdata$x:0000C083                 db    0
.xdata$x:0000C084                 db    0
.xdata$x:0000C085                 db    0
.xdata$x:0000C086                 db    0
.xdata$x:0000C087                 db    0
.xdata$x:0000C087 _xdata$x        ends
.xdata$x:0000C087
.bss:0000C088 ; ===========================================================================
.bss:0000C088
.bss:0000C088 ; Segment type: Uninitialized
.bss:0000C088 ; Segment permissions: Read/Write
.bss:0000C088 _bss            segment byte public 'BSS' use32
.bss:0000C088                 assume cs:_bss
.bss:0000C088                 ;org 0C088h
.bss:0000C088                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000C088 __Tuple_alloc   db    ? ;
.bss:0000C089 ; std::_Ignore ignore
.bss:0000C089 _ignore         db    ? ;               ; DATA XREF: std::`dynamic initializer for 'ignore''(void)+3o
.bss:0000C08A _allocator_arg  db    ? ;
.bss:0000C08B _piecewise_construct db    ? ;
.bss:0000C08B _bss            ends
.bss:0000C08B
.rdata:0000C08C ; ===========================================================================
.rdata:0000C08C
.rdata:0000C08C ; Segment type: Pure data
.rdata:0000C08C ; Segment permissions: Read
.rdata:0000C08C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000C08C _rdata          segment para public 'DATA' use32
.rdata:0000C08C                 assume cs:_rdata
.rdata:0000C08C                 ;org 0C08Ch
.rdata:0000C08C ; COMDAT (pick any)
.rdata:0000C08C                 public ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000C08C ; wchar_t `string'
.rdata:0000C08C ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000C08C                                         ; DATA XREF: std::_Iterator_base12::_Orphan_me(void)+48o
.rdata:0000C08C                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000C08C                 unicode 0, <clude\xutility>,0
.rdata:0000C08C _rdata          ends
.rdata:0000C08C
.rdata:0000C11C ; ===========================================================================
.rdata:0000C11C
.rdata:0000C11C ; Segment type: Pure data
.rdata:0000C11C ; Segment permissions: Read
.rdata:0000C11C _rdata          segment dword public 'DATA' use32
.rdata:0000C11C                 assume cs:_rdata
.rdata:0000C11C                 ;org 0C11Ch
.rdata:0000C11C ; COMDAT (pick any)
.rdata:0000C11C                 public ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
.rdata:0000C11C ; wchar_t `string'
.rdata:0000C11C ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@:
.rdata:0000C11C                                         ; DATA XREF: std::_Iterator_base12::_Orphan_me(void)+4Do
.rdata:0000C11C                 unicode 0, <ITERATOR LIST CORRUPTED!>,0
.rdata:0000C14E                 align 10h
.rdata:0000C14E _rdata          ends
.rdata:0000C14E
.rdata:0000C150 ; ===========================================================================
.rdata:0000C150
.rdata:0000C150 ; Segment type: Pure data
.rdata:0000C150 ; Segment permissions: Read
.rdata:0000C150 _rdata          segment dword public 'DATA' use32
.rdata:0000C150                 assume cs:_rdata
.rdata:0000C150                 ;org 0C150h
.rdata:0000C150 ; COMDAT (pick any)
.rdata:0000C150                 public ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
.rdata:0000C150 ; public: static unsigned int const std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::npos
.rdata:0000C150 ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB dd 0FFFFFFFFh
.rdata:0000C150                                         ; DATA XREF: getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &)+179r
.rdata:0000C150 _rdata          ends
.rdata:0000C150
.data$r:0000C154 ; ===========================================================================
.data$r:0000C154
.data$r:0000C154 ; Segment type: Pure data
.data$r:0000C154 ; Segment permissions: Read/Write
.data$r:0000C154 _data$r         segment dword public 'DATA' use32
.data$r:0000C154                 assume cs:_data$r
.data$r:0000C154                 ;org 0C154h
.data$r:0000C154 ; COMDAT (pick any)
.data$r:0000C154                 public ??_R0?AVruntime_error@std@@@8
.data$r:0000C154 ; class std::runtime_error `RTTI Type Descriptor'
.data$r:0000C154 ??_R0?AVruntime_error@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000C154                                         ; DATA XREF: .xdata$x:0000AF5Co
.data$r:0000C154                                         ; const type_info::`vftable'
.data$r:0000C158                 db    0
.data$r:0000C159                 db    0
.data$r:0000C15A                 db    0
.data$r:0000C15B                 db    0
.data$r:0000C15C                 db  2Eh ; .
.data$r:0000C15D                 db  3Fh ; ?
.data$r:0000C15E                 db  41h ; A
.data$r:0000C15F                 db  56h ; V
.data$r:0000C160                 db  72h ; r
.data$r:0000C161                 db  75h ; u
.data$r:0000C162                 db  6Eh ; n
.data$r:0000C163                 db  74h ; t
.data$r:0000C164                 db  69h ; i
.data$r:0000C165                 db  6Dh ; m
.data$r:0000C166                 db  65h ; e
.data$r:0000C167                 db  5Fh ; _
.data$r:0000C168                 db  65h ; e
.data$r:0000C169                 db  72h ; r
.data$r:0000C16A                 db  72h ; r
.data$r:0000C16B                 db  6Fh ; o
.data$r:0000C16C                 db  72h ; r
.data$r:0000C16D                 db  40h ; @
.data$r:0000C16E                 db  73h ; s
.data$r:0000C16F                 db  74h ; t
.data$r:0000C170                 db  64h ; d
.data$r:0000C171                 db  40h ; @
.data$r:0000C172                 db  40h ; @
.data$r:0000C173                 db    0
.data$r:0000C173 _data$r         ends
.data$r:0000C173
.data$r:0000C174 ; ===========================================================================
.data$r:0000C174
.data$r:0000C174 ; Segment type: Pure data
.data$r:0000C174 ; Segment permissions: Read/Write
.data$r:0000C174 _data$r         segment dword public 'DATA' use32
.data$r:0000C174                 assume cs:_data$r
.data$r:0000C174                 ;org 0C174h
.data$r:0000C174 ; COMDAT (pick any)
.data$r:0000C174                 public ??_R0?AVexception@std@@@8
.data$r:0000C174 ; class std::exception `RTTI Type Descriptor'
.data$r:0000C174 ??_R0?AVexception@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000C174                                         ; DATA XREF: .xdata$x:0000AF7Co
.data$r:0000C174                                         ; const type_info::`vftable'
.data$r:0000C178                 db    0
.data$r:0000C179                 db    0
.data$r:0000C17A                 db    0
.data$r:0000C17B                 db    0
.data$r:0000C17C                 db  2Eh ; .
.data$r:0000C17D                 db  3Fh ; ?
.data$r:0000C17E                 db  41h ; A
.data$r:0000C17F                 db  56h ; V
.data$r:0000C180                 db  65h ; e
.data$r:0000C181                 db  78h ; x
.data$r:0000C182                 db  63h ; c
.data$r:0000C183                 db  65h ; e
.data$r:0000C184                 db  70h ; p
.data$r:0000C185                 db  74h ; t
.data$r:0000C186                 db  69h ; i
.data$r:0000C187                 db  6Fh ; o
.data$r:0000C188                 db  6Eh ; n
.data$r:0000C189                 db  40h ; @
.data$r:0000C18A                 db  73h ; s
.data$r:0000C18B                 db  74h ; t
.data$r:0000C18C                 db  64h ; d
.data$r:0000C18D                 db  40h ; @
.data$r:0000C18E                 db  40h ; @
.data$r:0000C18F                 db    0
.data$r:0000C18F _data$r         ends
.data$r:0000C18F
.rdata:0000C190 ; ===========================================================================
.rdata:0000C190
.rdata:0000C190 ; Segment type: Pure data
.rdata:0000C190 ; Segment permissions: Read
.rdata:0000C190 _rdata          segment dword public 'DATA' use32
.rdata:0000C190                 assume cs:_rdata
.rdata:0000C190                 ;org 0C190h
.rdata:0000C190 ; COMDAT (pick largest)
.rdata:0000C190                 dd offset ??_R4error_category@std@@6B@ ; const std::error_category::`RTTI Complete Object Locator'
.rdata:0000C194                 public ??_7error_category@std@@6B@
.rdata:0000C194 ; const std::error_category::`vftable'
.rdata:0000C194 ??_7error_category@std@@6B@ dd offset ??_Eerror_category@std@@UAEPAXI@Z
.rdata:0000C194                                         ; DATA XREF: std::error_category::error_category(void)+Ao
.rdata:0000C194                                         ; std::error_category::~error_category(void)+Ao
.rdata:0000C194                                         ; std::error_category::`vector deleting destructor'(uint)
.rdata:0000C198                 dd offset __purecall
.rdata:0000C19C                 dd offset __purecall
.rdata:0000C1A0                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000C1A4                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000C1A8                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000C1A8 _rdata          ends
.rdata:0000C1A8
.rdata:0000C1AC ; ===========================================================================
.rdata:0000C1AC
.rdata:0000C1AC ; Segment type: Pure data
.rdata:0000C1AC ; Segment permissions: Read
.rdata:0000C1AC _rdata          segment dword public 'DATA' use32
.rdata:0000C1AC                 assume cs:_rdata
.rdata:0000C1AC                 ;org 0C1ACh
.rdata:0000C1AC ; COMDAT (pick largest)
.rdata:0000C1AC                 dd offset ??_R4_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata:0000C1B0                 public ??_7_Generic_error_category@std@@6B@
.rdata:0000C1B0 ; const std::_Generic_error_category::`vftable'
.rdata:0000C1B0 ??_7_Generic_error_category@std@@6B@ dd offset ??_E_Generic_error_category@std@@UAEPAXI@Z
.rdata:0000C1B0                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+38o
.rdata:0000C1B0                                         ; std::_Generic_error_category::`vector deleting destructor'(uint)
.rdata:0000C1B4                 dd offset ?name@_Generic_error_category@std@@UBEPBDXZ ; std::_Generic_error_category::name(void)
.rdata:0000C1B8                 dd offset ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.rdata:0000C1BC                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000C1C0                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000C1C4                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000C1C4 _rdata          ends
.rdata:0000C1C4
.rdata:0000C1C8 ; ===========================================================================
.rdata:0000C1C8
.rdata:0000C1C8 ; Segment type: Pure data
.rdata:0000C1C8 ; Segment permissions: Read
.rdata:0000C1C8 _rdata          segment dword public 'DATA' use32
.rdata:0000C1C8                 assume cs:_rdata
.rdata:0000C1C8                 ;org 0C1C8h
.rdata:0000C1C8 ; COMDAT (pick any)
.rdata:0000C1C8                 public ??_C@_07DCLBNMLN@generic?$AA@
.rdata:0000C1C8 ; `string'
.rdata:0000C1C8 ??_C@_07DCLBNMLN@generic?$AA@ db 'generic',0
.rdata:0000C1C8                                         ; DATA XREF: std::_Generic_error_category::name(void)+7o
.rdata:0000C1C8 _rdata          ends
.rdata:0000C1C8
.rdata:0000C1D0 ; ===========================================================================
.rdata:0000C1D0
.rdata:0000C1D0 ; Segment type: Pure data
.rdata:0000C1D0 ; Segment permissions: Read
.rdata:0000C1D0 _rdata          segment dword public 'DATA' use32
.rdata:0000C1D0                 assume cs:_rdata
.rdata:0000C1D0                 ;org 0C1D0h
.rdata:0000C1D0 ; COMDAT (pick any)
.rdata:0000C1D0                 public ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
.rdata:0000C1D0 ; `string'
.rdata:0000C1D0 ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ db 'unknown error',0
.rdata:0000C1D0                                         ; DATA XREF: std::_Generic_error_category::message(int):loc_9D30o
.rdata:0000C1D0                                         ; std::_System_error_category::message(int):loc_9EACo
.rdata:0000C1DE                 align 10h
.rdata:0000C1DE _rdata          ends
.rdata:0000C1DE
.rdata:0000C1E0 ; ===========================================================================
.rdata:0000C1E0
.rdata:0000C1E0 ; Segment type: Pure data
.rdata:0000C1E0 ; Segment permissions: Read
.rdata:0000C1E0 _rdata          segment dword public 'DATA' use32
.rdata:0000C1E0                 assume cs:_rdata
.rdata:0000C1E0                 ;org 0C1E0h
.rdata:0000C1E0 ; COMDAT (pick largest)
.rdata:0000C1E0                 dd offset ??_R4_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata:0000C1E4                 public ??_7_Iostream_error_category@std@@6B@
.rdata:0000C1E4 ; const std::_Iostream_error_category::`vftable'
.rdata:0000C1E4 ??_7_Iostream_error_category@std@@6B@ dd offset ??_E_Iostream_error_category@std@@UAEPAXI@Z
.rdata:0000C1E4                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+38o
.rdata:0000C1E4                                         ; std::_Iostream_error_category::`vector deleting destructor'(uint)
.rdata:0000C1E8                 dd offset ?name@_Iostream_error_category@std@@UBEPBDXZ ; std::_Iostream_error_category::name(void)
.rdata:0000C1EC                 dd offset ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message(int)
.rdata:0000C1F0                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000C1F4                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000C1F8                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000C1F8 _rdata          ends
.rdata:0000C1F8
.rdata:0000C1FC ; ===========================================================================
.rdata:0000C1FC
.rdata:0000C1FC ; Segment type: Pure data
.rdata:0000C1FC ; Segment permissions: Read
.rdata:0000C1FC _rdata          segment dword public 'DATA' use32
.rdata:0000C1FC                 assume cs:_rdata
.rdata:0000C1FC                 ;org 0C1FCh
.rdata:0000C1FC ; COMDAT (pick any)
.rdata:0000C1FC                 public ??_C@_08LLGCOLLL@iostream?$AA@
.rdata:0000C1FC ; `string'
.rdata:0000C1FC ??_C@_08LLGCOLLL@iostream?$AA@ db 'iostream',0
.rdata:0000C1FC                                         ; DATA XREF: std::_Iostream_error_category::name(void)+7o
.rdata:0000C205                 align 4
.rdata:0000C205 _rdata          ends
.rdata:0000C205
.rdata:0000C208 ; ===========================================================================
.rdata:0000C208
.rdata:0000C208 ; Segment type: Pure data
.rdata:0000C208 ; Segment permissions: Read
.rdata:0000C208 _rdata          segment dword public 'DATA' use32
.rdata:0000C208                 assume cs:_rdata
.rdata:0000C208                 ;org 0C208h
.rdata:0000C208 ; COMDAT (pick any)
.rdata:0000C208                 public ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
.rdata:0000C208 ; char `string'[]
.rdata:0000C208 ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ db 'iostream stream error',0
.rdata:0000C208                                         ; DATA XREF: std::_Iostream_error_category::message(int)+35o
.rdata:0000C21E                 align 10h
.rdata:0000C21E _rdata          ends
.rdata:0000C21E
.rdata:0000C220 ; ===========================================================================
.rdata:0000C220
.rdata:0000C220 ; Segment type: Pure data
.rdata:0000C220 ; Segment permissions: Read
.rdata:0000C220 _rdata          segment dword public 'DATA' use32
.rdata:0000C220                 assume cs:_rdata
.rdata:0000C220                 ;org 0C220h
.rdata:0000C220 ; COMDAT (pick largest)
.rdata:0000C220                 dd offset ??_R4_System_error_category@std@@6B@ ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata:0000C224                 public ??_7_System_error_category@std@@6B@
.rdata:0000C224 ; const std::_System_error_category::`vftable'
.rdata:0000C224 ??_7_System_error_category@std@@6B@ dd offset ??_E_System_error_category@std@@UAEPAXI@Z
.rdata:0000C224                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+38o
.rdata:0000C224                                         ; std::_System_error_category::`vector deleting destructor'(uint)
.rdata:0000C228                 dd offset ?name@_System_error_category@std@@UBEPBDXZ ; std::_System_error_category::name(void)
.rdata:0000C22C                 dd offset ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message(int)
.rdata:0000C230                 dd offset ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition(int)
.rdata:0000C234                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000C238                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000C238 _rdata          ends
.rdata:0000C238
.rdata:0000C23C ; ===========================================================================
.rdata:0000C23C
.rdata:0000C23C ; Segment type: Pure data
.rdata:0000C23C ; Segment permissions: Read
.rdata:0000C23C _rdata          segment dword public 'DATA' use32
.rdata:0000C23C                 assume cs:_rdata
.rdata:0000C23C                 ;org 0C23Ch
.rdata:0000C23C ; COMDAT (pick any)
.rdata:0000C23C                 public ??_C@_06FHFOAHML@system?$AA@
.rdata:0000C23C ; `string'
.rdata:0000C23C ??_C@_06FHFOAHML@system?$AA@ db 'system',0
.rdata:0000C23C                                         ; DATA XREF: std::_System_error_category::name(void)+7o
.rdata:0000C243                 align 4
.rdata:0000C243 _rdata          ends
.rdata:0000C243
.bss:0000C244 ; ===========================================================================
.bss:0000C244
.bss:0000C244 ; Segment type: Uninitialized
.bss:0000C244 ; Segment permissions: Read/Write
.bss:0000C244 _bss            segment dword public 'BSS' use32
.bss:0000C244                 assume cs:_bss
.bss:0000C244                 ;org 0C244h
.bss:0000C244 ; COMDAT (pick any)
.bss:0000C244                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000C244                 public ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.bss:0000C244 ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.bss:0000C244 ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A db    ? ;
.bss:0000C244                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o
.bss:0000C244                                         ; `dynamic atexit destructor for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o ...
.bss:0000C245                 db    ? ;
.bss:0000C246                 db    ? ;
.bss:0000C247                 db    ? ;
.bss:0000C247 _bss            ends
.bss:0000C247
.bss:0000C248 ; ===========================================================================
.bss:0000C248
.bss:0000C248 ; Segment type: Uninitialized
.bss:0000C248 ; Segment permissions: Read/Write
.bss:0000C248 _bss            segment dword public 'BSS' use32
.bss:0000C248                 assume cs:_bss
.bss:0000C248                 ;org 0C248h
.bss:0000C248 ; COMDAT (pick any)
.bss:0000C248                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000C248                 public ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.bss:0000C248 ; std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object
.bss:0000C248 ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A db    ? ;
.bss:0000C248                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:0000C248                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:0000C249                 db    ? ;
.bss:0000C24A                 db    ? ;
.bss:0000C24B                 db    ? ;
.bss:0000C24B _bss            ends
.bss:0000C24B
.bss:0000C24C ; ===========================================================================
.bss:0000C24C
.bss:0000C24C ; Segment type: Uninitialized
.bss:0000C24C ; Segment permissions: Read/Write
.bss:0000C24C _bss            segment dword public 'BSS' use32
.bss:0000C24C                 assume cs:_bss
.bss:0000C24C                 ;org 0C24Ch
.bss:0000C24C ; COMDAT (pick any)
.bss:0000C24C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000C24C                 public ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.bss:0000C24C ; std::_System_error_category std::_Error_objects<int>::_System_object
.bss:0000C24C ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A db    ? ;
.bss:0000C24C                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o
.bss:0000C24C                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o ...
.bss:0000C24D                 db    ? ;
.bss:0000C24E                 db    ? ;
.bss:0000C24F                 db    ? ;
.bss:0000C24F _bss            ends
.bss:0000C24F
.rdata:0000C250 ; ===========================================================================
.rdata:0000C250
.rdata:0000C250 ; Segment type: Pure data
.rdata:0000C250 ; Segment permissions: Read
.rdata:0000C250 _rdata          segment dword public 'DATA' use32
.rdata:0000C250                 assume cs:_rdata
.rdata:0000C250                 ;org 0C250h
.rdata:0000C250 ; COMDAT (pick any)
.rdata:0000C250                 public ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
.rdata:0000C250 ; public: static unsigned int const std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::npos
.rdata:0000C250 ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB dd 0FFFFFFFFh
.rdata:0000C250                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5Br
.rdata:0000C250                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+7r ...
.rdata:0000C250 _rdata          ends
.rdata:0000C250
.bss:0000C254 ; ===========================================================================
.bss:0000C254
.bss:0000C254 ; Segment type: Uninitialized
.bss:0000C254 ; Segment permissions: Read/Write
.bss:0000C254 _bss            segment dword public 'BSS' use32
.bss:0000C254                 assume cs:_bss
.bss:0000C254                 ;org 0C254h
.bss:0000C254 ; COMDAT (pick any)
.bss:0000C254                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000C254                 public ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.bss:0000C254 ; std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id
.bss:0000C254 ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:0000C254                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+5o
.bss:0000C255                 db    ? ;
.bss:0000C256                 db    ? ;
.bss:0000C257                 db    ? ;
.bss:0000C257 _bss            ends
.bss:0000C257
.bss:0000C258 ; ===========================================================================
.bss:0000C258
.bss:0000C258 ; Segment type: Uninitialized
.bss:0000C258 ; Segment permissions: Read/Write
.bss:0000C258 _bss            segment dword public 'BSS' use32
.bss:0000C258                 assume cs:_bss
.bss:0000C258                 ;org 0C258h
.bss:0000C258 ; COMDAT (pick any)
.bss:0000C258                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000C258                 public ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.bss:0000C258 ; std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id
.bss:0000C258 ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:0000C258                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+5o
.bss:0000C259                 db    ? ;
.bss:0000C25A                 db    ? ;
.bss:0000C25B                 db    ? ;
.bss:0000C25B _bss            ends
.bss:0000C25B
.rdata:0000C25C ; ===========================================================================
.rdata:0000C25C
.rdata:0000C25C ; Segment type: Pure data
.rdata:0000C25C ; Segment permissions: Read
.rdata:0000C25C _rdata          segment dword public 'DATA' use32
.rdata:0000C25C                 assume cs:_rdata
.rdata:0000C25C                 ;org 0C25Ch
.rdata:0000C25C ; COMDAT (pick any)
.rdata:0000C25C                 public ??_C@_11LOCGONAA@?$AA?$AA@
.rdata:0000C25C ; wchar_t `string'
.rdata:0000C25C ??_C@_11LOCGONAA@?$AA?$AA@ dw 0         ; DATA XREF: CmdLineParams::CmdLineParams(void)+82o
.rdata:0000C25C                                         ; CmdLineParams::CmdLineParams(void)+99o
.rdata:0000C25E                 align 10h
.rdata:0000C25E _rdata          ends
.rdata:0000C25E
.rdata:0000C260 ; ===========================================================================
.rdata:0000C260
.rdata:0000C260 ; Segment type: Pure data
.rdata:0000C260 ; Segment permissions: Read
.rdata:0000C260 _rdata          segment dword public 'DATA' use32
.rdata:0000C260                 assume cs:_rdata
.rdata:0000C260                 ;org 0C260h
.rdata:0000C260 ; COMDAT (pick largest)
.rdata:0000C260                 dd offset ??_R4Window@@6B@ ; const Window::`RTTI Complete Object Locator'
.rdata:0000C264                 public ??_7Window@@6B@
.rdata:0000C264 ; const Window::`vftable'
.rdata:0000C264 ??_7Window@@6B@ dd offset ??_EWindow@@UAEPAXI@Z
.rdata:0000C264                                         ; DATA XREF: Window::Window(void)+Ao
.rdata:0000C264                                         ; Window::~Window(void)+Ao
.rdata:0000C264                                         ; Window::`vector deleting destructor'(uint)
.rdata:0000C268                 dd offset ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; Window::init(HINSTANCE__ *,HWND__ *)
.rdata:0000C26C                 dd offset __purecall
.rdata:0000C270                 dd offset ?display@Window@@UBEX_N@Z ; Window::display(bool)
.rdata:0000C274                 dd offset ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z ; Window::reSizeTo(tagRECT &)
.rdata:0000C278                 dd offset ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z ; Window::reSizeToWH(tagRECT &)
.rdata:0000C27C                 dd offset ?redraw@Window@@UBEX_N@Z ; Window::redraw(bool)
.rdata:0000C280                 dd offset ?getClientRect@Window@@UBEXAAUtagRECT@@@Z ; Window::getClientRect(tagRECT &)
.rdata:0000C284                 dd offset ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z ; Window::getWindowRect(tagRECT &)
.rdata:0000C288                 dd offset ?getWidth@Window@@UBEHXZ ; Window::getWidth(void)
.rdata:0000C28C                 dd offset ?getHeight@Window@@UBEHXZ ; Window::getHeight(void)
.rdata:0000C290                 dd offset ?isVisible@Window@@UBE_NXZ ; Window::isVisible(void)
.rdata:0000C290 _rdata          ends
.rdata:0000C290
.rdata:0000C294 ; ===========================================================================
.rdata:0000C294
.rdata:0000C294 ; Segment type: Pure data
.rdata:0000C294 ; Segment permissions: Read
.rdata:0000C294 _rdata          segment dword public 'DATA' use32
.rdata:0000C294                 assume cs:_rdata
.rdata:0000C294                 ;org 0C294h
.rdata:0000C294 ; COMDAT (pick largest)
.rdata:0000C294                 dd offset ??_R4Notepad_plus_Window@@6B@ ; const Notepad_plus_Window::`RTTI Complete Object Locator'
.rdata:0000C298                 public ??_7Notepad_plus_Window@@6B@
.rdata:0000C298 ; const Notepad_plus_Window::`vftable'
.rdata:0000C298 ??_7Notepad_plus_Window@@6B@ dd offset ??_ENotepad_plus_Window@@UAEPAXI@Z
.rdata:0000C298                                         ; DATA XREF: Notepad_plus_Window::Notepad_plus_Window(void)+38o
.rdata:0000C298                                         ; Notepad_plus_Window::`vector deleting destructor'(uint)
.rdata:0000C29C                 dd offset ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; Window::init(HINSTANCE__ *,HWND__ *)
.rdata:0000C2A0                 dd offset ?destroy@Notepad_plus_Window@@UAEXXZ ; Notepad_plus_Window::destroy(void)
.rdata:0000C2A4                 dd offset ?display@Window@@UBEX_N@Z ; Window::display(bool)
.rdata:0000C2A8                 dd offset ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z ; Window::reSizeTo(tagRECT &)
.rdata:0000C2AC                 dd offset ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z ; Window::reSizeToWH(tagRECT &)
.rdata:0000C2B0                 dd offset ?redraw@Window@@UBEX_N@Z ; Window::redraw(bool)
.rdata:0000C2B4                 dd offset ?getClientRect@Window@@UBEXAAUtagRECT@@@Z ; Window::getClientRect(tagRECT &)
.rdata:0000C2B8                 dd offset ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z ; Window::getWindowRect(tagRECT &)
.rdata:0000C2BC                 dd offset ?getWidth@Window@@UBEHXZ ; Window::getWidth(void)
.rdata:0000C2C0                 dd offset ?getHeight@Window@@UBEHXZ ; Window::getHeight(void)
.rdata:0000C2C4                 dd offset ?isVisible@Window@@UBE_NXZ ; Window::isVisible(void)
.rdata:0000C2C4 _rdata          ends
.rdata:0000C2C4
.data$r:0000C2C8 ; ===========================================================================
.data$r:0000C2C8
.data$r:0000C2C8 ; Segment type: Pure data
.data$r:0000C2C8 ; Segment permissions: Read/Write
.data$r:0000C2C8 _data$r         segment dword public 'DATA' use32
.data$r:0000C2C8                 assume cs:_data$r
.data$r:0000C2C8                 ;org 0C2C8h
.data$r:0000C2C8 ; COMDAT (pick any)
.data$r:0000C2C8                 public ??_R0H@8
.data$r:0000C2C8 ; int `RTTI Type Descriptor'
.data$r:0000C2C8 ??_R0H@8        dd offset ??_7type_info@@6B@
.data$r:0000C2C8                                         ; DATA XREF: .xdata$x:0000AF4Co
.data$r:0000C2C8                                         ; const type_info::`vftable'
.data$r:0000C2CC                 align 10h
.data$r:0000C2D0                 db  2Eh ; .
.data$r:0000C2D1                 db  48h ; H
.data$r:0000C2D2                 db    0
.data$r:0000C2D3                 align 4
.data$r:0000C2D3 _data$r         ends
.data$r:0000C2D3
.data$r:0000C2D4 ; ===========================================================================
.data$r:0000C2D4
.data$r:0000C2D4 ; Segment type: Pure data
.data$r:0000C2D4 ; Segment permissions: Read/Write
.data$r:0000C2D4 _data$r         segment dword public 'DATA' use32
.data$r:0000C2D4                 assume cs:_data$r
.data$r:0000C2D4                 ;org 0C2D4h
.data$r:0000C2D4 ; COMDAT (pick any)
.data$r:0000C2D4                 public ??_R0?AVWin32Exception@@@8
.data$r:0000C2D4 ; class Win32Exception `RTTI Type Descriptor'
.data$r:0000C2D4 ??_R0?AVWin32Exception@@@8 dd offset ??_7type_info@@6B@
.data$r:0000C2D4                                         ; DATA XREF: .xdata$x:0000AF6Co
.data$r:0000C2D4                                         ; const type_info::`vftable'
.data$r:0000C2D8                 db    0
.data$r:0000C2D9                 db    0
.data$r:0000C2DA                 db    0
.data$r:0000C2DB                 db    0
.data$r:0000C2DC                 db  2Eh ; .
.data$r:0000C2DD                 db  3Fh ; ?
.data$r:0000C2DE                 db  41h ; A
.data$r:0000C2DF                 db  56h ; V
.data$r:0000C2E0                 db  57h ; W
.data$r:0000C2E1                 db  69h ; i
.data$r:0000C2E2                 db  6Eh ; n
.data$r:0000C2E3                 db  33h ; 3
.data$r:0000C2E4                 db  32h ; 2
.data$r:0000C2E5                 db  45h ; E
.data$r:0000C2E6                 db  78h ; x
.data$r:0000C2E7                 db  63h ; c
.data$r:0000C2E8                 db  65h ; e
.data$r:0000C2E9                 db  70h ; p
.data$r:0000C2EA                 db  74h ; t
.data$r:0000C2EB                 db  69h ; i
.data$r:0000C2EC                 db  6Fh ; o
.data$r:0000C2ED                 db  6Eh ; n
.data$r:0000C2EE                 db  40h ; @
.data$r:0000C2EF                 db  40h ; @
.data$r:0000C2F0                 db    0
.data$r:0000C2F1                 align 4
.data$r:0000C2F1 _data$r         ends
.data$r:0000C2F1
.rdata:0000C2F4 ; ===========================================================================
.rdata:0000C2F4
.rdata:0000C2F4 ; Segment type: Pure data
.rdata:0000C2F4 ; Segment permissions: Read
.rdata:0000C2F4 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000C2F4 _rdata          segment para public 'DATA' use32
.rdata:0000C2F4                 assume cs:_rdata
.rdata:0000C2F4                 ;org 0C2F4h
.rdata:0000C2F4 ; COMDAT (pick any)
.rdata:0000C2F4                 public ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000C2F4 ; wchar_t `string'
.rdata:0000C2F4 ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000C2F4                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+5Do
.rdata:0000C2F4                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+8Ao ...
.rdata:0000C2F4                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000C2F4                 unicode 0, <clude\xstring>,0
.rdata:0000C382                 align 4
.rdata:0000C382 _rdata          ends
.rdata:0000C382
.bss:0000C384 ; ===========================================================================
.bss:0000C384
.bss:0000C384 ; Segment type: Uninitialized
.bss:0000C384 ; Segment permissions: Read/Write
.bss:0000C384 _bss            segment dword public 'BSS' use32
.bss:0000C384                 assume cs:_bss
.bss:0000C384                 ;org 0C384h
.bss:0000C384 ; COMDAT (pick any)
.bss:0000C384                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000C384                 public ?id@?$numpunct@D@std@@2V0locale@2@A
.bss:0000C384 ; std::locale::id std::numpunct<char>::id
.bss:0000C384 ?id@?$numpunct@D@std@@2V0locale@2@A db    ? ;
.bss:0000C384                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)+5o
.bss:0000C385                 db    ? ;
.bss:0000C386                 db    ? ;
.bss:0000C387                 db    ? ;
.bss:0000C387 _bss            ends
.bss:0000C387
.bss:0000C388 ; ===========================================================================
.bss:0000C388
.bss:0000C388 ; Segment type: Uninitialized
.bss:0000C388 ; Segment permissions: Read/Write
.bss:0000C388 _bss            segment dword public 'BSS' use32
.bss:0000C388                 assume cs:_bss
.bss:0000C388                 ;org 0C388h
.bss:0000C388 ; COMDAT (pick any)
.bss:0000C388                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000C388                 public ?id@?$numpunct@_W@std@@2V0locale@2@A
.bss:0000C388 ; std::locale::id std::numpunct<wchar_t>::id
.bss:0000C388 ?id@?$numpunct@_W@std@@2V0locale@2@A db    ? ;
.bss:0000C388                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)+5o
.bss:0000C389                 db    ? ;
.bss:0000C38A                 db    ? ;
.bss:0000C38B                 db    ? ;
.bss:0000C38B _bss            ends
.bss:0000C38B
.rdata:0000C38C ; ===========================================================================
.rdata:0000C38C
.rdata:0000C38C ; Segment type: Pure data
.rdata:0000C38C ; Segment permissions: Read
.rdata:0000C38C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000C38C _rdata          segment para public 'DATA' use32
.rdata:0000C38C                 assume cs:_rdata
.rdata:0000C38C                 ;org 0C38Ch
.rdata:0000C38C ; COMDAT (pick any)
.rdata:0000C38C                 public ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000C38C ; wchar_t `string'
.rdata:0000C38C ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000C38C                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+=(int)+4Bo
.rdata:0000C38C                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+=(int)+7Bo ...
.rdata:0000C38C                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000C38C                 unicode 0, <clude\vector>,0
.rdata:0000C38C _rdata          ends
.rdata:0000C38C
.rdata:0000C418 ; ===========================================================================
.rdata:0000C418
.rdata:0000C418 ; Segment type: Pure data
.rdata:0000C418 ; Segment permissions: Read
.rdata:0000C418 _rdata          segment dword public 'DATA' use32
.rdata:0000C418                 assume cs:_rdata
.rdata:0000C418                 ;org 0C418h
.rdata:0000C418 ; COMDAT (pick any)
.rdata:0000C418                 public ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
.rdata:0000C418 ; `string'
.rdata:0000C418 ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ db 'Standard C++ Libraries Out of Range',0
.rdata:0000C418                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+6Fo
.rdata:0000C418                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+=(int)+5Do
.rdata:0000C418 _rdata          ends
.rdata:0000C418
.rdata:0000C43C ; ===========================================================================
.rdata:0000C43C
.rdata:0000C43C ; Segment type: Pure data
.rdata:0000C43C ; Segment permissions: Read
.rdata:0000C43C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000C43C _rdata          segment para public 'DATA' use32
.rdata:0000C43C                 assume cs:_rdata
.rdata:0000C43C                 ;org 0C43Ch
.rdata:0000C43C ; COMDAT (pick any)
.rdata:0000C43C                 public ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
.rdata:0000C43C ; `string'
.rdata:0000C43C ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@:
.rdata:0000C43C                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void):loc_6CF8o
.rdata:0000C43C                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+=(int):loc_6FD2o
.rdata:0000C43C                 unicode 0, <"Standard C++ Libraries Out of Range" && 0>,0
.rdata:0000C492                 align 4
.rdata:0000C492 _rdata          ends
.rdata:0000C492
.rdata:0000C494 ; ===========================================================================
.rdata:0000C494
.rdata:0000C494 ; Segment type: Pure data
.rdata:0000C494 ; Segment permissions: Read
.rdata:0000C494 _rdata          segment dword public 'DATA' use32
.rdata:0000C494                 assume cs:_rdata
.rdata:0000C494                 ;org 0C494h
.rdata:0000C494 ; COMDAT (pick any)
.rdata:0000C494                 public ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
.rdata:0000C494 ; `string'
.rdata:0000C494 ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@:
.rdata:0000C494                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+81o
.rdata:0000C494                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+=(int)+6Fo ...
.rdata:0000C494                 unicode 0, <%s>,0
.rdata:0000C49A                 align 4
.rdata:0000C49A _rdata          ends
.rdata:0000C49A
.rdata:0000C49C ; ===========================================================================
.rdata:0000C49C
.rdata:0000C49C ; Segment type: Pure data
.rdata:0000C49C ; Segment permissions: Read
.rdata:0000C49C _rdata          segment dword public 'DATA' use32
.rdata:0000C49C                 assume cs:_rdata
.rdata:0000C49C                 ;org 0C49Ch
.rdata:0000C49C ; COMDAT (pick any)
.rdata:0000C49C                 public ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
.rdata:0000C49C ; `string'
.rdata:0000C49C ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@:
.rdata:0000C49C                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+ADo
.rdata:0000C49C                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+=(int)+A1o
.rdata:0000C49C                 unicode 0, <"out of range">,0
.rdata:0000C4BA                 align 4
.rdata:0000C4BA _rdata          ends
.rdata:0000C4BA
.rdata:0000C4BC ; ===========================================================================
.rdata:0000C4BC
.rdata:0000C4BC ; Segment type: Pure data
.rdata:0000C4BC ; Segment permissions: Read
.rdata:0000C4BC ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000C4BC _rdata          segment para public 'DATA' use32
.rdata:0000C4BC                 assume cs:_rdata
.rdata:0000C4BC                 ;org 0C4BCh
.rdata:0000C4BC ; COMDAT (pick any)
.rdata:0000C4BC                 public ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
.rdata:0000C4BC ; wchar_t `string'
.rdata:0000C4BC ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@:
.rdata:0000C4BC                                         ; DATA XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>)+63o
.rdata:0000C4BC                 unicode 0, <vector erase iterator outside range>,0
.rdata:0000C4BC _rdata          ends
.rdata:0000C4BC
.rdata:0000C504 ; ===========================================================================
.rdata:0000C504
.rdata:0000C504 ; Segment type: Pure data
.rdata:0000C504 ; Segment permissions: Read
.rdata:0000C504 _rdata          segment dword public 'DATA' use32
.rdata:0000C504                 assume cs:_rdata
.rdata:0000C504                 ;org 0C504h
.rdata:0000C504 ; COMDAT (pick any)
.rdata:0000C504                 public ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
.rdata:0000C504 ; `string'
.rdata:0000C504 ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ db 'Standard C++ Libraries Invalid Argument',0
.rdata:0000C504                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+41o
.rdata:0000C504 _rdata          ends
.rdata:0000C504
.rdata:0000C52C ; ===========================================================================
.rdata:0000C52C
.rdata:0000C52C ; Segment type: Pure data
.rdata:0000C52C ; Segment permissions: Read
.rdata:0000C52C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000C52C _rdata          segment para public 'DATA' use32
.rdata:0000C52C                 assume cs:_rdata
.rdata:0000C52C                 ;org 0C52Ch
.rdata:0000C52C ; COMDAT (pick any)
.rdata:0000C52C                 public ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
.rdata:0000C52C ; `string'
.rdata:0000C52C ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@:
.rdata:0000C52C                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &):loc_7592o
.rdata:0000C52C                 unicode 0, <"Standard C++ Libraries Invalid Argument" && 0>,0
.rdata:0000C58A                 align 4
.rdata:0000C58A _rdata          ends
.rdata:0000C58A
.rdata:0000C58C ; ===========================================================================
.rdata:0000C58C
.rdata:0000C58C ; Segment type: Pure data
.rdata:0000C58C ; Segment permissions: Read
.rdata:0000C58C _rdata          segment dword public 'DATA' use32
.rdata:0000C58C                 assume cs:_rdata
.rdata:0000C58C                 ;org 0C58Ch
.rdata:0000C58C ; COMDAT (pick any)
.rdata:0000C58C                 public ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
.rdata:0000C58C ; `string'
.rdata:0000C58C ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@:
.rdata:0000C58C                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+85o
.rdata:0000C58C                 unicode 0, <"invalid argument">,0
.rdata:0000C5B2                 align 4
.rdata:0000C5B2 _rdata          ends
.rdata:0000C5B2
.rdata:0000C5B4 ; ===========================================================================
.rdata:0000C5B4
.rdata:0000C5B4 ; Segment type: Pure data
.rdata:0000C5B4 ; Segment permissions: Read
.rdata:0000C5B4 _rdata          segment dword public 'DATA' use32
.rdata:0000C5B4                 assume cs:_rdata
.rdata:0000C5B4                 ;org 0C5B4h
.rdata:0000C5B4 ; COMDAT (pick any)
.rdata:0000C5B4                 public ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
.rdata:0000C5B4 ; char `string'[]
.rdata:0000C5B4 ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@ db 'invalid vector<T> subscript',0
.rdata:0000C5B4                                         ; DATA XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Xran(void)+7o
.rdata:0000C5B4 _rdata          ends
.rdata:0000C5B4
.rdata:0000C5D0 ; ===========================================================================
.rdata:0000C5D0
.rdata:0000C5D0 ; Segment type: Pure data
.rdata:0000C5D0 ; Segment permissions: Read
.rdata:0000C5D0 _rdata          segment dword public 'DATA' use32
.rdata:0000C5D0                 assume cs:_rdata
.rdata:0000C5D0                 ;org 0C5D0h
.rdata:0000C5D0 ; COMDAT (pick any)
.rdata:0000C5D0                 public ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
.rdata:0000C5D0 ; char `string'[]
.rdata:0000C5D0 ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ db 'string too long',0
.rdata:0000C5D0                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+7o
.rdata:0000C5D0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+7o
.rdata:0000C5D0 _rdata          ends
.rdata:0000C5D0
.rdata:0000C5E0 ; ===========================================================================
.rdata:0000C5E0
.rdata:0000C5E0 ; Segment type: Pure data
.rdata:0000C5E0 ; Segment permissions: Read
.rdata:0000C5E0 _rdata          segment dword public 'DATA' use32
.rdata:0000C5E0                 assume cs:_rdata
.rdata:0000C5E0                 ;org 0C5E0h
.rdata:0000C5E0 ; COMDAT (pick any)
.rdata:0000C5E0                 public ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
.rdata:0000C5E0 ; char `string'[]
.rdata:0000C5E0 ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ db 'invalid string position',0
.rdata:0000C5E0                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+7o
.rdata:0000C5E0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+7o
.rdata:0000C5E0 _rdata          ends
.rdata:0000C5E0
.rdata:0000C5F8 ; ===========================================================================
.rdata:0000C5F8
.rdata:0000C5F8 ; Segment type: Pure data
.rdata:0000C5F8 ; Segment permissions: Read
.rdata:0000C5F8 _rdata          segment dword public 'DATA' use32
.rdata:0000C5F8                 assume cs:_rdata
.rdata:0000C5F8                 ;org 0C5F8h
.rdata:0000C5F8 ; COMDAT (pick any)
.rdata:0000C5F8                 public ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
.rdata:0000C5F8 ; char `string'[]
.rdata:0000C5F8 ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ db 'vector<T> too long',0
.rdata:0000C5F8                                         ; DATA XREF: std::vector<wchar_t const *,std::allocator<wchar_t const *>>::_Xlen(void)+7o
.rdata:0000C60B                 align 4
.rdata:0000C60B _rdata          ends
.rdata:0000C60B
.rdata:0000C60C ; ===========================================================================
.rdata:0000C60C
.rdata:0000C60C ; Segment type: Pure data
.rdata:0000C60C ; Segment permissions: Read
.rdata:0000C60C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000C60C _rdata          segment para public 'DATA' use32
.rdata:0000C60C                 assume cs:_rdata
.rdata:0000C60C                 ;org 0C60Ch
.rdata:0000C60C ; COMDAT (pick any)
.rdata:0000C60C                 public ??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
.rdata:0000C60C ; wchar_t `string'
.rdata:0000C60C ??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@:
.rdata:0000C60C                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+=(int)+50o
.rdata:0000C60C                 unicode 0, <vector iterator + offset out of range>,0
.rdata:0000C60C _rdata          ends
.rdata:0000C60C
.rdata:0000C658 ; ===========================================================================
.rdata:0000C658
.rdata:0000C658 ; Segment type: Pure data
.rdata:0000C658 ; Segment permissions: Read
.rdata:0000C658 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000C658 _rdata          segment para public 'DATA' use32
.rdata:0000C658                 assume cs:_rdata
.rdata:0000C658                 ;org 0C658h
.rdata:0000C658 ; COMDAT (pick any)
.rdata:0000C658                 public ??_C@_1NO@PBIHDMEP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
.rdata:0000C658 ; `string'
.rdata:0000C658 ??_C@_1NO@PBIHDMEP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@:
.rdata:0000C658                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+=(int)+9Co
.rdata:0000C658                 unicode 0, <std::_Vector_const_iterator>
.rdata:0000C658                 dw 3Ch
.rdata:0000C658                 unicode 0, <class std::_Vector_val>
.rdata:0000C658                 dw 3Ch
.rdata:0000C658                 unicode 0, <struct std::_Simple_types>
.rdata:0000C658                 dw 3Ch
.rdata:0000C658                 unicode 0, <wchar_t const *>
.rdata:0000C658                 dw 3Eh
.rdata:0000C658                 unicode 0, < >
.rdata:0000C658                 dw 3Eh
.rdata:0000C658                 unicode 0, < >
.rdata:0000C658                 dw 3Eh
.rdata:0000C658                 unicode 0, <::operator +=>,0
.rdata:0000C736                 align 4
.rdata:0000C736 _rdata          ends
.rdata:0000C736
.rdata:0000C738 ; ===========================================================================
.rdata:0000C738
.rdata:0000C738 ; Segment type: Pure data
.rdata:0000C738 ; Segment permissions: Read
.rdata:0000C738 _rdata          segment dword public 'DATA' use32
.rdata:0000C738                 assume cs:_rdata
.rdata:0000C738                 ;org 0C738h
.rdata:0000C738 ; COMDAT (pick any)
.rdata:0000C738                 public ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
.rdata:0000C738 ; wchar_t `string'
.rdata:0000C738 ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@:
.rdata:0000C738                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+34o
.rdata:0000C738                 unicode 0, <string iterators incompatible>,0
.rdata:0000C738 _rdata          ends
.rdata:0000C738
.rdata:0000C774 ; ===========================================================================
.rdata:0000C774
.rdata:0000C774 ; Segment type: Pure data
.rdata:0000C774 ; Segment permissions: Read
.rdata:0000C774 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000C774 _rdata          segment para public 'DATA' use32
.rdata:0000C774                 assume cs:_rdata
.rdata:0000C774                 ;org 0C774h
.rdata:0000C774 ; COMDAT (pick any)
.rdata:0000C774                 public ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
.rdata:0000C774 ; `string'
.rdata:0000C774 ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@:
.rdata:0000C774                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+80o
.rdata:0000C774                 unicode 0, <std::_String_const_iterator>
.rdata:0000C774                 dw 3Ch
.rdata:0000C774                 unicode 0, <class std::_String_val>
.rdata:0000C774                 dw 3Ch
.rdata:0000C774                 unicode 0, <struct std::_Simple_types>
.rdata:0000C774                 dw 3Ch
.rdata:0000C774                 unicode 0, <wchar_t>
.rdata:0000C774                 dw 3Eh
.rdata:0000C774                 unicode 0, < >
.rdata:0000C774                 dw 3Eh
.rdata:0000C774                 unicode 0, < >
.rdata:0000C774                 dw 3Eh
.rdata:0000C774                 unicode 0, <::_Compat>,0
.rdata:0000C83A                 align 4
.rdata:0000C83A _rdata          ends
.rdata:0000C83A
.rdata:0000C83C ; ===========================================================================
.rdata:0000C83C
.rdata:0000C83C ; Segment type: Pure data
.rdata:0000C83C ; Segment permissions: Read
.rdata:0000C83C _rdata          segment dword public 'DATA' use32
.rdata:0000C83C                 assume cs:_rdata
.rdata:0000C83C                 ;org 0C83Ch
.rdata:0000C83C ; COMDAT (pick any)
.rdata:0000C83C                 public ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
.rdata:0000C83C ; wchar_t `string'
.rdata:0000C83C ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@:
.rdata:0000C83C                                         ; DATA XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+11o
.rdata:0000C83C                                         ; std::_Debug_pointer<wchar_t const *>(wchar_t const * *,wchar_t const *,uint)+11o ...
.rdata:0000C83C                 unicode 0, <invalid null pointer>,0
.rdata:0000C866                 align 4
.rdata:0000C866 _rdata          ends
.rdata:0000C866
.rdata:0000C868 ; ===========================================================================
.rdata:0000C868
.rdata:0000C868 ; Segment type: Pure data
.rdata:0000C868 ; Segment permissions: Read
.rdata:0000C868 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000C868 _rdata          segment para public 'DATA' use32
.rdata:0000C868                 assume cs:_rdata
.rdata:0000C868                 ;org 0C868h
.rdata:0000C868 ; COMDAT (pick any)
.rdata:0000C868                 public ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
.rdata:0000C868 ; wchar_t `string'
.rdata:0000C868 ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@:
.rdata:0000C868                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+62o
.rdata:0000C868                 unicode 0, <string iterator not dereferencable>,0
.rdata:0000C8AE                 align 10h
.rdata:0000C8AE _rdata          ends
.rdata:0000C8AE
.rdata:0000C8B0 ; ===========================================================================
.rdata:0000C8B0
.rdata:0000C8B0 ; Segment type: Pure data
.rdata:0000C8B0 ; Segment permissions: Read
.rdata:0000C8B0 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000C8B0 _rdata          segment para public 'DATA' use32
.rdata:0000C8B0                 assume cs:_rdata
.rdata:0000C8B0                 ;org 0C8B0h
.rdata:0000C8B0 ; COMDAT (pick any)
.rdata:0000C8B0                 public ??_C@_1MM@BFHGHMKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
.rdata:0000C8B0 ; `string'
.rdata:0000C8B0 ??_C@_1MM@BFHGHMKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@:
.rdata:0000C8B0                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+A8o
.rdata:0000C8B0                 unicode 0, <std::_String_const_iterator>
.rdata:0000C8B0                 dw 3Ch
.rdata:0000C8B0                 unicode 0, <class std::_String_val>
.rdata:0000C8B0                 dw 3Ch
.rdata:0000C8B0                 unicode 0, <struct std::_Simple_types>
.rdata:0000C8B0                 dw 3Ch
.rdata:0000C8B0                 unicode 0, <wchar_t>
.rdata:0000C8B0                 dw 3Eh
.rdata:0000C8B0                 unicode 0, < >
.rdata:0000C8B0                 dw 3Eh
.rdata:0000C8B0                 unicode 0, < >
.rdata:0000C8B0                 dw 3Eh
.rdata:0000C8B0                 unicode 0, <::operator *>,0
.rdata:0000C8B0 _rdata          ends
.rdata:0000C8B0
.rdata:0000C97C ; ===========================================================================
.rdata:0000C97C
.rdata:0000C97C ; Segment type: Pure data
.rdata:0000C97C ; Segment permissions: Read
.rdata:0000C97C _rdata          segment dword public 'DATA' use32
.rdata:0000C97C                 assume cs:_rdata
.rdata:0000C97C                 ;org 0C97Ch
.rdata:0000C97C ; COMDAT (pick any)
.rdata:0000C97C                 public ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:0000C97C ; wchar_t `string'
.rdata:0000C97C ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:0000C97C                                         ; DATA XREF: std::_Debug_range2<wchar_t const * *>(wchar_t const * *,wchar_t const * *,wchar_t const *,uint,std::random_access_iterator_tag)+43o
.rdata:0000C97C                 unicode 0, <invalid iterator range>,0
.rdata:0000C9AA                 align 4
.rdata:0000C9AA _rdata          ends
.rdata:0000C9AA
.rdata:0000C9AC ; ===========================================================================
.rdata:0000C9AC
.rdata:0000C9AC ; Segment type: Pure data
.rdata:0000C9AC ; Segment permissions: Read
.rdata:0000C9AC ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000C9AC _rdata          segment para public 'DATA' use32
.rdata:0000C9AC                 assume cs:_rdata
.rdata:0000C9AC                 ;org 0C9ACh
.rdata:0000C9AC ; COMDAT (pick any)
.rdata:0000C9AC                 public ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000C9AC ; wchar_t `string'
.rdata:0000C9AC ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000C9AC                                         ; DATA XREF: std::_Uninit_move<wchar_t const *,wchar_t const *,wchar_t const *>(wchar_t const * *,wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>> &,wchar_t const * *,std::_Scalar_ptr_iterator_tag)+9o
.rdata:0000C9AC                                         ; std::_Uninit_move<wchar_t const *,wchar_t const *,wchar_t const *>(wchar_t const * *,wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>> &,wchar_t const * *,std::_Scalar_ptr_iterator_tag)+23o
.rdata:0000C9AC                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000C9AC                 unicode 0, <clude\xmemory>,0
.rdata:0000CA3A                 align 4
.rdata:0000CA3A _rdata          ends
.rdata:0000CA3A
.rdata$r:0000CA3C ; ===========================================================================
.rdata$r:0000CA3C
.rdata$r:0000CA3C ; Segment type: Pure data
.rdata$r:0000CA3C ; Segment permissions: Read
.rdata$r:0000CA3C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CA3C                 assume cs:_rdata$r
.rdata$r:0000CA3C                 ;org 0CA3Ch
.rdata$r:0000CA3C ; COMDAT (pick any)
.rdata$r:0000CA3C                 public ??_R4error_category@std@@6B@
.rdata$r:0000CA3C ; const std::error_category::`RTTI Complete Object Locator'
.rdata$r:0000CA3C ??_R4error_category@std@@6B@ db    0    ; DATA XREF: .rdata:0000C190o
.rdata$r:0000CA3D                 db    0
.rdata$r:0000CA3E                 db    0
.rdata$r:0000CA3F                 db    0
.rdata$r:0000CA40                 db    0
.rdata$r:0000CA41                 db    0
.rdata$r:0000CA42                 db    0
.rdata$r:0000CA43                 db    0
.rdata$r:0000CA44                 db    0
.rdata$r:0000CA45                 db    0
.rdata$r:0000CA46                 db    0
.rdata$r:0000CA47                 db    0
.rdata$r:0000CA48                 dd offset ??_R0?AVerror_category@std@@@8 ; std::error_category `RTTI Type Descriptor'
.rdata$r:0000CA4C                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000CA4C _rdata$r        ends
.rdata$r:0000CA4C
.data$r:0000CA50 ; ===========================================================================
.data$r:0000CA50
.data$r:0000CA50 ; Segment type: Pure data
.data$r:0000CA50 ; Segment permissions: Read/Write
.data$r:0000CA50 _data$r         segment dword public 'DATA' use32
.data$r:0000CA50                 assume cs:_data$r
.data$r:0000CA50                 ;org 0CA50h
.data$r:0000CA50 ; COMDAT (pick any)
.data$r:0000CA50                 public ??_R0?AVerror_category@std@@@8
.data$r:0000CA50 ; class std::error_category `RTTI Type Descriptor'
.data$r:0000CA50 ??_R0?AVerror_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000CA50                                         ; DATA XREF: .rdata$r:0000CA48o
.data$r:0000CA50                                         ; .rdata$r:std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000CA50                                         ; const type_info::`vftable'
.data$r:0000CA54                 align 8
.data$r:0000CA58 a_?averror_cate db '.?AVerror_category@std@@',0
.data$r:0000CA71                 align 4
.data$r:0000CA71 _data$r         ends
.data$r:0000CA71
.rdata$r:0000CA74 ; ===========================================================================
.rdata$r:0000CA74
.rdata$r:0000CA74 ; Segment type: Pure data
.rdata$r:0000CA74 ; Segment permissions: Read
.rdata$r:0000CA74 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CA74                 assume cs:_rdata$r
.rdata$r:0000CA74                 ;org 0CA74h
.rdata$r:0000CA74 ; COMDAT (pick any)
.rdata$r:0000CA74                 public ??_R3error_category@std@@8
.rdata$r:0000CA74 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000CA74 ??_R3error_category@std@@8 db    0      ; DATA XREF: .rdata$r:0000CA4Co
.rdata$r:0000CA74                                         ; .rdata$r:0000CAA4o
.rdata$r:0000CA75                 db    0
.rdata$r:0000CA76                 db    0
.rdata$r:0000CA77                 db    0
.rdata$r:0000CA78                 db    0
.rdata$r:0000CA79                 db    0
.rdata$r:0000CA7A                 db    0
.rdata$r:0000CA7B                 db    0
.rdata$r:0000CA7C                 db    1
.rdata$r:0000CA7D                 db    0
.rdata$r:0000CA7E                 db    0
.rdata$r:0000CA7F                 db    0
.rdata$r:0000CA80                 dd offset ??_R2error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
.rdata$r:0000CA80 _rdata$r        ends
.rdata$r:0000CA80
.rdata$r:0000CA84 ; ===========================================================================
.rdata$r:0000CA84
.rdata$r:0000CA84 ; Segment type: Pure data
.rdata$r:0000CA84 ; Segment permissions: Read
.rdata$r:0000CA84 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CA84                 assume cs:_rdata$r
.rdata$r:0000CA84                 ;org 0CA84h
.rdata$r:0000CA84 ; COMDAT (pick any)
.rdata$r:0000CA84                 public ??_R2error_category@std@@8
.rdata$r:0000CA84 ; std::error_category::`RTTI Base Class Array'
.rdata$r:0000CA84 ??_R2error_category@std@@8 dd offset ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:0000CA84                                         ; DATA XREF: .rdata$r:0000CA80o
.rdata$r:0000CA84                                         ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000CA88                 db    0
.rdata$r:0000CA89                 align 4
.rdata$r:0000CA89 _rdata$r        ends
.rdata$r:0000CA89
.rdata$r:0000CA8C ; ===========================================================================
.rdata$r:0000CA8C
.rdata$r:0000CA8C ; Segment type: Pure data
.rdata$r:0000CA8C ; Segment permissions: Read
.rdata$r:0000CA8C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CA8C                 assume cs:_rdata$r
.rdata$r:0000CA8C                 ;org 0CA8Ch
.rdata$r:0000CA8C ; COMDAT (pick any)
.rdata$r:0000CA8C                 public ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:0000CA8C ; std::error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000CA8C ??_R1A@?0A@EA@error_category@std@@8 dd offset ??_R0?AVerror_category@std@@@8
.rdata$r:0000CA8C                                         ; DATA XREF: .rdata$r:std::error_category::`RTTI Base Class Array'o
.rdata$r:0000CA8C                                         ; .rdata$r:0000CAFCo ...
.rdata$r:0000CA8C                                         ; std::error_category `RTTI Type Descriptor'
.rdata$r:0000CA90                 db    0
.rdata$r:0000CA91                 db    0
.rdata$r:0000CA92                 db    0
.rdata$r:0000CA93                 db    0
.rdata$r:0000CA94                 db    0
.rdata$r:0000CA95                 db    0
.rdata$r:0000CA96                 db    0
.rdata$r:0000CA97                 db    0
.rdata$r:0000CA98                 db 0FFh
.rdata$r:0000CA99                 db 0FFh
.rdata$r:0000CA9A                 db 0FFh
.rdata$r:0000CA9B                 db 0FFh
.rdata$r:0000CA9C                 db    0
.rdata$r:0000CA9D                 db    0
.rdata$r:0000CA9E                 db    0
.rdata$r:0000CA9F                 db    0
.rdata$r:0000CAA0                 db  40h ; @
.rdata$r:0000CAA1                 db    0
.rdata$r:0000CAA2                 db    0
.rdata$r:0000CAA3                 db    0
.rdata$r:0000CAA4                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000CAA4 _rdata$r        ends
.rdata$r:0000CAA4
.rdata$r:0000CAA8 ; ===========================================================================
.rdata$r:0000CAA8
.rdata$r:0000CAA8 ; Segment type: Pure data
.rdata$r:0000CAA8 ; Segment permissions: Read
.rdata$r:0000CAA8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CAA8                 assume cs:_rdata$r
.rdata$r:0000CAA8                 ;org 0CAA8h
.rdata$r:0000CAA8 ; COMDAT (pick any)
.rdata$r:0000CAA8                 public ??_R4_Generic_error_category@std@@6B@
.rdata$r:0000CAA8 ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata$r:0000CAA8 ??_R4_Generic_error_category@std@@6B@ db    0
.rdata$r:0000CAA8                                         ; DATA XREF: .rdata:0000C1ACo
.rdata$r:0000CAA9                 db    0
.rdata$r:0000CAAA                 db    0
.rdata$r:0000CAAB                 db    0
.rdata$r:0000CAAC                 db    0
.rdata$r:0000CAAD                 db    0
.rdata$r:0000CAAE                 db    0
.rdata$r:0000CAAF                 db    0
.rdata$r:0000CAB0                 db    0
.rdata$r:0000CAB1                 db    0
.rdata$r:0000CAB2                 db    0
.rdata$r:0000CAB3                 db    0
.rdata$r:0000CAB4                 dd offset ??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:0000CAB8                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000CAB8 _rdata$r        ends
.rdata$r:0000CAB8
.data$r:0000CABC ; ===========================================================================
.data$r:0000CABC
.data$r:0000CABC ; Segment type: Pure data
.data$r:0000CABC ; Segment permissions: Read/Write
.data$r:0000CABC _data$r         segment dword public 'DATA' use32
.data$r:0000CABC                 assume cs:_data$r
.data$r:0000CABC                 ;org 0CABCh
.data$r:0000CABC ; COMDAT (pick any)
.data$r:0000CABC                 public ??_R0?AV_Generic_error_category@std@@@8
.data$r:0000CABC ; class std::_Generic_error_category `RTTI Type Descriptor'
.data$r:0000CABC ??_R0?AV_Generic_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000CABC                                         ; DATA XREF: .rdata$r:0000CAB4o
.data$r:0000CABC                                         ; .rdata$r:std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000CABC                                         ; const type_info::`vftable'
.data$r:0000CAC0                 db    0
.data$r:0000CAC1                 db    0
.data$r:0000CAC2                 db    0
.data$r:0000CAC3                 db    0
.data$r:0000CAC4                 db  2Eh ; .
.data$r:0000CAC5                 db  3Fh ; ?
.data$r:0000CAC6                 db  41h ; A
.data$r:0000CAC7                 db  56h ; V
.data$r:0000CAC8                 db  5Fh ; _
.data$r:0000CAC9                 db  47h ; G
.data$r:0000CACA                 db  65h ; e
.data$r:0000CACB                 db  6Eh ; n
.data$r:0000CACC                 db  65h ; e
.data$r:0000CACD                 db  72h ; r
.data$r:0000CACE                 db  69h ; i
.data$r:0000CACF                 db  63h ; c
.data$r:0000CAD0                 db  5Fh ; _
.data$r:0000CAD1                 db  65h ; e
.data$r:0000CAD2                 db  72h ; r
.data$r:0000CAD3                 db  72h ; r
.data$r:0000CAD4                 db  6Fh ; o
.data$r:0000CAD5                 db  72h ; r
.data$r:0000CAD6                 db  5Fh ; _
.data$r:0000CAD7                 db  63h ; c
.data$r:0000CAD8                 db  61h ; a
.data$r:0000CAD9                 db  74h ; t
.data$r:0000CADA                 db  65h ; e
.data$r:0000CADB                 db  67h ; g
.data$r:0000CADC                 db  6Fh ; o
.data$r:0000CADD                 db  72h ; r
.data$r:0000CADE                 db  79h ; y
.data$r:0000CADF                 db  40h ; @
.data$r:0000CAE0                 db  73h ; s
.data$r:0000CAE1                 db  74h ; t
.data$r:0000CAE2                 db  64h ; d
.data$r:0000CAE3                 db  40h ; @
.data$r:0000CAE4                 db  40h ; @
.data$r:0000CAE5                 db    0
.data$r:0000CAE6                 align 4
.data$r:0000CAE6 _data$r         ends
.data$r:0000CAE6
.rdata$r:0000CAE8 ; ===========================================================================
.rdata$r:0000CAE8
.rdata$r:0000CAE8 ; Segment type: Pure data
.rdata$r:0000CAE8 ; Segment permissions: Read
.rdata$r:0000CAE8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CAE8                 assume cs:_rdata$r
.rdata$r:0000CAE8                 ;org 0CAE8h
.rdata$r:0000CAE8 ; COMDAT (pick any)
.rdata$r:0000CAE8                 public ??_R3_Generic_error_category@std@@8
.rdata$r:0000CAE8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000CAE8 ??_R3_Generic_error_category@std@@8 db    0
.rdata$r:0000CAE8                                         ; DATA XREF: .rdata$r:0000CAB8o
.rdata$r:0000CAE8                                         ; .rdata$r:0000CB1Co
.rdata$r:0000CAE9                 db    0
.rdata$r:0000CAEA                 db    0
.rdata$r:0000CAEB                 db    0
.rdata$r:0000CAEC                 db    0
.rdata$r:0000CAED                 db    0
.rdata$r:0000CAEE                 db    0
.rdata$r:0000CAEF                 db    0
.rdata$r:0000CAF0                 db    2
.rdata$r:0000CAF1                 db    0
.rdata$r:0000CAF2                 db    0
.rdata$r:0000CAF3                 db    0
.rdata$r:0000CAF4                 dd offset ??_R2_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:0000CAF4 _rdata$r        ends
.rdata$r:0000CAF4
.rdata$r:0000CAF8 ; ===========================================================================
.rdata$r:0000CAF8
.rdata$r:0000CAF8 ; Segment type: Pure data
.rdata$r:0000CAF8 ; Segment permissions: Read
.rdata$r:0000CAF8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CAF8                 assume cs:_rdata$r
.rdata$r:0000CAF8                 ;org 0CAF8h
.rdata$r:0000CAF8 ; COMDAT (pick any)
.rdata$r:0000CAF8                 public ??_R2_Generic_error_category@std@@8
.rdata$r:0000CAF8 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:0000CAF8 ??_R2_Generic_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:0000CAF8                                         ; DATA XREF: .rdata$r:0000CAF4o
.rdata$r:0000CAF8                                         ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000CAFC                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000CB00                 db    0
.rdata$r:0000CB01                 align 4
.rdata$r:0000CB01 _rdata$r        ends
.rdata$r:0000CB01
.rdata$r:0000CB04 ; ===========================================================================
.rdata$r:0000CB04
.rdata$r:0000CB04 ; Segment type: Pure data
.rdata$r:0000CB04 ; Segment permissions: Read
.rdata$r:0000CB04 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CB04                 assume cs:_rdata$r
.rdata$r:0000CB04                 ;org 0CB04h
.rdata$r:0000CB04 ; COMDAT (pick any)
.rdata$r:0000CB04                 public ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:0000CB04 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000CB04 ??_R1A@?0A@EA@_Generic_error_category@std@@8 dd offset ??_R0?AV_Generic_error_category@std@@@8
.rdata$r:0000CB04                                         ; DATA XREF: .rdata$r:std::_Generic_error_category::`RTTI Base Class Array'o
.rdata$r:0000CB04                                         ; .rdata$r:0000CB74o ...
.rdata$r:0000CB04                                         ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:0000CB08                 db    1
.rdata$r:0000CB09                 db    0
.rdata$r:0000CB0A                 db    0
.rdata$r:0000CB0B                 db    0
.rdata$r:0000CB0C                 db    0
.rdata$r:0000CB0D                 db    0
.rdata$r:0000CB0E                 db    0
.rdata$r:0000CB0F                 db    0
.rdata$r:0000CB10                 db 0FFh
.rdata$r:0000CB11                 db 0FFh
.rdata$r:0000CB12                 db 0FFh
.rdata$r:0000CB13                 db 0FFh
.rdata$r:0000CB14                 db    0
.rdata$r:0000CB15                 db    0
.rdata$r:0000CB16                 db    0
.rdata$r:0000CB17                 db    0
.rdata$r:0000CB18                 db  40h ; @
.rdata$r:0000CB19                 db    0
.rdata$r:0000CB1A                 db    0
.rdata$r:0000CB1B                 db    0
.rdata$r:0000CB1C                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000CB1C _rdata$r        ends
.rdata$r:0000CB1C
.rdata$r:0000CB20 ; ===========================================================================
.rdata$r:0000CB20
.rdata$r:0000CB20 ; Segment type: Pure data
.rdata$r:0000CB20 ; Segment permissions: Read
.rdata$r:0000CB20 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CB20                 assume cs:_rdata$r
.rdata$r:0000CB20                 ;org 0CB20h
.rdata$r:0000CB20 ; COMDAT (pick any)
.rdata$r:0000CB20                 public ??_R4_Iostream_error_category@std@@6B@
.rdata$r:0000CB20 ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata$r:0000CB20 ??_R4_Iostream_error_category@std@@6B@ db    0
.rdata$r:0000CB20                                         ; DATA XREF: .rdata:0000C1E0o
.rdata$r:0000CB21                 db    0
.rdata$r:0000CB22                 db    0
.rdata$r:0000CB23                 db    0
.rdata$r:0000CB24                 db    0
.rdata$r:0000CB25                 db    0
.rdata$r:0000CB26                 db    0
.rdata$r:0000CB27                 db    0
.rdata$r:0000CB28                 db    0
.rdata$r:0000CB29                 db    0
.rdata$r:0000CB2A                 db    0
.rdata$r:0000CB2B                 db    0
.rdata$r:0000CB2C                 dd offset ??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:0000CB30                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000CB30 _rdata$r        ends
.rdata$r:0000CB30
.data$r:0000CB34 ; ===========================================================================
.data$r:0000CB34
.data$r:0000CB34 ; Segment type: Pure data
.data$r:0000CB34 ; Segment permissions: Read/Write
.data$r:0000CB34 _data$r         segment dword public 'DATA' use32
.data$r:0000CB34                 assume cs:_data$r
.data$r:0000CB34                 ;org 0CB34h
.data$r:0000CB34 ; COMDAT (pick any)
.data$r:0000CB34                 public ??_R0?AV_Iostream_error_category@std@@@8
.data$r:0000CB34 ; class std::_Iostream_error_category `RTTI Type Descriptor'
.data$r:0000CB34 ??_R0?AV_Iostream_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000CB34                                         ; DATA XREF: .rdata$r:0000CB2Co
.data$r:0000CB34                                         ; .rdata$r:std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000CB34                                         ; const type_info::`vftable'
.data$r:0000CB38                 db    0
.data$r:0000CB39                 db    0
.data$r:0000CB3A                 db    0
.data$r:0000CB3B                 db    0
.data$r:0000CB3C                 db  2Eh ; .
.data$r:0000CB3D                 db  3Fh ; ?
.data$r:0000CB3E                 db  41h ; A
.data$r:0000CB3F                 db  56h ; V
.data$r:0000CB40                 db  5Fh ; _
.data$r:0000CB41                 db  49h ; I
.data$r:0000CB42                 db  6Fh ; o
.data$r:0000CB43                 db  73h ; s
.data$r:0000CB44                 db  74h ; t
.data$r:0000CB45                 db  72h ; r
.data$r:0000CB46                 db  65h ; e
.data$r:0000CB47                 db  61h ; a
.data$r:0000CB48                 db  6Dh ; m
.data$r:0000CB49                 db  5Fh ; _
.data$r:0000CB4A                 db  65h ; e
.data$r:0000CB4B                 db  72h ; r
.data$r:0000CB4C                 db  72h ; r
.data$r:0000CB4D                 db  6Fh ; o
.data$r:0000CB4E                 db  72h ; r
.data$r:0000CB4F                 db  5Fh ; _
.data$r:0000CB50                 db  63h ; c
.data$r:0000CB51                 db  61h ; a
.data$r:0000CB52                 db  74h ; t
.data$r:0000CB53                 db  65h ; e
.data$r:0000CB54                 db  67h ; g
.data$r:0000CB55                 db  6Fh ; o
.data$r:0000CB56                 db  72h ; r
.data$r:0000CB57                 db  79h ; y
.data$r:0000CB58                 db  40h ; @
.data$r:0000CB59                 db  73h ; s
.data$r:0000CB5A                 db  74h ; t
.data$r:0000CB5B                 db  64h ; d
.data$r:0000CB5C                 db  40h ; @
.data$r:0000CB5D                 db  40h ; @
.data$r:0000CB5E                 db    0
.data$r:0000CB5F                 align 10h
.data$r:0000CB5F _data$r         ends
.data$r:0000CB5F
.rdata$r:0000CB60 ; ===========================================================================
.rdata$r:0000CB60
.rdata$r:0000CB60 ; Segment type: Pure data
.rdata$r:0000CB60 ; Segment permissions: Read
.rdata$r:0000CB60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CB60                 assume cs:_rdata$r
.rdata$r:0000CB60                 ;org 0CB60h
.rdata$r:0000CB60 ; COMDAT (pick any)
.rdata$r:0000CB60                 public ??_R3_Iostream_error_category@std@@8
.rdata$r:0000CB60 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000CB60 ??_R3_Iostream_error_category@std@@8 db    0
.rdata$r:0000CB60                                         ; DATA XREF: .rdata$r:0000CB30o
.rdata$r:0000CB60                                         ; .rdata$r:0000CB98o
.rdata$r:0000CB61                 db    0
.rdata$r:0000CB62                 db    0
.rdata$r:0000CB63                 db    0
.rdata$r:0000CB64                 db    0
.rdata$r:0000CB65                 db    0
.rdata$r:0000CB66                 db    0
.rdata$r:0000CB67                 db    0
.rdata$r:0000CB68                 db    3
.rdata$r:0000CB69                 db    0
.rdata$r:0000CB6A                 db    0
.rdata$r:0000CB6B                 db    0
.rdata$r:0000CB6C                 dd offset ??_R2_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:0000CB6C _rdata$r        ends
.rdata$r:0000CB6C
.rdata$r:0000CB70 ; ===========================================================================
.rdata$r:0000CB70
.rdata$r:0000CB70 ; Segment type: Pure data
.rdata$r:0000CB70 ; Segment permissions: Read
.rdata$r:0000CB70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CB70                 assume cs:_rdata$r
.rdata$r:0000CB70                 ;org 0CB70h
.rdata$r:0000CB70 ; COMDAT (pick any)
.rdata$r:0000CB70                 public ??_R2_Iostream_error_category@std@@8
.rdata$r:0000CB70 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:0000CB70 ??_R2_Iostream_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:0000CB70                                         ; DATA XREF: .rdata$r:0000CB6Co
.rdata$r:0000CB70                                         ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000CB74                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000CB78                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000CB7C                 db    0
.rdata$r:0000CB7D                 align 10h
.rdata$r:0000CB7D _rdata$r        ends
.rdata$r:0000CB7D
.rdata$r:0000CB80 ; ===========================================================================
.rdata$r:0000CB80
.rdata$r:0000CB80 ; Segment type: Pure data
.rdata$r:0000CB80 ; Segment permissions: Read
.rdata$r:0000CB80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CB80                 assume cs:_rdata$r
.rdata$r:0000CB80                 ;org 0CB80h
.rdata$r:0000CB80 ; COMDAT (pick any)
.rdata$r:0000CB80                 public ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:0000CB80 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000CB80 ??_R1A@?0A@EA@_Iostream_error_category@std@@8 dd offset ??_R0?AV_Iostream_error_category@std@@@8
.rdata$r:0000CB80                                         ; DATA XREF: .rdata$r:std::_Iostream_error_category::`RTTI Base Class Array'o
.rdata$r:0000CB80                                         ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:0000CB84                 db    2
.rdata$r:0000CB85                 db    0
.rdata$r:0000CB86                 db    0
.rdata$r:0000CB87                 db    0
.rdata$r:0000CB88                 db    0
.rdata$r:0000CB89                 db    0
.rdata$r:0000CB8A                 db    0
.rdata$r:0000CB8B                 db    0
.rdata$r:0000CB8C                 db 0FFh
.rdata$r:0000CB8D                 db 0FFh
.rdata$r:0000CB8E                 db 0FFh
.rdata$r:0000CB8F                 db 0FFh
.rdata$r:0000CB90                 db    0
.rdata$r:0000CB91                 db    0
.rdata$r:0000CB92                 db    0
.rdata$r:0000CB93                 db    0
.rdata$r:0000CB94                 db  40h ; @
.rdata$r:0000CB95                 db    0
.rdata$r:0000CB96                 db    0
.rdata$r:0000CB97                 db    0
.rdata$r:0000CB98                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000CB98 _rdata$r        ends
.rdata$r:0000CB98
.rdata$r:0000CB9C ; ===========================================================================
.rdata$r:0000CB9C
.rdata$r:0000CB9C ; Segment type: Pure data
.rdata$r:0000CB9C ; Segment permissions: Read
.rdata$r:0000CB9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CB9C                 assume cs:_rdata$r
.rdata$r:0000CB9C                 ;org 0CB9Ch
.rdata$r:0000CB9C ; COMDAT (pick any)
.rdata$r:0000CB9C                 public ??_R4_System_error_category@std@@6B@
.rdata$r:0000CB9C ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata$r:0000CB9C ??_R4_System_error_category@std@@6B@ db    0 ; DATA XREF: .rdata:0000C220o
.rdata$r:0000CB9D                 db    0
.rdata$r:0000CB9E                 db    0
.rdata$r:0000CB9F                 db    0
.rdata$r:0000CBA0                 db    0
.rdata$r:0000CBA1                 db    0
.rdata$r:0000CBA2                 db    0
.rdata$r:0000CBA3                 db    0
.rdata$r:0000CBA4                 db    0
.rdata$r:0000CBA5                 db    0
.rdata$r:0000CBA6                 db    0
.rdata$r:0000CBA7                 db    0
.rdata$r:0000CBA8                 dd offset ??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:0000CBAC                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000CBAC _rdata$r        ends
.rdata$r:0000CBAC
.data$r:0000CBB0 ; ===========================================================================
.data$r:0000CBB0
.data$r:0000CBB0 ; Segment type: Pure data
.data$r:0000CBB0 ; Segment permissions: Read/Write
.data$r:0000CBB0 _data$r         segment dword public 'DATA' use32
.data$r:0000CBB0                 assume cs:_data$r
.data$r:0000CBB0                 ;org 0CBB0h
.data$r:0000CBB0 ; COMDAT (pick any)
.data$r:0000CBB0                 public ??_R0?AV_System_error_category@std@@@8
.data$r:0000CBB0 ; class std::_System_error_category `RTTI Type Descriptor'
.data$r:0000CBB0 ??_R0?AV_System_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000CBB0                                         ; DATA XREF: .rdata$r:0000CBA8o
.data$r:0000CBB0                                         ; .rdata$r:std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000CBB0                                         ; const type_info::`vftable'
.data$r:0000CBB4                 align 8
.data$r:0000CBB8 a_?av_system_er db '.?AV_System_error_category@std@@',0
.data$r:0000CBD9                 align 4
.data$r:0000CBD9 _data$r         ends
.data$r:0000CBD9
.rdata$r:0000CBDC ; ===========================================================================
.rdata$r:0000CBDC
.rdata$r:0000CBDC ; Segment type: Pure data
.rdata$r:0000CBDC ; Segment permissions: Read
.rdata$r:0000CBDC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CBDC                 assume cs:_rdata$r
.rdata$r:0000CBDC                 ;org 0CBDCh
.rdata$r:0000CBDC ; COMDAT (pick any)
.rdata$r:0000CBDC                 public ??_R3_System_error_category@std@@8
.rdata$r:0000CBDC ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000CBDC ??_R3_System_error_category@std@@8 db    0 ; DATA XREF: .rdata$r:0000CBACo
.rdata$r:0000CBDC                                         ; .rdata$r:0000CC14o
.rdata$r:0000CBDD                 db    0
.rdata$r:0000CBDE                 db    0
.rdata$r:0000CBDF                 db    0
.rdata$r:0000CBE0                 db    0
.rdata$r:0000CBE1                 db    0
.rdata$r:0000CBE2                 db    0
.rdata$r:0000CBE3                 db    0
.rdata$r:0000CBE4                 db    3
.rdata$r:0000CBE5                 db    0
.rdata$r:0000CBE6                 db    0
.rdata$r:0000CBE7                 db    0
.rdata$r:0000CBE8                 dd offset ??_R2_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:0000CBE8 _rdata$r        ends
.rdata$r:0000CBE8
.rdata$r:0000CBEC ; ===========================================================================
.rdata$r:0000CBEC
.rdata$r:0000CBEC ; Segment type: Pure data
.rdata$r:0000CBEC ; Segment permissions: Read
.rdata$r:0000CBEC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CBEC                 assume cs:_rdata$r
.rdata$r:0000CBEC                 ;org 0CBECh
.rdata$r:0000CBEC ; COMDAT (pick any)
.rdata$r:0000CBEC                 public ??_R2_System_error_category@std@@8
.rdata$r:0000CBEC ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:0000CBEC ??_R2_System_error_category@std@@8 dd offset ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:0000CBEC                                         ; DATA XREF: .rdata$r:0000CBE8o
.rdata$r:0000CBEC                                         ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000CBF0                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000CBF4                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000CBF8                 db    0
.rdata$r:0000CBF9                 align 4
.rdata$r:0000CBF9 _rdata$r        ends
.rdata$r:0000CBF9
.rdata$r:0000CBFC ; ===========================================================================
.rdata$r:0000CBFC
.rdata$r:0000CBFC ; Segment type: Pure data
.rdata$r:0000CBFC ; Segment permissions: Read
.rdata$r:0000CBFC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CBFC                 assume cs:_rdata$r
.rdata$r:0000CBFC                 ;org 0CBFCh
.rdata$r:0000CBFC ; COMDAT (pick any)
.rdata$r:0000CBFC                 public ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:0000CBFC ; std::_System_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000CBFC ??_R1A@?0A@EA@_System_error_category@std@@8 dd offset ??_R0?AV_System_error_category@std@@@8
.rdata$r:0000CBFC                                         ; DATA XREF: .rdata$r:std::_System_error_category::`RTTI Base Class Array'o
.rdata$r:0000CBFC                                         ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:0000CC00                 db    2
.rdata$r:0000CC01                 db    0
.rdata$r:0000CC02                 db    0
.rdata$r:0000CC03                 db    0
.rdata$r:0000CC04                 db    0
.rdata$r:0000CC05                 db    0
.rdata$r:0000CC06                 db    0
.rdata$r:0000CC07                 db    0
.rdata$r:0000CC08                 db 0FFh
.rdata$r:0000CC09                 db 0FFh
.rdata$r:0000CC0A                 db 0FFh
.rdata$r:0000CC0B                 db 0FFh
.rdata$r:0000CC0C                 db    0
.rdata$r:0000CC0D                 db    0
.rdata$r:0000CC0E                 db    0
.rdata$r:0000CC0F                 db    0
.rdata$r:0000CC10                 db  40h ; @
.rdata$r:0000CC11                 db    0
.rdata$r:0000CC12                 db    0
.rdata$r:0000CC13                 db    0
.rdata$r:0000CC14                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000CC14 _rdata$r        ends
.rdata$r:0000CC14
.rdata$r:0000CC18 ; ===========================================================================
.rdata$r:0000CC18
.rdata$r:0000CC18 ; Segment type: Pure data
.rdata$r:0000CC18 ; Segment permissions: Read
.rdata$r:0000CC18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CC18                 assume cs:_rdata$r
.rdata$r:0000CC18                 ;org 0CC18h
.rdata$r:0000CC18 ; COMDAT (pick any)
.rdata$r:0000CC18                 public ??_R4Window@@6B@
.rdata$r:0000CC18 ; const Window::`RTTI Complete Object Locator'
.rdata$r:0000CC18 ??_R4Window@@6B@ db    0                ; DATA XREF: .rdata:0000C260o
.rdata$r:0000CC19                 db    0
.rdata$r:0000CC1A                 db    0
.rdata$r:0000CC1B                 db    0
.rdata$r:0000CC1C                 db    0
.rdata$r:0000CC1D                 db    0
.rdata$r:0000CC1E                 db    0
.rdata$r:0000CC1F                 db    0
.rdata$r:0000CC20                 db    0
.rdata$r:0000CC21                 db    0
.rdata$r:0000CC22                 db    0
.rdata$r:0000CC23                 db    0
.rdata$r:0000CC24                 dd offset ??_R0?AVWindow@@@8 ; Window `RTTI Type Descriptor'
.rdata$r:0000CC28                 dd offset ??_R3Window@@8 ; Window::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000CC28 _rdata$r        ends
.rdata$r:0000CC28
.data$r:0000CC2C ; ===========================================================================
.data$r:0000CC2C
.data$r:0000CC2C ; Segment type: Pure data
.data$r:0000CC2C ; Segment permissions: Read/Write
.data$r:0000CC2C _data$r         segment dword public 'DATA' use32
.data$r:0000CC2C                 assume cs:_data$r
.data$r:0000CC2C                 ;org 0CC2Ch
.data$r:0000CC2C ; COMDAT (pick any)
.data$r:0000CC2C                 public ??_R0?AVWindow@@@8
.data$r:0000CC2C ; class Window `RTTI Type Descriptor'
.data$r:0000CC2C ??_R0?AVWindow@@@8 dd offset ??_7type_info@@6B@
.data$r:0000CC2C                                         ; DATA XREF: .rdata$r:0000CC24o
.data$r:0000CC2C                                         ; .rdata$r:Window::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000CC2C                                         ; const type_info::`vftable'
.data$r:0000CC30                 db    0
.data$r:0000CC31                 db    0
.data$r:0000CC32                 db    0
.data$r:0000CC33                 db    0
.data$r:0000CC34                 db  2Eh ; .
.data$r:0000CC35                 db  3Fh ; ?
.data$r:0000CC36                 db  41h ; A
.data$r:0000CC37                 db  56h ; V
.data$r:0000CC38                 db  57h ; W
.data$r:0000CC39                 db  69h ; i
.data$r:0000CC3A                 db  6Eh ; n
.data$r:0000CC3B                 db  64h ; d
.data$r:0000CC3C                 db  6Fh ; o
.data$r:0000CC3D                 db  77h ; w
.data$r:0000CC3E                 db  40h ; @
.data$r:0000CC3F                 db  40h ; @
.data$r:0000CC40                 db    0
.data$r:0000CC41                 align 4
.data$r:0000CC41 _data$r         ends
.data$r:0000CC41
.rdata$r:0000CC44 ; ===========================================================================
.rdata$r:0000CC44
.rdata$r:0000CC44 ; Segment type: Pure data
.rdata$r:0000CC44 ; Segment permissions: Read
.rdata$r:0000CC44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CC44                 assume cs:_rdata$r
.rdata$r:0000CC44                 ;org 0CC44h
.rdata$r:0000CC44 ; COMDAT (pick any)
.rdata$r:0000CC44                 public ??_R3Window@@8
.rdata$r:0000CC44 ; Window::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000CC44 ??_R3Window@@8  db    0                 ; DATA XREF: .rdata$r:0000CC28o
.rdata$r:0000CC44                                         ; .rdata$r:0000CC74o
.rdata$r:0000CC45                 db    0
.rdata$r:0000CC46                 db    0
.rdata$r:0000CC47                 db    0
.rdata$r:0000CC48                 db    0
.rdata$r:0000CC49                 db    0
.rdata$r:0000CC4A                 db    0
.rdata$r:0000CC4B                 db    0
.rdata$r:0000CC4C                 db    1
.rdata$r:0000CC4D                 db    0
.rdata$r:0000CC4E                 db    0
.rdata$r:0000CC4F                 db    0
.rdata$r:0000CC50                 dd offset ??_R2Window@@8 ; Window::`RTTI Base Class Array'
.rdata$r:0000CC50 _rdata$r        ends
.rdata$r:0000CC50
.rdata$r:0000CC54 ; ===========================================================================
.rdata$r:0000CC54
.rdata$r:0000CC54 ; Segment type: Pure data
.rdata$r:0000CC54 ; Segment permissions: Read
.rdata$r:0000CC54 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CC54                 assume cs:_rdata$r
.rdata$r:0000CC54                 ;org 0CC54h
.rdata$r:0000CC54 ; COMDAT (pick any)
.rdata$r:0000CC54                 public ??_R2Window@@8
.rdata$r:0000CC54 ; Window::`RTTI Base Class Array'
.rdata$r:0000CC54 ??_R2Window@@8  dd offset ??_R1A@?0A@EA@Window@@8
.rdata$r:0000CC54                                         ; DATA XREF: .rdata$r:0000CC50o
.rdata$r:0000CC54                                         ; Window::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000CC58                 db    0
.rdata$r:0000CC59                 align 4
.rdata$r:0000CC59 _rdata$r        ends
.rdata$r:0000CC59
.rdata$r:0000CC5C ; ===========================================================================
.rdata$r:0000CC5C
.rdata$r:0000CC5C ; Segment type: Pure data
.rdata$r:0000CC5C ; Segment permissions: Read
.rdata$r:0000CC5C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CC5C                 assume cs:_rdata$r
.rdata$r:0000CC5C                 ;org 0CC5Ch
.rdata$r:0000CC5C ; COMDAT (pick any)
.rdata$r:0000CC5C                 public ??_R1A@?0A@EA@Window@@8
.rdata$r:0000CC5C ; Window::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000CC5C ??_R1A@?0A@EA@Window@@8 dd offset ??_R0?AVWindow@@@8
.rdata$r:0000CC5C                                         ; DATA XREF: .rdata$r:Window::`RTTI Base Class Array'o
.rdata$r:0000CC5C                                         ; .rdata$r:0000CCC4o
.rdata$r:0000CC5C                                         ; Window `RTTI Type Descriptor'
.rdata$r:0000CC60                 db    0
.rdata$r:0000CC61                 db    0
.rdata$r:0000CC62                 db    0
.rdata$r:0000CC63                 db    0
.rdata$r:0000CC64                 db    0
.rdata$r:0000CC65                 db    0
.rdata$r:0000CC66                 db    0
.rdata$r:0000CC67                 db    0
.rdata$r:0000CC68                 db 0FFh
.rdata$r:0000CC69                 db 0FFh
.rdata$r:0000CC6A                 db 0FFh
.rdata$r:0000CC6B                 db 0FFh
.rdata$r:0000CC6C                 db    0
.rdata$r:0000CC6D                 db    0
.rdata$r:0000CC6E                 db    0
.rdata$r:0000CC6F                 db    0
.rdata$r:0000CC70                 db  40h ; @
.rdata$r:0000CC71                 db    0
.rdata$r:0000CC72                 db    0
.rdata$r:0000CC73                 db    0
.rdata$r:0000CC74                 dd offset ??_R3Window@@8 ; Window::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000CC74 _rdata$r        ends
.rdata$r:0000CC74
.rdata$r:0000CC78 ; ===========================================================================
.rdata$r:0000CC78
.rdata$r:0000CC78 ; Segment type: Pure data
.rdata$r:0000CC78 ; Segment permissions: Read
.rdata$r:0000CC78 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CC78                 assume cs:_rdata$r
.rdata$r:0000CC78                 ;org 0CC78h
.rdata$r:0000CC78 ; COMDAT (pick any)
.rdata$r:0000CC78                 public ??_R4Notepad_plus_Window@@6B@
.rdata$r:0000CC78 ; const Notepad_plus_Window::`RTTI Complete Object Locator'
.rdata$r:0000CC78 ??_R4Notepad_plus_Window@@6B@ db    0   ; DATA XREF: .rdata:0000C294o
.rdata$r:0000CC79                 db    0
.rdata$r:0000CC7A                 db    0
.rdata$r:0000CC7B                 db    0
.rdata$r:0000CC7C                 db    0
.rdata$r:0000CC7D                 db    0
.rdata$r:0000CC7E                 db    0
.rdata$r:0000CC7F                 db    0
.rdata$r:0000CC80                 db    0
.rdata$r:0000CC81                 db    0
.rdata$r:0000CC82                 db    0
.rdata$r:0000CC83                 db    0
.rdata$r:0000CC84                 dd offset ??_R0?AVNotepad_plus_Window@@@8 ; Notepad_plus_Window `RTTI Type Descriptor'
.rdata$r:0000CC88                 dd offset ??_R3Notepad_plus_Window@@8 ; Notepad_plus_Window::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000CC88 _rdata$r        ends
.rdata$r:0000CC88
.data$r:0000CC8C ; ===========================================================================
.data$r:0000CC8C
.data$r:0000CC8C ; Segment type: Pure data
.data$r:0000CC8C ; Segment permissions: Read/Write
.data$r:0000CC8C _data$r         segment dword public 'DATA' use32
.data$r:0000CC8C                 assume cs:_data$r
.data$r:0000CC8C                 ;org 0CC8Ch
.data$r:0000CC8C ; COMDAT (pick any)
.data$r:0000CC8C                 public ??_R0?AVNotepad_plus_Window@@@8
.data$r:0000CC8C ; class Notepad_plus_Window `RTTI Type Descriptor'
.data$r:0000CC8C ??_R0?AVNotepad_plus_Window@@@8 dd offset ??_7type_info@@6B@
.data$r:0000CC8C                                         ; DATA XREF: .rdata$r:0000CC84o
.data$r:0000CC8C                                         ; .rdata$r:Notepad_plus_Window::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000CC8C                                         ; const type_info::`vftable'
.data$r:0000CC90                 db    0
.data$r:0000CC91                 db    0
.data$r:0000CC92                 db    0
.data$r:0000CC93                 db    0
.data$r:0000CC94                 db  2Eh ; .
.data$r:0000CC95                 db  3Fh ; ?
.data$r:0000CC96                 db  41h ; A
.data$r:0000CC97                 db  56h ; V
.data$r:0000CC98                 db  4Eh ; N
.data$r:0000CC99                 db  6Fh ; o
.data$r:0000CC9A                 db  74h ; t
.data$r:0000CC9B                 db  65h ; e
.data$r:0000CC9C                 db  70h ; p
.data$r:0000CC9D                 db  61h ; a
.data$r:0000CC9E                 db  64h ; d
.data$r:0000CC9F                 db  5Fh ; _
.data$r:0000CCA0                 db  70h ; p
.data$r:0000CCA1                 db  6Ch ; l
.data$r:0000CCA2                 db  75h ; u
.data$r:0000CCA3                 db  73h ; s
.data$r:0000CCA4                 db  5Fh ; _
.data$r:0000CCA5                 db  57h ; W
.data$r:0000CCA6                 db  69h ; i
.data$r:0000CCA7                 db  6Eh ; n
.data$r:0000CCA8                 db  64h ; d
.data$r:0000CCA9                 db  6Fh ; o
.data$r:0000CCAA                 db  77h ; w
.data$r:0000CCAB                 db  40h ; @
.data$r:0000CCAC                 db  40h ; @
.data$r:0000CCAD                 db    0
.data$r:0000CCAE                 align 10h
.data$r:0000CCAE _data$r         ends
.data$r:0000CCAE
.rdata$r:0000CCB0 ; ===========================================================================
.rdata$r:0000CCB0
.rdata$r:0000CCB0 ; Segment type: Pure data
.rdata$r:0000CCB0 ; Segment permissions: Read
.rdata$r:0000CCB0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CCB0                 assume cs:_rdata$r
.rdata$r:0000CCB0                 ;org 0CCB0h
.rdata$r:0000CCB0 ; COMDAT (pick any)
.rdata$r:0000CCB0                 public ??_R3Notepad_plus_Window@@8
.rdata$r:0000CCB0 ; Notepad_plus_Window::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000CCB0 ??_R3Notepad_plus_Window@@8 db    0     ; DATA XREF: .rdata$r:0000CC88o
.rdata$r:0000CCB0                                         ; .rdata$r:0000CCE4o
.rdata$r:0000CCB1                 db    0
.rdata$r:0000CCB2                 db    0
.rdata$r:0000CCB3                 db    0
.rdata$r:0000CCB4                 db    0
.rdata$r:0000CCB5                 db    0
.rdata$r:0000CCB6                 db    0
.rdata$r:0000CCB7                 db    0
.rdata$r:0000CCB8                 db    2
.rdata$r:0000CCB9                 db    0
.rdata$r:0000CCBA                 db    0
.rdata$r:0000CCBB                 db    0
.rdata$r:0000CCBC                 dd offset ??_R2Notepad_plus_Window@@8 ; Notepad_plus_Window::`RTTI Base Class Array'
.rdata$r:0000CCBC _rdata$r        ends
.rdata$r:0000CCBC
.rdata$r:0000CCC0 ; ===========================================================================
.rdata$r:0000CCC0
.rdata$r:0000CCC0 ; Segment type: Pure data
.rdata$r:0000CCC0 ; Segment permissions: Read
.rdata$r:0000CCC0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CCC0                 assume cs:_rdata$r
.rdata$r:0000CCC0                 ;org 0CCC0h
.rdata$r:0000CCC0 ; COMDAT (pick any)
.rdata$r:0000CCC0                 public ??_R2Notepad_plus_Window@@8
.rdata$r:0000CCC0 ; Notepad_plus_Window::`RTTI Base Class Array'
.rdata$r:0000CCC0 ??_R2Notepad_plus_Window@@8 dd offset ??_R1A@?0A@EA@Notepad_plus_Window@@8
.rdata$r:0000CCC0                                         ; DATA XREF: .rdata$r:0000CCBCo
.rdata$r:0000CCC0                                         ; Notepad_plus_Window::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000CCC4                 dd offset ??_R1A@?0A@EA@Window@@8 ; Window::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000CCC8                 db    0
.rdata$r:0000CCC9                 align 4
.rdata$r:0000CCC9 _rdata$r        ends
.rdata$r:0000CCC9
.rdata$r:0000CCCC ; ===========================================================================
.rdata$r:0000CCCC
.rdata$r:0000CCCC ; Segment type: Pure data
.rdata$r:0000CCCC ; Segment permissions: Read
.rdata$r:0000CCCC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000CCCC                 assume cs:_rdata$r
.rdata$r:0000CCCC                 ;org 0CCCCh
.rdata$r:0000CCCC ; COMDAT (pick any)
.rdata$r:0000CCCC                 public ??_R1A@?0A@EA@Notepad_plus_Window@@8
.rdata$r:0000CCCC ; Notepad_plus_Window::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000CCCC ??_R1A@?0A@EA@Notepad_plus_Window@@8 dd offset ??_R0?AVNotepad_plus_Window@@@8
.rdata$r:0000CCCC                                         ; DATA XREF: .rdata$r:Notepad_plus_Window::`RTTI Base Class Array'o
.rdata$r:0000CCCC                                         ; Notepad_plus_Window `RTTI Type Descriptor'
.rdata$r:0000CCD0                 db    1
.rdata$r:0000CCD1                 db    0
.rdata$r:0000CCD2                 db    0
.rdata$r:0000CCD3                 db    0
.rdata$r:0000CCD4                 db    0
.rdata$r:0000CCD5                 db    0
.rdata$r:0000CCD6                 db    0
.rdata$r:0000CCD7                 db    0
.rdata$r:0000CCD8                 db 0FFh
.rdata$r:0000CCD9                 db 0FFh
.rdata$r:0000CCDA                 db 0FFh
.rdata$r:0000CCDB                 db 0FFh
.rdata$r:0000CCDC                 db    0
.rdata$r:0000CCDD                 db    0
.rdata$r:0000CCDE                 db    0
.rdata$r:0000CCDF                 db    0
.rdata$r:0000CCE0                 db  40h ; @
.rdata$r:0000CCE1                 db    0
.rdata$r:0000CCE2                 db    0
.rdata$r:0000CCE3                 db    0
.rdata$r:0000CCE4                 dd offset ??_R3Notepad_plus_Window@@8 ; Notepad_plus_Window::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000CCE4 _rdata$r        ends
.rdata$r:0000CCE4
.CRT$XCU:0000CCE8 ; ===========================================================================
.CRT$XCU:0000CCE8
.CRT$XCU:0000CCE8 ; Segment type: Pure data
.CRT$XCU:0000CCE8 ; Segment permissions: Read
.CRT$XCU:0000CCE8 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000CCE8                 assume cs:_CRT$XCU
.CRT$XCU:0000CCE8                 ;org 0CCE8h
.CRT$XCU:0000CCE8 _piecewise_construct$initializer$ dd offset ??__Epiecewise_construct@std@@YAXXZ ; std::`dynamic initializer for 'piecewise_construct''(void)
.CRT$XCU:0000CCEC _allocator_arg$initializer$ dd offset ??__Eallocator_arg@std@@YAXXZ ; std::`dynamic initializer for 'allocator_arg''(void)
.CRT$XCU:0000CCF0 _ignore$initializer$ dd offset ??__Eignore@std@@YAXXZ ; std::`dynamic initializer for 'ignore''(void)
.CRT$XCU:0000CCF4 __Tuple_alloc$initializer$ dd offset ??__E_Tuple_alloc@std@@YAXXZ ; std::`dynamic initializer for '_Tuple_alloc''(void)
.CRT$XCU:0000CCF4 _CRT$XCU        ends
.CRT$XCU:0000CCF4
.CRT$XCU:0000CCF8 ; ===========================================================================
.CRT$XCU:0000CCF8
.CRT$XCU:0000CCF8 ; Segment type: Pure data
.CRT$XCU:0000CCF8 ; Segment permissions: Read
.CRT$XCU:0000CCF8 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000CCF8                 assume cs:_CRT$XCU
.CRT$XCU:0000CCF8                 ;org 0CCF8h
.CRT$XCU:0000CCF8 ; COMDAT (pick associative to section at C244)
.CRT$XCU:0000CCF8 ; public: static void (__cdecl *std::_Error_objects<int>::_Generic_object$initializer$)(void)
.CRT$XCU:0000CCF8 ?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.CRT$XCU:0000CCF8 _CRT$XCU        ends
.CRT$XCU:0000CCF8
.CRT$XCU:0000CCFC ; ===========================================================================
.CRT$XCU:0000CCFC
.CRT$XCU:0000CCFC ; Segment type: Pure data
.CRT$XCU:0000CCFC ; Segment permissions: Read
.CRT$XCU:0000CCFC _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000CCFC                 assume cs:_CRT$XCU
.CRT$XCU:0000CCFC                 ;org 0CCFCh
.CRT$XCU:0000CCFC ; COMDAT (pick associative to section at C248)
.CRT$XCU:0000CCFC ; public: static void (__cdecl *std::_Error_objects<int>::_Iostream_object$initializer$)(void)
.CRT$XCU:0000CCFC ?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.CRT$XCU:0000CCFC _CRT$XCU        ends
.CRT$XCU:0000CCFC
.CRT$XCU:0000CD00 ; ===========================================================================
.CRT$XCU:0000CD00
.CRT$XCU:0000CD00 ; Segment type: Pure data
.CRT$XCU:0000CD00 ; Segment permissions: Read
.CRT$XCU:0000CD00 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000CD00                 assume cs:_CRT$XCU
.CRT$XCU:0000CD00                 ;org 0CD00h
.CRT$XCU:0000CD00 ; COMDAT (pick associative to section at C24C)
.CRT$XCU:0000CD00 ; public: static void (__cdecl *std::_Error_objects<int>::_System_object$initializer$)(void)
.CRT$XCU:0000CD00 ?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.CRT$XCU:0000CD00 _CRT$XCU        ends
.CRT$XCU:0000CD00
.CRT$XCU:0000CD04 ; ===========================================================================
.CRT$XCU:0000CD04
.CRT$XCU:0000CD04 ; Segment type: Pure data
.CRT$XCU:0000CD04 ; Segment permissions: Read
.CRT$XCU:0000CD04 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000CD04                 assume cs:_CRT$XCU
.CRT$XCU:0000CD04                 ;org 0CD04h
.CRT$XCU:0000CD04 ; COMDAT (pick associative to section at C254)
.CRT$XCU:0000CD04 ; public: static void (__cdecl *std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id$initializer$)(void)
.CRT$XCU:0000CD04 ?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)
.CRT$XCU:0000CD04 _CRT$XCU        ends
.CRT$XCU:0000CD04
.CRT$XCU:0000CD08 ; ===========================================================================
.CRT$XCU:0000CD08
.CRT$XCU:0000CD08 ; Segment type: Pure data
.CRT$XCU:0000CD08 ; Segment permissions: Read
.CRT$XCU:0000CD08 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000CD08                 assume cs:_CRT$XCU
.CRT$XCU:0000CD08                 ;org 0CD08h
.CRT$XCU:0000CD08 ; COMDAT (pick associative to section at C258)
.CRT$XCU:0000CD08 ; public: static void (__cdecl *std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id$initializer$)(void)
.CRT$XCU:0000CD08 ?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)
.CRT$XCU:0000CD08 _CRT$XCU        ends
.CRT$XCU:0000CD08
.CRT$XCU:0000CD0C ; ===========================================================================
.CRT$XCU:0000CD0C
.CRT$XCU:0000CD0C ; Segment type: Pure data
.CRT$XCU:0000CD0C ; Segment permissions: Read
.CRT$XCU:0000CD0C _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000CD0C                 assume cs:_CRT$XCU
.CRT$XCU:0000CD0C                 ;org 0CD0Ch
.CRT$XCU:0000CD0C ; COMDAT (pick associative to section at C384)
.CRT$XCU:0000CD0C ; public: static void (__cdecl *std::numpunct<char>::id$initializer$)(void)
.CRT$XCU:0000CD0C ?id$initializer$@?$numpunct@D@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)
.CRT$XCU:0000CD0C _CRT$XCU        ends
.CRT$XCU:0000CD0C
.CRT$XCU:0000CD10 ; ===========================================================================
.CRT$XCU:0000CD10
.CRT$XCU:0000CD10 ; Segment type: Pure data
.CRT$XCU:0000CD10 ; Segment permissions: Read
.CRT$XCU:0000CD10 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000CD10                 assume cs:_CRT$XCU
.CRT$XCU:0000CD10                 ;org 0CD10h
.CRT$XCU:0000CD10 ; COMDAT (pick associative to section at C388)
.CRT$XCU:0000CD10 ; public: static void (__cdecl *std::numpunct<wchar_t>::id$initializer$)(void)
.CRT$XCU:0000CD10 ?id$initializer$@?$numpunct@_W@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)
.CRT$XCU:0000CD10 _CRT$XCU        ends
.CRT$XCU:0000CD10
UNDEF:0000CD20 ; ===========================================================================
UNDEF:0000CD20
UNDEF:0000CD20 ; Segment type: Externs
UNDEF:0000CD20 ; UNDEF
UNDEF:0000CD20                 extrn __purecall:near   ; DATA XREF: .rdata:0000C198o
UNDEF:0000CD20                                         ; .rdata:0000C19Co ...
UNDEF:0000CD24 ; void *__cdecl operator new(unsigned int)
UNDEF:0000CD24                 extrn ??2@YAPAXI@Z:near ; CODE XREF: std::_Allocate<char>(uint,char *)+1Dp
UNDEF:0000CD24                                         ; std::_Allocate<wchar_t const *>(uint,wchar_t const * *)+23p ...
UNDEF:0000CD28 ; void __cdecl operator delete(void *)
UNDEF:0000CD28                 extrn ??3@YAXPAX@Z:near ; CODE XREF: FileManager::`scalar deleting destructor'(uint)+1Bp
UNDEF:0000CD28                                         ; Notepad_plus_Window::`scalar deleting destructor'(uint)+1Bp ...
UNDEF:0000CD2C ; int __cdecl atexit(void (__cdecl *)())
UNDEF:0000CD2C                 extrn _atexit:near      ; CODE XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+12p
UNDEF:0000CD2C                                         ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+12p ...
UNDEF:0000CD30                 extrn __invalid_parameter:near
UNDEF:0000CD30                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+B2p
UNDEF:0000CD30                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+=(int)+A6p ...
UNDEF:0000CD34 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:0000CD34                 extrn _memcpy:near      ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+1Ep
UNDEF:0000CD34                                         ; _wmemcpy+11p
UNDEF:0000CD38 ; size_t __cdecl strlen(const char *Str)
UNDEF:0000CD38                 extrn _strlen:near      ; CODE XREF: std::char_traits<char>::length(char const *)+1Bp
UNDEF:0000CD3C ; void *__cdecl memmove(void *Dst, const void *Src, size_t Size)
UNDEF:0000CD3C                 extrn _memmove:near     ; CODE XREF: std::_Move<wchar_t const * *,wchar_t const * *>(wchar_t const * *,wchar_t const * *,wchar_t const * *,std::_Scalar_ptr_iterator_tag)+1Fp
UNDEF:0000CD3C                                         ; std::_Uninit_move<wchar_t const *,wchar_t const *,wchar_t const *>(wchar_t const * *,wchar_t const * *,wchar_t const * *,std::_Wrap_alloc<std::allocator<wchar_t const *>> &,wchar_t const * *,std::_Scalar_ptr_iterator_tag)+4Fp ...
UNDEF:0000CD40 ; size_t __cdecl wcslen(const wchar_t *Str)
UNDEF:0000CD40                 extrn _wcslen:near      ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+1Bp
UNDEF:0000CD44 ; LPWSTR __stdcall GetCommandLineW()
UNDEF:0000CD44                 extrn __imp__GetCommandLineW@0:near
UNDEF:0000CD44                                         ; CODE XREF: WinMain(x,x,x,x)+36p
UNDEF:0000CD44                                         ; DATA XREF: WinMain(x,x,x,x)+36r
UNDEF:0000CD48 ; BOOL __stdcall SetCurrentDirectoryW(LPCWSTR lpPathName)
UNDEF:0000CD48                 extrn __imp__SetCurrentDirectoryW@4:near
UNDEF:0000CD48                                         ; CODE XREF: WinMain(x,x,x,x)+517p
UNDEF:0000CD48                                         ; DATA XREF: WinMain(x,x,x,x)+517r
UNDEF:0000CD4C ; DWORD __stdcall GetFullPathNameW(LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart)
UNDEF:0000CD4C                 extrn __imp__GetFullPathNameW@16:near
UNDEF:0000CD4C                                         ; CODE XREF: checkSingleFile(wchar_t const *)+5Cp
UNDEF:0000CD4C                                         ; DATA XREF: checkSingleFile(wchar_t const *)+5Cr
UNDEF:0000CD50 ; DWORD __stdcall GetTempPathW(DWORD nBufferLength, LPWSTR lpBuffer)
UNDEF:0000CD50                 extrn __imp__GetTempPathW@8:near
UNDEF:0000CD50                                         ; CODE XREF: doException(Notepad_plus_Window &)+54p
UNDEF:0000CD50                                         ; DATA XREF: doException(Notepad_plus_Window &)+54r
UNDEF:0000CD54 ; DWORD __stdcall GetLastError()
UNDEF:0000CD54                 extrn __imp__GetLastError@0:near
UNDEF:0000CD54                                         ; CODE XREF: WinMain(x,x,x,x)+93p
UNDEF:0000CD54                                         ; DATA XREF: WinMain(x,x,x,x)+93r
UNDEF:0000CD58 ; void __stdcall SetLastError(DWORD dwErrCode)
UNDEF:0000CD58                 extrn __imp__SetLastError@4:near
UNDEF:0000CD58                                         ; CODE XREF: WinMain(x,x,x,x)+7Ep
UNDEF:0000CD58                                         ; DATA XREF: WinMain(x,x,x,x)+7Er
UNDEF:0000CD5C ; HANDLE __stdcall CreateMutexW(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCWSTR lpName)
UNDEF:0000CD5C                 extrn __imp__CreateMutexW@12:near
UNDEF:0000CD5C                                         ; CODE XREF: WinMain(x,x,x,x)+8Dp
UNDEF:0000CD5C                                         ; DATA XREF: WinMain(x,x,x,x)+8Dr
UNDEF:0000CD60 ; void __stdcall Sleep(DWORD dwMilliseconds)
UNDEF:0000CD60                 extrn __imp__Sleep@4:near ; CODE XREF: WinMain(x,x,x,x)+58Dp
UNDEF:0000CD60                                         ; DATA XREF: WinMain(x,x,x,x)+58Dr
UNDEF:0000CD64 ; HMODULE __stdcall GetModuleHandleW(LPCWSTR lpModuleName)
UNDEF:0000CD64                 extrn __imp__GetModuleHandleW@4:near
UNDEF:0000CD64                                         ; CODE XREF: WinMain(x,x,x,x)+9ADp
UNDEF:0000CD64                                         ; DATA XREF: WinMain(x,x,x,x)+9ADr
UNDEF:0000CD68 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
UNDEF:0000CD68                 extrn __imp__GetProcAddress@8:near
UNDEF:0000CD68                                         ; CODE XREF: WinMain(x,x,x,x)+9ECp
UNDEF:0000CD68                                         ; WinMain(x,x,x,x)+A23p
UNDEF:0000CD68                                         ; DATA XREF: ...
UNDEF:0000CD6C ; int __stdcall lstrcmpW(LPCWSTR lpString1, LPCWSTR lpString2)
UNDEF:0000CD6C                 extrn __imp__lstrcmpW@8:near
UNDEF:0000CD6C                                         ; CODE XREF: isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+61p
UNDEF:0000CD6C                                         ; DATA XREF: isInList(wchar_t const *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+61r
UNDEF:0000CD70 ; LPWSTR __stdcall lstrcatW(LPWSTR lpString1, LPCWSTR lpString2)
UNDEF:0000CD70                 extrn __imp__lstrcatW@8:near
UNDEF:0000CD70                                         ; CODE XREF: __catch$_WinMain@16$0+4Dp
UNDEF:0000CD70                                         ; DATA XREF: __catch$_WinMain@16$0+4Dr
UNDEF:0000CD74 ; int __stdcall lstrlenW(LPCWSTR lpString)
UNDEF:0000CD74                 extrn __imp__lstrlenW@4:near
UNDEF:0000CD74                                         ; CODE XREF: checkSingleFile(wchar_t const *)+1Dp
UNDEF:0000CD74                                         ; parseCommandLine(wchar_t *,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+E1p ...
UNDEF:0000CD78 ; int _wsprintfW(LPWSTR, LPCWSTR, ...)
UNDEF:0000CD78                 extrn __imp__wsprintfW:near
UNDEF:0000CD78                                         ; CODE XREF: __catch$_WinMain@16$0+32p
UNDEF:0000CD78                                         ; __catch$_WinMain@16$2+38p
UNDEF:0000CD78                                         ; DATA XREF: ...
UNDEF:0000CD7C ; BOOL __stdcall GetMessageW(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax)
UNDEF:0000CD7C                 extrn __imp__GetMessageW@16:near
UNDEF:0000CD7C                                         ; CODE XREF: WinMain(x,x,x,x)+A73p
UNDEF:0000CD7C                                         ; DATA XREF: WinMain(x,x,x,x)+A73r
UNDEF:0000CD80 ; BOOL __stdcall TranslateMessage(const MSG *lpMsg)
UNDEF:0000CD80                 extrn __imp__TranslateMessage@4:near
UNDEF:0000CD80                                         ; CODE XREF: WinMain(x,x,x,x)+AF3p
UNDEF:0000CD80                                         ; DATA XREF: WinMain(x,x,x,x)+AF3r
UNDEF:0000CD84 ; LRESULT __stdcall DispatchMessageW(const MSG *lpMsg)
UNDEF:0000CD84                 extrn __imp__DispatchMessageW@4:near
UNDEF:0000CD84                                         ; CODE XREF: WinMain(x,x,x,x)+B00p
UNDEF:0000CD84                                         ; DATA XREF: WinMain(x,x,x,x)+B00r
UNDEF:0000CD88 ; LRESULT __stdcall SendMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:0000CD88                 extrn __imp__SendMessageW@16:near
UNDEF:0000CD88                                         ; CODE XREF: WinMain(x,x,x,x)+6B0p
UNDEF:0000CD88                                         ; WinMain(x,x,x,x)+6CAp
UNDEF:0000CD88                                         ; DATA XREF: ...
UNDEF:0000CD8C ; BOOL __stdcall DestroyWindow(HWND hWnd)
UNDEF:0000CD8C                 extrn __imp__DestroyWindow@4:near
UNDEF:0000CD8C                                         ; CODE XREF: Notepad_plus_Window::destroy(void)+Ep
UNDEF:0000CD8C                                         ; DATA XREF: Notepad_plus_Window::destroy(void)+Er
UNDEF:0000CD90 ; BOOL __stdcall ShowWindow(HWND hWnd, int nCmdShow)
UNDEF:0000CD90                 extrn __imp__ShowWindow@8:near
UNDEF:0000CD90                                         ; CODE XREF: WinMain(x,x,x,x)+626p
UNDEF:0000CD90                                         ; Window::display(bool)+2Cp
UNDEF:0000CD90                                         ; DATA XREF: ...
UNDEF:0000CD94 ; BOOL __stdcall MoveWindow(HWND hWnd, int X, int Y, int nWidth, int nHeight, BOOL bRepaint)
UNDEF:0000CD94                 extrn __imp__MoveWindow@24:near
UNDEF:0000CD94                                         ; CODE XREF: Window::reSizeTo(tagRECT &)+2Bp
UNDEF:0000CD94                                         ; Window::reSizeToWH(tagRECT &)+36p
UNDEF:0000CD94                                         ; DATA XREF: ...
UNDEF:0000CD98 ; BOOL __stdcall IsWindowVisible(HWND hWnd)
UNDEF:0000CD98                 extrn __imp__IsWindowVisible@4:near
UNDEF:0000CD98                                         ; CODE XREF: Window::getHeight(void)+2Bp
UNDEF:0000CD98                                         ; Window::isVisible(void)+10p
UNDEF:0000CD98                                         ; DATA XREF: ...
UNDEF:0000CD9C ; BOOL __stdcall IsIconic(HWND hWnd)
UNDEF:0000CD9C                 extrn __imp__IsIconic@4:near
UNDEF:0000CD9C                                         ; CODE XREF: WinMain(x,x,x,x)+5FBp
UNDEF:0000CD9C                                         ; DATA XREF: WinMain(x,x,x,x)+5FBr
UNDEF:0000CDA0 ; BOOL __stdcall IsZoomed(HWND hWnd)
UNDEF:0000CDA0                 extrn __imp__IsZoomed@4:near
UNDEF:0000CDA0                                         ; CODE XREF: WinMain(x,x,x,x)+5DEp
UNDEF:0000CDA0                                         ; DATA XREF: WinMain(x,x,x,x)+5DEr
UNDEF:0000CDA4 ; int __stdcall TranslateAcceleratorW(HWND hWnd, HACCEL hAccTable, LPMSG lpMsg)
UNDEF:0000CDA4                 extrn __imp__TranslateAcceleratorW@12:near
UNDEF:0000CDA4                                         ; CODE XREF: WinMain(x,x,x,x)+AE2p
UNDEF:0000CDA4                                         ; DATA XREF: WinMain(x,x,x,x)+AE2r
UNDEF:0000CDA8 ; BOOL __stdcall UpdateWindow(HWND hWnd)
UNDEF:0000CDA8                 extrn __imp__UpdateWindow@4:near
UNDEF:0000CDA8                                         ; CODE XREF: Window::redraw(bool)+27p
UNDEF:0000CDA8                                         ; DATA XREF: Window::redraw(bool)+27r
UNDEF:0000CDAC ; BOOL __stdcall SetForegroundWindow(HWND hWnd)
UNDEF:0000CDAC                 extrn __imp__SetForegroundWindow@4:near
UNDEF:0000CDAC                                         ; CODE XREF: WinMain(x,x,x,x)+633p
UNDEF:0000CDAC                                         ; DATA XREF: WinMain(x,x,x,x)+633r
UNDEF:0000CDB0 ; BOOL __stdcall InvalidateRect(HWND hWnd, const RECT *lpRect, BOOL bErase)
UNDEF:0000CDB0                 extrn __imp__InvalidateRect@12:near
UNDEF:0000CDB0                                         ; CODE XREF: Window::redraw(bool)+12p
UNDEF:0000CDB0                                         ; DATA XREF: Window::redraw(bool)+12r
UNDEF:0000CDB4 ; BOOL __stdcall GetClientRect(HWND hWnd, LPRECT lpRect)
UNDEF:0000CDB4                 extrn __imp__GetClientRect@8:near
UNDEF:0000CDB4                                         ; CODE XREF: Window::getClientRect(tagRECT &)+12p
UNDEF:0000CDB4                                         ; Window::getHeight(void)+1Ep ...
UNDEF:0000CDB8 ; BOOL __stdcall GetWindowRect(HWND hWnd, LPRECT lpRect)
UNDEF:0000CDB8                 extrn __imp__GetWindowRect@8:near
UNDEF:0000CDB8                                         ; CODE XREF: Window::getWindowRect(tagRECT &)+12p
UNDEF:0000CDB8                                         ; DATA XREF: Window::getWindowRect(tagRECT &)+12r
UNDEF:0000CDBC ; int __stdcall MessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType)
UNDEF:0000CDBC                 extrn __imp__MessageBoxA@16:near
UNDEF:0000CDBC                                         ; CODE XREF: __catch$_WinMain@16$1+22p
UNDEF:0000CDBC                                         ; __catch$_WinMain@16$3+21p ...
UNDEF:0000CDC0 ; int __stdcall MessageBoxW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType)
UNDEF:0000CDC0                 extrn __imp__MessageBoxW@16:near
UNDEF:0000CDC0                                         ; CODE XREF: WinMain(x,x,x,x)+31Bp
UNDEF:0000CDC0                                         ; __catch$_WinMain@16$0+5Bp ...
UNDEF:0000CDC4 ; HWND __stdcall FindWindowW(LPCWSTR lpClassName, LPCWSTR lpWindowName)
UNDEF:0000CDC4                 extrn __imp__FindWindowW@8:near
UNDEF:0000CDC4                                         ; CODE XREF: WinMain(x,x,x,x)+552p
UNDEF:0000CDC4                                         ; WinMain(x,x,x,x)+59Bp
UNDEF:0000CDC4                                         ; DATA XREF: ...
UNDEF:0000CDC8 ; int __cdecl _wtoi(const wchar_t *Str)
UNDEF:0000CDC8                 extrn __wtoi:near       ; CODE XREF: getNumberFromParam(char,std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,bool &)+87p
UNDEF:0000CDCC ; _DWORD __thiscall std::_Lockit::_Lockit(std::_Lockit *__hidden this, int)
UNDEF:0000CDCC                 extrn ??0_Lockit@std@@QAE@H@Z:near
UNDEF:0000CDCC                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+2Dp
UNDEF:0000CDCC                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+55p ...
UNDEF:0000CDD0 ; _DWORD __thiscall std::_Lockit::~_Lockit(std::_Lockit *__hidden this)
UNDEF:0000CDD0                 extrn ??1_Lockit@std@@QAE@XZ:near
UNDEF:0000CDD0                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+4Bp
UNDEF:0000CDD0                                         ; __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0+3j ...
UNDEF:0000CDD4                 extrn __hypot:near      ; CODE XREF: _hypot+1Dp
UNDEF:0000CDD8                 extrn __CrtDbgReportW:near
UNDEF:0000CDD8                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+91p
UNDEF:0000CDD8                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<wchar_t const *>>>::operator+=(int)+82p ...
UNDEF:0000CDDC ; void __cdecl std::_Debug_message(const wchar_t *, const wchar_t *, unsigned int)
UNDEF:0000CDDC                 extrn ?_Debug_message@std@@YAXPB_W0I@Z:near
UNDEF:0000CDDC                                         ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+16p
UNDEF:0000CDDC                                         ; std::_Debug_pointer<wchar_t const *>(wchar_t const * *,wchar_t const *,uint)+16p ...
UNDEF:0000CDE0 ; void __cdecl std::_Xbad_alloc()
UNDEF:0000CDE0                 extrn ?_Xbad_alloc@std@@YAXXZ:near
UNDEF:0000CDE0                                         ; CODE XREF: std::_Allocate<char>(uint,char *):loc_3FA2p
UNDEF:0000CDE0                                         ; std::_Allocate<wchar_t const *>(uint,wchar_t const * *):loc_3FE4p ...
UNDEF:0000CDE4 ; void __cdecl std::_Xlength_error(const char *)
UNDEF:0000CDE4                 extrn ?_Xlength_error@std@@YAXPBD@Z:near
UNDEF:0000CDE4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+Cp
UNDEF:0000CDE4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+Cp ...
UNDEF:0000CDE8 ; void __cdecl std::_Xout_of_range(const char *)
UNDEF:0000CDE8                 extrn ?_Xout_of_range@std@@YAXPBD@Z:near
UNDEF:0000CDE8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+Cp
UNDEF:0000CDE8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+Cp ...
UNDEF:0000CDEC ; public: virtual void * __thiscall std::error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000CDEC                 extrn ??_Eerror_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000CDEC                                         ; DATA XREF: .rdata:const std::error_category::`vftable'o
UNDEF:0000CDF0 ; const char *__cdecl std::_Syserror_map(int)
UNDEF:0000CDF0                 extrn ?_Syserror_map@std@@YAPBDH@Z:near
UNDEF:0000CDF0                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+Bp
UNDEF:0000CDF0                                         ; std::_Generic_error_category::message(int)+33p
UNDEF:0000CDF4 ; const char *__cdecl std::_Winerror_map(int)
UNDEF:0000CDF4                 extrn ?_Winerror_map@std@@YAPBDH@Z:near
UNDEF:0000CDF4                                         ; CODE XREF: std::_System_error_category::message(int)+33p
UNDEF:0000CDF8 ; public: virtual void * __thiscall std::_Generic_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000CDF8                 extrn ??_E_Generic_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000CDF8                                         ; DATA XREF: .rdata:const std::_Generic_error_category::`vftable'o
UNDEF:0000CDFC ; public: virtual void * __thiscall std::_Iostream_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000CDFC                 extrn ??_E_Iostream_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000CDFC                                         ; DATA XREF: .rdata:const std::_Iostream_error_category::`vftable'o
UNDEF:0000CE00 ; public: virtual void * __thiscall std::_System_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000CE00                 extrn ??_E_System_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000CE00                                         ; DATA XREF: .rdata:const std::_System_error_category::`vftable'o
UNDEF:0000CE04 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __cdecl relativeFilePathToFullFilePath(wchar_t const *)
UNDEF:0000CE04                 extrn ?relativeFilePathToFullFilePath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z:near
UNDEF:0000CE04                                         ; CODE XREF: WinMain(x,x,x,x)+48Ep
UNDEF:0000CE04                                         ; getEasterEggNameFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &,uchar &)+DFp
UNDEF:0000CE08 ; public: virtual void * __thiscall Window::`vector deleting destructor'(unsigned int)
UNDEF:0000CE08                 extrn ??_EWindow@@UAEPAXI@Z:near ; weak
UNDEF:0000CE08                                         ; DATA XREF: .rdata:const Window::`vftable'o
UNDEF:0000CE0C ; _DWORD __thiscall Date::Date(Date *__hidden this, int)
UNDEF:0000CE0C                 extrn ??0Date@@QAE@H@Z:near
UNDEF:0000CE0C                                         ; CODE XREF: WinMain(x,x,x,x)+80Ep
UNDEF:0000CE0C                                         ; WinMain(x,x,x,x)+92Bp
UNDEF:0000CE10 ; enum LangType __cdecl __high static NppParameters::getLangIDFromStr(const wchar_t *)
UNDEF:0000CE10                 extrn ?getLangIDFromStr@NppParameters@@SA?AW4LangType@@PB_W@Z:near
UNDEF:0000CE10                                         ; CODE XREF: getLangTypeFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+74p
UNDEF:0000CE14 ; public: static class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __cdecl NppParameters::getLocPathFromStr(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
UNDEF:0000CE14                 extrn ?getLocPathFromStr@NppParameters@@SA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV23@@Z:near
UNDEF:0000CE14                                         ; CODE XREF: getLocalizationPathFromParam(std::vector<wchar_t const *,std::allocator<wchar_t const *>> &)+9Bp
UNDEF:0000CE18 ; bool __thiscall NppParameters::load(NppParameters *__hidden this)
UNDEF:0000CE18                 extrn ?load@NppParameters@@QAE_NXZ:near
UNDEF:0000CE18                                         ; CODE XREF: WinMain(x,x,x,x)+389p
UNDEF:0000CE1C ; void __thiscall NppParameters::destroyInstance(NppParameters *__hidden this)
UNDEF:0000CE1C                 extrn ?destroyInstance@NppParameters@@QAEXXZ:near
UNDEF:0000CE1C                                         ; CODE XREF: WinMain(x,x,x,x)+5BCp
UNDEF:0000CE20 ; _DWORD __thiscall FileManager::~FileManager(FileManager *__hidden this)
UNDEF:0000CE20                 extrn ??1FileManager@@AAE@XZ:near
UNDEF:0000CE20                                         ; CODE XREF: FileManager::`scalar deleting destructor'(uint)+Ap
UNDEF:0000CE24 ; BOOL __stdcall PathFileExistsW(LPCWSTR pszPath)
UNDEF:0000CE24                 extrn __imp__PathFileExistsW@4:near
UNDEF:0000CE24                                         ; CODE XREF: WinMain(x,x,x,x)+7AAp
UNDEF:0000CE24                                         ; checkSingleFile(wchar_t const *)+8Cp
UNDEF:0000CE24                                         ; DATA XREF: ...
UNDEF:0000CE28 ; void __thiscall Process::run(Process *__hidden this)
UNDEF:0000CE28                 extrn ?run@Process@@QAEXXZ:near
UNDEF:0000CE28                                         ; CODE XREF: WinMain(x,x,x,x)+8EAp
UNDEF:0000CE2C ; public: __thiscall Notepad_plus::Notepad_plus(void)
UNDEF:0000CE2C                 extrn ??0Notepad_plus@@QAE@XZ:near
UNDEF:0000CE2C                                         ; CODE XREF: Notepad_plus_Window::Notepad_plus_Window(void)+44p
UNDEF:0000CE30 ; _DWORD __thiscall Notepad_plus::~Notepad_plus(Notepad_plus *__hidden this)
UNDEF:0000CE30                 extrn ??1Notepad_plus@@UAE@XZ:near
UNDEF:0000CE30                                         ; CODE XREF: __unwindfunclet$??0Notepad_plus_Window@@QAE@XZ$1+6j
UNDEF:0000CE30                                         ; Notepad_plus_Window::~Notepad_plus_Window(void)+49p ...
UNDEF:0000CE34 ; public: bool __thiscall Notepad_plus::emergency(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>)
UNDEF:0000CE34                 extrn ?emergency@Notepad_plus@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z:near
UNDEF:0000CE34                                         ; CODE XREF: Notepad_plus_Window::emergency(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+57p
UNDEF:0000CE38 ; void __thiscall Notepad_plus_Window::init(Notepad_plus_Window *__hidden this, HINSTANCE, HWND, const wchar_t *, struct CmdLineParams *)
UNDEF:0000CE38                 extrn ?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z:near
UNDEF:0000CE38                                         ; CODE XREF: WinMain(x,x,x,x)+98Dp
UNDEF:0000CE3C ; bool __thiscall Notepad_plus_Window::isDlgsMsg(Notepad_plus_Window *__hidden this, struct tagMSG *)
UNDEF:0000CE3C                 extrn ?isDlgsMsg@Notepad_plus_Window@@QBE_NPAUtagMSG@@@Z:near
UNDEF:0000CE3C                                         ; CODE XREF: WinMain(x,x,x,x)+AB7p
UNDEF:0000CE40 ; public: virtual void * __thiscall Notepad_plus_Window::`vector deleting destructor'(unsigned int)
UNDEF:0000CE40                 extrn ??_ENotepad_plus_Window@@UAEPAXI@Z:near ; weak
UNDEF:0000CE40                                         ; DATA XREF: .rdata:const Notepad_plus_Window::`vftable'o
UNDEF:0000CE44 ; void __cdecl static Win32Exception::installHandler()
UNDEF:0000CE44                 extrn ?installHandler@Win32Exception@@SAXXZ:near
UNDEF:0000CE44                                         ; CODE XREF: WinMain(x,x,x,x)+965p
UNDEF:0000CE48 ; void __cdecl static Win32Exception::removeHandler()
UNDEF:0000CE48                 extrn ?removeHandler@Win32Exception@@SAXXZ:near
UNDEF:0000CE48                                         ; CODE XREF: doException(Notepad_plus_Window &)+2Bp
UNDEF:0000CE4C ; _DWORD __thiscall MiniDumper::MiniDumper(MiniDumper *__hidden this)
UNDEF:0000CE4C                 extrn ??0MiniDumper@@QAE@XZ:near
UNDEF:0000CE4C                                         ; CODE XREF: WinMain(x,x,x,x)+70p
UNDEF:0000CE50 ; bool __thiscall MiniDumper::writeDump(MiniDumper *__hidden this, struct _EXCEPTION_POINTERS *)
UNDEF:0000CE50                 extrn ?writeDump@MiniDumper@@QAE_NPAU_EXCEPTION_POINTERS@@@Z:near
UNDEF:0000CE50                                         ; CODE XREF: __catch$_WinMain@16$2+6Dp
UNDEF:0000CE54 ; __fastcall __security_check_cookie(x)
UNDEF:0000CE54                 extrn @__security_check_cookie@4:near
UNDEF:0000CE54                                         ; CODE XREF: WinMain(x,x,x,x)+D81p
UNDEF:0000CE54                                         ; checkSingleFile(wchar_t const *)+A1p ...
UNDEF:0000CE58 ; __stdcall _CxxThrowException(x, x)
UNDEF:0000CE58                 extrn __CxxThrowException@8:near
UNDEF:0000CE58                                         ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1+10p
UNDEF:0000CE58                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1+10p ...
UNDEF:0000CE5C                 extrn ___CxxFrameHandler3:near
UNDEF:0000CE5C                                         ; CODE XREF: __ehhandler$_WinMain@16+23j
UNDEF:0000CE5C                                         ; __ehhandler$?isInList@@YA_NPB_WAAV?$vector@PB_WV?$allocator@PB_W@std@@@std@@@Z+16j ...
UNDEF:0000CE60                 extrn __chkstk:near     ; CODE XREF: WinMain(x,x,x,x)+17p
UNDEF:0000CE64 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:0000CE64                 extrn _memset:near      ; CODE XREF: __catch$_WinMain@16$0+1Ap
UNDEF:0000CE64                                         ; checkSingleFile(wchar_t const *)+42p
UNDEF:0000CE68 ; const type_info::`vftable'
UNDEF:0000CE68                 extrn ??_7type_info@@6B@:near
UNDEF:0000CE68                                         ; DATA XREF: .data$r:std::runtime_error `RTTI Type Descriptor'o
UNDEF:0000CE68                                         ; .data$r:std::exception `RTTI Type Descriptor'o ...
UNDEF:0000CE6C ; private: static class NppParameters * NppParameters::_pSelf
UNDEF:0000CE6C                 extrn ?_pSelf@NppParameters@@0PAV1@A:near
UNDEF:0000CE6C                                         ; DATA XREF: NppParameters::getInstance(void)+3r
UNDEF:0000CE70 ; private: static class FileManager * FileManager::_pSelf
UNDEF:0000CE70                 extrn ?_pSelf@FileManager@@0PAV1@A:near
UNDEF:0000CE70                                         ; DATA XREF: FileManager::destroyInstance(void)+9r
UNDEF:0000CE70                                         ; FileManager::getInstance(void)+3r
UNDEF:0000CE74 ; HWND Notepad_plus_Window::gNppHWND
UNDEF:0000CE74                 extrn ?gNppHWND@Notepad_plus_Window@@2PAUHWND__@@A:near
UNDEF:0000CE74                                         ; DATA XREF: __catch$_WinMain@16$0+54r
UNDEF:0000CE74                                         ; __catch$_WinMain@16$1+1Br ...
UNDEF:0000CE78 ; private: static wchar_t const * const Notepad_plus_Window::_className
UNDEF:0000CE78                 extrn ?_className@Notepad_plus_Window@@0QB_WB:near
UNDEF:0000CE78                                         ; DATA XREF: Notepad_plus_Window::getClassName(void)+3o
UNDEF:0000CE7C                 extrn ___security_cookie:near
UNDEF:0000CE7C                                         ; DATA XREF: WinMain(x,x,x,x)+1Cr
UNDEF:0000CE7C                                         ; checkSingleFile(wchar_t const *)+9r ...
UNDEF:0000CE80                 extrn __fltused:near
UNDEF:0000CE80
UNDEF:0000CE80
UNDEF:0000CE80                 end