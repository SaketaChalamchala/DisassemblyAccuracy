.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 09DBC95C961EBAC50B933EE720579418
.rdata:00000000 ; Input CRC32 : 86AD33BF
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\ProjectPanel.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "libcpmtd"
.rdata:00000000 ; must resolve: ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.rdata:00000000 ; must resolve: ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.rdata:00000000 ; must resolve: ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@D@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@_W@std@@2V0locale@2@A
.rdata:00000000 ; includelib "LIBCMTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG126979:                              ; DATA XREF: ProjectPanel::popupMenuCmd(int)+6D8o
.rdata:00000000                 unicode 0, <All the sub-items will be removed.>
.rdata:00000000                 dw 0Dh
.rdata:00000000                 unicode 0, <Are you sure you want to remove this folder from the proj>
.rdata:00000000                 unicode 0, <ect?>,0
.rdata:000000C2 ; CHAR _SG126310[2]
.rdata:000000C2 $SG126310       db 2 dup(0)             ; DATA XREF: ProjectPanel::run_dlgProc(uint,uint,long)+502o
.rdata:000000C4 ; const WCHAR _SG126981
.rdata:000000C4 $SG126981:                              ; DATA XREF: ProjectPanel::popupMenuCmd(int)+6FFo
.rdata:000000C4                 unicode 0, <Remove folder from project>,0
.rdata:000000FA                 align 4
.rdata:000000FC ; const WCHAR _SG126989
.rdata:000000FC $SG126989:                              ; DATA XREF: ProjectPanel::popupMenuCmd(int)+7E0o
.rdata:000000FC                 unicode 0, <Remove file from project>,0
.rdata:0000012E                 align 10h
.rdata:00000130 $SG126987:                              ; DATA XREF: ProjectPanel::popupMenuCmd(int)+7BBo
.rdata:00000130                 unicode 0, <Are you sure you want to remove this file from the projec>
.rdata:00000130                 unicode 0, <t?>,0
.rdata:000001A8 ; wchar_t _SG127027
.rdata:000001A8 $SG127027:                              ; DATA XREF: ProjectPanel::saveWorkSpaceAs(bool)+5Co
.rdata:000001A8                 unicode 0, <.*>,0
.rdata:000001AE                 align 10h
.rdata:000001B0 ; wchar_t _SG127028
.rdata:000001B0 $SG127028:                              ; DATA XREF: ProjectPanel::saveWorkSpaceAs(bool)+61o
.rdata:000001B0                 unicode 0, <All types>,0
.rdata:000001C4 ; wchar_t _SG127039
.rdata:000001C4 $SG127039:                              ; DATA XREF: ProjectPanel::addFiles(_TREEITEM *)+5Co
.rdata:000001C4                 unicode 0, <.*>,0
.rdata:000001CA                 align 4
.rdata:000001CC ; wchar_t _SG127040
.rdata:000001CC $SG127040:                              ; DATA XREF: ProjectPanel::addFiles(_TREEITEM *)+61o
.rdata:000001CC                 unicode 0, <All types>,0
.rdata:000001E0 ; wchar_t _SG127058
.rdata:000001E0 $SG127058       dd offset $SG126979+5Ch ; DATA XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+69o
.rdata:000001E0                                         ; "e you want to remove this folder from t"...
.rdata:000001E4 ; wchar_t _SG127059
.rdata:000001E4 $SG127059:                              ; DATA XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *):loc_2496o
.rdata:000001E4                 unicode 0, <*.*>,0
.rdata:000001EC ; const WCHAR _SG127078
.rdata:000001EC $SG127078       dd offset $SG126979+2Eh ; DATA XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+F5o
.rdata:000001EC                                         ; "be removed.\rAre you sure you want to r"...
.rdata:000001F0 ; const WCHAR _SG127079
.rdata:000001F0 $SG127079:                              ; DATA XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+10Fo
.rdata:000001F0                 unicode 0, <..>,0
.rdata:000001F6                 align 4
.rdata:000001F8 ; wchar_t _SG127082
.rdata:000001F8 $SG127082       dd offset $SG126979+5Ch ; DATA XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+150o
.rdata:000001F8                                         ; "e you want to remove this folder from t"...
.rdata:000001FC ; wchar_t _SG127083
.rdata:000001FC $SG127083       dd offset $SG126979+5Ch ; DATA XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+16Co
.rdata:000001FC                                         ; "e you want to remove this folder from t"...
.rdata:00000200 ; wchar_t _SG127094
.rdata:00000200 $SG127094       dd offset $SG126979+5Ch ; DATA XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+26Do
.rdata:00000200                                         ; "e you want to remove this folder from t"...
.rdata:00000204 ; wchar_t _SG127132
.rdata:00000204 $SG127132       dw 0                    ; DATA XREF: ProjectPanel::addFilesFromDirectory(_TREEITEM *)+31o
.rdata:00000206                 db    0
.rdata:00000207                 db    0
.rdata:00000208 ; wchar_t _SG127133
.rdata:00000208 $SG127133       dw 0                    ; DATA XREF: ProjectPanel::addFilesFromDirectory(_TREEITEM *)+51o
.rdata:0000020A                 db    0
.rdata:0000020B                 db    0
.rdata:0000020C ; wchar_t _SG127153
.rdata:0000020C $SG127153       dw 0                    ; DATA XREF: ProjectPanel::addFilesFromDirectory(_TREEITEM *)+C8o
.rdata:0000020E                 db    0
.rdata:0000020F                 db    0
.rdata:00000210 ; wchar_t _SG127174
.rdata:00000210 $SG127174       dw 0                    ; DATA XREF: ProjectPanel::addFilesFromDirectory(_TREEITEM *):loc_237Fo
.rdata:00000212                 db    0
.rdata:00000213                 db    0
.rdata:00000214 ; const WCHAR _SG126254
.rdata:00000214 $SG126254:                              ; DATA XREF: ProjectPanel::run_dlgProc(uint,uint,long)+EBo
.rdata:00000214                 unicode 0, <ToolbarWindow32>,0
.rdata:00000234 $SG126259:                              ; DATA XREF: ProjectPanel::run_dlgProc(uint,uint,long)+113o
.rdata:00000234                 unicode 0, <Workspace>,0
.rdata:00000248 $SG126260       db 'Entries',0          ; DATA XREF: ProjectPanel::run_dlgProc(uint,uint,long)+11Ao
.rdata:00000250 $SG126263:                              ; DATA XREF: ProjectPanel::run_dlgProc(uint,uint,long)+135o
.rdata:00000250                 unicode 0, <Edit>,0
.rdata:0000025A                 align 4
.rdata:0000025C $SG126264       db 'Entries',0          ; DATA XREF: ProjectPanel::run_dlgProc(uint,uint,long)+13Co
.rdata:00000264 ; CHAR _SG126311[]
.rdata:00000264 $SG126311       db 'vkF2',0             ; DATA XREF: ProjectPanel::run_dlgProc(uint,uint,long)+507o
.rdata:00000269                 align 4
.rdata:0000026C ; const WCHAR _SG126322
.rdata:0000026C $SG126322:                              ; DATA XREF: ProjectPanel::checkIfNeedSave(wchar_t const *)+5Co
.rdata:0000026C                 unicode 0, <Your workspace was not saved.>,0
.rdata:000002A8 ; const WCHAR _SG126319
.rdata:000002A8 $SG126319:                              ; DATA XREF: ProjectPanel::checkIfNeedSave(wchar_t const *)+2Co
.rdata:000002A8                 unicode 0, <The workspace was modified. Do you want to save it?>,0
.rdata:00000310 $SG126329:                              ; DATA XREF: ProjectPanel::initMenus(void)+55o
.rdata:00000310                 unicode 0, <New Workspace>,0
.rdata:0000032C $SG126330       db 'WorkspaceMenu',0    ; DATA XREF: ProjectPanel::initMenus(void)+5Fo
.rdata:0000033A                 align 4
.rdata:0000033C $SG126333:                              ; DATA XREF: ProjectPanel::initMenus(void)+7Do
.rdata:0000033C                 unicode 0, <Open Workspace>,0
.rdata:0000035A                 align 4
.rdata:0000035C $SG126334       db 'WorkspaceMenu',0    ; DATA XREF: ProjectPanel::initMenus(void)+87o
.rdata:0000036A                 align 4
.rdata:0000036C $SG126337:                              ; DATA XREF: ProjectPanel::initMenus(void)+A2o
.rdata:0000036C                 unicode 0, <Reload Workspace>,0
.rdata:0000038E                 align 10h
.rdata:00000390 $SG126338       db 'WorkspaceMenu',0    ; DATA XREF: ProjectPanel::initMenus(void)+ACo
.rdata:0000039E                 align 10h
.rdata:000003A0 $SG126341:                              ; DATA XREF: ProjectPanel::initMenus(void)+C7o
.rdata:000003A0                 unicode 0, <Save>,0
.rdata:000003AA                 align 4
.rdata:000003AC $SG126342       db 'WorkspaceMenu',0    ; DATA XREF: ProjectPanel::initMenus(void)+D1o
.rdata:000003BA                 align 4
.rdata:000003BC $SG126345:                              ; DATA XREF: ProjectPanel::initMenus(void)+ECo
.rdata:000003BC                 unicode 0, <Save As...>,0
.rdata:000003D2                 align 4
.rdata:000003D4 $SG126346       db 'WorkspaceMenu',0    ; DATA XREF: ProjectPanel::initMenus(void)+F6o
.rdata:000003E2                 align 4
.rdata:000003E4 $SG126349:                              ; DATA XREF: ProjectPanel::initMenus(void)+111o
.rdata:000003E4                 unicode 0, <Save a Copy As...>,0
.rdata:00000408 $SG126350       db 'WorkspaceMenu',0    ; DATA XREF: ProjectPanel::initMenus(void)+11Bo
.rdata:00000416                 align 4
.rdata:00000418 $SG126353:                              ; DATA XREF: ProjectPanel::initMenus(void)+136o
.rdata:00000418                 unicode 0, <Add New Project>,0
.rdata:00000438 $SG126354       db 'WorkspaceMenu',0    ; DATA XREF: ProjectPanel::initMenus(void)+140o
.rdata:00000446                 align 4
.rdata:00000448 $SG126358:                              ; DATA XREF: ProjectPanel::initMenus(void)+28Eo
.rdata:00000448                 unicode 0, <Move Up>
.rdata:00000448                 dw 9
.rdata:00000448                 unicode 0, <Ctrl+Up>,0
.rdata:00000468 $SG126359       db 'ProjectMenu',0      ; DATA XREF: ProjectPanel::initMenus(void)+298o
.rdata:00000474 $SG126362:                              ; DATA XREF: ProjectPanel::initMenus(void)+2B0o
.rdata:00000474                 unicode 0, <Move Down>
.rdata:00000474                 dw 9
.rdata:00000474                 unicode 0, <Ctrl+Down>,0
.rdata:0000049C $SG126363       db 'ProjectMenu',0      ; DATA XREF: ProjectPanel::initMenus(void)+2BAo
.rdata:000004A8 $SG126366:                              ; DATA XREF: ProjectPanel::initMenus(void)+2D2o
.rdata:000004A8                 unicode 0, <Rename>,0
.rdata:000004B6                 align 4
.rdata:000004B8 $SG126367       db 'ProjectMenu',0      ; DATA XREF: ProjectPanel::initMenus(void)+2DCo
.rdata:000004C4 $SG126370:                              ; DATA XREF: ProjectPanel::initMenus(void)+2F4o
.rdata:000004C4                 unicode 0, <Add Folder>,0
.rdata:000004DA                 align 4
.rdata:000004DC $SG126371       db 'ProjectMenu',0      ; DATA XREF: ProjectPanel::initMenus(void)+2FEo
.rdata:000004E8 $SG126374:                              ; DATA XREF: ProjectPanel::initMenus(void)+319o
.rdata:000004E8                 unicode 0, <Add Files...>,0
.rdata:00000502                 align 4
.rdata:00000504 $SG126375       db 'ProjectMenu',0      ; DATA XREF: ProjectPanel::initMenus(void)+323o
.rdata:00000510 $SG126378:                              ; DATA XREF: ProjectPanel::initMenus(void)+33Eo
.rdata:00000510                 unicode 0, <Add Files from Directory...>,0
.rdata:00000548 $SG126379       db 'ProjectMenu',0      ; DATA XREF: ProjectPanel::initMenus(void)+348o
.rdata:00000554 $SG126382:                              ; DATA XREF: ProjectPanel::initMenus(void)+363o
.rdata:00000554                 unicode 0, <Remove>
.rdata:00000554                 dw 9
.rdata:00000554                 unicode 0, <DEL>,0
.rdata:0000056A                 align 4
.rdata:0000056C $SG126383       db 'ProjectMenu',0      ; DATA XREF: ProjectPanel::initMenus(void)+36Do
.rdata:00000578 $SG126385:                              ; DATA XREF: ProjectPanel::initMenus(void)+4BEo
.rdata:00000578                 unicode 0, <Move Up>
.rdata:00000578                 dw 9
.rdata:00000578                 unicode 0, <Ctrl+Up>,0
.rdata:00000598 $SG126386       db 'FolderMenu',0       ; DATA XREF: ProjectPanel::initMenus(void)+4C8o
.rdata:000005A3                 align 4
.rdata:000005A4 $SG126388:                              ; DATA XREF: ProjectPanel::initMenus(void)+513o
.rdata:000005A4                 unicode 0, <Move Down>
.rdata:000005A4                 dw 9
.rdata:000005A4                 unicode 0, <Ctrl+Down>,0
.rdata:000005CC $SG126389       db 'FolderMenu',0       ; DATA XREF: ProjectPanel::initMenus(void)+51Do
.rdata:000005D7                 align 4
.rdata:000005D8 $SG126391:                              ; DATA XREF: ProjectPanel::initMenus(void)+568o
.rdata:000005D8                 unicode 0, <Rename>,0
.rdata:000005E6                 align 4
.rdata:000005E8 $SG126392       db 'FolderMenu',0       ; DATA XREF: ProjectPanel::initMenus(void)+572o
.rdata:000005F3                 align 4
.rdata:000005F4 $SG126394:                              ; DATA XREF: ProjectPanel::initMenus(void)+5BDo
.rdata:000005F4                 unicode 0, <Add Folder>,0
.rdata:0000060A                 align 4
.rdata:0000060C $SG126395       db 'FolderMenu',0       ; DATA XREF: ProjectPanel::initMenus(void)+5C7o
.rdata:00000617                 align 4
.rdata:00000618 $SG126397:                              ; DATA XREF: ProjectPanel::initMenus(void)+615o
.rdata:00000618                 unicode 0, <Add Files...>,0
.rdata:00000632                 align 4
.rdata:00000634 $SG126398       db 'FolderMenu',0       ; DATA XREF: ProjectPanel::initMenus(void)+61Fo
.rdata:0000063F                 align 10h
.rdata:00000640 $SG126400:                              ; DATA XREF: ProjectPanel::initMenus(void)+66Do
.rdata:00000640                 unicode 0, <Add Files from Directory...>,0
.rdata:00000678 $SG126401       db 'FolderMenu',0       ; DATA XREF: ProjectPanel::initMenus(void)+677o
.rdata:00000683                 align 4
.rdata:00000684 $SG126403:                              ; DATA XREF: ProjectPanel::initMenus(void)+6C5o
.rdata:00000684                 unicode 0, <Remove>
.rdata:00000684                 dw 9
.rdata:00000684                 unicode 0, <DEL>,0
.rdata:0000069A                 align 4
.rdata:0000069C $SG126404       db 'FolderMenu',0       ; DATA XREF: ProjectPanel::initMenus(void)+6CFo
.rdata:000006A7                 align 4
.rdata:000006A8 $SG126406:                              ; DATA XREF: ProjectPanel::initMenus(void)+853o
.rdata:000006A8                 unicode 0, <Move Up>
.rdata:000006A8                 dw 9
.rdata:000006A8                 unicode 0, <Ctrl+Up>,0
.rdata:000006C8 $SG126407       db 'FileMenu',0         ; DATA XREF: ProjectPanel::initMenus(void)+85Do
.rdata:000006D1                 align 4
.rdata:000006D4 $SG126409:                              ; DATA XREF: ProjectPanel::initMenus(void)+8A8o
.rdata:000006D4                 unicode 0, <Move Down>
.rdata:000006D4                 dw 9
.rdata:000006D4                 unicode 0, <Ctrl+Down>,0
.rdata:000006FC $SG126410       db 'FileMenu',0         ; DATA XREF: ProjectPanel::initMenus(void)+8B2o
.rdata:00000705                 align 4
.rdata:00000708 $SG126412:                              ; DATA XREF: ProjectPanel::initMenus(void)+8FDo
.rdata:00000708                 unicode 0, <Rename>,0
.rdata:00000716                 align 4
.rdata:00000718 $SG126413       db 'FileMenu',0         ; DATA XREF: ProjectPanel::initMenus(void)+907o
.rdata:00000721                 align 4
.rdata:00000724 $SG126415:                              ; DATA XREF: ProjectPanel::initMenus(void)+952o
.rdata:00000724                 unicode 0, <Remove>
.rdata:00000724                 dw 9
.rdata:00000724                 unicode 0, <DEL>,0
.rdata:0000073A                 align 4
.rdata:0000073C $SG126416       db 'FileMenu',0         ; DATA XREF: ProjectPanel::initMenus(void)+95Co
.rdata:00000745                 align 4
.rdata:00000748 $SG126419:                              ; DATA XREF: ProjectPanel::initMenus(void)+9A7o
.rdata:00000748                 unicode 0, <Modify File Path>,0
.rdata:0000076A                 align 4
.rdata:0000076C $SG126420       db 'FileMenu',0         ; DATA XREF: ProjectPanel::initMenus(void)+9B1o
.rdata:00000775                 align 4
.rdata:00000778 ; wchar_t _SG126488
.rdata:00000778 $SG126488:                              ; DATA XREF: ProjectPanel::openWorkSpace(wchar_t const *):loc_E4Ao
.rdata:00000778                 unicode 0, <NotepadPlus>,0
.rdata:00000790 ; wchar_t _SG126491
.rdata:00000790 $SG126491:                              ; DATA XREF: ProjectPanel::openWorkSpace(wchar_t const *):loc_E67o
.rdata:00000790                 unicode 0, <Project>,0
.rdata:000007A0 $SG126497       db 'WorkspaceRootName',0
.rdata:000007A0                                         ; DATA XREF: ProjectPanel::openWorkSpace(wchar_t const *)+105o
.rdata:000007B2                 align 4
.rdata:000007B4 $SG126498       db 'ProjectManager',0   ; DATA XREF: ProjectPanel::openWorkSpace(wchar_t const *)+10Ao
.rdata:000007C3                 align 4
.rdata:000007C4 $SG126499:                              ; DATA XREF: ProjectPanel::openWorkSpace(wchar_t const *)+10Fo
.rdata:000007C4                 unicode 0, <Workspace>,0
.rdata:000007D8 ; wchar_t _SG126506
.rdata:000007D8 $SG126506:                              ; DATA XREF: ProjectPanel::openWorkSpace(wchar_t const *):loc_F09o
.rdata:000007D8                 unicode 0, <Project>,0
.rdata:000007E8 ; wchar_t _SG126508
.rdata:000007E8 $SG126508:                              ; DATA XREF: ProjectPanel::openWorkSpace(wchar_t const *)+167o
.rdata:000007E8                 unicode 0, <name>,0
.rdata:000007F2                 align 4
.rdata:000007F4 $SG126518       db 'WorkspaceRootName',0
.rdata:000007F4                                         ; DATA XREF: ProjectPanel::newWorkSpace(void)+3Ao
.rdata:00000806                 align 4
.rdata:00000808 $SG126519       db 'ProjectManager',0   ; DATA XREF: ProjectPanel::newWorkSpace(void)+3Fo
.rdata:00000817                 align 4
.rdata:00000818 $SG126520:                              ; DATA XREF: ProjectPanel::newWorkSpace(void)+44o
.rdata:00000818                 unicode 0, <Workspace>,0
.rdata:0000082C ; wchar_t _SG126523
.rdata:0000082C $SG126523       dw 0                    ; DATA XREF: ProjectPanel::newWorkSpace(void)+83o
.rdata:0000082E                 db    0
.rdata:0000082F                 db    0
.rdata:00000830 ; wchar_t _SG126544
.rdata:00000830 $SG126544       dw 0                    ; DATA XREF: ProjectPanel::saveWorkSpace(void)+7o
.rdata:00000832                 db    0
.rdata:00000833                 db    0
.rdata:00000834 ; wchar_t _SG126554
.rdata:00000834 $SG126554:                              ; DATA XREF: ProjectPanel::writeWorkSpace(wchar_t *)+7Eo
.rdata:00000834                 unicode 0, <NotepadPlus>,0
.rdata:0000084C ; wchar_t _SG126567
.rdata:0000084C $SG126567:                              ; DATA XREF: ProjectPanel::writeWorkSpace(wchar_t *)+1A0o
.rdata:0000084C                 unicode 0, <Project>,0
.rdata:0000085C ; wchar_t _SG126568
.rdata:0000085C $SG126568:                              ; DATA XREF: ProjectPanel::writeWorkSpace(wchar_t *)+1F4o
.rdata:0000085C                 unicode 0, <name>,0
.rdata:00000866                 align 4
.rdata:00000868 ; wchar_t _SG126590
.rdata:00000868 $SG126590:                              ; DATA XREF: ProjectPanel::buildProjectXml(TiXmlNode *,_TREEITEM *,wchar_t const *)+FFo
.rdata:00000868                 unicode 0, <File>,0
.rdata:00000872                 align 4
.rdata:00000874 ; wchar_t _SG126591
.rdata:00000874 $SG126591:                              ; DATA XREF: ProjectPanel::buildProjectXml(TiXmlNode *,_TREEITEM *,wchar_t const *)+155o
.rdata:00000874                 unicode 0, <name>,0
.rdata:0000087E                 align 10h
.rdata:00000880 ; wchar_t _SG126595
.rdata:00000880 $SG126595:                              ; DATA XREF: ProjectPanel::buildProjectXml(TiXmlNode *,_TREEITEM *,wchar_t const *):loc_2D13o
.rdata:00000880                 unicode 0, <Folder>,0
.rdata:0000088E                 align 10h
.rdata:00000890 ; wchar_t _SG126596
.rdata:00000890 $SG126596:                              ; DATA XREF: ProjectPanel::buildProjectXml(TiXmlNode *,_TREEITEM *,wchar_t const *)+1DAo
.rdata:00000890                 unicode 0, <name>,0
.rdata:0000089A                 align 4
.rdata:0000089C ; const WCHAR _SG126619
.rdata:0000089C $SG126619:                              ; DATA XREF: ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)+5Co
.rdata:0000089C                 unicode 0, <Folder>,0
.rdata:000008AA                 align 4
.rdata:000008AC ; wchar_t _SG126621
.rdata:000008AC $SG126621:                              ; DATA XREF: ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)+73o
.rdata:000008AC                 unicode 0, <name>,0
.rdata:000008B6                 align 4
.rdata:000008B8 ; const WCHAR _SG126627
.rdata:000008B8 $SG126627:                              ; DATA XREF: ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)+D0o
.rdata:000008B8                 unicode 0, <File>,0
.rdata:000008C2                 align 4
.rdata:000008C4 ; wchar_t _SG126629
.rdata:000008C4 $SG126629:                              ; DATA XREF: ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)+E3o
.rdata:000008C4                 unicode 0, <name>,0
.rdata:000008CE                 align 10h
.rdata:000008D0 $SG126905       db 'NewProjectName',0   ; DATA XREF: ProjectPanel::popupMenuCmd(int)+1C2o
.rdata:000008DF                 align 10h
.rdata:000008E0 $SG126906       db 'ProjectManager',0   ; DATA XREF: ProjectPanel::popupMenuCmd(int)+1C7o
.rdata:000008EF                 align 10h
.rdata:000008F0 $SG126907:                              ; DATA XREF: ProjectPanel::popupMenuCmd(int)+1CCo
.rdata:000008F0                 unicode 0, <Project Name>,0
.rdata:0000090A                 align 4
.rdata:0000090C ; const WCHAR _SG126915
.rdata:0000090C $SG126915:                              ; DATA XREF: ProjectPanel::popupMenuCmd(int)+284o
.rdata:0000090C                 unicode 0, <New Workspace>,0
.rdata:00000928 ; const WCHAR _SG126916
.rdata:00000928 $SG126916:                              ; DATA XREF: ProjectPanel::popupMenuCmd(int)+289o
.rdata:00000928                 unicode 0, <The current workspace was modified. Do you want to save t>
.rdata:00000928                 unicode 0, <he current project?>,0
.rdata:000009C2                 align 4
.rdata:000009C4 $SG126931       db 'NewFolderName',0    ; DATA XREF: ProjectPanel::popupMenuCmd(int)+337o
.rdata:000009D2                 align 4
.rdata:000009D4 $SG126932       db 'ProjectManager',0   ; DATA XREF: ProjectPanel::popupMenuCmd(int)+33Co
.rdata:000009E3                 align 4
.rdata:000009E4 $SG126933:                              ; DATA XREF: ProjectPanel::popupMenuCmd(int)+341o
.rdata:000009E4                 unicode 0, <Folder Name>,0
.rdata:000009FC ; const WCHAR _SG126945
.rdata:000009FC $SG126945:                              ; DATA XREF: ProjectPanel::popupMenuCmd(int)+49Eo
.rdata:000009FC                 unicode 0, <Open Workspace>,0
.rdata:00000A1A                 align 4
.rdata:00000A1C ; wchar_t _SG126955
.rdata:00000A1C $SG126955:                              ; DATA XREF: ProjectPanel::popupMenuCmd(int)+525o
.rdata:00000A1C                 unicode 0, <All types>,0
.rdata:00000A30 ; const WCHAR _SG126946
.rdata:00000A30 $SG126946:                              ; DATA XREF: ProjectPanel::popupMenuCmd(int)+4A3o
.rdata:00000A30                 unicode 0, <The current workspace was modified. Do you want to save t>
.rdata:00000A30                 unicode 0, <he current project?>,0
.rdata:00000ACA                 align 4
.rdata:00000ACC ; wchar_t _SG126954
.rdata:00000ACC $SG126954:                              ; DATA XREF: ProjectPanel::popupMenuCmd(int)+520o
.rdata:00000ACC                 unicode 0, <.*>,0
.rdata:00000AD2                 align 4
.rdata:00000AD4 ; const WCHAR _SG126959
.rdata:00000AD4 $SG126959:                              ; DATA XREF: ProjectPanel::popupMenuCmd(int)+56Eo
.rdata:00000AD4                 unicode 0, <Open Workspace>,0
.rdata:00000AF2                 align 4
.rdata:00000AF4 ; const WCHAR _SG126964
.rdata:00000AF4 $SG126964:                              ; DATA XREF: ProjectPanel::popupMenuCmd(int)+5C9o
.rdata:00000AF4                 unicode 0, <Reload Workspace>,0
.rdata:00000B16                 align 4
.rdata:00000B18 ; const WCHAR _SG126960
.rdata:00000B18 $SG126960:                              ; DATA XREF: ProjectPanel::popupMenuCmd(int)+573o
.rdata:00000B18                 unicode 0, <The workspace could not be opened.>
.rdata:00000B18                 dw 0Dh
.rdata:00000B18                 unicode 0, <It seems the file to open is not a valid project file.>,0
.rdata:00000BCC ; const WCHAR _SG126971
.rdata:00000BCC $SG126971:                              ; DATA XREF: ProjectPanel::popupMenuCmd(int)+63Fo
.rdata:00000BCC                 unicode 0, <Reload Workspace>,0
.rdata:00000BEE                 align 10h
.rdata:00000BF0 ; const WCHAR _SG126965
.rdata:00000BF0 $SG126965:                              ; DATA XREF: ProjectPanel::popupMenuCmd(int)+5CEo
.rdata:00000BF0                 unicode 0, <The current workspace was modified. Reloading will discar>
.rdata:00000BF0                 unicode 0, <d all modifications.>
.rdata:00000BF0                 dw 0Dh
.rdata:00000BF0                 unicode 0, <Do you want to continue?>,0
.rdata:00000CBE                 align 10h
.rdata:00000CC0 ; const WCHAR _SG126972
.rdata:00000CC0 $SG126972:                              ; DATA XREF: ProjectPanel::popupMenuCmd(int)+644o
.rdata:00000CC0                 unicode 0, <Cannot find the file to reload.>,0
.rdata:00000CC0 _rdata          ends
.rdata:00000CC0
.text$mn:00000D00 ; ===========================================================================
.text$mn:00000D00
.text$mn:00000D00 ; Segment type: Pure code
.text$mn:00000D00 ; Segment permissions: Read/Execute
.text$mn:00000D00 _text$mn        segment para public 'CODE' use32
.text$mn:00000D00                 assume cs:_text$mn
.text$mn:00000D00                 ;org 0D00h
.text$mn:00000D00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000D00
.text$mn:00000D00 ; =============== S U B R O U T I N E =======================================
.text$mn:00000D00
.text$mn:00000D00 ; Attributes: bp-based frame
.text$mn:00000D00
.text$mn:00000D00 ; void __thiscall ProjectPanel::newWorkSpace(ProjectPanel *__hidden this)
.text$mn:00000D00                 public ?newWorkSpace@ProjectPanel@@QAEXXZ
.text$mn:00000D00 ?newWorkSpace@ProjectPanel@@QAEXXZ proc near
.text$mn:00000D00                                         ; CODE XREF: ProjectPanel::popupMenuCmd(int)+2F3p
.text$mn:00000D00                                         ; ProjectPanel::run_dlgProc(uint,uint,long)+313p
.text$mn:00000D00
.text$mn:00000D00 var_34          = dword ptr -34h
.text$mn:00000D00 var_30          = dword ptr -30h
.text$mn:00000D00 var_2C          = byte ptr -2Ch
.text$mn:00000D00 var_10          = dword ptr -10h
.text$mn:00000D00 var_C           = dword ptr -0Ch
.text$mn:00000D00 var_4           = dword ptr -4
.text$mn:00000D00
.text$mn:00000D00                 push    ebp
.text$mn:00000D01                 mov     ebp, esp
.text$mn:00000D03                 push    0FFFFFFFFh
.text$mn:00000D05                 push    offset __ehhandler$?newWorkSpace@ProjectPanel@@QAEXXZ
.text$mn:00000D0A                 mov     eax, large fs:0
.text$mn:00000D10                 push    eax
.text$mn:00000D11                 sub     esp, 28h
.text$mn:00000D14                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000D19                 xor     eax, ebp
.text$mn:00000D1B                 mov     [ebp+var_10], eax
.text$mn:00000D1E                 push    eax
.text$mn:00000D1F                 lea     eax, [ebp+var_C]
.text$mn:00000D22                 mov     large fs:0, eax
.text$mn:00000D28                 mov     [ebp+var_30], ecx
.text$mn:00000D2B                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00000D30                 mov     ecx, eax        ; this
.text$mn:00000D32                 call    ?getNativeLangSpeaker@NppParameters@@QAEPAVNativeLangSpeaker@@XZ ; NppParameters::getNativeLangSpeaker(void)
.text$mn:00000D37                 mov     [ebp+var_34], eax
.text$mn:00000D3A                 push    offset $SG126518 ; "WorkspaceRootName"
.text$mn:00000D3F                 push    offset $SG126519 ; "ProjectManager"
.text$mn:00000D44                 push    offset $SG126520 ; "Workspace"
.text$mn:00000D49                 lea     eax, [ebp+var_2C]
.text$mn:00000D4C                 push    eax
.text$mn:00000D4D                 mov     ecx, [ebp+var_34]
.text$mn:00000D50                 call    ?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z ; NativeLangSpeaker::getAttrNameStr(wchar_t const *,char const *,char const *)
.text$mn:00000D55                 mov     [ebp+var_4], 0
.text$mn:00000D5C                 push    0               ; wchar_t *
.text$mn:00000D5E                 push    0               ; int
.text$mn:00000D60                 push    0FFFF0000h      ; struct _TREEITEM *
.text$mn:00000D65                 lea     ecx, [ebp+var_2C]
.text$mn:00000D68                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00000D6D                 push    eax             ; wchar_t *
.text$mn:00000D6E                 mov     ecx, [ebp+var_30]
.text$mn:00000D71                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00000D74                 call    ?addItem@TreeView@@QAEPAU_TREEITEM@@PB_WPAU2@H0@Z ; TreeView::addItem(wchar_t const *,_TREEITEM *,int,wchar_t const *)
.text$mn:00000D79                 push    0               ; bool
.text$mn:00000D7B                 mov     ecx, [ebp+var_30] ; this
.text$mn:00000D7E                 call    ?setWorkSpaceDirty@ProjectPanel@@IAEX_N@Z ; ProjectPanel::setWorkSpaceDirty(bool)
.text$mn:00000D83                 push    offset $SG126523 ; Str
.text$mn:00000D88                 mov     ecx, [ebp+var_30]
.text$mn:00000D8B                 add     ecx, 0C4h ; '-'
.text$mn:00000D91                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00000D96                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000D9D                 lea     ecx, [ebp+var_2C]
.text$mn:00000DA0                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00000DA5                 mov     ecx, [ebp+var_C]
.text$mn:00000DA8                 mov     large fs:0, ecx
.text$mn:00000DAF                 pop     ecx
.text$mn:00000DB0                 mov     ecx, [ebp+var_10]
.text$mn:00000DB3                 xor     ecx, ebp
.text$mn:00000DB5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00000DBA                 mov     esp, ebp
.text$mn:00000DBC                 pop     ebp
.text$mn:00000DBD                 retn
.text$mn:00000DBD ?newWorkSpace@ProjectPanel@@QAEXXZ endp
.text$mn:00000DBD
.text$mn:00000DBD ; ---------------------------------------------------------------------------
.text$mn:00000DBE                 align 10h
.text$mn:00000DC0
.text$mn:00000DC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00000DC0
.text$mn:00000DC0 ; Attributes: bp-based frame
.text$mn:00000DC0
.text$mn:00000DC0 ; bool __thiscall ProjectPanel::openWorkSpace(ProjectPanel *this, const wchar_t *)
.text$mn:00000DC0                 public ?openWorkSpace@ProjectPanel@@QAE_NPB_W@Z
.text$mn:00000DC0 ?openWorkSpace@ProjectPanel@@QAE_NPB_W@Z proc near
.text$mn:00000DC0                                         ; CODE XREF: ProjectPanel::popupMenuCmd(int)+560p
.text$mn:00000DC0                                         ; ProjectPanel::popupMenuCmd(int)+636p ...
.text$mn:00000DC0
.text$mn:00000DC0 var_64          = dword ptr -64h
.text$mn:00000DC0 var_60          = dword ptr -60h
.text$mn:00000DC0 var_5C          = dword ptr -5Ch
.text$mn:00000DC0 var_58          = dword ptr -58h
.text$mn:00000DC0 var_54          = dword ptr -54h
.text$mn:00000DC0 var_50          = dword ptr -50h
.text$mn:00000DC0 var_4C          = dword ptr -4Ch
.text$mn:00000DC0 var_48          = dword ptr -48h
.text$mn:00000DC0 var_44          = dword ptr -44h
.text$mn:00000DC0 var_40          = dword ptr -40h
.text$mn:00000DC0 var_3C          = dword ptr -3Ch
.text$mn:00000DC0 var_38          = dword ptr -38h
.text$mn:00000DC0 var_34          = dword ptr -34h
.text$mn:00000DC0 var_2E          = byte ptr -2Eh
.text$mn:00000DC0 var_2D          = byte ptr -2Dh
.text$mn:00000DC0 var_2C          = byte ptr -2Ch
.text$mn:00000DC0 var_10          = dword ptr -10h
.text$mn:00000DC0 var_C           = dword ptr -0Ch
.text$mn:00000DC0 var_4           = dword ptr -4
.text$mn:00000DC0 pszPath         = dword ptr  8
.text$mn:00000DC0
.text$mn:00000DC0                 push    ebp
.text$mn:00000DC1                 mov     ebp, esp
.text$mn:00000DC3                 push    0FFFFFFFFh
.text$mn:00000DC5                 push    offset __ehhandler$?openWorkSpace@ProjectPanel@@QAE_NPB_W@Z
.text$mn:00000DCA                 mov     eax, large fs:0
.text$mn:00000DD0                 push    eax
.text$mn:00000DD1                 sub     esp, 58h
.text$mn:00000DD4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000DD9                 xor     eax, ebp
.text$mn:00000DDB                 mov     [ebp+var_10], eax
.text$mn:00000DDE                 push    eax
.text$mn:00000DDF                 lea     eax, [ebp+var_C]
.text$mn:00000DE2                 mov     large fs:0, eax
.text$mn:00000DE8                 mov     [ebp+var_34], ecx
.text$mn:00000DEB                 push    74h ; 't'       ; unsigned int
.text$mn:00000DED                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00000DF2                 add     esp, 4
.text$mn:00000DF5                 mov     [ebp+var_4C], eax
.text$mn:00000DF8                 mov     [ebp+var_4], 0
.text$mn:00000DFF                 cmp     [ebp+var_4C], 0
.text$mn:00000E03                 jz      short loc_E16
.text$mn:00000E05                 mov     eax, [ebp+pszPath]
.text$mn:00000E08                 push    eax             ; wchar_t *
.text$mn:00000E09                 mov     ecx, [ebp+var_4C] ; this
.text$mn:00000E0C                 call    ??0TiXmlDocument@@QAE@PB_W@Z ; TiXmlDocument::TiXmlDocument(wchar_t const *)
.text$mn:00000E11                 mov     [ebp+var_44], eax
.text$mn:00000E14                 jmp     short loc_E1D
.text$mn:00000E16 ; ---------------------------------------------------------------------------
.text$mn:00000E16
.text$mn:00000E16 loc_E16:                                ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+43j
.text$mn:00000E16                 mov     [ebp+var_44], 0
.text$mn:00000E1D
.text$mn:00000E1D loc_E1D:                                ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+54j
.text$mn:00000E1D                 mov     ecx, [ebp+var_44]
.text$mn:00000E20                 mov     [ebp+var_64], ecx
.text$mn:00000E23                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000E2A                 mov     edx, [ebp+var_64]
.text$mn:00000E2D                 mov     [ebp+var_40], edx
.text$mn:00000E30                 mov     ecx, [ebp+var_40] ; this
.text$mn:00000E33                 call    ?LoadFile@TiXmlDocument@@QAE_NXZ ; TiXmlDocument::LoadFile(void)
.text$mn:00000E38                 mov     [ebp+var_2D], al
.text$mn:00000E3B                 movzx   eax, [ebp+var_2D]
.text$mn:00000E3F                 test    eax, eax
.text$mn:00000E41                 jnz     short loc_E4A
.text$mn:00000E43                 xor     al, al
.text$mn:00000E45                 jmp     loc_FB9
.text$mn:00000E4A ; ---------------------------------------------------------------------------
.text$mn:00000E4A
.text$mn:00000E4A loc_E4A:                                ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+81j
.text$mn:00000E4A                 push    offset $SG126488 ; "NotepadPlus"
.text$mn:00000E4F                 mov     ecx, [ebp+var_40] ; this
.text$mn:00000E52                 call    ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::FirstChild(wchar_t const *)
.text$mn:00000E57                 mov     [ebp+var_50], eax
.text$mn:00000E5A                 cmp     [ebp+var_50], 0
.text$mn:00000E5E                 jnz     short loc_E67
.text$mn:00000E60                 xor     al, al
.text$mn:00000E62                 jmp     loc_FB9
.text$mn:00000E67 ; ---------------------------------------------------------------------------
.text$mn:00000E67
.text$mn:00000E67 loc_E67:                                ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+9Ej
.text$mn:00000E67                 push    offset $SG126491 ; "Project"
.text$mn:00000E6C                 mov     ecx, [ebp+var_50] ; this
.text$mn:00000E6F                 call    ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z ; TiXmlNode::FirstChildElement(wchar_t const *)
.text$mn:00000E74                 mov     [ebp+var_38], eax
.text$mn:00000E77                 cmp     [ebp+var_38], 0
.text$mn:00000E7B                 jnz     short loc_E84
.text$mn:00000E7D                 xor     al, al
.text$mn:00000E7F                 jmp     loc_FB9
.text$mn:00000E84 ; ---------------------------------------------------------------------------
.text$mn:00000E84
.text$mn:00000E84 loc_E84:                                ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+BBj
.text$mn:00000E84                 mov     ecx, [ebp+pszPath]
.text$mn:00000E87                 push    ecx             ; pszPath
.text$mn:00000E88                 call    dword ptr ds:__imp__PathFileExistsW@4 ; PathFileExistsW(x)
.text$mn:00000E8E                 test    eax, eax
.text$mn:00000E90                 jnz     short loc_E99
.text$mn:00000E92                 xor     al, al
.text$mn:00000E94                 jmp     loc_FB9
.text$mn:00000E99 ; ---------------------------------------------------------------------------
.text$mn:00000E99
.text$mn:00000E99 loc_E99:                                ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+D0j
.text$mn:00000E99                 mov     ecx, [ebp+var_34]
.text$mn:00000E9C                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00000E9F                 call    ?removeAllItems@TreeView@@QAEXXZ ; TreeView::removeAllItems(void)
.text$mn:00000EA4                 mov     edx, [ebp+pszPath]
.text$mn:00000EA7                 push    edx             ; Str
.text$mn:00000EA8                 mov     ecx, [ebp+var_34]
.text$mn:00000EAB                 add     ecx, 0C4h ; '-'
.text$mn:00000EB1                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00000EB6                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00000EBB                 mov     ecx, eax        ; this
.text$mn:00000EBD                 call    ?getNativeLangSpeaker@NppParameters@@QAEPAVNativeLangSpeaker@@XZ ; NppParameters::getNativeLangSpeaker(void)
.text$mn:00000EC2                 mov     [ebp+var_54], eax
.text$mn:00000EC5                 push    offset $SG126497 ; "WorkspaceRootName"
.text$mn:00000ECA                 push    offset $SG126498 ; "ProjectManager"
.text$mn:00000ECF                 push    offset $SG126499 ; "Workspace"
.text$mn:00000ED4                 lea     eax, [ebp+var_2C]
.text$mn:00000ED7                 push    eax
.text$mn:00000ED8                 mov     ecx, [ebp+var_54]
.text$mn:00000EDB                 call    ?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z ; NativeLangSpeaker::getAttrNameStr(wchar_t const *,char const *,char const *)
.text$mn:00000EE0                 mov     [ebp+var_4], 1
.text$mn:00000EE7                 push    0               ; wchar_t *
.text$mn:00000EE9                 push    0               ; int
.text$mn:00000EEB                 push    0FFFF0000h      ; struct _TREEITEM *
.text$mn:00000EF0                 lea     ecx, [ebp+var_2C]
.text$mn:00000EF3                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00000EF8                 push    eax             ; wchar_t *
.text$mn:00000EF9                 mov     ecx, [ebp+var_34]
.text$mn:00000EFC                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00000EFF                 call    ?addItem@TreeView@@QAEPAU_TREEITEM@@PB_WPAU2@H0@Z ; TreeView::addItem(wchar_t const *,_TREEITEM *,int,wchar_t const *)
.text$mn:00000F04                 mov     [ebp+var_48], eax
.text$mn:00000F07                 jmp     short loc_F19
.text$mn:00000F09 ; ---------------------------------------------------------------------------
.text$mn:00000F09
.text$mn:00000F09 loc_F09:                                ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+19Aj
.text$mn:00000F09                 push    offset $SG126506 ; "Project"
.text$mn:00000F0E                 mov     ecx, [ebp+var_38] ; this
.text$mn:00000F11                 call    ?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::NextSibling(wchar_t const *)
.text$mn:00000F16                 mov     [ebp+var_38], eax
.text$mn:00000F19
.text$mn:00000F19 loc_F19:                                ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+147j
.text$mn:00000F19                 cmp     [ebp+var_38], 0
.text$mn:00000F1D                 jz      short loc_F5C
.text$mn:00000F1F                 push    0               ; wchar_t *
.text$mn:00000F21                 push    2               ; int
.text$mn:00000F23                 mov     ecx, [ebp+var_48]
.text$mn:00000F26                 push    ecx             ; struct _TREEITEM *
.text$mn:00000F27                 push    offset $SG126508 ; "name"
.text$mn:00000F2C                 mov     ecx, [ebp+var_38] ; this
.text$mn:00000F2F                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:00000F34                 mov     ecx, eax        ; this
.text$mn:00000F36                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:00000F3B                 push    eax             ; wchar_t *
.text$mn:00000F3C                 mov     ecx, [ebp+var_34]
.text$mn:00000F3F                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00000F42                 call    ?addItem@TreeView@@QAEPAU_TREEITEM@@PB_WPAU2@H0@Z ; TreeView::addItem(wchar_t const *,_TREEITEM *,int,wchar_t const *)
.text$mn:00000F47                 mov     [ebp+var_60], eax
.text$mn:00000F4A                 mov     edx, [ebp+var_60]
.text$mn:00000F4D                 push    edx             ; struct _TREEITEM *
.text$mn:00000F4E                 mov     eax, [ebp+var_38]
.text$mn:00000F51                 push    eax             ; struct TiXmlNode *
.text$mn:00000F52                 mov     ecx, [ebp+var_34] ; this
.text$mn:00000F55                 call    ?buildTreeFrom@ProjectPanel@@IAE_NPAVTiXmlNode@@PAU_TREEITEM@@@Z ; ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)
.text$mn:00000F5A                 jmp     short loc_F09
.text$mn:00000F5C ; ---------------------------------------------------------------------------
.text$mn:00000F5C
.text$mn:00000F5C loc_F5C:                                ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+15Dj
.text$mn:00000F5C                 push    0               ; bool
.text$mn:00000F5E                 mov     ecx, [ebp+var_34] ; this
.text$mn:00000F61                 call    ?setWorkSpaceDirty@ProjectPanel@@IAEX_N@Z ; ProjectPanel::setWorkSpaceDirty(bool)
.text$mn:00000F66                 mov     ecx, [ebp+var_48]
.text$mn:00000F69                 push    ecx             ; struct _TREEITEM *
.text$mn:00000F6A                 mov     ecx, [ebp+var_34]
.text$mn:00000F6D                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00000F70                 call    ?expand@TreeView@@QBEXPAU_TREEITEM@@@Z ; TreeView::expand(_TREEITEM *)
.text$mn:00000F75                 mov     edx, [ebp+var_40]
.text$mn:00000F78                 mov     [ebp+var_58], edx
.text$mn:00000F7B                 mov     eax, [ebp+var_58]
.text$mn:00000F7E                 mov     [ebp+var_3C], eax
.text$mn:00000F81                 cmp     [ebp+var_3C], 0
.text$mn:00000F85                 jz      short loc_F9A
.text$mn:00000F87                 push    1
.text$mn:00000F89                 mov     ecx, [ebp+var_3C]
.text$mn:00000F8C                 mov     edx, [ecx]
.text$mn:00000F8E                 mov     ecx, [ebp+var_3C]
.text$mn:00000F91                 mov     eax, [edx]
.text$mn:00000F93                 call    eax
.text$mn:00000F95                 mov     [ebp+var_5C], eax
.text$mn:00000F98                 jmp     short loc_FA1
.text$mn:00000F9A ; ---------------------------------------------------------------------------
.text$mn:00000F9A
.text$mn:00000F9A loc_F9A:                                ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+1C5j
.text$mn:00000F9A                 mov     [ebp+var_5C], 0
.text$mn:00000FA1
.text$mn:00000FA1 loc_FA1:                                ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+1D8j
.text$mn:00000FA1                 mov     cl, [ebp+var_2D]
.text$mn:00000FA4                 mov     [ebp+var_2E], cl
.text$mn:00000FA7                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000FAE                 lea     ecx, [ebp+var_2C]
.text$mn:00000FB1                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00000FB6                 mov     al, [ebp+var_2E]
.text$mn:00000FB9
.text$mn:00000FB9 loc_FB9:                                ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+85j
.text$mn:00000FB9                                         ; ProjectPanel::openWorkSpace(wchar_t const *)+A2j ...
.text$mn:00000FB9                 mov     ecx, [ebp+var_C]
.text$mn:00000FBC                 mov     large fs:0, ecx
.text$mn:00000FC3                 pop     ecx
.text$mn:00000FC4                 mov     ecx, [ebp+var_10]
.text$mn:00000FC7                 xor     ecx, ebp
.text$mn:00000FC9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00000FCE                 mov     esp, ebp
.text$mn:00000FD0                 pop     ebp
.text$mn:00000FD1                 retn    4
.text$mn:00000FD1 ?openWorkSpace@ProjectPanel@@QAE_NPB_W@Z endp
.text$mn:00000FD1
.text$mn:00000FD1 ; ---------------------------------------------------------------------------
.text$mn:00000FD4                 align 10h
.text$mn:00000FE0
.text$mn:00000FE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00000FE0
.text$mn:00000FE0 ; Attributes: bp-based frame
.text$mn:00000FE0
.text$mn:00000FE0 ; bool __thiscall ProjectPanel::saveWorkSpace(ProjectPanel *__hidden this)
.text$mn:00000FE0                 public ?saveWorkSpace@ProjectPanel@@QAE_NXZ
.text$mn:00000FE0 ?saveWorkSpace@ProjectPanel@@QAE_NXZ proc near
.text$mn:00000FE0                                         ; CODE XREF: ProjectPanel::checkIfNeedSave(wchar_t const *)+4Ap
.text$mn:00000FE0                                         ; ProjectPanel::popupMenuCmd(int)+2B3p ...
.text$mn:00000FE0
.text$mn:00000FE0 var_4           = dword ptr -4
.text$mn:00000FE0
.text$mn:00000FE0                 push    ebp
.text$mn:00000FE1                 mov     ebp, esp
.text$mn:00000FE3                 push    ecx
.text$mn:00000FE4                 mov     [ebp+var_4], ecx
.text$mn:00000FE7                 push    offset $SG126544 ; Str
.text$mn:00000FEC                 mov     eax, [ebp+var_4]
.text$mn:00000FEF                 add     eax, 0C4h ; '-'
.text$mn:00000FF4                 push    eax             ; int
.text$mn:00000FF5                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00000FFA                 add     esp, 8
.text$mn:00000FFD                 movzx   ecx, al
.text$mn:00001000                 test    ecx, ecx
.text$mn:00001002                 jz      short loc_1012
.text$mn:00001004                 push    0               ; bool
.text$mn:00001006                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001009                 call    ?saveWorkSpaceAs@ProjectPanel@@QAE_N_N@Z ; ProjectPanel::saveWorkSpaceAs(bool)
.text$mn:0000100E                 jmp     short loc_1032
.text$mn:00001010 ; ---------------------------------------------------------------------------
.text$mn:00001010                 jmp     short loc_1032
.text$mn:00001012 ; ---------------------------------------------------------------------------
.text$mn:00001012
.text$mn:00001012 loc_1012:                               ; CODE XREF: ProjectPanel::saveWorkSpace(void)+22j
.text$mn:00001012                 push    0               ; wchar_t *
.text$mn:00001014                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001017                 call    ?writeWorkSpace@ProjectPanel@@IAE_NPA_W@Z ; ProjectPanel::writeWorkSpace(wchar_t *)
.text$mn:0000101C                 push    0               ; bool
.text$mn:0000101E                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001021                 call    ?setWorkSpaceDirty@ProjectPanel@@IAEX_N@Z ; ProjectPanel::setWorkSpaceDirty(bool)
.text$mn:00001026                 mov     edx, [ebp+var_4]
.text$mn:00001029                 mov     byte ptr [edx+0FCh], 0
.text$mn:00001030                 mov     al, 1
.text$mn:00001032
.text$mn:00001032 loc_1032:                               ; CODE XREF: ProjectPanel::saveWorkSpace(void)+2Ej
.text$mn:00001032                                         ; ProjectPanel::saveWorkSpace(void)+30j
.text$mn:00001032                 mov     esp, ebp
.text$mn:00001034                 pop     ebp
.text$mn:00001035                 retn
.text$mn:00001035 ?saveWorkSpace@ProjectPanel@@QAE_NXZ endp
.text$mn:00001035
.text$mn:00001035 ; ---------------------------------------------------------------------------
.text$mn:00001036                 align 10h
.text$mn:00001040
.text$mn:00001040 ; =============== S U B R O U T I N E =======================================
.text$mn:00001040
.text$mn:00001040 ; Attributes: bp-based frame
.text$mn:00001040
.text$mn:00001040 ; bool __thiscall ProjectPanel::saveWorkSpaceAs(ProjectPanel *this, bool)
.text$mn:00001040                 public ?saveWorkSpaceAs@ProjectPanel@@QAE_N_N@Z
.text$mn:00001040 ?saveWorkSpaceAs@ProjectPanel@@QAE_N_N@Z proc near
.text$mn:00001040                                         ; CODE XREF: ProjectPanel::saveWorkSpace(void)+29p
.text$mn:00001040                                         ; ProjectPanel::popupMenuCmd(int)+695p
.text$mn:00001040
.text$mn:00001040 Str             = dword ptr -10D8h
.text$mn:00001040 var_10D4        = dword ptr -10D4h
.text$mn:00001040 var_10CE        = byte ptr -10CEh
.text$mn:00001040 var_10CD        = byte ptr -10CDh
.text$mn:00001040 var_10CC        = byte ptr -10CCh
.text$mn:00001040 var_10          = dword ptr -10h
.text$mn:00001040 var_C           = dword ptr -0Ch
.text$mn:00001040 var_4           = dword ptr -4
.text$mn:00001040 arg_0           = byte ptr  8
.text$mn:00001040
.text$mn:00001040                 push    ebp
.text$mn:00001041                 mov     ebp, esp
.text$mn:00001043                 push    0FFFFFFFFh
.text$mn:00001045                 push    offset __ehhandler$?saveWorkSpaceAs@ProjectPanel@@QAE_N_N@Z
.text$mn:0000104A                 mov     eax, large fs:0
.text$mn:00001050                 push    eax
.text$mn:00001051                 mov     eax, 10CCh
.text$mn:00001056                 call    __chkstk
.text$mn:0000105B                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001060                 xor     eax, ebp
.text$mn:00001062                 mov     [ebp+var_10], eax
.text$mn:00001065                 push    eax
.text$mn:00001066                 lea     eax, [ebp+var_C]
.text$mn:00001069                 mov     large fs:0, eax
.text$mn:0000106F                 mov     [ebp+var_10D4], ecx
.text$mn:00001075                 push    0               ; lpModuleName
.text$mn:00001077                 call    dword ptr ds:__imp__GetModuleHandleW@4 ; GetModuleHandleW(x)
.text$mn:0000107D                 push    eax             ; HINSTANCE
.text$mn:0000107E                 mov     eax, [ebp+var_10D4]
.text$mn:00001084                 mov     ecx, [eax+0Ch]
.text$mn:00001087                 push    ecx             ; HWND
.text$mn:00001088                 lea     ecx, [ebp+var_10CC] ; this
.text$mn:0000108E                 call    ??0FileDialog@@QAE@PAUHWND__@@PAUHINSTANCE__@@@Z ; FileDialog::FileDialog(HWND__ *,HINSTANCE__ *)
.text$mn:00001093                 mov     [ebp+var_4], 0
.text$mn:0000109A                 push    0
.text$mn:0000109C                 push    offset $SG127027 ; ".*"
.text$mn:000010A1                 push    offset $SG127028 ; "All types"
.text$mn:000010A6                 lea     edx, [ebp+var_10CC]
.text$mn:000010AC                 push    edx             ; this
.text$mn:000010AD                 call    ?setExtFilter@FileDialog@@QAAXPB_W0ZZ ; FileDialog::setExtFilter(wchar_t const *,wchar_t const *,...)
.text$mn:000010B2                 add     esp, 10h
.text$mn:000010B5                 lea     ecx, [ebp+var_10CC] ; this
.text$mn:000010BB                 call    ?doSaveDlg@FileDialog@@QAEPA_WXZ ; FileDialog::doSaveDlg(void)
.text$mn:000010C0                 mov     [ebp+Str], eax
.text$mn:000010C6                 cmp     [ebp+Str], 0
.text$mn:000010CD                 jz      short loc_112F
.text$mn:000010CF                 mov     eax, [ebp+Str]
.text$mn:000010D5                 push    eax             ; wchar_t *
.text$mn:000010D6                 mov     ecx, [ebp+var_10D4] ; this
.text$mn:000010DC                 call    ?writeWorkSpace@ProjectPanel@@IAE_NPA_W@Z ; ProjectPanel::writeWorkSpace(wchar_t *)
.text$mn:000010E1                 movzx   ecx, [ebp+arg_0]
.text$mn:000010E5                 test    ecx, ecx
.text$mn:000010E7                 jnz     short loc_110E
.text$mn:000010E9                 mov     edx, [ebp+Str]
.text$mn:000010EF                 push    edx             ; Str
.text$mn:000010F0                 mov     ecx, [ebp+var_10D4]
.text$mn:000010F6                 add     ecx, 0C4h ; '-'
.text$mn:000010FC                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00001101                 push    0               ; bool
.text$mn:00001103                 mov     ecx, [ebp+var_10D4] ; this
.text$mn:00001109                 call    ?setWorkSpaceDirty@ProjectPanel@@IAEX_N@Z ; ProjectPanel::setWorkSpaceDirty(bool)
.text$mn:0000110E
.text$mn:0000110E loc_110E:                               ; CODE XREF: ProjectPanel::saveWorkSpaceAs(bool)+A7j
.text$mn:0000110E                 mov     [ebp+var_10CE], 1
.text$mn:00001115                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000111C                 lea     ecx, [ebp+var_10CC] ; this
.text$mn:00001122                 call    ??1FileDialog@@QAE@XZ ; FileDialog::~FileDialog(void)
.text$mn:00001127                 mov     al, [ebp+var_10CE]
.text$mn:0000112D                 jmp     short loc_114E
.text$mn:0000112F ; ---------------------------------------------------------------------------
.text$mn:0000112F
.text$mn:0000112F loc_112F:                               ; CODE XREF: ProjectPanel::saveWorkSpaceAs(bool)+8Dj
.text$mn:0000112F                 mov     [ebp+var_10CD], 0
.text$mn:00001136                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000113D                 lea     ecx, [ebp+var_10CC] ; this
.text$mn:00001143                 call    ??1FileDialog@@QAE@XZ ; FileDialog::~FileDialog(void)
.text$mn:00001148                 mov     al, [ebp+var_10CD]
.text$mn:0000114E
.text$mn:0000114E loc_114E:                               ; CODE XREF: ProjectPanel::saveWorkSpaceAs(bool)+EDj
.text$mn:0000114E                 mov     ecx, [ebp+var_C]
.text$mn:00001151                 mov     large fs:0, ecx
.text$mn:00001158                 pop     ecx
.text$mn:00001159                 mov     ecx, [ebp+var_10]
.text$mn:0000115C                 xor     ecx, ebp
.text$mn:0000115E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00001163                 mov     esp, ebp
.text$mn:00001165                 pop     ebp
.text$mn:00001166                 retn    4
.text$mn:00001166 ?saveWorkSpaceAs@ProjectPanel@@QAE_N_N@Z endp
.text$mn:00001166
.text$mn:00001166 ; ---------------------------------------------------------------------------
.text$mn:00001169                 align 10h
.text$mn:00001170
.text$mn:00001170 ; =============== S U B R O U T I N E =======================================
.text$mn:00001170
.text$mn:00001170 ; Attributes: bp-based frame
.text$mn:00001170
.text$mn:00001170 ; void __thiscall ProjectPanel::checkIfNeedSave(ProjectPanel *this, const wchar_t *)
.text$mn:00001170                 public ?checkIfNeedSave@ProjectPanel@@QAEXPB_W@Z
.text$mn:00001170 ?checkIfNeedSave@ProjectPanel@@QAEXPB_W@Z proc near
.text$mn:00001170
.text$mn:00001170 var_8           = dword ptr -8
.text$mn:00001170 var_4           = dword ptr -4
.text$mn:00001170 lpCaption       = dword ptr  8
.text$mn:00001170
.text$mn:00001170                 push    ebp
.text$mn:00001171                 mov     ebp, esp
.text$mn:00001173                 sub     esp, 8
.text$mn:00001176                 mov     [ebp+var_4], ecx
.text$mn:00001179                 mov     eax, [ebp+var_4]
.text$mn:0000117C                 movzx   ecx, byte ptr [eax+0FCh]
.text$mn:00001183                 test    ecx, ecx
.text$mn:00001185                 jz      short loc_11DE
.text$mn:00001187                 push    1
.text$mn:00001189                 mov     edx, [ebp+var_4]
.text$mn:0000118C                 mov     eax, [edx]
.text$mn:0000118E                 mov     ecx, [ebp+var_4]
.text$mn:00001191                 mov     edx, [eax+0Ch]
.text$mn:00001194                 call    edx
.text$mn:00001196                 push    24h ; '$'       ; uType
.text$mn:00001198                 mov     eax, [ebp+lpCaption]
.text$mn:0000119B                 push    eax             ; lpCaption
.text$mn:0000119C                 push    offset $SG126319 ; "The workspace was modified. Do you want"...
.text$mn:000011A1                 mov     ecx, [ebp+var_4]
.text$mn:000011A4                 mov     edx, [ecx+0Ch]
.text$mn:000011A7                 push    edx             ; hWnd
.text$mn:000011A8                 call    dword ptr ds:__imp__MessageBoxW@16 ; MessageBoxW(x,x,x,x)
.text$mn:000011AE                 mov     [ebp+var_8], eax
.text$mn:000011B1                 cmp     [ebp+var_8], 6
.text$mn:000011B5                 jnz     short loc_11DE
.text$mn:000011B7                 mov     ecx, [ebp+var_4] ; this
.text$mn:000011BA                 call    ?saveWorkSpace@ProjectPanel@@QAE_NXZ ; ProjectPanel::saveWorkSpace(void)
.text$mn:000011BF                 movzx   eax, al
.text$mn:000011C2                 test    eax, eax
.text$mn:000011C4                 jnz     short loc_11DE
.text$mn:000011C6                 push    10h             ; uType
.text$mn:000011C8                 mov     ecx, [ebp+lpCaption]
.text$mn:000011CB                 push    ecx             ; lpCaption
.text$mn:000011CC                 push    offset $SG126322 ; "Your workspace was not saved."
.text$mn:000011D1                 mov     edx, [ebp+var_4]
.text$mn:000011D4                 mov     eax, [edx+0Ch]
.text$mn:000011D7                 push    eax             ; hWnd
.text$mn:000011D8                 call    dword ptr ds:__imp__MessageBoxW@16 ; MessageBoxW(x,x,x,x)
.text$mn:000011DE
.text$mn:000011DE loc_11DE:                               ; CODE XREF: ProjectPanel::checkIfNeedSave(wchar_t const *)+15j
.text$mn:000011DE                                         ; ProjectPanel::checkIfNeedSave(wchar_t const *)+45j ...
.text$mn:000011DE                 mov     esp, ebp
.text$mn:000011E0                 pop     ebp
.text$mn:000011E1                 retn    4
.text$mn:000011E1 ?checkIfNeedSave@ProjectPanel@@QAEXPB_W@Z endp
.text$mn:000011E1
.text$mn:000011E1 ; ---------------------------------------------------------------------------
.text$mn:000011E4                 align 10h
.text$mn:000011F0
.text$mn:000011F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000011F0
.text$mn:000011F0 ; Attributes: bp-based frame
.text$mn:000011F0
.text$mn:000011F0 ; void __thiscall ProjectPanel::initMenus(ProjectPanel *__hidden this)
.text$mn:000011F0                 public ?initMenus@ProjectPanel@@IAEXXZ
.text$mn:000011F0 ?initMenus@ProjectPanel@@IAEXXZ proc near
.text$mn:000011F0                                         ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+B9p
.text$mn:000011F0
.text$mn:000011F0 var_348         = dword ptr -348h
.text$mn:000011F0 var_344         = dword ptr -344h
.text$mn:000011F0 var_340         = dword ptr -340h
.text$mn:000011F0 var_33C         = dword ptr -33Ch
.text$mn:000011F0 var_338         = dword ptr -338h
.text$mn:000011F0 var_334         = dword ptr -334h
.text$mn:000011F0 var_330         = dword ptr -330h
.text$mn:000011F0 var_32C         = dword ptr -32Ch
.text$mn:000011F0 var_328         = dword ptr -328h
.text$mn:000011F0 var_324         = dword ptr -324h
.text$mn:000011F0 var_320         = dword ptr -320h
.text$mn:000011F0 var_31C         = dword ptr -31Ch
.text$mn:000011F0 var_318         = dword ptr -318h
.text$mn:000011F0 var_314         = dword ptr -314h
.text$mn:000011F0 var_310         = dword ptr -310h
.text$mn:000011F0 var_30C         = dword ptr -30Ch
.text$mn:000011F0 var_308         = dword ptr -308h
.text$mn:000011F0 var_304         = dword ptr -304h
.text$mn:000011F0 var_300         = dword ptr -300h
.text$mn:000011F0 var_2FC         = dword ptr -2FCh
.text$mn:000011F0 var_2F8         = dword ptr -2F8h
.text$mn:000011F0 var_2F4         = dword ptr -2F4h
.text$mn:000011F0 var_2F0         = dword ptr -2F0h
.text$mn:000011F0 var_2EC         = dword ptr -2ECh
.text$mn:000011F0 var_2E8         = byte ptr -2E8h
.text$mn:000011F0 var_2CC         = byte ptr -2CCh
.text$mn:000011F0 var_2B0         = byte ptr -2B0h
.text$mn:000011F0 var_294         = byte ptr -294h
.text$mn:000011F0 var_278         = byte ptr -278h
.text$mn:000011F0 var_25C         = byte ptr -25Ch
.text$mn:000011F0 var_240         = byte ptr -240h
.text$mn:000011F0 var_224         = byte ptr -224h
.text$mn:000011F0 var_208         = byte ptr -208h
.text$mn:000011F0 var_1EC         = byte ptr -1ECh
.text$mn:000011F0 var_1D0         = byte ptr -1D0h
.text$mn:000011F0 var_1B4         = byte ptr -1B4h
.text$mn:000011F0 var_198         = byte ptr -198h
.text$mn:000011F0 var_17C         = byte ptr -17Ch
.text$mn:000011F0 var_160         = byte ptr -160h
.text$mn:000011F0 var_144         = byte ptr -144h
.text$mn:000011F0 var_128         = byte ptr -128h
.text$mn:000011F0 var_10C         = byte ptr -10Ch
.text$mn:000011F0 var_F0          = byte ptr -0F0h
.text$mn:000011F0 var_D4          = byte ptr -0D4h
.text$mn:000011F0 var_B8          = byte ptr -0B8h
.text$mn:000011F0 var_9C          = byte ptr -9Ch
.text$mn:000011F0 var_80          = byte ptr -80h
.text$mn:000011F0 var_64          = byte ptr -64h
.text$mn:000011F0 var_48          = byte ptr -48h
.text$mn:000011F0 var_2C          = byte ptr -2Ch
.text$mn:000011F0 var_10          = dword ptr -10h
.text$mn:000011F0 var_C           = dword ptr -0Ch
.text$mn:000011F0 var_4           = dword ptr -4
.text$mn:000011F0
.text$mn:000011F0                 push    ebp
.text$mn:000011F1                 mov     ebp, esp
.text$mn:000011F3                 push    0FFFFFFFFh
.text$mn:000011F5                 push    offset __ehhandler$?initMenus@ProjectPanel@@IAEXXZ
.text$mn:000011FA                 mov     eax, large fs:0
.text$mn:00001200                 push    eax
.text$mn:00001201                 sub     esp, 33Ch
.text$mn:00001207                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000120C                 xor     eax, ebp
.text$mn:0000120E                 mov     [ebp+var_10], eax
.text$mn:00001211                 push    eax
.text$mn:00001212                 lea     eax, [ebp+var_C]
.text$mn:00001215                 mov     large fs:0, eax
.text$mn:0000121B                 mov     [ebp+var_2EC], ecx
.text$mn:00001221                 call    dword ptr ds:__imp__CreatePopupMenu@0 ; CreatePopupMenu()
.text$mn:00001227                 mov     ecx, [ebp+var_2EC]
.text$mn:0000122D                 mov     [ecx+0B4h], eax
.text$mn:00001233                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00001238                 mov     ecx, eax        ; this
.text$mn:0000123A                 call    ?getNativeLangSpeaker@NppParameters@@QAEPAVNativeLangSpeaker@@XZ ; NppParameters::getNativeLangSpeaker(void)
.text$mn:0000123F                 mov     [ebp+var_2F0], eax
.text$mn:00001245                 push    offset $SG126329 ; "New Workspace"
.text$mn:0000124A                 push    0C32h
.text$mn:0000124F                 push    offset $SG126330 ; "WorkspaceMenu"
.text$mn:00001254                 lea     edx, [ebp+var_128]
.text$mn:0000125A                 push    edx
.text$mn:0000125B                 mov     ecx, [ebp+var_2F0]
.text$mn:00001261                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:00001266                 mov     [ebp+var_4], 0
.text$mn:0000126D                 push    offset $SG126333 ; "Open Workspace"
.text$mn:00001272                 push    0C33h
.text$mn:00001277                 push    offset $SG126334 ; "WorkspaceMenu"
.text$mn:0000127C                 lea     eax, [ebp+var_1B4]
.text$mn:00001282                 push    eax
.text$mn:00001283                 mov     ecx, [ebp+var_2F0]
.text$mn:00001289                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:0000128E                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001292                 push    offset $SG126337 ; "Reload Workspace"
.text$mn:00001297                 push    0C34h
.text$mn:0000129C                 push    offset $SG126338 ; "WorkspaceMenu"
.text$mn:000012A1                 lea     ecx, [ebp+var_F0]
.text$mn:000012A7                 push    ecx
.text$mn:000012A8                 mov     ecx, [ebp+var_2F0]
.text$mn:000012AE                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:000012B3                 mov     byte ptr [ebp+var_4], 2
.text$mn:000012B7                 push    offset $SG126341 ; "Save"
.text$mn:000012BC                 push    0C35h
.text$mn:000012C1                 push    offset $SG126342 ; "WorkspaceMenu"
.text$mn:000012C6                 lea     edx, [ebp+var_17C]
.text$mn:000012CC                 push    edx
.text$mn:000012CD                 mov     ecx, [ebp+var_2F0]
.text$mn:000012D3                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:000012D8                 mov     byte ptr [ebp+var_4], 3
.text$mn:000012DC                 push    offset $SG126345 ; "Save As..."
.text$mn:000012E1                 push    0C36h
.text$mn:000012E6                 push    offset $SG126346 ; "WorkspaceMenu"
.text$mn:000012EB                 lea     eax, [ebp+var_144]
.text$mn:000012F1                 push    eax
.text$mn:000012F2                 mov     ecx, [ebp+var_2F0]
.text$mn:000012F8                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:000012FD                 mov     byte ptr [ebp+var_4], 4
.text$mn:00001301                 push    offset $SG126349 ; "Save a Copy As..."
.text$mn:00001306                 push    0C37h
.text$mn:0000130B                 push    offset $SG126350 ; "WorkspaceMenu"
.text$mn:00001310                 lea     ecx, [ebp+var_10C]
.text$mn:00001316                 push    ecx
.text$mn:00001317                 mov     ecx, [ebp+var_2F0]
.text$mn:0000131D                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:00001322                 mov     byte ptr [ebp+var_4], 5
.text$mn:00001326                 push    offset $SG126353 ; "Add New Project"
.text$mn:0000132B                 push    0C31h
.text$mn:00001330                 push    offset $SG126354 ; "WorkspaceMenu"
.text$mn:00001335                 lea     edx, [ebp+var_160]
.text$mn:0000133B                 push    edx
.text$mn:0000133C                 mov     ecx, [ebp+var_2F0]
.text$mn:00001342                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:00001347                 mov     byte ptr [ebp+var_4], 6
.text$mn:0000134B                 lea     ecx, [ebp+var_128]
.text$mn:00001351                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001356                 push    eax             ; lpNewItem
.text$mn:00001357                 push    0C32h           ; uIDNewItem
.text$mn:0000135C                 push    0               ; uFlags
.text$mn:0000135E                 push    0               ; uPosition
.text$mn:00001360                 mov     eax, [ebp+var_2EC]
.text$mn:00001366                 mov     ecx, [eax+0B4h]
.text$mn:0000136C                 push    ecx             ; hMenu
.text$mn:0000136D                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:00001373                 lea     ecx, [ebp+var_1B4]
.text$mn:00001379                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000137E                 push    eax             ; lpNewItem
.text$mn:0000137F                 push    0C33h           ; uIDNewItem
.text$mn:00001384                 push    0               ; uFlags
.text$mn:00001386                 push    0               ; uPosition
.text$mn:00001388                 mov     edx, [ebp+var_2EC]
.text$mn:0000138E                 mov     eax, [edx+0B4h]
.text$mn:00001394                 push    eax             ; hMenu
.text$mn:00001395                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:0000139B                 lea     ecx, [ebp+var_F0]
.text$mn:000013A1                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000013A6                 push    eax             ; lpNewItem
.text$mn:000013A7                 push    0C34h           ; uIDNewItem
.text$mn:000013AC                 push    0               ; uFlags
.text$mn:000013AE                 push    0               ; uPosition
.text$mn:000013B0                 mov     ecx, [ebp+var_2EC]
.text$mn:000013B6                 mov     edx, [ecx+0B4h]
.text$mn:000013BC                 push    edx             ; hMenu
.text$mn:000013BD                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:000013C3                 lea     ecx, [ebp+var_17C]
.text$mn:000013C9                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000013CE                 push    eax             ; lpNewItem
.text$mn:000013CF                 push    0C35h           ; uIDNewItem
.text$mn:000013D4                 push    0               ; uFlags
.text$mn:000013D6                 push    0               ; uPosition
.text$mn:000013D8                 mov     eax, [ebp+var_2EC]
.text$mn:000013DE                 mov     ecx, [eax+0B4h]
.text$mn:000013E4                 push    ecx             ; hMenu
.text$mn:000013E5                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:000013EB                 lea     ecx, [ebp+var_144]
.text$mn:000013F1                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000013F6                 push    eax             ; lpNewItem
.text$mn:000013F7                 push    0C36h           ; uIDNewItem
.text$mn:000013FC                 push    0               ; uFlags
.text$mn:000013FE                 push    0               ; uPosition
.text$mn:00001400                 mov     edx, [ebp+var_2EC]
.text$mn:00001406                 mov     eax, [edx+0B4h]
.text$mn:0000140C                 push    eax             ; hMenu
.text$mn:0000140D                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:00001413                 lea     ecx, [ebp+var_10C]
.text$mn:00001419                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000141E                 push    eax             ; lpNewItem
.text$mn:0000141F                 push    0C37h           ; uIDNewItem
.text$mn:00001424                 push    0               ; uFlags
.text$mn:00001426                 push    0               ; uPosition
.text$mn:00001428                 mov     ecx, [ebp+var_2EC]
.text$mn:0000142E                 mov     edx, [ecx+0B4h]
.text$mn:00001434                 push    edx             ; hMenu
.text$mn:00001435                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:0000143B                 push    0               ; lpNewItem
.text$mn:0000143D                 push    0FFFFFFFFh      ; uIDNewItem
.text$mn:0000143F                 push    0               ; uFlags
.text$mn:00001441                 push    0               ; uPosition
.text$mn:00001443                 mov     eax, [ebp+var_2EC]
.text$mn:00001449                 mov     ecx, [eax+0B4h]
.text$mn:0000144F                 push    ecx             ; hMenu
.text$mn:00001450                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:00001456                 lea     ecx, [ebp+var_160]
.text$mn:0000145C                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001461                 push    eax             ; lpNewItem
.text$mn:00001462                 push    0C31h           ; uIDNewItem
.text$mn:00001467                 push    0               ; uFlags
.text$mn:00001469                 push    0               ; uPosition
.text$mn:0000146B                 mov     edx, [ebp+var_2EC]
.text$mn:00001471                 mov     eax, [edx+0B4h]
.text$mn:00001477                 push    eax             ; hMenu
.text$mn:00001478                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:0000147E                 push    offset $SG126358 ; "Move Up\tCtrl+Up"
.text$mn:00001483                 push    0C2Eh
.text$mn:00001488                 push    offset $SG126359 ; "ProjectMenu"
.text$mn:0000148D                 lea     ecx, [ebp+var_64]
.text$mn:00001490                 push    ecx
.text$mn:00001491                 mov     ecx, [ebp+var_2F0]
.text$mn:00001497                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:0000149C                 mov     byte ptr [ebp+var_4], 7
.text$mn:000014A0                 push    offset $SG126362 ; "Move Down\tCtrl+Down"
.text$mn:000014A5                 push    0C2Fh
.text$mn:000014AA                 push    offset $SG126363 ; "ProjectMenu"
.text$mn:000014AF                 lea     edx, [ebp+var_80]
.text$mn:000014B2                 push    edx
.text$mn:000014B3                 mov     ecx, [ebp+var_2F0]
.text$mn:000014B9                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:000014BE                 mov     byte ptr [ebp+var_4], 8
.text$mn:000014C2                 push    offset $SG126366 ; "Rename"
.text$mn:000014C7                 push    0C27h
.text$mn:000014CC                 push    offset $SG126367 ; "ProjectMenu"
.text$mn:000014D1                 lea     eax, [ebp+var_48]
.text$mn:000014D4                 push    eax
.text$mn:000014D5                 mov     ecx, [ebp+var_2F0]
.text$mn:000014DB                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:000014E0                 mov     byte ptr [ebp+var_4], 9
.text$mn:000014E4                 push    offset $SG126370 ; "Add Folder"
.text$mn:000014E9                 push    0C28h
.text$mn:000014EE                 push    offset $SG126371 ; "ProjectMenu"
.text$mn:000014F3                 lea     ecx, [ebp+var_9C]
.text$mn:000014F9                 push    ecx
.text$mn:000014FA                 mov     ecx, [ebp+var_2F0]
.text$mn:00001500                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:00001505                 mov     byte ptr [ebp+var_4], 0Ah
.text$mn:00001509                 push    offset $SG126374 ; "Add Files..."
.text$mn:0000150E                 push    0C29h
.text$mn:00001513                 push    offset $SG126375 ; "ProjectMenu"
.text$mn:00001518                 lea     edx, [ebp+var_D4]
.text$mn:0000151E                 push    edx
.text$mn:0000151F                 mov     ecx, [ebp+var_2F0]
.text$mn:00001525                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:0000152A                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:0000152E                 push    offset $SG126378 ; "Add Files from Directory..."
.text$mn:00001533                 push    0C2Dh
.text$mn:00001538                 push    offset $SG126379 ; "ProjectMenu"
.text$mn:0000153D                 lea     eax, [ebp+var_B8]
.text$mn:00001543                 push    eax
.text$mn:00001544                 mov     ecx, [ebp+var_2F0]
.text$mn:0000154A                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:0000154F                 mov     byte ptr [ebp+var_4], 0Ch
.text$mn:00001553                 push    offset $SG126382 ; "Remove\tDEL"
.text$mn:00001558                 push    0C2Ah
.text$mn:0000155D                 push    offset $SG126383 ; "ProjectMenu"
.text$mn:00001562                 lea     ecx, [ebp+var_2C]
.text$mn:00001565                 push    ecx
.text$mn:00001566                 mov     ecx, [ebp+var_2F0]
.text$mn:0000156C                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:00001571                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:00001575                 call    dword ptr ds:__imp__CreatePopupMenu@0 ; CreatePopupMenu()
.text$mn:0000157B                 mov     edx, [ebp+var_2EC]
.text$mn:00001581                 mov     [edx+0B8h], eax
.text$mn:00001587                 lea     ecx, [ebp+var_64]
.text$mn:0000158A                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000158F                 push    eax             ; lpNewItem
.text$mn:00001590                 push    0C2Eh           ; uIDNewItem
.text$mn:00001595                 push    0               ; uFlags
.text$mn:00001597                 push    0               ; uPosition
.text$mn:00001599                 mov     eax, [ebp+var_2EC]
.text$mn:0000159F                 mov     ecx, [eax+0B8h]
.text$mn:000015A5                 push    ecx             ; hMenu
.text$mn:000015A6                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:000015AC                 lea     ecx, [ebp+var_80]
.text$mn:000015AF                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000015B4                 push    eax             ; lpNewItem
.text$mn:000015B5                 push    0C2Fh           ; uIDNewItem
.text$mn:000015BA                 push    0               ; uFlags
.text$mn:000015BC                 push    0               ; uPosition
.text$mn:000015BE                 mov     edx, [ebp+var_2EC]
.text$mn:000015C4                 mov     eax, [edx+0B8h]
.text$mn:000015CA                 push    eax             ; hMenu
.text$mn:000015CB                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:000015D1                 push    0               ; lpNewItem
.text$mn:000015D3                 push    0FFFFFFFFh      ; uIDNewItem
.text$mn:000015D5                 push    0               ; uFlags
.text$mn:000015D7                 push    0               ; uPosition
.text$mn:000015D9                 mov     ecx, [ebp+var_2EC]
.text$mn:000015DF                 mov     edx, [ecx+0B8h]
.text$mn:000015E5                 push    edx             ; hMenu
.text$mn:000015E6                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:000015EC                 lea     ecx, [ebp+var_48]
.text$mn:000015EF                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000015F4                 push    eax             ; lpNewItem
.text$mn:000015F5                 push    0C27h           ; uIDNewItem
.text$mn:000015FA                 push    0               ; uFlags
.text$mn:000015FC                 push    0               ; uPosition
.text$mn:000015FE                 mov     eax, [ebp+var_2EC]
.text$mn:00001604                 mov     ecx, [eax+0B8h]
.text$mn:0000160A                 push    ecx             ; hMenu
.text$mn:0000160B                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:00001611                 lea     ecx, [ebp+var_9C]
.text$mn:00001617                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000161C                 push    eax             ; lpNewItem
.text$mn:0000161D                 push    0C28h           ; uIDNewItem
.text$mn:00001622                 push    0               ; uFlags
.text$mn:00001624                 push    0               ; uPosition
.text$mn:00001626                 mov     edx, [ebp+var_2EC]
.text$mn:0000162C                 mov     eax, [edx+0B8h]
.text$mn:00001632                 push    eax             ; hMenu
.text$mn:00001633                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:00001639                 lea     ecx, [ebp+var_D4]
.text$mn:0000163F                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001644                 push    eax             ; lpNewItem
.text$mn:00001645                 push    0C29h           ; uIDNewItem
.text$mn:0000164A                 push    0               ; uFlags
.text$mn:0000164C                 push    0               ; uPosition
.text$mn:0000164E                 mov     ecx, [ebp+var_2EC]
.text$mn:00001654                 mov     edx, [ecx+0B8h]
.text$mn:0000165A                 push    edx             ; hMenu
.text$mn:0000165B                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:00001661                 lea     ecx, [ebp+var_B8]
.text$mn:00001667                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000166C                 push    eax             ; lpNewItem
.text$mn:0000166D                 push    0C2Dh           ; uIDNewItem
.text$mn:00001672                 push    0               ; uFlags
.text$mn:00001674                 push    0               ; uPosition
.text$mn:00001676                 mov     eax, [ebp+var_2EC]
.text$mn:0000167C                 mov     ecx, [eax+0B8h]
.text$mn:00001682                 push    ecx             ; hMenu
.text$mn:00001683                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:00001689                 lea     ecx, [ebp+var_2C]
.text$mn:0000168C                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001691                 push    eax             ; lpNewItem
.text$mn:00001692                 push    0C2Ah           ; uIDNewItem
.text$mn:00001697                 push    0               ; uFlags
.text$mn:00001699                 push    0               ; uPosition
.text$mn:0000169B                 mov     edx, [ebp+var_2EC]
.text$mn:000016A1                 mov     eax, [edx+0B8h]
.text$mn:000016A7                 push    eax             ; hMenu
.text$mn:000016A8                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:000016AE                 push    offset $SG126385 ; "Move Up\tCtrl+Up"
.text$mn:000016B3                 push    0C2Eh
.text$mn:000016B8                 push    offset $SG126386 ; "FolderMenu"
.text$mn:000016BD                 lea     ecx, [ebp+var_1D0]
.text$mn:000016C3                 push    ecx
.text$mn:000016C4                 mov     ecx, [ebp+var_2F0]
.text$mn:000016CA                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:000016CF                 mov     [ebp+var_338], eax
.text$mn:000016D5                 mov     edx, [ebp+var_338]
.text$mn:000016DB                 mov     [ebp+var_330], edx
.text$mn:000016E1                 mov     byte ptr [ebp+var_4], 0Eh
.text$mn:000016E5                 mov     eax, [ebp+var_330]
.text$mn:000016EB                 push    eax
.text$mn:000016EC                 lea     ecx, [ebp+var_64]
.text$mn:000016EF                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:000016F4                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:000016F8                 lea     ecx, [ebp+var_1D0]
.text$mn:000016FE                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001703                 push    offset $SG126388 ; "Move Down\tCtrl+Down"
.text$mn:00001708                 push    0C2Fh
.text$mn:0000170D                 push    offset $SG126389 ; "FolderMenu"
.text$mn:00001712                 lea     ecx, [ebp+var_240]
.text$mn:00001718                 push    ecx
.text$mn:00001719                 mov     ecx, [ebp+var_2F0]
.text$mn:0000171F                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:00001724                 mov     [ebp+var_340], eax
.text$mn:0000172A                 mov     edx, [ebp+var_340]
.text$mn:00001730                 mov     [ebp+var_348], edx
.text$mn:00001736                 mov     byte ptr [ebp+var_4], 0Fh
.text$mn:0000173A                 mov     eax, [ebp+var_348]
.text$mn:00001740                 push    eax
.text$mn:00001741                 lea     ecx, [ebp+var_80]
.text$mn:00001744                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00001749                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:0000174D                 lea     ecx, [ebp+var_240]
.text$mn:00001753                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001758                 push    offset $SG126391 ; "Rename"
.text$mn:0000175D                 push    0C27h
.text$mn:00001762                 push    offset $SG126392 ; "FolderMenu"
.text$mn:00001767                 lea     ecx, [ebp+var_2B0]
.text$mn:0000176D                 push    ecx
.text$mn:0000176E                 mov     ecx, [ebp+var_2F0]
.text$mn:00001774                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:00001779                 mov     [ebp+var_334], eax
.text$mn:0000177F                 mov     edx, [ebp+var_334]
.text$mn:00001785                 mov     [ebp+var_2FC], edx
.text$mn:0000178B                 mov     byte ptr [ebp+var_4], 10h
.text$mn:0000178F                 mov     eax, [ebp+var_2FC]
.text$mn:00001795                 push    eax
.text$mn:00001796                 lea     ecx, [ebp+var_48]
.text$mn:00001799                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000179E                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:000017A2                 lea     ecx, [ebp+var_2B0]
.text$mn:000017A8                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000017AD                 push    offset $SG126394 ; "Add Folder"
.text$mn:000017B2                 push    0C28h
.text$mn:000017B7                 push    offset $SG126395 ; "FolderMenu"
.text$mn:000017BC                 lea     ecx, [ebp+var_278]
.text$mn:000017C2                 push    ecx
.text$mn:000017C3                 mov     ecx, [ebp+var_2F0]
.text$mn:000017C9                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:000017CE                 mov     [ebp+var_324], eax
.text$mn:000017D4                 mov     edx, [ebp+var_324]
.text$mn:000017DA                 mov     [ebp+var_304], edx
.text$mn:000017E0                 mov     byte ptr [ebp+var_4], 11h
.text$mn:000017E4                 mov     eax, [ebp+var_304]
.text$mn:000017EA                 push    eax
.text$mn:000017EB                 lea     ecx, [ebp+var_9C]
.text$mn:000017F1                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:000017F6                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:000017FA                 lea     ecx, [ebp+var_278]
.text$mn:00001800                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001805                 push    offset $SG126397 ; "Add Files..."
.text$mn:0000180A                 push    0C29h
.text$mn:0000180F                 push    offset $SG126398 ; "FolderMenu"
.text$mn:00001814                 lea     ecx, [ebp+var_1EC]
.text$mn:0000181A                 push    ecx
.text$mn:0000181B                 mov     ecx, [ebp+var_2F0]
.text$mn:00001821                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:00001826                 mov     [ebp+var_344], eax
.text$mn:0000182C                 mov     edx, [ebp+var_344]
.text$mn:00001832                 mov     [ebp+var_30C], edx
.text$mn:00001838                 mov     byte ptr [ebp+var_4], 12h
.text$mn:0000183C                 mov     eax, [ebp+var_30C]
.text$mn:00001842                 push    eax
.text$mn:00001843                 lea     ecx, [ebp+var_D4]
.text$mn:00001849                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000184E                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:00001852                 lea     ecx, [ebp+var_1EC]
.text$mn:00001858                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000185D                 push    offset $SG126400 ; "Add Files from Directory..."
.text$mn:00001862                 push    0C2Dh
.text$mn:00001867                 push    offset $SG126401 ; "FolderMenu"
.text$mn:0000186C                 lea     ecx, [ebp+var_224]
.text$mn:00001872                 push    ecx
.text$mn:00001873                 mov     ecx, [ebp+var_2F0]
.text$mn:00001879                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:0000187E                 mov     [ebp+var_32C], eax
.text$mn:00001884                 mov     edx, [ebp+var_32C]
.text$mn:0000188A                 mov     [ebp+var_314], edx
.text$mn:00001890                 mov     byte ptr [ebp+var_4], 13h
.text$mn:00001894                 mov     eax, [ebp+var_314]
.text$mn:0000189A                 push    eax
.text$mn:0000189B                 lea     ecx, [ebp+var_B8]
.text$mn:000018A1                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:000018A6                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:000018AA                 lea     ecx, [ebp+var_224]
.text$mn:000018B0                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000018B5                 push    offset $SG126403 ; "Remove\tDEL"
.text$mn:000018BA                 push    0C2Ah
.text$mn:000018BF                 push    offset $SG126404 ; "FolderMenu"
.text$mn:000018C4                 lea     ecx, [ebp+var_25C]
.text$mn:000018CA                 push    ecx
.text$mn:000018CB                 mov     ecx, [ebp+var_2F0]
.text$mn:000018D1                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:000018D6                 mov     [ebp+var_33C], eax
.text$mn:000018DC                 mov     edx, [ebp+var_33C]
.text$mn:000018E2                 mov     [ebp+var_31C], edx
.text$mn:000018E8                 mov     byte ptr [ebp+var_4], 14h
.text$mn:000018EC                 mov     eax, [ebp+var_31C]
.text$mn:000018F2                 push    eax
.text$mn:000018F3                 lea     ecx, [ebp+var_2C]
.text$mn:000018F6                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:000018FB                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:000018FF                 lea     ecx, [ebp+var_25C]
.text$mn:00001905                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000190A                 call    dword ptr ds:__imp__CreatePopupMenu@0 ; CreatePopupMenu()
.text$mn:00001910                 mov     ecx, [ebp+var_2EC]
.text$mn:00001916                 mov     [ecx+0BCh], eax
.text$mn:0000191C                 lea     ecx, [ebp+var_64]
.text$mn:0000191F                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001924                 push    eax             ; lpNewItem
.text$mn:00001925                 push    0C2Eh           ; uIDNewItem
.text$mn:0000192A                 push    0               ; uFlags
.text$mn:0000192C                 push    0               ; uPosition
.text$mn:0000192E                 mov     edx, [ebp+var_2EC]
.text$mn:00001934                 mov     eax, [edx+0BCh]
.text$mn:0000193A                 push    eax             ; hMenu
.text$mn:0000193B                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:00001941                 lea     ecx, [ebp+var_80]
.text$mn:00001944                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001949                 push    eax             ; lpNewItem
.text$mn:0000194A                 push    0C2Fh           ; uIDNewItem
.text$mn:0000194F                 push    0               ; uFlags
.text$mn:00001951                 push    0               ; uPosition
.text$mn:00001953                 mov     ecx, [ebp+var_2EC]
.text$mn:00001959                 mov     edx, [ecx+0BCh]
.text$mn:0000195F                 push    edx             ; hMenu
.text$mn:00001960                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:00001966                 push    0               ; lpNewItem
.text$mn:00001968                 push    0FFFFFFFFh      ; uIDNewItem
.text$mn:0000196A                 push    0               ; uFlags
.text$mn:0000196C                 push    0               ; uPosition
.text$mn:0000196E                 mov     eax, [ebp+var_2EC]
.text$mn:00001974                 mov     ecx, [eax+0BCh]
.text$mn:0000197A                 push    ecx             ; hMenu
.text$mn:0000197B                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:00001981                 lea     ecx, [ebp+var_48]
.text$mn:00001984                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001989                 push    eax             ; lpNewItem
.text$mn:0000198A                 push    0C27h           ; uIDNewItem
.text$mn:0000198F                 push    0               ; uFlags
.text$mn:00001991                 push    0               ; uPosition
.text$mn:00001993                 mov     edx, [ebp+var_2EC]
.text$mn:00001999                 mov     eax, [edx+0BCh]
.text$mn:0000199F                 push    eax             ; hMenu
.text$mn:000019A0                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:000019A6                 lea     ecx, [ebp+var_9C]
.text$mn:000019AC                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000019B1                 push    eax             ; lpNewItem
.text$mn:000019B2                 push    0C28h           ; uIDNewItem
.text$mn:000019B7                 push    0               ; uFlags
.text$mn:000019B9                 push    0               ; uPosition
.text$mn:000019BB                 mov     ecx, [ebp+var_2EC]
.text$mn:000019C1                 mov     edx, [ecx+0BCh]
.text$mn:000019C7                 push    edx             ; hMenu
.text$mn:000019C8                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:000019CE                 lea     ecx, [ebp+var_D4]
.text$mn:000019D4                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000019D9                 push    eax             ; lpNewItem
.text$mn:000019DA                 push    0C29h           ; uIDNewItem
.text$mn:000019DF                 push    0               ; uFlags
.text$mn:000019E1                 push    0               ; uPosition
.text$mn:000019E3                 mov     eax, [ebp+var_2EC]
.text$mn:000019E9                 mov     ecx, [eax+0BCh]
.text$mn:000019EF                 push    ecx             ; hMenu
.text$mn:000019F0                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:000019F6                 lea     ecx, [ebp+var_B8]
.text$mn:000019FC                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001A01                 push    eax             ; lpNewItem
.text$mn:00001A02                 push    0C2Dh           ; uIDNewItem
.text$mn:00001A07                 push    0               ; uFlags
.text$mn:00001A09                 push    0               ; uPosition
.text$mn:00001A0B                 mov     edx, [ebp+var_2EC]
.text$mn:00001A11                 mov     eax, [edx+0BCh]
.text$mn:00001A17                 push    eax             ; hMenu
.text$mn:00001A18                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:00001A1E                 lea     ecx, [ebp+var_2C]
.text$mn:00001A21                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001A26                 push    eax             ; lpNewItem
.text$mn:00001A27                 push    0C2Ah           ; uIDNewItem
.text$mn:00001A2C                 push    0               ; uFlags
.text$mn:00001A2E                 push    0               ; uPosition
.text$mn:00001A30                 mov     ecx, [ebp+var_2EC]
.text$mn:00001A36                 mov     edx, [ecx+0BCh]
.text$mn:00001A3C                 push    edx             ; hMenu
.text$mn:00001A3D                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:00001A43                 push    offset $SG126406 ; "Move Up\tCtrl+Up"
.text$mn:00001A48                 push    0C2Eh
.text$mn:00001A4D                 push    offset $SG126407 ; "FileMenu"
.text$mn:00001A52                 lea     eax, [ebp+var_294]
.text$mn:00001A58                 push    eax
.text$mn:00001A59                 mov     ecx, [ebp+var_2F0]
.text$mn:00001A5F                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:00001A64                 mov     [ebp+var_2F4], eax
.text$mn:00001A6A                 mov     ecx, [ebp+var_2F4]
.text$mn:00001A70                 mov     [ebp+var_2F8], ecx
.text$mn:00001A76                 mov     byte ptr [ebp+var_4], 15h
.text$mn:00001A7A                 mov     edx, [ebp+var_2F8]
.text$mn:00001A80                 push    edx
.text$mn:00001A81                 lea     ecx, [ebp+var_64]
.text$mn:00001A84                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00001A89                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:00001A8D                 lea     ecx, [ebp+var_294]
.text$mn:00001A93                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001A98                 push    offset $SG126409 ; "Move Down\tCtrl+Down"
.text$mn:00001A9D                 push    0C2Fh
.text$mn:00001AA2                 push    offset $SG126410 ; "FileMenu"
.text$mn:00001AA7                 lea     eax, [ebp+var_2CC]
.text$mn:00001AAD                 push    eax
.text$mn:00001AAE                 mov     ecx, [ebp+var_2F0]
.text$mn:00001AB4                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:00001AB9                 mov     [ebp+var_300], eax
.text$mn:00001ABF                 mov     ecx, [ebp+var_300]
.text$mn:00001AC5                 mov     [ebp+var_308], ecx
.text$mn:00001ACB                 mov     byte ptr [ebp+var_4], 16h
.text$mn:00001ACF                 mov     edx, [ebp+var_308]
.text$mn:00001AD5                 push    edx
.text$mn:00001AD6                 lea     ecx, [ebp+var_80]
.text$mn:00001AD9                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00001ADE                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:00001AE2                 lea     ecx, [ebp+var_2CC]
.text$mn:00001AE8                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001AED                 push    offset $SG126412 ; "Rename"
.text$mn:00001AF2                 push    0C27h
.text$mn:00001AF7                 push    offset $SG126413 ; "FileMenu"
.text$mn:00001AFC                 lea     eax, [ebp+var_2E8]
.text$mn:00001B02                 push    eax
.text$mn:00001B03                 mov     ecx, [ebp+var_2F0]
.text$mn:00001B09                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:00001B0E                 mov     [ebp+var_310], eax
.text$mn:00001B14                 mov     ecx, [ebp+var_310]
.text$mn:00001B1A                 mov     [ebp+var_318], ecx
.text$mn:00001B20                 mov     byte ptr [ebp+var_4], 17h
.text$mn:00001B24                 mov     edx, [ebp+var_318]
.text$mn:00001B2A                 push    edx
.text$mn:00001B2B                 lea     ecx, [ebp+var_48]
.text$mn:00001B2E                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00001B33                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:00001B37                 lea     ecx, [ebp+var_2E8]
.text$mn:00001B3D                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001B42                 push    offset $SG126415 ; "Remove\tDEL"
.text$mn:00001B47                 push    0C2Bh
.text$mn:00001B4C                 push    offset $SG126416 ; "FileMenu"
.text$mn:00001B51                 lea     eax, [ebp+var_208]
.text$mn:00001B57                 push    eax
.text$mn:00001B58                 mov     ecx, [ebp+var_2F0]
.text$mn:00001B5E                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:00001B63                 mov     [ebp+var_320], eax
.text$mn:00001B69                 mov     ecx, [ebp+var_320]
.text$mn:00001B6F                 mov     [ebp+var_328], ecx
.text$mn:00001B75                 mov     byte ptr [ebp+var_4], 18h
.text$mn:00001B79                 mov     edx, [ebp+var_328]
.text$mn:00001B7F                 push    edx
.text$mn:00001B80                 lea     ecx, [ebp+var_2C]
.text$mn:00001B83                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00001B88                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:00001B8C                 lea     ecx, [ebp+var_208]
.text$mn:00001B92                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001B97                 push    offset $SG126419 ; "Modify File Path"
.text$mn:00001B9C                 push    0C2Ch
.text$mn:00001BA1                 push    offset $SG126420 ; "FileMenu"
.text$mn:00001BA6                 lea     eax, [ebp+var_198]
.text$mn:00001BAC                 push    eax
.text$mn:00001BAD                 mov     ecx, [ebp+var_2F0]
.text$mn:00001BB3                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:00001BB8                 mov     byte ptr [ebp+var_4], 19h
.text$mn:00001BBC                 call    dword ptr ds:__imp__CreatePopupMenu@0 ; CreatePopupMenu()
.text$mn:00001BC2                 mov     ecx, [ebp+var_2EC]
.text$mn:00001BC8                 mov     [ecx+0C0h], eax
.text$mn:00001BCE                 lea     ecx, [ebp+var_64]
.text$mn:00001BD1                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001BD6                 push    eax             ; lpNewItem
.text$mn:00001BD7                 push    0C2Eh           ; uIDNewItem
.text$mn:00001BDC                 push    0               ; uFlags
.text$mn:00001BDE                 push    0               ; uPosition
.text$mn:00001BE0                 mov     edx, [ebp+var_2EC]
.text$mn:00001BE6                 mov     eax, [edx+0C0h]
.text$mn:00001BEC                 push    eax             ; hMenu
.text$mn:00001BED                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:00001BF3                 lea     ecx, [ebp+var_80]
.text$mn:00001BF6                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001BFB                 push    eax             ; lpNewItem
.text$mn:00001BFC                 push    0C2Fh           ; uIDNewItem
.text$mn:00001C01                 push    0               ; uFlags
.text$mn:00001C03                 push    0               ; uPosition
.text$mn:00001C05                 mov     ecx, [ebp+var_2EC]
.text$mn:00001C0B                 mov     edx, [ecx+0C0h]
.text$mn:00001C11                 push    edx             ; hMenu
.text$mn:00001C12                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:00001C18                 push    0               ; lpNewItem
.text$mn:00001C1A                 push    0FFFFFFFFh      ; uIDNewItem
.text$mn:00001C1C                 push    0               ; uFlags
.text$mn:00001C1E                 push    0               ; uPosition
.text$mn:00001C20                 mov     eax, [ebp+var_2EC]
.text$mn:00001C26                 mov     ecx, [eax+0C0h]
.text$mn:00001C2C                 push    ecx             ; hMenu
.text$mn:00001C2D                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:00001C33                 lea     ecx, [ebp+var_48]
.text$mn:00001C36                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001C3B                 push    eax             ; lpNewItem
.text$mn:00001C3C                 push    0C27h           ; uIDNewItem
.text$mn:00001C41                 push    0               ; uFlags
.text$mn:00001C43                 push    0               ; uPosition
.text$mn:00001C45                 mov     edx, [ebp+var_2EC]
.text$mn:00001C4B                 mov     eax, [edx+0C0h]
.text$mn:00001C51                 push    eax             ; hMenu
.text$mn:00001C52                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:00001C58                 lea     ecx, [ebp+var_2C]
.text$mn:00001C5B                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001C60                 push    eax             ; lpNewItem
.text$mn:00001C61                 push    0C2Bh           ; uIDNewItem
.text$mn:00001C66                 push    0               ; uFlags
.text$mn:00001C68                 push    0               ; uPosition
.text$mn:00001C6A                 mov     ecx, [ebp+var_2EC]
.text$mn:00001C70                 mov     edx, [ecx+0C0h]
.text$mn:00001C76                 push    edx             ; hMenu
.text$mn:00001C77                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:00001C7D                 lea     ecx, [ebp+var_198]
.text$mn:00001C83                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001C88                 push    eax             ; lpNewItem
.text$mn:00001C89                 push    0C2Ch           ; uIDNewItem
.text$mn:00001C8E                 push    0               ; uFlags
.text$mn:00001C90                 push    0               ; uPosition
.text$mn:00001C92                 mov     eax, [ebp+var_2EC]
.text$mn:00001C98                 mov     ecx, [eax+0C0h]
.text$mn:00001C9E                 push    ecx             ; hMenu
.text$mn:00001C9F                 call    dword ptr ds:__imp__InsertMenuW@20 ; InsertMenuW(x,x,x,x,x)
.text$mn:00001CA5                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:00001CA9                 lea     ecx, [ebp+var_198]
.text$mn:00001CAF                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001CB4                 mov     byte ptr [ebp+var_4], 0Ch
.text$mn:00001CB8                 lea     ecx, [ebp+var_2C]
.text$mn:00001CBB                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001CC0                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:00001CC4                 lea     ecx, [ebp+var_B8]
.text$mn:00001CCA                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001CCF                 mov     byte ptr [ebp+var_4], 0Ah
.text$mn:00001CD3                 lea     ecx, [ebp+var_D4]
.text$mn:00001CD9                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001CDE                 mov     byte ptr [ebp+var_4], 9
.text$mn:00001CE2                 lea     ecx, [ebp+var_9C]
.text$mn:00001CE8                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001CED                 mov     byte ptr [ebp+var_4], 8
.text$mn:00001CF1                 lea     ecx, [ebp+var_48]
.text$mn:00001CF4                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001CF9                 mov     byte ptr [ebp+var_4], 7
.text$mn:00001CFD                 lea     ecx, [ebp+var_80]
.text$mn:00001D00                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001D05                 mov     byte ptr [ebp+var_4], 6
.text$mn:00001D09                 lea     ecx, [ebp+var_64]
.text$mn:00001D0C                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001D11                 mov     byte ptr [ebp+var_4], 5
.text$mn:00001D15                 lea     ecx, [ebp+var_160]
.text$mn:00001D1B                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001D20                 mov     byte ptr [ebp+var_4], 4
.text$mn:00001D24                 lea     ecx, [ebp+var_10C]
.text$mn:00001D2A                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001D2F                 mov     byte ptr [ebp+var_4], 3
.text$mn:00001D33                 lea     ecx, [ebp+var_144]
.text$mn:00001D39                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001D3E                 mov     byte ptr [ebp+var_4], 2
.text$mn:00001D42                 lea     ecx, [ebp+var_17C]
.text$mn:00001D48                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001D4D                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001D51                 lea     ecx, [ebp+var_F0]
.text$mn:00001D57                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001D5C                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001D60                 lea     ecx, [ebp+var_1B4]
.text$mn:00001D66                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001D6B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001D72                 lea     ecx, [ebp+var_128]
.text$mn:00001D78                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001D7D                 mov     ecx, [ebp+var_C]
.text$mn:00001D80                 mov     large fs:0, ecx
.text$mn:00001D87                 pop     ecx
.text$mn:00001D88                 mov     ecx, [ebp+var_10]
.text$mn:00001D8B                 xor     ecx, ebp
.text$mn:00001D8D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00001D92                 mov     esp, ebp
.text$mn:00001D94                 pop     ebp
.text$mn:00001D95                 retn
.text$mn:00001D95 ?initMenus@ProjectPanel@@IAEXXZ endp
.text$mn:00001D95
.text$mn:00001D95 ; ---------------------------------------------------------------------------
.text$mn:00001D96                 align 10h
.text$mn:00001DA0
.text$mn:00001DA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00001DA0
.text$mn:00001DA0 ; Attributes: bp-based frame
.text$mn:00001DA0
.text$mn:00001DA0 ; void __thiscall ProjectPanel::destroyMenus(ProjectPanel *__hidden this)
.text$mn:00001DA0                 public ?destroyMenus@ProjectPanel@@IAEXXZ
.text$mn:00001DA0 ?destroyMenus@ProjectPanel@@IAEXXZ proc near
.text$mn:00001DA0                                         ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+4E9p
.text$mn:00001DA0
.text$mn:00001DA0 var_4           = dword ptr -4
.text$mn:00001DA0
.text$mn:00001DA0                 push    ebp
.text$mn:00001DA1                 mov     ebp, esp
.text$mn:00001DA3                 push    ecx
.text$mn:00001DA4                 mov     [ebp+var_4], ecx
.text$mn:00001DA7                 mov     eax, [ebp+var_4]
.text$mn:00001DAA                 mov     ecx, [eax+0B4h]
.text$mn:00001DB0                 push    ecx             ; hMenu
.text$mn:00001DB1                 call    dword ptr ds:__imp__DestroyMenu@4 ; DestroyMenu(x)
.text$mn:00001DB7                 mov     edx, [ebp+var_4]
.text$mn:00001DBA                 mov     eax, [edx+0B8h]
.text$mn:00001DC0                 push    eax             ; hMenu
.text$mn:00001DC1                 call    dword ptr ds:__imp__DestroyMenu@4 ; DestroyMenu(x)
.text$mn:00001DC7                 mov     ecx, [ebp+var_4]
.text$mn:00001DCA                 mov     edx, [ecx+0BCh]
.text$mn:00001DD0                 push    edx             ; hMenu
.text$mn:00001DD1                 call    dword ptr ds:__imp__DestroyMenu@4 ; DestroyMenu(x)
.text$mn:00001DD7                 mov     eax, [ebp+var_4]
.text$mn:00001DDA                 mov     ecx, [eax+0C0h]
.text$mn:00001DE0                 push    ecx             ; hMenu
.text$mn:00001DE1                 call    dword ptr ds:__imp__DestroyMenu@4 ; DestroyMenu(x)
.text$mn:00001DE7                 mov     esp, ebp
.text$mn:00001DE9                 pop     ebp
.text$mn:00001DEA                 retn
.text$mn:00001DEA ?destroyMenus@ProjectPanel@@IAEXXZ endp
.text$mn:00001DEA
.text$mn:00001DEA ; ---------------------------------------------------------------------------
.text$mn:00001DEB                 align 10h
.text$mn:00001DF0
.text$mn:00001DF0 ; =============== S U B R O U T I N E =======================================
.text$mn:00001DF0
.text$mn:00001DF0 ; Attributes: bp-based frame
.text$mn:00001DF0
.text$mn:00001DF0 ; int __thiscall ProjectPanel::setImageList(ProjectPanel *this, __int16, __int16, __int16, __int16, __int16, __int16, int)
.text$mn:00001DF0                 public ?setImageList@ProjectPanel@@IAEHHHHHHHH@Z
.text$mn:00001DF0 ?setImageList@ProjectPanel@@IAEHHHHHHHH@Z proc near
.text$mn:00001DF0                                         ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+299p
.text$mn:00001DF0
.text$mn:00001DF0 var_14          = dword ptr -14h
.text$mn:00001DF0 var_10          = dword ptr -10h
.text$mn:00001DF0 crMask          = dword ptr -0Ch
.text$mn:00001DF0 var_8           = dword ptr -8
.text$mn:00001DF0 hbmImage        = dword ptr -4
.text$mn:00001DF0 arg_0           = word ptr  8
.text$mn:00001DF0 arg_4           = word ptr  0Ch
.text$mn:00001DF0 arg_8           = word ptr  10h
.text$mn:00001DF0 arg_C           = word ptr  14h
.text$mn:00001DF0 arg_10          = word ptr  18h
.text$mn:00001DF0 arg_14          = word ptr  1Ch
.text$mn:00001DF0 arg_18          = dword ptr  20h
.text$mn:00001DF0
.text$mn:00001DF0                 push    ebp
.text$mn:00001DF1                 mov     ebp, esp
.text$mn:00001DF3                 sub     esp, 14h
.text$mn:00001DF6                 mov     [ebp+var_8], ecx
.text$mn:00001DF9                 mov     [ebp+crMask], 0C0C0C0h
.text$mn:00001E00                 mov     [ebp+var_14], 7
.text$mn:00001E07                 push    0               ; cGrow
.text$mn:00001E09                 push    7               ; cInitial
.text$mn:00001E0B                 push    21h ; '!'       ; flags
.text$mn:00001E0D                 push    10h             ; cy
.text$mn:00001E0F                 push    10h             ; cx
.text$mn:00001E11                 call    dword ptr ds:__imp__ImageList_Create@20 ; ImageList_Create(x,x,x,x,x)
.text$mn:00001E17                 mov     [ebp+var_10], eax
.text$mn:00001E1A                 mov     eax, [ebp+var_8]
.text$mn:00001E1D                 mov     ecx, [ebp+var_10]
.text$mn:00001E20                 mov     [eax+0ACh], ecx
.text$mn:00001E26                 cmp     [ebp+var_10], 0
.text$mn:00001E2A                 jnz     short loc_1E33
.text$mn:00001E2C                 xor     eax, eax
.text$mn:00001E2E                 jmp     loc_204D
.text$mn:00001E33 ; ---------------------------------------------------------------------------
.text$mn:00001E33
.text$mn:00001E33 loc_1E33:                               ; CODE XREF: ProjectPanel::setImageList(int,int,int,int,int,int,int)+3Aj
.text$mn:00001E33                 movzx   edx, [ebp+arg_0]
.text$mn:00001E37                 push    edx             ; lpBitmapName
.text$mn:00001E38                 mov     eax, [ebp+var_8]
.text$mn:00001E3B                 mov     ecx, [eax+4]
.text$mn:00001E3E                 push    ecx             ; hInstance
.text$mn:00001E3F                 call    dword ptr ds:__imp__LoadBitmapW@8 ; LoadBitmapW(x,x)
.text$mn:00001E45                 mov     [ebp+hbmImage], eax
.text$mn:00001E48                 cmp     [ebp+hbmImage], 0
.text$mn:00001E4C                 jnz     short loc_1E55
.text$mn:00001E4E                 xor     eax, eax
.text$mn:00001E50                 jmp     loc_204D
.text$mn:00001E55 ; ---------------------------------------------------------------------------
.text$mn:00001E55
.text$mn:00001E55 loc_1E55:                               ; CODE XREF: ProjectPanel::setImageList(int,int,int,int,int,int,int)+5Cj
.text$mn:00001E55                 mov     edx, [ebp+crMask]
.text$mn:00001E58                 push    edx             ; crMask
.text$mn:00001E59                 mov     eax, [ebp+hbmImage]
.text$mn:00001E5C                 push    eax             ; hbmImage
.text$mn:00001E5D                 mov     ecx, [ebp+var_8]
.text$mn:00001E60                 mov     edx, [ecx+0ACh]
.text$mn:00001E66                 push    edx             ; himl
.text$mn:00001E67                 call    dword ptr ds:__imp__ImageList_AddMasked@12 ; ImageList_AddMasked(x,x,x)
.text$mn:00001E6D                 mov     eax, [ebp+hbmImage]
.text$mn:00001E70                 push    eax             ; ho
.text$mn:00001E71                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:00001E77                 movzx   ecx, [ebp+arg_4]
.text$mn:00001E7B                 push    ecx             ; lpBitmapName
.text$mn:00001E7C                 mov     edx, [ebp+var_8]
.text$mn:00001E7F                 mov     eax, [edx+4]
.text$mn:00001E82                 push    eax             ; hInstance
.text$mn:00001E83                 call    dword ptr ds:__imp__LoadBitmapW@8 ; LoadBitmapW(x,x)
.text$mn:00001E89                 mov     [ebp+hbmImage], eax
.text$mn:00001E8C                 cmp     [ebp+hbmImage], 0
.text$mn:00001E90                 jnz     short loc_1E99
.text$mn:00001E92                 xor     eax, eax
.text$mn:00001E94                 jmp     loc_204D
.text$mn:00001E99 ; ---------------------------------------------------------------------------
.text$mn:00001E99
.text$mn:00001E99 loc_1E99:                               ; CODE XREF: ProjectPanel::setImageList(int,int,int,int,int,int,int)+A0j
.text$mn:00001E99                 mov     ecx, [ebp+crMask]
.text$mn:00001E9C                 push    ecx             ; crMask
.text$mn:00001E9D                 mov     edx, [ebp+hbmImage]
.text$mn:00001EA0                 push    edx             ; hbmImage
.text$mn:00001EA1                 mov     eax, [ebp+var_8]
.text$mn:00001EA4                 mov     ecx, [eax+0ACh]
.text$mn:00001EAA                 push    ecx             ; himl
.text$mn:00001EAB                 call    dword ptr ds:__imp__ImageList_AddMasked@12 ; ImageList_AddMasked(x,x,x)
.text$mn:00001EB1                 mov     edx, [ebp+hbmImage]
.text$mn:00001EB4                 push    edx             ; ho
.text$mn:00001EB5                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:00001EBB                 movzx   eax, [ebp+arg_8]
.text$mn:00001EBF                 push    eax             ; lpBitmapName
.text$mn:00001EC0                 mov     ecx, [ebp+var_8]
.text$mn:00001EC3                 mov     edx, [ecx+4]
.text$mn:00001EC6                 push    edx             ; hInstance
.text$mn:00001EC7                 call    dword ptr ds:__imp__LoadBitmapW@8 ; LoadBitmapW(x,x)
.text$mn:00001ECD                 mov     [ebp+hbmImage], eax
.text$mn:00001ED0                 cmp     [ebp+hbmImage], 0
.text$mn:00001ED4                 jnz     short loc_1EDD
.text$mn:00001ED6                 xor     eax, eax
.text$mn:00001ED8                 jmp     loc_204D
.text$mn:00001EDD ; ---------------------------------------------------------------------------
.text$mn:00001EDD
.text$mn:00001EDD loc_1EDD:                               ; CODE XREF: ProjectPanel::setImageList(int,int,int,int,int,int,int)+E4j
.text$mn:00001EDD                 mov     eax, [ebp+crMask]
.text$mn:00001EE0                 push    eax             ; crMask
.text$mn:00001EE1                 mov     ecx, [ebp+hbmImage]
.text$mn:00001EE4                 push    ecx             ; hbmImage
.text$mn:00001EE5                 mov     edx, [ebp+var_8]
.text$mn:00001EE8                 mov     eax, [edx+0ACh]
.text$mn:00001EEE                 push    eax             ; himl
.text$mn:00001EEF                 call    dword ptr ds:__imp__ImageList_AddMasked@12 ; ImageList_AddMasked(x,x,x)
.text$mn:00001EF5                 mov     ecx, [ebp+hbmImage]
.text$mn:00001EF8                 push    ecx             ; ho
.text$mn:00001EF9                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:00001EFF                 movzx   edx, [ebp+arg_C]
.text$mn:00001F03                 push    edx             ; lpBitmapName
.text$mn:00001F04                 mov     eax, [ebp+var_8]
.text$mn:00001F07                 mov     ecx, [eax+4]
.text$mn:00001F0A                 push    ecx             ; hInstance
.text$mn:00001F0B                 call    dword ptr ds:__imp__LoadBitmapW@8 ; LoadBitmapW(x,x)
.text$mn:00001F11                 mov     [ebp+hbmImage], eax
.text$mn:00001F14                 cmp     [ebp+hbmImage], 0
.text$mn:00001F18                 jnz     short loc_1F21
.text$mn:00001F1A                 xor     eax, eax
.text$mn:00001F1C                 jmp     loc_204D
.text$mn:00001F21 ; ---------------------------------------------------------------------------
.text$mn:00001F21
.text$mn:00001F21 loc_1F21:                               ; CODE XREF: ProjectPanel::setImageList(int,int,int,int,int,int,int)+128j
.text$mn:00001F21                 mov     edx, [ebp+crMask]
.text$mn:00001F24                 push    edx             ; crMask
.text$mn:00001F25                 mov     eax, [ebp+hbmImage]
.text$mn:00001F28                 push    eax             ; hbmImage
.text$mn:00001F29                 mov     ecx, [ebp+var_8]
.text$mn:00001F2C                 mov     edx, [ecx+0ACh]
.text$mn:00001F32                 push    edx             ; himl
.text$mn:00001F33                 call    dword ptr ds:__imp__ImageList_AddMasked@12 ; ImageList_AddMasked(x,x,x)
.text$mn:00001F39                 mov     eax, [ebp+hbmImage]
.text$mn:00001F3C                 push    eax             ; ho
.text$mn:00001F3D                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:00001F43                 movzx   ecx, [ebp+arg_10]
.text$mn:00001F47                 push    ecx             ; lpBitmapName
.text$mn:00001F48                 mov     edx, [ebp+var_8]
.text$mn:00001F4B                 mov     eax, [edx+4]
.text$mn:00001F4E                 push    eax             ; hInstance
.text$mn:00001F4F                 call    dword ptr ds:__imp__LoadBitmapW@8 ; LoadBitmapW(x,x)
.text$mn:00001F55                 mov     [ebp+hbmImage], eax
.text$mn:00001F58                 cmp     [ebp+hbmImage], 0
.text$mn:00001F5C                 jnz     short loc_1F65
.text$mn:00001F5E                 xor     eax, eax
.text$mn:00001F60                 jmp     loc_204D
.text$mn:00001F65 ; ---------------------------------------------------------------------------
.text$mn:00001F65
.text$mn:00001F65 loc_1F65:                               ; CODE XREF: ProjectPanel::setImageList(int,int,int,int,int,int,int)+16Cj
.text$mn:00001F65                 mov     ecx, [ebp+crMask]
.text$mn:00001F68                 push    ecx             ; crMask
.text$mn:00001F69                 mov     edx, [ebp+hbmImage]
.text$mn:00001F6C                 push    edx             ; hbmImage
.text$mn:00001F6D                 mov     eax, [ebp+var_8]
.text$mn:00001F70                 mov     ecx, [eax+0ACh]
.text$mn:00001F76                 push    ecx             ; himl
.text$mn:00001F77                 call    dword ptr ds:__imp__ImageList_AddMasked@12 ; ImageList_AddMasked(x,x,x)
.text$mn:00001F7D                 mov     edx, [ebp+hbmImage]
.text$mn:00001F80                 push    edx             ; ho
.text$mn:00001F81                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:00001F87                 movzx   eax, [ebp+arg_14]
.text$mn:00001F8B                 push    eax             ; lpBitmapName
.text$mn:00001F8C                 mov     ecx, [ebp+var_8]
.text$mn:00001F8F                 mov     edx, [ecx+4]
.text$mn:00001F92                 push    edx             ; hInstance
.text$mn:00001F93                 call    dword ptr ds:__imp__LoadBitmapW@8 ; LoadBitmapW(x,x)
.text$mn:00001F99                 mov     [ebp+hbmImage], eax
.text$mn:00001F9C                 cmp     [ebp+hbmImage], 0
.text$mn:00001FA0                 jnz     short loc_1FA9
.text$mn:00001FA2                 xor     eax, eax
.text$mn:00001FA4                 jmp     loc_204D
.text$mn:00001FA9 ; ---------------------------------------------------------------------------
.text$mn:00001FA9
.text$mn:00001FA9 loc_1FA9:                               ; CODE XREF: ProjectPanel::setImageList(int,int,int,int,int,int,int)+1B0j
.text$mn:00001FA9                 mov     eax, [ebp+crMask]
.text$mn:00001FAC                 push    eax             ; crMask
.text$mn:00001FAD                 mov     ecx, [ebp+hbmImage]
.text$mn:00001FB0                 push    ecx             ; hbmImage
.text$mn:00001FB1                 mov     edx, [ebp+var_8]
.text$mn:00001FB4                 mov     eax, [edx+0ACh]
.text$mn:00001FBA                 push    eax             ; himl
.text$mn:00001FBB                 call    dword ptr ds:__imp__ImageList_AddMasked@12 ; ImageList_AddMasked(x,x,x)
.text$mn:00001FC1                 mov     ecx, [ebp+hbmImage]
.text$mn:00001FC4                 push    ecx             ; ho
.text$mn:00001FC5                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:00001FCB                 movzx   edx, word ptr [ebp+arg_18]
.text$mn:00001FCF                 push    edx             ; lpBitmapName
.text$mn:00001FD0                 mov     eax, [ebp+var_8]
.text$mn:00001FD3                 mov     ecx, [eax+4]
.text$mn:00001FD6                 push    ecx             ; hInstance
.text$mn:00001FD7                 call    dword ptr ds:__imp__LoadBitmapW@8 ; LoadBitmapW(x,x)
.text$mn:00001FDD                 mov     [ebp+hbmImage], eax
.text$mn:00001FE0                 cmp     [ebp+hbmImage], 0
.text$mn:00001FE4                 jnz     short loc_1FEA
.text$mn:00001FE6                 xor     eax, eax
.text$mn:00001FE8                 jmp     short loc_204D
.text$mn:00001FEA ; ---------------------------------------------------------------------------
.text$mn:00001FEA
.text$mn:00001FEA loc_1FEA:                               ; CODE XREF: ProjectPanel::setImageList(int,int,int,int,int,int,int)+1F4j
.text$mn:00001FEA                 mov     edx, [ebp+crMask]
.text$mn:00001FED                 push    edx             ; crMask
.text$mn:00001FEE                 mov     eax, [ebp+hbmImage]
.text$mn:00001FF1                 push    eax             ; hbmImage
.text$mn:00001FF2                 mov     ecx, [ebp+var_8]
.text$mn:00001FF5                 mov     edx, [ecx+0ACh]
.text$mn:00001FFB                 push    edx             ; himl
.text$mn:00001FFC                 call    dword ptr ds:__imp__ImageList_AddMasked@12 ; ImageList_AddMasked(x,x,x)
.text$mn:00002002                 mov     eax, [ebp+hbmImage]
.text$mn:00002005                 push    eax             ; ho
.text$mn:00002006                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:0000200C                 mov     ecx, [ebp+var_8]
.text$mn:0000200F                 mov     edx, [ecx+0ACh]
.text$mn:00002015                 push    edx             ; himl
.text$mn:00002016                 call    dword ptr ds:__imp__ImageList_GetImageCount@4 ; ImageList_GetImageCount(x)
.text$mn:0000201C                 cmp     eax, 7
.text$mn:0000201F                 jge     short loc_2025
.text$mn:00002021                 xor     eax, eax
.text$mn:00002023                 jmp     short loc_204D
.text$mn:00002025 ; ---------------------------------------------------------------------------
.text$mn:00002025
.text$mn:00002025 loc_2025:                               ; CODE XREF: ProjectPanel::setImageList(int,int,int,int,int,int,int)+22Fj
.text$mn:00002025                 mov     eax, [ebp+var_8]
.text$mn:00002028                 mov     ecx, [eax+0ACh]
.text$mn:0000202E                 push    ecx             ; lParam
.text$mn:0000202F                 push    0               ; wParam
.text$mn:00002031                 push    1109h           ; Msg
.text$mn:00002036                 mov     ecx, [ebp+var_8]
.text$mn:00002039                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:0000203C                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00002041                 push    eax             ; hWnd
.text$mn:00002042                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002048                 mov     eax, 1
.text$mn:0000204D
.text$mn:0000204D loc_204D:                               ; CODE XREF: ProjectPanel::setImageList(int,int,int,int,int,int,int)+3Ej
.text$mn:0000204D                                         ; ProjectPanel::setImageList(int,int,int,int,int,int,int)+60j ...
.text$mn:0000204D                 mov     esp, ebp
.text$mn:0000204F                 pop     ebp
.text$mn:00002050                 retn    1Ch
.text$mn:00002050 ?setImageList@ProjectPanel@@IAEHHHHHHHH@Z endp
.text$mn:00002050
.text$mn:00002050 ; ---------------------------------------------------------------------------
.text$mn:00002053                 align 10h
.text$mn:00002060
.text$mn:00002060 ; =============== S U B R O U T I N E =======================================
.text$mn:00002060
.text$mn:00002060 ; Attributes: bp-based frame
.text$mn:00002060
.text$mn:00002060 ; void __thiscall ProjectPanel::addFiles(ProjectPanel *this, struct _TREEITEM *)
.text$mn:00002060                 public ?addFiles@ProjectPanel@@IAEXPAU_TREEITEM@@@Z
.text$mn:00002060 ?addFiles@ProjectPanel@@IAEXPAU_TREEITEM@@@Z proc near
.text$mn:00002060                                         ; CODE XREF: ProjectPanel::popupMenuCmd(int)+40Ap
.text$mn:00002060
.text$mn:00002060 var_10E0        = dword ptr -10E0h
.text$mn:00002060 var_10DC        = dword ptr -10DCh
.text$mn:00002060 var_10D8        = dword ptr -10D8h
.text$mn:00002060 var_10D4        = dword ptr -10D4h
.text$mn:00002060 var_10D0        = dword ptr -10D0h
.text$mn:00002060 var_10CC        = byte ptr -10CCh
.text$mn:00002060 var_10          = dword ptr -10h
.text$mn:00002060 var_C           = dword ptr -0Ch
.text$mn:00002060 var_4           = dword ptr -4
.text$mn:00002060 arg_0           = dword ptr  8
.text$mn:00002060
.text$mn:00002060                 push    ebp
.text$mn:00002061                 mov     ebp, esp
.text$mn:00002063                 push    0FFFFFFFFh
.text$mn:00002065                 push    offset __ehhandler$?addFiles@ProjectPanel@@IAEXPAU_TREEITEM@@@Z
.text$mn:0000206A                 mov     eax, large fs:0
.text$mn:00002070                 push    eax
.text$mn:00002071                 mov     eax, 10D4h
.text$mn:00002076                 call    __chkstk
.text$mn:0000207B                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002080                 xor     eax, ebp
.text$mn:00002082                 mov     [ebp+var_10], eax
.text$mn:00002085                 push    eax
.text$mn:00002086                 lea     eax, [ebp+var_C]
.text$mn:00002089                 mov     large fs:0, eax
.text$mn:0000208F                 mov     [ebp+var_10D4], ecx
.text$mn:00002095                 push    0               ; lpModuleName
.text$mn:00002097                 call    dword ptr ds:__imp__GetModuleHandleW@4 ; GetModuleHandleW(x)
.text$mn:0000209D                 push    eax             ; HINSTANCE
.text$mn:0000209E                 mov     eax, [ebp+var_10D4]
.text$mn:000020A4                 mov     ecx, [eax+0Ch]
.text$mn:000020A7                 push    ecx             ; HWND
.text$mn:000020A8                 lea     ecx, [ebp+var_10CC] ; this
.text$mn:000020AE                 call    ??0FileDialog@@QAE@PAUHWND__@@PAUHINSTANCE__@@@Z ; FileDialog::FileDialog(HWND__ *,HINSTANCE__ *)
.text$mn:000020B3                 mov     [ebp+var_4], 0
.text$mn:000020BA                 push    0
.text$mn:000020BC                 push    offset $SG127039 ; ".*"
.text$mn:000020C1                 push    offset $SG127040 ; "All types"
.text$mn:000020C6                 lea     edx, [ebp+var_10CC]
.text$mn:000020CC                 push    edx             ; this
.text$mn:000020CD                 call    ?setExtFilter@FileDialog@@QAAXPB_W0ZZ ; FileDialog::setExtFilter(wchar_t const *,wchar_t const *,...)
.text$mn:000020D2                 add     esp, 10h
.text$mn:000020D5                 lea     ecx, [ebp+var_10CC]
.text$mn:000020DB                 call    ?doOpenMultiFilesDlg@FileDialog@@QAEPAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ ; FileDialog::doOpenMultiFilesDlg(void)
.text$mn:000020E0                 mov     [ebp+var_10D8], eax
.text$mn:000020E6                 cmp     [ebp+var_10D8], 0
.text$mn:000020ED                 jz      loc_21A9
.text$mn:000020F3                 mov     ecx, [ebp+var_10D8]
.text$mn:000020F9                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:000020FE                 mov     [ebp+var_10E0], eax
.text$mn:00002104                 mov     [ebp+var_10D0], 0
.text$mn:0000210E                 jmp     short loc_211F
.text$mn:00002110 ; ---------------------------------------------------------------------------
.text$mn:00002110
.text$mn:00002110 loc_2110:                               ; CODE XREF: ProjectPanel::addFiles(_TREEITEM *)+128j
.text$mn:00002110                 mov     eax, [ebp+var_10D0]
.text$mn:00002116                 add     eax, 1
.text$mn:00002119                 mov     [ebp+var_10D0], eax
.text$mn:0000211F
.text$mn:0000211F loc_211F:                               ; CODE XREF: ProjectPanel::addFiles(_TREEITEM *)+AEj
.text$mn:0000211F                 mov     ecx, [ebp+var_10D0]
.text$mn:00002125                 cmp     ecx, [ebp+var_10E0]
.text$mn:0000212B                 jnb     short loc_218A
.text$mn:0000212D                 mov     edx, [ebp+var_10D0]
.text$mn:00002133                 push    edx
.text$mn:00002134                 mov     ecx, [ebp+var_10D8]
.text$mn:0000213A                 call    ?at@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::at(uint)
.text$mn:0000213F                 mov     ecx, eax
.text$mn:00002141                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002146                 push    eax             ; pszPath
.text$mn:00002147                 call    dword ptr ds:__imp__PathFindFileNameW@4 ; PathFindFileNameW(x)
.text$mn:0000214D                 mov     [ebp+var_10DC], eax
.text$mn:00002153                 mov     eax, [ebp+var_10D0]
.text$mn:00002159                 push    eax
.text$mn:0000215A                 mov     ecx, [ebp+var_10D8]
.text$mn:00002160                 call    ?at@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::at(uint)
.text$mn:00002165                 mov     ecx, eax
.text$mn:00002167                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000216C                 push    eax             ; wchar_t *
.text$mn:0000216D                 push    5               ; int
.text$mn:0000216F                 mov     ecx, [ebp+arg_0]
.text$mn:00002172                 push    ecx             ; struct _TREEITEM *
.text$mn:00002173                 mov     edx, [ebp+var_10DC]
.text$mn:00002179                 push    edx             ; wchar_t *
.text$mn:0000217A                 mov     ecx, [ebp+var_10D4]
.text$mn:00002180                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00002183                 call    ?addItem@TreeView@@QAEPAU_TREEITEM@@PB_WPAU2@H0@Z ; TreeView::addItem(wchar_t const *,_TREEITEM *,int,wchar_t const *)
.text$mn:00002188                 jmp     short loc_2110
.text$mn:0000218A ; ---------------------------------------------------------------------------
.text$mn:0000218A
.text$mn:0000218A loc_218A:                               ; CODE XREF: ProjectPanel::addFiles(_TREEITEM *)+CBj
.text$mn:0000218A                 mov     eax, [ebp+arg_0]
.text$mn:0000218D                 push    eax             ; struct _TREEITEM *
.text$mn:0000218E                 mov     ecx, [ebp+var_10D4]
.text$mn:00002194                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00002197                 call    ?expand@TreeView@@QBEXPAU_TREEITEM@@@Z ; TreeView::expand(_TREEITEM *)
.text$mn:0000219C                 push    1               ; bool
.text$mn:0000219E                 mov     ecx, [ebp+var_10D4] ; this
.text$mn:000021A4                 call    ?setWorkSpaceDirty@ProjectPanel@@IAEX_N@Z ; ProjectPanel::setWorkSpaceDirty(bool)
.text$mn:000021A9
.text$mn:000021A9 loc_21A9:                               ; CODE XREF: ProjectPanel::addFiles(_TREEITEM *)+8Dj
.text$mn:000021A9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000021B0                 lea     ecx, [ebp+var_10CC] ; this
.text$mn:000021B6                 call    ??1FileDialog@@QAE@XZ ; FileDialog::~FileDialog(void)
.text$mn:000021BB                 mov     ecx, [ebp+var_C]
.text$mn:000021BE                 mov     large fs:0, ecx
.text$mn:000021C5                 pop     ecx
.text$mn:000021C6                 mov     ecx, [ebp+var_10]
.text$mn:000021C9                 xor     ecx, ebp
.text$mn:000021CB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000021D0                 mov     esp, ebp
.text$mn:000021D2                 pop     ebp
.text$mn:000021D3                 retn    4
.text$mn:000021D3 ?addFiles@ProjectPanel@@IAEXPAU_TREEITEM@@@Z endp
.text$mn:000021D3
.text$mn:000021D3 ; ---------------------------------------------------------------------------
.text$mn:000021D6                 align 10h
.text$mn:000021E0
.text$mn:000021E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000021E0
.text$mn:000021E0 ; Attributes: bp-based frame
.text$mn:000021E0
.text$mn:000021E0 ; void __thiscall ProjectPanel::addFilesFromDirectory(ProjectPanel *this, struct _TREEITEM *)
.text$mn:000021E0                 public ?addFilesFromDirectory@ProjectPanel@@IAEXPAU_TREEITEM@@@Z
.text$mn:000021E0 ?addFilesFromDirectory@ProjectPanel@@IAEXPAU_TREEITEM@@@Z proc near
.text$mn:000021E0                                         ; CODE XREF: ProjectPanel::popupMenuCmd(int)+451p
.text$mn:000021E0
.text$mn:000021E0 var_280         = dword ptr -280h
.text$mn:000021E0 var_27C         = dword ptr -27Ch
.text$mn:000021E0 var_278         = dword ptr -278h
.text$mn:000021E0 var_274         = dword ptr -274h
.text$mn:000021E0 var_270         = dword ptr -270h
.text$mn:000021E0 var_26C         = byte ptr -26Ch
.text$mn:000021E0 var_250         = byte ptr -250h
.text$mn:000021E0 var_234         = dword ptr -234h
.text$mn:000021E0 String1         = word ptr -218h
.text$mn:000021E0 var_10          = dword ptr -10h
.text$mn:000021E0 var_C           = dword ptr -0Ch
.text$mn:000021E0 var_4           = dword ptr -4
.text$mn:000021E0 arg_0           = dword ptr  8
.text$mn:000021E0
.text$mn:000021E0                 push    ebp
.text$mn:000021E1                 mov     ebp, esp
.text$mn:000021E3                 push    0FFFFFFFFh
.text$mn:000021E5                 push    offset __ehhandler$?addFilesFromDirectory@ProjectPanel@@IAEXPAU_TREEITEM@@@Z
.text$mn:000021EA                 mov     eax, large fs:0
.text$mn:000021F0                 push    eax
.text$mn:000021F1                 sub     esp, 274h
.text$mn:000021F7                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000021FC                 xor     eax, ebp
.text$mn:000021FE                 mov     [ebp+var_10], eax
.text$mn:00002201                 push    eax
.text$mn:00002202                 lea     eax, [ebp+var_C]
.text$mn:00002205                 mov     large fs:0, eax
.text$mn:0000220B                 mov     [ebp+var_270], ecx
.text$mn:00002211                 push    offset $SG127132 ; Str
.text$mn:00002216                 mov     eax, [ebp+var_270]
.text$mn:0000221C                 add     eax, 0E0h ; 'a'
.text$mn:00002221                 push    eax             ; int
.text$mn:00002222                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00002227                 add     esp, 8
.text$mn:0000222A                 movzx   ecx, al
.text$mn:0000222D                 test    ecx, ecx
.text$mn:0000222F                 jz      short loc_2296
.text$mn:00002231                 push    offset $SG127133 ; Str
.text$mn:00002236                 mov     edx, [ebp+var_270]
.text$mn:0000223C                 add     edx, 0C4h ; '-'
.text$mn:00002242                 push    edx             ; int
.text$mn:00002243                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00002248                 add     esp, 8
.text$mn:0000224B                 movzx   eax, al
.text$mn:0000224E                 test    eax, eax
.text$mn:00002250                 jz      short loc_2296
.text$mn:00002252                 mov     ecx, [ebp+var_270]
.text$mn:00002258                 add     ecx, 0C4h ; '-'
.text$mn:0000225E                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002263                 push    eax             ; lpString2
.text$mn:00002264                 lea     ecx, [ebp+String1]
.text$mn:0000226A                 push    ecx             ; lpString1
.text$mn:0000226B                 call    dword ptr ds:__imp__lstrcpyW@8 ; lstrcpyW(x,x)
.text$mn:00002271                 lea     edx, [ebp+String1]
.text$mn:00002277                 push    edx             ; pszPath
.text$mn:00002278                 call    dword ptr ds:__imp__PathRemoveFileSpecW@4 ; PathRemoveFileSpecW(x)
.text$mn:0000227E                 lea     eax, [ebp+String1]
.text$mn:00002284                 push    eax             ; Str
.text$mn:00002285                 mov     ecx, [ebp+var_270]
.text$mn:0000228B                 add     ecx, 0E0h ; 'a'
.text$mn:00002291                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00002296
.text$mn:00002296 loc_2296:                               ; CODE XREF: ProjectPanel::addFilesFromDirectory(_TREEITEM *)+4Fj
.text$mn:00002296                                         ; ProjectPanel::addFilesFromDirectory(_TREEITEM *)+70j
.text$mn:00002296                 lea     ecx, [ebp+var_234]
.text$mn:0000229C                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000022A1                 mov     [ebp+var_4], 0
.text$mn:000022A8                 push    offset $SG127153 ; Str
.text$mn:000022AD                 mov     ecx, [ebp+var_270]
.text$mn:000022B3                 add     ecx, 0E0h ; 'a'
.text$mn:000022B9                 push    ecx             ; int
.text$mn:000022BA                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:000022BF                 add     esp, 8
.text$mn:000022C2                 movzx   edx, al
.text$mn:000022C5                 test    edx, edx
.text$mn:000022C7                 jz      short loc_232D
.text$mn:000022C9                 mov     ecx, [ebp+var_270]
.text$mn:000022CF                 add     ecx, 0E0h ; 'a'
.text$mn:000022D5                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000022DA                 push    eax
.text$mn:000022DB                 mov     eax, [ebp+var_270]
.text$mn:000022E1                 mov     ecx, [eax+0Ch]
.text$mn:000022E4                 push    ecx
.text$mn:000022E5                 lea     edx, [ebp+var_250]
.text$mn:000022EB                 push    edx
.text$mn:000022EC                 call    ?getFolderName@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@PB_W@Z ; getFolderName(HWND__ *,wchar_t const *)
.text$mn:000022F1                 add     esp, 0Ch
.text$mn:000022F4                 mov     [ebp+var_278], eax
.text$mn:000022FA                 mov     eax, [ebp+var_278]
.text$mn:00002300                 mov     [ebp+var_280], eax
.text$mn:00002306                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000230A                 mov     ecx, [ebp+var_280]
.text$mn:00002310                 push    ecx
.text$mn:00002311                 lea     ecx, [ebp+var_234]
.text$mn:00002317                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000231C                 mov     byte ptr [ebp+var_4], 0
.text$mn:00002320                 lea     ecx, [ebp+var_250]
.text$mn:00002326                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000232B                 jmp     short loc_237F
.text$mn:0000232D ; ---------------------------------------------------------------------------
.text$mn:0000232D
.text$mn:0000232D loc_232D:                               ; CODE XREF: ProjectPanel::addFilesFromDirectory(_TREEITEM *)+E7j
.text$mn:0000232D                 push    0
.text$mn:0000232F                 mov     edx, [ebp+var_270]
.text$mn:00002335                 mov     eax, [edx+0Ch]
.text$mn:00002338                 push    eax
.text$mn:00002339                 lea     ecx, [ebp+var_26C]
.text$mn:0000233F                 push    ecx
.text$mn:00002340                 call    ?getFolderName@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@PB_W@Z ; getFolderName(HWND__ *,wchar_t const *)
.text$mn:00002345                 add     esp, 0Ch
.text$mn:00002348                 mov     [ebp+var_27C], eax
.text$mn:0000234E                 mov     edx, [ebp+var_27C]
.text$mn:00002354                 mov     [ebp+var_274], edx
.text$mn:0000235A                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000235E                 mov     eax, [ebp+var_274]
.text$mn:00002364                 push    eax
.text$mn:00002365                 lea     ecx, [ebp+var_234]
.text$mn:0000236B                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00002370                 mov     byte ptr [ebp+var_4], 0
.text$mn:00002374                 lea     ecx, [ebp+var_26C]
.text$mn:0000237A                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000237F
.text$mn:0000237F loc_237F:                               ; CODE XREF: ProjectPanel::addFilesFromDirectory(_TREEITEM *)+14Bj
.text$mn:0000237F                 push    offset $SG127174 ; Str
.text$mn:00002384                 lea     ecx, [ebp+var_234]
.text$mn:0000238A                 push    ecx             ; int
.text$mn:0000238B                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00002390                 add     esp, 8
.text$mn:00002393                 movzx   edx, al
.text$mn:00002396                 test    edx, edx
.text$mn:00002398                 jz      short loc_23EC
.text$mn:0000239A                 mov     eax, [ebp+arg_0]
.text$mn:0000239D                 push    eax             ; struct _TREEITEM *
.text$mn:0000239E                 lea     ecx, [ebp+var_234]
.text$mn:000023A4                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000023A9                 push    eax             ; lpString
.text$mn:000023AA                 mov     ecx, [ebp+var_270] ; this
.text$mn:000023B0                 call    ?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z ; ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)
.text$mn:000023B5                 mov     ecx, [ebp+arg_0]
.text$mn:000023B8                 push    ecx             ; struct _TREEITEM *
.text$mn:000023B9                 mov     ecx, [ebp+var_270]
.text$mn:000023BF                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000023C2                 call    ?expand@TreeView@@QBEXPAU_TREEITEM@@@Z ; TreeView::expand(_TREEITEM *)
.text$mn:000023C7                 push    1               ; bool
.text$mn:000023C9                 mov     ecx, [ebp+var_270] ; this
.text$mn:000023CF                 call    ?setWorkSpaceDirty@ProjectPanel@@IAEX_N@Z ; ProjectPanel::setWorkSpaceDirty(bool)
.text$mn:000023D4                 lea     edx, [ebp+var_234]
.text$mn:000023DA                 push    edx
.text$mn:000023DB                 mov     ecx, [ebp+var_270]
.text$mn:000023E1                 add     ecx, 0E0h ; 'a'
.text$mn:000023E7                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000023EC
.text$mn:000023EC loc_23EC:                               ; CODE XREF: ProjectPanel::addFilesFromDirectory(_TREEITEM *)+1B8j
.text$mn:000023EC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000023F3                 lea     ecx, [ebp+var_234]
.text$mn:000023F9                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000023FE                 mov     ecx, [ebp+var_C]
.text$mn:00002401                 mov     large fs:0, ecx
.text$mn:00002408                 pop     ecx
.text$mn:00002409                 mov     ecx, [ebp+var_10]
.text$mn:0000240C                 xor     ecx, ebp
.text$mn:0000240E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00002413                 mov     esp, ebp
.text$mn:00002415                 pop     ebp
.text$mn:00002416                 retn    4
.text$mn:00002416 ?addFilesFromDirectory@ProjectPanel@@IAEXPAU_TREEITEM@@@Z endp
.text$mn:00002416
.text$mn:00002416 ; ---------------------------------------------------------------------------
.text$mn:00002419                 align 10h
.text$mn:00002420
.text$mn:00002420 ; =============== S U B R O U T I N E =======================================
.text$mn:00002420
.text$mn:00002420 ; Attributes: bp-based frame
.text$mn:00002420
.text$mn:00002420 ; void __thiscall ProjectPanel::recursiveAddFilesFrom(ProjectPanel *this, LPCWSTR lpString, struct _TREEITEM *)
.text$mn:00002420                 public ?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z
.text$mn:00002420 ?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z proc near
.text$mn:00002420                                         ; CODE XREF: ProjectPanel::addFilesFromDirectory(_TREEITEM *)+1D0p
.text$mn:00002420                                         ; ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+1ABp
.text$mn:00002420
.text$mn:00002420 var_2F8         = byte ptr -2F8h
.text$mn:00002420 var_2E8         = dword ptr -2E8h
.text$mn:00002420 var_2E4         = dword ptr -2E4h
.text$mn:00002420 var_2E0         = dword ptr -2E0h
.text$mn:00002420 hFindFile       = dword ptr -2DCh
.text$mn:00002420 var_2D8         = dword ptr -2D8h
.text$mn:00002420 var_2D2         = byte ptr -2D2h
.text$mn:00002420 var_2D1         = byte ptr -2D1h
.text$mn:00002420 FindFileData    = _WIN32_FIND_DATAW ptr -2D0h
.text$mn:00002420 var_80          = byte ptr -80h
.text$mn:00002420 var_64          = byte ptr -64h
.text$mn:00002420 var_48          = byte ptr -48h
.text$mn:00002420 var_2C          = byte ptr -2Ch
.text$mn:00002420 var_10          = dword ptr -10h
.text$mn:00002420 var_C           = dword ptr -0Ch
.text$mn:00002420 var_4           = dword ptr -4
.text$mn:00002420 lpString        = dword ptr  8
.text$mn:00002420 lParam          = dword ptr  0Ch
.text$mn:00002420
.text$mn:00002420                 push    ebp
.text$mn:00002421                 mov     ebp, esp
.text$mn:00002423                 push    0FFFFFFFFh
.text$mn:00002425                 push    offset __ehhandler$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z
.text$mn:0000242A                 mov     eax, large fs:0
.text$mn:00002430                 push    eax
.text$mn:00002431                 sub     esp, 2ECh
.text$mn:00002437                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000243C                 xor     eax, ebp
.text$mn:0000243E                 mov     [ebp+var_10], eax
.text$mn:00002441                 push    eax
.text$mn:00002442                 lea     eax, [ebp+var_C]
.text$mn:00002445                 mov     large fs:0, eax
.text$mn:0000244B                 mov     [ebp+var_2E0], ecx
.text$mn:00002451                 mov     [ebp+var_2D1], 1
.text$mn:00002458                 mov     [ebp+var_2D2], 0
.text$mn:0000245F                 mov     eax, [ebp+lpString]
.text$mn:00002462                 push    eax             ; Str
.text$mn:00002463                 lea     ecx, [ebp+var_48]
.text$mn:00002466                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:0000246B                 mov     [ebp+var_4], 0
.text$mn:00002472                 mov     ecx, [ebp+lpString]
.text$mn:00002475                 push    ecx             ; lpString
.text$mn:00002476                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:0000247C                 mov     edx, [ebp+lpString]
.text$mn:0000247F                 movzx   eax, word ptr [edx+eax*2-2]
.text$mn:00002484                 cmp     eax, 5Ch ; '\'
.text$mn:00002487                 jz      short loc_2496
.text$mn:00002489                 push    offset $SG127058 ; Str
.text$mn:0000248E                 lea     ecx, [ebp+var_48]
.text$mn:00002491                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00002496
.text$mn:00002496 loc_2496:                               ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+67j
.text$mn:00002496                 push    offset $SG127059 ; "*.*"
.text$mn:0000249B                 lea     ecx, [ebp+var_48]
.text$mn:0000249E                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:000024A3                 lea     ecx, [ebp+var_2F8]
.text$mn:000024A9                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:000024AE                 mov     byte ptr [ebp+var_4], 1
.text$mn:000024B2                 lea     ecx, [ebp+FindFileData]
.text$mn:000024B8                 push    ecx             ; lpFindFileData
.text$mn:000024B9                 lea     ecx, [ebp+var_48]
.text$mn:000024BC                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000024C1                 push    eax             ; lpFileName
.text$mn:000024C2                 call    dword ptr ds:__imp__FindFirstFileW@8 ; FindFirstFileW(x,x)
.text$mn:000024C8                 mov     [ebp+hFindFile], eax
.text$mn:000024CE
.text$mn:000024CE loc_24CE:                               ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+202j
.text$mn:000024CE                 cmp     [ebp+hFindFile], 0FFFFFFFFh
.text$mn:000024D5                 jnz     short loc_24DC
.text$mn:000024D7                 jmp     loc_2628
.text$mn:000024DC ; ---------------------------------------------------------------------------
.text$mn:000024DC
.text$mn:000024DC loc_24DC:                               ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+B5j
.text$mn:000024DC                 mov     edx, [ebp+FindFileData.dwFileAttributes]
.text$mn:000024E2                 and     edx, 10h
.text$mn:000024E5                 jz      loc_25DE
.text$mn:000024EB                 movzx   eax, [ebp+var_2D2]
.text$mn:000024F2                 test    eax, eax
.text$mn:000024F4                 jnz     short loc_2506
.text$mn:000024F6                 mov     ecx, [ebp+FindFileData.dwFileAttributes]
.text$mn:000024FC                 and     ecx, 2
.text$mn:000024FF                 jz      short loc_2506
.text$mn:00002501                 jmp     loc_25DC
.text$mn:00002506 ; ---------------------------------------------------------------------------
.text$mn:00002506
.text$mn:00002506 loc_2506:                               ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+D4j
.text$mn:00002506                                         ; ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+DFj
.text$mn:00002506                 movzx   edx, [ebp+var_2D1]
.text$mn:0000250D                 test    edx, edx
.text$mn:0000250F                 jz      loc_25DC
.text$mn:00002515                 push    offset $SG127078 ; lpString2
.text$mn:0000251A                 lea     eax, [ebp+FindFileData.cFileName]
.text$mn:00002520                 push    eax             ; lpString1
.text$mn:00002521                 call    dword ptr ds:__imp__lstrcmpW@8 ; lstrcmpW(x,x)
.text$mn:00002527                 test    eax, eax
.text$mn:00002529                 jz      loc_25DC
.text$mn:0000252F                 push    offset $SG127079 ; ".."
.text$mn:00002534                 lea     ecx, [ebp+FindFileData.cFileName]
.text$mn:0000253A                 push    ecx             ; lpString1
.text$mn:0000253B                 call    dword ptr ds:__imp__lstrcmpW@8 ; lstrcmpW(x,x)
.text$mn:00002541                 test    eax, eax
.text$mn:00002543                 jz      loc_25DC
.text$mn:00002549                 mov     edx, [ebp+lpString]
.text$mn:0000254C                 push    edx             ; Str
.text$mn:0000254D                 lea     ecx, [ebp+var_2C]
.text$mn:00002550                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002555                 mov     byte ptr [ebp+var_4], 2
.text$mn:00002559                 mov     eax, [ebp+lpString]
.text$mn:0000255C                 push    eax             ; lpString
.text$mn:0000255D                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00002563                 mov     ecx, [ebp+lpString]
.text$mn:00002566                 movzx   edx, word ptr [ecx+eax*2-2]
.text$mn:0000256B                 cmp     edx, 5Ch ; '\'
.text$mn:0000256E                 jz      short loc_257D
.text$mn:00002570                 push    offset $SG127082 ; Str
.text$mn:00002575                 lea     ecx, [ebp+var_2C]
.text$mn:00002578                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:0000257D
.text$mn:0000257D loc_257D:                               ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+14Ej
.text$mn:0000257D                 lea     eax, [ebp+FindFileData.cFileName]
.text$mn:00002583                 push    eax             ; Str
.text$mn:00002584                 lea     ecx, [ebp+var_2C]
.text$mn:00002587                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:0000258C                 push    offset $SG127083 ; Str
.text$mn:00002591                 lea     ecx, [ebp+var_2C]
.text$mn:00002594                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00002599                 lea     ecx, [ebp+FindFileData.cFileName]
.text$mn:0000259F                 push    ecx             ; wchar_t *
.text$mn:000025A0                 mov     edx, [ebp+lParam]
.text$mn:000025A3                 push    edx             ; lParam
.text$mn:000025A4                 mov     ecx, [ebp+var_2E0] ; this
.text$mn:000025AA                 call    ?addFolder@ProjectPanel@@IAEPAU_TREEITEM@@PAU2@PB_W@Z ; ProjectPanel::addFolder(_TREEITEM *,wchar_t const *)
.text$mn:000025AF                 mov     [ebp+var_2E8], eax
.text$mn:000025B5                 mov     eax, [ebp+var_2E8]
.text$mn:000025BB                 push    eax             ; struct _TREEITEM *
.text$mn:000025BC                 lea     ecx, [ebp+var_2C]
.text$mn:000025BF                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000025C4                 push    eax             ; lpString
.text$mn:000025C5                 mov     ecx, [ebp+var_2E0] ; this
.text$mn:000025CB                 call    ?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z ; ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)
.text$mn:000025D0                 mov     byte ptr [ebp+var_4], 1
.text$mn:000025D4                 lea     ecx, [ebp+var_2C]
.text$mn:000025D7                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000025DC
.text$mn:000025DC loc_25DC:                               ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+E1j
.text$mn:000025DC                                         ; ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+EFj ...
.text$mn:000025DC                 jmp     short loc_260C
.text$mn:000025DE ; ---------------------------------------------------------------------------
.text$mn:000025DE
.text$mn:000025DE loc_25DE:                               ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+C5j
.text$mn:000025DE                 lea     ecx, [ebp+FindFileData.cFileName]
.text$mn:000025E4                 push    ecx             ; Str
.text$mn:000025E5                 lea     ecx, [ebp+var_80]
.text$mn:000025E8                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000025ED                 mov     byte ptr [ebp+var_4], 3
.text$mn:000025F1                 lea     edx, [ebp+var_80]
.text$mn:000025F4                 push    edx
.text$mn:000025F5                 lea     ecx, [ebp+var_2F8]
.text$mn:000025FB                 call    ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00002600                 mov     byte ptr [ebp+var_4], 1
.text$mn:00002604                 lea     ecx, [ebp+var_80]
.text$mn:00002607                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000260C
.text$mn:0000260C loc_260C:                               ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *):loc_25DCj
.text$mn:0000260C                 lea     eax, [ebp+FindFileData]
.text$mn:00002612                 push    eax             ; lpFindFileData
.text$mn:00002613                 mov     ecx, [ebp+hFindFile]
.text$mn:00002619                 push    ecx             ; hFindFile
.text$mn:0000261A                 call    dword ptr ds:__imp__FindNextFileW@8 ; FindNextFileW(x,x)
.text$mn:00002620                 test    eax, eax
.text$mn:00002622                 jnz     loc_24CE
.text$mn:00002628
.text$mn:00002628 loc_2628:                               ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+B7j
.text$mn:00002628                 mov     [ebp+var_2D8], 0
.text$mn:00002632                 lea     ecx, [ebp+var_2F8]
.text$mn:00002638                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:0000263D                 mov     [ebp+var_2E4], eax
.text$mn:00002643                 jmp     short loc_2654
.text$mn:00002645 ; ---------------------------------------------------------------------------
.text$mn:00002645
.text$mn:00002645 loc_2645:                               ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+2D8j
.text$mn:00002645                 mov     edx, [ebp+var_2D8]
.text$mn:0000264B                 add     edx, 1
.text$mn:0000264E                 mov     [ebp+var_2D8], edx
.text$mn:00002654
.text$mn:00002654 loc_2654:                               ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+223j
.text$mn:00002654                 mov     eax, [ebp+var_2D8]
.text$mn:0000265A                 cmp     eax, [ebp+var_2E4]
.text$mn:00002660                 jnb     loc_26FD
.text$mn:00002666                 mov     ecx, [ebp+lpString]
.text$mn:00002669                 push    ecx             ; Str
.text$mn:0000266A                 lea     ecx, [ebp+var_64]
.text$mn:0000266D                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002672                 mov     byte ptr [ebp+var_4], 4
.text$mn:00002676                 mov     edx, [ebp+lpString]
.text$mn:00002679                 push    edx             ; lpString
.text$mn:0000267A                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00002680                 mov     ecx, [ebp+lpString]
.text$mn:00002683                 movzx   edx, word ptr [ecx+eax*2-2]
.text$mn:00002688                 cmp     edx, 5Ch ; '\'
.text$mn:0000268B                 jz      short loc_269A
.text$mn:0000268D                 push    offset $SG127094 ; Str
.text$mn:00002692                 lea     ecx, [ebp+var_64]
.text$mn:00002695                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:0000269A
.text$mn:0000269A loc_269A:                               ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+26Bj
.text$mn:0000269A                 mov     eax, [ebp+var_2D8]
.text$mn:000026A0                 push    eax
.text$mn:000026A1                 lea     ecx, [ebp+var_2F8]
.text$mn:000026A7                 call    ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)
.text$mn:000026AC                 push    eax
.text$mn:000026AD                 lea     ecx, [ebp+var_64]
.text$mn:000026B0                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000026B5                 lea     ecx, [ebp+var_64]
.text$mn:000026B8                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000026BD                 push    eax             ; wchar_t *
.text$mn:000026BE                 push    5               ; int
.text$mn:000026C0                 mov     ecx, [ebp+lParam]
.text$mn:000026C3                 push    ecx             ; struct _TREEITEM *
.text$mn:000026C4                 mov     edx, [ebp+var_2D8]
.text$mn:000026CA                 push    edx
.text$mn:000026CB                 lea     ecx, [ebp+var_2F8]
.text$mn:000026D1                 call    ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)
.text$mn:000026D6                 mov     ecx, eax
.text$mn:000026D8                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000026DD                 push    eax             ; wchar_t *
.text$mn:000026DE                 mov     ecx, [ebp+var_2E0]
.text$mn:000026E4                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000026E7                 call    ?addItem@TreeView@@QAEPAU_TREEITEM@@PB_WPAU2@H0@Z ; TreeView::addItem(wchar_t const *,_TREEITEM *,int,wchar_t const *)
.text$mn:000026EC                 mov     byte ptr [ebp+var_4], 1
.text$mn:000026F0                 lea     ecx, [ebp+var_64]
.text$mn:000026F3                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000026F8                 jmp     loc_2645
.text$mn:000026FD ; ---------------------------------------------------------------------------
.text$mn:000026FD
.text$mn:000026FD loc_26FD:                               ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+240j
.text$mn:000026FD                 mov     eax, [ebp+hFindFile]
.text$mn:00002703                 push    eax             ; hFindFile
.text$mn:00002704                 call    dword ptr ds:__imp__FindClose@4 ; FindClose(x)
.text$mn:0000270A                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000270E                 lea     ecx, [ebp+var_2F8]
.text$mn:00002714                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00002719                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002720                 lea     ecx, [ebp+var_48]
.text$mn:00002723                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002728                 mov     ecx, [ebp+var_C]
.text$mn:0000272B                 mov     large fs:0, ecx
.text$mn:00002732                 pop     ecx
.text$mn:00002733                 mov     ecx, [ebp+var_10]
.text$mn:00002736                 xor     ecx, ebp
.text$mn:00002738                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000273D                 mov     esp, ebp
.text$mn:0000273F                 pop     ebp
.text$mn:00002740                 retn    8
.text$mn:00002740 ?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z endp
.text$mn:00002740
.text$mn:00002740 ; ---------------------------------------------------------------------------
.text$mn:00002743                 align 10h
.text$mn:00002750
.text$mn:00002750 ; =============== S U B R O U T I N E =======================================
.text$mn:00002750
.text$mn:00002750 ; Attributes: bp-based frame
.text$mn:00002750
.text$mn:00002750 ; struct _TREEITEM *__thiscall ProjectPanel::addFolder(ProjectPanel *this, LPARAM lParam, const wchar_t *)
.text$mn:00002750                 public ?addFolder@ProjectPanel@@IAEPAU_TREEITEM@@PAU2@PB_W@Z
.text$mn:00002750 ?addFolder@ProjectPanel@@IAEPAU_TREEITEM@@PAU2@PB_W@Z proc near
.text$mn:00002750                                         ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+18Ap
.text$mn:00002750                                         ; ProjectPanel::popupMenuCmd(int)+378p
.text$mn:00002750
.text$mn:00002750 var_8           = dword ptr -8
.text$mn:00002750 var_4           = dword ptr -4
.text$mn:00002750 lParam          = dword ptr  8
.text$mn:00002750 arg_4           = dword ptr  0Ch
.text$mn:00002750
.text$mn:00002750                 push    ebp
.text$mn:00002751                 mov     ebp, esp
.text$mn:00002753                 sub     esp, 8
.text$mn:00002756                 mov     [ebp+var_4], ecx
.text$mn:00002759                 push    0               ; wchar_t *
.text$mn:0000275B                 push    4               ; int
.text$mn:0000275D                 mov     eax, [ebp+lParam]
.text$mn:00002760                 push    eax             ; struct _TREEITEM *
.text$mn:00002761                 mov     ecx, [ebp+arg_4]
.text$mn:00002764                 push    ecx             ; wchar_t *
.text$mn:00002765                 mov     ecx, [ebp+var_4]
.text$mn:00002768                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:0000276B                 call    ?addItem@TreeView@@QAEPAU_TREEITEM@@PB_WPAU2@H0@Z ; TreeView::addItem(wchar_t const *,_TREEITEM *,int,wchar_t const *)
.text$mn:00002770                 mov     [ebp+var_8], eax
.text$mn:00002773                 mov     edx, [ebp+lParam]
.text$mn:00002776                 push    edx             ; lParam
.text$mn:00002777                 push    2               ; wParam
.text$mn:00002779                 push    1102h           ; Msg
.text$mn:0000277E                 mov     ecx, [ebp+var_4]
.text$mn:00002781                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00002784                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00002789                 push    eax             ; hWnd
.text$mn:0000278A                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002790                 mov     eax, [ebp+var_8]
.text$mn:00002793                 push    eax             ; lParam
.text$mn:00002794                 push    0               ; wParam
.text$mn:00002796                 push    1141h           ; Msg
.text$mn:0000279B                 mov     ecx, [ebp+var_4]
.text$mn:0000279E                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000027A1                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:000027A6                 push    eax             ; hWnd
.text$mn:000027A7                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000027AD                 mov     ecx, [ebp+lParam]
.text$mn:000027B0                 push    ecx
.text$mn:000027B1                 mov     ecx, [ebp+var_4]
.text$mn:000027B4                 call    ?getNodeType@ProjectPanel@@IAE?AW4NodeType@@PAU_TREEITEM@@@Z ; ProjectPanel::getNodeType(_TREEITEM *)
.text$mn:000027B9                 cmp     eax, 2
.text$mn:000027BC                 jnz     short loc_27D1
.text$mn:000027BE                 push    3               ; int
.text$mn:000027C0                 push    3               ; int
.text$mn:000027C2                 mov     edx, [ebp+lParam]
.text$mn:000027C5                 push    edx             ; struct _TREEITEM *
.text$mn:000027C6                 mov     ecx, [ebp+var_4]
.text$mn:000027C9                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000027CC                 call    ?setItemImage@TreeView@@QAEXPAU_TREEITEM@@HH@Z ; TreeView::setItemImage(_TREEITEM *,int,int)
.text$mn:000027D1
.text$mn:000027D1 loc_27D1:                               ; CODE XREF: ProjectPanel::addFolder(_TREEITEM *,wchar_t const *)+6Cj
.text$mn:000027D1                 mov     eax, [ebp+var_8]
.text$mn:000027D4                 mov     esp, ebp
.text$mn:000027D6                 pop     ebp
.text$mn:000027D7                 retn    8
.text$mn:000027D7 ?addFolder@ProjectPanel@@IAEPAU_TREEITEM@@PAU2@PB_W@Z endp
.text$mn:000027D7
.text$mn:000027D7 ; ---------------------------------------------------------------------------
.text$mn:000027DA                 align 10h
.text$mn:000027E0
.text$mn:000027E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000027E0
.text$mn:000027E0 ; Attributes: bp-based frame
.text$mn:000027E0
.text$mn:000027E0 ; bool __thiscall ProjectPanel::writeWorkSpace(ProjectPanel *this, wchar_t *)
.text$mn:000027E0                 public ?writeWorkSpace@ProjectPanel@@IAE_NPA_W@Z
.text$mn:000027E0 ?writeWorkSpace@ProjectPanel@@IAE_NPA_W@Z proc near
.text$mn:000027E0                                         ; CODE XREF: ProjectPanel::saveWorkSpace(void)+37p
.text$mn:000027E0                                         ; ProjectPanel::saveWorkSpaceAs(bool)+9Cp
.text$mn:000027E0
.text$mn:000027E0 lParam          = dword ptr -40Ch
.text$mn:000027E0 var_408         = dword ptr -408h
.text$mn:000027E0 var_3FC         = dword ptr -3FCh
.text$mn:000027E0 var_3F8         = dword ptr -3F8h
.text$mn:000027E0 var_3E4         = dword ptr -3E4h
.text$mn:000027E0 var_3E0         = dword ptr -3E0h
.text$mn:000027E0 var_3DC         = dword ptr -3DCh
.text$mn:000027E0 var_3D8         = dword ptr -3D8h
.text$mn:000027E0 var_3D4         = dword ptr -3D4h
.text$mn:000027E0 var_3D0         = dword ptr -3D0h
.text$mn:000027E0 var_3CC         = dword ptr -3CCh
.text$mn:000027E0 var_3C8         = dword ptr -3C8h
.text$mn:000027E0 var_3C4         = dword ptr -3C4h
.text$mn:000027E0 var_3C0         = dword ptr -3C0h
.text$mn:000027E0 var_3BC         = dword ptr -3BCh
.text$mn:000027E0 var_3B6         = byte ptr -3B6h
.text$mn:000027E0 var_3B5         = byte ptr -3B5h
.text$mn:000027E0 var_3B4         = byte ptr -3B4h
.text$mn:000027E0 var_320         = byte ptr -320h
.text$mn:000027E0 var_28C         = byte ptr -28Ch
.text$mn:000027E0 var_218         = byte ptr -218h
.text$mn:000027E0 var_10          = dword ptr -10h
.text$mn:000027E0 var_C           = dword ptr -0Ch
.text$mn:000027E0 var_4           = dword ptr -4
.text$mn:000027E0 arg_0           = dword ptr  8
.text$mn:000027E0
.text$mn:000027E0                 push    ebp
.text$mn:000027E1                 mov     ebp, esp
.text$mn:000027E3                 push    0FFFFFFFFh
.text$mn:000027E5                 push    offset __ehhandler$?writeWorkSpace@ProjectPanel@@IAE_NPA_W@Z
.text$mn:000027EA                 mov     eax, large fs:0
.text$mn:000027F0                 push    eax
.text$mn:000027F1                 sub     esp, 400h
.text$mn:000027F7                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000027FC                 xor     eax, ebp
.text$mn:000027FE                 mov     [ebp+var_10], eax
.text$mn:00002801                 push    eax
.text$mn:00002802                 lea     eax, [ebp+var_C]
.text$mn:00002805                 mov     large fs:0, eax
.text$mn:0000280B                 mov     [ebp+var_3BC], ecx
.text$mn:00002811                 cmp     [ebp+arg_0], 0
.text$mn:00002815                 jz      short loc_2822
.text$mn:00002817                 mov     eax, [ebp+arg_0]
.text$mn:0000281A                 mov     [ebp+var_3D0], eax
.text$mn:00002820                 jmp     short loc_2839
.text$mn:00002822 ; ---------------------------------------------------------------------------
.text$mn:00002822
.text$mn:00002822 loc_2822:                               ; CODE XREF: ProjectPanel::writeWorkSpace(wchar_t *)+35j
.text$mn:00002822                 mov     ecx, [ebp+var_3BC]
.text$mn:00002828                 add     ecx, 0C4h ; '-'
.text$mn:0000282E                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002833                 mov     [ebp+var_3D0], eax
.text$mn:00002839
.text$mn:00002839 loc_2839:                               ; CODE XREF: ProjectPanel::writeWorkSpace(wchar_t *)+40j
.text$mn:00002839                 mov     ecx, [ebp+var_3D0]
.text$mn:0000283F                 mov     [ebp+var_3CC], ecx
.text$mn:00002845                 mov     edx, [ebp+var_3CC]
.text$mn:0000284B                 push    edx             ; wchar_t *
.text$mn:0000284C                 lea     ecx, [ebp+var_28C] ; this
.text$mn:00002852                 call    ??0TiXmlDocument@@QAE@PB_W@Z ; TiXmlDocument::TiXmlDocument(wchar_t const *)
.text$mn:00002857                 mov     [ebp+var_4], 0
.text$mn:0000285E                 push    offset $SG126554 ; "NotepadPlus"
.text$mn:00002863                 lea     ecx, [ebp+var_3B4] ; this
.text$mn:00002869                 call    ??0TiXmlElement@@QAE@PB_W@Z ; TiXmlElement::TiXmlElement(wchar_t const *)
.text$mn:0000286E                 mov     [ebp+var_3D4], eax
.text$mn:00002874                 mov     eax, [ebp+var_3D4]
.text$mn:0000287A                 mov     [ebp+var_3DC], eax
.text$mn:00002880                 mov     byte ptr [ebp+var_4], 1
.text$mn:00002884                 mov     ecx, [ebp+var_3DC]
.text$mn:0000288A                 push    ecx             ; struct TiXmlNode *
.text$mn:0000288B                 lea     ecx, [ebp+var_28C] ; this
.text$mn:00002891                 call    ?InsertEndChild@TiXmlNode@@QAEPAV1@ABV1@@Z ; TiXmlNode::InsertEndChild(TiXmlNode const &)
.text$mn:00002896                 mov     [ebp+var_3E0], eax
.text$mn:0000289C                 mov     byte ptr [ebp+var_4], 0
.text$mn:000028A0                 lea     ecx, [ebp+var_3B4] ; this
.text$mn:000028A6                 call    ??1TiXmlElement@@UAE@XZ ; TiXmlElement::~TiXmlElement(void)
.text$mn:000028AB                 mov     [ebp+lParam], 1
.text$mn:000028B5                 lea     edx, [ebp+var_218]
.text$mn:000028BB                 mov     [ebp+var_3FC], edx
.text$mn:000028C1                 mov     [ebp+var_3F8], 104h
.text$mn:000028CB                 mov     ecx, [ebp+var_3BC]
.text$mn:000028D1                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000028D4                 call    ?getRoot@TreeView@@QBEPAU_TREEITEM@@XZ ; TreeView::getRoot(void)
.text$mn:000028D9                 mov     [ebp+var_3C4], eax
.text$mn:000028DF                 cmp     [ebp+var_3C4], 0
.text$mn:000028E6                 jnz     short loc_290C
.text$mn:000028E8                 mov     [ebp+var_3B6], 0
.text$mn:000028EF                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000028F6                 lea     ecx, [ebp+var_28C] ; this
.text$mn:000028FC                 call    ??1TiXmlDocument@@UAE@XZ ; TiXmlDocument::~TiXmlDocument(void)
.text$mn:00002901                 mov     al, [ebp+var_3B6]
.text$mn:00002907                 jmp     loc_2A3A
.text$mn:0000290C ; ---------------------------------------------------------------------------
.text$mn:0000290C
.text$mn:0000290C loc_290C:                               ; CODE XREF: ProjectPanel::writeWorkSpace(wchar_t *)+106j
.text$mn:0000290C                 mov     eax, [ebp+var_3C4]
.text$mn:00002912                 push    eax             ; struct _TREEITEM *
.text$mn:00002913                 mov     ecx, [ebp+var_3BC]
.text$mn:00002919                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:0000291C                 call    ?getChildFrom@TreeView@@QBEPAU_TREEITEM@@PAU2@@Z ; TreeView::getChildFrom(_TREEITEM *)
.text$mn:00002921                 mov     [ebp+var_3C0], eax
.text$mn:00002927                 jmp     short loc_2944
.text$mn:00002929 ; ---------------------------------------------------------------------------
.text$mn:00002929
.text$mn:00002929 loc_2929:                               ; CODE XREF: ProjectPanel::writeWorkSpace(wchar_t *)+22Bj
.text$mn:00002929                 mov     ecx, [ebp+var_3C0]
.text$mn:0000292F                 push    ecx             ; struct _TREEITEM *
.text$mn:00002930                 mov     ecx, [ebp+var_3BC]
.text$mn:00002936                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00002939                 call    ?getNextSibling@TreeView@@QBEPAU_TREEITEM@@PAU2@@Z ; TreeView::getNextSibling(_TREEITEM *)
.text$mn:0000293E                 mov     [ebp+var_3C0], eax
.text$mn:00002944
.text$mn:00002944 loc_2944:                               ; CODE XREF: ProjectPanel::writeWorkSpace(wchar_t *)+147j
.text$mn:00002944                 cmp     [ebp+var_3C0], 0
.text$mn:0000294B                 jz      loc_2A10
.text$mn:00002951                 mov     edx, [ebp+var_3C0]
.text$mn:00002957                 mov     [ebp+var_408], edx
.text$mn:0000295D                 lea     eax, [ebp+lParam]
.text$mn:00002963                 push    eax             ; lParam
.text$mn:00002964                 push    0               ; wParam
.text$mn:00002966                 push    113Eh           ; Msg
.text$mn:0000296B                 mov     ecx, [ebp+var_3BC]
.text$mn:00002971                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00002974                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00002979                 push    eax             ; hWnd
.text$mn:0000297A                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002980                 push    offset $SG126567 ; "Project"
.text$mn:00002985                 lea     ecx, [ebp+var_320] ; this
.text$mn:0000298B                 call    ??0TiXmlElement@@QAE@PB_W@Z ; TiXmlElement::TiXmlElement(wchar_t const *)
.text$mn:00002990                 mov     [ebp+var_3D8], eax
.text$mn:00002996                 mov     ecx, [ebp+var_3D8]
.text$mn:0000299C                 mov     [ebp+var_3E4], ecx
.text$mn:000029A2                 mov     byte ptr [ebp+var_4], 2
.text$mn:000029A6                 mov     edx, [ebp+var_3E4]
.text$mn:000029AC                 push    edx             ; struct TiXmlNode *
.text$mn:000029AD                 mov     ecx, [ebp+var_3E0] ; this
.text$mn:000029B3                 call    ?InsertEndChild@TiXmlNode@@QAEPAV1@ABV1@@Z ; TiXmlNode::InsertEndChild(TiXmlNode const &)
.text$mn:000029B8                 mov     [ebp+var_3C8], eax
.text$mn:000029BE                 mov     byte ptr [ebp+var_4], 0
.text$mn:000029C2                 lea     ecx, [ebp+var_320] ; this
.text$mn:000029C8                 call    ??1TiXmlElement@@UAE@XZ ; TiXmlElement::~TiXmlElement(void)
.text$mn:000029CD                 mov     eax, [ebp+var_3FC]
.text$mn:000029D3                 push    eax             ; wchar_t *
.text$mn:000029D4                 push    offset $SG126568 ; "name"
.text$mn:000029D9                 mov     ecx, [ebp+var_3C8] ; this
.text$mn:000029DF                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:000029E4                 mov     ecx, eax        ; this
.text$mn:000029E6                 call    ?SetAttribute@TiXmlElement@@QAEXPB_W0@Z ; TiXmlElement::SetAttribute(wchar_t const *,wchar_t const *)
.text$mn:000029EB                 mov     ecx, [ebp+var_3CC]
.text$mn:000029F1                 push    ecx             ; wchar_t *
.text$mn:000029F2                 mov     edx, [ebp+var_3C0]
.text$mn:000029F8                 push    edx             ; struct _TREEITEM *
.text$mn:000029F9                 mov     eax, [ebp+var_3C8]
.text$mn:000029FF                 push    eax             ; struct TiXmlNode *
.text$mn:00002A00                 mov     ecx, [ebp+var_3BC] ; this
.text$mn:00002A06                 call    ?buildProjectXml@ProjectPanel@@IAEXPAVTiXmlNode@@PAU_TREEITEM@@PB_W@Z ; ProjectPanel::buildProjectXml(TiXmlNode *,_TREEITEM *,wchar_t const *)
.text$mn:00002A0B                 jmp     loc_2929
.text$mn:00002A10 ; ---------------------------------------------------------------------------
.text$mn:00002A10
.text$mn:00002A10 loc_2A10:                               ; CODE XREF: ProjectPanel::writeWorkSpace(wchar_t *)+16Bj
.text$mn:00002A10                 lea     ecx, [ebp+var_28C] ; this
.text$mn:00002A16                 call    ?SaveFile@TiXmlDocument@@QBE_NXZ ; TiXmlDocument::SaveFile(void)
.text$mn:00002A1B                 mov     [ebp+var_3B5], 1
.text$mn:00002A22                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002A29                 lea     ecx, [ebp+var_28C] ; this
.text$mn:00002A2F                 call    ??1TiXmlDocument@@UAE@XZ ; TiXmlDocument::~TiXmlDocument(void)
.text$mn:00002A34                 mov     al, [ebp+var_3B5]
.text$mn:00002A3A
.text$mn:00002A3A loc_2A3A:                               ; CODE XREF: ProjectPanel::writeWorkSpace(wchar_t *)+127j
.text$mn:00002A3A                 mov     ecx, [ebp+var_C]
.text$mn:00002A3D                 mov     large fs:0, ecx
.text$mn:00002A44                 pop     ecx
.text$mn:00002A45                 mov     ecx, [ebp+var_10]
.text$mn:00002A48                 xor     ecx, ebp
.text$mn:00002A4A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00002A4F                 mov     esp, ebp
.text$mn:00002A51                 pop     ebp
.text$mn:00002A52                 retn    4
.text$mn:00002A52 ?writeWorkSpace@ProjectPanel@@IAE_NPA_W@Z endp
.text$mn:00002A52
.text$mn:00002A52 ; ---------------------------------------------------------------------------
.text$mn:00002A55                 align 10h
.text$mn:00002A60
.text$mn:00002A60 ; =============== S U B R O U T I N E =======================================
.text$mn:00002A60
.text$mn:00002A60 ; Attributes: bp-based frame
.text$mn:00002A60
.text$mn:00002A60 ; int __stdcall ProjectPanel::getRelativePath(int, int, LPCWSTR lpString2)
.text$mn:00002A60                 public ?getRelativePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV23@PB_W@Z
.text$mn:00002A60 ?getRelativePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV23@PB_W@Z proc near
.text$mn:00002A60                                         ; CODE XREF: ProjectPanel::buildProjectXml(TiXmlNode *,_TREEITEM *,wchar_t const *)+F3p
.text$mn:00002A60
.text$mn:00002A60 var_228         = dword ptr -228h
.text$mn:00002A60 var_224         = dword ptr -224h
.text$mn:00002A60 Str             = dword ptr -220h
.text$mn:00002A60 var_21C         = dword ptr -21Ch
.text$mn:00002A60 String1         = word ptr -218h
.text$mn:00002A60 var_10          = dword ptr -10h
.text$mn:00002A60 var_C           = dword ptr -0Ch
.text$mn:00002A60 var_4           = dword ptr -4
.text$mn:00002A60 arg_0           = dword ptr  8
.text$mn:00002A60 arg_4           = dword ptr  0Ch
.text$mn:00002A60 lpString2       = dword ptr  10h
.text$mn:00002A60
.text$mn:00002A60                 push    ebp
.text$mn:00002A61                 mov     ebp, esp
.text$mn:00002A63                 push    0FFFFFFFFh
.text$mn:00002A65                 push    offset __ehhandler$?getRelativePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV23@PB_W@Z
.text$mn:00002A6A                 mov     eax, large fs:0
.text$mn:00002A70                 push    eax
.text$mn:00002A71                 sub     esp, 21Ch
.text$mn:00002A77                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002A7C                 xor     eax, ebp
.text$mn:00002A7E                 mov     [ebp+var_10], eax
.text$mn:00002A81                 push    esi
.text$mn:00002A82                 push    eax
.text$mn:00002A83                 lea     eax, [ebp+var_C]
.text$mn:00002A86                 mov     large fs:0, eax
.text$mn:00002A8C                 mov     [ebp+var_228], ecx
.text$mn:00002A92                 mov     [ebp+var_21C], 0
.text$mn:00002A9C                 mov     eax, [ebp+lpString2]
.text$mn:00002A9F                 push    eax             ; lpString2
.text$mn:00002AA0                 lea     ecx, [ebp+String1]
.text$mn:00002AA6                 push    ecx             ; lpString1
.text$mn:00002AA7                 call    dword ptr ds:__imp__lstrcpyW@8 ; lstrcpyW(x,x)
.text$mn:00002AAD                 lea     edx, [ebp+String1]
.text$mn:00002AB3                 push    edx             ; pszPath
.text$mn:00002AB4                 call    dword ptr ds:__imp__PathRemoveFileSpecW@4 ; PathRemoveFileSpecW(x)
.text$mn:00002ABA                 push    0               ; int
.text$mn:00002ABC                 lea     eax, [ebp+String1]
.text$mn:00002AC2                 push    eax             ; Str
.text$mn:00002AC3                 mov     ecx, [ebp+arg_4]
.text$mn:00002AC6                 call    ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint)
.text$mn:00002ACB                 mov     [ebp+var_224], eax
.text$mn:00002AD1                 mov     ecx, [ebp+var_224]
.text$mn:00002AD7                 cmp     ecx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00002ADD                 jnz     short loc_2B06
.text$mn:00002ADF                 mov     edx, [ebp+arg_4]
.text$mn:00002AE2                 push    edx
.text$mn:00002AE3                 mov     ecx, [ebp+arg_0]
.text$mn:00002AE6                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00002AEB                 mov     [ebp+var_4], 0
.text$mn:00002AF2                 mov     eax, [ebp+var_21C]
.text$mn:00002AF8                 or      eax, 1
.text$mn:00002AFB                 mov     [ebp+var_21C], eax
.text$mn:00002B01                 mov     eax, [ebp+arg_0]
.text$mn:00002B04                 jmp     short loc_2B74
.text$mn:00002B06 ; ---------------------------------------------------------------------------
.text$mn:00002B06
.text$mn:00002B06 loc_2B06:                               ; CODE XREF: ProjectPanel::getRelativePath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+7Dj
.text$mn:00002B06                 mov     ecx, [ebp+arg_4]
.text$mn:00002B09                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002B0E                 mov     esi, eax
.text$mn:00002B10                 lea     ecx, [ebp+String1]
.text$mn:00002B16                 push    ecx             ; lpString
.text$mn:00002B17                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00002B1D                 lea     edx, [esi+eax*2]
.text$mn:00002B20                 mov     [ebp+Str], edx
.text$mn:00002B26                 mov     eax, 2
.text$mn:00002B2B                 imul    ecx, eax, 0
.text$mn:00002B2E                 mov     edx, [ebp+Str]
.text$mn:00002B34                 movzx   eax, word ptr [edx+ecx]
.text$mn:00002B38                 cmp     eax, 5Ch ; '\'
.text$mn:00002B3B                 jnz     short loc_2B4C
.text$mn:00002B3D                 mov     ecx, [ebp+Str]
.text$mn:00002B43                 add     ecx, 2
.text$mn:00002B46                 mov     [ebp+Str], ecx
.text$mn:00002B4C
.text$mn:00002B4C loc_2B4C:                               ; CODE XREF: ProjectPanel::getRelativePath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+DBj
.text$mn:00002B4C                 mov     edx, [ebp+Str]
.text$mn:00002B52                 push    edx             ; Str
.text$mn:00002B53                 mov     ecx, [ebp+arg_0]
.text$mn:00002B56                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002B5B                 mov     [ebp+var_4], 0
.text$mn:00002B62                 mov     eax, [ebp+var_21C]
.text$mn:00002B68                 or      eax, 1
.text$mn:00002B6B                 mov     [ebp+var_21C], eax
.text$mn:00002B71                 mov     eax, [ebp+arg_0]
.text$mn:00002B74
.text$mn:00002B74 loc_2B74:                               ; CODE XREF: ProjectPanel::getRelativePath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+A4j
.text$mn:00002B74                 mov     ecx, [ebp+var_C]
.text$mn:00002B77                 mov     large fs:0, ecx
.text$mn:00002B7E                 pop     ecx
.text$mn:00002B7F                 pop     esi
.text$mn:00002B80                 mov     ecx, [ebp+var_10]
.text$mn:00002B83                 xor     ecx, ebp
.text$mn:00002B85                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00002B8A                 mov     esp, ebp
.text$mn:00002B8C                 pop     ebp
.text$mn:00002B8D                 retn    0Ch
.text$mn:00002B8D ?getRelativePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV23@PB_W@Z endp
.text$mn:00002B8D
.text$mn:00002B90
.text$mn:00002B90 ; =============== S U B R O U T I N E =======================================
.text$mn:00002B90
.text$mn:00002B90 ; Attributes: bp-based frame
.text$mn:00002B90
.text$mn:00002B90 ; void __thiscall ProjectPanel::buildProjectXml(ProjectPanel *this, struct TiXmlNode *, struct _TREEITEM *, const wchar_t *)
.text$mn:00002B90                 public ?buildProjectXml@ProjectPanel@@IAEXPAVTiXmlNode@@PAU_TREEITEM@@PB_W@Z
.text$mn:00002B90 ?buildProjectXml@ProjectPanel@@IAEXPAVTiXmlNode@@PAU_TREEITEM@@PB_W@Z proc near
.text$mn:00002B90                                         ; CODE XREF: ProjectPanel::writeWorkSpace(wchar_t *)+226p
.text$mn:00002B90                                         ; ProjectPanel::buildProjectXml(TiXmlNode *,_TREEITEM *,wchar_t const *)+209p
.text$mn:00002B90
.text$mn:00002B90 lParam          = dword ptr -3A8h
.text$mn:00002B90 var_3A4         = dword ptr -3A4h
.text$mn:00002B90 var_398         = dword ptr -398h
.text$mn:00002B90 var_394         = dword ptr -394h
.text$mn:00002B90 var_384         = dword ptr -384h
.text$mn:00002B90 var_380         = dword ptr -380h
.text$mn:00002B90 var_37C         = dword ptr -37Ch
.text$mn:00002B90 var_378         = dword ptr -378h
.text$mn:00002B90 var_374         = dword ptr -374h
.text$mn:00002B90 var_370         = dword ptr -370h
.text$mn:00002B90 var_36C         = dword ptr -36Ch
.text$mn:00002B90 var_368         = dword ptr -368h
.text$mn:00002B90 var_364         = dword ptr -364h
.text$mn:00002B90 var_360         = dword ptr -360h
.text$mn:00002B90 var_35C         = byte ptr -35Ch
.text$mn:00002B90 var_2C8         = byte ptr -2C8h
.text$mn:00002B90 var_234         = dword ptr -234h
.text$mn:00002B90 var_218         = byte ptr -218h
.text$mn:00002B90 var_10          = dword ptr -10h
.text$mn:00002B90 var_C           = dword ptr -0Ch
.text$mn:00002B90 var_4           = dword ptr -4
.text$mn:00002B90 arg_0           = dword ptr  8
.text$mn:00002B90 arg_4           = dword ptr  0Ch
.text$mn:00002B90 lpString2       = dword ptr  10h
.text$mn:00002B90
.text$mn:00002B90                 push    ebp
.text$mn:00002B91                 mov     ebp, esp
.text$mn:00002B93                 push    0FFFFFFFFh
.text$mn:00002B95                 push    offset __ehhandler$?buildProjectXml@ProjectPanel@@IAEXPAVTiXmlNode@@PAU_TREEITEM@@PB_W@Z
.text$mn:00002B9A                 mov     eax, large fs:0
.text$mn:00002BA0                 push    eax
.text$mn:00002BA1                 sub     esp, 39Ch
.text$mn:00002BA7                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002BAC                 xor     eax, ebp
.text$mn:00002BAE                 mov     [ebp+var_10], eax
.text$mn:00002BB1                 push    eax
.text$mn:00002BB2                 lea     eax, [ebp+var_C]
.text$mn:00002BB5                 mov     large fs:0, eax
.text$mn:00002BBB                 mov     [ebp+var_364], ecx
.text$mn:00002BC1                 mov     [ebp+lParam], 5
.text$mn:00002BCB                 lea     eax, [ebp+var_218]
.text$mn:00002BD1                 mov     [ebp+var_398], eax
.text$mn:00002BD7                 mov     [ebp+var_394], 104h
.text$mn:00002BE1                 mov     ecx, [ebp+arg_4]
.text$mn:00002BE4                 push    ecx             ; struct _TREEITEM *
.text$mn:00002BE5                 mov     ecx, [ebp+var_364]
.text$mn:00002BEB                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00002BEE                 call    ?getChildFrom@TreeView@@QBEPAU_TREEITEM@@PAU2@@Z ; TreeView::getChildFrom(_TREEITEM *)
.text$mn:00002BF3                 mov     [ebp+var_360], eax
.text$mn:00002BF9                 jmp     short loc_2C16
.text$mn:00002BFB ; ---------------------------------------------------------------------------
.text$mn:00002BFB
.text$mn:00002BFB loc_2BFB:                               ; CODE XREF: ProjectPanel::buildProjectXml(TiXmlNode *,_TREEITEM *,wchar_t const *):loc_2D9Ej
.text$mn:00002BFB                 mov     edx, [ebp+var_360]
.text$mn:00002C01                 push    edx             ; struct _TREEITEM *
.text$mn:00002C02                 mov     ecx, [ebp+var_364]
.text$mn:00002C08                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00002C0B                 call    ?getNextSibling@TreeView@@QBEPAU_TREEITEM@@PAU2@@Z ; TreeView::getNextSibling(_TREEITEM *)
.text$mn:00002C10                 mov     [ebp+var_360], eax
.text$mn:00002C16
.text$mn:00002C16 loc_2C16:                               ; CODE XREF: ProjectPanel::buildProjectXml(TiXmlNode *,_TREEITEM *,wchar_t const *)+69j
.text$mn:00002C16                 cmp     [ebp+var_360], 0
.text$mn:00002C1D                 jz      loc_2DA3
.text$mn:00002C23                 mov     eax, [ebp+var_360]
.text$mn:00002C29                 mov     [ebp+var_3A4], eax
.text$mn:00002C2F                 lea     ecx, [ebp+lParam]
.text$mn:00002C35                 push    ecx             ; lParam
.text$mn:00002C36                 push    0               ; wParam
.text$mn:00002C38                 push    113Eh           ; Msg
.text$mn:00002C3D                 mov     ecx, [ebp+var_364]
.text$mn:00002C43                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00002C46                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00002C4B                 push    eax             ; hWnd
.text$mn:00002C4C                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002C52                 cmp     [ebp+var_384], 0
.text$mn:00002C59                 jz      loc_2D13
.text$mn:00002C5F                 mov     edx, [ebp+var_384]
.text$mn:00002C65                 mov     [ebp+var_380], edx
.text$mn:00002C6B                 mov     eax, [ebp+lpString2]
.text$mn:00002C6E                 push    eax             ; lpString2
.text$mn:00002C6F                 mov     ecx, [ebp+var_380]
.text$mn:00002C75                 push    ecx             ; int
.text$mn:00002C76                 lea     edx, [ebp+var_234]
.text$mn:00002C7C                 push    edx             ; int
.text$mn:00002C7D                 mov     ecx, [ebp+var_364]
.text$mn:00002C83                 call    ?getRelativePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV23@PB_W@Z ; ProjectPanel::getRelativePath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00002C88                 mov     [ebp+var_4], 0
.text$mn:00002C8F                 push    offset $SG126590 ; "File"
.text$mn:00002C94                 lea     ecx, [ebp+var_35C] ; this
.text$mn:00002C9A                 call    ??0TiXmlElement@@QAE@PB_W@Z ; TiXmlElement::TiXmlElement(wchar_t const *)
.text$mn:00002C9F                 mov     [ebp+var_37C], eax
.text$mn:00002CA5                 mov     eax, [ebp+var_37C]
.text$mn:00002CAB                 mov     [ebp+var_378], eax
.text$mn:00002CB1                 mov     byte ptr [ebp+var_4], 1
.text$mn:00002CB5                 mov     ecx, [ebp+var_378]
.text$mn:00002CBB                 push    ecx             ; struct TiXmlNode *
.text$mn:00002CBC                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00002CBF                 call    ?InsertEndChild@TiXmlNode@@QAEPAV1@ABV1@@Z ; TiXmlNode::InsertEndChild(TiXmlNode const &)
.text$mn:00002CC4                 mov     [ebp+var_36C], eax
.text$mn:00002CCA                 mov     byte ptr [ebp+var_4], 0
.text$mn:00002CCE                 lea     ecx, [ebp+var_35C] ; this
.text$mn:00002CD4                 call    ??1TiXmlElement@@UAE@XZ ; TiXmlElement::~TiXmlElement(void)
.text$mn:00002CD9                 lea     ecx, [ebp+var_234]
.text$mn:00002CDF                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002CE4                 push    eax             ; wchar_t *
.text$mn:00002CE5                 push    offset $SG126591 ; "name"
.text$mn:00002CEA                 mov     ecx, [ebp+var_36C] ; this
.text$mn:00002CF0                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:00002CF5                 mov     ecx, eax        ; this
.text$mn:00002CF7                 call    ?SetAttribute@TiXmlElement@@QAEXPB_W0@Z ; TiXmlElement::SetAttribute(wchar_t const *,wchar_t const *)
.text$mn:00002CFC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002D03                 lea     ecx, [ebp+var_234]
.text$mn:00002D09                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002D0E                 jmp     loc_2D9E
.text$mn:00002D13 ; ---------------------------------------------------------------------------
.text$mn:00002D13
.text$mn:00002D13 loc_2D13:                               ; CODE XREF: ProjectPanel::buildProjectXml(TiXmlNode *,_TREEITEM *,wchar_t const *)+C9j
.text$mn:00002D13                 push    offset $SG126595 ; "Folder"
.text$mn:00002D18                 lea     ecx, [ebp+var_2C8] ; this
.text$mn:00002D1E                 call    ??0TiXmlElement@@QAE@PB_W@Z ; TiXmlElement::TiXmlElement(wchar_t const *)
.text$mn:00002D23                 mov     [ebp+var_374], eax
.text$mn:00002D29                 mov     edx, [ebp+var_374]
.text$mn:00002D2F                 mov     [ebp+var_370], edx
.text$mn:00002D35                 mov     [ebp+var_4], 2
.text$mn:00002D3C                 mov     eax, [ebp+var_370]
.text$mn:00002D42                 push    eax             ; struct TiXmlNode *
.text$mn:00002D43                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00002D46                 call    ?InsertEndChild@TiXmlNode@@QAEPAV1@ABV1@@Z ; TiXmlNode::InsertEndChild(TiXmlNode const &)
.text$mn:00002D4B                 mov     [ebp+var_368], eax
.text$mn:00002D51                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002D58                 lea     ecx, [ebp+var_2C8] ; this
.text$mn:00002D5E                 call    ??1TiXmlElement@@UAE@XZ ; TiXmlElement::~TiXmlElement(void)
.text$mn:00002D63                 mov     ecx, [ebp+var_398]
.text$mn:00002D69                 push    ecx             ; wchar_t *
.text$mn:00002D6A                 push    offset $SG126596 ; "name"
.text$mn:00002D6F                 mov     ecx, [ebp+var_368] ; this
.text$mn:00002D75                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:00002D7A                 mov     ecx, eax        ; this
.text$mn:00002D7C                 call    ?SetAttribute@TiXmlElement@@QAEXPB_W0@Z ; TiXmlElement::SetAttribute(wchar_t const *,wchar_t const *)
.text$mn:00002D81                 mov     edx, [ebp+lpString2]
.text$mn:00002D84                 push    edx             ; wchar_t *
.text$mn:00002D85                 mov     eax, [ebp+var_360]
.text$mn:00002D8B                 push    eax             ; struct _TREEITEM *
.text$mn:00002D8C                 mov     ecx, [ebp+var_368]
.text$mn:00002D92                 push    ecx             ; struct TiXmlNode *
.text$mn:00002D93                 mov     ecx, [ebp+var_364] ; this
.text$mn:00002D99                 call    ?buildProjectXml@ProjectPanel@@IAEXPAVTiXmlNode@@PAU_TREEITEM@@PB_W@Z ; ProjectPanel::buildProjectXml(TiXmlNode *,_TREEITEM *,wchar_t const *)
.text$mn:00002D9E
.text$mn:00002D9E loc_2D9E:                               ; CODE XREF: ProjectPanel::buildProjectXml(TiXmlNode *,_TREEITEM *,wchar_t const *)+17Ej
.text$mn:00002D9E                 jmp     loc_2BFB
.text$mn:00002DA3 ; ---------------------------------------------------------------------------
.text$mn:00002DA3
.text$mn:00002DA3 loc_2DA3:                               ; CODE XREF: ProjectPanel::buildProjectXml(TiXmlNode *,_TREEITEM *,wchar_t const *)+8Dj
.text$mn:00002DA3                 mov     ecx, [ebp+var_C]
.text$mn:00002DA6                 mov     large fs:0, ecx
.text$mn:00002DAD                 pop     ecx
.text$mn:00002DAE                 mov     ecx, [ebp+var_10]
.text$mn:00002DB1                 xor     ecx, ebp
.text$mn:00002DB3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00002DB8                 mov     esp, ebp
.text$mn:00002DBA                 pop     ebp
.text$mn:00002DBB                 retn    0Ch
.text$mn:00002DBB ?buildProjectXml@ProjectPanel@@IAEXPAVTiXmlNode@@PAU_TREEITEM@@PB_W@Z endp
.text$mn:00002DBB
.text$mn:00002DBB ; ---------------------------------------------------------------------------
.text$mn:00002DBE                 align 10h
.text$mn:00002DC0
.text$mn:00002DC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00002DC0
.text$mn:00002DC0 ; Attributes: bp-based frame
.text$mn:00002DC0
.text$mn:00002DC0 ; protected: enum  NodeType __thiscall ProjectPanel::getNodeType(struct _TREEITEM *)
.text$mn:00002DC0                 public ?getNodeType@ProjectPanel@@IAE?AW4NodeType@@PAU_TREEITEM@@@Z
.text$mn:00002DC0 ?getNodeType@ProjectPanel@@IAE?AW4NodeType@@PAU_TREEITEM@@@Z proc near
.text$mn:00002DC0                                         ; CODE XREF: ProjectPanel::addFolder(_TREEITEM *,wchar_t const *)+64p
.text$mn:00002DC0                                         ; ProjectPanel::popupMenuCmd(int)+103p ...
.text$mn:00002DC0
.text$mn:00002DC0 lParam          = dword ptr -2Ch
.text$mn:00002DC0 var_28          = dword ptr -28h
.text$mn:00002DC0 var_14          = dword ptr -14h
.text$mn:00002DC0 var_8           = dword ptr -8
.text$mn:00002DC0 var_4           = dword ptr -4
.text$mn:00002DC0 arg_0           = dword ptr  8
.text$mn:00002DC0
.text$mn:00002DC0                 push    ebp
.text$mn:00002DC1                 mov     ebp, esp
.text$mn:00002DC3                 sub     esp, 2Ch
.text$mn:00002DC6                 mov     [ebp+var_4], ecx
.text$mn:00002DC9                 mov     eax, [ebp+arg_0]
.text$mn:00002DCC                 mov     [ebp+var_28], eax
.text$mn:00002DCF                 mov     [ebp+lParam], 6
.text$mn:00002DD6                 lea     ecx, [ebp+lParam]
.text$mn:00002DD9                 push    ecx             ; lParam
.text$mn:00002DDA                 push    0               ; wParam
.text$mn:00002DDC                 push    113Eh           ; Msg
.text$mn:00002DE1                 mov     ecx, [ebp+var_4]
.text$mn:00002DE4                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00002DE7                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00002DEC                 push    eax             ; hWnd
.text$mn:00002DED                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00002DF3                 cmp     [ebp+var_14], 0
.text$mn:00002DF7                 jz      short loc_2DFF
.text$mn:00002DF9                 cmp     [ebp+var_14], 1
.text$mn:00002DFD                 jnz     short loc_2E05
.text$mn:00002DFF
.text$mn:00002DFF loc_2DFF:                               ; CODE XREF: ProjectPanel::getNodeType(_TREEITEM *)+37j
.text$mn:00002DFF                 xor     eax, eax
.text$mn:00002E01                 jmp     short loc_2E28
.text$mn:00002E03 ; ---------------------------------------------------------------------------
.text$mn:00002E03                 jmp     short loc_2E28
.text$mn:00002E05 ; ---------------------------------------------------------------------------
.text$mn:00002E05
.text$mn:00002E05 loc_2E05:                               ; CODE XREF: ProjectPanel::getNodeType(_TREEITEM *)+3Dj
.text$mn:00002E05                 cmp     [ebp+var_14], 2
.text$mn:00002E09                 jnz     short loc_2E14
.text$mn:00002E0B                 mov     eax, 1
.text$mn:00002E10                 jmp     short loc_2E28
.text$mn:00002E12 ; ---------------------------------------------------------------------------
.text$mn:00002E12                 jmp     short loc_2E28
.text$mn:00002E14 ; ---------------------------------------------------------------------------
.text$mn:00002E14
.text$mn:00002E14 loc_2E14:                               ; CODE XREF: ProjectPanel::getNodeType(_TREEITEM *)+49j
.text$mn:00002E14                 cmp     [ebp+var_8], 0
.text$mn:00002E18                 jnz     short loc_2E23
.text$mn:00002E1A                 mov     eax, 2
.text$mn:00002E1F                 jmp     short loc_2E28
.text$mn:00002E21 ; ---------------------------------------------------------------------------
.text$mn:00002E21                 jmp     short loc_2E28
.text$mn:00002E23 ; ---------------------------------------------------------------------------
.text$mn:00002E23
.text$mn:00002E23 loc_2E23:                               ; CODE XREF: ProjectPanel::getNodeType(_TREEITEM *)+58j
.text$mn:00002E23                 mov     eax, 3
.text$mn:00002E28
.text$mn:00002E28 loc_2E28:                               ; CODE XREF: ProjectPanel::getNodeType(_TREEITEM *)+41j
.text$mn:00002E28                                         ; ProjectPanel::getNodeType(_TREEITEM *)+43j ...
.text$mn:00002E28                 mov     esp, ebp
.text$mn:00002E2A                 pop     ebp
.text$mn:00002E2B                 retn    4
.text$mn:00002E2B ?getNodeType@ProjectPanel@@IAE?AW4NodeType@@PAU_TREEITEM@@@Z endp
.text$mn:00002E2B
.text$mn:00002E2B ; ---------------------------------------------------------------------------
.text$mn:00002E2E                 align 10h
.text$mn:00002E30
.text$mn:00002E30 ; =============== S U B R O U T I N E =======================================
.text$mn:00002E30
.text$mn:00002E30 ; Attributes: bp-based frame
.text$mn:00002E30
.text$mn:00002E30 ; void __thiscall ProjectPanel::setWorkSpaceDirty(ProjectPanel *this, bool)
.text$mn:00002E30                 public ?setWorkSpaceDirty@ProjectPanel@@IAEX_N@Z
.text$mn:00002E30 ?setWorkSpaceDirty@ProjectPanel@@IAEX_N@Z proc near
.text$mn:00002E30                                         ; CODE XREF: ProjectPanel::newWorkSpace(void)+7Ep
.text$mn:00002E30                                         ; ProjectPanel::openWorkSpace(wchar_t const *)+1A1p ...
.text$mn:00002E30
.text$mn:00002E30 var_C           = dword ptr -0Ch
.text$mn:00002E30 var_8           = dword ptr -8
.text$mn:00002E30 var_4           = dword ptr -4
.text$mn:00002E30 arg_0           = byte ptr  8
.text$mn:00002E30
.text$mn:00002E30                 push    ebp
.text$mn:00002E31                 mov     ebp, esp
.text$mn:00002E33                 sub     esp, 0Ch
.text$mn:00002E36                 mov     [ebp+var_4], ecx
.text$mn:00002E39                 mov     eax, [ebp+var_4]
.text$mn:00002E3C                 mov     cl, [ebp+arg_0]
.text$mn:00002E3F                 mov     [eax+0FCh], cl
.text$mn:00002E45                 mov     edx, [ebp+var_4]
.text$mn:00002E48                 movzx   eax, byte ptr [edx+0FCh]
.text$mn:00002E4F                 test    eax, eax
.text$mn:00002E51                 jz      short loc_2E5C
.text$mn:00002E53                 mov     [ebp+var_8], 1
.text$mn:00002E5A                 jmp     short loc_2E63
.text$mn:00002E5C ; ---------------------------------------------------------------------------
.text$mn:00002E5C
.text$mn:00002E5C loc_2E5C:                               ; CODE XREF: ProjectPanel::setWorkSpaceDirty(bool)+21j
.text$mn:00002E5C                 mov     [ebp+var_8], 0
.text$mn:00002E63
.text$mn:00002E63 loc_2E63:                               ; CODE XREF: ProjectPanel::setWorkSpaceDirty(bool)+2Aj
.text$mn:00002E63                 mov     ecx, [ebp+var_8]
.text$mn:00002E66                 mov     [ebp+var_C], ecx
.text$mn:00002E69                 mov     edx, [ebp+var_C]
.text$mn:00002E6C                 push    edx             ; int
.text$mn:00002E6D                 mov     eax, [ebp+var_C]
.text$mn:00002E70                 push    eax             ; int
.text$mn:00002E71                 mov     ecx, [ebp+var_4]
.text$mn:00002E74                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00002E77                 call    ?getRoot@TreeView@@QBEPAU_TREEITEM@@XZ ; TreeView::getRoot(void)
.text$mn:00002E7C                 push    eax             ; struct _TREEITEM *
.text$mn:00002E7D                 mov     ecx, [ebp+var_4]
.text$mn:00002E80                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00002E83                 call    ?setItemImage@TreeView@@QAEXPAU_TREEITEM@@HH@Z ; TreeView::setItemImage(_TREEITEM *,int,int)
.text$mn:00002E88                 mov     esp, ebp
.text$mn:00002E8A                 pop     ebp
.text$mn:00002E8B                 retn    4
.text$mn:00002E8B ?setWorkSpaceDirty@ProjectPanel@@IAEX_N@Z endp
.text$mn:00002E8B
.text$mn:00002E8B ; ---------------------------------------------------------------------------
.text$mn:00002E8E                 align 10h
.text$mn:00002E90
.text$mn:00002E90 ; =============== S U B R O U T I N E =======================================
.text$mn:00002E90
.text$mn:00002E90 ; Attributes: bp-based frame
.text$mn:00002E90
.text$mn:00002E90 ; void __thiscall ProjectPanel::popupMenuCmd(ProjectPanel *this, int)
.text$mn:00002E90                 public ?popupMenuCmd@ProjectPanel@@IAEXH@Z
.text$mn:00002E90 ?popupMenuCmd@ProjectPanel@@IAEXH@Z proc near
.text$mn:00002E90                                         ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+4CEp
.text$mn:00002E90                                         ; ProjectPanel::notified(tagNMHDR *)+35Ap ...
.text$mn:00002E90
.text$mn:00002E90 var_17FC        = dword ptr -17FCh
.text$mn:00002E90 var_17F8        = dword ptr -17F8h
.text$mn:00002E90 var_17EC        = dword ptr -17ECh
.text$mn:00002E90 var_17E8        = dword ptr -17E8h
.text$mn:00002E90 var_17E4        = dword ptr -17E4h
.text$mn:00002E90 var_17E0        = dword ptr -17E0h
.text$mn:00002E90 var_17D8        = dword ptr -17D8h
.text$mn:00002E90 var_17D4        = dword ptr -17D4h
.text$mn:00002E90 var_17D0        = dword ptr -17D0h
.text$mn:00002E90 x               = dword ptr -17CCh
.text$mn:00002E90 y               = dword ptr -17C8h
.text$mn:00002E90 lParam          = dword ptr -17C4h
.text$mn:00002E90 var_17C0        = dword ptr -17C0h
.text$mn:00002E90 var_17BC        = dword ptr -17BCh
.text$mn:00002E90 var_17B8        = dword ptr -17B8h
.text$mn:00002E90 lpString2       = dword ptr -17B4h
.text$mn:00002E90 var_17B0        = dword ptr -17B0h
.text$mn:00002E90 var_17AC        = dword ptr -17ACh
.text$mn:00002E90 var_17A8        = dword ptr -17A8h
.text$mn:00002E90 var_17A4        = dword ptr -17A4h
.text$mn:00002E90 var_17A0        = dword ptr -17A0h
.text$mn:00002E90 var_179C        = dword ptr -179Ch
.text$mn:00002E90 var_1798        = dword ptr -1798h
.text$mn:00002E90 var_1794        = dword ptr -1794h
.text$mn:00002E90 var_1790        = dword ptr -1790h
.text$mn:00002E90 var_178C        = dword ptr -178Ch
.text$mn:00002E90 hMenu           = dword ptr -1788h
.text$mn:00002E90 var_1784        = dword ptr -1784h
.text$mn:00002E90 var_177D        = byte ptr -177Dh
.text$mn:00002E90 var_177C        = dword ptr -177Ch
.text$mn:00002E90 var_1778        = dword ptr -1778h
.text$mn:00002E90 var_1774        = byte ptr -1774h
.text$mn:00002E90 var_6B8         = byte ptr -6B8h
.text$mn:00002E90 var_69C         = byte ptr -69Ch
.text$mn:00002E90 var_680         = byte ptr -680h
.text$mn:00002E90 var_644         = byte ptr -644h
.text$mn:00002E90 String1         = word ptr -628h
.text$mn:00002E90 var_420         = word ptr -420h
.text$mn:00002E90 var_3A8         = byte ptr -3A8h
.text$mn:00002E90 Text            = word ptr -218h
.text$mn:00002E90 Dst             = byte ptr -156h
.text$mn:00002E90 var_10          = dword ptr -10h
.text$mn:00002E90 var_C           = dword ptr -0Ch
.text$mn:00002E90 var_4           = dword ptr -4
.text$mn:00002E90 arg_0           = dword ptr  8
.text$mn:00002E90
.text$mn:00002E90                 push    ebp
.text$mn:00002E91                 mov     ebp, esp
.text$mn:00002E93                 push    0FFFFFFFFh
.text$mn:00002E95                 push    offset __ehhandler$?popupMenuCmd@ProjectPanel@@IAEXH@Z
.text$mn:00002E9A                 mov     eax, large fs:0
.text$mn:00002EA0                 push    eax
.text$mn:00002EA1                 mov     eax, 17F0h
.text$mn:00002EA6                 call    __chkstk
.text$mn:00002EAB                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002EB0                 xor     eax, ebp
.text$mn:00002EB2                 mov     [ebp+var_10], eax
.text$mn:00002EB5                 push    esi
.text$mn:00002EB6                 push    edi
.text$mn:00002EB7                 push    eax
.text$mn:00002EB8                 lea     eax, [ebp+var_C]
.text$mn:00002EBB                 mov     large fs:0, eax
.text$mn:00002EC1                 mov     [ebp+var_1778], ecx
.text$mn:00002EC7                 mov     ecx, [ebp+var_1778]
.text$mn:00002ECD                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00002ED0                 call    ?getSelection@TreeView@@QBEPAU_TREEITEM@@XZ ; TreeView::getSelection(void)
.text$mn:00002ED5                 mov     [ebp+var_177C], eax
.text$mn:00002EDB                 cmp     [ebp+var_177C], 0
.text$mn:00002EE2                 jnz     short loc_2EE9
.text$mn:00002EE4                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:00002EE9 ; ---------------------------------------------------------------------------
.text$mn:00002EE9
.text$mn:00002EE9 loc_2EE9:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+52j
.text$mn:00002EE9                 mov     eax, [ebp+arg_0]
.text$mn:00002EEC                 mov     [ebp+var_178C], eax
.text$mn:00002EF2                 mov     ecx, [ebp+var_178C]
.text$mn:00002EF8                 sub     ecx, 0C27h
.text$mn:00002EFE                 mov     [ebp+var_178C], ecx
.text$mn:00002F04                 cmp     [ebp+var_178C], 16h ; switch 23 cases
.text$mn:00002F0B                 ja      $LN62           ; jumptable 00002F17 default case
.text$mn:00002F11                 mov     edx, [ebp+var_178C]
.text$mn:00002F17                 jmp     ds:$LN74[edx*4] ; switch jump
.text$mn:00002F1E ; ---------------------------------------------------------------------------
.text$mn:00002F1E
.text$mn:00002F1E $LN58:                                  ; CODE XREF: ProjectPanel::popupMenuCmd(int)+87j
.text$mn:00002F1E                                         ; DATA XREF: .text$mn:$LN74o
.text$mn:00002F1E                 push    0               ; jumptable 00002F17 case 21
.text$mn:00002F20                 lea     eax, [ebp+x]
.text$mn:00002F26                 push    eax             ; int
.text$mn:00002F27                 mov     ecx, [ebp+var_1778] ; this
.text$mn:00002F2D                 call    ?getMenuDisplyPoint@ProjectPanel@@IAE?AUtagPOINT@@H@Z ; ProjectPanel::getMenuDisplyPoint(int)
.text$mn:00002F32                 push    0               ; prcRect
.text$mn:00002F34                 mov     ecx, [ebp+var_1778]
.text$mn:00002F3A                 mov     edx, [ecx+0Ch]
.text$mn:00002F3D                 push    edx             ; hWnd
.text$mn:00002F3E                 push    0               ; nReserved
.text$mn:00002F40                 mov     eax, [ebp+y]
.text$mn:00002F46                 push    eax             ; y
.text$mn:00002F47                 mov     ecx, [ebp+x]
.text$mn:00002F4D                 push    ecx             ; x
.text$mn:00002F4E                 push    0               ; uFlags
.text$mn:00002F50                 mov     edx, [ebp+var_1778]
.text$mn:00002F56                 mov     eax, [edx+0B4h]
.text$mn:00002F5C                 push    eax             ; hMenu
.text$mn:00002F5D                 call    dword ptr ds:__imp__TrackPopupMenu@28 ; TrackPopupMenu(x,x,x,x,x,x,x)
.text$mn:00002F63                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:00002F68 ; ---------------------------------------------------------------------------
.text$mn:00002F68
.text$mn:00002F68 $LN57:                                  ; CODE XREF: ProjectPanel::popupMenuCmd(int)+87j
.text$mn:00002F68                                         ; DATA XREF: .text$mn:$LN74o
.text$mn:00002F68                 push    1               ; jumptable 00002F17 case 22
.text$mn:00002F6A                 lea     ecx, [ebp+var_17D4]
.text$mn:00002F70                 push    ecx             ; int
.text$mn:00002F71                 mov     ecx, [ebp+var_1778] ; this
.text$mn:00002F77                 call    ?getMenuDisplyPoint@ProjectPanel@@IAE?AUtagPOINT@@H@Z ; ProjectPanel::getMenuDisplyPoint(int)
.text$mn:00002F7C                 mov     [ebp+hMenu], 0
.text$mn:00002F86                 mov     edx, [ebp+var_177C]
.text$mn:00002F8C                 push    edx
.text$mn:00002F8D                 mov     ecx, [ebp+var_1778]
.text$mn:00002F93                 call    ?getNodeType@ProjectPanel@@IAE?AW4NodeType@@PAU_TREEITEM@@@Z ; ProjectPanel::getNodeType(_TREEITEM *)
.text$mn:00002F98                 mov     [ebp+var_1798], eax
.text$mn:00002F9E                 cmp     [ebp+var_1798], 1
.text$mn:00002FA5                 jnz     short loc_2FBB
.text$mn:00002FA7                 mov     eax, [ebp+var_1778]
.text$mn:00002FAD                 mov     ecx, [eax+0B8h]
.text$mn:00002FB3                 mov     [ebp+hMenu], ecx
.text$mn:00002FB9                 jmp     short loc_2FF3
.text$mn:00002FBB ; ---------------------------------------------------------------------------
.text$mn:00002FBB
.text$mn:00002FBB loc_2FBB:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+115j
.text$mn:00002FBB                 cmp     [ebp+var_1798], 2
.text$mn:00002FC2                 jnz     short loc_2FD8
.text$mn:00002FC4                 mov     edx, [ebp+var_1778]
.text$mn:00002FCA                 mov     eax, [edx+0BCh]
.text$mn:00002FD0                 mov     [ebp+hMenu], eax
.text$mn:00002FD6                 jmp     short loc_2FF3
.text$mn:00002FD8 ; ---------------------------------------------------------------------------
.text$mn:00002FD8
.text$mn:00002FD8 loc_2FD8:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+132j
.text$mn:00002FD8                 cmp     [ebp+var_1798], 3
.text$mn:00002FDF                 jnz     short loc_2FF3
.text$mn:00002FE1                 mov     ecx, [ebp+var_1778]
.text$mn:00002FE7                 mov     edx, [ecx+0C0h]
.text$mn:00002FED                 mov     [ebp+hMenu], edx
.text$mn:00002FF3
.text$mn:00002FF3 loc_2FF3:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+129j
.text$mn:00002FF3                                         ; ProjectPanel::popupMenuCmd(int)+146j ...
.text$mn:00002FF3                 cmp     [ebp+hMenu], 0
.text$mn:00002FFA                 jz      short loc_3027
.text$mn:00002FFC                 push    0               ; prcRect
.text$mn:00002FFE                 mov     eax, [ebp+var_1778]
.text$mn:00003004                 mov     ecx, [eax+0Ch]
.text$mn:00003007                 push    ecx             ; hWnd
.text$mn:00003008                 push    0               ; nReserved
.text$mn:0000300A                 mov     edx, [ebp+var_17D0]
.text$mn:00003010                 push    edx             ; y
.text$mn:00003011                 mov     eax, [ebp+var_17D4]
.text$mn:00003017                 push    eax             ; x
.text$mn:00003018                 push    0               ; uFlags
.text$mn:0000301A                 mov     ecx, [ebp+hMenu]
.text$mn:00003020                 push    ecx             ; hMenu
.text$mn:00003021                 call    dword ptr ds:__imp__TrackPopupMenu@28 ; TrackPopupMenu(x,x,x,x,x,x,x)
.text$mn:00003027
.text$mn:00003027 loc_3027:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+16Aj
.text$mn:00003027                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:0000302C ; ---------------------------------------------------------------------------
.text$mn:0000302C
.text$mn:0000302C $LN50:                                  ; CODE XREF: ProjectPanel::popupMenuCmd(int)+87j
.text$mn:0000302C                                         ; DATA XREF: .text$mn:$LN74o
.text$mn:0000302C                 mov     ecx, [ebp+var_1778] ; jumptable 00002F17 case 10
.text$mn:00003032                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00003035                 call    ?getRoot@TreeView@@QBEPAU_TREEITEM@@XZ ; TreeView::getRoot(void)
.text$mn:0000303A                 mov     [ebp+var_17B0], eax
.text$mn:00003040                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00003045                 mov     ecx, eax        ; this
.text$mn:00003047                 call    ?getNativeLangSpeaker@NppParameters@@QAEPAVNativeLangSpeaker@@XZ ; NppParameters::getNativeLangSpeaker(void)
.text$mn:0000304C                 mov     [ebp+var_17C0], eax
.text$mn:00003052                 push    offset $SG126905 ; "NewProjectName"
.text$mn:00003057                 push    offset $SG126906 ; "ProjectManager"
.text$mn:0000305C                 push    offset $SG126907 ; "Project Name"
.text$mn:00003061                 lea     edx, [ebp+var_6B8]
.text$mn:00003067                 push    edx
.text$mn:00003068                 mov     ecx, [ebp+var_17C0]
.text$mn:0000306E                 call    ?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z ; NativeLangSpeaker::getAttrNameStr(wchar_t const *,char const *,char const *)
.text$mn:00003073                 mov     [ebp+var_4], 0
.text$mn:0000307A                 push    0               ; wchar_t *
.text$mn:0000307C                 push    2               ; int
.text$mn:0000307E                 mov     eax, [ebp+var_17B0]
.text$mn:00003084                 push    eax             ; struct _TREEITEM *
.text$mn:00003085                 lea     ecx, [ebp+var_6B8]
.text$mn:0000308B                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00003090                 push    eax             ; wchar_t *
.text$mn:00003091                 mov     ecx, [ebp+var_1778]
.text$mn:00003097                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:0000309A                 call    ?addItem@TreeView@@QAEPAU_TREEITEM@@PB_WPAU2@H0@Z ; TreeView::addItem(wchar_t const *,_TREEITEM *,int,wchar_t const *)
.text$mn:0000309F                 mov     [ebp+lParam], eax
.text$mn:000030A5                 push    1               ; bool
.text$mn:000030A7                 mov     ecx, [ebp+var_1778] ; this
.text$mn:000030AD                 call    ?setWorkSpaceDirty@ProjectPanel@@IAEX_N@Z ; ProjectPanel::setWorkSpaceDirty(bool)
.text$mn:000030B2                 mov     ecx, [ebp+var_177C]
.text$mn:000030B8                 push    ecx             ; struct _TREEITEM *
.text$mn:000030B9                 mov     ecx, [ebp+var_1778]
.text$mn:000030BF                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000030C2                 call    ?expand@TreeView@@QBEXPAU_TREEITEM@@@Z ; TreeView::expand(_TREEITEM *)
.text$mn:000030C7                 mov     edx, [ebp+lParam]
.text$mn:000030CD                 push    edx             ; lParam
.text$mn:000030CE                 push    0               ; wParam
.text$mn:000030D0                 push    1141h           ; Msg
.text$mn:000030D5                 mov     ecx, [ebp+var_1778]
.text$mn:000030DB                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000030DE                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:000030E3                 push    eax             ; hWnd
.text$mn:000030E4                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000030EA                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000030F1                 lea     ecx, [ebp+var_6B8]
.text$mn:000030F7                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000030FC                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:00003101 ; ---------------------------------------------------------------------------
.text$mn:00003101
.text$mn:00003101 $LN49:                                  ; CODE XREF: ProjectPanel::popupMenuCmd(int)+87j
.text$mn:00003101                                         ; DATA XREF: .text$mn:$LN74o
.text$mn:00003101                 mov     eax, [ebp+var_1778] ; jumptable 00002F17 case 11
.text$mn:00003107                 movzx   ecx, byte ptr [eax+0FCh]
.text$mn:0000310E                 test    ecx, ecx
.text$mn:00003110                 jz      short loc_316F
.text$mn:00003112                 push    23h ; '#'       ; uType
.text$mn:00003114                 push    offset $SG126915 ; "New Workspace"
.text$mn:00003119                 push    offset $SG126916 ; "The current workspace was modified. Do "...
.text$mn:0000311E                 mov     edx, [ebp+var_1778]
.text$mn:00003124                 mov     eax, [edx+0Ch]
.text$mn:00003127                 push    eax             ; hWnd
.text$mn:00003128                 call    dword ptr ds:__imp__MessageBoxW@16 ; MessageBoxW(x,x,x,x)
.text$mn:0000312E                 mov     [ebp+var_1794], eax
.text$mn:00003134                 cmp     [ebp+var_1794], 6
.text$mn:0000313B                 jnz     short loc_3156
.text$mn:0000313D                 mov     ecx, [ebp+var_1778] ; this
.text$mn:00003143                 call    ?saveWorkSpace@ProjectPanel@@QAE_NXZ ; ProjectPanel::saveWorkSpace(void)
.text$mn:00003148                 movzx   ecx, al
.text$mn:0000314B                 test    ecx, ecx
.text$mn:0000314D                 jnz     short loc_3154
.text$mn:0000314F                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:00003154 ; ---------------------------------------------------------------------------
.text$mn:00003154
.text$mn:00003154 loc_3154:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+2BDj
.text$mn:00003154                 jmp     short loc_316F
.text$mn:00003156 ; ---------------------------------------------------------------------------
.text$mn:00003156
.text$mn:00003156 loc_3156:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+2ABj
.text$mn:00003156                 cmp     [ebp+var_1794], 7
.text$mn:0000315D                 jnz     short loc_3161
.text$mn:0000315F                 jmp     short loc_316F
.text$mn:00003161 ; ---------------------------------------------------------------------------
.text$mn:00003161
.text$mn:00003161 loc_3161:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+2CDj
.text$mn:00003161                 cmp     [ebp+var_1794], 2
.text$mn:00003168                 jnz     short loc_316F
.text$mn:0000316A                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:0000316F ; ---------------------------------------------------------------------------
.text$mn:0000316F
.text$mn:0000316F loc_316F:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+280j
.text$mn:0000316F                                         ; ProjectPanel::popupMenuCmd(int):loc_3154j ...
.text$mn:0000316F                 mov     ecx, [ebp+var_1778]
.text$mn:00003175                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00003178                 call    ?removeAllItems@TreeView@@QAEXXZ ; TreeView::removeAllItems(void)
.text$mn:0000317D                 mov     ecx, [ebp+var_1778] ; this
.text$mn:00003183                 call    ?newWorkSpace@ProjectPanel@@QAEXXZ ; ProjectPanel::newWorkSpace(void)
.text$mn:00003188                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:0000318D ; ---------------------------------------------------------------------------
.text$mn:0000318D
.text$mn:0000318D $LN41:                                  ; CODE XREF: ProjectPanel::popupMenuCmd(int)+87j
.text$mn:0000318D                                         ; DATA XREF: .text$mn:$LN74o
.text$mn:0000318D                 mov     edx, [ebp+var_177C] ; jumptable 00002F17 case 0
.text$mn:00003193                 push    edx             ; lParam
.text$mn:00003194                 push    0               ; wParam
.text$mn:00003196                 push    1141h           ; Msg
.text$mn:0000319B                 mov     ecx, [ebp+var_1778]
.text$mn:000031A1                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000031A4                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:000031A9                 push    eax             ; hWnd
.text$mn:000031AA                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000031B0                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:000031B5 ; ---------------------------------------------------------------------------
.text$mn:000031B5
.text$mn:000031B5 $LN40:                                  ; CODE XREF: ProjectPanel::popupMenuCmd(int)+87j
.text$mn:000031B5                                         ; DATA XREF: .text$mn:$LN74o
.text$mn:000031B5                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; jumptable 00002F17 case 1
.text$mn:000031BA                 mov     ecx, eax        ; this
.text$mn:000031BC                 call    ?getNativeLangSpeaker@NppParameters@@QAEPAVNativeLangSpeaker@@XZ ; NppParameters::getNativeLangSpeaker(void)
.text$mn:000031C1                 mov     [ebp+var_17BC], eax
.text$mn:000031C7                 push    offset $SG126931 ; "NewFolderName"
.text$mn:000031CC                 push    offset $SG126932 ; "ProjectManager"
.text$mn:000031D1                 push    offset $SG126933 ; "Folder Name"
.text$mn:000031D6                 lea     eax, [ebp+var_69C]
.text$mn:000031DC                 push    eax
.text$mn:000031DD                 mov     ecx, [ebp+var_17BC]
.text$mn:000031E3                 call    ?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z ; NativeLangSpeaker::getAttrNameStr(wchar_t const *,char const *,char const *)
.text$mn:000031E8                 mov     [ebp+var_4], 1
.text$mn:000031EF                 lea     ecx, [ebp+var_69C]
.text$mn:000031F5                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000031FA                 push    eax             ; wchar_t *
.text$mn:000031FB                 mov     ecx, [ebp+var_177C]
.text$mn:00003201                 push    ecx             ; lParam
.text$mn:00003202                 mov     ecx, [ebp+var_1778] ; this
.text$mn:00003208                 call    ?addFolder@ProjectPanel@@IAEPAU_TREEITEM@@PAU2@PB_W@Z ; ProjectPanel::addFolder(_TREEITEM *,wchar_t const *)
.text$mn:0000320D                 push    1               ; bool
.text$mn:0000320F                 mov     ecx, [ebp+var_1778] ; this
.text$mn:00003215                 call    ?setWorkSpaceDirty@ProjectPanel@@IAEX_N@Z ; ProjectPanel::setWorkSpaceDirty(bool)
.text$mn:0000321A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003221                 lea     ecx, [ebp+var_69C]
.text$mn:00003227                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000322C                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:00003231 ; ---------------------------------------------------------------------------
.text$mn:00003231
.text$mn:00003231 $LN39:                                  ; CODE XREF: ProjectPanel::popupMenuCmd(int)+87j
.text$mn:00003231                                         ; DATA XREF: .text$mn:$LN74o
.text$mn:00003231                 mov     edx, [ebp+var_177C] ; jumptable 00002F17 case 8
.text$mn:00003237                 push    edx             ; struct _TREEITEM *
.text$mn:00003238                 mov     ecx, [ebp+var_1778]
.text$mn:0000323E                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00003241                 call    ?moveDown@TreeView@@QAE_NPAU_TREEITEM@@@Z ; TreeView::moveDown(_TREEITEM *)
.text$mn:00003246                 movzx   eax, al
.text$mn:00003249                 test    eax, eax
.text$mn:0000324B                 jz      short loc_325A
.text$mn:0000324D                 push    1               ; bool
.text$mn:0000324F                 mov     ecx, [ebp+var_1778] ; this
.text$mn:00003255                 call    ?setWorkSpaceDirty@ProjectPanel@@IAEX_N@Z ; ProjectPanel::setWorkSpaceDirty(bool)
.text$mn:0000325A
.text$mn:0000325A loc_325A:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+3BBj
.text$mn:0000325A                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:0000325F ; ---------------------------------------------------------------------------
.text$mn:0000325F
.text$mn:0000325F $LN37:                                  ; CODE XREF: ProjectPanel::popupMenuCmd(int)+87j
.text$mn:0000325F                                         ; DATA XREF: .text$mn:$LN74o
.text$mn:0000325F                 mov     ecx, [ebp+var_177C] ; jumptable 00002F17 case 7
.text$mn:00003265                 push    ecx             ; struct _TREEITEM *
.text$mn:00003266                 mov     ecx, [ebp+var_1778]
.text$mn:0000326C                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:0000326F                 call    ?moveUp@TreeView@@QAE_NPAU_TREEITEM@@@Z ; TreeView::moveUp(_TREEITEM *)
.text$mn:00003274                 movzx   edx, al
.text$mn:00003277                 test    edx, edx
.text$mn:00003279                 jz      short loc_3288
.text$mn:0000327B                 push    1               ; bool
.text$mn:0000327D                 mov     ecx, [ebp+var_1778] ; this
.text$mn:00003283                 call    ?setWorkSpaceDirty@ProjectPanel@@IAEX_N@Z ; ProjectPanel::setWorkSpaceDirty(bool)
.text$mn:00003288
.text$mn:00003288 loc_3288:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+3E9j
.text$mn:00003288                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:0000328D ; ---------------------------------------------------------------------------
.text$mn:0000328D
.text$mn:0000328D $LN35:                                  ; CODE XREF: ProjectPanel::popupMenuCmd(int)+87j
.text$mn:0000328D                                         ; DATA XREF: .text$mn:$LN74o
.text$mn:0000328D                 mov     eax, [ebp+var_177C] ; jumptable 00002F17 case 2
.text$mn:00003293                 push    eax             ; struct _TREEITEM *
.text$mn:00003294                 mov     ecx, [ebp+var_1778] ; this
.text$mn:0000329A                 call    ?addFiles@ProjectPanel@@IAEXPAU_TREEITEM@@@Z ; ProjectPanel::addFiles(_TREEITEM *)
.text$mn:0000329F                 mov     ecx, [ebp+var_177C]
.text$mn:000032A5                 push    ecx
.text$mn:000032A6                 mov     ecx, [ebp+var_1778]
.text$mn:000032AC                 call    ?getNodeType@ProjectPanel@@IAE?AW4NodeType@@PAU_TREEITEM@@@Z ; ProjectPanel::getNodeType(_TREEITEM *)
.text$mn:000032B1                 cmp     eax, 2
.text$mn:000032B4                 jnz     short loc_32CF
.text$mn:000032B6                 push    3               ; int
.text$mn:000032B8                 push    3               ; int
.text$mn:000032BA                 mov     edx, [ebp+var_177C]
.text$mn:000032C0                 push    edx             ; struct _TREEITEM *
.text$mn:000032C1                 mov     ecx, [ebp+var_1778]
.text$mn:000032C7                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000032CA                 call    ?setItemImage@TreeView@@QAEXPAU_TREEITEM@@HH@Z ; TreeView::setItemImage(_TREEITEM *,int,int)
.text$mn:000032CF
.text$mn:000032CF loc_32CF:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+424j
.text$mn:000032CF                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:000032D4 ; ---------------------------------------------------------------------------
.text$mn:000032D4
.text$mn:000032D4 $LN33:                                  ; CODE XREF: ProjectPanel::popupMenuCmd(int)+87j
.text$mn:000032D4                                         ; DATA XREF: .text$mn:$LN74o
.text$mn:000032D4                 mov     eax, [ebp+var_177C] ; jumptable 00002F17 case 6
.text$mn:000032DA                 push    eax             ; struct _TREEITEM *
.text$mn:000032DB                 mov     ecx, [ebp+var_1778] ; this
.text$mn:000032E1                 call    ?addFilesFromDirectory@ProjectPanel@@IAEXPAU_TREEITEM@@@Z ; ProjectPanel::addFilesFromDirectory(_TREEITEM *)
.text$mn:000032E6                 mov     ecx, [ebp+var_177C]
.text$mn:000032EC                 push    ecx
.text$mn:000032ED                 mov     ecx, [ebp+var_1778]
.text$mn:000032F3                 call    ?getNodeType@ProjectPanel@@IAE?AW4NodeType@@PAU_TREEITEM@@@Z ; ProjectPanel::getNodeType(_TREEITEM *)
.text$mn:000032F8                 cmp     eax, 2
.text$mn:000032FB                 jnz     short loc_3316
.text$mn:000032FD                 push    3               ; int
.text$mn:000032FF                 push    3               ; int
.text$mn:00003301                 mov     edx, [ebp+var_177C]
.text$mn:00003307                 push    edx             ; struct _TREEITEM *
.text$mn:00003308                 mov     ecx, [ebp+var_1778]
.text$mn:0000330E                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00003311                 call    ?setItemImage@TreeView@@QAEXPAU_TREEITEM@@HH@Z ; TreeView::setItemImage(_TREEITEM *,int,int)
.text$mn:00003316
.text$mn:00003316 loc_3316:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+46Bj
.text$mn:00003316                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:0000331B ; ---------------------------------------------------------------------------
.text$mn:0000331B
.text$mn:0000331B $LN31:                                  ; CODE XREF: ProjectPanel::popupMenuCmd(int)+87j
.text$mn:0000331B                                         ; DATA XREF: .text$mn:$LN74o
.text$mn:0000331B                 mov     eax, [ebp+var_1778] ; jumptable 00002F17 case 12
.text$mn:00003321                 movzx   ecx, byte ptr [eax+0FCh]
.text$mn:00003328                 test    ecx, ecx
.text$mn:0000332A                 jz      short loc_3389
.text$mn:0000332C                 push    23h ; '#'       ; uType
.text$mn:0000332E                 push    offset $SG126945 ; "Open Workspace"
.text$mn:00003333                 push    offset $SG126946 ; "The current workspace was modified. Do "...
.text$mn:00003338                 mov     edx, [ebp+var_1778]
.text$mn:0000333E                 mov     eax, [edx+0Ch]
.text$mn:00003341                 push    eax             ; hWnd
.text$mn:00003342                 call    dword ptr ds:__imp__MessageBoxW@16 ; MessageBoxW(x,x,x,x)
.text$mn:00003348                 mov     [ebp+var_1790], eax
.text$mn:0000334E                 cmp     [ebp+var_1790], 6
.text$mn:00003355                 jnz     short loc_3370
.text$mn:00003357                 mov     ecx, [ebp+var_1778] ; this
.text$mn:0000335D                 call    ?saveWorkSpace@ProjectPanel@@QAE_NXZ ; ProjectPanel::saveWorkSpace(void)
.text$mn:00003362                 movzx   ecx, al
.text$mn:00003365                 test    ecx, ecx
.text$mn:00003367                 jnz     short loc_336E
.text$mn:00003369                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:0000336E ; ---------------------------------------------------------------------------
.text$mn:0000336E
.text$mn:0000336E loc_336E:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+4D7j
.text$mn:0000336E                 jmp     short loc_3389
.text$mn:00003370 ; ---------------------------------------------------------------------------
.text$mn:00003370
.text$mn:00003370 loc_3370:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+4C5j
.text$mn:00003370                 cmp     [ebp+var_1790], 7
.text$mn:00003377                 jnz     short loc_337B
.text$mn:00003379                 jmp     short loc_3389
.text$mn:0000337B ; ---------------------------------------------------------------------------
.text$mn:0000337B
.text$mn:0000337B loc_337B:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+4E7j
.text$mn:0000337B                 cmp     [ebp+var_1790], 2
.text$mn:00003382                 jnz     short loc_3389
.text$mn:00003384                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:00003389 ; ---------------------------------------------------------------------------
.text$mn:00003389
.text$mn:00003389 loc_3389:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+49Aj
.text$mn:00003389                                         ; ProjectPanel::popupMenuCmd(int):loc_336Ej ...
.text$mn:00003389                 push    0               ; lpModuleName
.text$mn:0000338B                 call    dword ptr ds:__imp__GetModuleHandleW@4 ; GetModuleHandleW(x)
.text$mn:00003391                 push    eax             ; HINSTANCE
.text$mn:00003392                 mov     edx, [ebp+var_1778]
.text$mn:00003398                 mov     eax, [edx+0Ch]
.text$mn:0000339B                 push    eax             ; HWND
.text$mn:0000339C                 lea     ecx, [ebp+var_1774] ; this
.text$mn:000033A2                 call    ??0FileDialog@@QAE@PAUHWND__@@PAUHINSTANCE__@@@Z ; FileDialog::FileDialog(HWND__ *,HINSTANCE__ *)
.text$mn:000033A7                 mov     [ebp+var_4], 2
.text$mn:000033AE                 push    0
.text$mn:000033B0                 push    offset $SG126954 ; ".*"
.text$mn:000033B5                 push    offset $SG126955 ; "All types"
.text$mn:000033BA                 lea     ecx, [ebp+var_1774]
.text$mn:000033C0                 push    ecx             ; this
.text$mn:000033C1                 call    ?setExtFilter@FileDialog@@QAAXPB_W0ZZ ; FileDialog::setExtFilter(wchar_t const *,wchar_t const *,...)
.text$mn:000033C6                 add     esp, 10h
.text$mn:000033C9                 lea     ecx, [ebp+var_1774] ; this
.text$mn:000033CF                 call    ?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ ; FileDialog::doOpenSingleFileDlg(void)
.text$mn:000033D4                 mov     [ebp+var_17A8], eax
.text$mn:000033DA                 cmp     [ebp+var_17A8], 0
.text$mn:000033E1                 jz      short loc_342F
.text$mn:000033E3                 mov     edx, [ebp+var_17A8]
.text$mn:000033E9                 push    edx             ; wchar_t *
.text$mn:000033EA                 mov     ecx, [ebp+var_1778] ; this
.text$mn:000033F0                 call    ?openWorkSpace@ProjectPanel@@QAE_NPB_W@Z ; ProjectPanel::openWorkSpace(wchar_t const *)
.text$mn:000033F5                 movzx   eax, al
.text$mn:000033F8                 test    eax, eax
.text$mn:000033FA                 jnz     short loc_342F
.text$mn:000033FC                 push    0               ; uType
.text$mn:000033FE                 push    offset $SG126959 ; "Open Workspace"
.text$mn:00003403                 push    offset $SG126960 ; "The workspace could not be opened.\rIt "...
.text$mn:00003408                 mov     ecx, [ebp+var_1778]
.text$mn:0000340E                 mov     edx, [ecx+0Ch]
.text$mn:00003411                 push    edx             ; hWnd
.text$mn:00003412                 call    dword ptr ds:__imp__MessageBoxW@16 ; MessageBoxW(x,x,x,x)
.text$mn:00003418                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000341F                 lea     ecx, [ebp+var_1774] ; this
.text$mn:00003425                 call    ??1FileDialog@@QAE@XZ ; FileDialog::~FileDialog(void)
.text$mn:0000342A                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:0000342F ; ---------------------------------------------------------------------------
.text$mn:0000342F
.text$mn:0000342F loc_342F:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+551j
.text$mn:0000342F                                         ; ProjectPanel::popupMenuCmd(int)+56Aj
.text$mn:0000342F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003436                 lea     ecx, [ebp+var_1774] ; this
.text$mn:0000343C                 call    ??1FileDialog@@QAE@XZ ; FileDialog::~FileDialog(void)
.text$mn:00003441                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:00003446 ; ---------------------------------------------------------------------------
.text$mn:00003446
.text$mn:00003446 $LN21:                                  ; CODE XREF: ProjectPanel::popupMenuCmd(int)+87j
.text$mn:00003446                                         ; DATA XREF: .text$mn:$LN74o
.text$mn:00003446                 mov     eax, [ebp+var_1778] ; jumptable 00002F17 case 13
.text$mn:0000344C                 movzx   ecx, byte ptr [eax+0FCh]
.text$mn:00003453                 test    ecx, ecx
.text$mn:00003455                 jz      short loc_3492
.text$mn:00003457                 push    24h ; '$'       ; uType
.text$mn:00003459                 push    offset $SG126964 ; "Reload Workspace"
.text$mn:0000345E                 push    offset $SG126965 ; "The current workspace was modified. Rel"...
.text$mn:00003463                 mov     edx, [ebp+var_1778]
.text$mn:00003469                 mov     eax, [edx+0Ch]
.text$mn:0000346C                 push    eax             ; hWnd
.text$mn:0000346D                 call    dword ptr ds:__imp__MessageBoxW@16 ; MessageBoxW(x,x,x,x)
.text$mn:00003473                 mov     [ebp+var_179C], eax
.text$mn:00003479                 cmp     [ebp+var_179C], 6
.text$mn:00003480                 jnz     short loc_3484
.text$mn:00003482                 jmp     short loc_3492
.text$mn:00003484 ; ---------------------------------------------------------------------------
.text$mn:00003484
.text$mn:00003484 loc_3484:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+5F0j
.text$mn:00003484                 cmp     [ebp+var_179C], 7
.text$mn:0000348B                 jnz     short loc_3492
.text$mn:0000348D                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:00003492 ; ---------------------------------------------------------------------------
.text$mn:00003492
.text$mn:00003492 loc_3492:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+5C5j
.text$mn:00003492                                         ; ProjectPanel::popupMenuCmd(int)+5F2j ...
.text$mn:00003492                 mov     ecx, [ebp+var_1778]
.text$mn:00003498                 add     ecx, 0C4h ; '-'
.text$mn:0000349E                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000034A3                 push    eax             ; pszPath
.text$mn:000034A4                 call    dword ptr ds:__imp__PathFileExistsW@4 ; PathFileExistsW(x)
.text$mn:000034AA                 test    eax, eax
.text$mn:000034AC                 jz      short loc_34CD
.text$mn:000034AE                 mov     ecx, [ebp+var_1778]
.text$mn:000034B4                 add     ecx, 0C4h ; '-'
.text$mn:000034BA                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000034BF                 push    eax             ; wchar_t *
.text$mn:000034C0                 mov     ecx, [ebp+var_1778] ; this
.text$mn:000034C6                 call    ?openWorkSpace@ProjectPanel@@QAE_NPB_W@Z ; ProjectPanel::openWorkSpace(wchar_t const *)
.text$mn:000034CB                 jmp     short loc_34E9
.text$mn:000034CD ; ---------------------------------------------------------------------------
.text$mn:000034CD
.text$mn:000034CD loc_34CD:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+61Cj
.text$mn:000034CD                 push    30h ; '0'       ; uType
.text$mn:000034CF                 push    offset $SG126971 ; "Reload Workspace"
.text$mn:000034D4                 push    offset $SG126972 ; "Cannot find the file to reload."
.text$mn:000034D9                 mov     ecx, [ebp+var_1778]
.text$mn:000034DF                 mov     edx, [ecx+0Ch]
.text$mn:000034E2                 push    edx             ; hWnd
.text$mn:000034E3                 call    dword ptr ds:__imp__MessageBoxW@16 ; MessageBoxW(x,x,x,x)
.text$mn:000034E9
.text$mn:000034E9 loc_34E9:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+63Bj
.text$mn:000034E9                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:000034EE ; ---------------------------------------------------------------------------
.text$mn:000034EE
.text$mn:000034EE $LN14:                                  ; CODE XREF: ProjectPanel::popupMenuCmd(int)+87j
.text$mn:000034EE                                         ; DATA XREF: .text$mn:$LN74o
.text$mn:000034EE                 mov     ecx, [ebp+var_1778] ; jumptable 00002F17 case 14
.text$mn:000034F4                 call    ?saveWorkSpace@ProjectPanel@@QAE_NXZ ; ProjectPanel::saveWorkSpace(void)
.text$mn:000034F9                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:000034FE ; ---------------------------------------------------------------------------
.text$mn:000034FE
.text$mn:000034FE $LN13:                                  ; CODE XREF: ProjectPanel::popupMenuCmd(int)+87j
.text$mn:000034FE                                         ; DATA XREF: .text$mn:$LN74o
.text$mn:000034FE                 cmp     [ebp+arg_0], 0C37h ; jumptable 00002F17 cases 15,16
.text$mn:00003505                 jnz     short loc_3510
.text$mn:00003507                 mov     [ebp+var_177D], 1
.text$mn:0000350E                 jmp     short loc_3517
.text$mn:00003510 ; ---------------------------------------------------------------------------
.text$mn:00003510
.text$mn:00003510 loc_3510:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+675j
.text$mn:00003510                 mov     [ebp+var_177D], 0
.text$mn:00003517
.text$mn:00003517 loc_3517:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+67Ej
.text$mn:00003517                 movzx   eax, [ebp+var_177D]
.text$mn:0000351E                 push    eax             ; bool
.text$mn:0000351F                 mov     ecx, [ebp+var_1778] ; this
.text$mn:00003525                 call    ?saveWorkSpaceAs@ProjectPanel@@QAE_N_N@Z ; ProjectPanel::saveWorkSpaceAs(bool)
.text$mn:0000352A                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:0000352F ; ---------------------------------------------------------------------------
.text$mn:0000352F
.text$mn:0000352F $LN12:                                  ; CODE XREF: ProjectPanel::popupMenuCmd(int)+87j
.text$mn:0000352F                                         ; DATA XREF: .text$mn:$LN74o
.text$mn:0000352F                 mov     ecx, [ebp+var_177C] ; jumptable 00002F17 case 3
.text$mn:00003535                 push    ecx             ; struct _TREEITEM *
.text$mn:00003536                 mov     ecx, [ebp+var_1778]
.text$mn:0000353C                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:0000353F                 call    ?getParent@TreeView@@QBEPAU_TREEITEM@@PAU2@@Z ; TreeView::getParent(_TREEITEM *)
.text$mn:00003544                 mov     [ebp+var_17A0], eax
.text$mn:0000354A                 mov     edx, [ebp+var_177C]
.text$mn:00003550                 push    edx             ; struct _TREEITEM *
.text$mn:00003551                 mov     ecx, [ebp+var_1778]
.text$mn:00003557                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:0000355A                 call    ?getChildFrom@TreeView@@QBEPAU_TREEITEM@@PAU2@@Z ; TreeView::getChildFrom(_TREEITEM *)
.text$mn:0000355F                 test    eax, eax
.text$mn:00003561                 jz      short loc_35D4
.text$mn:00003563                 mov     ecx, 30h ; '0'
.text$mn:00003568                 mov     esi, offset $SG126979 ; "All the sub-items will be removed.\rAre"...
.text$mn:0000356D                 lea     edi, [ebp+Text]
.text$mn:00003573                 rep movsd
.text$mn:00003575                 movsw
.text$mn:00003577                 push    146h            ; Size
.text$mn:0000357C                 push    0               ; Val
.text$mn:0000357E                 lea     eax, [ebp+Dst]
.text$mn:00003584                 push    eax             ; Dst
.text$mn:00003585                 call    _memset
.text$mn:0000358A                 add     esp, 0Ch
.text$mn:0000358D                 push    4               ; uType
.text$mn:0000358F                 push    offset $SG126981 ; "Remove folder from project"
.text$mn:00003594                 lea     ecx, [ebp+Text]
.text$mn:0000359A                 push    ecx             ; lpText
.text$mn:0000359B                 mov     edx, [ebp+var_1778]
.text$mn:000035A1                 mov     eax, [edx+0Ch]
.text$mn:000035A4                 push    eax             ; hWnd
.text$mn:000035A5                 call    dword ptr ds:__imp__MessageBoxW@16 ; MessageBoxW(x,x,x,x)
.text$mn:000035AB                 cmp     eax, 6
.text$mn:000035AE                 jnz     short loc_35D2
.text$mn:000035B0                 mov     ecx, [ebp+var_177C]
.text$mn:000035B6                 push    ecx             ; struct _TREEITEM *
.text$mn:000035B7                 mov     ecx, [ebp+var_1778]
.text$mn:000035BD                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000035C0                 call    ?removeItem@TreeView@@QAEXPAU_TREEITEM@@@Z ; TreeView::removeItem(_TREEITEM *)
.text$mn:000035C5                 push    1               ; bool
.text$mn:000035C7                 mov     ecx, [ebp+var_1778] ; this
.text$mn:000035CD                 call    ?setWorkSpaceDirty@ProjectPanel@@IAEX_N@Z ; ProjectPanel::setWorkSpaceDirty(bool)
.text$mn:000035D2
.text$mn:000035D2 loc_35D2:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+71Ej
.text$mn:000035D2                 jmp     short loc_35F6
.text$mn:000035D4 ; ---------------------------------------------------------------------------
.text$mn:000035D4
.text$mn:000035D4 loc_35D4:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+6D1j
.text$mn:000035D4                 mov     edx, [ebp+var_177C]
.text$mn:000035DA                 push    edx             ; struct _TREEITEM *
.text$mn:000035DB                 mov     ecx, [ebp+var_1778]
.text$mn:000035E1                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000035E4                 call    ?removeItem@TreeView@@QAEXPAU_TREEITEM@@@Z ; TreeView::removeItem(_TREEITEM *)
.text$mn:000035E9                 push    1               ; bool
.text$mn:000035EB                 mov     ecx, [ebp+var_1778] ; this
.text$mn:000035F1                 call    ?setWorkSpaceDirty@ProjectPanel@@IAEX_N@Z ; ProjectPanel::setWorkSpaceDirty(bool)
.text$mn:000035F6
.text$mn:000035F6 loc_35F6:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int):loc_35D2j
.text$mn:000035F6                 mov     eax, [ebp+var_17A0]
.text$mn:000035FC                 push    eax
.text$mn:000035FD                 mov     ecx, [ebp+var_1778]
.text$mn:00003603                 call    ?getNodeType@ProjectPanel@@IAE?AW4NodeType@@PAU_TREEITEM@@@Z ; ProjectPanel::getNodeType(_TREEITEM *)
.text$mn:00003608                 cmp     eax, 2
.text$mn:0000360B                 jnz     short loc_3626
.text$mn:0000360D                 push    4               ; int
.text$mn:0000360F                 push    4               ; int
.text$mn:00003611                 mov     ecx, [ebp+var_17A0]
.text$mn:00003617                 push    ecx             ; struct _TREEITEM *
.text$mn:00003618                 mov     ecx, [ebp+var_1778]
.text$mn:0000361E                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00003621                 call    ?setItemImage@TreeView@@QAEXPAU_TREEITEM@@HH@Z ; TreeView::setItemImage(_TREEITEM *,int,int)
.text$mn:00003626
.text$mn:00003626 loc_3626:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+77Bj
.text$mn:00003626                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:0000362B ; ---------------------------------------------------------------------------
.text$mn:0000362B
.text$mn:0000362B $LN7:                                   ; CODE XREF: ProjectPanel::popupMenuCmd(int)+87j
.text$mn:0000362B                                         ; DATA XREF: .text$mn:$LN74o
.text$mn:0000362B                 mov     edx, [ebp+var_177C] ; jumptable 00002F17 case 4
.text$mn:00003631                 push    edx             ; struct _TREEITEM *
.text$mn:00003632                 mov     ecx, [ebp+var_1778]
.text$mn:00003638                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:0000363B                 call    ?getParent@TreeView@@QBEPAU_TREEITEM@@PAU2@@Z ; TreeView::getParent(_TREEITEM *)
.text$mn:00003640                 mov     [ebp+var_17A4], eax
.text$mn:00003646                 mov     ecx, 1Eh
.text$mn:0000364B                 mov     esi, offset $SG126987 ; "Are you sure you want to remove this fi"...
.text$mn:00003650                 lea     edi, [ebp+var_420]
.text$mn:00003656                 rep movsd
.text$mn:00003658                 push    190h            ; Size
.text$mn:0000365D                 push    0               ; Val
.text$mn:0000365F                 lea     eax, [ebp+var_3A8]
.text$mn:00003665                 push    eax             ; Dst
.text$mn:00003666                 call    _memset
.text$mn:0000366B                 add     esp, 0Ch
.text$mn:0000366E                 push    4               ; uType
.text$mn:00003670                 push    offset $SG126989 ; "Remove file from project"
.text$mn:00003675                 lea     ecx, [ebp+var_420]
.text$mn:0000367B                 push    ecx             ; lpText
.text$mn:0000367C                 mov     edx, [ebp+var_1778]
.text$mn:00003682                 mov     eax, [edx+0Ch]
.text$mn:00003685                 push    eax             ; hWnd
.text$mn:00003686                 call    dword ptr ds:__imp__MessageBoxW@16 ; MessageBoxW(x,x,x,x)
.text$mn:0000368C                 cmp     eax, 6
.text$mn:0000368F                 jnz     short loc_36E3
.text$mn:00003691                 mov     ecx, [ebp+var_177C]
.text$mn:00003697                 push    ecx             ; struct _TREEITEM *
.text$mn:00003698                 mov     ecx, [ebp+var_1778]
.text$mn:0000369E                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000036A1                 call    ?removeItem@TreeView@@QAEXPAU_TREEITEM@@@Z ; TreeView::removeItem(_TREEITEM *)
.text$mn:000036A6                 push    1               ; bool
.text$mn:000036A8                 mov     ecx, [ebp+var_1778] ; this
.text$mn:000036AE                 call    ?setWorkSpaceDirty@ProjectPanel@@IAEX_N@Z ; ProjectPanel::setWorkSpaceDirty(bool)
.text$mn:000036B3                 mov     edx, [ebp+var_17A4]
.text$mn:000036B9                 push    edx
.text$mn:000036BA                 mov     ecx, [ebp+var_1778]
.text$mn:000036C0                 call    ?getNodeType@ProjectPanel@@IAE?AW4NodeType@@PAU_TREEITEM@@@Z ; ProjectPanel::getNodeType(_TREEITEM *)
.text$mn:000036C5                 cmp     eax, 2
.text$mn:000036C8                 jnz     short loc_36E3
.text$mn:000036CA                 push    4               ; int
.text$mn:000036CC                 push    4               ; int
.text$mn:000036CE                 mov     eax, [ebp+var_17A4]
.text$mn:000036D4                 push    eax             ; struct _TREEITEM *
.text$mn:000036D5                 mov     ecx, [ebp+var_1778]
.text$mn:000036DB                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000036DE                 call    ?setItemImage@TreeView@@QAEXPAU_TREEITEM@@HH@Z ; TreeView::setItemImage(_TREEITEM *,int,int)
.text$mn:000036E3
.text$mn:000036E3 loc_36E3:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+7FFj
.text$mn:000036E3                                         ; ProjectPanel::popupMenuCmd(int)+838j
.text$mn:000036E3                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:000036E8 ; ---------------------------------------------------------------------------
.text$mn:000036E8
.text$mn:000036E8 $LN4_1:                                 ; CODE XREF: ProjectPanel::popupMenuCmd(int)+87j
.text$mn:000036E8                                         ; DATA XREF: .text$mn:$LN74o
.text$mn:000036E8                 lea     ecx, [ebp+var_680] ; jumptable 00002F17 case 5
.text$mn:000036EE                 call    ??0FileRelocalizerDlg@@QAE@XZ ; FileRelocalizerDlg::FileRelocalizerDlg(void)
.text$mn:000036F3                 mov     [ebp+var_4], 3
.text$mn:000036FA                 mov     ecx, [ebp+var_1778]
.text$mn:00003700                 mov     edx, [ecx+8]
.text$mn:00003703                 push    edx             ; HWND
.text$mn:00003704                 mov     eax, [ebp+var_1778]
.text$mn:0000370A                 mov     ecx, [eax+4]
.text$mn:0000370D                 push    ecx             ; HINSTANCE
.text$mn:0000370E                 lea     ecx, [ebp+var_680] ; this
.text$mn:00003714                 call    ?init@FileRelocalizerDlg@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; FileRelocalizerDlg::init(HINSTANCE__ *,HWND__ *)
.text$mn:00003719                 mov     edx, [ebp+var_177C]
.text$mn:0000371F                 mov     [ebp+var_17F8], edx
.text$mn:00003725                 mov     [ebp+var_17FC], 27h ; '''
.text$mn:0000372F                 lea     eax, [ebp+String1]
.text$mn:00003735                 mov     [ebp+var_17EC], eax
.text$mn:0000373B                 mov     [ebp+var_17E8], 104h
.text$mn:00003745                 lea     ecx, [ebp+var_17FC]
.text$mn:0000374B                 push    ecx             ; lParam
.text$mn:0000374C                 push    0               ; wParam
.text$mn:0000374E                 push    113Eh           ; Msg
.text$mn:00003753                 mov     ecx, [ebp+var_1778]
.text$mn:00003759                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:0000375C                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00003761                 push    eax             ; hWnd
.text$mn:00003762                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00003768                 cmp     [ebp+var_17D8], 0
.text$mn:0000376F                 jnz     short loc_3788
.text$mn:00003771                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003778                 lea     ecx, [ebp+var_680] ; this
.text$mn:0000377E                 call    ??1FileRelocalizerDlg@@UAE@XZ ; FileRelocalizerDlg::~FileRelocalizerDlg(void)
.text$mn:00003783                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:00003788 ; ---------------------------------------------------------------------------
.text$mn:00003788
.text$mn:00003788 loc_3788:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+8DFj
.text$mn:00003788                 mov     edx, [ebp+var_17D8]
.text$mn:0000378E                 mov     [ebp+var_1784], edx
.text$mn:00003794                 push    0               ; bool
.text$mn:00003796                 mov     ecx, [ebp+var_1784]
.text$mn:0000379C                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000037A1                 push    eax             ; Str
.text$mn:000037A2                 lea     ecx, [ebp+var_680] ; this
.text$mn:000037A8                 call    ?doDialog@FileRelocalizerDlg@@QAEHPB_W_N@Z ; FileRelocalizerDlg::doDialog(wchar_t const *,bool)
.text$mn:000037AD                 test    eax, eax
.text$mn:000037AF                 jnz     loc_38DB
.text$mn:000037B5                 lea     eax, [ebp+var_644]
.text$mn:000037BB                 push    eax
.text$mn:000037BC                 lea     ecx, [ebp+var_680]
.text$mn:000037C2                 call    ?getFullFilePath@FileRelocalizerDlg@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; FileRelocalizerDlg::getFullFilePath(void)
.text$mn:000037C7                 mov     byte ptr [ebp+var_4], 4
.text$mn:000037CB                 lea     ecx, [ebp+var_644]
.text$mn:000037D1                 push    ecx
.text$mn:000037D2                 mov     edx, [ebp+var_1784]
.text$mn:000037D8                 push    edx
.text$mn:000037D9                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000037DE                 add     esp, 8
.text$mn:000037E1                 movzx   eax, al
.text$mn:000037E4                 test    eax, eax
.text$mn:000037E6                 jz      short loc_380E
.text$mn:000037E8                 mov     byte ptr [ebp+var_4], 3
.text$mn:000037EC                 lea     ecx, [ebp+var_644]
.text$mn:000037F2                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000037F7                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000037FE                 lea     ecx, [ebp+var_680] ; this
.text$mn:00003804                 call    ??1FileRelocalizerDlg@@UAE@XZ ; FileRelocalizerDlg::~FileRelocalizerDlg(void)
.text$mn:00003809                 jmp     $LN62           ; jumptable 00002F17 default case
.text$mn:0000380E ; ---------------------------------------------------------------------------
.text$mn:0000380E
.text$mn:0000380E loc_380E:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+956j
.text$mn:0000380E                 lea     ecx, [ebp+var_644]
.text$mn:00003814                 push    ecx
.text$mn:00003815                 mov     ecx, [ebp+var_1784]
.text$mn:0000381B                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00003820                 mov     ecx, [ebp+var_1784]
.text$mn:00003826                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000382B                 push    eax             ; pszPath
.text$mn:0000382C                 call    dword ptr ds:__imp__PathFindFileNameW@4 ; PathFindFileNameW(x)
.text$mn:00003832                 mov     [ebp+lpString2], eax
.text$mn:00003838                 mov     edx, [ebp+lpString2]
.text$mn:0000383E                 push    edx             ; lpString2
.text$mn:0000383F                 lea     eax, [ebp+String1]
.text$mn:00003845                 push    eax             ; lpString1
.text$mn:00003846                 call    dword ptr ds:__imp__lstrcpyW@8 ; lstrcpyW(x,x)
.text$mn:0000384C                 mov     ecx, [ebp+var_1784]
.text$mn:00003852                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00003857                 push    eax             ; pszPath
.text$mn:00003858                 call    dword ptr ds:__imp__PathFileExistsW@4 ; PathFileExistsW(x)
.text$mn:0000385E                 test    eax, eax
.text$mn:00003860                 jz      short loc_386E
.text$mn:00003862                 mov     [ebp+var_17AC], 5
.text$mn:0000386C                 jmp     short loc_3878
.text$mn:0000386E ; ---------------------------------------------------------------------------
.text$mn:0000386E
.text$mn:0000386E loc_386E:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+9D0j
.text$mn:0000386E                 mov     [ebp+var_17AC], 6
.text$mn:00003878
.text$mn:00003878 loc_3878:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+9DCj
.text$mn:00003878                 mov     ecx, [ebp+var_17AC]
.text$mn:0000387E                 mov     [ebp+var_17B8], ecx
.text$mn:00003884                 mov     edx, [ebp+var_17B8]
.text$mn:0000388A                 mov     [ebp+var_17E0], edx
.text$mn:00003890                 mov     eax, [ebp+var_17E0]
.text$mn:00003896                 mov     [ebp+var_17E4], eax
.text$mn:0000389C                 lea     ecx, [ebp+var_17FC]
.text$mn:000038A2                 push    ecx             ; lParam
.text$mn:000038A3                 push    0               ; wParam
.text$mn:000038A5                 push    113Fh           ; Msg
.text$mn:000038AA                 mov     ecx, [ebp+var_1778]
.text$mn:000038B0                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000038B3                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:000038B8                 push    eax             ; hWnd
.text$mn:000038B9                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000038BF                 push    1               ; bool
.text$mn:000038C1                 mov     ecx, [ebp+var_1778] ; this
.text$mn:000038C7                 call    ?setWorkSpaceDirty@ProjectPanel@@IAEX_N@Z ; ProjectPanel::setWorkSpaceDirty(bool)
.text$mn:000038CC                 mov     byte ptr [ebp+var_4], 3
.text$mn:000038D0                 lea     ecx, [ebp+var_644]
.text$mn:000038D6                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000038DB
.text$mn:000038DB loc_38DB:                               ; CODE XREF: ProjectPanel::popupMenuCmd(int)+91Fj
.text$mn:000038DB                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000038E2                 lea     ecx, [ebp+var_680] ; this
.text$mn:000038E8                 call    ??1FileRelocalizerDlg@@UAE@XZ ; FileRelocalizerDlg::~FileRelocalizerDlg(void)
.text$mn:000038ED
.text$mn:000038ED $LN62:                                  ; CODE XREF: ProjectPanel::popupMenuCmd(int)+54j
.text$mn:000038ED                                         ; ProjectPanel::popupMenuCmd(int)+7Bj ...
.text$mn:000038ED                 mov     ecx, [ebp+var_C] ; jumptable 00002F17 default case
.text$mn:000038F0                 mov     large fs:0, ecx
.text$mn:000038F7                 pop     ecx
.text$mn:000038F8                 pop     edi
.text$mn:000038F9                 pop     esi
.text$mn:000038FA                 mov     ecx, [ebp+var_10]
.text$mn:000038FD                 xor     ecx, ebp
.text$mn:000038FF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00003904                 mov     esp, ebp
.text$mn:00003906                 pop     ebp
.text$mn:00003907                 retn    4
.text$mn:00003907 ?popupMenuCmd@ProjectPanel@@IAEXH@Z endp
.text$mn:00003907
.text$mn:00003907 ; ---------------------------------------------------------------------------
.text$mn:0000390A                 align 4
.text$mn:0000390C $LN74           dd offset $LN41         ; DATA XREF: ProjectPanel::popupMenuCmd(int)+87r
.text$mn:0000390C                 dd offset $LN40         ; jump table for switch statement
.text$mn:0000390C                 dd offset $LN35
.text$mn:0000390C                 dd offset $LN12
.text$mn:0000390C                 dd offset $LN7
.text$mn:0000390C                 dd offset $LN4_1
.text$mn:0000390C                 dd offset $LN33
.text$mn:0000390C                 dd offset $LN37
.text$mn:0000390C                 dd offset $LN39
.text$mn:0000390C                 dd offset $LN62
.text$mn:0000390C                 dd offset $LN50
.text$mn:0000390C                 dd offset $LN49
.text$mn:0000390C                 dd offset $LN31
.text$mn:0000390C                 dd offset $LN21
.text$mn:0000390C                 dd offset $LN14
.text$mn:0000390C                 dd offset $LN13
.text$mn:0000390C                 dd offset $LN13
.text$mn:0000390C                 dd offset $LN62
.text$mn:0000390C                 dd offset $LN62
.text$mn:0000390C                 dd offset $LN62
.text$mn:0000390C                 dd offset $LN62
.text$mn:0000390C                 dd offset $LN58
.text$mn:0000390C                 dd offset $LN57
.text$mn:00003968                 align 10h
.text$mn:00003970
.text$mn:00003970 ; =============== S U B R O U T I N E =======================================
.text$mn:00003970
.text$mn:00003970 ; Attributes: bp-based frame
.text$mn:00003970
.text$mn:00003970 ; struct tagPOINT __thiscall ProjectPanel::getMenuDisplyPoint(ProjectPanel *this, int)
.text$mn:00003970                 public ?getMenuDisplyPoint@ProjectPanel@@IAE?AUtagPOINT@@H@Z
.text$mn:00003970 ?getMenuDisplyPoint@ProjectPanel@@IAE?AUtagPOINT@@H@Z proc near
.text$mn:00003970                                         ; CODE XREF: ProjectPanel::popupMenuCmd(int)+9Dp
.text$mn:00003970                                         ; ProjectPanel::popupMenuCmd(int)+E7p
.text$mn:00003970
.text$mn:00003970 Point           = tagPOINT ptr -20h
.text$mn:00003970 var_18          = dword ptr -18h
.text$mn:00003970 lParam          = dword ptr -14h
.text$mn:00003970 var_10          = dword ptr -10h
.text$mn:00003970 var_8           = dword ptr -8
.text$mn:00003970 var_4           = dword ptr -4
.text$mn:00003970 arg_0           = dword ptr  8
.text$mn:00003970 wParam          = dword ptr  0Ch
.text$mn:00003970
.text$mn:00003970                 push    ebp
.text$mn:00003971                 mov     ebp, esp
.text$mn:00003973                 sub     esp, 20h
.text$mn:00003976                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000397B                 xor     eax, ebp
.text$mn:0000397D                 mov     [ebp+var_4], eax
.text$mn:00003980                 mov     [ebp+var_18], ecx
.text$mn:00003983                 lea     eax, [ebp+lParam]
.text$mn:00003986                 push    eax             ; lParam
.text$mn:00003987                 mov     ecx, [ebp+wParam]
.text$mn:0000398A                 push    ecx             ; wParam
.text$mn:0000398B                 push    41Dh            ; Msg
.text$mn:00003990                 mov     edx, [ebp+var_18]
.text$mn:00003993                 mov     eax, [edx+0B0h]
.text$mn:00003999                 push    eax             ; hWnd
.text$mn:0000399A                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000039A0                 mov     ecx, [ebp+lParam]
.text$mn:000039A3                 mov     [ebp+Point.x], ecx
.text$mn:000039A6                 mov     edx, [ebp+var_10]
.text$mn:000039A9                 add     edx, [ebp+var_8]
.text$mn:000039AC                 mov     [ebp+Point.y], edx
.text$mn:000039AF                 lea     eax, [ebp+Point]
.text$mn:000039B2                 push    eax             ; lpPoint
.text$mn:000039B3                 mov     ecx, [ebp+var_18]
.text$mn:000039B6                 mov     edx, [ecx+0B0h]
.text$mn:000039BC                 push    edx             ; hWnd
.text$mn:000039BD                 call    dword ptr ds:__imp__ClientToScreen@8 ; ClientToScreen(x,x)
.text$mn:000039C3                 mov     eax, [ebp+arg_0]
.text$mn:000039C6                 mov     ecx, [ebp+Point.x]
.text$mn:000039C9                 mov     [eax], ecx
.text$mn:000039CB                 mov     edx, [ebp+Point.y]
.text$mn:000039CE                 mov     [eax+4], edx
.text$mn:000039D1                 mov     eax, [ebp+arg_0]
.text$mn:000039D4                 mov     ecx, [ebp+var_4]
.text$mn:000039D7                 xor     ecx, ebp
.text$mn:000039D9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000039DE                 mov     esp, ebp
.text$mn:000039E0                 pop     ebp
.text$mn:000039E1                 retn    8
.text$mn:000039E1 ?getMenuDisplyPoint@ProjectPanel@@IAE?AUtagPOINT@@H@Z endp
.text$mn:000039E1
.text$mn:000039E1 ; ---------------------------------------------------------------------------
.text$mn:000039E4                 align 10h
.text$mn:000039F0
.text$mn:000039F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000039F0
.text$mn:000039F0 ; Attributes: bp-based frame
.text$mn:000039F0
.text$mn:000039F0 ; int __stdcall ProjectPanel::run_dlgProc(ProjectPanel *this, unsigned int, unsigned int, struct tagNMHDR *)
.text$mn:000039F0                 public ?run_dlgProc@ProjectPanel@@MAGHIIJ@Z
.text$mn:000039F0 ?run_dlgProc@ProjectPanel@@MAGHIIJ@Z proc near
.text$mn:000039F0
.text$mn:000039F0 var_9C          = dword ptr -9Ch
.text$mn:000039F0 dwStyle         = dword ptr -98h
.text$mn:000039F0 var_94          = dword ptr -94h
.text$mn:000039F0 var_90          = dword ptr -90h
.text$mn:000039F0 nWidth          = dword ptr -8Ch
.text$mn:000039F0 hWnd            = dword ptr -88h
.text$mn:000039F0 var_84          = dword ptr -84h
.text$mn:000039F0 var_80          = byte ptr -80h
.text$mn:000039F0 var_64          = byte ptr -64h
.text$mn:000039F0 Rect            = tagRECT ptr -48h
.text$mn:000039F0 lParam          = dword ptr -38h
.text$mn:000039F0 var_34          = dword ptr -34h
.text$mn:000039F0 var_30          = byte ptr -30h
.text$mn:000039F0 var_2F          = byte ptr -2Fh
.text$mn:000039F0 var_28          = dword ptr -28h
.text$mn:000039F0 var_10          = dword ptr -10h
.text$mn:000039F0 var_C           = dword ptr -0Ch
.text$mn:000039F0 var_4           = dword ptr -4
.text$mn:000039F0 this            = dword ptr  8
.text$mn:000039F0 arg_4           = dword ptr  0Ch
.text$mn:000039F0 arg_8           = dword ptr  10h
.text$mn:000039F0 arg_C           = dword ptr  14h
.text$mn:000039F0
.text$mn:000039F0                 push    ebp
.text$mn:000039F1                 mov     ebp, esp
.text$mn:000039F3                 push    0FFFFFFFFh
.text$mn:000039F5                 push    offset __ehhandler$?run_dlgProc@ProjectPanel@@MAGHIIJ@Z
.text$mn:000039FA                 mov     eax, large fs:0
.text$mn:00003A00                 push    eax
.text$mn:00003A01                 sub     esp, 90h
.text$mn:00003A07                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003A0C                 xor     eax, ebp
.text$mn:00003A0E                 mov     [ebp+var_10], eax
.text$mn:00003A11                 push    eax
.text$mn:00003A12                 lea     eax, [ebp+var_C]
.text$mn:00003A15                 mov     large fs:0, eax
.text$mn:00003A1B                 mov     eax, [ebp+arg_4]
.text$mn:00003A1E                 mov     [ebp+var_84], eax
.text$mn:00003A24                 cmp     [ebp+var_84], 100h
.text$mn:00003A2E                 ja      short loc_3A70
.text$mn:00003A30                 cmp     [ebp+var_84], 100h
.text$mn:00003A3A                 jz      loc_3EF0
.text$mn:00003A40                 mov     ecx, [ebp+var_84]
.text$mn:00003A46                 sub     ecx, 2
.text$mn:00003A49                 mov     [ebp+var_84], ecx
.text$mn:00003A4F                 cmp     [ebp+var_84], 79h ; 'y' ; switch 122 cases
.text$mn:00003A56                 ja      $LN1            ; jumptable 00003A69 default case
.text$mn:00003A5C                 mov     edx, [ebp+var_84]
.text$mn:00003A62                 movzx   eax, ds:$LN24[edx]
.text$mn:00003A69                 jmp     ds:$LN27[eax*4] ; switch jump
.text$mn:00003A70 ; ---------------------------------------------------------------------------
.text$mn:00003A70
.text$mn:00003A70 loc_3A70:                               ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+3Ej
.text$mn:00003A70                 mov     ecx, [ebp+var_84]
.text$mn:00003A76                 sub     ecx, 110h
.text$mn:00003A7C                 mov     [ebp+var_84], ecx
.text$mn:00003A82                 cmp     [ebp+var_84], 0F2h ; '=' ; switch 243 cases
.text$mn:00003A8C                 ja      $LN1            ; jumptable 00003A69 default case
.text$mn:00003A92                 mov     edx, [ebp+var_84]
.text$mn:00003A98                 movzx   eax, ds:$LN25[edx]
.text$mn:00003A9F                 jmp     ds:$LN28[eax*4] ; switch jump
.text$mn:00003AA6 ; ---------------------------------------------------------------------------
.text$mn:00003AA6
.text$mn:00003AA6 $LN16:                                  ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+AFj
.text$mn:00003AA6                                         ; DATA XREF: .text$mn:$LN28o
.text$mn:00003AA6                 mov     ecx, [ebp+this] ; jumptable 00003A9F case 0
.text$mn:00003AA9                 call    ?initMenus@ProjectPanel@@IAEXXZ ; ProjectPanel::initMenus(void)
.text$mn:00003AAE                 mov     [ebp+dwStyle], 50001830h
.text$mn:00003AB8                 push    0               ; lpParam
.text$mn:00003ABA                 mov     ecx, [ebp+this]
.text$mn:00003ABD                 mov     edx, [ecx+4]
.text$mn:00003AC0                 push    edx             ; hInstance
.text$mn:00003AC1                 push    0               ; hMenu
.text$mn:00003AC3                 mov     eax, [ebp+this]
.text$mn:00003AC6                 mov     ecx, [eax+0Ch]
.text$mn:00003AC9                 push    ecx             ; hWndParent
.text$mn:00003ACA                 push    0               ; nHeight
.text$mn:00003ACC                 push    0               ; nWidth
.text$mn:00003ACE                 push    0               ; Y
.text$mn:00003AD0                 push    0               ; X
.text$mn:00003AD2                 mov     edx, [ebp+dwStyle]
.text$mn:00003AD8                 push    edx             ; dwStyle
.text$mn:00003AD9                 push    0               ; lpWindowName
.text$mn:00003ADB                 push    offset $SG126254 ; "ToolbarWindow32"
.text$mn:00003AE0                 push    0               ; dwExStyle
.text$mn:00003AE2                 call    dword ptr ds:__imp__CreateWindowExW@48 ; CreateWindowExW(x,x,x,x,x,x,x,x,x,x,x,x)
.text$mn:00003AE8                 mov     ecx, [ebp+this]
.text$mn:00003AEB                 mov     [ecx+0B0h], eax
.text$mn:00003AF1                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00003AF6                 mov     ecx, eax        ; this
.text$mn:00003AF8                 call    ?getNativeLangSpeaker@NppParameters@@QAEPAVNativeLangSpeaker@@XZ ; NppParameters::getNativeLangSpeaker(void)
.text$mn:00003AFD                 mov     [ebp+var_90], eax
.text$mn:00003B03                 push    offset $SG126259 ; "Workspace"
.text$mn:00003B08                 push    0
.text$mn:00003B0A                 push    offset $SG126260 ; "Entries"
.text$mn:00003B0F                 lea     edx, [ebp+var_64]
.text$mn:00003B12                 push    edx
.text$mn:00003B13                 mov     ecx, [ebp+var_90]
.text$mn:00003B19                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:00003B1E                 mov     [ebp+var_4], 0
.text$mn:00003B25                 push    offset $SG126263 ; "Edit"
.text$mn:00003B2A                 push    1
.text$mn:00003B2C                 push    offset $SG126264 ; "Entries"
.text$mn:00003B31                 lea     eax, [ebp+var_80]
.text$mn:00003B34                 push    eax
.text$mn:00003B35                 mov     ecx, [ebp+var_90]
.text$mn:00003B3B                 call    ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)
.text$mn:00003B40                 mov     byte ptr [ebp+var_4], 1
.text$mn:00003B44                 mov     ecx, 14h
.text$mn:00003B49                 imul    edx, ecx, 0
.text$mn:00003B4C                 mov     [ebp+edx+var_34], 0C3Ch
.text$mn:00003B54                 mov     eax, 14h
.text$mn:00003B59                 imul    ecx, eax, 0
.text$mn:00003B5C                 mov     [ebp+ecx+lParam], 0FFFFFFFEh
.text$mn:00003B64                 mov     edx, 14h
.text$mn:00003B69                 imul    eax, edx, 0
.text$mn:00003B6C                 mov     [ebp+eax+var_30], 4
.text$mn:00003B71                 mov     ecx, 14h
.text$mn:00003B76                 imul    edx, ecx, 0
.text$mn:00003B79                 mov     [ebp+edx+var_2F], 10h
.text$mn:00003B7E                 lea     ecx, [ebp+var_64]
.text$mn:00003B81                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00003B86                 mov     ecx, 14h
.text$mn:00003B8B                 imul    edx, ecx, 0
.text$mn:00003B8E                 mov     [ebp+edx+var_28], eax
.text$mn:00003B92                 mov     eax, 14h
.text$mn:00003B97                 shl     eax, 0
.text$mn:00003B9A                 mov     [ebp+eax+var_34], 0C3Dh
.text$mn:00003BA2                 mov     ecx, 14h
.text$mn:00003BA7                 shl     ecx, 0
.text$mn:00003BAA                 mov     [ebp+ecx+lParam], 0FFFFFFFEh
.text$mn:00003BB2                 mov     edx, 14h
.text$mn:00003BB7                 shl     edx, 0
.text$mn:00003BBA                 mov     [ebp+edx+var_30], 4
.text$mn:00003BBF                 mov     eax, 14h
.text$mn:00003BC4                 shl     eax, 0
.text$mn:00003BC7                 mov     [ebp+eax+var_2F], 10h
.text$mn:00003BCC                 lea     ecx, [ebp+var_80]
.text$mn:00003BCF                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00003BD4                 mov     ecx, 14h
.text$mn:00003BD9                 shl     ecx, 0
.text$mn:00003BDC                 mov     [ebp+ecx+var_28], eax
.text$mn:00003BE0                 push    0               ; lParam
.text$mn:00003BE2                 push    14h             ; wParam
.text$mn:00003BE4                 push    41Eh            ; Msg
.text$mn:00003BE9                 mov     edx, [ebp+this]
.text$mn:00003BEC                 mov     eax, [edx+0B0h]
.text$mn:00003BF2                 push    eax             ; hWnd
.text$mn:00003BF3                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00003BF9                 lea     ecx, [ebp+lParam]
.text$mn:00003BFC                 push    ecx             ; lParam
.text$mn:00003BFD                 push    2               ; wParam
.text$mn:00003BFF                 push    444h            ; Msg
.text$mn:00003C04                 mov     edx, [ebp+this]
.text$mn:00003C07                 mov     eax, [edx+0B0h]
.text$mn:00003C0D                 push    eax             ; hWnd
.text$mn:00003C0E                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00003C14                 push    0               ; lParam
.text$mn:00003C16                 push    0               ; wParam
.text$mn:00003C18                 push    421h            ; Msg
.text$mn:00003C1D                 mov     ecx, [ebp+this]
.text$mn:00003C20                 mov     edx, [ecx+0B0h]
.text$mn:00003C26                 push    edx             ; hWnd
.text$mn:00003C27                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00003C2D                 push    5               ; nCmdShow
.text$mn:00003C2F                 mov     eax, [ebp+this]
.text$mn:00003C32                 mov     ecx, [eax+0B0h]
.text$mn:00003C38                 push    ecx             ; hWnd
.text$mn:00003C39                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00003C3F                 push    0C3Bh
.text$mn:00003C44                 mov     edx, [ebp+this]
.text$mn:00003C47                 mov     eax, [edx+0Ch]
.text$mn:00003C4A                 push    eax
.text$mn:00003C4B                 mov     ecx, [ebp+this]
.text$mn:00003C4E                 mov     edx, [ecx+4]
.text$mn:00003C51                 push    edx
.text$mn:00003C52                 mov     ecx, [ebp+this]
.text$mn:00003C55                 add     ecx, 6Ch ; 'l'
.text$mn:00003C58                 mov     eax, [ebp+this]
.text$mn:00003C5B                 mov     edx, [eax+6Ch]
.text$mn:00003C5E                 mov     eax, [edx+30h]
.text$mn:00003C61                 call    eax
.text$mn:00003C63                 push    25Fh            ; int
.text$mn:00003C68                 push    25Eh            ; __int16
.text$mn:00003C6D                 push    25Dh            ; __int16
.text$mn:00003C72                 push    25Ch            ; __int16
.text$mn:00003C77                 push    25Bh            ; __int16
.text$mn:00003C7C                 push    25Ah            ; __int16
.text$mn:00003C81                 push    259h            ; __int16
.text$mn:00003C86                 mov     ecx, [ebp+this] ; this
.text$mn:00003C89                 call    ?setImageList@ProjectPanel@@IAEHHHHHHHH@Z ; ProjectPanel::setImageList(int,int,int,int,int,int,int)
.text$mn:00003C8E                 push    5               ; int
.text$mn:00003C90                 mov     ecx, [ebp+this]
.text$mn:00003C93                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00003C96                 call    ?addCanNotDropInList@TreeView@@QAEXH@Z ; TreeView::addCanNotDropInList(int)
.text$mn:00003C9B                 push    6               ; int
.text$mn:00003C9D                 mov     ecx, [ebp+this]
.text$mn:00003CA0                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00003CA3                 call    ?addCanNotDropInList@TreeView@@QAEXH@Z ; TreeView::addCanNotDropInList(int)
.text$mn:00003CA8                 push    0               ; int
.text$mn:00003CAA                 mov     ecx, [ebp+this]
.text$mn:00003CAD                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00003CB0                 call    ?addCanNotDragOutList@TreeView@@QAEXH@Z ; TreeView::addCanNotDragOutList(int)
.text$mn:00003CB5                 push    1               ; int
.text$mn:00003CB7                 mov     ecx, [ebp+this]
.text$mn:00003CBA                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00003CBD                 call    ?addCanNotDragOutList@TreeView@@QAEXH@Z ; TreeView::addCanNotDragOutList(int)
.text$mn:00003CC2                 push    2               ; int
.text$mn:00003CC4                 mov     ecx, [ebp+this]
.text$mn:00003CC7                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00003CCA                 call    ?addCanNotDragOutList@TreeView@@QAEXH@Z ; TreeView::addCanNotDragOutList(int)
.text$mn:00003CCF                 push    1
.text$mn:00003CD1                 mov     ecx, [ebp+this]
.text$mn:00003CD4                 add     ecx, 6Ch ; 'l'
.text$mn:00003CD7                 mov     edx, [ebp+this]
.text$mn:00003CDA                 mov     eax, [edx+6Ch]
.text$mn:00003CDD                 mov     edx, [eax+0Ch]
.text$mn:00003CE0                 call    edx
.text$mn:00003CE2                 mov     ecx, [ebp+this]
.text$mn:00003CE5                 add     ecx, 0C4h ; '-'
.text$mn:00003CEB                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00003CF0                 push    eax             ; wchar_t *
.text$mn:00003CF1                 mov     ecx, [ebp+this] ; this
.text$mn:00003CF4                 call    ?openWorkSpace@ProjectPanel@@QAE_NPB_W@Z ; ProjectPanel::openWorkSpace(wchar_t const *)
.text$mn:00003CF9                 movzx   eax, al
.text$mn:00003CFC                 test    eax, eax
.text$mn:00003CFE                 jnz     short loc_3D08
.text$mn:00003D00                 mov     ecx, [ebp+this] ; this
.text$mn:00003D03                 call    ?newWorkSpace@ProjectPanel@@QAEXXZ ; ProjectPanel::newWorkSpace(void)
.text$mn:00003D08
.text$mn:00003D08 loc_3D08:                               ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+30Ej
.text$mn:00003D08                 mov     [ebp+var_94], 1
.text$mn:00003D12                 mov     byte ptr [ebp+var_4], 0
.text$mn:00003D16                 lea     ecx, [ebp+var_80]
.text$mn:00003D19                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003D1E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003D25                 lea     ecx, [ebp+var_64]
.text$mn:00003D28                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003D2D                 mov     eax, [ebp+var_94]
.text$mn:00003D33                 jmp     loc_3F32
.text$mn:00003D38 ; ---------------------------------------------------------------------------
.text$mn:00003D38
.text$mn:00003D38 $LN14_0:                                ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+AFj
.text$mn:00003D38                                         ; DATA XREF: .text$mn:$LN28o
.text$mn:00003D38                 mov     ecx, [ebp+this] ; jumptable 00003A9F case 240
.text$mn:00003D3B                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00003D3E                 call    ?isDragging@TreeView@@QBE_NXZ ; TreeView::isDragging(void)
.text$mn:00003D43                 movzx   ecx, al
.text$mn:00003D46                 test    ecx, ecx
.text$mn:00003D48                 jz      short loc_3D79
.text$mn:00003D4A                 mov     edx, [ebp+arg_C]
.text$mn:00003D4D                 shr     edx, 10h
.text$mn:00003D50                 and     edx, 0FFFFh
.text$mn:00003D56                 movzx   eax, dx
.text$mn:00003D59                 push    eax             ; int
.text$mn:00003D5A                 mov     ecx, [ebp+arg_C]
.text$mn:00003D5D                 and     ecx, 0FFFFh
.text$mn:00003D63                 movzx   edx, cx
.text$mn:00003D66                 push    edx             ; int
.text$mn:00003D67                 mov     eax, [ebp+this]
.text$mn:00003D6A                 mov     ecx, [eax+0Ch]
.text$mn:00003D6D                 push    ecx             ; HWND
.text$mn:00003D6E                 mov     ecx, [ebp+this]
.text$mn:00003D71                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00003D74                 call    ?dragItem@TreeView@@QAEXPAUHWND__@@HH@Z ; TreeView::dragItem(HWND__ *,int,int)
.text$mn:00003D79
.text$mn:00003D79 loc_3D79:                               ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+358j
.text$mn:00003D79                 jmp     loc_3F1D
.text$mn:00003D7E ; ---------------------------------------------------------------------------
.text$mn:00003D7E
.text$mn:00003D7E $LN12_0:                                ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+AFj
.text$mn:00003D7E                                         ; DATA XREF: .text$mn:$LN28o
.text$mn:00003D7E                 mov     ecx, [ebp+this] ; jumptable 00003A9F case 242
.text$mn:00003D81                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00003D84                 call    ?isDragging@TreeView@@QBE_NXZ ; TreeView::isDragging(void)
.text$mn:00003D89                 movzx   edx, al
.text$mn:00003D8C                 test    edx, edx
.text$mn:00003D8E                 jz      short loc_3DAC
.text$mn:00003D90                 mov     ecx, [ebp+this]
.text$mn:00003D93                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00003D96                 call    ?dropItem@TreeView@@QAE_NXZ ; TreeView::dropItem(void)
.text$mn:00003D9B                 movzx   eax, al
.text$mn:00003D9E                 test    eax, eax
.text$mn:00003DA0                 jz      short loc_3DAC
.text$mn:00003DA2                 push    1               ; bool
.text$mn:00003DA4                 mov     ecx, [ebp+this] ; this
.text$mn:00003DA7                 call    ?setWorkSpaceDirty@ProjectPanel@@IAEX_N@Z ; ProjectPanel::setWorkSpaceDirty(bool)
.text$mn:00003DAC
.text$mn:00003DAC loc_3DAC:                               ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+39Ej
.text$mn:00003DAC                                         ; ProjectPanel::run_dlgProc(uint,uint,long)+3B0j
.text$mn:00003DAC                 jmp     loc_3F1D
.text$mn:00003DB1 ; ---------------------------------------------------------------------------
.text$mn:00003DB1
.text$mn:00003DB1 $LN9:                                   ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+79j
.text$mn:00003DB1                                         ; DATA XREF: .text$mn:$LN27o
.text$mn:00003DB1                 mov     ecx, [ebp+arg_C] ; jumptable 00003A69 case 76
.text$mn:00003DB4                 push    ecx             ; struct tagNMHDR *
.text$mn:00003DB5                 mov     ecx, [ebp+this] ; this
.text$mn:00003DB8                 call    ?notified@ProjectPanel@@IAEXPAUtagNMHDR@@@Z ; ProjectPanel::notified(tagNMHDR *)
.text$mn:00003DBD                 mov     eax, 1
.text$mn:00003DC2                 jmp     loc_3F32
.text$mn:00003DC7 ; ---------------------------------------------------------------------------
.text$mn:00003DC7
.text$mn:00003DC7 $LN8_0:                                 ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+79j
.text$mn:00003DC7                                         ; DATA XREF: .text$mn:$LN27o
.text$mn:00003DC7                 mov     edx, [ebp+arg_C] ; jumptable 00003A69 case 3
.text$mn:00003DCA                 and     edx, 0FFFFh
.text$mn:00003DD0                 movzx   eax, dx
.text$mn:00003DD3                 mov     [ebp+nWidth], eax
.text$mn:00003DD9                 mov     ecx, [ebp+arg_C]
.text$mn:00003DDC                 shr     ecx, 10h
.text$mn:00003DDF                 and     ecx, 0FFFFh
.text$mn:00003DE5                 movzx   edx, cx
.text$mn:00003DE8                 mov     [ebp+var_9C], edx
.text$mn:00003DEE                 lea     eax, [ebp+Rect]
.text$mn:00003DF1                 push    eax             ; lpRect
.text$mn:00003DF2                 mov     ecx, [ebp+this]
.text$mn:00003DF5                 mov     edx, [ecx+0B0h]
.text$mn:00003DFB                 push    edx             ; hWnd
.text$mn:00003DFC                 call    dword ptr ds:__imp__GetClientRect@8 ; GetClientRect(x,x)
.text$mn:00003E02                 push    1               ; bRepaint
.text$mn:00003E04                 mov     eax, [ebp+Rect.bottom]
.text$mn:00003E07                 push    eax             ; nHeight
.text$mn:00003E08                 mov     ecx, [ebp+nWidth]
.text$mn:00003E0E                 push    ecx             ; nWidth
.text$mn:00003E0F                 push    0               ; Y
.text$mn:00003E11                 push    0               ; X
.text$mn:00003E13                 mov     edx, [ebp+this]
.text$mn:00003E16                 mov     eax, [edx+0B0h]
.text$mn:00003E1C                 push    eax             ; hWnd
.text$mn:00003E1D                 call    dword ptr ds:__imp__MoveWindow@24 ; MoveWindow(x,x,x,x,x,x)
.text$mn:00003E23                 mov     ecx, [ebp+this]
.text$mn:00003E26                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00003E29                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00003E2E                 mov     [ebp+hWnd], eax
.text$mn:00003E34                 cmp     [ebp+hWnd], 0
.text$mn:00003E3B                 jz      short loc_3E69
.text$mn:00003E3D                 push    1               ; bRepaint
.text$mn:00003E3F                 mov     ecx, [ebp+var_9C]
.text$mn:00003E45                 sub     ecx, [ebp+Rect.bottom]
.text$mn:00003E48                 sub     ecx, 2
.text$mn:00003E4B                 push    ecx             ; nHeight
.text$mn:00003E4C                 mov     edx, [ebp+nWidth]
.text$mn:00003E52                 push    edx             ; nWidth
.text$mn:00003E53                 mov     eax, [ebp+Rect.bottom]
.text$mn:00003E56                 add     eax, 2
.text$mn:00003E59                 push    eax             ; Y
.text$mn:00003E5A                 push    0               ; X
.text$mn:00003E5C                 mov     ecx, [ebp+hWnd]
.text$mn:00003E62                 push    ecx             ; hWnd
.text$mn:00003E63                 call    dword ptr ds:__imp__MoveWindow@24 ; MoveWindow(x,x,x,x,x,x)
.text$mn:00003E69
.text$mn:00003E69 loc_3E69:                               ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+44Bj
.text$mn:00003E69                 jmp     loc_3F1D
.text$mn:00003E6E ; ---------------------------------------------------------------------------
.text$mn:00003E6E
.text$mn:00003E6E $LN6_2:                                 ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+79j
.text$mn:00003E6E                                         ; DATA XREF: .text$mn:$LN27o
.text$mn:00003E6E                 mov     ecx, [ebp+this] ; jumptable 00003A69 case 121
.text$mn:00003E71                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00003E74                 call    ?isDragging@TreeView@@QBE_NXZ ; TreeView::isDragging(void)
.text$mn:00003E79                 movzx   edx, al
.text$mn:00003E7C                 test    edx, edx
.text$mn:00003E7E                 jnz     short loc_3EA4
.text$mn:00003E80                 mov     eax, [ebp+arg_C]
.text$mn:00003E83                 shr     eax, 10h
.text$mn:00003E86                 and     eax, 0FFFFh
.text$mn:00003E8B                 movsx   ecx, ax
.text$mn:00003E8E                 push    ecx             ; int
.text$mn:00003E8F                 mov     edx, [ebp+arg_C]
.text$mn:00003E92                 and     edx, 0FFFFh
.text$mn:00003E98                 movsx   eax, dx
.text$mn:00003E9B                 push    eax             ; x
.text$mn:00003E9C                 mov     ecx, [ebp+this] ; this
.text$mn:00003E9F                 call    ?showContextMenu@ProjectPanel@@IAEXHH@Z ; ProjectPanel::showContextMenu(int,int)
.text$mn:00003EA4
.text$mn:00003EA4 loc_3EA4:                               ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+48Ej
.text$mn:00003EA4                 mov     eax, 1
.text$mn:00003EA9                 jmp     loc_3F32
.text$mn:00003EAE ; ---------------------------------------------------------------------------
.text$mn:00003EAE
.text$mn:00003EAE $LN4_2:                                 ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+AFj
.text$mn:00003EAE                                         ; DATA XREF: .text$mn:$LN28o
.text$mn:00003EAE                 mov     ecx, [ebp+arg_8] ; jumptable 00003A9F case 1
.text$mn:00003EB1                 and     ecx, 0FFFFh
.text$mn:00003EB7                 movzx   edx, cx
.text$mn:00003EBA                 push    edx             ; int
.text$mn:00003EBB                 mov     ecx, [ebp+this] ; this
.text$mn:00003EBE                 call    ?popupMenuCmd@ProjectPanel@@IAEXH@Z ; ProjectPanel::popupMenuCmd(int)
.text$mn:00003EC3                 jmp     short loc_3F1D
.text$mn:00003EC5 ; ---------------------------------------------------------------------------
.text$mn:00003EC5
.text$mn:00003EC5 $LN3:                                   ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+79j
.text$mn:00003EC5                                         ; DATA XREF: .text$mn:$LN27o
.text$mn:00003EC5                 mov     ecx, [ebp+this] ; jumptable 00003A69 case 0
.text$mn:00003EC8                 add     ecx, 6Ch ; 'l'
.text$mn:00003ECB                 mov     eax, [ebp+this]
.text$mn:00003ECE                 mov     edx, [eax+6Ch]
.text$mn:00003ED1                 mov     eax, [edx+8]
.text$mn:00003ED4                 call    eax
.text$mn:00003ED6                 mov     ecx, [ebp+this] ; this
.text$mn:00003ED9                 call    ?destroyMenus@ProjectPanel@@IAEXXZ ; ProjectPanel::destroyMenus(void)
.text$mn:00003EDE                 mov     ecx, [ebp+this]
.text$mn:00003EE1                 mov     edx, [ecx+0B0h]
.text$mn:00003EE7                 push    edx             ; hWnd
.text$mn:00003EE8                 call    dword ptr ds:__imp__DestroyWindow@4 ; DestroyWindow(x)
.text$mn:00003EEE                 jmp     short loc_3F1D
.text$mn:00003EF0 ; ---------------------------------------------------------------------------
.text$mn:00003EF0
.text$mn:00003EF0 loc_3EF0:                               ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+4Aj
.text$mn:00003EF0                 push    0               ; uType
.text$mn:00003EF2                 push    offset $SG126310 ; lpCaption
.text$mn:00003EF7                 push    offset $SG126311 ; "vkF2"
.text$mn:00003EFC                 push    0               ; hWnd
.text$mn:00003EFE                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text$mn:00003F04                 jmp     short loc_3F1D
.text$mn:00003F06 ; ---------------------------------------------------------------------------
.text$mn:00003F06
.text$mn:00003F06 $LN1:                                   ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+66j
.text$mn:00003F06                                         ; ProjectPanel::run_dlgProc(uint,uint,long)+79j ...
.text$mn:00003F06                 mov     eax, [ebp+arg_C] ; jumptable 00003A69 default case
.text$mn:00003F09                 push    eax             ; __int32
.text$mn:00003F0A                 mov     ecx, [ebp+arg_8]
.text$mn:00003F0D                 push    ecx             ; unsigned int
.text$mn:00003F0E                 mov     edx, [ebp+arg_4]
.text$mn:00003F11                 push    edx             ; unsigned int
.text$mn:00003F12                 mov     eax, [ebp+this]
.text$mn:00003F15                 push    eax             ; this
.text$mn:00003F16                 call    ?run_dlgProc@DockingDlgInterface@@MAGHIIJ@Z ; DockingDlgInterface::run_dlgProc(uint,uint,long)
.text$mn:00003F1B                 jmp     short loc_3F32
.text$mn:00003F1D ; ---------------------------------------------------------------------------
.text$mn:00003F1D
.text$mn:00003F1D loc_3F1D:                               ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long):loc_3D79j
.text$mn:00003F1D                                         ; ProjectPanel::run_dlgProc(uint,uint,long):loc_3DACj ...
.text$mn:00003F1D                 mov     ecx, [ebp+arg_C]
.text$mn:00003F20                 push    ecx             ; __int32
.text$mn:00003F21                 mov     edx, [ebp+arg_8]
.text$mn:00003F24                 push    edx             ; unsigned int
.text$mn:00003F25                 mov     eax, [ebp+arg_4]
.text$mn:00003F28                 push    eax             ; unsigned int
.text$mn:00003F29                 mov     ecx, [ebp+this]
.text$mn:00003F2C                 push    ecx             ; this
.text$mn:00003F2D                 call    ?run_dlgProc@DockingDlgInterface@@MAGHIIJ@Z ; DockingDlgInterface::run_dlgProc(uint,uint,long)
.text$mn:00003F32
.text$mn:00003F32 loc_3F32:                               ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+343j
.text$mn:00003F32                                         ; ProjectPanel::run_dlgProc(uint,uint,long)+3D2j ...
.text$mn:00003F32                 mov     ecx, [ebp+var_C]
.text$mn:00003F35                 mov     large fs:0, ecx
.text$mn:00003F3C                 pop     ecx
.text$mn:00003F3D                 mov     ecx, [ebp+var_10]
.text$mn:00003F40                 xor     ecx, ebp
.text$mn:00003F42                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00003F47                 mov     esp, ebp
.text$mn:00003F49                 pop     ebp
.text$mn:00003F4A                 retn    10h
.text$mn:00003F4A ?run_dlgProc@ProjectPanel@@MAGHIIJ@Z endp
.text$mn:00003F4A
.text$mn:00003F4A ; ---------------------------------------------------------------------------
.text$mn:00003F4D                 align 10h
.text$mn:00003F50 $LN27           dd offset $LN3, offset $LN8_0, offset $LN9, offset $LN6_2
.text$mn:00003F50                                         ; DATA XREF: ProjectPanel::run_dlgProc(uint,uint,long)+79r
.text$mn:00003F50                 dd offset $LN1          ; jump table for switch statement
.text$mn:00003F64 $LN24           db      0,     4,     4,     1
.text$mn:00003F64                                         ; DATA XREF: ProjectPanel::run_dlgProc(uint,uint,long)+72r
.text$mn:00003F64                 db      4,     4,     4,     4 ; indirect table for switch statement
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      2,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     4,     4,     4
.text$mn:00003F64                 db      4,     3
.text$mn:00003FDE                 align 10h
.text$mn:00003FE0 $LN28           dd offset $LN16, offset $LN4_2, offset $LN14_0, offset $LN12_0
.text$mn:00003FE0                                         ; DATA XREF: ProjectPanel::run_dlgProc(uint,uint,long)+AFr
.text$mn:00003FE0                 dd offset $LN1          ; jump table for switch statement
.text$mn:00003FF4 $LN25           db 0, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
.text$mn:00003FF4                                         ; DATA XREF: ProjectPanel::run_dlgProc(uint,uint,long)+A8r
.text$mn:00003FF4                 db 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 ; indirect table for switch statement
.text$mn:00003FF4                 db 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
.text$mn:00003FF4                 db 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
.text$mn:00003FF4                 db 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
.text$mn:00003FF4                 db 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
.text$mn:00003FF4                 db 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
.text$mn:00003FF4                 db 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
.text$mn:00003FF4                 db 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
.text$mn:00003FF4                 db 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
.text$mn:00003FF4                 db 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
.text$mn:00003FF4                 db 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
.text$mn:00003FF4                 db 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
.text$mn:00003FF4                 db 4, 4, 4, 4, 4, 4, 2, 4, 3
.text$mn:000040E7                 align 10h
.text$mn:000040F0
.text$mn:000040F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000040F0
.text$mn:000040F0 ; Attributes: bp-based frame
.text$mn:000040F0
.text$mn:000040F0 ; bool __thiscall ProjectPanel::buildTreeFrom(ProjectPanel *this, struct TiXmlNode *, struct _TREEITEM *)
.text$mn:000040F0                 public ?buildTreeFrom@ProjectPanel@@IAE_NPAVTiXmlNode@@PAU_TREEITEM@@@Z
.text$mn:000040F0 ?buildTreeFrom@ProjectPanel@@IAE_NPAVTiXmlNode@@PAU_TREEITEM@@@Z proc near
.text$mn:000040F0                                         ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+195p
.text$mn:000040F0                                         ; ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)+B0p
.text$mn:000040F0
.text$mn:000040F0 var_50          = dword ptr -50h
.text$mn:000040F0 var_4C          = dword ptr -4Ch
.text$mn:000040F0 var_48          = dword ptr -48h
.text$mn:000040F0 var_44          = dword ptr -44h
.text$mn:000040F0 lpString2       = dword ptr -40h
.text$mn:000040F0 pszPath         = dword ptr -3Ch
.text$mn:000040F0 var_38          = dword ptr -38h
.text$mn:000040F0 var_31          = byte ptr -31h
.text$mn:000040F0 var_30          = dword ptr -30h
.text$mn:000040F0 var_2C          = dword ptr -2Ch
.text$mn:000040F0 var_10          = dword ptr -10h
.text$mn:000040F0 var_C           = dword ptr -0Ch
.text$mn:000040F0 var_4           = dword ptr -4
.text$mn:000040F0 arg_0           = dword ptr  8
.text$mn:000040F0 arg_4           = dword ptr  0Ch
.text$mn:000040F0
.text$mn:000040F0                 push    ebp
.text$mn:000040F1                 mov     ebp, esp
.text$mn:000040F3                 push    0FFFFFFFFh
.text$mn:000040F5                 push    offset __ehhandler$?buildTreeFrom@ProjectPanel@@IAE_NPAVTiXmlNode@@PAU_TREEITEM@@@Z
.text$mn:000040FA                 mov     eax, large fs:0
.text$mn:00004100                 push    eax
.text$mn:00004101                 sub     esp, 44h
.text$mn:00004104                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004109                 xor     eax, ebp
.text$mn:0000410B                 mov     [ebp+var_10], eax
.text$mn:0000410E                 push    eax
.text$mn:0000410F                 lea     eax, [ebp+var_C]
.text$mn:00004112                 mov     large fs:0, eax
.text$mn:00004118                 mov     [ebp+var_38], ecx
.text$mn:0000411B                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000411E                 call    ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::FirstChildElement(void)
.text$mn:00004123                 mov     [ebp+var_30], eax
.text$mn:00004126                 jmp     short loc_4133
.text$mn:00004128 ; ---------------------------------------------------------------------------
.text$mn:00004128
.text$mn:00004128 loc_4128:                               ; CODE XREF: ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *):loc_4266j
.text$mn:00004128                 mov     ecx, [ebp+var_30] ; this
.text$mn:0000412B                 call    ?NextSibling@TiXmlNode@@QBEPAV1@XZ ; TiXmlNode::NextSibling(void)
.text$mn:00004130                 mov     [ebp+var_30], eax
.text$mn:00004133
.text$mn:00004133 loc_4133:                               ; CODE XREF: ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)+36j
.text$mn:00004133                 cmp     [ebp+var_30], 0
.text$mn:00004137                 jz      loc_426B
.text$mn:0000413D                 mov     ecx, [ebp+var_30] ; this
.text$mn:00004140                 call    ?Value@TiXmlNode@@QBEPB_WXZ ; TiXmlNode::Value(void)
.text$mn:00004145                 mov     [ebp+lpString2], eax
.text$mn:00004148                 mov     eax, [ebp+lpString2]
.text$mn:0000414B                 push    eax             ; lpString2
.text$mn:0000414C                 push    offset $SG126619 ; "Folder"
.text$mn:00004151                 call    dword ptr ds:__imp__lstrcmpW@8 ; lstrcmpW(x,x)
.text$mn:00004157                 test    eax, eax
.text$mn:00004159                 jnz     short loc_41BC
.text$mn:0000415B                 push    0               ; wchar_t *
.text$mn:0000415D                 push    4               ; int
.text$mn:0000415F                 mov     ecx, [ebp+arg_4]
.text$mn:00004162                 push    ecx             ; struct _TREEITEM *
.text$mn:00004163                 push    offset $SG126621 ; "name"
.text$mn:00004168                 mov     ecx, [ebp+var_30] ; this
.text$mn:0000416B                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:00004170                 mov     ecx, eax        ; this
.text$mn:00004172                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:00004177                 push    eax             ; wchar_t *
.text$mn:00004178                 mov     ecx, [ebp+var_38]
.text$mn:0000417B                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:0000417E                 call    ?addItem@TreeView@@QAEPAU_TREEITEM@@PB_WPAU2@H0@Z ; TreeView::addItem(wchar_t const *,_TREEITEM *,int,wchar_t const *)
.text$mn:00004183                 mov     [ebp+var_50], eax
.text$mn:00004186                 mov     ecx, [ebp+var_30] ; this
.text$mn:00004189                 call    ?NoChildren@TiXmlNode@@QBE_NXZ ; TiXmlNode::NoChildren(void)
.text$mn:0000418E                 movzx   edx, al
.text$mn:00004191                 test    edx, edx
.text$mn:00004193                 jnz     short loc_41B7
.text$mn:00004195                 mov     eax, [ebp+var_50]
.text$mn:00004198                 push    eax             ; struct _TREEITEM *
.text$mn:00004199                 mov     ecx, [ebp+var_30]
.text$mn:0000419C                 push    ecx             ; struct TiXmlNode *
.text$mn:0000419D                 mov     ecx, [ebp+var_38] ; this
.text$mn:000041A0                 call    ?buildTreeFrom@ProjectPanel@@IAE_NPAVTiXmlNode@@PAU_TREEITEM@@@Z ; ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)
.text$mn:000041A5                 mov     [ebp+var_31], al
.text$mn:000041A8                 movzx   edx, [ebp+var_31]
.text$mn:000041AC                 test    edx, edx
.text$mn:000041AE                 jnz     short loc_41B7
.text$mn:000041B0                 xor     al, al
.text$mn:000041B2                 jmp     loc_426D
.text$mn:000041B7 ; ---------------------------------------------------------------------------
.text$mn:000041B7
.text$mn:000041B7 loc_41B7:                               ; CODE XREF: ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)+A3j
.text$mn:000041B7                                         ; ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)+BEj
.text$mn:000041B7                 jmp     loc_4266
.text$mn:000041BC ; ---------------------------------------------------------------------------
.text$mn:000041BC
.text$mn:000041BC loc_41BC:                               ; CODE XREF: ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)+69j
.text$mn:000041BC                 mov     eax, [ebp+lpString2]
.text$mn:000041BF                 push    eax             ; lpString2
.text$mn:000041C0                 push    offset $SG126627 ; "File"
.text$mn:000041C5                 call    dword ptr ds:__imp__lstrcmpW@8 ; lstrcmpW(x,x)
.text$mn:000041CB                 test    eax, eax
.text$mn:000041CD                 jnz     loc_4266
.text$mn:000041D3                 push    offset $SG126629 ; "name"
.text$mn:000041D8                 mov     ecx, [ebp+var_30] ; this
.text$mn:000041DB                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:000041E0                 mov     ecx, eax        ; this
.text$mn:000041E2                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:000041E7                 mov     [ebp+pszPath], eax
.text$mn:000041EA                 mov     ecx, [ebp+pszPath]
.text$mn:000041ED                 push    ecx             ; pszPath
.text$mn:000041EE                 lea     edx, [ebp+var_2C]
.text$mn:000041F1                 push    edx             ; int
.text$mn:000041F2                 mov     ecx, [ebp+var_38]
.text$mn:000041F5                 call    ?getAbsoluteFilePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z ; ProjectPanel::getAbsoluteFilePath(wchar_t const *)
.text$mn:000041FA                 mov     [ebp+var_4], 0
.text$mn:00004201                 mov     eax, [ebp+pszPath]
.text$mn:00004204                 push    eax             ; pszPath
.text$mn:00004205                 call    dword ptr ds:__imp__PathFindFileNameW@4 ; PathFindFileNameW(x)
.text$mn:0000420B                 mov     [ebp+var_4C], eax
.text$mn:0000420E                 lea     ecx, [ebp+var_2C]
.text$mn:00004211                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00004216                 push    eax             ; pszPath
.text$mn:00004217                 call    dword ptr ds:__imp__PathFileExistsW@4 ; PathFileExistsW(x)
.text$mn:0000421D                 test    eax, eax
.text$mn:0000421F                 jz      short loc_422A
.text$mn:00004221                 mov     [ebp+var_44], 5
.text$mn:00004228                 jmp     short loc_4231
.text$mn:0000422A ; ---------------------------------------------------------------------------
.text$mn:0000422A
.text$mn:0000422A loc_422A:                               ; CODE XREF: ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)+12Fj
.text$mn:0000422A                 mov     [ebp+var_44], 6
.text$mn:00004231
.text$mn:00004231 loc_4231:                               ; CODE XREF: ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)+138j
.text$mn:00004231                 mov     ecx, [ebp+var_44]
.text$mn:00004234                 mov     [ebp+var_48], ecx
.text$mn:00004237                 lea     ecx, [ebp+var_2C]
.text$mn:0000423A                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000423F                 push    eax             ; wchar_t *
.text$mn:00004240                 mov     edx, [ebp+var_48]
.text$mn:00004243                 push    edx             ; int
.text$mn:00004244                 mov     eax, [ebp+arg_4]
.text$mn:00004247                 push    eax             ; struct _TREEITEM *
.text$mn:00004248                 mov     ecx, [ebp+var_4C]
.text$mn:0000424B                 push    ecx             ; wchar_t *
.text$mn:0000424C                 mov     ecx, [ebp+var_38]
.text$mn:0000424F                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00004252                 call    ?addItem@TreeView@@QAEPAU_TREEITEM@@PB_WPAU2@H0@Z ; TreeView::addItem(wchar_t const *,_TREEITEM *,int,wchar_t const *)
.text$mn:00004257                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000425E                 lea     ecx, [ebp+var_2C]
.text$mn:00004261                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00004266
.text$mn:00004266 loc_4266:                               ; CODE XREF: ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *):loc_41B7j
.text$mn:00004266                                         ; ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)+DDj
.text$mn:00004266                 jmp     loc_4128
.text$mn:0000426B ; ---------------------------------------------------------------------------
.text$mn:0000426B
.text$mn:0000426B loc_426B:                               ; CODE XREF: ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)+47j
.text$mn:0000426B                 mov     al, 1
.text$mn:0000426D
.text$mn:0000426D loc_426D:                               ; CODE XREF: ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)+C2j
.text$mn:0000426D                 mov     ecx, [ebp+var_C]
.text$mn:00004270                 mov     large fs:0, ecx
.text$mn:00004277                 pop     ecx
.text$mn:00004278                 mov     ecx, [ebp+var_10]
.text$mn:0000427B                 xor     ecx, ebp
.text$mn:0000427D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00004282                 mov     esp, ebp
.text$mn:00004284                 pop     ebp
.text$mn:00004285                 retn    8
.text$mn:00004285 ?buildTreeFrom@ProjectPanel@@IAE_NPAVTiXmlNode@@PAU_TREEITEM@@@Z endp
.text$mn:00004285
.text$mn:00004285 ; ---------------------------------------------------------------------------
.text$mn:00004288                 align 10h
.text$mn:00004290
.text$mn:00004290 ; =============== S U B R O U T I N E =======================================
.text$mn:00004290
.text$mn:00004290 ; Attributes: bp-based frame
.text$mn:00004290
.text$mn:00004290 ; void __thiscall ProjectPanel::notified(ProjectPanel *this, struct tagNMHDR *)
.text$mn:00004290                 public ?notified@ProjectPanel@@IAEXPAUtagNMHDR@@@Z
.text$mn:00004290 ?notified@ProjectPanel@@IAEXPAUtagNMHDR@@@Z proc near
.text$mn:00004290                                         ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+3C8p
.text$mn:00004290
.text$mn:00004290 lParam          = dword ptr -26Ch
.text$mn:00004290 var_268         = dword ptr -268h
.text$mn:00004290 lpString        = dword ptr -25Ch
.text$mn:00004290 var_258         = dword ptr -258h
.text$mn:00004290 var_254         = dword ptr -254h
.text$mn:00004290 var_250         = dword ptr -250h
.text$mn:00004290 var_244         = dword ptr -244h
.text$mn:00004290 var_240         = dword ptr -240h
.text$mn:00004290 var_23C         = dword ptr -23Ch
.text$mn:00004290 var_238         = dword ptr -238h
.text$mn:00004290 var_234         = dword ptr -234h
.text$mn:00004290 var_230         = dword ptr -230h
.text$mn:00004290 var_22C         = dword ptr -22Ch
.text$mn:00004290 var_228         = dword ptr -228h
.text$mn:00004290 var_224         = dword ptr -224h
.text$mn:00004290 var_220         = dword ptr -220h
.text$mn:00004290 var_21C         = dword ptr -21Ch
.text$mn:00004290 var_218         = dword ptr -218h
.text$mn:00004290 var_214         = dword ptr -214h
.text$mn:00004290 var_210         = dword ptr -210h
.text$mn:00004290 var_20C         = byte ptr -20Ch
.text$mn:00004290 var_4           = dword ptr -4
.text$mn:00004290 arg_0           = dword ptr  8
.text$mn:00004290
.text$mn:00004290                 push    ebp
.text$mn:00004291                 mov     ebp, esp
.text$mn:00004293                 sub     esp, 26Ch
.text$mn:00004299                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000429E                 xor     eax, ebp
.text$mn:000042A0                 mov     [ebp+var_4], eax
.text$mn:000042A3                 mov     [ebp+var_210], ecx
.text$mn:000042A9                 mov     ecx, [ebp+var_210]
.text$mn:000042AF                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000042B2                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:000042B7                 mov     ecx, [ebp+arg_0]
.text$mn:000042BA                 cmp     [ecx], eax
.text$mn:000042BC                 jnz     loc_47A2
.text$mn:000042C2                 mov     [ebp+lParam], 5
.text$mn:000042CC                 lea     edx, [ebp+var_20C]
.text$mn:000042D2                 mov     [ebp+lpString], edx
.text$mn:000042D8                 mov     [ebp+var_258], 104h
.text$mn:000042E2                 mov     eax, [ebp+arg_0]
.text$mn:000042E5                 mov     ecx, [eax+8]
.text$mn:000042E8                 mov     [ebp+var_214], ecx
.text$mn:000042EE                 cmp     [ebp+var_214], 0FFFFFE62h
.text$mn:000042F8                 ja      short loc_433B
.text$mn:000042FA                 cmp     [ebp+var_214], 0FFFFFE62h
.text$mn:00004304                 jz      loc_44FF
.text$mn:0000430A                 cmp     [ebp+var_214], 0FFFFFE34h
.text$mn:00004314                 jz      short loc_4369
.text$mn:00004316                 cmp     [ebp+var_214], 0FFFFFE38h
.text$mn:00004320                 jz      loc_4790
.text$mn:00004326                 cmp     [ebp+var_214], 0FFFFFE39h
.text$mn:00004330                 jz      loc_4700
.text$mn:00004336                 jmp     loc_47A2
.text$mn:0000433B ; ---------------------------------------------------------------------------
.text$mn:0000433B
.text$mn:0000433B loc_433B:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+68j
.text$mn:0000433B                 cmp     [ebp+var_214], 0FFFFFE64h
.text$mn:00004345                 jz      loc_4589
.text$mn:0000434B                 cmp     [ebp+var_214], 0FFFFFFFDh
.text$mn:00004352                 jz      short loc_4359
.text$mn:00004354                 jmp     loc_47A2
.text$mn:00004359 ; ---------------------------------------------------------------------------
.text$mn:00004359
.text$mn:00004359 loc_4359:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+C2j
.text$mn:00004359                 mov     ecx, [ebp+var_210] ; this
.text$mn:0000435F                 call    ?openSelectFile@ProjectPanel@@IAEXXZ ; ProjectPanel::openSelectFile(void)
.text$mn:00004364                 jmp     loc_47A2
.text$mn:00004369 ; ---------------------------------------------------------------------------
.text$mn:00004369
.text$mn:00004369 loc_4369:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+84j
.text$mn:00004369                 mov     edx, [ebp+arg_0]
.text$mn:0000436C                 mov     [ebp+var_21C], edx
.text$mn:00004372                 mov     eax, [ebp+var_21C]
.text$mn:00004378                 cmp     dword ptr [eax+1Ch], 0
.text$mn:0000437C                 jnz     short loc_4383
.text$mn:0000437E                 jmp     loc_47A2
.text$mn:00004383 ; ---------------------------------------------------------------------------
.text$mn:00004383
.text$mn:00004383 loc_4383:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+ECj
.text$mn:00004383                 mov     ecx, [ebp+var_21C]
.text$mn:00004389                 mov     edx, [ecx+10h]
.text$mn:0000438C                 push    edx
.text$mn:0000438D                 mov     ecx, [ebp+var_210]
.text$mn:00004393                 call    ?getNodeType@ProjectPanel@@IAE?AW4NodeType@@PAU_TREEITEM@@@Z ; ProjectPanel::getNodeType(_TREEITEM *)
.text$mn:00004398                 test    eax, eax
.text$mn:0000439A                 jnz     short loc_43A1
.text$mn:0000439C                 jmp     loc_47A2
.text$mn:000043A1 ; ---------------------------------------------------------------------------
.text$mn:000043A1
.text$mn:000043A1 loc_43A1:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+10Aj
.text$mn:000043A1                 mov     eax, [ebp+var_21C]
.text$mn:000043A7                 cmp     dword ptr [eax+30h], 0
.text$mn:000043AB                 jz      loc_44C7
.text$mn:000043B1                 mov     ecx, [ebp+var_210]
.text$mn:000043B7                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000043BA                 call    ?getSelection@TreeView@@QBEPAU_TREEITEM@@XZ ; TreeView::getSelection(void)
.text$mn:000043BF                 mov     [ebp+var_268], eax
.text$mn:000043C5                 lea     ecx, [ebp+lParam]
.text$mn:000043CB                 push    ecx             ; lParam
.text$mn:000043CC                 push    0               ; wParam
.text$mn:000043CE                 push    113Eh           ; Msg
.text$mn:000043D3                 mov     ecx, [ebp+var_210]
.text$mn:000043D9                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000043DC                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:000043E1                 push    eax             ; hWnd
.text$mn:000043E2                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000043E8                 mov     edx, [ebp+lpString]
.text$mn:000043EE                 push    edx             ; lpString
.text$mn:000043EF                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:000043F5                 mov     [ebp+var_240], eax
.text$mn:000043FB                 mov     eax, [ebp+var_21C]
.text$mn:00004401                 mov     ecx, [eax+30h]
.text$mn:00004404                 mov     [ebp+var_22C], ecx
.text$mn:0000440A                 mov     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00004410                 push    edx             ; int
.text$mn:00004411                 mov     eax, [ebp+lpString]
.text$mn:00004417                 push    eax             ; Str
.text$mn:00004418                 mov     ecx, [ebp+var_22C]
.text$mn:0000441E                 call    ?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint)
.text$mn:00004423                 mov     [ebp+var_238], eax
.text$mn:00004429                 mov     ecx, [ebp+var_238]
.text$mn:0000442F                 cmp     ecx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00004435                 jz      short loc_445A
.text$mn:00004437                 mov     edx, [ebp+var_21C]
.text$mn:0000443D                 mov     eax, [edx+1Ch]
.text$mn:00004440                 push    eax             ; Str
.text$mn:00004441                 mov     ecx, [ebp+var_240]
.text$mn:00004447                 push    ecx             ; int
.text$mn:00004448                 mov     edx, [ebp+var_238]
.text$mn:0000444E                 push    edx             ; int
.text$mn:0000444F                 mov     ecx, [ebp+var_22C]
.text$mn:00004455                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *)
.text$mn:0000445A
.text$mn:0000445A loc_445A:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+1A5j
.text$mn:0000445A                 mov     [ebp+lParam], 22h ; '"'
.text$mn:00004464                 mov     ecx, [ebp+var_22C]
.text$mn:0000446A                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000446F                 push    eax             ; pszPath
.text$mn:00004470                 call    dword ptr ds:__imp__PathFileExistsW@4 ; PathFileExistsW(x)
.text$mn:00004476                 test    eax, eax
.text$mn:00004478                 jz      short loc_4490
.text$mn:0000447A                 mov     [ebp+var_254], 5
.text$mn:00004484                 mov     [ebp+var_250], 5
.text$mn:0000448E                 jmp     short loc_44A4
.text$mn:00004490 ; ---------------------------------------------------------------------------
.text$mn:00004490
.text$mn:00004490 loc_4490:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+1E8j
.text$mn:00004490                 mov     [ebp+var_254], 6
.text$mn:0000449A                 mov     [ebp+var_250], 6
.text$mn:000044A4
.text$mn:000044A4 loc_44A4:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+1FEj
.text$mn:000044A4                 lea     eax, [ebp+lParam]
.text$mn:000044AA                 push    eax             ; lParam
.text$mn:000044AB                 push    0               ; wParam
.text$mn:000044AD                 push    113Fh           ; Msg
.text$mn:000044B2                 mov     ecx, [ebp+var_210]
.text$mn:000044B8                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000044BB                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:000044C0                 push    eax             ; hWnd
.text$mn:000044C1                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000044C7
.text$mn:000044C7 loc_44C7:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+11Bj
.text$mn:000044C7                 mov     ecx, [ebp+var_21C]
.text$mn:000044CD                 add     ecx, 0Ch
.text$mn:000044D0                 push    ecx             ; lParam
.text$mn:000044D1                 push    0               ; wParam
.text$mn:000044D3                 push    113Fh           ; Msg
.text$mn:000044D8                 mov     ecx, [ebp+var_210]
.text$mn:000044DE                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000044E1                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:000044E6                 push    eax             ; hWnd
.text$mn:000044E7                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000044ED                 push    1               ; bool
.text$mn:000044EF                 mov     ecx, [ebp+var_210] ; this
.text$mn:000044F5                 call    ?setWorkSpaceDirty@ProjectPanel@@IAEX_N@Z ; ProjectPanel::setWorkSpaceDirty(bool)
.text$mn:000044FA                 jmp     loc_47A2
.text$mn:000044FF ; ---------------------------------------------------------------------------
.text$mn:000044FF
.text$mn:000044FF loc_44FF:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+74j
.text$mn:000044FF                 mov     edx, [ebp+arg_0]
.text$mn:00004502                 mov     [ebp+var_228], edx
.text$mn:00004508                 mov     [ebp+var_224], 0
.text$mn:00004512                 mov     ecx, [ebp+var_210]
.text$mn:00004518                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:0000451B                 call    ?getRoot@TreeView@@QBEPAU_TREEITEM@@XZ ; TreeView::getRoot(void)
.text$mn:00004520                 mov     ecx, [ebp+var_228]
.text$mn:00004526                 cmp     eax, [ecx+14h]
.text$mn:00004529                 jnz     short loc_453F
.text$mn:0000452B                 mov     edx, [ebp+var_210]
.text$mn:00004531                 add     edx, 0C4h ; '-'
.text$mn:00004537                 mov     [ebp+var_224], edx
.text$mn:0000453D                 jmp     short loc_455C
.text$mn:0000453F ; ---------------------------------------------------------------------------
.text$mn:0000453F
.text$mn:0000453F loc_453F:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+299j
.text$mn:0000453F                 mov     eax, [ebp+var_228]
.text$mn:00004545                 mov     ecx, [eax+18h]
.text$mn:00004548                 mov     [ebp+var_224], ecx
.text$mn:0000454E                 cmp     [ebp+var_224], 0
.text$mn:00004555                 jnz     short loc_455C
.text$mn:00004557                 jmp     loc_47A2
.text$mn:0000455C ; ---------------------------------------------------------------------------
.text$mn:0000455C
.text$mn:0000455C loc_455C:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+2ADj
.text$mn:0000455C                                         ; ProjectPanel::notified(tagNMHDR *)+2C5j
.text$mn:0000455C                 mov     ecx, [ebp+var_224]
.text$mn:00004562                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00004567                 mov     edx, [ebp+var_228]
.text$mn:0000456D                 mov     [edx+0Ch], eax
.text$mn:00004570                 mov     ecx, [ebp+var_224]
.text$mn:00004576                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000457B                 mov     ecx, [ebp+var_228]
.text$mn:00004581                 mov     [ecx+10h], eax
.text$mn:00004584                 jmp     loc_47A2
.text$mn:00004589 ; ---------------------------------------------------------------------------
.text$mn:00004589
.text$mn:00004589 loc_4589:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+B5j
.text$mn:00004589                 mov     edx, [ebp+arg_0]
.text$mn:0000458C                 mov     [ebp+var_220], edx
.text$mn:00004592                 mov     eax, [ebp+var_220]
.text$mn:00004598                 movzx   ecx, word ptr [eax+0Ch]
.text$mn:0000459C                 cmp     ecx, 2Eh ; '.'
.text$mn:0000459F                 jnz     short loc_460F
.text$mn:000045A1                 mov     ecx, [ebp+var_210]
.text$mn:000045A7                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000045AA                 call    ?getSelection@TreeView@@QBEPAU_TREEITEM@@XZ ; TreeView::getSelection(void)
.text$mn:000045AF                 mov     [ebp+var_23C], eax
.text$mn:000045B5                 mov     edx, [ebp+var_23C]
.text$mn:000045BB                 push    edx
.text$mn:000045BC                 mov     ecx, [ebp+var_210]
.text$mn:000045C2                 call    ?getNodeType@ProjectPanel@@IAE?AW4NodeType@@PAU_TREEITEM@@@Z ; ProjectPanel::getNodeType(_TREEITEM *)
.text$mn:000045C7                 mov     [ebp+var_230], eax
.text$mn:000045CD                 cmp     [ebp+var_230], 1
.text$mn:000045D4                 jz      short loc_45DF
.text$mn:000045D6                 cmp     [ebp+var_230], 2
.text$mn:000045DD                 jnz     short loc_45F1
.text$mn:000045DF
.text$mn:000045DF loc_45DF:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+344j
.text$mn:000045DF                 push    0C2Ah           ; int
.text$mn:000045E4                 mov     ecx, [ebp+var_210] ; this
.text$mn:000045EA                 call    ?popupMenuCmd@ProjectPanel@@IAEXH@Z ; ProjectPanel::popupMenuCmd(int)
.text$mn:000045EF                 jmp     short loc_460A
.text$mn:000045F1 ; ---------------------------------------------------------------------------
.text$mn:000045F1
.text$mn:000045F1 loc_45F1:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+34Dj
.text$mn:000045F1                 cmp     [ebp+var_230], 3
.text$mn:000045F8                 jnz     short loc_460A
.text$mn:000045FA                 push    0C2Bh           ; int
.text$mn:000045FF                 mov     ecx, [ebp+var_210] ; this
.text$mn:00004605                 call    ?popupMenuCmd@ProjectPanel@@IAEXH@Z ; ProjectPanel::popupMenuCmd(int)
.text$mn:0000460A
.text$mn:0000460A loc_460A:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+35Fj
.text$mn:0000460A                                         ; ProjectPanel::notified(tagNMHDR *)+368j
.text$mn:0000460A                 jmp     loc_46FB
.text$mn:0000460F ; ---------------------------------------------------------------------------
.text$mn:0000460F
.text$mn:0000460F loc_460F:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+30Fj
.text$mn:0000460F                 mov     eax, [ebp+var_220]
.text$mn:00004615                 movzx   ecx, word ptr [eax+0Ch]
.text$mn:00004619                 cmp     ecx, 0Dh
.text$mn:0000461C                 jnz     short loc_467A
.text$mn:0000461E                 mov     ecx, [ebp+var_210]
.text$mn:00004624                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00004627                 call    ?getSelection@TreeView@@QBEPAU_TREEITEM@@XZ ; TreeView::getSelection(void)
.text$mn:0000462C                 mov     [ebp+var_234], eax
.text$mn:00004632                 mov     edx, [ebp+var_234]
.text$mn:00004638                 push    edx
.text$mn:00004639                 mov     ecx, [ebp+var_210]
.text$mn:0000463F                 call    ?getNodeType@ProjectPanel@@IAE?AW4NodeType@@PAU_TREEITEM@@@Z ; ProjectPanel::getNodeType(_TREEITEM *)
.text$mn:00004644                 mov     [ebp+var_244], eax
.text$mn:0000464A                 cmp     [ebp+var_244], 3
.text$mn:00004651                 jnz     short loc_4660
.text$mn:00004653                 mov     ecx, [ebp+var_210] ; this
.text$mn:00004659                 call    ?openSelectFile@ProjectPanel@@IAEXXZ ; ProjectPanel::openSelectFile(void)
.text$mn:0000465E                 jmp     short loc_4675
.text$mn:00004660 ; ---------------------------------------------------------------------------
.text$mn:00004660
.text$mn:00004660 loc_4660:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+3C1j
.text$mn:00004660                 mov     eax, [ebp+var_234]
.text$mn:00004666                 push    eax             ; struct _TREEITEM *
.text$mn:00004667                 mov     ecx, [ebp+var_210]
.text$mn:0000466D                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00004670                 call    ?toggleExpandCollapse@TreeView@@QBEXPAU_TREEITEM@@@Z ; TreeView::toggleExpandCollapse(_TREEITEM *)
.text$mn:00004675
.text$mn:00004675 loc_4675:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+3CEj
.text$mn:00004675                 jmp     loc_46FB
.text$mn:0000467A ; ---------------------------------------------------------------------------
.text$mn:0000467A
.text$mn:0000467A loc_467A:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+38Cj
.text$mn:0000467A                 mov     ecx, [ebp+var_220]
.text$mn:00004680                 movzx   edx, word ptr [ecx+0Ch]
.text$mn:00004684                 cmp     edx, 26h ; '&'
.text$mn:00004687                 jnz     short loc_46AB
.text$mn:00004689                 push    11h             ; nVirtKey
.text$mn:0000468B                 call    dword ptr ds:__imp__GetKeyState@4 ; GetKeyState(x)
.text$mn:00004691                 cwde
.text$mn:00004692                 and     eax, 80h
.text$mn:00004697                 jz      short loc_46A9
.text$mn:00004699                 push    0C2Eh           ; int
.text$mn:0000469E                 mov     ecx, [ebp+var_210] ; this
.text$mn:000046A4                 call    ?popupMenuCmd@ProjectPanel@@IAEXH@Z ; ProjectPanel::popupMenuCmd(int)
.text$mn:000046A9
.text$mn:000046A9 loc_46A9:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+407j
.text$mn:000046A9                 jmp     short loc_46FB
.text$mn:000046AB ; ---------------------------------------------------------------------------
.text$mn:000046AB
.text$mn:000046AB loc_46AB:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+3F7j
.text$mn:000046AB                 mov     ecx, [ebp+var_220]
.text$mn:000046B1                 movzx   edx, word ptr [ecx+0Ch]
.text$mn:000046B5                 cmp     edx, 28h ; '('
.text$mn:000046B8                 jnz     short loc_46DC
.text$mn:000046BA                 push    11h             ; nVirtKey
.text$mn:000046BC                 call    dword ptr ds:__imp__GetKeyState@4 ; GetKeyState(x)
.text$mn:000046C2                 cwde
.text$mn:000046C3                 and     eax, 80h
.text$mn:000046C8                 jz      short loc_46DA
.text$mn:000046CA                 push    0C2Fh           ; int
.text$mn:000046CF                 mov     ecx, [ebp+var_210] ; this
.text$mn:000046D5                 call    ?popupMenuCmd@ProjectPanel@@IAEXH@Z ; ProjectPanel::popupMenuCmd(int)
.text$mn:000046DA
.text$mn:000046DA loc_46DA:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+438j
.text$mn:000046DA                 jmp     short loc_46FB
.text$mn:000046DC ; ---------------------------------------------------------------------------
.text$mn:000046DC
.text$mn:000046DC loc_46DC:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+428j
.text$mn:000046DC                 mov     ecx, [ebp+var_220]
.text$mn:000046E2                 movzx   edx, word ptr [ecx+0Ch]
.text$mn:000046E6                 cmp     edx, 71h ; 'q'
.text$mn:000046E9                 jnz     short loc_46FB
.text$mn:000046EB                 push    0C27h           ; int
.text$mn:000046F0                 mov     ecx, [ebp+var_210] ; this
.text$mn:000046F6                 call    ?popupMenuCmd@ProjectPanel@@IAEXH@Z ; ProjectPanel::popupMenuCmd(int)
.text$mn:000046FB
.text$mn:000046FB loc_46FB:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *):loc_460Aj
.text$mn:000046FB                                         ; ProjectPanel::notified(tagNMHDR *):loc_4675j ...
.text$mn:000046FB                 jmp     loc_47A2
.text$mn:00004700 ; ---------------------------------------------------------------------------
.text$mn:00004700
.text$mn:00004700 loc_4700:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+A0j
.text$mn:00004700                 mov     eax, [ebp+arg_0]
.text$mn:00004703                 mov     [ebp+var_218], eax
.text$mn:00004709                 mov     ecx, [ebp+var_218]
.text$mn:0000470F                 mov     edx, [ecx+3Ch]
.text$mn:00004712                 mov     [ebp+var_268], edx
.text$mn:00004718                 mov     [ebp+lParam], 22h ; '"'
.text$mn:00004722                 mov     eax, [ebp+var_218]
.text$mn:00004728                 mov     ecx, [eax+3Ch]
.text$mn:0000472B                 push    ecx
.text$mn:0000472C                 mov     ecx, [ebp+var_210]
.text$mn:00004732                 call    ?getNodeType@ProjectPanel@@IAE?AW4NodeType@@PAU_TREEITEM@@@Z ; ProjectPanel::getNodeType(_TREEITEM *)
.text$mn:00004737                 cmp     eax, 2
.text$mn:0000473A                 jnz     short loc_478E
.text$mn:0000473C                 mov     edx, [ebp+var_218]
.text$mn:00004742                 cmp     dword ptr [edx+0Ch], 1
.text$mn:00004746                 jnz     short loc_4766
.text$mn:00004748                 push    4               ; int
.text$mn:0000474A                 push    4               ; int
.text$mn:0000474C                 mov     eax, [ebp+var_218]
.text$mn:00004752                 mov     ecx, [eax+3Ch]
.text$mn:00004755                 push    ecx             ; struct _TREEITEM *
.text$mn:00004756                 mov     ecx, [ebp+var_210]
.text$mn:0000475C                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:0000475F                 call    ?setItemImage@TreeView@@QAEXPAU_TREEITEM@@HH@Z ; TreeView::setItemImage(_TREEITEM *,int,int)
.text$mn:00004764                 jmp     short loc_478E
.text$mn:00004766 ; ---------------------------------------------------------------------------
.text$mn:00004766
.text$mn:00004766 loc_4766:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+4B6j
.text$mn:00004766                 mov     edx, [ebp+var_218]
.text$mn:0000476C                 cmp     dword ptr [edx+0Ch], 2
.text$mn:00004770                 jnz     short loc_478E
.text$mn:00004772                 push    3               ; int
.text$mn:00004774                 push    3               ; int
.text$mn:00004776                 mov     eax, [ebp+var_218]
.text$mn:0000477C                 mov     ecx, [eax+3Ch]
.text$mn:0000477F                 push    ecx             ; struct _TREEITEM *
.text$mn:00004780                 mov     ecx, [ebp+var_210]
.text$mn:00004786                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00004789                 call    ?setItemImage@TreeView@@QAEXPAU_TREEITEM@@HH@Z ; TreeView::setItemImage(_TREEITEM *,int,int)
.text$mn:0000478E
.text$mn:0000478E loc_478E:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+4AAj
.text$mn:0000478E                                         ; ProjectPanel::notified(tagNMHDR *)+4D4j ...
.text$mn:0000478E                 jmp     short loc_47A2
.text$mn:00004790 ; ---------------------------------------------------------------------------
.text$mn:00004790
.text$mn:00004790 loc_4790:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+90j
.text$mn:00004790                 mov     edx, [ebp+arg_0]
.text$mn:00004793                 push    edx             ; struct tagNMTREEVIEWW *
.text$mn:00004794                 mov     ecx, [ebp+var_210]
.text$mn:0000479A                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:0000479D                 call    ?beginDrag@TreeView@@QAEXPAUtagNMTREEVIEWW@@@Z ; TreeView::beginDrag(tagNMTREEVIEWW *)
.text$mn:000047A2
.text$mn:000047A2 loc_47A2:                               ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+2Cj
.text$mn:000047A2                                         ; ProjectPanel::notified(tagNMHDR *)+A6j ...
.text$mn:000047A2                 mov     ecx, [ebp+var_4]
.text$mn:000047A5                 xor     ecx, ebp
.text$mn:000047A7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000047AC                 mov     esp, ebp
.text$mn:000047AE                 pop     ebp
.text$mn:000047AF                 retn    4
.text$mn:000047AF ?notified@ProjectPanel@@IAEXPAUtagNMHDR@@@Z endp
.text$mn:000047AF
.text$mn:000047AF ; ---------------------------------------------------------------------------
.text$mn:000047B2                 align 10h
.text$mn:000047C0
.text$mn:000047C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000047C0
.text$mn:000047C0 ; Attributes: bp-based frame
.text$mn:000047C0
.text$mn:000047C0 ; void __thiscall ProjectPanel::showContextMenu(ProjectPanel *this, int x, int)
.text$mn:000047C0                 public ?showContextMenu@ProjectPanel@@IAEXHH@Z
.text$mn:000047C0 ?showContextMenu@ProjectPanel@@IAEXHH@Z proc near
.text$mn:000047C0                                         ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+4AFp
.text$mn:000047C0
.text$mn:000047C0 Point           = tagPOINT ptr -20h
.text$mn:000047C0 var_18          = dword ptr -18h
.text$mn:000047C0 var_14          = dword ptr -14h
.text$mn:000047C0 var_10          = dword ptr -10h
.text$mn:000047C0 var_C           = dword ptr -0Ch
.text$mn:000047C0 hMenu           = dword ptr -8
.text$mn:000047C0 var_4           = dword ptr -4
.text$mn:000047C0 x               = dword ptr  8
.text$mn:000047C0 y               = dword ptr  0Ch
.text$mn:000047C0
.text$mn:000047C0                 push    ebp
.text$mn:000047C1                 mov     ebp, esp
.text$mn:000047C3                 sub     esp, 20h
.text$mn:000047C6                 mov     [ebp+var_4], ecx
.text$mn:000047C9                 mov     eax, [ebp+x]
.text$mn:000047CC                 mov     [ebp+Point.x], eax
.text$mn:000047CF                 mov     ecx, [ebp+y]
.text$mn:000047D2                 mov     [ebp+Point.y], ecx
.text$mn:000047D5                 mov     [ebp+var_18], 0
.text$mn:000047DC                 lea     edx, [ebp+Point]
.text$mn:000047DF                 push    edx             ; lpPoint
.text$mn:000047E0                 mov     ecx, [ebp+var_4]
.text$mn:000047E3                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000047E6                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:000047EB                 push    eax             ; hWnd
.text$mn:000047EC                 call    dword ptr ds:__imp__ScreenToClient@8 ; ScreenToClient(x,x)
.text$mn:000047F2                 lea     eax, [ebp+Point]
.text$mn:000047F5                 push    eax             ; lParam
.text$mn:000047F6                 push    0               ; wParam
.text$mn:000047F8                 push    1111h           ; Msg
.text$mn:000047FD                 mov     ecx, [ebp+var_4]
.text$mn:00004800                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00004803                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00004808                 push    eax             ; hWnd
.text$mn:00004809                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000480F                 mov     [ebp+var_10], eax
.text$mn:00004812                 cmp     [ebp+var_14], 0
.text$mn:00004816                 jz      loc_48A8
.text$mn:0000481C                 mov     ecx, [ebp+var_14]
.text$mn:0000481F                 push    ecx             ; struct _TREEITEM *
.text$mn:00004820                 mov     ecx, [ebp+var_4]
.text$mn:00004823                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00004826                 call    ?selectItem@TreeView@@QBE_NPAU_TREEITEM@@@Z ; TreeView::selectItem(_TREEITEM *)
.text$mn:0000482B                 mov     edx, [ebp+var_14]
.text$mn:0000482E                 push    edx
.text$mn:0000482F                 mov     ecx, [ebp+var_4]
.text$mn:00004832                 call    ?getNodeType@ProjectPanel@@IAE?AW4NodeType@@PAU_TREEITEM@@@Z ; ProjectPanel::getNodeType(_TREEITEM *)
.text$mn:00004837                 mov     [ebp+var_C], eax
.text$mn:0000483A                 mov     [ebp+hMenu], 0
.text$mn:00004841                 cmp     [ebp+var_C], 0
.text$mn:00004845                 jnz     short loc_4855
.text$mn:00004847                 mov     eax, [ebp+var_4]
.text$mn:0000484A                 mov     ecx, [eax+0B4h]
.text$mn:00004850                 mov     [ebp+hMenu], ecx
.text$mn:00004853                 jmp     short loc_4889
.text$mn:00004855 ; ---------------------------------------------------------------------------
.text$mn:00004855
.text$mn:00004855 loc_4855:                               ; CODE XREF: ProjectPanel::showContextMenu(int,int)+85j
.text$mn:00004855                 cmp     [ebp+var_C], 1
.text$mn:00004859                 jnz     short loc_4869
.text$mn:0000485B                 mov     edx, [ebp+var_4]
.text$mn:0000485E                 mov     eax, [edx+0B8h]
.text$mn:00004864                 mov     [ebp+hMenu], eax
.text$mn:00004867                 jmp     short loc_4889
.text$mn:00004869 ; ---------------------------------------------------------------------------
.text$mn:00004869
.text$mn:00004869 loc_4869:                               ; CODE XREF: ProjectPanel::showContextMenu(int,int)+99j
.text$mn:00004869                 cmp     [ebp+var_C], 2
.text$mn:0000486D                 jnz     short loc_487D
.text$mn:0000486F                 mov     ecx, [ebp+var_4]
.text$mn:00004872                 mov     edx, [ecx+0BCh]
.text$mn:00004878                 mov     [ebp+hMenu], edx
.text$mn:0000487B                 jmp     short loc_4889
.text$mn:0000487D ; ---------------------------------------------------------------------------
.text$mn:0000487D
.text$mn:0000487D loc_487D:                               ; CODE XREF: ProjectPanel::showContextMenu(int,int)+ADj
.text$mn:0000487D                 mov     eax, [ebp+var_4]
.text$mn:00004880                 mov     ecx, [eax+0C0h]
.text$mn:00004886                 mov     [ebp+hMenu], ecx
.text$mn:00004889
.text$mn:00004889 loc_4889:                               ; CODE XREF: ProjectPanel::showContextMenu(int,int)+93j
.text$mn:00004889                                         ; ProjectPanel::showContextMenu(int,int)+A7j ...
.text$mn:00004889                 push    0               ; prcRect
.text$mn:0000488B                 mov     edx, [ebp+var_4]
.text$mn:0000488E                 mov     eax, [edx+0Ch]
.text$mn:00004891                 push    eax             ; hWnd
.text$mn:00004892                 push    0               ; nReserved
.text$mn:00004894                 mov     ecx, [ebp+y]
.text$mn:00004897                 push    ecx             ; y
.text$mn:00004898                 mov     edx, [ebp+x]
.text$mn:0000489B                 push    edx             ; x
.text$mn:0000489C                 push    0               ; uFlags
.text$mn:0000489E                 mov     eax, [ebp+hMenu]
.text$mn:000048A1                 push    eax             ; hMenu
.text$mn:000048A2                 call    dword ptr ds:__imp__TrackPopupMenu@28 ; TrackPopupMenu(x,x,x,x,x,x,x)
.text$mn:000048A8
.text$mn:000048A8 loc_48A8:                               ; CODE XREF: ProjectPanel::showContextMenu(int,int)+56j
.text$mn:000048A8                 mov     esp, ebp
.text$mn:000048AA                 pop     ebp
.text$mn:000048AB                 retn    8
.text$mn:000048AB ?showContextMenu@ProjectPanel@@IAEXHH@Z endp
.text$mn:000048AB
.text$mn:000048AB ; ---------------------------------------------------------------------------
.text$mn:000048AE                 align 10h
.text$mn:000048B0
.text$mn:000048B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000048B0
.text$mn:000048B0 ; Attributes: bp-based frame
.text$mn:000048B0
.text$mn:000048B0 ; int __stdcall ProjectPanel::getAbsoluteFilePath(int, LPCWSTR pszPath)
.text$mn:000048B0                 public ?getAbsoluteFilePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z
.text$mn:000048B0 ?getAbsoluteFilePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z proc near
.text$mn:000048B0                                         ; CODE XREF: ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)+105p
.text$mn:000048B0
.text$mn:000048B0 var_220         = dword ptr -220h
.text$mn:000048B0 var_21C         = dword ptr -21Ch
.text$mn:000048B0 String1         = word ptr -218h
.text$mn:000048B0 var_10          = dword ptr -10h
.text$mn:000048B0 var_C           = dword ptr -0Ch
.text$mn:000048B0 var_4           = dword ptr -4
.text$mn:000048B0 arg_0           = dword ptr  8
.text$mn:000048B0 pszPath         = dword ptr  0Ch
.text$mn:000048B0
.text$mn:000048B0                 push    ebp
.text$mn:000048B1                 mov     ebp, esp
.text$mn:000048B3                 push    0FFFFFFFFh
.text$mn:000048B5                 push    offset __ehhandler$?getAbsoluteFilePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z
.text$mn:000048BA                 mov     eax, large fs:0
.text$mn:000048C0                 push    eax
.text$mn:000048C1                 sub     esp, 214h
.text$mn:000048C7                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000048CC                 xor     eax, ebp
.text$mn:000048CE                 mov     [ebp+var_10], eax
.text$mn:000048D1                 push    eax
.text$mn:000048D2                 lea     eax, [ebp+var_C]
.text$mn:000048D5                 mov     large fs:0, eax
.text$mn:000048DB                 mov     [ebp+var_220], ecx
.text$mn:000048E1                 mov     [ebp+var_21C], 0
.text$mn:000048EB                 mov     eax, [ebp+pszPath]
.text$mn:000048EE                 push    eax             ; pszPath
.text$mn:000048EF                 call    dword ptr ds:__imp__PathIsRelativeW@4 ; PathIsRelativeW(x)
.text$mn:000048F5                 test    eax, eax
.text$mn:000048F7                 jnz     short loc_4920
.text$mn:000048F9                 mov     ecx, [ebp+pszPath]
.text$mn:000048FC                 push    ecx             ; Str
.text$mn:000048FD                 mov     ecx, [ebp+arg_0]
.text$mn:00004900                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00004905                 mov     [ebp+var_4], 0
.text$mn:0000490C                 mov     edx, [ebp+var_21C]
.text$mn:00004912                 or      edx, 1
.text$mn:00004915                 mov     [ebp+var_21C], edx
.text$mn:0000491B                 mov     eax, [ebp+arg_0]
.text$mn:0000491E                 jmp     short loc_4985
.text$mn:00004920 ; ---------------------------------------------------------------------------
.text$mn:00004920
.text$mn:00004920 loc_4920:                               ; CODE XREF: ProjectPanel::getAbsoluteFilePath(wchar_t const *)+47j
.text$mn:00004920                 mov     ecx, [ebp+var_220]
.text$mn:00004926                 add     ecx, 0C4h ; '-'
.text$mn:0000492C                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00004931                 push    eax             ; lpString2
.text$mn:00004932                 lea     eax, [ebp+String1]
.text$mn:00004938                 push    eax             ; lpString1
.text$mn:00004939                 call    dword ptr ds:__imp__lstrcpyW@8 ; lstrcpyW(x,x)
.text$mn:0000493F                 lea     ecx, [ebp+String1]
.text$mn:00004945                 push    ecx             ; pszPath
.text$mn:00004946                 call    dword ptr ds:__imp__PathRemoveFileSpecW@4 ; PathRemoveFileSpecW(x)
.text$mn:0000494C                 mov     edx, [ebp+pszPath]
.text$mn:0000494F                 push    edx             ; pMore
.text$mn:00004950                 lea     eax, [ebp+String1]
.text$mn:00004956                 push    eax             ; pszPath
.text$mn:00004957                 call    dword ptr ds:__imp__PathAppendW@8 ; PathAppendW(x,x)
.text$mn:0000495D                 lea     ecx, [ebp+String1]
.text$mn:00004963                 push    ecx             ; Str
.text$mn:00004964                 mov     ecx, [ebp+arg_0]
.text$mn:00004967                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:0000496C                 mov     [ebp+var_4], 0
.text$mn:00004973                 mov     edx, [ebp+var_21C]
.text$mn:00004979                 or      edx, 1
.text$mn:0000497C                 mov     [ebp+var_21C], edx
.text$mn:00004982                 mov     eax, [ebp+arg_0]
.text$mn:00004985
.text$mn:00004985 loc_4985:                               ; CODE XREF: ProjectPanel::getAbsoluteFilePath(wchar_t const *)+6Ej
.text$mn:00004985                 mov     ecx, [ebp+var_C]
.text$mn:00004988                 mov     large fs:0, ecx
.text$mn:0000498F                 pop     ecx
.text$mn:00004990                 mov     ecx, [ebp+var_10]
.text$mn:00004993                 xor     ecx, ebp
.text$mn:00004995                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000499A                 mov     esp, ebp
.text$mn:0000499C                 pop     ebp
.text$mn:0000499D                 retn    8
.text$mn:0000499D ?getAbsoluteFilePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z endp
.text$mn:0000499D
.text$mn:000049A0
.text$mn:000049A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000049A0
.text$mn:000049A0 ; Attributes: bp-based frame
.text$mn:000049A0
.text$mn:000049A0 ; void __thiscall ProjectPanel::openSelectFile(ProjectPanel *__hidden this)
.text$mn:000049A0                 public ?openSelectFile@ProjectPanel@@IAEXXZ
.text$mn:000049A0 ?openSelectFile@ProjectPanel@@IAEXXZ proc near
.text$mn:000049A0                                         ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+CFp
.text$mn:000049A0                                         ; ProjectPanel::notified(tagNMHDR *)+3C9p
.text$mn:000049A0
.text$mn:000049A0 lParam          = dword ptr -34h
.text$mn:000049A0 var_30          = dword ptr -30h
.text$mn:000049A0 var_1C          = dword ptr -1Ch
.text$mn:000049A0 var_18          = dword ptr -18h
.text$mn:000049A0 var_10          = dword ptr -10h
.text$mn:000049A0 var_C           = dword ptr -0Ch
.text$mn:000049A0 var_8           = dword ptr -8
.text$mn:000049A0 var_4           = dword ptr -4
.text$mn:000049A0
.text$mn:000049A0                 push    ebp
.text$mn:000049A1                 mov     ebp, esp
.text$mn:000049A3                 sub     esp, 34h
.text$mn:000049A6                 mov     [ebp+var_4], ecx
.text$mn:000049A9                 mov     [ebp+lParam], 4
.text$mn:000049B0                 mov     ecx, [ebp+var_4]
.text$mn:000049B3                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000049B6                 call    ?getSelection@TreeView@@QBEPAU_TREEITEM@@XZ ; TreeView::getSelection(void)
.text$mn:000049BB                 mov     [ebp+var_30], eax
.text$mn:000049BE                 lea     eax, [ebp+lParam]
.text$mn:000049C1                 push    eax             ; lParam
.text$mn:000049C2                 push    0               ; wParam
.text$mn:000049C4                 push    113Eh           ; Msg
.text$mn:000049C9                 mov     ecx, [ebp+var_4]
.text$mn:000049CC                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:000049CF                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:000049D4                 push    eax             ; hWnd
.text$mn:000049D5                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000049DB                 mov     ecx, [ebp+var_30]
.text$mn:000049DE                 push    ecx
.text$mn:000049DF                 mov     ecx, [ebp+var_4]
.text$mn:000049E2                 call    ?getNodeType@ProjectPanel@@IAE?AW4NodeType@@PAU_TREEITEM@@@Z ; ProjectPanel::getNodeType(_TREEITEM *)
.text$mn:000049E7                 mov     [ebp+var_C], eax
.text$mn:000049EA                 mov     edx, [ebp+var_10]
.text$mn:000049ED                 mov     [ebp+var_8], edx
.text$mn:000049F0                 cmp     [ebp+var_C], 3
.text$mn:000049F4                 jnz     short loc_4A6E
.text$mn:000049F6                 cmp     [ebp+var_8], 0
.text$mn:000049FA                 jz      short loc_4A6E
.text$mn:000049FC                 mov     [ebp+lParam], 22h ; '"'
.text$mn:00004A03                 mov     ecx, [ebp+var_8]
.text$mn:00004A06                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00004A0B                 push    eax             ; pszPath
.text$mn:00004A0C                 call    dword ptr ds:__imp__PathFileExistsW@4 ; PathFileExistsW(x)
.text$mn:00004A12                 test    eax, eax
.text$mn:00004A14                 jz      short loc_4A43
.text$mn:00004A16                 mov     ecx, [ebp+var_8]
.text$mn:00004A19                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00004A1E                 push    eax             ; lParam
.text$mn:00004A1F                 push    0               ; wParam
.text$mn:00004A21                 push    835h            ; Msg
.text$mn:00004A26                 mov     eax, [ebp+var_4]
.text$mn:00004A29                 mov     ecx, [eax+8]
.text$mn:00004A2C                 push    ecx             ; hWnd
.text$mn:00004A2D                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00004A33                 mov     [ebp+var_1C], 5
.text$mn:00004A3A                 mov     [ebp+var_18], 5
.text$mn:00004A41                 jmp     short loc_4A51
.text$mn:00004A43 ; ---------------------------------------------------------------------------
.text$mn:00004A43
.text$mn:00004A43 loc_4A43:                               ; CODE XREF: ProjectPanel::openSelectFile(void)+74j
.text$mn:00004A43                 mov     [ebp+var_1C], 6
.text$mn:00004A4A                 mov     [ebp+var_18], 6
.text$mn:00004A51
.text$mn:00004A51 loc_4A51:                               ; CODE XREF: ProjectPanel::openSelectFile(void)+A1j
.text$mn:00004A51                 lea     edx, [ebp+lParam]
.text$mn:00004A54                 push    edx             ; lParam
.text$mn:00004A55                 push    0               ; wParam
.text$mn:00004A57                 push    113Fh           ; Msg
.text$mn:00004A5C                 mov     ecx, [ebp+var_4]
.text$mn:00004A5F                 add     ecx, 6Ch ; 'l'  ; this
.text$mn:00004A62                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00004A67                 push    eax             ; hWnd
.text$mn:00004A68                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00004A6E
.text$mn:00004A6E loc_4A6E:                               ; CODE XREF: ProjectPanel::openSelectFile(void)+54j
.text$mn:00004A6E                                         ; ProjectPanel::openSelectFile(void)+5Aj
.text$mn:00004A6E                 mov     esp, ebp
.text$mn:00004A70                 pop     ebp
.text$mn:00004A71                 retn
.text$mn:00004A71 ?openSelectFile@ProjectPanel@@IAEXXZ endp
.text$mn:00004A71
.text$mn:00004A71 ; ---------------------------------------------------------------------------
.text$mn:00004A72                 align 10h
.text$mn:00004A80
.text$mn:00004A80 ; =============== S U B R O U T I N E =======================================
.text$mn:00004A80
.text$mn:00004A80 ; Attributes: bp-based frame
.text$mn:00004A80
.text$mn:00004A80 ; int __thiscall FileRelocalizerDlg::doDialog(FileRelocalizerDlg *this, const wchar_t *Str, bool)
.text$mn:00004A80                 public ?doDialog@FileRelocalizerDlg@@QAEHPB_W_N@Z
.text$mn:00004A80 ?doDialog@FileRelocalizerDlg@@QAEHPB_W_N@Z proc near
.text$mn:00004A80                                         ; CODE XREF: ProjectPanel::popupMenuCmd(int)+918p
.text$mn:00004A80
.text$mn:00004A80 var_10          = dword ptr -10h
.text$mn:00004A80 hMem            = dword ptr -0Ch
.text$mn:00004A80 hDialogTemplate = dword ptr -8
.text$mn:00004A80 dwInitParam     = dword ptr -4
.text$mn:00004A80 Str             = dword ptr  8
.text$mn:00004A80 arg_4           = byte ptr  0Ch
.text$mn:00004A80
.text$mn:00004A80                 push    ebp
.text$mn:00004A81                 mov     ebp, esp
.text$mn:00004A83                 sub     esp, 10h
.text$mn:00004A86                 mov     [ebp+dwInitParam], ecx
.text$mn:00004A89                 mov     eax, [ebp+Str]
.text$mn:00004A8C                 push    eax             ; Str
.text$mn:00004A8D                 mov     ecx, [ebp+dwInitParam]
.text$mn:00004A90                 add     ecx, 20h ; ' '
.text$mn:00004A93                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00004A98                 movzx   ecx, [ebp+arg_4]
.text$mn:00004A9C                 test    ecx, ecx
.text$mn:00004A9E                 jz      short loc_4AEE
.text$mn:00004AA0                 mov     [ebp+hDialogTemplate], 0
.text$mn:00004AA7                 lea     edx, [ebp+hDialogTemplate]
.text$mn:00004AAA                 push    edx             ; struct DLGTEMPLATE **
.text$mn:00004AAB                 push    0C80h           ; int
.text$mn:00004AB0                 mov     ecx, [ebp+dwInitParam] ; this
.text$mn:00004AB3                 call    ?makeRTLResource@StaticDialog@@IAEPAXHPAPAUDLGTEMPLATE@@@Z ; StaticDialog::makeRTLResource(int,DLGTEMPLATE * *)
.text$mn:00004AB8                 mov     [ebp+hMem], eax
.text$mn:00004ABB                 mov     eax, [ebp+dwInitParam]
.text$mn:00004ABE                 push    eax             ; dwInitParam
.text$mn:00004ABF                 push    offset ?dlgProc@StaticDialog@@KGHPAUHWND__@@IIJ@Z ; lpDialogFunc
.text$mn:00004AC4                 mov     ecx, [ebp+dwInitParam]
.text$mn:00004AC7                 mov     edx, [ecx+8]
.text$mn:00004ACA                 push    edx             ; hWndParent
.text$mn:00004ACB                 mov     eax, [ebp+hDialogTemplate]
.text$mn:00004ACE                 push    eax             ; hDialogTemplate
.text$mn:00004ACF                 mov     ecx, [ebp+dwInitParam]
.text$mn:00004AD2                 mov     edx, [ecx+4]
.text$mn:00004AD5                 push    edx             ; hInstance
.text$mn:00004AD6                 call    dword ptr ds:__imp__DialogBoxIndirectParamW@20 ; DialogBoxIndirectParamW(x,x,x,x,x)
.text$mn:00004ADC                 mov     [ebp+var_10], eax
.text$mn:00004ADF                 mov     eax, [ebp+hMem]
.text$mn:00004AE2                 push    eax             ; hMem
.text$mn:00004AE3                 call    dword ptr ds:__imp__GlobalFree@4 ; GlobalFree(x)
.text$mn:00004AE9                 mov     eax, [ebp+var_10]
.text$mn:00004AEC                 jmp     short loc_4B10
.text$mn:00004AEE ; ---------------------------------------------------------------------------
.text$mn:00004AEE
.text$mn:00004AEE loc_4AEE:                               ; CODE XREF: FileRelocalizerDlg::doDialog(wchar_t const *,bool)+1Ej
.text$mn:00004AEE                 mov     ecx, [ebp+dwInitParam]
.text$mn:00004AF1                 push    ecx             ; dwInitParam
.text$mn:00004AF2                 push    offset ?dlgProc@StaticDialog@@KGHPAUHWND__@@IIJ@Z ; lpDialogFunc
.text$mn:00004AF7                 mov     edx, [ebp+dwInitParam]
.text$mn:00004AFA                 mov     eax, [edx+8]
.text$mn:00004AFD                 push    eax             ; hWndParent
.text$mn:00004AFE                 push    (offset $SG126965+90h) ; lpTemplateName
.text$mn:00004B03                 mov     ecx, [ebp+dwInitParam]
.text$mn:00004B06                 mov     edx, [ecx+4]
.text$mn:00004B09                 push    edx             ; hInstance
.text$mn:00004B0A                 call    dword ptr ds:__imp__DialogBoxParamW@20 ; DialogBoxParamW(x,x,x,x,x)
.text$mn:00004B10
.text$mn:00004B10 loc_4B10:                               ; CODE XREF: FileRelocalizerDlg::doDialog(wchar_t const *,bool)+6Cj
.text$mn:00004B10                 mov     esp, ebp
.text$mn:00004B12                 pop     ebp
.text$mn:00004B13                 retn    8
.text$mn:00004B13 ?doDialog@FileRelocalizerDlg@@QAEHPB_W_N@Z endp
.text$mn:00004B13
.text$mn:00004B13 ; ---------------------------------------------------------------------------
.text$mn:00004B16                 align 10h
.text$mn:00004B20
.text$mn:00004B20 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B20
.text$mn:00004B20 ; Attributes: bp-based frame
.text$mn:00004B20
.text$mn:00004B20 ; int __stdcall FileRelocalizerDlg::run_dlgProc(FileRelocalizerDlg *this, unsigned int, unsigned int, __int32)
.text$mn:00004B20                 public ?run_dlgProc@FileRelocalizerDlg@@MAGHIIJ@Z
.text$mn:00004B20 ?run_dlgProc@FileRelocalizerDlg@@MAGHIIJ@Z proc near
.text$mn:00004B20                                         ; DATA XREF: .rdata:0000D278o
.text$mn:00004B20
.text$mn:00004B20 var_214         = dword ptr -214h
.text$mn:00004B20 var_210         = dword ptr -210h
.text$mn:00004B20 String          = word ptr -20Ch
.text$mn:00004B20 var_4           = dword ptr -4
.text$mn:00004B20 this            = dword ptr  8
.text$mn:00004B20 arg_4           = dword ptr  0Ch
.text$mn:00004B20 arg_8           = dword ptr  10h
.text$mn:00004B20
.text$mn:00004B20                 push    ebp
.text$mn:00004B21                 mov     ebp, esp
.text$mn:00004B23                 sub     esp, 214h
.text$mn:00004B29                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004B2E                 xor     eax, ebp
.text$mn:00004B30                 mov     [ebp+var_4], eax
.text$mn:00004B33                 mov     eax, [ebp+arg_4]
.text$mn:00004B36                 mov     [ebp+var_214], eax
.text$mn:00004B3C                 cmp     [ebp+var_214], 110h
.text$mn:00004B46                 jz      short loc_4B59
.text$mn:00004B48                 cmp     [ebp+var_214], 111h
.text$mn:00004B52                 jz      short loc_4B86
.text$mn:00004B54                 jmp     loc_4C03
.text$mn:00004B59 ; ---------------------------------------------------------------------------
.text$mn:00004B59
.text$mn:00004B59 loc_4B59:                               ; CODE XREF: FileRelocalizerDlg::run_dlgProc(uint,uint,long)+26j
.text$mn:00004B59                 mov     ecx, [ebp+this] ; this
.text$mn:00004B5C                 call    ?goToCenter@StaticDialog@@QAEXXZ ; StaticDialog::goToCenter(void)
.text$mn:00004B61                 mov     ecx, [ebp+this]
.text$mn:00004B64                 add     ecx, 20h ; ' '
.text$mn:00004B67                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00004B6C                 push    eax             ; lpString
.text$mn:00004B6D                 push    0C81h           ; nIDDlgItem
.text$mn:00004B72                 mov     ecx, [ebp+this]
.text$mn:00004B75                 mov     edx, [ecx+0Ch]
.text$mn:00004B78                 push    edx             ; hDlg
.text$mn:00004B79                 call    dword ptr ds:__imp__SetDlgItemTextW@12 ; SetDlgItemTextW(x,x,x)
.text$mn:00004B7F                 mov     eax, 1
.text$mn:00004B84                 jmp     short loc_4C05
.text$mn:00004B86 ; ---------------------------------------------------------------------------
.text$mn:00004B86
.text$mn:00004B86 loc_4B86:                               ; CODE XREF: FileRelocalizerDlg::run_dlgProc(uint,uint,long)+32j
.text$mn:00004B86                 mov     eax, [ebp+arg_8]
.text$mn:00004B89                 mov     [ebp+var_210], eax
.text$mn:00004B8F                 cmp     [ebp+var_210], 1
.text$mn:00004B96                 jz      short loc_4BA3
.text$mn:00004B98                 cmp     [ebp+var_210], 2
.text$mn:00004B9F                 jz      short loc_4BE9
.text$mn:00004BA1                 jmp     short loc_4BFF
.text$mn:00004BA3 ; ---------------------------------------------------------------------------
.text$mn:00004BA3
.text$mn:00004BA3 loc_4BA3:                               ; CODE XREF: FileRelocalizerDlg::run_dlgProc(uint,uint,long)+76j
.text$mn:00004BA3                 push    104h            ; cchMax
.text$mn:00004BA8                 lea     ecx, [ebp+String]
.text$mn:00004BAE                 push    ecx             ; lpString
.text$mn:00004BAF                 push    0C81h           ; nIDDlgItem
.text$mn:00004BB4                 mov     edx, [ebp+this]
.text$mn:00004BB7                 mov     eax, [edx+0Ch]
.text$mn:00004BBA                 push    eax             ; hDlg
.text$mn:00004BBB                 call    dword ptr ds:__imp__GetDlgItemTextW@16 ; GetDlgItemTextW(x,x,x,x)
.text$mn:00004BC1                 lea     ecx, [ebp+String]
.text$mn:00004BC7                 push    ecx             ; Str
.text$mn:00004BC8                 mov     ecx, [ebp+this]
.text$mn:00004BCB                 add     ecx, 20h ; ' '
.text$mn:00004BCE                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00004BD3                 push    0               ; nResult
.text$mn:00004BD5                 mov     edx, [ebp+this]
.text$mn:00004BD8                 mov     eax, [edx+0Ch]
.text$mn:00004BDB                 push    eax             ; hDlg
.text$mn:00004BDC                 call    dword ptr ds:__imp__EndDialog@8 ; EndDialog(x,x)
.text$mn:00004BE2                 mov     eax, 1
.text$mn:00004BE7                 jmp     short loc_4C05
.text$mn:00004BE9 ; ---------------------------------------------------------------------------
.text$mn:00004BE9
.text$mn:00004BE9 loc_4BE9:                               ; CODE XREF: FileRelocalizerDlg::run_dlgProc(uint,uint,long)+7Fj
.text$mn:00004BE9                 push    0FFFFFFFFh      ; nResult
.text$mn:00004BEB                 mov     ecx, [ebp+this]
.text$mn:00004BEE                 mov     edx, [ecx+0Ch]
.text$mn:00004BF1                 push    edx             ; hDlg
.text$mn:00004BF2                 call    dword ptr ds:__imp__EndDialog@8 ; EndDialog(x,x)
.text$mn:00004BF8                 mov     eax, 1
.text$mn:00004BFD                 jmp     short loc_4C05
.text$mn:00004BFF ; ---------------------------------------------------------------------------
.text$mn:00004BFF
.text$mn:00004BFF loc_4BFF:                               ; CODE XREF: FileRelocalizerDlg::run_dlgProc(uint,uint,long)+81j
.text$mn:00004BFF                 xor     eax, eax
.text$mn:00004C01                 jmp     short loc_4C05
.text$mn:00004C03 ; ---------------------------------------------------------------------------
.text$mn:00004C03
.text$mn:00004C03 loc_4C03:                               ; CODE XREF: FileRelocalizerDlg::run_dlgProc(uint,uint,long)+34j
.text$mn:00004C03                 xor     eax, eax
.text$mn:00004C05
.text$mn:00004C05 loc_4C05:                               ; CODE XREF: FileRelocalizerDlg::run_dlgProc(uint,uint,long)+64j
.text$mn:00004C05                                         ; FileRelocalizerDlg::run_dlgProc(uint,uint,long)+C7j ...
.text$mn:00004C05                 mov     ecx, [ebp+var_4]
.text$mn:00004C08                 xor     ecx, ebp
.text$mn:00004C0A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00004C0F                 mov     esp, ebp
.text$mn:00004C11                 pop     ebp
.text$mn:00004C12                 retn    10h
.text$mn:00004C12 ?run_dlgProc@FileRelocalizerDlg@@MAGHIIJ@Z endp
.text$mn:00004C12
.text$mn:00004C12 ; ---------------------------------------------------------------------------
.text$mn:00004C15                 align 4
.text$mn:00004C15 _text$mn        ends
.text$mn:00004C15
.text$x:00004C18 ; ===========================================================================
.text$x:00004C18
.text$x:00004C18 ; Segment type: Pure code
.text$x:00004C18 ; Segment permissions: Read/Execute
.text$x:00004C18 _text$x         segment para public 'CODE' use32
.text$x:00004C18                 assume cs:_text$x
.text$x:00004C18                 ;org 4C18h
.text$x:00004C18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004C18
.text$x:00004C18 ; =============== S U B R O U T I N E =======================================
.text$x:00004C18
.text$x:00004C18
.text$x:00004C18 __unwindfunclet$?newWorkSpace@ProjectPanel@@QAEXXZ$0 proc near
.text$x:00004C18                                         ; DATA XREF: .xdata$x:0000C6FCo
.text$x:00004C18                 lea     ecx, [ebp-2Ch]
.text$x:00004C1B                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004C1B __unwindfunclet$?newWorkSpace@ProjectPanel@@QAEXXZ$0 endp
.text$x:00004C1B
.text$x:00004C20
.text$x:00004C20 ; =============== S U B R O U T I N E =======================================
.text$x:00004C20
.text$x:00004C20
.text$x:00004C20 __ehhandler$?newWorkSpace@ProjectPanel@@QAEXXZ proc near
.text$x:00004C20                                         ; DATA XREF: ProjectPanel::newWorkSpace(void)+5o
.text$x:00004C20
.text$x:00004C20 arg_4           = dword ptr  8
.text$x:00004C20
.text$x:00004C20                 mov     edx, [esp+arg_4]
.text$x:00004C24                 lea     eax, [edx+0Ch]
.text$x:00004C27                 mov     ecx, [edx-2Ch]
.text$x:00004C2A                 xor     ecx, eax
.text$x:00004C2C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004C31                 mov     ecx, [edx-4]
.text$x:00004C34                 xor     ecx, eax
.text$x:00004C36                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004C3B                 mov     eax, offset __ehfuncinfo$?newWorkSpace@ProjectPanel@@QAEXXZ
.text$x:00004C40                 jmp     ___CxxFrameHandler3
.text$x:00004C40 __ehhandler$?newWorkSpace@ProjectPanel@@QAEXXZ endp
.text$x:00004C40
.text$x:00004C45
.text$x:00004C45 ; =============== S U B R O U T I N E =======================================
.text$x:00004C45
.text$x:00004C45
.text$x:00004C45 __unwindfunclet$?openWorkSpace@ProjectPanel@@QAE_NPB_W@Z$0 proc near
.text$x:00004C45                                         ; DATA XREF: .xdata$x:0000C714o
.text$x:00004C45                 mov     eax, [ebp-4Ch]
.text$x:00004C48                 push    eax             ; void *
.text$x:00004C49                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00004C4E                 pop     ecx
.text$x:00004C4F                 retn
.text$x:00004C4F __unwindfunclet$?openWorkSpace@ProjectPanel@@QAE_NPB_W@Z$0 endp
.text$x:00004C4F
.text$x:00004C50
.text$x:00004C50 ; =============== S U B R O U T I N E =======================================
.text$x:00004C50
.text$x:00004C50
.text$x:00004C50 __unwindfunclet$?openWorkSpace@ProjectPanel@@QAE_NPB_W@Z$1 proc near
.text$x:00004C50                                         ; DATA XREF: .xdata$x:0000C71Co
.text$x:00004C50                 lea     ecx, [ebp-2Ch]
.text$x:00004C53                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004C53 __unwindfunclet$?openWorkSpace@ProjectPanel@@QAE_NPB_W@Z$1 endp
.text$x:00004C53
.text$x:00004C58
.text$x:00004C58 ; =============== S U B R O U T I N E =======================================
.text$x:00004C58
.text$x:00004C58
.text$x:00004C58 __ehhandler$?openWorkSpace@ProjectPanel@@QAE_NPB_W@Z proc near
.text$x:00004C58                                         ; DATA XREF: ProjectPanel::openWorkSpace(wchar_t const *)+5o
.text$x:00004C58
.text$x:00004C58 arg_4           = dword ptr  8
.text$x:00004C58
.text$x:00004C58                 mov     edx, [esp+arg_4]
.text$x:00004C5C                 lea     eax, [edx+0Ch]
.text$x:00004C5F                 mov     ecx, [edx-5Ch]
.text$x:00004C62                 xor     ecx, eax
.text$x:00004C64                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004C69                 mov     ecx, [edx-4]
.text$x:00004C6C                 xor     ecx, eax
.text$x:00004C6E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004C73                 mov     eax, offset __ehfuncinfo$?openWorkSpace@ProjectPanel@@QAE_NPB_W@Z
.text$x:00004C78                 jmp     ___CxxFrameHandler3
.text$x:00004C78 __ehhandler$?openWorkSpace@ProjectPanel@@QAE_NPB_W@Z endp
.text$x:00004C78
.text$x:00004C7D
.text$x:00004C7D ; =============== S U B R O U T I N E =======================================
.text$x:00004C7D
.text$x:00004C7D
.text$x:00004C7D __unwindfunclet$?saveWorkSpaceAs@ProjectPanel@@QAE_N_N@Z$0 proc near
.text$x:00004C7D                                         ; DATA XREF: .xdata$x:0000C6F4o
.text$x:00004C7D                 lea     ecx, [ebp-10CCh] ; this
.text$x:00004C83                 jmp     ??1FileDialog@@QAE@XZ ; FileDialog::~FileDialog(void)
.text$x:00004C83 __unwindfunclet$?saveWorkSpaceAs@ProjectPanel@@QAE_N_N@Z$0 endp
.text$x:00004C83
.text$x:00004C88
.text$x:00004C88 ; =============== S U B R O U T I N E =======================================
.text$x:00004C88
.text$x:00004C88
.text$x:00004C88 __ehhandler$?saveWorkSpaceAs@ProjectPanel@@QAE_N_N@Z proc near
.text$x:00004C88                                         ; DATA XREF: ProjectPanel::saveWorkSpaceAs(bool)+5o
.text$x:00004C88
.text$x:00004C88 arg_4           = dword ptr  8
.text$x:00004C88
.text$x:00004C88                 mov     edx, [esp+arg_4]
.text$x:00004C8C                 lea     eax, [edx+0Ch]
.text$x:00004C8F                 mov     ecx, [edx-10D0h]
.text$x:00004C95                 xor     ecx, eax
.text$x:00004C97                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004C9C                 mov     ecx, [edx-4]
.text$x:00004C9F                 xor     ecx, eax
.text$x:00004CA1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004CA6                 mov     eax, offset __ehfuncinfo$?saveWorkSpaceAs@ProjectPanel@@QAE_N_N@Z
.text$x:00004CAB                 jmp     ___CxxFrameHandler3
.text$x:00004CAB __ehhandler$?saveWorkSpaceAs@ProjectPanel@@QAE_N_N@Z endp
.text$x:00004CAB
.text$x:00004CB0
.text$x:00004CB0 ; =============== S U B R O U T I N E =======================================
.text$x:00004CB0
.text$x:00004CB0
.text$x:00004CB0 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$0 proc near
.text$x:00004CB0                                         ; DATA XREF: .xdata$x:0000C9B4o
.text$x:00004CB0                 lea     ecx, [ebp-128h]
.text$x:00004CB6                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004CB6 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$0 endp
.text$x:00004CB6
.text$x:00004CBB
.text$x:00004CBB ; =============== S U B R O U T I N E =======================================
.text$x:00004CBB
.text$x:00004CBB
.text$x:00004CBB __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$1 proc near
.text$x:00004CBB                                         ; DATA XREF: .xdata$x:0000C9BCo
.text$x:00004CBB                 lea     ecx, [ebp-1B4h]
.text$x:00004CC1                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004CC1 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$1 endp
.text$x:00004CC1
.text$x:00004CC6
.text$x:00004CC6 ; =============== S U B R O U T I N E =======================================
.text$x:00004CC6
.text$x:00004CC6
.text$x:00004CC6 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$2 proc near
.text$x:00004CC6                                         ; DATA XREF: .xdata$x:0000C9C4o
.text$x:00004CC6                 lea     ecx, [ebp-0F0h]
.text$x:00004CCC                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004CCC __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$2 endp
.text$x:00004CCC
.text$x:00004CD1
.text$x:00004CD1 ; =============== S U B R O U T I N E =======================================
.text$x:00004CD1
.text$x:00004CD1
.text$x:00004CD1 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$3 proc near
.text$x:00004CD1                                         ; DATA XREF: .xdata$x:0000C9CCo
.text$x:00004CD1                 lea     ecx, [ebp-17Ch]
.text$x:00004CD7                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004CD7 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$3 endp
.text$x:00004CD7
.text$x:00004CDC
.text$x:00004CDC ; =============== S U B R O U T I N E =======================================
.text$x:00004CDC
.text$x:00004CDC
.text$x:00004CDC __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$4 proc near
.text$x:00004CDC                                         ; DATA XREF: .xdata$x:0000C9D4o
.text$x:00004CDC                 lea     ecx, [ebp-144h]
.text$x:00004CE2                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004CE2 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$4 endp
.text$x:00004CE2
.text$x:00004CE7
.text$x:00004CE7 ; =============== S U B R O U T I N E =======================================
.text$x:00004CE7
.text$x:00004CE7
.text$x:00004CE7 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$5 proc near
.text$x:00004CE7                                         ; DATA XREF: .xdata$x:0000C9DCo
.text$x:00004CE7                 lea     ecx, [ebp-10Ch]
.text$x:00004CED                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004CED __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$5 endp
.text$x:00004CED
.text$x:00004CF2
.text$x:00004CF2 ; =============== S U B R O U T I N E =======================================
.text$x:00004CF2
.text$x:00004CF2
.text$x:00004CF2 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$6 proc near
.text$x:00004CF2                                         ; DATA XREF: .xdata$x:0000C9E4o
.text$x:00004CF2                 lea     ecx, [ebp-160h]
.text$x:00004CF8                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004CF8 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$6 endp
.text$x:00004CF8
.text$x:00004CFD
.text$x:00004CFD ; =============== S U B R O U T I N E =======================================
.text$x:00004CFD
.text$x:00004CFD
.text$x:00004CFD __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$7 proc near
.text$x:00004CFD                                         ; DATA XREF: .xdata$x:0000C9ECo
.text$x:00004CFD                 lea     ecx, [ebp-64h]
.text$x:00004D00                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004D00 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$7 endp
.text$x:00004D00
.text$x:00004D05
.text$x:00004D05 ; =============== S U B R O U T I N E =======================================
.text$x:00004D05
.text$x:00004D05
.text$x:00004D05 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$8 proc near
.text$x:00004D05                                         ; DATA XREF: .xdata$x:0000C9F4o
.text$x:00004D05                 lea     ecx, [ebp-80h]
.text$x:00004D08                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004D08 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$8 endp
.text$x:00004D08
.text$x:00004D0D
.text$x:00004D0D ; =============== S U B R O U T I N E =======================================
.text$x:00004D0D
.text$x:00004D0D
.text$x:00004D0D __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$9 proc near
.text$x:00004D0D                                         ; DATA XREF: .xdata$x:0000C9FCo
.text$x:00004D0D                 lea     ecx, [ebp-48h]
.text$x:00004D10                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004D10 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$9 endp
.text$x:00004D10
.text$x:00004D15
.text$x:00004D15 ; =============== S U B R O U T I N E =======================================
.text$x:00004D15
.text$x:00004D15
.text$x:00004D15 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$10 proc near
.text$x:00004D15                                         ; DATA XREF: .xdata$x:0000CA04o
.text$x:00004D15                 lea     ecx, [ebp-9Ch]
.text$x:00004D1B                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004D1B __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$10 endp
.text$x:00004D1B
.text$x:00004D20
.text$x:00004D20 ; =============== S U B R O U T I N E =======================================
.text$x:00004D20
.text$x:00004D20
.text$x:00004D20 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$11 proc near
.text$x:00004D20                                         ; DATA XREF: .xdata$x:0000CA0Co
.text$x:00004D20                 lea     ecx, [ebp-0D4h]
.text$x:00004D26                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004D26 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$11 endp
.text$x:00004D26
.text$x:00004D2B
.text$x:00004D2B ; =============== S U B R O U T I N E =======================================
.text$x:00004D2B
.text$x:00004D2B
.text$x:00004D2B __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$12 proc near
.text$x:00004D2B                                         ; DATA XREF: .xdata$x:0000CA14o
.text$x:00004D2B                 lea     ecx, [ebp-0B8h]
.text$x:00004D31                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004D31 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$12 endp
.text$x:00004D31
.text$x:00004D36
.text$x:00004D36 ; =============== S U B R O U T I N E =======================================
.text$x:00004D36
.text$x:00004D36
.text$x:00004D36 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$13 proc near
.text$x:00004D36                                         ; DATA XREF: .xdata$x:0000CA1Co
.text$x:00004D36                 lea     ecx, [ebp-2Ch]
.text$x:00004D39                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004D39 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$13 endp
.text$x:00004D39
.text$x:00004D3E
.text$x:00004D3E ; =============== S U B R O U T I N E =======================================
.text$x:00004D3E
.text$x:00004D3E
.text$x:00004D3E __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$14 proc near
.text$x:00004D3E                                         ; DATA XREF: .xdata$x:0000CA24o
.text$x:00004D3E                 lea     ecx, [ebp-1D0h]
.text$x:00004D44                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004D44 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$14 endp
.text$x:00004D44
.text$x:00004D49
.text$x:00004D49 ; =============== S U B R O U T I N E =======================================
.text$x:00004D49
.text$x:00004D49
.text$x:00004D49 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$15 proc near
.text$x:00004D49                                         ; DATA XREF: .xdata$x:0000CA2Co
.text$x:00004D49                 lea     ecx, [ebp-240h]
.text$x:00004D4F                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004D4F __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$15 endp
.text$x:00004D4F
.text$x:00004D54
.text$x:00004D54 ; =============== S U B R O U T I N E =======================================
.text$x:00004D54
.text$x:00004D54
.text$x:00004D54 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$16 proc near
.text$x:00004D54                                         ; DATA XREF: .xdata$x:0000CA34o
.text$x:00004D54                 lea     ecx, [ebp-2B0h]
.text$x:00004D5A                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004D5A __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$16 endp
.text$x:00004D5A
.text$x:00004D5F
.text$x:00004D5F ; =============== S U B R O U T I N E =======================================
.text$x:00004D5F
.text$x:00004D5F
.text$x:00004D5F __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$17 proc near
.text$x:00004D5F                                         ; DATA XREF: .xdata$x:0000CA3Co
.text$x:00004D5F                 lea     ecx, [ebp-278h]
.text$x:00004D65                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004D65 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$17 endp
.text$x:00004D65
.text$x:00004D6A
.text$x:00004D6A ; =============== S U B R O U T I N E =======================================
.text$x:00004D6A
.text$x:00004D6A
.text$x:00004D6A __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$18 proc near
.text$x:00004D6A                                         ; DATA XREF: .xdata$x:0000CA44o
.text$x:00004D6A                 lea     ecx, [ebp-1ECh]
.text$x:00004D70                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004D70 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$18 endp
.text$x:00004D70
.text$x:00004D75
.text$x:00004D75 ; =============== S U B R O U T I N E =======================================
.text$x:00004D75
.text$x:00004D75
.text$x:00004D75 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$19 proc near
.text$x:00004D75                                         ; DATA XREF: .xdata$x:0000CA4Co
.text$x:00004D75                 lea     ecx, [ebp-224h]
.text$x:00004D7B                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004D7B __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$19 endp
.text$x:00004D7B
.text$x:00004D80
.text$x:00004D80 ; =============== S U B R O U T I N E =======================================
.text$x:00004D80
.text$x:00004D80
.text$x:00004D80 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$20 proc near
.text$x:00004D80                                         ; DATA XREF: .xdata$x:0000CA54o
.text$x:00004D80                 lea     ecx, [ebp-25Ch]
.text$x:00004D86                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004D86 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$20 endp
.text$x:00004D86
.text$x:00004D8B
.text$x:00004D8B ; =============== S U B R O U T I N E =======================================
.text$x:00004D8B
.text$x:00004D8B
.text$x:00004D8B __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$21 proc near
.text$x:00004D8B                                         ; DATA XREF: .xdata$x:0000CA5Co
.text$x:00004D8B                 lea     ecx, [ebp-294h]
.text$x:00004D91                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004D91 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$21 endp
.text$x:00004D91
.text$x:00004D96
.text$x:00004D96 ; =============== S U B R O U T I N E =======================================
.text$x:00004D96
.text$x:00004D96
.text$x:00004D96 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$22 proc near
.text$x:00004D96                                         ; DATA XREF: .xdata$x:0000CA64o
.text$x:00004D96                 lea     ecx, [ebp-2CCh]
.text$x:00004D9C                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004D9C __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$22 endp
.text$x:00004D9C
.text$x:00004DA1
.text$x:00004DA1 ; =============== S U B R O U T I N E =======================================
.text$x:00004DA1
.text$x:00004DA1
.text$x:00004DA1 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$23 proc near
.text$x:00004DA1                                         ; DATA XREF: .xdata$x:0000CA6Co
.text$x:00004DA1                 lea     ecx, [ebp-2E8h]
.text$x:00004DA7                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004DA7 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$23 endp
.text$x:00004DA7
.text$x:00004DAC
.text$x:00004DAC ; =============== S U B R O U T I N E =======================================
.text$x:00004DAC
.text$x:00004DAC
.text$x:00004DAC __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$24 proc near
.text$x:00004DAC                                         ; DATA XREF: .xdata$x:0000CA74o
.text$x:00004DAC                 lea     ecx, [ebp-208h]
.text$x:00004DB2                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004DB2 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$24 endp
.text$x:00004DB2
.text$x:00004DB7
.text$x:00004DB7 ; =============== S U B R O U T I N E =======================================
.text$x:00004DB7
.text$x:00004DB7
.text$x:00004DB7 __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$25 proc near
.text$x:00004DB7                                         ; DATA XREF: .xdata$x:0000CA7Co
.text$x:00004DB7                 lea     ecx, [ebp-198h]
.text$x:00004DBD                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004DBD __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$25 endp
.text$x:00004DBD
.text$x:00004DC2
.text$x:00004DC2 ; =============== S U B R O U T I N E =======================================
.text$x:00004DC2
.text$x:00004DC2
.text$x:00004DC2 __ehhandler$?initMenus@ProjectPanel@@IAEXXZ proc near
.text$x:00004DC2                                         ; DATA XREF: ProjectPanel::initMenus(void)+5o
.text$x:00004DC2
.text$x:00004DC2 arg_4           = dword ptr  8
.text$x:00004DC2
.text$x:00004DC2                 mov     edx, [esp+arg_4]
.text$x:00004DC6                 lea     eax, [edx+0Ch]
.text$x:00004DC9                 mov     ecx, [edx-340h]
.text$x:00004DCF                 xor     ecx, eax
.text$x:00004DD1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004DD6                 mov     ecx, [edx-4]
.text$x:00004DD9                 xor     ecx, eax
.text$x:00004DDB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004DE0                 mov     eax, offset __ehfuncinfo$?initMenus@ProjectPanel@@IAEXXZ
.text$x:00004DE5                 jmp     ___CxxFrameHandler3
.text$x:00004DE5 __ehhandler$?initMenus@ProjectPanel@@IAEXXZ endp
.text$x:00004DE5
.text$x:00004DEA
.text$x:00004DEA ; =============== S U B R O U T I N E =======================================
.text$x:00004DEA
.text$x:00004DEA
.text$x:00004DEA __unwindfunclet$?addFiles@ProjectPanel@@IAEXPAU_TREEITEM@@@Z$0 proc near
.text$x:00004DEA                                         ; DATA XREF: .xdata$x:0000C6ECo
.text$x:00004DEA                 lea     ecx, [ebp-10CCh] ; this
.text$x:00004DF0                 jmp     ??1FileDialog@@QAE@XZ ; FileDialog::~FileDialog(void)
.text$x:00004DF0 __unwindfunclet$?addFiles@ProjectPanel@@IAEXPAU_TREEITEM@@@Z$0 endp
.text$x:00004DF0
.text$x:00004DF5
.text$x:00004DF5 ; =============== S U B R O U T I N E =======================================
.text$x:00004DF5
.text$x:00004DF5
.text$x:00004DF5 __ehhandler$?addFiles@ProjectPanel@@IAEXPAU_TREEITEM@@@Z proc near
.text$x:00004DF5                                         ; DATA XREF: ProjectPanel::addFiles(_TREEITEM *)+5o
.text$x:00004DF5
.text$x:00004DF5 arg_4           = dword ptr  8
.text$x:00004DF5
.text$x:00004DF5                 mov     edx, [esp+arg_4]
.text$x:00004DF9                 lea     eax, [edx+0Ch]
.text$x:00004DFC                 mov     ecx, [edx-10D8h]
.text$x:00004E02                 xor     ecx, eax
.text$x:00004E04                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004E09                 mov     ecx, [edx-4]
.text$x:00004E0C                 xor     ecx, eax
.text$x:00004E0E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004E13                 mov     eax, offset __ehfuncinfo$?addFiles@ProjectPanel@@IAEXPAU_TREEITEM@@@Z
.text$x:00004E18                 jmp     ___CxxFrameHandler3
.text$x:00004E18 __ehhandler$?addFiles@ProjectPanel@@IAEXPAU_TREEITEM@@@Z endp
.text$x:00004E18
.text$x:00004E1D
.text$x:00004E1D ; =============== S U B R O U T I N E =======================================
.text$x:00004E1D
.text$x:00004E1D
.text$x:00004E1D __unwindfunclet$?addFilesFromDirectory@ProjectPanel@@IAEXPAU_TREEITEM@@@Z$0 proc near
.text$x:00004E1D                                         ; DATA XREF: .xdata$x:0000C754o
.text$x:00004E1D                 lea     ecx, [ebp-234h]
.text$x:00004E23                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004E23 __unwindfunclet$?addFilesFromDirectory@ProjectPanel@@IAEXPAU_TREEITEM@@@Z$0 endp
.text$x:00004E23
.text$x:00004E28
.text$x:00004E28 ; =============== S U B R O U T I N E =======================================
.text$x:00004E28
.text$x:00004E28
.text$x:00004E28 __unwindfunclet$?addFilesFromDirectory@ProjectPanel@@IAEXPAU_TREEITEM@@@Z$1 proc near
.text$x:00004E28                                         ; DATA XREF: .xdata$x:0000C75Co
.text$x:00004E28                 lea     ecx, [ebp-250h]
.text$x:00004E2E                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004E2E __unwindfunclet$?addFilesFromDirectory@ProjectPanel@@IAEXPAU_TREEITEM@@@Z$1 endp
.text$x:00004E2E
.text$x:00004E33
.text$x:00004E33 ; =============== S U B R O U T I N E =======================================
.text$x:00004E33
.text$x:00004E33
.text$x:00004E33 __unwindfunclet$?addFilesFromDirectory@ProjectPanel@@IAEXPAU_TREEITEM@@@Z$2 proc near
.text$x:00004E33                                         ; DATA XREF: .xdata$x:0000C764o
.text$x:00004E33                 lea     ecx, [ebp-26Ch]
.text$x:00004E39                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004E39 __unwindfunclet$?addFilesFromDirectory@ProjectPanel@@IAEXPAU_TREEITEM@@@Z$2 endp
.text$x:00004E39
.text$x:00004E3E
.text$x:00004E3E ; =============== S U B R O U T I N E =======================================
.text$x:00004E3E
.text$x:00004E3E
.text$x:00004E3E __ehhandler$?addFilesFromDirectory@ProjectPanel@@IAEXPAU_TREEITEM@@@Z proc near
.text$x:00004E3E                                         ; DATA XREF: ProjectPanel::addFilesFromDirectory(_TREEITEM *)+5o
.text$x:00004E3E
.text$x:00004E3E arg_4           = dword ptr  8
.text$x:00004E3E
.text$x:00004E3E                 mov     edx, [esp+arg_4]
.text$x:00004E42                 lea     eax, [edx+0Ch]
.text$x:00004E45                 mov     ecx, [edx-278h]
.text$x:00004E4B                 xor     ecx, eax
.text$x:00004E4D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004E52                 mov     ecx, [edx-4]
.text$x:00004E55                 xor     ecx, eax
.text$x:00004E57                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004E5C                 mov     eax, offset __ehfuncinfo$?addFilesFromDirectory@ProjectPanel@@IAEXPAU_TREEITEM@@@Z
.text$x:00004E61                 jmp     ___CxxFrameHandler3
.text$x:00004E61 __ehhandler$?addFilesFromDirectory@ProjectPanel@@IAEXPAU_TREEITEM@@@Z endp
.text$x:00004E61
.text$x:00004E66
.text$x:00004E66 ; =============== S U B R O U T I N E =======================================
.text$x:00004E66
.text$x:00004E66
.text$x:00004E66 __unwindfunclet$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z$0 proc near
.text$x:00004E66                                         ; DATA XREF: .xdata$x:0000C98Co
.text$x:00004E66                 lea     ecx, [ebp-48h]
.text$x:00004E69                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004E69 __unwindfunclet$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z$0 endp
.text$x:00004E69
.text$x:00004E6E
.text$x:00004E6E ; =============== S U B R O U T I N E =======================================
.text$x:00004E6E
.text$x:00004E6E
.text$x:00004E6E __unwindfunclet$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z$1 proc near
.text$x:00004E6E                                         ; DATA XREF: .xdata$x:0000C994o
.text$x:00004E6E                 lea     ecx, [ebp-2F8h]
.text$x:00004E74                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00004E74 __unwindfunclet$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z$1 endp
.text$x:00004E74
.text$x:00004E79
.text$x:00004E79 ; =============== S U B R O U T I N E =======================================
.text$x:00004E79
.text$x:00004E79
.text$x:00004E79 __unwindfunclet$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z$2 proc near
.text$x:00004E79                                         ; DATA XREF: .xdata$x:0000C99Co
.text$x:00004E79                 lea     ecx, [ebp-2Ch]
.text$x:00004E7C                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004E7C __unwindfunclet$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z$2 endp
.text$x:00004E7C
.text$x:00004E81
.text$x:00004E81 ; =============== S U B R O U T I N E =======================================
.text$x:00004E81
.text$x:00004E81
.text$x:00004E81 __unwindfunclet$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z$3 proc near
.text$x:00004E81                                         ; DATA XREF: .xdata$x:0000C9A4o
.text$x:00004E81                 lea     ecx, [ebp-80h]
.text$x:00004E84                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004E84 __unwindfunclet$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z$3 endp
.text$x:00004E84
.text$x:00004E89
.text$x:00004E89 ; =============== S U B R O U T I N E =======================================
.text$x:00004E89
.text$x:00004E89
.text$x:00004E89 __unwindfunclet$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z$4 proc near
.text$x:00004E89                                         ; DATA XREF: .xdata$x:0000C9ACo
.text$x:00004E89                 lea     ecx, [ebp-64h]
.text$x:00004E8C                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004E8C __unwindfunclet$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z$4 endp
.text$x:00004E8C
.text$x:00004E91
.text$x:00004E91 ; =============== S U B R O U T I N E =======================================
.text$x:00004E91
.text$x:00004E91
.text$x:00004E91 __ehhandler$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z proc near
.text$x:00004E91                                         ; DATA XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+5o
.text$x:00004E91
.text$x:00004E91 arg_4           = dword ptr  8
.text$x:00004E91
.text$x:00004E91                 mov     edx, [esp+arg_4]
.text$x:00004E95                 lea     eax, [edx+0Ch]
.text$x:00004E98                 mov     ecx, [edx-2F0h]
.text$x:00004E9E                 xor     ecx, eax
.text$x:00004EA0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004EA5                 mov     ecx, [edx-4]
.text$x:00004EA8                 xor     ecx, eax
.text$x:00004EAA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004EAF                 mov     eax, offset __ehfuncinfo$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z
.text$x:00004EB4                 jmp     ___CxxFrameHandler3
.text$x:00004EB4 __ehhandler$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z endp
.text$x:00004EB4
.text$x:00004EB9
.text$x:00004EB9 ; =============== S U B R O U T I N E =======================================
.text$x:00004EB9
.text$x:00004EB9
.text$x:00004EB9 __unwindfunclet$?writeWorkSpace@ProjectPanel@@IAE_NPA_W@Z$0 proc near
.text$x:00004EB9                                         ; DATA XREF: .xdata$x:0000C73Co
.text$x:00004EB9                 lea     ecx, [ebp-28Ch] ; this
.text$x:00004EBF                 jmp     ??1TiXmlDocument@@UAE@XZ ; TiXmlDocument::~TiXmlDocument(void)
.text$x:00004EBF __unwindfunclet$?writeWorkSpace@ProjectPanel@@IAE_NPA_W@Z$0 endp
.text$x:00004EBF
.text$x:00004EC4
.text$x:00004EC4 ; =============== S U B R O U T I N E =======================================
.text$x:00004EC4
.text$x:00004EC4
.text$x:00004EC4 __unwindfunclet$?writeWorkSpace@ProjectPanel@@IAE_NPA_W@Z$1 proc near
.text$x:00004EC4                                         ; DATA XREF: .xdata$x:0000C744o
.text$x:00004EC4                 lea     ecx, [ebp-3B4h] ; this
.text$x:00004ECA                 jmp     ??1TiXmlElement@@UAE@XZ ; TiXmlElement::~TiXmlElement(void)
.text$x:00004ECA __unwindfunclet$?writeWorkSpace@ProjectPanel@@IAE_NPA_W@Z$1 endp
.text$x:00004ECA
.text$x:00004ECF
.text$x:00004ECF ; =============== S U B R O U T I N E =======================================
.text$x:00004ECF
.text$x:00004ECF
.text$x:00004ECF __unwindfunclet$?writeWorkSpace@ProjectPanel@@IAE_NPA_W@Z$2 proc near
.text$x:00004ECF                                         ; DATA XREF: .xdata$x:0000C74Co
.text$x:00004ECF                 lea     ecx, [ebp-320h] ; this
.text$x:00004ED5                 jmp     ??1TiXmlElement@@UAE@XZ ; TiXmlElement::~TiXmlElement(void)
.text$x:00004ED5 __unwindfunclet$?writeWorkSpace@ProjectPanel@@IAE_NPA_W@Z$2 endp
.text$x:00004ED5
.text$x:00004EDA
.text$x:00004EDA ; =============== S U B R O U T I N E =======================================
.text$x:00004EDA
.text$x:00004EDA
.text$x:00004EDA __ehhandler$?writeWorkSpace@ProjectPanel@@IAE_NPA_W@Z proc near
.text$x:00004EDA                                         ; DATA XREF: ProjectPanel::writeWorkSpace(wchar_t *)+5o
.text$x:00004EDA
.text$x:00004EDA arg_4           = dword ptr  8
.text$x:00004EDA
.text$x:00004EDA                 mov     edx, [esp+arg_4]
.text$x:00004EDE                 lea     eax, [edx+0Ch]
.text$x:00004EE1                 mov     ecx, [edx-404h]
.text$x:00004EE7                 xor     ecx, eax
.text$x:00004EE9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004EEE                 mov     ecx, [edx-4]
.text$x:00004EF1                 xor     ecx, eax
.text$x:00004EF3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004EF8                 mov     eax, offset __ehfuncinfo$?writeWorkSpace@ProjectPanel@@IAE_NPA_W@Z
.text$x:00004EFD                 jmp     ___CxxFrameHandler3
.text$x:00004EFD __ehhandler$?writeWorkSpace@ProjectPanel@@IAE_NPA_W@Z endp
.text$x:00004EFD
.text$x:00004F02
.text$x:00004F02 ; =============== S U B R O U T I N E =======================================
.text$x:00004F02
.text$x:00004F02
.text$x:00004F02 __unwindfunclet$?getRelativePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV23@PB_W@Z$0 proc near
.text$x:00004F02                                         ; DATA XREF: .xdata$x:0000C6E4o
.text$x:00004F02                 mov     eax, [ebp-21Ch]
.text$x:00004F08                 and     eax, 1
.text$x:00004F0B                 jz      locret_4F20
.text$x:00004F11                 and     dword ptr [ebp-21Ch], 0FFFFFFFEh
.text$x:00004F18                 mov     ecx, [ebp+8]
.text$x:00004F1B                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004F20 ; ---------------------------------------------------------------------------
.text$x:00004F20
.text$x:00004F20 locret_4F20:                            ; CODE XREF: __unwindfunclet$?getRelativePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV23@PB_W@Z$0+9j
.text$x:00004F20                 retn
.text$x:00004F20 __unwindfunclet$?getRelativePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV23@PB_W@Z$0 endp
.text$x:00004F20
.text$x:00004F21
.text$x:00004F21 ; =============== S U B R O U T I N E =======================================
.text$x:00004F21
.text$x:00004F21
.text$x:00004F21 __ehhandler$?getRelativePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV23@PB_W@Z proc near
.text$x:00004F21                                         ; DATA XREF: ProjectPanel::getRelativePath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+5o
.text$x:00004F21
.text$x:00004F21 arg_4           = dword ptr  8
.text$x:00004F21
.text$x:00004F21                 mov     edx, [esp+arg_4]
.text$x:00004F25                 lea     eax, [edx+0Ch]
.text$x:00004F28                 mov     ecx, [edx-224h]
.text$x:00004F2E                 xor     ecx, eax
.text$x:00004F30                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004F35                 mov     ecx, [edx-4]
.text$x:00004F38                 xor     ecx, eax
.text$x:00004F3A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004F3F                 mov     eax, offset __ehfuncinfo$?getRelativePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV23@PB_W@Z
.text$x:00004F44                 jmp     ___CxxFrameHandler3
.text$x:00004F44 __ehhandler$?getRelativePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV23@PB_W@Z endp
.text$x:00004F44
.text$x:00004F49
.text$x:00004F49 ; =============== S U B R O U T I N E =======================================
.text$x:00004F49
.text$x:00004F49
.text$x:00004F49 __unwindfunclet$?buildProjectXml@ProjectPanel@@IAEXPAVTiXmlNode@@PAU_TREEITEM@@PB_W@Z$0 proc near
.text$x:00004F49                                         ; DATA XREF: .xdata$x:0000C724o
.text$x:00004F49                 lea     ecx, [ebp-234h]
.text$x:00004F4F                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004F4F __unwindfunclet$?buildProjectXml@ProjectPanel@@IAEXPAVTiXmlNode@@PAU_TREEITEM@@PB_W@Z$0 endp
.text$x:00004F4F
.text$x:00004F54
.text$x:00004F54 ; =============== S U B R O U T I N E =======================================
.text$x:00004F54
.text$x:00004F54
.text$x:00004F54 __unwindfunclet$?buildProjectXml@ProjectPanel@@IAEXPAVTiXmlNode@@PAU_TREEITEM@@PB_W@Z$1 proc near
.text$x:00004F54                                         ; DATA XREF: .xdata$x:0000C72Co
.text$x:00004F54                 lea     ecx, [ebp-35Ch] ; this
.text$x:00004F5A                 jmp     ??1TiXmlElement@@UAE@XZ ; TiXmlElement::~TiXmlElement(void)
.text$x:00004F5A __unwindfunclet$?buildProjectXml@ProjectPanel@@IAEXPAVTiXmlNode@@PAU_TREEITEM@@PB_W@Z$1 endp
.text$x:00004F5A
.text$x:00004F5F
.text$x:00004F5F ; =============== S U B R O U T I N E =======================================
.text$x:00004F5F
.text$x:00004F5F
.text$x:00004F5F __unwindfunclet$?buildProjectXml@ProjectPanel@@IAEXPAVTiXmlNode@@PAU_TREEITEM@@PB_W@Z$2 proc near
.text$x:00004F5F                                         ; DATA XREF: .xdata$x:0000C734o
.text$x:00004F5F                 lea     ecx, [ebp-2C8h] ; this
.text$x:00004F65                 jmp     ??1TiXmlElement@@UAE@XZ ; TiXmlElement::~TiXmlElement(void)
.text$x:00004F65 __unwindfunclet$?buildProjectXml@ProjectPanel@@IAEXPAVTiXmlNode@@PAU_TREEITEM@@PB_W@Z$2 endp
.text$x:00004F65
.text$x:00004F6A
.text$x:00004F6A ; =============== S U B R O U T I N E =======================================
.text$x:00004F6A
.text$x:00004F6A
.text$x:00004F6A __ehhandler$?buildProjectXml@ProjectPanel@@IAEXPAVTiXmlNode@@PAU_TREEITEM@@PB_W@Z proc near
.text$x:00004F6A                                         ; DATA XREF: ProjectPanel::buildProjectXml(TiXmlNode *,_TREEITEM *,wchar_t const *)+5o
.text$x:00004F6A
.text$x:00004F6A arg_4           = dword ptr  8
.text$x:00004F6A
.text$x:00004F6A                 mov     edx, [esp+arg_4]
.text$x:00004F6E                 lea     eax, [edx+0Ch]
.text$x:00004F71                 mov     ecx, [edx-3A0h]
.text$x:00004F77                 xor     ecx, eax
.text$x:00004F79                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004F7E                 mov     ecx, [edx-4]
.text$x:00004F81                 xor     ecx, eax
.text$x:00004F83                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004F88                 mov     eax, offset __ehfuncinfo$?buildProjectXml@ProjectPanel@@IAEXPAVTiXmlNode@@PAU_TREEITEM@@PB_W@Z
.text$x:00004F8D                 jmp     ___CxxFrameHandler3
.text$x:00004F8D __ehhandler$?buildProjectXml@ProjectPanel@@IAEXPAVTiXmlNode@@PAU_TREEITEM@@PB_W@Z endp
.text$x:00004F8D
.text$x:00004F92
.text$x:00004F92 ; =============== S U B R O U T I N E =======================================
.text$x:00004F92
.text$x:00004F92
.text$x:00004F92 __unwindfunclet$?popupMenuCmd@ProjectPanel@@IAEXH@Z$0 proc near
.text$x:00004F92                                         ; DATA XREF: .xdata$x:0000C964o
.text$x:00004F92                 lea     ecx, [ebp-6B8h]
.text$x:00004F98                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004F98 __unwindfunclet$?popupMenuCmd@ProjectPanel@@IAEXH@Z$0 endp
.text$x:00004F98
.text$x:00004F9D
.text$x:00004F9D ; =============== S U B R O U T I N E =======================================
.text$x:00004F9D
.text$x:00004F9D
.text$x:00004F9D __unwindfunclet$?popupMenuCmd@ProjectPanel@@IAEXH@Z$1 proc near
.text$x:00004F9D                                         ; DATA XREF: .xdata$x:0000C96Co
.text$x:00004F9D                 lea     ecx, [ebp-69Ch]
.text$x:00004FA3                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004FA3 __unwindfunclet$?popupMenuCmd@ProjectPanel@@IAEXH@Z$1 endp
.text$x:00004FA3
.text$x:00004FA8
.text$x:00004FA8 ; =============== S U B R O U T I N E =======================================
.text$x:00004FA8
.text$x:00004FA8
.text$x:00004FA8 __unwindfunclet$?popupMenuCmd@ProjectPanel@@IAEXH@Z$2 proc near
.text$x:00004FA8                                         ; DATA XREF: .xdata$x:0000C974o
.text$x:00004FA8                 lea     ecx, [ebp-1774h] ; this
.text$x:00004FAE                 jmp     ??1FileDialog@@QAE@XZ ; FileDialog::~FileDialog(void)
.text$x:00004FAE __unwindfunclet$?popupMenuCmd@ProjectPanel@@IAEXH@Z$2 endp
.text$x:00004FAE
.text$x:00004FB3
.text$x:00004FB3 ; =============== S U B R O U T I N E =======================================
.text$x:00004FB3
.text$x:00004FB3
.text$x:00004FB3 __unwindfunclet$?popupMenuCmd@ProjectPanel@@IAEXH@Z$3 proc near
.text$x:00004FB3                                         ; DATA XREF: .xdata$x:0000C97Co
.text$x:00004FB3                 lea     ecx, [ebp-680h] ; this
.text$x:00004FB9                 jmp     ??1FileRelocalizerDlg@@UAE@XZ ; FileRelocalizerDlg::~FileRelocalizerDlg(void)
.text$x:00004FB9 __unwindfunclet$?popupMenuCmd@ProjectPanel@@IAEXH@Z$3 endp
.text$x:00004FB9
.text$x:00004FBE
.text$x:00004FBE ; =============== S U B R O U T I N E =======================================
.text$x:00004FBE
.text$x:00004FBE
.text$x:00004FBE __unwindfunclet$?popupMenuCmd@ProjectPanel@@IAEXH@Z$4 proc near
.text$x:00004FBE                                         ; DATA XREF: .xdata$x:0000C984o
.text$x:00004FBE                 lea     ecx, [ebp-644h]
.text$x:00004FC4                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004FC4 __unwindfunclet$?popupMenuCmd@ProjectPanel@@IAEXH@Z$4 endp
.text$x:00004FC4
.text$x:00004FC9
.text$x:00004FC9 ; =============== S U B R O U T I N E =======================================
.text$x:00004FC9
.text$x:00004FC9
.text$x:00004FC9 __ehhandler$?popupMenuCmd@ProjectPanel@@IAEXH@Z proc near
.text$x:00004FC9                                         ; DATA XREF: ProjectPanel::popupMenuCmd(int)+5o
.text$x:00004FC9
.text$x:00004FC9 arg_4           = dword ptr  8
.text$x:00004FC9
.text$x:00004FC9                 mov     edx, [esp+arg_4]
.text$x:00004FCD                 lea     eax, [edx+0Ch]
.text$x:00004FD0                 mov     ecx, [edx-17FCh]
.text$x:00004FD6                 xor     ecx, eax
.text$x:00004FD8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004FDD                 mov     ecx, [edx-4]
.text$x:00004FE0                 xor     ecx, eax
.text$x:00004FE2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004FE7                 mov     eax, offset __ehfuncinfo$?popupMenuCmd@ProjectPanel@@IAEXH@Z
.text$x:00004FEC                 jmp     ___CxxFrameHandler3
.text$x:00004FEC __ehhandler$?popupMenuCmd@ProjectPanel@@IAEXH@Z endp
.text$x:00004FEC
.text$x:00004FF1
.text$x:00004FF1 ; =============== S U B R O U T I N E =======================================
.text$x:00004FF1
.text$x:00004FF1
.text$x:00004FF1 __unwindfunclet$?run_dlgProc@ProjectPanel@@MAGHIIJ@Z$0 proc near
.text$x:00004FF1                                         ; DATA XREF: .xdata$x:0000C704o
.text$x:00004FF1                 lea     ecx, [ebp-64h]
.text$x:00004FF4                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004FF4 __unwindfunclet$?run_dlgProc@ProjectPanel@@MAGHIIJ@Z$0 endp
.text$x:00004FF4
.text$x:00004FF9
.text$x:00004FF9 ; =============== S U B R O U T I N E =======================================
.text$x:00004FF9
.text$x:00004FF9
.text$x:00004FF9 __unwindfunclet$?run_dlgProc@ProjectPanel@@MAGHIIJ@Z$1 proc near
.text$x:00004FF9                                         ; DATA XREF: .xdata$x:0000C70Co
.text$x:00004FF9                 lea     ecx, [ebp-80h]
.text$x:00004FFC                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004FFC __unwindfunclet$?run_dlgProc@ProjectPanel@@MAGHIIJ@Z$1 endp
.text$x:00004FFC
.text$x:00005001
.text$x:00005001 ; =============== S U B R O U T I N E =======================================
.text$x:00005001
.text$x:00005001
.text$x:00005001 __ehhandler$?run_dlgProc@ProjectPanel@@MAGHIIJ@Z proc near
.text$x:00005001                                         ; DATA XREF: ProjectPanel::run_dlgProc(uint,uint,long)+5o
.text$x:00005001
.text$x:00005001 arg_4           = dword ptr  8
.text$x:00005001
.text$x:00005001                 mov     edx, [esp+arg_4]
.text$x:00005005                 lea     eax, [edx+0Ch]
.text$x:00005008                 mov     ecx, [edx-94h]
.text$x:0000500E                 xor     ecx, eax
.text$x:00005010                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005015                 mov     ecx, [edx-4]
.text$x:00005018                 xor     ecx, eax
.text$x:0000501A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000501F                 mov     eax, offset __ehfuncinfo$?run_dlgProc@ProjectPanel@@MAGHIIJ@Z
.text$x:00005024                 jmp     ___CxxFrameHandler3
.text$x:00005024 __ehhandler$?run_dlgProc@ProjectPanel@@MAGHIIJ@Z endp
.text$x:00005024
.text$x:00005029
.text$x:00005029 ; =============== S U B R O U T I N E =======================================
.text$x:00005029
.text$x:00005029
.text$x:00005029 __unwindfunclet$?buildTreeFrom@ProjectPanel@@IAE_NPAVTiXmlNode@@PAU_TREEITEM@@@Z$0 proc near
.text$x:00005029                                         ; DATA XREF: .xdata$x:0000C6DCo
.text$x:00005029                 lea     ecx, [ebp-2Ch]
.text$x:0000502C                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000502C __unwindfunclet$?buildTreeFrom@ProjectPanel@@IAE_NPAVTiXmlNode@@PAU_TREEITEM@@@Z$0 endp
.text$x:0000502C
.text$x:00005031
.text$x:00005031 ; =============== S U B R O U T I N E =======================================
.text$x:00005031
.text$x:00005031
.text$x:00005031 __ehhandler$?buildTreeFrom@ProjectPanel@@IAE_NPAVTiXmlNode@@PAU_TREEITEM@@@Z proc near
.text$x:00005031                                         ; DATA XREF: ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)+5o
.text$x:00005031
.text$x:00005031 arg_4           = dword ptr  8
.text$x:00005031
.text$x:00005031                 mov     edx, [esp+arg_4]
.text$x:00005035                 lea     eax, [edx+0Ch]
.text$x:00005038                 mov     ecx, [edx-48h]
.text$x:0000503B                 xor     ecx, eax
.text$x:0000503D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005042                 mov     ecx, [edx-4]
.text$x:00005045                 xor     ecx, eax
.text$x:00005047                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000504C                 mov     eax, offset __ehfuncinfo$?buildTreeFrom@ProjectPanel@@IAE_NPAVTiXmlNode@@PAU_TREEITEM@@@Z
.text$x:00005051                 jmp     ___CxxFrameHandler3
.text$x:00005051 __ehhandler$?buildTreeFrom@ProjectPanel@@IAE_NPAVTiXmlNode@@PAU_TREEITEM@@@Z endp
.text$x:00005051
.text$x:00005056
.text$x:00005056 ; =============== S U B R O U T I N E =======================================
.text$x:00005056
.text$x:00005056
.text$x:00005056 __unwindfunclet$?getAbsoluteFilePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z$0 proc near
.text$x:00005056                                         ; DATA XREF: .xdata$x:0000C6D4o
.text$x:00005056                 mov     eax, [ebp-21Ch]
.text$x:0000505C                 and     eax, 1
.text$x:0000505F                 jz      locret_5074
.text$x:00005065                 and     dword ptr [ebp-21Ch], 0FFFFFFFEh
.text$x:0000506C                 mov     ecx, [ebp+8]
.text$x:0000506F                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00005074 ; ---------------------------------------------------------------------------
.text$x:00005074
.text$x:00005074 locret_5074:                            ; CODE XREF: __unwindfunclet$?getAbsoluteFilePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z$0+9j
.text$x:00005074                 retn
.text$x:00005074 __unwindfunclet$?getAbsoluteFilePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z$0 endp
.text$x:00005074
.text$x:00005075
.text$x:00005075 ; =============== S U B R O U T I N E =======================================
.text$x:00005075
.text$x:00005075
.text$x:00005075 __ehhandler$?getAbsoluteFilePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z proc near
.text$x:00005075                                         ; DATA XREF: ProjectPanel::getAbsoluteFilePath(wchar_t const *)+5o
.text$x:00005075
.text$x:00005075 arg_4           = dword ptr  8
.text$x:00005075
.text$x:00005075                 mov     edx, [esp+arg_4]
.text$x:00005079                 lea     eax, [edx+0Ch]
.text$x:0000507C                 mov     ecx, [edx-218h]
.text$x:00005082                 xor     ecx, eax
.text$x:00005084                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005089                 mov     ecx, [edx-4]
.text$x:0000508C                 xor     ecx, eax
.text$x:0000508E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005093                 mov     eax, offset __ehfuncinfo$?getAbsoluteFilePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z
.text$x:00005098                 jmp     ___CxxFrameHandler3
.text$x:00005098 __ehhandler$?getAbsoluteFilePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z endp
.text$x:00005098
.text$x:00005098 ; ---------------------------------------------------------------------------
.text$x:0000509D                 align 10h
.text$x:0000509D _text$x         ends
.text$x:0000509D
.text$mn:000050A0 ; ===========================================================================
.text$mn:000050A0
.text$mn:000050A0 ; Segment type: Pure code
.text$mn:000050A0 ; Segment permissions: Read/Execute
.text$mn:000050A0 _text$mn        segment para public 'CODE' use32
.text$mn:000050A0                 assume cs:_text$mn
.text$mn:000050A0                 ;org 50A0h
.text$mn:000050A0 ; COMDAT (pick any)
.text$mn:000050A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000050A0
.text$mn:000050A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000050A0
.text$mn:000050A0 ; Attributes: bp-based frame
.text$mn:000050A0
.text$mn:000050A0 ; bool __cdecl std::operator==<class std::allocator<wchar_t>, class std::allocator<wchar_t>>(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &, struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:000050A0                 public ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z
.text$mn:000050A0 ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z proc near
.text$mn:000050A0                                         ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+Cp
.text$mn:000050A0
.text$mn:000050A0 var_2           = byte ptr -2
.text$mn:000050A0 var_1           = byte ptr -1
.text$mn:000050A0 arg_0           = dword ptr  8
.text$mn:000050A0 arg_4           = dword ptr  0Ch
.text$mn:000050A0
.text$mn:000050A0                 push    ebp
.text$mn:000050A1                 mov     ebp, esp
.text$mn:000050A3                 push    ecx
.text$mn:000050A4                 mov     eax, [ebp+arg_4]
.text$mn:000050A7                 push    eax
.text$mn:000050A8                 lea     ecx, [ebp+var_1]
.text$mn:000050AB                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:000050B0                 push    eax
.text$mn:000050B1                 mov     ecx, [ebp+arg_0]
.text$mn:000050B4                 push    ecx
.text$mn:000050B5                 lea     ecx, [ebp+var_2]
.text$mn:000050B8                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:000050BD                 push    eax
.text$mn:000050BE                 call    ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z ; std::operator==<wchar_t,wchar_t>(std::allocator<wchar_t> const &,std::allocator<wchar_t> const &)
.text$mn:000050C3                 add     esp, 8
.text$mn:000050C6                 mov     esp, ebp
.text$mn:000050C8                 pop     ebp
.text$mn:000050C9                 retn
.text$mn:000050C9 ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z endp
.text$mn:000050C9
.text$mn:000050C9 ; ---------------------------------------------------------------------------
.text$mn:000050CA                 align 4
.text$mn:000050CA _text$mn        ends
.text$mn:000050CA
.text$mn:000050CC ; ===========================================================================
.text$mn:000050CC
.text$mn:000050CC ; Segment type: Pure code
.text$mn:000050CC ; Segment permissions: Read/Execute
.text$mn:000050CC _text$mn        segment para public 'CODE' use32
.text$mn:000050CC                 assume cs:_text$mn
.text$mn:000050CC                 ;org 50CCh
.text$mn:000050CC ; COMDAT (pick any)
.text$mn:000050CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000050CC
.text$mn:000050CC ; =============== S U B R O U T I N E =======================================
.text$mn:000050CC
.text$mn:000050CC ; Attributes: bp-based frame
.text$mn:000050CC
.text$mn:000050CC ; bool __cdecl std::operator==<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:000050CC                 public ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z
.text$mn:000050CC ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z proc near
.text$mn:000050CC                                         ; CODE XREF: ProjectPanel::popupMenuCmd(int)+949p
.text$mn:000050CC
.text$mn:000050CC var_4           = dword ptr -4
.text$mn:000050CC arg_0           = dword ptr  8
.text$mn:000050CC arg_4           = dword ptr  0Ch
.text$mn:000050CC
.text$mn:000050CC                 push    ebp
.text$mn:000050CD                 mov     ebp, esp
.text$mn:000050CF                 push    ecx
.text$mn:000050D0                 mov     eax, [ebp+arg_4]
.text$mn:000050D3                 push    eax
.text$mn:000050D4                 mov     ecx, [ebp+arg_0]
.text$mn:000050D7                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000050DC                 test    eax, eax
.text$mn:000050DE                 jnz     short loc_50E9
.text$mn:000050E0                 mov     [ebp+var_4], 1
.text$mn:000050E7                 jmp     short loc_50F0
.text$mn:000050E9 ; ---------------------------------------------------------------------------
.text$mn:000050E9
.text$mn:000050E9 loc_50E9:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+12j
.text$mn:000050E9                 mov     [ebp+var_4], 0
.text$mn:000050F0
.text$mn:000050F0 loc_50F0:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+1Bj
.text$mn:000050F0                 mov     al, byte ptr [ebp+var_4]
.text$mn:000050F3                 mov     esp, ebp
.text$mn:000050F5                 pop     ebp
.text$mn:000050F6                 retn
.text$mn:000050F6 ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z endp
.text$mn:000050F6
.text$mn:000050F6 ; ---------------------------------------------------------------------------
.text$mn:000050F7                 align 4
.text$mn:000050F7 _text$mn        ends
.text$mn:000050F7
.text$mn:000050F8 ; ===========================================================================
.text$mn:000050F8
.text$mn:000050F8 ; Segment type: Pure code
.text$mn:000050F8 ; Segment permissions: Read/Execute
.text$mn:000050F8 _text$mn        segment para public 'CODE' use32
.text$mn:000050F8                 assume cs:_text$mn
.text$mn:000050F8                 ;org 50F8h
.text$mn:000050F8 ; COMDAT (pick any)
.text$mn:000050F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000050F8
.text$mn:000050F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000050F8
.text$mn:000050F8 ; Attributes: bp-based frame
.text$mn:000050F8
.text$mn:000050F8 ; int __cdecl std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int, wchar_t *Str)
.text$mn:000050F8                 public ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z
.text$mn:000050F8 ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z proc near
.text$mn:000050F8                                         ; CODE XREF: ProjectPanel::saveWorkSpace(void)+15p
.text$mn:000050F8                                         ; ProjectPanel::addFilesFromDirectory(_TREEITEM *)+42p ...
.text$mn:000050F8
.text$mn:000050F8 var_4           = dword ptr -4
.text$mn:000050F8 arg_0           = dword ptr  8
.text$mn:000050F8 Str             = dword ptr  0Ch
.text$mn:000050F8
.text$mn:000050F8                 push    ebp
.text$mn:000050F9                 mov     ebp, esp
.text$mn:000050FB                 push    ecx
.text$mn:000050FC                 mov     eax, [ebp+Str]
.text$mn:000050FF                 push    eax             ; Str
.text$mn:00005100                 mov     ecx, [ebp+arg_0]
.text$mn:00005103                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t const *)
.text$mn:00005108                 test    eax, eax
.text$mn:0000510A                 jnz     short loc_5115
.text$mn:0000510C                 mov     [ebp+var_4], 1
.text$mn:00005113                 jmp     short loc_511C
.text$mn:00005115 ; ---------------------------------------------------------------------------
.text$mn:00005115
.text$mn:00005115 loc_5115:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+12j
.text$mn:00005115                 mov     [ebp+var_4], 0
.text$mn:0000511C
.text$mn:0000511C loc_511C:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+1Bj
.text$mn:0000511C                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000511F                 mov     esp, ebp
.text$mn:00005121                 pop     ebp
.text$mn:00005122                 retn
.text$mn:00005122 ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z endp
.text$mn:00005122
.text$mn:00005122 ; ---------------------------------------------------------------------------
.text$mn:00005123                 align 4
.text$mn:00005123 _text$mn        ends
.text$mn:00005123
.text$mn:00005124 ; ===========================================================================
.text$mn:00005124
.text$mn:00005124 ; Segment type: Pure code
.text$mn:00005124 ; Segment permissions: Read/Execute
.text$mn:00005124 _text$mn        segment para public 'CODE' use32
.text$mn:00005124                 assume cs:_text$mn
.text$mn:00005124                 ;org 5124h
.text$mn:00005124 ; COMDAT (pick any)
.text$mn:00005124                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005124
.text$mn:00005124 ; =============== S U B R O U T I N E =======================================
.text$mn:00005124
.text$mn:00005124 ; Attributes: bp-based frame
.text$mn:00005124
.text$mn:00005124 ; bool __cdecl std::operator==<wchar_t, wchar_t>(class std::allocator<wchar_t> const &, class std::allocator<wchar_t> const &)
.text$mn:00005124                 public ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z
.text$mn:00005124 ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z proc near
.text$mn:00005124                                         ; CODE XREF: std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+1Ep
.text$mn:00005124                 push    ebp
.text$mn:00005125                 mov     ebp, esp
.text$mn:00005127                 mov     al, 1
.text$mn:00005129                 pop     ebp
.text$mn:0000512A                 retn
.text$mn:0000512A ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z endp
.text$mn:0000512A
.text$mn:0000512A ; ---------------------------------------------------------------------------
.text$mn:0000512B                 align 4
.text$mn:0000512B _text$mn        ends
.text$mn:0000512B
.text$mn:0000512C ; ===========================================================================
.text$mn:0000512C
.text$mn:0000512C ; Segment type: Pure code
.text$mn:0000512C ; Segment permissions: Read/Execute
.text$mn:0000512C _text$mn        segment para public 'CODE' use32
.text$mn:0000512C                 assume cs:_text$mn
.text$mn:0000512C                 ;org 512Ch
.text$mn:0000512C ; COMDAT (pick any)
.text$mn:0000512C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000512C
.text$mn:0000512C ; =============== S U B R O U T I N E =======================================
.text$mn:0000512C
.text$mn:0000512C ; Attributes: bp-based frame
.text$mn:0000512C
.text$mn:0000512C ; bool __cdecl std::operator!=<class std::allocator<wchar_t>, class std::allocator<wchar_t>>(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &, struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:0000512C                 public ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z
.text$mn:0000512C ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z proc near
.text$mn:0000512C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+73p
.text$mn:0000512C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+2Bp
.text$mn:0000512C
.text$mn:0000512C var_4           = dword ptr -4
.text$mn:0000512C arg_0           = dword ptr  8
.text$mn:0000512C arg_4           = dword ptr  0Ch
.text$mn:0000512C
.text$mn:0000512C                 push    ebp
.text$mn:0000512D                 mov     ebp, esp
.text$mn:0000512F                 push    ecx
.text$mn:00005130                 mov     eax, [ebp+arg_4]
.text$mn:00005133                 push    eax
.text$mn:00005134                 mov     ecx, [ebp+arg_0]
.text$mn:00005137                 push    ecx
.text$mn:00005138                 call    ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:0000513D                 add     esp, 8
.text$mn:00005140                 movzx   edx, al
.text$mn:00005143                 test    edx, edx
.text$mn:00005145                 jnz     short loc_5150
.text$mn:00005147                 mov     [ebp+var_4], 1
.text$mn:0000514E                 jmp     short loc_5157
.text$mn:00005150 ; ---------------------------------------------------------------------------
.text$mn:00005150
.text$mn:00005150 loc_5150:                               ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+19j
.text$mn:00005150                 mov     [ebp+var_4], 0
.text$mn:00005157
.text$mn:00005157 loc_5157:                               ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+22j
.text$mn:00005157                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000515A                 mov     esp, ebp
.text$mn:0000515C                 pop     ebp
.text$mn:0000515D                 retn
.text$mn:0000515D ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z endp
.text$mn:0000515D
.text$mn:0000515D ; ---------------------------------------------------------------------------
.text$mn:0000515E                 align 10h
.text$mn:0000515E _text$mn        ends
.text$mn:0000515E
.text$mn:00005160 ; ===========================================================================
.text$mn:00005160
.text$mn:00005160 ; Segment type: Pure code
.text$mn:00005160 ; Segment permissions: Read/Execute
.text$mn:00005160 _text$mn        segment para public 'CODE' use32
.text$mn:00005160                 assume cs:_text$mn
.text$mn:00005160                 ;org 5160h
.text$mn:00005160 ; COMDAT (pick any)
.text$mn:00005160                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005160
.text$mn:00005160 ; =============== S U B R O U T I N E =======================================
.text$mn:00005160
.text$mn:00005160 ; Attributes: bp-based frame
.text$mn:00005160
.text$mn:00005160 ; int __cdecl std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int, wchar_t *Str)
.text$mn:00005160                 public ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z
.text$mn:00005160 ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z proc near
.text$mn:00005160                                         ; CODE XREF: ProjectPanel::addFilesFromDirectory(_TREEITEM *)+63p
.text$mn:00005160                                         ; ProjectPanel::addFilesFromDirectory(_TREEITEM *)+DAp ...
.text$mn:00005160
.text$mn:00005160 var_4           = dword ptr -4
.text$mn:00005160 arg_0           = dword ptr  8
.text$mn:00005160 Str             = dword ptr  0Ch
.text$mn:00005160
.text$mn:00005160                 push    ebp
.text$mn:00005161                 mov     ebp, esp
.text$mn:00005163                 push    ecx
.text$mn:00005164                 mov     eax, [ebp+Str]
.text$mn:00005167                 push    eax             ; Str
.text$mn:00005168                 mov     ecx, [ebp+arg_0]
.text$mn:0000516B                 push    ecx             ; int
.text$mn:0000516C                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00005171                 add     esp, 8
.text$mn:00005174                 movzx   edx, al
.text$mn:00005177                 test    edx, edx
.text$mn:00005179                 jnz     short loc_5184
.text$mn:0000517B                 mov     [ebp+var_4], 1
.text$mn:00005182                 jmp     short loc_518B
.text$mn:00005184 ; ---------------------------------------------------------------------------
.text$mn:00005184
.text$mn:00005184 loc_5184:                               ; CODE XREF: std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+19j
.text$mn:00005184                 mov     [ebp+var_4], 0
.text$mn:0000518B
.text$mn:0000518B loc_518B:                               ; CODE XREF: std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+22j
.text$mn:0000518B                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000518E                 mov     esp, ebp
.text$mn:00005190                 pop     ebp
.text$mn:00005191                 retn
.text$mn:00005191 ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z endp
.text$mn:00005191
.text$mn:00005191 ; ---------------------------------------------------------------------------
.text$mn:00005192                 align 4
.text$mn:00005192 _text$mn        ends
.text$mn:00005192
.text$mn:00005194 ; ===========================================================================
.text$mn:00005194
.text$mn:00005194 ; Segment type: Pure code
.text$mn:00005194 ; Segment permissions: Read/Execute
.text$mn:00005194 _text$mn        segment para public 'CODE' use32
.text$mn:00005194                 assume cs:_text$mn
.text$mn:00005194                 ;org 5194h
.text$mn:00005194 ; COMDAT (pick any)
.text$mn:00005194                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005194
.text$mn:00005194 ; =============== S U B R O U T I N E =======================================
.text$mn:00005194
.text$mn:00005194 ; Attributes: bp-based frame
.text$mn:00005194
.text$mn:00005194 ; char * __cdecl std::_Allocate<char>(unsigned int, char *)
.text$mn:00005194                 public ??$_Allocate@D@std@@YAPADIPAD@Z
.text$mn:00005194 ??$_Allocate@D@std@@YAPADIPAD@Z proc near
.text$mn:00005194                                         ; CODE XREF: std::allocator<char>::allocate(uint)+Dp
.text$mn:00005194
.text$mn:00005194 var_4           = dword ptr -4
.text$mn:00005194 arg_0           = dword ptr  8
.text$mn:00005194
.text$mn:00005194                 push    ebp
.text$mn:00005195                 mov     ebp, esp
.text$mn:00005197                 push    ecx
.text$mn:00005198                 mov     [ebp+var_4], 0
.text$mn:0000519F                 cmp     [ebp+arg_0], 0
.text$mn:000051A3                 jnz     short loc_51A7
.text$mn:000051A5                 jmp     short loc_51C7
.text$mn:000051A7 ; ---------------------------------------------------------------------------
.text$mn:000051A7
.text$mn:000051A7 loc_51A7:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+Fj
.text$mn:000051A7                 cmp     [ebp+arg_0], 0FFFFFFFFh
.text$mn:000051AB                 ja      short loc_51C2
.text$mn:000051AD                 mov     eax, [ebp+arg_0]
.text$mn:000051B0                 push    eax             ; unsigned int
.text$mn:000051B1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000051B6                 add     esp, 4
.text$mn:000051B9                 mov     [ebp+var_4], eax
.text$mn:000051BC                 cmp     [ebp+var_4], 0
.text$mn:000051C0                 jnz     short loc_51C7
.text$mn:000051C2
.text$mn:000051C2 loc_51C2:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+17j
.text$mn:000051C2                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:000051C7
.text$mn:000051C7 loc_51C7:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+11j
.text$mn:000051C7                                         ; std::_Allocate<char>(uint,char *)+2Cj
.text$mn:000051C7                 mov     eax, [ebp+var_4]
.text$mn:000051CA                 mov     esp, ebp
.text$mn:000051CC                 pop     ebp
.text$mn:000051CD                 retn
.text$mn:000051CD ??$_Allocate@D@std@@YAPADIPAD@Z endp
.text$mn:000051CD
.text$mn:000051CD ; ---------------------------------------------------------------------------
.text$mn:000051CE                 align 10h
.text$mn:000051CE _text$mn        ends
.text$mn:000051CE
.text$mn:000051D0 ; ===========================================================================
.text$mn:000051D0
.text$mn:000051D0 ; Segment type: Pure code
.text$mn:000051D0 ; Segment permissions: Read/Execute
.text$mn:000051D0 _text$mn        segment para public 'CODE' use32
.text$mn:000051D0                 assume cs:_text$mn
.text$mn:000051D0                 ;org 51D0h
.text$mn:000051D0 ; COMDAT (pick any)
.text$mn:000051D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000051D0
.text$mn:000051D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000051D0
.text$mn:000051D0 ; Attributes: bp-based frame
.text$mn:000051D0
.text$mn:000051D0 ; int * __cdecl std::_Allocate<int>(unsigned int, int *)
.text$mn:000051D0                 public ??$_Allocate@H@std@@YAPAHIPAH@Z
.text$mn:000051D0 ??$_Allocate@H@std@@YAPAHIPAH@Z proc near
.text$mn:000051D0                                         ; CODE XREF: std::allocator<int>::allocate(uint)+Dp
.text$mn:000051D0
.text$mn:000051D0 var_4           = dword ptr -4
.text$mn:000051D0 arg_0           = dword ptr  8
.text$mn:000051D0
.text$mn:000051D0                 push    ebp
.text$mn:000051D1                 mov     ebp, esp
.text$mn:000051D3                 push    ecx
.text$mn:000051D4                 mov     [ebp+var_4], 0
.text$mn:000051DB                 cmp     [ebp+arg_0], 0
.text$mn:000051DF                 jnz     short loc_51E3
.text$mn:000051E1                 jmp     short loc_5209
.text$mn:000051E3 ; ---------------------------------------------------------------------------
.text$mn:000051E3
.text$mn:000051E3 loc_51E3:                               ; CODE XREF: std::_Allocate<int>(uint,int *)+Fj
.text$mn:000051E3                 cmp     [ebp+arg_0], 3FFFFFFFh
.text$mn:000051EA                 ja      short loc_5204
.text$mn:000051EC                 mov     eax, [ebp+arg_0]
.text$mn:000051EF                 shl     eax, 2
.text$mn:000051F2                 push    eax             ; unsigned int
.text$mn:000051F3                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000051F8                 add     esp, 4
.text$mn:000051FB                 mov     [ebp+var_4], eax
.text$mn:000051FE                 cmp     [ebp+var_4], 0
.text$mn:00005202                 jnz     short loc_5209
.text$mn:00005204
.text$mn:00005204 loc_5204:                               ; CODE XREF: std::_Allocate<int>(uint,int *)+1Aj
.text$mn:00005204                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00005209
.text$mn:00005209 loc_5209:                               ; CODE XREF: std::_Allocate<int>(uint,int *)+11j
.text$mn:00005209                                         ; std::_Allocate<int>(uint,int *)+32j
.text$mn:00005209                 mov     eax, [ebp+var_4]
.text$mn:0000520C                 mov     esp, ebp
.text$mn:0000520E                 pop     ebp
.text$mn:0000520F                 retn
.text$mn:0000520F ??$_Allocate@H@std@@YAPAHIPAH@Z endp
.text$mn:0000520F
.text$mn:0000520F _text$mn        ends
.text$mn:0000520F
.text$mn:00005210 ; ===========================================================================
.text$mn:00005210
.text$mn:00005210 ; Segment type: Pure code
.text$mn:00005210 ; Segment permissions: Read/Execute
.text$mn:00005210 _text$mn        segment para public 'CODE' use32
.text$mn:00005210                 assume cs:_text$mn
.text$mn:00005210                 ;org 5210h
.text$mn:00005210 ; COMDAT (pick any)
.text$mn:00005210                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005210
.text$mn:00005210 ; =============== S U B R O U T I N E =======================================
.text$mn:00005210
.text$mn:00005210 ; Attributes: bp-based frame
.text$mn:00005210
.text$mn:00005210 ; struct std::_Container_proxy * __cdecl std::_Allocate<struct std::_Container_proxy>(unsigned int, struct std::_Container_proxy *)
.text$mn:00005210                 public ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
.text$mn:00005210 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
.text$mn:00005210                                         ; CODE XREF: std::allocator<std::_Container_proxy>::allocate(uint)+Dp
.text$mn:00005210
.text$mn:00005210 var_4           = dword ptr -4
.text$mn:00005210 arg_0           = dword ptr  8
.text$mn:00005210
.text$mn:00005210                 push    ebp
.text$mn:00005211                 mov     ebp, esp
.text$mn:00005213                 push    ecx
.text$mn:00005214                 mov     [ebp+var_4], 0
.text$mn:0000521B                 cmp     [ebp+arg_0], 0
.text$mn:0000521F                 jnz     short loc_5223
.text$mn:00005221                 jmp     short loc_5249
.text$mn:00005223 ; ---------------------------------------------------------------------------
.text$mn:00005223
.text$mn:00005223 loc_5223:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+Fj
.text$mn:00005223                 cmp     [ebp+arg_0], 1FFFFFFFh
.text$mn:0000522A                 ja      short loc_5244
.text$mn:0000522C                 mov     eax, [ebp+arg_0]
.text$mn:0000522F                 shl     eax, 3
.text$mn:00005232                 push    eax             ; unsigned int
.text$mn:00005233                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00005238                 add     esp, 4
.text$mn:0000523B                 mov     [ebp+var_4], eax
.text$mn:0000523E                 cmp     [ebp+var_4], 0
.text$mn:00005242                 jnz     short loc_5249
.text$mn:00005244
.text$mn:00005244 loc_5244:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+1Aj
.text$mn:00005244                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00005249
.text$mn:00005249 loc_5249:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+11j
.text$mn:00005249                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+32j
.text$mn:00005249                 mov     eax, [ebp+var_4]
.text$mn:0000524C                 mov     esp, ebp
.text$mn:0000524E                 pop     ebp
.text$mn:0000524F                 retn
.text$mn:0000524F ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z endp
.text$mn:0000524F
.text$mn:0000524F _text$mn        ends
.text$mn:0000524F
.text$mn:00005250 ; ===========================================================================
.text$mn:00005250
.text$mn:00005250 ; Segment type: Pure code
.text$mn:00005250 ; Segment permissions: Read/Execute
.text$mn:00005250 _text$mn        segment para public 'CODE' use32
.text$mn:00005250                 assume cs:_text$mn
.text$mn:00005250                 ;org 5250h
.text$mn:00005250 ; COMDAT (pick any)
.text$mn:00005250                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005250
.text$mn:00005250 ; =============== S U B R O U T I N E =======================================
.text$mn:00005250
.text$mn:00005250 ; Attributes: bp-based frame
.text$mn:00005250
.text$mn:00005250 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Allocate<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(unsigned int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00005250                 public ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z
.text$mn:00005250 ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z proc near
.text$mn:00005250                                         ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocate(uint)+Dp
.text$mn:00005250
.text$mn:00005250 var_4           = dword ptr -4
.text$mn:00005250 arg_0           = dword ptr  8
.text$mn:00005250
.text$mn:00005250                 push    ebp
.text$mn:00005251                 mov     ebp, esp
.text$mn:00005253                 push    ecx
.text$mn:00005254                 mov     [ebp+var_4], 0
.text$mn:0000525B                 cmp     [ebp+arg_0], 0
.text$mn:0000525F                 jnz     short loc_5263
.text$mn:00005261                 jmp     short loc_5287
.text$mn:00005263 ; ---------------------------------------------------------------------------
.text$mn:00005263
.text$mn:00005263 loc_5263:                               ; CODE XREF: std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Fj
.text$mn:00005263                 cmp     [ebp+arg_0], 9249249h
.text$mn:0000526A                 ja      short loc_5282
.text$mn:0000526C                 imul    eax, [ebp+arg_0], 1Ch
.text$mn:00005270                 push    eax             ; unsigned int
.text$mn:00005271                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00005276                 add     esp, 4
.text$mn:00005279                 mov     [ebp+var_4], eax
.text$mn:0000527C                 cmp     [ebp+var_4], 0
.text$mn:00005280                 jnz     short loc_5287
.text$mn:00005282
.text$mn:00005282 loc_5282:                               ; CODE XREF: std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+1Aj
.text$mn:00005282                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00005287
.text$mn:00005287 loc_5287:                               ; CODE XREF: std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+11j
.text$mn:00005287                                         ; std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+30j
.text$mn:00005287                 mov     eax, [ebp+var_4]
.text$mn:0000528A                 mov     esp, ebp
.text$mn:0000528C                 pop     ebp
.text$mn:0000528D                 retn
.text$mn:0000528D ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z endp
.text$mn:0000528D
.text$mn:0000528D ; ---------------------------------------------------------------------------
.text$mn:0000528E                 align 10h
.text$mn:0000528E _text$mn        ends
.text$mn:0000528E
.text$mn:00005290 ; ===========================================================================
.text$mn:00005290
.text$mn:00005290 ; Segment type: Pure code
.text$mn:00005290 ; Segment permissions: Read/Execute
.text$mn:00005290 _text$mn        segment para public 'CODE' use32
.text$mn:00005290                 assume cs:_text$mn
.text$mn:00005290                 ;org 5290h
.text$mn:00005290 ; COMDAT (pick any)
.text$mn:00005290                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005290
.text$mn:00005290 ; =============== S U B R O U T I N E =======================================
.text$mn:00005290
.text$mn:00005290 ; Attributes: bp-based frame
.text$mn:00005290
.text$mn:00005290 ; wchar_t * __cdecl std::_Allocate<wchar_t>(unsigned int, wchar_t *)
.text$mn:00005290                 public ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
.text$mn:00005290 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z proc near
.text$mn:00005290                                         ; CODE XREF: std::allocator<wchar_t>::allocate(uint)+Dp
.text$mn:00005290
.text$mn:00005290 var_4           = dword ptr -4
.text$mn:00005290 arg_0           = dword ptr  8
.text$mn:00005290
.text$mn:00005290                 push    ebp
.text$mn:00005291                 mov     ebp, esp
.text$mn:00005293                 push    ecx
.text$mn:00005294                 mov     [ebp+var_4], 0
.text$mn:0000529B                 cmp     [ebp+arg_0], 0
.text$mn:0000529F                 jnz     short loc_52A3
.text$mn:000052A1                 jmp     short loc_52C8
.text$mn:000052A3 ; ---------------------------------------------------------------------------
.text$mn:000052A3
.text$mn:000052A3 loc_52A3:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+Fj
.text$mn:000052A3                 cmp     [ebp+arg_0], 7FFFFFFFh
.text$mn:000052AA                 ja      short loc_52C3
.text$mn:000052AC                 mov     eax, [ebp+arg_0]
.text$mn:000052AF                 shl     eax, 1
.text$mn:000052B1                 push    eax             ; unsigned int
.text$mn:000052B2                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000052B7                 add     esp, 4
.text$mn:000052BA                 mov     [ebp+var_4], eax
.text$mn:000052BD                 cmp     [ebp+var_4], 0
.text$mn:000052C1                 jnz     short loc_52C8
.text$mn:000052C3
.text$mn:000052C3 loc_52C3:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+1Aj
.text$mn:000052C3                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:000052C8
.text$mn:000052C8 loc_52C8:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+11j
.text$mn:000052C8                                         ; std::_Allocate<wchar_t>(uint,wchar_t *)+31j
.text$mn:000052C8                 mov     eax, [ebp+var_4]
.text$mn:000052CB                 mov     esp, ebp
.text$mn:000052CD                 pop     ebp
.text$mn:000052CE                 retn
.text$mn:000052CE ??$_Allocate@_W@std@@YAPA_WIPA_W@Z endp
.text$mn:000052CE
.text$mn:000052CE ; ---------------------------------------------------------------------------
.text$mn:000052CF                 align 10h
.text$mn:000052CF _text$mn        ends
.text$mn:000052CF
.text$mn:000052D0 ; ===========================================================================
.text$mn:000052D0
.text$mn:000052D0 ; Segment type: Pure code
.text$mn:000052D0 ; Segment permissions: Read/Execute
.text$mn:000052D0 _text$mn        segment para public 'CODE' use32
.text$mn:000052D0                 assume cs:_text$mn
.text$mn:000052D0                 ;org 52D0h
.text$mn:000052D0 ; COMDAT (pick any)
.text$mn:000052D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000052D0
.text$mn:000052D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000052D0
.text$mn:000052D0 ; Attributes: bp-based frame
.text$mn:000052D0
.text$mn:000052D0 ; int __cdecl std::_Debug_pointer<char>(int, wchar_t *, unsigned int)
.text$mn:000052D0                 public ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
.text$mn:000052D0 ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
.text$mn:000052D0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+15p
.text$mn:000052D0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+1Bp
.text$mn:000052D0
.text$mn:000052D0 arg_0           = dword ptr  8
.text$mn:000052D0 arg_4           = dword ptr  0Ch
.text$mn:000052D0 arg_8           = dword ptr  10h
.text$mn:000052D0
.text$mn:000052D0                 push    ebp
.text$mn:000052D1                 mov     ebp, esp
.text$mn:000052D3                 cmp     [ebp+arg_0], 0
.text$mn:000052D7                 jnz     short loc_52EE
.text$mn:000052D9                 mov     eax, [ebp+arg_8]
.text$mn:000052DC                 push    eax             ; unsigned int
.text$mn:000052DD                 mov     ecx, [ebp+arg_4]
.text$mn:000052E0                 push    ecx             ; wchar_t *
.text$mn:000052E1                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000052E6                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000052EB                 add     esp, 0Ch
.text$mn:000052EE
.text$mn:000052EE loc_52EE:                               ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+7j
.text$mn:000052EE                 pop     ebp
.text$mn:000052EF                 retn
.text$mn:000052EF ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z endp
.text$mn:000052EF
.text$mn:000052EF _text$mn        ends
.text$mn:000052EF
.text$mn:000052F0 ; ===========================================================================
.text$mn:000052F0
.text$mn:000052F0 ; Segment type: Pure code
.text$mn:000052F0 ; Segment permissions: Read/Execute
.text$mn:000052F0 _text$mn        segment para public 'CODE' use32
.text$mn:000052F0                 assume cs:_text$mn
.text$mn:000052F0                 ;org 52F0h
.text$mn:000052F0 ; COMDAT (pick any)
.text$mn:000052F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000052F0
.text$mn:000052F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000052F0
.text$mn:000052F0 ; Attributes: bp-based frame
.text$mn:000052F0
.text$mn:000052F0 ; int __cdecl std::_Debug_pointer<int>(int, wchar_t *, unsigned int)
.text$mn:000052F0                 public ??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z
.text$mn:000052F0 ??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z proc near
.text$mn:000052F0                                         ; CODE XREF: std::_Debug_range2<int *>(int *,int *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:000052F0                                         ; std::_Debug_range2<int *>(int *,int *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:000052F0
.text$mn:000052F0 arg_0           = dword ptr  8
.text$mn:000052F0 arg_4           = dword ptr  0Ch
.text$mn:000052F0 arg_8           = dword ptr  10h
.text$mn:000052F0
.text$mn:000052F0                 push    ebp
.text$mn:000052F1                 mov     ebp, esp
.text$mn:000052F3                 cmp     [ebp+arg_0], 0
.text$mn:000052F7                 jnz     short loc_530E
.text$mn:000052F9                 mov     eax, [ebp+arg_8]
.text$mn:000052FC                 push    eax             ; unsigned int
.text$mn:000052FD                 mov     ecx, [ebp+arg_4]
.text$mn:00005300                 push    ecx             ; wchar_t *
.text$mn:00005301                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00005306                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000530B                 add     esp, 0Ch
.text$mn:0000530E
.text$mn:0000530E loc_530E:                               ; CODE XREF: std::_Debug_pointer<int>(int *,wchar_t const *,uint)+7j
.text$mn:0000530E                 pop     ebp
.text$mn:0000530F                 retn
.text$mn:0000530F ??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z endp
.text$mn:0000530F
.text$mn:0000530F _text$mn        ends
.text$mn:0000530F
.text$mn:00005310 ; ===========================================================================
.text$mn:00005310
.text$mn:00005310 ; Segment type: Pure code
.text$mn:00005310 ; Segment permissions: Read/Execute
.text$mn:00005310 _text$mn        segment para public 'CODE' use32
.text$mn:00005310                 assume cs:_text$mn
.text$mn:00005310                 ;org 5310h
.text$mn:00005310 ; COMDAT (pick any)
.text$mn:00005310                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005310
.text$mn:00005310 ; =============== S U B R O U T I N E =======================================
.text$mn:00005310
.text$mn:00005310 ; Attributes: bp-based frame
.text$mn:00005310
.text$mn:00005310 ; int __cdecl std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(int, wchar_t *, unsigned int)
.text$mn:00005310                 public ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z
.text$mn:00005310 ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z proc near
.text$mn:00005310                                         ; CODE XREF: std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:00005310                                         ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:00005310
.text$mn:00005310 arg_0           = dword ptr  8
.text$mn:00005310 arg_4           = dword ptr  0Ch
.text$mn:00005310 arg_8           = dword ptr  10h
.text$mn:00005310
.text$mn:00005310                 push    ebp
.text$mn:00005311                 mov     ebp, esp
.text$mn:00005313                 cmp     [ebp+arg_0], 0
.text$mn:00005317                 jnz     short loc_532E
.text$mn:00005319                 mov     eax, [ebp+arg_8]
.text$mn:0000531C                 push    eax             ; unsigned int
.text$mn:0000531D                 mov     ecx, [ebp+arg_4]
.text$mn:00005320                 push    ecx             ; wchar_t *
.text$mn:00005321                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00005326                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000532B                 add     esp, 0Ch
.text$mn:0000532E
.text$mn:0000532E loc_532E:                               ; CODE XREF: std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)+7j
.text$mn:0000532E                 pop     ebp
.text$mn:0000532F                 retn
.text$mn:0000532F ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z endp
.text$mn:0000532F
.text$mn:0000532F _text$mn        ends
.text$mn:0000532F
.text$mn:00005330 ; ===========================================================================
.text$mn:00005330
.text$mn:00005330 ; Segment type: Pure code
.text$mn:00005330 ; Segment permissions: Read/Execute
.text$mn:00005330 _text$mn        segment para public 'CODE' use32
.text$mn:00005330                 assume cs:_text$mn
.text$mn:00005330                 ;org 5330h
.text$mn:00005330 ; COMDAT (pick any)
.text$mn:00005330                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005330
.text$mn:00005330 ; =============== S U B R O U T I N E =======================================
.text$mn:00005330
.text$mn:00005330 ; Attributes: bp-based frame
.text$mn:00005330
.text$mn:00005330 ; int __cdecl std::_Debug_pointer<wchar_t>(int, wchar_t *, unsigned int)
.text$mn:00005330                 public ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z
.text$mn:00005330 ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z proc near
.text$mn:00005330                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+15p
.text$mn:00005330                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+1Dp ...
.text$mn:00005330
.text$mn:00005330 arg_0           = dword ptr  8
.text$mn:00005330 arg_4           = dword ptr  0Ch
.text$mn:00005330 arg_8           = dword ptr  10h
.text$mn:00005330
.text$mn:00005330                 push    ebp
.text$mn:00005331                 mov     ebp, esp
.text$mn:00005333                 cmp     [ebp+arg_0], 0
.text$mn:00005337                 jnz     short loc_534E
.text$mn:00005339                 mov     eax, [ebp+arg_8]
.text$mn:0000533C                 push    eax             ; unsigned int
.text$mn:0000533D                 mov     ecx, [ebp+arg_4]
.text$mn:00005340                 push    ecx             ; wchar_t *
.text$mn:00005341                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00005346                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000534B                 add     esp, 0Ch
.text$mn:0000534E
.text$mn:0000534E loc_534E:                               ; CODE XREF: std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)+7j
.text$mn:0000534E                 pop     ebp
.text$mn:0000534F                 retn
.text$mn:0000534F ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z endp
.text$mn:0000534F
.text$mn:0000534F _text$mn        ends
.text$mn:0000534F
.text$mn:00005350 ; ===========================================================================
.text$mn:00005350
.text$mn:00005350 ; Segment type: Pure code
.text$mn:00005350 ; Segment permissions: Read/Execute
.text$mn:00005350 _text$mn        segment para public 'CODE' use32
.text$mn:00005350                 assume cs:_text$mn
.text$mn:00005350                 ;org 5350h
.text$mn:00005350 ; COMDAT (pick any)
.text$mn:00005350                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005350
.text$mn:00005350 ; =============== S U B R O U T I N E =======================================
.text$mn:00005350
.text$mn:00005350 ; Attributes: bp-based frame
.text$mn:00005350
.text$mn:00005350 ; int __cdecl std::_Debug_range2<int *>(int, int, wchar_t *, unsigned int)
.text$mn:00005350                 public ??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:00005350 ??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:00005350                                         ; CODE XREF: std::_Debug_range<int *>(int *,int *,wchar_t const *,uint)+2Ap
.text$mn:00005350
.text$mn:00005350 arg_0           = dword ptr  8
.text$mn:00005350 arg_4           = dword ptr  0Ch
.text$mn:00005350 arg_8           = dword ptr  10h
.text$mn:00005350 arg_C           = dword ptr  14h
.text$mn:00005350
.text$mn:00005350                 push    ebp
.text$mn:00005351                 mov     ebp, esp
.text$mn:00005353                 mov     eax, [ebp+arg_0]
.text$mn:00005356                 cmp     eax, [ebp+arg_4]
.text$mn:00005359                 jz      short loc_53A0
.text$mn:0000535B                 mov     ecx, [ebp+arg_C]
.text$mn:0000535E                 push    ecx             ; unsigned int
.text$mn:0000535F                 mov     edx, [ebp+arg_8]
.text$mn:00005362                 push    edx             ; wchar_t *
.text$mn:00005363                 mov     eax, [ebp+arg_0]
.text$mn:00005366                 push    eax             ; int
.text$mn:00005367                 call    ??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z ; std::_Debug_pointer<int>(int *,wchar_t const *,uint)
.text$mn:0000536C                 add     esp, 0Ch
.text$mn:0000536F                 mov     ecx, [ebp+arg_C]
.text$mn:00005372                 push    ecx             ; unsigned int
.text$mn:00005373                 mov     edx, [ebp+arg_8]
.text$mn:00005376                 push    edx             ; wchar_t *
.text$mn:00005377                 mov     eax, [ebp+arg_4]
.text$mn:0000537A                 push    eax             ; int
.text$mn:0000537B                 call    ??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z ; std::_Debug_pointer<int>(int *,wchar_t const *,uint)
.text$mn:00005380                 add     esp, 0Ch
.text$mn:00005383                 mov     ecx, [ebp+arg_4]
.text$mn:00005386                 cmp     ecx, [ebp+arg_0]
.text$mn:00005389                 jnb     short loc_53A0
.text$mn:0000538B                 mov     edx, [ebp+arg_C]
.text$mn:0000538E                 push    edx             ; unsigned int
.text$mn:0000538F                 mov     eax, [ebp+arg_8]
.text$mn:00005392                 push    eax             ; wchar_t *
.text$mn:00005393                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:00005398                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000539D                 add     esp, 0Ch
.text$mn:000053A0
.text$mn:000053A0 loc_53A0:                               ; CODE XREF: std::_Debug_range2<int *>(int *,int *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:000053A0                                         ; std::_Debug_range2<int *>(int *,int *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:000053A0                 pop     ebp
.text$mn:000053A1                 retn
.text$mn:000053A1 ??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:000053A1
.text$mn:000053A1 ; ---------------------------------------------------------------------------
.text$mn:000053A2                 align 4
.text$mn:000053A2 _text$mn        ends
.text$mn:000053A2
.text$mn:000053A4 ; ===========================================================================
.text$mn:000053A4
.text$mn:000053A4 ; Segment type: Pure code
.text$mn:000053A4 ; Segment permissions: Read/Execute
.text$mn:000053A4 _text$mn        segment para public 'CODE' use32
.text$mn:000053A4                 assume cs:_text$mn
.text$mn:000053A4                 ;org 53A4h
.text$mn:000053A4 ; COMDAT (pick any)
.text$mn:000053A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000053A4
.text$mn:000053A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000053A4
.text$mn:000053A4 ; Attributes: bp-based frame
.text$mn:000053A4
.text$mn:000053A4 ; int __cdecl std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(int, int, wchar_t *, unsigned int)
.text$mn:000053A4                 public ??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:000053A4 ??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:000053A4                                         ; CODE XREF: std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)+2Ap
.text$mn:000053A4
.text$mn:000053A4 arg_0           = dword ptr  8
.text$mn:000053A4 arg_4           = dword ptr  0Ch
.text$mn:000053A4 arg_8           = dword ptr  10h
.text$mn:000053A4 arg_C           = dword ptr  14h
.text$mn:000053A4
.text$mn:000053A4                 push    ebp
.text$mn:000053A5                 mov     ebp, esp
.text$mn:000053A7                 mov     eax, [ebp+arg_0]
.text$mn:000053AA                 cmp     eax, [ebp+arg_4]
.text$mn:000053AD                 jz      short loc_53F4
.text$mn:000053AF                 mov     ecx, [ebp+arg_C]
.text$mn:000053B2                 push    ecx             ; unsigned int
.text$mn:000053B3                 mov     edx, [ebp+arg_8]
.text$mn:000053B6                 push    edx             ; wchar_t *
.text$mn:000053B7                 mov     eax, [ebp+arg_0]
.text$mn:000053BA                 push    eax             ; int
.text$mn:000053BB                 call    ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:000053C0                 add     esp, 0Ch
.text$mn:000053C3                 mov     ecx, [ebp+arg_C]
.text$mn:000053C6                 push    ecx             ; unsigned int
.text$mn:000053C7                 mov     edx, [ebp+arg_8]
.text$mn:000053CA                 push    edx             ; wchar_t *
.text$mn:000053CB                 mov     eax, [ebp+arg_4]
.text$mn:000053CE                 push    eax             ; int
.text$mn:000053CF                 call    ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:000053D4                 add     esp, 0Ch
.text$mn:000053D7                 mov     ecx, [ebp+arg_4]
.text$mn:000053DA                 cmp     ecx, [ebp+arg_0]
.text$mn:000053DD                 jnb     short loc_53F4
.text$mn:000053DF                 mov     edx, [ebp+arg_C]
.text$mn:000053E2                 push    edx             ; unsigned int
.text$mn:000053E3                 mov     eax, [ebp+arg_8]
.text$mn:000053E6                 push    eax             ; wchar_t *
.text$mn:000053E7                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:000053EC                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000053F1                 add     esp, 0Ch
.text$mn:000053F4
.text$mn:000053F4 loc_53F4:                               ; CODE XREF: std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:000053F4                                         ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:000053F4                 pop     ebp
.text$mn:000053F5                 retn
.text$mn:000053F5 ??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:000053F5
.text$mn:000053F5 ; ---------------------------------------------------------------------------
.text$mn:000053F6                 align 4
.text$mn:000053F6 _text$mn        ends
.text$mn:000053F6
.text$mn:000053F8 ; ===========================================================================
.text$mn:000053F8
.text$mn:000053F8 ; Segment type: Pure code
.text$mn:000053F8 ; Segment permissions: Read/Execute
.text$mn:000053F8 _text$mn        segment para public 'CODE' use32
.text$mn:000053F8                 assume cs:_text$mn
.text$mn:000053F8                 ;org 53F8h
.text$mn:000053F8 ; COMDAT (pick any)
.text$mn:000053F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000053F8
.text$mn:000053F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000053F8
.text$mn:000053F8 ; Attributes: bp-based frame
.text$mn:000053F8
.text$mn:000053F8 ; int __cdecl std::_Debug_range<int *>(int, int, wchar_t *, unsigned int)
.text$mn:000053F8                 public ??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z
.text$mn:000053F8 ??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z proc near
.text$mn:000053F8                                         ; CODE XREF: std::_Uninit_move<int,int,int>(int *,int *,int *,std::_Wrap_alloc<std::allocator<int>> &,int *,std::_Scalar_ptr_iterator_tag)+16p
.text$mn:000053F8
.text$mn:000053F8 var_1           = byte ptr -1
.text$mn:000053F8 arg_0           = dword ptr  8
.text$mn:000053F8 arg_4           = dword ptr  0Ch
.text$mn:000053F8 arg_8           = dword ptr  10h
.text$mn:000053F8 arg_C           = dword ptr  14h
.text$mn:000053F8
.text$mn:000053F8                 push    ebp
.text$mn:000053F9                 mov     ebp, esp
.text$mn:000053FB                 push    ecx
.text$mn:000053FC                 lea     eax, [ebp+arg_0]
.text$mn:000053FF                 push    eax
.text$mn:00005400                 lea     ecx, [ebp+var_1]
.text$mn:00005403                 push    ecx
.text$mn:00005404                 call    ??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ; std::_Iter_cat<int *>(int * const &)
.text$mn:00005409                 add     esp, 8
.text$mn:0000540C                 mov     dl, [eax]
.text$mn:0000540E                 movzx   eax, dl
.text$mn:00005411                 push    eax
.text$mn:00005412                 mov     ecx, [ebp+arg_C]
.text$mn:00005415                 push    ecx             ; unsigned int
.text$mn:00005416                 mov     edx, [ebp+arg_8]
.text$mn:00005419                 push    edx             ; wchar_t *
.text$mn:0000541A                 mov     eax, [ebp+arg_4]
.text$mn:0000541D                 push    eax             ; int
.text$mn:0000541E                 mov     ecx, [ebp+arg_0]
.text$mn:00005421                 push    ecx             ; int
.text$mn:00005422                 call    ??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<int *>(int *,int *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:00005427                 add     esp, 14h
.text$mn:0000542A                 mov     esp, ebp
.text$mn:0000542C                 pop     ebp
.text$mn:0000542D                 retn
.text$mn:0000542D ??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z endp
.text$mn:0000542D
.text$mn:0000542D ; ---------------------------------------------------------------------------
.text$mn:0000542E                 align 10h
.text$mn:0000542E _text$mn        ends
.text$mn:0000542E
.text$mn:00005430 ; ===========================================================================
.text$mn:00005430
.text$mn:00005430 ; Segment type: Pure code
.text$mn:00005430 ; Segment permissions: Read/Execute
.text$mn:00005430 _text$mn        segment para public 'CODE' use32
.text$mn:00005430                 assume cs:_text$mn
.text$mn:00005430                 ;org 5430h
.text$mn:00005430 ; COMDAT (pick any)
.text$mn:00005430                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005430
.text$mn:00005430 ; =============== S U B R O U T I N E =======================================
.text$mn:00005430
.text$mn:00005430 ; Attributes: bp-based frame
.text$mn:00005430
.text$mn:00005430 ; int __cdecl std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(int, int, wchar_t *, unsigned int)
.text$mn:00005430                 public ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z
.text$mn:00005430 ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z proc near
.text$mn:00005430                                         ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+3Cp
.text$mn:00005430
.text$mn:00005430 var_1           = byte ptr -1
.text$mn:00005430 arg_0           = dword ptr  8
.text$mn:00005430 arg_4           = dword ptr  0Ch
.text$mn:00005430 arg_8           = dword ptr  10h
.text$mn:00005430 arg_C           = dword ptr  14h
.text$mn:00005430
.text$mn:00005430                 push    ebp
.text$mn:00005431                 mov     ebp, esp
.text$mn:00005433                 push    ecx
.text$mn:00005434                 lea     eax, [ebp+arg_0]
.text$mn:00005437                 push    eax
.text$mn:00005438                 lea     ecx, [ebp+var_1]
.text$mn:0000543B                 push    ecx
.text$mn:0000543C                 call    ??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::_Iter_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> * const &)
.text$mn:00005441                 add     esp, 8
.text$mn:00005444                 mov     dl, [eax]
.text$mn:00005446                 movzx   eax, dl
.text$mn:00005449                 push    eax
.text$mn:0000544A                 mov     ecx, [ebp+arg_C]
.text$mn:0000544D                 push    ecx             ; unsigned int
.text$mn:0000544E                 mov     edx, [ebp+arg_8]
.text$mn:00005451                 push    edx             ; wchar_t *
.text$mn:00005452                 mov     eax, [ebp+arg_4]
.text$mn:00005455                 push    eax             ; int
.text$mn:00005456                 mov     ecx, [ebp+arg_0]
.text$mn:00005459                 push    ecx             ; int
.text$mn:0000545A                 call    ??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:0000545F                 add     esp, 14h
.text$mn:00005462                 mov     esp, ebp
.text$mn:00005464                 pop     ebp
.text$mn:00005465                 retn
.text$mn:00005465 ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z endp
.text$mn:00005465
.text$mn:00005465 ; ---------------------------------------------------------------------------
.text$mn:00005466                 align 4
.text$mn:00005466 _text$mn        ends
.text$mn:00005466
.text$mn:00005468 ; ===========================================================================
.text$mn:00005468
.text$mn:00005468 ; Segment type: Pure code
.text$mn:00005468 ; Segment permissions: Read/Execute
.text$mn:00005468 _text$mn        segment para public 'CODE' use32
.text$mn:00005468                 assume cs:_text$mn
.text$mn:00005468                 ;org 5468h
.text$mn:00005468 ; COMDAT (pick any)
.text$mn:00005468                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005468
.text$mn:00005468 ; =============== S U B R O U T I N E =======================================
.text$mn:00005468
.text$mn:00005468 ; Attributes: bp-based frame
.text$mn:00005468
.text$mn:00005468 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<int>>>(int *, int *, struct std::_Wrap_alloc<class std::allocator<int>> &)
.text$mn:00005468                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
.text$mn:00005468 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z proc near
.text$mn:00005468                                         ; CODE XREF: std::vector<int,std::allocator<int>>::_Destroy(int *,int *)+21p
.text$mn:00005468
.text$mn:00005468 var_1           = byte ptr -1
.text$mn:00005468 arg_0           = dword ptr  8
.text$mn:00005468 arg_4           = dword ptr  0Ch
.text$mn:00005468 arg_8           = dword ptr  10h
.text$mn:00005468
.text$mn:00005468                 push    ebp
.text$mn:00005469                 mov     ebp, esp
.text$mn:0000546B                 push    ecx
.text$mn:0000546C                 mov     eax, [ebp+arg_4]
.text$mn:0000546F                 push    eax
.text$mn:00005470                 mov     ecx, [ebp+arg_0]
.text$mn:00005473                 push    ecx
.text$mn:00005474                 call    ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>(int *,int *)
.text$mn:00005479                 add     esp, 8
.text$mn:0000547C                 mov     [ebp+var_1], al
.text$mn:0000547F                 movzx   edx, [ebp+var_1]
.text$mn:00005483                 push    edx
.text$mn:00005484                 mov     eax, [ebp+arg_8]
.text$mn:00005487                 push    eax
.text$mn:00005488                 mov     ecx, [ebp+arg_4]
.text$mn:0000548B                 push    ecx
.text$mn:0000548C                 mov     edx, [ebp+arg_0]
.text$mn:0000548F                 push    edx
.text$mn:00005490                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int>>>(int *,int *,std::_Wrap_alloc<std::allocator<int>> &,std::_Scalar_ptr_iterator_tag)
.text$mn:00005495                 add     esp, 10h
.text$mn:00005498                 mov     esp, ebp
.text$mn:0000549A                 pop     ebp
.text$mn:0000549B                 retn
.text$mn:0000549B ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z endp
.text$mn:0000549B
.text$mn:0000549B _text$mn        ends
.text$mn:0000549B
.text$mn:0000549C ; ===========================================================================
.text$mn:0000549C
.text$mn:0000549C ; Segment type: Pure code
.text$mn:0000549C ; Segment permissions: Read/Execute
.text$mn:0000549C _text$mn        segment para public 'CODE' use32
.text$mn:0000549C                 assume cs:_text$mn
.text$mn:0000549C                 ;org 549Ch
.text$mn:0000549C ; COMDAT (pick any)
.text$mn:0000549C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000549C
.text$mn:0000549C ; =============== S U B R O U T I N E =======================================
.text$mn:0000549C
.text$mn:0000549C ; Attributes: bp-based frame
.text$mn:0000549C
.text$mn:0000549C ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<int>>>(int *, int *, struct std::_Wrap_alloc<class std::allocator<int>> &, struct std::_Scalar_ptr_iterator_tag)
.text$mn:0000549C                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
.text$mn:0000549C ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z proc near
.text$mn:0000549C                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<int>>>(int *,int *,std::_Wrap_alloc<std::allocator<int>> &)+28p
.text$mn:0000549C                 push    ebp
.text$mn:0000549D                 mov     ebp, esp
.text$mn:0000549F                 pop     ebp
.text$mn:000054A0                 retn
.text$mn:000054A0 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z endp
.text$mn:000054A0
.text$mn:000054A0 ; ---------------------------------------------------------------------------
.text$mn:000054A1                 align 4
.text$mn:000054A1 _text$mn        ends
.text$mn:000054A1
.text$mn:000054A4 ; ===========================================================================
.text$mn:000054A4
.text$mn:000054A4 ; Segment type: Pure code
.text$mn:000054A4 ; Segment permissions: Read/Execute
.text$mn:000054A4 _text$mn        segment para public 'CODE' use32
.text$mn:000054A4                 assume cs:_text$mn
.text$mn:000054A4                 ;org 54A4h
.text$mn:000054A4 ; COMDAT (pick any)
.text$mn:000054A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000054A4
.text$mn:000054A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000054A4
.text$mn:000054A4 ; Attributes: bp-based frame
.text$mn:000054A4
.text$mn:000054A4 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> &)
.text$mn:000054A4                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$mn:000054A4 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z proc near
.text$mn:000054A4                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+21p
.text$mn:000054A4
.text$mn:000054A4 var_1           = byte ptr -1
.text$mn:000054A4 arg_0           = dword ptr  8
.text$mn:000054A4 arg_4           = dword ptr  0Ch
.text$mn:000054A4 arg_8           = dword ptr  10h
.text$mn:000054A4
.text$mn:000054A4                 push    ebp
.text$mn:000054A5                 mov     ebp, esp
.text$mn:000054A7                 push    ecx
.text$mn:000054A8                 mov     eax, [ebp+arg_4]
.text$mn:000054AB                 push    eax
.text$mn:000054AC                 mov     ecx, [ebp+arg_0]
.text$mn:000054AF                 push    ecx
.text$mn:000054B0                 call    ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000054B5                 add     esp, 8
.text$mn:000054B8                 mov     [ebp+var_1], al
.text$mn:000054BB                 movzx   edx, [ebp+var_1]
.text$mn:000054BF                 push    edx
.text$mn:000054C0                 mov     eax, [ebp+arg_8]
.text$mn:000054C3                 push    eax
.text$mn:000054C4                 mov     ecx, [ebp+arg_4]
.text$mn:000054C7                 push    ecx
.text$mn:000054C8                 mov     edx, [ebp+arg_0]
.text$mn:000054CB                 push    edx
.text$mn:000054CC                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)
.text$mn:000054D1                 add     esp, 10h
.text$mn:000054D4                 mov     esp, ebp
.text$mn:000054D6                 pop     ebp
.text$mn:000054D7                 retn
.text$mn:000054D7 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z endp
.text$mn:000054D7
.text$mn:000054D7 _text$mn        ends
.text$mn:000054D7
.text$mn:000054D8 ; ===========================================================================
.text$mn:000054D8
.text$mn:000054D8 ; Segment type: Pure code
.text$mn:000054D8 ; Segment permissions: Read/Execute
.text$mn:000054D8 _text$mn        segment para public 'CODE' use32
.text$mn:000054D8                 assume cs:_text$mn
.text$mn:000054D8                 ;org 54D8h
.text$mn:000054D8 ; COMDAT (pick any)
.text$mn:000054D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000054D8
.text$mn:000054D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000054D8
.text$mn:000054D8 ; Attributes: bp-based frame
.text$mn:000054D8
.text$mn:000054D8 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> &, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:000054D8                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000054D8 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:000054D8                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+28p
.text$mn:000054D8
.text$mn:000054D8 arg_0           = dword ptr  8
.text$mn:000054D8 arg_4           = dword ptr  0Ch
.text$mn:000054D8 arg_8           = dword ptr  10h
.text$mn:000054D8
.text$mn:000054D8                 push    ebp
.text$mn:000054D9                 mov     ebp, esp
.text$mn:000054DB                 jmp     short loc_54E6
.text$mn:000054DD ; ---------------------------------------------------------------------------
.text$mn:000054DD
.text$mn:000054DD loc_54DD:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+22j
.text$mn:000054DD                 mov     eax, [ebp+arg_0]
.text$mn:000054E0                 add     eax, 1Ch
.text$mn:000054E3                 mov     [ebp+arg_0], eax
.text$mn:000054E6
.text$mn:000054E6 loc_54E6:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+3j
.text$mn:000054E6                 mov     ecx, [ebp+arg_0]
.text$mn:000054E9                 cmp     ecx, [ebp+arg_4]
.text$mn:000054EC                 jz      short loc_54FC
.text$mn:000054EE                 mov     edx, [ebp+arg_0]
.text$mn:000054F1                 push    edx
.text$mn:000054F2                 mov     ecx, [ebp+arg_8]
.text$mn:000054F5                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000054FA                 jmp     short loc_54DD
.text$mn:000054FC ; ---------------------------------------------------------------------------
.text$mn:000054FC
.text$mn:000054FC loc_54FC:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+14j
.text$mn:000054FC                 pop     ebp
.text$mn:000054FD                 retn
.text$mn:000054FD ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:000054FD
.text$mn:000054FD ; ---------------------------------------------------------------------------
.text$mn:000054FE                 align 10h
.text$mn:000054FE _text$mn        ends
.text$mn:000054FE
.text$mn:00005500 ; ===========================================================================
.text$mn:00005500
.text$mn:00005500 ; Segment type: Pure code
.text$mn:00005500 ; Segment permissions: Read/Execute
.text$mn:00005500 _text$mn        segment para public 'CODE' use32
.text$mn:00005500                 assume cs:_text$mn
.text$mn:00005500                 ;org 5500h
.text$mn:00005500 ; COMDAT (pick any)
.text$mn:00005500                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005500
.text$mn:00005500 ; =============== S U B R O U T I N E =======================================
.text$mn:00005500
.text$mn:00005500 ; Attributes: bp-based frame
.text$mn:00005500
.text$mn:00005500 ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<int *>(int * const &)
.text$mn:00005500                 public ??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z
.text$mn:00005500 ??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z proc near
.text$mn:00005500                                         ; CODE XREF: std::_Debug_range<int *>(int *,int *,wchar_t const *,uint)+Cp
.text$mn:00005500
.text$mn:00005500 var_1           = byte ptr -1
.text$mn:00005500 arg_0           = dword ptr  8
.text$mn:00005500
.text$mn:00005500                 push    ebp
.text$mn:00005501                 mov     ebp, esp
.text$mn:00005503                 push    ecx
.text$mn:00005504                 mov     eax, [ebp+arg_0]
.text$mn:00005507                 mov     cl, [ebp+var_1]
.text$mn:0000550A                 mov     [eax], cl
.text$mn:0000550C                 mov     eax, [ebp+arg_0]
.text$mn:0000550F                 mov     esp, ebp
.text$mn:00005511                 pop     ebp
.text$mn:00005512                 retn
.text$mn:00005512 ??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z endp
.text$mn:00005512
.text$mn:00005512 ; ---------------------------------------------------------------------------
.text$mn:00005513                 align 4
.text$mn:00005513 _text$mn        ends
.text$mn:00005513
.text$mn:00005514 ; ===========================================================================
.text$mn:00005514
.text$mn:00005514 ; Segment type: Pure code
.text$mn:00005514 ; Segment permissions: Read/Execute
.text$mn:00005514 _text$mn        segment para public 'CODE' use32
.text$mn:00005514                 assume cs:_text$mn
.text$mn:00005514                 ;org 5514h
.text$mn:00005514 ; COMDAT (pick any)
.text$mn:00005514                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005514
.text$mn:00005514 ; =============== S U B R O U T I N E =======================================
.text$mn:00005514
.text$mn:00005514 ; Attributes: bp-based frame
.text$mn:00005514
.text$mn:00005514 ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * const &)
.text$mn:00005514                 public ??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
.text$mn:00005514 ??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z proc near
.text$mn:00005514                                         ; CODE XREF: std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)+Cp
.text$mn:00005514
.text$mn:00005514 var_1           = byte ptr -1
.text$mn:00005514 arg_0           = dword ptr  8
.text$mn:00005514
.text$mn:00005514                 push    ebp
.text$mn:00005515                 mov     ebp, esp
.text$mn:00005517                 push    ecx
.text$mn:00005518                 mov     eax, [ebp+arg_0]
.text$mn:0000551B                 mov     cl, [ebp+var_1]
.text$mn:0000551E                 mov     [eax], cl
.text$mn:00005520                 mov     eax, [ebp+arg_0]
.text$mn:00005523                 mov     esp, ebp
.text$mn:00005525                 pop     ebp
.text$mn:00005526                 retn
.text$mn:00005526 ??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z endp
.text$mn:00005526
.text$mn:00005526 ; ---------------------------------------------------------------------------
.text$mn:00005527                 align 4
.text$mn:00005527 _text$mn        ends
.text$mn:00005527
.text$mn:00005528 ; ===========================================================================
.text$mn:00005528
.text$mn:00005528 ; Segment type: Pure code
.text$mn:00005528 ; Segment permissions: Read/Execute
.text$mn:00005528 _text$mn        segment para public 'CODE' use32
.text$mn:00005528                 assume cs:_text$mn
.text$mn:00005528                 ;org 5528h
.text$mn:00005528 ; COMDAT (pick any)
.text$mn:00005528                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005528
.text$mn:00005528 ; =============== S U B R O U T I N E =======================================
.text$mn:00005528
.text$mn:00005528 ; Attributes: bp-based frame
.text$mn:00005528
.text$mn:00005528 ; struct std::_Scalar_ptr_iterator_tag __cdecl std::_Ptr_cat<int, int>(int *, int *)
.text$mn:00005528                 public ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z
.text$mn:00005528 ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z proc near
.text$mn:00005528                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<int>>>(int *,int *,std::_Wrap_alloc<std::allocator<int>> &)+Cp
.text$mn:00005528                                         ; std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int>>>(int *,int *,int *,std::_Wrap_alloc<std::allocator<int>> &)+Cp
.text$mn:00005528
.text$mn:00005528 var_1           = byte ptr -1
.text$mn:00005528
.text$mn:00005528                 push    ebp
.text$mn:00005529                 mov     ebp, esp
.text$mn:0000552B                 push    ecx
.text$mn:0000552C                 mov     al, [ebp+var_1]
.text$mn:0000552F                 mov     esp, ebp
.text$mn:00005531                 pop     ebp
.text$mn:00005532                 retn
.text$mn:00005532 ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z endp
.text$mn:00005532
.text$mn:00005532 ; ---------------------------------------------------------------------------
.text$mn:00005533                 align 4
.text$mn:00005533 _text$mn        ends
.text$mn:00005533
.text$mn:00005534 ; ===========================================================================
.text$mn:00005534
.text$mn:00005534 ; Segment type: Pure code
.text$mn:00005534 ; Segment permissions: Read/Execute
.text$mn:00005534 _text$mn        segment para public 'CODE' use32
.text$mn:00005534                 assume cs:_text$mn
.text$mn:00005534                 ;org 5534h
.text$mn:00005534 ; COMDAT (pick any)
.text$mn:00005534                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005534
.text$mn:00005534 ; =============== S U B R O U T I N E =======================================
.text$mn:00005534
.text$mn:00005534 ; Attributes: bp-based frame
.text$mn:00005534
.text$mn:00005534 ; struct std::_Nonscalar_ptr_iterator_tag __cdecl std::_Ptr_cat<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00005534                 public ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z
.text$mn:00005534 ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z proc near
.text$mn:00005534                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+Cp
.text$mn:00005534                                         ; std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+Cp
.text$mn:00005534
.text$mn:00005534 var_1           = byte ptr -1
.text$mn:00005534
.text$mn:00005534                 push    ebp
.text$mn:00005535                 mov     ebp, esp
.text$mn:00005537                 push    ecx
.text$mn:00005538                 mov     al, [ebp+var_1]
.text$mn:0000553B                 mov     esp, ebp
.text$mn:0000553D                 pop     ebp
.text$mn:0000553E                 retn
.text$mn:0000553E ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z endp
.text$mn:0000553E
.text$mn:0000553E ; ---------------------------------------------------------------------------
.text$mn:0000553F                 align 10h
.text$mn:0000553F _text$mn        ends
.text$mn:0000553F
.text$mn:00005540 ; ===========================================================================
.text$mn:00005540
.text$mn:00005540 ; Segment type: Pure code
.text$mn:00005540 ; Segment permissions: Read/Execute
.text$mn:00005540 _text$mn        segment para public 'CODE' use32
.text$mn:00005540                 assume cs:_text$mn
.text$mn:00005540                 ;org 5540h
.text$mn:00005540 ; COMDAT (pick any)
.text$mn:00005540                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005540
.text$mn:00005540 ; =============== S U B R O U T I N E =======================================
.text$mn:00005540
.text$mn:00005540 ; Attributes: bp-based frame
.text$mn:00005540
.text$mn:00005540 ; int * & __cdecl std::_Rechecked<int *, int *>(int * &, int *)
.text$mn:00005540                 public ??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z
.text$mn:00005540 ??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z proc near
.text$mn:00005540                                         ; CODE XREF: std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int>>>(int *,int *,int *,std::_Wrap_alloc<std::allocator<int>> &)+3Bp
.text$mn:00005540
.text$mn:00005540 arg_0           = dword ptr  8
.text$mn:00005540 arg_4           = dword ptr  0Ch
.text$mn:00005540
.text$mn:00005540                 push    ebp
.text$mn:00005541                 mov     ebp, esp
.text$mn:00005543                 mov     eax, [ebp+arg_0]
.text$mn:00005546                 mov     ecx, [ebp+arg_4]
.text$mn:00005549                 mov     [eax], ecx
.text$mn:0000554B                 mov     eax, [ebp+arg_0]
.text$mn:0000554E                 pop     ebp
.text$mn:0000554F                 retn
.text$mn:0000554F ??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z endp
.text$mn:0000554F
.text$mn:0000554F _text$mn        ends
.text$mn:0000554F
.text$mn:00005550 ; ===========================================================================
.text$mn:00005550
.text$mn:00005550 ; Segment type: Pure code
.text$mn:00005550 ; Segment permissions: Read/Execute
.text$mn:00005550 _text$mn        segment para public 'CODE' use32
.text$mn:00005550                 assume cs:_text$mn
.text$mn:00005550                 ;org 5550h
.text$mn:00005550 ; COMDAT (pick any)
.text$mn:00005550                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005550
.text$mn:00005550 ; =============== S U B R O U T I N E =======================================
.text$mn:00005550
.text$mn:00005550 ; Attributes: bp-based frame
.text$mn:00005550
.text$mn:00005550 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * & __cdecl std::_Rechecked<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00005550                 public ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z
.text$mn:00005550 ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z proc near
.text$mn:00005550                                         ; CODE XREF: std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+3Bp
.text$mn:00005550
.text$mn:00005550 arg_0           = dword ptr  8
.text$mn:00005550 arg_4           = dword ptr  0Ch
.text$mn:00005550
.text$mn:00005550                 push    ebp
.text$mn:00005551                 mov     ebp, esp
.text$mn:00005553                 mov     eax, [ebp+arg_0]
.text$mn:00005556                 mov     ecx, [ebp+arg_4]
.text$mn:00005559                 mov     [eax], ecx
.text$mn:0000555B                 mov     eax, [ebp+arg_0]
.text$mn:0000555E                 pop     ebp
.text$mn:0000555F                 retn
.text$mn:0000555F ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z endp
.text$mn:0000555F
.text$mn:0000555F _text$mn        ends
.text$mn:0000555F
.text$mn:00005560 ; ===========================================================================
.text$mn:00005560
.text$mn:00005560 ; Segment type: Pure code
.text$mn:00005560 ; Segment permissions: Read/Execute
.text$mn:00005560 _text$mn        segment para public 'CODE' use32
.text$mn:00005560                 assume cs:_text$mn
.text$mn:00005560                 ;org 5560h
.text$mn:00005560 ; COMDAT (pick any)
.text$mn:00005560                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005560
.text$mn:00005560 ; =============== S U B R O U T I N E =======================================
.text$mn:00005560
.text$mn:00005560 ; Attributes: bp-based frame
.text$mn:00005560
.text$mn:00005560 ; protected: int * __thiscall std::vector<int, class std::allocator<int>>::_Umove<int *>(int *, int *, int *)
.text$mn:00005560                 public ??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z
.text$mn:00005560 ??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z proc near
.text$mn:00005560                                         ; CODE XREF: std::vector<int,std::allocator<int>>::_Reallocate(uint)+65p
.text$mn:00005560
.text$mn:00005560 var_8           = dword ptr -8
.text$mn:00005560 var_1           = byte ptr -1
.text$mn:00005560 arg_0           = dword ptr  8
.text$mn:00005560 arg_4           = dword ptr  0Ch
.text$mn:00005560 arg_8           = dword ptr  10h
.text$mn:00005560
.text$mn:00005560                 push    ebp
.text$mn:00005561                 mov     ebp, esp
.text$mn:00005563                 sub     esp, 8
.text$mn:00005566                 mov     [ebp+var_8], ecx
.text$mn:00005569                 lea     eax, [ebp+var_1]
.text$mn:0000556C                 push    eax
.text$mn:0000556D                 mov     ecx, [ebp+var_8]
.text$mn:00005570                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int>>>::_Getal(void)
.text$mn:00005575                 lea     ecx, [ebp+var_1]
.text$mn:00005578                 push    ecx
.text$mn:00005579                 mov     edx, [ebp+arg_8]
.text$mn:0000557C                 push    edx
.text$mn:0000557D                 mov     eax, [ebp+arg_4]
.text$mn:00005580                 push    eax
.text$mn:00005581                 mov     ecx, [ebp+arg_0]
.text$mn:00005584                 push    ecx
.text$mn:00005585                 call    ??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int>>>(int *,int *,int *,std::_Wrap_alloc<std::allocator<int>> &)
.text$mn:0000558A                 add     esp, 10h
.text$mn:0000558D                 mov     esp, ebp
.text$mn:0000558F                 pop     ebp
.text$mn:00005590                 retn    0Ch
.text$mn:00005590 ??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z endp
.text$mn:00005590
.text$mn:00005590 ; ---------------------------------------------------------------------------
.text$mn:00005593                 align 4
.text$mn:00005593 _text$mn        ends
.text$mn:00005593
.text$mn:00005594 ; ===========================================================================
.text$mn:00005594
.text$mn:00005594 ; Segment type: Pure code
.text$mn:00005594 ; Segment permissions: Read/Execute
.text$mn:00005594 _text$mn        segment para public 'CODE' use32
.text$mn:00005594                 assume cs:_text$mn
.text$mn:00005594                 ;org 5594h
.text$mn:00005594 ; COMDAT (pick any)
.text$mn:00005594                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005594
.text$mn:00005594 ; =============== S U B R O U T I N E =======================================
.text$mn:00005594
.text$mn:00005594 ; Attributes: bp-based frame
.text$mn:00005594
.text$mn:00005594 ; protected: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Umove<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00005594                 public ??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PAV21@00@Z
.text$mn:00005594 ??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PAV21@00@Z proc near
.text$mn:00005594                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+65p
.text$mn:00005594
.text$mn:00005594 var_8           = dword ptr -8
.text$mn:00005594 var_1           = byte ptr -1
.text$mn:00005594 arg_0           = dword ptr  8
.text$mn:00005594 arg_4           = dword ptr  0Ch
.text$mn:00005594 arg_8           = dword ptr  10h
.text$mn:00005594
.text$mn:00005594                 push    ebp
.text$mn:00005595                 mov     ebp, esp
.text$mn:00005597                 sub     esp, 8
.text$mn:0000559A                 mov     [ebp+var_8], ecx
.text$mn:0000559D                 lea     eax, [ebp+var_1]
.text$mn:000055A0                 push    eax
.text$mn:000055A1                 mov     ecx, [ebp+var_8]
.text$mn:000055A4                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:000055A9                 lea     ecx, [ebp+var_1]
.text$mn:000055AC                 push    ecx
.text$mn:000055AD                 mov     edx, [ebp+arg_8]
.text$mn:000055B0                 push    edx
.text$mn:000055B1                 mov     eax, [ebp+arg_4]
.text$mn:000055B4                 push    eax
.text$mn:000055B5                 mov     ecx, [ebp+arg_0]
.text$mn:000055B8                 push    ecx
.text$mn:000055B9                 call    ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:000055BE                 add     esp, 10h
.text$mn:000055C1                 mov     esp, ebp
.text$mn:000055C3                 pop     ebp
.text$mn:000055C4                 retn    0Ch
.text$mn:000055C4 ??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PAV21@00@Z endp
.text$mn:000055C4
.text$mn:000055C4 ; ---------------------------------------------------------------------------
.text$mn:000055C7                 align 4
.text$mn:000055C7 _text$mn        ends
.text$mn:000055C7
.text$mn:000055C8 ; ===========================================================================
.text$mn:000055C8
.text$mn:000055C8 ; Segment type: Pure code
.text$mn:000055C8 ; Segment permissions: Read/Execute
.text$mn:000055C8 _text$mn        segment para public 'CODE' use32
.text$mn:000055C8                 assume cs:_text$mn
.text$mn:000055C8                 ;org 55C8h
.text$mn:000055C8 ; COMDAT (pick any)
.text$mn:000055C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000055C8
.text$mn:000055C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000055C8
.text$mn:000055C8 ; Attributes: bp-based frame
.text$mn:000055C8
.text$mn:000055C8 ; int * __cdecl std::_Unchecked<int *>(int *)
.text$mn:000055C8                 public ??$_Unchecked@PAH@std@@YAPAHPAH@Z
.text$mn:000055C8 ??$_Unchecked@PAH@std@@YAPAHPAH@Z proc near
.text$mn:000055C8                                         ; CODE XREF: std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int>>>(int *,int *,int *,std::_Wrap_alloc<std::allocator<int>> &)+Bp
.text$mn:000055C8                                         ; std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int>>>(int *,int *,int *,std::_Wrap_alloc<std::allocator<int>> &)+18p ...
.text$mn:000055C8
.text$mn:000055C8 arg_0           = dword ptr  8
.text$mn:000055C8
.text$mn:000055C8                 push    ebp
.text$mn:000055C9                 mov     ebp, esp
.text$mn:000055CB                 mov     eax, [ebp+arg_0]
.text$mn:000055CE                 pop     ebp
.text$mn:000055CF                 retn
.text$mn:000055CF ??$_Unchecked@PAH@std@@YAPAHPAH@Z endp
.text$mn:000055CF
.text$mn:000055CF _text$mn        ends
.text$mn:000055CF
.text$mn:000055D0 ; ===========================================================================
.text$mn:000055D0
.text$mn:000055D0 ; Segment type: Pure code
.text$mn:000055D0 ; Segment permissions: Read/Execute
.text$mn:000055D0 _text$mn        segment para public 'CODE' use32
.text$mn:000055D0                 assume cs:_text$mn
.text$mn:000055D0                 ;org 55D0h
.text$mn:000055D0 ; COMDAT (pick any)
.text$mn:000055D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000055D0
.text$mn:000055D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000055D0
.text$mn:000055D0 ; Attributes: bp-based frame
.text$mn:000055D0
.text$mn:000055D0 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Unchecked<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:000055D0                 public ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z
.text$mn:000055D0 ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z proc near
.text$mn:000055D0                                         ; CODE XREF: std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+Bp
.text$mn:000055D0                                         ; std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+18p ...
.text$mn:000055D0
.text$mn:000055D0 arg_0           = dword ptr  8
.text$mn:000055D0
.text$mn:000055D0                 push    ebp
.text$mn:000055D1                 mov     ebp, esp
.text$mn:000055D3                 mov     eax, [ebp+arg_0]
.text$mn:000055D6                 pop     ebp
.text$mn:000055D7                 retn
.text$mn:000055D7 ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z endp
.text$mn:000055D7
.text$mn:000055D7 _text$mn        ends
.text$mn:000055D7
.text$mn:000055D8 ; ===========================================================================
.text$mn:000055D8
.text$mn:000055D8 ; Segment type: Pure code
.text$mn:000055D8 ; Segment permissions: Read/Execute
.text$mn:000055D8 _text$mn        segment para public 'CODE' use32
.text$mn:000055D8                 assume cs:_text$mn
.text$mn:000055D8                 ;org 55D8h
.text$mn:000055D8 ; COMDAT (pick any)
.text$mn:000055D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000055D8
.text$mn:000055D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000055D8
.text$mn:000055D8 ; Attributes: bp-based frame
.text$mn:000055D8
.text$mn:000055D8 ; int __cdecl std::_Uninit_move<int,int,int>(void *Src, int, void *Dst)
.text$mn:000055D8                 public ??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
.text$mn:000055D8 ??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z proc near
.text$mn:000055D8                                         ; CODE XREF: std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int>>>(int *,int *,int *,std::_Wrap_alloc<std::allocator<int>> &)+39p
.text$mn:000055D8
.text$mn:000055D8 var_4           = dword ptr -4
.text$mn:000055D8 Src             = dword ptr  8
.text$mn:000055D8 arg_4           = dword ptr  0Ch
.text$mn:000055D8 Dst             = dword ptr  10h
.text$mn:000055D8
.text$mn:000055D8                 push    ebp
.text$mn:000055D9                 mov     ebp, esp
.text$mn:000055DB                 push    ecx
.text$mn:000055DC                 push    1D6h            ; unsigned int
.text$mn:000055E1                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000055E6                 mov     eax, [ebp+arg_4]
.text$mn:000055E9                 push    eax             ; int
.text$mn:000055EA                 mov     ecx, [ebp+Src]
.text$mn:000055ED                 push    ecx             ; int
.text$mn:000055EE                 call    ??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z ; std::_Debug_range<int *>(int *,int *,wchar_t const *,uint)
.text$mn:000055F3                 add     esp, 10h
.text$mn:000055F6                 push    1D7h            ; unsigned int
.text$mn:000055FB                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005600                 mov     edx, [ebp+Dst]
.text$mn:00005603                 push    edx             ; int
.text$mn:00005604                 call    ??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z ; std::_Debug_pointer<int>(int *,wchar_t const *,uint)
.text$mn:00005609                 add     esp, 0Ch
.text$mn:0000560C                 mov     eax, [ebp+arg_4]
.text$mn:0000560F                 sub     eax, [ebp+Src]
.text$mn:00005612                 sar     eax, 2
.text$mn:00005615                 mov     [ebp+var_4], eax
.text$mn:00005618                 mov     ecx, [ebp+var_4]
.text$mn:0000561B                 shl     ecx, 2
.text$mn:0000561E                 push    ecx             ; Size
.text$mn:0000561F                 mov     edx, [ebp+Src]
.text$mn:00005622                 push    edx             ; Src
.text$mn:00005623                 mov     eax, [ebp+Dst]
.text$mn:00005626                 push    eax             ; Dst
.text$mn:00005627                 call    _memmove
.text$mn:0000562C                 add     esp, 0Ch
.text$mn:0000562F                 mov     ecx, [ebp+var_4]
.text$mn:00005632                 lea     eax, [eax+ecx*4]
.text$mn:00005635                 mov     esp, ebp
.text$mn:00005637                 pop     ebp
.text$mn:00005638                 retn
.text$mn:00005638 ??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z endp
.text$mn:00005638
.text$mn:00005638 ; ---------------------------------------------------------------------------
.text$mn:00005639                 align 4
.text$mn:00005639 _text$mn        ends
.text$mn:00005639
.text$mn:0000563C ; ===========================================================================
.text$mn:0000563C
.text$mn:0000563C ; Segment type: Pure code
.text$mn:0000563C ; Segment permissions: Read/Execute
.text$mn:0000563C _text$mn        segment para public 'CODE' use32
.text$mn:0000563C                 assume cs:_text$mn
.text$mn:0000563C                 ;org 563Ch
.text$mn:0000563C ; COMDAT (pick any)
.text$mn:0000563C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000563C
.text$mn:0000563C ; =============== S U B R O U T I N E =======================================
.text$mn:0000563C
.text$mn:0000563C ; Attributes: bp-based frame
.text$mn:0000563C
.text$mn:0000563C ; int __cdecl std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int>>>(void *Src, int, void *Dst, int)
.text$mn:0000563C                 public ??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
.text$mn:0000563C ??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z proc near
.text$mn:0000563C                                         ; CODE XREF: std::_Uninitialized_move<int *,int *,std::_Wrap_alloc<std::allocator<int>>>(int *,int *,int *,std::_Wrap_alloc<std::allocator<int>> &)+2Ep
.text$mn:0000563C
.text$mn:0000563C var_1           = byte ptr -1
.text$mn:0000563C Src             = dword ptr  8
.text$mn:0000563C arg_4           = dword ptr  0Ch
.text$mn:0000563C Dst             = dword ptr  10h
.text$mn:0000563C arg_C           = dword ptr  14h
.text$mn:0000563C
.text$mn:0000563C                 push    ebp
.text$mn:0000563D                 mov     ebp, esp
.text$mn:0000563F                 push    ecx
.text$mn:00005640                 mov     eax, [ebp+Dst]
.text$mn:00005643                 push    eax
.text$mn:00005644                 mov     ecx, [ebp+Src]
.text$mn:00005647                 push    ecx
.text$mn:00005648                 call    ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>(int *,int *)
.text$mn:0000564D                 add     esp, 8
.text$mn:00005650                 mov     [ebp+var_1], al
.text$mn:00005653                 movzx   edx, [ebp+var_1]
.text$mn:00005657                 push    edx
.text$mn:00005658                 mov     eax, [ebp+Src]
.text$mn:0000565B                 push    eax
.text$mn:0000565C                 call    ??$_Val_type@PAH@std@@YAPAHPAH@Z ; std::_Val_type<int *>(int *)
.text$mn:00005661                 add     esp, 4
.text$mn:00005664                 push    eax
.text$mn:00005665                 mov     ecx, [ebp+arg_C]
.text$mn:00005668                 push    ecx
.text$mn:00005669                 mov     edx, [ebp+Dst]
.text$mn:0000566C                 push    edx             ; Dst
.text$mn:0000566D                 mov     eax, [ebp+arg_4]
.text$mn:00005670                 push    eax             ; int
.text$mn:00005671                 mov     ecx, [ebp+Src]
.text$mn:00005674                 push    ecx             ; Src
.text$mn:00005675                 call    ??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<int,int,int>(int *,int *,int *,std::_Wrap_alloc<std::allocator<int>> &,int *,std::_Scalar_ptr_iterator_tag)
.text$mn:0000567A                 add     esp, 18h
.text$mn:0000567D                 mov     esp, ebp
.text$mn:0000567F                 pop     ebp
.text$mn:00005680                 retn
.text$mn:00005680 ??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z endp
.text$mn:00005680
.text$mn:00005680 ; ---------------------------------------------------------------------------
.text$mn:00005681                 align 4
.text$mn:00005681 _text$mn        ends
.text$mn:00005681
.text$mn:00005684 ; ===========================================================================
.text$mn:00005684
.text$mn:00005684 ; Segment type: Pure code
.text$mn:00005684 ; Segment permissions: Read/Execute
.text$mn:00005684 _text$mn        segment para public 'CODE' use32
.text$mn:00005684                 assume cs:_text$mn
.text$mn:00005684                 ;org 5684h
.text$mn:00005684 ; COMDAT (pick any)
.text$mn:00005684                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005684
.text$mn:00005684 ; =============== S U B R O U T I N E =======================================
.text$mn:00005684
.text$mn:00005684 ; Attributes: bp-based frame
.text$mn:00005684
.text$mn:00005684 ; int __cdecl std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(int, int, void *, int)
.text$mn:00005684                 public ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$mn:00005684 ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z proc near
.text$mn:00005684                                         ; CODE XREF: std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+2Ep
.text$mn:00005684
.text$mn:00005684 var_1           = byte ptr -1
.text$mn:00005684 arg_0           = dword ptr  8
.text$mn:00005684 arg_4           = dword ptr  0Ch
.text$mn:00005684 arg_8           = dword ptr  10h
.text$mn:00005684 arg_C           = dword ptr  14h
.text$mn:00005684
.text$mn:00005684                 push    ebp
.text$mn:00005685                 mov     ebp, esp
.text$mn:00005687                 push    ecx
.text$mn:00005688                 mov     eax, [ebp+arg_8]
.text$mn:0000568B                 push    eax
.text$mn:0000568C                 mov     ecx, [ebp+arg_0]
.text$mn:0000568F                 push    ecx
.text$mn:00005690                 call    ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005695                 add     esp, 8
.text$mn:00005698                 mov     [ebp+var_1], al
.text$mn:0000569B                 movzx   edx, [ebp+var_1]
.text$mn:0000569F                 push    edx
.text$mn:000056A0                 mov     eax, [ebp+arg_0]
.text$mn:000056A3                 push    eax
.text$mn:000056A4                 call    ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Val_type<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000056A9                 add     esp, 4
.text$mn:000056AC                 push    eax
.text$mn:000056AD                 mov     ecx, [ebp+arg_C]
.text$mn:000056B0                 push    ecx             ; int
.text$mn:000056B1                 mov     edx, [ebp+arg_8]
.text$mn:000056B4                 push    edx             ; void *
.text$mn:000056B5                 mov     eax, [ebp+arg_4]
.text$mn:000056B8                 push    eax             ; int
.text$mn:000056B9                 mov     ecx, [ebp+arg_0]
.text$mn:000056BC                 push    ecx             ; int
.text$mn:000056BD                 call    ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)
.text$mn:000056C2                 add     esp, 18h
.text$mn:000056C5                 mov     esp, ebp
.text$mn:000056C7                 pop     ebp
.text$mn:000056C8                 retn
.text$mn:000056C8 ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z endp
.text$mn:000056C8
.text$mn:000056C8 ; ---------------------------------------------------------------------------
.text$mn:000056C9                 align 4
.text$mn:000056C9 _text$mn        ends
.text$mn:000056C9
.text$mn:000056CC ; ===========================================================================
.text$mn:000056CC
.text$mn:000056CC ; Segment type: Pure code
.text$mn:000056CC ; Segment permissions: Read/Execute
.text$mn:000056CC _text$mn        segment para public 'CODE' use32
.text$mn:000056CC                 assume cs:_text$mn
.text$mn:000056CC                 ;org 56CCh
.text$mn:000056CC ; COMDAT (pick any)
.text$mn:000056CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000056CC
.text$mn:000056CC ; =============== S U B R O U T I N E =======================================
.text$mn:000056CC
.text$mn:000056CC ; Attributes: bp-based frame
.text$mn:000056CC
.text$mn:000056CC ; int __cdecl std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(int, int, void *, int)
.text$mn:000056CC                 public ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000056CC ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:000056CC                                         ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+39p
.text$mn:000056CC
.text$mn:000056CC var_14          = dword ptr -14h
.text$mn:000056CC var_10          = dword ptr -10h
.text$mn:000056CC var_C           = dword ptr -0Ch
.text$mn:000056CC var_4           = dword ptr -4
.text$mn:000056CC arg_0           = dword ptr  8
.text$mn:000056CC arg_4           = dword ptr  0Ch
.text$mn:000056CC arg_8           = dword ptr  10h
.text$mn:000056CC arg_C           = dword ptr  14h
.text$mn:000056CC
.text$mn:000056CC ; FUNCTION CHUNK AT .text$mn:00005793 SIZE 00000009 BYTES
.text$mn:000056CC ; FUNCTION CHUNK AT .text$mn:000057A3 SIZE 00000015 BYTES
.text$mn:000056CC
.text$mn:000056CC                 push    ebp
.text$mn:000056CD                 mov     ebp, esp
.text$mn:000056CF                 push    0FFFFFFFFh
.text$mn:000056D1                 push    offset __ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000056D6                 mov     eax, large fs:0
.text$mn:000056DC                 push    eax
.text$mn:000056DD                 push    ecx
.text$mn:000056DE                 push    ecx
.text$mn:000056DF                 push    ebx
.text$mn:000056E0                 push    esi
.text$mn:000056E1                 push    edi
.text$mn:000056E2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000056E7                 xor     eax, ebp
.text$mn:000056E9                 push    eax
.text$mn:000056EA                 lea     eax, [ebp+var_C]
.text$mn:000056ED                 mov     large fs:0, eax
.text$mn:000056F3                 mov     [ebp+var_10], esp
.text$mn:000056F6                 push    1B6h            ; unsigned int
.text$mn:000056FB                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005700                 mov     eax, [ebp+arg_4]
.text$mn:00005703                 push    eax             ; int
.text$mn:00005704                 mov     ecx, [ebp+arg_0]
.text$mn:00005707                 push    ecx             ; int
.text$mn:00005708                 call    ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z ; std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:0000570D                 add     esp, 10h
.text$mn:00005710                 push    1B7h            ; unsigned int
.text$mn:00005715                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000571A                 mov     edx, [ebp+arg_8]
.text$mn:0000571D                 push    edx             ; int
.text$mn:0000571E                 call    ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:00005723                 add     esp, 0Ch
.text$mn:00005726                 mov     eax, [ebp+arg_8]
.text$mn:00005729                 mov     [ebp+var_14], eax
.text$mn:0000572C                 mov     [ebp+var_4], 0
.text$mn:00005733                 jmp     short loc_5747
.text$mn:00005735 ; ---------------------------------------------------------------------------
.text$mn:00005735
.text$mn:00005735 loc_5735:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+93j
.text$mn:00005735                 mov     ecx, [ebp+arg_8]
.text$mn:00005738                 add     ecx, 1Ch
.text$mn:0000573B                 mov     [ebp+arg_8], ecx
.text$mn:0000573E                 mov     edx, [ebp+arg_0]
.text$mn:00005741                 add     edx, 1Ch
.text$mn:00005744                 mov     [ebp+arg_0], edx
.text$mn:00005747
.text$mn:00005747 loc_5747:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+67j
.text$mn:00005747                 mov     eax, [ebp+arg_0]
.text$mn:0000574A                 cmp     eax, [ebp+arg_4]
.text$mn:0000574D                 jz      short loc_5761
.text$mn:0000574F                 mov     ecx, [ebp+arg_0]
.text$mn:00005752                 push    ecx             ; int
.text$mn:00005753                 mov     edx, [ebp+arg_8]
.text$mn:00005756                 push    edx             ; void *
.text$mn:00005757                 mov     ecx, [ebp+arg_C]
.text$mn:0000575A                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000575F                 jmp     short loc_5735
.text$mn:00005761 ; ---------------------------------------------------------------------------
.text$mn:00005761
.text$mn:00005761 loc_5761:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+81j
.text$mn:00005761                 jmp     short loc_5793
.text$mn:00005761 ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00005761
.text$mn:00005763
.text$mn:00005763 ; =============== S U B R O U T I N E =======================================
.text$mn:00005763
.text$mn:00005763 ; Attributes: noreturn
.text$mn:00005763
.text$mn:00005763 __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
.text$mn:00005763                                         ; DATA XREF: .xdata$x:0000CFE8o
.text$mn:00005763                 jmp     short loc_576E
.text$mn:00005765 ; ---------------------------------------------------------------------------
.text$mn:00005765
.text$mn:00005765 loc_5765:                               ; CODE XREF: __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Fj
.text$mn:00005765                 mov     eax, [ebp-14h]
.text$mn:00005768                 add     eax, 1Ch
.text$mn:0000576B                 mov     [ebp-14h], eax
.text$mn:0000576E
.text$mn:0000576E loc_576E:                               ; CODE XREF: __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0j
.text$mn:0000576E                 mov     ecx, [ebp-14h]
.text$mn:00005771                 cmp     ecx, [ebp+10h]
.text$mn:00005774                 jz      short loc_5784
.text$mn:00005776                 mov     edx, [ebp-14h]
.text$mn:00005779                 push    edx
.text$mn:0000577A                 mov     ecx, [ebp+14h]
.text$mn:0000577D                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005782                 jmp     short loc_5765
.text$mn:00005784 ; ---------------------------------------------------------------------------
.text$mn:00005784
.text$mn:00005784 loc_5784:                               ; CODE XREF: __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+11j
.text$mn:00005784                 push    0
.text$mn:00005786                 push    0
.text$mn:00005788                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00005788 __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 endp
.text$mn:00005788
.text$mn:0000578D ; ---------------------------------------------------------------------------
.text$mn:0000578D                 mov     eax, offset $LN13_0
.text$mn:00005792                 retn
.text$mn:00005793 ; ---------------------------------------------------------------------------
.text$mn:00005793 ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00005793
.text$mn:00005793 loc_5793:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag):loc_5761j
.text$mn:00005793                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000579A                 jmp     short loc_57A3
.text$mn:0000579A ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:0000579C
.text$mn:0000579C ; =============== S U B R O U T I N E =======================================
.text$mn:0000579C
.text$mn:0000579C
.text$mn:0000579C $LN13_0         proc near               ; DATA XREF: .text$mn:0000578Do
.text$mn:0000579C                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:0000579C $LN13_0         endp ; sp-analysis failed
.text$mn:0000579C
.text$mn:000057A3 ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000057A3
.text$mn:000057A3 loc_57A3:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+CEj
.text$mn:000057A3                 mov     eax, [ebp+arg_8]
.text$mn:000057A6                 mov     ecx, [ebp+var_C]
.text$mn:000057A9                 mov     large fs:0, ecx
.text$mn:000057B0                 pop     ecx
.text$mn:000057B1                 pop     edi
.text$mn:000057B2                 pop     esi
.text$mn:000057B3                 pop     ebx
.text$mn:000057B4                 mov     esp, ebp
.text$mn:000057B6                 pop     ebp
.text$mn:000057B7                 retn
.text$mn:000057B7 ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000057B7 _text$mn        ends
.text$mn:000057B7
.text$x:000057B8 ; ===========================================================================
.text$x:000057B8
.text$x:000057B8 ; Segment type: Pure code
.text$x:000057B8 ; Segment permissions: Read/Execute
.text$x:000057B8 _text$x         segment para public 'CODE' use32
.text$x:000057B8                 assume cs:_text$x
.text$x:000057B8                 ;org 57B8h
.text$x:000057B8 ; COMDAT (pick associative to section at 56CC)
.text$x:000057B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000057B8
.text$x:000057B8 ; =============== S U B R O U T I N E =======================================
.text$x:000057B8
.text$x:000057B8
.text$x:000057B8 __ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$x:000057B8                                         ; DATA XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+5o
.text$x:000057B8
.text$x:000057B8 arg_4           = dword ptr  8
.text$x:000057B8
.text$x:000057B8                 mov     edx, [esp+arg_4]
.text$x:000057BC                 lea     eax, [edx+0Ch]
.text$x:000057BF                 mov     ecx, [edx-18h]
.text$x:000057C2                 xor     ecx, eax
.text$x:000057C4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000057C9                 mov     eax, offset __ehfuncinfo$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$x:000057CE                 jmp     ___CxxFrameHandler3
.text$x:000057CE __ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$x:000057CE
.text$x:000057CE ; ---------------------------------------------------------------------------
.text$x:000057D3                 align 4
.text$x:000057D3 _text$x         ends
.text$x:000057D3
.text$mn:000057D4 ; ===========================================================================
.text$mn:000057D4
.text$mn:000057D4 ; Segment type: Pure code
.text$mn:000057D4 ; Segment permissions: Read/Execute
.text$mn:000057D4 _text$mn        segment para public 'CODE' use32
.text$mn:000057D4                 assume cs:_text$mn
.text$mn:000057D4                 ;org 57D4h
.text$mn:000057D4 ; COMDAT (pick any)
.text$mn:000057D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000057D4
.text$mn:000057D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000057D4
.text$mn:000057D4 ; Attributes: bp-based frame
.text$mn:000057D4
.text$mn:000057D4 ; int * __cdecl std::_Uninitialized_move<int *, int *, struct std::_Wrap_alloc<class std::allocator<int>>>(int *, int *, int *, struct std::_Wrap_alloc<class std::allocator<int>> &)
.text$mn:000057D4                 public ??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
.text$mn:000057D4 ??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z proc near
.text$mn:000057D4                                         ; CODE XREF: std::vector<int,std::allocator<int>>::_Umove<int *>(int *,int *,int *)+25p
.text$mn:000057D4
.text$mn:000057D4 arg_0           = dword ptr  8
.text$mn:000057D4 arg_4           = dword ptr  0Ch
.text$mn:000057D4 arg_8           = dword ptr  10h
.text$mn:000057D4 arg_C           = dword ptr  14h
.text$mn:000057D4
.text$mn:000057D4                 push    ebp
.text$mn:000057D5                 mov     ebp, esp
.text$mn:000057D7                 mov     eax, [ebp+arg_C]
.text$mn:000057DA                 push    eax             ; int
.text$mn:000057DB                 mov     ecx, [ebp+arg_8]
.text$mn:000057DE                 push    ecx
.text$mn:000057DF                 call    ??$_Unchecked@PAH@std@@YAPAHPAH@Z ; std::_Unchecked<int *>(int *)
.text$mn:000057E4                 add     esp, 4
.text$mn:000057E7                 push    eax             ; Dst
.text$mn:000057E8                 mov     edx, [ebp+arg_4]
.text$mn:000057EB                 push    edx
.text$mn:000057EC                 call    ??$_Unchecked@PAH@std@@YAPAHPAH@Z ; std::_Unchecked<int *>(int *)
.text$mn:000057F1                 add     esp, 4
.text$mn:000057F4                 push    eax             ; int
.text$mn:000057F5                 mov     eax, [ebp+arg_0]
.text$mn:000057F8                 push    eax
.text$mn:000057F9                 call    ??$_Unchecked@PAH@std@@YAPAHPAH@Z ; std::_Unchecked<int *>(int *)
.text$mn:000057FE                 add     esp, 4
.text$mn:00005801                 push    eax             ; Src
.text$mn:00005802                 call    ??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int>>>(int *,int *,int *,std::_Wrap_alloc<std::allocator<int>> &)
.text$mn:00005807                 add     esp, 10h
.text$mn:0000580A                 push    eax
.text$mn:0000580B                 lea     ecx, [ebp+arg_8]
.text$mn:0000580E                 push    ecx
.text$mn:0000580F                 call    ??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z ; std::_Rechecked<int *,int *>(int * &,int *)
.text$mn:00005814                 add     esp, 8
.text$mn:00005817                 mov     eax, [eax]
.text$mn:00005819                 pop     ebp
.text$mn:0000581A                 retn
.text$mn:0000581A ??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z endp
.text$mn:0000581A
.text$mn:0000581A ; ---------------------------------------------------------------------------
.text$mn:0000581B                 align 4
.text$mn:0000581B _text$mn        ends
.text$mn:0000581B
.text$mn:0000581C ; ===========================================================================
.text$mn:0000581C
.text$mn:0000581C ; Segment type: Pure code
.text$mn:0000581C ; Segment permissions: Read/Execute
.text$mn:0000581C _text$mn        segment para public 'CODE' use32
.text$mn:0000581C                 assume cs:_text$mn
.text$mn:0000581C                 ;org 581Ch
.text$mn:0000581C ; COMDAT (pick any)
.text$mn:0000581C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000581C
.text$mn:0000581C ; =============== S U B R O U T I N E =======================================
.text$mn:0000581C
.text$mn:0000581C ; Attributes: bp-based frame
.text$mn:0000581C
.text$mn:0000581C ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Uninitialized_move<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> &)
.text$mn:0000581C                 public ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$mn:0000581C ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z proc near
.text$mn:0000581C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+25p
.text$mn:0000581C
.text$mn:0000581C arg_0           = dword ptr  8
.text$mn:0000581C arg_4           = dword ptr  0Ch
.text$mn:0000581C arg_8           = dword ptr  10h
.text$mn:0000581C arg_C           = dword ptr  14h
.text$mn:0000581C
.text$mn:0000581C                 push    ebp
.text$mn:0000581D                 mov     ebp, esp
.text$mn:0000581F                 mov     eax, [ebp+arg_C]
.text$mn:00005822                 push    eax             ; int
.text$mn:00005823                 mov     ecx, [ebp+arg_8]
.text$mn:00005826                 push    ecx
.text$mn:00005827                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000582C                 add     esp, 4
.text$mn:0000582F                 push    eax             ; void *
.text$mn:00005830                 mov     edx, [ebp+arg_4]
.text$mn:00005833                 push    edx
.text$mn:00005834                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005839                 add     esp, 4
.text$mn:0000583C                 push    eax             ; int
.text$mn:0000583D                 mov     eax, [ebp+arg_0]
.text$mn:00005840                 push    eax
.text$mn:00005841                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005846                 add     esp, 4
.text$mn:00005849                 push    eax             ; int
.text$mn:0000584A                 call    ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z ; std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:0000584F                 add     esp, 10h
.text$mn:00005852                 push    eax
.text$mn:00005853                 lea     ecx, [ebp+arg_8]
.text$mn:00005856                 push    ecx
.text$mn:00005857                 call    ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z ; std::_Rechecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> * &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000585C                 add     esp, 8
.text$mn:0000585F                 mov     eax, [eax]
.text$mn:00005861                 pop     ebp
.text$mn:00005862                 retn
.text$mn:00005862 ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z endp
.text$mn:00005862
.text$mn:00005862 ; ---------------------------------------------------------------------------
.text$mn:00005863                 align 4
.text$mn:00005863 _text$mn        ends
.text$mn:00005863
.text$mn:00005864 ; ===========================================================================
.text$mn:00005864
.text$mn:00005864 ; Segment type: Pure code
.text$mn:00005864 ; Segment permissions: Read/Execute
.text$mn:00005864 _text$mn        segment para public 'CODE' use32
.text$mn:00005864                 assume cs:_text$mn
.text$mn:00005864                 ;org 5864h
.text$mn:00005864 ; COMDAT (pick any)
.text$mn:00005864                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005864
.text$mn:00005864 ; =============== S U B R O U T I N E =======================================
.text$mn:00005864
.text$mn:00005864 ; Attributes: bp-based frame
.text$mn:00005864
.text$mn:00005864 ; int * __cdecl std::_Val_type<int *>(int *)
.text$mn:00005864                 public ??$_Val_type@PAH@std@@YAPAHPAH@Z
.text$mn:00005864 ??$_Val_type@PAH@std@@YAPAHPAH@Z proc near
.text$mn:00005864                                         ; CODE XREF: std::_Uninit_move<int *,int *,std::_Wrap_alloc<std::allocator<int>>>(int *,int *,int *,std::_Wrap_alloc<std::allocator<int>> &)+20p
.text$mn:00005864                 push    ebp
.text$mn:00005865                 mov     ebp, esp
.text$mn:00005867                 xor     eax, eax
.text$mn:00005869                 pop     ebp
.text$mn:0000586A                 retn
.text$mn:0000586A ??$_Val_type@PAH@std@@YAPAHPAH@Z endp
.text$mn:0000586A
.text$mn:0000586A ; ---------------------------------------------------------------------------
.text$mn:0000586B                 align 4
.text$mn:0000586B _text$mn        ends
.text$mn:0000586B
.text$mn:0000586C ; ===========================================================================
.text$mn:0000586C
.text$mn:0000586C ; Segment type: Pure code
.text$mn:0000586C ; Segment permissions: Read/Execute
.text$mn:0000586C _text$mn        segment para public 'CODE' use32
.text$mn:0000586C                 assume cs:_text$mn
.text$mn:0000586C                 ;org 586Ch
.text$mn:0000586C ; COMDAT (pick any)
.text$mn:0000586C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000586C
.text$mn:0000586C ; =============== S U B R O U T I N E =======================================
.text$mn:0000586C
.text$mn:0000586C ; Attributes: bp-based frame
.text$mn:0000586C
.text$mn:0000586C ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Val_type<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:0000586C                 public ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z
.text$mn:0000586C ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z proc near
.text$mn:0000586C                                         ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+20p
.text$mn:0000586C                 push    ebp
.text$mn:0000586D                 mov     ebp, esp
.text$mn:0000586F                 xor     eax, eax
.text$mn:00005871                 pop     ebp
.text$mn:00005872                 retn
.text$mn:00005872 ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z endp
.text$mn:00005872
.text$mn:00005872 ; ---------------------------------------------------------------------------
.text$mn:00005873                 align 4
.text$mn:00005873 _text$mn        ends
.text$mn:00005873
.text$mn:00005874 ; ===========================================================================
.text$mn:00005874
.text$mn:00005874 ; Segment type: Pure code
.text$mn:00005874 ; Segment permissions: Read/Execute
.text$mn:00005874 _text$mn        segment para public 'CODE' use32
.text$mn:00005874                 assume cs:_text$mn
.text$mn:00005874                 ;org 5874h
.text$mn:00005874 ; COMDAT (pick any)
.text$mn:00005874                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005874
.text$mn:00005874 ; =============== S U B R O U T I N E =======================================
.text$mn:00005874
.text$mn:00005874 ; Attributes: bp-based frame
.text$mn:00005874
.text$mn:00005874 ; int const * __cdecl std::addressof<int const>(int const &)
.text$mn:00005874                 public ??$addressof@$$CBH@std@@YAPBHABH@Z
.text$mn:00005874 ??$addressof@$$CBH@std@@YAPBHABH@Z proc near
.text$mn:00005874                                         ; CODE XREF: std::vector<int,std::allocator<int>>::push_back(int const &)+Dp
.text$mn:00005874                                         ; std::vector<int,std::allocator<int>>::push_back(int const &)+29p
.text$mn:00005874
.text$mn:00005874 arg_0           = dword ptr  8
.text$mn:00005874
.text$mn:00005874                 push    ebp
.text$mn:00005875                 mov     ebp, esp
.text$mn:00005877                 mov     eax, [ebp+arg_0]
.text$mn:0000587A                 pop     ebp
.text$mn:0000587B                 retn
.text$mn:0000587B ??$addressof@$$CBH@std@@YAPBHABH@Z endp
.text$mn:0000587B
.text$mn:0000587B _text$mn        ends
.text$mn:0000587B
.text$mn:0000587C ; ===========================================================================
.text$mn:0000587C
.text$mn:0000587C ; Segment type: Pure code
.text$mn:0000587C ; Segment permissions: Read/Execute
.text$mn:0000587C _text$mn        segment para public 'CODE' use32
.text$mn:0000587C                 assume cs:_text$mn
.text$mn:0000587C                 ;org 587Ch
.text$mn:0000587C ; COMDAT (pick any)
.text$mn:0000587C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000587C
.text$mn:0000587C ; =============== S U B R O U T I N E =======================================
.text$mn:0000587C
.text$mn:0000587C ; Attributes: bp-based frame
.text$mn:0000587C
.text$mn:0000587C ; char * __cdecl std::addressof<char>(char &)
.text$mn:0000587C                 public ??$addressof@D@std@@YAPADAAD@Z
.text$mn:0000587C ??$addressof@D@std@@YAPADAAD@Z proc near
.text$mn:0000587C                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p
.text$mn:0000587C                                         ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p ...
.text$mn:0000587C
.text$mn:0000587C arg_0           = dword ptr  8
.text$mn:0000587C
.text$mn:0000587C                 push    ebp
.text$mn:0000587D                 mov     ebp, esp
.text$mn:0000587F                 mov     eax, [ebp+arg_0]
.text$mn:00005882                 pop     ebp
.text$mn:00005883                 retn
.text$mn:00005883 ??$addressof@D@std@@YAPADAAD@Z endp
.text$mn:00005883
.text$mn:00005883 _text$mn        ends
.text$mn:00005883
.text$mn:00005884 ; ===========================================================================
.text$mn:00005884
.text$mn:00005884 ; Segment type: Pure code
.text$mn:00005884 ; Segment permissions: Read/Execute
.text$mn:00005884 _text$mn        segment para public 'CODE' use32
.text$mn:00005884                 assume cs:_text$mn
.text$mn:00005884                 ;org 5884h
.text$mn:00005884 ; COMDAT (pick any)
.text$mn:00005884                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005884
.text$mn:00005884 ; =============== S U B R O U T I N E =======================================
.text$mn:00005884
.text$mn:00005884 ; Attributes: bp-based frame
.text$mn:00005884
.text$mn:00005884 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::addressof<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:00005884                 public ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
.text$mn:00005884 ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z proc near
.text$mn:00005884                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+Dp
.text$mn:00005884                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Dp
.text$mn:00005884
.text$mn:00005884 arg_0           = dword ptr  8
.text$mn:00005884
.text$mn:00005884                 push    ebp
.text$mn:00005885                 mov     ebp, esp
.text$mn:00005887                 mov     eax, [ebp+arg_0]
.text$mn:0000588A                 pop     ebp
.text$mn:0000588B                 retn
.text$mn:0000588B ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z endp
.text$mn:0000588B
.text$mn:0000588B _text$mn        ends
.text$mn:0000588B
.text$mn:0000588C ; ===========================================================================
.text$mn:0000588C
.text$mn:0000588C ; Segment type: Pure code
.text$mn:0000588C ; Segment permissions: Read/Execute
.text$mn:0000588C _text$mn        segment para public 'CODE' use32
.text$mn:0000588C                 assume cs:_text$mn
.text$mn:0000588C                 ;org 588Ch
.text$mn:0000588C ; COMDAT (pick any)
.text$mn:0000588C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000588C
.text$mn:0000588C ; =============== S U B R O U T I N E =======================================
.text$mn:0000588C
.text$mn:0000588C ; Attributes: bp-based frame
.text$mn:0000588C
.text$mn:0000588C ; wchar_t * __cdecl std::addressof<wchar_t>(wchar_t &)
.text$mn:0000588C                 public ??$addressof@_W@std@@YAPA_WAA_W@Z
.text$mn:0000588C ??$addressof@_W@std@@YAPA_WAA_W@Z proc near
.text$mn:0000588C                                         ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p
.text$mn:0000588C                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p ...
.text$mn:0000588C
.text$mn:0000588C arg_0           = dword ptr  8
.text$mn:0000588C
.text$mn:0000588C                 push    ebp
.text$mn:0000588D                 mov     ebp, esp
.text$mn:0000588F                 mov     eax, [ebp+arg_0]
.text$mn:00005892                 pop     ebp
.text$mn:00005893                 retn
.text$mn:00005893 ??$addressof@_W@std@@YAPA_WAA_W@Z endp
.text$mn:00005893
.text$mn:00005893 _text$mn        ends
.text$mn:00005893
.text$mn:00005894 ; ===========================================================================
.text$mn:00005894
.text$mn:00005894 ; Segment type: Pure code
.text$mn:00005894 ; Segment permissions: Read/Execute
.text$mn:00005894 _text$mn        segment para public 'CODE' use32
.text$mn:00005894                 assume cs:_text$mn
.text$mn:00005894                 ;org 5894h
.text$mn:00005894 ; COMDAT (pick any)
.text$mn:00005894                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005894
.text$mn:00005894 ; =============== S U B R O U T I N E =======================================
.text$mn:00005894
.text$mn:00005894 ; Attributes: bp-based frame
.text$mn:00005894
.text$mn:00005894 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign<class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>>(class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>)
.text$mn:00005894                 public ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.text$mn:00005894 ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z proc near
.text$mn:00005894                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+CBp
.text$mn:00005894
.text$mn:00005894 var_70          = byte ptr -70h
.text$mn:00005894 var_64          = byte ptr -64h
.text$mn:00005894 var_58          = dword ptr -58h
.text$mn:00005894 var_54          = dword ptr -54h
.text$mn:00005894 var_50          = dword ptr -50h
.text$mn:00005894 var_4C          = dword ptr -4Ch
.text$mn:00005894 var_48          = dword ptr -48h
.text$mn:00005894 var_44          = dword ptr -44h
.text$mn:00005894 var_40          = dword ptr -40h
.text$mn:00005894 var_3C          = dword ptr -3Ch
.text$mn:00005894 var_38          = dword ptr -38h
.text$mn:00005894 var_34          = dword ptr -34h
.text$mn:00005894 var_30          = dword ptr -30h
.text$mn:00005894 var_2C          = dword ptr -2Ch
.text$mn:00005894 var_28          = dword ptr -28h
.text$mn:00005894 var_24          = dword ptr -24h
.text$mn:00005894 var_20          = dword ptr -20h
.text$mn:00005894 var_1C          = dword ptr -1Ch
.text$mn:00005894 var_18          = dword ptr -18h
.text$mn:00005894 var_14          = dword ptr -14h
.text$mn:00005894 var_10          = dword ptr -10h
.text$mn:00005894 var_C           = dword ptr -0Ch
.text$mn:00005894 var_4           = dword ptr -4
.text$mn:00005894 arg_0           = byte ptr  8
.text$mn:00005894 arg_C           = byte ptr  14h
.text$mn:00005894
.text$mn:00005894                 push    ebp
.text$mn:00005895                 mov     ebp, esp
.text$mn:00005897                 push    0FFFFFFFFh
.text$mn:00005899                 push    offset __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.text$mn:0000589E                 mov     eax, large fs:0
.text$mn:000058A4                 push    eax
.text$mn:000058A5                 sub     esp, 64h
.text$mn:000058A8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000058AD                 xor     eax, ebp
.text$mn:000058AF                 push    eax
.text$mn:000058B0                 lea     eax, [ebp+var_C]
.text$mn:000058B3                 mov     large fs:0, eax
.text$mn:000058B9                 mov     [ebp+var_10], ecx
.text$mn:000058BC                 mov     [ebp+var_4], 1
.text$mn:000058C3                 sub     esp, 0Ch
.text$mn:000058C6                 mov     ecx, esp
.text$mn:000058C8                 mov     [ebp+var_3C], esp
.text$mn:000058CB                 lea     eax, [ebp+arg_C]
.text$mn:000058CE                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:000058CF                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:000058D4                 mov     [ebp+var_14], eax
.text$mn:000058D7                 mov     ecx, [ebp+var_14]
.text$mn:000058DA                 mov     [ebp+var_40], ecx
.text$mn:000058DD                 mov     byte ptr [ebp+var_4], 2
.text$mn:000058E1                 sub     esp, 0Ch
.text$mn:000058E4                 mov     ecx, esp
.text$mn:000058E6                 mov     [ebp+var_44], esp
.text$mn:000058E9                 lea     edx, [ebp+arg_0]
.text$mn:000058EC                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:000058ED                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:000058F2                 mov     [ebp+var_18], eax
.text$mn:000058F5                 mov     eax, [ebp+var_18]
.text$mn:000058F8                 mov     [ebp+var_48], eax
.text$mn:000058FB                 mov     byte ptr [ebp+var_4], 3
.text$mn:000058FF                 lea     ecx, [ebp+var_70]
.text$mn:00005902                 push    ecx
.text$mn:00005903                 mov     ecx, [ebp+var_10]
.text$mn:00005906                 call    ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)
.text$mn:0000590B                 mov     [ebp+var_1C], eax
.text$mn:0000590E                 mov     edx, [ebp+var_1C]
.text$mn:00005911                 mov     [ebp+var_20], edx
.text$mn:00005914                 mov     byte ptr [ebp+var_4], 4
.text$mn:00005918                 sub     esp, 0Ch
.text$mn:0000591B                 mov     ecx, esp
.text$mn:0000591D                 mov     [ebp+var_4C], esp
.text$mn:00005920                 mov     eax, [ebp+var_20]
.text$mn:00005923                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00005924                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00005929                 mov     [ebp+var_24], eax
.text$mn:0000592C                 mov     ecx, [ebp+var_24]
.text$mn:0000592F                 mov     [ebp+var_50], ecx
.text$mn:00005932                 mov     byte ptr [ebp+var_4], 5
.text$mn:00005936                 lea     edx, [ebp+var_64]
.text$mn:00005939                 push    edx
.text$mn:0000593A                 mov     ecx, [ebp+var_10]
.text$mn:0000593D                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:00005942                 mov     [ebp+var_28], eax
.text$mn:00005945                 mov     eax, [ebp+var_28]
.text$mn:00005948                 mov     [ebp+var_2C], eax
.text$mn:0000594B                 mov     byte ptr [ebp+var_4], 6
.text$mn:0000594F                 sub     esp, 0Ch
.text$mn:00005952                 mov     ecx, esp
.text$mn:00005954                 mov     [ebp+var_54], esp
.text$mn:00005957                 mov     edx, [ebp+var_2C]
.text$mn:0000595A                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000595B                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00005960                 mov     [ebp+var_30], eax
.text$mn:00005963                 mov     eax, [ebp+var_30]
.text$mn:00005966                 mov     [ebp+var_58], eax
.text$mn:00005969                 mov     byte ptr [ebp+var_4], 7
.text$mn:0000596D                 mov     byte ptr [ebp+var_4], 9
.text$mn:00005971                 mov     ecx, [ebp+var_10]
.text$mn:00005974                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:00005979                 mov     [ebp+var_34], eax
.text$mn:0000597C                 mov     ecx, [ebp+var_34]
.text$mn:0000597F                 mov     [ebp+var_38], ecx
.text$mn:00005982                 mov     byte ptr [ebp+var_4], 8
.text$mn:00005986                 lea     ecx, [ebp+var_64]
.text$mn:00005989                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000598E                 mov     byte ptr [ebp+var_4], 1
.text$mn:00005992                 lea     ecx, [ebp+var_70]
.text$mn:00005995                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000599A                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000599E                 lea     ecx, [ebp+arg_0]
.text$mn:000059A1                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:000059A6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000059AD                 lea     ecx, [ebp+arg_C]
.text$mn:000059B0                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:000059B5                 mov     eax, [ebp+var_38]
.text$mn:000059B8                 mov     ecx, [ebp+var_C]
.text$mn:000059BB                 mov     large fs:0, ecx
.text$mn:000059C2                 pop     ecx
.text$mn:000059C3                 mov     esp, ebp
.text$mn:000059C5                 pop     ebp
.text$mn:000059C6                 retn    18h
.text$mn:000059C6 ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z endp
.text$mn:000059C6
.text$mn:000059C6 ; ---------------------------------------------------------------------------
.text$mn:000059C9                 align 4
.text$mn:000059C9 _text$mn        ends
.text$mn:000059C9
.text$x:000059CC ; ===========================================================================
.text$x:000059CC
.text$x:000059CC ; Segment type: Pure code
.text$x:000059CC ; Segment permissions: Read/Execute
.text$x:000059CC _text$x         segment para public 'CODE' use32
.text$x:000059CC                 assume cs:_text$x
.text$x:000059CC                 ;org 59CCh
.text$x:000059CC ; COMDAT (pick associative to section at 5894)
.text$x:000059CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000059CC
.text$x:000059CC ; =============== S U B R O U T I N E =======================================
.text$x:000059CC
.text$x:000059CC
.text$x:000059CC __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0 proc near
.text$x:000059CC                                         ; DATA XREF: .xdata$x:0000CEB4o
.text$x:000059CC                 lea     ecx, [ebp+14h]
.text$x:000059CF                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000059CF __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0 endp
.text$x:000059CF
.text$x:000059D4
.text$x:000059D4 ; =============== S U B R O U T I N E =======================================
.text$x:000059D4
.text$x:000059D4
.text$x:000059D4 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1 proc near
.text$x:000059D4                                         ; DATA XREF: .xdata$x:0000CEBCo
.text$x:000059D4                 lea     ecx, [ebp+8]
.text$x:000059D7                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000059D7 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1 endp
.text$x:000059D7
.text$x:000059DC
.text$x:000059DC ; =============== S U B R O U T I N E =======================================
.text$x:000059DC
.text$x:000059DC
.text$x:000059DC __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2 proc near
.text$x:000059DC                                         ; DATA XREF: .xdata$x:0000CEC4o
.text$x:000059DC                 mov     ecx, [ebp-3Ch]
.text$x:000059DF                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000059DF __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2 endp
.text$x:000059DF
.text$x:000059E4
.text$x:000059E4 ; =============== S U B R O U T I N E =======================================
.text$x:000059E4
.text$x:000059E4
.text$x:000059E4 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3 proc near
.text$x:000059E4                                         ; DATA XREF: .xdata$x:0000CECCo
.text$x:000059E4                 mov     ecx, [ebp-44h]
.text$x:000059E7                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000059E7 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3 endp
.text$x:000059E7
.text$x:000059EC
.text$x:000059EC ; =============== S U B R O U T I N E =======================================
.text$x:000059EC
.text$x:000059EC
.text$x:000059EC __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4 proc near
.text$x:000059EC                                         ; DATA XREF: .xdata$x:0000CED4o
.text$x:000059EC                                         ; .xdata$x:0000CEF4o
.text$x:000059EC                 lea     ecx, [ebp-70h]
.text$x:000059EF                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000059EF __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4 endp
.text$x:000059EF
.text$x:000059F4
.text$x:000059F4 ; =============== S U B R O U T I N E =======================================
.text$x:000059F4
.text$x:000059F4
.text$x:000059F4 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5 proc near
.text$x:000059F4                                         ; DATA XREF: .xdata$x:0000CEDCo
.text$x:000059F4                 mov     ecx, [ebp-4Ch]
.text$x:000059F7                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000059F7 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5 endp
.text$x:000059F7
.text$x:000059FC
.text$x:000059FC ; =============== S U B R O U T I N E =======================================
.text$x:000059FC
.text$x:000059FC
.text$x:000059FC __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6 proc near
.text$x:000059FC                                         ; DATA XREF: .xdata$x:0000CEE4o
.text$x:000059FC                                         ; .xdata$x:0000CEFCo
.text$x:000059FC                 lea     ecx, [ebp-64h]
.text$x:000059FF                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000059FF __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6 endp
.text$x:000059FF
.text$x:00005A04
.text$x:00005A04 ; =============== S U B R O U T I N E =======================================
.text$x:00005A04
.text$x:00005A04
.text$x:00005A04 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7 proc near
.text$x:00005A04                                         ; DATA XREF: .xdata$x:0000CEECo
.text$x:00005A04                 mov     ecx, [ebp-54h]
.text$x:00005A07                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00005A07 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7 endp
.text$x:00005A07
.text$x:00005A0C
.text$x:00005A0C ; =============== S U B R O U T I N E =======================================
.text$x:00005A0C
.text$x:00005A0C
.text$x:00005A0C __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z proc near
.text$x:00005A0C                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+5o
.text$x:00005A0C
.text$x:00005A0C arg_4           = dword ptr  8
.text$x:00005A0C
.text$x:00005A0C                 mov     edx, [esp+arg_4]
.text$x:00005A10                 lea     eax, [edx+0Ch]
.text$x:00005A13                 mov     ecx, [edx-68h]
.text$x:00005A16                 xor     ecx, eax
.text$x:00005A18                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005A1D                 mov     eax, offset __ehfuncinfo$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.text$x:00005A22                 jmp     ___CxxFrameHandler3
.text$x:00005A22 __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z endp
.text$x:00005A22
.text$x:00005A22 ; ---------------------------------------------------------------------------
.text$x:00005A27                 align 4
.text$x:00005A27 _text$x         ends
.text$x:00005A27
.text$mn:00005A28 ; ===========================================================================
.text$mn:00005A28
.text$mn:00005A28 ; Segment type: Pure code
.text$mn:00005A28 ; Segment permissions: Read/Execute
.text$mn:00005A28 _text$mn        segment para public 'CODE' use32
.text$mn:00005A28                 assume cs:_text$mn
.text$mn:00005A28                 ;org 5A28h
.text$mn:00005A28 ; COMDAT (pick any)
.text$mn:00005A28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005A28
.text$mn:00005A28 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A28
.text$mn:00005A28 ; Attributes: bp-based frame
.text$mn:00005A28
.text$mn:00005A28 ; int __stdcall std::_Wrap_alloc<std::allocator<int>>::construct<int,int &>(void *, int)
.text$mn:00005A28                 public ??$construct@HAAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHAAH@Z
.text$mn:00005A28 ??$construct@HAAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHAAH@Z proc near
.text$mn:00005A28                                         ; CODE XREF: std::vector<int,std::allocator<int>>::push_back(int const &)+8Dp
.text$mn:00005A28
.text$mn:00005A28 var_4           = dword ptr -4
.text$mn:00005A28 arg_0           = dword ptr  8
.text$mn:00005A28 arg_4           = dword ptr  0Ch
.text$mn:00005A28
.text$mn:00005A28                 push    ebp
.text$mn:00005A29                 mov     ebp, esp
.text$mn:00005A2B                 push    ecx
.text$mn:00005A2C                 mov     [ebp+var_4], ecx
.text$mn:00005A2F                 mov     eax, [ebp+arg_4]
.text$mn:00005A32                 push    eax
.text$mn:00005A33                 call    ??$forward@AAH@std@@YAAAHAAH@Z ; std::forward<int &>(int &)
.text$mn:00005A38                 add     esp, 4
.text$mn:00005A3B                 push    eax             ; int
.text$mn:00005A3C                 mov     ecx, [ebp+arg_0]
.text$mn:00005A3F                 push    ecx             ; void *
.text$mn:00005A40                 mov     edx, [ebp+var_4]
.text$mn:00005A43                 push    edx             ; int
.text$mn:00005A44                 call    ??$construct@HAAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHAAH@Z ; std::allocator_traits<std::allocator<int>>::construct<int,int &>(std::allocator<int> &,int *,int &)
.text$mn:00005A49                 add     esp, 0Ch
.text$mn:00005A4C                 mov     esp, ebp
.text$mn:00005A4E                 pop     ebp
.text$mn:00005A4F                 retn    8
.text$mn:00005A4F ??$construct@HAAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHAAH@Z endp
.text$mn:00005A4F
.text$mn:00005A4F ; ---------------------------------------------------------------------------
.text$mn:00005A52                 align 4
.text$mn:00005A52 _text$mn        ends
.text$mn:00005A52
.text$mn:00005A54 ; ===========================================================================
.text$mn:00005A54
.text$mn:00005A54 ; Segment type: Pure code
.text$mn:00005A54 ; Segment permissions: Read/Execute
.text$mn:00005A54 _text$mn        segment para public 'CODE' use32
.text$mn:00005A54                 assume cs:_text$mn
.text$mn:00005A54                 ;org 5A54h
.text$mn:00005A54 ; COMDAT (pick any)
.text$mn:00005A54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005A54
.text$mn:00005A54 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A54
.text$mn:00005A54 ; Attributes: bp-based frame
.text$mn:00005A54
.text$mn:00005A54 ; int __stdcall std::allocator<int>::construct<int,int &>(void *, int)
.text$mn:00005A54                 public ??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z
.text$mn:00005A54 ??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z proc near
.text$mn:00005A54                                         ; CODE XREF: std::allocator_traits<std::allocator<int>>::construct<int,int &>(std::allocator<int> &,int *,int &)+17p
.text$mn:00005A54
.text$mn:00005A54 var_1C          = dword ptr -1Ch
.text$mn:00005A54 var_18          = dword ptr -18h
.text$mn:00005A54 var_14          = dword ptr -14h
.text$mn:00005A54 var_10          = dword ptr -10h
.text$mn:00005A54 var_C           = dword ptr -0Ch
.text$mn:00005A54 var_4           = dword ptr -4
.text$mn:00005A54 arg_0           = dword ptr  8
.text$mn:00005A54 arg_4           = dword ptr  0Ch
.text$mn:00005A54
.text$mn:00005A54                 push    ebp
.text$mn:00005A55                 mov     ebp, esp
.text$mn:00005A57                 push    0FFFFFFFFh
.text$mn:00005A59                 push    offset __ehhandler$??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z
.text$mn:00005A5E                 mov     eax, large fs:0
.text$mn:00005A64                 push    eax
.text$mn:00005A65                 sub     esp, 10h
.text$mn:00005A68                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005A6D                 xor     eax, ebp
.text$mn:00005A6F                 push    eax
.text$mn:00005A70                 lea     eax, [ebp+var_C]
.text$mn:00005A73                 mov     large fs:0, eax
.text$mn:00005A79                 mov     [ebp+var_18], ecx
.text$mn:00005A7C                 mov     eax, [ebp+arg_0]
.text$mn:00005A7F                 push    eax             ; void *
.text$mn:00005A80                 push    4               ; unsigned int
.text$mn:00005A82                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00005A87                 add     esp, 8
.text$mn:00005A8A                 mov     [ebp+var_10], eax
.text$mn:00005A8D                 mov     [ebp+var_4], 0
.text$mn:00005A94                 cmp     [ebp+var_10], 0
.text$mn:00005A98                 jz      short loc_5AB5
.text$mn:00005A9A                 mov     ecx, [ebp+arg_4]
.text$mn:00005A9D                 push    ecx
.text$mn:00005A9E                 call    ??$forward@AAH@std@@YAAAHAAH@Z ; std::forward<int &>(int &)
.text$mn:00005AA3                 add     esp, 4
.text$mn:00005AA6                 mov     edx, [ebp+var_10]
.text$mn:00005AA9                 mov     eax, [eax]
.text$mn:00005AAB                 mov     [edx], eax
.text$mn:00005AAD                 mov     ecx, [ebp+var_10]
.text$mn:00005AB0                 mov     [ebp+var_14], ecx
.text$mn:00005AB3                 jmp     short loc_5ABC
.text$mn:00005AB5 ; ---------------------------------------------------------------------------
.text$mn:00005AB5
.text$mn:00005AB5 loc_5AB5:                               ; CODE XREF: std::allocator<int>::construct<int,int &>(int *,int &)+44j
.text$mn:00005AB5                 mov     [ebp+var_14], 0
.text$mn:00005ABC
.text$mn:00005ABC loc_5ABC:                               ; CODE XREF: std::allocator<int>::construct<int,int &>(int *,int &)+5Fj
.text$mn:00005ABC                 mov     edx, [ebp+var_14]
.text$mn:00005ABF                 mov     [ebp+var_1C], edx
.text$mn:00005AC2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005AC9                 mov     ecx, [ebp+var_C]
.text$mn:00005ACC                 mov     large fs:0, ecx
.text$mn:00005AD3                 pop     ecx
.text$mn:00005AD4                 mov     esp, ebp
.text$mn:00005AD6                 pop     ebp
.text$mn:00005AD7                 retn    8
.text$mn:00005AD7 ??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z endp
.text$mn:00005AD7
.text$mn:00005AD7 ; ---------------------------------------------------------------------------
.text$mn:00005ADA                 align 4
.text$mn:00005ADA _text$mn        ends
.text$mn:00005ADA
.text$x:00005ADC ; ===========================================================================
.text$x:00005ADC
.text$x:00005ADC ; Segment type: Pure code
.text$x:00005ADC ; Segment permissions: Read/Execute
.text$x:00005ADC _text$x         segment para public 'CODE' use32
.text$x:00005ADC                 assume cs:_text$x
.text$x:00005ADC                 ;org 5ADCh
.text$x:00005ADC ; COMDAT (pick associative to section at 5A54)
.text$x:00005ADC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005ADC
.text$x:00005ADC ; =============== S U B R O U T I N E =======================================
.text$x:00005ADC
.text$x:00005ADC
.text$x:00005ADC __unwindfunclet$??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z$0 proc near
.text$x:00005ADC                                         ; DATA XREF: .xdata$x:0000CF30o
.text$x:00005ADC                 mov     eax, [ebp+8]
.text$x:00005ADF                 push    eax
.text$x:00005AE0                 mov     eax, [ebp-10h]
.text$x:00005AE3                 push    eax             ; void *
.text$x:00005AE4                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00005AE9                 add     esp, 8
.text$x:00005AEC                 retn
.text$x:00005AEC __unwindfunclet$??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z$0 endp
.text$x:00005AEC
.text$x:00005AED
.text$x:00005AED ; =============== S U B R O U T I N E =======================================
.text$x:00005AED
.text$x:00005AED
.text$x:00005AED __ehhandler$??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z proc near
.text$x:00005AED                                         ; DATA XREF: std::allocator<int>::construct<int,int &>(int *,int &)+5o
.text$x:00005AED
.text$x:00005AED arg_4           = dword ptr  8
.text$x:00005AED
.text$x:00005AED                 mov     edx, [esp+arg_4]
.text$x:00005AF1                 lea     eax, [edx+0Ch]
.text$x:00005AF4                 mov     ecx, [edx-14h]
.text$x:00005AF7                 xor     ecx, eax
.text$x:00005AF9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005AFE                 mov     eax, offset __ehfuncinfo$??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z
.text$x:00005B03                 jmp     ___CxxFrameHandler3
.text$x:00005B03 __ehhandler$??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z endp
.text$x:00005B03
.text$x:00005B03 _text$x         ends
.text$x:00005B03
.text$mn:00005B08 ; ===========================================================================
.text$mn:00005B08
.text$mn:00005B08 ; Segment type: Pure code
.text$mn:00005B08 ; Segment permissions: Read/Execute
.text$mn:00005B08 _text$mn        segment para public 'CODE' use32
.text$mn:00005B08                 assume cs:_text$mn
.text$mn:00005B08                 ;org 5B08h
.text$mn:00005B08 ; COMDAT (pick any)
.text$mn:00005B08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005B08
.text$mn:00005B08 ; =============== S U B R O U T I N E =======================================
.text$mn:00005B08
.text$mn:00005B08 ; Attributes: bp-based frame
.text$mn:00005B08
.text$mn:00005B08 ; int __cdecl std::allocator_traits<std::allocator<int>>::construct<int,int &>(int, void *, int)
.text$mn:00005B08                 public ??$construct@HAAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHAAH@Z
.text$mn:00005B08 ??$construct@HAAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHAAH@Z proc near
.text$mn:00005B08                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<int>>::construct<int,int &>(int *,int &)+1Cp
.text$mn:00005B08
.text$mn:00005B08 arg_0           = dword ptr  8
.text$mn:00005B08 arg_4           = dword ptr  0Ch
.text$mn:00005B08 arg_8           = dword ptr  10h
.text$mn:00005B08
.text$mn:00005B08                 push    ebp
.text$mn:00005B09                 mov     ebp, esp
.text$mn:00005B0B                 mov     eax, [ebp+arg_8]
.text$mn:00005B0E                 push    eax
.text$mn:00005B0F                 call    ??$forward@AAH@std@@YAAAHAAH@Z ; std::forward<int &>(int &)
.text$mn:00005B14                 add     esp, 4
.text$mn:00005B17                 push    eax             ; int
.text$mn:00005B18                 mov     ecx, [ebp+arg_4]
.text$mn:00005B1B                 push    ecx             ; void *
.text$mn:00005B1C                 mov     ecx, [ebp+arg_0]
.text$mn:00005B1F                 call    ??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z ; std::allocator<int>::construct<int,int &>(int *,int &)
.text$mn:00005B24                 pop     ebp
.text$mn:00005B25                 retn
.text$mn:00005B25 ??$construct@HAAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHAAH@Z endp
.text$mn:00005B25
.text$mn:00005B25 ; ---------------------------------------------------------------------------
.text$mn:00005B26                 align 4
.text$mn:00005B26 _text$mn        ends
.text$mn:00005B26
.text$mn:00005B28 ; ===========================================================================
.text$mn:00005B28
.text$mn:00005B28 ; Segment type: Pure code
.text$mn:00005B28 ; Segment permissions: Read/Execute
.text$mn:00005B28 _text$mn        segment para public 'CODE' use32
.text$mn:00005B28                 assume cs:_text$mn
.text$mn:00005B28                 ;org 5B28h
.text$mn:00005B28 ; COMDAT (pick any)
.text$mn:00005B28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005B28
.text$mn:00005B28 ; =============== S U B R O U T I N E =======================================
.text$mn:00005B28
.text$mn:00005B28 ; Attributes: bp-based frame
.text$mn:00005B28
.text$mn:00005B28 ; int __stdcall std::_Wrap_alloc<std::allocator<int>>::construct<int,int const &>(void *, int)
.text$mn:00005B28                 public ??$construct@HABH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHABH@Z
.text$mn:00005B28 ??$construct@HABH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHABH@Z proc near
.text$mn:00005B28                                         ; CODE XREF: std::vector<int,std::allocator<int>>::push_back(int const &)+EAp
.text$mn:00005B28
.text$mn:00005B28 var_4           = dword ptr -4
.text$mn:00005B28 arg_0           = dword ptr  8
.text$mn:00005B28 arg_4           = dword ptr  0Ch
.text$mn:00005B28
.text$mn:00005B28                 push    ebp
.text$mn:00005B29                 mov     ebp, esp
.text$mn:00005B2B                 push    ecx
.text$mn:00005B2C                 mov     [ebp+var_4], ecx
.text$mn:00005B2F                 mov     eax, [ebp+arg_4]
.text$mn:00005B32                 push    eax
.text$mn:00005B33                 call    ??$forward@ABH@std@@YAABHABH@Z ; std::forward<int const &>(int const &)
.text$mn:00005B38                 add     esp, 4
.text$mn:00005B3B                 push    eax             ; int
.text$mn:00005B3C                 mov     ecx, [ebp+arg_0]
.text$mn:00005B3F                 push    ecx             ; void *
.text$mn:00005B40                 mov     edx, [ebp+var_4]
.text$mn:00005B43                 push    edx             ; int
.text$mn:00005B44                 call    ??$construct@HABH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHABH@Z ; std::allocator_traits<std::allocator<int>>::construct<int,int const &>(std::allocator<int> &,int *,int const &)
.text$mn:00005B49                 add     esp, 0Ch
.text$mn:00005B4C                 mov     esp, ebp
.text$mn:00005B4E                 pop     ebp
.text$mn:00005B4F                 retn    8
.text$mn:00005B4F ??$construct@HABH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHABH@Z endp
.text$mn:00005B4F
.text$mn:00005B4F ; ---------------------------------------------------------------------------
.text$mn:00005B52                 align 4
.text$mn:00005B52 _text$mn        ends
.text$mn:00005B52
.text$mn:00005B54 ; ===========================================================================
.text$mn:00005B54
.text$mn:00005B54 ; Segment type: Pure code
.text$mn:00005B54 ; Segment permissions: Read/Execute
.text$mn:00005B54 _text$mn        segment para public 'CODE' use32
.text$mn:00005B54                 assume cs:_text$mn
.text$mn:00005B54                 ;org 5B54h
.text$mn:00005B54 ; COMDAT (pick any)
.text$mn:00005B54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005B54
.text$mn:00005B54 ; =============== S U B R O U T I N E =======================================
.text$mn:00005B54
.text$mn:00005B54 ; Attributes: bp-based frame
.text$mn:00005B54
.text$mn:00005B54 ; int __cdecl std::allocator_traits<std::allocator<int>>::construct<int,int const &>(int, void *, int)
.text$mn:00005B54                 public ??$construct@HABH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHABH@Z
.text$mn:00005B54 ??$construct@HABH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHABH@Z proc near
.text$mn:00005B54                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<int>>::construct<int,int const &>(int *,int const &)+1Cp
.text$mn:00005B54
.text$mn:00005B54 arg_0           = dword ptr  8
.text$mn:00005B54 arg_4           = dword ptr  0Ch
.text$mn:00005B54 arg_8           = dword ptr  10h
.text$mn:00005B54
.text$mn:00005B54                 push    ebp
.text$mn:00005B55                 mov     ebp, esp
.text$mn:00005B57                 mov     eax, [ebp+arg_8]
.text$mn:00005B5A                 push    eax
.text$mn:00005B5B                 call    ??$forward@ABH@std@@YAABHABH@Z ; std::forward<int const &>(int const &)
.text$mn:00005B60                 add     esp, 4
.text$mn:00005B63                 push    eax             ; int
.text$mn:00005B64                 mov     ecx, [ebp+arg_4]
.text$mn:00005B67                 push    ecx             ; void *
.text$mn:00005B68                 mov     ecx, [ebp+arg_0]
.text$mn:00005B6B                 call    ?construct@?$allocator@H@std@@QAEXPAHABH@Z ; std::allocator<int>::construct(int *,int const &)
.text$mn:00005B70                 pop     ebp
.text$mn:00005B71                 retn
.text$mn:00005B71 ??$construct@HABH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAAV?$allocator@H@1@PAHABH@Z endp
.text$mn:00005B71
.text$mn:00005B71 ; ---------------------------------------------------------------------------
.text$mn:00005B72                 align 4
.text$mn:00005B72 _text$mn        ends
.text$mn:00005B72
.text$mn:00005B74 ; ===========================================================================
.text$mn:00005B74
.text$mn:00005B74 ; Segment type: Pure code
.text$mn:00005B74 ; Segment permissions: Read/Execute
.text$mn:00005B74 _text$mn        segment para public 'CODE' use32
.text$mn:00005B74                 assume cs:_text$mn
.text$mn:00005B74                 ;org 5B74h
.text$mn:00005B74 ; COMDAT (pick any)
.text$mn:00005B74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005B74
.text$mn:00005B74 ; =============== S U B R O U T I N E =======================================
.text$mn:00005B74
.text$mn:00005B74 ; Attributes: bp-based frame
.text$mn:00005B74
.text$mn:00005B74 ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(void *, int)
.text$mn:00005B74                 public ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
.text$mn:00005B74 ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:00005B74                                         ; CODE XREF: $LN19+4Bp
.text$mn:00005B74
.text$mn:00005B74 var_4           = dword ptr -4
.text$mn:00005B74 arg_0           = dword ptr  8
.text$mn:00005B74 arg_4           = dword ptr  0Ch
.text$mn:00005B74
.text$mn:00005B74                 push    ebp
.text$mn:00005B75                 mov     ebp, esp
.text$mn:00005B77                 push    ecx
.text$mn:00005B78                 mov     [ebp+var_4], ecx
.text$mn:00005B7B                 mov     eax, [ebp+arg_4]
.text$mn:00005B7E                 push    eax
.text$mn:00005B7F                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00005B84                 add     esp, 4
.text$mn:00005B87                 push    eax             ; int
.text$mn:00005B88                 mov     ecx, [ebp+arg_0]
.text$mn:00005B8B                 push    ecx             ; void *
.text$mn:00005B8C                 mov     edx, [ebp+var_4]
.text$mn:00005B8F                 push    edx             ; int
.text$mn:00005B90                 call    ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)
.text$mn:00005B95                 add     esp, 0Ch
.text$mn:00005B98                 mov     esp, ebp
.text$mn:00005B9A                 pop     ebp
.text$mn:00005B9B                 retn    8
.text$mn:00005B9B ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z endp
.text$mn:00005B9B
.text$mn:00005B9B ; ---------------------------------------------------------------------------
.text$mn:00005B9E                 align 10h
.text$mn:00005B9E _text$mn        ends
.text$mn:00005B9E
.text$mn:00005BA0 ; ===========================================================================
.text$mn:00005BA0
.text$mn:00005BA0 ; Segment type: Pure code
.text$mn:00005BA0 ; Segment permissions: Read/Execute
.text$mn:00005BA0 _text$mn        segment para public 'CODE' use32
.text$mn:00005BA0                 assume cs:_text$mn
.text$mn:00005BA0                 ;org 5BA0h
.text$mn:00005BA0 ; COMDAT (pick any)
.text$mn:00005BA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005BA0
.text$mn:00005BA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00005BA0
.text$mn:00005BA0 ; Attributes: bp-based frame
.text$mn:00005BA0
.text$mn:00005BA0 ; int __stdcall std::allocator<char>::construct<char *,char * &>(void *, int)
.text$mn:00005BA0                 public ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:00005BA0 ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:00005BA0                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)+17p
.text$mn:00005BA0
.text$mn:00005BA0 var_1C          = dword ptr -1Ch
.text$mn:00005BA0 var_18          = dword ptr -18h
.text$mn:00005BA0 var_14          = dword ptr -14h
.text$mn:00005BA0 var_10          = dword ptr -10h
.text$mn:00005BA0 var_C           = dword ptr -0Ch
.text$mn:00005BA0 var_4           = dword ptr -4
.text$mn:00005BA0 arg_0           = dword ptr  8
.text$mn:00005BA0 arg_4           = dword ptr  0Ch
.text$mn:00005BA0
.text$mn:00005BA0                 push    ebp
.text$mn:00005BA1                 mov     ebp, esp
.text$mn:00005BA3                 push    0FFFFFFFFh
.text$mn:00005BA5                 push    offset __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:00005BAA                 mov     eax, large fs:0
.text$mn:00005BB0                 push    eax
.text$mn:00005BB1                 sub     esp, 10h
.text$mn:00005BB4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005BB9                 xor     eax, ebp
.text$mn:00005BBB                 push    eax
.text$mn:00005BBC                 lea     eax, [ebp+var_C]
.text$mn:00005BBF                 mov     large fs:0, eax
.text$mn:00005BC5                 mov     [ebp+var_18], ecx
.text$mn:00005BC8                 mov     eax, [ebp+arg_0]
.text$mn:00005BCB                 push    eax             ; void *
.text$mn:00005BCC                 push    4               ; unsigned int
.text$mn:00005BCE                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00005BD3                 add     esp, 8
.text$mn:00005BD6                 mov     [ebp+var_10], eax
.text$mn:00005BD9                 mov     [ebp+var_4], 0
.text$mn:00005BE0                 cmp     [ebp+var_10], 0
.text$mn:00005BE4                 jz      short loc_5C01
.text$mn:00005BE6                 mov     ecx, [ebp+arg_4]
.text$mn:00005BE9                 push    ecx
.text$mn:00005BEA                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00005BEF                 add     esp, 4
.text$mn:00005BF2                 mov     edx, [ebp+var_10]
.text$mn:00005BF5                 mov     eax, [eax]
.text$mn:00005BF7                 mov     [edx], eax
.text$mn:00005BF9                 mov     ecx, [ebp+var_10]
.text$mn:00005BFC                 mov     [ebp+var_14], ecx
.text$mn:00005BFF                 jmp     short loc_5C08
.text$mn:00005C01 ; ---------------------------------------------------------------------------
.text$mn:00005C01
.text$mn:00005C01 loc_5C01:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+44j
.text$mn:00005C01                 mov     [ebp+var_14], 0
.text$mn:00005C08
.text$mn:00005C08 loc_5C08:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5Fj
.text$mn:00005C08                 mov     edx, [ebp+var_14]
.text$mn:00005C0B                 mov     [ebp+var_1C], edx
.text$mn:00005C0E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005C15                 mov     ecx, [ebp+var_C]
.text$mn:00005C18                 mov     large fs:0, ecx
.text$mn:00005C1F                 pop     ecx
.text$mn:00005C20                 mov     esp, ebp
.text$mn:00005C22                 pop     ebp
.text$mn:00005C23                 retn    8
.text$mn:00005C23 ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$mn:00005C23
.text$mn:00005C23 ; ---------------------------------------------------------------------------
.text$mn:00005C26                 align 4
.text$mn:00005C26 _text$mn        ends
.text$mn:00005C26
.text$x:00005C28 ; ===========================================================================
.text$x:00005C28
.text$x:00005C28 ; Segment type: Pure code
.text$x:00005C28 ; Segment permissions: Read/Execute
.text$x:00005C28 _text$x         segment para public 'CODE' use32
.text$x:00005C28                 assume cs:_text$x
.text$x:00005C28                 ;org 5C28h
.text$x:00005C28 ; COMDAT (pick associative to section at 5BA0)
.text$x:00005C28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005C28
.text$x:00005C28 ; =============== S U B R O U T I N E =======================================
.text$x:00005C28
.text$x:00005C28
.text$x:00005C28 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
.text$x:00005C28                                         ; DATA XREF: .xdata$x:0000CF88o
.text$x:00005C28                 mov     eax, [ebp+8]
.text$x:00005C2B                 push    eax
.text$x:00005C2C                 mov     eax, [ebp-10h]
.text$x:00005C2F                 push    eax             ; void *
.text$x:00005C30                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00005C35                 add     esp, 8
.text$x:00005C38                 retn
.text$x:00005C38 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 endp
.text$x:00005C38
.text$x:00005C39
.text$x:00005C39 ; =============== S U B R O U T I N E =======================================
.text$x:00005C39
.text$x:00005C39
.text$x:00005C39 __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$x:00005C39                                         ; DATA XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5o
.text$x:00005C39
.text$x:00005C39 arg_4           = dword ptr  8
.text$x:00005C39
.text$x:00005C39                 mov     edx, [esp+arg_4]
.text$x:00005C3D                 lea     eax, [edx+0Ch]
.text$x:00005C40                 mov     ecx, [edx-14h]
.text$x:00005C43                 xor     ecx, eax
.text$x:00005C45                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005C4A                 mov     eax, offset __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$x:00005C4F                 jmp     ___CxxFrameHandler3
.text$x:00005C4F __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$x:00005C4F
.text$x:00005C4F _text$x         ends
.text$x:00005C4F
.text$mn:00005C54 ; ===========================================================================
.text$mn:00005C54
.text$mn:00005C54 ; Segment type: Pure code
.text$mn:00005C54 ; Segment permissions: Read/Execute
.text$mn:00005C54 _text$mn        segment para public 'CODE' use32
.text$mn:00005C54                 assume cs:_text$mn
.text$mn:00005C54                 ;org 5C54h
.text$mn:00005C54 ; COMDAT (pick any)
.text$mn:00005C54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C54
.text$mn:00005C54 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C54
.text$mn:00005C54 ; Attributes: bp-based frame
.text$mn:00005C54
.text$mn:00005C54 ; int __cdecl std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(int, void *, int)
.text$mn:00005C54                 public ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
.text$mn:00005C54 ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
.text$mn:00005C54                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+1Cp
.text$mn:00005C54
.text$mn:00005C54 arg_0           = dword ptr  8
.text$mn:00005C54 arg_4           = dword ptr  0Ch
.text$mn:00005C54 arg_8           = dword ptr  10h
.text$mn:00005C54
.text$mn:00005C54                 push    ebp
.text$mn:00005C55                 mov     ebp, esp
.text$mn:00005C57                 mov     eax, [ebp+arg_8]
.text$mn:00005C5A                 push    eax
.text$mn:00005C5B                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00005C60                 add     esp, 4
.text$mn:00005C63                 push    eax             ; int
.text$mn:00005C64                 mov     ecx, [ebp+arg_4]
.text$mn:00005C67                 push    ecx             ; void *
.text$mn:00005C68                 mov     ecx, [ebp+arg_0]
.text$mn:00005C6B                 call    ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)
.text$mn:00005C70                 pop     ebp
.text$mn:00005C71                 retn
.text$mn:00005C71 ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z endp
.text$mn:00005C71
.text$mn:00005C71 ; ---------------------------------------------------------------------------
.text$mn:00005C72                 align 4
.text$mn:00005C72 _text$mn        ends
.text$mn:00005C72
.text$mn:00005C74 ; ===========================================================================
.text$mn:00005C74
.text$mn:00005C74 ; Segment type: Pure code
.text$mn:00005C74 ; Segment permissions: Read/Execute
.text$mn:00005C74 _text$mn        segment para public 'CODE' use32
.text$mn:00005C74                 assume cs:_text$mn
.text$mn:00005C74                 ;org 5C74h
.text$mn:00005C74 ; COMDAT (pick any)
.text$mn:00005C74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C74
.text$mn:00005C74 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C74
.text$mn:00005C74 ; Attributes: bp-based frame
.text$mn:00005C74
.text$mn:00005C74 ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:00005C74                 public ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00005C74 ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:00005C74                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+50p
.text$mn:00005C74                                         ; $LN19_0+4Bp
.text$mn:00005C74
.text$mn:00005C74 var_4           = dword ptr -4
.text$mn:00005C74 arg_0           = dword ptr  8
.text$mn:00005C74 arg_4           = dword ptr  0Ch
.text$mn:00005C74
.text$mn:00005C74                 push    ebp
.text$mn:00005C75                 mov     ebp, esp
.text$mn:00005C77                 push    ecx
.text$mn:00005C78                 mov     [ebp+var_4], ecx
.text$mn:00005C7B                 mov     eax, [ebp+arg_4]
.text$mn:00005C7E                 push    eax
.text$mn:00005C7F                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00005C84                 add     esp, 4
.text$mn:00005C87                 push    eax             ; int
.text$mn:00005C88                 mov     ecx, [ebp+arg_0]
.text$mn:00005C8B                 push    ecx             ; void *
.text$mn:00005C8C                 mov     edx, [ebp+var_4]
.text$mn:00005C8F                 push    edx             ; int
.text$mn:00005C90                 call    ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)
.text$mn:00005C95                 add     esp, 0Ch
.text$mn:00005C98                 mov     esp, ebp
.text$mn:00005C9A                 pop     ebp
.text$mn:00005C9B                 retn    8
.text$mn:00005C9B ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:00005C9B
.text$mn:00005C9B ; ---------------------------------------------------------------------------
.text$mn:00005C9E                 align 10h
.text$mn:00005C9E _text$mn        ends
.text$mn:00005C9E
.text$mn:00005CA0 ; ===========================================================================
.text$mn:00005CA0
.text$mn:00005CA0 ; Segment type: Pure code
.text$mn:00005CA0 ; Segment permissions: Read/Execute
.text$mn:00005CA0 _text$mn        segment para public 'CODE' use32
.text$mn:00005CA0                 assume cs:_text$mn
.text$mn:00005CA0                 ;org 5CA0h
.text$mn:00005CA0 ; COMDAT (pick any)
.text$mn:00005CA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005CA0
.text$mn:00005CA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00005CA0
.text$mn:00005CA0 ; Attributes: bp-based frame
.text$mn:00005CA0
.text$mn:00005CA0 ; int __stdcall std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:00005CA0                 public ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00005CA0 ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:00005CA0                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)+17p
.text$mn:00005CA0
.text$mn:00005CA0 var_1C          = dword ptr -1Ch
.text$mn:00005CA0 var_18          = dword ptr -18h
.text$mn:00005CA0 var_14          = dword ptr -14h
.text$mn:00005CA0 var_10          = dword ptr -10h
.text$mn:00005CA0 var_C           = dword ptr -0Ch
.text$mn:00005CA0 var_4           = dword ptr -4
.text$mn:00005CA0 arg_0           = dword ptr  8
.text$mn:00005CA0 arg_4           = dword ptr  0Ch
.text$mn:00005CA0
.text$mn:00005CA0                 push    ebp
.text$mn:00005CA1                 mov     ebp, esp
.text$mn:00005CA3                 push    0FFFFFFFFh
.text$mn:00005CA5                 push    offset __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00005CAA                 mov     eax, large fs:0
.text$mn:00005CB0                 push    eax
.text$mn:00005CB1                 sub     esp, 10h
.text$mn:00005CB4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005CB9                 xor     eax, ebp
.text$mn:00005CBB                 push    eax
.text$mn:00005CBC                 lea     eax, [ebp+var_C]
.text$mn:00005CBF                 mov     large fs:0, eax
.text$mn:00005CC5                 mov     [ebp+var_18], ecx
.text$mn:00005CC8                 mov     eax, [ebp+arg_0]
.text$mn:00005CCB                 push    eax             ; void *
.text$mn:00005CCC                 push    4               ; unsigned int
.text$mn:00005CCE                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00005CD3                 add     esp, 8
.text$mn:00005CD6                 mov     [ebp+var_10], eax
.text$mn:00005CD9                 mov     [ebp+var_4], 0
.text$mn:00005CE0                 cmp     [ebp+var_10], 0
.text$mn:00005CE4                 jz      short loc_5D01
.text$mn:00005CE6                 mov     ecx, [ebp+arg_4]
.text$mn:00005CE9                 push    ecx
.text$mn:00005CEA                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00005CEF                 add     esp, 4
.text$mn:00005CF2                 mov     edx, [ebp+var_10]
.text$mn:00005CF5                 mov     eax, [eax]
.text$mn:00005CF7                 mov     [edx], eax
.text$mn:00005CF9                 mov     ecx, [ebp+var_10]
.text$mn:00005CFC                 mov     [ebp+var_14], ecx
.text$mn:00005CFF                 jmp     short loc_5D08
.text$mn:00005D01 ; ---------------------------------------------------------------------------
.text$mn:00005D01
.text$mn:00005D01 loc_5D01:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+44j
.text$mn:00005D01                 mov     [ebp+var_14], 0
.text$mn:00005D08
.text$mn:00005D08 loc_5D08:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5Fj
.text$mn:00005D08                 mov     edx, [ebp+var_14]
.text$mn:00005D0B                 mov     [ebp+var_1C], edx
.text$mn:00005D0E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005D15                 mov     ecx, [ebp+var_C]
.text$mn:00005D18                 mov     large fs:0, ecx
.text$mn:00005D1F                 pop     ecx
.text$mn:00005D20                 mov     esp, ebp
.text$mn:00005D22                 pop     ebp
.text$mn:00005D23                 retn    8
.text$mn:00005D23 ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:00005D23
.text$mn:00005D23 ; ---------------------------------------------------------------------------
.text$mn:00005D26                 align 4
.text$mn:00005D26 _text$mn        ends
.text$mn:00005D26
.text$x:00005D28 ; ===========================================================================
.text$x:00005D28
.text$x:00005D28 ; Segment type: Pure code
.text$x:00005D28 ; Segment permissions: Read/Execute
.text$x:00005D28 _text$x         segment para public 'CODE' use32
.text$x:00005D28                 assume cs:_text$x
.text$x:00005D28                 ;org 5D28h
.text$x:00005D28 ; COMDAT (pick associative to section at 5CA0)
.text$x:00005D28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005D28
.text$x:00005D28 ; =============== S U B R O U T I N E =======================================
.text$x:00005D28
.text$x:00005D28
.text$x:00005D28 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 proc near
.text$x:00005D28                                         ; DATA XREF: .xdata$x:0000CFB4o
.text$x:00005D28                 mov     eax, [ebp+8]
.text$x:00005D2B                 push    eax
.text$x:00005D2C                 mov     eax, [ebp-10h]
.text$x:00005D2F                 push    eax             ; void *
.text$x:00005D30                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00005D35                 add     esp, 8
.text$x:00005D38                 retn
.text$x:00005D38 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 endp
.text$x:00005D38
.text$x:00005D39
.text$x:00005D39 ; =============== S U B R O U T I N E =======================================
.text$x:00005D39
.text$x:00005D39
.text$x:00005D39 __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$x:00005D39                                         ; DATA XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5o
.text$x:00005D39
.text$x:00005D39 arg_4           = dword ptr  8
.text$x:00005D39
.text$x:00005D39                 mov     edx, [esp+arg_4]
.text$x:00005D3D                 lea     eax, [edx+0Ch]
.text$x:00005D40                 mov     ecx, [edx-14h]
.text$x:00005D43                 xor     ecx, eax
.text$x:00005D45                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005D4A                 mov     eax, offset __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$x:00005D4F                 jmp     ___CxxFrameHandler3
.text$x:00005D4F __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$x:00005D4F
.text$x:00005D4F _text$x         ends
.text$x:00005D4F
.text$mn:00005D54 ; ===========================================================================
.text$mn:00005D54
.text$mn:00005D54 ; Segment type: Pure code
.text$mn:00005D54 ; Segment permissions: Read/Execute
.text$mn:00005D54 _text$mn        segment para public 'CODE' use32
.text$mn:00005D54                 assume cs:_text$mn
.text$mn:00005D54                 ;org 5D54h
.text$mn:00005D54 ; COMDAT (pick any)
.text$mn:00005D54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005D54
.text$mn:00005D54 ; =============== S U B R O U T I N E =======================================
.text$mn:00005D54
.text$mn:00005D54 ; Attributes: bp-based frame
.text$mn:00005D54
.text$mn:00005D54 ; int __cdecl std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(int, void *, int)
.text$mn:00005D54                 public ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z
.text$mn:00005D54 ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z proc near
.text$mn:00005D54                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+1Cp
.text$mn:00005D54
.text$mn:00005D54 arg_0           = dword ptr  8
.text$mn:00005D54 arg_4           = dword ptr  0Ch
.text$mn:00005D54 arg_8           = dword ptr  10h
.text$mn:00005D54
.text$mn:00005D54                 push    ebp
.text$mn:00005D55                 mov     ebp, esp
.text$mn:00005D57                 mov     eax, [ebp+arg_8]
.text$mn:00005D5A                 push    eax
.text$mn:00005D5B                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00005D60                 add     esp, 4
.text$mn:00005D63                 push    eax             ; int
.text$mn:00005D64                 mov     ecx, [ebp+arg_4]
.text$mn:00005D67                 push    ecx             ; void *
.text$mn:00005D68                 mov     ecx, [ebp+arg_0]
.text$mn:00005D6B                 call    ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00005D70                 pop     ebp
.text$mn:00005D71                 retn
.text$mn:00005D71 ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z endp
.text$mn:00005D71
.text$mn:00005D71 ; ---------------------------------------------------------------------------
.text$mn:00005D72                 align 4
.text$mn:00005D72 _text$mn        ends
.text$mn:00005D72
.text$mn:00005D74 ; ===========================================================================
.text$mn:00005D74
.text$mn:00005D74 ; Segment type: Pure code
.text$mn:00005D74 ; Segment permissions: Read/Execute
.text$mn:00005D74 _text$mn        segment para public 'CODE' use32
.text$mn:00005D74                 assume cs:_text$mn
.text$mn:00005D74                 ;org 5D74h
.text$mn:00005D74 ; COMDAT (pick any)
.text$mn:00005D74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005D74
.text$mn:00005D74 ; =============== S U B R O U T I N E =======================================
.text$mn:00005D74
.text$mn:00005D74 ; Attributes: bp-based frame
.text$mn:00005D74
.text$mn:00005D74 ; int __stdcall std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:00005D74                 public ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00005D74 ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:00005D74                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Alloc_proxy(void)+32p
.text$mn:00005D74
.text$mn:00005D74 var_4           = dword ptr -4
.text$mn:00005D74 arg_0           = dword ptr  8
.text$mn:00005D74 arg_4           = dword ptr  0Ch
.text$mn:00005D74
.text$mn:00005D74                 push    ebp
.text$mn:00005D75                 mov     ebp, esp
.text$mn:00005D77                 push    ecx
.text$mn:00005D78                 mov     [ebp+var_4], ecx
.text$mn:00005D7B                 mov     eax, [ebp+arg_4]
.text$mn:00005D7E                 push    eax
.text$mn:00005D7F                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:00005D84                 add     esp, 4
.text$mn:00005D87                 push    eax             ; int
.text$mn:00005D88                 mov     ecx, [ebp+arg_0]
.text$mn:00005D8B                 push    ecx             ; void *
.text$mn:00005D8C                 mov     edx, [ebp+var_4]
.text$mn:00005D8F                 push    edx             ; int
.text$mn:00005D90                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00005D95                 add     esp, 0Ch
.text$mn:00005D98                 mov     esp, ebp
.text$mn:00005D9A                 pop     ebp
.text$mn:00005D9B                 retn    8
.text$mn:00005D9B ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:00005D9B
.text$mn:00005D9B ; ---------------------------------------------------------------------------
.text$mn:00005D9E                 align 10h
.text$mn:00005D9E _text$mn        ends
.text$mn:00005D9E
.text$mn:00005DA0 ; ===========================================================================
.text$mn:00005DA0
.text$mn:00005DA0 ; Segment type: Pure code
.text$mn:00005DA0 ; Segment permissions: Read/Execute
.text$mn:00005DA0 _text$mn        segment para public 'CODE' use32
.text$mn:00005DA0                 assume cs:_text$mn
.text$mn:00005DA0                 ;org 5DA0h
.text$mn:00005DA0 ; COMDAT (pick any)
.text$mn:00005DA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005DA0
.text$mn:00005DA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00005DA0
.text$mn:00005DA0 ; Attributes: bp-based frame
.text$mn:00005DA0
.text$mn:00005DA0 ; int __stdcall std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:00005DA0                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00005DA0 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:00005DA0                                         ; CODE XREF: std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *,std::_Container_proxy &&)+17p
.text$mn:00005DA0                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+32p ...
.text$mn:00005DA0
.text$mn:00005DA0 var_1C          = dword ptr -1Ch
.text$mn:00005DA0 var_18          = dword ptr -18h
.text$mn:00005DA0 var_14          = dword ptr -14h
.text$mn:00005DA0 var_10          = dword ptr -10h
.text$mn:00005DA0 var_C           = dword ptr -0Ch
.text$mn:00005DA0 var_4           = dword ptr -4
.text$mn:00005DA0 arg_0           = dword ptr  8
.text$mn:00005DA0 arg_4           = dword ptr  0Ch
.text$mn:00005DA0
.text$mn:00005DA0                 push    ebp
.text$mn:00005DA1                 mov     ebp, esp
.text$mn:00005DA3                 push    0FFFFFFFFh
.text$mn:00005DA5                 push    offset __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00005DAA                 mov     eax, large fs:0
.text$mn:00005DB0                 push    eax
.text$mn:00005DB1                 sub     esp, 10h
.text$mn:00005DB4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005DB9                 xor     eax, ebp
.text$mn:00005DBB                 push    eax
.text$mn:00005DBC                 lea     eax, [ebp+var_C]
.text$mn:00005DBF                 mov     large fs:0, eax
.text$mn:00005DC5                 mov     [ebp+var_18], ecx
.text$mn:00005DC8                 mov     eax, [ebp+arg_0]
.text$mn:00005DCB                 push    eax             ; void *
.text$mn:00005DCC                 push    8               ; unsigned int
.text$mn:00005DCE                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00005DD3                 add     esp, 8
.text$mn:00005DD6                 mov     [ebp+var_10], eax
.text$mn:00005DD9                 mov     [ebp+var_4], 0
.text$mn:00005DE0                 cmp     [ebp+var_10], 0
.text$mn:00005DE4                 jz      short loc_5E07
.text$mn:00005DE6                 mov     ecx, [ebp+arg_4]
.text$mn:00005DE9                 push    ecx
.text$mn:00005DEA                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:00005DEF                 add     esp, 4
.text$mn:00005DF2                 mov     edx, [eax]
.text$mn:00005DF4                 mov     eax, [eax+4]
.text$mn:00005DF7                 mov     ecx, [ebp+var_10]
.text$mn:00005DFA                 mov     [ecx], edx
.text$mn:00005DFC                 mov     [ecx+4], eax
.text$mn:00005DFF                 mov     edx, [ebp+var_10]
.text$mn:00005E02                 mov     [ebp+var_14], edx
.text$mn:00005E05                 jmp     short loc_5E0E
.text$mn:00005E07 ; ---------------------------------------------------------------------------
.text$mn:00005E07
.text$mn:00005E07 loc_5E07:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+44j
.text$mn:00005E07                 mov     [ebp+var_14], 0
.text$mn:00005E0E
.text$mn:00005E0E loc_5E0E:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+65j
.text$mn:00005E0E                 mov     eax, [ebp+var_14]
.text$mn:00005E11                 mov     [ebp+var_1C], eax
.text$mn:00005E14                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005E1B                 mov     ecx, [ebp+var_C]
.text$mn:00005E1E                 mov     large fs:0, ecx
.text$mn:00005E25                 pop     ecx
.text$mn:00005E26                 mov     esp, ebp
.text$mn:00005E28                 pop     ebp
.text$mn:00005E29                 retn    8
.text$mn:00005E29 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:00005E29
.text$mn:00005E29 _text$mn        ends
.text$mn:00005E29
.text$x:00005E2C ; ===========================================================================
.text$x:00005E2C
.text$x:00005E2C ; Segment type: Pure code
.text$x:00005E2C ; Segment permissions: Read/Execute
.text$x:00005E2C _text$x         segment para public 'CODE' use32
.text$x:00005E2C                 assume cs:_text$x
.text$x:00005E2C                 ;org 5E2Ch
.text$x:00005E2C ; COMDAT (pick associative to section at 5DA0)
.text$x:00005E2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005E2C
.text$x:00005E2C ; =============== S U B R O U T I N E =======================================
.text$x:00005E2C
.text$x:00005E2C
.text$x:00005E2C __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
.text$x:00005E2C                                         ; DATA XREF: .xdata$x:0000CF04o
.text$x:00005E2C                 mov     eax, [ebp+8]
.text$x:00005E2F                 push    eax
.text$x:00005E30                 mov     eax, [ebp-10h]
.text$x:00005E33                 push    eax             ; void *
.text$x:00005E34                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00005E39                 add     esp, 8
.text$x:00005E3C                 retn
.text$x:00005E3C __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 endp
.text$x:00005E3C
.text$x:00005E3D
.text$x:00005E3D ; =============== S U B R O U T I N E =======================================
.text$x:00005E3D
.text$x:00005E3D
.text$x:00005E3D __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$x:00005E3D                                         ; DATA XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+5o
.text$x:00005E3D
.text$x:00005E3D arg_4           = dword ptr  8
.text$x:00005E3D
.text$x:00005E3D                 mov     edx, [esp+arg_4]
.text$x:00005E41                 lea     eax, [edx+0Ch]
.text$x:00005E44                 mov     ecx, [edx-14h]
.text$x:00005E47                 xor     ecx, eax
.text$x:00005E49                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005E4E                 mov     eax, offset __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$x:00005E53                 jmp     ___CxxFrameHandler3
.text$x:00005E53 __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$x:00005E53
.text$x:00005E53 _text$x         ends
.text$x:00005E53
.text$mn:00005E58 ; ===========================================================================
.text$mn:00005E58
.text$mn:00005E58 ; Segment type: Pure code
.text$mn:00005E58 ; Segment permissions: Read/Execute
.text$mn:00005E58 _text$mn        segment para public 'CODE' use32
.text$mn:00005E58                 assume cs:_text$mn
.text$mn:00005E58                 ;org 5E58h
.text$mn:00005E58 ; COMDAT (pick any)
.text$mn:00005E58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005E58
.text$mn:00005E58 ; =============== S U B R O U T I N E =======================================
.text$mn:00005E58
.text$mn:00005E58 ; Attributes: bp-based frame
.text$mn:00005E58
.text$mn:00005E58 ; int __cdecl std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(int, void *, int)
.text$mn:00005E58                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z
.text$mn:00005E58 ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z proc near
.text$mn:00005E58                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+1Cp
.text$mn:00005E58
.text$mn:00005E58 arg_0           = dword ptr  8
.text$mn:00005E58 arg_4           = dword ptr  0Ch
.text$mn:00005E58 arg_8           = dword ptr  10h
.text$mn:00005E58
.text$mn:00005E58                 push    ebp
.text$mn:00005E59                 mov     ebp, esp
.text$mn:00005E5B                 mov     eax, [ebp+arg_8]
.text$mn:00005E5E                 push    eax
.text$mn:00005E5F                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:00005E64                 add     esp, 4
.text$mn:00005E67                 push    eax             ; int
.text$mn:00005E68                 mov     ecx, [ebp+arg_4]
.text$mn:00005E6B                 push    ecx             ; void *
.text$mn:00005E6C                 mov     ecx, [ebp+arg_0]
.text$mn:00005E6F                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00005E74                 pop     ebp
.text$mn:00005E75                 retn
.text$mn:00005E75 ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z endp
.text$mn:00005E75
.text$mn:00005E75 ; ---------------------------------------------------------------------------
.text$mn:00005E76                 align 4
.text$mn:00005E76 _text$mn        ends
.text$mn:00005E76
.text$mn:00005E78 ; ===========================================================================
.text$mn:00005E78
.text$mn:00005E78 ; Segment type: Pure code
.text$mn:00005E78 ; Segment permissions: Read/Execute
.text$mn:00005E78 _text$mn        segment para public 'CODE' use32
.text$mn:00005E78                 assume cs:_text$mn
.text$mn:00005E78                 ;org 5E78h
.text$mn:00005E78 ; COMDAT (pick any)
.text$mn:00005E78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005E78
.text$mn:00005E78 ; =============== S U B R O U T I N E =======================================
.text$mn:00005E78
.text$mn:00005E78 ; Attributes: bp-based frame
.text$mn:00005E78
.text$mn:00005E78 ; int __stdcall std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void *, int)
.text$mn:00005E78                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.text$mn:00005E78 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z proc near
.text$mn:00005E78                                         ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+8Ep
.text$mn:00005E78                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+9Dp ...
.text$mn:00005E78
.text$mn:00005E78 var_4           = dword ptr -4
.text$mn:00005E78 arg_0           = dword ptr  8
.text$mn:00005E78 arg_4           = dword ptr  0Ch
.text$mn:00005E78
.text$mn:00005E78                 push    ebp
.text$mn:00005E79                 mov     ebp, esp
.text$mn:00005E7B                 push    ecx
.text$mn:00005E7C                 mov     [ebp+var_4], ecx
.text$mn:00005E7F                 mov     eax, [ebp+arg_4]
.text$mn:00005E82                 push    eax
.text$mn:00005E83                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00005E88                 add     esp, 4
.text$mn:00005E8B                 push    eax             ; int
.text$mn:00005E8C                 mov     ecx, [ebp+arg_0]
.text$mn:00005E8F                 push    ecx             ; void *
.text$mn:00005E90                 mov     edx, [ebp+var_4]
.text$mn:00005E93                 push    edx             ; int
.text$mn:00005E94                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00005E99                 add     esp, 0Ch
.text$mn:00005E9C                 mov     esp, ebp
.text$mn:00005E9E                 pop     ebp
.text$mn:00005E9F                 retn    8
.text$mn:00005E9F ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z endp
.text$mn:00005E9F
.text$mn:00005E9F ; ---------------------------------------------------------------------------
.text$mn:00005EA2                 align 4
.text$mn:00005EA2 _text$mn        ends
.text$mn:00005EA2
.text$mn:00005EA4 ; ===========================================================================
.text$mn:00005EA4
.text$mn:00005EA4 ; Segment type: Pure code
.text$mn:00005EA4 ; Segment permissions: Read/Execute
.text$mn:00005EA4 _text$mn        segment para public 'CODE' use32
.text$mn:00005EA4                 assume cs:_text$mn
.text$mn:00005EA4                 ;org 5EA4h
.text$mn:00005EA4 ; COMDAT (pick any)
.text$mn:00005EA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005EA4
.text$mn:00005EA4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005EA4
.text$mn:00005EA4 ; Attributes: bp-based frame
.text$mn:00005EA4
.text$mn:00005EA4 ; int __stdcall std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void *, int)
.text$mn:00005EA4                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.text$mn:00005EA4 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z proc near
.text$mn:00005EA4                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+17p
.text$mn:00005EA4
.text$mn:00005EA4 var_1C          = dword ptr -1Ch
.text$mn:00005EA4 var_18          = dword ptr -18h
.text$mn:00005EA4 var_14          = dword ptr -14h
.text$mn:00005EA4 var_10          = dword ptr -10h
.text$mn:00005EA4 var_C           = dword ptr -0Ch
.text$mn:00005EA4 var_4           = dword ptr -4
.text$mn:00005EA4 arg_0           = dword ptr  8
.text$mn:00005EA4 arg_4           = dword ptr  0Ch
.text$mn:00005EA4
.text$mn:00005EA4                 push    ebp
.text$mn:00005EA5                 mov     ebp, esp
.text$mn:00005EA7                 push    0FFFFFFFFh
.text$mn:00005EA9                 push    offset __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.text$mn:00005EAE                 mov     eax, large fs:0
.text$mn:00005EB4                 push    eax
.text$mn:00005EB5                 sub     esp, 10h
.text$mn:00005EB8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005EBD                 xor     eax, ebp
.text$mn:00005EBF                 push    eax
.text$mn:00005EC0                 lea     eax, [ebp+var_C]
.text$mn:00005EC3                 mov     large fs:0, eax
.text$mn:00005EC9                 mov     [ebp+var_18], ecx
.text$mn:00005ECC                 mov     eax, [ebp+arg_0]
.text$mn:00005ECF                 push    eax             ; void *
.text$mn:00005ED0                 push    1Ch             ; unsigned int
.text$mn:00005ED2                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00005ED7                 add     esp, 8
.text$mn:00005EDA                 mov     [ebp+var_10], eax
.text$mn:00005EDD                 mov     [ebp+var_4], 0
.text$mn:00005EE4                 cmp     [ebp+var_10], 0
.text$mn:00005EE8                 jz      short loc_5F04
.text$mn:00005EEA                 mov     ecx, [ebp+arg_4]
.text$mn:00005EED                 push    ecx
.text$mn:00005EEE                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00005EF3                 add     esp, 4
.text$mn:00005EF6                 push    eax
.text$mn:00005EF7                 mov     ecx, [ebp+var_10]
.text$mn:00005EFA                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00005EFF                 mov     [ebp+var_14], eax
.text$mn:00005F02                 jmp     short loc_5F0B
.text$mn:00005F04 ; ---------------------------------------------------------------------------
.text$mn:00005F04
.text$mn:00005F04 loc_5F04:                               ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+44j
.text$mn:00005F04                 mov     [ebp+var_14], 0
.text$mn:00005F0B
.text$mn:00005F0B loc_5F0B:                               ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5Ej
.text$mn:00005F0B                 mov     edx, [ebp+var_14]
.text$mn:00005F0E                 mov     [ebp+var_1C], edx
.text$mn:00005F11                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005F18                 mov     ecx, [ebp+var_C]
.text$mn:00005F1B                 mov     large fs:0, ecx
.text$mn:00005F22                 pop     ecx
.text$mn:00005F23                 mov     esp, ebp
.text$mn:00005F25                 pop     ebp
.text$mn:00005F26                 retn    8
.text$mn:00005F26 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z endp
.text$mn:00005F26
.text$mn:00005F26 ; ---------------------------------------------------------------------------
.text$mn:00005F29                 align 4
.text$mn:00005F29 _text$mn        ends
.text$mn:00005F29
.text$x:00005F2C ; ===========================================================================
.text$x:00005F2C
.text$x:00005F2C ; Segment type: Pure code
.text$x:00005F2C ; Segment permissions: Read/Execute
.text$x:00005F2C _text$x         segment para public 'CODE' use32
.text$x:00005F2C                 assume cs:_text$x
.text$x:00005F2C                 ;org 5F2Ch
.text$x:00005F2C ; COMDAT (pick associative to section at 5EA4)
.text$x:00005F2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005F2C
.text$x:00005F2C ; =============== S U B R O U T I N E =======================================
.text$x:00005F2C
.text$x:00005F2C
.text$x:00005F2C __unwindfunclet$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z$0 proc near
.text$x:00005F2C                                         ; DATA XREF: .xdata$x:0000CF5Co
.text$x:00005F2C                 mov     eax, [ebp+8]
.text$x:00005F2F                 push    eax
.text$x:00005F30                 mov     eax, [ebp-10h]
.text$x:00005F33                 push    eax             ; void *
.text$x:00005F34                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00005F39                 add     esp, 8
.text$x:00005F3C                 retn
.text$x:00005F3C __unwindfunclet$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z$0 endp
.text$x:00005F3C
.text$x:00005F3D
.text$x:00005F3D ; =============== S U B R O U T I N E =======================================
.text$x:00005F3D
.text$x:00005F3D
.text$x:00005F3D __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z proc near
.text$x:00005F3D                                         ; DATA XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5o
.text$x:00005F3D
.text$x:00005F3D arg_4           = dword ptr  8
.text$x:00005F3D
.text$x:00005F3D                 mov     edx, [esp+arg_4]
.text$x:00005F41                 lea     eax, [edx+0Ch]
.text$x:00005F44                 mov     ecx, [edx-14h]
.text$x:00005F47                 xor     ecx, eax
.text$x:00005F49                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005F4E                 mov     eax, offset __ehfuncinfo$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.text$x:00005F53                 jmp     ___CxxFrameHandler3
.text$x:00005F53 __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z endp
.text$x:00005F53
.text$x:00005F53 _text$x         ends
.text$x:00005F53
.text$mn:00005F58 ; ===========================================================================
.text$mn:00005F58
.text$mn:00005F58 ; Segment type: Pure code
.text$mn:00005F58 ; Segment permissions: Read/Execute
.text$mn:00005F58 _text$mn        segment para public 'CODE' use32
.text$mn:00005F58                 assume cs:_text$mn
.text$mn:00005F58                 ;org 5F58h
.text$mn:00005F58 ; COMDAT (pick any)
.text$mn:00005F58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F58
.text$mn:00005F58 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F58
.text$mn:00005F58 ; Attributes: bp-based frame
.text$mn:00005F58
.text$mn:00005F58 ; int __cdecl std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(int, void *, int)
.text$mn:00005F58                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z
.text$mn:00005F58 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z proc near
.text$mn:00005F58                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+1Cp
.text$mn:00005F58
.text$mn:00005F58 arg_0           = dword ptr  8
.text$mn:00005F58 arg_4           = dword ptr  0Ch
.text$mn:00005F58 arg_8           = dword ptr  10h
.text$mn:00005F58
.text$mn:00005F58                 push    ebp
.text$mn:00005F59                 mov     ebp, esp
.text$mn:00005F5B                 mov     eax, [ebp+arg_8]
.text$mn:00005F5E                 push    eax
.text$mn:00005F5F                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00005F64                 add     esp, 4
.text$mn:00005F67                 push    eax             ; int
.text$mn:00005F68                 mov     ecx, [ebp+arg_4]
.text$mn:00005F6B                 push    ecx             ; void *
.text$mn:00005F6C                 mov     ecx, [ebp+arg_0]
.text$mn:00005F6F                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00005F74                 pop     ebp
.text$mn:00005F75                 retn
.text$mn:00005F75 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z endp
.text$mn:00005F75
.text$mn:00005F75 ; ---------------------------------------------------------------------------
.text$mn:00005F76                 align 4
.text$mn:00005F76 _text$mn        ends
.text$mn:00005F76
.text$mn:00005F78 ; ===========================================================================
.text$mn:00005F78
.text$mn:00005F78 ; Segment type: Pure code
.text$mn:00005F78 ; Segment permissions: Read/Execute
.text$mn:00005F78 _text$mn        segment para public 'CODE' use32
.text$mn:00005F78                 assume cs:_text$mn
.text$mn:00005F78                 ;org 5F78h
.text$mn:00005F78 ; COMDAT (pick any)
.text$mn:00005F78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F78
.text$mn:00005F78 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F78
.text$mn:00005F78 ; Attributes: bp-based frame
.text$mn:00005F78
.text$mn:00005F78 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<char>>::destroy<char *>(char * *)
.text$mn:00005F78                 public ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
.text$mn:00005F78 ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc near
.text$mn:00005F78                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+3Ap
.text$mn:00005F78
.text$mn:00005F78 var_4           = dword ptr -4
.text$mn:00005F78 arg_0           = dword ptr  8
.text$mn:00005F78
.text$mn:00005F78                 push    ebp
.text$mn:00005F79                 mov     ebp, esp
.text$mn:00005F7B                 push    ecx
.text$mn:00005F7C                 mov     [ebp+var_4], ecx
.text$mn:00005F7F                 mov     eax, [ebp+arg_0]
.text$mn:00005F82                 push    eax
.text$mn:00005F83                 mov     ecx, [ebp+var_4]
.text$mn:00005F86                 push    ecx
.text$mn:00005F87                 call    ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)
.text$mn:00005F8C                 add     esp, 8
.text$mn:00005F8F                 mov     esp, ebp
.text$mn:00005F91                 pop     ebp
.text$mn:00005F92                 retn    4
.text$mn:00005F92 ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z endp
.text$mn:00005F92
.text$mn:00005F92 ; ---------------------------------------------------------------------------
.text$mn:00005F95                 align 4
.text$mn:00005F95 _text$mn        ends
.text$mn:00005F95
.text$mn:00005F98 ; ===========================================================================
.text$mn:00005F98
.text$mn:00005F98 ; Segment type: Pure code
.text$mn:00005F98 ; Segment permissions: Read/Execute
.text$mn:00005F98 _text$mn        segment para public 'CODE' use32
.text$mn:00005F98                 assume cs:_text$mn
.text$mn:00005F98                 ;org 5F98h
.text$mn:00005F98 ; COMDAT (pick any)
.text$mn:00005F98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F98
.text$mn:00005F98 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F98
.text$mn:00005F98 ; Attributes: bp-based frame
.text$mn:00005F98
.text$mn:00005F98 ; public: void __thiscall std::allocator<char>::destroy<char *>(char * *)
.text$mn:00005F98                 public ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
.text$mn:00005F98 ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
.text$mn:00005F98                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)+Ap
.text$mn:00005F98
.text$mn:00005F98 var_4           = dword ptr -4
.text$mn:00005F98
.text$mn:00005F98                 push    ebp
.text$mn:00005F99                 mov     ebp, esp
.text$mn:00005F9B                 push    ecx
.text$mn:00005F9C                 mov     [ebp+var_4], ecx
.text$mn:00005F9F                 mov     esp, ebp
.text$mn:00005FA1                 pop     ebp
.text$mn:00005FA2                 retn    4
.text$mn:00005FA2 ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z endp
.text$mn:00005FA2
.text$mn:00005FA2 ; ---------------------------------------------------------------------------
.text$mn:00005FA5                 align 4
.text$mn:00005FA5 _text$mn        ends
.text$mn:00005FA5
.text$mn:00005FA8 ; ===========================================================================
.text$mn:00005FA8
.text$mn:00005FA8 ; Segment type: Pure code
.text$mn:00005FA8 ; Segment permissions: Read/Execute
.text$mn:00005FA8 _text$mn        segment para public 'CODE' use32
.text$mn:00005FA8                 assume cs:_text$mn
.text$mn:00005FA8                 ;org 5FA8h
.text$mn:00005FA8 ; COMDAT (pick any)
.text$mn:00005FA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005FA8
.text$mn:00005FA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00005FA8
.text$mn:00005FA8 ; Attributes: bp-based frame
.text$mn:00005FA8
.text$mn:00005FA8 ; public: static void __cdecl std::allocator_traits<class std::allocator<char>>::destroy<char *>(class std::allocator<char> &, char * *)
.text$mn:00005FA8                 public ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
.text$mn:00005FA8 ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
.text$mn:00005FA8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)+Fp
.text$mn:00005FA8
.text$mn:00005FA8 arg_0           = dword ptr  8
.text$mn:00005FA8 arg_4           = dword ptr  0Ch
.text$mn:00005FA8
.text$mn:00005FA8                 push    ebp
.text$mn:00005FA9                 mov     ebp, esp
.text$mn:00005FAB                 mov     eax, [ebp+arg_4]
.text$mn:00005FAE                 push    eax
.text$mn:00005FAF                 mov     ecx, [ebp+arg_0]
.text$mn:00005FB2                 call    ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>(char * *)
.text$mn:00005FB7                 pop     ebp
.text$mn:00005FB8                 retn
.text$mn:00005FB8 ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z endp
.text$mn:00005FB8
.text$mn:00005FB8 ; ---------------------------------------------------------------------------
.text$mn:00005FB9                 align 4
.text$mn:00005FB9 _text$mn        ends
.text$mn:00005FB9
.text$mn:00005FBC ; ===========================================================================
.text$mn:00005FBC
.text$mn:00005FBC ; Segment type: Pure code
.text$mn:00005FBC ; Segment permissions: Read/Execute
.text$mn:00005FBC _text$mn        segment para public 'CODE' use32
.text$mn:00005FBC                 assume cs:_text$mn
.text$mn:00005FBC                 ;org 5FBCh
.text$mn:00005FBC ; COMDAT (pick any)
.text$mn:00005FBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005FBC
.text$mn:00005FBC ; =============== S U B R O U T I N E =======================================
.text$mn:00005FBC
.text$mn:00005FBC ; Attributes: bp-based frame
.text$mn:00005FBC
.text$mn:00005FBC ; public: void __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00005FBC                 public ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z
.text$mn:00005FBC ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z proc near
.text$mn:00005FBC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+3Ap
.text$mn:00005FBC
.text$mn:00005FBC var_4           = dword ptr -4
.text$mn:00005FBC arg_0           = dword ptr  8
.text$mn:00005FBC
.text$mn:00005FBC                 push    ebp
.text$mn:00005FBD                 mov     ebp, esp
.text$mn:00005FBF                 push    ecx
.text$mn:00005FC0                 mov     [ebp+var_4], ecx
.text$mn:00005FC3                 mov     eax, [ebp+arg_0]
.text$mn:00005FC6                 push    eax
.text$mn:00005FC7                 mov     ecx, [ebp+var_4]
.text$mn:00005FCA                 push    ecx
.text$mn:00005FCB                 call    ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)
.text$mn:00005FD0                 add     esp, 8
.text$mn:00005FD3                 mov     esp, ebp
.text$mn:00005FD5                 pop     ebp
.text$mn:00005FD6                 retn    4
.text$mn:00005FD6 ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z endp
.text$mn:00005FD6
.text$mn:00005FD6 ; ---------------------------------------------------------------------------
.text$mn:00005FD9                 align 4
.text$mn:00005FD9 _text$mn        ends
.text$mn:00005FD9
.text$mn:00005FDC ; ===========================================================================
.text$mn:00005FDC
.text$mn:00005FDC ; Segment type: Pure code
.text$mn:00005FDC ; Segment permissions: Read/Execute
.text$mn:00005FDC _text$mn        segment para public 'CODE' use32
.text$mn:00005FDC                 assume cs:_text$mn
.text$mn:00005FDC                 ;org 5FDCh
.text$mn:00005FDC ; COMDAT (pick any)
.text$mn:00005FDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005FDC
.text$mn:00005FDC ; =============== S U B R O U T I N E =======================================
.text$mn:00005FDC
.text$mn:00005FDC ; Attributes: bp-based frame
.text$mn:00005FDC
.text$mn:00005FDC ; public: void __thiscall std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00005FDC                 public ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z
.text$mn:00005FDC ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z proc near
.text$mn:00005FDC                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)+Ap
.text$mn:00005FDC
.text$mn:00005FDC var_4           = dword ptr -4
.text$mn:00005FDC
.text$mn:00005FDC                 push    ebp
.text$mn:00005FDD                 mov     ebp, esp
.text$mn:00005FDF                 push    ecx
.text$mn:00005FE0                 mov     [ebp+var_4], ecx
.text$mn:00005FE3                 mov     esp, ebp
.text$mn:00005FE5                 pop     ebp
.text$mn:00005FE6                 retn    4
.text$mn:00005FE6 ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z endp
.text$mn:00005FE6
.text$mn:00005FE6 ; ---------------------------------------------------------------------------
.text$mn:00005FE9                 align 4
.text$mn:00005FE9 _text$mn        ends
.text$mn:00005FE9
.text$mn:00005FEC ; ===========================================================================
.text$mn:00005FEC
.text$mn:00005FEC ; Segment type: Pure code
.text$mn:00005FEC ; Segment permissions: Read/Execute
.text$mn:00005FEC _text$mn        segment para public 'CODE' use32
.text$mn:00005FEC                 assume cs:_text$mn
.text$mn:00005FEC                 ;org 5FECh
.text$mn:00005FEC ; COMDAT (pick any)
.text$mn:00005FEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005FEC
.text$mn:00005FEC ; =============== S U B R O U T I N E =======================================
.text$mn:00005FEC
.text$mn:00005FEC ; Attributes: bp-based frame
.text$mn:00005FEC
.text$mn:00005FEC ; public: static void __cdecl std::allocator_traits<class std::allocator<wchar_t>>::destroy<wchar_t *>(class std::allocator<wchar_t> &, wchar_t * *)
.text$mn:00005FEC                 public ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z
.text$mn:00005FEC ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z proc near
.text$mn:00005FEC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)+Fp
.text$mn:00005FEC
.text$mn:00005FEC arg_0           = dword ptr  8
.text$mn:00005FEC arg_4           = dword ptr  0Ch
.text$mn:00005FEC
.text$mn:00005FEC                 push    ebp
.text$mn:00005FED                 mov     ebp, esp
.text$mn:00005FEF                 mov     eax, [ebp+arg_4]
.text$mn:00005FF2                 push    eax
.text$mn:00005FF3                 mov     ecx, [ebp+arg_0]
.text$mn:00005FF6                 call    ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00005FFB                 pop     ebp
.text$mn:00005FFC                 retn
.text$mn:00005FFC ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z endp
.text$mn:00005FFC
.text$mn:00005FFC ; ---------------------------------------------------------------------------
.text$mn:00005FFD                 align 10h
.text$mn:00005FFD _text$mn        ends
.text$mn:00005FFD
.text$mn:00006000 ; ===========================================================================
.text$mn:00006000
.text$mn:00006000 ; Segment type: Pure code
.text$mn:00006000 ; Segment permissions: Read/Execute
.text$mn:00006000 _text$mn        segment para public 'CODE' use32
.text$mn:00006000                 assume cs:_text$mn
.text$mn:00006000                 ;org 6000h
.text$mn:00006000 ; COMDAT (pick any)
.text$mn:00006000                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006000
.text$mn:00006000 ; =============== S U B R O U T I N E =======================================
.text$mn:00006000
.text$mn:00006000 ; Attributes: bp-based frame
.text$mn:00006000
.text$mn:00006000 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:00006000                 public ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:00006000 ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:00006000                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Free_proxy(void)+22p
.text$mn:00006000
.text$mn:00006000 var_4           = dword ptr -4
.text$mn:00006000 arg_0           = dword ptr  8
.text$mn:00006000
.text$mn:00006000                 push    ebp
.text$mn:00006001                 mov     ebp, esp
.text$mn:00006003                 push    ecx
.text$mn:00006004                 mov     [ebp+var_4], ecx
.text$mn:00006007                 mov     eax, [ebp+arg_0]
.text$mn:0000600A                 push    eax
.text$mn:0000600B                 mov     ecx, [ebp+var_4]
.text$mn:0000600E                 push    ecx
.text$mn:0000600F                 call    ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *)
.text$mn:00006014                 add     esp, 8
.text$mn:00006017                 mov     esp, ebp
.text$mn:00006019                 pop     ebp
.text$mn:0000601A                 retn    4
.text$mn:0000601A ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:0000601A
.text$mn:0000601A ; ---------------------------------------------------------------------------
.text$mn:0000601D                 align 10h
.text$mn:0000601D _text$mn        ends
.text$mn:0000601D
.text$mn:00006020 ; ===========================================================================
.text$mn:00006020
.text$mn:00006020 ; Segment type: Pure code
.text$mn:00006020 ; Segment permissions: Read/Execute
.text$mn:00006020 _text$mn        segment para public 'CODE' use32
.text$mn:00006020                 assume cs:_text$mn
.text$mn:00006020                 ;org 6020h
.text$mn:00006020 ; COMDAT (pick any)
.text$mn:00006020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006020
.text$mn:00006020 ; =============== S U B R O U T I N E =======================================
.text$mn:00006020
.text$mn:00006020 ; Attributes: bp-based frame
.text$mn:00006020
.text$mn:00006020 ; public: void __thiscall std::allocator<struct std::_Container_proxy>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:00006020                 public ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:00006020 ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:00006020                                         ; CODE XREF: std::allocator_traits<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *)+Ap
.text$mn:00006020                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+22p ...
.text$mn:00006020
.text$mn:00006020 var_4           = dword ptr -4
.text$mn:00006020
.text$mn:00006020                 push    ebp
.text$mn:00006021                 mov     ebp, esp
.text$mn:00006023                 push    ecx
.text$mn:00006024                 mov     [ebp+var_4], ecx
.text$mn:00006027                 mov     esp, ebp
.text$mn:00006029                 pop     ebp
.text$mn:0000602A                 retn    4
.text$mn:0000602A ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:0000602A
.text$mn:0000602A ; ---------------------------------------------------------------------------
.text$mn:0000602D                 align 10h
.text$mn:0000602D _text$mn        ends
.text$mn:0000602D
.text$mn:00006030 ; ===========================================================================
.text$mn:00006030
.text$mn:00006030 ; Segment type: Pure code
.text$mn:00006030 ; Segment permissions: Read/Execute
.text$mn:00006030 _text$mn        segment para public 'CODE' use32
.text$mn:00006030                 assume cs:_text$mn
.text$mn:00006030                 ;org 6030h
.text$mn:00006030 ; COMDAT (pick any)
.text$mn:00006030                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006030
.text$mn:00006030 ; =============== S U B R O U T I N E =======================================
.text$mn:00006030
.text$mn:00006030 ; Attributes: bp-based frame
.text$mn:00006030
.text$mn:00006030 ; public: static void __cdecl std::allocator_traits<class std::allocator<struct std::_Container_proxy>>::destroy<struct std::_Container_proxy>(class std::allocator<struct std::_Container_proxy> &, struct std::_Container_proxy *)
.text$mn:00006030                 public ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z
.text$mn:00006030 ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z proc near
.text$mn:00006030                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::_Container_proxy *)+Fp
.text$mn:00006030
.text$mn:00006030 arg_0           = dword ptr  8
.text$mn:00006030 arg_4           = dword ptr  0Ch
.text$mn:00006030
.text$mn:00006030                 push    ebp
.text$mn:00006031                 mov     ebp, esp
.text$mn:00006033                 mov     eax, [ebp+arg_4]
.text$mn:00006036                 push    eax
.text$mn:00006037                 mov     ecx, [ebp+arg_0]
.text$mn:0000603A                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:0000603F                 pop     ebp
.text$mn:00006040                 retn
.text$mn:00006040 ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z endp
.text$mn:00006040
.text$mn:00006040 ; ---------------------------------------------------------------------------
.text$mn:00006041                 align 4
.text$mn:00006041 _text$mn        ends
.text$mn:00006041
.text$mn:00006044 ; ===========================================================================
.text$mn:00006044
.text$mn:00006044 ; Segment type: Pure code
.text$mn:00006044 ; Segment permissions: Read/Execute
.text$mn:00006044 _text$mn        segment para public 'CODE' use32
.text$mn:00006044                 assume cs:_text$mn
.text$mn:00006044                 ;org 6044h
.text$mn:00006044 ; COMDAT (pick any)
.text$mn:00006044                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006044
.text$mn:00006044 ; =============== S U B R O U T I N E =======================================
.text$mn:00006044
.text$mn:00006044 ; Attributes: bp-based frame
.text$mn:00006044
.text$mn:00006044 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::destroy<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00006044                 public ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
.text$mn:00006044 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z proc near
.text$mn:00006044                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+1Dp
.text$mn:00006044                                         ; __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Ap
.text$mn:00006044
.text$mn:00006044 var_4           = dword ptr -4
.text$mn:00006044 arg_0           = dword ptr  8
.text$mn:00006044
.text$mn:00006044                 push    ebp
.text$mn:00006045                 mov     ebp, esp
.text$mn:00006047                 push    ecx
.text$mn:00006048                 mov     [ebp+var_4], ecx
.text$mn:0000604B                 mov     eax, [ebp+arg_0]
.text$mn:0000604E                 push    eax
.text$mn:0000604F                 mov     ecx, [ebp+var_4]
.text$mn:00006052                 push    ecx
.text$mn:00006053                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00006058                 add     esp, 8
.text$mn:0000605B                 mov     esp, ebp
.text$mn:0000605D                 pop     ebp
.text$mn:0000605E                 retn    4
.text$mn:0000605E ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z endp
.text$mn:0000605E
.text$mn:0000605E ; ---------------------------------------------------------------------------
.text$mn:00006061                 align 4
.text$mn:00006061 _text$mn        ends
.text$mn:00006061
.text$mn:00006064 ; ===========================================================================
.text$mn:00006064
.text$mn:00006064 ; Segment type: Pure code
.text$mn:00006064 ; Segment permissions: Read/Execute
.text$mn:00006064 _text$mn        segment para public 'CODE' use32
.text$mn:00006064                 assume cs:_text$mn
.text$mn:00006064                 ;org 6064h
.text$mn:00006064 ; COMDAT (pick any)
.text$mn:00006064                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006064
.text$mn:00006064 ; =============== S U B R O U T I N E =======================================
.text$mn:00006064
.text$mn:00006064 ; Attributes: bp-based frame
.text$mn:00006064
.text$mn:00006064 ; public: void __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::destroy<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00006064                 public ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
.text$mn:00006064 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z proc near
.text$mn:00006064                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Ap
.text$mn:00006064
.text$mn:00006064 var_4           = dword ptr -4
.text$mn:00006064 arg_0           = dword ptr  8
.text$mn:00006064
.text$mn:00006064                 push    ebp
.text$mn:00006065                 mov     ebp, esp
.text$mn:00006067                 push    ecx
.text$mn:00006068                 mov     [ebp+var_4], ecx
.text$mn:0000606B                 push    0
.text$mn:0000606D                 mov     ecx, [ebp+arg_0]
.text$mn:00006070                 call    ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`scalar deleting destructor'(uint)
.text$mn:00006075                 mov     esp, ebp
.text$mn:00006077                 pop     ebp
.text$mn:00006078                 retn    4
.text$mn:00006078 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z endp
.text$mn:00006078
.text$mn:00006078 ; ---------------------------------------------------------------------------
.text$mn:0000607B                 align 4
.text$mn:0000607B _text$mn        ends
.text$mn:0000607B
.text$mn:0000607C ; ===========================================================================
.text$mn:0000607C
.text$mn:0000607C ; Segment type: Pure code
.text$mn:0000607C ; Segment permissions: Read/Execute
.text$mn:0000607C _text$mn        segment para public 'CODE' use32
.text$mn:0000607C                 assume cs:_text$mn
.text$mn:0000607C                 ;org 607Ch
.text$mn:0000607C ; COMDAT (pick any)
.text$mn:0000607C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000607C
.text$mn:0000607C ; =============== S U B R O U T I N E =======================================
.text$mn:0000607C
.text$mn:0000607C ; Attributes: bp-based frame
.text$mn:0000607C
.text$mn:0000607C ; public: static void __cdecl std::allocator_traits<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::destroy<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:0000607C                 public ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
.text$mn:0000607C ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z proc near
.text$mn:0000607C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Fp
.text$mn:0000607C
.text$mn:0000607C arg_0           = dword ptr  8
.text$mn:0000607C arg_4           = dword ptr  0Ch
.text$mn:0000607C
.text$mn:0000607C                 push    ebp
.text$mn:0000607D                 mov     ebp, esp
.text$mn:0000607F                 mov     eax, [ebp+arg_4]
.text$mn:00006082                 push    eax
.text$mn:00006083                 mov     ecx, [ebp+arg_0]
.text$mn:00006086                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000608B                 pop     ebp
.text$mn:0000608C                 retn
.text$mn:0000608C ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z endp
.text$mn:0000608C
.text$mn:0000608C ; ---------------------------------------------------------------------------
.text$mn:0000608D                 align 10h
.text$mn:0000608D _text$mn        ends
.text$mn:0000608D
.text$mn:00006090 ; ===========================================================================
.text$mn:00006090
.text$mn:00006090 ; Segment type: Pure code
.text$mn:00006090 ; Segment permissions: Read/Execute
.text$mn:00006090 _text$mn        segment para public 'CODE' use32
.text$mn:00006090                 assume cs:_text$mn
.text$mn:00006090                 ;org 6090h
.text$mn:00006090 ; COMDAT (pick any)
.text$mn:00006090                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006090
.text$mn:00006090 ; =============== S U B R O U T I N E =======================================
.text$mn:00006090
.text$mn:00006090 ; Attributes: bp-based frame
.text$mn:00006090
.text$mn:00006090 ; int & __cdecl std::forward<int &>(int &)
.text$mn:00006090                 public ??$forward@AAH@std@@YAAAHAAH@Z
.text$mn:00006090 ??$forward@AAH@std@@YAAAHAAH@Z proc near
.text$mn:00006090                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<int>>::construct<int,int &>(int *,int &)+Bp
.text$mn:00006090                                         ; std::allocator<int>::construct<int,int &>(int *,int &)+4Ap ...
.text$mn:00006090
.text$mn:00006090 arg_0           = dword ptr  8
.text$mn:00006090
.text$mn:00006090                 push    ebp
.text$mn:00006091                 mov     ebp, esp
.text$mn:00006093                 mov     eax, [ebp+arg_0]
.text$mn:00006096                 pop     ebp
.text$mn:00006097                 retn
.text$mn:00006097 ??$forward@AAH@std@@YAAAHAAH@Z endp
.text$mn:00006097
.text$mn:00006097 _text$mn        ends
.text$mn:00006097
.text$mn:00006098 ; ===========================================================================
.text$mn:00006098
.text$mn:00006098 ; Segment type: Pure code
.text$mn:00006098 ; Segment permissions: Read/Execute
.text$mn:00006098 _text$mn        segment para public 'CODE' use32
.text$mn:00006098                 assume cs:_text$mn
.text$mn:00006098                 ;org 6098h
.text$mn:00006098 ; COMDAT (pick any)
.text$mn:00006098                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006098
.text$mn:00006098 ; =============== S U B R O U T I N E =======================================
.text$mn:00006098
.text$mn:00006098 ; Attributes: bp-based frame
.text$mn:00006098
.text$mn:00006098 ; char * & __cdecl std::forward<char * &>(char * &)
.text$mn:00006098                 public ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
.text$mn:00006098 ??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
.text$mn:00006098                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+Bp
.text$mn:00006098                                         ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)+4Ap ...
.text$mn:00006098
.text$mn:00006098 arg_0           = dword ptr  8
.text$mn:00006098
.text$mn:00006098                 push    ebp
.text$mn:00006099                 mov     ebp, esp
.text$mn:0000609B                 mov     eax, [ebp+arg_0]
.text$mn:0000609E                 pop     ebp
.text$mn:0000609F                 retn
.text$mn:0000609F ??$forward@AAPAD@std@@YAAAPADAAPAD@Z endp
.text$mn:0000609F
.text$mn:0000609F _text$mn        ends
.text$mn:0000609F
.text$mn:000060A0 ; ===========================================================================
.text$mn:000060A0
.text$mn:000060A0 ; Segment type: Pure code
.text$mn:000060A0 ; Segment permissions: Read/Execute
.text$mn:000060A0 _text$mn        segment para public 'CODE' use32
.text$mn:000060A0                 assume cs:_text$mn
.text$mn:000060A0                 ;org 60A0h
.text$mn:000060A0 ; COMDAT (pick any)
.text$mn:000060A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000060A0
.text$mn:000060A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000060A0
.text$mn:000060A0 ; Attributes: bp-based frame
.text$mn:000060A0
.text$mn:000060A0 ; wchar_t * & __cdecl std::forward<wchar_t * &>(wchar_t * &)
.text$mn:000060A0                 public ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z
.text$mn:000060A0 ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z proc near
.text$mn:000060A0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+Bp
.text$mn:000060A0                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+4Ap ...
.text$mn:000060A0
.text$mn:000060A0 arg_0           = dword ptr  8
.text$mn:000060A0
.text$mn:000060A0                 push    ebp
.text$mn:000060A1                 mov     ebp, esp
.text$mn:000060A3                 mov     eax, [ebp+arg_0]
.text$mn:000060A6                 pop     ebp
.text$mn:000060A7                 retn
.text$mn:000060A7 ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z endp
.text$mn:000060A7
.text$mn:000060A7 _text$mn        ends
.text$mn:000060A7
.text$mn:000060A8 ; ===========================================================================
.text$mn:000060A8
.text$mn:000060A8 ; Segment type: Pure code
.text$mn:000060A8 ; Segment permissions: Read/Execute
.text$mn:000060A8 _text$mn        segment para public 'CODE' use32
.text$mn:000060A8                 assume cs:_text$mn
.text$mn:000060A8                 ;org 60A8h
.text$mn:000060A8 ; COMDAT (pick any)
.text$mn:000060A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000060A8
.text$mn:000060A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000060A8
.text$mn:000060A8 ; Attributes: bp-based frame
.text$mn:000060A8
.text$mn:000060A8 ; int const & __cdecl std::forward<int const &>(int const &)
.text$mn:000060A8                 public ??$forward@ABH@std@@YAABHABH@Z
.text$mn:000060A8 ??$forward@ABH@std@@YAABHABH@Z proc near
.text$mn:000060A8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<int>>::construct<int,int const &>(int *,int const &)+Bp
.text$mn:000060A8                                         ; std::allocator_traits<std::allocator<int>>::construct<int,int const &>(std::allocator<int> &,int *,int const &)+7p
.text$mn:000060A8
.text$mn:000060A8 arg_0           = dword ptr  8
.text$mn:000060A8
.text$mn:000060A8                 push    ebp
.text$mn:000060A9                 mov     ebp, esp
.text$mn:000060AB                 mov     eax, [ebp+arg_0]
.text$mn:000060AE                 pop     ebp
.text$mn:000060AF                 retn
.text$mn:000060AF ??$forward@ABH@std@@YAABHABH@Z endp
.text$mn:000060AF
.text$mn:000060AF _text$mn        ends
.text$mn:000060AF
.text$mn:000060B0 ; ===========================================================================
.text$mn:000060B0
.text$mn:000060B0 ; Segment type: Pure code
.text$mn:000060B0 ; Segment permissions: Read/Execute
.text$mn:000060B0 _text$mn        segment para public 'CODE' use32
.text$mn:000060B0                 assume cs:_text$mn
.text$mn:000060B0                 ;org 60B0h
.text$mn:000060B0 ; COMDAT (pick any)
.text$mn:000060B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000060B0
.text$mn:000060B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000060B0
.text$mn:000060B0 ; Attributes: bp-based frame
.text$mn:000060B0
.text$mn:000060B0 ; struct std::_Container_proxy && __cdecl std::forward<struct std::_Container_proxy>(struct std::_Container_proxy &)
.text$mn:000060B0                 public ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
.text$mn:000060B0 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc near
.text$mn:000060B0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+Bp
.text$mn:000060B0                                         ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+4Ap ...
.text$mn:000060B0
.text$mn:000060B0 arg_0           = dword ptr  8
.text$mn:000060B0
.text$mn:000060B0                 push    ebp
.text$mn:000060B1                 mov     ebp, esp
.text$mn:000060B3                 mov     eax, [ebp+arg_0]
.text$mn:000060B6                 pop     ebp
.text$mn:000060B7                 retn
.text$mn:000060B7 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z endp
.text$mn:000060B7
.text$mn:000060B7 _text$mn        ends
.text$mn:000060B7
.text$mn:000060B8 ; ===========================================================================
.text$mn:000060B8
.text$mn:000060B8 ; Segment type: Pure code
.text$mn:000060B8 ; Segment permissions: Read/Execute
.text$mn:000060B8 _text$mn        segment para public 'CODE' use32
.text$mn:000060B8                 assume cs:_text$mn
.text$mn:000060B8                 ;org 60B8h
.text$mn:000060B8 ; COMDAT (pick any)
.text$mn:000060B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000060B8
.text$mn:000060B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000060B8
.text$mn:000060B8 ; Attributes: bp-based frame
.text$mn:000060B8
.text$mn:000060B8 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> && __cdecl std::forward<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:000060B8                 public ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
.text$mn:000060B8 ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z proc near
.text$mn:000060B8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+Bp
.text$mn:000060B8                                         ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+4Ap ...
.text$mn:000060B8
.text$mn:000060B8 arg_0           = dword ptr  8
.text$mn:000060B8
.text$mn:000060B8                 push    ebp
.text$mn:000060B9                 mov     ebp, esp
.text$mn:000060BB                 mov     eax, [ebp+arg_0]
.text$mn:000060BE                 pop     ebp
.text$mn:000060BF                 retn
.text$mn:000060BF ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z endp
.text$mn:000060BF
.text$mn:000060BF _text$mn        ends
.text$mn:000060BF
.text$mn:000060C0 ; ===========================================================================
.text$mn:000060C0
.text$mn:000060C0 ; Segment type: Pure code
.text$mn:000060C0 ; Segment permissions: Read/Execute
.text$mn:000060C0 _text$mn        segment para public 'CODE' use32
.text$mn:000060C0                 assume cs:_text$mn
.text$mn:000060C0                 ;org 60C0h
.text$mn:000060C0 ; COMDAT (pick any)
.text$mn:000060C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000060C0
.text$mn:000060C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000060C0
.text$mn:000060C0 ; Attributes: bp-based frame
.text$mn:000060C0
.text$mn:000060C0 ; int __stdcall std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(struct std::_Iterator_base12 *)
.text$mn:000060C0                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:000060C0 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$mn:000060C0                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+2Dp
.text$mn:000060C0
.text$mn:000060C0 var_10          = dword ptr -10h
.text$mn:000060C0 var_C           = dword ptr -0Ch
.text$mn:000060C0 var_4           = dword ptr -4
.text$mn:000060C0 arg_0           = dword ptr  8
.text$mn:000060C0
.text$mn:000060C0                 push    ebp
.text$mn:000060C1                 mov     ebp, esp
.text$mn:000060C3                 push    0FFFFFFFFh
.text$mn:000060C5                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:000060CA                 mov     eax, large fs:0
.text$mn:000060D0                 push    eax
.text$mn:000060D1                 push    ecx
.text$mn:000060D2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000060D7                 xor     eax, ebp
.text$mn:000060D9                 push    eax
.text$mn:000060DA                 lea     eax, [ebp+var_C]
.text$mn:000060DD                 mov     large fs:0, eax
.text$mn:000060E3                 mov     [ebp+var_10], ecx
.text$mn:000060E6                 mov     eax, [ebp+arg_0]
.text$mn:000060E9                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:000060EA                 mov     ecx, [ebp+var_10] ; this
.text$mn:000060ED                 call    ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)
.text$mn:000060F2                 mov     [ebp+var_4], 0
.text$mn:000060F9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006100                 mov     eax, [ebp+var_10]
.text$mn:00006103                 mov     ecx, [ebp+var_C]
.text$mn:00006106                 mov     large fs:0, ecx
.text$mn:0000610D                 pop     ecx
.text$mn:0000610E                 mov     esp, ebp
.text$mn:00006110                 pop     ebp
.text$mn:00006111                 retn    4
.text$mn:00006111 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$mn:00006111
.text$mn:00006111 _text$mn        ends
.text$mn:00006111
.text$x:00006114 ; ===========================================================================
.text$x:00006114
.text$x:00006114 ; Segment type: Pure code
.text$x:00006114 ; Segment permissions: Read/Execute
.text$x:00006114 _text$x         segment para public 'CODE' use32
.text$x:00006114                 assume cs:_text$x
.text$x:00006114                 ;org 6114h
.text$x:00006114 ; COMDAT (pick associative to section at 60C0)
.text$x:00006114                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006114
.text$x:00006114 ; =============== S U B R O U T I N E =======================================
.text$x:00006114
.text$x:00006114
.text$x:00006114 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 proc near
.text$x:00006114                                         ; DATA XREF: .xdata$x:0000CD30o
.text$x:00006114                 mov     ecx, [ebp-10h]  ; this
.text$x:00006117                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00006117 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 endp
.text$x:00006117
.text$x:0000611C
.text$x:0000611C ; =============== S U B R O U T I N E =======================================
.text$x:0000611C
.text$x:0000611C
.text$x:0000611C __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$x:0000611C                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12> const &)+5o
.text$x:0000611C
.text$x:0000611C arg_4           = dword ptr  8
.text$x:0000611C
.text$x:0000611C                 mov     edx, [esp+arg_4]
.text$x:00006120                 lea     eax, [edx+0Ch]
.text$x:00006123                 mov     ecx, [edx-8]
.text$x:00006126                 xor     ecx, eax
.text$x:00006128                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000612D                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$x:00006132                 jmp     ___CxxFrameHandler3
.text$x:00006132 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$x:00006132
.text$x:00006132 ; ---------------------------------------------------------------------------
.text$x:00006137                 align 4
.text$x:00006137 _text$x         ends
.text$x:00006137
.text$mn:00006138 ; ===========================================================================
.text$mn:00006138
.text$mn:00006138 ; Segment type: Pure code
.text$mn:00006138 ; Segment permissions: Read/Execute
.text$mn:00006138 _text$mn        segment para public 'CODE' use32
.text$mn:00006138                 assume cs:_text$mn
.text$mn:00006138                 ;org 6138h
.text$mn:00006138 ; COMDAT (pick any)
.text$mn:00006138                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006138
.text$mn:00006138 ; =============== S U B R O U T I N E =======================================
.text$mn:00006138
.text$mn:00006138 ; Attributes: bp-based frame
.text$mn:00006138
.text$mn:00006138 ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>::_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>(void)
.text$mn:00006138                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00006138 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:00006138                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)+29p
.text$mn:00006138
.text$mn:00006138 var_10          = dword ptr -10h
.text$mn:00006138 var_C           = dword ptr -0Ch
.text$mn:00006138 var_4           = dword ptr -4
.text$mn:00006138
.text$mn:00006138                 push    ebp
.text$mn:00006139                 mov     ebp, esp
.text$mn:0000613B                 push    0FFFFFFFFh
.text$mn:0000613D                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00006142                 mov     eax, large fs:0
.text$mn:00006148                 push    eax
.text$mn:00006149                 push    ecx
.text$mn:0000614A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000614F                 xor     eax, ebp
.text$mn:00006151                 push    eax
.text$mn:00006152                 lea     eax, [ebp+var_C]
.text$mn:00006155                 mov     large fs:0, eax
.text$mn:0000615B                 mov     [ebp+var_10], ecx
.text$mn:0000615E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006161                 call    ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12(void)
.text$mn:00006166                 mov     [ebp+var_4], 0
.text$mn:0000616D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006174                 mov     eax, [ebp+var_10]
.text$mn:00006177                 mov     ecx, [ebp+var_C]
.text$mn:0000617A                 mov     large fs:0, ecx
.text$mn:00006181                 pop     ecx
.text$mn:00006182                 mov     esp, ebp
.text$mn:00006184                 pop     ebp
.text$mn:00006185                 retn
.text$mn:00006185 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00006185
.text$mn:00006185 ; ---------------------------------------------------------------------------
.text$mn:00006186                 align 4
.text$mn:00006186 _text$mn        ends
.text$mn:00006186
.text$x:00006188 ; ===========================================================================
.text$x:00006188
.text$x:00006188 ; Segment type: Pure code
.text$x:00006188 ; Segment permissions: Read/Execute
.text$x:00006188 _text$x         segment para public 'CODE' use32
.text$x:00006188                 assume cs:_text$x
.text$x:00006188                 ;org 6188h
.text$x:00006188 ; COMDAT (pick associative to section at 6138)
.text$x:00006188                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006188
.text$x:00006188 ; =============== S U B R O U T I N E =======================================
.text$x:00006188
.text$x:00006188
.text$x:00006188 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00006188                                         ; DATA XREF: .xdata$x:0000CCD8o
.text$x:00006188                 mov     ecx, [ebp-10h]  ; this
.text$x:0000618B                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:0000618B __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:0000618B
.text$x:00006190
.text$x:00006190 ; =============== S U B R O U T I N E =======================================
.text$x:00006190
.text$x:00006190
.text$x:00006190 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00006190                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)+5o
.text$x:00006190
.text$x:00006190 arg_4           = dword ptr  8
.text$x:00006190
.text$x:00006190                 mov     edx, [esp+arg_4]
.text$x:00006194                 lea     eax, [edx+0Ch]
.text$x:00006197                 mov     ecx, [edx-8]
.text$x:0000619A                 xor     ecx, eax
.text$x:0000619C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000061A1                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$x:000061A6                 jmp     ___CxxFrameHandler3
.text$x:000061A6 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:000061A6
.text$x:000061A6 ; ---------------------------------------------------------------------------
.text$x:000061AB                 align 4
.text$x:000061AB _text$x         ends
.text$x:000061AB
.text$mn:000061AC ; ===========================================================================
.text$mn:000061AC
.text$mn:000061AC ; Segment type: Pure code
.text$mn:000061AC ; Segment permissions: Read/Execute
.text$mn:000061AC _text$mn        segment para public 'CODE' use32
.text$mn:000061AC                 assume cs:_text$mn
.text$mn:000061AC                 ;org 61ACh
.text$mn:000061AC ; COMDAT (pick any)
.text$mn:000061AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000061AC
.text$mn:000061AC ; =============== S U B R O U T I N E =======================================
.text$mn:000061AC
.text$mn:000061AC ; Attributes: bp-based frame
.text$mn:000061AC
.text$mn:000061AC ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(class std::allocator<char> const &)
.text$mn:000061AC                 public ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:000061AC ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$mn:000061AC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+34p
.text$mn:000061AC
.text$mn:000061AC var_10          = dword ptr -10h
.text$mn:000061AC var_C           = dword ptr -0Ch
.text$mn:000061AC var_4           = dword ptr -4
.text$mn:000061AC
.text$mn:000061AC                 push    ebp
.text$mn:000061AD                 mov     ebp, esp
.text$mn:000061AF                 push    0FFFFFFFFh
.text$mn:000061B1                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:000061B6                 mov     eax, large fs:0
.text$mn:000061BC                 push    eax
.text$mn:000061BD                 push    ecx
.text$mn:000061BE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000061C3                 xor     eax, ebp
.text$mn:000061C5                 push    eax
.text$mn:000061C6                 lea     eax, [ebp+var_C]
.text$mn:000061C9                 mov     large fs:0, eax
.text$mn:000061CF                 mov     [ebp+var_10], ecx
.text$mn:000061D2                 mov     ecx, [ebp+var_10]
.text$mn:000061D5                 call    ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)
.text$mn:000061DA                 mov     [ebp+var_4], 0
.text$mn:000061E1                 mov     ecx, [ebp+var_10]
.text$mn:000061E4                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:000061E9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000061F0                 mov     eax, [ebp+var_10]
.text$mn:000061F3                 mov     ecx, [ebp+var_C]
.text$mn:000061F6                 mov     large fs:0, ecx
.text$mn:000061FD                 pop     ecx
.text$mn:000061FE                 mov     esp, ebp
.text$mn:00006200                 pop     ebp
.text$mn:00006201                 retn    4
.text$mn:00006201 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$mn:00006201
.text$mn:00006201 _text$mn        ends
.text$mn:00006201
.text$x:00006204 ; ===========================================================================
.text$x:00006204
.text$x:00006204 ; Segment type: Pure code
.text$x:00006204 ; Segment permissions: Read/Execute
.text$x:00006204 _text$x         segment para public 'CODE' use32
.text$x:00006204                 assume cs:_text$x
.text$x:00006204                 ;org 6204h
.text$x:00006204 ; COMDAT (pick associative to section at 61AC)
.text$x:00006204                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006204
.text$x:00006204 ; =============== S U B R O U T I N E =======================================
.text$x:00006204
.text$x:00006204
.text$x:00006204 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
.text$x:00006204                                         ; DATA XREF: .xdata$x:0000BFC4o
.text$x:00006204                 mov     ecx, [ebp-10h]
.text$x:00006207                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:00006207 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 endp
.text$x:00006207
.text$x:0000620C
.text$x:0000620C ; =============== S U B R O U T I N E =======================================
.text$x:0000620C
.text$x:0000620C
.text$x:0000620C __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$x:0000620C                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+5o
.text$x:0000620C
.text$x:0000620C arg_4           = dword ptr  8
.text$x:0000620C
.text$x:0000620C                 mov     edx, [esp+arg_4]
.text$x:00006210                 lea     eax, [edx+0Ch]
.text$x:00006213                 mov     ecx, [edx-8]
.text$x:00006216                 xor     ecx, eax
.text$x:00006218                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000621D                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$x:00006222                 jmp     ___CxxFrameHandler3
.text$x:00006222 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$x:00006222
.text$x:00006222 ; ---------------------------------------------------------------------------
.text$x:00006227                 align 4
.text$x:00006227 _text$x         ends
.text$x:00006227
.text$mn:00006228 ; ===========================================================================
.text$mn:00006228
.text$mn:00006228 ; Segment type: Pure code
.text$mn:00006228 ; Segment permissions: Read/Execute
.text$mn:00006228 _text$mn        segment para public 'CODE' use32
.text$mn:00006228                 assume cs:_text$mn
.text$mn:00006228                 ;org 6228h
.text$mn:00006228 ; COMDAT (pick any)
.text$mn:00006228                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006228
.text$mn:00006228 ; =============== S U B R O U T I N E =======================================
.text$mn:00006228
.text$mn:00006228 ; Attributes: bp-based frame
.text$mn:00006228
.text$mn:00006228 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(class std::allocator<wchar_t> const &)
.text$mn:00006228                 public ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:00006228 ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:00006228                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+38p
.text$mn:00006228                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+43p ...
.text$mn:00006228
.text$mn:00006228 var_10          = dword ptr -10h
.text$mn:00006228 var_C           = dword ptr -0Ch
.text$mn:00006228 var_4           = dword ptr -4
.text$mn:00006228
.text$mn:00006228                 push    ebp
.text$mn:00006229                 mov     ebp, esp
.text$mn:0000622B                 push    0FFFFFFFFh
.text$mn:0000622D                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:00006232                 mov     eax, large fs:0
.text$mn:00006238                 push    eax
.text$mn:00006239                 push    ecx
.text$mn:0000623A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000623F                 xor     eax, ebp
.text$mn:00006241                 push    eax
.text$mn:00006242                 lea     eax, [ebp+var_C]
.text$mn:00006245                 mov     large fs:0, eax
.text$mn:0000624B                 mov     [ebp+var_10], ecx
.text$mn:0000624E                 mov     ecx, [ebp+var_10]
.text$mn:00006251                 call    ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:00006256                 mov     [ebp+var_4], 0
.text$mn:0000625D                 mov     ecx, [ebp+var_10]
.text$mn:00006260                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:00006265                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000626C                 mov     eax, [ebp+var_10]
.text$mn:0000626F                 mov     ecx, [ebp+var_C]
.text$mn:00006272                 mov     large fs:0, ecx
.text$mn:00006279                 pop     ecx
.text$mn:0000627A                 mov     esp, ebp
.text$mn:0000627C                 pop     ebp
.text$mn:0000627D                 retn    4
.text$mn:0000627D ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:0000627D
.text$mn:0000627D _text$mn        ends
.text$mn:0000627D
.text$x:00006280 ; ===========================================================================
.text$x:00006280
.text$x:00006280 ; Segment type: Pure code
.text$x:00006280 ; Segment permissions: Read/Execute
.text$x:00006280 _text$x         segment para public 'CODE' use32
.text$x:00006280                 assume cs:_text$x
.text$x:00006280                 ;org 6280h
.text$x:00006280 ; COMDAT (pick associative to section at 6228)
.text$x:00006280                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006280
.text$x:00006280 ; =============== S U B R O U T I N E =======================================
.text$x:00006280
.text$x:00006280
.text$x:00006280 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 proc near
.text$x:00006280                                         ; DATA XREF: .xdata$x:0000C2E4o
.text$x:00006280                 mov     ecx, [ebp-10h]
.text$x:00006283                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:00006283 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 endp
.text$x:00006283
.text$x:00006288
.text$x:00006288 ; =============== S U B R O U T I N E =======================================
.text$x:00006288
.text$x:00006288
.text$x:00006288 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$x:00006288                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+5o
.text$x:00006288
.text$x:00006288 arg_4           = dword ptr  8
.text$x:00006288
.text$x:00006288                 mov     edx, [esp+arg_4]
.text$x:0000628C                 lea     eax, [edx+0Ch]
.text$x:0000628F                 mov     ecx, [edx-8]
.text$x:00006292                 xor     ecx, eax
.text$x:00006294                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006299                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$x:0000629E                 jmp     ___CxxFrameHandler3
.text$x:0000629E __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$x:0000629E
.text$x:0000629E ; ---------------------------------------------------------------------------
.text$x:000062A3                 align 4
.text$x:000062A3 _text$x         ends
.text$x:000062A3
.text$mn:000062A4 ; ===========================================================================
.text$mn:000062A4
.text$mn:000062A4 ; Segment type: Pure code
.text$mn:000062A4 ; Segment permissions: Read/Execute
.text$mn:000062A4 _text$mn        segment para public 'CODE' use32
.text$mn:000062A4                 assume cs:_text$mn
.text$mn:000062A4                 ;org 62A4h
.text$mn:000062A4 ; COMDAT (pick any)
.text$mn:000062A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000062A4
.text$mn:000062A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000062A4
.text$mn:000062A4 ; Attributes: bp-based frame
.text$mn:000062A4
.text$mn:000062A4 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(struct std::_Iterator_base12 *)
.text$mn:000062A4                 public ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:000062A4 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:000062A4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+90p
.text$mn:000062A4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+C7p ...
.text$mn:000062A4
.text$mn:000062A4 var_10          = dword ptr -10h
.text$mn:000062A4 var_C           = dword ptr -0Ch
.text$mn:000062A4 var_4           = dword ptr -4
.text$mn:000062A4 arg_0           = dword ptr  8
.text$mn:000062A4
.text$mn:000062A4                 push    ebp
.text$mn:000062A5                 mov     ebp, esp
.text$mn:000062A7                 push    0FFFFFFFFh
.text$mn:000062A9                 push    offset __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:000062AE                 mov     eax, large fs:0
.text$mn:000062B4                 push    eax
.text$mn:000062B5                 push    ecx
.text$mn:000062B6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000062BB                 xor     eax, ebp
.text$mn:000062BD                 push    eax
.text$mn:000062BE                 lea     eax, [ebp+var_C]
.text$mn:000062C1                 mov     large fs:0, eax
.text$mn:000062C7                 mov     [ebp+var_10], ecx
.text$mn:000062CA                 mov     eax, [ebp+arg_0]
.text$mn:000062CD                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:000062CE                 mov     ecx, [ebp+var_10]
.text$mn:000062D1                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12> const &)
.text$mn:000062D6                 mov     [ebp+var_4], 0
.text$mn:000062DD                 mov     ecx, [ebp+var_10]
.text$mn:000062E0                 mov     edx, [ebp+arg_0]
.text$mn:000062E3                 mov     eax, [edx+8]
.text$mn:000062E6                 mov     [ecx+8], eax
.text$mn:000062E9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000062F0                 mov     eax, [ebp+var_10]
.text$mn:000062F3                 mov     ecx, [ebp+var_C]
.text$mn:000062F6                 mov     large fs:0, ecx
.text$mn:000062FD                 pop     ecx
.text$mn:000062FE                 mov     esp, ebp
.text$mn:00006300                 pop     ebp
.text$mn:00006301                 retn    4
.text$mn:00006301 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:00006301
.text$mn:00006301 _text$mn        ends
.text$mn:00006301
.text$x:00006304 ; ===========================================================================
.text$x:00006304
.text$x:00006304 ; Segment type: Pure code
.text$x:00006304 ; Segment permissions: Read/Execute
.text$x:00006304 _text$x         segment para public 'CODE' use32
.text$x:00006304                 assume cs:_text$x
.text$x:00006304                 ;org 6304h
.text$x:00006304 ; COMDAT (pick associative to section at 62A4)
.text$x:00006304                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006304
.text$x:00006304 ; =============== S U B R O U T I N E =======================================
.text$x:00006304
.text$x:00006304
.text$x:00006304 __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00006304                                         ; DATA XREF: .xdata$x:0000CDB4o
.text$x:00006304                 mov     ecx, [ebp-10h]
.text$x:00006307                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$x:00006307 __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:00006307
.text$x:0000630C
.text$x:0000630C ; =============== S U B R O U T I N E =======================================
.text$x:0000630C
.text$x:0000630C
.text$x:0000630C __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:0000630C                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+5o
.text$x:0000630C
.text$x:0000630C arg_4           = dword ptr  8
.text$x:0000630C
.text$x:0000630C                 mov     edx, [esp+arg_4]
.text$x:00006310                 lea     eax, [edx+0Ch]
.text$x:00006313                 mov     ecx, [edx-8]
.text$x:00006316                 xor     ecx, eax
.text$x:00006318                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000631D                 mov     eax, offset __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:00006322                 jmp     ___CxxFrameHandler3
.text$x:00006322 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:00006322
.text$x:00006322 ; ---------------------------------------------------------------------------
.text$x:00006327                 align 4
.text$x:00006327 _text$x         ends
.text$x:00006327
.text$mn:00006328 ; ===========================================================================
.text$mn:00006328
.text$mn:00006328 ; Segment type: Pure code
.text$mn:00006328 ; Segment permissions: Read/Execute
.text$mn:00006328 _text$mn        segment para public 'CODE' use32
.text$mn:00006328                 assume cs:_text$mn
.text$mn:00006328                 ;org 6328h
.text$mn:00006328 ; COMDAT (pick any)
.text$mn:00006328                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006328
.text$mn:00006328 ; =============== S U B R O U T I N E =======================================
.text$mn:00006328
.text$mn:00006328 ; Attributes: bp-based frame
.text$mn:00006328
.text$mn:00006328 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(int, struct std::_Container_base12 *)
.text$mn:00006328                 public ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.text$mn:00006328 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z proc near
.text$mn:00006328                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)+31p
.text$mn:00006328
.text$mn:00006328 var_10          = dword ptr -10h
.text$mn:00006328 var_C           = dword ptr -0Ch
.text$mn:00006328 var_4           = dword ptr -4
.text$mn:00006328 arg_0           = dword ptr  8
.text$mn:00006328 arg_4           = dword ptr  0Ch
.text$mn:00006328
.text$mn:00006328                 push    ebp
.text$mn:00006329                 mov     ebp, esp
.text$mn:0000632B                 push    0FFFFFFFFh
.text$mn:0000632D                 push    offset __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.text$mn:00006332                 mov     eax, large fs:0
.text$mn:00006338                 push    eax
.text$mn:00006339                 push    ecx
.text$mn:0000633A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000633F                 xor     eax, ebp
.text$mn:00006341                 push    eax
.text$mn:00006342                 lea     eax, [ebp+var_C]
.text$mn:00006345                 mov     large fs:0, eax
.text$mn:0000634B                 mov     [ebp+var_10], ecx
.text$mn:0000634E                 mov     ecx, [ebp+var_10]
.text$mn:00006351                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$mn:00006356                 mov     [ebp+var_4], 0
.text$mn:0000635D                 mov     eax, [ebp+arg_4]
.text$mn:00006360                 push    eax             ; struct std::_Container_base12 *
.text$mn:00006361                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006364                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:00006369                 mov     ecx, [ebp+var_10]
.text$mn:0000636C                 mov     edx, [ebp+arg_0]
.text$mn:0000636F                 mov     [ecx+8], edx
.text$mn:00006372                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006379                 mov     eax, [ebp+var_10]
.text$mn:0000637C                 mov     ecx, [ebp+var_C]
.text$mn:0000637F                 mov     large fs:0, ecx
.text$mn:00006386                 pop     ecx
.text$mn:00006387                 mov     esp, ebp
.text$mn:00006389                 pop     ebp
.text$mn:0000638A                 retn    8
.text$mn:0000638A ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z endp
.text$mn:0000638A
.text$mn:0000638A ; ---------------------------------------------------------------------------
.text$mn:0000638D                 align 10h
.text$mn:0000638D _text$mn        ends
.text$mn:0000638D
.text$x:00006390 ; ===========================================================================
.text$x:00006390
.text$x:00006390 ; Segment type: Pure code
.text$x:00006390 ; Segment permissions: Read/Execute
.text$x:00006390 _text$x         segment para public 'CODE' use32
.text$x:00006390                 assume cs:_text$x
.text$x:00006390                 ;org 6390h
.text$x:00006390 ; COMDAT (pick associative to section at 6328)
.text$x:00006390                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006390
.text$x:00006390 ; =============== S U B R O U T I N E =======================================
.text$x:00006390
.text$x:00006390
.text$x:00006390 __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0 proc near
.text$x:00006390                                         ; DATA XREF: .xdata$x:0000CD5Co
.text$x:00006390                 mov     ecx, [ebp-10h]
.text$x:00006393                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$x:00006393 __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0 endp
.text$x:00006393
.text$x:00006398
.text$x:00006398 ; =============== S U B R O U T I N E =======================================
.text$x:00006398
.text$x:00006398
.text$x:00006398 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z proc near
.text$x:00006398                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)+5o
.text$x:00006398
.text$x:00006398 arg_4           = dword ptr  8
.text$x:00006398
.text$x:00006398                 mov     edx, [esp+arg_4]
.text$x:0000639C                 lea     eax, [edx+0Ch]
.text$x:0000639F                 mov     ecx, [edx-8]
.text$x:000063A2                 xor     ecx, eax
.text$x:000063A4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000063A9                 mov     eax, offset __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.text$x:000063AE                 jmp     ___CxxFrameHandler3
.text$x:000063AE __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z endp
.text$x:000063AE
.text$x:000063AE ; ---------------------------------------------------------------------------
.text$x:000063B3                 align 4
.text$x:000063B3 _text$x         ends
.text$x:000063B3
.text$mn:000063B4 ; ===========================================================================
.text$mn:000063B4
.text$mn:000063B4 ; Segment type: Pure code
.text$mn:000063B4 ; Segment permissions: Read/Execute
.text$mn:000063B4 _text$mn        segment para public 'CODE' use32
.text$mn:000063B4                 assume cs:_text$mn
.text$mn:000063B4                 ;org 63B4h
.text$mn:000063B4 ; COMDAT (pick any)
.text$mn:000063B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000063B4
.text$mn:000063B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000063B4
.text$mn:000063B4 ; Attributes: bp-based frame
.text$mn:000063B4
.text$mn:000063B4 ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(struct std::_Iterator_base12 *)
.text$mn:000063B4                 public ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:000063B4 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:000063B4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+3Bp
.text$mn:000063B4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+59p
.text$mn:000063B4
.text$mn:000063B4 var_10          = dword ptr -10h
.text$mn:000063B4 var_C           = dword ptr -0Ch
.text$mn:000063B4 var_4           = dword ptr -4
.text$mn:000063B4 arg_0           = dword ptr  8
.text$mn:000063B4
.text$mn:000063B4                 push    ebp
.text$mn:000063B5                 mov     ebp, esp
.text$mn:000063B7                 push    0FFFFFFFFh
.text$mn:000063B9                 push    offset __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:000063BE                 mov     eax, large fs:0
.text$mn:000063C4                 push    eax
.text$mn:000063C5                 push    ecx
.text$mn:000063C6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000063CB                 xor     eax, ebp
.text$mn:000063CD                 push    eax
.text$mn:000063CE                 lea     eax, [ebp+var_C]
.text$mn:000063D1                 mov     large fs:0, eax
.text$mn:000063D7                 mov     [ebp+var_10], ecx
.text$mn:000063DA                 mov     eax, [ebp+arg_0]
.text$mn:000063DD                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:000063DE                 mov     ecx, [ebp+var_10]
.text$mn:000063E1                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:000063E6                 mov     [ebp+var_4], 0
.text$mn:000063ED                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000063F4                 mov     eax, [ebp+var_10]
.text$mn:000063F7                 mov     ecx, [ebp+var_C]
.text$mn:000063FA                 mov     large fs:0, ecx
.text$mn:00006401                 pop     ecx
.text$mn:00006402                 mov     esp, ebp
.text$mn:00006404                 pop     ebp
.text$mn:00006405                 retn    4
.text$mn:00006405 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:00006405
.text$mn:00006405 _text$mn        ends
.text$mn:00006405
.text$x:00006408 ; ===========================================================================
.text$x:00006408
.text$x:00006408 ; Segment type: Pure code
.text$x:00006408 ; Segment permissions: Read/Execute
.text$x:00006408 _text$x         segment para public 'CODE' use32
.text$x:00006408                 assume cs:_text$x
.text$x:00006408                 ;org 6408h
.text$x:00006408 ; COMDAT (pick associative to section at 63B4)
.text$x:00006408                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006408
.text$x:00006408 ; =============== S U B R O U T I N E =======================================
.text$x:00006408
.text$x:00006408
.text$x:00006408 __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00006408                                         ; DATA XREF: .xdata$x:0000CE64o
.text$x:00006408                 mov     ecx, [ebp-10h]
.text$x:0000640B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000640B __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:0000640B
.text$x:00006410
.text$x:00006410 ; =============== S U B R O U T I N E =======================================
.text$x:00006410
.text$x:00006410
.text$x:00006410 __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:00006410                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+5o
.text$x:00006410
.text$x:00006410 arg_4           = dword ptr  8
.text$x:00006410
.text$x:00006410                 mov     edx, [esp+arg_4]
.text$x:00006414                 lea     eax, [edx+0Ch]
.text$x:00006417                 mov     ecx, [edx-8]
.text$x:0000641A                 xor     ecx, eax
.text$x:0000641C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006421                 mov     eax, offset __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:00006426                 jmp     ___CxxFrameHandler3
.text$x:00006426 __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:00006426
.text$x:00006426 ; ---------------------------------------------------------------------------
.text$x:0000642B                 align 4
.text$x:0000642B _text$x         ends
.text$x:0000642B
.text$mn:0000642C ; ===========================================================================
.text$mn:0000642C
.text$mn:0000642C ; Segment type: Pure code
.text$mn:0000642C ; Segment permissions: Read/Execute
.text$mn:0000642C _text$mn        segment para public 'CODE' use32
.text$mn:0000642C                 assume cs:_text$mn
.text$mn:0000642C                 ;org 642Ch
.text$mn:0000642C ; COMDAT (pick any)
.text$mn:0000642C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000642C
.text$mn:0000642C ; =============== S U B R O U T I N E =======================================
.text$mn:0000642C
.text$mn:0000642C ; Attributes: bp-based frame
.text$mn:0000642C
.text$mn:0000642C ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(int, struct std::_Container_base12 *)
.text$mn:0000642C                 public ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.text$mn:0000642C ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z proc near
.text$mn:0000642C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)+3Fp
.text$mn:0000642C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)+48p
.text$mn:0000642C
.text$mn:0000642C var_10          = dword ptr -10h
.text$mn:0000642C var_C           = dword ptr -0Ch
.text$mn:0000642C var_4           = dword ptr -4
.text$mn:0000642C arg_0           = dword ptr  8
.text$mn:0000642C arg_4           = dword ptr  0Ch
.text$mn:0000642C
.text$mn:0000642C                 push    ebp
.text$mn:0000642D                 mov     ebp, esp
.text$mn:0000642F                 push    0FFFFFFFFh
.text$mn:00006431                 push    offset __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.text$mn:00006436                 mov     eax, large fs:0
.text$mn:0000643C                 push    eax
.text$mn:0000643D                 push    ecx
.text$mn:0000643E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006443                 xor     eax, ebp
.text$mn:00006445                 push    eax
.text$mn:00006446                 lea     eax, [ebp+var_C]
.text$mn:00006449                 mov     large fs:0, eax
.text$mn:0000644F                 mov     [ebp+var_10], ecx
.text$mn:00006452                 mov     eax, [ebp+arg_4]
.text$mn:00006455                 push    eax             ; struct std::_Container_base12 *
.text$mn:00006456                 mov     ecx, [ebp+arg_0]
.text$mn:00006459                 push    ecx             ; int
.text$mn:0000645A                 mov     ecx, [ebp+var_10]
.text$mn:0000645D                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)
.text$mn:00006462                 mov     [ebp+var_4], 0
.text$mn:00006469                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006470                 mov     eax, [ebp+var_10]
.text$mn:00006473                 mov     ecx, [ebp+var_C]
.text$mn:00006476                 mov     large fs:0, ecx
.text$mn:0000647D                 pop     ecx
.text$mn:0000647E                 mov     esp, ebp
.text$mn:00006480                 pop     ebp
.text$mn:00006481                 retn    8
.text$mn:00006481 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z endp
.text$mn:00006481
.text$mn:00006481 _text$mn        ends
.text$mn:00006481
.text$x:00006484 ; ===========================================================================
.text$x:00006484
.text$x:00006484 ; Segment type: Pure code
.text$x:00006484 ; Segment permissions: Read/Execute
.text$x:00006484 _text$x         segment para public 'CODE' use32
.text$x:00006484                 assume cs:_text$x
.text$x:00006484                 ;org 6484h
.text$x:00006484 ; COMDAT (pick associative to section at 642C)
.text$x:00006484                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006484
.text$x:00006484 ; =============== S U B R O U T I N E =======================================
.text$x:00006484
.text$x:00006484
.text$x:00006484 __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0 proc near
.text$x:00006484                                         ; DATA XREF: .xdata$x:0000CDE0o
.text$x:00006484                 mov     ecx, [ebp-10h]
.text$x:00006487                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00006487 __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0 endp
.text$x:00006487
.text$x:0000648C
.text$x:0000648C ; =============== S U B R O U T I N E =======================================
.text$x:0000648C
.text$x:0000648C
.text$x:0000648C __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z proc near
.text$x:0000648C                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)+5o
.text$x:0000648C
.text$x:0000648C arg_4           = dword ptr  8
.text$x:0000648C
.text$x:0000648C                 mov     edx, [esp+arg_4]
.text$x:00006490                 lea     eax, [edx+0Ch]
.text$x:00006493                 mov     ecx, [edx-8]
.text$x:00006496                 xor     ecx, eax
.text$x:00006498                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000649D                 mov     eax, offset __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.text$x:000064A2                 jmp     ___CxxFrameHandler3
.text$x:000064A2 __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z endp
.text$x:000064A2
.text$x:000064A2 ; ---------------------------------------------------------------------------
.text$x:000064A7                 align 4
.text$x:000064A7 _text$x         ends
.text$x:000064A7
.text$mn:000064A8 ; ===========================================================================
.text$mn:000064A8
.text$mn:000064A8 ; Segment type: Pure code
.text$mn:000064A8 ; Segment permissions: Read/Execute
.text$mn:000064A8 _text$mn        segment para public 'CODE' use32
.text$mn:000064A8                 assume cs:_text$mn
.text$mn:000064A8                 ;org 64A8h
.text$mn:000064A8 ; COMDAT (pick any)
.text$mn:000064A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000064A8
.text$mn:000064A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000064A8
.text$mn:000064A8 ; Attributes: bp-based frame
.text$mn:000064A8
.text$mn:000064A8 ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::_String_val<struct std::_Simple_types<char>>(void)
.text$mn:000064A8                 public ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:000064A8 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:000064A8                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+29p
.text$mn:000064A8
.text$mn:000064A8 var_10          = dword ptr -10h
.text$mn:000064A8 var_C           = dword ptr -0Ch
.text$mn:000064A8 var_4           = dword ptr -4
.text$mn:000064A8
.text$mn:000064A8                 push    ebp
.text$mn:000064A9                 mov     ebp, esp
.text$mn:000064AB                 push    0FFFFFFFFh
.text$mn:000064AD                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:000064B2                 mov     eax, large fs:0
.text$mn:000064B8                 push    eax
.text$mn:000064B9                 push    ecx
.text$mn:000064BA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000064BF                 xor     eax, ebp
.text$mn:000064C1                 push    eax
.text$mn:000064C2                 lea     eax, [ebp+var_C]
.text$mn:000064C5                 mov     large fs:0, eax
.text$mn:000064CB                 mov     [ebp+var_10], ecx
.text$mn:000064CE                 mov     ecx, [ebp+var_10] ; this
.text$mn:000064D1                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:000064D6                 mov     [ebp+var_4], 0
.text$mn:000064DD                 mov     eax, [ebp+var_10]
.text$mn:000064E0                 mov     dword ptr [eax+14h], 0
.text$mn:000064E7                 mov     ecx, [ebp+var_10]
.text$mn:000064EA                 mov     dword ptr [ecx+18h], 0
.text$mn:000064F1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000064F8                 mov     eax, [ebp+var_10]
.text$mn:000064FB                 mov     ecx, [ebp+var_C]
.text$mn:000064FE                 mov     large fs:0, ecx
.text$mn:00006505                 pop     ecx
.text$mn:00006506                 mov     esp, ebp
.text$mn:00006508                 pop     ebp
.text$mn:00006509                 retn
.text$mn:00006509 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:00006509
.text$mn:00006509 ; ---------------------------------------------------------------------------
.text$mn:0000650A                 align 4
.text$mn:0000650A _text$mn        ends
.text$mn:0000650A
.text$x:0000650C ; ===========================================================================
.text$x:0000650C
.text$x:0000650C ; Segment type: Pure code
.text$x:0000650C ; Segment permissions: Read/Execute
.text$x:0000650C _text$x         segment para public 'CODE' use32
.text$x:0000650C                 assume cs:_text$x
.text$x:0000650C                 ;org 650Ch
.text$x:0000650C ; COMDAT (pick associative to section at 64A8)
.text$x:0000650C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000650C
.text$x:0000650C ; =============== S U B R O U T I N E =======================================
.text$x:0000650C
.text$x:0000650C
.text$x:0000650C __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:0000650C                                         ; DATA XREF: .xdata$x:0000BF6Co
.text$x:0000650C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000650F                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:0000650F __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:0000650F
.text$x:00006514
.text$x:00006514 ; =============== S U B R O U T I N E =======================================
.text$x:00006514
.text$x:00006514
.text$x:00006514 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:00006514                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+5o
.text$x:00006514
.text$x:00006514 arg_4           = dword ptr  8
.text$x:00006514
.text$x:00006514                 mov     edx, [esp+arg_4]
.text$x:00006518                 lea     eax, [edx+0Ch]
.text$x:0000651B                 mov     ecx, [edx-8]
.text$x:0000651E                 xor     ecx, eax
.text$x:00006520                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006525                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:0000652A                 jmp     ___CxxFrameHandler3
.text$x:0000652A __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:0000652A
.text$x:0000652A ; ---------------------------------------------------------------------------
.text$x:0000652F                 align 10h
.text$x:0000652F _text$x         ends
.text$x:0000652F
.text$mn:00006530 ; ===========================================================================
.text$mn:00006530
.text$mn:00006530 ; Segment type: Pure code
.text$mn:00006530 ; Segment permissions: Read/Execute
.text$mn:00006530 _text$mn        segment para public 'CODE' use32
.text$mn:00006530                 assume cs:_text$mn
.text$mn:00006530                 ;org 6530h
.text$mn:00006530 ; COMDAT (pick any)
.text$mn:00006530                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006530
.text$mn:00006530 ; =============== S U B R O U T I N E =======================================
.text$mn:00006530
.text$mn:00006530 ; Attributes: bp-based frame
.text$mn:00006530
.text$mn:00006530 ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:00006530                 public ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00006530 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:00006530                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+29p
.text$mn:00006530
.text$mn:00006530 var_10          = dword ptr -10h
.text$mn:00006530 var_C           = dword ptr -0Ch
.text$mn:00006530 var_4           = dword ptr -4
.text$mn:00006530
.text$mn:00006530                 push    ebp
.text$mn:00006531                 mov     ebp, esp
.text$mn:00006533                 push    0FFFFFFFFh
.text$mn:00006535                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:0000653A                 mov     eax, large fs:0
.text$mn:00006540                 push    eax
.text$mn:00006541                 push    ecx
.text$mn:00006542                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006547                 xor     eax, ebp
.text$mn:00006549                 push    eax
.text$mn:0000654A                 lea     eax, [ebp+var_C]
.text$mn:0000654D                 mov     large fs:0, eax
.text$mn:00006553                 mov     [ebp+var_10], ecx
.text$mn:00006556                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006559                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:0000655E                 mov     [ebp+var_4], 0
.text$mn:00006565                 mov     eax, [ebp+var_10]
.text$mn:00006568                 mov     dword ptr [eax+14h], 0
.text$mn:0000656F                 mov     ecx, [ebp+var_10]
.text$mn:00006572                 mov     dword ptr [ecx+18h], 0
.text$mn:00006579                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006580                 mov     eax, [ebp+var_10]
.text$mn:00006583                 mov     ecx, [ebp+var_C]
.text$mn:00006586                 mov     large fs:0, ecx
.text$mn:0000658D                 pop     ecx
.text$mn:0000658E                 mov     esp, ebp
.text$mn:00006590                 pop     ebp
.text$mn:00006591                 retn
.text$mn:00006591 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:00006591
.text$mn:00006591 ; ---------------------------------------------------------------------------
.text$mn:00006592                 align 4
.text$mn:00006592 _text$mn        ends
.text$mn:00006592
.text$x:00006594 ; ===========================================================================
.text$x:00006594
.text$x:00006594 ; Segment type: Pure code
.text$x:00006594 ; Segment permissions: Read/Execute
.text$x:00006594 _text$x         segment para public 'CODE' use32
.text$x:00006594                 assume cs:_text$x
.text$x:00006594                 ;org 6594h
.text$x:00006594 ; COMDAT (pick associative to section at 6530)
.text$x:00006594                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006594
.text$x:00006594 ; =============== S U B R O U T I N E =======================================
.text$x:00006594
.text$x:00006594
.text$x:00006594 __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00006594                                         ; DATA XREF: .xdata$x:0000C28Co
.text$x:00006594                 mov     ecx, [ebp-10h]  ; this
.text$x:00006597                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00006597 __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:00006597
.text$x:0000659C
.text$x:0000659C ; =============== S U B R O U T I N E =======================================
.text$x:0000659C
.text$x:0000659C
.text$x:0000659C __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:0000659C                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:0000659C
.text$x:0000659C arg_4           = dword ptr  8
.text$x:0000659C
.text$x:0000659C                 mov     edx, [esp+arg_4]
.text$x:000065A0                 lea     eax, [edx+0Ch]
.text$x:000065A3                 mov     ecx, [edx-8]
.text$x:000065A6                 xor     ecx, eax
.text$x:000065A8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000065AD                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:000065B2                 jmp     ___CxxFrameHandler3
.text$x:000065B2 __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:000065B2
.text$x:000065B2 ; ---------------------------------------------------------------------------
.text$x:000065B7                 align 4
.text$x:000065B7 _text$x         ends
.text$x:000065B7
.text$mn:000065B8 ; ===========================================================================
.text$mn:000065B8
.text$mn:000065B8 ; Segment type: Pure code
.text$mn:000065B8 ; Segment permissions: Read/Execute
.text$mn:000065B8 _text$mn        segment para public 'CODE' use32
.text$mn:000065B8                 assume cs:_text$mn
.text$mn:000065B8                 ;org 65B8h
.text$mn:000065B8 ; COMDAT (pick any)
.text$mn:000065B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000065B8
.text$mn:000065B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000065B8
.text$mn:000065B8 ; Attributes: bp-based frame
.text$mn:000065B8
.text$mn:000065B8 ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> const &)
.text$mn:000065B8                 public ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.text$mn:000065B8 ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z proc near
.text$mn:000065B8                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+34p
.text$mn:000065B8
.text$mn:000065B8 var_10          = dword ptr -10h
.text$mn:000065B8 var_C           = dword ptr -0Ch
.text$mn:000065B8 var_4           = dword ptr -4
.text$mn:000065B8
.text$mn:000065B8                 push    ebp
.text$mn:000065B9                 mov     ebp, esp
.text$mn:000065BB                 push    0FFFFFFFFh
.text$mn:000065BD                 push    offset __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.text$mn:000065C2                 mov     eax, large fs:0
.text$mn:000065C8                 push    eax
.text$mn:000065C9                 push    ecx
.text$mn:000065CA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000065CF                 xor     eax, ebp
.text$mn:000065D1                 push    eax
.text$mn:000065D2                 lea     eax, [ebp+var_C]
.text$mn:000065D5                 mov     large fs:0, eax
.text$mn:000065DB                 mov     [ebp+var_10], ecx
.text$mn:000065DE                 mov     ecx, [ebp+var_10]
.text$mn:000065E1                 call    ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:000065E6                 mov     [ebp+var_4], 0
.text$mn:000065ED                 mov     ecx, [ebp+var_10]
.text$mn:000065F0                 call    ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Alloc_proxy(void)
.text$mn:000065F5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000065FC                 mov     eax, [ebp+var_10]
.text$mn:000065FF                 mov     ecx, [ebp+var_C]
.text$mn:00006602                 mov     large fs:0, ecx
.text$mn:00006609                 pop     ecx
.text$mn:0000660A                 mov     esp, ebp
.text$mn:0000660C                 pop     ebp
.text$mn:0000660D                 retn    4
.text$mn:0000660D ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z endp
.text$mn:0000660D
.text$mn:0000660D _text$mn        ends
.text$mn:0000660D
.text$x:00006610 ; ===========================================================================
.text$x:00006610
.text$x:00006610 ; Segment type: Pure code
.text$x:00006610 ; Segment permissions: Read/Execute
.text$x:00006610 _text$x         segment para public 'CODE' use32
.text$x:00006610                 assume cs:_text$x
.text$x:00006610                 ;org 6610h
.text$x:00006610 ; COMDAT (pick associative to section at 65B8)
.text$x:00006610                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006610
.text$x:00006610 ; =============== S U B R O U T I N E =======================================
.text$x:00006610
.text$x:00006610
.text$x:00006610 __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0 proc near
.text$x:00006610                                         ; DATA XREF: .xdata$x:0000CBA4o
.text$x:00006610                 mov     ecx, [ebp-10h]
.text$x:00006613                 jmp     ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00006613 __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0 endp
.text$x:00006613
.text$x:00006618
.text$x:00006618 ; =============== S U B R O U T I N E =======================================
.text$x:00006618
.text$x:00006618
.text$x:00006618 __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z proc near
.text$x:00006618                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+5o
.text$x:00006618
.text$x:00006618 arg_4           = dword ptr  8
.text$x:00006618
.text$x:00006618                 mov     edx, [esp+arg_4]
.text$x:0000661C                 lea     eax, [edx+0Ch]
.text$x:0000661F                 mov     ecx, [edx-8]
.text$x:00006622                 xor     ecx, eax
.text$x:00006624                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006629                 mov     eax, offset __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.text$x:0000662E                 jmp     ___CxxFrameHandler3
.text$x:0000662E __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z endp
.text$x:0000662E
.text$x:0000662E ; ---------------------------------------------------------------------------
.text$x:00006633                 align 4
.text$x:00006633 _text$x         ends
.text$x:00006633
.text$mn:00006634 ; ===========================================================================
.text$mn:00006634
.text$mn:00006634 ; Segment type: Pure code
.text$mn:00006634 ; Segment permissions: Read/Execute
.text$mn:00006634 _text$mn        segment para public 'CODE' use32
.text$mn:00006634                 assume cs:_text$mn
.text$mn:00006634                 ;org 6634h
.text$mn:00006634 ; COMDAT (pick any)
.text$mn:00006634                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006634
.text$mn:00006634 ; =============== S U B R O U T I N E =======================================
.text$mn:00006634
.text$mn:00006634 ; Attributes: bp-based frame
.text$mn:00006634
.text$mn:00006634 ; public: __thiscall std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:00006634                 public ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:00006634 ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00006634                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+29p
.text$mn:00006634
.text$mn:00006634 var_10          = dword ptr -10h
.text$mn:00006634 var_C           = dword ptr -0Ch
.text$mn:00006634 var_4           = dword ptr -4
.text$mn:00006634
.text$mn:00006634                 push    ebp
.text$mn:00006635                 mov     ebp, esp
.text$mn:00006637                 push    0FFFFFFFFh
.text$mn:00006639                 push    offset __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:0000663E                 mov     eax, large fs:0
.text$mn:00006644                 push    eax
.text$mn:00006645                 push    ecx
.text$mn:00006646                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000664B                 xor     eax, ebp
.text$mn:0000664D                 push    eax
.text$mn:0000664E                 lea     eax, [ebp+var_C]
.text$mn:00006651                 mov     large fs:0, eax
.text$mn:00006657                 mov     [ebp+var_10], ecx
.text$mn:0000665A                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000665D                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00006662                 mov     [ebp+var_4], 0
.text$mn:00006669                 mov     eax, [ebp+var_10]
.text$mn:0000666C                 mov     dword ptr [eax+4], 0
.text$mn:00006673                 mov     ecx, [ebp+var_10]
.text$mn:00006676                 mov     dword ptr [ecx+8], 0
.text$mn:0000667D                 mov     edx, [ebp+var_10]
.text$mn:00006680                 mov     dword ptr [edx+0Ch], 0
.text$mn:00006687                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000668E                 mov     eax, [ebp+var_10]
.text$mn:00006691                 mov     ecx, [ebp+var_C]
.text$mn:00006694                 mov     large fs:0, ecx
.text$mn:0000669B                 pop     ecx
.text$mn:0000669C                 mov     esp, ebp
.text$mn:0000669E                 pop     ebp
.text$mn:0000669F                 retn
.text$mn:0000669F ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$mn:0000669F
.text$mn:0000669F _text$mn        ends
.text$mn:0000669F
.text$x:000066A0 ; ===========================================================================
.text$x:000066A0
.text$x:000066A0 ; Segment type: Pure code
.text$x:000066A0 ; Segment permissions: Read/Execute
.text$x:000066A0 _text$x         segment para public 'CODE' use32
.text$x:000066A0                 assume cs:_text$x
.text$x:000066A0                 ;org 66A0h
.text$x:000066A0 ; COMDAT (pick associative to section at 6634)
.text$x:000066A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000066A0
.text$x:000066A0 ; =============== S U B R O U T I N E =======================================
.text$x:000066A0
.text$x:000066A0
.text$x:000066A0 __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:000066A0                                         ; DATA XREF: .xdata$x:0000CB4Co
.text$x:000066A0                 mov     ecx, [ebp-10h]  ; this
.text$x:000066A3                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:000066A3 __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:000066A3
.text$x:000066A8
.text$x:000066A8 ; =============== S U B R O U T I N E =======================================
.text$x:000066A8
.text$x:000066A8
.text$x:000066A8 __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$x:000066A8                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:000066A8
.text$x:000066A8 arg_4           = dword ptr  8
.text$x:000066A8
.text$x:000066A8                 mov     edx, [esp+arg_4]
.text$x:000066AC                 lea     eax, [edx+0Ch]
.text$x:000066AF                 mov     ecx, [edx-8]
.text$x:000066B2                 xor     ecx, eax
.text$x:000066B4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000066B9                 mov     eax, offset __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$x:000066BE                 jmp     ___CxxFrameHandler3
.text$x:000066BE __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$x:000066BE
.text$x:000066BE ; ---------------------------------------------------------------------------
.text$x:000066C3                 align 4
.text$x:000066C3 _text$x         ends
.text$x:000066C3
.text$mn:000066C4 ; ===========================================================================
.text$mn:000066C4
.text$mn:000066C4 ; Segment type: Pure code
.text$mn:000066C4 ; Segment permissions: Read/Execute
.text$mn:000066C4 _text$mn        segment para public 'CODE' use32
.text$mn:000066C4                 assume cs:_text$mn
.text$mn:000066C4                 ;org 66C4h
.text$mn:000066C4 ; COMDAT (pick any)
.text$mn:000066C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066C4
.text$mn:000066C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000066C4
.text$mn:000066C4 ; Attributes: bp-based frame
.text$mn:000066C4
.text$mn:000066C4 ; public: __thiscall std::_Wrap_alloc<class std::allocator<char>>::_Wrap_alloc<class std::allocator<char>>(void)
.text$mn:000066C4                 public ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
.text$mn:000066C4 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
.text$mn:000066C4                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)+Ap
.text$mn:000066C4
.text$mn:000066C4 var_4           = dword ptr -4
.text$mn:000066C4
.text$mn:000066C4                 push    ebp
.text$mn:000066C5                 mov     ebp, esp
.text$mn:000066C7                 push    ecx
.text$mn:000066C8                 mov     [ebp+var_4], ecx
.text$mn:000066CB                 mov     ecx, [ebp+var_4]
.text$mn:000066CE                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:000066D3                 mov     eax, [ebp+var_4]
.text$mn:000066D6                 mov     esp, ebp
.text$mn:000066D8                 pop     ebp
.text$mn:000066D9                 retn
.text$mn:000066D9 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ endp
.text$mn:000066D9
.text$mn:000066D9 ; ---------------------------------------------------------------------------
.text$mn:000066DA                 align 4
.text$mn:000066DA _text$mn        ends
.text$mn:000066DA
.text$mn:000066DC ; ===========================================================================
.text$mn:000066DC
.text$mn:000066DC ; Segment type: Pure code
.text$mn:000066DC ; Segment permissions: Read/Execute
.text$mn:000066DC _text$mn        segment para public 'CODE' use32
.text$mn:000066DC                 assume cs:_text$mn
.text$mn:000066DC                 ;org 66DCh
.text$mn:000066DC ; COMDAT (pick any)
.text$mn:000066DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066DC
.text$mn:000066DC ; =============== S U B R O U T I N E =======================================
.text$mn:000066DC
.text$mn:000066DC ; Attributes: bp-based frame
.text$mn:000066DC
.text$mn:000066DC ; public: __thiscall std::_Wrap_alloc<class std::allocator<int>>::_Wrap_alloc<class std::allocator<int>>(void)
.text$mn:000066DC                 public ??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ
.text$mn:000066DC ??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ proc near
.text$mn:000066DC                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int>>>::_Getal(void)+Ap
.text$mn:000066DC
.text$mn:000066DC var_4           = dword ptr -4
.text$mn:000066DC
.text$mn:000066DC                 push    ebp
.text$mn:000066DD                 mov     ebp, esp
.text$mn:000066DF                 push    ecx
.text$mn:000066E0                 mov     [ebp+var_4], ecx
.text$mn:000066E3                 mov     ecx, [ebp+var_4]
.text$mn:000066E6                 call    ??0?$allocator@H@std@@QAE@XZ ; std::allocator<int>::allocator<int>(void)
.text$mn:000066EB                 mov     eax, [ebp+var_4]
.text$mn:000066EE                 mov     esp, ebp
.text$mn:000066F0                 pop     ebp
.text$mn:000066F1                 retn
.text$mn:000066F1 ??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ endp
.text$mn:000066F1
.text$mn:000066F1 ; ---------------------------------------------------------------------------
.text$mn:000066F2                 align 4
.text$mn:000066F2 _text$mn        ends
.text$mn:000066F2
.text$mn:000066F4 ; ===========================================================================
.text$mn:000066F4
.text$mn:000066F4 ; Segment type: Pure code
.text$mn:000066F4 ; Segment permissions: Read/Execute
.text$mn:000066F4 _text$mn        segment para public 'CODE' use32
.text$mn:000066F4                 assume cs:_text$mn
.text$mn:000066F4                 ;org 66F4h
.text$mn:000066F4 ; COMDAT (pick any)
.text$mn:000066F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066F4
.text$mn:000066F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000066F4
.text$mn:000066F4 ; Attributes: bp-based frame
.text$mn:000066F4
.text$mn:000066F4 ; public: __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>(void)
.text$mn:000066F4                 public ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
.text$mn:000066F4 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ proc near
.text$mn:000066F4                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Alloc_proxy(void)+Cp
.text$mn:000066F4                                         ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Free_proxy(void)+Cp
.text$mn:000066F4
.text$mn:000066F4 var_4           = dword ptr -4
.text$mn:000066F4
.text$mn:000066F4                 push    ebp
.text$mn:000066F5                 mov     ebp, esp
.text$mn:000066F7                 push    ecx
.text$mn:000066F8                 mov     [ebp+var_4], ecx
.text$mn:000066FB                 mov     ecx, [ebp+var_4]
.text$mn:000066FE                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00006703                 mov     eax, [ebp+var_4]
.text$mn:00006706                 mov     esp, ebp
.text$mn:00006708                 pop     ebp
.text$mn:00006709                 retn
.text$mn:00006709 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ endp
.text$mn:00006709
.text$mn:00006709 ; ---------------------------------------------------------------------------
.text$mn:0000670A                 align 4
.text$mn:0000670A _text$mn        ends
.text$mn:0000670A
.text$mn:0000670C ; ===========================================================================
.text$mn:0000670C
.text$mn:0000670C ; Segment type: Pure code
.text$mn:0000670C ; Segment permissions: Read/Execute
.text$mn:0000670C _text$mn        segment para public 'CODE' use32
.text$mn:0000670C                 assume cs:_text$mn
.text$mn:0000670C                 ;org 670Ch
.text$mn:0000670C ; COMDAT (pick any)
.text$mn:0000670C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000670C
.text$mn:0000670C ; =============== S U B R O U T I N E =======================================
.text$mn:0000670C
.text$mn:0000670C ; Attributes: bp-based frame
.text$mn:0000670C
.text$mn:0000670C ; public: __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:0000670C                 public ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:0000670C ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:0000670C                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)+Ap
.text$mn:0000670C
.text$mn:0000670C var_4           = dword ptr -4
.text$mn:0000670C
.text$mn:0000670C                 push    ebp
.text$mn:0000670D                 mov     ebp, esp
.text$mn:0000670F                 push    ecx
.text$mn:00006710                 mov     [ebp+var_4], ecx
.text$mn:00006713                 mov     ecx, [ebp+var_4]
.text$mn:00006716                 call    ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void)
.text$mn:0000671B                 mov     eax, [ebp+var_4]
.text$mn:0000671E                 mov     esp, ebp
.text$mn:00006720                 pop     ebp
.text$mn:00006721                 retn
.text$mn:00006721 ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00006721
.text$mn:00006721 ; ---------------------------------------------------------------------------
.text$mn:00006722                 align 4
.text$mn:00006722 _text$mn        ends
.text$mn:00006722
.text$mn:00006724 ; ===========================================================================
.text$mn:00006724
.text$mn:00006724 ; Segment type: Pure code
.text$mn:00006724 ; Segment permissions: Read/Execute
.text$mn:00006724 _text$mn        segment para public 'CODE' use32
.text$mn:00006724                 assume cs:_text$mn
.text$mn:00006724                 ;org 6724h
.text$mn:00006724 ; COMDAT (pick any)
.text$mn:00006724                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006724
.text$mn:00006724 ; =============== S U B R O U T I N E =======================================
.text$mn:00006724
.text$mn:00006724 ; Attributes: bp-based frame
.text$mn:00006724
.text$mn:00006724 ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(class std::allocator<wchar_t> const &)
.text$mn:00006724                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:00006724 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:00006724                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)+1Dp
.text$mn:00006724
.text$mn:00006724 var_4           = dword ptr -4
.text$mn:00006724 arg_0           = dword ptr  8
.text$mn:00006724
.text$mn:00006724                 push    ebp
.text$mn:00006725                 mov     ebp, esp
.text$mn:00006727                 push    ecx
.text$mn:00006728                 mov     [ebp+var_4], ecx
.text$mn:0000672B                 mov     eax, [ebp+arg_0]
.text$mn:0000672E                 push    eax
.text$mn:0000672F                 mov     ecx, [ebp+var_4]
.text$mn:00006732                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:00006737                 mov     eax, [ebp+var_4]
.text$mn:0000673A                 mov     esp, ebp
.text$mn:0000673C                 pop     ebp
.text$mn:0000673D                 retn    4
.text$mn:0000673D ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:0000673D
.text$mn:0000673D _text$mn        ends
.text$mn:0000673D
.text$mn:00006740 ; ===========================================================================
.text$mn:00006740
.text$mn:00006740 ; Segment type: Pure code
.text$mn:00006740 ; Segment permissions: Read/Execute
.text$mn:00006740 _text$mn        segment para public 'CODE' use32
.text$mn:00006740                 assume cs:_text$mn
.text$mn:00006740                 ;org 6740h
.text$mn:00006740 ; COMDAT (pick any)
.text$mn:00006740                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006740
.text$mn:00006740 ; =============== S U B R O U T I N E =======================================
.text$mn:00006740
.text$mn:00006740 ; Attributes: bp-based frame
.text$mn:00006740
.text$mn:00006740 ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(void)
.text$mn:00006740                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ
.text$mn:00006740 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ proc near
.text$mn:00006740                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)+Ap
.text$mn:00006740
.text$mn:00006740 var_4           = dword ptr -4
.text$mn:00006740
.text$mn:00006740                 push    ebp
.text$mn:00006741                 mov     ebp, esp
.text$mn:00006743                 push    ecx
.text$mn:00006744                 mov     [ebp+var_4], ecx
.text$mn:00006747                 mov     ecx, [ebp+var_4]
.text$mn:0000674A                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:0000674F                 mov     eax, [ebp+var_4]
.text$mn:00006752                 mov     esp, ebp
.text$mn:00006754                 pop     ebp
.text$mn:00006755                 retn
.text$mn:00006755 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ endp
.text$mn:00006755
.text$mn:00006755 ; ---------------------------------------------------------------------------
.text$mn:00006756                 align 4
.text$mn:00006756 _text$mn        ends
.text$mn:00006756
.text$mn:00006758 ; ===========================================================================
.text$mn:00006758
.text$mn:00006758 ; Segment type: Pure code
.text$mn:00006758 ; Segment permissions: Read/Execute
.text$mn:00006758 _text$mn        segment para public 'CODE' use32
.text$mn:00006758                 assume cs:_text$mn
.text$mn:00006758                 ;org 6758h
.text$mn:00006758 ; COMDAT (pick any)
.text$mn:00006758                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006758
.text$mn:00006758 ; =============== S U B R O U T I N E =======================================
.text$mn:00006758
.text$mn:00006758 ; Attributes: bp-based frame
.text$mn:00006758
.text$mn:00006758 ; public: __thiscall std::allocator<char>::allocator<char>(void)
.text$mn:00006758                 public ??0?$allocator@D@std@@QAE@XZ
.text$mn:00006758 ??0?$allocator@D@std@@QAE@XZ proc near  ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)+Ap
.text$mn:00006758                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+2Bp
.text$mn:00006758
.text$mn:00006758 var_4           = dword ptr -4
.text$mn:00006758
.text$mn:00006758                 push    ebp
.text$mn:00006759                 mov     ebp, esp
.text$mn:0000675B                 push    ecx
.text$mn:0000675C                 mov     [ebp+var_4], ecx
.text$mn:0000675F                 mov     eax, [ebp+var_4]
.text$mn:00006762                 mov     esp, ebp
.text$mn:00006764                 pop     ebp
.text$mn:00006765                 retn
.text$mn:00006765 ??0?$allocator@D@std@@QAE@XZ endp
.text$mn:00006765
.text$mn:00006765 ; ---------------------------------------------------------------------------
.text$mn:00006766                 align 4
.text$mn:00006766 _text$mn        ends
.text$mn:00006766
.text$mn:00006768 ; ===========================================================================
.text$mn:00006768
.text$mn:00006768 ; Segment type: Pure code
.text$mn:00006768 ; Segment permissions: Read/Execute
.text$mn:00006768 _text$mn        segment para public 'CODE' use32
.text$mn:00006768                 assume cs:_text$mn
.text$mn:00006768                 ;org 6768h
.text$mn:00006768 ; COMDAT (pick any)
.text$mn:00006768                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006768
.text$mn:00006768 ; =============== S U B R O U T I N E =======================================
.text$mn:00006768
.text$mn:00006768 ; Attributes: bp-based frame
.text$mn:00006768
.text$mn:00006768 ; public: __thiscall std::allocator<int>::allocator<int>(void)
.text$mn:00006768                 public ??0?$allocator@H@std@@QAE@XZ
.text$mn:00006768 ??0?$allocator@H@std@@QAE@XZ proc near  ; CODE XREF: std::_Wrap_alloc<std::allocator<int>>::_Wrap_alloc<std::allocator<int>>(void)+Ap
.text$mn:00006768
.text$mn:00006768 var_4           = dword ptr -4
.text$mn:00006768
.text$mn:00006768                 push    ebp
.text$mn:00006769                 mov     ebp, esp
.text$mn:0000676B                 push    ecx
.text$mn:0000676C                 mov     [ebp+var_4], ecx
.text$mn:0000676F                 mov     eax, [ebp+var_4]
.text$mn:00006772                 mov     esp, ebp
.text$mn:00006774                 pop     ebp
.text$mn:00006775                 retn
.text$mn:00006775 ??0?$allocator@H@std@@QAE@XZ endp
.text$mn:00006775
.text$mn:00006775 ; ---------------------------------------------------------------------------
.text$mn:00006776                 align 4
.text$mn:00006776 _text$mn        ends
.text$mn:00006776
.text$mn:00006778 ; ===========================================================================
.text$mn:00006778
.text$mn:00006778 ; Segment type: Pure code
.text$mn:00006778 ; Segment permissions: Read/Execute
.text$mn:00006778 _text$mn        segment para public 'CODE' use32
.text$mn:00006778                 assume cs:_text$mn
.text$mn:00006778                 ;org 6778h
.text$mn:00006778 ; COMDAT (pick any)
.text$mn:00006778                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006778
.text$mn:00006778 ; =============== S U B R O U T I N E =======================================
.text$mn:00006778
.text$mn:00006778 ; Attributes: bp-based frame
.text$mn:00006778
.text$mn:00006778 ; public: __thiscall std::allocator<struct std::_Container_proxy>::allocator<struct std::_Container_proxy>(void)
.text$mn:00006778                 public ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
.text$mn:00006778 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc near
.text$mn:00006778                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)+Ap
.text$mn:00006778                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+Cp ...
.text$mn:00006778
.text$mn:00006778 var_4           = dword ptr -4
.text$mn:00006778
.text$mn:00006778                 push    ebp
.text$mn:00006779                 mov     ebp, esp
.text$mn:0000677B                 push    ecx
.text$mn:0000677C                 mov     [ebp+var_4], ecx
.text$mn:0000677F                 mov     eax, [ebp+var_4]
.text$mn:00006782                 mov     esp, ebp
.text$mn:00006784                 pop     ebp
.text$mn:00006785                 retn
.text$mn:00006785 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ endp
.text$mn:00006785
.text$mn:00006785 ; ---------------------------------------------------------------------------
.text$mn:00006786                 align 4
.text$mn:00006786 _text$mn        ends
.text$mn:00006786
.text$mn:00006788 ; ===========================================================================
.text$mn:00006788
.text$mn:00006788 ; Segment type: Pure code
.text$mn:00006788 ; Segment permissions: Read/Execute
.text$mn:00006788 _text$mn        segment para public 'CODE' use32
.text$mn:00006788                 assume cs:_text$mn
.text$mn:00006788                 ;org 6788h
.text$mn:00006788 ; COMDAT (pick any)
.text$mn:00006788                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006788
.text$mn:00006788 ; =============== S U B R O U T I N E =======================================
.text$mn:00006788
.text$mn:00006788 ; Attributes: bp-based frame
.text$mn:00006788
.text$mn:00006788 ; public: __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(void)
.text$mn:00006788                 public ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
.text$mn:00006788 ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ proc near
.text$mn:00006788                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+Ap
.text$mn:00006788                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+2Bp
.text$mn:00006788
.text$mn:00006788 var_4           = dword ptr -4
.text$mn:00006788
.text$mn:00006788                 push    ebp
.text$mn:00006789                 mov     ebp, esp
.text$mn:0000678B                 push    ecx
.text$mn:0000678C                 mov     [ebp+var_4], ecx
.text$mn:0000678F                 mov     eax, [ebp+var_4]
.text$mn:00006792                 mov     esp, ebp
.text$mn:00006794                 pop     ebp
.text$mn:00006795                 retn
.text$mn:00006795 ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ endp
.text$mn:00006795
.text$mn:00006795 ; ---------------------------------------------------------------------------
.text$mn:00006796                 align 4
.text$mn:00006796 _text$mn        ends
.text$mn:00006796
.text$mn:00006798 ; ===========================================================================
.text$mn:00006798
.text$mn:00006798 ; Segment type: Pure code
.text$mn:00006798 ; Segment permissions: Read/Execute
.text$mn:00006798 _text$mn        segment para public 'CODE' use32
.text$mn:00006798                 assume cs:_text$mn
.text$mn:00006798                 ;org 6798h
.text$mn:00006798 ; COMDAT (pick any)
.text$mn:00006798                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006798
.text$mn:00006798 ; =============== S U B R O U T I N E =======================================
.text$mn:00006798
.text$mn:00006798 ; Attributes: bp-based frame
.text$mn:00006798
.text$mn:00006798 ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(class std::allocator<wchar_t> const &)
.text$mn:00006798                 public ??0?$allocator@_W@std@@QAE@ABV01@@Z
.text$mn:00006798 ??0?$allocator@_W@std@@QAE@ABV01@@Z proc near
.text$mn:00006798                                         ; CODE XREF: std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+Bp
.text$mn:00006798                                         ; std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+18p ...
.text$mn:00006798
.text$mn:00006798 var_4           = dword ptr -4
.text$mn:00006798
.text$mn:00006798                 push    ebp
.text$mn:00006799                 mov     ebp, esp
.text$mn:0000679B                 push    ecx
.text$mn:0000679C                 mov     [ebp+var_4], ecx
.text$mn:0000679F                 mov     eax, [ebp+var_4]
.text$mn:000067A2                 mov     esp, ebp
.text$mn:000067A4                 pop     ebp
.text$mn:000067A5                 retn    4
.text$mn:000067A5 ??0?$allocator@_W@std@@QAE@ABV01@@Z endp
.text$mn:000067A5
.text$mn:000067A5 _text$mn        ends
.text$mn:000067A5
.text$mn:000067A8 ; ===========================================================================
.text$mn:000067A8
.text$mn:000067A8 ; Segment type: Pure code
.text$mn:000067A8 ; Segment permissions: Read/Execute
.text$mn:000067A8 _text$mn        segment para public 'CODE' use32
.text$mn:000067A8                 assume cs:_text$mn
.text$mn:000067A8                 ;org 67A8h
.text$mn:000067A8 ; COMDAT (pick any)
.text$mn:000067A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000067A8
.text$mn:000067A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000067A8
.text$mn:000067A8 ; Attributes: bp-based frame
.text$mn:000067A8
.text$mn:000067A8 ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:000067A8                 public ??0?$allocator@_W@std@@QAE@XZ
.text$mn:000067A8 ??0?$allocator@_W@std@@QAE@XZ proc near ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)+Ap
.text$mn:000067A8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+2Bp ...
.text$mn:000067A8
.text$mn:000067A8 var_4           = dword ptr -4
.text$mn:000067A8
.text$mn:000067A8                 push    ebp
.text$mn:000067A9                 mov     ebp, esp
.text$mn:000067AB                 push    ecx
.text$mn:000067AC                 mov     [ebp+var_4], ecx
.text$mn:000067AF                 mov     eax, [ebp+var_4]
.text$mn:000067B2                 mov     esp, ebp
.text$mn:000067B4                 pop     ebp
.text$mn:000067B5                 retn
.text$mn:000067B5 ??0?$allocator@_W@std@@QAE@XZ endp
.text$mn:000067B5
.text$mn:000067B5 ; ---------------------------------------------------------------------------
.text$mn:000067B6                 align 4
.text$mn:000067B6 _text$mn        ends
.text$mn:000067B6
.text$mn:000067B8 ; ===========================================================================
.text$mn:000067B8
.text$mn:000067B8 ; Segment type: Pure code
.text$mn:000067B8 ; Segment permissions: Read/Execute
.text$mn:000067B8 _text$mn        segment para public 'CODE' use32
.text$mn:000067B8                 assume cs:_text$mn
.text$mn:000067B8                 ;org 67B8h
.text$mn:000067B8 ; COMDAT (pick any)
.text$mn:000067B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000067B8
.text$mn:000067B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000067B8
.text$mn:000067B8 ; Attributes: bp-based frame
.text$mn:000067B8
.text$mn:000067B8 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char *Str)
.text$mn:000067B8                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:000067B8 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$mn:000067B8                                         ; CODE XREF: std::_Generic_error_category::message(int)+5Ap
.text$mn:000067B8                                         ; std::_Iostream_error_category::message(int)+3Dp ...
.text$mn:000067B8
.text$mn:000067B8 var_14          = dword ptr -14h
.text$mn:000067B8 var_D           = byte ptr -0Dh
.text$mn:000067B8 var_C           = dword ptr -0Ch
.text$mn:000067B8 var_4           = dword ptr -4
.text$mn:000067B8 Str             = dword ptr  8
.text$mn:000067B8
.text$mn:000067B8                 push    ebp
.text$mn:000067B9                 mov     ebp, esp
.text$mn:000067BB                 push    0FFFFFFFFh
.text$mn:000067BD                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:000067C2                 mov     eax, large fs:0
.text$mn:000067C8                 push    eax
.text$mn:000067C9                 sub     esp, 8
.text$mn:000067CC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000067D1                 xor     eax, ebp
.text$mn:000067D3                 push    eax
.text$mn:000067D4                 lea     eax, [ebp+var_C]
.text$mn:000067D7                 mov     large fs:0, eax
.text$mn:000067DD                 mov     [ebp+var_14], ecx
.text$mn:000067E0                 lea     ecx, [ebp+var_D]
.text$mn:000067E3                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:000067E8                 push    eax
.text$mn:000067E9                 mov     ecx, [ebp+var_14]
.text$mn:000067EC                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:000067F1                 mov     [ebp+var_4], 0
.text$mn:000067F8                 push    0               ; Size
.text$mn:000067FA                 push    0               ; char
.text$mn:000067FC                 mov     ecx, [ebp+var_14]
.text$mn:000067FF                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00006804                 mov     eax, [ebp+Str]
.text$mn:00006807                 push    eax             ; Str
.text$mn:00006808                 mov     ecx, [ebp+var_14]
.text$mn:0000680B                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)
.text$mn:00006810                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006817                 mov     eax, [ebp+var_14]
.text$mn:0000681A                 mov     ecx, [ebp+var_C]
.text$mn:0000681D                 mov     large fs:0, ecx
.text$mn:00006824                 pop     ecx
.text$mn:00006825                 mov     esp, ebp
.text$mn:00006827                 pop     ebp
.text$mn:00006828                 retn    4
.text$mn:00006828 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$mn:00006828
.text$mn:00006828 ; ---------------------------------------------------------------------------
.text$mn:0000682B                 align 4
.text$mn:0000682B _text$mn        ends
.text$mn:0000682B
.text$x:0000682C ; ===========================================================================
.text$x:0000682C
.text$x:0000682C ; Segment type: Pure code
.text$x:0000682C ; Segment permissions: Read/Execute
.text$x:0000682C _text$x         segment para public 'CODE' use32
.text$x:0000682C                 assume cs:_text$x
.text$x:0000682C                 ;org 682Ch
.text$x:0000682C ; COMDAT (pick associative to section at 67B8)
.text$x:0000682C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000682C
.text$x:0000682C ; =============== S U B R O U T I N E =======================================
.text$x:0000682C
.text$x:0000682C
.text$x:0000682C __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
.text$x:0000682C                                         ; DATA XREF: .xdata$x:0000C01Co
.text$x:0000682C                 mov     ecx, [ebp-14h]
.text$x:0000682F                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:0000682F __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 endp
.text$x:0000682F
.text$x:00006834
.text$x:00006834 ; =============== S U B R O U T I N E =======================================
.text$x:00006834
.text$x:00006834
.text$x:00006834 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$x:00006834                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+5o
.text$x:00006834
.text$x:00006834 arg_4           = dword ptr  8
.text$x:00006834
.text$x:00006834                 mov     edx, [esp+arg_4]
.text$x:00006838                 lea     eax, [edx+0Ch]
.text$x:0000683B                 mov     ecx, [edx-0Ch]
.text$x:0000683E                 xor     ecx, eax
.text$x:00006840                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006845                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$x:0000684A                 jmp     ___CxxFrameHandler3
.text$x:0000684A __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$x:0000684A
.text$x:0000684A ; ---------------------------------------------------------------------------
.text$x:0000684F                 align 10h
.text$x:0000684F _text$x         ends
.text$x:0000684F
.text$mn:00006850 ; ===========================================================================
.text$mn:00006850
.text$mn:00006850 ; Segment type: Pure code
.text$mn:00006850 ; Segment permissions: Read/Execute
.text$mn:00006850 _text$mn        segment para public 'CODE' use32
.text$mn:00006850                 assume cs:_text$mn
.text$mn:00006850                 ;org 6850h
.text$mn:00006850 ; COMDAT (pick any)
.text$mn:00006850                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006850
.text$mn:00006850 ; =============== S U B R O U T I N E =======================================
.text$mn:00006850
.text$mn:00006850 ; Attributes: bp-based frame
.text$mn:00006850
.text$mn:00006850 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:00006850                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.text$mn:00006850 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z proc near
.text$mn:00006850                                         ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+56p
.text$mn:00006850
.text$mn:00006850 var_14          = dword ptr -14h
.text$mn:00006850 var_D           = byte ptr -0Dh
.text$mn:00006850 var_C           = dword ptr -0Ch
.text$mn:00006850 var_4           = dword ptr -4
.text$mn:00006850 arg_0           = dword ptr  8
.text$mn:00006850
.text$mn:00006850                 push    ebp
.text$mn:00006851                 mov     ebp, esp
.text$mn:00006853                 push    0FFFFFFFFh
.text$mn:00006855                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.text$mn:0000685A                 mov     eax, large fs:0
.text$mn:00006860                 push    eax
.text$mn:00006861                 sub     esp, 8
.text$mn:00006864                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006869                 xor     eax, ebp
.text$mn:0000686B                 push    eax
.text$mn:0000686C                 lea     eax, [ebp+var_C]
.text$mn:0000686F                 mov     large fs:0, eax
.text$mn:00006875                 mov     [ebp+var_14], ecx
.text$mn:00006878                 lea     eax, [ebp+var_D]
.text$mn:0000687B                 push    eax
.text$mn:0000687C                 mov     ecx, [ebp+arg_0]
.text$mn:0000687F                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00006884                 push    eax
.text$mn:00006885                 mov     ecx, [ebp+var_14]
.text$mn:00006888                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:0000688D                 mov     [ebp+var_4], 0
.text$mn:00006894                 push    0
.text$mn:00006896                 push    0
.text$mn:00006898                 mov     ecx, [ebp+var_14]
.text$mn:0000689B                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000068A0                 mov     ecx, [ebp+arg_0]
.text$mn:000068A3                 push    ecx
.text$mn:000068A4                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000068A9                 add     esp, 4
.text$mn:000068AC                 push    eax
.text$mn:000068AD                 mov     ecx, [ebp+var_14]
.text$mn:000068B0                 call    ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:000068B5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000068BC                 mov     eax, [ebp+var_14]
.text$mn:000068BF                 mov     ecx, [ebp+var_C]
.text$mn:000068C2                 mov     large fs:0, ecx
.text$mn:000068C9                 pop     ecx
.text$mn:000068CA                 mov     esp, ebp
.text$mn:000068CC                 pop     ebp
.text$mn:000068CD                 retn    4
.text$mn:000068CD ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z endp
.text$mn:000068CD
.text$mn:000068CD _text$mn        ends
.text$mn:000068CD
.text$x:000068D0 ; ===========================================================================
.text$x:000068D0
.text$x:000068D0 ; Segment type: Pure code
.text$x:000068D0 ; Segment permissions: Read/Execute
.text$x:000068D0 _text$x         segment para public 'CODE' use32
.text$x:000068D0                 assume cs:_text$x
.text$x:000068D0                 ;org 68D0h
.text$x:000068D0 ; COMDAT (pick associative to section at 6850)
.text$x:000068D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000068D0
.text$x:000068D0 ; =============== S U B R O U T I N E =======================================
.text$x:000068D0
.text$x:000068D0
.text$x:000068D0 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0 proc near
.text$x:000068D0                                         ; DATA XREF: .xdata$x:0000C3C0o
.text$x:000068D0                 mov     ecx, [ebp-14h]
.text$x:000068D3                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:000068D3 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0 endp
.text$x:000068D3
.text$x:000068D8
.text$x:000068D8 ; =============== S U B R O U T I N E =======================================
.text$x:000068D8
.text$x:000068D8
.text$x:000068D8 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z proc near
.text$x:000068D8                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5o
.text$x:000068D8
.text$x:000068D8 arg_4           = dword ptr  8
.text$x:000068D8
.text$x:000068D8                 mov     edx, [esp+arg_4]
.text$x:000068DC                 lea     eax, [edx+0Ch]
.text$x:000068DF                 mov     ecx, [edx-0Ch]
.text$x:000068E2                 xor     ecx, eax
.text$x:000068E4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000068E9                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.text$x:000068EE                 jmp     ___CxxFrameHandler3
.text$x:000068EE __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z endp
.text$x:000068EE
.text$x:000068EE ; ---------------------------------------------------------------------------
.text$x:000068F3                 align 4
.text$x:000068F3 _text$x         ends
.text$x:000068F3
.text$mn:000068F4 ; ===========================================================================
.text$mn:000068F4
.text$mn:000068F4 ; Segment type: Pure code
.text$mn:000068F4 ; Segment permissions: Read/Execute
.text$mn:000068F4 _text$mn        segment para public 'CODE' use32
.text$mn:000068F4                 assume cs:_text$mn
.text$mn:000068F4                 ;org 68F4h
.text$mn:000068F4 ; COMDAT (pick any)
.text$mn:000068F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000068F4
.text$mn:000068F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000068F4
.text$mn:000068F4 ; Attributes: bp-based frame
.text$mn:000068F4
.text$mn:000068F4 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:000068F4                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$mn:000068F4 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z proc near
.text$mn:000068F4                                         ; CODE XREF: ProjectPanel::getRelativePath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+86p
.text$mn:000068F4                                         ; FileRelocalizerDlg::getFullFilePath(void)+39p
.text$mn:000068F4
.text$mn:000068F4 var_14          = dword ptr -14h
.text$mn:000068F4 var_E           = byte ptr -0Eh
.text$mn:000068F4 var_D           = byte ptr -0Dh
.text$mn:000068F4 var_C           = dword ptr -0Ch
.text$mn:000068F4 var_4           = dword ptr -4
.text$mn:000068F4 arg_0           = dword ptr  8
.text$mn:000068F4
.text$mn:000068F4                 push    ebp
.text$mn:000068F5                 mov     ebp, esp
.text$mn:000068F7                 push    0FFFFFFFFh
.text$mn:000068F9                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$mn:000068FE                 mov     eax, large fs:0
.text$mn:00006904                 push    eax
.text$mn:00006905                 sub     esp, 8
.text$mn:00006908                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000690D                 xor     eax, ebp
.text$mn:0000690F                 push    eax
.text$mn:00006910                 lea     eax, [ebp+var_C]
.text$mn:00006913                 mov     large fs:0, eax
.text$mn:00006919                 mov     [ebp+var_14], ecx
.text$mn:0000691C                 lea     eax, [ebp+var_D]
.text$mn:0000691F                 push    eax
.text$mn:00006920                 lea     ecx, [ebp+var_E]
.text$mn:00006923                 push    ecx
.text$mn:00006924                 mov     ecx, [ebp+arg_0]
.text$mn:00006927                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000692C                 mov     ecx, eax
.text$mn:0000692E                 call    ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)
.text$mn:00006933                 push    eax
.text$mn:00006934                 mov     ecx, [ebp+var_14]
.text$mn:00006937                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:0000693C                 mov     [ebp+var_4], 0
.text$mn:00006943                 push    0
.text$mn:00006945                 push    0
.text$mn:00006947                 mov     ecx, [ebp+var_14]
.text$mn:0000694A                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000694F                 mov     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00006955                 push    edx
.text$mn:00006956                 push    0
.text$mn:00006958                 mov     eax, [ebp+arg_0]
.text$mn:0000695B                 push    eax
.text$mn:0000695C                 mov     ecx, [ebp+var_14]
.text$mn:0000695F                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00006964                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000696B                 mov     eax, [ebp+var_14]
.text$mn:0000696E                 mov     ecx, [ebp+var_C]
.text$mn:00006971                 mov     large fs:0, ecx
.text$mn:00006978                 pop     ecx
.text$mn:00006979                 mov     esp, ebp
.text$mn:0000697B                 pop     ebp
.text$mn:0000697C                 retn    4
.text$mn:0000697C ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z endp
.text$mn:0000697C
.text$mn:0000697C ; ---------------------------------------------------------------------------
.text$mn:0000697F                 align 10h
.text$mn:0000697F _text$mn        ends
.text$mn:0000697F
.text$x:00006980 ; ===========================================================================
.text$x:00006980
.text$x:00006980 ; Segment type: Pure code
.text$x:00006980 ; Segment permissions: Read/Execute
.text$x:00006980 _text$x         segment para public 'CODE' use32
.text$x:00006980                 assume cs:_text$x
.text$x:00006980                 ;org 6980h
.text$x:00006980 ; COMDAT (pick associative to section at 68F4)
.text$x:00006980                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006980
.text$x:00006980 ; =============== S U B R O U T I N E =======================================
.text$x:00006980
.text$x:00006980
.text$x:00006980 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00006980                                         ; DATA XREF: .xdata$x:0000C33Co
.text$x:00006980                 mov     ecx, [ebp-14h]
.text$x:00006983                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00006983 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 endp
.text$x:00006983
.text$x:00006988
.text$x:00006988 ; =============== S U B R O U T I N E =======================================
.text$x:00006988
.text$x:00006988
.text$x:00006988 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z proc near
.text$x:00006988                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5o
.text$x:00006988
.text$x:00006988 arg_4           = dword ptr  8
.text$x:00006988
.text$x:00006988                 mov     edx, [esp+arg_4]
.text$x:0000698C                 lea     eax, [edx+0Ch]
.text$x:0000698F                 mov     ecx, [edx-0Ch]
.text$x:00006992                 xor     ecx, eax
.text$x:00006994                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006999                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$x:0000699E                 jmp     ___CxxFrameHandler3
.text$x:0000699E __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z endp
.text$x:0000699E
.text$x:0000699E ; ---------------------------------------------------------------------------
.text$x:000069A3                 align 4
.text$x:000069A3 _text$x         ends
.text$x:000069A3
.text$mn:000069A4 ; ===========================================================================
.text$mn:000069A4
.text$mn:000069A4 ; Segment type: Pure code
.text$mn:000069A4 ; Segment permissions: Read/Execute
.text$mn:000069A4 _text$mn        segment para public 'CODE' use32
.text$mn:000069A4                 assume cs:_text$mn
.text$mn:000069A4                 ;org 69A4h
.text$mn:000069A4 ; COMDAT (pick any)
.text$mn:000069A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000069A4
.text$mn:000069A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000069A4
.text$mn:000069A4 ; Attributes: bp-based frame
.text$mn:000069A4
.text$mn:000069A4 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t *Str)
.text$mn:000069A4                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:000069A4 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$mn:000069A4                                         ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+46p
.text$mn:000069A4                                         ; ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+130p ...
.text$mn:000069A4
.text$mn:000069A4 var_14          = dword ptr -14h
.text$mn:000069A4 var_D           = byte ptr -0Dh
.text$mn:000069A4 var_C           = dword ptr -0Ch
.text$mn:000069A4 var_4           = dword ptr -4
.text$mn:000069A4 Str             = dword ptr  8
.text$mn:000069A4
.text$mn:000069A4                 push    ebp
.text$mn:000069A5                 mov     ebp, esp
.text$mn:000069A7                 push    0FFFFFFFFh
.text$mn:000069A9                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:000069AE                 mov     eax, large fs:0
.text$mn:000069B4                 push    eax
.text$mn:000069B5                 sub     esp, 8
.text$mn:000069B8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000069BD                 xor     eax, ebp
.text$mn:000069BF                 push    eax
.text$mn:000069C0                 lea     eax, [ebp+var_C]
.text$mn:000069C3                 mov     large fs:0, eax
.text$mn:000069C9                 mov     [ebp+var_14], ecx
.text$mn:000069CC                 lea     ecx, [ebp+var_D]
.text$mn:000069CF                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:000069D4                 push    eax
.text$mn:000069D5                 mov     ecx, [ebp+var_14]
.text$mn:000069D8                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:000069DD                 mov     [ebp+var_4], 0
.text$mn:000069E4                 push    0
.text$mn:000069E6                 push    0
.text$mn:000069E8                 mov     ecx, [ebp+var_14]
.text$mn:000069EB                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000069F0                 mov     eax, [ebp+Str]
.text$mn:000069F3                 push    eax             ; Str
.text$mn:000069F4                 mov     ecx, [ebp+var_14]
.text$mn:000069F7                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:000069FC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006A03                 mov     eax, [ebp+var_14]
.text$mn:00006A06                 mov     ecx, [ebp+var_C]
.text$mn:00006A09                 mov     large fs:0, ecx
.text$mn:00006A10                 pop     ecx
.text$mn:00006A11                 mov     esp, ebp
.text$mn:00006A13                 pop     ebp
.text$mn:00006A14                 retn    4
.text$mn:00006A14 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$mn:00006A14
.text$mn:00006A14 ; ---------------------------------------------------------------------------
.text$mn:00006A17                 align 4
.text$mn:00006A17 _text$mn        ends
.text$mn:00006A17
.text$x:00006A18 ; ===========================================================================
.text$x:00006A18
.text$x:00006A18 ; Segment type: Pure code
.text$x:00006A18 ; Segment permissions: Read/Execute
.text$x:00006A18 _text$x         segment para public 'CODE' use32
.text$x:00006A18                 assume cs:_text$x
.text$x:00006A18                 ;org 6A18h
.text$x:00006A18 ; COMDAT (pick associative to section at 69A4)
.text$x:00006A18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006A18
.text$x:00006A18 ; =============== S U B R O U T I N E =======================================
.text$x:00006A18
.text$x:00006A18
.text$x:00006A18 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 proc near
.text$x:00006A18                                         ; DATA XREF: .xdata$x:0000C394o
.text$x:00006A18                 mov     ecx, [ebp-14h]
.text$x:00006A1B                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00006A1B __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 endp
.text$x:00006A1B
.text$x:00006A20
.text$x:00006A20 ; =============== S U B R O U T I N E =======================================
.text$x:00006A20
.text$x:00006A20
.text$x:00006A20 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$x:00006A20                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+5o
.text$x:00006A20
.text$x:00006A20 arg_4           = dword ptr  8
.text$x:00006A20
.text$x:00006A20                 mov     edx, [esp+arg_4]
.text$x:00006A24                 lea     eax, [edx+0Ch]
.text$x:00006A27                 mov     ecx, [edx-0Ch]
.text$x:00006A2A                 xor     ecx, eax
.text$x:00006A2C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006A31                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$x:00006A36                 jmp     ___CxxFrameHandler3
.text$x:00006A36 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$x:00006A36
.text$x:00006A36 ; ---------------------------------------------------------------------------
.text$x:00006A3B                 align 4
.text$x:00006A3B _text$x         ends
.text$x:00006A3B
.text$mn:00006A3C ; ===========================================================================
.text$mn:00006A3C
.text$mn:00006A3C ; Segment type: Pure code
.text$mn:00006A3C ; Segment permissions: Read/Execute
.text$mn:00006A3C _text$mn        segment para public 'CODE' use32
.text$mn:00006A3C                 assume cs:_text$mn
.text$mn:00006A3C                 ;org 6A3Ch
.text$mn:00006A3C ; COMDAT (pick any)
.text$mn:00006A3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006A3C
.text$mn:00006A3C ; =============== S U B R O U T I N E =======================================
.text$mn:00006A3C
.text$mn:00006A3C ; Attributes: bp-based frame
.text$mn:00006A3C
.text$mn:00006A3C ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:00006A3C                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00006A3C ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:00006A3C                                         ; CODE XREF: ProjectPanel::addFilesFromDirectory(_TREEITEM *)+BCp
.text$mn:00006A3C                                         ; FileRelocalizerDlg::FileRelocalizerDlg(void)+44p
.text$mn:00006A3C
.text$mn:00006A3C var_14          = dword ptr -14h
.text$mn:00006A3C var_D           = byte ptr -0Dh
.text$mn:00006A3C var_C           = dword ptr -0Ch
.text$mn:00006A3C var_4           = dword ptr -4
.text$mn:00006A3C
.text$mn:00006A3C                 push    ebp
.text$mn:00006A3D                 mov     ebp, esp
.text$mn:00006A3F                 push    0FFFFFFFFh
.text$mn:00006A41                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00006A46                 mov     eax, large fs:0
.text$mn:00006A4C                 push    eax
.text$mn:00006A4D                 sub     esp, 8
.text$mn:00006A50                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006A55                 xor     eax, ebp
.text$mn:00006A57                 push    eax
.text$mn:00006A58                 lea     eax, [ebp+var_C]
.text$mn:00006A5B                 mov     large fs:0, eax
.text$mn:00006A61                 mov     [ebp+var_14], ecx
.text$mn:00006A64                 lea     ecx, [ebp+var_D]
.text$mn:00006A67                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00006A6C                 push    eax
.text$mn:00006A6D                 mov     ecx, [ebp+var_14]
.text$mn:00006A70                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00006A75                 mov     [ebp+var_4], 0
.text$mn:00006A7C                 push    0
.text$mn:00006A7E                 push    0
.text$mn:00006A80                 mov     ecx, [ebp+var_14]
.text$mn:00006A83                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00006A88                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006A8F                 mov     eax, [ebp+var_14]
.text$mn:00006A92                 mov     ecx, [ebp+var_C]
.text$mn:00006A95                 mov     large fs:0, ecx
.text$mn:00006A9C                 pop     ecx
.text$mn:00006A9D                 mov     esp, ebp
.text$mn:00006A9F                 pop     ebp
.text$mn:00006AA0                 retn
.text$mn:00006AA0 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:00006AA0
.text$mn:00006AA0 ; ---------------------------------------------------------------------------
.text$mn:00006AA1                 align 4
.text$mn:00006AA1 _text$mn        ends
.text$mn:00006AA1
.text$x:00006AA4 ; ===========================================================================
.text$x:00006AA4
.text$x:00006AA4 ; Segment type: Pure code
.text$x:00006AA4 ; Segment permissions: Read/Execute
.text$x:00006AA4 _text$x         segment para public 'CODE' use32
.text$x:00006AA4                 assume cs:_text$x
.text$x:00006AA4                 ;org 6AA4h
.text$x:00006AA4 ; COMDAT (pick associative to section at 6A3C)
.text$x:00006AA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006AA4
.text$x:00006AA4 ; =============== S U B R O U T I N E =======================================
.text$x:00006AA4
.text$x:00006AA4
.text$x:00006AA4 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:00006AA4                                         ; DATA XREF: .xdata$x:0000C368o
.text$x:00006AA4                 mov     ecx, [ebp-14h]
.text$x:00006AA7                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00006AA7 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:00006AA7
.text$x:00006AAC
.text$x:00006AAC ; =============== S U B R O U T I N E =======================================
.text$x:00006AAC
.text$x:00006AAC
.text$x:00006AAC __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:00006AAC                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:00006AAC
.text$x:00006AAC arg_4           = dword ptr  8
.text$x:00006AAC
.text$x:00006AAC                 mov     edx, [esp+arg_4]
.text$x:00006AB0                 lea     eax, [edx+0Ch]
.text$x:00006AB3                 mov     ecx, [edx-0Ch]
.text$x:00006AB6                 xor     ecx, eax
.text$x:00006AB8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006ABD                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:00006AC2                 jmp     ___CxxFrameHandler3
.text$x:00006AC2 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:00006AC2
.text$x:00006AC2 ; ---------------------------------------------------------------------------
.text$x:00006AC7                 align 4
.text$x:00006AC7 _text$x         ends
.text$x:00006AC7
.text$mn:00006AC8 ; ===========================================================================
.text$mn:00006AC8
.text$mn:00006AC8 ; Segment type: Pure code
.text$mn:00006AC8 ; Segment permissions: Read/Execute
.text$mn:00006AC8 _text$mn        segment para public 'CODE' use32
.text$mn:00006AC8                 assume cs:_text$mn
.text$mn:00006AC8                 ;org 6AC8h
.text$mn:00006AC8 ; COMDAT (pick any)
.text$mn:00006AC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006AC8
.text$mn:00006AC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006AC8
.text$mn:00006AC8 ; Attributes: bp-based frame
.text$mn:00006AC8
.text$mn:00006AC8 ; public: __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:00006AC8                 public ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$mn:00006AC8 ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ proc near
.text$mn:00006AC8                                         ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+89p
.text$mn:00006AC8
.text$mn:00006AC8 var_14          = dword ptr -14h
.text$mn:00006AC8 var_D           = byte ptr -0Dh
.text$mn:00006AC8 var_C           = dword ptr -0Ch
.text$mn:00006AC8 var_4           = dword ptr -4
.text$mn:00006AC8
.text$mn:00006AC8                 push    ebp
.text$mn:00006AC9                 mov     ebp, esp
.text$mn:00006ACB                 push    0FFFFFFFFh
.text$mn:00006ACD                 push    offset __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$mn:00006AD2                 mov     eax, large fs:0
.text$mn:00006AD8                 push    eax
.text$mn:00006AD9                 sub     esp, 8
.text$mn:00006ADC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006AE1                 xor     eax, ebp
.text$mn:00006AE3                 push    eax
.text$mn:00006AE4                 lea     eax, [ebp+var_C]
.text$mn:00006AE7                 mov     large fs:0, eax
.text$mn:00006AED                 mov     [ebp+var_14], ecx
.text$mn:00006AF0                 lea     ecx, [ebp+var_D]
.text$mn:00006AF3                 call    ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void)
.text$mn:00006AF8                 push    eax
.text$mn:00006AF9                 mov     ecx, [ebp+var_14]
.text$mn:00006AFC                 call    ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)
.text$mn:00006B01                 mov     [ebp+var_4], 0
.text$mn:00006B08                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006B0F                 mov     eax, [ebp+var_14]
.text$mn:00006B12                 mov     ecx, [ebp+var_C]
.text$mn:00006B15                 mov     large fs:0, ecx
.text$mn:00006B1C                 pop     ecx
.text$mn:00006B1D                 mov     esp, ebp
.text$mn:00006B1F                 pop     ebp
.text$mn:00006B20                 retn
.text$mn:00006B20 ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ endp
.text$mn:00006B20
.text$mn:00006B20 ; ---------------------------------------------------------------------------
.text$mn:00006B21                 align 4
.text$mn:00006B21 _text$mn        ends
.text$mn:00006B21
.text$x:00006B24 ; ===========================================================================
.text$x:00006B24
.text$x:00006B24 ; Segment type: Pure code
.text$x:00006B24 ; Segment permissions: Read/Execute
.text$x:00006B24 _text$x         segment para public 'CODE' use32
.text$x:00006B24                 assume cs:_text$x
.text$x:00006B24                 ;org 6B24h
.text$x:00006B24 ; COMDAT (pick associative to section at 6AC8)
.text$x:00006B24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006B24
.text$x:00006B24 ; =============== S U B R O U T I N E =======================================
.text$x:00006B24
.text$x:00006B24
.text$x:00006B24 __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 proc near
.text$x:00006B24                                         ; DATA XREF: .xdata$x:0000CBFCo
.text$x:00006B24                 mov     ecx, [ebp-14h]
.text$x:00006B27                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00006B27 __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 endp
.text$x:00006B27
.text$x:00006B2C
.text$x:00006B2C ; =============== S U B R O U T I N E =======================================
.text$x:00006B2C
.text$x:00006B2C
.text$x:00006B2C __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ proc near
.text$x:00006B2C                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:00006B2C
.text$x:00006B2C arg_4           = dword ptr  8
.text$x:00006B2C
.text$x:00006B2C                 mov     edx, [esp+arg_4]
.text$x:00006B30                 lea     eax, [edx+0Ch]
.text$x:00006B33                 mov     ecx, [edx-0Ch]
.text$x:00006B36                 xor     ecx, eax
.text$x:00006B38                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006B3D                 mov     eax, offset __ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$x:00006B42                 jmp     ___CxxFrameHandler3
.text$x:00006B42 __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ endp
.text$x:00006B42
.text$x:00006B42 ; ---------------------------------------------------------------------------
.text$x:00006B47                 align 4
.text$x:00006B47 _text$x         ends
.text$x:00006B47
.text$mn:00006B48 ; ===========================================================================
.text$mn:00006B48
.text$mn:00006B48 ; Segment type: Pure code
.text$mn:00006B48 ; Segment permissions: Read/Execute
.text$mn:00006B48 _text$mn        segment para public 'CODE' use32
.text$mn:00006B48                 assume cs:_text$mn
.text$mn:00006B48                 ;org 6B48h
.text$mn:00006B48 ; COMDAT (pick any)
.text$mn:00006B48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B48
.text$mn:00006B48 ; =============== S U B R O U T I N E =======================================
.text$mn:00006B48
.text$mn:00006B48 ; Attributes: bp-based frame
.text$mn:00006B48
.text$mn:00006B48 ; public: __thiscall FileRelocalizerDlg::FileRelocalizerDlg(void)
.text$mn:00006B48                 public ??0FileRelocalizerDlg@@QAE@XZ
.text$mn:00006B48 ??0FileRelocalizerDlg@@QAE@XZ proc near ; CODE XREF: ProjectPanel::popupMenuCmd(int)+85Ep
.text$mn:00006B48
.text$mn:00006B48 var_10          = dword ptr -10h
.text$mn:00006B48 var_C           = dword ptr -0Ch
.text$mn:00006B48 var_4           = dword ptr -4
.text$mn:00006B48
.text$mn:00006B48                 push    ebp
.text$mn:00006B49                 mov     ebp, esp
.text$mn:00006B4B                 push    0FFFFFFFFh
.text$mn:00006B4D                 push    offset __ehhandler$??0FileRelocalizerDlg@@QAE@XZ
.text$mn:00006B52                 mov     eax, large fs:0
.text$mn:00006B58                 push    eax
.text$mn:00006B59                 push    ecx
.text$mn:00006B5A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006B5F                 xor     eax, ebp
.text$mn:00006B61                 push    eax
.text$mn:00006B62                 lea     eax, [ebp+var_C]
.text$mn:00006B65                 mov     large fs:0, eax
.text$mn:00006B6B                 mov     [ebp+var_10], ecx
.text$mn:00006B6E                 mov     ecx, [ebp+var_10]
.text$mn:00006B71                 call    ??0StaticDialog@@QAE@XZ ; StaticDialog::StaticDialog(void)
.text$mn:00006B76                 mov     [ebp+var_4], 0
.text$mn:00006B7D                 mov     eax, [ebp+var_10]
.text$mn:00006B80                 mov     dword ptr [eax], offset ??_7FileRelocalizerDlg@@6B@ ; const FileRelocalizerDlg::`vftable'
.text$mn:00006B86                 mov     ecx, [ebp+var_10]
.text$mn:00006B89                 add     ecx, 20h ; ' '
.text$mn:00006B8C                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00006B91                 mov     byte ptr [ebp+var_4], 1
.text$mn:00006B95                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006B9C                 mov     eax, [ebp+var_10]
.text$mn:00006B9F                 mov     ecx, [ebp+var_C]
.text$mn:00006BA2                 mov     large fs:0, ecx
.text$mn:00006BA9                 pop     ecx
.text$mn:00006BAA                 mov     esp, ebp
.text$mn:00006BAC                 pop     ebp
.text$mn:00006BAD                 retn
.text$mn:00006BAD ??0FileRelocalizerDlg@@QAE@XZ endp
.text$mn:00006BAD
.text$mn:00006BAD ; ---------------------------------------------------------------------------
.text$mn:00006BAE                 align 10h
.text$mn:00006BAE _text$mn        ends
.text$mn:00006BAE
.text$x:00006BB0 ; ===========================================================================
.text$x:00006BB0
.text$x:00006BB0 ; Segment type: Pure code
.text$x:00006BB0 ; Segment permissions: Read/Execute
.text$x:00006BB0 _text$x         segment para public 'CODE' use32
.text$x:00006BB0                 assume cs:_text$x
.text$x:00006BB0                 ;org 6BB0h
.text$x:00006BB0 ; COMDAT (pick associative to section at 6B48)
.text$x:00006BB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006BB0
.text$x:00006BB0 ; =============== S U B R O U T I N E =======================================
.text$x:00006BB0
.text$x:00006BB0
.text$x:00006BB0 __unwindfunclet$??0FileRelocalizerDlg@@QAE@XZ$0 proc near
.text$x:00006BB0                                         ; DATA XREF: .xdata$x:0000CA84o
.text$x:00006BB0                 mov     ecx, [ebp-10h]  ; this
.text$x:00006BB3                 jmp     ??1StaticDialog@@UAE@XZ ; StaticDialog::~StaticDialog(void)
.text$x:00006BB3 __unwindfunclet$??0FileRelocalizerDlg@@QAE@XZ$0 endp
.text$x:00006BB3
.text$x:00006BB8
.text$x:00006BB8 ; =============== S U B R O U T I N E =======================================
.text$x:00006BB8
.text$x:00006BB8
.text$x:00006BB8 __unwindfunclet$??0FileRelocalizerDlg@@QAE@XZ$1 proc near
.text$x:00006BB8                                         ; DATA XREF: .xdata$x:0000CA8Co
.text$x:00006BB8                 mov     ecx, [ebp-10h]
.text$x:00006BBB                 add     ecx, 20h ; ' '
.text$x:00006BBE                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00006BBE __unwindfunclet$??0FileRelocalizerDlg@@QAE@XZ$1 endp
.text$x:00006BBE
.text$x:00006BC3
.text$x:00006BC3 ; =============== S U B R O U T I N E =======================================
.text$x:00006BC3
.text$x:00006BC3
.text$x:00006BC3 __ehhandler$??0FileRelocalizerDlg@@QAE@XZ proc near
.text$x:00006BC3                                         ; DATA XREF: FileRelocalizerDlg::FileRelocalizerDlg(void)+5o
.text$x:00006BC3
.text$x:00006BC3 arg_4           = dword ptr  8
.text$x:00006BC3
.text$x:00006BC3                 mov     edx, [esp+arg_4]
.text$x:00006BC7                 lea     eax, [edx+0Ch]
.text$x:00006BCA                 mov     ecx, [edx-8]
.text$x:00006BCD                 xor     ecx, eax
.text$x:00006BCF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006BD4                 mov     eax, offset __ehfuncinfo$??0FileRelocalizerDlg@@QAE@XZ
.text$x:00006BD9                 jmp     ___CxxFrameHandler3
.text$x:00006BD9 __ehhandler$??0FileRelocalizerDlg@@QAE@XZ endp
.text$x:00006BD9
.text$x:00006BD9 ; ---------------------------------------------------------------------------
.text$x:00006BDE                 align 10h
.text$x:00006BDE _text$x         ends
.text$x:00006BDE
.text$mn:00006BE0 ; ===========================================================================
.text$mn:00006BE0
.text$mn:00006BE0 ; Segment type: Pure code
.text$mn:00006BE0 ; Segment permissions: Read/Execute
.text$mn:00006BE0 _text$mn        segment para public 'CODE' use32
.text$mn:00006BE0                 assume cs:_text$mn
.text$mn:00006BE0                 ;org 6BE0h
.text$mn:00006BE0 ; COMDAT (pick any)
.text$mn:00006BE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006BE0
.text$mn:00006BE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00006BE0
.text$mn:00006BE0 ; Attributes: bp-based frame
.text$mn:00006BE0
.text$mn:00006BE0 ; public: __thiscall StaticDialog::StaticDialog(void)
.text$mn:00006BE0                 public ??0StaticDialog@@QAE@XZ
.text$mn:00006BE0 ??0StaticDialog@@QAE@XZ proc near       ; CODE XREF: FileRelocalizerDlg::FileRelocalizerDlg(void)+29p
.text$mn:00006BE0
.text$mn:00006BE0 var_10          = dword ptr -10h
.text$mn:00006BE0 var_C           = dword ptr -0Ch
.text$mn:00006BE0 var_4           = dword ptr -4
.text$mn:00006BE0
.text$mn:00006BE0                 push    ebp
.text$mn:00006BE1                 mov     ebp, esp
.text$mn:00006BE3                 push    0FFFFFFFFh
.text$mn:00006BE5                 push    offset __ehhandler$??0StaticDialog@@QAE@XZ
.text$mn:00006BEA                 mov     eax, large fs:0
.text$mn:00006BF0                 push    eax
.text$mn:00006BF1                 push    ecx
.text$mn:00006BF2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006BF7                 xor     eax, ebp
.text$mn:00006BF9                 push    eax
.text$mn:00006BFA                 lea     eax, [ebp+var_C]
.text$mn:00006BFD                 mov     large fs:0, eax
.text$mn:00006C03                 mov     [ebp+var_10], ecx
.text$mn:00006C06                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006C09                 call    ??0Window@@QAE@XZ ; Window::Window(void)
.text$mn:00006C0E                 mov     [ebp+var_4], 0
.text$mn:00006C15                 mov     eax, [ebp+var_10]
.text$mn:00006C18                 mov     dword ptr [eax], offset ??_7StaticDialog@@6B@ ; const StaticDialog::`vftable'
.text$mn:00006C1E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006C25                 mov     eax, [ebp+var_10]
.text$mn:00006C28                 mov     ecx, [ebp+var_C]
.text$mn:00006C2B                 mov     large fs:0, ecx
.text$mn:00006C32                 pop     ecx
.text$mn:00006C33                 mov     esp, ebp
.text$mn:00006C35                 pop     ebp
.text$mn:00006C36                 retn
.text$mn:00006C36 ??0StaticDialog@@QAE@XZ endp
.text$mn:00006C36
.text$mn:00006C36 ; ---------------------------------------------------------------------------
.text$mn:00006C37                 align 4
.text$mn:00006C37 _text$mn        ends
.text$mn:00006C37
.text$x:00006C38 ; ===========================================================================
.text$x:00006C38
.text$x:00006C38 ; Segment type: Pure code
.text$x:00006C38 ; Segment permissions: Read/Execute
.text$x:00006C38 _text$x         segment para public 'CODE' use32
.text$x:00006C38                 assume cs:_text$x
.text$x:00006C38                 ;org 6C38h
.text$x:00006C38 ; COMDAT (pick associative to section at 6BE0)
.text$x:00006C38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006C38
.text$x:00006C38 ; =============== S U B R O U T I N E =======================================
.text$x:00006C38
.text$x:00006C38
.text$x:00006C38 __unwindfunclet$??0StaticDialog@@QAE@XZ$0 proc near
.text$x:00006C38                                         ; DATA XREF: .xdata$x:0000C5F8o
.text$x:00006C38                 mov     ecx, [ebp-10h]  ; this
.text$x:00006C3B                 jmp     ??1Window@@UAE@XZ ; Window::~Window(void)
.text$x:00006C3B __unwindfunclet$??0StaticDialog@@QAE@XZ$0 endp
.text$x:00006C3B
.text$x:00006C40
.text$x:00006C40 ; =============== S U B R O U T I N E =======================================
.text$x:00006C40
.text$x:00006C40
.text$x:00006C40 __ehhandler$??0StaticDialog@@QAE@XZ proc near
.text$x:00006C40                                         ; DATA XREF: StaticDialog::StaticDialog(void)+5o
.text$x:00006C40
.text$x:00006C40 arg_4           = dword ptr  8
.text$x:00006C40
.text$x:00006C40                 mov     edx, [esp+arg_4]
.text$x:00006C44                 lea     eax, [edx+0Ch]
.text$x:00006C47                 mov     ecx, [edx-8]
.text$x:00006C4A                 xor     ecx, eax
.text$x:00006C4C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006C51                 mov     eax, offset __ehfuncinfo$??0StaticDialog@@QAE@XZ
.text$x:00006C56                 jmp     ___CxxFrameHandler3
.text$x:00006C56 __ehhandler$??0StaticDialog@@QAE@XZ endp
.text$x:00006C56
.text$x:00006C56 ; ---------------------------------------------------------------------------
.text$x:00006C5B                 align 4
.text$x:00006C5B _text$x         ends
.text$x:00006C5B
.text$mn:00006C5C ; ===========================================================================
.text$mn:00006C5C
.text$mn:00006C5C ; Segment type: Pure code
.text$mn:00006C5C ; Segment permissions: Read/Execute
.text$mn:00006C5C _text$mn        segment para public 'CODE' use32
.text$mn:00006C5C                 assume cs:_text$mn
.text$mn:00006C5C                 ;org 6C5Ch
.text$mn:00006C5C ; COMDAT (pick any)
.text$mn:00006C5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C5C
.text$mn:00006C5C ; =============== S U B R O U T I N E =======================================
.text$mn:00006C5C
.text$mn:00006C5C ; Attributes: bp-based frame
.text$mn:00006C5C
.text$mn:00006C5C ; _DWORD __thiscall Window::Window(Window *__hidden this)
.text$mn:00006C5C                 public ??0Window@@QAE@XZ
.text$mn:00006C5C ??0Window@@QAE@XZ proc near             ; CODE XREF: StaticDialog::StaticDialog(void)+29p
.text$mn:00006C5C
.text$mn:00006C5C var_4           = dword ptr -4
.text$mn:00006C5C
.text$mn:00006C5C                 push    ebp
.text$mn:00006C5D                 mov     ebp, esp
.text$mn:00006C5F                 push    ecx
.text$mn:00006C60                 mov     [ebp+var_4], ecx
.text$mn:00006C63                 mov     eax, [ebp+var_4]
.text$mn:00006C66                 mov     dword ptr [eax], offset ??_7Window@@6B@ ; const Window::`vftable'
.text$mn:00006C6C                 mov     ecx, [ebp+var_4]
.text$mn:00006C6F                 mov     dword ptr [ecx+4], 0
.text$mn:00006C76                 mov     edx, [ebp+var_4]
.text$mn:00006C79                 mov     dword ptr [edx+8], 0
.text$mn:00006C80                 mov     eax, [ebp+var_4]
.text$mn:00006C83                 mov     dword ptr [eax+0Ch], 0
.text$mn:00006C8A                 mov     eax, [ebp+var_4]
.text$mn:00006C8D                 mov     esp, ebp
.text$mn:00006C8F                 pop     ebp
.text$mn:00006C90                 retn
.text$mn:00006C90 ??0Window@@QAE@XZ endp
.text$mn:00006C90
.text$mn:00006C90 ; ---------------------------------------------------------------------------
.text$mn:00006C91                 align 4
.text$mn:00006C91 _text$mn        ends
.text$mn:00006C91
.text$mn:00006C94 ; ===========================================================================
.text$mn:00006C94
.text$mn:00006C94 ; Segment type: Pure code
.text$mn:00006C94 ; Segment permissions: Read/Execute
.text$mn:00006C94 _text$mn        segment para public 'CODE' use32
.text$mn:00006C94                 assume cs:_text$mn
.text$mn:00006C94                 ;org 6C94h
.text$mn:00006C94 ; COMDAT (pick any)
.text$mn:00006C94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C94
.text$mn:00006C94 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C94
.text$mn:00006C94 ; Attributes: bp-based frame
.text$mn:00006C94
.text$mn:00006C94 ; _DWORD __thiscall std::_Container_base12::_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:00006C94                 public ??0_Container_base12@std@@QAE@XZ
.text$mn:00006C94 ??0_Container_base12@std@@QAE@XZ proc near
.text$mn:00006C94                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+29p
.text$mn:00006C94                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+29p ...
.text$mn:00006C94
.text$mn:00006C94 var_4           = dword ptr -4
.text$mn:00006C94
.text$mn:00006C94                 push    ebp
.text$mn:00006C95                 mov     ebp, esp
.text$mn:00006C97                 push    ecx
.text$mn:00006C98                 mov     [ebp+var_4], ecx
.text$mn:00006C9B                 mov     eax, [ebp+var_4]
.text$mn:00006C9E                 mov     dword ptr [eax], 0
.text$mn:00006CA4                 mov     eax, [ebp+var_4]
.text$mn:00006CA7                 mov     esp, ebp
.text$mn:00006CA9                 pop     ebp
.text$mn:00006CAA                 retn
.text$mn:00006CAA ??0_Container_base12@std@@QAE@XZ endp
.text$mn:00006CAA
.text$mn:00006CAA ; ---------------------------------------------------------------------------
.text$mn:00006CAB                 align 4
.text$mn:00006CAB _text$mn        ends
.text$mn:00006CAB
.text$mn:00006CAC ; ===========================================================================
.text$mn:00006CAC
.text$mn:00006CAC ; Segment type: Pure code
.text$mn:00006CAC ; Segment permissions: Read/Execute
.text$mn:00006CAC _text$mn        segment para public 'CODE' use32
.text$mn:00006CAC                 assume cs:_text$mn
.text$mn:00006CAC                 ;org 6CACh
.text$mn:00006CAC ; COMDAT (pick any)
.text$mn:00006CAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006CAC
.text$mn:00006CAC ; =============== S U B R O U T I N E =======================================
.text$mn:00006CAC
.text$mn:00006CAC ; Attributes: bp-based frame
.text$mn:00006CAC
.text$mn:00006CAC ; _DWORD __thiscall std::_Container_proxy::_Container_proxy(std::_Container_proxy *__hidden this)
.text$mn:00006CAC                 public ??0_Container_proxy@std@@QAE@XZ
.text$mn:00006CAC ??0_Container_proxy@std@@QAE@XZ proc near
.text$mn:00006CAC                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+23p
.text$mn:00006CAC                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+23p ...
.text$mn:00006CAC
.text$mn:00006CAC var_4           = dword ptr -4
.text$mn:00006CAC
.text$mn:00006CAC                 push    ebp
.text$mn:00006CAD                 mov     ebp, esp
.text$mn:00006CAF                 push    ecx
.text$mn:00006CB0                 mov     [ebp+var_4], ecx
.text$mn:00006CB3                 mov     eax, [ebp+var_4]
.text$mn:00006CB6                 mov     dword ptr [eax], 0
.text$mn:00006CBC                 mov     ecx, [ebp+var_4]
.text$mn:00006CBF                 mov     dword ptr [ecx+4], 0
.text$mn:00006CC6                 mov     eax, [ebp+var_4]
.text$mn:00006CC9                 mov     esp, ebp
.text$mn:00006CCB                 pop     ebp
.text$mn:00006CCC                 retn
.text$mn:00006CCC ??0_Container_proxy@std@@QAE@XZ endp
.text$mn:00006CCC
.text$mn:00006CCC ; ---------------------------------------------------------------------------
.text$mn:00006CCD                 align 10h
.text$mn:00006CCD _text$mn        ends
.text$mn:00006CCD
.text$mn:00006CD0 ; ===========================================================================
.text$mn:00006CD0
.text$mn:00006CD0 ; Segment type: Pure code
.text$mn:00006CD0 ; Segment permissions: Read/Execute
.text$mn:00006CD0 _text$mn        segment para public 'CODE' use32
.text$mn:00006CD0                 assume cs:_text$mn
.text$mn:00006CD0                 ;org 6CD0h
.text$mn:00006CD0 ; COMDAT (pick any)
.text$mn:00006CD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006CD0
.text$mn:00006CD0 ; =============== S U B R O U T I N E =======================================
.text$mn:00006CD0
.text$mn:00006CD0 ; Attributes: bp-based frame
.text$mn:00006CD0
.text$mn:00006CD0 ; _DWORD __thiscall std::_Generic_error_category::_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:00006CD0                 public ??0_Generic_error_category@std@@QAE@XZ
.text$mn:00006CD0 ??0_Generic_error_category@std@@QAE@XZ proc near
.text$mn:00006CD0                                         ; CODE XREF: std::_Iostream_error_category::_Iostream_error_category(void)+29p
.text$mn:00006CD0                                         ; std::_System_error_category::_System_error_category(void)+29p ...
.text$mn:00006CD0
.text$mn:00006CD0 var_10          = dword ptr -10h
.text$mn:00006CD0 var_C           = dword ptr -0Ch
.text$mn:00006CD0 var_4           = dword ptr -4
.text$mn:00006CD0
.text$mn:00006CD0                 push    ebp
.text$mn:00006CD1                 mov     ebp, esp
.text$mn:00006CD3                 push    0FFFFFFFFh
.text$mn:00006CD5                 push    offset __ehhandler$??0_Generic_error_category@std@@QAE@XZ
.text$mn:00006CDA                 mov     eax, large fs:0
.text$mn:00006CE0                 push    eax
.text$mn:00006CE1                 push    ecx
.text$mn:00006CE2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006CE7                 xor     eax, ebp
.text$mn:00006CE9                 push    eax
.text$mn:00006CEA                 lea     eax, [ebp+var_C]
.text$mn:00006CED                 mov     large fs:0, eax
.text$mn:00006CF3                 mov     [ebp+var_10], ecx
.text$mn:00006CF6                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006CF9                 call    ??0error_category@std@@QAE@XZ ; std::error_category::error_category(void)
.text$mn:00006CFE                 mov     [ebp+var_4], 0
.text$mn:00006D05                 mov     eax, [ebp+var_10]
.text$mn:00006D08                 mov     dword ptr [eax], offset ??_7_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`vftable'
.text$mn:00006D0E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006D15                 mov     eax, [ebp+var_10]
.text$mn:00006D18                 mov     ecx, [ebp+var_C]
.text$mn:00006D1B                 mov     large fs:0, ecx
.text$mn:00006D22                 pop     ecx
.text$mn:00006D23                 mov     esp, ebp
.text$mn:00006D25                 pop     ebp
.text$mn:00006D26                 retn
.text$mn:00006D26 ??0_Generic_error_category@std@@QAE@XZ endp
.text$mn:00006D26
.text$mn:00006D26 ; ---------------------------------------------------------------------------
.text$mn:00006D27                 align 4
.text$mn:00006D27 _text$mn        ends
.text$mn:00006D27
.text$x:00006D28 ; ===========================================================================
.text$x:00006D28
.text$x:00006D28 ; Segment type: Pure code
.text$x:00006D28 ; Segment permissions: Read/Execute
.text$x:00006D28 _text$x         segment para public 'CODE' use32
.text$x:00006D28                 assume cs:_text$x
.text$x:00006D28                 ;org 6D28h
.text$x:00006D28 ; COMDAT (pick associative to section at 6CD0)
.text$x:00006D28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006D28
.text$x:00006D28 ; =============== S U B R O U T I N E =======================================
.text$x:00006D28
.text$x:00006D28
.text$x:00006D28 __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 proc near
.text$x:00006D28                                         ; DATA XREF: .xdata$x:0000C100o
.text$x:00006D28                 mov     ecx, [ebp-10h]  ; this
.text$x:00006D2B                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:00006D2B __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 endp
.text$x:00006D2B
.text$x:00006D30
.text$x:00006D30 ; =============== S U B R O U T I N E =======================================
.text$x:00006D30
.text$x:00006D30
.text$x:00006D30 __ehhandler$??0_Generic_error_category@std@@QAE@XZ proc near
.text$x:00006D30                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+5o
.text$x:00006D30
.text$x:00006D30 arg_4           = dword ptr  8
.text$x:00006D30
.text$x:00006D30                 mov     edx, [esp+arg_4]
.text$x:00006D34                 lea     eax, [edx+0Ch]
.text$x:00006D37                 mov     ecx, [edx-8]
.text$x:00006D3A                 xor     ecx, eax
.text$x:00006D3C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006D41                 mov     eax, offset __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ
.text$x:00006D46                 jmp     ___CxxFrameHandler3
.text$x:00006D46 __ehhandler$??0_Generic_error_category@std@@QAE@XZ endp
.text$x:00006D46
.text$x:00006D46 ; ---------------------------------------------------------------------------
.text$x:00006D4B                 align 4
.text$x:00006D4B _text$x         ends
.text$x:00006D4B
.text$mn:00006D4C ; ===========================================================================
.text$mn:00006D4C
.text$mn:00006D4C ; Segment type: Pure code
.text$mn:00006D4C ; Segment permissions: Read/Execute
.text$mn:00006D4C _text$mn        segment para public 'CODE' use32
.text$mn:00006D4C                 assume cs:_text$mn
.text$mn:00006D4C                 ;org 6D4Ch
.text$mn:00006D4C ; COMDAT (pick any)
.text$mn:00006D4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D4C
.text$mn:00006D4C ; =============== S U B R O U T I N E =======================================
.text$mn:00006D4C
.text$mn:00006D4C ; Attributes: bp-based frame
.text$mn:00006D4C
.text$mn:00006D4C ; _DWORD __thiscall std::_Iostream_error_category::_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:00006D4C                 public ??0_Iostream_error_category@std@@QAE@XZ
.text$mn:00006D4C ??0_Iostream_error_category@std@@QAE@XZ proc near
.text$mn:00006D4C                                         ; CODE XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:00006D4C
.text$mn:00006D4C var_10          = dword ptr -10h
.text$mn:00006D4C var_C           = dword ptr -0Ch
.text$mn:00006D4C var_4           = dword ptr -4
.text$mn:00006D4C
.text$mn:00006D4C                 push    ebp
.text$mn:00006D4D                 mov     ebp, esp
.text$mn:00006D4F                 push    0FFFFFFFFh
.text$mn:00006D51                 push    offset __ehhandler$??0_Iostream_error_category@std@@QAE@XZ
.text$mn:00006D56                 mov     eax, large fs:0
.text$mn:00006D5C                 push    eax
.text$mn:00006D5D                 push    ecx
.text$mn:00006D5E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006D63                 xor     eax, ebp
.text$mn:00006D65                 push    eax
.text$mn:00006D66                 lea     eax, [ebp+var_C]
.text$mn:00006D69                 mov     large fs:0, eax
.text$mn:00006D6F                 mov     [ebp+var_10], ecx
.text$mn:00006D72                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006D75                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:00006D7A                 mov     [ebp+var_4], 0
.text$mn:00006D81                 mov     eax, [ebp+var_10]
.text$mn:00006D84                 mov     dword ptr [eax], offset ??_7_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`vftable'
.text$mn:00006D8A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006D91                 mov     eax, [ebp+var_10]
.text$mn:00006D94                 mov     ecx, [ebp+var_C]
.text$mn:00006D97                 mov     large fs:0, ecx
.text$mn:00006D9E                 pop     ecx
.text$mn:00006D9F                 mov     esp, ebp
.text$mn:00006DA1                 pop     ebp
.text$mn:00006DA2                 retn
.text$mn:00006DA2 ??0_Iostream_error_category@std@@QAE@XZ endp
.text$mn:00006DA2
.text$mn:00006DA2 ; ---------------------------------------------------------------------------
.text$mn:00006DA3                 align 4
.text$mn:00006DA3 _text$mn        ends
.text$mn:00006DA3
.text$x:00006DA4 ; ===========================================================================
.text$x:00006DA4
.text$x:00006DA4 ; Segment type: Pure code
.text$x:00006DA4 ; Segment permissions: Read/Execute
.text$x:00006DA4 _text$x         segment para public 'CODE' use32
.text$x:00006DA4                 assume cs:_text$x
.text$x:00006DA4                 ;org 6DA4h
.text$x:00006DA4 ; COMDAT (pick associative to section at 6D4C)
.text$x:00006DA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006DA4
.text$x:00006DA4 ; =============== S U B R O U T I N E =======================================
.text$x:00006DA4
.text$x:00006DA4
.text$x:00006DA4 __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 proc near
.text$x:00006DA4                                         ; DATA XREF: .xdata$x:0000C184o
.text$x:00006DA4                 mov     ecx, [ebp-10h]  ; this
.text$x:00006DA7                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00006DA7 __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 endp
.text$x:00006DA7
.text$x:00006DAC
.text$x:00006DAC ; =============== S U B R O U T I N E =======================================
.text$x:00006DAC
.text$x:00006DAC
.text$x:00006DAC __ehhandler$??0_Iostream_error_category@std@@QAE@XZ proc near
.text$x:00006DAC                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+5o
.text$x:00006DAC
.text$x:00006DAC arg_4           = dword ptr  8
.text$x:00006DAC
.text$x:00006DAC                 mov     edx, [esp+arg_4]
.text$x:00006DB0                 lea     eax, [edx+0Ch]
.text$x:00006DB3                 mov     ecx, [edx-8]
.text$x:00006DB6                 xor     ecx, eax
.text$x:00006DB8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006DBD                 mov     eax, offset __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ
.text$x:00006DC2                 jmp     ___CxxFrameHandler3
.text$x:00006DC2 __ehhandler$??0_Iostream_error_category@std@@QAE@XZ endp
.text$x:00006DC2
.text$x:00006DC2 ; ---------------------------------------------------------------------------
.text$x:00006DC7                 align 4
.text$x:00006DC7 _text$x         ends
.text$x:00006DC7
.text$mn:00006DC8 ; ===========================================================================
.text$mn:00006DC8
.text$mn:00006DC8 ; Segment type: Pure code
.text$mn:00006DC8 ; Segment permissions: Read/Execute
.text$mn:00006DC8 _text$mn        segment para public 'CODE' use32
.text$mn:00006DC8                 assume cs:_text$mn
.text$mn:00006DC8                 ;org 6DC8h
.text$mn:00006DC8 ; COMDAT (pick any)
.text$mn:00006DC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006DC8
.text$mn:00006DC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006DC8
.text$mn:00006DC8 ; Attributes: bp-based frame
.text$mn:00006DC8
.text$mn:00006DC8 ; _DWORD __thiscall std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 *this, const struct std::_Iterator_base12 *)
.text$mn:00006DC8                 public ??0_Iterator_base12@std@@QAE@ABU01@@Z
.text$mn:00006DC8 ??0_Iterator_base12@std@@QAE@ABU01@@Z proc near
.text$mn:00006DC8                                         ; CODE XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12> const &)+2Dp
.text$mn:00006DC8
.text$mn:00006DC8 var_4           = dword ptr -4
.text$mn:00006DC8 arg_0           = dword ptr  8
.text$mn:00006DC8
.text$mn:00006DC8                 push    ebp
.text$mn:00006DC9                 mov     ebp, esp
.text$mn:00006DCB                 push    ecx
.text$mn:00006DCC                 mov     [ebp+var_4], ecx
.text$mn:00006DCF                 mov     eax, [ebp+var_4]
.text$mn:00006DD2                 mov     dword ptr [eax], 0
.text$mn:00006DD8                 mov     ecx, [ebp+var_4]
.text$mn:00006DDB                 mov     dword ptr [ecx+4], 0
.text$mn:00006DE2                 mov     edx, [ebp+arg_0]
.text$mn:00006DE5                 push    edx
.text$mn:00006DE6                 mov     ecx, [ebp+var_4]
.text$mn:00006DE9                 call    ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)
.text$mn:00006DEE                 mov     eax, [ebp+var_4]
.text$mn:00006DF1                 mov     esp, ebp
.text$mn:00006DF3                 pop     ebp
.text$mn:00006DF4                 retn    4
.text$mn:00006DF4 ??0_Iterator_base12@std@@QAE@ABU01@@Z endp
.text$mn:00006DF4
.text$mn:00006DF4 ; ---------------------------------------------------------------------------
.text$mn:00006DF7                 align 4
.text$mn:00006DF7 _text$mn        ends
.text$mn:00006DF7
.text$mn:00006DF8 ; ===========================================================================
.text$mn:00006DF8
.text$mn:00006DF8 ; Segment type: Pure code
.text$mn:00006DF8 ; Segment permissions: Read/Execute
.text$mn:00006DF8 _text$mn        segment para public 'CODE' use32
.text$mn:00006DF8                 assume cs:_text$mn
.text$mn:00006DF8                 ;org 6DF8h
.text$mn:00006DF8 ; COMDAT (pick any)
.text$mn:00006DF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006DF8
.text$mn:00006DF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006DF8
.text$mn:00006DF8 ; Attributes: bp-based frame
.text$mn:00006DF8
.text$mn:00006DF8 ; _DWORD __thiscall std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 *__hidden this)
.text$mn:00006DF8                 public ??0_Iterator_base12@std@@QAE@XZ
.text$mn:00006DF8 ??0_Iterator_base12@std@@QAE@XZ proc near
.text$mn:00006DF8                                         ; CODE XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)+29p
.text$mn:00006DF8
.text$mn:00006DF8 var_4           = dword ptr -4
.text$mn:00006DF8
.text$mn:00006DF8                 push    ebp
.text$mn:00006DF9                 mov     ebp, esp
.text$mn:00006DFB                 push    ecx
.text$mn:00006DFC                 mov     [ebp+var_4], ecx
.text$mn:00006DFF                 mov     eax, [ebp+var_4]
.text$mn:00006E02                 mov     dword ptr [eax], 0
.text$mn:00006E08                 mov     ecx, [ebp+var_4]
.text$mn:00006E0B                 mov     dword ptr [ecx+4], 0
.text$mn:00006E12                 mov     eax, [ebp+var_4]
.text$mn:00006E15                 mov     esp, ebp
.text$mn:00006E17                 pop     ebp
.text$mn:00006E18                 retn
.text$mn:00006E18 ??0_Iterator_base12@std@@QAE@XZ endp
.text$mn:00006E18
.text$mn:00006E18 ; ---------------------------------------------------------------------------
.text$mn:00006E19                 align 4
.text$mn:00006E19 _text$mn        ends
.text$mn:00006E19
.text$mn:00006E1C ; ===========================================================================
.text$mn:00006E1C
.text$mn:00006E1C ; Segment type: Pure code
.text$mn:00006E1C ; Segment permissions: Read/Execute
.text$mn:00006E1C _text$mn        segment para public 'CODE' use32
.text$mn:00006E1C                 assume cs:_text$mn
.text$mn:00006E1C                 ;org 6E1Ch
.text$mn:00006E1C ; COMDAT (pick any)
.text$mn:00006E1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006E1C
.text$mn:00006E1C ; =============== S U B R O U T I N E =======================================
.text$mn:00006E1C
.text$mn:00006E1C ; Attributes: bp-based frame
.text$mn:00006E1C
.text$mn:00006E1C ; _DWORD __thiscall std::_System_error_category::_System_error_category(std::_System_error_category *__hidden this)
.text$mn:00006E1C                 public ??0_System_error_category@std@@QAE@XZ
.text$mn:00006E1C ??0_System_error_category@std@@QAE@XZ proc near
.text$mn:00006E1C                                         ; CODE XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:00006E1C
.text$mn:00006E1C var_10          = dword ptr -10h
.text$mn:00006E1C var_C           = dword ptr -0Ch
.text$mn:00006E1C var_4           = dword ptr -4
.text$mn:00006E1C
.text$mn:00006E1C                 push    ebp
.text$mn:00006E1D                 mov     ebp, esp
.text$mn:00006E1F                 push    0FFFFFFFFh
.text$mn:00006E21                 push    offset __ehhandler$??0_System_error_category@std@@QAE@XZ
.text$mn:00006E26                 mov     eax, large fs:0
.text$mn:00006E2C                 push    eax
.text$mn:00006E2D                 push    ecx
.text$mn:00006E2E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006E33                 xor     eax, ebp
.text$mn:00006E35                 push    eax
.text$mn:00006E36                 lea     eax, [ebp+var_C]
.text$mn:00006E39                 mov     large fs:0, eax
.text$mn:00006E3F                 mov     [ebp+var_10], ecx
.text$mn:00006E42                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006E45                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:00006E4A                 mov     [ebp+var_4], 0
.text$mn:00006E51                 mov     eax, [ebp+var_10]
.text$mn:00006E54                 mov     dword ptr [eax], offset ??_7_System_error_category@std@@6B@ ; const std::_System_error_category::`vftable'
.text$mn:00006E5A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006E61                 mov     eax, [ebp+var_10]
.text$mn:00006E64                 mov     ecx, [ebp+var_C]
.text$mn:00006E67                 mov     large fs:0, ecx
.text$mn:00006E6E                 pop     ecx
.text$mn:00006E6F                 mov     esp, ebp
.text$mn:00006E71                 pop     ebp
.text$mn:00006E72                 retn
.text$mn:00006E72 ??0_System_error_category@std@@QAE@XZ endp
.text$mn:00006E72
.text$mn:00006E72 ; ---------------------------------------------------------------------------
.text$mn:00006E73                 align 4
.text$mn:00006E73 _text$mn        ends
.text$mn:00006E73
.text$x:00006E74 ; ===========================================================================
.text$x:00006E74
.text$x:00006E74 ; Segment type: Pure code
.text$x:00006E74 ; Segment permissions: Read/Execute
.text$x:00006E74 _text$x         segment para public 'CODE' use32
.text$x:00006E74                 assume cs:_text$x
.text$x:00006E74                 ;org 6E74h
.text$x:00006E74 ; COMDAT (pick associative to section at 6E1C)
.text$x:00006E74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006E74
.text$x:00006E74 ; =============== S U B R O U T I N E =======================================
.text$x:00006E74
.text$x:00006E74
.text$x:00006E74 __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 proc near
.text$x:00006E74                                         ; DATA XREF: .xdata$x:0000C208o
.text$x:00006E74                 mov     ecx, [ebp-10h]  ; this
.text$x:00006E77                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00006E77 __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 endp
.text$x:00006E77
.text$x:00006E7C
.text$x:00006E7C ; =============== S U B R O U T I N E =======================================
.text$x:00006E7C
.text$x:00006E7C
.text$x:00006E7C __ehhandler$??0_System_error_category@std@@QAE@XZ proc near
.text$x:00006E7C                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+5o
.text$x:00006E7C
.text$x:00006E7C arg_4           = dword ptr  8
.text$x:00006E7C
.text$x:00006E7C                 mov     edx, [esp+arg_4]
.text$x:00006E80                 lea     eax, [edx+0Ch]
.text$x:00006E83                 mov     ecx, [edx-8]
.text$x:00006E86                 xor     ecx, eax
.text$x:00006E88                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006E8D                 mov     eax, offset __ehfuncinfo$??0_System_error_category@std@@QAE@XZ
.text$x:00006E92                 jmp     ___CxxFrameHandler3
.text$x:00006E92 __ehhandler$??0_System_error_category@std@@QAE@XZ endp
.text$x:00006E92
.text$x:00006E92 ; ---------------------------------------------------------------------------
.text$x:00006E97                 align 4
.text$x:00006E97 _text$x         ends
.text$x:00006E97
.text$mn:00006E98 ; ===========================================================================
.text$mn:00006E98
.text$mn:00006E98 ; Segment type: Pure code
.text$mn:00006E98 ; Segment permissions: Read/Execute
.text$mn:00006E98 _text$mn        segment para public 'CODE' use32
.text$mn:00006E98                 assume cs:_text$mn
.text$mn:00006E98                 ;org 6E98h
.text$mn:00006E98 ; COMDAT (pick any)
.text$mn:00006E98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006E98
.text$mn:00006E98 ; =============== S U B R O U T I N E =======================================
.text$mn:00006E98
.text$mn:00006E98 ; Attributes: bp-based frame
.text$mn:00006E98
.text$mn:00006E98 ; _DWORD __thiscall std::error_category::error_category(std::error_category *__hidden this)
.text$mn:00006E98                 public ??0error_category@std@@QAE@XZ
.text$mn:00006E98 ??0error_category@std@@QAE@XZ proc near ; CODE XREF: std::_Generic_error_category::_Generic_error_category(void)+29p
.text$mn:00006E98
.text$mn:00006E98 var_4           = dword ptr -4
.text$mn:00006E98
.text$mn:00006E98                 push    ebp
.text$mn:00006E99                 mov     ebp, esp
.text$mn:00006E9B                 push    ecx
.text$mn:00006E9C                 mov     [ebp+var_4], ecx
.text$mn:00006E9F                 mov     eax, [ebp+var_4]
.text$mn:00006EA2                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:00006EA8                 mov     eax, [ebp+var_4]
.text$mn:00006EAB                 mov     esp, ebp
.text$mn:00006EAD                 pop     ebp
.text$mn:00006EAE                 retn
.text$mn:00006EAE ??0error_category@std@@QAE@XZ endp
.text$mn:00006EAE
.text$mn:00006EAE ; ---------------------------------------------------------------------------
.text$mn:00006EAF                 align 10h
.text$mn:00006EAF _text$mn        ends
.text$mn:00006EAF
.text$mn:00006EB0 ; ===========================================================================
.text$mn:00006EB0
.text$mn:00006EB0 ; Segment type: Pure code
.text$mn:00006EB0 ; Segment permissions: Read/Execute
.text$mn:00006EB0 _text$mn        segment para public 'CODE' use32
.text$mn:00006EB0                 assume cs:_text$mn
.text$mn:00006EB0                 ;org 6EB0h
.text$mn:00006EB0 ; COMDAT (pick any)
.text$mn:00006EB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006EB0
.text$mn:00006EB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00006EB0
.text$mn:00006EB0 ; Attributes: bp-based frame
.text$mn:00006EB0
.text$mn:00006EB0 ; _DWORD __thiscall std::error_condition::error_condition(std::error_condition *this, int, const struct std::error_category *)
.text$mn:00006EB0                 public ??0error_condition@std@@QAE@HABVerror_category@1@@Z
.text$mn:00006EB0 ??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
.text$mn:00006EB0                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+24p
.text$mn:00006EB0                                         ; std::_System_error_category::default_error_condition(int)+3Dp ...
.text$mn:00006EB0
.text$mn:00006EB0 var_4           = dword ptr -4
.text$mn:00006EB0 arg_0           = dword ptr  8
.text$mn:00006EB0 arg_4           = dword ptr  0Ch
.text$mn:00006EB0
.text$mn:00006EB0                 push    ebp
.text$mn:00006EB1                 mov     ebp, esp
.text$mn:00006EB3                 push    ecx
.text$mn:00006EB4                 mov     [ebp+var_4], ecx
.text$mn:00006EB7                 mov     eax, [ebp+var_4]
.text$mn:00006EBA                 mov     ecx, [ebp+arg_0]
.text$mn:00006EBD                 mov     [eax], ecx
.text$mn:00006EBF                 mov     edx, [ebp+var_4]
.text$mn:00006EC2                 mov     eax, [ebp+arg_4]
.text$mn:00006EC5                 mov     [edx+4], eax
.text$mn:00006EC8                 mov     eax, [ebp+var_4]
.text$mn:00006ECB                 mov     esp, ebp
.text$mn:00006ECD                 pop     ebp
.text$mn:00006ECE                 retn    8
.text$mn:00006ECE ??0error_condition@std@@QAE@HABVerror_category@1@@Z endp
.text$mn:00006ECE
.text$mn:00006ECE ; ---------------------------------------------------------------------------
.text$mn:00006ED1                 align 4
.text$mn:00006ED1 _text$mn        ends
.text$mn:00006ED1
.text$mn:00006ED4 ; ===========================================================================
.text$mn:00006ED4
.text$mn:00006ED4 ; Segment type: Pure code
.text$mn:00006ED4 ; Segment permissions: Read/Execute
.text$mn:00006ED4 _text$mn        segment para public 'CODE' use32
.text$mn:00006ED4                 assume cs:_text$mn
.text$mn:00006ED4                 ;org 6ED4h
.text$mn:00006ED4 ; COMDAT (pick any)
.text$mn:00006ED4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006ED4
.text$mn:00006ED4 ; =============== S U B R O U T I N E =======================================
.text$mn:00006ED4
.text$mn:00006ED4 ; Attributes: bp-based frame
.text$mn:00006ED4
.text$mn:00006ED4 ; _DWORD __thiscall std::locale::id::id(std::locale::id *this, unsigned int)
.text$mn:00006ED4                 public ??0id@locale@std@@QAE@I@Z
.text$mn:00006ED4 ??0id@locale@std@@QAE@I@Z proc near     ; CODE XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+Ap
.text$mn:00006ED4                                         ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+Ap ...
.text$mn:00006ED4
.text$mn:00006ED4 var_4           = dword ptr -4
.text$mn:00006ED4 arg_0           = dword ptr  8
.text$mn:00006ED4
.text$mn:00006ED4                 push    ebp
.text$mn:00006ED5                 mov     ebp, esp
.text$mn:00006ED7                 push    ecx
.text$mn:00006ED8                 mov     [ebp+var_4], ecx
.text$mn:00006EDB                 mov     eax, [ebp+var_4]
.text$mn:00006EDE                 mov     ecx, [ebp+arg_0]
.text$mn:00006EE1                 mov     [eax], ecx
.text$mn:00006EE3                 mov     eax, [ebp+var_4]
.text$mn:00006EE6                 mov     esp, ebp
.text$mn:00006EE8                 pop     ebp
.text$mn:00006EE9                 retn    4
.text$mn:00006EE9 ??0id@locale@std@@QAE@I@Z endp
.text$mn:00006EE9
.text$mn:00006EE9 _text$mn        ends
.text$mn:00006EE9
.text$mn:00006EEC ; ===========================================================================
.text$mn:00006EEC
.text$mn:00006EEC ; Segment type: Pure code
.text$mn:00006EEC ; Segment permissions: Read/Execute
.text$mn:00006EEC _text$mn        segment para public 'CODE' use32
.text$mn:00006EEC                 assume cs:_text$mn
.text$mn:00006EEC                 ;org 6EECh
.text$mn:00006EEC ; COMDAT (pick any)
.text$mn:00006EEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006EEC
.text$mn:00006EEC ; =============== S U B R O U T I N E =======================================
.text$mn:00006EEC
.text$mn:00006EEC ; Attributes: bp-based frame
.text$mn:00006EEC
.text$mn:00006EEC ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>::~_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>(void)
.text$mn:00006EEC                 public ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00006EEC ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:00006EEC                                         ; CODE XREF: __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0+3j
.text$mn:00006EEC                                         ; __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0+3j ...
.text$mn:00006EEC
.text$mn:00006EEC var_10          = dword ptr -10h
.text$mn:00006EEC var_C           = dword ptr -0Ch
.text$mn:00006EEC var_4           = dword ptr -4
.text$mn:00006EEC
.text$mn:00006EEC                 push    ebp
.text$mn:00006EED                 mov     ebp, esp
.text$mn:00006EEF                 push    0FFFFFFFFh
.text$mn:00006EF1                 push    offset __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00006EF6                 mov     eax, large fs:0
.text$mn:00006EFC                 push    eax
.text$mn:00006EFD                 push    ecx
.text$mn:00006EFE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006F03                 xor     eax, ebp
.text$mn:00006F05                 push    eax
.text$mn:00006F06                 lea     eax, [ebp+var_C]
.text$mn:00006F09                 mov     large fs:0, eax
.text$mn:00006F0F                 mov     [ebp+var_10], ecx
.text$mn:00006F12                 mov     [ebp+var_4], 0
.text$mn:00006F19                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006F20                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006F23                 call    ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$mn:00006F28                 mov     ecx, [ebp+var_C]
.text$mn:00006F2B                 mov     large fs:0, ecx
.text$mn:00006F32                 pop     ecx
.text$mn:00006F33                 mov     esp, ebp
.text$mn:00006F35                 pop     ebp
.text$mn:00006F36                 retn
.text$mn:00006F36 ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00006F36
.text$mn:00006F36 ; ---------------------------------------------------------------------------
.text$mn:00006F37                 align 4
.text$mn:00006F37 _text$mn        ends
.text$mn:00006F37
.text$x:00006F38 ; ===========================================================================
.text$x:00006F38
.text$x:00006F38 ; Segment type: Pure code
.text$x:00006F38 ; Segment permissions: Read/Execute
.text$x:00006F38 _text$x         segment para public 'CODE' use32
.text$x:00006F38                 assume cs:_text$x
.text$x:00006F38                 ;org 6F38h
.text$x:00006F38 ; COMDAT (pick associative to section at 6EEC)
.text$x:00006F38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006F38
.text$x:00006F38 ; =============== S U B R O U T I N E =======================================
.text$x:00006F38
.text$x:00006F38
.text$x:00006F38 __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00006F38                                         ; DATA XREF: .xdata$x:0000CD04o
.text$x:00006F38                 mov     ecx, [ebp-10h]  ; this
.text$x:00006F3B                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00006F3B __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:00006F3B
.text$x:00006F40
.text$x:00006F40 ; =============== S U B R O U T I N E =======================================
.text$x:00006F40
.text$x:00006F40
.text$x:00006F40 __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00006F40                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)+5o
.text$x:00006F40
.text$x:00006F40 arg_4           = dword ptr  8
.text$x:00006F40
.text$x:00006F40                 mov     edx, [esp+arg_4]
.text$x:00006F44                 lea     eax, [edx+0Ch]
.text$x:00006F47                 mov     ecx, [edx-8]
.text$x:00006F4A                 xor     ecx, eax
.text$x:00006F4C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006F51                 mov     eax, offset __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$x:00006F56                 jmp     ___CxxFrameHandler3
.text$x:00006F56 __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:00006F56
.text$x:00006F56 ; ---------------------------------------------------------------------------
.text$x:00006F5B                 align 4
.text$x:00006F5B _text$x         ends
.text$x:00006F5B
.text$mn:00006F5C ; ===========================================================================
.text$mn:00006F5C
.text$mn:00006F5C ; Segment type: Pure code
.text$mn:00006F5C ; Segment permissions: Read/Execute
.text$mn:00006F5C _text$mn        segment para public 'CODE' use32
.text$mn:00006F5C                 assume cs:_text$mn
.text$mn:00006F5C                 ;org 6F5Ch
.text$mn:00006F5C ; COMDAT (pick any)
.text$mn:00006F5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006F5C
.text$mn:00006F5C ; =============== S U B R O U T I N E =======================================
.text$mn:00006F5C
.text$mn:00006F5C ; Attributes: bp-based frame
.text$mn:00006F5C
.text$mn:00006F5C ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::~_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(void)
.text$mn:00006F5C                 public ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:00006F5C ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00006F5C                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0+3j
.text$mn:00006F5C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+43p ...
.text$mn:00006F5C
.text$mn:00006F5C var_10          = dword ptr -10h
.text$mn:00006F5C var_C           = dword ptr -0Ch
.text$mn:00006F5C var_4           = dword ptr -4
.text$mn:00006F5C
.text$mn:00006F5C                 push    ebp
.text$mn:00006F5D                 mov     ebp, esp
.text$mn:00006F5F                 push    0FFFFFFFFh
.text$mn:00006F61                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:00006F66                 mov     eax, large fs:0
.text$mn:00006F6C                 push    eax
.text$mn:00006F6D                 push    ecx
.text$mn:00006F6E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006F73                 xor     eax, ebp
.text$mn:00006F75                 push    eax
.text$mn:00006F76                 lea     eax, [ebp+var_C]
.text$mn:00006F79                 mov     large fs:0, eax
.text$mn:00006F7F                 mov     [ebp+var_10], ecx
.text$mn:00006F82                 mov     [ebp+var_4], 0
.text$mn:00006F89                 mov     ecx, [ebp+var_10]
.text$mn:00006F8C                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)
.text$mn:00006F91                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006F98                 mov     ecx, [ebp+var_10]
.text$mn:00006F9B                 call    ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$mn:00006FA0                 mov     ecx, [ebp+var_C]
.text$mn:00006FA3                 mov     large fs:0, ecx
.text$mn:00006FAA                 pop     ecx
.text$mn:00006FAB                 mov     esp, ebp
.text$mn:00006FAD                 pop     ebp
.text$mn:00006FAE                 retn
.text$mn:00006FAE ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$mn:00006FAE
.text$mn:00006FAE ; ---------------------------------------------------------------------------
.text$mn:00006FAF                 align 10h
.text$mn:00006FAF _text$mn        ends
.text$mn:00006FAF
.text$x:00006FB0 ; ===========================================================================
.text$x:00006FB0
.text$x:00006FB0 ; Segment type: Pure code
.text$x:00006FB0 ; Segment permissions: Read/Execute
.text$x:00006FB0 _text$x         segment para public 'CODE' use32
.text$x:00006FB0                 assume cs:_text$x
.text$x:00006FB0                 ;org 6FB0h
.text$x:00006FB0 ; COMDAT (pick associative to section at 6F5C)
.text$x:00006FB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006FB0
.text$x:00006FB0 ; =============== S U B R O U T I N E =======================================
.text$x:00006FB0
.text$x:00006FB0
.text$x:00006FB0 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00006FB0                                         ; DATA XREF: .xdata$x:0000BFF0o
.text$x:00006FB0                 mov     ecx, [ebp-10h]
.text$x:00006FB3                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:00006FB3 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00006FB3
.text$x:00006FB8
.text$x:00006FB8 ; =============== S U B R O U T I N E =======================================
.text$x:00006FB8
.text$x:00006FB8
.text$x:00006FB8 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$x:00006FB8                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+5o
.text$x:00006FB8
.text$x:00006FB8 arg_4           = dword ptr  8
.text$x:00006FB8
.text$x:00006FB8                 mov     edx, [esp+arg_4]
.text$x:00006FBC                 lea     eax, [edx+0Ch]
.text$x:00006FBF                 mov     ecx, [edx-8]
.text$x:00006FC2                 xor     ecx, eax
.text$x:00006FC4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006FC9                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$x:00006FCE                 jmp     ___CxxFrameHandler3
.text$x:00006FCE __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$x:00006FCE
.text$x:00006FCE ; ---------------------------------------------------------------------------
.text$x:00006FD3                 align 4
.text$x:00006FD3 _text$x         ends
.text$x:00006FD3
.text$mn:00006FD4 ; ===========================================================================
.text$mn:00006FD4
.text$mn:00006FD4 ; Segment type: Pure code
.text$mn:00006FD4 ; Segment permissions: Read/Execute
.text$mn:00006FD4 _text$mn        segment para public 'CODE' use32
.text$mn:00006FD4                 assume cs:_text$mn
.text$mn:00006FD4                 ;org 6FD4h
.text$mn:00006FD4 ; COMDAT (pick any)
.text$mn:00006FD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006FD4
.text$mn:00006FD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00006FD4
.text$mn:00006FD4 ; Attributes: bp-based frame
.text$mn:00006FD4
.text$mn:00006FD4 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::~_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(void)
.text$mn:00006FD4                 public ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00006FD4 ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00006FD4                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0+3j
.text$mn:00006FD4                                         ; __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0+3j ...
.text$mn:00006FD4
.text$mn:00006FD4 var_10          = dword ptr -10h
.text$mn:00006FD4 var_C           = dword ptr -0Ch
.text$mn:00006FD4 var_4           = dword ptr -4
.text$mn:00006FD4
.text$mn:00006FD4                 push    ebp
.text$mn:00006FD5                 mov     ebp, esp
.text$mn:00006FD7                 push    0FFFFFFFFh
.text$mn:00006FD9                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00006FDE                 mov     eax, large fs:0
.text$mn:00006FE4                 push    eax
.text$mn:00006FE5                 push    ecx
.text$mn:00006FE6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006FEB                 xor     eax, ebp
.text$mn:00006FED                 push    eax
.text$mn:00006FEE                 lea     eax, [ebp+var_C]
.text$mn:00006FF1                 mov     large fs:0, eax
.text$mn:00006FF7                 mov     [ebp+var_10], ecx
.text$mn:00006FFA                 mov     [ebp+var_4], 0
.text$mn:00007001                 mov     ecx, [ebp+var_10]
.text$mn:00007004                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:00007009                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007010                 mov     ecx, [ebp+var_10]
.text$mn:00007013                 call    ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:00007018                 mov     ecx, [ebp+var_C]
.text$mn:0000701B                 mov     large fs:0, ecx
.text$mn:00007022                 pop     ecx
.text$mn:00007023                 mov     esp, ebp
.text$mn:00007025                 pop     ebp
.text$mn:00007026                 retn
.text$mn:00007026 ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:00007026
.text$mn:00007026 ; ---------------------------------------------------------------------------
.text$mn:00007027                 align 4
.text$mn:00007027 _text$mn        ends
.text$mn:00007027
.text$x:00007028 ; ===========================================================================
.text$x:00007028
.text$x:00007028 ; Segment type: Pure code
.text$x:00007028 ; Segment permissions: Read/Execute
.text$x:00007028 _text$x         segment para public 'CODE' use32
.text$x:00007028                 assume cs:_text$x
.text$x:00007028                 ;org 7028h
.text$x:00007028 ; COMDAT (pick associative to section at 6FD4)
.text$x:00007028                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007028
.text$x:00007028 ; =============== S U B R O U T I N E =======================================
.text$x:00007028
.text$x:00007028
.text$x:00007028 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00007028                                         ; DATA XREF: .xdata$x:0000C310o
.text$x:00007028                 mov     ecx, [ebp-10h]
.text$x:0000702B                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:0000702B __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:0000702B
.text$x:00007030
.text$x:00007030 ; =============== S U B R O U T I N E =======================================
.text$x:00007030
.text$x:00007030
.text$x:00007030 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:00007030                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+5o
.text$x:00007030
.text$x:00007030 arg_4           = dword ptr  8
.text$x:00007030
.text$x:00007030                 mov     edx, [esp+arg_4]
.text$x:00007034                 lea     eax, [edx+0Ch]
.text$x:00007037                 mov     ecx, [edx-8]
.text$x:0000703A                 xor     ecx, eax
.text$x:0000703C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007041                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$x:00007046                 jmp     ___CxxFrameHandler3
.text$x:00007046 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:00007046
.text$x:00007046 ; ---------------------------------------------------------------------------
.text$x:0000704B                 align 4
.text$x:0000704B _text$x         ends
.text$x:0000704B
.text$mn:0000704C ; ===========================================================================
.text$mn:0000704C
.text$mn:0000704C ; Segment type: Pure code
.text$mn:0000704C ; Segment permissions: Read/Execute
.text$mn:0000704C _text$mn        segment para public 'CODE' use32
.text$mn:0000704C                 assume cs:_text$mn
.text$mn:0000704C                 ;org 704Ch
.text$mn:0000704C ; COMDAT (pick any)
.text$mn:0000704C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000704C
.text$mn:0000704C ; =============== S U B R O U T I N E =======================================
.text$mn:0000704C
.text$mn:0000704C ; Attributes: bp-based frame
.text$mn:0000704C
.text$mn:0000704C ; public: __thiscall std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::~_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>(void)
.text$mn:0000704C                 public ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:0000704C ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:0000704C                                         ; CODE XREF: __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5+3j
.text$mn:0000704C                                         ; __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7+3j ...
.text$mn:0000704C
.text$mn:0000704C var_10          = dword ptr -10h
.text$mn:0000704C var_C           = dword ptr -0Ch
.text$mn:0000704C var_4           = dword ptr -4
.text$mn:0000704C
.text$mn:0000704C                 push    ebp
.text$mn:0000704D                 mov     ebp, esp
.text$mn:0000704F                 push    0FFFFFFFFh
.text$mn:00007051                 push    offset __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00007056                 mov     eax, large fs:0
.text$mn:0000705C                 push    eax
.text$mn:0000705D                 push    ecx
.text$mn:0000705E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007063                 xor     eax, ebp
.text$mn:00007065                 push    eax
.text$mn:00007066                 lea     eax, [ebp+var_C]
.text$mn:00007069                 mov     large fs:0, eax
.text$mn:0000706F                 mov     [ebp+var_10], ecx
.text$mn:00007072                 mov     [ebp+var_4], 0
.text$mn:00007079                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007080                 mov     ecx, [ebp+var_10]
.text$mn:00007083                 call    ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$mn:00007088                 mov     ecx, [ebp+var_C]
.text$mn:0000708B                 mov     large fs:0, ecx
.text$mn:00007092                 pop     ecx
.text$mn:00007093                 mov     esp, ebp
.text$mn:00007095                 pop     ebp
.text$mn:00007096                 retn
.text$mn:00007096 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:00007096
.text$mn:00007096 ; ---------------------------------------------------------------------------
.text$mn:00007097                 align 4
.text$mn:00007097 _text$mn        ends
.text$mn:00007097
.text$x:00007098 ; ===========================================================================
.text$x:00007098
.text$x:00007098 ; Segment type: Pure code
.text$x:00007098 ; Segment permissions: Read/Execute
.text$x:00007098 _text$x         segment para public 'CODE' use32
.text$x:00007098                 assume cs:_text$x
.text$x:00007098                 ;org 7098h
.text$x:00007098 ; COMDAT (pick associative to section at 704C)
.text$x:00007098                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007098
.text$x:00007098 ; =============== S U B R O U T I N E =======================================
.text$x:00007098
.text$x:00007098
.text$x:00007098 __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00007098                                         ; DATA XREF: .xdata$x:0000CD88o
.text$x:00007098                 mov     ecx, [ebp-10h]
.text$x:0000709B                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$x:0000709B __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:0000709B
.text$x:000070A0
.text$x:000070A0 ; =============== S U B R O U T I N E =======================================
.text$x:000070A0
.text$x:000070A0
.text$x:000070A0 __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:000070A0                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)+5o
.text$x:000070A0
.text$x:000070A0 arg_4           = dword ptr  8
.text$x:000070A0
.text$x:000070A0                 mov     edx, [esp+arg_4]
.text$x:000070A4                 lea     eax, [edx+0Ch]
.text$x:000070A7                 mov     ecx, [edx-8]
.text$x:000070AA                 xor     ecx, eax
.text$x:000070AC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000070B1                 mov     eax, offset __ehfuncinfo$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$x:000070B6                 jmp     ___CxxFrameHandler3
.text$x:000070B6 __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:000070B6
.text$x:000070B6 ; ---------------------------------------------------------------------------
.text$x:000070BB                 align 4
.text$x:000070BB _text$x         ends
.text$x:000070BB
.text$mn:000070BC ; ===========================================================================
.text$mn:000070BC
.text$mn:000070BC ; Segment type: Pure code
.text$mn:000070BC ; Segment permissions: Read/Execute
.text$mn:000070BC _text$mn        segment para public 'CODE' use32
.text$mn:000070BC                 assume cs:_text$mn
.text$mn:000070BC                 ;org 70BCh
.text$mn:000070BC ; COMDAT (pick any)
.text$mn:000070BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000070BC
.text$mn:000070BC ; =============== S U B R O U T I N E =======================================
.text$mn:000070BC
.text$mn:000070BC ; Attributes: bp-based frame
.text$mn:000070BC
.text$mn:000070BC ; public: __thiscall std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::~_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>(void)
.text$mn:000070BC                 public ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:000070BC ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:000070BC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+F5p
.text$mn:000070BC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+101p ...
.text$mn:000070BC
.text$mn:000070BC var_10          = dword ptr -10h
.text$mn:000070BC var_C           = dword ptr -0Ch
.text$mn:000070BC var_4           = dword ptr -4
.text$mn:000070BC
.text$mn:000070BC                 push    ebp
.text$mn:000070BD                 mov     ebp, esp
.text$mn:000070BF                 push    0FFFFFFFFh
.text$mn:000070C1                 push    offset __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:000070C6                 mov     eax, large fs:0
.text$mn:000070CC                 push    eax
.text$mn:000070CD                 push    ecx
.text$mn:000070CE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000070D3                 xor     eax, ebp
.text$mn:000070D5                 push    eax
.text$mn:000070D6                 lea     eax, [ebp+var_C]
.text$mn:000070D9                 mov     large fs:0, eax
.text$mn:000070DF                 mov     [ebp+var_10], ecx
.text$mn:000070E2                 mov     [ebp+var_4], 0
.text$mn:000070E9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000070F0                 mov     ecx, [ebp+var_10]
.text$mn:000070F3                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:000070F8                 mov     ecx, [ebp+var_C]
.text$mn:000070FB                 mov     large fs:0, ecx
.text$mn:00007102                 pop     ecx
.text$mn:00007103                 mov     esp, ebp
.text$mn:00007105                 pop     ebp
.text$mn:00007106                 retn
.text$mn:00007106 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:00007106
.text$mn:00007106 ; ---------------------------------------------------------------------------
.text$mn:00007107                 align 4
.text$mn:00007107 _text$mn        ends
.text$mn:00007107
.text$x:00007108 ; ===========================================================================
.text$x:00007108
.text$x:00007108 ; Segment type: Pure code
.text$x:00007108 ; Segment permissions: Read/Execute
.text$x:00007108 _text$x         segment para public 'CODE' use32
.text$x:00007108                 assume cs:_text$x
.text$x:00007108                 ;org 7108h
.text$x:00007108 ; COMDAT (pick associative to section at 70BC)
.text$x:00007108                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007108
.text$x:00007108 ; =============== S U B R O U T I N E =======================================
.text$x:00007108
.text$x:00007108
.text$x:00007108 __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00007108                                         ; DATA XREF: .xdata$x:0000CE38o
.text$x:00007108                 mov     ecx, [ebp-10h]
.text$x:0000710B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000710B __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:0000710B
.text$x:00007110
.text$x:00007110 ; =============== S U B R O U T I N E =======================================
.text$x:00007110
.text$x:00007110
.text$x:00007110 __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:00007110                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)+5o
.text$x:00007110
.text$x:00007110 arg_4           = dword ptr  8
.text$x:00007110
.text$x:00007110                 mov     edx, [esp+arg_4]
.text$x:00007114                 lea     eax, [edx+0Ch]
.text$x:00007117                 mov     ecx, [edx-8]
.text$x:0000711A                 xor     ecx, eax
.text$x:0000711C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007121                 mov     eax, offset __ehfuncinfo$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$x:00007126                 jmp     ___CxxFrameHandler3
.text$x:00007126 __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:00007126
.text$x:00007126 ; ---------------------------------------------------------------------------
.text$x:0000712B                 align 4
.text$x:0000712B _text$x         ends
.text$x:0000712B
.text$mn:0000712C ; ===========================================================================
.text$mn:0000712C
.text$mn:0000712C ; Segment type: Pure code
.text$mn:0000712C ; Segment permissions: Read/Execute
.text$mn:0000712C _text$mn        segment para public 'CODE' use32
.text$mn:0000712C                 assume cs:_text$mn
.text$mn:0000712C                 ;org 712Ch
.text$mn:0000712C ; COMDAT (pick any)
.text$mn:0000712C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000712C
.text$mn:0000712C ; =============== S U B R O U T I N E =======================================
.text$mn:0000712C
.text$mn:0000712C ; Attributes: bp-based frame
.text$mn:0000712C
.text$mn:0000712C ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::~_String_val<struct std::_Simple_types<char>>(void)
.text$mn:0000712C                 public ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:0000712C ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:0000712C                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0+3j
.text$mn:0000712C                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+3Fp ...
.text$mn:0000712C
.text$mn:0000712C var_10          = dword ptr -10h
.text$mn:0000712C var_C           = dword ptr -0Ch
.text$mn:0000712C var_4           = dword ptr -4
.text$mn:0000712C
.text$mn:0000712C                 push    ebp
.text$mn:0000712D                 mov     ebp, esp
.text$mn:0000712F                 push    0FFFFFFFFh
.text$mn:00007131                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00007136                 mov     eax, large fs:0
.text$mn:0000713C                 push    eax
.text$mn:0000713D                 push    ecx
.text$mn:0000713E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007143                 xor     eax, ebp
.text$mn:00007145                 push    eax
.text$mn:00007146                 lea     eax, [ebp+var_C]
.text$mn:00007149                 mov     large fs:0, eax
.text$mn:0000714F                 mov     [ebp+var_10], ecx
.text$mn:00007152                 mov     [ebp+var_4], 0
.text$mn:00007159                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007160                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007163                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00007168                 mov     ecx, [ebp+var_C]
.text$mn:0000716B                 mov     large fs:0, ecx
.text$mn:00007172                 pop     ecx
.text$mn:00007173                 mov     esp, ebp
.text$mn:00007175                 pop     ebp
.text$mn:00007176                 retn
.text$mn:00007176 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:00007176
.text$mn:00007176 ; ---------------------------------------------------------------------------
.text$mn:00007177                 align 4
.text$mn:00007177 _text$mn        ends
.text$mn:00007177
.text$x:00007178 ; ===========================================================================
.text$x:00007178
.text$x:00007178 ; Segment type: Pure code
.text$x:00007178 ; Segment permissions: Read/Execute
.text$x:00007178 _text$x         segment para public 'CODE' use32
.text$x:00007178                 assume cs:_text$x
.text$x:00007178                 ;org 7178h
.text$x:00007178 ; COMDAT (pick associative to section at 712C)
.text$x:00007178                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007178
.text$x:00007178 ; =============== S U B R O U T I N E =======================================
.text$x:00007178
.text$x:00007178
.text$x:00007178 __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:00007178                                         ; DATA XREF: .xdata$x:0000BF98o
.text$x:00007178                 mov     ecx, [ebp-10h]  ; this
.text$x:0000717B                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:0000717B __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:0000717B
.text$x:00007180
.text$x:00007180 ; =============== S U B R O U T I N E =======================================
.text$x:00007180
.text$x:00007180
.text$x:00007180 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:00007180                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)+5o
.text$x:00007180
.text$x:00007180 arg_4           = dword ptr  8
.text$x:00007180
.text$x:00007180                 mov     edx, [esp+arg_4]
.text$x:00007184                 lea     eax, [edx+0Ch]
.text$x:00007187                 mov     ecx, [edx-8]
.text$x:0000718A                 xor     ecx, eax
.text$x:0000718C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007191                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:00007196                 jmp     ___CxxFrameHandler3
.text$x:00007196 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:00007196
.text$x:00007196 ; ---------------------------------------------------------------------------
.text$x:0000719B                 align 4
.text$x:0000719B _text$x         ends
.text$x:0000719B
.text$mn:0000719C ; ===========================================================================
.text$mn:0000719C
.text$mn:0000719C ; Segment type: Pure code
.text$mn:0000719C ; Segment permissions: Read/Execute
.text$mn:0000719C _text$mn        segment para public 'CODE' use32
.text$mn:0000719C                 assume cs:_text$mn
.text$mn:0000719C                 ;org 719Ch
.text$mn:0000719C ; COMDAT (pick any)
.text$mn:0000719C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000719C
.text$mn:0000719C ; =============== S U B R O U T I N E =======================================
.text$mn:0000719C
.text$mn:0000719C ; Attributes: bp-based frame
.text$mn:0000719C
.text$mn:0000719C ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::~_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:0000719C                 public ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:0000719C ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:0000719C                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0+3j
.text$mn:0000719C                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+3Fp ...
.text$mn:0000719C
.text$mn:0000719C var_10          = dword ptr -10h
.text$mn:0000719C var_C           = dword ptr -0Ch
.text$mn:0000719C var_4           = dword ptr -4
.text$mn:0000719C
.text$mn:0000719C                 push    ebp
.text$mn:0000719D                 mov     ebp, esp
.text$mn:0000719F                 push    0FFFFFFFFh
.text$mn:000071A1                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000071A6                 mov     eax, large fs:0
.text$mn:000071AC                 push    eax
.text$mn:000071AD                 push    ecx
.text$mn:000071AE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000071B3                 xor     eax, ebp
.text$mn:000071B5                 push    eax
.text$mn:000071B6                 lea     eax, [ebp+var_C]
.text$mn:000071B9                 mov     large fs:0, eax
.text$mn:000071BF                 mov     [ebp+var_10], ecx
.text$mn:000071C2                 mov     [ebp+var_4], 0
.text$mn:000071C9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000071D0                 mov     ecx, [ebp+var_10] ; this
.text$mn:000071D3                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:000071D8                 mov     ecx, [ebp+var_C]
.text$mn:000071DB                 mov     large fs:0, ecx
.text$mn:000071E2                 pop     ecx
.text$mn:000071E3                 mov     esp, ebp
.text$mn:000071E5                 pop     ebp
.text$mn:000071E6                 retn
.text$mn:000071E6 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:000071E6
.text$mn:000071E6 ; ---------------------------------------------------------------------------
.text$mn:000071E7                 align 4
.text$mn:000071E7 _text$mn        ends
.text$mn:000071E7
.text$x:000071E8 ; ===========================================================================
.text$x:000071E8
.text$x:000071E8 ; Segment type: Pure code
.text$x:000071E8 ; Segment permissions: Read/Execute
.text$x:000071E8 _text$x         segment para public 'CODE' use32
.text$x:000071E8                 assume cs:_text$x
.text$x:000071E8                 ;org 71E8h
.text$x:000071E8 ; COMDAT (pick associative to section at 719C)
.text$x:000071E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000071E8
.text$x:000071E8 ; =============== S U B R O U T I N E =======================================
.text$x:000071E8
.text$x:000071E8
.text$x:000071E8 __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:000071E8                                         ; DATA XREF: .xdata$x:0000C2B8o
.text$x:000071E8                 mov     ecx, [ebp-10h]  ; this
.text$x:000071EB                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:000071EB __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:000071EB
.text$x:000071F0
.text$x:000071F0 ; =============== S U B R O U T I N E =======================================
.text$x:000071F0
.text$x:000071F0
.text$x:000071F0 __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:000071F0                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:000071F0
.text$x:000071F0 arg_4           = dword ptr  8
.text$x:000071F0
.text$x:000071F0                 mov     edx, [esp+arg_4]
.text$x:000071F4                 lea     eax, [edx+0Ch]
.text$x:000071F7                 mov     ecx, [edx-8]
.text$x:000071FA                 xor     ecx, eax
.text$x:000071FC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007201                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:00007206                 jmp     ___CxxFrameHandler3
.text$x:00007206 __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:00007206
.text$x:00007206 ; ---------------------------------------------------------------------------
.text$x:0000720B                 align 4
.text$x:0000720B _text$x         ends
.text$x:0000720B
.text$mn:0000720C ; ===========================================================================
.text$mn:0000720C
.text$mn:0000720C ; Segment type: Pure code
.text$mn:0000720C ; Segment permissions: Read/Execute
.text$mn:0000720C _text$mn        segment para public 'CODE' use32
.text$mn:0000720C                 assume cs:_text$mn
.text$mn:0000720C                 ;org 720Ch
.text$mn:0000720C ; COMDAT (pick any)
.text$mn:0000720C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000720C
.text$mn:0000720C ; =============== S U B R O U T I N E =======================================
.text$mn:0000720C
.text$mn:0000720C ; Attributes: bp-based frame
.text$mn:0000720C
.text$mn:0000720C ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::~_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(void)
.text$mn:0000720C                 public ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.text$mn:0000720C ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ proc near
.text$mn:0000720C                                         ; CODE XREF: __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0+3j
.text$mn:0000720C                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+3Fp ...
.text$mn:0000720C
.text$mn:0000720C var_10          = dword ptr -10h
.text$mn:0000720C var_C           = dword ptr -0Ch
.text$mn:0000720C var_4           = dword ptr -4
.text$mn:0000720C
.text$mn:0000720C                 push    ebp
.text$mn:0000720D                 mov     ebp, esp
.text$mn:0000720F                 push    0FFFFFFFFh
.text$mn:00007211                 push    offset __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.text$mn:00007216                 mov     eax, large fs:0
.text$mn:0000721C                 push    eax
.text$mn:0000721D                 push    ecx
.text$mn:0000721E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007223                 xor     eax, ebp
.text$mn:00007225                 push    eax
.text$mn:00007226                 lea     eax, [ebp+var_C]
.text$mn:00007229                 mov     large fs:0, eax
.text$mn:0000722F                 mov     [ebp+var_10], ecx
.text$mn:00007232                 mov     [ebp+var_4], 0
.text$mn:00007239                 mov     ecx, [ebp+var_10]
.text$mn:0000723C                 call    ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Free_proxy(void)
.text$mn:00007241                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007248                 mov     ecx, [ebp+var_10]
.text$mn:0000724B                 call    ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00007250                 mov     ecx, [ebp+var_C]
.text$mn:00007253                 mov     large fs:0, ecx
.text$mn:0000725A                 pop     ecx
.text$mn:0000725B                 mov     esp, ebp
.text$mn:0000725D                 pop     ebp
.text$mn:0000725E                 retn
.text$mn:0000725E ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ endp
.text$mn:0000725E
.text$mn:0000725E ; ---------------------------------------------------------------------------
.text$mn:0000725F                 align 10h
.text$mn:0000725F _text$mn        ends
.text$mn:0000725F
.text$x:00007260 ; ===========================================================================
.text$x:00007260
.text$x:00007260 ; Segment type: Pure code
.text$x:00007260 ; Segment permissions: Read/Execute
.text$x:00007260 _text$x         segment para public 'CODE' use32
.text$x:00007260                 assume cs:_text$x
.text$x:00007260                 ;org 7260h
.text$x:00007260 ; COMDAT (pick associative to section at 720C)
.text$x:00007260                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007260
.text$x:00007260 ; =============== S U B R O U T I N E =======================================
.text$x:00007260
.text$x:00007260
.text$x:00007260 __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ$0 proc near
.text$x:00007260                                         ; DATA XREF: .xdata$x:0000CBD0o
.text$x:00007260                 mov     ecx, [ebp-10h]
.text$x:00007263                 jmp     ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00007263 __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ$0 endp
.text$x:00007263
.text$x:00007268
.text$x:00007268 ; =============== S U B R O U T I N E =======================================
.text$x:00007268
.text$x:00007268
.text$x:00007268 __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ proc near
.text$x:00007268                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+5o
.text$x:00007268
.text$x:00007268 arg_4           = dword ptr  8
.text$x:00007268
.text$x:00007268                 mov     edx, [esp+arg_4]
.text$x:0000726C                 lea     eax, [edx+0Ch]
.text$x:0000726F                 mov     ecx, [edx-8]
.text$x:00007272                 xor     ecx, eax
.text$x:00007274                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007279                 mov     eax, offset __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.text$x:0000727E                 jmp     ___CxxFrameHandler3
.text$x:0000727E __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ endp
.text$x:0000727E
.text$x:0000727E ; ---------------------------------------------------------------------------
.text$x:00007283                 align 4
.text$x:00007283 _text$x         ends
.text$x:00007283
.text$mn:00007284 ; ===========================================================================
.text$mn:00007284
.text$mn:00007284 ; Segment type: Pure code
.text$mn:00007284 ; Segment permissions: Read/Execute
.text$mn:00007284 _text$mn        segment para public 'CODE' use32
.text$mn:00007284                 assume cs:_text$mn
.text$mn:00007284                 ;org 7284h
.text$mn:00007284 ; COMDAT (pick any)
.text$mn:00007284                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007284
.text$mn:00007284 ; =============== S U B R O U T I N E =======================================
.text$mn:00007284
.text$mn:00007284 ; Attributes: bp-based frame
.text$mn:00007284
.text$mn:00007284 ; public: __thiscall std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::~_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:00007284                 public ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:00007284 ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00007284                                         ; CODE XREF: __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0+3j
.text$mn:00007284                                         ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+3Fp ...
.text$mn:00007284
.text$mn:00007284 var_10          = dword ptr -10h
.text$mn:00007284 var_C           = dword ptr -0Ch
.text$mn:00007284 var_4           = dword ptr -4
.text$mn:00007284
.text$mn:00007284                 push    ebp
.text$mn:00007285                 mov     ebp, esp
.text$mn:00007287                 push    0FFFFFFFFh
.text$mn:00007289                 push    offset __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:0000728E                 mov     eax, large fs:0
.text$mn:00007294                 push    eax
.text$mn:00007295                 push    ecx
.text$mn:00007296                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000729B                 xor     eax, ebp
.text$mn:0000729D                 push    eax
.text$mn:0000729E                 lea     eax, [ebp+var_C]
.text$mn:000072A1                 mov     large fs:0, eax
.text$mn:000072A7                 mov     [ebp+var_10], ecx
.text$mn:000072AA                 mov     [ebp+var_4], 0
.text$mn:000072B1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000072B8                 mov     ecx, [ebp+var_10] ; this
.text$mn:000072BB                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:000072C0                 mov     ecx, [ebp+var_C]
.text$mn:000072C3                 mov     large fs:0, ecx
.text$mn:000072CA                 pop     ecx
.text$mn:000072CB                 mov     esp, ebp
.text$mn:000072CD                 pop     ebp
.text$mn:000072CE                 retn
.text$mn:000072CE ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$mn:000072CE
.text$mn:000072CE ; ---------------------------------------------------------------------------
.text$mn:000072CF                 align 10h
.text$mn:000072CF _text$mn        ends
.text$mn:000072CF
.text$x:000072D0 ; ===========================================================================
.text$x:000072D0
.text$x:000072D0 ; Segment type: Pure code
.text$x:000072D0 ; Segment permissions: Read/Execute
.text$x:000072D0 _text$x         segment para public 'CODE' use32
.text$x:000072D0                 assume cs:_text$x
.text$x:000072D0                 ;org 72D0h
.text$x:000072D0 ; COMDAT (pick associative to section at 7284)
.text$x:000072D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000072D0
.text$x:000072D0 ; =============== S U B R O U T I N E =======================================
.text$x:000072D0
.text$x:000072D0
.text$x:000072D0 __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:000072D0                                         ; DATA XREF: .xdata$x:0000CB78o
.text$x:000072D0                 mov     ecx, [ebp-10h]  ; this
.text$x:000072D3                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:000072D3 __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:000072D3
.text$x:000072D8
.text$x:000072D8 ; =============== S U B R O U T I N E =======================================
.text$x:000072D8
.text$x:000072D8
.text$x:000072D8 __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$x:000072D8                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:000072D8
.text$x:000072D8 arg_4           = dword ptr  8
.text$x:000072D8
.text$x:000072D8                 mov     edx, [esp+arg_4]
.text$x:000072DC                 lea     eax, [edx+0Ch]
.text$x:000072DF                 mov     ecx, [edx-8]
.text$x:000072E2                 xor     ecx, eax
.text$x:000072E4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000072E9                 mov     eax, offset __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$x:000072EE                 jmp     ___CxxFrameHandler3
.text$x:000072EE __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$x:000072EE
.text$x:000072EE ; ---------------------------------------------------------------------------
.text$x:000072F3                 align 4
.text$x:000072F3 _text$x         ends
.text$x:000072F3
.text$mn:000072F4 ; ===========================================================================
.text$mn:000072F4
.text$mn:000072F4 ; Segment type: Pure code
.text$mn:000072F4 ; Segment permissions: Read/Execute
.text$mn:000072F4 _text$mn        segment para public 'CODE' use32
.text$mn:000072F4                 assume cs:_text$mn
.text$mn:000072F4                 ;org 72F4h
.text$mn:000072F4 ; COMDAT (pick any)
.text$mn:000072F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000072F4
.text$mn:000072F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000072F4
.text$mn:000072F4 ; Attributes: bp-based frame
.text$mn:000072F4
.text$mn:000072F4 ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::~basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
.text$mn:000072F4                 public ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:000072F4 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$mn:000072F4                                         ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+13j
.text$mn:000072F4                                         ; __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+13j ...
.text$mn:000072F4
.text$mn:000072F4 var_10          = dword ptr -10h
.text$mn:000072F4 var_C           = dword ptr -0Ch
.text$mn:000072F4 var_4           = dword ptr -4
.text$mn:000072F4
.text$mn:000072F4                 push    ebp
.text$mn:000072F5                 mov     ebp, esp
.text$mn:000072F7                 push    0FFFFFFFFh
.text$mn:000072F9                 push    offset __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:000072FE                 mov     eax, large fs:0
.text$mn:00007304                 push    eax
.text$mn:00007305                 push    ecx
.text$mn:00007306                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000730B                 xor     eax, ebp
.text$mn:0000730D                 push    eax
.text$mn:0000730E                 lea     eax, [ebp+var_C]
.text$mn:00007311                 mov     large fs:0, eax
.text$mn:00007317                 mov     [ebp+var_10], ecx
.text$mn:0000731A                 mov     [ebp+var_4], 0
.text$mn:00007321                 push    0               ; Size
.text$mn:00007323                 push    1               ; char
.text$mn:00007325                 mov     ecx, [ebp+var_10]
.text$mn:00007328                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:0000732D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007334                 mov     ecx, [ebp+var_10]
.text$mn:00007337                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$mn:0000733C                 mov     ecx, [ebp+var_C]
.text$mn:0000733F                 mov     large fs:0, ecx
.text$mn:00007346                 pop     ecx
.text$mn:00007347                 mov     esp, ebp
.text$mn:00007349                 pop     ebp
.text$mn:0000734A                 retn
.text$mn:0000734A ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$mn:0000734A
.text$mn:0000734A ; ---------------------------------------------------------------------------
.text$mn:0000734B                 align 4
.text$mn:0000734B _text$mn        ends
.text$mn:0000734B
.text$x:0000734C ; ===========================================================================
.text$x:0000734C
.text$x:0000734C ; Segment type: Pure code
.text$x:0000734C ; Segment permissions: Read/Execute
.text$x:0000734C _text$x         segment para public 'CODE' use32
.text$x:0000734C                 assume cs:_text$x
.text$x:0000734C                 ;org 734Ch
.text$x:0000734C ; COMDAT (pick associative to section at 72F4)
.text$x:0000734C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000734C
.text$x:0000734C ; =============== S U B R O U T I N E =======================================
.text$x:0000734C
.text$x:0000734C
.text$x:0000734C __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
.text$x:0000734C                                         ; DATA XREF: .xdata$x:0000C048o
.text$x:0000734C                 mov     ecx, [ebp-10h]
.text$x:0000734F                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:0000734F __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 endp
.text$x:0000734F
.text$x:00007354
.text$x:00007354 ; =============== S U B R O U T I N E =======================================
.text$x:00007354
.text$x:00007354
.text$x:00007354 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$x:00007354                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+5o
.text$x:00007354
.text$x:00007354 arg_4           = dword ptr  8
.text$x:00007354
.text$x:00007354                 mov     edx, [esp+arg_4]
.text$x:00007358                 lea     eax, [edx+0Ch]
.text$x:0000735B                 mov     ecx, [edx-8]
.text$x:0000735E                 xor     ecx, eax
.text$x:00007360                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007365                 mov     eax, offset __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$x:0000736A                 jmp     ___CxxFrameHandler3
.text$x:0000736A __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$x:0000736A
.text$x:0000736A ; ---------------------------------------------------------------------------
.text$x:0000736F                 align 10h
.text$x:0000736F _text$x         ends
.text$x:0000736F
.text$mn:00007370 ; ===========================================================================
.text$mn:00007370
.text$mn:00007370 ; Segment type: Pure code
.text$mn:00007370 ; Segment permissions: Read/Execute
.text$mn:00007370 _text$mn        segment para public 'CODE' use32
.text$mn:00007370                 assume cs:_text$mn
.text$mn:00007370                 ;org 7370h
.text$mn:00007370 ; COMDAT (pick any)
.text$mn:00007370                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007370
.text$mn:00007370 ; =============== S U B R O U T I N E =======================================
.text$mn:00007370
.text$mn:00007370 ; Attributes: bp-based frame
.text$mn:00007370
.text$mn:00007370 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::~basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:00007370                 public ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00007370 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:00007370                                         ; CODE XREF: ProjectPanel::newWorkSpace(void)+A0p
.text$mn:00007370                                         ; ProjectPanel::openWorkSpace(wchar_t const *)+1F1p ...
.text$mn:00007370
.text$mn:00007370 var_10          = dword ptr -10h
.text$mn:00007370 var_C           = dword ptr -0Ch
.text$mn:00007370 var_4           = dword ptr -4
.text$mn:00007370
.text$mn:00007370                 push    ebp
.text$mn:00007371                 mov     ebp, esp
.text$mn:00007373                 push    0FFFFFFFFh
.text$mn:00007375                 push    offset __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:0000737A                 mov     eax, large fs:0
.text$mn:00007380                 push    eax
.text$mn:00007381                 push    ecx
.text$mn:00007382                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007387                 xor     eax, ebp
.text$mn:00007389                 push    eax
.text$mn:0000738A                 lea     eax, [ebp+var_C]
.text$mn:0000738D                 mov     large fs:0, eax
.text$mn:00007393                 mov     [ebp+var_10], ecx
.text$mn:00007396                 mov     [ebp+var_4], 0
.text$mn:0000739D                 push    0
.text$mn:0000739F                 push    1
.text$mn:000073A1                 mov     ecx, [ebp+var_10]
.text$mn:000073A4                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000073A9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000073B0                 mov     ecx, [ebp+var_10]
.text$mn:000073B3                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$mn:000073B8                 mov     ecx, [ebp+var_C]
.text$mn:000073BB                 mov     large fs:0, ecx
.text$mn:000073C2                 pop     ecx
.text$mn:000073C3                 mov     esp, ebp
.text$mn:000073C5                 pop     ebp
.text$mn:000073C6                 retn
.text$mn:000073C6 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:000073C6
.text$mn:000073C6 ; ---------------------------------------------------------------------------
.text$mn:000073C7                 align 4
.text$mn:000073C7 _text$mn        ends
.text$mn:000073C7
.text$x:000073C8 ; ===========================================================================
.text$x:000073C8
.text$x:000073C8 ; Segment type: Pure code
.text$x:000073C8 ; Segment permissions: Read/Execute
.text$x:000073C8 _text$x         segment para public 'CODE' use32
.text$x:000073C8                 assume cs:_text$x
.text$x:000073C8                 ;org 73C8h
.text$x:000073C8 ; COMDAT (pick associative to section at 7370)
.text$x:000073C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000073C8
.text$x:000073C8 ; =============== S U B R O U T I N E =======================================
.text$x:000073C8
.text$x:000073C8
.text$x:000073C8 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:000073C8                                         ; DATA XREF: .xdata$x:0000C420o
.text$x:000073C8                 mov     ecx, [ebp-10h]
.text$x:000073CB                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:000073CB __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:000073CB
.text$x:000073D0
.text$x:000073D0 ; =============== S U B R O U T I N E =======================================
.text$x:000073D0
.text$x:000073D0
.text$x:000073D0 __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:000073D0                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:000073D0
.text$x:000073D0 arg_4           = dword ptr  8
.text$x:000073D0
.text$x:000073D0                 mov     edx, [esp+arg_4]
.text$x:000073D4                 lea     eax, [edx+0Ch]
.text$x:000073D7                 mov     ecx, [edx-8]
.text$x:000073DA                 xor     ecx, eax
.text$x:000073DC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000073E1                 mov     eax, offset __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:000073E6                 jmp     ___CxxFrameHandler3
.text$x:000073E6 __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:000073E6
.text$x:000073E6 ; ---------------------------------------------------------------------------
.text$x:000073EB                 align 4
.text$x:000073EB _text$x         ends
.text$x:000073EB
.text$mn:000073EC ; ===========================================================================
.text$mn:000073EC
.text$mn:000073EC ; Segment type: Pure code
.text$mn:000073EC ; Segment permissions: Read/Execute
.text$mn:000073EC _text$mn        segment para public 'CODE' use32
.text$mn:000073EC                 assume cs:_text$mn
.text$mn:000073EC                 ;org 73ECh
.text$mn:000073EC ; COMDAT (pick any)
.text$mn:000073EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000073EC
.text$mn:000073EC ; =============== S U B R O U T I N E =======================================
.text$mn:000073EC
.text$mn:000073EC ; Attributes: bp-based frame
.text$mn:000073EC
.text$mn:000073EC ; public: __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::~vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:000073EC                 public ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$mn:000073EC ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ proc near
.text$mn:000073EC                                         ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+2F4p
.text$mn:000073EC                                         ; __unwindfunclet$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z$1+6j
.text$mn:000073EC
.text$mn:000073EC var_10          = dword ptr -10h
.text$mn:000073EC var_C           = dword ptr -0Ch
.text$mn:000073EC var_4           = dword ptr -4
.text$mn:000073EC
.text$mn:000073EC                 push    ebp
.text$mn:000073ED                 mov     ebp, esp
.text$mn:000073EF                 push    0FFFFFFFFh
.text$mn:000073F1                 push    offset __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$mn:000073F6                 mov     eax, large fs:0
.text$mn:000073FC                 push    eax
.text$mn:000073FD                 push    ecx
.text$mn:000073FE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007403                 xor     eax, ebp
.text$mn:00007405                 push    eax
.text$mn:00007406                 lea     eax, [ebp+var_C]
.text$mn:00007409                 mov     large fs:0, eax
.text$mn:0000740F                 mov     [ebp+var_10], ecx
.text$mn:00007412                 mov     [ebp+var_4], 0
.text$mn:00007419                 mov     ecx, [ebp+var_10]
.text$mn:0000741C                 call    ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Tidy(void)
.text$mn:00007421                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007428                 mov     ecx, [ebp+var_10]
.text$mn:0000742B                 call    ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00007430                 mov     ecx, [ebp+var_C]
.text$mn:00007433                 mov     large fs:0, ecx
.text$mn:0000743A                 pop     ecx
.text$mn:0000743B                 mov     esp, ebp
.text$mn:0000743D                 pop     ebp
.text$mn:0000743E                 retn
.text$mn:0000743E ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ endp
.text$mn:0000743E
.text$mn:0000743E ; ---------------------------------------------------------------------------
.text$mn:0000743F                 align 10h
.text$mn:0000743F _text$mn        ends
.text$mn:0000743F
.text$x:00007440 ; ===========================================================================
.text$x:00007440
.text$x:00007440 ; Segment type: Pure code
.text$x:00007440 ; Segment permissions: Read/Execute
.text$x:00007440 _text$x         segment para public 'CODE' use32
.text$x:00007440                 assume cs:_text$x
.text$x:00007440                 ;org 7440h
.text$x:00007440 ; COMDAT (pick associative to section at 73EC)
.text$x:00007440                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007440
.text$x:00007440 ; =============== S U B R O U T I N E =======================================
.text$x:00007440
.text$x:00007440
.text$x:00007440 __unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 proc near
.text$x:00007440                                         ; DATA XREF: .xdata$x:0000CC28o
.text$x:00007440                 mov     ecx, [ebp-10h]
.text$x:00007443                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00007443 __unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 endp
.text$x:00007443
.text$x:00007448
.text$x:00007448 ; =============== S U B R O U T I N E =======================================
.text$x:00007448
.text$x:00007448
.text$x:00007448 __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ proc near
.text$x:00007448                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:00007448
.text$x:00007448 arg_4           = dword ptr  8
.text$x:00007448
.text$x:00007448                 mov     edx, [esp+arg_4]
.text$x:0000744C                 lea     eax, [edx+0Ch]
.text$x:0000744F                 mov     ecx, [edx-8]
.text$x:00007452                 xor     ecx, eax
.text$x:00007454                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007459                 mov     eax, offset __ehfuncinfo$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$x:0000745E                 jmp     ___CxxFrameHandler3
.text$x:0000745E __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ endp
.text$x:0000745E
.text$x:0000745E ; ---------------------------------------------------------------------------
.text$x:00007463                 align 4
.text$x:00007463 _text$x         ends
.text$x:00007463
.text$mn:00007464 ; ===========================================================================
.text$mn:00007464
.text$mn:00007464 ; Segment type: Pure code
.text$mn:00007464 ; Segment permissions: Read/Execute
.text$mn:00007464 _text$mn        segment para public 'CODE' use32
.text$mn:00007464                 assume cs:_text$mn
.text$mn:00007464                 ;org 7464h
.text$mn:00007464 ; COMDAT (pick any)
.text$mn:00007464                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007464
.text$mn:00007464 ; =============== S U B R O U T I N E =======================================
.text$mn:00007464
.text$mn:00007464 ; Attributes: bp-based frame
.text$mn:00007464
.text$mn:00007464 ; _DWORD __thiscall FileRelocalizerDlg::~FileRelocalizerDlg(FileRelocalizerDlg *__hidden this)
.text$mn:00007464                 public ??1FileRelocalizerDlg@@UAE@XZ
.text$mn:00007464 ??1FileRelocalizerDlg@@UAE@XZ proc near ; CODE XREF: ProjectPanel::popupMenuCmd(int)+8EEp
.text$mn:00007464                                         ; ProjectPanel::popupMenuCmd(int)+974p ...
.text$mn:00007464
.text$mn:00007464 var_10          = dword ptr -10h
.text$mn:00007464 var_C           = dword ptr -0Ch
.text$mn:00007464 var_4           = dword ptr -4
.text$mn:00007464
.text$mn:00007464                 push    ebp
.text$mn:00007465                 mov     ebp, esp
.text$mn:00007467                 push    0FFFFFFFFh
.text$mn:00007469                 push    offset __ehhandler$??1FileRelocalizerDlg@@UAE@XZ
.text$mn:0000746E                 mov     eax, large fs:0
.text$mn:00007474                 push    eax
.text$mn:00007475                 push    ecx
.text$mn:00007476                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000747B                 xor     eax, ebp
.text$mn:0000747D                 push    eax
.text$mn:0000747E                 lea     eax, [ebp+var_C]
.text$mn:00007481                 mov     large fs:0, eax
.text$mn:00007487                 mov     [ebp+var_10], ecx
.text$mn:0000748A                 mov     [ebp+var_4], 1
.text$mn:00007491                 mov     byte ptr [ebp+var_4], 0
.text$mn:00007495                 mov     ecx, [ebp+var_10]
.text$mn:00007498                 add     ecx, 20h ; ' '
.text$mn:0000749B                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000074A0                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000074A7                 mov     ecx, [ebp+var_10] ; this
.text$mn:000074AA                 call    ??1StaticDialog@@UAE@XZ ; StaticDialog::~StaticDialog(void)
.text$mn:000074AF                 mov     ecx, [ebp+var_C]
.text$mn:000074B2                 mov     large fs:0, ecx
.text$mn:000074B9                 pop     ecx
.text$mn:000074BA                 mov     esp, ebp
.text$mn:000074BC                 pop     ebp
.text$mn:000074BD                 retn
.text$mn:000074BD ??1FileRelocalizerDlg@@UAE@XZ endp
.text$mn:000074BD
.text$mn:000074BD ; ---------------------------------------------------------------------------
.text$mn:000074BE                 align 10h
.text$mn:000074BE _text$mn        ends
.text$mn:000074BE
.text$x:000074C0 ; ===========================================================================
.text$x:000074C0
.text$x:000074C0 ; Segment type: Pure code
.text$x:000074C0 ; Segment permissions: Read/Execute
.text$x:000074C0 _text$x         segment para public 'CODE' use32
.text$x:000074C0                 assume cs:_text$x
.text$x:000074C0                 ;org 74C0h
.text$x:000074C0 ; COMDAT (pick associative to section at 7464)
.text$x:000074C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000074C0
.text$x:000074C0 ; =============== S U B R O U T I N E =======================================
.text$x:000074C0
.text$x:000074C0
.text$x:000074C0 __unwindfunclet$??1FileRelocalizerDlg@@UAE@XZ$0 proc near
.text$x:000074C0                                         ; DATA XREF: .xdata$x:0000CAE4o
.text$x:000074C0                 mov     ecx, [ebp-10h]  ; this
.text$x:000074C3                 jmp     ??1StaticDialog@@UAE@XZ ; StaticDialog::~StaticDialog(void)
.text$x:000074C3 __unwindfunclet$??1FileRelocalizerDlg@@UAE@XZ$0 endp
.text$x:000074C3
.text$x:000074C8
.text$x:000074C8 ; =============== S U B R O U T I N E =======================================
.text$x:000074C8
.text$x:000074C8
.text$x:000074C8 __unwindfunclet$??1FileRelocalizerDlg@@UAE@XZ$1 proc near
.text$x:000074C8                                         ; DATA XREF: .xdata$x:0000CAECo
.text$x:000074C8                 mov     ecx, [ebp-10h]
.text$x:000074CB                 add     ecx, 20h ; ' '
.text$x:000074CE                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000074CE __unwindfunclet$??1FileRelocalizerDlg@@UAE@XZ$1 endp
.text$x:000074CE
.text$x:000074D3
.text$x:000074D3 ; =============== S U B R O U T I N E =======================================
.text$x:000074D3
.text$x:000074D3
.text$x:000074D3 __ehhandler$??1FileRelocalizerDlg@@UAE@XZ proc near
.text$x:000074D3                                         ; DATA XREF: FileRelocalizerDlg::~FileRelocalizerDlg(void)+5o
.text$x:000074D3
.text$x:000074D3 arg_4           = dword ptr  8
.text$x:000074D3
.text$x:000074D3                 mov     edx, [esp+arg_4]
.text$x:000074D7                 lea     eax, [edx+0Ch]
.text$x:000074DA                 mov     ecx, [edx-8]
.text$x:000074DD                 xor     ecx, eax
.text$x:000074DF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000074E4                 mov     eax, offset __ehfuncinfo$??1FileRelocalizerDlg@@UAE@XZ
.text$x:000074E9                 jmp     ___CxxFrameHandler3
.text$x:000074E9 __ehhandler$??1FileRelocalizerDlg@@UAE@XZ endp
.text$x:000074E9
.text$x:000074E9 ; ---------------------------------------------------------------------------
.text$x:000074EE                 align 10h
.text$x:000074EE _text$x         ends
.text$x:000074EE
.text$mn:000074F0 ; ===========================================================================
.text$mn:000074F0
.text$mn:000074F0 ; Segment type: Pure code
.text$mn:000074F0 ; Segment permissions: Read/Execute
.text$mn:000074F0 _text$mn        segment para public 'CODE' use32
.text$mn:000074F0                 assume cs:_text$mn
.text$mn:000074F0                 ;org 74F0h
.text$mn:000074F0 ; COMDAT (pick any)
.text$mn:000074F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000074F0
.text$mn:000074F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000074F0
.text$mn:000074F0 ; Attributes: bp-based frame
.text$mn:000074F0
.text$mn:000074F0 ; _DWORD __thiscall StaticDialog::~StaticDialog(StaticDialog *__hidden this)
.text$mn:000074F0                 public ??1StaticDialog@@UAE@XZ
.text$mn:000074F0 ??1StaticDialog@@UAE@XZ proc near       ; CODE XREF: __unwindfunclet$??0FileRelocalizerDlg@@QAE@XZ$0+3j
.text$mn:000074F0                                         ; FileRelocalizerDlg::~FileRelocalizerDlg(void)+46p ...
.text$mn:000074F0
.text$mn:000074F0 var_10          = dword ptr -10h
.text$mn:000074F0 var_C           = dword ptr -0Ch
.text$mn:000074F0 var_4           = dword ptr -4
.text$mn:000074F0
.text$mn:000074F0                 push    ebp
.text$mn:000074F1                 mov     ebp, esp
.text$mn:000074F3                 push    0FFFFFFFFh
.text$mn:000074F5                 push    offset __ehhandler$??1StaticDialog@@UAE@XZ
.text$mn:000074FA                 mov     eax, large fs:0
.text$mn:00007500                 push    eax
.text$mn:00007501                 push    ecx
.text$mn:00007502                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007507                 xor     eax, ebp
.text$mn:00007509                 push    eax
.text$mn:0000750A                 lea     eax, [ebp+var_C]
.text$mn:0000750D                 mov     large fs:0, eax
.text$mn:00007513                 mov     [ebp+var_10], ecx
.text$mn:00007516                 mov     eax, [ebp+var_10]
.text$mn:00007519                 mov     dword ptr [eax], offset ??_7StaticDialog@@6B@ ; const StaticDialog::`vftable'
.text$mn:0000751F                 mov     [ebp+var_4], 0
.text$mn:00007526                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007529                 call    ?isCreated@StaticDialog@@UBE_NXZ ; StaticDialog::isCreated(void)
.text$mn:0000752E                 movzx   ecx, al
.text$mn:00007531                 test    ecx, ecx
.text$mn:00007533                 jz      short loc_754E
.text$mn:00007535                 push    0               ; dwNewLong
.text$mn:00007537                 push    0FFFFFFEBh      ; nIndex
.text$mn:00007539                 mov     edx, [ebp+var_10]
.text$mn:0000753C                 mov     eax, [edx+0Ch]
.text$mn:0000753F                 push    eax             ; hWnd
.text$mn:00007540                 call    dword ptr ds:__imp__SetWindowLongW@12 ; SetWindowLongW(x,x,x)
.text$mn:00007546                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007549                 call    ?destroy@StaticDialog@@UAEXXZ ; StaticDialog::destroy(void)
.text$mn:0000754E
.text$mn:0000754E loc_754E:                               ; CODE XREF: StaticDialog::~StaticDialog(void)+43j
.text$mn:0000754E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007555                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007558                 call    ??1Window@@UAE@XZ ; Window::~Window(void)
.text$mn:0000755D                 mov     ecx, [ebp+var_C]
.text$mn:00007560                 mov     large fs:0, ecx
.text$mn:00007567                 pop     ecx
.text$mn:00007568                 mov     esp, ebp
.text$mn:0000756A                 pop     ebp
.text$mn:0000756B                 retn
.text$mn:0000756B ??1StaticDialog@@UAE@XZ endp
.text$mn:0000756B
.text$mn:0000756B _text$mn        ends
.text$mn:0000756B
.text$x:0000756C ; ===========================================================================
.text$x:0000756C
.text$x:0000756C ; Segment type: Pure code
.text$x:0000756C ; Segment permissions: Read/Execute
.text$x:0000756C _text$x         segment para public 'CODE' use32
.text$x:0000756C                 assume cs:_text$x
.text$x:0000756C                 ;org 756Ch
.text$x:0000756C ; COMDAT (pick associative to section at 74F0)
.text$x:0000756C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000756C
.text$x:0000756C ; =============== S U B R O U T I N E =======================================
.text$x:0000756C
.text$x:0000756C
.text$x:0000756C __unwindfunclet$??1StaticDialog@@UAE@XZ$0 proc near
.text$x:0000756C                                         ; DATA XREF: .xdata$x:0000C624o
.text$x:0000756C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000756F                 jmp     ??1Window@@UAE@XZ ; Window::~Window(void)
.text$x:0000756F __unwindfunclet$??1StaticDialog@@UAE@XZ$0 endp
.text$x:0000756F
.text$x:00007574
.text$x:00007574 ; =============== S U B R O U T I N E =======================================
.text$x:00007574
.text$x:00007574
.text$x:00007574 __ehhandler$??1StaticDialog@@UAE@XZ proc near
.text$x:00007574                                         ; DATA XREF: StaticDialog::~StaticDialog(void)+5o
.text$x:00007574
.text$x:00007574 arg_4           = dword ptr  8
.text$x:00007574
.text$x:00007574                 mov     edx, [esp+arg_4]
.text$x:00007578                 lea     eax, [edx+0Ch]
.text$x:0000757B                 mov     ecx, [edx-8]
.text$x:0000757E                 xor     ecx, eax
.text$x:00007580                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007585                 mov     eax, offset __ehfuncinfo$??1StaticDialog@@UAE@XZ
.text$x:0000758A                 jmp     ___CxxFrameHandler3
.text$x:0000758A __ehhandler$??1StaticDialog@@UAE@XZ endp
.text$x:0000758A
.text$x:0000758A ; ---------------------------------------------------------------------------
.text$x:0000758F                 align 10h
.text$x:0000758F _text$x         ends
.text$x:0000758F
.text$mn:00007590 ; ===========================================================================
.text$mn:00007590
.text$mn:00007590 ; Segment type: Pure code
.text$mn:00007590 ; Segment permissions: Read/Execute
.text$mn:00007590 _text$mn        segment para public 'CODE' use32
.text$mn:00007590                 assume cs:_text$mn
.text$mn:00007590                 ;org 7590h
.text$mn:00007590 ; COMDAT (pick any)
.text$mn:00007590                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007590
.text$mn:00007590 ; =============== S U B R O U T I N E =======================================
.text$mn:00007590
.text$mn:00007590 ; Attributes: bp-based frame
.text$mn:00007590
.text$mn:00007590 ; _DWORD __thiscall TiXmlDocument::~TiXmlDocument(TiXmlDocument *__hidden this)
.text$mn:00007590                 public ??1TiXmlDocument@@UAE@XZ
.text$mn:00007590 ??1TiXmlDocument@@UAE@XZ proc near      ; CODE XREF: ProjectPanel::writeWorkSpace(wchar_t *)+11Cp
.text$mn:00007590                                         ; ProjectPanel::writeWorkSpace(wchar_t *)+24Fp ...
.text$mn:00007590
.text$mn:00007590 var_10          = dword ptr -10h
.text$mn:00007590 var_C           = dword ptr -0Ch
.text$mn:00007590 var_4           = dword ptr -4
.text$mn:00007590
.text$mn:00007590                 push    ebp
.text$mn:00007591                 mov     ebp, esp
.text$mn:00007593                 push    0FFFFFFFFh
.text$mn:00007595                 push    offset __ehhandler$??1TiXmlDocument@@UAE@XZ
.text$mn:0000759A                 mov     eax, large fs:0
.text$mn:000075A0                 push    eax
.text$mn:000075A1                 push    ecx
.text$mn:000075A2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000075A7                 xor     eax, ebp
.text$mn:000075A9                 push    eax
.text$mn:000075AA                 lea     eax, [ebp+var_C]
.text$mn:000075AD                 mov     large fs:0, eax
.text$mn:000075B3                 mov     [ebp+var_10], ecx
.text$mn:000075B6                 mov     eax, [ebp+var_10]
.text$mn:000075B9                 mov     dword ptr [eax], offset ??_7TiXmlDocument@@6B@ ; const TiXmlDocument::`vftable'
.text$mn:000075BF                 mov     [ebp+var_4], 1
.text$mn:000075C6                 mov     byte ptr [ebp+var_4], 0
.text$mn:000075CA                 mov     ecx, [ebp+var_10]
.text$mn:000075CD                 add     ecx, 4Ch ; 'L'
.text$mn:000075D0                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000075D5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000075DC                 mov     ecx, [ebp+var_10] ; this
.text$mn:000075DF                 call    ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$mn:000075E4                 mov     ecx, [ebp+var_C]
.text$mn:000075E7                 mov     large fs:0, ecx
.text$mn:000075EE                 pop     ecx
.text$mn:000075EF                 mov     esp, ebp
.text$mn:000075F1                 pop     ebp
.text$mn:000075F2                 retn
.text$mn:000075F2 ??1TiXmlDocument@@UAE@XZ endp
.text$mn:000075F2
.text$mn:000075F2 ; ---------------------------------------------------------------------------
.text$mn:000075F3                 align 4
.text$mn:000075F3 _text$mn        ends
.text$mn:000075F3
.text$x:000075F4 ; ===========================================================================
.text$x:000075F4
.text$x:000075F4 ; Segment type: Pure code
.text$x:000075F4 ; Segment permissions: Read/Execute
.text$x:000075F4 _text$x         segment para public 'CODE' use32
.text$x:000075F4                 assume cs:_text$x
.text$x:000075F4                 ;org 75F4h
.text$x:000075F4 ; COMDAT (pick associative to section at 7590)
.text$x:000075F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000075F4
.text$x:000075F4 ; =============== S U B R O U T I N E =======================================
.text$x:000075F4
.text$x:000075F4
.text$x:000075F4 __unwindfunclet$??1TiXmlDocument@@UAE@XZ$0 proc near
.text$x:000075F4                                         ; DATA XREF: .xdata$x:0000CB18o
.text$x:000075F4                 mov     ecx, [ebp-10h]  ; this
.text$x:000075F7                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:000075F7 __unwindfunclet$??1TiXmlDocument@@UAE@XZ$0 endp
.text$x:000075F7
.text$x:000075FC
.text$x:000075FC ; =============== S U B R O U T I N E =======================================
.text$x:000075FC
.text$x:000075FC
.text$x:000075FC __unwindfunclet$??1TiXmlDocument@@UAE@XZ$1 proc near
.text$x:000075FC                                         ; DATA XREF: .xdata$x:0000CB20o
.text$x:000075FC                 mov     ecx, [ebp-10h]
.text$x:000075FF                 add     ecx, 4Ch ; 'L'
.text$x:00007602                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007602 __unwindfunclet$??1TiXmlDocument@@UAE@XZ$1 endp
.text$x:00007602
.text$x:00007607
.text$x:00007607 ; =============== S U B R O U T I N E =======================================
.text$x:00007607
.text$x:00007607
.text$x:00007607 __ehhandler$??1TiXmlDocument@@UAE@XZ proc near
.text$x:00007607                                         ; DATA XREF: TiXmlDocument::~TiXmlDocument(void)+5o
.text$x:00007607
.text$x:00007607 arg_4           = dword ptr  8
.text$x:00007607
.text$x:00007607                 mov     edx, [esp+arg_4]
.text$x:0000760B                 lea     eax, [edx+0Ch]
.text$x:0000760E                 mov     ecx, [edx-8]
.text$x:00007611                 xor     ecx, eax
.text$x:00007613                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007618                 mov     eax, offset __ehfuncinfo$??1TiXmlDocument@@UAE@XZ
.text$x:0000761D                 jmp     ___CxxFrameHandler3
.text$x:0000761D __ehhandler$??1TiXmlDocument@@UAE@XZ endp
.text$x:0000761D
.text$x:0000761D ; ---------------------------------------------------------------------------
.text$x:00007622                 align 4
.text$x:00007622 _text$x         ends
.text$x:00007622
.text$mn:00007624 ; ===========================================================================
.text$mn:00007624
.text$mn:00007624 ; Segment type: Pure code
.text$mn:00007624 ; Segment permissions: Read/Execute
.text$mn:00007624 _text$mn        segment para public 'CODE' use32
.text$mn:00007624                 assume cs:_text$mn
.text$mn:00007624                 ;org 7624h
.text$mn:00007624 ; COMDAT (pick any)
.text$mn:00007624                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007624
.text$mn:00007624 ; =============== S U B R O U T I N E =======================================
.text$mn:00007624
.text$mn:00007624 ; Attributes: bp-based frame
.text$mn:00007624
.text$mn:00007624 ; _DWORD __thiscall Window::~Window(Window *__hidden this)
.text$mn:00007624                 public ??1Window@@UAE@XZ
.text$mn:00007624 ??1Window@@UAE@XZ proc near             ; CODE XREF: __unwindfunclet$??0StaticDialog@@QAE@XZ$0+3j
.text$mn:00007624                                         ; StaticDialog::~StaticDialog(void)+68p ...
.text$mn:00007624
.text$mn:00007624 var_4           = dword ptr -4
.text$mn:00007624
.text$mn:00007624                 push    ebp
.text$mn:00007625                 mov     ebp, esp
.text$mn:00007627                 push    ecx
.text$mn:00007628                 mov     [ebp+var_4], ecx
.text$mn:0000762B                 mov     eax, [ebp+var_4]
.text$mn:0000762E                 mov     dword ptr [eax], offset ??_7Window@@6B@ ; const Window::`vftable'
.text$mn:00007634                 mov     esp, ebp
.text$mn:00007636                 pop     ebp
.text$mn:00007637                 retn
.text$mn:00007637 ??1Window@@UAE@XZ endp
.text$mn:00007637
.text$mn:00007637 _text$mn        ends
.text$mn:00007637
.text$mn:00007638 ; ===========================================================================
.text$mn:00007638
.text$mn:00007638 ; Segment type: Pure code
.text$mn:00007638 ; Segment permissions: Read/Execute
.text$mn:00007638 _text$mn        segment para public 'CODE' use32
.text$mn:00007638                 assume cs:_text$mn
.text$mn:00007638                 ;org 7638h
.text$mn:00007638 ; COMDAT (pick any)
.text$mn:00007638                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007638
.text$mn:00007638 ; =============== S U B R O U T I N E =======================================
.text$mn:00007638
.text$mn:00007638 ; Attributes: bp-based frame
.text$mn:00007638
.text$mn:00007638 ; _DWORD __thiscall std::_Container_base12::~_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:00007638                 public ??1_Container_base12@std@@QAE@XZ
.text$mn:00007638 ??1_Container_base12@std@@QAE@XZ proc near
.text$mn:00007638                                         ; CODE XREF: __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0+3j
.text$mn:00007638                                         ; __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0+3j ...
.text$mn:00007638
.text$mn:00007638 var_4           = dword ptr -4
.text$mn:00007638
.text$mn:00007638                 push    ebp
.text$mn:00007639                 mov     ebp, esp
.text$mn:0000763B                 push    ecx
.text$mn:0000763C                 mov     [ebp+var_4], ecx
.text$mn:0000763F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007642                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00007647                 mov     esp, ebp
.text$mn:00007649                 pop     ebp
.text$mn:0000764A                 retn
.text$mn:0000764A ??1_Container_base12@std@@QAE@XZ endp
.text$mn:0000764A
.text$mn:0000764A ; ---------------------------------------------------------------------------
.text$mn:0000764B                 align 4
.text$mn:0000764B _text$mn        ends
.text$mn:0000764B
.text$mn:0000764C ; ===========================================================================
.text$mn:0000764C
.text$mn:0000764C ; Segment type: Pure code
.text$mn:0000764C ; Segment permissions: Read/Execute
.text$mn:0000764C _text$mn        segment para public 'CODE' use32
.text$mn:0000764C                 assume cs:_text$mn
.text$mn:0000764C                 ;org 764Ch
.text$mn:0000764C ; COMDAT (pick any)
.text$mn:0000764C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000764C
.text$mn:0000764C ; =============== S U B R O U T I N E =======================================
.text$mn:0000764C
.text$mn:0000764C ; Attributes: bp-based frame
.text$mn:0000764C
.text$mn:0000764C ; _DWORD __thiscall std::_Generic_error_category::~_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:0000764C                 public ??1_Generic_error_category@std@@UAE@XZ
.text$mn:0000764C ??1_Generic_error_category@std@@UAE@XZ proc near
.text$mn:0000764C                                         ; CODE XREF: __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0+3j
.text$mn:0000764C                                         ; __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0+3j ...
.text$mn:0000764C
.text$mn:0000764C var_10          = dword ptr -10h
.text$mn:0000764C var_C           = dword ptr -0Ch
.text$mn:0000764C var_4           = dword ptr -4
.text$mn:0000764C
.text$mn:0000764C                 push    ebp
.text$mn:0000764D                 mov     ebp, esp
.text$mn:0000764F                 push    0FFFFFFFFh
.text$mn:00007651                 push    offset __ehhandler$??1_Generic_error_category@std@@UAE@XZ
.text$mn:00007656                 mov     eax, large fs:0
.text$mn:0000765C                 push    eax
.text$mn:0000765D                 push    ecx
.text$mn:0000765E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007663                 xor     eax, ebp
.text$mn:00007665                 push    eax
.text$mn:00007666                 lea     eax, [ebp+var_C]
.text$mn:00007669                 mov     large fs:0, eax
.text$mn:0000766F                 mov     [ebp+var_10], ecx
.text$mn:00007672                 mov     [ebp+var_4], 0
.text$mn:00007679                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007680                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007683                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:00007688                 mov     ecx, [ebp+var_C]
.text$mn:0000768B                 mov     large fs:0, ecx
.text$mn:00007692                 pop     ecx
.text$mn:00007693                 mov     esp, ebp
.text$mn:00007695                 pop     ebp
.text$mn:00007696                 retn
.text$mn:00007696 ??1_Generic_error_category@std@@UAE@XZ endp
.text$mn:00007696
.text$mn:00007696 ; ---------------------------------------------------------------------------
.text$mn:00007697                 align 4
.text$mn:00007697 _text$mn        ends
.text$mn:00007697
.text$x:00007698 ; ===========================================================================
.text$x:00007698
.text$x:00007698 ; Segment type: Pure code
.text$x:00007698 ; Segment permissions: Read/Execute
.text$x:00007698 _text$x         segment para public 'CODE' use32
.text$x:00007698                 assume cs:_text$x
.text$x:00007698                 ;org 7698h
.text$x:00007698 ; COMDAT (pick associative to section at 764C)
.text$x:00007698                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007698
.text$x:00007698 ; =============== S U B R O U T I N E =======================================
.text$x:00007698
.text$x:00007698
.text$x:00007698 __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 proc near
.text$x:00007698                                         ; DATA XREF: .xdata$x:0000C158o
.text$x:00007698                 mov     ecx, [ebp-10h]  ; this
.text$x:0000769B                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:0000769B __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 endp
.text$x:0000769B
.text$x:000076A0
.text$x:000076A0 ; =============== S U B R O U T I N E =======================================
.text$x:000076A0
.text$x:000076A0
.text$x:000076A0 __ehhandler$??1_Generic_error_category@std@@UAE@XZ proc near
.text$x:000076A0                                         ; DATA XREF: std::_Generic_error_category::~_Generic_error_category(void)+5o
.text$x:000076A0
.text$x:000076A0 arg_4           = dword ptr  8
.text$x:000076A0
.text$x:000076A0                 mov     edx, [esp+arg_4]
.text$x:000076A4                 lea     eax, [edx+0Ch]
.text$x:000076A7                 mov     ecx, [edx-8]
.text$x:000076AA                 xor     ecx, eax
.text$x:000076AC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000076B1                 mov     eax, offset __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ
.text$x:000076B6                 jmp     ___CxxFrameHandler3
.text$x:000076B6 __ehhandler$??1_Generic_error_category@std@@UAE@XZ endp
.text$x:000076B6
.text$x:000076B6 ; ---------------------------------------------------------------------------
.text$x:000076BB                 align 4
.text$x:000076BB _text$x         ends
.text$x:000076BB
.text$mn:000076BC ; ===========================================================================
.text$mn:000076BC
.text$mn:000076BC ; Segment type: Pure code
.text$mn:000076BC ; Segment permissions: Read/Execute
.text$mn:000076BC _text$mn        segment para public 'CODE' use32
.text$mn:000076BC                 assume cs:_text$mn
.text$mn:000076BC                 ;org 76BCh
.text$mn:000076BC ; COMDAT (pick any)
.text$mn:000076BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000076BC
.text$mn:000076BC ; =============== S U B R O U T I N E =======================================
.text$mn:000076BC
.text$mn:000076BC ; Attributes: bp-based frame
.text$mn:000076BC
.text$mn:000076BC ; _DWORD __thiscall std::_Iostream_error_category::~_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:000076BC                 public ??1_Iostream_error_category@std@@UAE@XZ
.text$mn:000076BC ??1_Iostream_error_category@std@@UAE@XZ proc near
.text$mn:000076BC                                         ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:000076BC                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:000076BC
.text$mn:000076BC var_10          = dword ptr -10h
.text$mn:000076BC var_C           = dword ptr -0Ch
.text$mn:000076BC var_4           = dword ptr -4
.text$mn:000076BC
.text$mn:000076BC                 push    ebp
.text$mn:000076BD                 mov     ebp, esp
.text$mn:000076BF                 push    0FFFFFFFFh
.text$mn:000076C1                 push    offset __ehhandler$??1_Iostream_error_category@std@@UAE@XZ
.text$mn:000076C6                 mov     eax, large fs:0
.text$mn:000076CC                 push    eax
.text$mn:000076CD                 push    ecx
.text$mn:000076CE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000076D3                 xor     eax, ebp
.text$mn:000076D5                 push    eax
.text$mn:000076D6                 lea     eax, [ebp+var_C]
.text$mn:000076D9                 mov     large fs:0, eax
.text$mn:000076DF                 mov     [ebp+var_10], ecx
.text$mn:000076E2                 mov     [ebp+var_4], 0
.text$mn:000076E9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000076F0                 mov     ecx, [ebp+var_10] ; this
.text$mn:000076F3                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:000076F8                 mov     ecx, [ebp+var_C]
.text$mn:000076FB                 mov     large fs:0, ecx
.text$mn:00007702                 pop     ecx
.text$mn:00007703                 mov     esp, ebp
.text$mn:00007705                 pop     ebp
.text$mn:00007706                 retn
.text$mn:00007706 ??1_Iostream_error_category@std@@UAE@XZ endp
.text$mn:00007706
.text$mn:00007706 ; ---------------------------------------------------------------------------
.text$mn:00007707                 align 4
.text$mn:00007707 _text$mn        ends
.text$mn:00007707
.text$x:00007708 ; ===========================================================================
.text$x:00007708
.text$x:00007708 ; Segment type: Pure code
.text$x:00007708 ; Segment permissions: Read/Execute
.text$x:00007708 _text$x         segment para public 'CODE' use32
.text$x:00007708                 assume cs:_text$x
.text$x:00007708                 ;org 7708h
.text$x:00007708 ; COMDAT (pick associative to section at 76BC)
.text$x:00007708                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007708
.text$x:00007708 ; =============== S U B R O U T I N E =======================================
.text$x:00007708
.text$x:00007708
.text$x:00007708 __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 proc near
.text$x:00007708                                         ; DATA XREF: .xdata$x:0000C1DCo
.text$x:00007708                 mov     ecx, [ebp-10h]  ; this
.text$x:0000770B                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:0000770B __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 endp
.text$x:0000770B
.text$x:00007710
.text$x:00007710 ; =============== S U B R O U T I N E =======================================
.text$x:00007710
.text$x:00007710
.text$x:00007710 __ehhandler$??1_Iostream_error_category@std@@UAE@XZ proc near
.text$x:00007710                                         ; DATA XREF: std::_Iostream_error_category::~_Iostream_error_category(void)+5o
.text$x:00007710
.text$x:00007710 arg_4           = dword ptr  8
.text$x:00007710
.text$x:00007710                 mov     edx, [esp+arg_4]
.text$x:00007714                 lea     eax, [edx+0Ch]
.text$x:00007717                 mov     ecx, [edx-8]
.text$x:0000771A                 xor     ecx, eax
.text$x:0000771C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007721                 mov     eax, offset __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ
.text$x:00007726                 jmp     ___CxxFrameHandler3
.text$x:00007726 __ehhandler$??1_Iostream_error_category@std@@UAE@XZ endp
.text$x:00007726
.text$x:00007726 ; ---------------------------------------------------------------------------
.text$x:0000772B                 align 4
.text$x:0000772B _text$x         ends
.text$x:0000772B
.text$mn:0000772C ; ===========================================================================
.text$mn:0000772C
.text$mn:0000772C ; Segment type: Pure code
.text$mn:0000772C ; Segment permissions: Read/Execute
.text$mn:0000772C _text$mn        segment para public 'CODE' use32
.text$mn:0000772C                 assume cs:_text$mn
.text$mn:0000772C                 ;org 772Ch
.text$mn:0000772C ; COMDAT (pick any)
.text$mn:0000772C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000772C
.text$mn:0000772C ; =============== S U B R O U T I N E =======================================
.text$mn:0000772C
.text$mn:0000772C ; Attributes: bp-based frame
.text$mn:0000772C
.text$mn:0000772C ; _DWORD __thiscall std::_Iterator_base12::~_Iterator_base12(std::_Iterator_base12 *__hidden this)
.text$mn:0000772C                 public ??1_Iterator_base12@std@@QAE@XZ
.text$mn:0000772C ??1_Iterator_base12@std@@QAE@XZ proc near
.text$mn:0000772C                                         ; CODE XREF: __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0+3j
.text$mn:0000772C                                         ; __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0+3j ...
.text$mn:0000772C
.text$mn:0000772C var_14          = byte ptr -14h
.text$mn:0000772C var_10          = dword ptr -10h
.text$mn:0000772C var_C           = dword ptr -0Ch
.text$mn:0000772C var_4           = dword ptr -4
.text$mn:0000772C
.text$mn:0000772C                 push    ebp
.text$mn:0000772D                 mov     ebp, esp
.text$mn:0000772F                 push    0FFFFFFFFh
.text$mn:00007731                 push    offset __ehhandler$??1_Iterator_base12@std@@QAE@XZ
.text$mn:00007736                 mov     eax, large fs:0
.text$mn:0000773C                 push    eax
.text$mn:0000773D                 sub     esp, 8
.text$mn:00007740                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007745                 xor     eax, ebp
.text$mn:00007747                 push    eax
.text$mn:00007748                 lea     eax, [ebp+var_C]
.text$mn:0000774B                 mov     large fs:0, eax
.text$mn:00007751                 mov     [ebp+var_10], ecx
.text$mn:00007754                 push    3               ; int
.text$mn:00007756                 lea     ecx, [ebp+var_14] ; this
.text$mn:00007759                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:0000775E                 mov     [ebp+var_4], 0
.text$mn:00007765                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007768                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:0000776D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007774                 lea     ecx, [ebp+var_14] ; this
.text$mn:00007777                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000777C                 mov     ecx, [ebp+var_C]
.text$mn:0000777F                 mov     large fs:0, ecx
.text$mn:00007786                 pop     ecx
.text$mn:00007787                 mov     esp, ebp
.text$mn:00007789                 pop     ebp
.text$mn:0000778A                 retn
.text$mn:0000778A ??1_Iterator_base12@std@@QAE@XZ endp
.text$mn:0000778A
.text$mn:0000778A ; ---------------------------------------------------------------------------
.text$mn:0000778B                 align 4
.text$mn:0000778B _text$mn        ends
.text$mn:0000778B
.text$x:0000778C ; ===========================================================================
.text$x:0000778C
.text$x:0000778C ; Segment type: Pure code
.text$x:0000778C ; Segment permissions: Read/Execute
.text$x:0000778C _text$x         segment para public 'CODE' use32
.text$x:0000778C                 assume cs:_text$x
.text$x:0000778C                 ;org 778Ch
.text$x:0000778C ; COMDAT (pick associative to section at 772C)
.text$x:0000778C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000778C
.text$x:0000778C ; =============== S U B R O U T I N E =======================================
.text$x:0000778C
.text$x:0000778C
.text$x:0000778C __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0 proc near
.text$x:0000778C                                         ; DATA XREF: .xdata$x:0000BF0Co
.text$x:0000778C                 lea     ecx, [ebp-14h]  ; this
.text$x:0000778F                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000778F __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0 endp
.text$x:0000778F
.text$x:00007794
.text$x:00007794 ; =============== S U B R O U T I N E =======================================
.text$x:00007794
.text$x:00007794
.text$x:00007794 __ehhandler$??1_Iterator_base12@std@@QAE@XZ proc near
.text$x:00007794                                         ; DATA XREF: std::_Iterator_base12::~_Iterator_base12(void)+5o
.text$x:00007794
.text$x:00007794 arg_4           = dword ptr  8
.text$x:00007794
.text$x:00007794                 mov     edx, [esp+arg_4]
.text$x:00007798                 lea     eax, [edx+0Ch]
.text$x:0000779B                 mov     ecx, [edx-0Ch]
.text$x:0000779E                 xor     ecx, eax
.text$x:000077A0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000077A5                 mov     eax, offset __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
.text$x:000077AA                 jmp     ___CxxFrameHandler3
.text$x:000077AA __ehhandler$??1_Iterator_base12@std@@QAE@XZ endp
.text$x:000077AA
.text$x:000077AA ; ---------------------------------------------------------------------------
.text$x:000077AF                 align 10h
.text$x:000077AF _text$x         ends
.text$x:000077AF
.text$mn:000077B0 ; ===========================================================================
.text$mn:000077B0
.text$mn:000077B0 ; Segment type: Pure code
.text$mn:000077B0 ; Segment permissions: Read/Execute
.text$mn:000077B0 _text$mn        segment para public 'CODE' use32
.text$mn:000077B0                 assume cs:_text$mn
.text$mn:000077B0                 ;org 77B0h
.text$mn:000077B0 ; COMDAT (pick any)
.text$mn:000077B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000077B0
.text$mn:000077B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000077B0
.text$mn:000077B0 ; Attributes: bp-based frame
.text$mn:000077B0
.text$mn:000077B0 ; _DWORD __thiscall std::_System_error_category::~_System_error_category(std::_System_error_category *__hidden this)
.text$mn:000077B0                 public ??1_System_error_category@std@@UAE@XZ
.text$mn:000077B0 ??1_System_error_category@std@@UAE@XZ proc near
.text$mn:000077B0                                         ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:000077B0                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:000077B0
.text$mn:000077B0 var_10          = dword ptr -10h
.text$mn:000077B0 var_C           = dword ptr -0Ch
.text$mn:000077B0 var_4           = dword ptr -4
.text$mn:000077B0
.text$mn:000077B0                 push    ebp
.text$mn:000077B1                 mov     ebp, esp
.text$mn:000077B3                 push    0FFFFFFFFh
.text$mn:000077B5                 push    offset __ehhandler$??1_System_error_category@std@@UAE@XZ
.text$mn:000077BA                 mov     eax, large fs:0
.text$mn:000077C0                 push    eax
.text$mn:000077C1                 push    ecx
.text$mn:000077C2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000077C7                 xor     eax, ebp
.text$mn:000077C9                 push    eax
.text$mn:000077CA                 lea     eax, [ebp+var_C]
.text$mn:000077CD                 mov     large fs:0, eax
.text$mn:000077D3                 mov     [ebp+var_10], ecx
.text$mn:000077D6                 mov     [ebp+var_4], 0
.text$mn:000077DD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000077E4                 mov     ecx, [ebp+var_10] ; this
.text$mn:000077E7                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:000077EC                 mov     ecx, [ebp+var_C]
.text$mn:000077EF                 mov     large fs:0, ecx
.text$mn:000077F6                 pop     ecx
.text$mn:000077F7                 mov     esp, ebp
.text$mn:000077F9                 pop     ebp
.text$mn:000077FA                 retn
.text$mn:000077FA ??1_System_error_category@std@@UAE@XZ endp
.text$mn:000077FA
.text$mn:000077FA ; ---------------------------------------------------------------------------
.text$mn:000077FB                 align 4
.text$mn:000077FB _text$mn        ends
.text$mn:000077FB
.text$x:000077FC ; ===========================================================================
.text$x:000077FC
.text$x:000077FC ; Segment type: Pure code
.text$x:000077FC ; Segment permissions: Read/Execute
.text$x:000077FC _text$x         segment para public 'CODE' use32
.text$x:000077FC                 assume cs:_text$x
.text$x:000077FC                 ;org 77FCh
.text$x:000077FC ; COMDAT (pick associative to section at 77B0)
.text$x:000077FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000077FC
.text$x:000077FC ; =============== S U B R O U T I N E =======================================
.text$x:000077FC
.text$x:000077FC
.text$x:000077FC __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 proc near
.text$x:000077FC                                         ; DATA XREF: .xdata$x:0000C260o
.text$x:000077FC                 mov     ecx, [ebp-10h]  ; this
.text$x:000077FF                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:000077FF __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 endp
.text$x:000077FF
.text$x:00007804
.text$x:00007804 ; =============== S U B R O U T I N E =======================================
.text$x:00007804
.text$x:00007804
.text$x:00007804 __ehhandler$??1_System_error_category@std@@UAE@XZ proc near
.text$x:00007804                                         ; DATA XREF: std::_System_error_category::~_System_error_category(void)+5o
.text$x:00007804
.text$x:00007804 arg_4           = dword ptr  8
.text$x:00007804
.text$x:00007804                 mov     edx, [esp+arg_4]
.text$x:00007808                 lea     eax, [edx+0Ch]
.text$x:0000780B                 mov     ecx, [edx-8]
.text$x:0000780E                 xor     ecx, eax
.text$x:00007810                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007815                 mov     eax, offset __ehfuncinfo$??1_System_error_category@std@@UAE@XZ
.text$x:0000781A                 jmp     ___CxxFrameHandler3
.text$x:0000781A __ehhandler$??1_System_error_category@std@@UAE@XZ endp
.text$x:0000781A
.text$x:0000781A ; ---------------------------------------------------------------------------
.text$x:0000781F                 align 10h
.text$x:0000781F _text$x         ends
.text$x:0000781F
.text$mn:00007820 ; ===========================================================================
.text$mn:00007820
.text$mn:00007820 ; Segment type: Pure code
.text$mn:00007820 ; Segment permissions: Read/Execute
.text$mn:00007820 _text$mn        segment para public 'CODE' use32
.text$mn:00007820                 assume cs:_text$mn
.text$mn:00007820                 ;org 7820h
.text$mn:00007820 ; COMDAT (pick any)
.text$mn:00007820                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007820
.text$mn:00007820 ; =============== S U B R O U T I N E =======================================
.text$mn:00007820
.text$mn:00007820 ; Attributes: bp-based frame
.text$mn:00007820
.text$mn:00007820 ; _DWORD __thiscall std::error_category::~error_category(std::error_category *__hidden this)
.text$mn:00007820                 public ??1error_category@std@@UAE@XZ
.text$mn:00007820 ??1error_category@std@@UAE@XZ proc near ; CODE XREF: __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0+3j
.text$mn:00007820                                         ; std::_Generic_error_category::~_Generic_error_category(void)+37p ...
.text$mn:00007820
.text$mn:00007820 var_4           = dword ptr -4
.text$mn:00007820
.text$mn:00007820                 push    ebp
.text$mn:00007821                 mov     ebp, esp
.text$mn:00007823                 push    ecx
.text$mn:00007824                 mov     [ebp+var_4], ecx
.text$mn:00007827                 mov     eax, [ebp+var_4]
.text$mn:0000782A                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:00007830                 mov     esp, ebp
.text$mn:00007832                 pop     ebp
.text$mn:00007833                 retn
.text$mn:00007833 ??1error_category@std@@UAE@XZ endp
.text$mn:00007833
.text$mn:00007833 _text$mn        ends
.text$mn:00007833
.text$mn:00007834 ; ===========================================================================
.text$mn:00007834
.text$mn:00007834 ; Segment type: Pure code
.text$mn:00007834 ; Segment permissions: Read/Execute
.text$mn:00007834 _text$mn        segment para public 'CODE' use32
.text$mn:00007834                 assume cs:_text$mn
.text$mn:00007834                 ;org 7834h
.text$mn:00007834 ; COMDAT (pick any)
.text$mn:00007834                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007834
.text$mn:00007834 ; =============== S U B R O U T I N E =======================================
.text$mn:00007834
.text$mn:00007834 ; Attributes: bp-based frame
.text$mn:00007834
.text$mn:00007834 ; void *__cdecl operator new(unsigned int, void *)
.text$mn:00007834                 public ??2@YAPAXIPAX@Z
.text$mn:00007834 ??2@YAPAXIPAX@Z proc near               ; CODE XREF: std::allocator<int>::construct<int,int &>(int *,int &)+2Ep
.text$mn:00007834                                         ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)+2Ep ...
.text$mn:00007834
.text$mn:00007834 arg_4           = dword ptr  0Ch
.text$mn:00007834
.text$mn:00007834                 push    ebp
.text$mn:00007835                 mov     ebp, esp
.text$mn:00007837                 mov     eax, [ebp+arg_4]
.text$mn:0000783A                 pop     ebp
.text$mn:0000783B                 retn
.text$mn:0000783B ??2@YAPAXIPAX@Z endp
.text$mn:0000783B
.text$mn:0000783B _text$mn        ends
.text$mn:0000783B
.text$mn:0000783C ; ===========================================================================
.text$mn:0000783C
.text$mn:0000783C ; Segment type: Pure code
.text$mn:0000783C ; Segment permissions: Read/Execute
.text$mn:0000783C _text$mn        segment para public 'CODE' use32
.text$mn:0000783C                 assume cs:_text$mn
.text$mn:0000783C                 ;org 783Ch
.text$mn:0000783C ; COMDAT (pick any)
.text$mn:0000783C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000783C
.text$mn:0000783C ; =============== S U B R O U T I N E =======================================
.text$mn:0000783C
.text$mn:0000783C ; Attributes: bp-based frame
.text$mn:0000783C
.text$mn:0000783C ; void __cdecl operator delete(void *)
.text$mn:0000783C                 public ??3@YAXPAX0@Z
.text$mn:0000783C ??3@YAXPAX0@Z   proc near               ; CODE XREF: __unwindfunclet$??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z$0+8p
.text$mn:0000783C                                         ; __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0+8p ...
.text$mn:0000783C                 push    ebp
.text$mn:0000783D                 mov     ebp, esp
.text$mn:0000783F                 pop     ebp
.text$mn:00007840                 retn
.text$mn:00007840 ??3@YAXPAX0@Z   endp
.text$mn:00007840
.text$mn:00007840 ; ---------------------------------------------------------------------------
.text$mn:00007841                 align 4
.text$mn:00007841 _text$mn        ends
.text$mn:00007841
.text$mn:00007844 ; ===========================================================================
.text$mn:00007844
.text$mn:00007844 ; Segment type: Pure code
.text$mn:00007844 ; Segment permissions: Read/Execute
.text$mn:00007844 _text$mn        segment para public 'CODE' use32
.text$mn:00007844                 assume cs:_text$mn
.text$mn:00007844                 ;org 7844h
.text$mn:00007844 ; COMDAT (pick any)
.text$mn:00007844                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007844
.text$mn:00007844 ; =============== S U B R O U T I N E =======================================
.text$mn:00007844
.text$mn:00007844 ; Attributes: bp-based frame
.text$mn:00007844
.text$mn:00007844 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator=(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:00007844                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.text$mn:00007844 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z proc near
.text$mn:00007844                                         ; CODE XREF: ProjectPanel::initMenus(void)+4FFp
.text$mn:00007844                                         ; ProjectPanel::initMenus(void)+554p ...
.text$mn:00007844
.text$mn:00007844 var_2C          = dword ptr -2Ch
.text$mn:00007844 var_28          = dword ptr -28h
.text$mn:00007844 var_24          = dword ptr -24h
.text$mn:00007844 var_20          = dword ptr -20h
.text$mn:00007844 var_1C          = dword ptr -1Ch
.text$mn:00007844 var_18          = dword ptr -18h
.text$mn:00007844 var_14          = dword ptr -14h
.text$mn:00007844 var_F           = byte ptr -0Fh
.text$mn:00007844 var_E           = byte ptr -0Eh
.text$mn:00007844 var_D           = byte ptr -0Dh
.text$mn:00007844 var_C           = dword ptr -0Ch
.text$mn:00007844 var_4           = dword ptr -4
.text$mn:00007844 arg_0           = dword ptr  8
.text$mn:00007844
.text$mn:00007844                 push    ebp
.text$mn:00007845                 mov     ebp, esp
.text$mn:00007847                 push    0FFFFFFFFh
.text$mn:00007849                 push    offset __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.text$mn:0000784E                 mov     eax, large fs:0
.text$mn:00007854                 push    eax
.text$mn:00007855                 sub     esp, 20h
.text$mn:00007858                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000785D                 xor     eax, ebp
.text$mn:0000785F                 push    eax
.text$mn:00007860                 lea     eax, [ebp+var_C]
.text$mn:00007863                 mov     large fs:0, eax
.text$mn:00007869                 mov     [ebp+var_14], ecx
.text$mn:0000786C                 mov     eax, [ebp+var_14]
.text$mn:0000786F                 cmp     eax, [ebp+arg_0]
.text$mn:00007872                 jz      loc_792B
.text$mn:00007878                 push    0
.text$mn:0000787A                 push    1
.text$mn:0000787C                 mov     ecx, [ebp+var_14]
.text$mn:0000787F                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00007884                 xor     ecx, ecx
.text$mn:00007886                 jz      short loc_789D
.text$mn:00007888                 lea     edx, [ebp+var_D]
.text$mn:0000788B                 push    edx
.text$mn:0000788C                 mov     ecx, [ebp+arg_0]
.text$mn:0000788F                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00007894                 push    eax
.text$mn:00007895                 mov     ecx, [ebp+var_14]
.text$mn:00007898                 call    ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Change_alloc(std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:0000789D
.text$mn:0000789D loc_789D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+42j
.text$mn:0000789D                 lea     eax, [ebp+var_E]
.text$mn:000078A0                 push    eax
.text$mn:000078A1                 mov     ecx, [ebp+arg_0]
.text$mn:000078A4                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000078A9                 push    eax
.text$mn:000078AA                 lea     ecx, [ebp+var_F]
.text$mn:000078AD                 push    ecx
.text$mn:000078AE                 mov     ecx, [ebp+var_14]
.text$mn:000078B1                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000078B6                 push    eax
.text$mn:000078B7                 call    ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:000078BC                 add     esp, 8
.text$mn:000078BF                 movzx   edx, al
.text$mn:000078C2                 test    edx, edx
.text$mn:000078C4                 jz      short loc_7916
.text$mn:000078C6                 sub     esp, 0Ch
.text$mn:000078C9                 mov     eax, esp
.text$mn:000078CB                 mov     [ebp+var_20], esp
.text$mn:000078CE                 push    eax
.text$mn:000078CF                 mov     ecx, [ebp+arg_0]
.text$mn:000078D2                 call    ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)
.text$mn:000078D7                 mov     [ebp+var_18], eax
.text$mn:000078DA                 mov     ecx, [ebp+var_18]
.text$mn:000078DD                 mov     [ebp+var_24], ecx
.text$mn:000078E0                 mov     [ebp+var_4], 0
.text$mn:000078E7                 sub     esp, 0Ch
.text$mn:000078EA                 mov     edx, esp
.text$mn:000078EC                 mov     [ebp+var_28], esp
.text$mn:000078EF                 push    edx
.text$mn:000078F0                 mov     ecx, [ebp+arg_0]
.text$mn:000078F3                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:000078F8                 mov     [ebp+var_1C], eax
.text$mn:000078FB                 mov     eax, [ebp+var_1C]
.text$mn:000078FE                 mov     [ebp+var_2C], eax
.text$mn:00007901                 mov     byte ptr [ebp+var_4], 1
.text$mn:00007905                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000790C                 mov     ecx, [ebp+var_14]
.text$mn:0000790F                 call    ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:00007914                 jmp     short loc_792B
.text$mn:00007916 ; ---------------------------------------------------------------------------
.text$mn:00007916
.text$mn:00007916 loc_7916:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+80j
.text$mn:00007916                 mov     ecx, [ebp+arg_0]
.text$mn:00007919                 push    ecx
.text$mn:0000791A                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000791F                 add     esp, 4
.text$mn:00007922                 push    eax
.text$mn:00007923                 mov     ecx, [ebp+var_14]
.text$mn:00007926                 call    ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000792B
.text$mn:0000792B loc_792B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Ej
.text$mn:0000792B                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+D0j
.text$mn:0000792B                 mov     eax, [ebp+var_14]
.text$mn:0000792E                 mov     ecx, [ebp+var_C]
.text$mn:00007931                 mov     large fs:0, ecx
.text$mn:00007938                 pop     ecx
.text$mn:00007939                 mov     esp, ebp
.text$mn:0000793B                 pop     ebp
.text$mn:0000793C                 retn    4
.text$mn:0000793C ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z endp
.text$mn:0000793C
.text$mn:0000793C ; ---------------------------------------------------------------------------
.text$mn:0000793F                 align 10h
.text$mn:0000793F _text$mn        ends
.text$mn:0000793F
.text$x:00007940 ; ===========================================================================
.text$x:00007940
.text$x:00007940 ; Segment type: Pure code
.text$x:00007940 ; Segment permissions: Read/Execute
.text$x:00007940 _text$x         segment para public 'CODE' use32
.text$x:00007940                 assume cs:_text$x
.text$x:00007940                 ;org 7940h
.text$x:00007940 ; COMDAT (pick associative to section at 7844)
.text$x:00007940                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007940
.text$x:00007940 ; =============== S U B R O U T I N E =======================================
.text$x:00007940
.text$x:00007940
.text$x:00007940 __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$0 proc near
.text$x:00007940                                         ; DATA XREF: .xdata$x:0000C3ECo
.text$x:00007940                 mov     ecx, [ebp-20h]
.text$x:00007943                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00007943 __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$0 endp
.text$x:00007943
.text$x:00007948
.text$x:00007948 ; =============== S U B R O U T I N E =======================================
.text$x:00007948
.text$x:00007948
.text$x:00007948 __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$1 proc near
.text$x:00007948                                         ; DATA XREF: .xdata$x:0000C3F4o
.text$x:00007948                 mov     ecx, [ebp-28h]
.text$x:0000794B                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000794B __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$1 endp
.text$x:0000794B
.text$x:00007950
.text$x:00007950 ; =============== S U B R O U T I N E =======================================
.text$x:00007950
.text$x:00007950
.text$x:00007950 __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z proc near
.text$x:00007950                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5o
.text$x:00007950
.text$x:00007950 arg_4           = dword ptr  8
.text$x:00007950
.text$x:00007950                 mov     edx, [esp+arg_4]
.text$x:00007954                 lea     eax, [edx+0Ch]
.text$x:00007957                 mov     ecx, [edx-24h]
.text$x:0000795A                 xor     ecx, eax
.text$x:0000795C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007961                 mov     eax, offset __ehfuncinfo$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.text$x:00007966                 jmp     ___CxxFrameHandler3
.text$x:00007966 __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z endp
.text$x:00007966
.text$x:00007966 ; ---------------------------------------------------------------------------
.text$x:0000796B                 align 4
.text$x:0000796B _text$x         ends
.text$x:0000796B
.text$mn:0000796C ; ===========================================================================
.text$mn:0000796C
.text$mn:0000796C ; Segment type: Pure code
.text$mn:0000796C ; Segment permissions: Read/Execute
.text$mn:0000796C _text$mn        segment para public 'CODE' use32
.text$mn:0000796C                 assume cs:_text$mn
.text$mn:0000796C                 ;org 796Ch
.text$mn:0000796C ; COMDAT (pick any)
.text$mn:0000796C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000796C
.text$mn:0000796C ; =============== S U B R O U T I N E =======================================
.text$mn:0000796C
.text$mn:0000796C ; Attributes: bp-based frame
.text$mn:0000796C
.text$mn:0000796C ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator=(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:0000796C                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
.text$mn:0000796C ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z proc near
.text$mn:0000796C                                         ; CODE XREF: ProjectPanel::addFilesFromDirectory(_TREEITEM *)+207p
.text$mn:0000796C                                         ; ProjectPanel::popupMenuCmd(int)+98Bp
.text$mn:0000796C
.text$mn:0000796C var_8           = dword ptr -8
.text$mn:0000796C var_3           = byte ptr -3
.text$mn:0000796C var_2           = byte ptr -2
.text$mn:0000796C var_1           = byte ptr -1
.text$mn:0000796C arg_0           = dword ptr  8
.text$mn:0000796C
.text$mn:0000796C                 push    ebp
.text$mn:0000796D                 mov     ebp, esp
.text$mn:0000796F                 sub     esp, 8
.text$mn:00007972                 mov     [ebp+var_8], ecx
.text$mn:00007975                 mov     eax, [ebp+var_8]
.text$mn:00007978                 cmp     eax, [ebp+arg_0]
.text$mn:0000797B                 jz      short loc_79D7
.text$mn:0000797D                 lea     ecx, [ebp+var_1]
.text$mn:00007980                 push    ecx
.text$mn:00007981                 mov     ecx, [ebp+arg_0]
.text$mn:00007984                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00007989                 push    eax
.text$mn:0000798A                 lea     edx, [ebp+var_2]
.text$mn:0000798D                 push    edx
.text$mn:0000798E                 mov     ecx, [ebp+var_8]
.text$mn:00007991                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00007996                 push    eax
.text$mn:00007997                 call    ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:0000799C                 add     esp, 8
.text$mn:0000799F                 movzx   eax, al
.text$mn:000079A2                 test    eax, eax
.text$mn:000079A4                 jz      short loc_79CB
.text$mn:000079A6                 xor     ecx, ecx
.text$mn:000079A8                 jz      short loc_79CB
.text$mn:000079AA                 push    0
.text$mn:000079AC                 push    1
.text$mn:000079AE                 mov     ecx, [ebp+var_8]
.text$mn:000079B1                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000079B6                 lea     edx, [ebp+var_3]
.text$mn:000079B9                 push    edx
.text$mn:000079BA                 mov     ecx, [ebp+arg_0]
.text$mn:000079BD                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000079C2                 push    eax
.text$mn:000079C3                 mov     ecx, [ebp+var_8]
.text$mn:000079C6                 call    ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Change_alloc(std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:000079CB
.text$mn:000079CB loc_79CB:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+38j
.text$mn:000079CB                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+3Cj
.text$mn:000079CB                 mov     eax, [ebp+arg_0]
.text$mn:000079CE                 push    eax
.text$mn:000079CF                 mov     ecx, [ebp+var_8]
.text$mn:000079D2                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000079D7
.text$mn:000079D7 loc_79D7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Fj
.text$mn:000079D7                 mov     eax, [ebp+var_8]
.text$mn:000079DA                 mov     esp, ebp
.text$mn:000079DC                 pop     ebp
.text$mn:000079DD                 retn    4
.text$mn:000079DD ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z endp
.text$mn:000079DD
.text$mn:000079DD _text$mn        ends
.text$mn:000079DD
.text$mn:000079E0 ; ===========================================================================
.text$mn:000079E0
.text$mn:000079E0 ; Segment type: Pure code
.text$mn:000079E0 ; Segment permissions: Read/Execute
.text$mn:000079E0 _text$mn        segment para public 'CODE' use32
.text$mn:000079E0                 assume cs:_text$mn
.text$mn:000079E0                 ;org 79E0h
.text$mn:000079E0 ; COMDAT (pick any)
.text$mn:000079E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000079E0
.text$mn:000079E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000079E0
.text$mn:000079E0 ; Attributes: bp-based frame
.text$mn:000079E0
.text$mn:000079E0 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t *Str)
.text$mn:000079E0                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:000079E0 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:000079E0                                         ; CODE XREF: ProjectPanel::newWorkSpace(void)+91p
.text$mn:000079E0                                         ; ProjectPanel::openWorkSpace(wchar_t const *)+F1p ...
.text$mn:000079E0
.text$mn:000079E0 var_4           = dword ptr -4
.text$mn:000079E0 Str             = dword ptr  8
.text$mn:000079E0
.text$mn:000079E0                 push    ebp
.text$mn:000079E1                 mov     ebp, esp
.text$mn:000079E3                 push    ecx
.text$mn:000079E4                 mov     [ebp+var_4], ecx
.text$mn:000079E7                 mov     eax, [ebp+Str]
.text$mn:000079EA                 push    eax             ; Str
.text$mn:000079EB                 mov     ecx, [ebp+var_4]
.text$mn:000079EE                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:000079F3                 mov     esp, ebp
.text$mn:000079F5                 pop     ebp
.text$mn:000079F6                 retn    4
.text$mn:000079F6 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:000079F6
.text$mn:000079F6 ; ---------------------------------------------------------------------------
.text$mn:000079F9                 align 4
.text$mn:000079F9 _text$mn        ends
.text$mn:000079F9
.text$mn:000079FC ; ===========================================================================
.text$mn:000079FC
.text$mn:000079FC ; Segment type: Pure code
.text$mn:000079FC ; Segment permissions: Read/Execute
.text$mn:000079FC _text$mn        segment para public 'CODE' use32
.text$mn:000079FC                 assume cs:_text$mn
.text$mn:000079FC                 ;org 79FCh
.text$mn:000079FC ; COMDAT (pick any)
.text$mn:000079FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000079FC
.text$mn:000079FC ; =============== S U B R O U T I N E =======================================
.text$mn:000079FC
.text$mn:000079FC ; Attributes: bp-based frame
.text$mn:000079FC
.text$mn:000079FC ; public: struct std::_Iterator_base12 & __thiscall std::_Iterator_base12::operator=(struct std::_Iterator_base12 const &)
.text$mn:000079FC                 public ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$mn:000079FC ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
.text$mn:000079FC                                         ; CODE XREF: std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)+21p
.text$mn:000079FC
.text$mn:000079FC var_14          = byte ptr -14h
.text$mn:000079FC var_10          = dword ptr -10h
.text$mn:000079FC var_C           = dword ptr -0Ch
.text$mn:000079FC var_4           = dword ptr -4
.text$mn:000079FC arg_0           = dword ptr  8
.text$mn:000079FC
.text$mn:000079FC                 push    ebp
.text$mn:000079FD                 mov     ebp, esp
.text$mn:000079FF                 push    0FFFFFFFFh
.text$mn:00007A01                 push    offset __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$mn:00007A06                 mov     eax, large fs:0
.text$mn:00007A0C                 push    eax
.text$mn:00007A0D                 sub     esp, 8
.text$mn:00007A10                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007A15                 xor     eax, ebp
.text$mn:00007A17                 push    eax
.text$mn:00007A18                 lea     eax, [ebp+var_C]
.text$mn:00007A1B                 mov     large fs:0, eax
.text$mn:00007A21                 mov     [ebp+var_10], ecx
.text$mn:00007A24                 mov     eax, [ebp+var_10]
.text$mn:00007A27                 mov     ecx, [ebp+arg_0]
.text$mn:00007A2A                 mov     edx, [eax]
.text$mn:00007A2C                 cmp     edx, [ecx]
.text$mn:00007A2E                 jnz     short loc_7A32
.text$mn:00007A30                 jmp     short loc_7A74
.text$mn:00007A32 ; ---------------------------------------------------------------------------
.text$mn:00007A32
.text$mn:00007A32 loc_7A32:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+32j
.text$mn:00007A32                 mov     eax, [ebp+arg_0]
.text$mn:00007A35                 cmp     dword ptr [eax], 0
.text$mn:00007A38                 jz      short loc_7A4C
.text$mn:00007A3A                 mov     ecx, [ebp+arg_0]
.text$mn:00007A3D                 mov     edx, [ecx]
.text$mn:00007A3F                 mov     eax, [edx]
.text$mn:00007A41                 push    eax             ; struct std::_Container_base12 *
.text$mn:00007A42                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007A45                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:00007A4A                 jmp     short loc_7A74
.text$mn:00007A4C ; ---------------------------------------------------------------------------
.text$mn:00007A4C
.text$mn:00007A4C loc_7A4C:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+3Cj
.text$mn:00007A4C                 push    3               ; int
.text$mn:00007A4E                 lea     ecx, [ebp+var_14] ; this
.text$mn:00007A51                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00007A56                 mov     [ebp+var_4], 0
.text$mn:00007A5D                 mov     ecx, [ebp+var_10] ; this
.text$mn:00007A60                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00007A65                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007A6C                 lea     ecx, [ebp+var_14] ; this
.text$mn:00007A6F                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00007A74
.text$mn:00007A74 loc_7A74:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+34j
.text$mn:00007A74                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+4Ej
.text$mn:00007A74                 mov     eax, [ebp+var_10]
.text$mn:00007A77                 mov     ecx, [ebp+var_C]
.text$mn:00007A7A                 mov     large fs:0, ecx
.text$mn:00007A81                 pop     ecx
.text$mn:00007A82                 mov     esp, ebp
.text$mn:00007A84                 pop     ebp
.text$mn:00007A85                 retn    4
.text$mn:00007A85 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z endp
.text$mn:00007A85
.text$mn:00007A85 _text$mn        ends
.text$mn:00007A85
.text$x:00007A88 ; ===========================================================================
.text$x:00007A88
.text$x:00007A88 ; Segment type: Pure code
.text$x:00007A88 ; Segment permissions: Read/Execute
.text$x:00007A88 _text$x         segment para public 'CODE' use32
.text$x:00007A88                 assume cs:_text$x
.text$x:00007A88                 ;org 7A88h
.text$x:00007A88 ; COMDAT (pick associative to section at 79FC)
.text$x:00007A88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007A88
.text$x:00007A88 ; =============== S U B R O U T I N E =======================================
.text$x:00007A88
.text$x:00007A88
.text$x:00007A88 __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 proc near
.text$x:00007A88                                         ; DATA XREF: .xdata$x:0000BEE0o
.text$x:00007A88                 lea     ecx, [ebp-14h]  ; this
.text$x:00007A8B                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00007A8B __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 endp
.text$x:00007A8B
.text$x:00007A90
.text$x:00007A90 ; =============== S U B R O U T I N E =======================================
.text$x:00007A90
.text$x:00007A90
.text$x:00007A90 __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
.text$x:00007A90                                         ; DATA XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+5o
.text$x:00007A90
.text$x:00007A90 arg_4           = dword ptr  8
.text$x:00007A90
.text$x:00007A90                 mov     edx, [esp+arg_4]
.text$x:00007A94                 lea     eax, [edx+0Ch]
.text$x:00007A97                 mov     ecx, [edx-0Ch]
.text$x:00007A9A                 xor     ecx, eax
.text$x:00007A9C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007AA1                 mov     eax, offset __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$x:00007AA6                 jmp     ___CxxFrameHandler3
.text$x:00007AA6 __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z endp
.text$x:00007AA6
.text$x:00007AA6 ; ---------------------------------------------------------------------------
.text$x:00007AAB                 align 4
.text$x:00007AAB _text$x         ends
.text$x:00007AAB
.text$mn:00007AAC ; ===========================================================================
.text$mn:00007AAC
.text$mn:00007AAC ; Segment type: Pure code
.text$mn:00007AAC ; Segment permissions: Read/Execute
.text$mn:00007AAC _text$mn        segment para public 'CODE' use32
.text$mn:00007AAC                 assume cs:_text$mn
.text$mn:00007AAC                 ;org 7AACh
.text$mn:00007AAC ; COMDAT (pick any)
.text$mn:00007AAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007AAC
.text$mn:00007AAC ; =============== S U B R O U T I N E =======================================
.text$mn:00007AAC
.text$mn:00007AAC ; Attributes: bp-based frame
.text$mn:00007AAC
.text$mn:00007AAC ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_Iterator_base12 *)
.text$mn:00007AAC                 public ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z
.text$mn:00007AAC ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z proc near
.text$mn:00007AAC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+39p
.text$mn:00007AAC
.text$mn:00007AAC var_8           = dword ptr -8
.text$mn:00007AAC var_4           = dword ptr -4
.text$mn:00007AAC arg_0           = dword ptr  8
.text$mn:00007AAC
.text$mn:00007AAC                 push    ebp
.text$mn:00007AAD                 mov     ebp, esp
.text$mn:00007AAF                 sub     esp, 8
.text$mn:00007AB2                 mov     [ebp+var_4], ecx
.text$mn:00007AB5                 mov     eax, [ebp+arg_0]
.text$mn:00007AB8                 push    eax             ; std::_Iterator_base12 *
.text$mn:00007AB9                 mov     ecx, [ebp+var_4]
.text$mn:00007ABC                 call    ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00007AC1                 mov     ecx, [ebp+var_4]
.text$mn:00007AC4                 mov     edx, [ebp+arg_0]
.text$mn:00007AC7                 mov     eax, [ecx+8]
.text$mn:00007ACA                 cmp     eax, [edx+8]
.text$mn:00007ACD                 jnz     short loc_7AD8
.text$mn:00007ACF                 mov     [ebp+var_8], 1
.text$mn:00007AD6                 jmp     short loc_7ADF
.text$mn:00007AD8 ; ---------------------------------------------------------------------------
.text$mn:00007AD8
.text$mn:00007AD8 loc_7AD8:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+21j
.text$mn:00007AD8                 mov     [ebp+var_8], 0
.text$mn:00007ADF
.text$mn:00007ADF loc_7ADF:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+2Aj
.text$mn:00007ADF                 mov     al, byte ptr [ebp+var_8]
.text$mn:00007AE2                 mov     esp, ebp
.text$mn:00007AE4                 pop     ebp
.text$mn:00007AE5                 retn    4
.text$mn:00007AE5 ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z endp
.text$mn:00007AE5
.text$mn:00007AE5 _text$mn        ends
.text$mn:00007AE5
.text$mn:00007AE8 ; ===========================================================================
.text$mn:00007AE8
.text$mn:00007AE8 ; Segment type: Pure code
.text$mn:00007AE8 ; Segment permissions: Read/Execute
.text$mn:00007AE8 _text$mn        segment para public 'CODE' use32
.text$mn:00007AE8                 assume cs:_text$mn
.text$mn:00007AE8                 ;org 7AE8h
.text$mn:00007AE8 ; COMDAT (pick any)
.text$mn:00007AE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007AE8
.text$mn:00007AE8 ; =============== S U B R O U T I N E =======================================
.text$mn:00007AE8
.text$mn:00007AE8 ; Attributes: bp-based frame
.text$mn:00007AE8
.text$mn:00007AE8 ; public: bool __thiscall std::error_category::operator==(class std::error_category const &)const
.text$mn:00007AE8                 public ??8error_category@std@@QBE_NABV01@@Z
.text$mn:00007AE8 ??8error_category@std@@QBE_NABV01@@Z proc near
.text$mn:00007AE8                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+1Dp
.text$mn:00007AE8                                         ; std::error_category::equivalent(std::error_code const &,int)+15p
.text$mn:00007AE8
.text$mn:00007AE8 var_8           = dword ptr -8
.text$mn:00007AE8 var_4           = dword ptr -4
.text$mn:00007AE8 arg_0           = dword ptr  8
.text$mn:00007AE8
.text$mn:00007AE8                 push    ebp
.text$mn:00007AE9                 mov     ebp, esp
.text$mn:00007AEB                 sub     esp, 8
.text$mn:00007AEE                 mov     [ebp+var_8], ecx
.text$mn:00007AF1                 mov     eax, [ebp+var_8]
.text$mn:00007AF4                 cmp     eax, [ebp+arg_0]
.text$mn:00007AF7                 jnz     short loc_7B02
.text$mn:00007AF9                 mov     [ebp+var_4], 1
.text$mn:00007B00                 jmp     short loc_7B09
.text$mn:00007B02 ; ---------------------------------------------------------------------------
.text$mn:00007B02
.text$mn:00007B02 loc_7B02:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+Fj
.text$mn:00007B02                 mov     [ebp+var_4], 0
.text$mn:00007B09
.text$mn:00007B09 loc_7B09:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+18j
.text$mn:00007B09                 mov     al, byte ptr [ebp+var_4]
.text$mn:00007B0C                 mov     esp, ebp
.text$mn:00007B0E                 pop     ebp
.text$mn:00007B0F                 retn    4
.text$mn:00007B0F ??8error_category@std@@QBE_NABV01@@Z endp
.text$mn:00007B0F
.text$mn:00007B0F ; ---------------------------------------------------------------------------
.text$mn:00007B12                 align 4
.text$mn:00007B12 _text$mn        ends
.text$mn:00007B12
.text$mn:00007B14 ; ===========================================================================
.text$mn:00007B14
.text$mn:00007B14 ; Segment type: Pure code
.text$mn:00007B14 ; Segment permissions: Read/Execute
.text$mn:00007B14 _text$mn        segment para public 'CODE' use32
.text$mn:00007B14                 assume cs:_text$mn
.text$mn:00007B14                 ;org 7B14h
.text$mn:00007B14 ; COMDAT (pick any)
.text$mn:00007B14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B14
.text$mn:00007B14 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B14
.text$mn:00007B14 ; Attributes: bp-based frame
.text$mn:00007B14
.text$mn:00007B14 ; int __stdcall std::error_condition::operator==(std::error_condition *)
.text$mn:00007B14                 public ??8error_condition@std@@QBE_NABV01@@Z
.text$mn:00007B14 ??8error_condition@std@@QBE_NABV01@@Z proc near
.text$mn:00007B14                                         ; CODE XREF: std::error_category::equivalent(int,std::error_condition const &)+24p
.text$mn:00007B14
.text$mn:00007B14 var_8           = dword ptr -8
.text$mn:00007B14 var_4           = dword ptr -4
.text$mn:00007B14 arg_0           = dword ptr  8
.text$mn:00007B14
.text$mn:00007B14                 push    ebp
.text$mn:00007B15                 mov     ebp, esp
.text$mn:00007B17                 sub     esp, 8
.text$mn:00007B1A                 push    esi
.text$mn:00007B1B                 mov     [ebp+var_4], ecx
.text$mn:00007B1E                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00007B21                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:00007B26                 push    eax
.text$mn:00007B27                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007B2A                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:00007B2F                 mov     ecx, eax
.text$mn:00007B31                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:00007B36                 movzx   eax, al
.text$mn:00007B39                 test    eax, eax
.text$mn:00007B3B                 jz      short loc_7B5C
.text$mn:00007B3D                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007B40                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:00007B45                 mov     esi, eax
.text$mn:00007B47                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00007B4A                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:00007B4F                 cmp     esi, eax
.text$mn:00007B51                 jnz     short loc_7B5C
.text$mn:00007B53                 mov     [ebp+var_8], 1
.text$mn:00007B5A                 jmp     short loc_7B63
.text$mn:00007B5C ; ---------------------------------------------------------------------------
.text$mn:00007B5C
.text$mn:00007B5C loc_7B5C:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+27j
.text$mn:00007B5C                                         ; std::error_condition::operator==(std::error_condition const &)+3Dj
.text$mn:00007B5C                 mov     [ebp+var_8], 0
.text$mn:00007B63
.text$mn:00007B63 loc_7B63:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+46j
.text$mn:00007B63                 mov     al, byte ptr [ebp+var_8]
.text$mn:00007B66                 pop     esi
.text$mn:00007B67                 mov     esp, ebp
.text$mn:00007B69                 pop     ebp
.text$mn:00007B6A                 retn    4
.text$mn:00007B6A ??8error_condition@std@@QBE_NABV01@@Z endp
.text$mn:00007B6A
.text$mn:00007B6A ; ---------------------------------------------------------------------------
.text$mn:00007B6D                 align 10h
.text$mn:00007B6D _text$mn        ends
.text$mn:00007B6D
.text$mn:00007B70 ; ===========================================================================
.text$mn:00007B70
.text$mn:00007B70 ; Segment type: Pure code
.text$mn:00007B70 ; Segment permissions: Read/Execute
.text$mn:00007B70 _text$mn        segment para public 'CODE' use32
.text$mn:00007B70                 assume cs:_text$mn
.text$mn:00007B70                 ;org 7B70h
.text$mn:00007B70 ; COMDAT (pick any)
.text$mn:00007B70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B70
.text$mn:00007B70 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B70
.text$mn:00007B70 ; Attributes: bp-based frame
.text$mn:00007B70
.text$mn:00007B70 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::operator[](unsigned int)
.text$mn:00007B70                 public ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z
.text$mn:00007B70 ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z proc near
.text$mn:00007B70                                         ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+287p
.text$mn:00007B70                                         ; ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+2B1p
.text$mn:00007B70
.text$mn:00007B70 var_4           = dword ptr -4
.text$mn:00007B70 arg_0           = dword ptr  8
.text$mn:00007B70
.text$mn:00007B70                 push    ebp
.text$mn:00007B71                 mov     ebp, esp
.text$mn:00007B73                 push    ecx
.text$mn:00007B74                 mov     [ebp+var_4], ecx
.text$mn:00007B77                 mov     ecx, [ebp+var_4]
.text$mn:00007B7A                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:00007B7F                 cmp     eax, [ebp+arg_0]
.text$mn:00007B82                 ja      short loc_7BEC
.text$mn:00007B84                 push    4B1h            ; unsigned int
.text$mn:00007B89                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007B8E                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:00007B93                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00007B98                 add     esp, 0Ch
.text$mn:00007B9B                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:00007BA0                 test    eax, eax
.text$mn:00007BA2                 jz      short loc_7BA8
.text$mn:00007BA4                 xor     ecx, ecx
.text$mn:00007BA6                 jnz     short loc_7BCE
.text$mn:00007BA8
.text$mn:00007BA8 loc_7BA8:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+32j
.text$mn:00007BA8                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00007BAD                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:00007BB2                 push    0
.text$mn:00007BB4                 push    4B2h
.text$mn:00007BB9                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007BBE                 push    2
.text$mn:00007BC0                 call    __CrtDbgReportW
.text$mn:00007BC5                 add     esp, 18h
.text$mn:00007BC8                 cmp     eax, 1
.text$mn:00007BCB                 jnz     short loc_7BCE
.text$mn:00007BCD                 int     3               ; Trap to Debugger
.text$mn:00007BCE
.text$mn:00007BCE loc_7BCE:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+36j
.text$mn:00007BCE                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+5Bj
.text$mn:00007BCE                 push    0
.text$mn:00007BD0                 push    4B2h
.text$mn:00007BD5                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007BDA                 push    offset ??_C@_1BOI@OCMBMPPD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@ ; "std::vector<class std::basic_string<wch"...
.text$mn:00007BDF                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:00007BE4                 call    __invalid_parameter
.text$mn:00007BE9                 add     esp, 14h
.text$mn:00007BEC
.text$mn:00007BEC loc_7BEC:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+12j
.text$mn:00007BEC                 imul    eax, [ebp+arg_0], 1Ch
.text$mn:00007BF0                 mov     ecx, [ebp+var_4]
.text$mn:00007BF3                 add     eax, [ecx+4]
.text$mn:00007BF6                 mov     esp, ebp
.text$mn:00007BF8                 pop     ebp
.text$mn:00007BF9                 retn    4
.text$mn:00007BF9 ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z endp
.text$mn:00007BF9
.text$mn:00007BF9 _text$mn        ends
.text$mn:00007BF9
.text$mn:00007BFC ; ===========================================================================
.text$mn:00007BFC
.text$mn:00007BFC ; Segment type: Pure code
.text$mn:00007BFC ; Segment permissions: Read/Execute
.text$mn:00007BFC _text$mn        segment para public 'CODE' use32
.text$mn:00007BFC                 assume cs:_text$mn
.text$mn:00007BFC                 ;org 7BFCh
.text$mn:00007BFC ; COMDAT (pick any)
.text$mn:00007BFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007BFC
.text$mn:00007BFC ; =============== S U B R O U T I N E =======================================
.text$mn:00007BFC
.text$mn:00007BFC ; Attributes: bp-based frame
.text$mn:00007BFC
.text$mn:00007BFC ; public: wchar_t const & __thiscall std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::operator*(void)const
.text$mn:00007BFC                 public ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ
.text$mn:00007BFC ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ proc near
.text$mn:00007BFC                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+Ap
.text$mn:00007BFC
.text$mn:00007BFC var_4           = dword ptr -4
.text$mn:00007BFC
.text$mn:00007BFC                 push    ebp
.text$mn:00007BFD                 mov     ebp, esp
.text$mn:00007BFF                 push    ecx
.text$mn:00007C00                 push    esi
.text$mn:00007C01                 mov     [ebp+var_4], ecx
.text$mn:00007C04                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007C07                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00007C0C                 test    eax, eax
.text$mn:00007C0E                 jz      short loc_7C57
.text$mn:00007C10                 mov     eax, [ebp+var_4]
.text$mn:00007C13                 cmp     dword ptr [eax+8], 0
.text$mn:00007C17                 jz      short loc_7C57
.text$mn:00007C19                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007C1C                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00007C21                 mov     ecx, eax
.text$mn:00007C23                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00007C28                 mov     ecx, [ebp+var_4]
.text$mn:00007C2B                 cmp     [ecx+8], eax
.text$mn:00007C2E                 jb      short loc_7C57
.text$mn:00007C30                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007C33                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00007C38                 mov     ecx, eax
.text$mn:00007C3A                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00007C3F                 mov     esi, eax
.text$mn:00007C41                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007C44                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00007C49                 mov     edx, [eax+14h]
.text$mn:00007C4C                 lea     eax, [esi+edx*2]
.text$mn:00007C4F                 mov     ecx, [ebp+var_4]
.text$mn:00007C52                 cmp     eax, [ecx+8]
.text$mn:00007C55                 ja      short loc_7CB6
.text$mn:00007C57
.text$mn:00007C57 loc_7C57:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+12j
.text$mn:00007C57                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+1Bj ...
.text$mn:00007C57                 push    4Fh ; 'O'       ; unsigned int
.text$mn:00007C59                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007C5E                 push    offset ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ ; "string iterator not dereferencable"
.text$mn:00007C63                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00007C68                 add     esp, 0Ch
.text$mn:00007C6B                 mov     edx, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:00007C70                 test    edx, edx
.text$mn:00007C72                 jz      short loc_7C78
.text$mn:00007C74                 xor     eax, eax
.text$mn:00007C76                 jnz     short loc_7C9B
.text$mn:00007C78
.text$mn:00007C78 loc_7C78:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+76j
.text$mn:00007C78                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00007C7D                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:00007C82                 push    0
.text$mn:00007C84                 push    50h ; 'P'
.text$mn:00007C86                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007C8B                 push    2
.text$mn:00007C8D                 call    __CrtDbgReportW
.text$mn:00007C92                 add     esp, 18h
.text$mn:00007C95                 cmp     eax, 1
.text$mn:00007C98                 jnz     short loc_7C9B
.text$mn:00007C9A                 int     3               ; Trap to Debugger
.text$mn:00007C9B
.text$mn:00007C9B loc_7C9B:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+7Aj
.text$mn:00007C9B                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+9Cj
.text$mn:00007C9B                 push    0
.text$mn:00007C9D                 push    50h ; 'P'
.text$mn:00007C9F                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007CA4                 push    offset ??_C@_1MM@BFHGHMKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; "std::_String_const_iterator<class std::"...
.text$mn:00007CA9                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:00007CAE                 call    __invalid_parameter
.text$mn:00007CB3                 add     esp, 14h
.text$mn:00007CB6
.text$mn:00007CB6 loc_7CB6:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+59j
.text$mn:00007CB6                 mov     edx, [ebp+var_4]
.text$mn:00007CB9                 mov     eax, [edx+8]
.text$mn:00007CBC                 pop     esi
.text$mn:00007CBD                 mov     esp, ebp
.text$mn:00007CBF                 pop     ebp
.text$mn:00007CC0                 retn
.text$mn:00007CC0 ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ endp
.text$mn:00007CC0
.text$mn:00007CC0 ; ---------------------------------------------------------------------------
.text$mn:00007CC1                 align 4
.text$mn:00007CC1 _text$mn        ends
.text$mn:00007CC1
.text$mn:00007CC4 ; ===========================================================================
.text$mn:00007CC4
.text$mn:00007CC4 ; Segment type: Pure code
.text$mn:00007CC4 ; Segment permissions: Read/Execute
.text$mn:00007CC4 _text$mn        segment para public 'CODE' use32
.text$mn:00007CC4                 assume cs:_text$mn
.text$mn:00007CC4                 ;org 7CC4h
.text$mn:00007CC4 ; COMDAT (pick any)
.text$mn:00007CC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007CC4
.text$mn:00007CC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007CC4
.text$mn:00007CC4 ; Attributes: bp-based frame
.text$mn:00007CC4
.text$mn:00007CC4 ; public: wchar_t & __thiscall std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::operator*(void)const
.text$mn:00007CC4                 public ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ
.text$mn:00007CC4 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ proc near
.text$mn:00007CC4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+135p
.text$mn:00007CC4
.text$mn:00007CC4 var_4           = dword ptr -4
.text$mn:00007CC4
.text$mn:00007CC4                 push    ebp
.text$mn:00007CC5                 mov     ebp, esp
.text$mn:00007CC7                 push    ecx
.text$mn:00007CC8                 mov     [ebp+var_4], ecx
.text$mn:00007CCB                 mov     ecx, [ebp+var_4]
.text$mn:00007CCE                 call    ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)
.text$mn:00007CD3                 mov     esp, ebp
.text$mn:00007CD5                 pop     ebp
.text$mn:00007CD6                 retn
.text$mn:00007CD6 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ endp
.text$mn:00007CD6
.text$mn:00007CD6 ; ---------------------------------------------------------------------------
.text$mn:00007CD7                 align 4
.text$mn:00007CD7 _text$mn        ends
.text$mn:00007CD7
.text$mn:00007CD8 ; ===========================================================================
.text$mn:00007CD8
.text$mn:00007CD8 ; Segment type: Pure code
.text$mn:00007CD8 ; Segment permissions: Read/Execute
.text$mn:00007CD8 _text$mn        segment para public 'CODE' use32
.text$mn:00007CD8                 assume cs:_text$mn
.text$mn:00007CD8                 ;org 7CD8h
.text$mn:00007CD8 ; COMDAT (pick any)
.text$mn:00007CD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007CD8
.text$mn:00007CD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00007CD8
.text$mn:00007CD8 ; Attributes: bp-based frame
.text$mn:00007CD8
.text$mn:00007CD8 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_Iterator_base12 *)
.text$mn:00007CD8                 public ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z
.text$mn:00007CD8 ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z proc near
.text$mn:00007CD8                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+4Bp
.text$mn:00007CD8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+42p
.text$mn:00007CD8
.text$mn:00007CD8 var_4           = dword ptr -4
.text$mn:00007CD8 arg_0           = dword ptr  8
.text$mn:00007CD8
.text$mn:00007CD8                 push    ebp
.text$mn:00007CD9                 mov     ebp, esp
.text$mn:00007CDB                 push    ecx
.text$mn:00007CDC                 mov     [ebp+var_4], ecx
.text$mn:00007CDF                 mov     eax, [ebp+arg_0]
.text$mn:00007CE2                 push    eax             ; std::_Iterator_base12 *
.text$mn:00007CE3                 mov     ecx, [ebp+var_4]
.text$mn:00007CE6                 call    ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00007CEB                 mov     ecx, [ebp+var_4]
.text$mn:00007CEE                 mov     edx, [ebp+arg_0]
.text$mn:00007CF1                 mov     eax, [ecx+8]
.text$mn:00007CF4                 sub     eax, [edx+8]
.text$mn:00007CF7                 sar     eax, 1
.text$mn:00007CF9                 mov     esp, ebp
.text$mn:00007CFB                 pop     ebp
.text$mn:00007CFC                 retn    4
.text$mn:00007CFC ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z endp
.text$mn:00007CFC
.text$mn:00007CFC ; ---------------------------------------------------------------------------
.text$mn:00007CFF                 align 10h
.text$mn:00007CFF _text$mn        ends
.text$mn:00007CFF
.text$mn:00007D00 ; ===========================================================================
.text$mn:00007D00
.text$mn:00007D00 ; Segment type: Pure code
.text$mn:00007D00 ; Segment permissions: Read/Execute
.text$mn:00007D00 _text$mn        segment para public 'CODE' use32
.text$mn:00007D00                 assume cs:_text$mn
.text$mn:00007D00                 ;org 7D00h
.text$mn:00007D00 ; COMDAT (pick any)
.text$mn:00007D00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007D00
.text$mn:00007D00 ; =============== S U B R O U T I N E =======================================
.text$mn:00007D00
.text$mn:00007D00 ; Attributes: bp-based frame
.text$mn:00007D00
.text$mn:00007D00 ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_Iterator_base12 *)
.text$mn:00007D00                 public ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.text$mn:00007D00 ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z proc near
.text$mn:00007D00                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+12Cp
.text$mn:00007D00
.text$mn:00007D00 var_28          = byte ptr -28h
.text$mn:00007D00 var_1C          = dword ptr -1Ch
.text$mn:00007D00 var_18          = dword ptr -18h
.text$mn:00007D00 var_14          = dword ptr -14h
.text$mn:00007D00 var_10          = dword ptr -10h
.text$mn:00007D00 var_C           = dword ptr -0Ch
.text$mn:00007D00 var_4           = dword ptr -4
.text$mn:00007D00 arg_0           = dword ptr  8
.text$mn:00007D00
.text$mn:00007D00                 push    ebp
.text$mn:00007D01                 mov     ebp, esp
.text$mn:00007D03                 push    0FFFFFFFFh
.text$mn:00007D05                 push    offset __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.text$mn:00007D0A                 mov     eax, large fs:0
.text$mn:00007D10                 push    eax
.text$mn:00007D11                 sub     esp, 1Ch
.text$mn:00007D14                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007D19                 xor     eax, ebp
.text$mn:00007D1B                 push    eax
.text$mn:00007D1C                 lea     eax, [ebp+var_C]
.text$mn:00007D1F                 mov     large fs:0, eax
.text$mn:00007D25                 mov     [ebp+var_10], ecx
.text$mn:00007D28                 mov     eax, [ebp+arg_0]
.text$mn:00007D2B                 push    eax             ; std::_Iterator_base12 *
.text$mn:00007D2C                 mov     ecx, [ebp+var_10]
.text$mn:00007D2F                 push    ecx             ; struct std::_Iterator_base12 *
.text$mn:00007D30                 lea     ecx, [ebp+var_28]
.text$mn:00007D33                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00007D38                 mov     [ebp+var_14], eax
.text$mn:00007D3B                 mov     edx, [ebp+var_14]
.text$mn:00007D3E                 mov     [ebp+var_18], edx
.text$mn:00007D41                 mov     [ebp+var_4], 0
.text$mn:00007D48                 mov     ecx, [ebp+var_18]
.text$mn:00007D4B                 call    ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00007D50                 mov     [ebp+var_1C], eax
.text$mn:00007D53                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007D5A                 lea     ecx, [ebp+var_28]
.text$mn:00007D5D                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00007D62                 mov     eax, [ebp+var_1C]
.text$mn:00007D65                 mov     ecx, [ebp+var_C]
.text$mn:00007D68                 mov     large fs:0, ecx
.text$mn:00007D6F                 pop     ecx
.text$mn:00007D70                 mov     esp, ebp
.text$mn:00007D72                 pop     ebp
.text$mn:00007D73                 retn    4
.text$mn:00007D73 ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z endp
.text$mn:00007D73
.text$mn:00007D73 ; ---------------------------------------------------------------------------
.text$mn:00007D76                 align 4
.text$mn:00007D76 _text$mn        ends
.text$mn:00007D76
.text$x:00007D78 ; ===========================================================================
.text$x:00007D78
.text$x:00007D78 ; Segment type: Pure code
.text$x:00007D78 ; Segment permissions: Read/Execute
.text$x:00007D78 _text$x         segment para public 'CODE' use32
.text$x:00007D78                 assume cs:_text$x
.text$x:00007D78                 ;org 7D78h
.text$x:00007D78 ; COMDAT (pick associative to section at 7D00)
.text$x:00007D78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007D78
.text$x:00007D78 ; =============== S U B R O U T I N E =======================================
.text$x:00007D78
.text$x:00007D78
.text$x:00007D78 __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0 proc near
.text$x:00007D78                                         ; DATA XREF: .xdata$x:0000CE0Co
.text$x:00007D78                 lea     ecx, [ebp-28h]
.text$x:00007D7B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00007D7B __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0 endp
.text$x:00007D7B
.text$x:00007D80
.text$x:00007D80 ; =============== S U B R O U T I N E =======================================
.text$x:00007D80
.text$x:00007D80
.text$x:00007D80 __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z proc near
.text$x:00007D80                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+5o
.text$x:00007D80
.text$x:00007D80 arg_4           = dword ptr  8
.text$x:00007D80
.text$x:00007D80                 mov     edx, [esp+arg_4]
.text$x:00007D84                 lea     eax, [edx+0Ch]
.text$x:00007D87                 mov     ecx, [edx-20h]
.text$x:00007D8A                 xor     ecx, eax
.text$x:00007D8C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007D91                 mov     eax, offset __ehfuncinfo$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.text$x:00007D96                 jmp     ___CxxFrameHandler3
.text$x:00007D96 __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z endp
.text$x:00007D96
.text$x:00007D96 ; ---------------------------------------------------------------------------
.text$x:00007D9B                 align 4
.text$x:00007D9B _text$x         ends
.text$x:00007D9B
.text$mn:00007D9C ; ===========================================================================
.text$mn:00007D9C
.text$mn:00007D9C ; Segment type: Pure code
.text$mn:00007D9C ; Segment permissions: Read/Execute
.text$mn:00007D9C _text$mn        segment para public 'CODE' use32
.text$mn:00007D9C                 assume cs:_text$mn
.text$mn:00007D9C                 ;org 7D9Ch
.text$mn:00007D9C ; COMDAT (pick any)
.text$mn:00007D9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007D9C
.text$mn:00007D9C ; =============== S U B R O U T I N E =======================================
.text$mn:00007D9C
.text$mn:00007D9C ; Attributes: bp-based frame
.text$mn:00007D9C
.text$mn:00007D9C ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator+=(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00007D9C                 public ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
.text$mn:00007D9C ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z proc near
.text$mn:00007D9C                                         ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+290p
.text$mn:00007D9C
.text$mn:00007D9C var_4           = dword ptr -4
.text$mn:00007D9C arg_0           = dword ptr  8
.text$mn:00007D9C
.text$mn:00007D9C                 push    ebp
.text$mn:00007D9D                 mov     ebp, esp
.text$mn:00007D9F                 push    ecx
.text$mn:00007DA0                 mov     [ebp+var_4], ecx
.text$mn:00007DA3                 mov     eax, [ebp+arg_0]
.text$mn:00007DA6                 push    eax
.text$mn:00007DA7                 mov     ecx, [ebp+var_4]
.text$mn:00007DAA                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00007DAF                 mov     esp, ebp
.text$mn:00007DB1                 pop     ebp
.text$mn:00007DB2                 retn    4
.text$mn:00007DB2 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z endp
.text$mn:00007DB2
.text$mn:00007DB2 ; ---------------------------------------------------------------------------
.text$mn:00007DB5                 align 4
.text$mn:00007DB5 _text$mn        ends
.text$mn:00007DB5
.text$mn:00007DB8 ; ===========================================================================
.text$mn:00007DB8
.text$mn:00007DB8 ; Segment type: Pure code
.text$mn:00007DB8 ; Segment permissions: Read/Execute
.text$mn:00007DB8 _text$mn        segment para public 'CODE' use32
.text$mn:00007DB8                 assume cs:_text$mn
.text$mn:00007DB8                 ;org 7DB8h
.text$mn:00007DB8 ; COMDAT (pick any)
.text$mn:00007DB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007DB8
.text$mn:00007DB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00007DB8
.text$mn:00007DB8 ; Attributes: bp-based frame
.text$mn:00007DB8
.text$mn:00007DB8 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t *Str)
.text$mn:00007DB8                 public ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:00007DB8 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:00007DB8                                         ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+71p
.text$mn:00007DB8                                         ; ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+7Ep ...
.text$mn:00007DB8
.text$mn:00007DB8 var_4           = dword ptr -4
.text$mn:00007DB8 Str             = dword ptr  8
.text$mn:00007DB8
.text$mn:00007DB8                 push    ebp
.text$mn:00007DB9                 mov     ebp, esp
.text$mn:00007DBB                 push    ecx
.text$mn:00007DBC                 mov     [ebp+var_4], ecx
.text$mn:00007DBF                 mov     eax, [ebp+Str]
.text$mn:00007DC2                 push    eax             ; Str
.text$mn:00007DC3                 mov     ecx, [ebp+var_4]
.text$mn:00007DC6                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)
.text$mn:00007DCB                 mov     esp, ebp
.text$mn:00007DCD                 pop     ebp
.text$mn:00007DCE                 retn    4
.text$mn:00007DCE ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:00007DCE
.text$mn:00007DCE ; ---------------------------------------------------------------------------
.text$mn:00007DD1                 align 4
.text$mn:00007DD1 _text$mn        ends
.text$mn:00007DD1
.text$mn:00007DD4 ; ===========================================================================
.text$mn:00007DD4
.text$mn:00007DD4 ; Segment type: Pure code
.text$mn:00007DD4 ; Segment permissions: Read/Execute
.text$mn:00007DD4 _text$mn        segment para public 'CODE' use32
.text$mn:00007DD4                 assume cs:_text$mn
.text$mn:00007DD4                 ;org 7DD4h
.text$mn:00007DD4 ; COMDAT (pick any)
.text$mn:00007DD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007DD4
.text$mn:00007DD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007DD4
.text$mn:00007DD4 ; Attributes: bp-based frame
.text$mn:00007DD4
.text$mn:00007DD4 ; public: void * __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`scalar deleting destructor'(unsigned int)
.text$mn:00007DD4                 public ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z
.text$mn:00007DD4 ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z proc near
.text$mn:00007DD4                                         ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Cp
.text$mn:00007DD4
.text$mn:00007DD4 var_4           = dword ptr -4
.text$mn:00007DD4 arg_0           = dword ptr  8
.text$mn:00007DD4
.text$mn:00007DD4                 push    ebp
.text$mn:00007DD5                 mov     ebp, esp
.text$mn:00007DD7                 push    ecx
.text$mn:00007DD8                 mov     [ebp+var_4], ecx
.text$mn:00007DDB                 mov     ecx, [ebp+var_4]
.text$mn:00007DDE                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00007DE3                 mov     eax, [ebp+arg_0]
.text$mn:00007DE6                 and     eax, 1
.text$mn:00007DE9                 jz      short loc_7DF7
.text$mn:00007DEB                 mov     ecx, [ebp+var_4]
.text$mn:00007DEE                 push    ecx             ; void *
.text$mn:00007DEF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007DF4                 add     esp, 4
.text$mn:00007DF7
.text$mn:00007DF7 loc_7DF7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`scalar deleting destructor'(uint)+15j
.text$mn:00007DF7                 mov     eax, [ebp+var_4]
.text$mn:00007DFA                 mov     esp, ebp
.text$mn:00007DFC                 pop     ebp
.text$mn:00007DFD                 retn    4
.text$mn:00007DFD ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z endp
.text$mn:00007DFD
.text$mn:00007DFD _text$mn        ends
.text$mn:00007DFD
.text$mn:00007E00 ; ===========================================================================
.text$mn:00007E00
.text$mn:00007E00 ; Segment type: Pure code
.text$mn:00007E00 ; Segment permissions: Read/Execute
.text$mn:00007E00 _text$mn        segment para public 'CODE' use32
.text$mn:00007E00                 assume cs:_text$mn
.text$mn:00007E00                 ;org 7E00h
.text$mn:00007E00 ; COMDAT (pick any)
.text$mn:00007E00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007E00
.text$mn:00007E00 ; =============== S U B R O U T I N E =======================================
.text$mn:00007E00
.text$mn:00007E00 ; Attributes: bp-based frame
.text$mn:00007E00
.text$mn:00007E00 ; public: virtual void * __thiscall FileRelocalizerDlg::`scalar deleting destructor'(unsigned int)
.text$mn:00007E00                 public ??_GFileRelocalizerDlg@@UAEPAXI@Z
.text$mn:00007E00 ??_GFileRelocalizerDlg@@UAEPAXI@Z proc near
.text$mn:00007E00
.text$mn:00007E00 var_4           = dword ptr -4
.text$mn:00007E00 arg_0           = dword ptr  8
.text$mn:00007E00
.text$mn:00007E00                 push    ebp
.text$mn:00007E01                 mov     ebp, esp
.text$mn:00007E03                 push    ecx
.text$mn:00007E04                 mov     [ebp+var_4], ecx
.text$mn:00007E07                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007E0A                 call    ??1FileRelocalizerDlg@@UAE@XZ ; FileRelocalizerDlg::~FileRelocalizerDlg(void)
.text$mn:00007E0F                 mov     eax, [ebp+arg_0]
.text$mn:00007E12                 and     eax, 1
.text$mn:00007E15                 jz      short loc_7E23
.text$mn:00007E17                 mov     ecx, [ebp+var_4]
.text$mn:00007E1A                 push    ecx             ; void *
.text$mn:00007E1B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007E20                 add     esp, 4
.text$mn:00007E23
.text$mn:00007E23 loc_7E23:                               ; CODE XREF: FileRelocalizerDlg::`scalar deleting destructor'(uint)+15j
.text$mn:00007E23                 mov     eax, [ebp+var_4]
.text$mn:00007E26                 mov     esp, ebp
.text$mn:00007E28                 pop     ebp
.text$mn:00007E29                 retn    4
.text$mn:00007E29 ??_GFileRelocalizerDlg@@UAEPAXI@Z endp
.text$mn:00007E29
.text$mn:00007E29 _text$mn        ends
.text$mn:00007E29
.text$mn:00007E2C ; ===========================================================================
.text$mn:00007E2C
.text$mn:00007E2C ; Segment type: Pure code
.text$mn:00007E2C ; Segment permissions: Read/Execute
.text$mn:00007E2C _text$mn        segment para public 'CODE' use32
.text$mn:00007E2C                 assume cs:_text$mn
.text$mn:00007E2C                 ;org 7E2Ch
.text$mn:00007E2C ; COMDAT (pick any)
.text$mn:00007E2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007E2C
.text$mn:00007E2C ; =============== S U B R O U T I N E =======================================
.text$mn:00007E2C
.text$mn:00007E2C ; Attributes: bp-based frame
.text$mn:00007E2C
.text$mn:00007E2C ; public: virtual void * __thiscall StaticDialog::`scalar deleting destructor'(unsigned int)
.text$mn:00007E2C                 public ??_GStaticDialog@@UAEPAXI@Z
.text$mn:00007E2C ??_GStaticDialog@@UAEPAXI@Z proc near
.text$mn:00007E2C
.text$mn:00007E2C var_4           = dword ptr -4
.text$mn:00007E2C arg_0           = dword ptr  8
.text$mn:00007E2C
.text$mn:00007E2C                 push    ebp
.text$mn:00007E2D                 mov     ebp, esp
.text$mn:00007E2F                 push    ecx
.text$mn:00007E30                 mov     [ebp+var_4], ecx
.text$mn:00007E33                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007E36                 call    ??1StaticDialog@@UAE@XZ ; StaticDialog::~StaticDialog(void)
.text$mn:00007E3B                 mov     eax, [ebp+arg_0]
.text$mn:00007E3E                 and     eax, 1
.text$mn:00007E41                 jz      short loc_7E4F
.text$mn:00007E43                 mov     ecx, [ebp+var_4]
.text$mn:00007E46                 push    ecx             ; void *
.text$mn:00007E47                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007E4C                 add     esp, 4
.text$mn:00007E4F
.text$mn:00007E4F loc_7E4F:                               ; CODE XREF: StaticDialog::`scalar deleting destructor'(uint)+15j
.text$mn:00007E4F                 mov     eax, [ebp+var_4]
.text$mn:00007E52                 mov     esp, ebp
.text$mn:00007E54                 pop     ebp
.text$mn:00007E55                 retn    4
.text$mn:00007E55 ??_GStaticDialog@@UAEPAXI@Z endp
.text$mn:00007E55
.text$mn:00007E55 _text$mn        ends
.text$mn:00007E55
.text$mn:00007E58 ; ===========================================================================
.text$mn:00007E58
.text$mn:00007E58 ; Segment type: Pure code
.text$mn:00007E58 ; Segment permissions: Read/Execute
.text$mn:00007E58 _text$mn        segment para public 'CODE' use32
.text$mn:00007E58                 assume cs:_text$mn
.text$mn:00007E58                 ;org 7E58h
.text$mn:00007E58 ; COMDAT (pick any)
.text$mn:00007E58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007E58
.text$mn:00007E58 ; =============== S U B R O U T I N E =======================================
.text$mn:00007E58
.text$mn:00007E58 ; Attributes: bp-based frame
.text$mn:00007E58
.text$mn:00007E58 ; public: virtual void * __thiscall TiXmlDocument::`scalar deleting destructor'(unsigned int)
.text$mn:00007E58                 public ??_GTiXmlDocument@@UAEPAXI@Z
.text$mn:00007E58 ??_GTiXmlDocument@@UAEPAXI@Z proc near
.text$mn:00007E58
.text$mn:00007E58 var_4           = dword ptr -4
.text$mn:00007E58 arg_0           = dword ptr  8
.text$mn:00007E58
.text$mn:00007E58                 push    ebp
.text$mn:00007E59                 mov     ebp, esp
.text$mn:00007E5B                 push    ecx
.text$mn:00007E5C                 mov     [ebp+var_4], ecx
.text$mn:00007E5F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007E62                 call    ??1TiXmlDocument@@UAE@XZ ; TiXmlDocument::~TiXmlDocument(void)
.text$mn:00007E67                 mov     eax, [ebp+arg_0]
.text$mn:00007E6A                 and     eax, 1
.text$mn:00007E6D                 jz      short loc_7E7B
.text$mn:00007E6F                 mov     ecx, [ebp+var_4]
.text$mn:00007E72                 push    ecx             ; void *
.text$mn:00007E73                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007E78                 add     esp, 4
.text$mn:00007E7B
.text$mn:00007E7B loc_7E7B:                               ; CODE XREF: TiXmlDocument::`scalar deleting destructor'(uint)+15j
.text$mn:00007E7B                 mov     eax, [ebp+var_4]
.text$mn:00007E7E                 mov     esp, ebp
.text$mn:00007E80                 pop     ebp
.text$mn:00007E81                 retn    4
.text$mn:00007E81 ??_GTiXmlDocument@@UAEPAXI@Z endp
.text$mn:00007E81
.text$mn:00007E81 _text$mn        ends
.text$mn:00007E81
.text$mn:00007E84 ; ===========================================================================
.text$mn:00007E84
.text$mn:00007E84 ; Segment type: Pure code
.text$mn:00007E84 ; Segment permissions: Read/Execute
.text$mn:00007E84 _text$mn        segment para public 'CODE' use32
.text$mn:00007E84                 assume cs:_text$mn
.text$mn:00007E84                 ;org 7E84h
.text$mn:00007E84 ; COMDAT (pick any)
.text$mn:00007E84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007E84
.text$mn:00007E84 ; =============== S U B R O U T I N E =======================================
.text$mn:00007E84
.text$mn:00007E84 ; Attributes: bp-based frame
.text$mn:00007E84
.text$mn:00007E84 ; public: virtual void * __thiscall Window::`scalar deleting destructor'(unsigned int)
.text$mn:00007E84                 public ??_GWindow@@UAEPAXI@Z
.text$mn:00007E84 ??_GWindow@@UAEPAXI@Z proc near
.text$mn:00007E84
.text$mn:00007E84 var_4           = dword ptr -4
.text$mn:00007E84 arg_0           = dword ptr  8
.text$mn:00007E84
.text$mn:00007E84                 push    ebp
.text$mn:00007E85                 mov     ebp, esp
.text$mn:00007E87                 push    ecx
.text$mn:00007E88                 mov     [ebp+var_4], ecx
.text$mn:00007E8B                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007E8E                 call    ??1Window@@UAE@XZ ; Window::~Window(void)
.text$mn:00007E93                 mov     eax, [ebp+arg_0]
.text$mn:00007E96                 and     eax, 1
.text$mn:00007E99                 jz      short loc_7EA7
.text$mn:00007E9B                 mov     ecx, [ebp+var_4]
.text$mn:00007E9E                 push    ecx             ; void *
.text$mn:00007E9F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007EA4                 add     esp, 4
.text$mn:00007EA7
.text$mn:00007EA7 loc_7EA7:                               ; CODE XREF: Window::`scalar deleting destructor'(uint)+15j
.text$mn:00007EA7                 mov     eax, [ebp+var_4]
.text$mn:00007EAA                 mov     esp, ebp
.text$mn:00007EAC                 pop     ebp
.text$mn:00007EAD                 retn    4
.text$mn:00007EAD ??_GWindow@@UAEPAXI@Z endp
.text$mn:00007EAD
.text$mn:00007EAD _text$mn        ends
.text$mn:00007EAD
.text$mn:00007EB0 ; ===========================================================================
.text$mn:00007EB0
.text$mn:00007EB0 ; Segment type: Pure code
.text$mn:00007EB0 ; Segment permissions: Read/Execute
.text$mn:00007EB0 _text$mn        segment para public 'CODE' use32
.text$mn:00007EB0                 assume cs:_text$mn
.text$mn:00007EB0                 ;org 7EB0h
.text$mn:00007EB0 ; COMDAT (pick any)
.text$mn:00007EB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007EB0
.text$mn:00007EB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00007EB0
.text$mn:00007EB0 ; Attributes: bp-based frame
.text$mn:00007EB0
.text$mn:00007EB0 ; public: virtual void * __thiscall std::_Generic_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00007EB0                 public ??_G_Generic_error_category@std@@UAEPAXI@Z
.text$mn:00007EB0 ??_G_Generic_error_category@std@@UAEPAXI@Z proc near
.text$mn:00007EB0
.text$mn:00007EB0 var_4           = dword ptr -4
.text$mn:00007EB0 arg_0           = dword ptr  8
.text$mn:00007EB0
.text$mn:00007EB0                 push    ebp
.text$mn:00007EB1                 mov     ebp, esp
.text$mn:00007EB3                 push    ecx
.text$mn:00007EB4                 mov     [ebp+var_4], ecx
.text$mn:00007EB7                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007EBA                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00007EBF                 mov     eax, [ebp+arg_0]
.text$mn:00007EC2                 and     eax, 1
.text$mn:00007EC5                 jz      short loc_7ED3
.text$mn:00007EC7                 mov     ecx, [ebp+var_4]
.text$mn:00007ECA                 push    ecx             ; void *
.text$mn:00007ECB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007ED0                 add     esp, 4
.text$mn:00007ED3
.text$mn:00007ED3 loc_7ED3:                               ; CODE XREF: std::_Generic_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00007ED3                 mov     eax, [ebp+var_4]
.text$mn:00007ED6                 mov     esp, ebp
.text$mn:00007ED8                 pop     ebp
.text$mn:00007ED9                 retn    4
.text$mn:00007ED9 ??_G_Generic_error_category@std@@UAEPAXI@Z endp
.text$mn:00007ED9
.text$mn:00007ED9 _text$mn        ends
.text$mn:00007ED9
.text$mn:00007EDC ; ===========================================================================
.text$mn:00007EDC
.text$mn:00007EDC ; Segment type: Pure code
.text$mn:00007EDC ; Segment permissions: Read/Execute
.text$mn:00007EDC _text$mn        segment para public 'CODE' use32
.text$mn:00007EDC                 assume cs:_text$mn
.text$mn:00007EDC                 ;org 7EDCh
.text$mn:00007EDC ; COMDAT (pick any)
.text$mn:00007EDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007EDC
.text$mn:00007EDC ; =============== S U B R O U T I N E =======================================
.text$mn:00007EDC
.text$mn:00007EDC ; Attributes: bp-based frame
.text$mn:00007EDC
.text$mn:00007EDC ; public: virtual void * __thiscall std::_Iostream_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00007EDC                 public ??_G_Iostream_error_category@std@@UAEPAXI@Z
.text$mn:00007EDC ??_G_Iostream_error_category@std@@UAEPAXI@Z proc near
.text$mn:00007EDC
.text$mn:00007EDC var_4           = dword ptr -4
.text$mn:00007EDC arg_0           = dword ptr  8
.text$mn:00007EDC
.text$mn:00007EDC                 push    ebp
.text$mn:00007EDD                 mov     ebp, esp
.text$mn:00007EDF                 push    ecx
.text$mn:00007EE0                 mov     [ebp+var_4], ecx
.text$mn:00007EE3                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007EE6                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$mn:00007EEB                 mov     eax, [ebp+arg_0]
.text$mn:00007EEE                 and     eax, 1
.text$mn:00007EF1                 jz      short loc_7EFF
.text$mn:00007EF3                 mov     ecx, [ebp+var_4]
.text$mn:00007EF6                 push    ecx             ; void *
.text$mn:00007EF7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007EFC                 add     esp, 4
.text$mn:00007EFF
.text$mn:00007EFF loc_7EFF:                               ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00007EFF                 mov     eax, [ebp+var_4]
.text$mn:00007F02                 mov     esp, ebp
.text$mn:00007F04                 pop     ebp
.text$mn:00007F05                 retn    4
.text$mn:00007F05 ??_G_Iostream_error_category@std@@UAEPAXI@Z endp
.text$mn:00007F05
.text$mn:00007F05 _text$mn        ends
.text$mn:00007F05
.text$mn:00007F08 ; ===========================================================================
.text$mn:00007F08
.text$mn:00007F08 ; Segment type: Pure code
.text$mn:00007F08 ; Segment permissions: Read/Execute
.text$mn:00007F08 _text$mn        segment para public 'CODE' use32
.text$mn:00007F08                 assume cs:_text$mn
.text$mn:00007F08                 ;org 7F08h
.text$mn:00007F08 ; COMDAT (pick any)
.text$mn:00007F08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007F08
.text$mn:00007F08 ; =============== S U B R O U T I N E =======================================
.text$mn:00007F08
.text$mn:00007F08 ; Attributes: bp-based frame
.text$mn:00007F08
.text$mn:00007F08 ; public: virtual void * __thiscall std::_System_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00007F08                 public ??_G_System_error_category@std@@UAEPAXI@Z
.text$mn:00007F08 ??_G_System_error_category@std@@UAEPAXI@Z proc near
.text$mn:00007F08
.text$mn:00007F08 var_4           = dword ptr -4
.text$mn:00007F08 arg_0           = dword ptr  8
.text$mn:00007F08
.text$mn:00007F08                 push    ebp
.text$mn:00007F09                 mov     ebp, esp
.text$mn:00007F0B                 push    ecx
.text$mn:00007F0C                 mov     [ebp+var_4], ecx
.text$mn:00007F0F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007F12                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$mn:00007F17                 mov     eax, [ebp+arg_0]
.text$mn:00007F1A                 and     eax, 1
.text$mn:00007F1D                 jz      short loc_7F2B
.text$mn:00007F1F                 mov     ecx, [ebp+var_4]
.text$mn:00007F22                 push    ecx             ; void *
.text$mn:00007F23                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007F28                 add     esp, 4
.text$mn:00007F2B
.text$mn:00007F2B loc_7F2B:                               ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00007F2B                 mov     eax, [ebp+var_4]
.text$mn:00007F2E                 mov     esp, ebp
.text$mn:00007F30                 pop     ebp
.text$mn:00007F31                 retn    4
.text$mn:00007F31 ??_G_System_error_category@std@@UAEPAXI@Z endp
.text$mn:00007F31
.text$mn:00007F31 _text$mn        ends
.text$mn:00007F31
.text$mn:00007F34 ; ===========================================================================
.text$mn:00007F34
.text$mn:00007F34 ; Segment type: Pure code
.text$mn:00007F34 ; Segment permissions: Read/Execute
.text$mn:00007F34 _text$mn        segment para public 'CODE' use32
.text$mn:00007F34                 assume cs:_text$mn
.text$mn:00007F34                 ;org 7F34h
.text$mn:00007F34 ; COMDAT (pick any)
.text$mn:00007F34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007F34
.text$mn:00007F34 ; =============== S U B R O U T I N E =======================================
.text$mn:00007F34
.text$mn:00007F34 ; Attributes: bp-based frame
.text$mn:00007F34
.text$mn:00007F34 ; public: virtual void * __thiscall std::error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00007F34                 public ??_Gerror_category@std@@UAEPAXI@Z
.text$mn:00007F34 ??_Gerror_category@std@@UAEPAXI@Z proc near
.text$mn:00007F34
.text$mn:00007F34 var_4           = dword ptr -4
.text$mn:00007F34 arg_0           = dword ptr  8
.text$mn:00007F34
.text$mn:00007F34                 push    ebp
.text$mn:00007F35                 mov     ebp, esp
.text$mn:00007F37                 push    ecx
.text$mn:00007F38                 mov     [ebp+var_4], ecx
.text$mn:00007F3B                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007F3E                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:00007F43                 mov     eax, [ebp+arg_0]
.text$mn:00007F46                 and     eax, 1
.text$mn:00007F49                 jz      short loc_7F57
.text$mn:00007F4B                 mov     ecx, [ebp+var_4]
.text$mn:00007F4E                 push    ecx             ; void *
.text$mn:00007F4F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007F54                 add     esp, 4
.text$mn:00007F57
.text$mn:00007F57 loc_7F57:                               ; CODE XREF: std::error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00007F57                 mov     eax, [ebp+var_4]
.text$mn:00007F5A                 mov     esp, ebp
.text$mn:00007F5C                 pop     ebp
.text$mn:00007F5D                 retn    4
.text$mn:00007F5D ??_Gerror_category@std@@UAEPAXI@Z endp
.text$mn:00007F5D
.text$mn:00007F5D _text$mn        ends
.text$mn:00007F5D
.text$di:00007F60 ; ===========================================================================
.text$di:00007F60
.text$di:00007F60 ; Segment type: Pure code
.text$di:00007F60 ; Segment permissions: Read/Execute
.text$di:00007F60 _text$di        segment para public 'CODE' use32
.text$di:00007F60                 assume cs:_text$di
.text$di:00007F60                 ;org 7F60h
.text$di:00007F60 ; COMDAT (pick any)
.text$di:00007F60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007F60
.text$di:00007F60 ; =============== S U B R O U T I N E =======================================
.text$di:00007F60
.text$di:00007F60 ; Attributes: bp-based frame
.text$di:00007F60
.text$di:00007F60 ; void __cdecl `dynamic initializer for 'public: static class std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.text$di:00007F60 ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$di:00007F60                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Generic_object$initializer$)(void)o
.text$di:00007F60                 push    ebp
.text$di:00007F61                 mov     ebp, esp
.text$di:00007F63                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$di:00007F68                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$di:00007F6D                 push    offset ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:00007F72                 call    _atexit
.text$di:00007F77                 add     esp, 4
.text$di:00007F7A                 pop     ebp
.text$di:00007F7B                 retn
.text$di:00007F7B ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$di:00007F7B
.text$di:00007F7B _text$di        ends
.text$di:00007F7B
.text$di:00007F7C ; ===========================================================================
.text$di:00007F7C
.text$di:00007F7C ; Segment type: Pure code
.text$di:00007F7C ; Segment permissions: Read/Execute
.text$di:00007F7C _text$di        segment para public 'CODE' use32
.text$di:00007F7C                 assume cs:_text$di
.text$di:00007F7C                 ;org 7F7Ch
.text$di:00007F7C ; COMDAT (pick any)
.text$di:00007F7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007F7C
.text$di:00007F7C ; =============== S U B R O U T I N E =======================================
.text$di:00007F7C
.text$di:00007F7C ; Attributes: bp-based frame
.text$di:00007F7C
.text$di:00007F7C ; void __cdecl `dynamic initializer for 'public: static class std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.text$di:00007F7C ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$di:00007F7C                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Iostream_object$initializer$)(void)o
.text$di:00007F7C                 push    ebp
.text$di:00007F7D                 mov     ebp, esp
.text$di:00007F7F                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$di:00007F84                 call    ??0_Iostream_error_category@std@@QAE@XZ ; std::_Iostream_error_category::_Iostream_error_category(void)
.text$di:00007F89                 push    offset ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:00007F8E                 call    _atexit
.text$di:00007F93                 add     esp, 4
.text$di:00007F96                 pop     ebp
.text$di:00007F97                 retn
.text$di:00007F97 ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$di:00007F97
.text$di:00007F97 _text$di        ends
.text$di:00007F97
.text$di:00007F98 ; ===========================================================================
.text$di:00007F98
.text$di:00007F98 ; Segment type: Pure code
.text$di:00007F98 ; Segment permissions: Read/Execute
.text$di:00007F98 _text$di        segment para public 'CODE' use32
.text$di:00007F98                 assume cs:_text$di
.text$di:00007F98                 ;org 7F98h
.text$di:00007F98 ; COMDAT (pick any)
.text$di:00007F98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007F98
.text$di:00007F98 ; =============== S U B R O U T I N E =======================================
.text$di:00007F98
.text$di:00007F98 ; Attributes: bp-based frame
.text$di:00007F98
.text$di:00007F98 ; void __cdecl `dynamic initializer for 'public: static class std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.text$di:00007F98 ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$di:00007F98                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_System_object$initializer$)(void)o
.text$di:00007F98                 push    ebp
.text$di:00007F99                 mov     ebp, esp
.text$di:00007F9B                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$di:00007FA0                 call    ??0_System_error_category@std@@QAE@XZ ; std::_System_error_category::_System_error_category(void)
.text$di:00007FA5                 push    offset ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:00007FAA                 call    _atexit
.text$di:00007FAF                 add     esp, 4
.text$di:00007FB2                 pop     ebp
.text$di:00007FB3                 retn
.text$di:00007FB3 ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$di:00007FB3
.text$di:00007FB3 _text$di        ends
.text$di:00007FB3
.text$di:00007FB4 ; ===========================================================================
.text$di:00007FB4
.text$di:00007FB4 ; Segment type: Pure code
.text$di:00007FB4 ; Segment permissions: Read/Execute
.text$di:00007FB4 _text$di        segment para public 'CODE' use32
.text$di:00007FB4                 assume cs:_text$di
.text$di:00007FB4                 ;org 7FB4h
.text$di:00007FB4 ; COMDAT (pick any)
.text$di:00007FB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007FB4
.text$di:00007FB4 ; =============== S U B R O U T I N E =======================================
.text$di:00007FB4
.text$di:00007FB4 ; Attributes: bp-based frame
.text$di:00007FB4
.text$di:00007FB4 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id''(void)
.text$di:00007FB4 ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00007FB4                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id$initializer$)(void)o
.text$di:00007FB4                 push    ebp
.text$di:00007FB5                 mov     ebp, esp
.text$di:00007FB7                 push    0               ; unsigned int
.text$di:00007FB9                 mov     ecx, offset ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:00007FBE                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00007FC3                 pop     ebp
.text$di:00007FC4                 retn
.text$di:00007FC4 ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00007FC4
.text$di:00007FC4 ; ---------------------------------------------------------------------------
.text$di:00007FC5                 align 4
.text$di:00007FC5 _text$di        ends
.text$di:00007FC5
.text$di:00007FC8 ; ===========================================================================
.text$di:00007FC8
.text$di:00007FC8 ; Segment type: Pure code
.text$di:00007FC8 ; Segment permissions: Read/Execute
.text$di:00007FC8 _text$di        segment para public 'CODE' use32
.text$di:00007FC8                 assume cs:_text$di
.text$di:00007FC8                 ;org 7FC8h
.text$di:00007FC8 ; COMDAT (pick any)
.text$di:00007FC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007FC8
.text$di:00007FC8 ; =============== S U B R O U T I N E =======================================
.text$di:00007FC8
.text$di:00007FC8 ; Attributes: bp-based frame
.text$di:00007FC8
.text$di:00007FC8 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id''(void)
.text$di:00007FC8 ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00007FC8                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id$initializer$)(void)o
.text$di:00007FC8                 push    ebp
.text$di:00007FC9                 mov     ebp, esp
.text$di:00007FCB                 push    0               ; unsigned int
.text$di:00007FCD                 mov     ecx, offset ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:00007FD2                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00007FD7                 pop     ebp
.text$di:00007FD8                 retn
.text$di:00007FD8 ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00007FD8
.text$di:00007FD8 ; ---------------------------------------------------------------------------
.text$di:00007FD9                 align 4
.text$di:00007FD9 _text$di        ends
.text$di:00007FD9
.text$di:00007FDC ; ===========================================================================
.text$di:00007FDC
.text$di:00007FDC ; Segment type: Pure code
.text$di:00007FDC ; Segment permissions: Read/Execute
.text$di:00007FDC _text$di        segment para public 'CODE' use32
.text$di:00007FDC                 assume cs:_text$di
.text$di:00007FDC                 ;org 7FDCh
.text$di:00007FDC ; COMDAT (pick any)
.text$di:00007FDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007FDC
.text$di:00007FDC ; =============== S U B R O U T I N E =======================================
.text$di:00007FDC
.text$di:00007FDC ; Attributes: bp-based frame
.text$di:00007FDC
.text$di:00007FDC ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<char>::id''(void)
.text$di:00007FDC ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00007FDC                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<char>::id$initializer$)(void)o
.text$di:00007FDC                 push    ebp
.text$di:00007FDD                 mov     ebp, esp
.text$di:00007FDF                 push    0               ; unsigned int
.text$di:00007FE1                 mov     ecx, offset ?id@?$numpunct@D@std@@2V0locale@2@A ; this
.text$di:00007FE6                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00007FEB                 pop     ebp
.text$di:00007FEC                 retn
.text$di:00007FEC ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00007FEC
.text$di:00007FEC ; ---------------------------------------------------------------------------
.text$di:00007FED                 align 10h
.text$di:00007FED _text$di        ends
.text$di:00007FED
.text$di:00007FF0 ; ===========================================================================
.text$di:00007FF0
.text$di:00007FF0 ; Segment type: Pure code
.text$di:00007FF0 ; Segment permissions: Read/Execute
.text$di:00007FF0 _text$di        segment para public 'CODE' use32
.text$di:00007FF0                 assume cs:_text$di
.text$di:00007FF0                 ;org 7FF0h
.text$di:00007FF0 ; COMDAT (pick any)
.text$di:00007FF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007FF0
.text$di:00007FF0 ; =============== S U B R O U T I N E =======================================
.text$di:00007FF0
.text$di:00007FF0 ; Attributes: bp-based frame
.text$di:00007FF0
.text$di:00007FF0 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<wchar_t>::id''(void)
.text$di:00007FF0 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00007FF0                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<wchar_t>::id$initializer$)(void)o
.text$di:00007FF0                 push    ebp
.text$di:00007FF1                 mov     ebp, esp
.text$di:00007FF3                 push    0               ; unsigned int
.text$di:00007FF5                 mov     ecx, offset ?id@?$numpunct@_W@std@@2V0locale@2@A ; this
.text$di:00007FFA                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00007FFF                 pop     ebp
.text$di:00008000                 retn
.text$di:00008000 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00008000
.text$di:00008000 ; ---------------------------------------------------------------------------
.text$di:00008001                 align 4
.text$di:00008001 _text$di        ends
.text$di:00008001
.text$di:00008004 ; ===========================================================================
.text$di:00008004
.text$di:00008004 ; Segment type: Pure code
.text$di:00008004 ; Segment permissions: Read/Execute
.text$di:00008004 _text$di        segment para public 'CODE' use32
.text$di:00008004                 assume cs:_text$di
.text$di:00008004                 ;org 8004h
.text$di:00008004 ; COMDAT (pick any)
.text$di:00008004                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00008004
.text$di:00008004 ; =============== S U B R O U T I N E =======================================
.text$di:00008004
.text$di:00008004 ; Attributes: bp-based frame
.text$di:00008004
.text$di:00008004 ; void __cdecl std::`dynamic initializer for 'allocator_arg''(void)
.text$di:00008004 ??__Eallocator_arg@std@@YAXXZ proc near ; DATA XREF: .CRT$XCU:_allocator_arg$initializer$o
.text$di:00008004
.text$di:00008004 var_1           = byte ptr -1
.text$di:00008004
.text$di:00008004                 push    ebp
.text$di:00008005                 mov     ebp, esp
.text$di:00008007                 push    ecx
.text$di:00008008                 xor     eax, eax
.text$di:0000800A                 mov     [ebp+var_1], al
.text$di:0000800D                 mov     esp, ebp
.text$di:0000800F                 pop     ebp
.text$di:00008010                 retn
.text$di:00008010 ??__Eallocator_arg@std@@YAXXZ endp
.text$di:00008010
.text$di:00008010 ; ---------------------------------------------------------------------------
.text$di:00008011                 align 4
.text$di:00008011 _text$di        ends
.text$di:00008011
.text$di:00008014 ; ===========================================================================
.text$di:00008014
.text$di:00008014 ; Segment type: Pure code
.text$di:00008014 ; Segment permissions: Read/Execute
.text$di:00008014 _text$di        segment para public 'CODE' use32
.text$di:00008014                 assume cs:_text$di
.text$di:00008014                 ;org 8014h
.text$di:00008014 ; COMDAT (pick any)
.text$di:00008014                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00008014
.text$di:00008014 ; =============== S U B R O U T I N E =======================================
.text$di:00008014
.text$di:00008014 ; Attributes: bp-based frame
.text$di:00008014
.text$di:00008014 ; void __cdecl std::`dynamic initializer for 'piecewise_construct''(void)
.text$di:00008014 ??__Epiecewise_construct@std@@YAXXZ proc near
.text$di:00008014                                         ; DATA XREF: .CRT$XCU:_piecewise_construct$initializer$o
.text$di:00008014
.text$di:00008014 var_1           = byte ptr -1
.text$di:00008014
.text$di:00008014                 push    ebp
.text$di:00008015                 mov     ebp, esp
.text$di:00008017                 push    ecx
.text$di:00008018                 xor     eax, eax
.text$di:0000801A                 mov     [ebp+var_1], al
.text$di:0000801D                 mov     esp, ebp
.text$di:0000801F                 pop     ebp
.text$di:00008020                 retn
.text$di:00008020 ??__Epiecewise_construct@std@@YAXXZ endp
.text$di:00008020
.text$di:00008020 ; ---------------------------------------------------------------------------
.text$di:00008021                 align 4
.text$di:00008021 _text$di        ends
.text$di:00008021
.text$yd:00008024 ; ===========================================================================
.text$yd:00008024
.text$yd:00008024 ; Segment type: Pure code
.text$yd:00008024 ; Segment permissions: Read/Execute
.text$yd:00008024 _text$yd        segment para public 'CODE' use32
.text$yd:00008024                 assume cs:_text$yd
.text$yd:00008024                 ;org 8024h
.text$yd:00008024 ; COMDAT (pick any)
.text$yd:00008024                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00008024
.text$yd:00008024 ; =============== S U B R O U T I N E =======================================
.text$yd:00008024
.text$yd:00008024 ; Attributes: bp-based frame
.text$yd:00008024
.text$yd:00008024 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Generic_error_category std::_Error_objects<int>::_Generic_object''()
.text$yd:00008024 ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$yd:00008024                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+Do
.text$yd:00008024                 push    ebp
.text$yd:00008025                 mov     ebp, esp
.text$yd:00008027                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$yd:0000802C                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$yd:00008031                 pop     ebp
.text$yd:00008032                 retn
.text$yd:00008032 ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$yd:00008032
.text$yd:00008032 ; ---------------------------------------------------------------------------
.text$yd:00008033                 align 4
.text$yd:00008033 _text$yd        ends
.text$yd:00008033
.text$yd:00008034 ; ===========================================================================
.text$yd:00008034
.text$yd:00008034 ; Segment type: Pure code
.text$yd:00008034 ; Segment permissions: Read/Execute
.text$yd:00008034 _text$yd        segment para public 'CODE' use32
.text$yd:00008034                 assume cs:_text$yd
.text$yd:00008034                 ;org 8034h
.text$yd:00008034 ; COMDAT (pick any)
.text$yd:00008034                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00008034
.text$yd:00008034 ; =============== S U B R O U T I N E =======================================
.text$yd:00008034
.text$yd:00008034 ; Attributes: bp-based frame
.text$yd:00008034
.text$yd:00008034 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''()
.text$yd:00008034 ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$yd:00008034                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+Do
.text$yd:00008034                 push    ebp
.text$yd:00008035                 mov     ebp, esp
.text$yd:00008037                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$yd:0000803C                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$yd:00008041                 pop     ebp
.text$yd:00008042                 retn
.text$yd:00008042 ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$yd:00008042
.text$yd:00008042 ; ---------------------------------------------------------------------------
.text$yd:00008043                 align 4
.text$yd:00008043 _text$yd        ends
.text$yd:00008043
.text$yd:00008044 ; ===========================================================================
.text$yd:00008044
.text$yd:00008044 ; Segment type: Pure code
.text$yd:00008044 ; Segment permissions: Read/Execute
.text$yd:00008044 _text$yd        segment para public 'CODE' use32
.text$yd:00008044                 assume cs:_text$yd
.text$yd:00008044                 ;org 8044h
.text$yd:00008044 ; COMDAT (pick any)
.text$yd:00008044                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00008044
.text$yd:00008044 ; =============== S U B R O U T I N E =======================================
.text$yd:00008044
.text$yd:00008044 ; Attributes: bp-based frame
.text$yd:00008044
.text$yd:00008044 ; void __cdecl `dynamic atexit destructor for 'public: static std::_System_error_category std::_Error_objects<int>::_System_object''()
.text$yd:00008044 ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$yd:00008044                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+Do
.text$yd:00008044                 push    ebp
.text$yd:00008045                 mov     ebp, esp
.text$yd:00008047                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$yd:0000804C                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$yd:00008051                 pop     ebp
.text$yd:00008052                 retn
.text$yd:00008052 ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$yd:00008052
.text$yd:00008052 ; ---------------------------------------------------------------------------
.text$yd:00008053                 align 4
.text$yd:00008053 _text$yd        ends
.text$yd:00008053
.text$mn:00008054 ; ===========================================================================
.text$mn:00008054
.text$mn:00008054 ; Segment type: Pure code
.text$mn:00008054 ; Segment permissions: Read/Execute
.text$mn:00008054 _text$mn        segment para public 'CODE' use32
.text$mn:00008054                 assume cs:_text$mn
.text$mn:00008054                 ;org 8054h
.text$mn:00008054 ; COMDAT (pick any)
.text$mn:00008054                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008054
.text$mn:00008054 ; =============== S U B R O U T I N E =======================================
.text$mn:00008054
.text$mn:00008054 ; Attributes: bp-based frame
.text$mn:00008054
.text$mn:00008054 ; struct TiXmlNode *__thiscall TiXmlNode::NextSibling(TiXmlNode *__hidden this)
.text$mn:00008054                 public ?NextSibling@TiXmlNode@@QBEPAV1@XZ
.text$mn:00008054 ?NextSibling@TiXmlNode@@QBEPAV1@XZ proc near
.text$mn:00008054                                         ; CODE XREF: ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)+3Bp
.text$mn:00008054
.text$mn:00008054 var_4           = dword ptr -4
.text$mn:00008054
.text$mn:00008054                 push    ebp
.text$mn:00008055                 mov     ebp, esp
.text$mn:00008057                 push    ecx
.text$mn:00008058                 mov     [ebp+var_4], ecx
.text$mn:0000805B                 mov     eax, [ebp+var_4]
.text$mn:0000805E                 mov     eax, [eax+3Ch]
.text$mn:00008061                 mov     esp, ebp
.text$mn:00008063                 pop     ebp
.text$mn:00008064                 retn
.text$mn:00008064 ?NextSibling@TiXmlNode@@QBEPAV1@XZ endp
.text$mn:00008064
.text$mn:00008064 ; ---------------------------------------------------------------------------
.text$mn:00008065                 align 4
.text$mn:00008065 _text$mn        ends
.text$mn:00008065
.text$mn:00008068 ; ===========================================================================
.text$mn:00008068
.text$mn:00008068 ; Segment type: Pure code
.text$mn:00008068 ; Segment permissions: Read/Execute
.text$mn:00008068 _text$mn        segment para public 'CODE' use32
.text$mn:00008068                 assume cs:_text$mn
.text$mn:00008068                 ;org 8068h
.text$mn:00008068 ; COMDAT (pick any)
.text$mn:00008068                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008068
.text$mn:00008068 ; =============== S U B R O U T I N E =======================================
.text$mn:00008068
.text$mn:00008068 ; Attributes: bp-based frame
.text$mn:00008068
.text$mn:00008068 ; bool __thiscall TiXmlNode::NoChildren(TiXmlNode *__hidden this)
.text$mn:00008068                 public ?NoChildren@TiXmlNode@@QBE_NXZ
.text$mn:00008068 ?NoChildren@TiXmlNode@@QBE_NXZ proc near
.text$mn:00008068                                         ; CODE XREF: ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)+99p
.text$mn:00008068
.text$mn:00008068 var_8           = dword ptr -8
.text$mn:00008068 var_4           = dword ptr -4
.text$mn:00008068
.text$mn:00008068                 push    ebp
.text$mn:00008069                 mov     ebp, esp
.text$mn:0000806B                 sub     esp, 8
.text$mn:0000806E                 mov     [ebp+var_8], ecx
.text$mn:00008071                 mov     eax, [ebp+var_8]
.text$mn:00008074                 cmp     dword ptr [eax+14h], 0
.text$mn:00008078                 jnz     short loc_8083
.text$mn:0000807A                 mov     [ebp+var_4], 1
.text$mn:00008081                 jmp     short loc_808A
.text$mn:00008083 ; ---------------------------------------------------------------------------
.text$mn:00008083
.text$mn:00008083 loc_8083:                               ; CODE XREF: TiXmlNode::NoChildren(void)+10j
.text$mn:00008083                 mov     [ebp+var_4], 0
.text$mn:0000808A
.text$mn:0000808A loc_808A:                               ; CODE XREF: TiXmlNode::NoChildren(void)+19j
.text$mn:0000808A                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000808D                 mov     esp, ebp
.text$mn:0000808F                 pop     ebp
.text$mn:00008090                 retn
.text$mn:00008090 ?NoChildren@TiXmlNode@@QBE_NXZ endp
.text$mn:00008090
.text$mn:00008090 ; ---------------------------------------------------------------------------
.text$mn:00008091                 align 4
.text$mn:00008091 _text$mn        ends
.text$mn:00008091
.text$mn:00008094 ; ===========================================================================
.text$mn:00008094
.text$mn:00008094 ; Segment type: Pure code
.text$mn:00008094 ; Segment permissions: Read/Execute
.text$mn:00008094 _text$mn        segment para public 'CODE' use32
.text$mn:00008094                 assume cs:_text$mn
.text$mn:00008094                 ;org 8094h
.text$mn:00008094 ; COMDAT (pick any)
.text$mn:00008094                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008094
.text$mn:00008094 ; =============== S U B R O U T I N E =======================================
.text$mn:00008094
.text$mn:00008094 ; Attributes: bp-based frame
.text$mn:00008094
.text$mn:00008094 ; struct TiXmlElement *__thiscall TiXmlNode::ToElement(TiXmlNode *__hidden this)
.text$mn:00008094                 public ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ
.text$mn:00008094 ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ proc near
.text$mn:00008094                                         ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+16Fp
.text$mn:00008094                                         ; ProjectPanel::writeWorkSpace(wchar_t *)+1FFp ...
.text$mn:00008094
.text$mn:00008094 var_8           = dword ptr -8
.text$mn:00008094 var_4           = dword ptr -4
.text$mn:00008094
.text$mn:00008094                 push    ebp
.text$mn:00008095                 mov     ebp, esp
.text$mn:00008097                 sub     esp, 8
.text$mn:0000809A                 mov     [ebp+var_4], ecx
.text$mn:0000809D                 cmp     [ebp+var_4], 0
.text$mn:000080A1                 jz      short loc_80B4
.text$mn:000080A3                 mov     eax, [ebp+var_4]
.text$mn:000080A6                 cmp     dword ptr [eax+10h], 1
.text$mn:000080AA                 jnz     short loc_80B4
.text$mn:000080AC                 mov     ecx, [ebp+var_4]
.text$mn:000080AF                 mov     [ebp+var_8], ecx
.text$mn:000080B2                 jmp     short loc_80BB
.text$mn:000080B4 ; ---------------------------------------------------------------------------
.text$mn:000080B4
.text$mn:000080B4 loc_80B4:                               ; CODE XREF: TiXmlNode::ToElement(void)+Dj
.text$mn:000080B4                                         ; TiXmlNode::ToElement(void)+16j
.text$mn:000080B4                 mov     [ebp+var_8], 0
.text$mn:000080BB
.text$mn:000080BB loc_80BB:                               ; CODE XREF: TiXmlNode::ToElement(void)+1Ej
.text$mn:000080BB                 mov     eax, [ebp+var_8]
.text$mn:000080BE                 mov     esp, ebp
.text$mn:000080C0                 pop     ebp
.text$mn:000080C1                 retn
.text$mn:000080C1 ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ endp
.text$mn:000080C1
.text$mn:000080C1 ; ---------------------------------------------------------------------------
.text$mn:000080C2                 align 4
.text$mn:000080C2 _text$mn        ends
.text$mn:000080C2
.text$mn:000080C4 ; ===========================================================================
.text$mn:000080C4
.text$mn:000080C4 ; Segment type: Pure code
.text$mn:000080C4 ; Segment permissions: Read/Execute
.text$mn:000080C4 _text$mn        segment para public 'CODE' use32
.text$mn:000080C4                 assume cs:_text$mn
.text$mn:000080C4                 ;org 80C4h
.text$mn:000080C4 ; COMDAT (pick any)
.text$mn:000080C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000080C4
.text$mn:000080C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000080C4
.text$mn:000080C4 ; Attributes: bp-based frame
.text$mn:000080C4
.text$mn:000080C4 ; int __thiscall TiXmlNode::Type(TiXmlNode *__hidden this)
.text$mn:000080C4                 public ?Type@TiXmlNode@@UBEHXZ
.text$mn:000080C4 ?Type@TiXmlNode@@UBEHXZ proc near       ; DATA XREF: .rdata:0000D290o
.text$mn:000080C4
.text$mn:000080C4 var_4           = dword ptr -4
.text$mn:000080C4
.text$mn:000080C4                 push    ebp
.text$mn:000080C5                 mov     ebp, esp
.text$mn:000080C7                 push    ecx
.text$mn:000080C8                 mov     [ebp+var_4], ecx
.text$mn:000080CB                 mov     eax, [ebp+var_4]
.text$mn:000080CE                 mov     eax, [eax+10h]
.text$mn:000080D1                 mov     esp, ebp
.text$mn:000080D3                 pop     ebp
.text$mn:000080D4                 retn
.text$mn:000080D4 ?Type@TiXmlNode@@UBEHXZ endp
.text$mn:000080D4
.text$mn:000080D4 ; ---------------------------------------------------------------------------
.text$mn:000080D5                 align 4
.text$mn:000080D5 _text$mn        ends
.text$mn:000080D5
.text$mn:000080D8 ; ===========================================================================
.text$mn:000080D8
.text$mn:000080D8 ; Segment type: Pure code
.text$mn:000080D8 ; Segment permissions: Read/Execute
.text$mn:000080D8 _text$mn        segment para public 'CODE' use32
.text$mn:000080D8                 assume cs:_text$mn
.text$mn:000080D8                 ;org 80D8h
.text$mn:000080D8 ; COMDAT (pick any)
.text$mn:000080D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000080D8
.text$mn:000080D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000080D8
.text$mn:000080D8 ; Attributes: bp-based frame
.text$mn:000080D8
.text$mn:000080D8 ; const wchar_t *__thiscall TiXmlNode::Value(TiXmlNode *__hidden this)
.text$mn:000080D8                 public ?Value@TiXmlNode@@QBEPB_WXZ
.text$mn:000080D8 ?Value@TiXmlNode@@QBEPB_WXZ proc near   ; CODE XREF: ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)+50p
.text$mn:000080D8
.text$mn:000080D8 var_4           = dword ptr -4
.text$mn:000080D8
.text$mn:000080D8                 push    ebp
.text$mn:000080D9                 mov     ebp, esp
.text$mn:000080DB                 push    ecx
.text$mn:000080DC                 mov     [ebp+var_4], ecx
.text$mn:000080DF                 mov     ecx, [ebp+var_4]
.text$mn:000080E2                 add     ecx, 1Ch
.text$mn:000080E5                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000080EA                 mov     esp, ebp
.text$mn:000080EC                 pop     ebp
.text$mn:000080ED                 retn
.text$mn:000080ED ?Value@TiXmlNode@@QBEPB_WXZ endp
.text$mn:000080ED
.text$mn:000080ED ; ---------------------------------------------------------------------------
.text$mn:000080EE                 align 10h
.text$mn:000080EE _text$mn        ends
.text$mn:000080EE
.text$mn:000080F0 ; ===========================================================================
.text$mn:000080F0
.text$mn:000080F0 ; Segment type: Pure code
.text$mn:000080F0 ; Segment permissions: Read/Execute
.text$mn:000080F0 _text$mn        segment para public 'CODE' use32
.text$mn:000080F0                 assume cs:_text$mn
.text$mn:000080F0                 ;org 80F0h
.text$mn:000080F0 ; COMDAT (pick any)
.text$mn:000080F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000080F0
.text$mn:000080F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000080F0
.text$mn:000080F0 ; Attributes: bp-based frame
.text$mn:000080F0
.text$mn:000080F0 ; void __thiscall std::_Iterator_base12::_Adopt(std::_Iterator_base12 *this, const struct std::_Container_base12 *)
.text$mn:000080F0                 public ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$mn:000080F0 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
.text$mn:000080F0                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)+3Cp
.text$mn:000080F0                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+49p
.text$mn:000080F0
.text$mn:000080F0 var_1C          = byte ptr -1Ch
.text$mn:000080F0 var_18          = byte ptr -18h
.text$mn:000080F0 var_14          = dword ptr -14h
.text$mn:000080F0 var_10          = dword ptr -10h
.text$mn:000080F0 var_C           = dword ptr -0Ch
.text$mn:000080F0 var_4           = dword ptr -4
.text$mn:000080F0 arg_0           = dword ptr  8
.text$mn:000080F0
.text$mn:000080F0                 push    ebp
.text$mn:000080F1                 mov     ebp, esp
.text$mn:000080F3                 push    0FFFFFFFFh
.text$mn:000080F5                 push    offset __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$mn:000080FA                 mov     eax, large fs:0
.text$mn:00008100                 push    eax
.text$mn:00008101                 sub     esp, 10h
.text$mn:00008104                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008109                 xor     eax, ebp
.text$mn:0000810B                 push    eax
.text$mn:0000810C                 lea     eax, [ebp+var_C]
.text$mn:0000810F                 mov     large fs:0, eax
.text$mn:00008115                 mov     [ebp+var_10], ecx
.text$mn:00008118                 cmp     [ebp+arg_0], 0
.text$mn:0000811C                 jnz     short loc_8148
.text$mn:0000811E                 push    3               ; int
.text$mn:00008120                 lea     ecx, [ebp+var_18] ; this
.text$mn:00008123                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00008128                 mov     [ebp+var_4], 0
.text$mn:0000812F                 mov     ecx, [ebp+var_10] ; this
.text$mn:00008132                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00008137                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000813E                 lea     ecx, [ebp+var_18] ; this
.text$mn:00008141                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00008146                 jmp     short loc_819F
.text$mn:00008148 ; ---------------------------------------------------------------------------
.text$mn:00008148
.text$mn:00008148 loc_8148:                               ; CODE XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+2Cj
.text$mn:00008148                 mov     eax, [ebp+arg_0]
.text$mn:0000814B                 mov     ecx, [eax]
.text$mn:0000814D                 mov     [ebp+var_14], ecx
.text$mn:00008150                 mov     edx, [ebp+var_10]
.text$mn:00008153                 mov     eax, [edx]
.text$mn:00008155                 cmp     eax, [ebp+var_14]
.text$mn:00008158                 jz      short loc_819F
.text$mn:0000815A                 push    3               ; int
.text$mn:0000815C                 lea     ecx, [ebp+var_1C] ; this
.text$mn:0000815F                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00008164                 mov     [ebp+var_4], 1
.text$mn:0000816B                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000816E                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00008173                 mov     ecx, [ebp+var_10]
.text$mn:00008176                 mov     edx, [ebp+var_14]
.text$mn:00008179                 mov     eax, [edx+4]
.text$mn:0000817C                 mov     [ecx+4], eax
.text$mn:0000817F                 mov     ecx, [ebp+var_14]
.text$mn:00008182                 mov     edx, [ebp+var_10]
.text$mn:00008185                 mov     [ecx+4], edx
.text$mn:00008188                 mov     eax, [ebp+var_10]
.text$mn:0000818B                 mov     ecx, [ebp+var_14]
.text$mn:0000818E                 mov     [eax], ecx
.text$mn:00008190                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008197                 lea     ecx, [ebp+var_1C] ; this
.text$mn:0000819A                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000819F
.text$mn:0000819F loc_819F:                               ; CODE XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+56j
.text$mn:0000819F                                         ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+68j
.text$mn:0000819F                 mov     ecx, [ebp+var_C]
.text$mn:000081A2                 mov     large fs:0, ecx
.text$mn:000081A9                 pop     ecx
.text$mn:000081AA                 mov     esp, ebp
.text$mn:000081AC                 pop     ebp
.text$mn:000081AD                 retn    4
.text$mn:000081AD ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z endp
.text$mn:000081AD
.text$mn:000081AD _text$mn        ends
.text$mn:000081AD
.text$x:000081B0 ; ===========================================================================
.text$x:000081B0
.text$x:000081B0 ; Segment type: Pure code
.text$x:000081B0 ; Segment permissions: Read/Execute
.text$x:000081B0 _text$x         segment para public 'CODE' use32
.text$x:000081B0                 assume cs:_text$x
.text$x:000081B0                 ;org 81B0h
.text$x:000081B0 ; COMDAT (pick associative to section at 80F0)
.text$x:000081B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000081B0
.text$x:000081B0 ; =============== S U B R O U T I N E =======================================
.text$x:000081B0
.text$x:000081B0
.text$x:000081B0 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 proc near
.text$x:000081B0                                         ; DATA XREF: .xdata$x:0000BF38o
.text$x:000081B0                 lea     ecx, [ebp-18h]  ; this
.text$x:000081B3                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:000081B3 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 endp
.text$x:000081B3
.text$x:000081B8
.text$x:000081B8 ; =============== S U B R O U T I N E =======================================
.text$x:000081B8
.text$x:000081B8
.text$x:000081B8 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 proc near
.text$x:000081B8                                         ; DATA XREF: .xdata$x:0000BF40o
.text$x:000081B8                 lea     ecx, [ebp-1Ch]  ; this
.text$x:000081BB                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:000081BB __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 endp
.text$x:000081BB
.text$x:000081C0
.text$x:000081C0 ; =============== S U B R O U T I N E =======================================
.text$x:000081C0
.text$x:000081C0
.text$x:000081C0 __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
.text$x:000081C0                                         ; DATA XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+5o
.text$x:000081C0
.text$x:000081C0 arg_4           = dword ptr  8
.text$x:000081C0
.text$x:000081C0                 mov     edx, [esp+arg_4]
.text$x:000081C4                 lea     eax, [edx+0Ch]
.text$x:000081C7                 mov     ecx, [edx-14h]
.text$x:000081CA                 xor     ecx, eax
.text$x:000081CC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000081D1                 mov     eax, offset __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$x:000081D6                 jmp     ___CxxFrameHandler3
.text$x:000081D6 __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z endp
.text$x:000081D6
.text$x:000081D6 ; ---------------------------------------------------------------------------
.text$x:000081DB                 align 4
.text$x:000081DB _text$x         ends
.text$x:000081DB
.text$mn:000081DC ; ===========================================================================
.text$mn:000081DC
.text$mn:000081DC ; Segment type: Pure code
.text$mn:000081DC ; Segment permissions: Read/Execute
.text$mn:000081DC _text$mn        segment para public 'CODE' use32
.text$mn:000081DC                 assume cs:_text$mn
.text$mn:000081DC                 ;org 81DCh
.text$mn:000081DC ; COMDAT (pick any)
.text$mn:000081DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000081DC
.text$mn:000081DC ; =============== S U B R O U T I N E =======================================
.text$mn:000081DC
.text$mn:000081DC ; Attributes: bp-based frame
.text$mn:000081DC
.text$mn:000081DC ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:000081DC                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:000081DC ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:000081DC                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+38p
.text$mn:000081DC
.text$mn:000081DC var_10          = byte ptr -10h
.text$mn:000081DC var_8           = dword ptr -8
.text$mn:000081DC var_1           = byte ptr -1
.text$mn:000081DC
.text$mn:000081DC                 push    ebp
.text$mn:000081DD                 mov     ebp, esp
.text$mn:000081DF                 sub     esp, 10h
.text$mn:000081E2                 mov     [ebp+var_8], ecx
.text$mn:000081E5                 lea     ecx, [ebp+var_1]
.text$mn:000081E8                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:000081ED                 push    1
.text$mn:000081EF                 lea     ecx, [ebp+var_1]
.text$mn:000081F2                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:000081F7                 mov     ecx, [ebp+var_8]
.text$mn:000081FA                 mov     [ecx], eax
.text$mn:000081FC                 lea     ecx, [ebp+var_10] ; this
.text$mn:000081FF                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:00008204                 push    eax             ; int
.text$mn:00008205                 mov     edx, [ebp+var_8]
.text$mn:00008208                 mov     eax, [edx]
.text$mn:0000820A                 push    eax             ; void *
.text$mn:0000820B                 lea     ecx, [ebp+var_1]
.text$mn:0000820E                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00008213                 mov     ecx, [ebp+var_8]
.text$mn:00008216                 mov     edx, [ecx]
.text$mn:00008218                 mov     eax, [ebp+var_8]
.text$mn:0000821B                 mov     [edx], eax
.text$mn:0000821D                 mov     esp, ebp
.text$mn:0000821F                 pop     ebp
.text$mn:00008220                 retn
.text$mn:00008220 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:00008220
.text$mn:00008220 ; ---------------------------------------------------------------------------
.text$mn:00008221                 align 4
.text$mn:00008221 _text$mn        ends
.text$mn:00008221
.text$mn:00008224 ; ===========================================================================
.text$mn:00008224
.text$mn:00008224 ; Segment type: Pure code
.text$mn:00008224 ; Segment permissions: Read/Execute
.text$mn:00008224 _text$mn        segment para public 'CODE' use32
.text$mn:00008224                 assume cs:_text$mn
.text$mn:00008224                 ;org 8224h
.text$mn:00008224 ; COMDAT (pick any)
.text$mn:00008224                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008224
.text$mn:00008224 ; =============== S U B R O U T I N E =======================================
.text$mn:00008224
.text$mn:00008224 ; Attributes: bp-based frame
.text$mn:00008224
.text$mn:00008224 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:00008224                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:00008224 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00008224                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+38p
.text$mn:00008224
.text$mn:00008224 var_10          = byte ptr -10h
.text$mn:00008224 var_8           = dword ptr -8
.text$mn:00008224 var_1           = byte ptr -1
.text$mn:00008224
.text$mn:00008224                 push    ebp
.text$mn:00008225                 mov     ebp, esp
.text$mn:00008227                 sub     esp, 10h
.text$mn:0000822A                 mov     [ebp+var_8], ecx
.text$mn:0000822D                 lea     ecx, [ebp+var_1]
.text$mn:00008230                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00008235                 push    1
.text$mn:00008237                 lea     ecx, [ebp+var_1]
.text$mn:0000823A                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:0000823F                 mov     ecx, [ebp+var_8]
.text$mn:00008242                 mov     [ecx], eax
.text$mn:00008244                 lea     ecx, [ebp+var_10] ; this
.text$mn:00008247                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:0000824C                 push    eax             ; int
.text$mn:0000824D                 mov     edx, [ebp+var_8]
.text$mn:00008250                 mov     eax, [edx]
.text$mn:00008252                 push    eax             ; void *
.text$mn:00008253                 lea     ecx, [ebp+var_1]
.text$mn:00008256                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:0000825B                 mov     ecx, [ebp+var_8]
.text$mn:0000825E                 mov     edx, [ecx]
.text$mn:00008260                 mov     eax, [ebp+var_8]
.text$mn:00008263                 mov     [edx], eax
.text$mn:00008265                 mov     esp, ebp
.text$mn:00008267                 pop     ebp
.text$mn:00008268                 retn
.text$mn:00008268 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:00008268
.text$mn:00008268 ; ---------------------------------------------------------------------------
.text$mn:00008269                 align 4
.text$mn:00008269 _text$mn        ends
.text$mn:00008269
.text$mn:0000826C ; ===========================================================================
.text$mn:0000826C
.text$mn:0000826C ; Segment type: Pure code
.text$mn:0000826C ; Segment permissions: Read/Execute
.text$mn:0000826C _text$mn        segment para public 'CODE' use32
.text$mn:0000826C                 assume cs:_text$mn
.text$mn:0000826C                 ;org 826Ch
.text$mn:0000826C ; COMDAT (pick any)
.text$mn:0000826C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000826C
.text$mn:0000826C ; =============== S U B R O U T I N E =======================================
.text$mn:0000826C
.text$mn:0000826C ; Attributes: bp-based frame
.text$mn:0000826C
.text$mn:0000826C ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Alloc_proxy(void)
.text$mn:0000826C                 public ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ
.text$mn:0000826C ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ proc near
.text$mn:0000826C                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+38p
.text$mn:0000826C
.text$mn:0000826C var_10          = byte ptr -10h
.text$mn:0000826C var_8           = dword ptr -8
.text$mn:0000826C var_1           = byte ptr -1
.text$mn:0000826C
.text$mn:0000826C                 push    ebp
.text$mn:0000826D                 mov     ebp, esp
.text$mn:0000826F                 sub     esp, 10h
.text$mn:00008272                 mov     [ebp+var_8], ecx
.text$mn:00008275                 lea     ecx, [ebp+var_1]
.text$mn:00008278                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:0000827D                 push    1
.text$mn:0000827F                 lea     ecx, [ebp+var_1]
.text$mn:00008282                 call    ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::allocate(uint)
.text$mn:00008287                 mov     ecx, [ebp+var_8]
.text$mn:0000828A                 mov     [ecx], eax
.text$mn:0000828C                 lea     ecx, [ebp+var_10] ; this
.text$mn:0000828F                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:00008294                 push    eax             ; int
.text$mn:00008295                 mov     edx, [ebp+var_8]
.text$mn:00008298                 mov     eax, [edx]
.text$mn:0000829A                 push    eax             ; void *
.text$mn:0000829B                 lea     ecx, [ebp+var_1]
.text$mn:0000829E                 call    ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:000082A3                 mov     ecx, [ebp+var_8]
.text$mn:000082A6                 mov     edx, [ecx]
.text$mn:000082A8                 mov     eax, [ebp+var_8]
.text$mn:000082AB                 mov     [edx], eax
.text$mn:000082AD                 mov     esp, ebp
.text$mn:000082AF                 pop     ebp
.text$mn:000082B0                 retn
.text$mn:000082B0 ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ endp
.text$mn:000082B0
.text$mn:000082B0 ; ---------------------------------------------------------------------------
.text$mn:000082B1                 align 4
.text$mn:000082B1 _text$mn        ends
.text$mn:000082B1
.text$mn:000082B4 ; ===========================================================================
.text$mn:000082B4
.text$mn:000082B4 ; Segment type: Pure code
.text$mn:000082B4 ; Segment permissions: Read/Execute
.text$mn:000082B4 _text$mn        segment para public 'CODE' use32
.text$mn:000082B4                 assume cs:_text$mn
.text$mn:000082B4                 ;org 82B4h
.text$mn:000082B4 ; COMDAT (pick any)
.text$mn:000082B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000082B4
.text$mn:000082B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000082B4
.text$mn:000082B4 ; Attributes: bp-based frame
.text$mn:000082B4
.text$mn:000082B4 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Assign_rv(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:000082B4                 public ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z
.text$mn:000082B4 ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z proc near
.text$mn:000082B4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+60p
.text$mn:000082B4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+E2p
.text$mn:000082B4
.text$mn:000082B4 var_8           = dword ptr -8
.text$mn:000082B4 var_1           = byte ptr -1
.text$mn:000082B4 arg_0           = dword ptr  8
.text$mn:000082B4
.text$mn:000082B4                 push    ebp
.text$mn:000082B5                 mov     ebp, esp
.text$mn:000082B7                 sub     esp, 8
.text$mn:000082BA                 mov     [ebp+var_8], ecx
.text$mn:000082BD                 mov     eax, [ebp+arg_0]
.text$mn:000082C0                 cmp     dword ptr [eax+18h], 8
.text$mn:000082C4                 jnb     short loc_82E8
.text$mn:000082C6                 mov     ecx, [ebp+arg_0]
.text$mn:000082C9                 mov     edx, [ecx+14h]
.text$mn:000082CC                 add     edx, 1
.text$mn:000082CF                 push    edx             ; int
.text$mn:000082D0                 mov     eax, [ebp+arg_0]
.text$mn:000082D3                 add     eax, 4
.text$mn:000082D6                 push    eax             ; Src
.text$mn:000082D7                 mov     ecx, [ebp+var_8]
.text$mn:000082DA                 add     ecx, 4
.text$mn:000082DD                 push    ecx             ; Dst
.text$mn:000082DE                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:000082E3                 add     esp, 0Ch
.text$mn:000082E6                 jmp     short loc_8313
.text$mn:000082E8 ; ---------------------------------------------------------------------------
.text$mn:000082E8
.text$mn:000082E8 loc_82E8:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+10j
.text$mn:000082E8                 mov     edx, [ebp+arg_0]
.text$mn:000082EB                 add     edx, 4
.text$mn:000082EE                 push    edx             ; int
.text$mn:000082EF                 mov     eax, [ebp+var_8]
.text$mn:000082F2                 add     eax, 4
.text$mn:000082F5                 push    eax             ; void *
.text$mn:000082F6                 lea     ecx, [ebp+var_1]
.text$mn:000082F9                 push    ecx
.text$mn:000082FA                 mov     ecx, [ebp+var_8]
.text$mn:000082FD                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00008302                 mov     ecx, eax
.text$mn:00008304                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00008309                 mov     edx, [ebp+arg_0]
.text$mn:0000830C                 mov     dword ptr [edx+4], 0
.text$mn:00008313
.text$mn:00008313 loc_8313:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+32j
.text$mn:00008313                 mov     eax, [ebp+var_8]
.text$mn:00008316                 mov     ecx, [ebp+arg_0]
.text$mn:00008319                 mov     edx, [ecx+14h]
.text$mn:0000831C                 mov     [eax+14h], edx
.text$mn:0000831F                 mov     eax, [ebp+var_8]
.text$mn:00008322                 mov     ecx, [ebp+arg_0]
.text$mn:00008325                 mov     edx, [ecx+18h]
.text$mn:00008328                 mov     [eax+18h], edx
.text$mn:0000832B                 push    0
.text$mn:0000832D                 push    0
.text$mn:0000832F                 mov     ecx, [ebp+arg_0]
.text$mn:00008332                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00008337                 mov     esp, ebp
.text$mn:00008339                 pop     ebp
.text$mn:0000833A                 retn    4
.text$mn:0000833A ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z endp
.text$mn:0000833A
.text$mn:0000833A ; ---------------------------------------------------------------------------
.text$mn:0000833D                 align 10h
.text$mn:0000833D _text$mn        ends
.text$mn:0000833D
.text$mn:00008340 ; ===========================================================================
.text$mn:00008340
.text$mn:00008340 ; Segment type: Pure code
.text$mn:00008340 ; Segment permissions: Read/Execute
.text$mn:00008340 _text$mn        segment para public 'CODE' use32
.text$mn:00008340                 assume cs:_text$mn
.text$mn:00008340                 ;org 8340h
.text$mn:00008340 ; COMDAT (pick any)
.text$mn:00008340                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008340
.text$mn:00008340 ; =============== S U B R O U T I N E =======================================
.text$mn:00008340
.text$mn:00008340 ; Attributes: bp-based frame
.text$mn:00008340
.text$mn:00008340 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Change_alloc(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:00008340                 public ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z
.text$mn:00008340 ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z proc near
.text$mn:00008340                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+54p
.text$mn:00008340                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5Ap
.text$mn:00008340
.text$mn:00008340 var_4           = dword ptr -4
.text$mn:00008340
.text$mn:00008340                 push    ebp
.text$mn:00008341                 mov     ebp, esp
.text$mn:00008343                 push    ecx
.text$mn:00008344                 mov     [ebp+var_4], ecx
.text$mn:00008347                 mov     esp, ebp
.text$mn:00008349                 pop     ebp
.text$mn:0000834A                 retn    4
.text$mn:0000834A ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z endp
.text$mn:0000834A
.text$mn:0000834A ; ---------------------------------------------------------------------------
.text$mn:0000834D                 align 10h
.text$mn:0000834D _text$mn        ends
.text$mn:0000834D
.text$mn:00008350 ; ===========================================================================
.text$mn:00008350
.text$mn:00008350 ; Segment type: Pure code
.text$mn:00008350 ; Segment permissions: Read/Execute
.text$mn:00008350 _text$mn        segment para public 'CODE' use32
.text$mn:00008350                 assume cs:_text$mn
.text$mn:00008350                 ;org 8350h
.text$mn:00008350 ; COMDAT (pick any)
.text$mn:00008350                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008350
.text$mn:00008350 ; =============== S U B R O U T I N E =======================================
.text$mn:00008350
.text$mn:00008350 ; Attributes: bp-based frame
.text$mn:00008350
.text$mn:00008350 ; void __thiscall std::_Iterator_base12::_Clrcont(std::_Iterator_base12 *__hidden this)
.text$mn:00008350                 public ?_Clrcont@_Iterator_base12@std@@QAEXXZ
.text$mn:00008350 ?_Clrcont@_Iterator_base12@std@@QAEXXZ proc near
.text$mn:00008350                                         ; CODE XREF: std::vector<int,std::allocator<int>>::_Orphan_range(int *,int *)+80p
.text$mn:00008350                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+80p
.text$mn:00008350
.text$mn:00008350 var_4           = dword ptr -4
.text$mn:00008350
.text$mn:00008350                 push    ebp
.text$mn:00008351                 mov     ebp, esp
.text$mn:00008353                 push    ecx
.text$mn:00008354                 mov     [ebp+var_4], ecx
.text$mn:00008357                 mov     eax, [ebp+var_4]
.text$mn:0000835A                 mov     dword ptr [eax], 0
.text$mn:00008360                 mov     esp, ebp
.text$mn:00008362                 pop     ebp
.text$mn:00008363                 retn
.text$mn:00008363 ?_Clrcont@_Iterator_base12@std@@QAEXXZ endp
.text$mn:00008363
.text$mn:00008363 _text$mn        ends
.text$mn:00008363
.text$mn:00008364 ; ===========================================================================
.text$mn:00008364
.text$mn:00008364 ; Segment type: Pure code
.text$mn:00008364 ; Segment permissions: Read/Execute
.text$mn:00008364 _text$mn        segment para public 'CODE' use32
.text$mn:00008364                 assume cs:_text$mn
.text$mn:00008364                 ;org 8364h
.text$mn:00008364 ; COMDAT (pick any)
.text$mn:00008364                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008364
.text$mn:00008364 ; =============== S U B R O U T I N E =======================================
.text$mn:00008364
.text$mn:00008364 ; Attributes: bp-based frame
.text$mn:00008364
.text$mn:00008364 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_Iterator_base12 *)
.text$mn:00008364                 public ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z
.text$mn:00008364 ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z proc near
.text$mn:00008364                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+10p
.text$mn:00008364                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+Ep
.text$mn:00008364
.text$mn:00008364 var_4           = dword ptr -4
.text$mn:00008364 arg_0           = dword ptr  8
.text$mn:00008364
.text$mn:00008364                 push    ebp
.text$mn:00008365                 mov     ebp, esp
.text$mn:00008367                 push    ecx
.text$mn:00008368                 push    esi
.text$mn:00008369                 mov     [ebp+var_4], ecx
.text$mn:0000836C                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000836F                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00008374                 test    eax, eax
.text$mn:00008376                 jz      short loc_838E
.text$mn:00008378                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000837B                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00008380                 mov     esi, eax
.text$mn:00008382                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00008385                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000838A                 cmp     esi, eax
.text$mn:0000838C                 jz      short loc_83F6
.text$mn:0000838E
.text$mn:0000838E loc_838E:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+12j
.text$mn:0000838E                 push    0FAh ; '·'      ; unsigned int
.text$mn:00008393                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008398                 push    offset ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; "string iterators incompatible"
.text$mn:0000839D                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000083A2                 add     esp, 0Ch
.text$mn:000083A5                 mov     eax, offset ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ ; "Standard C++ Libraries Invalid Argument"
.text$mn:000083AA                 test    eax, eax
.text$mn:000083AC                 jz      short loc_83B2
.text$mn:000083AE                 xor     ecx, ecx
.text$mn:000083B0                 jnz     short loc_83D8
.text$mn:000083B2
.text$mn:000083B2 loc_83B2:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+48j
.text$mn:000083B2                 push    offset ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ ; "\"Standard C++ Libraries Invalid Argume"...
.text$mn:000083B7                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:000083BC                 push    0
.text$mn:000083BE                 push    0FBh ; 'v'
.text$mn:000083C3                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000083C8                 push    2
.text$mn:000083CA                 call    __CrtDbgReportW
.text$mn:000083CF                 add     esp, 18h
.text$mn:000083D2                 cmp     eax, 1
.text$mn:000083D5                 jnz     short loc_83D8
.text$mn:000083D7                 int     3               ; Trap to Debugger
.text$mn:000083D8
.text$mn:000083D8 loc_83D8:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+4Cj
.text$mn:000083D8                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+71j
.text$mn:000083D8                 push    0
.text$mn:000083DA                 push    0FBh ; 'v'
.text$mn:000083DF                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000083E4                 push    offset ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; "std::_String_const_iterator<class std::"...
.text$mn:000083E9                 push    offset ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; "\"invalid argument\""
.text$mn:000083EE                 call    __invalid_parameter
.text$mn:000083F3                 add     esp, 14h
.text$mn:000083F6
.text$mn:000083F6 loc_83F6:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+28j
.text$mn:000083F6                 pop     esi
.text$mn:000083F7                 mov     esp, ebp
.text$mn:000083F9                 pop     ebp
.text$mn:000083FA                 retn    4
.text$mn:000083FA ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z endp
.text$mn:000083FA
.text$mn:000083FA ; ---------------------------------------------------------------------------
.text$mn:000083FD                 align 10h
.text$mn:000083FD _text$mn        ends
.text$mn:000083FD
.text$mn:00008400 ; ===========================================================================
.text$mn:00008400
.text$mn:00008400 ; Segment type: Pure code
.text$mn:00008400 ; Segment permissions: Read/Execute
.text$mn:00008400 _text$mn        segment para public 'CODE' use32
.text$mn:00008400                 assume cs:_text$mn
.text$mn:00008400                 ;org 8400h
.text$mn:00008400 ; COMDAT (pick any)
.text$mn:00008400                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008400
.text$mn:00008400 ; =============== S U B R O U T I N E =======================================
.text$mn:00008400
.text$mn:00008400 ; Attributes: bp-based frame
.text$mn:00008400
.text$mn:00008400 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Copy(unsigned int, unsigned int)
.text$mn:00008400                 public ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00008400 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$mn:00008400                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+37p
.text$mn:00008400
.text$mn:00008400 var_20          = dword ptr -20h
.text$mn:00008400 var_1C          = dword ptr -1Ch
.text$mn:00008400 var_18          = dword ptr -18h
.text$mn:00008400 var_11          = byte ptr -11h
.text$mn:00008400 var_10          = dword ptr -10h
.text$mn:00008400 var_C           = byte ptr -0Ch
.text$mn:00008400 var_4           = dword ptr -4
.text$mn:00008400 arg_0           = dword ptr  8
.text$mn:00008400
.text$mn:00008400 ; FUNCTION CHUNK AT .text$mn:00008522 SIZE 00000009 BYTES
.text$mn:00008400
.text$mn:00008400                 push    ebp
.text$mn:00008401                 mov     ebp, esp
.text$mn:00008403                 push    0FFFFFFFFh
.text$mn:00008405                 push    offset __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:0000840A                 mov     eax, large fs:0
.text$mn:00008410                 push    eax
.text$mn:00008411                 push    ecx
.text$mn:00008412                 sub     esp, 10h
.text$mn:00008415                 push    ebx
.text$mn:00008416                 push    esi
.text$mn:00008417                 push    edi
.text$mn:00008418                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000841D                 xor     eax, ebp
.text$mn:0000841F                 push    eax
.text$mn:00008420                 lea     eax, [ebp+var_C]
.text$mn:00008423                 mov     large fs:0, eax
.text$mn:00008429                 mov     [ebp+var_10], esp
.text$mn:0000842C                 mov     [ebp+var_18], ecx
.text$mn:0000842F                 mov     eax, [ebp+arg_0]
.text$mn:00008432                 or      eax, 0Fh
.text$mn:00008435                 mov     [ebp+var_1C], eax
.text$mn:00008438                 mov     ecx, [ebp+var_18]
.text$mn:0000843B                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00008440                 cmp     eax, [ebp+var_1C]
.text$mn:00008443                 jnb     short loc_844D
.text$mn:00008445                 mov     ecx, [ebp+arg_0]
.text$mn:00008448                 mov     [ebp+var_1C], ecx
.text$mn:0000844B                 jmp     short loc_849F
.text$mn:0000844D ; ---------------------------------------------------------------------------
.text$mn:0000844D
.text$mn:0000844D loc_844D:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+43j
.text$mn:0000844D                 mov     edx, [ebp+var_18]
.text$mn:00008450                 mov     ecx, [edx+18h]
.text$mn:00008453                 shr     ecx, 1
.text$mn:00008455                 mov     eax, [ebp+var_1C]
.text$mn:00008458                 xor     edx, edx
.text$mn:0000845A                 mov     esi, 3
.text$mn:0000845F                 div     esi
.text$mn:00008461                 cmp     ecx, eax
.text$mn:00008463                 ja      short loc_8467
.text$mn:00008465                 jmp     short loc_849F
.text$mn:00008467 ; ---------------------------------------------------------------------------
.text$mn:00008467
.text$mn:00008467 loc_8467:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+63j
.text$mn:00008467                 mov     ecx, [ebp+var_18]
.text$mn:0000846A                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:0000846F                 mov     edx, [ebp+var_18]
.text$mn:00008472                 mov     ecx, [edx+18h]
.text$mn:00008475                 shr     ecx, 1
.text$mn:00008477                 sub     eax, ecx
.text$mn:00008479                 mov     edx, [ebp+var_18]
.text$mn:0000847C                 cmp     [edx+18h], eax
.text$mn:0000847F                 ja      short loc_8494
.text$mn:00008481                 mov     eax, [ebp+var_18]
.text$mn:00008484                 mov     ecx, [eax+18h]
.text$mn:00008487                 shr     ecx, 1
.text$mn:00008489                 mov     edx, [ebp+var_18]
.text$mn:0000848C                 add     ecx, [edx+18h]
.text$mn:0000848F                 mov     [ebp+var_1C], ecx
.text$mn:00008492                 jmp     short loc_849F
.text$mn:00008494 ; ---------------------------------------------------------------------------
.text$mn:00008494
.text$mn:00008494 loc_8494:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+7Fj
.text$mn:00008494                 mov     ecx, [ebp+var_18]
.text$mn:00008497                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:0000849C                 mov     [ebp+var_1C], eax
.text$mn:0000849F
.text$mn:0000849F loc_849F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+4Bj
.text$mn:0000849F                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+65j ...
.text$mn:0000849F                 mov     [ebp+var_4], 0
.text$mn:000084A6                 mov     eax, [ebp+var_1C]
.text$mn:000084A9                 add     eax, 1
.text$mn:000084AC                 push    eax
.text$mn:000084AD                 lea     ecx, [ebp+var_11]
.text$mn:000084B0                 push    ecx
.text$mn:000084B1                 mov     ecx, [ebp+var_18]
.text$mn:000084B4                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000084B9                 mov     ecx, eax
.text$mn:000084BB                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:000084C0                 mov     [ebp+var_20], eax
.text$mn:000084C3                 jmp     short loc_8522
.text$mn:000084C3 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$mn:000084C3
.text$mn:000084C5
.text$mn:000084C5 ; =============== S U B R O U T I N E =======================================
.text$mn:000084C5
.text$mn:000084C5
.text$mn:000084C5 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
.text$mn:000084C5                                         ; DATA XREF: .xdata$x:0000C07Co
.text$mn:000084C5
.text$mn:000084C5 ; FUNCTION CHUNK AT .text$mn:0000850C SIZE 00000009 BYTES
.text$mn:000084C5 ; FUNCTION CHUNK AT .text$mn:0000851C SIZE 00000006 BYTES
.text$mn:000084C5
.text$mn:000084C5                 mov     [ebp-10h], esp
.text$mn:000084C8                 mov     edx, [ebp+8]
.text$mn:000084CB                 mov     [ebp-1Ch], edx
.text$mn:000084CE                 mov     byte ptr [ebp-4], 2
.text$mn:000084D2                 mov     eax, [ebp-1Ch]
.text$mn:000084D5                 add     eax, 1
.text$mn:000084D8                 push    eax
.text$mn:000084D9                 lea     ecx, [ebp-12h]
.text$mn:000084DC                 push    ecx
.text$mn:000084DD                 mov     ecx, [ebp-18h]
.text$mn:000084E0                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000084E5                 mov     ecx, eax
.text$mn:000084E7                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:000084EC                 mov     [ebp-20h], eax
.text$mn:000084EF                 jmp     short loc_850C
.text$mn:000084EF __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 endp
.text$mn:000084EF
.text$mn:000084F1
.text$mn:000084F1 ; =============== S U B R O U T I N E =======================================
.text$mn:000084F1
.text$mn:000084F1 ; Attributes: noreturn
.text$mn:000084F1
.text$mn:000084F1 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
.text$mn:000084F1                                         ; DATA XREF: .xdata$x:0000C08Co
.text$mn:000084F1                 push    0               ; Size
.text$mn:000084F3                 push    1               ; char
.text$mn:000084F5                 mov     ecx, [ebp-18h]
.text$mn:000084F8                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:000084FD                 push    0
.text$mn:000084FF                 push    0
.text$mn:00008501                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00008501 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 endp
.text$mn:00008501
.text$mn:00008506 ; ---------------------------------------------------------------------------
.text$mn:00008506                 mov     eax, offset $LN17
.text$mn:0000850B                 retn
.text$mn:0000850C ; ---------------------------------------------------------------------------
.text$mn:0000850C ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:0000850C
.text$mn:0000850C loc_850C:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+2Aj
.text$mn:0000850C                 mov     dword ptr [ebp-4], 1
.text$mn:00008513                 jmp     short loc_851C
.text$mn:00008513 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00008515
.text$mn:00008515 ; =============== S U B R O U T I N E =======================================
.text$mn:00008515
.text$mn:00008515
.text$mn:00008515 $LN17           proc near               ; DATA XREF: .text$mn:00008506o
.text$mn:00008515                 mov     dword ptr [ebp-4], 1
.text$mn:00008515 $LN17           endp ; sp-analysis failed
.text$mn:00008515
.text$mn:0000851C ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:0000851C
.text$mn:0000851C loc_851C:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+4Ej
.text$mn:0000851C                 mov     eax, offset $LN19
.text$mn:00008521                 retn
.text$mn:00008521 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00008522 ; ---------------------------------------------------------------------------
.text$mn:00008522 ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00008522
.text$mn:00008522 loc_8522:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+C3j
.text$mn:00008522                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008529                 jmp     short loc_8532
.text$mn:00008529 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:0000852B
.text$mn:0000852B ; =============== S U B R O U T I N E =======================================
.text$mn:0000852B
.text$mn:0000852B
.text$mn:0000852B $LN19           proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:loc_851Co
.text$mn:0000852B                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00008532
.text$mn:00008532 loc_8532:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+129j
.text$mn:00008532                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:00008536                 jbe     short loc_8551
.text$mn:00008538                 mov     edx, [ebp+0Ch]
.text$mn:0000853B                 push    edx             ; Size
.text$mn:0000853C                 mov     ecx, [ebp-18h]
.text$mn:0000853F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008544                 push    eax             ; Src
.text$mn:00008545                 mov     eax, [ebp-20h]
.text$mn:00008548                 push    eax             ; Dst
.text$mn:00008549                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:0000854E                 add     esp, 0Ch
.text$mn:00008551
.text$mn:00008551 loc_8551:                               ; CODE XREF: $LN19+Bj
.text$mn:00008551                 push    0               ; Size
.text$mn:00008553                 push    1               ; char
.text$mn:00008555                 mov     ecx, [ebp-18h]
.text$mn:00008558                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:0000855D                 lea     ecx, [ebp-20h]
.text$mn:00008560                 push    ecx             ; int
.text$mn:00008561                 mov     edx, [ebp-18h]
.text$mn:00008564                 add     edx, 4
.text$mn:00008567                 push    edx             ; void *
.text$mn:00008568                 lea     eax, [ebp-13h]
.text$mn:0000856B                 push    eax
.text$mn:0000856C                 mov     ecx, [ebp-18h]
.text$mn:0000856F                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00008574                 mov     ecx, eax
.text$mn:00008576                 call    ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)
.text$mn:0000857B                 mov     ecx, [ebp-18h]
.text$mn:0000857E                 mov     edx, [ebp-1Ch]
.text$mn:00008581                 mov     [ecx+18h], edx
.text$mn:00008584                 mov     eax, [ebp+0Ch]
.text$mn:00008587                 push    eax
.text$mn:00008588                 mov     ecx, [ebp-18h]
.text$mn:0000858B                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00008590                 mov     ecx, [ebp-0Ch]
.text$mn:00008593                 mov     large fs:0, ecx
.text$mn:0000859A                 pop     ecx
.text$mn:0000859B                 pop     edi
.text$mn:0000859C                 pop     esi
.text$mn:0000859D                 pop     ebx
.text$mn:0000859E                 mov     esp, ebp
.text$mn:000085A0                 pop     ebp
.text$mn:000085A1                 retn    8
.text$mn:000085A1 $LN19           endp ; sp-analysis failed
.text$mn:000085A1
.text$mn:000085A1 _text$mn        ends
.text$mn:000085A1
.text$x:000085A4 ; ===========================================================================
.text$x:000085A4
.text$x:000085A4 ; Segment type: Pure code
.text$x:000085A4 ; Segment permissions: Read/Execute
.text$x:000085A4 _text$x         segment para public 'CODE' use32
.text$x:000085A4                 assume cs:_text$x
.text$x:000085A4                 ;org 85A4h
.text$x:000085A4 ; COMDAT (pick associative to section at 8400)
.text$x:000085A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000085A4
.text$x:000085A4 ; =============== S U B R O U T I N E =======================================
.text$x:000085A4
.text$x:000085A4
.text$x:000085A4 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$x:000085A4                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+5o
.text$x:000085A4
.text$x:000085A4 arg_4           = dword ptr  8
.text$x:000085A4
.text$x:000085A4                 mov     edx, [esp+arg_4]
.text$x:000085A8                 lea     eax, [edx+0Ch]
.text$x:000085AB                 mov     ecx, [edx-24h]
.text$x:000085AE                 xor     ecx, eax
.text$x:000085B0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000085B5                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$x:000085BA                 jmp     ___CxxFrameHandler3
.text$x:000085BA __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$x:000085BA
.text$x:000085BA ; ---------------------------------------------------------------------------
.text$x:000085BF                 align 10h
.text$x:000085BF _text$x         ends
.text$x:000085BF
.text$mn:000085C0 ; ===========================================================================
.text$mn:000085C0
.text$mn:000085C0 ; Segment type: Pure code
.text$mn:000085C0 ; Segment permissions: Read/Execute
.text$mn:000085C0 _text$mn        segment para public 'CODE' use32
.text$mn:000085C0                 assume cs:_text$mn
.text$mn:000085C0                 ;org 85C0h
.text$mn:000085C0 ; COMDAT (pick any)
.text$mn:000085C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000085C0
.text$mn:000085C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000085C0
.text$mn:000085C0 ; Attributes: bp-based frame
.text$mn:000085C0
.text$mn:000085C0 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Copy(unsigned int, unsigned int)
.text$mn:000085C0                 public ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:000085C0 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$mn:000085C0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+37p
.text$mn:000085C0
.text$mn:000085C0 var_20          = dword ptr -20h
.text$mn:000085C0 var_1C          = dword ptr -1Ch
.text$mn:000085C0 var_18          = dword ptr -18h
.text$mn:000085C0 var_11          = byte ptr -11h
.text$mn:000085C0 var_10          = dword ptr -10h
.text$mn:000085C0 var_C           = byte ptr -0Ch
.text$mn:000085C0 var_4           = dword ptr -4
.text$mn:000085C0 arg_0           = dword ptr  8
.text$mn:000085C0
.text$mn:000085C0 ; FUNCTION CHUNK AT .text$mn:000086E2 SIZE 00000009 BYTES
.text$mn:000085C0
.text$mn:000085C0                 push    ebp
.text$mn:000085C1                 mov     ebp, esp
.text$mn:000085C3                 push    0FFFFFFFFh
.text$mn:000085C5                 push    offset __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:000085CA                 mov     eax, large fs:0
.text$mn:000085D0                 push    eax
.text$mn:000085D1                 push    ecx
.text$mn:000085D2                 sub     esp, 10h
.text$mn:000085D5                 push    ebx
.text$mn:000085D6                 push    esi
.text$mn:000085D7                 push    edi
.text$mn:000085D8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000085DD                 xor     eax, ebp
.text$mn:000085DF                 push    eax
.text$mn:000085E0                 lea     eax, [ebp+var_C]
.text$mn:000085E3                 mov     large fs:0, eax
.text$mn:000085E9                 mov     [ebp+var_10], esp
.text$mn:000085EC                 mov     [ebp+var_18], ecx
.text$mn:000085EF                 mov     eax, [ebp+arg_0]
.text$mn:000085F2                 or      eax, 7
.text$mn:000085F5                 mov     [ebp+var_1C], eax
.text$mn:000085F8                 mov     ecx, [ebp+var_18]
.text$mn:000085FB                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00008600                 cmp     eax, [ebp+var_1C]
.text$mn:00008603                 jnb     short loc_860D
.text$mn:00008605                 mov     ecx, [ebp+arg_0]
.text$mn:00008608                 mov     [ebp+var_1C], ecx
.text$mn:0000860B                 jmp     short loc_865F
.text$mn:0000860D ; ---------------------------------------------------------------------------
.text$mn:0000860D
.text$mn:0000860D loc_860D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+43j
.text$mn:0000860D                 mov     edx, [ebp+var_18]
.text$mn:00008610                 mov     ecx, [edx+18h]
.text$mn:00008613                 shr     ecx, 1
.text$mn:00008615                 mov     eax, [ebp+var_1C]
.text$mn:00008618                 xor     edx, edx
.text$mn:0000861A                 mov     esi, 3
.text$mn:0000861F                 div     esi
.text$mn:00008621                 cmp     ecx, eax
.text$mn:00008623                 ja      short loc_8627
.text$mn:00008625                 jmp     short loc_865F
.text$mn:00008627 ; ---------------------------------------------------------------------------
.text$mn:00008627
.text$mn:00008627 loc_8627:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+63j
.text$mn:00008627                 mov     ecx, [ebp+var_18]
.text$mn:0000862A                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:0000862F                 mov     edx, [ebp+var_18]
.text$mn:00008632                 mov     ecx, [edx+18h]
.text$mn:00008635                 shr     ecx, 1
.text$mn:00008637                 sub     eax, ecx
.text$mn:00008639                 mov     edx, [ebp+var_18]
.text$mn:0000863C                 cmp     [edx+18h], eax
.text$mn:0000863F                 ja      short loc_8654
.text$mn:00008641                 mov     eax, [ebp+var_18]
.text$mn:00008644                 mov     ecx, [eax+18h]
.text$mn:00008647                 shr     ecx, 1
.text$mn:00008649                 mov     edx, [ebp+var_18]
.text$mn:0000864C                 add     ecx, [edx+18h]
.text$mn:0000864F                 mov     [ebp+var_1C], ecx
.text$mn:00008652                 jmp     short loc_865F
.text$mn:00008654 ; ---------------------------------------------------------------------------
.text$mn:00008654
.text$mn:00008654 loc_8654:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+7Fj
.text$mn:00008654                 mov     ecx, [ebp+var_18]
.text$mn:00008657                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:0000865C                 mov     [ebp+var_1C], eax
.text$mn:0000865F
.text$mn:0000865F loc_865F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+4Bj
.text$mn:0000865F                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+65j ...
.text$mn:0000865F                 mov     [ebp+var_4], 0
.text$mn:00008666                 mov     eax, [ebp+var_1C]
.text$mn:00008669                 add     eax, 1
.text$mn:0000866C                 push    eax
.text$mn:0000866D                 lea     ecx, [ebp+var_11]
.text$mn:00008670                 push    ecx
.text$mn:00008671                 mov     ecx, [ebp+var_18]
.text$mn:00008674                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00008679                 mov     ecx, eax
.text$mn:0000867B                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:00008680                 mov     [ebp+var_20], eax
.text$mn:00008683                 jmp     short loc_86E2
.text$mn:00008683 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$mn:00008683
.text$mn:00008685
.text$mn:00008685 ; =============== S U B R O U T I N E =======================================
.text$mn:00008685
.text$mn:00008685
.text$mn:00008685 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 proc near
.text$mn:00008685                                         ; DATA XREF: .xdata$x:0000C540o
.text$mn:00008685
.text$mn:00008685 ; FUNCTION CHUNK AT .text$mn:000086CC SIZE 00000009 BYTES
.text$mn:00008685 ; FUNCTION CHUNK AT .text$mn:000086DC SIZE 00000006 BYTES
.text$mn:00008685
.text$mn:00008685                 mov     [ebp-10h], esp
.text$mn:00008688                 mov     edx, [ebp+8]
.text$mn:0000868B                 mov     [ebp-1Ch], edx
.text$mn:0000868E                 mov     byte ptr [ebp-4], 2
.text$mn:00008692                 mov     eax, [ebp-1Ch]
.text$mn:00008695                 add     eax, 1
.text$mn:00008698                 push    eax
.text$mn:00008699                 lea     ecx, [ebp-12h]
.text$mn:0000869C                 push    ecx
.text$mn:0000869D                 mov     ecx, [ebp-18h]
.text$mn:000086A0                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000086A5                 mov     ecx, eax
.text$mn:000086A7                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:000086AC                 mov     [ebp-20h], eax
.text$mn:000086AF                 jmp     short loc_86CC
.text$mn:000086AF __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 endp
.text$mn:000086AF
.text$mn:000086B1
.text$mn:000086B1 ; =============== S U B R O U T I N E =======================================
.text$mn:000086B1
.text$mn:000086B1 ; Attributes: noreturn
.text$mn:000086B1
.text$mn:000086B1 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 proc near
.text$mn:000086B1                                         ; DATA XREF: .xdata$x:0000C550o
.text$mn:000086B1                 push    0
.text$mn:000086B3                 push    1
.text$mn:000086B5                 mov     ecx, [ebp-18h]
.text$mn:000086B8                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000086BD                 push    0
.text$mn:000086BF                 push    0
.text$mn:000086C1                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:000086C1 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 endp
.text$mn:000086C1
.text$mn:000086C6 ; ---------------------------------------------------------------------------
.text$mn:000086C6                 mov     eax, offset $LN17_0
.text$mn:000086CB                 retn
.text$mn:000086CC ; ---------------------------------------------------------------------------
.text$mn:000086CC ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:000086CC
.text$mn:000086CC loc_86CC:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+2Aj
.text$mn:000086CC                 mov     dword ptr [ebp-4], 1
.text$mn:000086D3                 jmp     short loc_86DC
.text$mn:000086D3 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:000086D5
.text$mn:000086D5 ; =============== S U B R O U T I N E =======================================
.text$mn:000086D5
.text$mn:000086D5
.text$mn:000086D5 $LN17_0         proc near               ; DATA XREF: .text$mn:000086C6o
.text$mn:000086D5                 mov     dword ptr [ebp-4], 1
.text$mn:000086D5 $LN17_0         endp ; sp-analysis failed
.text$mn:000086D5
.text$mn:000086DC ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:000086DC
.text$mn:000086DC loc_86DC:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+4Ej
.text$mn:000086DC                 mov     eax, offset $LN19_0
.text$mn:000086E1                 retn
.text$mn:000086E1 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:000086E2 ; ---------------------------------------------------------------------------
.text$mn:000086E2 ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:000086E2
.text$mn:000086E2 loc_86E2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+C3j
.text$mn:000086E2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000086E9                 jmp     short loc_86F2
.text$mn:000086E9 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:000086EB
.text$mn:000086EB ; =============== S U B R O U T I N E =======================================
.text$mn:000086EB
.text$mn:000086EB
.text$mn:000086EB $LN19_0         proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0:loc_86DCo
.text$mn:000086EB                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:000086F2
.text$mn:000086F2 loc_86F2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+129j
.text$mn:000086F2                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:000086F6                 jbe     short loc_8711
.text$mn:000086F8                 mov     edx, [ebp+0Ch]
.text$mn:000086FB                 push    edx             ; int
.text$mn:000086FC                 mov     ecx, [ebp-18h]
.text$mn:000086FF                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00008704                 push    eax             ; Src
.text$mn:00008705                 mov     eax, [ebp-20h]
.text$mn:00008708                 push    eax             ; Dst
.text$mn:00008709                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000870E                 add     esp, 0Ch
.text$mn:00008711
.text$mn:00008711 loc_8711:                               ; CODE XREF: $LN19_0+Bj
.text$mn:00008711                 push    0
.text$mn:00008713                 push    1
.text$mn:00008715                 mov     ecx, [ebp-18h]
.text$mn:00008718                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000871D                 lea     ecx, [ebp-20h]
.text$mn:00008720                 push    ecx             ; int
.text$mn:00008721                 mov     edx, [ebp-18h]
.text$mn:00008724                 add     edx, 4
.text$mn:00008727                 push    edx             ; void *
.text$mn:00008728                 lea     eax, [ebp-13h]
.text$mn:0000872B                 push    eax
.text$mn:0000872C                 mov     ecx, [ebp-18h]
.text$mn:0000872F                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00008734                 mov     ecx, eax
.text$mn:00008736                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:0000873B                 mov     ecx, [ebp-18h]
.text$mn:0000873E                 mov     edx, [ebp-1Ch]
.text$mn:00008741                 mov     [ecx+18h], edx
.text$mn:00008744                 mov     eax, [ebp+0Ch]
.text$mn:00008747                 push    eax
.text$mn:00008748                 mov     ecx, [ebp-18h]
.text$mn:0000874B                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00008750                 mov     ecx, [ebp-0Ch]
.text$mn:00008753                 mov     large fs:0, ecx
.text$mn:0000875A                 pop     ecx
.text$mn:0000875B                 pop     edi
.text$mn:0000875C                 pop     esi
.text$mn:0000875D                 pop     ebx
.text$mn:0000875E                 mov     esp, ebp
.text$mn:00008760                 pop     ebp
.text$mn:00008761                 retn    8
.text$mn:00008761 $LN19_0         endp ; sp-analysis failed
.text$mn:00008761
.text$mn:00008761 _text$mn        ends
.text$mn:00008761
.text$x:00008764 ; ===========================================================================
.text$x:00008764
.text$x:00008764 ; Segment type: Pure code
.text$x:00008764 ; Segment permissions: Read/Execute
.text$x:00008764 _text$x         segment para public 'CODE' use32
.text$x:00008764                 assume cs:_text$x
.text$x:00008764                 ;org 8764h
.text$x:00008764 ; COMDAT (pick associative to section at 85C0)
.text$x:00008764                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008764
.text$x:00008764 ; =============== S U B R O U T I N E =======================================
.text$x:00008764
.text$x:00008764
.text$x:00008764 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$x:00008764                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+5o
.text$x:00008764
.text$x:00008764 arg_4           = dword ptr  8
.text$x:00008764
.text$x:00008764                 mov     edx, [esp+arg_4]
.text$x:00008768                 lea     eax, [edx+0Ch]
.text$x:0000876B                 mov     ecx, [edx-24h]
.text$x:0000876E                 xor     ecx, eax
.text$x:00008770                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008775                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$x:0000877A                 jmp     ___CxxFrameHandler3
.text$x:0000877A __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$x:0000877A
.text$x:0000877A ; ---------------------------------------------------------------------------
.text$x:0000877F                 align 10h
.text$x:0000877F _text$x         ends
.text$x:0000877F
.text$mn:00008780 ; ===========================================================================
.text$mn:00008780
.text$mn:00008780 ; Segment type: Pure code
.text$mn:00008780 ; Segment permissions: Read/Execute
.text$mn:00008780 _text$mn        segment para public 'CODE' use32
.text$mn:00008780                 assume cs:_text$mn
.text$mn:00008780                 ;org 8780h
.text$mn:00008780 ; COMDAT (pick any)
.text$mn:00008780                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008780
.text$mn:00008780 ; =============== S U B R O U T I N E =======================================
.text$mn:00008780
.text$mn:00008780 ; Attributes: bp-based frame
.text$mn:00008780
.text$mn:00008780 ; protected: void __thiscall std::vector<int, class std::allocator<int>>::_Destroy(int *, int *)
.text$mn:00008780                 public ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z
.text$mn:00008780 ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z proc near
.text$mn:00008780                                         ; CODE XREF: std::vector<int,std::allocator<int>>::_Reallocate(uint)+CBp
.text$mn:00008780
.text$mn:00008780 var_8           = dword ptr -8
.text$mn:00008780 var_1           = byte ptr -1
.text$mn:00008780 arg_0           = dword ptr  8
.text$mn:00008780 arg_4           = dword ptr  0Ch
.text$mn:00008780
.text$mn:00008780                 push    ebp
.text$mn:00008781                 mov     ebp, esp
.text$mn:00008783                 sub     esp, 8
.text$mn:00008786                 mov     [ebp+var_8], ecx
.text$mn:00008789                 lea     eax, [ebp+var_1]
.text$mn:0000878C                 push    eax
.text$mn:0000878D                 mov     ecx, [ebp+var_8]
.text$mn:00008790                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int>>>::_Getal(void)
.text$mn:00008795                 lea     ecx, [ebp+var_1]
.text$mn:00008798                 push    ecx
.text$mn:00008799                 mov     edx, [ebp+arg_4]
.text$mn:0000879C                 push    edx
.text$mn:0000879D                 mov     eax, [ebp+arg_0]
.text$mn:000087A0                 push    eax
.text$mn:000087A1                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int>>>(int *,int *,std::_Wrap_alloc<std::allocator<int>> &)
.text$mn:000087A6                 add     esp, 0Ch
.text$mn:000087A9                 mov     esp, ebp
.text$mn:000087AB                 pop     ebp
.text$mn:000087AC                 retn    8
.text$mn:000087AC ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z endp
.text$mn:000087AC
.text$mn:000087AC ; ---------------------------------------------------------------------------
.text$mn:000087AF                 align 10h
.text$mn:000087AF _text$mn        ends
.text$mn:000087AF
.text$mn:000087B0 ; ===========================================================================
.text$mn:000087B0
.text$mn:000087B0 ; Segment type: Pure code
.text$mn:000087B0 ; Segment permissions: Read/Execute
.text$mn:000087B0 _text$mn        segment para public 'CODE' use32
.text$mn:000087B0                 assume cs:_text$mn
.text$mn:000087B0                 ;org 87B0h
.text$mn:000087B0 ; COMDAT (pick any)
.text$mn:000087B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000087B0
.text$mn:000087B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000087B0
.text$mn:000087B0 ; Attributes: bp-based frame
.text$mn:000087B0
.text$mn:000087B0 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Destroy(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:000087B0                 public ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$mn:000087B0 ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z proc near
.text$mn:000087B0                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+CBp
.text$mn:000087B0                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Tidy(void)+2Bp
.text$mn:000087B0
.text$mn:000087B0 var_8           = dword ptr -8
.text$mn:000087B0 var_1           = byte ptr -1
.text$mn:000087B0 arg_0           = dword ptr  8
.text$mn:000087B0 arg_4           = dword ptr  0Ch
.text$mn:000087B0
.text$mn:000087B0                 push    ebp
.text$mn:000087B1                 mov     ebp, esp
.text$mn:000087B3                 sub     esp, 8
.text$mn:000087B6                 mov     [ebp+var_8], ecx
.text$mn:000087B9                 lea     eax, [ebp+var_1]
.text$mn:000087BC                 push    eax
.text$mn:000087BD                 mov     ecx, [ebp+var_8]
.text$mn:000087C0                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:000087C5                 lea     ecx, [ebp+var_1]
.text$mn:000087C8                 push    ecx
.text$mn:000087C9                 mov     edx, [ebp+arg_4]
.text$mn:000087CC                 push    edx
.text$mn:000087CD                 mov     eax, [ebp+arg_0]
.text$mn:000087D0                 push    eax
.text$mn:000087D1                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:000087D6                 add     esp, 0Ch
.text$mn:000087D9                 mov     esp, ebp
.text$mn:000087DB                 pop     ebp
.text$mn:000087DC                 retn    8
.text$mn:000087DC ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z endp
.text$mn:000087DC
.text$mn:000087DC ; ---------------------------------------------------------------------------
.text$mn:000087DF                 align 10h
.text$mn:000087DF _text$mn        ends
.text$mn:000087DF
.text$mn:000087E0 ; ===========================================================================
.text$mn:000087E0
.text$mn:000087E0 ; Segment type: Pure code
.text$mn:000087E0 ; Segment permissions: Read/Execute
.text$mn:000087E0 _text$mn        segment para public 'CODE' use32
.text$mn:000087E0                 assume cs:_text$mn
.text$mn:000087E0                 ;org 87E0h
.text$mn:000087E0 ; COMDAT (pick any)
.text$mn:000087E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000087E0
.text$mn:000087E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000087E0
.text$mn:000087E0 ; Attributes: bp-based frame
.text$mn:000087E0
.text$mn:000087E0 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Eos(unsigned int)
.text$mn:000087E0                 public ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
.text$mn:000087E0 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc near
.text$mn:000087E0                                         ; CODE XREF: $LN19+60p
.text$mn:000087E0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+83p ...
.text$mn:000087E0
.text$mn:000087E0 var_8           = dword ptr -8
.text$mn:000087E0 var_1           = byte ptr -1
.text$mn:000087E0 arg_0           = dword ptr  8
.text$mn:000087E0
.text$mn:000087E0                 push    ebp
.text$mn:000087E1                 mov     ebp, esp
.text$mn:000087E3                 sub     esp, 8
.text$mn:000087E6                 mov     [ebp+var_8], ecx
.text$mn:000087E9                 mov     [ebp+var_1], 0
.text$mn:000087ED                 mov     eax, [ebp+var_8]
.text$mn:000087F0                 mov     ecx, [ebp+arg_0]
.text$mn:000087F3                 mov     [eax+14h], ecx
.text$mn:000087F6                 lea     edx, [ebp+var_1]
.text$mn:000087F9                 push    edx
.text$mn:000087FA                 mov     ecx, [ebp+var_8]
.text$mn:000087FD                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008802                 add     eax, [ebp+arg_0]
.text$mn:00008805                 push    eax
.text$mn:00008806                 call    ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign(char &,char const &)
.text$mn:0000880B                 add     esp, 8
.text$mn:0000880E                 mov     esp, ebp
.text$mn:00008810                 pop     ebp
.text$mn:00008811                 retn    4
.text$mn:00008811 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z endp
.text$mn:00008811
.text$mn:00008811 _text$mn        ends
.text$mn:00008811
.text$mn:00008814 ; ===========================================================================
.text$mn:00008814
.text$mn:00008814 ; Segment type: Pure code
.text$mn:00008814 ; Segment permissions: Read/Execute
.text$mn:00008814 _text$mn        segment para public 'CODE' use32
.text$mn:00008814                 assume cs:_text$mn
.text$mn:00008814                 ;org 8814h
.text$mn:00008814 ; COMDAT (pick any)
.text$mn:00008814                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008814
.text$mn:00008814 ; =============== S U B R O U T I N E =======================================
.text$mn:00008814
.text$mn:00008814 ; Attributes: bp-based frame
.text$mn:00008814
.text$mn:00008814 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Eos(unsigned int)
.text$mn:00008814                 public ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
.text$mn:00008814 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z proc near
.text$mn:00008814                                         ; CODE XREF: $LN19_0+60p
.text$mn:00008814                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+83p ...
.text$mn:00008814
.text$mn:00008814 var_8           = dword ptr -8
.text$mn:00008814 var_2           = word ptr -2
.text$mn:00008814 arg_0           = dword ptr  8
.text$mn:00008814
.text$mn:00008814                 push    ebp
.text$mn:00008815                 mov     ebp, esp
.text$mn:00008817                 sub     esp, 8
.text$mn:0000881A                 mov     [ebp+var_8], ecx
.text$mn:0000881D                 xor     eax, eax
.text$mn:0000881F                 mov     [ebp+var_2], ax
.text$mn:00008823                 mov     ecx, [ebp+var_8]
.text$mn:00008826                 mov     edx, [ebp+arg_0]
.text$mn:00008829                 mov     [ecx+14h], edx
.text$mn:0000882C                 lea     eax, [ebp+var_2]
.text$mn:0000882F                 push    eax
.text$mn:00008830                 mov     ecx, [ebp+var_8]
.text$mn:00008833                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00008838                 mov     ecx, [ebp+arg_0]
.text$mn:0000883B                 lea     edx, [eax+ecx*2]
.text$mn:0000883E                 push    edx
.text$mn:0000883F                 call    ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ; std::char_traits<wchar_t>::assign(wchar_t &,wchar_t const &)
.text$mn:00008844                 add     esp, 8
.text$mn:00008847                 mov     esp, ebp
.text$mn:00008849                 pop     ebp
.text$mn:0000884A                 retn    4
.text$mn:0000884A ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z endp
.text$mn:0000884A
.text$mn:0000884A ; ---------------------------------------------------------------------------
.text$mn:0000884D                 align 10h
.text$mn:0000884D _text$mn        ends
.text$mn:0000884D
.text$mn:00008850 ; ===========================================================================
.text$mn:00008850
.text$mn:00008850 ; Segment type: Pure code
.text$mn:00008850 ; Segment permissions: Read/Execute
.text$mn:00008850 _text$mn        segment para public 'CODE' use32
.text$mn:00008850                 assume cs:_text$mn
.text$mn:00008850                 ;org 8850h
.text$mn:00008850 ; COMDAT (pick any)
.text$mn:00008850                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008850
.text$mn:00008850 ; =============== S U B R O U T I N E =======================================
.text$mn:00008850
.text$mn:00008850 ; Attributes: bp-based frame
.text$mn:00008850
.text$mn:00008850 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Free_proxy(void)
.text$mn:00008850                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:00008850 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00008850                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+30p
.text$mn:00008850
.text$mn:00008850 var_8           = dword ptr -8
.text$mn:00008850 var_1           = byte ptr -1
.text$mn:00008850
.text$mn:00008850                 push    ebp
.text$mn:00008851                 mov     ebp, esp
.text$mn:00008853                 sub     esp, 8
.text$mn:00008856                 mov     [ebp+var_8], ecx
.text$mn:00008859                 lea     ecx, [ebp+var_1]
.text$mn:0000885C                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00008861                 mov     ecx, [ebp+var_8] ; this
.text$mn:00008864                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00008869                 mov     eax, [ebp+var_8]
.text$mn:0000886C                 mov     ecx, [eax]
.text$mn:0000886E                 push    ecx
.text$mn:0000886F                 lea     ecx, [ebp+var_1]
.text$mn:00008872                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:00008877                 push    1               ; int
.text$mn:00008879                 mov     edx, [ebp+var_8]
.text$mn:0000887C                 mov     eax, [edx]
.text$mn:0000887E                 push    eax             ; void *
.text$mn:0000887F                 lea     ecx, [ebp+var_1]
.text$mn:00008882                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:00008887                 mov     ecx, [ebp+var_8]
.text$mn:0000888A                 mov     dword ptr [ecx], 0
.text$mn:00008890                 mov     esp, ebp
.text$mn:00008892                 pop     ebp
.text$mn:00008893                 retn
.text$mn:00008893 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:00008893
.text$mn:00008893 _text$mn        ends
.text$mn:00008893
.text$mn:00008894 ; ===========================================================================
.text$mn:00008894
.text$mn:00008894 ; Segment type: Pure code
.text$mn:00008894 ; Segment permissions: Read/Execute
.text$mn:00008894 _text$mn        segment para public 'CODE' use32
.text$mn:00008894                 assume cs:_text$mn
.text$mn:00008894                 ;org 8894h
.text$mn:00008894 ; COMDAT (pick any)
.text$mn:00008894                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008894
.text$mn:00008894 ; =============== S U B R O U T I N E =======================================
.text$mn:00008894
.text$mn:00008894 ; Attributes: bp-based frame
.text$mn:00008894
.text$mn:00008894 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:00008894                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:00008894 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00008894                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+30p
.text$mn:00008894
.text$mn:00008894 var_8           = dword ptr -8
.text$mn:00008894 var_1           = byte ptr -1
.text$mn:00008894
.text$mn:00008894                 push    ebp
.text$mn:00008895                 mov     ebp, esp
.text$mn:00008897                 sub     esp, 8
.text$mn:0000889A                 mov     [ebp+var_8], ecx
.text$mn:0000889D                 lea     ecx, [ebp+var_1]
.text$mn:000088A0                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:000088A5                 mov     ecx, [ebp+var_8] ; this
.text$mn:000088A8                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:000088AD                 mov     eax, [ebp+var_8]
.text$mn:000088B0                 mov     ecx, [eax]
.text$mn:000088B2                 push    ecx
.text$mn:000088B3                 lea     ecx, [ebp+var_1]
.text$mn:000088B6                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:000088BB                 push    1               ; int
.text$mn:000088BD                 mov     edx, [ebp+var_8]
.text$mn:000088C0                 mov     eax, [edx]
.text$mn:000088C2                 push    eax             ; void *
.text$mn:000088C3                 lea     ecx, [ebp+var_1]
.text$mn:000088C6                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:000088CB                 mov     ecx, [ebp+var_8]
.text$mn:000088CE                 mov     dword ptr [ecx], 0
.text$mn:000088D4                 mov     esp, ebp
.text$mn:000088D6                 pop     ebp
.text$mn:000088D7                 retn
.text$mn:000088D7 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:000088D7
.text$mn:000088D7 _text$mn        ends
.text$mn:000088D7
.text$mn:000088D8 ; ===========================================================================
.text$mn:000088D8
.text$mn:000088D8 ; Segment type: Pure code
.text$mn:000088D8 ; Segment permissions: Read/Execute
.text$mn:000088D8 _text$mn        segment para public 'CODE' use32
.text$mn:000088D8                 assume cs:_text$mn
.text$mn:000088D8                 ;org 88D8h
.text$mn:000088D8 ; COMDAT (pick any)
.text$mn:000088D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000088D8
.text$mn:000088D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000088D8
.text$mn:000088D8 ; Attributes: bp-based frame
.text$mn:000088D8
.text$mn:000088D8 ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Free_proxy(void)
.text$mn:000088D8                 public ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ
.text$mn:000088D8 ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ proc near
.text$mn:000088D8                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+30p
.text$mn:000088D8
.text$mn:000088D8 var_8           = dword ptr -8
.text$mn:000088D8 var_1           = byte ptr -1
.text$mn:000088D8
.text$mn:000088D8                 push    ebp
.text$mn:000088D9                 mov     ebp, esp
.text$mn:000088DB                 sub     esp, 8
.text$mn:000088DE                 mov     [ebp+var_8], ecx
.text$mn:000088E1                 lea     ecx, [ebp+var_1]
.text$mn:000088E4                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:000088E9                 mov     ecx, [ebp+var_8] ; this
.text$mn:000088EC                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:000088F1                 mov     eax, [ebp+var_8]
.text$mn:000088F4                 mov     ecx, [eax]
.text$mn:000088F6                 push    ecx
.text$mn:000088F7                 lea     ecx, [ebp+var_1]
.text$mn:000088FA                 call    ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:000088FF                 push    1               ; int
.text$mn:00008901                 mov     edx, [ebp+var_8]
.text$mn:00008904                 mov     eax, [edx]
.text$mn:00008906                 push    eax             ; void *
.text$mn:00008907                 lea     ecx, [ebp+var_1]
.text$mn:0000890A                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000890F                 mov     ecx, [ebp+var_8]
.text$mn:00008912                 mov     dword ptr [ecx], 0
.text$mn:00008918                 mov     esp, ebp
.text$mn:0000891A                 pop     ebp
.text$mn:0000891B                 retn
.text$mn:0000891B ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ endp
.text$mn:0000891B
.text$mn:0000891B _text$mn        ends
.text$mn:0000891B
.text$mn:0000891C ; ===========================================================================
.text$mn:0000891C
.text$mn:0000891C ; Segment type: Pure code
.text$mn:0000891C ; Segment permissions: Read/Execute
.text$mn:0000891C _text$mn        segment para public 'CODE' use32
.text$mn:0000891C                 assume cs:_text$mn
.text$mn:0000891C                 ;org 891Ch
.text$mn:0000891C ; COMDAT (pick any)
.text$mn:0000891C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000891C
.text$mn:0000891C ; =============== S U B R O U T I N E =======================================
.text$mn:0000891C
.text$mn:0000891C ; Attributes: bp-based frame
.text$mn:0000891C
.text$mn:0000891C ; public: struct std::_Wrap_alloc<class std::allocator<char>> __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Getal(void)const
.text$mn:0000891C                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
.text$mn:0000891C ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
.text$mn:0000891C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+B4p
.text$mn:0000891C                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+1Bp ...
.text$mn:0000891C
.text$mn:0000891C var_4           = dword ptr -4
.text$mn:0000891C arg_0           = dword ptr  8
.text$mn:0000891C
.text$mn:0000891C                 push    ebp
.text$mn:0000891D                 mov     ebp, esp
.text$mn:0000891F                 push    ecx
.text$mn:00008920                 mov     [ebp+var_4], ecx
.text$mn:00008923                 mov     ecx, [ebp+arg_0]
.text$mn:00008926                 call    ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)
.text$mn:0000892B                 mov     eax, [ebp+arg_0]
.text$mn:0000892E                 mov     esp, ebp
.text$mn:00008930                 pop     ebp
.text$mn:00008931                 retn    4
.text$mn:00008931 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ endp
.text$mn:00008931
.text$mn:00008931 _text$mn        ends
.text$mn:00008931
.text$mn:00008934 ; ===========================================================================
.text$mn:00008934
.text$mn:00008934 ; Segment type: Pure code
.text$mn:00008934 ; Segment permissions: Read/Execute
.text$mn:00008934 _text$mn        segment para public 'CODE' use32
.text$mn:00008934                 assume cs:_text$mn
.text$mn:00008934                 ;org 8934h
.text$mn:00008934 ; COMDAT (pick any)
.text$mn:00008934                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008934
.text$mn:00008934 ; =============== S U B R O U T I N E =======================================
.text$mn:00008934
.text$mn:00008934 ; Attributes: bp-based frame
.text$mn:00008934
.text$mn:00008934 ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Getal(void)const
.text$mn:00008934                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
.text$mn:00008934 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ proc near
.text$mn:00008934                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Fp
.text$mn:00008934                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+33p ...
.text$mn:00008934
.text$mn:00008934 var_4           = dword ptr -4
.text$mn:00008934 arg_0           = dword ptr  8
.text$mn:00008934
.text$mn:00008934                 push    ebp
.text$mn:00008935                 mov     ebp, esp
.text$mn:00008937                 push    ecx
.text$mn:00008938                 mov     [ebp+var_4], ecx
.text$mn:0000893B                 mov     ecx, [ebp+arg_0]
.text$mn:0000893E                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)
.text$mn:00008943                 mov     eax, [ebp+arg_0]
.text$mn:00008946                 mov     esp, ebp
.text$mn:00008948                 pop     ebp
.text$mn:00008949                 retn    4
.text$mn:00008949 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ endp
.text$mn:00008949
.text$mn:00008949 _text$mn        ends
.text$mn:00008949
.text$mn:0000894C ; ===========================================================================
.text$mn:0000894C
.text$mn:0000894C ; Segment type: Pure code
.text$mn:0000894C ; Segment permissions: Read/Execute
.text$mn:0000894C _text$mn        segment para public 'CODE' use32
.text$mn:0000894C                 assume cs:_text$mn
.text$mn:0000894C                 ;org 894Ch
.text$mn:0000894C ; COMDAT (pick any)
.text$mn:0000894C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000894C
.text$mn:0000894C ; =============== S U B R O U T I N E =======================================
.text$mn:0000894C
.text$mn:0000894C ; Attributes: bp-based frame
.text$mn:0000894C
.text$mn:0000894C ; public: struct std::_Wrap_alloc<class std::allocator<int>> __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<int, class std::allocator<int>>>::_Getal(void)const
.text$mn:0000894C                 public ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
.text$mn:0000894C ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ proc near
.text$mn:0000894C                                         ; CODE XREF: std::vector<int,std::allocator<int>>::_Umove<int *>(int *,int *,int *)+10p
.text$mn:0000894C                                         ; std::vector<int,std::allocator<int>>::_Destroy(int *,int *)+10p ...
.text$mn:0000894C
.text$mn:0000894C var_4           = dword ptr -4
.text$mn:0000894C arg_0           = dword ptr  8
.text$mn:0000894C
.text$mn:0000894C                 push    ebp
.text$mn:0000894D                 mov     ebp, esp
.text$mn:0000894F                 push    ecx
.text$mn:00008950                 mov     [ebp+var_4], ecx
.text$mn:00008953                 mov     ecx, [ebp+arg_0]
.text$mn:00008956                 call    ??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<int>>::_Wrap_alloc<std::allocator<int>>(void)
.text$mn:0000895B                 mov     eax, [ebp+arg_0]
.text$mn:0000895E                 mov     esp, ebp
.text$mn:00008960                 pop     ebp
.text$mn:00008961                 retn    4
.text$mn:00008961 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ endp
.text$mn:00008961
.text$mn:00008961 _text$mn        ends
.text$mn:00008961
.text$mn:00008964 ; ===========================================================================
.text$mn:00008964
.text$mn:00008964 ; Segment type: Pure code
.text$mn:00008964 ; Segment permissions: Read/Execute
.text$mn:00008964 _text$mn        segment para public 'CODE' use32
.text$mn:00008964                 assume cs:_text$mn
.text$mn:00008964                 ;org 8964h
.text$mn:00008964 ; COMDAT (pick any)
.text$mn:00008964                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008964
.text$mn:00008964 ; =============== S U B R O U T I N E =======================================
.text$mn:00008964
.text$mn:00008964 ; Attributes: bp-based frame
.text$mn:00008964
.text$mn:00008964 ; public: struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Getal(void)const
.text$mn:00008964                 public ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ
.text$mn:00008964 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ proc near
.text$mn:00008964                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+10p
.text$mn:00008964                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+10p ...
.text$mn:00008964
.text$mn:00008964 var_4           = dword ptr -4
.text$mn:00008964 arg_0           = dword ptr  8
.text$mn:00008964
.text$mn:00008964                 push    ebp
.text$mn:00008965                 mov     ebp, esp
.text$mn:00008967                 push    ecx
.text$mn:00008968                 mov     [ebp+var_4], ecx
.text$mn:0000896B                 mov     ecx, [ebp+arg_0]
.text$mn:0000896E                 call    ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00008973                 mov     eax, [ebp+arg_0]
.text$mn:00008976                 mov     esp, ebp
.text$mn:00008978                 pop     ebp
.text$mn:00008979                 retn    4
.text$mn:00008979 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ endp
.text$mn:00008979
.text$mn:00008979 _text$mn        ends
.text$mn:00008979
.text$mn:0000897C ; ===========================================================================
.text$mn:0000897C
.text$mn:0000897C ; Segment type: Pure code
.text$mn:0000897C ; Segment permissions: Read/Execute
.text$mn:0000897C _text$mn        segment para public 'CODE' use32
.text$mn:0000897C                 assume cs:_text$mn
.text$mn:0000897C                 ;org 897Ch
.text$mn:0000897C ; COMDAT (pick any)
.text$mn:0000897C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000897C
.text$mn:0000897C ; =============== S U B R O U T I N E =======================================
.text$mn:0000897C
.text$mn:0000897C ; Attributes: bp-based frame
.text$mn:0000897C
.text$mn:0000897C ; const struct std::_Container_base12 *__thiscall std::_Iterator_base12::_Getcont(std::_Iterator_base12 *__hidden this)
.text$mn:0000897C                 public ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
.text$mn:0000897C ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ proc near
.text$mn:0000897C                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+Bp
.text$mn:0000897C                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+20p ...
.text$mn:0000897C
.text$mn:0000897C var_8           = dword ptr -8
.text$mn:0000897C var_4           = dword ptr -4
.text$mn:0000897C
.text$mn:0000897C                 push    ebp
.text$mn:0000897D                 mov     ebp, esp
.text$mn:0000897F                 sub     esp, 8
.text$mn:00008982                 mov     [ebp+var_4], ecx
.text$mn:00008985                 mov     eax, [ebp+var_4]
.text$mn:00008988                 cmp     dword ptr [eax], 0
.text$mn:0000898B                 jnz     short loc_8996
.text$mn:0000898D                 mov     [ebp+var_8], 0
.text$mn:00008994                 jmp     short loc_89A0
.text$mn:00008996 ; ---------------------------------------------------------------------------
.text$mn:00008996
.text$mn:00008996 loc_8996:                               ; CODE XREF: std::_Iterator_base12::_Getcont(void)+Fj
.text$mn:00008996                 mov     ecx, [ebp+var_4]
.text$mn:00008999                 mov     edx, [ecx]
.text$mn:0000899B                 mov     eax, [edx]
.text$mn:0000899D                 mov     [ebp+var_8], eax
.text$mn:000089A0
.text$mn:000089A0 loc_89A0:                               ; CODE XREF: std::_Iterator_base12::_Getcont(void)+18j
.text$mn:000089A0                 mov     eax, [ebp+var_8]
.text$mn:000089A3                 mov     esp, ebp
.text$mn:000089A5                 pop     ebp
.text$mn:000089A6                 retn
.text$mn:000089A6 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ endp
.text$mn:000089A6
.text$mn:000089A6 ; ---------------------------------------------------------------------------
.text$mn:000089A7                 align 4
.text$mn:000089A7 _text$mn        ends
.text$mn:000089A7
.text$mn:000089A8 ; ===========================================================================
.text$mn:000089A8
.text$mn:000089A8 ; Segment type: Pure code
.text$mn:000089A8 ; Segment permissions: Read/Execute
.text$mn:000089A8 _text$mn        segment para public 'CODE' use32
.text$mn:000089A8                 assume cs:_text$mn
.text$mn:000089A8                 ;org 89A8h
.text$mn:000089A8 ; COMDAT (pick any)
.text$mn:000089A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000089A8
.text$mn:000089A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000089A8
.text$mn:000089A8 ; Attributes: bp-based frame
.text$mn:000089A8
.text$mn:000089A8 ; struct std::_Iterator_base12 **__thiscall std::_Container_base12::_Getpfirst(std::_Container_base12 *__hidden this)
.text$mn:000089A8                 public ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
.text$mn:000089A8 ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ proc near
.text$mn:000089A8                                         ; CODE XREF: std::vector<int,std::allocator<int>>::_Orphan_range(int *,int *)+3Cp
.text$mn:000089A8                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+3Cp
.text$mn:000089A8
.text$mn:000089A8 var_8           = dword ptr -8
.text$mn:000089A8 var_4           = dword ptr -4
.text$mn:000089A8
.text$mn:000089A8                 push    ebp
.text$mn:000089A9                 mov     ebp, esp
.text$mn:000089AB                 sub     esp, 8
.text$mn:000089AE                 mov     [ebp+var_4], ecx
.text$mn:000089B1                 mov     eax, [ebp+var_4]
.text$mn:000089B4                 cmp     dword ptr [eax], 0
.text$mn:000089B7                 jnz     short loc_89C2
.text$mn:000089B9                 mov     [ebp+var_8], 0
.text$mn:000089C0                 jmp     short loc_89CD
.text$mn:000089C2 ; ---------------------------------------------------------------------------
.text$mn:000089C2
.text$mn:000089C2 loc_89C2:                               ; CODE XREF: std::_Container_base12::_Getpfirst(void)+Fj
.text$mn:000089C2                 mov     ecx, [ebp+var_4]
.text$mn:000089C5                 mov     edx, [ecx]
.text$mn:000089C7                 add     edx, 4
.text$mn:000089CA                 mov     [ebp+var_8], edx
.text$mn:000089CD
.text$mn:000089CD loc_89CD:                               ; CODE XREF: std::_Container_base12::_Getpfirst(void)+18j
.text$mn:000089CD                 mov     eax, [ebp+var_8]
.text$mn:000089D0                 mov     esp, ebp
.text$mn:000089D2                 pop     ebp
.text$mn:000089D3                 retn
.text$mn:000089D3 ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ endp
.text$mn:000089D3
.text$mn:000089D3 _text$mn        ends
.text$mn:000089D3
.text$mn:000089D4 ; ===========================================================================
.text$mn:000089D4
.text$mn:000089D4 ; Segment type: Pure code
.text$mn:000089D4 ; Segment permissions: Read/Execute
.text$mn:000089D4 _text$mn        segment para public 'CODE' use32
.text$mn:000089D4                 assume cs:_text$mn
.text$mn:000089D4                 ;org 89D4h
.text$mn:000089D4 ; COMDAT (pick any)
.text$mn:000089D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000089D4
.text$mn:000089D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000089D4
.text$mn:000089D4 ; Attributes: bp-based frame
.text$mn:000089D4
.text$mn:000089D4 ; struct std::_Iterator_base12 **__thiscall std::_Iterator_base12::_Getpnext(std::_Iterator_base12 *__hidden this)
.text$mn:000089D4                 public ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
.text$mn:000089D4 ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ proc near
.text$mn:000089D4                                         ; CODE XREF: std::vector<int,std::allocator<int>>::_Orphan_range(int *,int *)+71p
.text$mn:000089D4                                         ; std::vector<int,std::allocator<int>>::_Orphan_range(int *,int *)+8Ap ...
.text$mn:000089D4
.text$mn:000089D4 var_4           = dword ptr -4
.text$mn:000089D4
.text$mn:000089D4                 push    ebp
.text$mn:000089D5                 mov     ebp, esp
.text$mn:000089D7                 push    ecx
.text$mn:000089D8                 mov     [ebp+var_4], ecx
.text$mn:000089DB                 mov     eax, [ebp+var_4]
.text$mn:000089DE                 add     eax, 4
.text$mn:000089E1                 mov     esp, ebp
.text$mn:000089E3                 pop     ebp
.text$mn:000089E4                 retn
.text$mn:000089E4 ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ endp
.text$mn:000089E4
.text$mn:000089E4 ; ---------------------------------------------------------------------------
.text$mn:000089E5                 align 4
.text$mn:000089E5 _text$mn        ends
.text$mn:000089E5
.text$mn:000089E8 ; ===========================================================================
.text$mn:000089E8
.text$mn:000089E8 ; Segment type: Pure code
.text$mn:000089E8 ; Segment permissions: Read/Execute
.text$mn:000089E8 _text$mn        segment para public 'CODE' use32
.text$mn:000089E8                 assume cs:_text$mn
.text$mn:000089E8                 ;org 89E8h
.text$mn:000089E8 ; COMDAT (pick any)
.text$mn:000089E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000089E8
.text$mn:000089E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000089E8
.text$mn:000089E8 ; Attributes: bp-based frame
.text$mn:000089E8
.text$mn:000089E8 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Grow(unsigned int, bool)
.text$mn:000089E8                 public ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
.text$mn:000089E8 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
.text$mn:000089E8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+6Ap
.text$mn:000089E8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+5Fp
.text$mn:000089E8
.text$mn:000089E8 var_C           = dword ptr -0Ch
.text$mn:000089E8 Size            = dword ptr -8
.text$mn:000089E8 var_4           = dword ptr -4
.text$mn:000089E8 arg_0           = dword ptr  8
.text$mn:000089E8 arg_4           = byte ptr  0Ch
.text$mn:000089E8
.text$mn:000089E8                 push    ebp
.text$mn:000089E9                 mov     ebp, esp
.text$mn:000089EB                 sub     esp, 0Ch
.text$mn:000089EE                 mov     [ebp+var_4], ecx
.text$mn:000089F1                 mov     ecx, [ebp+var_4]
.text$mn:000089F4                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:000089F9                 cmp     eax, [ebp+arg_0]
.text$mn:000089FC                 jnb     short loc_8A06
.text$mn:000089FE                 mov     ecx, [ebp+var_4]
.text$mn:00008A01                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:00008A06
.text$mn:00008A06 loc_8A06:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+14j
.text$mn:00008A06                 mov     eax, [ebp+var_4]
.text$mn:00008A09                 mov     ecx, [eax+18h]
.text$mn:00008A0C                 cmp     ecx, [ebp+arg_0]
.text$mn:00008A0F                 jnb     short loc_8A26
.text$mn:00008A11                 mov     edx, [ebp+var_4]
.text$mn:00008A14                 mov     eax, [edx+14h]
.text$mn:00008A17                 push    eax
.text$mn:00008A18                 mov     ecx, [ebp+arg_0]
.text$mn:00008A1B                 push    ecx
.text$mn:00008A1C                 mov     ecx, [ebp+var_4]
.text$mn:00008A1F                 call    ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)
.text$mn:00008A24                 jmp     short loc_8A70
.text$mn:00008A26 ; ---------------------------------------------------------------------------
.text$mn:00008A26
.text$mn:00008A26 loc_8A26:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+27j
.text$mn:00008A26                 movzx   edx, [ebp+arg_4]
.text$mn:00008A2A                 test    edx, edx
.text$mn:00008A2C                 jz      short loc_8A60
.text$mn:00008A2E                 cmp     [ebp+arg_0], 10h
.text$mn:00008A32                 jnb     short loc_8A60
.text$mn:00008A34                 mov     eax, [ebp+var_4]
.text$mn:00008A37                 mov     ecx, [ebp+arg_0]
.text$mn:00008A3A                 cmp     ecx, [eax+14h]
.text$mn:00008A3D                 jnb     short loc_8A47
.text$mn:00008A3F                 mov     edx, [ebp+arg_0]
.text$mn:00008A42                 mov     [ebp+Size], edx
.text$mn:00008A45                 jmp     short loc_8A50
.text$mn:00008A47 ; ---------------------------------------------------------------------------
.text$mn:00008A47
.text$mn:00008A47 loc_8A47:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+55j
.text$mn:00008A47                 mov     eax, [ebp+var_4]
.text$mn:00008A4A                 mov     ecx, [eax+14h]
.text$mn:00008A4D                 mov     [ebp+Size], ecx
.text$mn:00008A50
.text$mn:00008A50 loc_8A50:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+5Dj
.text$mn:00008A50                 mov     edx, [ebp+Size]
.text$mn:00008A53                 push    edx             ; Size
.text$mn:00008A54                 push    1               ; char
.text$mn:00008A56                 mov     ecx, [ebp+var_4]
.text$mn:00008A59                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00008A5E                 jmp     short loc_8A70
.text$mn:00008A60 ; ---------------------------------------------------------------------------
.text$mn:00008A60
.text$mn:00008A60 loc_8A60:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+44j
.text$mn:00008A60                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+4Aj
.text$mn:00008A60                 cmp     [ebp+arg_0], 0
.text$mn:00008A64                 jnz     short loc_8A70
.text$mn:00008A66                 push    0
.text$mn:00008A68                 mov     ecx, [ebp+var_4]
.text$mn:00008A6B                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00008A70
.text$mn:00008A70 loc_8A70:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+3Cj
.text$mn:00008A70                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+76j ...
.text$mn:00008A70                 cmp     [ebp+arg_0], 0
.text$mn:00008A74                 jbe     short loc_8A7F
.text$mn:00008A76                 mov     [ebp+var_C], 1
.text$mn:00008A7D                 jmp     short loc_8A86
.text$mn:00008A7F ; ---------------------------------------------------------------------------
.text$mn:00008A7F
.text$mn:00008A7F loc_8A7F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+8Cj
.text$mn:00008A7F                 mov     [ebp+var_C], 0
.text$mn:00008A86
.text$mn:00008A86 loc_8A86:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+95j
.text$mn:00008A86                 mov     al, byte ptr [ebp+var_C]
.text$mn:00008A89                 mov     esp, ebp
.text$mn:00008A8B                 pop     ebp
.text$mn:00008A8C                 retn    8
.text$mn:00008A8C ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z endp
.text$mn:00008A8C
.text$mn:00008A8C ; ---------------------------------------------------------------------------
.text$mn:00008A8F                 align 10h
.text$mn:00008A8F _text$mn        ends
.text$mn:00008A8F
.text$mn:00008A90 ; ===========================================================================
.text$mn:00008A90
.text$mn:00008A90 ; Segment type: Pure code
.text$mn:00008A90 ; Segment permissions: Read/Execute
.text$mn:00008A90 _text$mn        segment para public 'CODE' use32
.text$mn:00008A90                 assume cs:_text$mn
.text$mn:00008A90                 ;org 8A90h
.text$mn:00008A90 ; COMDAT (pick any)
.text$mn:00008A90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008A90
.text$mn:00008A90 ; =============== S U B R O U T I N E =======================================
.text$mn:00008A90
.text$mn:00008A90 ; Attributes: bp-based frame
.text$mn:00008A90
.text$mn:00008A90 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Grow(unsigned int, bool)
.text$mn:00008A90                 public ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z
.text$mn:00008A90 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z proc near
.text$mn:00008A90                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+6Dp
.text$mn:00008A90                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+8Ep ...
.text$mn:00008A90
.text$mn:00008A90 var_C           = dword ptr -0Ch
.text$mn:00008A90 var_8           = dword ptr -8
.text$mn:00008A90 var_4           = dword ptr -4
.text$mn:00008A90 arg_0           = dword ptr  8
.text$mn:00008A90 arg_4           = byte ptr  0Ch
.text$mn:00008A90
.text$mn:00008A90                 push    ebp
.text$mn:00008A91                 mov     ebp, esp
.text$mn:00008A93                 sub     esp, 0Ch
.text$mn:00008A96                 mov     [ebp+var_4], ecx
.text$mn:00008A99                 mov     ecx, [ebp+var_4]
.text$mn:00008A9C                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00008AA1                 cmp     eax, [ebp+arg_0]
.text$mn:00008AA4                 jnb     short loc_8AAE
.text$mn:00008AA6                 mov     ecx, [ebp+var_4]
.text$mn:00008AA9                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:00008AAE
.text$mn:00008AAE loc_8AAE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+14j
.text$mn:00008AAE                 mov     eax, [ebp+var_4]
.text$mn:00008AB1                 mov     ecx, [eax+18h]
.text$mn:00008AB4                 cmp     ecx, [ebp+arg_0]
.text$mn:00008AB7                 jnb     short loc_8ACE
.text$mn:00008AB9                 mov     edx, [ebp+var_4]
.text$mn:00008ABC                 mov     eax, [edx+14h]
.text$mn:00008ABF                 push    eax
.text$mn:00008AC0                 mov     ecx, [ebp+arg_0]
.text$mn:00008AC3                 push    ecx
.text$mn:00008AC4                 mov     ecx, [ebp+var_4]
.text$mn:00008AC7                 call    ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)
.text$mn:00008ACC                 jmp     short loc_8B18
.text$mn:00008ACE ; ---------------------------------------------------------------------------
.text$mn:00008ACE
.text$mn:00008ACE loc_8ACE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+27j
.text$mn:00008ACE                 movzx   edx, [ebp+arg_4]
.text$mn:00008AD2                 test    edx, edx
.text$mn:00008AD4                 jz      short loc_8B08
.text$mn:00008AD6                 cmp     [ebp+arg_0], 8
.text$mn:00008ADA                 jnb     short loc_8B08
.text$mn:00008ADC                 mov     eax, [ebp+var_4]
.text$mn:00008ADF                 mov     ecx, [ebp+arg_0]
.text$mn:00008AE2                 cmp     ecx, [eax+14h]
.text$mn:00008AE5                 jnb     short loc_8AEF
.text$mn:00008AE7                 mov     edx, [ebp+arg_0]
.text$mn:00008AEA                 mov     [ebp+var_8], edx
.text$mn:00008AED                 jmp     short loc_8AF8
.text$mn:00008AEF ; ---------------------------------------------------------------------------
.text$mn:00008AEF
.text$mn:00008AEF loc_8AEF:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+55j
.text$mn:00008AEF                 mov     eax, [ebp+var_4]
.text$mn:00008AF2                 mov     ecx, [eax+14h]
.text$mn:00008AF5                 mov     [ebp+var_8], ecx
.text$mn:00008AF8
.text$mn:00008AF8 loc_8AF8:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+5Dj
.text$mn:00008AF8                 mov     edx, [ebp+var_8]
.text$mn:00008AFB                 push    edx
.text$mn:00008AFC                 push    1
.text$mn:00008AFE                 mov     ecx, [ebp+var_4]
.text$mn:00008B01                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00008B06                 jmp     short loc_8B18
.text$mn:00008B08 ; ---------------------------------------------------------------------------
.text$mn:00008B08
.text$mn:00008B08 loc_8B08:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+44j
.text$mn:00008B08                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+4Aj
.text$mn:00008B08                 cmp     [ebp+arg_0], 0
.text$mn:00008B0C                 jnz     short loc_8B18
.text$mn:00008B0E                 push    0
.text$mn:00008B10                 mov     ecx, [ebp+var_4]
.text$mn:00008B13                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00008B18
.text$mn:00008B18 loc_8B18:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+3Cj
.text$mn:00008B18                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+76j ...
.text$mn:00008B18                 cmp     [ebp+arg_0], 0
.text$mn:00008B1C                 jbe     short loc_8B27
.text$mn:00008B1E                 mov     [ebp+var_C], 1
.text$mn:00008B25                 jmp     short loc_8B2E
.text$mn:00008B27 ; ---------------------------------------------------------------------------
.text$mn:00008B27
.text$mn:00008B27 loc_8B27:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+8Cj
.text$mn:00008B27                 mov     [ebp+var_C], 0
.text$mn:00008B2E
.text$mn:00008B2E loc_8B2E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+95j
.text$mn:00008B2E                 mov     al, byte ptr [ebp+var_C]
.text$mn:00008B31                 mov     esp, ebp
.text$mn:00008B33                 pop     ebp
.text$mn:00008B34                 retn    8
.text$mn:00008B34 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z endp
.text$mn:00008B34
.text$mn:00008B34 ; ---------------------------------------------------------------------------
.text$mn:00008B37                 align 4
.text$mn:00008B37 _text$mn        ends
.text$mn:00008B37
.text$mn:00008B38 ; ===========================================================================
.text$mn:00008B38
.text$mn:00008B38 ; Segment type: Pure code
.text$mn:00008B38 ; Segment permissions: Read/Execute
.text$mn:00008B38 _text$mn        segment para public 'CODE' use32
.text$mn:00008B38                 assume cs:_text$mn
.text$mn:00008B38                 ;org 8B38h
.text$mn:00008B38 ; COMDAT (pick any)
.text$mn:00008B38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008B38
.text$mn:00008B38 ; =============== S U B R O U T I N E =======================================
.text$mn:00008B38
.text$mn:00008B38 ; Attributes: bp-based frame
.text$mn:00008B38
.text$mn:00008B38 ; protected: unsigned int __thiscall std::vector<int, class std::allocator<int>>::_Grow_to(unsigned int)const
.text$mn:00008B38                 public ?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z
.text$mn:00008B38 ?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z proc near
.text$mn:00008B38                                         ; CODE XREF: std::vector<int,std::allocator<int>>::_Reserve(uint)+45p
.text$mn:00008B38
.text$mn:00008B38 var_C           = dword ptr -0Ch
.text$mn:00008B38 var_8           = dword ptr -8
.text$mn:00008B38 var_4           = dword ptr -4
.text$mn:00008B38 arg_0           = dword ptr  8
.text$mn:00008B38
.text$mn:00008B38                 push    ebp
.text$mn:00008B39                 mov     ebp, esp
.text$mn:00008B3B                 sub     esp, 0Ch
.text$mn:00008B3E                 mov     [ebp+var_8], ecx
.text$mn:00008B41                 mov     ecx, [ebp+var_8]
.text$mn:00008B44                 call    ?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int>>::capacity(void)
.text$mn:00008B49                 mov     [ebp+var_4], eax
.text$mn:00008B4C                 mov     ecx, [ebp+var_8]
.text$mn:00008B4F                 call    ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int>>::max_size(void)
.text$mn:00008B54                 mov     ecx, [ebp+var_4]
.text$mn:00008B57                 shr     ecx, 1
.text$mn:00008B59                 sub     eax, ecx
.text$mn:00008B5B                 cmp     eax, [ebp+var_4]
.text$mn:00008B5E                 jnb     short loc_8B69
.text$mn:00008B60                 mov     [ebp+var_C], 0
.text$mn:00008B67                 jmp     short loc_8B74
.text$mn:00008B69 ; ---------------------------------------------------------------------------
.text$mn:00008B69
.text$mn:00008B69 loc_8B69:                               ; CODE XREF: std::vector<int,std::allocator<int>>::_Grow_to(uint)+26j
.text$mn:00008B69                 mov     edx, [ebp+var_4]
.text$mn:00008B6C                 shr     edx, 1
.text$mn:00008B6E                 add     edx, [ebp+var_4]
.text$mn:00008B71                 mov     [ebp+var_C], edx
.text$mn:00008B74
.text$mn:00008B74 loc_8B74:                               ; CODE XREF: std::vector<int,std::allocator<int>>::_Grow_to(uint)+2Fj
.text$mn:00008B74                 mov     eax, [ebp+var_C]
.text$mn:00008B77                 mov     [ebp+var_4], eax
.text$mn:00008B7A                 mov     ecx, [ebp+var_4]
.text$mn:00008B7D                 cmp     ecx, [ebp+arg_0]
.text$mn:00008B80                 jnb     short loc_8B88
.text$mn:00008B82                 mov     edx, [ebp+arg_0]
.text$mn:00008B85                 mov     [ebp+var_4], edx
.text$mn:00008B88
.text$mn:00008B88 loc_8B88:                               ; CODE XREF: std::vector<int,std::allocator<int>>::_Grow_to(uint)+48j
.text$mn:00008B88                 mov     eax, [ebp+var_4]
.text$mn:00008B8B                 mov     esp, ebp
.text$mn:00008B8D                 pop     ebp
.text$mn:00008B8E                 retn    4
.text$mn:00008B8E ?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z endp
.text$mn:00008B8E
.text$mn:00008B8E ; ---------------------------------------------------------------------------
.text$mn:00008B91                 align 4
.text$mn:00008B91 _text$mn        ends
.text$mn:00008B91
.text$mn:00008B94 ; ===========================================================================
.text$mn:00008B94
.text$mn:00008B94 ; Segment type: Pure code
.text$mn:00008B94 ; Segment permissions: Read/Execute
.text$mn:00008B94 _text$mn        segment para public 'CODE' use32
.text$mn:00008B94                 assume cs:_text$mn
.text$mn:00008B94                 ;org 8B94h
.text$mn:00008B94 ; COMDAT (pick any)
.text$mn:00008B94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008B94
.text$mn:00008B94 ; =============== S U B R O U T I N E =======================================
.text$mn:00008B94
.text$mn:00008B94 ; Attributes: bp-based frame
.text$mn:00008B94
.text$mn:00008B94 ; protected: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Grow_to(unsigned int)const
.text$mn:00008B94                 public ?_Grow_to@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEII@Z
.text$mn:00008B94 ?_Grow_to@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEII@Z proc near
.text$mn:00008B94                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+45p
.text$mn:00008B94
.text$mn:00008B94 var_C           = dword ptr -0Ch
.text$mn:00008B94 var_8           = dword ptr -8
.text$mn:00008B94 var_4           = dword ptr -4
.text$mn:00008B94 arg_0           = dword ptr  8
.text$mn:00008B94
.text$mn:00008B94                 push    ebp
.text$mn:00008B95                 mov     ebp, esp
.text$mn:00008B97                 sub     esp, 0Ch
.text$mn:00008B9A                 mov     [ebp+var_8], ecx
.text$mn:00008B9D                 mov     ecx, [ebp+var_8]
.text$mn:00008BA0                 call    ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::capacity(void)
.text$mn:00008BA5                 mov     [ebp+var_4], eax
.text$mn:00008BA8                 mov     ecx, [ebp+var_8]
.text$mn:00008BAB                 call    ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)
.text$mn:00008BB0                 mov     ecx, [ebp+var_4]
.text$mn:00008BB3                 shr     ecx, 1
.text$mn:00008BB5                 sub     eax, ecx
.text$mn:00008BB7                 cmp     eax, [ebp+var_4]
.text$mn:00008BBA                 jnb     short loc_8BC5
.text$mn:00008BBC                 mov     [ebp+var_C], 0
.text$mn:00008BC3                 jmp     short loc_8BD0
.text$mn:00008BC5 ; ---------------------------------------------------------------------------
.text$mn:00008BC5
.text$mn:00008BC5 loc_8BC5:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+26j
.text$mn:00008BC5                 mov     edx, [ebp+var_4]
.text$mn:00008BC8                 shr     edx, 1
.text$mn:00008BCA                 add     edx, [ebp+var_4]
.text$mn:00008BCD                 mov     [ebp+var_C], edx
.text$mn:00008BD0
.text$mn:00008BD0 loc_8BD0:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+2Fj
.text$mn:00008BD0                 mov     eax, [ebp+var_C]
.text$mn:00008BD3                 mov     [ebp+var_4], eax
.text$mn:00008BD6                 mov     ecx, [ebp+var_4]
.text$mn:00008BD9                 cmp     ecx, [ebp+arg_0]
.text$mn:00008BDC                 jnb     short loc_8BE4
.text$mn:00008BDE                 mov     edx, [ebp+arg_0]
.text$mn:00008BE1                 mov     [ebp+var_4], edx
.text$mn:00008BE4
.text$mn:00008BE4 loc_8BE4:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+48j
.text$mn:00008BE4                 mov     eax, [ebp+var_4]
.text$mn:00008BE7                 mov     esp, ebp
.text$mn:00008BE9                 pop     ebp
.text$mn:00008BEA                 retn    4
.text$mn:00008BEA ?_Grow_to@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEII@Z endp
.text$mn:00008BEA
.text$mn:00008BEA ; ---------------------------------------------------------------------------
.text$mn:00008BED                 align 10h
.text$mn:00008BED _text$mn        ends
.text$mn:00008BED
.text$mn:00008BF0 ; ===========================================================================
.text$mn:00008BF0
.text$mn:00008BF0 ; Segment type: Pure code
.text$mn:00008BF0 ; Segment permissions: Read/Execute
.text$mn:00008BF0 _text$mn        segment para public 'CODE' use32
.text$mn:00008BF0                 assume cs:_text$mn
.text$mn:00008BF0                 ;org 8BF0h
.text$mn:00008BF0 ; COMDAT (pick any)
.text$mn:00008BF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008BF0
.text$mn:00008BF0 ; =============== S U B R O U T I N E =======================================
.text$mn:00008BF0
.text$mn:00008BF0 ; Attributes: bp-based frame
.text$mn:00008BF0
.text$mn:00008BF0 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Inside(char const *)
.text$mn:00008BF0                 public ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
.text$mn:00008BF0 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
.text$mn:00008BF0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+2Ap
.text$mn:00008BF0
.text$mn:00008BF0 var_4           = dword ptr -4
.text$mn:00008BF0 arg_0           = dword ptr  8
.text$mn:00008BF0
.text$mn:00008BF0                 push    ebp
.text$mn:00008BF1                 mov     ebp, esp
.text$mn:00008BF3                 push    ecx
.text$mn:00008BF4                 mov     [ebp+var_4], ecx
.text$mn:00008BF7                 cmp     [ebp+arg_0], 0
.text$mn:00008BFB                 jz      short loc_8C1D
.text$mn:00008BFD                 mov     ecx, [ebp+var_4]
.text$mn:00008C00                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008C05                 cmp     [ebp+arg_0], eax
.text$mn:00008C08                 jb      short loc_8C1D
.text$mn:00008C0A                 mov     ecx, [ebp+var_4]
.text$mn:00008C0D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008C12                 mov     ecx, [ebp+var_4]
.text$mn:00008C15                 add     eax, [ecx+14h]
.text$mn:00008C18                 cmp     eax, [ebp+arg_0]
.text$mn:00008C1B                 ja      short loc_8C23
.text$mn:00008C1D
.text$mn:00008C1D loc_8C1D:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+Bj
.text$mn:00008C1D                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+18j
.text$mn:00008C1D                 xor     al, al
.text$mn:00008C1F                 jmp     short loc_8C25
.text$mn:00008C21 ; ---------------------------------------------------------------------------
.text$mn:00008C21                 jmp     short loc_8C25
.text$mn:00008C23 ; ---------------------------------------------------------------------------
.text$mn:00008C23
.text$mn:00008C23 loc_8C23:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Bj
.text$mn:00008C23                 mov     al, 1
.text$mn:00008C25
.text$mn:00008C25 loc_8C25:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Fj
.text$mn:00008C25                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+31j
.text$mn:00008C25                 mov     esp, ebp
.text$mn:00008C27                 pop     ebp
.text$mn:00008C28                 retn    4
.text$mn:00008C28 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z endp
.text$mn:00008C28
.text$mn:00008C28 ; ---------------------------------------------------------------------------
.text$mn:00008C2B                 align 4
.text$mn:00008C2B _text$mn        ends
.text$mn:00008C2B
.text$mn:00008C2C ; ===========================================================================
.text$mn:00008C2C
.text$mn:00008C2C ; Segment type: Pure code
.text$mn:00008C2C ; Segment permissions: Read/Execute
.text$mn:00008C2C _text$mn        segment para public 'CODE' use32
.text$mn:00008C2C                 assume cs:_text$mn
.text$mn:00008C2C                 ;org 8C2Ch
.text$mn:00008C2C ; COMDAT (pick any)
.text$mn:00008C2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008C2C
.text$mn:00008C2C ; =============== S U B R O U T I N E =======================================
.text$mn:00008C2C
.text$mn:00008C2C ; Attributes: bp-based frame
.text$mn:00008C2C
.text$mn:00008C2C ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:00008C2C                 public ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z
.text$mn:00008C2C ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z proc near
.text$mn:00008C2C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+2Cp
.text$mn:00008C2C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+2Ap ...
.text$mn:00008C2C
.text$mn:00008C2C var_4           = dword ptr -4
.text$mn:00008C2C arg_0           = dword ptr  8
.text$mn:00008C2C
.text$mn:00008C2C                 push    ebp
.text$mn:00008C2D                 mov     ebp, esp
.text$mn:00008C2F                 push    ecx
.text$mn:00008C30                 mov     [ebp+var_4], ecx
.text$mn:00008C33                 cmp     [ebp+arg_0], 0
.text$mn:00008C37                 jz      short loc_8C5C
.text$mn:00008C39                 mov     ecx, [ebp+var_4]
.text$mn:00008C3C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00008C41                 cmp     [ebp+arg_0], eax
.text$mn:00008C44                 jb      short loc_8C5C
.text$mn:00008C46                 mov     ecx, [ebp+var_4]
.text$mn:00008C49                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00008C4E                 mov     ecx, [ebp+var_4]
.text$mn:00008C51                 mov     edx, [ecx+14h]
.text$mn:00008C54                 lea     eax, [eax+edx*2]
.text$mn:00008C57                 cmp     eax, [ebp+arg_0]
.text$mn:00008C5A                 ja      short loc_8C62
.text$mn:00008C5C
.text$mn:00008C5C loc_8C5C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+Bj
.text$mn:00008C5C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+18j
.text$mn:00008C5C                 xor     al, al
.text$mn:00008C5E                 jmp     short loc_8C64
.text$mn:00008C60 ; ---------------------------------------------------------------------------
.text$mn:00008C60                 jmp     short loc_8C64
.text$mn:00008C62 ; ---------------------------------------------------------------------------
.text$mn:00008C62
.text$mn:00008C62 loc_8C62:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+2Ej
.text$mn:00008C62                 mov     al, 1
.text$mn:00008C64
.text$mn:00008C64 loc_8C64:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+32j
.text$mn:00008C64                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+34j
.text$mn:00008C64                 mov     esp, ebp
.text$mn:00008C66                 pop     ebp
.text$mn:00008C67                 retn    4
.text$mn:00008C67 ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z endp
.text$mn:00008C67
.text$mn:00008C67 ; ---------------------------------------------------------------------------
.text$mn:00008C6A                 align 4
.text$mn:00008C6A _text$mn        ends
.text$mn:00008C6A
.text$mn:00008C6C ; ===========================================================================
.text$mn:00008C6C
.text$mn:00008C6C ; Segment type: Pure code
.text$mn:00008C6C ; Segment permissions: Read/Execute
.text$mn:00008C6C _text$mn        segment para public 'CODE' use32
.text$mn:00008C6C                 assume cs:_text$mn
.text$mn:00008C6C                 ;org 8C6Ch
.text$mn:00008C6C ; COMDAT (pick any)
.text$mn:00008C6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008C6C
.text$mn:00008C6C ; =============== S U B R O U T I N E =======================================
.text$mn:00008C6C
.text$mn:00008C6C ; Attributes: bp-based frame
.text$mn:00008C6C
.text$mn:00008C6C ; protected: bool __thiscall std::vector<int, class std::allocator<int>>::_Inside(int const *)const
.text$mn:00008C6C                 public ?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z
.text$mn:00008C6C ?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z proc near
.text$mn:00008C6C                                         ; CODE XREF: std::vector<int,std::allocator<int>>::push_back(int const &)+19p
.text$mn:00008C6C
.text$mn:00008C6C var_8           = dword ptr -8
.text$mn:00008C6C var_4           = dword ptr -4
.text$mn:00008C6C arg_0           = dword ptr  8
.text$mn:00008C6C
.text$mn:00008C6C                 push    ebp
.text$mn:00008C6D                 mov     ebp, esp
.text$mn:00008C6F                 sub     esp, 8
.text$mn:00008C72                 mov     [ebp+var_4], ecx
.text$mn:00008C75                 mov     eax, [ebp+var_4]
.text$mn:00008C78                 mov     ecx, [ebp+arg_0]
.text$mn:00008C7B                 cmp     ecx, [eax+8]
.text$mn:00008C7E                 jnb     short loc_8C94
.text$mn:00008C80                 mov     edx, [ebp+var_4]
.text$mn:00008C83                 mov     eax, [edx+4]
.text$mn:00008C86                 cmp     eax, [ebp+arg_0]
.text$mn:00008C89                 ja      short loc_8C94
.text$mn:00008C8B                 mov     [ebp+var_8], 1
.text$mn:00008C92                 jmp     short loc_8C9B
.text$mn:00008C94 ; ---------------------------------------------------------------------------
.text$mn:00008C94
.text$mn:00008C94 loc_8C94:                               ; CODE XREF: std::vector<int,std::allocator<int>>::_Inside(int const *)+12j
.text$mn:00008C94                                         ; std::vector<int,std::allocator<int>>::_Inside(int const *)+1Dj
.text$mn:00008C94                 mov     [ebp+var_8], 0
.text$mn:00008C9B
.text$mn:00008C9B loc_8C9B:                               ; CODE XREF: std::vector<int,std::allocator<int>>::_Inside(int const *)+26j
.text$mn:00008C9B                 mov     al, byte ptr [ebp+var_8]
.text$mn:00008C9E                 mov     esp, ebp
.text$mn:00008CA0                 pop     ebp
.text$mn:00008CA1                 retn    4
.text$mn:00008CA1 ?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z endp
.text$mn:00008CA1
.text$mn:00008CA1 _text$mn        ends
.text$mn:00008CA1
.text$mn:00008CA4 ; ===========================================================================
.text$mn:00008CA4
.text$mn:00008CA4 ; Segment type: Pure code
.text$mn:00008CA4 ; Segment permissions: Read/Execute
.text$mn:00008CA4 _text$mn        segment para public 'CODE' use32
.text$mn:00008CA4                 assume cs:_text$mn
.text$mn:00008CA4                 ;org 8CA4h
.text$mn:00008CA4 ; COMDAT (pick any)
.text$mn:00008CA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008CA4
.text$mn:00008CA4 ; =============== S U B R O U T I N E =======================================
.text$mn:00008CA4
.text$mn:00008CA4 ; Attributes: bp-based frame
.text$mn:00008CA4
.text$mn:00008CA4 ; protected: bool __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Inside(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const *)const
.text$mn:00008CA4                 public ?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
.text$mn:00008CA4 ?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z proc near
.text$mn:00008CA4                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+19p
.text$mn:00008CA4
.text$mn:00008CA4 var_8           = dword ptr -8
.text$mn:00008CA4 var_4           = dword ptr -4
.text$mn:00008CA4 arg_0           = dword ptr  8
.text$mn:00008CA4
.text$mn:00008CA4                 push    ebp
.text$mn:00008CA5                 mov     ebp, esp
.text$mn:00008CA7                 sub     esp, 8
.text$mn:00008CAA                 mov     [ebp+var_4], ecx
.text$mn:00008CAD                 mov     eax, [ebp+var_4]
.text$mn:00008CB0                 mov     ecx, [ebp+arg_0]
.text$mn:00008CB3                 cmp     ecx, [eax+8]
.text$mn:00008CB6                 jnb     short loc_8CCC
.text$mn:00008CB8                 mov     edx, [ebp+var_4]
.text$mn:00008CBB                 mov     eax, [edx+4]
.text$mn:00008CBE                 cmp     eax, [ebp+arg_0]
.text$mn:00008CC1                 ja      short loc_8CCC
.text$mn:00008CC3                 mov     [ebp+var_8], 1
.text$mn:00008CCA                 jmp     short loc_8CD3
.text$mn:00008CCC ; ---------------------------------------------------------------------------
.text$mn:00008CCC
.text$mn:00008CCC loc_8CCC:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Inside(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *)+12j
.text$mn:00008CCC                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Inside(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *)+1Dj
.text$mn:00008CCC                 mov     [ebp+var_8], 0
.text$mn:00008CD3
.text$mn:00008CD3 loc_8CD3:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Inside(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *)+26j
.text$mn:00008CD3                 mov     al, byte ptr [ebp+var_8]
.text$mn:00008CD6                 mov     esp, ebp
.text$mn:00008CD8                 pop     ebp
.text$mn:00008CD9                 retn    4
.text$mn:00008CD9 ?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z endp
.text$mn:00008CD9
.text$mn:00008CD9 _text$mn        ends
.text$mn:00008CD9
.text$mn:00008CDC ; ===========================================================================
.text$mn:00008CDC
.text$mn:00008CDC ; Segment type: Pure code
.text$mn:00008CDC ; Segment permissions: Read/Execute
.text$mn:00008CDC _text$mn        segment para public 'CODE' use32
.text$mn:00008CDC                 assume cs:_text$mn
.text$mn:00008CDC                 ;org 8CDCh
.text$mn:00008CDC ; COMDAT (pick any)
.text$mn:00008CDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008CDC
.text$mn:00008CDC ; =============== S U B R O U T I N E =======================================
.text$mn:00008CDC
.text$mn:00008CDC ; Attributes: bp-based frame
.text$mn:00008CDC
.text$mn:00008CDC ; public: char * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008CDC                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
.text$mn:00008CDC ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
.text$mn:00008CDC                                         ; CODE XREF: $LN19+14p
.text$mn:00008CDC                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+1Dp ...
.text$mn:00008CDC
.text$mn:00008CDC var_8           = dword ptr -8
.text$mn:00008CDC var_4           = dword ptr -4
.text$mn:00008CDC
.text$mn:00008CDC                 push    ebp
.text$mn:00008CDD                 mov     ebp, esp
.text$mn:00008CDF                 sub     esp, 8
.text$mn:00008CE2                 mov     [ebp+var_4], ecx
.text$mn:00008CE5                 mov     eax, [ebp+var_4]
.text$mn:00008CE8                 cmp     dword ptr [eax+18h], 10h
.text$mn:00008CEC                 jb      short loc_8D02
.text$mn:00008CEE                 mov     ecx, [ebp+var_4]
.text$mn:00008CF1                 mov     edx, [ecx+4]
.text$mn:00008CF4                 push    edx
.text$mn:00008CF5                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00008CFA                 add     esp, 4
.text$mn:00008CFD                 mov     [ebp+var_8], eax
.text$mn:00008D00                 jmp     short loc_8D0B
.text$mn:00008D02 ; ---------------------------------------------------------------------------
.text$mn:00008D02
.text$mn:00008D02 loc_8D02:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:00008D02                 mov     eax, [ebp+var_4]
.text$mn:00008D05                 add     eax, 4
.text$mn:00008D08                 mov     [ebp+var_8], eax
.text$mn:00008D0B
.text$mn:00008D0B loc_8D0B:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:00008D0B                 mov     eax, [ebp+var_8]
.text$mn:00008D0E                 mov     esp, ebp
.text$mn:00008D10                 pop     ebp
.text$mn:00008D11                 retn
.text$mn:00008D11 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ endp
.text$mn:00008D11
.text$mn:00008D11 ; ---------------------------------------------------------------------------
.text$mn:00008D12                 align 4
.text$mn:00008D12 _text$mn        ends
.text$mn:00008D12
.text$mn:00008D14 ; ===========================================================================
.text$mn:00008D14
.text$mn:00008D14 ; Segment type: Pure code
.text$mn:00008D14 ; Segment permissions: Read/Execute
.text$mn:00008D14 _text$mn        segment para public 'CODE' use32
.text$mn:00008D14                 assume cs:_text$mn
.text$mn:00008D14                 ;org 8D14h
.text$mn:00008D14 ; COMDAT (pick any)
.text$mn:00008D14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008D14
.text$mn:00008D14 ; =============== S U B R O U T I N E =======================================
.text$mn:00008D14
.text$mn:00008D14 ; Attributes: bp-based frame
.text$mn:00008D14
.text$mn:00008D14 ; public: char const * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)const
.text$mn:00008D14                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
.text$mn:00008D14 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
.text$mn:00008D14                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+7Dp
.text$mn:00008D14
.text$mn:00008D14 var_8           = dword ptr -8
.text$mn:00008D14 var_4           = dword ptr -4
.text$mn:00008D14
.text$mn:00008D14                 push    ebp
.text$mn:00008D15                 mov     ebp, esp
.text$mn:00008D17                 sub     esp, 8
.text$mn:00008D1A                 mov     [ebp+var_4], ecx
.text$mn:00008D1D                 mov     eax, [ebp+var_4]
.text$mn:00008D20                 cmp     dword ptr [eax+18h], 10h
.text$mn:00008D24                 jb      short loc_8D3A
.text$mn:00008D26                 mov     ecx, [ebp+var_4]
.text$mn:00008D29                 mov     edx, [ecx+4]
.text$mn:00008D2C                 push    edx
.text$mn:00008D2D                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00008D32                 add     esp, 4
.text$mn:00008D35                 mov     [ebp+var_8], eax
.text$mn:00008D38                 jmp     short loc_8D43
.text$mn:00008D3A ; ---------------------------------------------------------------------------
.text$mn:00008D3A
.text$mn:00008D3A loc_8D3A:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:00008D3A                 mov     eax, [ebp+var_4]
.text$mn:00008D3D                 add     eax, 4
.text$mn:00008D40                 mov     [ebp+var_8], eax
.text$mn:00008D43
.text$mn:00008D43 loc_8D43:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:00008D43                 mov     eax, [ebp+var_8]
.text$mn:00008D46                 mov     esp, ebp
.text$mn:00008D48                 pop     ebp
.text$mn:00008D49                 retn
.text$mn:00008D49 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ endp
.text$mn:00008D49
.text$mn:00008D49 ; ---------------------------------------------------------------------------
.text$mn:00008D4A                 align 4
.text$mn:00008D4A _text$mn        ends
.text$mn:00008D4A
.text$mn:00008D4C ; ===========================================================================
.text$mn:00008D4C
.text$mn:00008D4C ; Segment type: Pure code
.text$mn:00008D4C ; Segment permissions: Read/Execute
.text$mn:00008D4C _text$mn        segment para public 'CODE' use32
.text$mn:00008D4C                 assume cs:_text$mn
.text$mn:00008D4C                 ;org 8D4Ch
.text$mn:00008D4C ; COMDAT (pick any)
.text$mn:00008D4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008D4C
.text$mn:00008D4C ; =============== S U B R O U T I N E =======================================
.text$mn:00008D4C
.text$mn:00008D4C ; Attributes: bp-based frame
.text$mn:00008D4C
.text$mn:00008D4C ; public: wchar_t * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00008D4C                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
.text$mn:00008D4C ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ proc near
.text$mn:00008D4C                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+27p
.text$mn:00008D4C                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+3Ep ...
.text$mn:00008D4C
.text$mn:00008D4C var_8           = dword ptr -8
.text$mn:00008D4C var_4           = dword ptr -4
.text$mn:00008D4C
.text$mn:00008D4C                 push    ebp
.text$mn:00008D4D                 mov     ebp, esp
.text$mn:00008D4F                 sub     esp, 8
.text$mn:00008D52                 mov     [ebp+var_4], ecx
.text$mn:00008D55                 mov     eax, [ebp+var_4]
.text$mn:00008D58                 cmp     dword ptr [eax+18h], 8
.text$mn:00008D5C                 jb      short loc_8D72
.text$mn:00008D5E                 mov     ecx, [ebp+var_4]
.text$mn:00008D61                 mov     edx, [ecx+4]
.text$mn:00008D64                 push    edx
.text$mn:00008D65                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00008D6A                 add     esp, 4
.text$mn:00008D6D                 mov     [ebp+var_8], eax
.text$mn:00008D70                 jmp     short loc_8D7B
.text$mn:00008D72 ; ---------------------------------------------------------------------------
.text$mn:00008D72
.text$mn:00008D72 loc_8D72:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:00008D72                 mov     eax, [ebp+var_4]
.text$mn:00008D75                 add     eax, 4
.text$mn:00008D78                 mov     [ebp+var_8], eax
.text$mn:00008D7B
.text$mn:00008D7B loc_8D7B:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:00008D7B                 mov     eax, [ebp+var_8]
.text$mn:00008D7E                 mov     esp, ebp
.text$mn:00008D80                 pop     ebp
.text$mn:00008D81                 retn
.text$mn:00008D81 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ endp
.text$mn:00008D81
.text$mn:00008D81 ; ---------------------------------------------------------------------------
.text$mn:00008D82                 align 4
.text$mn:00008D82 _text$mn        ends
.text$mn:00008D82
.text$mn:00008D84 ; ===========================================================================
.text$mn:00008D84
.text$mn:00008D84 ; Segment type: Pure code
.text$mn:00008D84 ; Segment permissions: Read/Execute
.text$mn:00008D84 _text$mn        segment para public 'CODE' use32
.text$mn:00008D84                 assume cs:_text$mn
.text$mn:00008D84                 ;org 8D84h
.text$mn:00008D84 ; COMDAT (pick any)
.text$mn:00008D84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008D84
.text$mn:00008D84 ; =============== S U B R O U T I N E =======================================
.text$mn:00008D84
.text$mn:00008D84 ; Attributes: bp-based frame
.text$mn:00008D84
.text$mn:00008D84 ; public: wchar_t const * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)const
.text$mn:00008D84                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
.text$mn:00008D84 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ proc near
.text$mn:00008D84                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+80p
.text$mn:00008D84                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+7Dp ...
.text$mn:00008D84
.text$mn:00008D84 var_8           = dword ptr -8
.text$mn:00008D84 var_4           = dword ptr -4
.text$mn:00008D84
.text$mn:00008D84                 push    ebp
.text$mn:00008D85                 mov     ebp, esp
.text$mn:00008D87                 sub     esp, 8
.text$mn:00008D8A                 mov     [ebp+var_4], ecx
.text$mn:00008D8D                 mov     eax, [ebp+var_4]
.text$mn:00008D90                 cmp     dword ptr [eax+18h], 8
.text$mn:00008D94                 jb      short loc_8DAA
.text$mn:00008D96                 mov     ecx, [ebp+var_4]
.text$mn:00008D99                 mov     edx, [ecx+4]
.text$mn:00008D9C                 push    edx
.text$mn:00008D9D                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00008DA2                 add     esp, 4
.text$mn:00008DA5                 mov     [ebp+var_8], eax
.text$mn:00008DA8                 jmp     short loc_8DB3
.text$mn:00008DAA ; ---------------------------------------------------------------------------
.text$mn:00008DAA
.text$mn:00008DAA loc_8DAA:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:00008DAA                 mov     eax, [ebp+var_4]
.text$mn:00008DAD                 add     eax, 4
.text$mn:00008DB0                 mov     [ebp+var_8], eax
.text$mn:00008DB3
.text$mn:00008DB3 loc_8DB3:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:00008DB3                 mov     eax, [ebp+var_8]
.text$mn:00008DB6                 mov     esp, ebp
.text$mn:00008DB8                 pop     ebp
.text$mn:00008DB9                 retn
.text$mn:00008DB9 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ endp
.text$mn:00008DB9
.text$mn:00008DB9 ; ---------------------------------------------------------------------------
.text$mn:00008DBA                 align 4
.text$mn:00008DBA _text$mn        ends
.text$mn:00008DBA
.text$mn:00008DBC ; ===========================================================================
.text$mn:00008DBC
.text$mn:00008DBC ; Segment type: Pure code
.text$mn:00008DBC ; Segment permissions: Read/Execute
.text$mn:00008DBC _text$mn        segment para public 'CODE' use32
.text$mn:00008DBC                 assume cs:_text$mn
.text$mn:00008DBC                 ;org 8DBCh
.text$mn:00008DBC ; COMDAT (pick any)
.text$mn:00008DBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008DBC
.text$mn:00008DBC ; =============== S U B R O U T I N E =======================================
.text$mn:00008DBC
.text$mn:00008DBC ; Attributes: bp-based frame
.text$mn:00008DBC
.text$mn:00008DBC ; void __thiscall std::_Container_base12::_Orphan_all(std::_Container_base12 *__hidden this)
.text$mn:00008DBC                 public ?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:00008DBC ?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$mn:00008DBC                                         ; CODE XREF: std::_Container_base12::~_Container_base12(void)+Ap
.text$mn:00008DBC                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+14p ...
.text$mn:00008DBC
.text$mn:00008DBC var_18          = byte ptr -18h
.text$mn:00008DBC var_14          = dword ptr -14h
.text$mn:00008DBC var_10          = dword ptr -10h
.text$mn:00008DBC var_C           = dword ptr -0Ch
.text$mn:00008DBC var_4           = dword ptr -4
.text$mn:00008DBC
.text$mn:00008DBC                 push    ebp
.text$mn:00008DBD                 mov     ebp, esp
.text$mn:00008DBF                 push    0FFFFFFFFh
.text$mn:00008DC1                 push    offset __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:00008DC6                 mov     eax, large fs:0
.text$mn:00008DCC                 push    eax
.text$mn:00008DCD                 sub     esp, 0Ch
.text$mn:00008DD0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008DD5                 xor     eax, ebp
.text$mn:00008DD7                 push    eax
.text$mn:00008DD8                 lea     eax, [ebp+var_C]
.text$mn:00008DDB                 mov     large fs:0, eax
.text$mn:00008DE1                 mov     [ebp+var_14], ecx
.text$mn:00008DE4                 mov     eax, [ebp+var_14]
.text$mn:00008DE7                 cmp     dword ptr [eax], 0
.text$mn:00008DEA                 jz      short loc_8E47
.text$mn:00008DEC                 push    3               ; int
.text$mn:00008DEE                 lea     ecx, [ebp+var_18] ; this
.text$mn:00008DF1                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00008DF6                 mov     [ebp+var_4], 0
.text$mn:00008DFD                 mov     ecx, [ebp+var_14]
.text$mn:00008E00                 mov     edx, [ecx]
.text$mn:00008E02                 add     edx, 4
.text$mn:00008E05                 mov     [ebp+var_10], edx
.text$mn:00008E08                 jmp     short loc_8E17
.text$mn:00008E0A ; ---------------------------------------------------------------------------
.text$mn:00008E0A
.text$mn:00008E0A loc_8E0A:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+6Ej
.text$mn:00008E0A                 mov     eax, [ebp+var_10]
.text$mn:00008E0D                 mov     ecx, [eax]
.text$mn:00008E0F                 mov     edx, [ebp+var_10]
.text$mn:00008E12                 mov     eax, [ecx+4]
.text$mn:00008E15                 mov     [edx], eax
.text$mn:00008E17
.text$mn:00008E17 loc_8E17:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+4Cj
.text$mn:00008E17                 mov     ecx, [ebp+var_10]
.text$mn:00008E1A                 cmp     dword ptr [ecx], 0
.text$mn:00008E1D                 jz      short loc_8E2C
.text$mn:00008E1F                 mov     edx, [ebp+var_10]
.text$mn:00008E22                 mov     eax, [edx]
.text$mn:00008E24                 mov     dword ptr [eax], 0
.text$mn:00008E2A                 jmp     short loc_8E0A
.text$mn:00008E2C ; ---------------------------------------------------------------------------
.text$mn:00008E2C
.text$mn:00008E2C loc_8E2C:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+61j
.text$mn:00008E2C                 mov     ecx, [ebp+var_14]
.text$mn:00008E2F                 mov     edx, [ecx]
.text$mn:00008E31                 mov     dword ptr [edx+4], 0
.text$mn:00008E38                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008E3F                 lea     ecx, [ebp+var_18] ; this
.text$mn:00008E42                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00008E47
.text$mn:00008E47 loc_8E47:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+2Ej
.text$mn:00008E47                 mov     ecx, [ebp+var_C]
.text$mn:00008E4A                 mov     large fs:0, ecx
.text$mn:00008E51                 pop     ecx
.text$mn:00008E52                 mov     esp, ebp
.text$mn:00008E54                 pop     ebp
.text$mn:00008E55                 retn
.text$mn:00008E55 ?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$mn:00008E55
.text$mn:00008E55 ; ---------------------------------------------------------------------------
.text$mn:00008E56                 align 4
.text$mn:00008E56 _text$mn        ends
.text$mn:00008E56
.text$x:00008E58 ; ===========================================================================
.text$x:00008E58
.text$x:00008E58 ; Segment type: Pure code
.text$x:00008E58 ; Segment permissions: Read/Execute
.text$x:00008E58 _text$x         segment para public 'CODE' use32
.text$x:00008E58                 assume cs:_text$x
.text$x:00008E58                 ;org 8E58h
.text$x:00008E58 ; COMDAT (pick associative to section at 8DBC)
.text$x:00008E58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008E58
.text$x:00008E58 ; =============== S U B R O U T I N E =======================================
.text$x:00008E58
.text$x:00008E58
.text$x:00008E58 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 proc near
.text$x:00008E58                                         ; DATA XREF: .xdata$x:0000BEB4o
.text$x:00008E58                 lea     ecx, [ebp-18h]  ; this
.text$x:00008E5B                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00008E5B __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 endp
.text$x:00008E5B
.text$x:00008E60
.text$x:00008E60 ; =============== S U B R O U T I N E =======================================
.text$x:00008E60
.text$x:00008E60
.text$x:00008E60 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$x:00008E60                                         ; DATA XREF: std::_Container_base12::_Orphan_all(void)+5o
.text$x:00008E60
.text$x:00008E60 arg_4           = dword ptr  8
.text$x:00008E60
.text$x:00008E60                 mov     edx, [esp+arg_4]
.text$x:00008E64                 lea     eax, [edx+0Ch]
.text$x:00008E67                 mov     ecx, [edx-10h]
.text$x:00008E6A                 xor     ecx, eax
.text$x:00008E6C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008E71                 mov     eax, offset __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$x:00008E76                 jmp     ___CxxFrameHandler3
.text$x:00008E76 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$x:00008E76
.text$x:00008E76 ; ---------------------------------------------------------------------------
.text$x:00008E7B                 align 4
.text$x:00008E7B _text$x         ends
.text$x:00008E7B
.text$mn:00008E7C ; ===========================================================================
.text$mn:00008E7C
.text$mn:00008E7C ; Segment type: Pure code
.text$mn:00008E7C ; Segment permissions: Read/Execute
.text$mn:00008E7C _text$mn        segment para public 'CODE' use32
.text$mn:00008E7C                 assume cs:_text$mn
.text$mn:00008E7C                 ;org 8E7Ch
.text$mn:00008E7C ; COMDAT (pick any)
.text$mn:00008E7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E7C
.text$mn:00008E7C ; =============== S U B R O U T I N E =======================================
.text$mn:00008E7C
.text$mn:00008E7C ; Attributes: bp-based frame
.text$mn:00008E7C
.text$mn:00008E7C ; void __thiscall std::_Iterator_base12::_Orphan_me(std::_Iterator_base12 *__hidden this)
.text$mn:00008E7C                 public ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
.text$mn:00008E7C ?_Orphan_me@_Iterator_base12@std@@QAEXXZ proc near
.text$mn:00008E7C                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+3Cp
.text$mn:00008E7C                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+64p ...
.text$mn:00008E7C
.text$mn:00008E7C var_8           = dword ptr -8
.text$mn:00008E7C var_4           = dword ptr -4
.text$mn:00008E7C
.text$mn:00008E7C                 push    ebp
.text$mn:00008E7D                 mov     ebp, esp
.text$mn:00008E7F                 sub     esp, 8
.text$mn:00008E82                 mov     [ebp+var_8], ecx
.text$mn:00008E85                 mov     eax, [ebp+var_8]
.text$mn:00008E88                 cmp     dword ptr [eax], 0
.text$mn:00008E8B                 jz      short loc_8EEA
.text$mn:00008E8D                 mov     ecx, [ebp+var_8]
.text$mn:00008E90                 mov     edx, [ecx]
.text$mn:00008E92                 add     edx, 4
.text$mn:00008E95                 mov     [ebp+var_4], edx
.text$mn:00008E98
.text$mn:00008E98 loc_8E98:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+39j
.text$mn:00008E98                 mov     eax, [ebp+var_4]
.text$mn:00008E9B                 cmp     dword ptr [eax], 0
.text$mn:00008E9E                 jz      short loc_8EB7
.text$mn:00008EA0                 mov     ecx, [ebp+var_4]
.text$mn:00008EA3                 mov     edx, [ecx]
.text$mn:00008EA5                 cmp     edx, [ebp+var_8]
.text$mn:00008EA8                 jz      short loc_8EB7
.text$mn:00008EAA                 mov     eax, [ebp+var_4]
.text$mn:00008EAD                 mov     ecx, [eax]
.text$mn:00008EAF                 add     ecx, 4
.text$mn:00008EB2                 mov     [ebp+var_4], ecx
.text$mn:00008EB5                 jmp     short loc_8E98
.text$mn:00008EB7 ; ---------------------------------------------------------------------------
.text$mn:00008EB7
.text$mn:00008EB7 loc_8EB7:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+22j
.text$mn:00008EB7                                         ; std::_Iterator_base12::_Orphan_me(void)+2Cj
.text$mn:00008EB7                 mov     edx, [ebp+var_4]
.text$mn:00008EBA                 cmp     dword ptr [edx], 0
.text$mn:00008EBD                 jnz     short loc_8ED6
.text$mn:00008EBF                 push    0C9h ; '+'      ; unsigned int
.text$mn:00008EC4                 push    offset ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008EC9                 push    offset ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; "ITERATOR LIST CORRUPTED!"
.text$mn:00008ECE                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00008ED3                 add     esp, 0Ch
.text$mn:00008ED6
.text$mn:00008ED6 loc_8ED6:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+41j
.text$mn:00008ED6                 mov     eax, [ebp+var_4]
.text$mn:00008ED9                 mov     ecx, [ebp+var_8]
.text$mn:00008EDC                 mov     edx, [ecx+4]
.text$mn:00008EDF                 mov     [eax], edx
.text$mn:00008EE1                 mov     eax, [ebp+var_8]
.text$mn:00008EE4                 mov     dword ptr [eax], 0
.text$mn:00008EEA
.text$mn:00008EEA loc_8EEA:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+Fj
.text$mn:00008EEA                 mov     esp, ebp
.text$mn:00008EEC                 pop     ebp
.text$mn:00008EED                 retn
.text$mn:00008EED ?_Orphan_me@_Iterator_base12@std@@QAEXXZ endp
.text$mn:00008EED
.text$mn:00008EED ; ---------------------------------------------------------------------------
.text$mn:00008EEE                 align 10h
.text$mn:00008EEE _text$mn        ends
.text$mn:00008EEE
.text$mn:00008EF0 ; ===========================================================================
.text$mn:00008EF0
.text$mn:00008EF0 ; Segment type: Pure code
.text$mn:00008EF0 ; Segment permissions: Read/Execute
.text$mn:00008EF0 _text$mn        segment para public 'CODE' use32
.text$mn:00008EF0                 assume cs:_text$mn
.text$mn:00008EF0                 ;org 8EF0h
.text$mn:00008EF0 ; COMDAT (pick any)
.text$mn:00008EF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008EF0
.text$mn:00008EF0 ; =============== S U B R O U T I N E =======================================
.text$mn:00008EF0
.text$mn:00008EF0 ; Attributes: bp-based frame
.text$mn:00008EF0
.text$mn:00008EF0 ; protected: void __thiscall std::vector<int, class std::allocator<int>>::_Orphan_range(int *, int *)const
.text$mn:00008EF0                 public ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
.text$mn:00008EF0 ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z proc near
.text$mn:00008EF0                                         ; CODE XREF: std::vector<int,std::allocator<int>>::push_back(int const &)+66p
.text$mn:00008EF0                                         ; std::vector<int,std::allocator<int>>::push_back(int const &)+CCp
.text$mn:00008EF0
.text$mn:00008EF0 var_18          = byte ptr -18h
.text$mn:00008EF0 var_14          = dword ptr -14h
.text$mn:00008EF0 var_10          = dword ptr -10h
.text$mn:00008EF0 var_C           = dword ptr -0Ch
.text$mn:00008EF0 var_4           = dword ptr -4
.text$mn:00008EF0 arg_0           = dword ptr  8
.text$mn:00008EF0 arg_4           = dword ptr  0Ch
.text$mn:00008EF0
.text$mn:00008EF0                 push    ebp
.text$mn:00008EF1                 mov     ebp, esp
.text$mn:00008EF3                 push    0FFFFFFFFh
.text$mn:00008EF5                 push    offset __ehhandler$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
.text$mn:00008EFA                 mov     eax, large fs:0
.text$mn:00008F00                 push    eax
.text$mn:00008F01                 sub     esp, 0Ch
.text$mn:00008F04                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008F09                 xor     eax, ebp
.text$mn:00008F0B                 push    eax
.text$mn:00008F0C                 lea     eax, [ebp+var_C]
.text$mn:00008F0F                 mov     large fs:0, eax
.text$mn:00008F15                 mov     [ebp+var_14], ecx
.text$mn:00008F18                 push    3               ; int
.text$mn:00008F1A                 lea     ecx, [ebp+var_18] ; this
.text$mn:00008F1D                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00008F22                 mov     [ebp+var_4], 0
.text$mn:00008F29                 mov     ecx, [ebp+var_14] ; this
.text$mn:00008F2C                 call    ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst(void)
.text$mn:00008F31                 mov     [ebp+var_10], eax
.text$mn:00008F34                 cmp     [ebp+var_10], 0
.text$mn:00008F38                 jz      short loc_8F88
.text$mn:00008F3A
.text$mn:00008F3A loc_8F3A:                               ; CODE XREF: std::vector<int,std::allocator<int>>::_Orphan_range(int *,int *):loc_8F86j
.text$mn:00008F3A                 mov     eax, [ebp+var_10]
.text$mn:00008F3D                 cmp     dword ptr [eax], 0
.text$mn:00008F40                 jz      short loc_8F88
.text$mn:00008F42                 mov     ecx, [ebp+var_10]
.text$mn:00008F45                 mov     edx, [ecx]
.text$mn:00008F47                 mov     eax, [edx+8]
.text$mn:00008F4A                 cmp     eax, [ebp+arg_0]
.text$mn:00008F4D                 jb      short loc_8F5C
.text$mn:00008F4F                 mov     ecx, [ebp+var_10]
.text$mn:00008F52                 mov     edx, [ecx]
.text$mn:00008F54                 mov     eax, [ebp+arg_4]
.text$mn:00008F57                 cmp     eax, [edx+8]
.text$mn:00008F5A                 jnb     short loc_8F6B
.text$mn:00008F5C
.text$mn:00008F5C loc_8F5C:                               ; CODE XREF: std::vector<int,std::allocator<int>>::_Orphan_range(int *,int *)+5Dj
.text$mn:00008F5C                 mov     ecx, [ebp+var_10]
.text$mn:00008F5F                 mov     ecx, [ecx]      ; this
.text$mn:00008F61                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:00008F66                 mov     [ebp+var_10], eax
.text$mn:00008F69                 jmp     short loc_8F86
.text$mn:00008F6B ; ---------------------------------------------------------------------------
.text$mn:00008F6B
.text$mn:00008F6B loc_8F6B:                               ; CODE XREF: std::vector<int,std::allocator<int>>::_Orphan_range(int *,int *)+6Aj
.text$mn:00008F6B                 mov     edx, [ebp+var_10]
.text$mn:00008F6E                 mov     ecx, [edx]      ; this
.text$mn:00008F70                 call    ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont(void)
.text$mn:00008F75                 mov     eax, [ebp+var_10]
.text$mn:00008F78                 mov     ecx, [eax]      ; this
.text$mn:00008F7A                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:00008F7F                 mov     ecx, [ebp+var_10]
.text$mn:00008F82                 mov     edx, [eax]
.text$mn:00008F84                 mov     [ecx], edx
.text$mn:00008F86
.text$mn:00008F86 loc_8F86:                               ; CODE XREF: std::vector<int,std::allocator<int>>::_Orphan_range(int *,int *)+79j
.text$mn:00008F86                 jmp     short loc_8F3A
.text$mn:00008F88 ; ---------------------------------------------------------------------------
.text$mn:00008F88
.text$mn:00008F88 loc_8F88:                               ; CODE XREF: std::vector<int,std::allocator<int>>::_Orphan_range(int *,int *)+48j
.text$mn:00008F88                                         ; std::vector<int,std::allocator<int>>::_Orphan_range(int *,int *)+50j
.text$mn:00008F88                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008F8F                 lea     ecx, [ebp+var_18] ; this
.text$mn:00008F92                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00008F97                 mov     ecx, [ebp+var_C]
.text$mn:00008F9A                 mov     large fs:0, ecx
.text$mn:00008FA1                 pop     ecx
.text$mn:00008FA2                 mov     esp, ebp
.text$mn:00008FA4                 pop     ebp
.text$mn:00008FA5                 retn    8
.text$mn:00008FA5 ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z endp
.text$mn:00008FA5
.text$mn:00008FA5 _text$mn        ends
.text$mn:00008FA5
.text$x:00008FA8 ; ===========================================================================
.text$x:00008FA8
.text$x:00008FA8 ; Segment type: Pure code
.text$x:00008FA8 ; Segment permissions: Read/Execute
.text$x:00008FA8 _text$x         segment para public 'CODE' use32
.text$x:00008FA8                 assume cs:_text$x
.text$x:00008FA8                 ;org 8FA8h
.text$x:00008FA8 ; COMDAT (pick associative to section at 8EF0)
.text$x:00008FA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008FA8
.text$x:00008FA8 ; =============== S U B R O U T I N E =======================================
.text$x:00008FA8
.text$x:00008FA8
.text$x:00008FA8 __unwindfunclet$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z$0 proc near
.text$x:00008FA8                                         ; DATA XREF: .xdata$x:0000C6A8o
.text$x:00008FA8                 lea     ecx, [ebp-18h]  ; this
.text$x:00008FAB                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00008FAB __unwindfunclet$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z$0 endp
.text$x:00008FAB
.text$x:00008FB0
.text$x:00008FB0 ; =============== S U B R O U T I N E =======================================
.text$x:00008FB0
.text$x:00008FB0
.text$x:00008FB0 __ehhandler$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z proc near
.text$x:00008FB0                                         ; DATA XREF: std::vector<int,std::allocator<int>>::_Orphan_range(int *,int *)+5o
.text$x:00008FB0
.text$x:00008FB0 arg_4           = dword ptr  8
.text$x:00008FB0
.text$x:00008FB0                 mov     edx, [esp+arg_4]
.text$x:00008FB4                 lea     eax, [edx+0Ch]
.text$x:00008FB7                 mov     ecx, [edx-10h]
.text$x:00008FBA                 xor     ecx, eax
.text$x:00008FBC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008FC1                 mov     eax, offset __ehfuncinfo$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
.text$x:00008FC6                 jmp     ___CxxFrameHandler3
.text$x:00008FC6 __ehhandler$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z endp
.text$x:00008FC6
.text$x:00008FC6 ; ---------------------------------------------------------------------------
.text$x:00008FCB                 align 4
.text$x:00008FCB _text$x         ends
.text$x:00008FCB
.text$mn:00008FCC ; ===========================================================================
.text$mn:00008FCC
.text$mn:00008FCC ; Segment type: Pure code
.text$mn:00008FCC ; Segment permissions: Read/Execute
.text$mn:00008FCC _text$mn        segment para public 'CODE' use32
.text$mn:00008FCC                 assume cs:_text$mn
.text$mn:00008FCC                 ;org 8FCCh
.text$mn:00008FCC ; COMDAT (pick any)
.text$mn:00008FCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008FCC
.text$mn:00008FCC ; =============== S U B R O U T I N E =======================================
.text$mn:00008FCC
.text$mn:00008FCC ; Attributes: bp-based frame
.text$mn:00008FCC
.text$mn:00008FCC ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Orphan_range(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)const
.text$mn:00008FCC                 public ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$mn:00008FCC ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z proc near
.text$mn:00008FCC                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+6Fp
.text$mn:00008FCC                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+DCp
.text$mn:00008FCC
.text$mn:00008FCC var_18          = byte ptr -18h
.text$mn:00008FCC var_14          = dword ptr -14h
.text$mn:00008FCC var_10          = dword ptr -10h
.text$mn:00008FCC var_C           = dword ptr -0Ch
.text$mn:00008FCC var_4           = dword ptr -4
.text$mn:00008FCC arg_0           = dword ptr  8
.text$mn:00008FCC arg_4           = dword ptr  0Ch
.text$mn:00008FCC
.text$mn:00008FCC                 push    ebp
.text$mn:00008FCD                 mov     ebp, esp
.text$mn:00008FCF                 push    0FFFFFFFFh
.text$mn:00008FD1                 push    offset __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$mn:00008FD6                 mov     eax, large fs:0
.text$mn:00008FDC                 push    eax
.text$mn:00008FDD                 sub     esp, 0Ch
.text$mn:00008FE0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008FE5                 xor     eax, ebp
.text$mn:00008FE7                 push    eax
.text$mn:00008FE8                 lea     eax, [ebp+var_C]
.text$mn:00008FEB                 mov     large fs:0, eax
.text$mn:00008FF1                 mov     [ebp+var_14], ecx
.text$mn:00008FF4                 push    3               ; int
.text$mn:00008FF6                 lea     ecx, [ebp+var_18] ; this
.text$mn:00008FF9                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00008FFE                 mov     [ebp+var_4], 0
.text$mn:00009005                 mov     ecx, [ebp+var_14] ; this
.text$mn:00009008                 call    ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst(void)
.text$mn:0000900D                 mov     [ebp+var_10], eax
.text$mn:00009010                 cmp     [ebp+var_10], 0
.text$mn:00009014                 jz      short loc_9064
.text$mn:00009016
.text$mn:00009016 loc_9016:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *):loc_9062j
.text$mn:00009016                 mov     eax, [ebp+var_10]
.text$mn:00009019                 cmp     dword ptr [eax], 0
.text$mn:0000901C                 jz      short loc_9064
.text$mn:0000901E                 mov     ecx, [ebp+var_10]
.text$mn:00009021                 mov     edx, [ecx]
.text$mn:00009023                 mov     eax, [edx+8]
.text$mn:00009026                 cmp     eax, [ebp+arg_0]
.text$mn:00009029                 jb      short loc_9038
.text$mn:0000902B                 mov     ecx, [ebp+var_10]
.text$mn:0000902E                 mov     edx, [ecx]
.text$mn:00009030                 mov     eax, [ebp+arg_4]
.text$mn:00009033                 cmp     eax, [edx+8]
.text$mn:00009036                 jnb     short loc_9047
.text$mn:00009038
.text$mn:00009038 loc_9038:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+5Dj
.text$mn:00009038                 mov     ecx, [ebp+var_10]
.text$mn:0000903B                 mov     ecx, [ecx]      ; this
.text$mn:0000903D                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:00009042                 mov     [ebp+var_10], eax
.text$mn:00009045                 jmp     short loc_9062
.text$mn:00009047 ; ---------------------------------------------------------------------------
.text$mn:00009047
.text$mn:00009047 loc_9047:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+6Aj
.text$mn:00009047                 mov     edx, [ebp+var_10]
.text$mn:0000904A                 mov     ecx, [edx]      ; this
.text$mn:0000904C                 call    ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont(void)
.text$mn:00009051                 mov     eax, [ebp+var_10]
.text$mn:00009054                 mov     ecx, [eax]      ; this
.text$mn:00009056                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:0000905B                 mov     ecx, [ebp+var_10]
.text$mn:0000905E                 mov     edx, [eax]
.text$mn:00009060                 mov     [ecx], edx
.text$mn:00009062
.text$mn:00009062 loc_9062:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+79j
.text$mn:00009062                 jmp     short loc_9016
.text$mn:00009064 ; ---------------------------------------------------------------------------
.text$mn:00009064
.text$mn:00009064 loc_9064:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+48j
.text$mn:00009064                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+50j
.text$mn:00009064                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000906B                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000906E                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00009073                 mov     ecx, [ebp+var_C]
.text$mn:00009076                 mov     large fs:0, ecx
.text$mn:0000907D                 pop     ecx
.text$mn:0000907E                 mov     esp, ebp
.text$mn:00009080                 pop     ebp
.text$mn:00009081                 retn    8
.text$mn:00009081 ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z endp
.text$mn:00009081
.text$mn:00009081 _text$mn        ends
.text$mn:00009081
.text$x:00009084 ; ===========================================================================
.text$x:00009084
.text$x:00009084 ; Segment type: Pure code
.text$x:00009084 ; Segment permissions: Read/Execute
.text$x:00009084 _text$x         segment para public 'CODE' use32
.text$x:00009084                 assume cs:_text$x
.text$x:00009084                 ;org 9084h
.text$x:00009084 ; COMDAT (pick associative to section at 8FCC)
.text$x:00009084                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009084
.text$x:00009084 ; =============== S U B R O U T I N E =======================================
.text$x:00009084
.text$x:00009084
.text$x:00009084 __unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z$0 proc near
.text$x:00009084                                         ; DATA XREF: .xdata$x:0000CCACo
.text$x:00009084                 lea     ecx, [ebp-18h]  ; this
.text$x:00009087                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00009087 __unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z$0 endp
.text$x:00009087
.text$x:0000908C
.text$x:0000908C ; =============== S U B R O U T I N E =======================================
.text$x:0000908C
.text$x:0000908C
.text$x:0000908C __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z proc near
.text$x:0000908C                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+5o
.text$x:0000908C
.text$x:0000908C arg_4           = dword ptr  8
.text$x:0000908C
.text$x:0000908C                 mov     edx, [esp+arg_4]
.text$x:00009090                 lea     eax, [edx+0Ch]
.text$x:00009093                 mov     ecx, [edx-10h]
.text$x:00009096                 xor     ecx, eax
.text$x:00009098                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000909D                 mov     eax, offset __ehfuncinfo$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$x:000090A2                 jmp     ___CxxFrameHandler3
.text$x:000090A2 __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z endp
.text$x:000090A2
.text$x:000090A2 ; ---------------------------------------------------------------------------
.text$x:000090A7                 align 4
.text$x:000090A7 _text$x         ends
.text$x:000090A7
.text$mn:000090A8 ; ===========================================================================
.text$mn:000090A8
.text$mn:000090A8 ; Segment type: Pure code
.text$mn:000090A8 ; Segment permissions: Read/Execute
.text$mn:000090A8 _text$mn        segment para public 'CODE' use32
.text$mn:000090A8                 assume cs:_text$mn
.text$mn:000090A8                 ;org 90A8h
.text$mn:000090A8 ; COMDAT (pick any)
.text$mn:000090A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000090A8
.text$mn:000090A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000090A8
.text$mn:000090A8 ; Attributes: bp-based frame
.text$mn:000090A8
.text$mn:000090A8 ; public: static unsigned int __cdecl std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Pdif(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>)
.text$mn:000090A8                 public ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.text$mn:000090A8 ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z proc near
.text$mn:000090A8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+89p
.text$mn:000090A8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+FAp ...
.text$mn:000090A8
.text$mn:000090A8 var_14          = dword ptr -14h
.text$mn:000090A8 var_10          = dword ptr -10h
.text$mn:000090A8 var_C           = dword ptr -0Ch
.text$mn:000090A8 var_4           = dword ptr -4
.text$mn:000090A8 arg_0           = byte ptr  8
.text$mn:000090A8 arg_8           = dword ptr  10h
.text$mn:000090A8 arg_C           = byte ptr  14h
.text$mn:000090A8
.text$mn:000090A8                 push    ebp
.text$mn:000090A9                 mov     ebp, esp
.text$mn:000090AB                 push    0FFFFFFFFh
.text$mn:000090AD                 push    offset __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.text$mn:000090B2                 mov     eax, large fs:0
.text$mn:000090B8                 push    eax
.text$mn:000090B9                 sub     esp, 8
.text$mn:000090BC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000090C1                 xor     eax, ebp
.text$mn:000090C3                 push    eax
.text$mn:000090C4                 lea     eax, [ebp+var_C]
.text$mn:000090C7                 mov     large fs:0, eax
.text$mn:000090CD                 mov     [ebp+var_4], 1
.text$mn:000090D4                 cmp     [ebp+arg_8], 0
.text$mn:000090D8                 jnz     short loc_90E3
.text$mn:000090DA                 mov     [ebp+var_10], 0
.text$mn:000090E1                 jmp     short loc_90F2
.text$mn:000090E3 ; ---------------------------------------------------------------------------
.text$mn:000090E3
.text$mn:000090E3 loc_90E3:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+30j
.text$mn:000090E3                 lea     eax, [ebp+arg_C]
.text$mn:000090E6                 push    eax             ; std::_Iterator_base12 *
.text$mn:000090E7                 lea     ecx, [ebp+arg_0]
.text$mn:000090EA                 call    ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:000090EF                 mov     [ebp+var_10], eax
.text$mn:000090F2
.text$mn:000090F2 loc_90F2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+39j
.text$mn:000090F2                 mov     ecx, [ebp+var_10]
.text$mn:000090F5                 mov     [ebp+var_14], ecx
.text$mn:000090F8                 mov     byte ptr [ebp+var_4], 0
.text$mn:000090FC                 lea     ecx, [ebp+arg_0]
.text$mn:000090FF                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00009104                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000910B                 lea     ecx, [ebp+arg_C]
.text$mn:0000910E                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00009113                 mov     eax, [ebp+var_14]
.text$mn:00009116                 mov     ecx, [ebp+var_C]
.text$mn:00009119                 mov     large fs:0, ecx
.text$mn:00009120                 pop     ecx
.text$mn:00009121                 mov     esp, ebp
.text$mn:00009123                 pop     ebp
.text$mn:00009124                 retn
.text$mn:00009124 ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z endp
.text$mn:00009124
.text$mn:00009124 ; ---------------------------------------------------------------------------
.text$mn:00009125                 align 4
.text$mn:00009125 _text$mn        ends
.text$mn:00009125
.text$x:00009128 ; ===========================================================================
.text$x:00009128
.text$x:00009128 ; Segment type: Pure code
.text$x:00009128 ; Segment permissions: Read/Execute
.text$x:00009128 _text$x         segment para public 'CODE' use32
.text$x:00009128                 assume cs:_text$x
.text$x:00009128                 ;org 9128h
.text$x:00009128 ; COMDAT (pick associative to section at 90A8)
.text$x:00009128                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009128
.text$x:00009128 ; =============== S U B R O U T I N E =======================================
.text$x:00009128
.text$x:00009128
.text$x:00009128 __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$0 proc near
.text$x:00009128                                         ; DATA XREF: .xdata$x:0000C5C4o
.text$x:00009128                 lea     ecx, [ebp+14h]
.text$x:0000912B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000912B __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$0 endp
.text$x:0000912B
.text$x:00009130
.text$x:00009130 ; =============== S U B R O U T I N E =======================================
.text$x:00009130
.text$x:00009130
.text$x:00009130 __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$1 proc near
.text$x:00009130                                         ; DATA XREF: .xdata$x:0000C5CCo
.text$x:00009130                 lea     ecx, [ebp+8]
.text$x:00009133                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00009133 __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$1 endp
.text$x:00009133
.text$x:00009138
.text$x:00009138 ; =============== S U B R O U T I N E =======================================
.text$x:00009138
.text$x:00009138
.text$x:00009138 __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z proc near
.text$x:00009138                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+5o
.text$x:00009138
.text$x:00009138 arg_4           = dword ptr  8
.text$x:00009138
.text$x:00009138                 mov     edx, [esp+arg_4]
.text$x:0000913C                 lea     eax, [edx+0Ch]
.text$x:0000913F                 mov     ecx, [edx-0Ch]
.text$x:00009142                 xor     ecx, eax
.text$x:00009144                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009149                 mov     eax, offset __ehfuncinfo$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.text$x:0000914E                 jmp     ___CxxFrameHandler3
.text$x:0000914E __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z endp
.text$x:0000914E
.text$x:0000914E ; ---------------------------------------------------------------------------
.text$x:00009153                 align 4
.text$x:00009153 _text$x         ends
.text$x:00009153
.text$mn:00009154 ; ===========================================================================
.text$mn:00009154
.text$mn:00009154 ; Segment type: Pure code
.text$mn:00009154 ; Segment permissions: Read/Execute
.text$mn:00009154 _text$mn        segment para public 'CODE' use32
.text$mn:00009154                 assume cs:_text$mn
.text$mn:00009154                 ;org 9154h
.text$mn:00009154 ; COMDAT (pick any)
.text$mn:00009154                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009154
.text$mn:00009154 ; =============== S U B R O U T I N E =======================================
.text$mn:00009154
.text$mn:00009154 ; Attributes: bp-based frame
.text$mn:00009154
.text$mn:00009154 ; protected: void __thiscall std::vector<int, class std::allocator<int>>::_Reallocate(unsigned int)
.text$mn:00009154                 public ?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
.text$mn:00009154 ?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z proc near
.text$mn:00009154                                         ; CODE XREF: std::vector<int,std::allocator<int>>::_Reserve(uint)+4Ep
.text$mn:00009154
.text$mn:00009154 var_20          = dword ptr -20h
.text$mn:00009154 var_1C          = dword ptr -1Ch
.text$mn:00009154 var_18          = dword ptr -18h
.text$mn:00009154 var_13          = byte ptr -13h
.text$mn:00009154 var_11          = byte ptr -11h
.text$mn:00009154 var_10          = dword ptr -10h
.text$mn:00009154 var_C           = dword ptr -0Ch
.text$mn:00009154 var_4           = dword ptr -4
.text$mn:00009154 arg_0           = dword ptr  8
.text$mn:00009154
.text$mn:00009154 ; FUNCTION CHUNK AT .text$mn:000091EA SIZE 00000009 BYTES
.text$mn:00009154 ; FUNCTION CHUNK AT .text$mn:000091FA SIZE 00000097 BYTES
.text$mn:00009154
.text$mn:00009154                 push    ebp
.text$mn:00009155                 mov     ebp, esp
.text$mn:00009157                 push    0FFFFFFFFh
.text$mn:00009159                 push    offset __ehhandler$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
.text$mn:0000915E                 mov     eax, large fs:0
.text$mn:00009164                 push    eax
.text$mn:00009165                 push    ecx
.text$mn:00009166                 sub     esp, 10h
.text$mn:00009169                 push    ebx
.text$mn:0000916A                 push    esi
.text$mn:0000916B                 push    edi
.text$mn:0000916C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009171                 xor     eax, ebp
.text$mn:00009173                 push    eax
.text$mn:00009174                 lea     eax, [ebp+var_C]
.text$mn:00009177                 mov     large fs:0, eax
.text$mn:0000917D                 mov     [ebp+var_10], esp
.text$mn:00009180                 mov     [ebp+var_18], ecx
.text$mn:00009183                 mov     eax, [ebp+arg_0]
.text$mn:00009186                 push    eax
.text$mn:00009187                 lea     ecx, [ebp+var_11]
.text$mn:0000918A                 push    ecx
.text$mn:0000918B                 mov     ecx, [ebp+var_18]
.text$mn:0000918E                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int>>>::_Getal(void)
.text$mn:00009193                 mov     ecx, eax
.text$mn:00009195                 call    ?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z ; std::_Wrap_alloc<std::allocator<int>>::allocate(uint)
.text$mn:0000919A                 mov     [ebp+var_1C], eax
.text$mn:0000919D                 mov     [ebp+var_4], 0
.text$mn:000091A4                 mov     edx, [ebp+var_1C]
.text$mn:000091A7                 push    edx
.text$mn:000091A8                 mov     eax, [ebp+var_18]
.text$mn:000091AB                 mov     ecx, [eax+8]
.text$mn:000091AE                 push    ecx
.text$mn:000091AF                 mov     edx, [ebp+var_18]
.text$mn:000091B2                 mov     eax, [edx+4]
.text$mn:000091B5                 push    eax
.text$mn:000091B6                 mov     ecx, [ebp+var_18]
.text$mn:000091B9                 call    ??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int>>::_Umove<int *>(int *,int *,int *)
.text$mn:000091BE                 jmp     short loc_91EA
.text$mn:000091BE ?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z endp
.text$mn:000091BE
.text$mn:000091C0
.text$mn:000091C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000091C0
.text$mn:000091C0 ; Attributes: noreturn
.text$mn:000091C0
.text$mn:000091C0 __catch$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$0 proc near
.text$mn:000091C0                                         ; DATA XREF: .xdata$x:0000C658o
.text$mn:000091C0                 mov     ecx, [ebp+8]
.text$mn:000091C3                 push    ecx             ; int
.text$mn:000091C4                 mov     edx, [ebp-1Ch]
.text$mn:000091C7                 push    edx             ; void *
.text$mn:000091C8                 lea     eax, [ebp-12h]
.text$mn:000091CB                 push    eax
.text$mn:000091CC                 mov     ecx, [ebp-18h]
.text$mn:000091CF                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int>>>::_Getal(void)
.text$mn:000091D4                 mov     ecx, eax
.text$mn:000091D6                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int>>::deallocate(int *,uint)
.text$mn:000091DB                 push    0
.text$mn:000091DD                 push    0
.text$mn:000091DF                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:000091DF __catch$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$0 endp
.text$mn:000091DF
.text$mn:000091E4 ; ---------------------------------------------------------------------------
.text$mn:000091E4                 mov     eax, offset $LN8
.text$mn:000091E9                 retn
.text$mn:000091EA ; ---------------------------------------------------------------------------
.text$mn:000091EA ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
.text$mn:000091EA
.text$mn:000091EA loc_91EA:                               ; CODE XREF: std::vector<int,std::allocator<int>>::_Reallocate(uint)+6Aj
.text$mn:000091EA                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000091F1                 jmp     short loc_91FA
.text$mn:000091F1 ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
.text$mn:000091F3
.text$mn:000091F3 ; =============== S U B R O U T I N E =======================================
.text$mn:000091F3
.text$mn:000091F3
.text$mn:000091F3 $LN8            proc near               ; DATA XREF: .text$mn:000091E4o
.text$mn:000091F3                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:000091F3 $LN8            endp ; sp-analysis failed
.text$mn:000091F3
.text$mn:000091FA ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
.text$mn:000091FA
.text$mn:000091FA loc_91FA:                               ; CODE XREF: std::vector<int,std::allocator<int>>::_Reallocate(uint)+9Dj
.text$mn:000091FA                 mov     ecx, [ebp+var_18]
.text$mn:000091FD                 call    ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int>>::size(void)
.text$mn:00009202                 mov     [ebp+var_20], eax
.text$mn:00009205                 mov     ecx, [ebp+var_18]
.text$mn:00009208                 cmp     dword ptr [ecx+4], 0
.text$mn:0000920C                 jz      short loc_924E
.text$mn:0000920E                 mov     edx, [ebp+var_18]
.text$mn:00009211                 mov     eax, [edx+8]
.text$mn:00009214                 push    eax
.text$mn:00009215                 mov     ecx, [ebp+var_18]
.text$mn:00009218                 mov     edx, [ecx+4]
.text$mn:0000921B                 push    edx
.text$mn:0000921C                 mov     ecx, [ebp+var_18]
.text$mn:0000921F                 call    ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int>>::_Destroy(int *,int *)
.text$mn:00009224                 mov     eax, [ebp+var_18]
.text$mn:00009227                 mov     ecx, [ebp+var_18]
.text$mn:0000922A                 mov     edx, [eax+0Ch]
.text$mn:0000922D                 sub     edx, [ecx+4]
.text$mn:00009230                 sar     edx, 2
.text$mn:00009233                 push    edx             ; int
.text$mn:00009234                 mov     eax, [ebp+var_18]
.text$mn:00009237                 mov     ecx, [eax+4]
.text$mn:0000923A                 push    ecx             ; void *
.text$mn:0000923B                 lea     edx, [ebp+var_13]
.text$mn:0000923E                 push    edx
.text$mn:0000923F                 mov     ecx, [ebp+var_18]
.text$mn:00009242                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int>>>::_Getal(void)
.text$mn:00009247                 mov     ecx, eax
.text$mn:00009249                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int>>::deallocate(int *,uint)
.text$mn:0000924E
.text$mn:0000924E loc_924E:                               ; CODE XREF: std::vector<int,std::allocator<int>>::_Reallocate(uint)+B8j
.text$mn:0000924E                 mov     ecx, [ebp+var_18] ; this
.text$mn:00009251                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00009256                 mov     eax, [ebp+arg_0]
.text$mn:00009259                 mov     ecx, [ebp+var_1C]
.text$mn:0000925C                 lea     edx, [ecx+eax*4]
.text$mn:0000925F                 mov     eax, [ebp+var_18]
.text$mn:00009262                 mov     [eax+0Ch], edx
.text$mn:00009265                 mov     ecx, [ebp+var_20]
.text$mn:00009268                 mov     edx, [ebp+var_1C]
.text$mn:0000926B                 lea     eax, [edx+ecx*4]
.text$mn:0000926E                 mov     ecx, [ebp+var_18]
.text$mn:00009271                 mov     [ecx+8], eax
.text$mn:00009274                 mov     edx, [ebp+var_18]
.text$mn:00009277                 mov     eax, [ebp+var_1C]
.text$mn:0000927A                 mov     [edx+4], eax
.text$mn:0000927D                 mov     ecx, [ebp+var_C]
.text$mn:00009280                 mov     large fs:0, ecx
.text$mn:00009287                 pop     ecx
.text$mn:00009288                 pop     edi
.text$mn:00009289                 pop     esi
.text$mn:0000928A                 pop     ebx
.text$mn:0000928B                 mov     esp, ebp
.text$mn:0000928D                 pop     ebp
.text$mn:0000928E                 retn    4
.text$mn:0000928E ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
.text$mn:0000928E ; ---------------------------------------------------------------------------
.text$mn:00009291                 align 4
.text$mn:00009291 _text$mn        ends
.text$mn:00009291
.text$x:00009294 ; ===========================================================================
.text$x:00009294
.text$x:00009294 ; Segment type: Pure code
.text$x:00009294 ; Segment permissions: Read/Execute
.text$x:00009294 _text$x         segment para public 'CODE' use32
.text$x:00009294                 assume cs:_text$x
.text$x:00009294                 ;org 9294h
.text$x:00009294 ; COMDAT (pick associative to section at 9154)
.text$x:00009294                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009294
.text$x:00009294 ; =============== S U B R O U T I N E =======================================
.text$x:00009294
.text$x:00009294
.text$x:00009294 __ehhandler$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z proc near
.text$x:00009294                                         ; DATA XREF: std::vector<int,std::allocator<int>>::_Reallocate(uint)+5o
.text$x:00009294
.text$x:00009294 arg_4           = dword ptr  8
.text$x:00009294
.text$x:00009294                 mov     edx, [esp+arg_4]
.text$x:00009298                 lea     eax, [edx+0Ch]
.text$x:0000929B                 mov     ecx, [edx-24h]
.text$x:0000929E                 xor     ecx, eax
.text$x:000092A0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000092A5                 mov     eax, offset __ehfuncinfo$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
.text$x:000092AA                 jmp     ___CxxFrameHandler3
.text$x:000092AA __ehhandler$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z endp
.text$x:000092AA
.text$x:000092AA ; ---------------------------------------------------------------------------
.text$x:000092AF                 align 10h
.text$x:000092AF _text$x         ends
.text$x:000092AF
.text$mn:000092B0 ; ===========================================================================
.text$mn:000092B0
.text$mn:000092B0 ; Segment type: Pure code
.text$mn:000092B0 ; Segment permissions: Read/Execute
.text$mn:000092B0 _text$mn        segment para public 'CODE' use32
.text$mn:000092B0                 assume cs:_text$mn
.text$mn:000092B0                 ;org 92B0h
.text$mn:000092B0 ; COMDAT (pick any)
.text$mn:000092B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000092B0
.text$mn:000092B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000092B0
.text$mn:000092B0 ; Attributes: bp-based frame
.text$mn:000092B0
.text$mn:000092B0 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Reallocate(unsigned int)
.text$mn:000092B0                 public ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:000092B0 ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z proc near
.text$mn:000092B0                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+4Ep
.text$mn:000092B0
.text$mn:000092B0 var_20          = dword ptr -20h
.text$mn:000092B0 var_1C          = dword ptr -1Ch
.text$mn:000092B0 var_18          = dword ptr -18h
.text$mn:000092B0 var_13          = byte ptr -13h
.text$mn:000092B0 var_11          = byte ptr -11h
.text$mn:000092B0 var_10          = dword ptr -10h
.text$mn:000092B0 var_C           = dword ptr -0Ch
.text$mn:000092B0 var_4           = dword ptr -4
.text$mn:000092B0 arg_0           = dword ptr  8
.text$mn:000092B0
.text$mn:000092B0 ; FUNCTION CHUNK AT .text$mn:00009346 SIZE 00000009 BYTES
.text$mn:000092B0 ; FUNCTION CHUNK AT .text$mn:00009356 SIZE 00000098 BYTES
.text$mn:000092B0
.text$mn:000092B0                 push    ebp
.text$mn:000092B1                 mov     ebp, esp
.text$mn:000092B3                 push    0FFFFFFFFh
.text$mn:000092B5                 push    offset __ehhandler$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:000092BA                 mov     eax, large fs:0
.text$mn:000092C0                 push    eax
.text$mn:000092C1                 push    ecx
.text$mn:000092C2                 sub     esp, 10h
.text$mn:000092C5                 push    ebx
.text$mn:000092C6                 push    esi
.text$mn:000092C7                 push    edi
.text$mn:000092C8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000092CD                 xor     eax, ebp
.text$mn:000092CF                 push    eax
.text$mn:000092D0                 lea     eax, [ebp+var_C]
.text$mn:000092D3                 mov     large fs:0, eax
.text$mn:000092D9                 mov     [ebp+var_10], esp
.text$mn:000092DC                 mov     [ebp+var_18], ecx
.text$mn:000092DF                 mov     eax, [ebp+arg_0]
.text$mn:000092E2                 push    eax
.text$mn:000092E3                 lea     ecx, [ebp+var_11]
.text$mn:000092E6                 push    ecx
.text$mn:000092E7                 mov     ecx, [ebp+var_18]
.text$mn:000092EA                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:000092EF                 mov     ecx, eax
.text$mn:000092F1                 call    ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::allocate(uint)
.text$mn:000092F6                 mov     [ebp+var_1C], eax
.text$mn:000092F9                 mov     [ebp+var_4], 0
.text$mn:00009300                 mov     edx, [ebp+var_1C]
.text$mn:00009303                 push    edx
.text$mn:00009304                 mov     eax, [ebp+var_18]
.text$mn:00009307                 mov     ecx, [eax+8]
.text$mn:0000930A                 push    ecx
.text$mn:0000930B                 mov     edx, [ebp+var_18]
.text$mn:0000930E                 mov     eax, [edx+4]
.text$mn:00009311                 push    eax
.text$mn:00009312                 mov     ecx, [ebp+var_18]
.text$mn:00009315                 call    ??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PAV21@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000931A                 jmp     short loc_9346
.text$mn:0000931A ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z endp
.text$mn:0000931A
.text$mn:0000931C
.text$mn:0000931C ; =============== S U B R O U T I N E =======================================
.text$mn:0000931C
.text$mn:0000931C ; Attributes: noreturn
.text$mn:0000931C
.text$mn:0000931C __catch$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$0 proc near
.text$mn:0000931C                                         ; DATA XREF: .xdata$x:0000CC5Co
.text$mn:0000931C                 mov     ecx, [ebp+8]
.text$mn:0000931F                 push    ecx             ; int
.text$mn:00009320                 mov     edx, [ebp-1Ch]
.text$mn:00009323                 push    edx             ; void *
.text$mn:00009324                 lea     eax, [ebp-12h]
.text$mn:00009327                 push    eax
.text$mn:00009328                 mov     ecx, [ebp-18h]
.text$mn:0000932B                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:00009330                 mov     ecx, eax
.text$mn:00009332                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)
.text$mn:00009337                 push    0
.text$mn:00009339                 push    0
.text$mn:0000933B                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000933B __catch$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$0 endp
.text$mn:0000933B
.text$mn:00009340 ; ---------------------------------------------------------------------------
.text$mn:00009340                 mov     eax, offset $LN8_1
.text$mn:00009345                 retn
.text$mn:00009346 ; ---------------------------------------------------------------------------
.text$mn:00009346 ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:00009346
.text$mn:00009346 loc_9346:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+6Aj
.text$mn:00009346                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000934D                 jmp     short loc_9356
.text$mn:0000934D ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:0000934F
.text$mn:0000934F ; =============== S U B R O U T I N E =======================================
.text$mn:0000934F
.text$mn:0000934F
.text$mn:0000934F $LN8_1          proc near               ; DATA XREF: .text$mn:00009340o
.text$mn:0000934F                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:0000934F $LN8_1          endp ; sp-analysis failed
.text$mn:0000934F
.text$mn:00009356 ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:00009356
.text$mn:00009356 loc_9356:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+9Dj
.text$mn:00009356                 mov     ecx, [ebp+var_18]
.text$mn:00009359                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:0000935E                 mov     [ebp+var_20], eax
.text$mn:00009361                 mov     ecx, [ebp+var_18]
.text$mn:00009364                 cmp     dword ptr [ecx+4], 0
.text$mn:00009368                 jz      short loc_93AF
.text$mn:0000936A                 mov     edx, [ebp+var_18]
.text$mn:0000936D                 mov     eax, [edx+8]
.text$mn:00009370                 push    eax
.text$mn:00009371                 mov     ecx, [ebp+var_18]
.text$mn:00009374                 mov     edx, [ecx+4]
.text$mn:00009377                 push    edx
.text$mn:00009378                 mov     ecx, [ebp+var_18]
.text$mn:0000937B                 call    ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00009380                 mov     eax, [ebp+var_18]
.text$mn:00009383                 mov     ecx, [ebp+var_18]
.text$mn:00009386                 mov     eax, [eax+0Ch]
.text$mn:00009389                 sub     eax, [ecx+4]
.text$mn:0000938C                 cdq
.text$mn:0000938D                 mov     ecx, 1Ch
.text$mn:00009392                 idiv    ecx
.text$mn:00009394                 push    eax             ; int
.text$mn:00009395                 mov     edx, [ebp+var_18]
.text$mn:00009398                 mov     eax, [edx+4]
.text$mn:0000939B                 push    eax             ; void *
.text$mn:0000939C                 lea     ecx, [ebp+var_13]
.text$mn:0000939F                 push    ecx
.text$mn:000093A0                 mov     ecx, [ebp+var_18]
.text$mn:000093A3                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:000093A8                 mov     ecx, eax
.text$mn:000093AA                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)
.text$mn:000093AF
.text$mn:000093AF loc_93AF:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+B8j
.text$mn:000093AF                 mov     ecx, [ebp+var_18] ; this
.text$mn:000093B2                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:000093B7                 imul    edx, [ebp+arg_0], 1Ch
.text$mn:000093BB                 add     edx, [ebp+var_1C]
.text$mn:000093BE                 mov     eax, [ebp+var_18]
.text$mn:000093C1                 mov     [eax+0Ch], edx
.text$mn:000093C4                 imul    ecx, [ebp+var_20], 1Ch
.text$mn:000093C8                 add     ecx, [ebp+var_1C]
.text$mn:000093CB                 mov     edx, [ebp+var_18]
.text$mn:000093CE                 mov     [edx+8], ecx
.text$mn:000093D1                 mov     eax, [ebp+var_18]
.text$mn:000093D4                 mov     ecx, [ebp+var_1C]
.text$mn:000093D7                 mov     [eax+4], ecx
.text$mn:000093DA                 mov     ecx, [ebp+var_C]
.text$mn:000093DD                 mov     large fs:0, ecx
.text$mn:000093E4                 pop     ecx
.text$mn:000093E5                 pop     edi
.text$mn:000093E6                 pop     esi
.text$mn:000093E7                 pop     ebx
.text$mn:000093E8                 mov     esp, ebp
.text$mn:000093EA                 pop     ebp
.text$mn:000093EB                 retn    4
.text$mn:000093EB ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:000093EB ; ---------------------------------------------------------------------------
.text$mn:000093EE                 align 10h
.text$mn:000093EE _text$mn        ends
.text$mn:000093EE
.text$x:000093F0 ; ===========================================================================
.text$x:000093F0
.text$x:000093F0 ; Segment type: Pure code
.text$x:000093F0 ; Segment permissions: Read/Execute
.text$x:000093F0 _text$x         segment para public 'CODE' use32
.text$x:000093F0                 assume cs:_text$x
.text$x:000093F0                 ;org 93F0h
.text$x:000093F0 ; COMDAT (pick associative to section at 92B0)
.text$x:000093F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000093F0
.text$x:000093F0 ; =============== S U B R O U T I N E =======================================
.text$x:000093F0
.text$x:000093F0
.text$x:000093F0 __ehhandler$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z proc near
.text$x:000093F0                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+5o
.text$x:000093F0
.text$x:000093F0 arg_4           = dword ptr  8
.text$x:000093F0
.text$x:000093F0                 mov     edx, [esp+arg_4]
.text$x:000093F4                 lea     eax, [edx+0Ch]
.text$x:000093F7                 mov     ecx, [edx-24h]
.text$x:000093FA                 xor     ecx, eax
.text$x:000093FC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009401                 mov     eax, offset __ehfuncinfo$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$x:00009406                 jmp     ___CxxFrameHandler3
.text$x:00009406 __ehhandler$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z endp
.text$x:00009406
.text$x:00009406 ; ---------------------------------------------------------------------------
.text$x:0000940B                 align 4
.text$x:0000940B _text$x         ends
.text$x:0000940B
.text$mn:0000940C ; ===========================================================================
.text$mn:0000940C
.text$mn:0000940C ; Segment type: Pure code
.text$mn:0000940C ; Segment permissions: Read/Execute
.text$mn:0000940C _text$mn        segment para public 'CODE' use32
.text$mn:0000940C                 assume cs:_text$mn
.text$mn:0000940C                 ;org 940Ch
.text$mn:0000940C ; COMDAT (pick any)
.text$mn:0000940C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000940C
.text$mn:0000940C ; =============== S U B R O U T I N E =======================================
.text$mn:0000940C
.text$mn:0000940C ; Attributes: bp-based frame
.text$mn:0000940C
.text$mn:0000940C ; protected: void __thiscall std::vector<int, class std::allocator<int>>::_Reserve(unsigned int)
.text$mn:0000940C                 public ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
.text$mn:0000940C ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z proc near
.text$mn:0000940C                                         ; CODE XREF: std::vector<int,std::allocator<int>>::push_back(int const &)+50p
.text$mn:0000940C                                         ; std::vector<int,std::allocator<int>>::push_back(int const &)+B6p
.text$mn:0000940C
.text$mn:0000940C var_4           = dword ptr -4
.text$mn:0000940C arg_0           = dword ptr  8
.text$mn:0000940C
.text$mn:0000940C                 push    ebp
.text$mn:0000940D                 mov     ebp, esp
.text$mn:0000940F                 push    ecx
.text$mn:00009410                 push    esi
.text$mn:00009411                 mov     [ebp+var_4], ecx
.text$mn:00009414                 mov     ecx, [ebp+var_4]
.text$mn:00009417                 call    ?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int>>::_Unused_capacity(void)
.text$mn:0000941C                 cmp     eax, [ebp+arg_0]
.text$mn:0000941F                 jnb     short loc_945F
.text$mn:00009421                 mov     ecx, [ebp+var_4]
.text$mn:00009424                 call    ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int>>::max_size(void)
.text$mn:00009429                 mov     esi, eax
.text$mn:0000942B                 mov     ecx, [ebp+var_4]
.text$mn:0000942E                 call    ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int>>::size(void)
.text$mn:00009433                 sub     esi, eax
.text$mn:00009435                 cmp     esi, [ebp+arg_0]
.text$mn:00009438                 jnb     short loc_9442
.text$mn:0000943A                 mov     ecx, [ebp+var_4]
.text$mn:0000943D                 call    ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ ; std::vector<int,std::allocator<int>>::_Xlen(void)
.text$mn:00009442
.text$mn:00009442 loc_9442:                               ; CODE XREF: std::vector<int,std::allocator<int>>::_Reserve(uint)+2Cj
.text$mn:00009442                 mov     ecx, [ebp+var_4]
.text$mn:00009445                 call    ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int>>::size(void)
.text$mn:0000944A                 add     eax, [ebp+arg_0]
.text$mn:0000944D                 push    eax
.text$mn:0000944E                 mov     ecx, [ebp+var_4]
.text$mn:00009451                 call    ?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z ; std::vector<int,std::allocator<int>>::_Grow_to(uint)
.text$mn:00009456                 push    eax
.text$mn:00009457                 mov     ecx, [ebp+var_4]
.text$mn:0000945A                 call    ?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int>>::_Reallocate(uint)
.text$mn:0000945F
.text$mn:0000945F loc_945F:                               ; CODE XREF: std::vector<int,std::allocator<int>>::_Reserve(uint)+13j
.text$mn:0000945F                 pop     esi
.text$mn:00009460                 mov     esp, ebp
.text$mn:00009462                 pop     ebp
.text$mn:00009463                 retn    4
.text$mn:00009463 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z endp
.text$mn:00009463
.text$mn:00009463 ; ---------------------------------------------------------------------------
.text$mn:00009466                 align 4
.text$mn:00009466 _text$mn        ends
.text$mn:00009466
.text$mn:00009468 ; ===========================================================================
.text$mn:00009468
.text$mn:00009468 ; Segment type: Pure code
.text$mn:00009468 ; Segment permissions: Read/Execute
.text$mn:00009468 _text$mn        segment para public 'CODE' use32
.text$mn:00009468                 assume cs:_text$mn
.text$mn:00009468                 ;org 9468h
.text$mn:00009468 ; COMDAT (pick any)
.text$mn:00009468                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009468
.text$mn:00009468 ; =============== S U B R O U T I N E =======================================
.text$mn:00009468
.text$mn:00009468 ; Attributes: bp-based frame
.text$mn:00009468
.text$mn:00009468 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Reserve(unsigned int)
.text$mn:00009468                 public ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:00009468 ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z proc near
.text$mn:00009468                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+59p
.text$mn:00009468                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+C6p
.text$mn:00009468
.text$mn:00009468 var_4           = dword ptr -4
.text$mn:00009468 arg_0           = dword ptr  8
.text$mn:00009468
.text$mn:00009468                 push    ebp
.text$mn:00009469                 mov     ebp, esp
.text$mn:0000946B                 push    ecx
.text$mn:0000946C                 push    esi
.text$mn:0000946D                 mov     [ebp+var_4], ecx
.text$mn:00009470                 mov     ecx, [ebp+var_4]
.text$mn:00009473                 call    ?_Unused_capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Unused_capacity(void)
.text$mn:00009478                 cmp     eax, [ebp+arg_0]
.text$mn:0000947B                 jnb     short loc_94BB
.text$mn:0000947D                 mov     ecx, [ebp+var_4]
.text$mn:00009480                 call    ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)
.text$mn:00009485                 mov     esi, eax
.text$mn:00009487                 mov     ecx, [ebp+var_4]
.text$mn:0000948A                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:0000948F                 sub     esi, eax
.text$mn:00009491                 cmp     esi, [ebp+arg_0]
.text$mn:00009494                 jnb     short loc_949E
.text$mn:00009496                 mov     ecx, [ebp+var_4]
.text$mn:00009499                 call    ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Xlen(void)
.text$mn:0000949E
.text$mn:0000949E loc_949E:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+2Cj
.text$mn:0000949E                 mov     ecx, [ebp+var_4]
.text$mn:000094A1                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:000094A6                 add     eax, [ebp+arg_0]
.text$mn:000094A9                 push    eax
.text$mn:000094AA                 mov     ecx, [ebp+var_4]
.text$mn:000094AD                 call    ?_Grow_to@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEII@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)
.text$mn:000094B2                 push    eax
.text$mn:000094B3                 mov     ecx, [ebp+var_4]
.text$mn:000094B6                 call    ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)
.text$mn:000094BB
.text$mn:000094BB loc_94BB:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+13j
.text$mn:000094BB                 pop     esi
.text$mn:000094BC                 mov     esp, ebp
.text$mn:000094BE                 pop     ebp
.text$mn:000094BF                 retn    4
.text$mn:000094BF ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z endp
.text$mn:000094BF
.text$mn:000094BF ; ---------------------------------------------------------------------------
.text$mn:000094C2                 align 4
.text$mn:000094C2 _text$mn        ends
.text$mn:000094C2
.text$mn:000094C4 ; ===========================================================================
.text$mn:000094C4
.text$mn:000094C4 ; Segment type: Pure code
.text$mn:000094C4 ; Segment permissions: Read/Execute
.text$mn:000094C4 _text$mn        segment para public 'CODE' use32
.text$mn:000094C4                 assume cs:_text$mn
.text$mn:000094C4                 ;org 94C4h
.text$mn:000094C4 ; COMDAT (pick any)
.text$mn:000094C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000094C4
.text$mn:000094C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000094C4
.text$mn:000094C4 ; Attributes: bp-based frame
.text$mn:000094C4
.text$mn:000094C4 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(char, size_t Size)
.text$mn:000094C4                 public ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
.text$mn:000094C4 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
.text$mn:000094C4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+47p
.text$mn:000094C4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+34p ...
.text$mn:000094C4
.text$mn:000094C4 var_C           = dword ptr -0Ch
.text$mn:000094C4 var_8           = dword ptr -8
.text$mn:000094C4 var_2           = byte ptr -2
.text$mn:000094C4 var_1           = byte ptr -1
.text$mn:000094C4 arg_0           = byte ptr  8
.text$mn:000094C4 Size            = dword ptr  0Ch
.text$mn:000094C4
.text$mn:000094C4                 push    ebp
.text$mn:000094C5                 mov     ebp, esp
.text$mn:000094C7                 sub     esp, 0Ch
.text$mn:000094CA                 mov     [ebp+var_8], ecx
.text$mn:000094CD                 movzx   eax, [ebp+arg_0]
.text$mn:000094D1                 test    eax, eax
.text$mn:000094D3                 jnz     short loc_94D7
.text$mn:000094D5                 jmp     short loc_954A
.text$mn:000094D7 ; ---------------------------------------------------------------------------
.text$mn:000094D7
.text$mn:000094D7 loc_94D7:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+Fj
.text$mn:000094D7                 mov     ecx, [ebp+var_8]
.text$mn:000094DA                 cmp     dword ptr [ecx+18h], 10h
.text$mn:000094DE                 jb      short loc_954A
.text$mn:000094E0                 mov     edx, [ebp+var_8]
.text$mn:000094E3                 mov     eax, [edx+4]
.text$mn:000094E6                 mov     [ebp+var_C], eax
.text$mn:000094E9                 mov     ecx, [ebp+var_8]
.text$mn:000094EC                 add     ecx, 4
.text$mn:000094EF                 push    ecx
.text$mn:000094F0                 lea     edx, [ebp+var_1]
.text$mn:000094F3                 push    edx
.text$mn:000094F4                 mov     ecx, [ebp+var_8]
.text$mn:000094F7                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000094FC                 mov     ecx, eax
.text$mn:000094FE                 call    ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)
.text$mn:00009503                 cmp     [ebp+Size], 0
.text$mn:00009507                 jbe     short loc_9529
.text$mn:00009509                 mov     eax, [ebp+Size]
.text$mn:0000950C                 push    eax             ; Size
.text$mn:0000950D                 mov     ecx, [ebp+var_C]
.text$mn:00009510                 push    ecx
.text$mn:00009511                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00009516                 add     esp, 4
.text$mn:00009519                 push    eax             ; Src
.text$mn:0000951A                 mov     edx, [ebp+var_8]
.text$mn:0000951D                 add     edx, 4
.text$mn:00009520                 push    edx             ; Dst
.text$mn:00009521                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00009526                 add     esp, 0Ch
.text$mn:00009529
.text$mn:00009529 loc_9529:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+43j
.text$mn:00009529                 mov     eax, [ebp+var_8]
.text$mn:0000952C                 mov     ecx, [eax+18h]
.text$mn:0000952F                 add     ecx, 1
.text$mn:00009532                 push    ecx             ; int
.text$mn:00009533                 mov     edx, [ebp+var_C]
.text$mn:00009536                 push    edx             ; void *
.text$mn:00009537                 lea     eax, [ebp+var_2]
.text$mn:0000953A                 push    eax
.text$mn:0000953B                 mov     ecx, [ebp+var_8]
.text$mn:0000953E                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00009543                 mov     ecx, eax
.text$mn:00009545                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)
.text$mn:0000954A
.text$mn:0000954A loc_954A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+11j
.text$mn:0000954A                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+1Aj
.text$mn:0000954A                 mov     ecx, [ebp+var_8]
.text$mn:0000954D                 mov     dword ptr [ecx+18h], 0Fh
.text$mn:00009554                 mov     edx, [ebp+Size]
.text$mn:00009557                 push    edx
.text$mn:00009558                 mov     ecx, [ebp+var_8]
.text$mn:0000955B                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00009560                 mov     esp, ebp
.text$mn:00009562                 pop     ebp
.text$mn:00009563                 retn    8
.text$mn:00009563 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z endp
.text$mn:00009563
.text$mn:00009563 ; ---------------------------------------------------------------------------
.text$mn:00009566                 align 4
.text$mn:00009566 _text$mn        ends
.text$mn:00009566
.text$mn:00009568 ; ===========================================================================
.text$mn:00009568
.text$mn:00009568 ; Segment type: Pure code
.text$mn:00009568 ; Segment permissions: Read/Execute
.text$mn:00009568 _text$mn        segment para public 'CODE' use32
.text$mn:00009568                 assume cs:_text$mn
.text$mn:00009568                 ;org 9568h
.text$mn:00009568 ; COMDAT (pick any)
.text$mn:00009568                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009568
.text$mn:00009568 ; =============== S U B R O U T I N E =======================================
.text$mn:00009568
.text$mn:00009568 ; Attributes: bp-based frame
.text$mn:00009568
.text$mn:00009568 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Tidy(bool, unsigned int)
.text$mn:00009568                 public ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z
.text$mn:00009568 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z proc near
.text$mn:00009568                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+4Bp
.text$mn:00009568                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+56p ...
.text$mn:00009568
.text$mn:00009568 var_C           = dword ptr -0Ch
.text$mn:00009568 var_8           = dword ptr -8
.text$mn:00009568 var_2           = byte ptr -2
.text$mn:00009568 var_1           = byte ptr -1
.text$mn:00009568 arg_0           = byte ptr  8
.text$mn:00009568 arg_4           = dword ptr  0Ch
.text$mn:00009568
.text$mn:00009568                 push    ebp
.text$mn:00009569                 mov     ebp, esp
.text$mn:0000956B                 sub     esp, 0Ch
.text$mn:0000956E                 mov     [ebp+var_8], ecx
.text$mn:00009571                 movzx   eax, [ebp+arg_0]
.text$mn:00009575                 test    eax, eax
.text$mn:00009577                 jnz     short loc_957B
.text$mn:00009579                 jmp     short loc_95EE
.text$mn:0000957B ; ---------------------------------------------------------------------------
.text$mn:0000957B
.text$mn:0000957B loc_957B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+Fj
.text$mn:0000957B                 mov     ecx, [ebp+var_8]
.text$mn:0000957E                 cmp     dword ptr [ecx+18h], 8
.text$mn:00009582                 jb      short loc_95EE
.text$mn:00009584                 mov     edx, [ebp+var_8]
.text$mn:00009587                 mov     eax, [edx+4]
.text$mn:0000958A                 mov     [ebp+var_C], eax
.text$mn:0000958D                 mov     ecx, [ebp+var_8]
.text$mn:00009590                 add     ecx, 4
.text$mn:00009593                 push    ecx
.text$mn:00009594                 lea     edx, [ebp+var_1]
.text$mn:00009597                 push    edx
.text$mn:00009598                 mov     ecx, [ebp+var_8]
.text$mn:0000959B                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000095A0                 mov     ecx, eax
.text$mn:000095A2                 call    ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:000095A7                 cmp     [ebp+arg_4], 0
.text$mn:000095AB                 jbe     short loc_95CD
.text$mn:000095AD                 mov     eax, [ebp+arg_4]
.text$mn:000095B0                 push    eax             ; int
.text$mn:000095B1                 mov     ecx, [ebp+var_C]
.text$mn:000095B4                 push    ecx
.text$mn:000095B5                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:000095BA                 add     esp, 4
.text$mn:000095BD                 push    eax             ; Src
.text$mn:000095BE                 mov     edx, [ebp+var_8]
.text$mn:000095C1                 add     edx, 4
.text$mn:000095C4                 push    edx             ; Dst
.text$mn:000095C5                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:000095CA                 add     esp, 0Ch
.text$mn:000095CD
.text$mn:000095CD loc_95CD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+43j
.text$mn:000095CD                 mov     eax, [ebp+var_8]
.text$mn:000095D0                 mov     ecx, [eax+18h]
.text$mn:000095D3                 add     ecx, 1
.text$mn:000095D6                 push    ecx             ; int
.text$mn:000095D7                 mov     edx, [ebp+var_C]
.text$mn:000095DA                 push    edx             ; void *
.text$mn:000095DB                 lea     eax, [ebp+var_2]
.text$mn:000095DE                 push    eax
.text$mn:000095DF                 mov     ecx, [ebp+var_8]
.text$mn:000095E2                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000095E7                 mov     ecx, eax
.text$mn:000095E9                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)
.text$mn:000095EE
.text$mn:000095EE loc_95EE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+11j
.text$mn:000095EE                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+1Aj
.text$mn:000095EE                 mov     ecx, [ebp+var_8]
.text$mn:000095F1                 mov     dword ptr [ecx+18h], 7
.text$mn:000095F8                 mov     edx, [ebp+arg_4]
.text$mn:000095FB                 push    edx
.text$mn:000095FC                 mov     ecx, [ebp+var_8]
.text$mn:000095FF                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00009604                 mov     esp, ebp
.text$mn:00009606                 pop     ebp
.text$mn:00009607                 retn    8
.text$mn:00009607 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z endp
.text$mn:00009607
.text$mn:00009607 ; ---------------------------------------------------------------------------
.text$mn:0000960A                 align 4
.text$mn:0000960A _text$mn        ends
.text$mn:0000960A
.text$mn:0000960C ; ===========================================================================
.text$mn:0000960C
.text$mn:0000960C ; Segment type: Pure code
.text$mn:0000960C ; Segment permissions: Read/Execute
.text$mn:0000960C _text$mn        segment para public 'CODE' use32
.text$mn:0000960C                 assume cs:_text$mn
.text$mn:0000960C                 ;org 960Ch
.text$mn:0000960C ; COMDAT (pick any)
.text$mn:0000960C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000960C
.text$mn:0000960C ; =============== S U B R O U T I N E =======================================
.text$mn:0000960C
.text$mn:0000960C ; Attributes: bp-based frame
.text$mn:0000960C
.text$mn:0000960C ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Tidy(void)
.text$mn:0000960C                 public ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ
.text$mn:0000960C ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ proc near
.text$mn:0000960C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+30p
.text$mn:0000960C
.text$mn:0000960C var_8           = dword ptr -8
.text$mn:0000960C var_1           = byte ptr -1
.text$mn:0000960C
.text$mn:0000960C                 push    ebp
.text$mn:0000960D                 mov     ebp, esp
.text$mn:0000960F                 sub     esp, 8
.text$mn:00009612                 mov     [ebp+var_8], ecx
.text$mn:00009615                 mov     eax, [ebp+var_8]
.text$mn:00009618                 cmp     dword ptr [eax+4], 0
.text$mn:0000961C                 jz      short loc_968B
.text$mn:0000961E                 mov     ecx, [ebp+var_8] ; this
.text$mn:00009621                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00009626                 mov     ecx, [ebp+var_8]
.text$mn:00009629                 mov     edx, [ecx+8]
.text$mn:0000962C                 push    edx
.text$mn:0000962D                 mov     eax, [ebp+var_8]
.text$mn:00009630                 mov     ecx, [eax+4]
.text$mn:00009633                 push    ecx
.text$mn:00009634                 mov     ecx, [ebp+var_8]
.text$mn:00009637                 call    ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000963C                 mov     edx, [ebp+var_8]
.text$mn:0000963F                 mov     eax, [ebp+var_8]
.text$mn:00009642                 mov     ecx, [edx+0Ch]
.text$mn:00009645                 sub     ecx, [eax+4]
.text$mn:00009648                 mov     eax, ecx
.text$mn:0000964A                 cdq
.text$mn:0000964B                 mov     ecx, 1Ch
.text$mn:00009650                 idiv    ecx
.text$mn:00009652                 push    eax             ; int
.text$mn:00009653                 mov     edx, [ebp+var_8]
.text$mn:00009656                 mov     eax, [edx+4]
.text$mn:00009659                 push    eax             ; void *
.text$mn:0000965A                 lea     ecx, [ebp+var_1]
.text$mn:0000965D                 push    ecx
.text$mn:0000965E                 mov     ecx, [ebp+var_8]
.text$mn:00009661                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:00009666                 mov     ecx, eax
.text$mn:00009668                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)
.text$mn:0000966D                 mov     edx, [ebp+var_8]
.text$mn:00009670                 mov     dword ptr [edx+4], 0
.text$mn:00009677                 mov     eax, [ebp+var_8]
.text$mn:0000967A                 mov     dword ptr [eax+8], 0
.text$mn:00009681                 mov     ecx, [ebp+var_8]
.text$mn:00009684                 mov     dword ptr [ecx+0Ch], 0
.text$mn:0000968B
.text$mn:0000968B loc_968B:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Tidy(void)+10j
.text$mn:0000968B                 mov     esp, ebp
.text$mn:0000968D                 pop     ebp
.text$mn:0000968E                 retn
.text$mn:0000968E ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ endp
.text$mn:0000968E
.text$mn:0000968E ; ---------------------------------------------------------------------------
.text$mn:0000968F                 align 10h
.text$mn:0000968F _text$mn        ends
.text$mn:0000968F
.text$mn:00009690 ; ===========================================================================
.text$mn:00009690
.text$mn:00009690 ; Segment type: Pure code
.text$mn:00009690 ; Segment permissions: Read/Execute
.text$mn:00009690 _text$mn        segment para public 'CODE' use32
.text$mn:00009690                 assume cs:_text$mn
.text$mn:00009690                 ;org 9690h
.text$mn:00009690 ; COMDAT (pick any)
.text$mn:00009690                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009690
.text$mn:00009690 ; =============== S U B R O U T I N E =======================================
.text$mn:00009690
.text$mn:00009690 ; Attributes: bp-based frame
.text$mn:00009690
.text$mn:00009690 ; public: unsigned int __thiscall std::vector<int, class std::allocator<int>>::_Unused_capacity(void)const
.text$mn:00009690                 public ?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
.text$mn:00009690 ?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ proc near
.text$mn:00009690                                         ; CODE XREF: std::vector<int,std::allocator<int>>::_Reserve(uint)+Bp
.text$mn:00009690
.text$mn:00009690 var_4           = dword ptr -4
.text$mn:00009690
.text$mn:00009690                 push    ebp
.text$mn:00009691                 mov     ebp, esp
.text$mn:00009693                 push    ecx
.text$mn:00009694                 mov     [ebp+var_4], ecx
.text$mn:00009697                 mov     eax, [ebp+var_4]
.text$mn:0000969A                 mov     ecx, [ebp+var_4]
.text$mn:0000969D                 mov     eax, [eax+0Ch]
.text$mn:000096A0                 sub     eax, [ecx+8]
.text$mn:000096A3                 sar     eax, 2
.text$mn:000096A6                 mov     esp, ebp
.text$mn:000096A8                 pop     ebp
.text$mn:000096A9                 retn
.text$mn:000096A9 ?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ endp
.text$mn:000096A9
.text$mn:000096A9 ; ---------------------------------------------------------------------------
.text$mn:000096AA                 align 4
.text$mn:000096AA _text$mn        ends
.text$mn:000096AA
.text$mn:000096AC ; ===========================================================================
.text$mn:000096AC
.text$mn:000096AC ; Segment type: Pure code
.text$mn:000096AC ; Segment permissions: Read/Execute
.text$mn:000096AC _text$mn        segment para public 'CODE' use32
.text$mn:000096AC                 assume cs:_text$mn
.text$mn:000096AC                 ;org 96ACh
.text$mn:000096AC ; COMDAT (pick any)
.text$mn:000096AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000096AC
.text$mn:000096AC ; =============== S U B R O U T I N E =======================================
.text$mn:000096AC
.text$mn:000096AC ; Attributes: bp-based frame
.text$mn:000096AC
.text$mn:000096AC ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Unused_capacity(void)const
.text$mn:000096AC                 public ?_Unused_capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:000096AC ?_Unused_capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:000096AC                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+Bp
.text$mn:000096AC
.text$mn:000096AC var_4           = dword ptr -4
.text$mn:000096AC
.text$mn:000096AC                 push    ebp
.text$mn:000096AD                 mov     ebp, esp
.text$mn:000096AF                 push    ecx
.text$mn:000096B0                 mov     [ebp+var_4], ecx
.text$mn:000096B3                 mov     eax, [ebp+var_4]
.text$mn:000096B6                 mov     ecx, [ebp+var_4]
.text$mn:000096B9                 mov     eax, [eax+0Ch]
.text$mn:000096BC                 sub     eax, [ecx+8]
.text$mn:000096BF                 cdq
.text$mn:000096C0                 mov     ecx, 1Ch
.text$mn:000096C5                 idiv    ecx
.text$mn:000096C7                 mov     esp, ebp
.text$mn:000096C9                 pop     ebp
.text$mn:000096CA                 retn
.text$mn:000096CA ?_Unused_capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:000096CA
.text$mn:000096CA ; ---------------------------------------------------------------------------
.text$mn:000096CB                 align 4
.text$mn:000096CB _text$mn        ends
.text$mn:000096CB
.text$mn:000096CC ; ===========================================================================
.text$mn:000096CC
.text$mn:000096CC ; Segment type: Pure code
.text$mn:000096CC ; Segment permissions: Read/Execute
.text$mn:000096CC _text$mn        segment para public 'CODE' use32
.text$mn:000096CC                 assume cs:_text$mn
.text$mn:000096CC                 ;org 96CCh
.text$mn:000096CC ; COMDAT (pick any)
.text$mn:000096CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000096CC
.text$mn:000096CC ; =============== S U B R O U T I N E =======================================
.text$mn:000096CC
.text$mn:000096CC ; Attributes: bp-based frame
.text$mn:000096CC
.text$mn:000096CC ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xlen(void)const
.text$mn:000096CC                 public ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:000096CC ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:000096CC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+19p
.text$mn:000096CC
.text$mn:000096CC var_4           = dword ptr -4
.text$mn:000096CC
.text$mn:000096CC                 push    ebp
.text$mn:000096CD                 mov     ebp, esp
.text$mn:000096CF                 push    ecx
.text$mn:000096D0                 mov     [ebp+var_4], ecx
.text$mn:000096D3                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:000096D8                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:000096DD                 mov     esp, ebp
.text$mn:000096DF                 pop     ebp
.text$mn:000096E0                 retn
.text$mn:000096E0 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:000096E0
.text$mn:000096E0 ; ---------------------------------------------------------------------------
.text$mn:000096E1                 align 4
.text$mn:000096E1 _text$mn        ends
.text$mn:000096E1
.text$mn:000096E4 ; ===========================================================================
.text$mn:000096E4
.text$mn:000096E4 ; Segment type: Pure code
.text$mn:000096E4 ; Segment permissions: Read/Execute
.text$mn:000096E4 _text$mn        segment para public 'CODE' use32
.text$mn:000096E4                 assume cs:_text$mn
.text$mn:000096E4                 ;org 96E4h
.text$mn:000096E4 ; COMDAT (pick any)
.text$mn:000096E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000096E4
.text$mn:000096E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000096E4
.text$mn:000096E4 ; Attributes: bp-based frame
.text$mn:000096E4
.text$mn:000096E4 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xlen(void)const
.text$mn:000096E4                 public ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:000096E4 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:000096E4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+19p
.text$mn:000096E4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Dp ...
.text$mn:000096E4
.text$mn:000096E4 var_4           = dword ptr -4
.text$mn:000096E4
.text$mn:000096E4                 push    ebp
.text$mn:000096E5                 mov     ebp, esp
.text$mn:000096E7                 push    ecx
.text$mn:000096E8                 mov     [ebp+var_4], ecx
.text$mn:000096EB                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:000096F0                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:000096F5                 mov     esp, ebp
.text$mn:000096F7                 pop     ebp
.text$mn:000096F8                 retn
.text$mn:000096F8 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:000096F8
.text$mn:000096F8 ; ---------------------------------------------------------------------------
.text$mn:000096F9                 align 4
.text$mn:000096F9 _text$mn        ends
.text$mn:000096F9
.text$mn:000096FC ; ===========================================================================
.text$mn:000096FC
.text$mn:000096FC ; Segment type: Pure code
.text$mn:000096FC ; Segment permissions: Read/Execute
.text$mn:000096FC _text$mn        segment para public 'CODE' use32
.text$mn:000096FC                 assume cs:_text$mn
.text$mn:000096FC                 ;org 96FCh
.text$mn:000096FC ; COMDAT (pick any)
.text$mn:000096FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000096FC
.text$mn:000096FC ; =============== S U B R O U T I N E =======================================
.text$mn:000096FC
.text$mn:000096FC ; Attributes: bp-based frame
.text$mn:000096FC
.text$mn:000096FC ; protected: void __thiscall std::vector<int, class std::allocator<int>>::_Xlen(void)const
.text$mn:000096FC                 public ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ
.text$mn:000096FC ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ proc near
.text$mn:000096FC                                         ; CODE XREF: std::vector<int,std::allocator<int>>::_Reserve(uint)+31p
.text$mn:000096FC
.text$mn:000096FC var_4           = dword ptr -4
.text$mn:000096FC
.text$mn:000096FC                 push    ebp
.text$mn:000096FD                 mov     ebp, esp
.text$mn:000096FF                 push    ecx
.text$mn:00009700                 mov     [ebp+var_4], ecx
.text$mn:00009703                 push    offset ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; "vector<T> too long"
.text$mn:00009708                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:0000970D                 mov     esp, ebp
.text$mn:0000970F                 pop     ebp
.text$mn:00009710                 retn
.text$mn:00009710 ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ endp
.text$mn:00009710
.text$mn:00009710 ; ---------------------------------------------------------------------------
.text$mn:00009711                 align 4
.text$mn:00009711 _text$mn        ends
.text$mn:00009711
.text$mn:00009714 ; ===========================================================================
.text$mn:00009714
.text$mn:00009714 ; Segment type: Pure code
.text$mn:00009714 ; Segment permissions: Read/Execute
.text$mn:00009714 _text$mn        segment para public 'CODE' use32
.text$mn:00009714                 assume cs:_text$mn
.text$mn:00009714                 ;org 9714h
.text$mn:00009714 ; COMDAT (pick any)
.text$mn:00009714                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009714
.text$mn:00009714 ; =============== S U B R O U T I N E =======================================
.text$mn:00009714
.text$mn:00009714 ; Attributes: bp-based frame
.text$mn:00009714
.text$mn:00009714 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Xlen(void)const
.text$mn:00009714                 public ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ
.text$mn:00009714 ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ proc near
.text$mn:00009714                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+31p
.text$mn:00009714
.text$mn:00009714 var_4           = dword ptr -4
.text$mn:00009714
.text$mn:00009714                 push    ebp
.text$mn:00009715                 mov     ebp, esp
.text$mn:00009717                 push    ecx
.text$mn:00009718                 mov     [ebp+var_4], ecx
.text$mn:0000971B                 push    offset ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; "vector<T> too long"
.text$mn:00009720                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:00009725                 mov     esp, ebp
.text$mn:00009727                 pop     ebp
.text$mn:00009728                 retn
.text$mn:00009728 ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ endp
.text$mn:00009728
.text$mn:00009728 ; ---------------------------------------------------------------------------
.text$mn:00009729                 align 4
.text$mn:00009729 _text$mn        ends
.text$mn:00009729
.text$mn:0000972C ; ===========================================================================
.text$mn:0000972C
.text$mn:0000972C ; Segment type: Pure code
.text$mn:0000972C ; Segment permissions: Read/Execute
.text$mn:0000972C _text$mn        segment para public 'CODE' use32
.text$mn:0000972C                 assume cs:_text$mn
.text$mn:0000972C                 ;org 972Ch
.text$mn:0000972C ; COMDAT (pick any)
.text$mn:0000972C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000972C
.text$mn:0000972C ; =============== S U B R O U T I N E =======================================
.text$mn:0000972C
.text$mn:0000972C ; Attributes: bp-based frame
.text$mn:0000972C
.text$mn:0000972C ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xran(void)const
.text$mn:0000972C                 public ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:0000972C ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:0000972C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+19p
.text$mn:0000972C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+15p ...
.text$mn:0000972C
.text$mn:0000972C var_4           = dword ptr -4
.text$mn:0000972C
.text$mn:0000972C                 push    ebp
.text$mn:0000972D                 mov     ebp, esp
.text$mn:0000972F                 push    ecx
.text$mn:00009730                 mov     [ebp+var_4], ecx
.text$mn:00009733                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:00009738                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:0000973D                 mov     esp, ebp
.text$mn:0000973F                 pop     ebp
.text$mn:00009740                 retn
.text$mn:00009740 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:00009740
.text$mn:00009740 ; ---------------------------------------------------------------------------
.text$mn:00009741                 align 4
.text$mn:00009741 _text$mn        ends
.text$mn:00009741
.text$mn:00009744 ; ===========================================================================
.text$mn:00009744
.text$mn:00009744 ; Segment type: Pure code
.text$mn:00009744 ; Segment permissions: Read/Execute
.text$mn:00009744 _text$mn        segment para public 'CODE' use32
.text$mn:00009744                 assume cs:_text$mn
.text$mn:00009744                 ;org 9744h
.text$mn:00009744 ; COMDAT (pick any)
.text$mn:00009744                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009744
.text$mn:00009744 ; =============== S U B R O U T I N E =======================================
.text$mn:00009744
.text$mn:00009744 ; Attributes: bp-based frame
.text$mn:00009744
.text$mn:00009744 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xran(void)const
.text$mn:00009744                 public ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:00009744 ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:00009744                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p
.text$mn:00009744                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p ...
.text$mn:00009744
.text$mn:00009744 var_4           = dword ptr -4
.text$mn:00009744
.text$mn:00009744                 push    ebp
.text$mn:00009745                 mov     ebp, esp
.text$mn:00009747                 push    ecx
.text$mn:00009748                 mov     [ebp+var_4], ecx
.text$mn:0000974B                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:00009750                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:00009755                 mov     esp, ebp
.text$mn:00009757                 pop     ebp
.text$mn:00009758                 retn
.text$mn:00009758 ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:00009758
.text$mn:00009758 ; ---------------------------------------------------------------------------
.text$mn:00009759                 align 4
.text$mn:00009759 _text$mn        ends
.text$mn:00009759
.text$mn:0000975C ; ===========================================================================
.text$mn:0000975C
.text$mn:0000975C ; Segment type: Pure code
.text$mn:0000975C ; Segment permissions: Read/Execute
.text$mn:0000975C _text$mn        segment para public 'CODE' use32
.text$mn:0000975C                 assume cs:_text$mn
.text$mn:0000975C                 ;org 975Ch
.text$mn:0000975C ; COMDAT (pick any)
.text$mn:0000975C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000975C
.text$mn:0000975C ; =============== S U B R O U T I N E =======================================
.text$mn:0000975C
.text$mn:0000975C ; Attributes: bp-based frame
.text$mn:0000975C
.text$mn:0000975C ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Xran(void)const
.text$mn:0000975C                 public ?_Xran@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ
.text$mn:0000975C ?_Xran@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ proc near
.text$mn:0000975C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::at(uint)+17p
.text$mn:0000975C
.text$mn:0000975C var_4           = dword ptr -4
.text$mn:0000975C
.text$mn:0000975C                 push    ebp
.text$mn:0000975D                 mov     ebp, esp
.text$mn:0000975F                 push    ecx
.text$mn:00009760                 mov     [ebp+var_4], ecx
.text$mn:00009763                 push    offset ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@ ; "invalid vector<T> subscript"
.text$mn:00009768                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:0000976D                 mov     esp, ebp
.text$mn:0000976F                 pop     ebp
.text$mn:00009770                 retn
.text$mn:00009770 ?_Xran@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ endp
.text$mn:00009770
.text$mn:00009770 ; ---------------------------------------------------------------------------
.text$mn:00009771                 align 4
.text$mn:00009771 _text$mn        ends
.text$mn:00009771
.text$mn:00009774 ; ===========================================================================
.text$mn:00009774
.text$mn:00009774 ; Segment type: Pure code
.text$mn:00009774 ; Segment permissions: Read/Execute
.text$mn:00009774 _text$mn        segment para public 'CODE' use32
.text$mn:00009774                 assume cs:_text$mn
.text$mn:00009774                 ;org 9774h
.text$mn:00009774 ; COMDAT (pick any)
.text$mn:00009774                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009774
.text$mn:00009774 ; =============== S U B R O U T I N E =======================================
.text$mn:00009774
.text$mn:00009774 ; Attributes: bp-based frame
.text$mn:00009774
.text$mn:00009774 ; void __thiscall TreeView::addCanNotDragOutList(TreeView *this, int)
.text$mn:00009774                 public ?addCanNotDragOutList@TreeView@@QAEXH@Z
.text$mn:00009774 ?addCanNotDragOutList@TreeView@@QAEXH@Z proc near
.text$mn:00009774                                         ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+2C0p
.text$mn:00009774                                         ; ProjectPanel::run_dlgProc(uint,uint,long)+2CDp ...
.text$mn:00009774
.text$mn:00009774 var_4           = dword ptr -4
.text$mn:00009774 arg_0           = dword ptr  8
.text$mn:00009774
.text$mn:00009774                 push    ebp
.text$mn:00009775                 mov     ebp, esp
.text$mn:00009777                 push    ecx
.text$mn:00009778                 mov     [ebp+var_4], ecx
.text$mn:0000977B                 lea     eax, [ebp+arg_0]
.text$mn:0000977E                 push    eax
.text$mn:0000977F                 mov     ecx, [ebp+var_4]
.text$mn:00009782                 add     ecx, 20h ; ' '
.text$mn:00009785                 call    ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int>>::push_back(int const &)
.text$mn:0000978A                 mov     esp, ebp
.text$mn:0000978C                 pop     ebp
.text$mn:0000978D                 retn    4
.text$mn:0000978D ?addCanNotDragOutList@TreeView@@QAEXH@Z endp
.text$mn:0000978D
.text$mn:0000978D _text$mn        ends
.text$mn:0000978D
.text$mn:00009790 ; ===========================================================================
.text$mn:00009790
.text$mn:00009790 ; Segment type: Pure code
.text$mn:00009790 ; Segment permissions: Read/Execute
.text$mn:00009790 _text$mn        segment para public 'CODE' use32
.text$mn:00009790                 assume cs:_text$mn
.text$mn:00009790                 ;org 9790h
.text$mn:00009790 ; COMDAT (pick any)
.text$mn:00009790                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009790
.text$mn:00009790 ; =============== S U B R O U T I N E =======================================
.text$mn:00009790
.text$mn:00009790 ; Attributes: bp-based frame
.text$mn:00009790
.text$mn:00009790 ; void __thiscall TreeView::addCanNotDropInList(TreeView *this, int)
.text$mn:00009790                 public ?addCanNotDropInList@TreeView@@QAEXH@Z
.text$mn:00009790 ?addCanNotDropInList@TreeView@@QAEXH@Z proc near
.text$mn:00009790                                         ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+2A6p
.text$mn:00009790                                         ; ProjectPanel::run_dlgProc(uint,uint,long)+2B3p
.text$mn:00009790
.text$mn:00009790 var_4           = dword ptr -4
.text$mn:00009790 arg_0           = dword ptr  8
.text$mn:00009790
.text$mn:00009790                 push    ebp
.text$mn:00009791                 mov     ebp, esp
.text$mn:00009793                 push    ecx
.text$mn:00009794                 mov     [ebp+var_4], ecx
.text$mn:00009797                 lea     eax, [ebp+arg_0]
.text$mn:0000979A                 push    eax
.text$mn:0000979B                 mov     ecx, [ebp+var_4]
.text$mn:0000979E                 add     ecx, 30h ; '0'
.text$mn:000097A1                 call    ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int>>::push_back(int const &)
.text$mn:000097A6                 mov     esp, ebp
.text$mn:000097A8                 pop     ebp
.text$mn:000097A9                 retn    4
.text$mn:000097A9 ?addCanNotDropInList@TreeView@@QAEXH@Z endp
.text$mn:000097A9
.text$mn:000097A9 _text$mn        ends
.text$mn:000097A9
.text$mn:000097AC ; ===========================================================================
.text$mn:000097AC
.text$mn:000097AC ; Segment type: Pure code
.text$mn:000097AC ; Segment permissions: Read/Execute
.text$mn:000097AC _text$mn        segment para public 'CODE' use32
.text$mn:000097AC                 assume cs:_text$mn
.text$mn:000097AC                 ;org 97ACh
.text$mn:000097AC ; COMDAT (pick any)
.text$mn:000097AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000097AC
.text$mn:000097AC ; =============== S U B R O U T I N E =======================================
.text$mn:000097AC
.text$mn:000097AC ; Attributes: bp-based frame
.text$mn:000097AC
.text$mn:000097AC ; public: char * __thiscall std::_Wrap_alloc<class std::allocator<char>>::allocate(unsigned int)
.text$mn:000097AC                 public ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
.text$mn:000097AC ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
.text$mn:000097AC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+BBp
.text$mn:000097AC                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+22p
.text$mn:000097AC
.text$mn:000097AC var_4           = dword ptr -4
.text$mn:000097AC arg_0           = dword ptr  8
.text$mn:000097AC
.text$mn:000097AC                 push    ebp
.text$mn:000097AD                 mov     ebp, esp
.text$mn:000097AF                 push    ecx
.text$mn:000097B0                 mov     [ebp+var_4], ecx
.text$mn:000097B3                 mov     eax, [ebp+arg_0]
.text$mn:000097B6                 push    eax
.text$mn:000097B7                 mov     ecx, [ebp+var_4]
.text$mn:000097BA                 call    ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate(uint)
.text$mn:000097BF                 mov     esp, ebp
.text$mn:000097C1                 pop     ebp
.text$mn:000097C2                 retn    4
.text$mn:000097C2 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z endp
.text$mn:000097C2
.text$mn:000097C2 ; ---------------------------------------------------------------------------
.text$mn:000097C5                 align 4
.text$mn:000097C5 _text$mn        ends
.text$mn:000097C5
.text$mn:000097C8 ; ===========================================================================
.text$mn:000097C8
.text$mn:000097C8 ; Segment type: Pure code
.text$mn:000097C8 ; Segment permissions: Read/Execute
.text$mn:000097C8 _text$mn        segment para public 'CODE' use32
.text$mn:000097C8                 assume cs:_text$mn
.text$mn:000097C8                 ;org 97C8h
.text$mn:000097C8 ; COMDAT (pick any)
.text$mn:000097C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000097C8
.text$mn:000097C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000097C8
.text$mn:000097C8 ; Attributes: bp-based frame
.text$mn:000097C8
.text$mn:000097C8 ; public: int * __thiscall std::_Wrap_alloc<class std::allocator<int>>::allocate(unsigned int)
.text$mn:000097C8                 public ?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z
.text$mn:000097C8 ?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z proc near
.text$mn:000097C8                                         ; CODE XREF: std::vector<int,std::allocator<int>>::_Reallocate(uint)+41p
.text$mn:000097C8
.text$mn:000097C8 var_4           = dword ptr -4
.text$mn:000097C8 arg_0           = dword ptr  8
.text$mn:000097C8
.text$mn:000097C8                 push    ebp
.text$mn:000097C9                 mov     ebp, esp
.text$mn:000097CB                 push    ecx
.text$mn:000097CC                 mov     [ebp+var_4], ecx
.text$mn:000097CF                 mov     eax, [ebp+arg_0]
.text$mn:000097D2                 push    eax
.text$mn:000097D3                 mov     ecx, [ebp+var_4]
.text$mn:000097D6                 call    ?allocate@?$allocator@H@std@@QAEPAHI@Z ; std::allocator<int>::allocate(uint)
.text$mn:000097DB                 mov     esp, ebp
.text$mn:000097DD                 pop     ebp
.text$mn:000097DE                 retn    4
.text$mn:000097DE ?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z endp
.text$mn:000097DE
.text$mn:000097DE ; ---------------------------------------------------------------------------
.text$mn:000097E1                 align 4
.text$mn:000097E1 _text$mn        ends
.text$mn:000097E1
.text$mn:000097E4 ; ===========================================================================
.text$mn:000097E4
.text$mn:000097E4 ; Segment type: Pure code
.text$mn:000097E4 ; Segment permissions: Read/Execute
.text$mn:000097E4 _text$mn        segment para public 'CODE' use32
.text$mn:000097E4                 assume cs:_text$mn
.text$mn:000097E4                 ;org 97E4h
.text$mn:000097E4 ; COMDAT (pick any)
.text$mn:000097E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000097E4
.text$mn:000097E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000097E4
.text$mn:000097E4 ; Attributes: bp-based frame
.text$mn:000097E4
.text$mn:000097E4 ; public: struct std::_Container_proxy * __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::allocate(unsigned int)
.text$mn:000097E4                 public ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:000097E4 ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:000097E4                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Alloc_proxy(void)+16p
.text$mn:000097E4
.text$mn:000097E4 var_4           = dword ptr -4
.text$mn:000097E4 arg_0           = dword ptr  8
.text$mn:000097E4
.text$mn:000097E4                 push    ebp
.text$mn:000097E5                 mov     ebp, esp
.text$mn:000097E7                 push    ecx
.text$mn:000097E8                 mov     [ebp+var_4], ecx
.text$mn:000097EB                 mov     eax, [ebp+arg_0]
.text$mn:000097EE                 push    eax
.text$mn:000097EF                 mov     ecx, [ebp+var_4]
.text$mn:000097F2                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:000097F7                 mov     esp, ebp
.text$mn:000097F9                 pop     ebp
.text$mn:000097FA                 retn    4
.text$mn:000097FA ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:000097FA
.text$mn:000097FA ; ---------------------------------------------------------------------------
.text$mn:000097FD                 align 10h
.text$mn:000097FD _text$mn        ends
.text$mn:000097FD
.text$mn:00009800 ; ===========================================================================
.text$mn:00009800
.text$mn:00009800 ; Segment type: Pure code
.text$mn:00009800 ; Segment permissions: Read/Execute
.text$mn:00009800 _text$mn        segment para public 'CODE' use32
.text$mn:00009800                 assume cs:_text$mn
.text$mn:00009800                 ;org 9800h
.text$mn:00009800 ; COMDAT (pick any)
.text$mn:00009800                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009800
.text$mn:00009800 ; =============== S U B R O U T I N E =======================================
.text$mn:00009800
.text$mn:00009800 ; Attributes: bp-based frame
.text$mn:00009800
.text$mn:00009800 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::allocate(unsigned int)
.text$mn:00009800                 public ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:00009800 ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:00009800                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+41p
.text$mn:00009800
.text$mn:00009800 var_4           = dword ptr -4
.text$mn:00009800 arg_0           = dword ptr  8
.text$mn:00009800
.text$mn:00009800                 push    ebp
.text$mn:00009801                 mov     ebp, esp
.text$mn:00009803                 push    ecx
.text$mn:00009804                 mov     [ebp+var_4], ecx
.text$mn:00009807                 mov     eax, [ebp+arg_0]
.text$mn:0000980A                 push    eax
.text$mn:0000980B                 mov     ecx, [ebp+var_4]
.text$mn:0000980E                 call    ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocate(uint)
.text$mn:00009813                 mov     esp, ebp
.text$mn:00009815                 pop     ebp
.text$mn:00009816                 retn    4
.text$mn:00009816 ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:00009816
.text$mn:00009816 ; ---------------------------------------------------------------------------
.text$mn:00009819                 align 4
.text$mn:00009819 _text$mn        ends
.text$mn:00009819
.text$mn:0000981C ; ===========================================================================
.text$mn:0000981C
.text$mn:0000981C ; Segment type: Pure code
.text$mn:0000981C ; Segment permissions: Read/Execute
.text$mn:0000981C _text$mn        segment para public 'CODE' use32
.text$mn:0000981C                 assume cs:_text$mn
.text$mn:0000981C                 ;org 981Ch
.text$mn:0000981C ; COMDAT (pick any)
.text$mn:0000981C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000981C
.text$mn:0000981C ; =============== S U B R O U T I N E =======================================
.text$mn:0000981C
.text$mn:0000981C ; Attributes: bp-based frame
.text$mn:0000981C
.text$mn:0000981C ; public: wchar_t * __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::allocate(unsigned int)
.text$mn:0000981C                 public ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z
.text$mn:0000981C ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z proc near
.text$mn:0000981C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+BBp
.text$mn:0000981C                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+22p
.text$mn:0000981C
.text$mn:0000981C var_4           = dword ptr -4
.text$mn:0000981C arg_0           = dword ptr  8
.text$mn:0000981C
.text$mn:0000981C                 push    ebp
.text$mn:0000981D                 mov     ebp, esp
.text$mn:0000981F                 push    ecx
.text$mn:00009820                 mov     [ebp+var_4], ecx
.text$mn:00009823                 mov     eax, [ebp+arg_0]
.text$mn:00009826                 push    eax
.text$mn:00009827                 mov     ecx, [ebp+var_4]
.text$mn:0000982A                 call    ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate(uint)
.text$mn:0000982F                 mov     esp, ebp
.text$mn:00009831                 pop     ebp
.text$mn:00009832                 retn    4
.text$mn:00009832 ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z endp
.text$mn:00009832
.text$mn:00009832 ; ---------------------------------------------------------------------------
.text$mn:00009835                 align 4
.text$mn:00009835 _text$mn        ends
.text$mn:00009835
.text$mn:00009838 ; ===========================================================================
.text$mn:00009838
.text$mn:00009838 ; Segment type: Pure code
.text$mn:00009838 ; Segment permissions: Read/Execute
.text$mn:00009838 _text$mn        segment para public 'CODE' use32
.text$mn:00009838                 assume cs:_text$mn
.text$mn:00009838                 ;org 9838h
.text$mn:00009838 ; COMDAT (pick any)
.text$mn:00009838                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009838
.text$mn:00009838 ; =============== S U B R O U T I N E =======================================
.text$mn:00009838
.text$mn:00009838 ; Attributes: bp-based frame
.text$mn:00009838
.text$mn:00009838 ; public: char * __thiscall std::allocator<char>::allocate(unsigned int)
.text$mn:00009838                 public ?allocate@?$allocator@D@std@@QAEPADI@Z
.text$mn:00009838 ?allocate@?$allocator@D@std@@QAEPADI@Z proc near
.text$mn:00009838                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::allocate(uint)+Ep
.text$mn:00009838
.text$mn:00009838 var_4           = dword ptr -4
.text$mn:00009838 arg_0           = dword ptr  8
.text$mn:00009838
.text$mn:00009838                 push    ebp
.text$mn:00009839                 mov     ebp, esp
.text$mn:0000983B                 push    ecx
.text$mn:0000983C                 mov     [ebp+var_4], ecx
.text$mn:0000983F                 push    0
.text$mn:00009841                 mov     eax, [ebp+arg_0]
.text$mn:00009844                 push    eax
.text$mn:00009845                 call    ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>(uint,char *)
.text$mn:0000984A                 add     esp, 8
.text$mn:0000984D                 mov     esp, ebp
.text$mn:0000984F                 pop     ebp
.text$mn:00009850                 retn    4
.text$mn:00009850 ?allocate@?$allocator@D@std@@QAEPADI@Z endp
.text$mn:00009850
.text$mn:00009850 ; ---------------------------------------------------------------------------
.text$mn:00009853                 align 4
.text$mn:00009853 _text$mn        ends
.text$mn:00009853
.text$mn:00009854 ; ===========================================================================
.text$mn:00009854
.text$mn:00009854 ; Segment type: Pure code
.text$mn:00009854 ; Segment permissions: Read/Execute
.text$mn:00009854 _text$mn        segment para public 'CODE' use32
.text$mn:00009854                 assume cs:_text$mn
.text$mn:00009854                 ;org 9854h
.text$mn:00009854 ; COMDAT (pick any)
.text$mn:00009854                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009854
.text$mn:00009854 ; =============== S U B R O U T I N E =======================================
.text$mn:00009854
.text$mn:00009854 ; Attributes: bp-based frame
.text$mn:00009854
.text$mn:00009854 ; public: int * __thiscall std::allocator<int>::allocate(unsigned int)
.text$mn:00009854                 public ?allocate@?$allocator@H@std@@QAEPAHI@Z
.text$mn:00009854 ?allocate@?$allocator@H@std@@QAEPAHI@Z proc near
.text$mn:00009854                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<int>>::allocate(uint)+Ep
.text$mn:00009854
.text$mn:00009854 var_4           = dword ptr -4
.text$mn:00009854 arg_0           = dword ptr  8
.text$mn:00009854
.text$mn:00009854                 push    ebp
.text$mn:00009855                 mov     ebp, esp
.text$mn:00009857                 push    ecx
.text$mn:00009858                 mov     [ebp+var_4], ecx
.text$mn:0000985B                 push    0
.text$mn:0000985D                 mov     eax, [ebp+arg_0]
.text$mn:00009860                 push    eax
.text$mn:00009861                 call    ??$_Allocate@H@std@@YAPAHIPAH@Z ; std::_Allocate<int>(uint,int *)
.text$mn:00009866                 add     esp, 8
.text$mn:00009869                 mov     esp, ebp
.text$mn:0000986B                 pop     ebp
.text$mn:0000986C                 retn    4
.text$mn:0000986C ?allocate@?$allocator@H@std@@QAEPAHI@Z endp
.text$mn:0000986C
.text$mn:0000986C ; ---------------------------------------------------------------------------
.text$mn:0000986F                 align 10h
.text$mn:0000986F _text$mn        ends
.text$mn:0000986F
.text$mn:00009870 ; ===========================================================================
.text$mn:00009870
.text$mn:00009870 ; Segment type: Pure code
.text$mn:00009870 ; Segment permissions: Read/Execute
.text$mn:00009870 _text$mn        segment para public 'CODE' use32
.text$mn:00009870                 assume cs:_text$mn
.text$mn:00009870                 ;org 9870h
.text$mn:00009870 ; COMDAT (pick any)
.text$mn:00009870                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009870
.text$mn:00009870 ; =============== S U B R O U T I N E =======================================
.text$mn:00009870
.text$mn:00009870 ; Attributes: bp-based frame
.text$mn:00009870
.text$mn:00009870 ; public: struct std::_Container_proxy * __thiscall std::allocator<struct std::_Container_proxy>::allocate(unsigned int)
.text$mn:00009870                 public ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:00009870 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:00009870                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+16p
.text$mn:00009870                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+16p ...
.text$mn:00009870
.text$mn:00009870 var_4           = dword ptr -4
.text$mn:00009870 arg_0           = dword ptr  8
.text$mn:00009870
.text$mn:00009870                 push    ebp
.text$mn:00009871                 mov     ebp, esp
.text$mn:00009873                 push    ecx
.text$mn:00009874                 mov     [ebp+var_4], ecx
.text$mn:00009877                 push    0
.text$mn:00009879                 mov     eax, [ebp+arg_0]
.text$mn:0000987C                 push    eax
.text$mn:0000987D                 call    ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)
.text$mn:00009882                 add     esp, 8
.text$mn:00009885                 mov     esp, ebp
.text$mn:00009887                 pop     ebp
.text$mn:00009888                 retn    4
.text$mn:00009888 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:00009888
.text$mn:00009888 ; ---------------------------------------------------------------------------
.text$mn:0000988B                 align 4
.text$mn:0000988B _text$mn        ends
.text$mn:0000988B
.text$mn:0000988C ; ===========================================================================
.text$mn:0000988C
.text$mn:0000988C ; Segment type: Pure code
.text$mn:0000988C ; Segment permissions: Read/Execute
.text$mn:0000988C _text$mn        segment para public 'CODE' use32
.text$mn:0000988C                 assume cs:_text$mn
.text$mn:0000988C                 ;org 988Ch
.text$mn:0000988C ; COMDAT (pick any)
.text$mn:0000988C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000988C
.text$mn:0000988C ; =============== S U B R O U T I N E =======================================
.text$mn:0000988C
.text$mn:0000988C ; Attributes: bp-based frame
.text$mn:0000988C
.text$mn:0000988C ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::allocate(unsigned int)
.text$mn:0000988C                 public ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:0000988C ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:0000988C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::allocate(uint)+Ep
.text$mn:0000988C
.text$mn:0000988C var_4           = dword ptr -4
.text$mn:0000988C arg_0           = dword ptr  8
.text$mn:0000988C
.text$mn:0000988C                 push    ebp
.text$mn:0000988D                 mov     ebp, esp
.text$mn:0000988F                 push    ecx
.text$mn:00009890                 mov     [ebp+var_4], ecx
.text$mn:00009893                 push    0
.text$mn:00009895                 mov     eax, [ebp+arg_0]
.text$mn:00009898                 push    eax
.text$mn:00009899                 call    ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z ; std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000989E                 add     esp, 8
.text$mn:000098A1                 mov     esp, ebp
.text$mn:000098A3                 pop     ebp
.text$mn:000098A4                 retn    4
.text$mn:000098A4 ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:000098A4
.text$mn:000098A4 ; ---------------------------------------------------------------------------
.text$mn:000098A7                 align 4
.text$mn:000098A7 _text$mn        ends
.text$mn:000098A7
.text$mn:000098A8 ; ===========================================================================
.text$mn:000098A8
.text$mn:000098A8 ; Segment type: Pure code
.text$mn:000098A8 ; Segment permissions: Read/Execute
.text$mn:000098A8 _text$mn        segment para public 'CODE' use32
.text$mn:000098A8                 assume cs:_text$mn
.text$mn:000098A8                 ;org 98A8h
.text$mn:000098A8 ; COMDAT (pick any)
.text$mn:000098A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000098A8
.text$mn:000098A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000098A8
.text$mn:000098A8 ; Attributes: bp-based frame
.text$mn:000098A8
.text$mn:000098A8 ; public: wchar_t * __thiscall std::allocator<wchar_t>::allocate(unsigned int)
.text$mn:000098A8                 public ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
.text$mn:000098A8 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z proc near
.text$mn:000098A8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)+Ep
.text$mn:000098A8
.text$mn:000098A8 var_4           = dword ptr -4
.text$mn:000098A8 arg_0           = dword ptr  8
.text$mn:000098A8
.text$mn:000098A8                 push    ebp
.text$mn:000098A9                 mov     ebp, esp
.text$mn:000098AB                 push    ecx
.text$mn:000098AC                 mov     [ebp+var_4], ecx
.text$mn:000098AF                 push    0
.text$mn:000098B1                 mov     eax, [ebp+arg_0]
.text$mn:000098B4                 push    eax
.text$mn:000098B5                 call    ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>(uint,wchar_t *)
.text$mn:000098BA                 add     esp, 8
.text$mn:000098BD                 mov     esp, ebp
.text$mn:000098BF                 pop     ebp
.text$mn:000098C0                 retn    4
.text$mn:000098C0 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z endp
.text$mn:000098C0
.text$mn:000098C0 ; ---------------------------------------------------------------------------
.text$mn:000098C3                 align 4
.text$mn:000098C3 _text$mn        ends
.text$mn:000098C3
.text$mn:000098C4 ; ===========================================================================
.text$mn:000098C4
.text$mn:000098C4 ; Segment type: Pure code
.text$mn:000098C4 ; Segment permissions: Read/Execute
.text$mn:000098C4 _text$mn        segment para public 'CODE' use32
.text$mn:000098C4                 assume cs:_text$mn
.text$mn:000098C4                 ;org 98C4h
.text$mn:000098C4 ; COMDAT (pick any)
.text$mn:000098C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000098C4
.text$mn:000098C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000098C4
.text$mn:000098C4 ; Attributes: bp-based frame
.text$mn:000098C4
.text$mn:000098C4 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::append(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:000098C4                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
.text$mn:000098C4 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z proc near
.text$mn:000098C4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Ep
.text$mn:000098C4
.text$mn:000098C4 var_4           = dword ptr -4
.text$mn:000098C4 arg_0           = dword ptr  8
.text$mn:000098C4
.text$mn:000098C4                 push    ebp
.text$mn:000098C5                 mov     ebp, esp
.text$mn:000098C7                 push    ecx
.text$mn:000098C8                 mov     [ebp+var_4], ecx
.text$mn:000098CB                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:000098D0                 push    eax
.text$mn:000098D1                 push    0
.text$mn:000098D3                 mov     ecx, [ebp+arg_0]
.text$mn:000098D6                 push    ecx
.text$mn:000098D7                 mov     ecx, [ebp+var_4]
.text$mn:000098DA                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:000098DF                 mov     esp, ebp
.text$mn:000098E1                 pop     ebp
.text$mn:000098E2                 retn    4
.text$mn:000098E2 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z endp
.text$mn:000098E2
.text$mn:000098E2 ; ---------------------------------------------------------------------------
.text$mn:000098E5                 align 4
.text$mn:000098E5 _text$mn        ends
.text$mn:000098E5
.text$mn:000098E8 ; ===========================================================================
.text$mn:000098E8
.text$mn:000098E8 ; Segment type: Pure code
.text$mn:000098E8 ; Segment permissions: Read/Execute
.text$mn:000098E8 _text$mn        segment para public 'CODE' use32
.text$mn:000098E8                 assume cs:_text$mn
.text$mn:000098E8                 ;org 98E8h
.text$mn:000098E8 ; COMDAT (pick any)
.text$mn:000098E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000098E8
.text$mn:000098E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000098E8
.text$mn:000098E8 ; Attributes: bp-based frame
.text$mn:000098E8
.text$mn:000098E8 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::append(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:000098E8                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:000098E8 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:000098E8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+16p
.text$mn:000098E8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+53p
.text$mn:000098E8
.text$mn:000098E8 var_8           = dword ptr -8
.text$mn:000098E8 var_4           = dword ptr -4
.text$mn:000098E8 arg_0           = dword ptr  8
.text$mn:000098E8 arg_4           = dword ptr  0Ch
.text$mn:000098E8 arg_8           = dword ptr  10h
.text$mn:000098E8
.text$mn:000098E8                 push    ebp
.text$mn:000098E9                 mov     ebp, esp
.text$mn:000098EB                 sub     esp, 8
.text$mn:000098EE                 mov     [ebp+var_4], ecx
.text$mn:000098F1                 mov     ecx, [ebp+arg_0]
.text$mn:000098F4                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:000098F9                 cmp     eax, [ebp+arg_4]
.text$mn:000098FC                 jnb     short loc_9906
.text$mn:000098FE                 mov     ecx, [ebp+var_4]
.text$mn:00009901                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00009906
.text$mn:00009906 loc_9906:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:00009906                 mov     ecx, [ebp+arg_0]
.text$mn:00009909                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000990E                 sub     eax, [ebp+arg_4]
.text$mn:00009911                 mov     [ebp+var_8], eax
.text$mn:00009914                 mov     eax, [ebp+var_8]
.text$mn:00009917                 cmp     eax, [ebp+arg_8]
.text$mn:0000991A                 jnb     short loc_9922
.text$mn:0000991C                 mov     ecx, [ebp+var_8]
.text$mn:0000991F                 mov     [ebp+arg_8], ecx
.text$mn:00009922
.text$mn:00009922 loc_9922:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:00009922                 mov     edx, [ebp+var_4]
.text$mn:00009925                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000992A                 sub     eax, [edx+14h]
.text$mn:0000992D                 cmp     eax, [ebp+arg_8]
.text$mn:00009930                 ja      short loc_993A
.text$mn:00009932                 mov     ecx, [ebp+var_4]
.text$mn:00009935                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000993A
.text$mn:0000993A loc_993A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+48j
.text$mn:0000993A                 cmp     [ebp+arg_8], 0
.text$mn:0000993E                 jbe     short loc_999A
.text$mn:00009940                 mov     ecx, [ebp+var_4]
.text$mn:00009943                 mov     edx, [ecx+14h]
.text$mn:00009946                 add     edx, [ebp+arg_8]
.text$mn:00009949                 mov     [ebp+var_8], edx
.text$mn:0000994C                 push    0
.text$mn:0000994E                 mov     eax, [ebp+var_8]
.text$mn:00009951                 push    eax
.text$mn:00009952                 mov     ecx, [ebp+var_4]
.text$mn:00009955                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000995A                 movzx   ecx, al
.text$mn:0000995D                 test    ecx, ecx
.text$mn:0000995F                 jz      short loc_999A
.text$mn:00009961                 mov     edx, [ebp+arg_8]
.text$mn:00009964                 push    edx             ; int
.text$mn:00009965                 mov     ecx, [ebp+arg_0]
.text$mn:00009968                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000996D                 mov     ecx, [ebp+arg_4]
.text$mn:00009970                 lea     edx, [eax+ecx*2]
.text$mn:00009973                 push    edx             ; Src
.text$mn:00009974                 mov     ecx, [ebp+var_4]
.text$mn:00009977                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000997C                 mov     ecx, [ebp+var_4]
.text$mn:0000997F                 mov     edx, [ecx+14h]
.text$mn:00009982                 lea     eax, [eax+edx*2]
.text$mn:00009985                 push    eax             ; Dst
.text$mn:00009986                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000998B                 add     esp, 0Ch
.text$mn:0000998E                 mov     ecx, [ebp+var_8]
.text$mn:00009991                 push    ecx
.text$mn:00009992                 mov     ecx, [ebp+var_4]
.text$mn:00009995                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000999A
.text$mn:0000999A loc_999A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+56j
.text$mn:0000999A                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+77j
.text$mn:0000999A                 mov     eax, [ebp+var_4]
.text$mn:0000999D                 mov     esp, ebp
.text$mn:0000999F                 pop     ebp
.text$mn:000099A0                 retn    0Ch
.text$mn:000099A0 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:000099A0
.text$mn:000099A0 ; ---------------------------------------------------------------------------
.text$mn:000099A3                 align 4
.text$mn:000099A3 _text$mn        ends
.text$mn:000099A3
.text$mn:000099A4 ; ===========================================================================
.text$mn:000099A4
.text$mn:000099A4 ; Segment type: Pure code
.text$mn:000099A4 ; Segment permissions: Read/Execute
.text$mn:000099A4 _text$mn        segment para public 'CODE' use32
.text$mn:000099A4                 assume cs:_text$mn
.text$mn:000099A4                 ;org 99A4h
.text$mn:000099A4 ; COMDAT (pick any)
.text$mn:000099A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000099A4
.text$mn:000099A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000099A4
.text$mn:000099A4 ; Attributes: bp-based frame
.text$mn:000099A4
.text$mn:000099A4 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t *Str)
.text$mn:000099A4                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:000099A4 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:000099A4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)+Ep
.text$mn:000099A4
.text$mn:000099A4 var_4           = dword ptr -4
.text$mn:000099A4 Str             = dword ptr  8
.text$mn:000099A4
.text$mn:000099A4                 push    ebp
.text$mn:000099A5                 mov     ebp, esp
.text$mn:000099A7                 push    ecx
.text$mn:000099A8                 mov     [ebp+var_4], ecx
.text$mn:000099AB                 push    43Eh            ; unsigned int
.text$mn:000099B0                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000099B5                 mov     eax, [ebp+Str]
.text$mn:000099B8                 push    eax             ; int
.text$mn:000099B9                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:000099BE                 add     esp, 0Ch
.text$mn:000099C1                 mov     ecx, [ebp+Str]
.text$mn:000099C4                 push    ecx             ; Str
.text$mn:000099C5                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:000099CA                 add     esp, 4
.text$mn:000099CD                 push    eax             ; int
.text$mn:000099CE                 mov     edx, [ebp+Str]
.text$mn:000099D1                 push    edx             ; Src
.text$mn:000099D2                 mov     ecx, [ebp+var_4]
.text$mn:000099D5                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)
.text$mn:000099DA                 mov     esp, ebp
.text$mn:000099DC                 pop     ebp
.text$mn:000099DD                 retn    4
.text$mn:000099DD ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:000099DD
.text$mn:000099DD _text$mn        ends
.text$mn:000099DD
.text$mn:000099E0 ; ===========================================================================
.text$mn:000099E0
.text$mn:000099E0 ; Segment type: Pure code
.text$mn:000099E0 ; Segment permissions: Read/Execute
.text$mn:000099E0 _text$mn        segment para public 'CODE' use32
.text$mn:000099E0                 assume cs:_text$mn
.text$mn:000099E0                 ;org 99E0h
.text$mn:000099E0 ; COMDAT (pick any)
.text$mn:000099E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000099E0
.text$mn:000099E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000099E0
.text$mn:000099E0 ; Attributes: bp-based frame
.text$mn:000099E0
.text$mn:000099E0 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(void *Src, int)
.text$mn:000099E0                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:000099E0 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:000099E0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+31p
.text$mn:000099E0
.text$mn:000099E0 var_8           = dword ptr -8
.text$mn:000099E0 var_4           = dword ptr -4
.text$mn:000099E0 Src             = dword ptr  8
.text$mn:000099E0 arg_4           = dword ptr  0Ch
.text$mn:000099E0
.text$mn:000099E0                 push    ebp
.text$mn:000099E1                 mov     ebp, esp
.text$mn:000099E3                 sub     esp, 8
.text$mn:000099E6                 mov     [ebp+var_4], ecx
.text$mn:000099E9                 cmp     [ebp+arg_4], 0
.text$mn:000099ED                 jz      short loc_9A05
.text$mn:000099EF                 push    42Ah            ; unsigned int
.text$mn:000099F4                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000099F9                 mov     eax, [ebp+Src]
.text$mn:000099FC                 push    eax             ; int
.text$mn:000099FD                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00009A02                 add     esp, 0Ch
.text$mn:00009A05
.text$mn:00009A05 loc_9A05:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+Dj
.text$mn:00009A05                 mov     ecx, [ebp+Src]
.text$mn:00009A08                 push    ecx
.text$mn:00009A09                 mov     ecx, [ebp+var_4]
.text$mn:00009A0C                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:00009A11                 movzx   edx, al
.text$mn:00009A14                 test    edx, edx
.text$mn:00009A16                 jz      short loc_9A3A
.text$mn:00009A18                 mov     eax, [ebp+arg_4]
.text$mn:00009A1B                 push    eax
.text$mn:00009A1C                 mov     ecx, [ebp+var_4]
.text$mn:00009A1F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009A24                 mov     ecx, [ebp+Src]
.text$mn:00009A27                 sub     ecx, eax
.text$mn:00009A29                 sar     ecx, 1
.text$mn:00009A2B                 push    ecx
.text$mn:00009A2C                 mov     edx, [ebp+var_4]
.text$mn:00009A2F                 push    edx
.text$mn:00009A30                 mov     ecx, [ebp+var_4]
.text$mn:00009A33                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00009A38                 jmp     short loc_9AAB
.text$mn:00009A3A ; ---------------------------------------------------------------------------
.text$mn:00009A3A
.text$mn:00009A3A loc_9A3A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+36j
.text$mn:00009A3A                 mov     eax, [ebp+var_4]
.text$mn:00009A3D                 mov     ecx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00009A43                 sub     ecx, [eax+14h]
.text$mn:00009A46                 cmp     ecx, [ebp+arg_4]
.text$mn:00009A49                 ja      short loc_9A53
.text$mn:00009A4B                 mov     ecx, [ebp+var_4]
.text$mn:00009A4E                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:00009A53
.text$mn:00009A53 loc_9A53:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+69j
.text$mn:00009A53                 cmp     [ebp+arg_4], 0
.text$mn:00009A57                 jbe     short loc_9AA8
.text$mn:00009A59                 mov     edx, [ebp+var_4]
.text$mn:00009A5C                 mov     eax, [edx+14h]
.text$mn:00009A5F                 add     eax, [ebp+arg_4]
.text$mn:00009A62                 mov     [ebp+var_8], eax
.text$mn:00009A65                 push    0
.text$mn:00009A67                 mov     ecx, [ebp+var_8]
.text$mn:00009A6A                 push    ecx
.text$mn:00009A6B                 mov     ecx, [ebp+var_4]
.text$mn:00009A6E                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00009A73                 movzx   edx, al
.text$mn:00009A76                 test    edx, edx
.text$mn:00009A78                 jz      short loc_9AA8
.text$mn:00009A7A                 mov     eax, [ebp+arg_4]
.text$mn:00009A7D                 push    eax             ; int
.text$mn:00009A7E                 mov     ecx, [ebp+Src]
.text$mn:00009A81                 push    ecx             ; Src
.text$mn:00009A82                 mov     ecx, [ebp+var_4]
.text$mn:00009A85                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009A8A                 mov     edx, [ebp+var_4]
.text$mn:00009A8D                 mov     ecx, [edx+14h]
.text$mn:00009A90                 lea     edx, [eax+ecx*2]
.text$mn:00009A93                 push    edx             ; Dst
.text$mn:00009A94                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00009A99                 add     esp, 0Ch
.text$mn:00009A9C                 mov     eax, [ebp+var_8]
.text$mn:00009A9F                 push    eax
.text$mn:00009AA0                 mov     ecx, [ebp+var_4]
.text$mn:00009AA3                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00009AA8
.text$mn:00009AA8 loc_9AA8:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+77j
.text$mn:00009AA8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+98j
.text$mn:00009AA8                 mov     eax, [ebp+var_4]
.text$mn:00009AAB
.text$mn:00009AAB loc_9AAB:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+58j
.text$mn:00009AAB                 mov     esp, ebp
.text$mn:00009AAD                 pop     ebp
.text$mn:00009AAE                 retn    8
.text$mn:00009AAE ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:00009AAE
.text$mn:00009AAE ; ---------------------------------------------------------------------------
.text$mn:00009AB1                 align 4
.text$mn:00009AB1 _text$mn        ends
.text$mn:00009AB1
.text$mn:00009AB4 ; ===========================================================================
.text$mn:00009AB4
.text$mn:00009AB4 ; Segment type: Pure code
.text$mn:00009AB4 ; Segment permissions: Read/Execute
.text$mn:00009AB4 _text$mn        segment para public 'CODE' use32
.text$mn:00009AB4                 assume cs:_text$mn
.text$mn:00009AB4                 ;org 9AB4h
.text$mn:00009AB4 ; COMDAT (pick any)
.text$mn:00009AB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009AB4
.text$mn:00009AB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00009AB4
.text$mn:00009AB4 ; Attributes: bp-based frame
.text$mn:00009AB4
.text$mn:00009AB4 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::assign(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, unsigned int, unsigned int)
.text$mn:00009AB4                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00009AB4 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00009AB4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+4Fp
.text$mn:00009AB4
.text$mn:00009AB4 Size            = dword ptr -8
.text$mn:00009AB4 var_4           = dword ptr -4
.text$mn:00009AB4 arg_0           = dword ptr  8
.text$mn:00009AB4 arg_4           = dword ptr  0Ch
.text$mn:00009AB4 arg_8           = dword ptr  10h
.text$mn:00009AB4
.text$mn:00009AB4                 push    ebp
.text$mn:00009AB5                 mov     ebp, esp
.text$mn:00009AB7                 sub     esp, 8
.text$mn:00009ABA                 mov     [ebp+var_4], ecx
.text$mn:00009ABD                 mov     ecx, [ebp+arg_0]
.text$mn:00009AC0                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:00009AC5                 cmp     eax, [ebp+arg_4]
.text$mn:00009AC8                 jnb     short loc_9AD2
.text$mn:00009ACA                 mov     ecx, [ebp+var_4]
.text$mn:00009ACD                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:00009AD2
.text$mn:00009AD2 loc_9AD2:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+14j
.text$mn:00009AD2                 mov     ecx, [ebp+arg_0]
.text$mn:00009AD5                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:00009ADA                 sub     eax, [ebp+arg_4]
.text$mn:00009ADD                 mov     [ebp+Size], eax
.text$mn:00009AE0                 mov     eax, [ebp+arg_8]
.text$mn:00009AE3                 cmp     eax, [ebp+Size]
.text$mn:00009AE6                 jnb     short loc_9AEE
.text$mn:00009AE8                 mov     ecx, [ebp+arg_8]
.text$mn:00009AEB                 mov     [ebp+Size], ecx
.text$mn:00009AEE
.text$mn:00009AEE loc_9AEE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+32j
.text$mn:00009AEE                 mov     edx, [ebp+var_4]
.text$mn:00009AF1                 cmp     edx, [ebp+arg_0]
.text$mn:00009AF4                 jnz     short loc_9B15
.text$mn:00009AF6                 mov     eax, [ebp+arg_4]
.text$mn:00009AF9                 add     eax, [ebp+Size]
.text$mn:00009AFC                 push    eax
.text$mn:00009AFD                 mov     ecx, [ebp+var_4]
.text$mn:00009B00                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)
.text$mn:00009B05                 mov     ecx, [ebp+arg_4]
.text$mn:00009B08                 push    ecx
.text$mn:00009B09                 push    0
.text$mn:00009B0B                 mov     ecx, [ebp+var_4]
.text$mn:00009B0E                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)
.text$mn:00009B13                 jmp     short loc_9B57
.text$mn:00009B15 ; ---------------------------------------------------------------------------
.text$mn:00009B15
.text$mn:00009B15 loc_9B15:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+40j
.text$mn:00009B15                 push    0
.text$mn:00009B17                 mov     edx, [ebp+Size]
.text$mn:00009B1A                 push    edx
.text$mn:00009B1B                 mov     ecx, [ebp+var_4]
.text$mn:00009B1E                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:00009B23                 movzx   eax, al
.text$mn:00009B26                 test    eax, eax
.text$mn:00009B28                 jz      short loc_9B57
.text$mn:00009B2A                 mov     ecx, [ebp+Size]
.text$mn:00009B2D                 push    ecx             ; Size
.text$mn:00009B2E                 mov     ecx, [ebp+arg_0]
.text$mn:00009B31                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00009B36                 add     eax, [ebp+arg_4]
.text$mn:00009B39                 push    eax             ; Src
.text$mn:00009B3A                 mov     ecx, [ebp+var_4]
.text$mn:00009B3D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00009B42                 push    eax             ; Dst
.text$mn:00009B43                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00009B48                 add     esp, 0Ch
.text$mn:00009B4B                 mov     edx, [ebp+Size]
.text$mn:00009B4E                 push    edx
.text$mn:00009B4F                 mov     ecx, [ebp+var_4]
.text$mn:00009B52                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00009B57
.text$mn:00009B57 loc_9B57:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Fj
.text$mn:00009B57                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+74j
.text$mn:00009B57                 mov     eax, [ebp+var_4]
.text$mn:00009B5A                 mov     esp, ebp
.text$mn:00009B5C                 pop     ebp
.text$mn:00009B5D                 retn    0Ch
.text$mn:00009B5D ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:00009B5D
.text$mn:00009B5D _text$mn        ends
.text$mn:00009B5D
.text$mn:00009B60 ; ===========================================================================
.text$mn:00009B60
.text$mn:00009B60 ; Segment type: Pure code
.text$mn:00009B60 ; Segment permissions: Read/Execute
.text$mn:00009B60 _text$mn        segment para public 'CODE' use32
.text$mn:00009B60                 assume cs:_text$mn
.text$mn:00009B60                 ;org 9B60h
.text$mn:00009B60 ; COMDAT (pick any)
.text$mn:00009B60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009B60
.text$mn:00009B60 ; =============== S U B R O U T I N E =======================================
.text$mn:00009B60
.text$mn:00009B60 ; Attributes: bp-based frame
.text$mn:00009B60
.text$mn:00009B60 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char *Str)
.text$mn:00009B60                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
.text$mn:00009B60 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
.text$mn:00009B60                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+53p
.text$mn:00009B60
.text$mn:00009B60 var_4           = dword ptr -4
.text$mn:00009B60 Str             = dword ptr  8
.text$mn:00009B60
.text$mn:00009B60                 push    ebp
.text$mn:00009B61                 mov     ebp, esp
.text$mn:00009B63                 push    ecx
.text$mn:00009B64                 mov     [ebp+var_4], ecx
.text$mn:00009B67                 push    490h            ; unsigned int
.text$mn:00009B6C                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009B71                 mov     eax, [ebp+Str]
.text$mn:00009B74                 push    eax             ; int
.text$mn:00009B75                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00009B7A                 add     esp, 0Ch
.text$mn:00009B7D                 mov     ecx, [ebp+Str]
.text$mn:00009B80                 push    ecx             ; Str
.text$mn:00009B81                 call    ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length(char const *)
.text$mn:00009B86                 add     esp, 4
.text$mn:00009B89                 push    eax             ; Size
.text$mn:00009B8A                 mov     edx, [ebp+Str]
.text$mn:00009B8D                 push    edx             ; Src
.text$mn:00009B8E                 mov     ecx, [ebp+var_4]
.text$mn:00009B91                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)
.text$mn:00009B96                 mov     esp, ebp
.text$mn:00009B98                 pop     ebp
.text$mn:00009B99                 retn    4
.text$mn:00009B99 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z endp
.text$mn:00009B99
.text$mn:00009B99 _text$mn        ends
.text$mn:00009B99
.text$mn:00009B9C ; ===========================================================================
.text$mn:00009B9C
.text$mn:00009B9C ; Segment type: Pure code
.text$mn:00009B9C ; Segment permissions: Read/Execute
.text$mn:00009B9C _text$mn        segment para public 'CODE' use32
.text$mn:00009B9C                 assume cs:_text$mn
.text$mn:00009B9C                 ;org 9B9Ch
.text$mn:00009B9C ; COMDAT (pick any)
.text$mn:00009B9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009B9C
.text$mn:00009B9C ; =============== S U B R O U T I N E =======================================
.text$mn:00009B9C
.text$mn:00009B9C ; Attributes: bp-based frame
.text$mn:00009B9C
.text$mn:00009B9C ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(void *Src, size_t Size)
.text$mn:00009B9C                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
.text$mn:00009B9C ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
.text$mn:00009B9C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+31p
.text$mn:00009B9C
.text$mn:00009B9C var_4           = dword ptr -4
.text$mn:00009B9C Src             = dword ptr  8
.text$mn:00009B9C Size            = dword ptr  0Ch
.text$mn:00009B9C
.text$mn:00009B9C                 push    ebp
.text$mn:00009B9D                 mov     ebp, esp
.text$mn:00009B9F                 push    ecx
.text$mn:00009BA0                 mov     [ebp+var_4], ecx
.text$mn:00009BA3                 cmp     [ebp+Size], 0
.text$mn:00009BA7                 jz      short loc_9BBF
.text$mn:00009BA9                 push    47Fh            ; unsigned int
.text$mn:00009BAE                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009BB3                 mov     eax, [ebp+Src]
.text$mn:00009BB6                 push    eax             ; int
.text$mn:00009BB7                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00009BBC                 add     esp, 0Ch
.text$mn:00009BBF
.text$mn:00009BBF loc_9BBF:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+Bj
.text$mn:00009BBF                 mov     ecx, [ebp+Src]
.text$mn:00009BC2                 push    ecx
.text$mn:00009BC3                 mov     ecx, [ebp+var_4]
.text$mn:00009BC6                 call    ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)
.text$mn:00009BCB                 movzx   edx, al
.text$mn:00009BCE                 test    edx, edx
.text$mn:00009BD0                 jz      short loc_9BF2
.text$mn:00009BD2                 mov     eax, [ebp+Size]
.text$mn:00009BD5                 push    eax
.text$mn:00009BD6                 mov     ecx, [ebp+var_4]
.text$mn:00009BD9                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00009BDE                 mov     ecx, [ebp+Src]
.text$mn:00009BE1                 sub     ecx, eax
.text$mn:00009BE3                 push    ecx
.text$mn:00009BE4                 mov     edx, [ebp+var_4]
.text$mn:00009BE7                 push    edx
.text$mn:00009BE8                 mov     ecx, [ebp+var_4]
.text$mn:00009BEB                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:00009BF0                 jmp     short loc_9C2F
.text$mn:00009BF2 ; ---------------------------------------------------------------------------
.text$mn:00009BF2
.text$mn:00009BF2 loc_9BF2:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+34j
.text$mn:00009BF2                 push    0
.text$mn:00009BF4                 mov     eax, [ebp+Size]
.text$mn:00009BF7                 push    eax
.text$mn:00009BF8                 mov     ecx, [ebp+var_4]
.text$mn:00009BFB                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:00009C00                 movzx   ecx, al
.text$mn:00009C03                 test    ecx, ecx
.text$mn:00009C05                 jz      short loc_9C2C
.text$mn:00009C07                 mov     edx, [ebp+Size]
.text$mn:00009C0A                 push    edx             ; Size
.text$mn:00009C0B                 mov     eax, [ebp+Src]
.text$mn:00009C0E                 push    eax             ; Src
.text$mn:00009C0F                 mov     ecx, [ebp+var_4]
.text$mn:00009C12                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00009C17                 push    eax             ; Dst
.text$mn:00009C18                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00009C1D                 add     esp, 0Ch
.text$mn:00009C20                 mov     ecx, [ebp+Size]
.text$mn:00009C23                 push    ecx
.text$mn:00009C24                 mov     ecx, [ebp+var_4]
.text$mn:00009C27                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00009C2C
.text$mn:00009C2C loc_9C2C:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+69j
.text$mn:00009C2C                 mov     eax, [ebp+var_4]
.text$mn:00009C2F
.text$mn:00009C2F loc_9C2F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+54j
.text$mn:00009C2F                 mov     esp, ebp
.text$mn:00009C31                 pop     ebp
.text$mn:00009C32                 retn    8
.text$mn:00009C32 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z endp
.text$mn:00009C32
.text$mn:00009C32 ; ---------------------------------------------------------------------------
.text$mn:00009C35                 align 4
.text$mn:00009C35 _text$mn        ends
.text$mn:00009C35
.text$mn:00009C38 ; ===========================================================================
.text$mn:00009C38
.text$mn:00009C38 ; Segment type: Pure code
.text$mn:00009C38 ; Segment permissions: Read/Execute
.text$mn:00009C38 _text$mn        segment para public 'CODE' use32
.text$mn:00009C38                 assume cs:_text$mn
.text$mn:00009C38                 ;org 9C38h
.text$mn:00009C38 ; COMDAT (pick any)
.text$mn:00009C38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009C38
.text$mn:00009C38 ; =============== S U B R O U T I N E =======================================
.text$mn:00009C38
.text$mn:00009C38 ; Attributes: bp-based frame
.text$mn:00009C38
.text$mn:00009C38 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00009C38                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
.text$mn:00009C38 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z proc near
.text$mn:00009C38                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+66p
.text$mn:00009C38
.text$mn:00009C38 var_4           = dword ptr -4
.text$mn:00009C38 arg_0           = dword ptr  8
.text$mn:00009C38
.text$mn:00009C38                 push    ebp
.text$mn:00009C39                 mov     ebp, esp
.text$mn:00009C3B                 push    ecx
.text$mn:00009C3C                 mov     [ebp+var_4], ecx
.text$mn:00009C3F                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00009C44                 push    eax
.text$mn:00009C45                 push    0
.text$mn:00009C47                 mov     ecx, [ebp+arg_0]
.text$mn:00009C4A                 push    ecx
.text$mn:00009C4B                 mov     ecx, [ebp+var_4]
.text$mn:00009C4E                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00009C53                 mov     esp, ebp
.text$mn:00009C55                 pop     ebp
.text$mn:00009C56                 retn    4
.text$mn:00009C56 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z endp
.text$mn:00009C56
.text$mn:00009C56 ; ---------------------------------------------------------------------------
.text$mn:00009C59                 align 4
.text$mn:00009C59 _text$mn        ends
.text$mn:00009C59
.text$mn:00009C5C ; ===========================================================================
.text$mn:00009C5C
.text$mn:00009C5C ; Segment type: Pure code
.text$mn:00009C5C ; Segment permissions: Read/Execute
.text$mn:00009C5C _text$mn        segment para public 'CODE' use32
.text$mn:00009C5C                 assume cs:_text$mn
.text$mn:00009C5C                 ;org 9C5Ch
.text$mn:00009C5C ; COMDAT (pick any)
.text$mn:00009C5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009C5C
.text$mn:00009C5C ; =============== S U B R O U T I N E =======================================
.text$mn:00009C5C
.text$mn:00009C5C ; Attributes: bp-based frame
.text$mn:00009C5C
.text$mn:00009C5C ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:00009C5C                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00009C5C ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00009C5C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+6Bp
.text$mn:00009C5C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+16p ...
.text$mn:00009C5C
.text$mn:00009C5C var_8           = dword ptr -8
.text$mn:00009C5C var_4           = dword ptr -4
.text$mn:00009C5C arg_0           = dword ptr  8
.text$mn:00009C5C arg_4           = dword ptr  0Ch
.text$mn:00009C5C arg_8           = dword ptr  10h
.text$mn:00009C5C
.text$mn:00009C5C                 push    ebp
.text$mn:00009C5D                 mov     ebp, esp
.text$mn:00009C5F                 sub     esp, 8
.text$mn:00009C62                 mov     [ebp+var_4], ecx
.text$mn:00009C65                 mov     ecx, [ebp+arg_0]
.text$mn:00009C68                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00009C6D                 cmp     eax, [ebp+arg_4]
.text$mn:00009C70                 jnb     short loc_9C7A
.text$mn:00009C72                 mov     ecx, [ebp+var_4]
.text$mn:00009C75                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00009C7A
.text$mn:00009C7A loc_9C7A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:00009C7A                 mov     ecx, [ebp+arg_0]
.text$mn:00009C7D                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00009C82                 sub     eax, [ebp+arg_4]
.text$mn:00009C85                 mov     [ebp+var_8], eax
.text$mn:00009C88                 mov     eax, [ebp+arg_8]
.text$mn:00009C8B                 cmp     eax, [ebp+var_8]
.text$mn:00009C8E                 jnb     short loc_9C96
.text$mn:00009C90                 mov     ecx, [ebp+arg_8]
.text$mn:00009C93                 mov     [ebp+var_8], ecx
.text$mn:00009C96
.text$mn:00009C96 loc_9C96:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:00009C96                 mov     edx, [ebp+var_4]
.text$mn:00009C99                 cmp     edx, [ebp+arg_0]
.text$mn:00009C9C                 jnz     short loc_9CBD
.text$mn:00009C9E                 mov     eax, [ebp+arg_4]
.text$mn:00009CA1                 add     eax, [ebp+var_8]
.text$mn:00009CA4                 push    eax
.text$mn:00009CA5                 mov     ecx, [ebp+var_4]
.text$mn:00009CA8                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)
.text$mn:00009CAD                 mov     ecx, [ebp+arg_4]
.text$mn:00009CB0                 push    ecx
.text$mn:00009CB1                 push    0
.text$mn:00009CB3                 mov     ecx, [ebp+var_4]
.text$mn:00009CB6                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)
.text$mn:00009CBB                 jmp     short loc_9D02
.text$mn:00009CBD ; ---------------------------------------------------------------------------
.text$mn:00009CBD
.text$mn:00009CBD loc_9CBD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+40j
.text$mn:00009CBD                 push    0
.text$mn:00009CBF                 mov     edx, [ebp+var_8]
.text$mn:00009CC2                 push    edx
.text$mn:00009CC3                 mov     ecx, [ebp+var_4]
.text$mn:00009CC6                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00009CCB                 movzx   eax, al
.text$mn:00009CCE                 test    eax, eax
.text$mn:00009CD0                 jz      short loc_9D02
.text$mn:00009CD2                 mov     ecx, [ebp+var_8]
.text$mn:00009CD5                 push    ecx             ; int
.text$mn:00009CD6                 mov     ecx, [ebp+arg_0]
.text$mn:00009CD9                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009CDE                 mov     edx, [ebp+arg_4]
.text$mn:00009CE1                 lea     eax, [eax+edx*2]
.text$mn:00009CE4                 push    eax             ; Src
.text$mn:00009CE5                 mov     ecx, [ebp+var_4]
.text$mn:00009CE8                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009CED                 push    eax             ; Dst
.text$mn:00009CEE                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00009CF3                 add     esp, 0Ch
.text$mn:00009CF6                 mov     ecx, [ebp+var_8]
.text$mn:00009CF9                 push    ecx
.text$mn:00009CFA                 mov     ecx, [ebp+var_4]
.text$mn:00009CFD                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00009D02
.text$mn:00009D02 loc_9D02:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Fj
.text$mn:00009D02                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+74j
.text$mn:00009D02                 mov     eax, [ebp+var_4]
.text$mn:00009D05                 mov     esp, ebp
.text$mn:00009D07                 pop     ebp
.text$mn:00009D08                 retn    0Ch
.text$mn:00009D08 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:00009D08
.text$mn:00009D08 ; ---------------------------------------------------------------------------
.text$mn:00009D0B                 align 4
.text$mn:00009D0B _text$mn        ends
.text$mn:00009D0B
.text$mn:00009D0C ; ===========================================================================
.text$mn:00009D0C
.text$mn:00009D0C ; Segment type: Pure code
.text$mn:00009D0C ; Segment permissions: Read/Execute
.text$mn:00009D0C _text$mn        segment para public 'CODE' use32
.text$mn:00009D0C                 assume cs:_text$mn
.text$mn:00009D0C                 ;org 9D0Ch
.text$mn:00009D0C ; COMDAT (pick any)
.text$mn:00009D0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009D0C
.text$mn:00009D0C ; =============== S U B R O U T I N E =======================================
.text$mn:00009D0C
.text$mn:00009D0C ; Attributes: bp-based frame
.text$mn:00009D0C
.text$mn:00009D0C ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t *Str)
.text$mn:00009D0C                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:00009D0C ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:00009D0C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+53p
.text$mn:00009D0C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)+Ep
.text$mn:00009D0C
.text$mn:00009D0C var_4           = dword ptr -4
.text$mn:00009D0C Str             = dword ptr  8
.text$mn:00009D0C
.text$mn:00009D0C                 push    ebp
.text$mn:00009D0D                 mov     ebp, esp
.text$mn:00009D0F                 push    ecx
.text$mn:00009D10                 mov     [ebp+var_4], ecx
.text$mn:00009D13                 push    490h            ; unsigned int
.text$mn:00009D18                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009D1D                 mov     eax, [ebp+Str]
.text$mn:00009D20                 push    eax             ; int
.text$mn:00009D21                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00009D26                 add     esp, 0Ch
.text$mn:00009D29                 mov     ecx, [ebp+Str]
.text$mn:00009D2C                 push    ecx             ; Str
.text$mn:00009D2D                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:00009D32                 add     esp, 4
.text$mn:00009D35                 push    eax             ; int
.text$mn:00009D36                 mov     edx, [ebp+Str]
.text$mn:00009D39                 push    edx             ; Src
.text$mn:00009D3A                 mov     ecx, [ebp+var_4]
.text$mn:00009D3D                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)
.text$mn:00009D42                 mov     esp, ebp
.text$mn:00009D44                 pop     ebp
.text$mn:00009D45                 retn    4
.text$mn:00009D45 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:00009D45
.text$mn:00009D45 _text$mn        ends
.text$mn:00009D45
.text$mn:00009D48 ; ===========================================================================
.text$mn:00009D48
.text$mn:00009D48 ; Segment type: Pure code
.text$mn:00009D48 ; Segment permissions: Read/Execute
.text$mn:00009D48 _text$mn        segment para public 'CODE' use32
.text$mn:00009D48                 assume cs:_text$mn
.text$mn:00009D48                 ;org 9D48h
.text$mn:00009D48 ; COMDAT (pick any)
.text$mn:00009D48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009D48
.text$mn:00009D48 ; =============== S U B R O U T I N E =======================================
.text$mn:00009D48
.text$mn:00009D48 ; Attributes: bp-based frame
.text$mn:00009D48
.text$mn:00009D48 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(void *Src, int)
.text$mn:00009D48                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:00009D48 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:00009D48                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+31p
.text$mn:00009D48
.text$mn:00009D48 var_4           = dword ptr -4
.text$mn:00009D48 Src             = dword ptr  8
.text$mn:00009D48 arg_4           = dword ptr  0Ch
.text$mn:00009D48
.text$mn:00009D48                 push    ebp
.text$mn:00009D49                 mov     ebp, esp
.text$mn:00009D4B                 push    ecx
.text$mn:00009D4C                 mov     [ebp+var_4], ecx
.text$mn:00009D4F                 cmp     [ebp+arg_4], 0
.text$mn:00009D53                 jz      short loc_9D6B
.text$mn:00009D55                 push    47Fh            ; unsigned int
.text$mn:00009D5A                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009D5F                 mov     eax, [ebp+Src]
.text$mn:00009D62                 push    eax             ; int
.text$mn:00009D63                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00009D68                 add     esp, 0Ch
.text$mn:00009D6B
.text$mn:00009D6B loc_9D6B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+Bj
.text$mn:00009D6B                 mov     ecx, [ebp+Src]
.text$mn:00009D6E                 push    ecx
.text$mn:00009D6F                 mov     ecx, [ebp+var_4]
.text$mn:00009D72                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:00009D77                 movzx   edx, al
.text$mn:00009D7A                 test    edx, edx
.text$mn:00009D7C                 jz      short loc_9DA0
.text$mn:00009D7E                 mov     eax, [ebp+arg_4]
.text$mn:00009D81                 push    eax
.text$mn:00009D82                 mov     ecx, [ebp+var_4]
.text$mn:00009D85                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009D8A                 mov     ecx, [ebp+Src]
.text$mn:00009D8D                 sub     ecx, eax
.text$mn:00009D8F                 sar     ecx, 1
.text$mn:00009D91                 push    ecx
.text$mn:00009D92                 mov     edx, [ebp+var_4]
.text$mn:00009D95                 push    edx
.text$mn:00009D96                 mov     ecx, [ebp+var_4]
.text$mn:00009D99                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00009D9E                 jmp     short loc_9DDD
.text$mn:00009DA0 ; ---------------------------------------------------------------------------
.text$mn:00009DA0
.text$mn:00009DA0 loc_9DA0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+34j
.text$mn:00009DA0                 push    0
.text$mn:00009DA2                 mov     eax, [ebp+arg_4]
.text$mn:00009DA5                 push    eax
.text$mn:00009DA6                 mov     ecx, [ebp+var_4]
.text$mn:00009DA9                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00009DAE                 movzx   ecx, al
.text$mn:00009DB1                 test    ecx, ecx
.text$mn:00009DB3                 jz      short loc_9DDA
.text$mn:00009DB5                 mov     edx, [ebp+arg_4]
.text$mn:00009DB8                 push    edx             ; int
.text$mn:00009DB9                 mov     eax, [ebp+Src]
.text$mn:00009DBC                 push    eax             ; Src
.text$mn:00009DBD                 mov     ecx, [ebp+var_4]
.text$mn:00009DC0                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009DC5                 push    eax             ; Dst
.text$mn:00009DC6                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00009DCB                 add     esp, 0Ch
.text$mn:00009DCE                 mov     ecx, [ebp+arg_4]
.text$mn:00009DD1                 push    ecx
.text$mn:00009DD2                 mov     ecx, [ebp+var_4]
.text$mn:00009DD5                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00009DDA
.text$mn:00009DDA loc_9DDA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+6Bj
.text$mn:00009DDA                 mov     eax, [ebp+var_4]
.text$mn:00009DDD
.text$mn:00009DDD loc_9DDD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+56j
.text$mn:00009DDD                 mov     esp, ebp
.text$mn:00009DDF                 pop     ebp
.text$mn:00009DE0                 retn    8
.text$mn:00009DE0 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:00009DE0
.text$mn:00009DE0 ; ---------------------------------------------------------------------------
.text$mn:00009DE3                 align 4
.text$mn:00009DE3 _text$mn        ends
.text$mn:00009DE3
.text$mn:00009DE4 ; ===========================================================================
.text$mn:00009DE4
.text$mn:00009DE4 ; Segment type: Pure code
.text$mn:00009DE4 ; Segment permissions: Read/Execute
.text$mn:00009DE4 _text$mn        segment para public 'CODE' use32
.text$mn:00009DE4                 assume cs:_text$mn
.text$mn:00009DE4                 ;org 9DE4h
.text$mn:00009DE4 ; COMDAT (pick any)
.text$mn:00009DE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009DE4
.text$mn:00009DE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00009DE4
.text$mn:00009DE4 ; Attributes: bp-based frame
.text$mn:00009DE4
.text$mn:00009DE4 ; public: static void __cdecl std::char_traits<char>::assign(char &, char const &)
.text$mn:00009DE4                 public ?assign@?$char_traits@D@std@@SAXAADABD@Z
.text$mn:00009DE4 ?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
.text$mn:00009DE4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+26p
.text$mn:00009DE4
.text$mn:00009DE4 arg_0           = dword ptr  8
.text$mn:00009DE4 arg_4           = dword ptr  0Ch
.text$mn:00009DE4
.text$mn:00009DE4                 push    ebp
.text$mn:00009DE5                 mov     ebp, esp
.text$mn:00009DE7                 mov     eax, [ebp+arg_0]
.text$mn:00009DEA                 mov     ecx, [ebp+arg_4]
.text$mn:00009DED                 mov     dl, [ecx]
.text$mn:00009DEF                 mov     [eax], dl
.text$mn:00009DF1                 pop     ebp
.text$mn:00009DF2                 retn
.text$mn:00009DF2 ?assign@?$char_traits@D@std@@SAXAADABD@Z endp
.text$mn:00009DF2
.text$mn:00009DF2 ; ---------------------------------------------------------------------------
.text$mn:00009DF3                 align 4
.text$mn:00009DF3 _text$mn        ends
.text$mn:00009DF3
.text$mn:00009DF4 ; ===========================================================================
.text$mn:00009DF4
.text$mn:00009DF4 ; Segment type: Pure code
.text$mn:00009DF4 ; Segment permissions: Read/Execute
.text$mn:00009DF4 _text$mn        segment para public 'CODE' use32
.text$mn:00009DF4                 assume cs:_text$mn
.text$mn:00009DF4                 ;org 9DF4h
.text$mn:00009DF4 ; COMDAT (pick any)
.text$mn:00009DF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009DF4
.text$mn:00009DF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00009DF4
.text$mn:00009DF4 ; Attributes: bp-based frame
.text$mn:00009DF4
.text$mn:00009DF4 ; public: static void __cdecl std::char_traits<wchar_t>::assign(wchar_t &, wchar_t const &)
.text$mn:00009DF4                 public ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
.text$mn:00009DF4 ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z proc near
.text$mn:00009DF4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)+2Bp
.text$mn:00009DF4
.text$mn:00009DF4 arg_0           = dword ptr  8
.text$mn:00009DF4 arg_4           = dword ptr  0Ch
.text$mn:00009DF4
.text$mn:00009DF4                 push    ebp
.text$mn:00009DF5                 mov     ebp, esp
.text$mn:00009DF7                 mov     eax, [ebp+arg_0]
.text$mn:00009DFA                 mov     ecx, [ebp+arg_4]
.text$mn:00009DFD                 mov     dx, [ecx]
.text$mn:00009E00                 mov     [eax], dx
.text$mn:00009E03                 pop     ebp
.text$mn:00009E04                 retn
.text$mn:00009E04 ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z endp
.text$mn:00009E04
.text$mn:00009E04 ; ---------------------------------------------------------------------------
.text$mn:00009E05                 align 4
.text$mn:00009E05 _text$mn        ends
.text$mn:00009E05
.text$mn:00009E08 ; ===========================================================================
.text$mn:00009E08
.text$mn:00009E08 ; Segment type: Pure code
.text$mn:00009E08 ; Segment permissions: Read/Execute
.text$mn:00009E08 _text$mn        segment para public 'CODE' use32
.text$mn:00009E08                 assume cs:_text$mn
.text$mn:00009E08                 ;org 9E08h
.text$mn:00009E08 ; COMDAT (pick any)
.text$mn:00009E08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009E08
.text$mn:00009E08 ; =============== S U B R O U T I N E =======================================
.text$mn:00009E08
.text$mn:00009E08 ; Attributes: bp-based frame
.text$mn:00009E08
.text$mn:00009E08 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::at(unsigned int)
.text$mn:00009E08                 public ?at@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:00009E08 ?at@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:00009E08                                         ; CODE XREF: ProjectPanel::addFiles(_TREEITEM *)+DAp
.text$mn:00009E08                                         ; ProjectPanel::addFiles(_TREEITEM *)+100p
.text$mn:00009E08
.text$mn:00009E08 var_4           = dword ptr -4
.text$mn:00009E08 arg_0           = dword ptr  8
.text$mn:00009E08
.text$mn:00009E08                 push    ebp
.text$mn:00009E09                 mov     ebp, esp
.text$mn:00009E0B                 push    ecx
.text$mn:00009E0C                 mov     [ebp+var_4], ecx
.text$mn:00009E0F                 mov     ecx, [ebp+var_4]
.text$mn:00009E12                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:00009E17                 cmp     eax, [ebp+arg_0]
.text$mn:00009E1A                 ja      short loc_9E24
.text$mn:00009E1C                 mov     ecx, [ebp+var_4]
.text$mn:00009E1F                 call    ?_Xran@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Xran(void)
.text$mn:00009E24
.text$mn:00009E24 loc_9E24:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::at(uint)+12j
.text$mn:00009E24                 imul    eax, [ebp+arg_0], 1Ch
.text$mn:00009E28                 mov     ecx, [ebp+var_4]
.text$mn:00009E2B                 add     eax, [ecx+4]
.text$mn:00009E2E                 mov     esp, ebp
.text$mn:00009E30                 pop     ebp
.text$mn:00009E31                 retn    4
.text$mn:00009E31 ?at@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:00009E31
.text$mn:00009E31 _text$mn        ends
.text$mn:00009E31
.text$mn:00009E34 ; ===========================================================================
.text$mn:00009E34
.text$mn:00009E34 ; Segment type: Pure code
.text$mn:00009E34 ; Segment permissions: Read/Execute
.text$mn:00009E34 _text$mn        segment para public 'CODE' use32
.text$mn:00009E34                 assume cs:_text$mn
.text$mn:00009E34                 ;org 9E34h
.text$mn:00009E34 ; COMDAT (pick any)
.text$mn:00009E34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009E34
.text$mn:00009E34 ; =============== S U B R O U T I N E =======================================
.text$mn:00009E34
.text$mn:00009E34 ; Attributes: bp-based frame
.text$mn:00009E34
.text$mn:00009E34 ; public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>> __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::begin(void)
.text$mn:00009E34                 public ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:00009E34 ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$mn:00009E34                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+A9p
.text$mn:00009E34                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+AFp ...
.text$mn:00009E34
.text$mn:00009E34 var_14          = dword ptr -14h
.text$mn:00009E34 var_10          = dword ptr -10h
.text$mn:00009E34 var_C           = dword ptr -0Ch
.text$mn:00009E34 var_4           = dword ptr -4
.text$mn:00009E34 arg_0           = dword ptr  8
.text$mn:00009E34
.text$mn:00009E34                 push    ebp
.text$mn:00009E35                 mov     ebp, esp
.text$mn:00009E37                 push    0FFFFFFFFh
.text$mn:00009E39                 push    offset __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:00009E3E                 mov     eax, large fs:0
.text$mn:00009E44                 push    eax
.text$mn:00009E45                 sub     esp, 8
.text$mn:00009E48                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009E4D                 xor     eax, ebp
.text$mn:00009E4F                 push    eax
.text$mn:00009E50                 lea     eax, [ebp+var_C]
.text$mn:00009E53                 mov     large fs:0, eax
.text$mn:00009E59                 mov     [ebp+var_10], ecx
.text$mn:00009E5C                 mov     [ebp+var_14], 0
.text$mn:00009E63                 mov     eax, [ebp+var_10]
.text$mn:00009E66                 push    eax             ; struct std::_Container_base12 *
.text$mn:00009E67                 mov     ecx, [ebp+var_10]
.text$mn:00009E6A                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009E6F                 push    eax             ; int
.text$mn:00009E70                 mov     ecx, [ebp+arg_0]
.text$mn:00009E73                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)
.text$mn:00009E78                 mov     [ebp+var_4], 0
.text$mn:00009E7F                 mov     ecx, [ebp+var_14]
.text$mn:00009E82                 or      ecx, 1
.text$mn:00009E85                 mov     [ebp+var_14], ecx
.text$mn:00009E88                 mov     eax, [ebp+arg_0]
.text$mn:00009E8B                 mov     ecx, [ebp+var_C]
.text$mn:00009E8E                 mov     large fs:0, ecx
.text$mn:00009E95                 pop     ecx
.text$mn:00009E96                 mov     esp, ebp
.text$mn:00009E98                 pop     ebp
.text$mn:00009E99                 retn    4
.text$mn:00009E99 ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$mn:00009E99
.text$mn:00009E99 _text$mn        ends
.text$mn:00009E99
.text$x:00009E9C ; ===========================================================================
.text$x:00009E9C
.text$x:00009E9C ; Segment type: Pure code
.text$x:00009E9C ; Segment permissions: Read/Execute
.text$x:00009E9C _text$x         segment para public 'CODE' use32
.text$x:00009E9C                 assume cs:_text$x
.text$x:00009E9C                 ;org 9E9Ch
.text$x:00009E9C ; COMDAT (pick associative to section at 9E34)
.text$x:00009E9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009E9C
.text$x:00009E9C ; =============== S U B R O U T I N E =======================================
.text$x:00009E9C
.text$x:00009E9C
.text$x:00009E9C __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 proc near
.text$x:00009E9C                                         ; DATA XREF: .xdata$x:0000C4E0o
.text$x:00009E9C                 mov     eax, [ebp-14h]
.text$x:00009E9F                 and     eax, 1
.text$x:00009EA2                 jz      $LN4
.text$x:00009EA8                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:00009EAC                 mov     ecx, [ebp+8]
.text$x:00009EAF                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00009EB4 ; ---------------------------------------------------------------------------
.text$x:00009EB4
.text$x:00009EB4 $LN4:                                   ; CODE XREF: __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0+6j
.text$x:00009EB4                 retn
.text$x:00009EB4 __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 endp
.text$x:00009EB4
.text$x:00009EB5
.text$x:00009EB5 ; =============== S U B R O U T I N E =======================================
.text$x:00009EB5
.text$x:00009EB5
.text$x:00009EB5 __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$x:00009EB5                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)+5o
.text$x:00009EB5
.text$x:00009EB5 arg_4           = dword ptr  8
.text$x:00009EB5
.text$x:00009EB5                 mov     edx, [esp+arg_4]
.text$x:00009EB9                 lea     eax, [edx+0Ch]
.text$x:00009EBC                 mov     ecx, [edx-0Ch]
.text$x:00009EBF                 xor     ecx, eax
.text$x:00009EC1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009EC6                 mov     eax, offset __ehfuncinfo$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$x:00009ECB                 jmp     ___CxxFrameHandler3
.text$x:00009ECB __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$x:00009ECB
.text$x:00009ECB _text$x         ends
.text$x:00009ECB
.text$mn:00009ED0 ; ===========================================================================
.text$mn:00009ED0
.text$mn:00009ED0 ; Segment type: Pure code
.text$mn:00009ED0 ; Segment permissions: Read/Execute
.text$mn:00009ED0 _text$mn        segment para public 'CODE' use32
.text$mn:00009ED0                 assume cs:_text$mn
.text$mn:00009ED0                 ;org 9ED0h
.text$mn:00009ED0 ; COMDAT (pick any)
.text$mn:00009ED0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009ED0
.text$mn:00009ED0 ; =============== S U B R O U T I N E =======================================
.text$mn:00009ED0
.text$mn:00009ED0 ; Attributes: bp-based frame
.text$mn:00009ED0
.text$mn:00009ED0 ; public: wchar_t const * __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::c_str(void)const
.text$mn:00009ED0                 public ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
.text$mn:00009ED0 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ proc near
.text$mn:00009ED0                                         ; CODE XREF: ProjectPanel::newWorkSpace(void)+68p
.text$mn:00009ED0                                         ; ProjectPanel::openWorkSpace(wchar_t const *)+133p ...
.text$mn:00009ED0
.text$mn:00009ED0 var_4           = dword ptr -4
.text$mn:00009ED0
.text$mn:00009ED0                 push    ebp
.text$mn:00009ED1                 mov     ebp, esp
.text$mn:00009ED3                 push    ecx
.text$mn:00009ED4                 mov     [ebp+var_4], ecx
.text$mn:00009ED7                 mov     ecx, [ebp+var_4]
.text$mn:00009EDA                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009EDF                 mov     esp, ebp
.text$mn:00009EE1                 pop     ebp
.text$mn:00009EE2                 retn
.text$mn:00009EE2 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ endp
.text$mn:00009EE2
.text$mn:00009EE2 ; ---------------------------------------------------------------------------
.text$mn:00009EE3                 align 4
.text$mn:00009EE3 _text$mn        ends
.text$mn:00009EE3
.text$mn:00009EE4 ; ===========================================================================
.text$mn:00009EE4
.text$mn:00009EE4 ; Segment type: Pure code
.text$mn:00009EE4 ; Segment permissions: Read/Execute
.text$mn:00009EE4 _text$mn        segment para public 'CODE' use32
.text$mn:00009EE4                 assume cs:_text$mn
.text$mn:00009EE4                 ;org 9EE4h
.text$mn:00009EE4 ; COMDAT (pick any)
.text$mn:00009EE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009EE4
.text$mn:00009EE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00009EE4
.text$mn:00009EE4 ; Attributes: bp-based frame
.text$mn:00009EE4
.text$mn:00009EE4 ; public: unsigned int __thiscall std::vector<int, class std::allocator<int>>::capacity(void)const
.text$mn:00009EE4                 public ?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
.text$mn:00009EE4 ?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ proc near
.text$mn:00009EE4                                         ; CODE XREF: std::vector<int,std::allocator<int>>::_Grow_to(uint)+Cp
.text$mn:00009EE4
.text$mn:00009EE4 var_4           = dword ptr -4
.text$mn:00009EE4
.text$mn:00009EE4                 push    ebp
.text$mn:00009EE5                 mov     ebp, esp
.text$mn:00009EE7                 push    ecx
.text$mn:00009EE8                 mov     [ebp+var_4], ecx
.text$mn:00009EEB                 mov     eax, [ebp+var_4]
.text$mn:00009EEE                 mov     ecx, [ebp+var_4]
.text$mn:00009EF1                 mov     eax, [eax+0Ch]
.text$mn:00009EF4                 sub     eax, [ecx+4]
.text$mn:00009EF7                 sar     eax, 2
.text$mn:00009EFA                 mov     esp, ebp
.text$mn:00009EFC                 pop     ebp
.text$mn:00009EFD                 retn
.text$mn:00009EFD ?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ endp
.text$mn:00009EFD
.text$mn:00009EFD ; ---------------------------------------------------------------------------
.text$mn:00009EFE                 align 10h
.text$mn:00009EFE _text$mn        ends
.text$mn:00009EFE
.text$mn:00009F00 ; ===========================================================================
.text$mn:00009F00
.text$mn:00009F00 ; Segment type: Pure code
.text$mn:00009F00 ; Segment permissions: Read/Execute
.text$mn:00009F00 _text$mn        segment para public 'CODE' use32
.text$mn:00009F00                 assume cs:_text$mn
.text$mn:00009F00                 ;org 9F00h
.text$mn:00009F00 ; COMDAT (pick any)
.text$mn:00009F00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F00
.text$mn:00009F00 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F00
.text$mn:00009F00 ; Attributes: bp-based frame
.text$mn:00009F00
.text$mn:00009F00 ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::capacity(void)const
.text$mn:00009F00                 public ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:00009F00 ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:00009F00                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+Cp
.text$mn:00009F00
.text$mn:00009F00 var_4           = dword ptr -4
.text$mn:00009F00
.text$mn:00009F00                 push    ebp
.text$mn:00009F01                 mov     ebp, esp
.text$mn:00009F03                 push    ecx
.text$mn:00009F04                 mov     [ebp+var_4], ecx
.text$mn:00009F07                 mov     eax, [ebp+var_4]
.text$mn:00009F0A                 mov     ecx, [ebp+var_4]
.text$mn:00009F0D                 mov     eax, [eax+0Ch]
.text$mn:00009F10                 sub     eax, [ecx+4]
.text$mn:00009F13                 cdq
.text$mn:00009F14                 mov     ecx, 1Ch
.text$mn:00009F19                 idiv    ecx
.text$mn:00009F1B                 mov     esp, ebp
.text$mn:00009F1D                 pop     ebp
.text$mn:00009F1E                 retn
.text$mn:00009F1E ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:00009F1E
.text$mn:00009F1E ; ---------------------------------------------------------------------------
.text$mn:00009F1F                 align 10h
.text$mn:00009F1F _text$mn        ends
.text$mn:00009F1F
.text$mn:00009F20 ; ===========================================================================
.text$mn:00009F20
.text$mn:00009F20 ; Segment type: Pure code
.text$mn:00009F20 ; Segment permissions: Read/Execute
.text$mn:00009F20 _text$mn        segment para public 'CODE' use32
.text$mn:00009F20                 assume cs:_text$mn
.text$mn:00009F20                 ;org 9F20h
.text$mn:00009F20 ; COMDAT (pick any)
.text$mn:00009F20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F20
.text$mn:00009F20 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F20
.text$mn:00009F20 ; Attributes: bp-based frame
.text$mn:00009F20
.text$mn:00009F20 ; const struct std::error_category *__thiscall std::error_code::category(std::error_code *__hidden this)
.text$mn:00009F20                 public ?category@error_code@std@@QBEABVerror_category@2@XZ
.text$mn:00009F20 ?category@error_code@std@@QBEABVerror_category@2@XZ proc near
.text$mn:00009F20                                         ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+Cp
.text$mn:00009F20
.text$mn:00009F20 var_4           = dword ptr -4
.text$mn:00009F20
.text$mn:00009F20                 push    ebp
.text$mn:00009F21                 mov     ebp, esp
.text$mn:00009F23                 push    ecx
.text$mn:00009F24                 mov     [ebp+var_4], ecx
.text$mn:00009F27                 mov     eax, [ebp+var_4]
.text$mn:00009F2A                 mov     eax, [eax+4]
.text$mn:00009F2D                 mov     esp, ebp
.text$mn:00009F2F                 pop     ebp
.text$mn:00009F30                 retn
.text$mn:00009F30 ?category@error_code@std@@QBEABVerror_category@2@XZ endp
.text$mn:00009F30
.text$mn:00009F30 ; ---------------------------------------------------------------------------
.text$mn:00009F31                 align 4
.text$mn:00009F31 _text$mn        ends
.text$mn:00009F31
.text$mn:00009F34 ; ===========================================================================
.text$mn:00009F34
.text$mn:00009F34 ; Segment type: Pure code
.text$mn:00009F34 ; Segment permissions: Read/Execute
.text$mn:00009F34 _text$mn        segment para public 'CODE' use32
.text$mn:00009F34                 assume cs:_text$mn
.text$mn:00009F34                 ;org 9F34h
.text$mn:00009F34 ; COMDAT (pick any)
.text$mn:00009F34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F34
.text$mn:00009F34 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F34
.text$mn:00009F34 ; Attributes: bp-based frame
.text$mn:00009F34
.text$mn:00009F34 ; const struct std::error_category *__thiscall std::error_condition::category(std::error_condition *__hidden this)
.text$mn:00009F34                 public ?category@error_condition@std@@QBEABVerror_category@2@XZ
.text$mn:00009F34 ?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
.text$mn:00009F34                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+Dp
.text$mn:00009F34                                         ; std::error_condition::operator==(std::error_condition const &)+16p
.text$mn:00009F34
.text$mn:00009F34 var_4           = dword ptr -4
.text$mn:00009F34
.text$mn:00009F34                 push    ebp
.text$mn:00009F35                 mov     ebp, esp
.text$mn:00009F37                 push    ecx
.text$mn:00009F38                 mov     [ebp+var_4], ecx
.text$mn:00009F3B                 mov     eax, [ebp+var_4]
.text$mn:00009F3E                 mov     eax, [eax+4]
.text$mn:00009F41                 mov     esp, ebp
.text$mn:00009F43                 pop     ebp
.text$mn:00009F44                 retn
.text$mn:00009F44 ?category@error_condition@std@@QBEABVerror_category@2@XZ endp
.text$mn:00009F44
.text$mn:00009F44 ; ---------------------------------------------------------------------------
.text$mn:00009F45                 align 4
.text$mn:00009F45 _text$mn        ends
.text$mn:00009F45
.text$mn:00009F48 ; ===========================================================================
.text$mn:00009F48
.text$mn:00009F48 ; Segment type: Pure code
.text$mn:00009F48 ; Segment permissions: Read/Execute
.text$mn:00009F48 _text$mn        segment para public 'CODE' use32
.text$mn:00009F48                 assume cs:_text$mn
.text$mn:00009F48                 ;org 9F48h
.text$mn:00009F48 ; COMDAT (pick any)
.text$mn:00009F48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F48
.text$mn:00009F48 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F48
.text$mn:00009F48 ; Attributes: bp-based frame
.text$mn:00009F48
.text$mn:00009F48 ; public: int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::compare(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)const
.text$mn:00009F48                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z
.text$mn:00009F48 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z proc near
.text$mn:00009F48                                         ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Bp
.text$mn:00009F48
.text$mn:00009F48 var_4           = dword ptr -4
.text$mn:00009F48 arg_0           = dword ptr  8
.text$mn:00009F48
.text$mn:00009F48                 push    ebp
.text$mn:00009F49                 mov     ebp, esp
.text$mn:00009F4B                 push    ecx
.text$mn:00009F4C                 mov     [ebp+var_4], ecx
.text$mn:00009F4F                 mov     ecx, [ebp+arg_0]
.text$mn:00009F52                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00009F57                 push    eax
.text$mn:00009F58                 mov     ecx, [ebp+arg_0]
.text$mn:00009F5B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009F60                 push    eax
.text$mn:00009F61                 mov     eax, [ebp+var_4]
.text$mn:00009F64                 mov     ecx, [eax+14h]
.text$mn:00009F67                 push    ecx
.text$mn:00009F68                 push    0
.text$mn:00009F6A                 mov     ecx, [ebp+var_4]
.text$mn:00009F6D                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)
.text$mn:00009F72                 mov     esp, ebp
.text$mn:00009F74                 pop     ebp
.text$mn:00009F75                 retn    4
.text$mn:00009F75 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z endp
.text$mn:00009F75
.text$mn:00009F75 _text$mn        ends
.text$mn:00009F75
.text$mn:00009F78 ; ===========================================================================
.text$mn:00009F78
.text$mn:00009F78 ; Segment type: Pure code
.text$mn:00009F78 ; Segment permissions: Read/Execute
.text$mn:00009F78 _text$mn        segment para public 'CODE' use32
.text$mn:00009F78                 assume cs:_text$mn
.text$mn:00009F78                 ;org 9F78h
.text$mn:00009F78 ; COMDAT (pick any)
.text$mn:00009F78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F78
.text$mn:00009F78 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F78
.text$mn:00009F78 ; Attributes: bp-based frame
.text$mn:00009F78
.text$mn:00009F78 ; public: int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::compare(unsigned int, unsigned int, wchar_t const *, unsigned int)const
.text$mn:00009F78                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z
.text$mn:00009F78 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z proc near
.text$mn:00009F78                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+25p
.text$mn:00009F78                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t const *)+3Ap
.text$mn:00009F78
.text$mn:00009F78 var_18          = dword ptr -18h
.text$mn:00009F78 var_14          = dword ptr -14h
.text$mn:00009F78 var_10          = dword ptr -10h
.text$mn:00009F78 var_C           = dword ptr -0Ch
.text$mn:00009F78 var_8           = dword ptr -8
.text$mn:00009F78 var_4           = dword ptr -4
.text$mn:00009F78 arg_0           = dword ptr  8
.text$mn:00009F78 arg_4           = dword ptr  0Ch
.text$mn:00009F78 arg_8           = dword ptr  10h
.text$mn:00009F78 arg_C           = dword ptr  14h
.text$mn:00009F78
.text$mn:00009F78                 push    ebp
.text$mn:00009F79                 mov     ebp, esp
.text$mn:00009F7B                 sub     esp, 18h
.text$mn:00009F7E                 mov     [ebp+var_4], ecx
.text$mn:00009F81                 cmp     [ebp+arg_C], 0
.text$mn:00009F85                 jz      short loc_9F9D
.text$mn:00009F87                 push    87Dh            ; unsigned int
.text$mn:00009F8C                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009F91                 mov     eax, [ebp+arg_8]
.text$mn:00009F94                 push    eax             ; int
.text$mn:00009F95                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00009F9A                 add     esp, 0Ch
.text$mn:00009F9D
.text$mn:00009F9D loc_9F9D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+Dj
.text$mn:00009F9D                 mov     ecx, [ebp+var_4]
.text$mn:00009FA0                 mov     edx, [ecx+14h]
.text$mn:00009FA3                 cmp     edx, [ebp+arg_0]
.text$mn:00009FA6                 jnb     short loc_9FB0
.text$mn:00009FA8                 mov     ecx, [ebp+var_4]
.text$mn:00009FAB                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00009FB0
.text$mn:00009FB0 loc_9FB0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+2Ej
.text$mn:00009FB0                 mov     eax, [ebp+var_4]
.text$mn:00009FB3                 mov     ecx, [eax+14h]
.text$mn:00009FB6                 sub     ecx, [ebp+arg_0]
.text$mn:00009FB9                 cmp     ecx, [ebp+arg_4]
.text$mn:00009FBC                 jnb     short loc_9FCA
.text$mn:00009FBE                 mov     edx, [ebp+var_4]
.text$mn:00009FC1                 mov     eax, [edx+14h]
.text$mn:00009FC4                 sub     eax, [ebp+arg_0]
.text$mn:00009FC7                 mov     [ebp+arg_4], eax
.text$mn:00009FCA
.text$mn:00009FCA loc_9FCA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+44j
.text$mn:00009FCA                 mov     ecx, [ebp+arg_4]
.text$mn:00009FCD                 cmp     ecx, [ebp+arg_C]
.text$mn:00009FD0                 jnb     short loc_9FDA
.text$mn:00009FD2                 mov     edx, [ebp+arg_4]
.text$mn:00009FD5                 mov     [ebp+var_8], edx
.text$mn:00009FD8                 jmp     short loc_9FE0
.text$mn:00009FDA ; ---------------------------------------------------------------------------
.text$mn:00009FDA
.text$mn:00009FDA loc_9FDA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+58j
.text$mn:00009FDA                 mov     eax, [ebp+arg_C]
.text$mn:00009FDD                 mov     [ebp+var_8], eax
.text$mn:00009FE0
.text$mn:00009FE0 loc_9FE0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+60j
.text$mn:00009FE0                 mov     ecx, [ebp+var_8]
.text$mn:00009FE3                 push    ecx
.text$mn:00009FE4                 mov     edx, [ebp+arg_8]
.text$mn:00009FE7                 push    edx
.text$mn:00009FE8                 mov     ecx, [ebp+var_4]
.text$mn:00009FEB                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009FF0                 mov     ecx, [ebp+arg_0]
.text$mn:00009FF3                 lea     edx, [eax+ecx*2]
.text$mn:00009FF6                 push    edx
.text$mn:00009FF7                 call    ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z ; std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)
.text$mn:00009FFC                 add     esp, 0Ch
.text$mn:00009FFF                 mov     [ebp+var_C], eax
.text$mn:0000A002                 cmp     [ebp+var_C], 0
.text$mn:0000A006                 jz      short loc_A010
.text$mn:0000A008                 mov     eax, [ebp+var_C]
.text$mn:0000A00B                 mov     [ebp+var_18], eax
.text$mn:0000A00E                 jmp     short loc_A045
.text$mn:0000A010 ; ---------------------------------------------------------------------------
.text$mn:0000A010
.text$mn:0000A010 loc_A010:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+8Ej
.text$mn:0000A010                 mov     ecx, [ebp+arg_4]
.text$mn:0000A013                 cmp     ecx, [ebp+arg_C]
.text$mn:0000A016                 jnb     short loc_A021
.text$mn:0000A018                 mov     [ebp+var_14], 0FFFFFFFFh
.text$mn:0000A01F                 jmp     short loc_A03F
.text$mn:0000A021 ; ---------------------------------------------------------------------------
.text$mn:0000A021
.text$mn:0000A021 loc_A021:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+9Ej
.text$mn:0000A021                 mov     edx, [ebp+arg_4]
.text$mn:0000A024                 cmp     edx, [ebp+arg_C]
.text$mn:0000A027                 jnz     short loc_A032
.text$mn:0000A029                 mov     [ebp+var_10], 0
.text$mn:0000A030                 jmp     short loc_A039
.text$mn:0000A032 ; ---------------------------------------------------------------------------
.text$mn:0000A032
.text$mn:0000A032 loc_A032:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+AFj
.text$mn:0000A032                 mov     [ebp+var_10], 1
.text$mn:0000A039
.text$mn:0000A039 loc_A039:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+B8j
.text$mn:0000A039                 mov     eax, [ebp+var_10]
.text$mn:0000A03C                 mov     [ebp+var_14], eax
.text$mn:0000A03F
.text$mn:0000A03F loc_A03F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+A7j
.text$mn:0000A03F                 mov     ecx, [ebp+var_14]
.text$mn:0000A042                 mov     [ebp+var_18], ecx
.text$mn:0000A045
.text$mn:0000A045 loc_A045:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+96j
.text$mn:0000A045                 mov     eax, [ebp+var_18]
.text$mn:0000A048                 mov     esp, ebp
.text$mn:0000A04A                 pop     ebp
.text$mn:0000A04B                 retn    10h
.text$mn:0000A04B ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z endp
.text$mn:0000A04B
.text$mn:0000A04B ; ---------------------------------------------------------------------------
.text$mn:0000A04E                 align 10h
.text$mn:0000A04E _text$mn        ends
.text$mn:0000A04E
.text$mn:0000A050 ; ===========================================================================
.text$mn:0000A050
.text$mn:0000A050 ; Segment type: Pure code
.text$mn:0000A050 ; Segment permissions: Read/Execute
.text$mn:0000A050 _text$mn        segment para public 'CODE' use32
.text$mn:0000A050                 assume cs:_text$mn
.text$mn:0000A050                 ;org 0A050h
.text$mn:0000A050 ; COMDAT (pick any)
.text$mn:0000A050                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A050
.text$mn:0000A050 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A050
.text$mn:0000A050 ; Attributes: bp-based frame
.text$mn:0000A050
.text$mn:0000A050 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t *Str)
.text$mn:0000A050                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z
.text$mn:0000A050 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z proc near
.text$mn:0000A050                                         ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+Bp
.text$mn:0000A050
.text$mn:0000A050 var_4           = dword ptr -4
.text$mn:0000A050 Str             = dword ptr  8
.text$mn:0000A050
.text$mn:0000A050                 push    ebp
.text$mn:0000A051                 mov     ebp, esp
.text$mn:0000A053                 push    ecx
.text$mn:0000A054                 mov     [ebp+var_4], ecx
.text$mn:0000A057                 push    86Eh            ; unsigned int
.text$mn:0000A05C                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A061                 mov     eax, [ebp+Str]
.text$mn:0000A064                 push    eax             ; int
.text$mn:0000A065                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000A06A                 add     esp, 0Ch
.text$mn:0000A06D                 mov     ecx, [ebp+Str]
.text$mn:0000A070                 push    ecx             ; Str
.text$mn:0000A071                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:0000A076                 add     esp, 4
.text$mn:0000A079                 push    eax
.text$mn:0000A07A                 mov     edx, [ebp+Str]
.text$mn:0000A07D                 push    edx
.text$mn:0000A07E                 mov     eax, [ebp+var_4]
.text$mn:0000A081                 mov     ecx, [eax+14h]
.text$mn:0000A084                 push    ecx
.text$mn:0000A085                 push    0
.text$mn:0000A087                 mov     ecx, [ebp+var_4]
.text$mn:0000A08A                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)
.text$mn:0000A08F                 mov     esp, ebp
.text$mn:0000A091                 pop     ebp
.text$mn:0000A092                 retn    4
.text$mn:0000A092 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z endp
.text$mn:0000A092
.text$mn:0000A092 ; ---------------------------------------------------------------------------
.text$mn:0000A095                 align 4
.text$mn:0000A095 _text$mn        ends
.text$mn:0000A095
.text$mn:0000A098 ; ===========================================================================
.text$mn:0000A098
.text$mn:0000A098 ; Segment type: Pure code
.text$mn:0000A098 ; Segment permissions: Read/Execute
.text$mn:0000A098 _text$mn        segment para public 'CODE' use32
.text$mn:0000A098                 assume cs:_text$mn
.text$mn:0000A098                 ;org 0A098h
.text$mn:0000A098 ; COMDAT (pick any)
.text$mn:0000A098                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A098
.text$mn:0000A098 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A098
.text$mn:0000A098 ; Attributes: bp-based frame
.text$mn:0000A098
.text$mn:0000A098 ; public: static int __cdecl std::char_traits<wchar_t>::compare(wchar_t const *, wchar_t const *, unsigned int)
.text$mn:0000A098                 public ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z
.text$mn:0000A098 ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z proc near
.text$mn:0000A098                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+7Fp
.text$mn:0000A098                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+CBp ...
.text$mn:0000A098
.text$mn:0000A098 var_4           = dword ptr -4
.text$mn:0000A098 arg_0           = dword ptr  8
.text$mn:0000A098 arg_4           = dword ptr  0Ch
.text$mn:0000A098 arg_8           = dword ptr  10h
.text$mn:0000A098
.text$mn:0000A098                 push    ebp
.text$mn:0000A099                 mov     ebp, esp
.text$mn:0000A09B                 push    ecx
.text$mn:0000A09C                 cmp     [ebp+arg_8], 0
.text$mn:0000A0A0                 jnz     short loc_A0AB
.text$mn:0000A0A2                 mov     [ebp+var_4], 0
.text$mn:0000A0A9                 jmp     short loc_A0C2
.text$mn:0000A0AB ; ---------------------------------------------------------------------------
.text$mn:0000A0AB
.text$mn:0000A0AB loc_A0AB:                               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+8j
.text$mn:0000A0AB                 mov     eax, [ebp+arg_8]
.text$mn:0000A0AE                 push    eax
.text$mn:0000A0AF                 mov     ecx, [ebp+arg_4]
.text$mn:0000A0B2                 push    ecx
.text$mn:0000A0B3                 mov     edx, [ebp+arg_0]
.text$mn:0000A0B6                 push    edx
.text$mn:0000A0B7                 call    _wmemcmp
.text$mn:0000A0BC                 add     esp, 0Ch
.text$mn:0000A0BF                 mov     [ebp+var_4], eax
.text$mn:0000A0C2
.text$mn:0000A0C2 loc_A0C2:                               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+11j
.text$mn:0000A0C2                 mov     eax, [ebp+var_4]
.text$mn:0000A0C5                 mov     esp, ebp
.text$mn:0000A0C7                 pop     ebp
.text$mn:0000A0C8                 retn
.text$mn:0000A0C8 ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z endp
.text$mn:0000A0C8
.text$mn:0000A0C8 ; ---------------------------------------------------------------------------
.text$mn:0000A0C9                 align 4
.text$mn:0000A0C9 _text$mn        ends
.text$mn:0000A0C9
.text$mn:0000A0CC ; ===========================================================================
.text$mn:0000A0CC
.text$mn:0000A0CC ; Segment type: Pure code
.text$mn:0000A0CC ; Segment permissions: Read/Execute
.text$mn:0000A0CC _text$mn        segment para public 'CODE' use32
.text$mn:0000A0CC                 assume cs:_text$mn
.text$mn:0000A0CC                 ;org 0A0CCh
.text$mn:0000A0CC ; COMDAT (pick any)
.text$mn:0000A0CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A0CC
.text$mn:0000A0CC ; =============== S U B R O U T I N E =======================================
.text$mn:0000A0CC
.text$mn:0000A0CC ; Attributes: bp-based frame
.text$mn:0000A0CC
.text$mn:0000A0CC ; int __stdcall std::allocator<int>::construct(void *, int)
.text$mn:0000A0CC                 public ?construct@?$allocator@H@std@@QAEXPAHABH@Z
.text$mn:0000A0CC ?construct@?$allocator@H@std@@QAEXPAHABH@Z proc near
.text$mn:0000A0CC                                         ; CODE XREF: std::allocator_traits<std::allocator<int>>::construct<int,int const &>(std::allocator<int> &,int *,int const &)+17p
.text$mn:0000A0CC
.text$mn:0000A0CC var_C           = dword ptr -0Ch
.text$mn:0000A0CC var_8           = dword ptr -8
.text$mn:0000A0CC var_4           = dword ptr -4
.text$mn:0000A0CC arg_0           = dword ptr  8
.text$mn:0000A0CC arg_4           = dword ptr  0Ch
.text$mn:0000A0CC
.text$mn:0000A0CC                 push    ebp
.text$mn:0000A0CD                 mov     ebp, esp
.text$mn:0000A0CF                 sub     esp, 0Ch
.text$mn:0000A0D2                 mov     [ebp+var_C], ecx
.text$mn:0000A0D5                 mov     eax, [ebp+arg_0]
.text$mn:0000A0D8                 push    eax             ; void *
.text$mn:0000A0D9                 push    4               ; unsigned int
.text$mn:0000A0DB                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:0000A0E0                 add     esp, 8
.text$mn:0000A0E3                 mov     [ebp+var_4], eax
.text$mn:0000A0E6                 cmp     [ebp+var_4], 0
.text$mn:0000A0EA                 jz      short loc_A0FE
.text$mn:0000A0EC                 mov     ecx, [ebp+var_4]
.text$mn:0000A0EF                 mov     edx, [ebp+arg_4]
.text$mn:0000A0F2                 mov     eax, [edx]
.text$mn:0000A0F4                 mov     [ecx], eax
.text$mn:0000A0F6                 mov     ecx, [ebp+var_4]
.text$mn:0000A0F9                 mov     [ebp+var_8], ecx
.text$mn:0000A0FC                 jmp     short loc_A105
.text$mn:0000A0FE ; ---------------------------------------------------------------------------
.text$mn:0000A0FE
.text$mn:0000A0FE loc_A0FE:                               ; CODE XREF: std::allocator<int>::construct(int *,int const &)+1Ej
.text$mn:0000A0FE                 mov     [ebp+var_8], 0
.text$mn:0000A105
.text$mn:0000A105 loc_A105:                               ; CODE XREF: std::allocator<int>::construct(int *,int const &)+30j
.text$mn:0000A105                 mov     esp, ebp
.text$mn:0000A107                 pop     ebp
.text$mn:0000A108                 retn    8
.text$mn:0000A108 ?construct@?$allocator@H@std@@QAEXPAHABH@Z endp
.text$mn:0000A108
.text$mn:0000A108 ; ---------------------------------------------------------------------------
.text$mn:0000A10B                 align 4
.text$mn:0000A10B _text$mn        ends
.text$mn:0000A10B
.text$mn:0000A10C ; ===========================================================================
.text$mn:0000A10C
.text$mn:0000A10C ; Segment type: Pure code
.text$mn:0000A10C ; Segment permissions: Read/Execute
.text$mn:0000A10C _text$mn        segment para public 'CODE' use32
.text$mn:0000A10C                 assume cs:_text$mn
.text$mn:0000A10C                 ;org 0A10Ch
.text$mn:0000A10C ; COMDAT (pick any)
.text$mn:0000A10C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A10C
.text$mn:0000A10C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A10C
.text$mn:0000A10C ; Attributes: bp-based frame
.text$mn:0000A10C
.text$mn:0000A10C ; int __cdecl std::char_traits<char>::copy(void *Dst, void *Src, size_t Size)
.text$mn:0000A10C                 public ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:0000A10C ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near ; CODE XREF: $LN19+1Ep
.text$mn:0000A10C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+5Dp ...
.text$mn:0000A10C
.text$mn:0000A10C var_4           = dword ptr -4
.text$mn:0000A10C Dst             = dword ptr  8
.text$mn:0000A10C Src             = dword ptr  0Ch
.text$mn:0000A10C Size            = dword ptr  10h
.text$mn:0000A10C
.text$mn:0000A10C                 push    ebp
.text$mn:0000A10D                 mov     ebp, esp
.text$mn:0000A10F                 push    ecx
.text$mn:0000A110                 cmp     [ebp+Size], 0
.text$mn:0000A114                 jnz     short loc_A11E
.text$mn:0000A116                 mov     eax, [ebp+Dst]
.text$mn:0000A119                 mov     [ebp+var_4], eax
.text$mn:0000A11C                 jmp     short loc_A135
.text$mn:0000A11E ; ---------------------------------------------------------------------------
.text$mn:0000A11E
.text$mn:0000A11E loc_A11E:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+8j
.text$mn:0000A11E                 mov     ecx, [ebp+Size]
.text$mn:0000A121                 push    ecx             ; Size
.text$mn:0000A122                 mov     edx, [ebp+Src]
.text$mn:0000A125                 push    edx             ; Src
.text$mn:0000A126                 mov     eax, [ebp+Dst]
.text$mn:0000A129                 push    eax             ; Dst
.text$mn:0000A12A                 call    _memcpy
.text$mn:0000A12F                 add     esp, 0Ch
.text$mn:0000A132                 mov     [ebp+var_4], eax
.text$mn:0000A135
.text$mn:0000A135 loc_A135:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+10j
.text$mn:0000A135                 mov     eax, [ebp+var_4]
.text$mn:0000A138                 mov     esp, ebp
.text$mn:0000A13A                 pop     ebp
.text$mn:0000A13B                 retn
.text$mn:0000A13B ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:0000A13B
.text$mn:0000A13B _text$mn        ends
.text$mn:0000A13B
.text$mn:0000A13C ; ===========================================================================
.text$mn:0000A13C
.text$mn:0000A13C ; Segment type: Pure code
.text$mn:0000A13C ; Segment permissions: Read/Execute
.text$mn:0000A13C _text$mn        segment para public 'CODE' use32
.text$mn:0000A13C                 assume cs:_text$mn
.text$mn:0000A13C                 ;org 0A13Ch
.text$mn:0000A13C ; COMDAT (pick any)
.text$mn:0000A13C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A13C
.text$mn:0000A13C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A13C
.text$mn:0000A13C ; Attributes: bp-based frame
.text$mn:0000A13C
.text$mn:0000A13C ; int __cdecl std::char_traits<wchar_t>::copy(void *Dst, void *Src, int)
.text$mn:0000A13C                 public ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:0000A13C ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:0000A13C                                         ; CODE XREF: $LN19_0+1Ep
.text$mn:0000A13C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+5Dp ...
.text$mn:0000A13C
.text$mn:0000A13C var_4           = dword ptr -4
.text$mn:0000A13C Dst             = dword ptr  8
.text$mn:0000A13C Src             = dword ptr  0Ch
.text$mn:0000A13C arg_8           = dword ptr  10h
.text$mn:0000A13C
.text$mn:0000A13C                 push    ebp
.text$mn:0000A13D                 mov     ebp, esp
.text$mn:0000A13F                 push    ecx
.text$mn:0000A140                 cmp     [ebp+arg_8], 0
.text$mn:0000A144                 jnz     short loc_A14E
.text$mn:0000A146                 mov     eax, [ebp+Dst]
.text$mn:0000A149                 mov     [ebp+var_4], eax
.text$mn:0000A14C                 jmp     short loc_A165
.text$mn:0000A14E ; ---------------------------------------------------------------------------
.text$mn:0000A14E
.text$mn:0000A14E loc_A14E:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+8j
.text$mn:0000A14E                 mov     ecx, [ebp+arg_8]
.text$mn:0000A151                 push    ecx             ; int
.text$mn:0000A152                 mov     edx, [ebp+Src]
.text$mn:0000A155                 push    edx             ; Src
.text$mn:0000A156                 mov     eax, [ebp+Dst]
.text$mn:0000A159                 push    eax             ; Dst
.text$mn:0000A15A                 call    _wmemcpy
.text$mn:0000A15F                 add     esp, 0Ch
.text$mn:0000A162                 mov     [ebp+var_4], eax
.text$mn:0000A165
.text$mn:0000A165 loc_A165:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+10j
.text$mn:0000A165                 mov     eax, [ebp+var_4]
.text$mn:0000A168                 mov     esp, ebp
.text$mn:0000A16A                 pop     ebp
.text$mn:0000A16B                 retn
.text$mn:0000A16B ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:0000A16B
.text$mn:0000A16B _text$mn        ends
.text$mn:0000A16B
.text$mn:0000A16C ; ===========================================================================
.text$mn:0000A16C
.text$mn:0000A16C ; Segment type: Pure code
.text$mn:0000A16C ; Segment permissions: Read/Execute
.text$mn:0000A16C _text$mn        segment para public 'CODE' use32
.text$mn:0000A16C                 assume cs:_text$mn
.text$mn:0000A16C                 ;org 0A16Ch
.text$mn:0000A16C ; COMDAT (pick any)
.text$mn:0000A16C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A16C
.text$mn:0000A16C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A16C
.text$mn:0000A16C ; Attributes: bp-based frame
.text$mn:0000A16C
.text$mn:0000A16C ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::deallocate(void *, int)
.text$mn:0000A16C                 public ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
.text$mn:0000A16C ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
.text$mn:0000A16C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+81p
.text$mn:0000A16C
.text$mn:0000A16C var_4           = dword ptr -4
.text$mn:0000A16C arg_0           = dword ptr  8
.text$mn:0000A16C arg_4           = dword ptr  0Ch
.text$mn:0000A16C
.text$mn:0000A16C                 push    ebp
.text$mn:0000A16D                 mov     ebp, esp
.text$mn:0000A16F                 push    ecx
.text$mn:0000A170                 mov     [ebp+var_4], ecx
.text$mn:0000A173                 mov     eax, [ebp+arg_4]
.text$mn:0000A176                 push    eax             ; int
.text$mn:0000A177                 mov     ecx, [ebp+arg_0]
.text$mn:0000A17A                 push    ecx             ; void *
.text$mn:0000A17B                 mov     ecx, [ebp+var_4]
.text$mn:0000A17E                 call    ?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate(char *,uint)
.text$mn:0000A183                 mov     esp, ebp
.text$mn:0000A185                 pop     ebp
.text$mn:0000A186                 retn    8
.text$mn:0000A186 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z endp
.text$mn:0000A186
.text$mn:0000A186 ; ---------------------------------------------------------------------------
.text$mn:0000A189                 align 4
.text$mn:0000A189 _text$mn        ends
.text$mn:0000A189
.text$mn:0000A18C ; ===========================================================================
.text$mn:0000A18C
.text$mn:0000A18C ; Segment type: Pure code
.text$mn:0000A18C ; Segment permissions: Read/Execute
.text$mn:0000A18C _text$mn        segment para public 'CODE' use32
.text$mn:0000A18C                 assume cs:_text$mn
.text$mn:0000A18C                 ;org 0A18Ch
.text$mn:0000A18C ; COMDAT (pick any)
.text$mn:0000A18C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A18C
.text$mn:0000A18C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A18C
.text$mn:0000A18C ; Attributes: bp-based frame
.text$mn:0000A18C
.text$mn:0000A18C ; int __stdcall std::_Wrap_alloc<std::allocator<int>>::deallocate(void *, int)
.text$mn:0000A18C                 public ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z
.text$mn:0000A18C ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z proc near
.text$mn:0000A18C                                         ; CODE XREF: __catch$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$0+16p
.text$mn:0000A18C                                         ; std::vector<int,std::allocator<int>>::_Reallocate(uint)+F5p
.text$mn:0000A18C
.text$mn:0000A18C var_4           = dword ptr -4
.text$mn:0000A18C arg_0           = dword ptr  8
.text$mn:0000A18C arg_4           = dword ptr  0Ch
.text$mn:0000A18C
.text$mn:0000A18C                 push    ebp
.text$mn:0000A18D                 mov     ebp, esp
.text$mn:0000A18F                 push    ecx
.text$mn:0000A190                 mov     [ebp+var_4], ecx
.text$mn:0000A193                 mov     eax, [ebp+arg_4]
.text$mn:0000A196                 push    eax             ; int
.text$mn:0000A197                 mov     ecx, [ebp+arg_0]
.text$mn:0000A19A                 push    ecx             ; void *
.text$mn:0000A19B                 mov     ecx, [ebp+var_4]
.text$mn:0000A19E                 call    ?deallocate@?$allocator@H@std@@QAEXPAHI@Z ; std::allocator<int>::deallocate(int *,uint)
.text$mn:0000A1A3                 mov     esp, ebp
.text$mn:0000A1A5                 pop     ebp
.text$mn:0000A1A6                 retn    8
.text$mn:0000A1A6 ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z endp
.text$mn:0000A1A6
.text$mn:0000A1A6 ; ---------------------------------------------------------------------------
.text$mn:0000A1A9                 align 4
.text$mn:0000A1A9 _text$mn        ends
.text$mn:0000A1A9
.text$mn:0000A1AC ; ===========================================================================
.text$mn:0000A1AC
.text$mn:0000A1AC ; Segment type: Pure code
.text$mn:0000A1AC ; Segment permissions: Read/Execute
.text$mn:0000A1AC _text$mn        segment para public 'CODE' use32
.text$mn:0000A1AC                 assume cs:_text$mn
.text$mn:0000A1AC                 ;org 0A1ACh
.text$mn:0000A1AC ; COMDAT (pick any)
.text$mn:0000A1AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A1AC
.text$mn:0000A1AC ; =============== S U B R O U T I N E =======================================
.text$mn:0000A1AC
.text$mn:0000A1AC ; Attributes: bp-based frame
.text$mn:0000A1AC
.text$mn:0000A1AC ; int __stdcall std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::deallocate(void *, int)
.text$mn:0000A1AC                 public ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:0000A1AC ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:0000A1AC                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Free_proxy(void)+32p
.text$mn:0000A1AC
.text$mn:0000A1AC var_4           = dword ptr -4
.text$mn:0000A1AC arg_0           = dword ptr  8
.text$mn:0000A1AC arg_4           = dword ptr  0Ch
.text$mn:0000A1AC
.text$mn:0000A1AC                 push    ebp
.text$mn:0000A1AD                 mov     ebp, esp
.text$mn:0000A1AF                 push    ecx
.text$mn:0000A1B0                 mov     [ebp+var_4], ecx
.text$mn:0000A1B3                 mov     eax, [ebp+arg_4]
.text$mn:0000A1B6                 push    eax             ; int
.text$mn:0000A1B7                 mov     ecx, [ebp+arg_0]
.text$mn:0000A1BA                 push    ecx             ; void *
.text$mn:0000A1BB                 mov     ecx, [ebp+var_4]
.text$mn:0000A1BE                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000A1C3                 mov     esp, ebp
.text$mn:0000A1C5                 pop     ebp
.text$mn:0000A1C6                 retn    8
.text$mn:0000A1C6 ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:0000A1C6
.text$mn:0000A1C6 ; ---------------------------------------------------------------------------
.text$mn:0000A1C9                 align 4
.text$mn:0000A1C9 _text$mn        ends
.text$mn:0000A1C9
.text$mn:0000A1CC ; ===========================================================================
.text$mn:0000A1CC
.text$mn:0000A1CC ; Segment type: Pure code
.text$mn:0000A1CC ; Segment permissions: Read/Execute
.text$mn:0000A1CC _text$mn        segment para public 'CODE' use32
.text$mn:0000A1CC                 assume cs:_text$mn
.text$mn:0000A1CC                 ;org 0A1CCh
.text$mn:0000A1CC ; COMDAT (pick any)
.text$mn:0000A1CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A1CC
.text$mn:0000A1CC ; =============== S U B R O U T I N E =======================================
.text$mn:0000A1CC
.text$mn:0000A1CC ; Attributes: bp-based frame
.text$mn:0000A1CC
.text$mn:0000A1CC ; int __stdcall std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(void *, int)
.text$mn:0000A1CC                 public ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:0000A1CC ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:0000A1CC                                         ; CODE XREF: __catch$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$0+16p
.text$mn:0000A1CC                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+FAp ...
.text$mn:0000A1CC
.text$mn:0000A1CC var_4           = dword ptr -4
.text$mn:0000A1CC arg_0           = dword ptr  8
.text$mn:0000A1CC arg_4           = dword ptr  0Ch
.text$mn:0000A1CC
.text$mn:0000A1CC                 push    ebp
.text$mn:0000A1CD                 mov     ebp, esp
.text$mn:0000A1CF                 push    ecx
.text$mn:0000A1D0                 mov     [ebp+var_4], ecx
.text$mn:0000A1D3                 mov     eax, [ebp+arg_4]
.text$mn:0000A1D6                 push    eax             ; int
.text$mn:0000A1D7                 mov     ecx, [ebp+arg_0]
.text$mn:0000A1DA                 push    ecx             ; void *
.text$mn:0000A1DB                 mov     ecx, [ebp+var_4]
.text$mn:0000A1DE                 call    ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)
.text$mn:0000A1E3                 mov     esp, ebp
.text$mn:0000A1E5                 pop     ebp
.text$mn:0000A1E6                 retn    8
.text$mn:0000A1E6 ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:0000A1E6
.text$mn:0000A1E6 ; ---------------------------------------------------------------------------
.text$mn:0000A1E9                 align 4
.text$mn:0000A1E9 _text$mn        ends
.text$mn:0000A1E9
.text$mn:0000A1EC ; ===========================================================================
.text$mn:0000A1EC
.text$mn:0000A1EC ; Segment type: Pure code
.text$mn:0000A1EC ; Segment permissions: Read/Execute
.text$mn:0000A1EC _text$mn        segment para public 'CODE' use32
.text$mn:0000A1EC                 assume cs:_text$mn
.text$mn:0000A1EC                 ;org 0A1ECh
.text$mn:0000A1EC ; COMDAT (pick any)
.text$mn:0000A1EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A1EC
.text$mn:0000A1EC ; =============== S U B R O U T I N E =======================================
.text$mn:0000A1EC
.text$mn:0000A1EC ; Attributes: bp-based frame
.text$mn:0000A1EC
.text$mn:0000A1EC ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(void *, int)
.text$mn:0000A1EC                 public ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z
.text$mn:0000A1EC ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z proc near
.text$mn:0000A1EC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+81p
.text$mn:0000A1EC
.text$mn:0000A1EC var_4           = dword ptr -4
.text$mn:0000A1EC arg_0           = dword ptr  8
.text$mn:0000A1EC arg_4           = dword ptr  0Ch
.text$mn:0000A1EC
.text$mn:0000A1EC                 push    ebp
.text$mn:0000A1ED                 mov     ebp, esp
.text$mn:0000A1EF                 push    ecx
.text$mn:0000A1F0                 mov     [ebp+var_4], ecx
.text$mn:0000A1F3                 mov     eax, [ebp+arg_4]
.text$mn:0000A1F6                 push    eax             ; int
.text$mn:0000A1F7                 mov     ecx, [ebp+arg_0]
.text$mn:0000A1FA                 push    ecx             ; void *
.text$mn:0000A1FB                 mov     ecx, [ebp+var_4]
.text$mn:0000A1FE                 call    ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ; std::allocator<wchar_t>::deallocate(wchar_t *,uint)
.text$mn:0000A203                 mov     esp, ebp
.text$mn:0000A205                 pop     ebp
.text$mn:0000A206                 retn    8
.text$mn:0000A206 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z endp
.text$mn:0000A206
.text$mn:0000A206 ; ---------------------------------------------------------------------------
.text$mn:0000A209                 align 4
.text$mn:0000A209 _text$mn        ends
.text$mn:0000A209
.text$mn:0000A20C ; ===========================================================================
.text$mn:0000A20C
.text$mn:0000A20C ; Segment type: Pure code
.text$mn:0000A20C ; Segment permissions: Read/Execute
.text$mn:0000A20C _text$mn        segment para public 'CODE' use32
.text$mn:0000A20C                 assume cs:_text$mn
.text$mn:0000A20C                 ;org 0A20Ch
.text$mn:0000A20C ; COMDAT (pick any)
.text$mn:0000A20C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A20C
.text$mn:0000A20C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A20C
.text$mn:0000A20C ; Attributes: bp-based frame
.text$mn:0000A20C
.text$mn:0000A20C ; int __stdcall std::allocator<char>::deallocate(void *, int)
.text$mn:0000A20C                 public ?deallocate@?$allocator@D@std@@QAEXPADI@Z
.text$mn:0000A20C ?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
.text$mn:0000A20C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)+12p
.text$mn:0000A20C
.text$mn:0000A20C var_4           = dword ptr -4
.text$mn:0000A20C arg_0           = dword ptr  8
.text$mn:0000A20C
.text$mn:0000A20C                 push    ebp
.text$mn:0000A20D                 mov     ebp, esp
.text$mn:0000A20F                 push    ecx
.text$mn:0000A210                 mov     [ebp+var_4], ecx
.text$mn:0000A213                 mov     eax, [ebp+arg_0]
.text$mn:0000A216                 push    eax             ; void *
.text$mn:0000A217                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000A21C                 add     esp, 4
.text$mn:0000A21F                 mov     esp, ebp
.text$mn:0000A221                 pop     ebp
.text$mn:0000A222                 retn    8
.text$mn:0000A222 ?deallocate@?$allocator@D@std@@QAEXPADI@Z endp
.text$mn:0000A222
.text$mn:0000A222 ; ---------------------------------------------------------------------------
.text$mn:0000A225                 align 4
.text$mn:0000A225 _text$mn        ends
.text$mn:0000A225
.text$mn:0000A228 ; ===========================================================================
.text$mn:0000A228
.text$mn:0000A228 ; Segment type: Pure code
.text$mn:0000A228 ; Segment permissions: Read/Execute
.text$mn:0000A228 _text$mn        segment para public 'CODE' use32
.text$mn:0000A228                 assume cs:_text$mn
.text$mn:0000A228                 ;org 0A228h
.text$mn:0000A228 ; COMDAT (pick any)
.text$mn:0000A228                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A228
.text$mn:0000A228 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A228
.text$mn:0000A228 ; Attributes: bp-based frame
.text$mn:0000A228
.text$mn:0000A228 ; int __stdcall std::allocator<int>::deallocate(void *, int)
.text$mn:0000A228                 public ?deallocate@?$allocator@H@std@@QAEXPAHI@Z
.text$mn:0000A228 ?deallocate@?$allocator@H@std@@QAEXPAHI@Z proc near
.text$mn:0000A228                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<int>>::deallocate(int *,uint)+12p
.text$mn:0000A228
.text$mn:0000A228 var_4           = dword ptr -4
.text$mn:0000A228 arg_0           = dword ptr  8
.text$mn:0000A228
.text$mn:0000A228                 push    ebp
.text$mn:0000A229                 mov     ebp, esp
.text$mn:0000A22B                 push    ecx
.text$mn:0000A22C                 mov     [ebp+var_4], ecx
.text$mn:0000A22F                 mov     eax, [ebp+arg_0]
.text$mn:0000A232                 push    eax             ; void *
.text$mn:0000A233                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000A238                 add     esp, 4
.text$mn:0000A23B                 mov     esp, ebp
.text$mn:0000A23D                 pop     ebp
.text$mn:0000A23E                 retn    8
.text$mn:0000A23E ?deallocate@?$allocator@H@std@@QAEXPAHI@Z endp
.text$mn:0000A23E
.text$mn:0000A23E ; ---------------------------------------------------------------------------
.text$mn:0000A241                 align 4
.text$mn:0000A241 _text$mn        ends
.text$mn:0000A241
.text$mn:0000A244 ; ===========================================================================
.text$mn:0000A244
.text$mn:0000A244 ; Segment type: Pure code
.text$mn:0000A244 ; Segment permissions: Read/Execute
.text$mn:0000A244 _text$mn        segment para public 'CODE' use32
.text$mn:0000A244                 assume cs:_text$mn
.text$mn:0000A244                 ;org 0A244h
.text$mn:0000A244 ; COMDAT (pick any)
.text$mn:0000A244                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A244
.text$mn:0000A244 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A244
.text$mn:0000A244 ; Attributes: bp-based frame
.text$mn:0000A244
.text$mn:0000A244 ; int __stdcall std::allocator<std::_Container_proxy>::deallocate(void *, int)
.text$mn:0000A244                 public ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:0000A244 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:0000A244                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+32p
.text$mn:0000A244                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)+32p ...
.text$mn:0000A244
.text$mn:0000A244 var_4           = dword ptr -4
.text$mn:0000A244 arg_0           = dword ptr  8
.text$mn:0000A244
.text$mn:0000A244                 push    ebp
.text$mn:0000A245                 mov     ebp, esp
.text$mn:0000A247                 push    ecx
.text$mn:0000A248                 mov     [ebp+var_4], ecx
.text$mn:0000A24B                 mov     eax, [ebp+arg_0]
.text$mn:0000A24E                 push    eax             ; void *
.text$mn:0000A24F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000A254                 add     esp, 4
.text$mn:0000A257                 mov     esp, ebp
.text$mn:0000A259                 pop     ebp
.text$mn:0000A25A                 retn    8
.text$mn:0000A25A ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:0000A25A
.text$mn:0000A25A ; ---------------------------------------------------------------------------
.text$mn:0000A25D                 align 10h
.text$mn:0000A25D _text$mn        ends
.text$mn:0000A25D
.text$mn:0000A260 ; ===========================================================================
.text$mn:0000A260
.text$mn:0000A260 ; Segment type: Pure code
.text$mn:0000A260 ; Segment permissions: Read/Execute
.text$mn:0000A260 _text$mn        segment para public 'CODE' use32
.text$mn:0000A260                 assume cs:_text$mn
.text$mn:0000A260                 ;org 0A260h
.text$mn:0000A260 ; COMDAT (pick any)
.text$mn:0000A260                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A260
.text$mn:0000A260 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A260
.text$mn:0000A260 ; Attributes: bp-based frame
.text$mn:0000A260
.text$mn:0000A260 ; int __stdcall std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::deallocate(void *, int)
.text$mn:0000A260                 public ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:0000A260 ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:0000A260                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)+12p
.text$mn:0000A260
.text$mn:0000A260 var_4           = dword ptr -4
.text$mn:0000A260 arg_0           = dword ptr  8
.text$mn:0000A260
.text$mn:0000A260                 push    ebp
.text$mn:0000A261                 mov     ebp, esp
.text$mn:0000A263                 push    ecx
.text$mn:0000A264                 mov     [ebp+var_4], ecx
.text$mn:0000A267                 mov     eax, [ebp+arg_0]
.text$mn:0000A26A                 push    eax             ; void *
.text$mn:0000A26B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000A270                 add     esp, 4
.text$mn:0000A273                 mov     esp, ebp
.text$mn:0000A275                 pop     ebp
.text$mn:0000A276                 retn    8
.text$mn:0000A276 ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:0000A276
.text$mn:0000A276 ; ---------------------------------------------------------------------------
.text$mn:0000A279                 align 4
.text$mn:0000A279 _text$mn        ends
.text$mn:0000A279
.text$mn:0000A27C ; ===========================================================================
.text$mn:0000A27C
.text$mn:0000A27C ; Segment type: Pure code
.text$mn:0000A27C ; Segment permissions: Read/Execute
.text$mn:0000A27C _text$mn        segment para public 'CODE' use32
.text$mn:0000A27C                 assume cs:_text$mn
.text$mn:0000A27C                 ;org 0A27Ch
.text$mn:0000A27C ; COMDAT (pick any)
.text$mn:0000A27C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A27C
.text$mn:0000A27C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A27C
.text$mn:0000A27C ; Attributes: bp-based frame
.text$mn:0000A27C
.text$mn:0000A27C ; int __stdcall std::allocator<wchar_t>::deallocate(void *, int)
.text$mn:0000A27C                 public ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
.text$mn:0000A27C ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z proc near
.text$mn:0000A27C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)+12p
.text$mn:0000A27C
.text$mn:0000A27C var_4           = dword ptr -4
.text$mn:0000A27C arg_0           = dword ptr  8
.text$mn:0000A27C
.text$mn:0000A27C                 push    ebp
.text$mn:0000A27D                 mov     ebp, esp
.text$mn:0000A27F                 push    ecx
.text$mn:0000A280                 mov     [ebp+var_4], ecx
.text$mn:0000A283                 mov     eax, [ebp+arg_0]
.text$mn:0000A286                 push    eax             ; void *
.text$mn:0000A287                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000A28C                 add     esp, 4
.text$mn:0000A28F                 mov     esp, ebp
.text$mn:0000A291                 pop     ebp
.text$mn:0000A292                 retn    8
.text$mn:0000A292 ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z endp
.text$mn:0000A292
.text$mn:0000A292 ; ---------------------------------------------------------------------------
.text$mn:0000A295                 align 4
.text$mn:0000A295 _text$mn        ends
.text$mn:0000A295
.text$mn:0000A298 ; ===========================================================================
.text$mn:0000A298
.text$mn:0000A298 ; Segment type: Pure code
.text$mn:0000A298 ; Segment permissions: Read/Execute
.text$mn:0000A298 _text$mn        segment para public 'CODE' use32
.text$mn:0000A298                 assume cs:_text$mn
.text$mn:0000A298                 ;org 0A298h
.text$mn:0000A298 ; COMDAT (pick any)
.text$mn:0000A298                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A298
.text$mn:0000A298 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A298
.text$mn:0000A298 ; Attributes: bp-based frame
.text$mn:0000A298
.text$mn:0000A298 ; public: virtual class std::error_condition __thiscall std::_System_error_category::default_error_condition(int)const
.text$mn:0000A298                 public ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:0000A298 ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:0000A298                                         ; DATA XREF: .rdata:0000D19Co
.text$mn:0000A298
.text$mn:0000A298 var_4           = dword ptr -4
.text$mn:0000A298 arg_0           = dword ptr  8
.text$mn:0000A298 arg_4           = dword ptr  0Ch
.text$mn:0000A298
.text$mn:0000A298                 push    ebp
.text$mn:0000A299                 mov     ebp, esp
.text$mn:0000A29B                 push    ecx
.text$mn:0000A29C                 mov     [ebp+var_4], ecx
.text$mn:0000A29F                 mov     eax, [ebp+arg_4]
.text$mn:0000A2A2                 push    eax             ; int
.text$mn:0000A2A3                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:0000A2A8                 add     esp, 4
.text$mn:0000A2AB                 test    eax, eax
.text$mn:0000A2AD                 jz      short loc_A2C8
.text$mn:0000A2AF                 call    ?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category(void)
.text$mn:0000A2B4                 push    eax             ; struct std::error_category *
.text$mn:0000A2B5                 mov     ecx, [ebp+arg_4]
.text$mn:0000A2B8                 push    ecx             ; int
.text$mn:0000A2B9                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000A2BC                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000A2C1                 mov     eax, [ebp+arg_0]
.text$mn:0000A2C4                 jmp     short loc_A2DD
.text$mn:0000A2C6 ; ---------------------------------------------------------------------------
.text$mn:0000A2C6                 jmp     short loc_A2DD
.text$mn:0000A2C8 ; ---------------------------------------------------------------------------
.text$mn:0000A2C8
.text$mn:0000A2C8 loc_A2C8:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+15j
.text$mn:0000A2C8                 call    ?system_category@std@@YAABVerror_category@1@XZ ; std::system_category(void)
.text$mn:0000A2CD                 push    eax             ; struct std::error_category *
.text$mn:0000A2CE                 mov     edx, [ebp+arg_4]
.text$mn:0000A2D1                 push    edx             ; int
.text$mn:0000A2D2                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000A2D5                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000A2DA                 mov     eax, [ebp+arg_0]
.text$mn:0000A2DD
.text$mn:0000A2DD loc_A2DD:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+2Cj
.text$mn:0000A2DD                                         ; std::_System_error_category::default_error_condition(int)+2Ej
.text$mn:0000A2DD                 mov     esp, ebp
.text$mn:0000A2DF                 pop     ebp
.text$mn:0000A2E0                 retn    8
.text$mn:0000A2E0 ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:0000A2E0
.text$mn:0000A2E0 ; ---------------------------------------------------------------------------
.text$mn:0000A2E3                 align 4
.text$mn:0000A2E3 _text$mn        ends
.text$mn:0000A2E3
.text$mn:0000A2E4 ; ===========================================================================
.text$mn:0000A2E4
.text$mn:0000A2E4 ; Segment type: Pure code
.text$mn:0000A2E4 ; Segment permissions: Read/Execute
.text$mn:0000A2E4 _text$mn        segment para public 'CODE' use32
.text$mn:0000A2E4                 assume cs:_text$mn
.text$mn:0000A2E4                 ;org 0A2E4h
.text$mn:0000A2E4 ; COMDAT (pick any)
.text$mn:0000A2E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A2E4
.text$mn:0000A2E4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A2E4
.text$mn:0000A2E4 ; Attributes: bp-based frame
.text$mn:0000A2E4
.text$mn:0000A2E4 ; public: virtual class std::error_condition __thiscall std::error_category::default_error_condition(int)const
.text$mn:0000A2E4                 public ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:0000A2E4 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:0000A2E4                                         ; DATA XREF: .rdata:0000D10Co
.text$mn:0000A2E4                                         ; .rdata:0000D128o ...
.text$mn:0000A2E4
.text$mn:0000A2E4 var_4           = dword ptr -4
.text$mn:0000A2E4 arg_0           = dword ptr  8
.text$mn:0000A2E4 arg_4           = dword ptr  0Ch
.text$mn:0000A2E4
.text$mn:0000A2E4                 push    ebp
.text$mn:0000A2E5                 mov     ebp, esp
.text$mn:0000A2E7                 push    ecx
.text$mn:0000A2E8                 mov     [ebp+var_4], ecx
.text$mn:0000A2EB                 mov     eax, [ebp+var_4]
.text$mn:0000A2EE                 push    eax             ; struct std::error_category *
.text$mn:0000A2EF                 mov     ecx, [ebp+arg_4]
.text$mn:0000A2F2                 push    ecx             ; int
.text$mn:0000A2F3                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000A2F6                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000A2FB                 mov     eax, [ebp+arg_0]
.text$mn:0000A2FE                 mov     esp, ebp
.text$mn:0000A300                 pop     ebp
.text$mn:0000A301                 retn    8
.text$mn:0000A301 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:0000A301
.text$mn:0000A301 _text$mn        ends
.text$mn:0000A301
.text$mn:0000A304 ; ===========================================================================
.text$mn:0000A304
.text$mn:0000A304 ; Segment type: Pure code
.text$mn:0000A304 ; Segment permissions: Read/Execute
.text$mn:0000A304 _text$mn        segment para public 'CODE' use32
.text$mn:0000A304                 assume cs:_text$mn
.text$mn:0000A304                 ;org 0A304h
.text$mn:0000A304 ; COMDAT (pick any)
.text$mn:0000A304                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A304
.text$mn:0000A304 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A304
.text$mn:0000A304 ; Attributes: bp-based frame
.text$mn:0000A304
.text$mn:0000A304 ; void __thiscall FileRelocalizerDlg::destroy(FileRelocalizerDlg *__hidden this)
.text$mn:0000A304                 public ?destroy@FileRelocalizerDlg@@UAEXXZ
.text$mn:0000A304 ?destroy@FileRelocalizerDlg@@UAEXXZ proc near
.text$mn:0000A304                                         ; DATA XREF: .rdata:0000D248o
.text$mn:0000A304
.text$mn:0000A304 var_4           = dword ptr -4
.text$mn:0000A304
.text$mn:0000A304                 push    ebp
.text$mn:0000A305                 mov     ebp, esp
.text$mn:0000A307                 push    ecx
.text$mn:0000A308                 mov     [ebp+var_4], ecx
.text$mn:0000A30B                 mov     esp, ebp
.text$mn:0000A30D                 pop     ebp
.text$mn:0000A30E                 retn
.text$mn:0000A30E ?destroy@FileRelocalizerDlg@@UAEXXZ endp
.text$mn:0000A30E
.text$mn:0000A30E ; ---------------------------------------------------------------------------
.text$mn:0000A30F                 align 10h
.text$mn:0000A30F _text$mn        ends
.text$mn:0000A30F
.text$mn:0000A310 ; ===========================================================================
.text$mn:0000A310
.text$mn:0000A310 ; Segment type: Pure code
.text$mn:0000A310 ; Segment permissions: Read/Execute
.text$mn:0000A310 _text$mn        segment para public 'CODE' use32
.text$mn:0000A310                 assume cs:_text$mn
.text$mn:0000A310                 ;org 0A310h
.text$mn:0000A310 ; COMDAT (pick any)
.text$mn:0000A310                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A310
.text$mn:0000A310 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A310
.text$mn:0000A310 ; Attributes: bp-based frame
.text$mn:0000A310
.text$mn:0000A310 ; void __thiscall StaticDialog::destroy(StaticDialog *__hidden this)
.text$mn:0000A310                 public ?destroy@StaticDialog@@UAEXXZ
.text$mn:0000A310 ?destroy@StaticDialog@@UAEXXZ proc near ; CODE XREF: StaticDialog::~StaticDialog(void)+59p
.text$mn:0000A310                                         ; DATA XREF: .rdata:0000D208o
.text$mn:0000A310
.text$mn:0000A310 var_4           = dword ptr -4
.text$mn:0000A310
.text$mn:0000A310                 push    ebp
.text$mn:0000A311                 mov     ebp, esp
.text$mn:0000A313                 push    ecx
.text$mn:0000A314                 mov     [ebp+var_4], ecx
.text$mn:0000A317                 mov     eax, [ebp+var_4]
.text$mn:0000A31A                 mov     ecx, [eax+0Ch]
.text$mn:0000A31D                 push    ecx             ; lParam
.text$mn:0000A31E                 push    1               ; wParam
.text$mn:0000A320                 push    7F4h            ; Msg
.text$mn:0000A325                 mov     edx, [ebp+var_4]
.text$mn:0000A328                 mov     eax, [edx+8]
.text$mn:0000A32B                 push    eax             ; hWnd
.text$mn:0000A32C                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000A332                 mov     ecx, [ebp+var_4]
.text$mn:0000A335                 mov     edx, [ecx+0Ch]
.text$mn:0000A338                 push    edx             ; hWnd
.text$mn:0000A339                 call    dword ptr ds:__imp__DestroyWindow@4 ; DestroyWindow(x)
.text$mn:0000A33F                 mov     esp, ebp
.text$mn:0000A341                 pop     ebp
.text$mn:0000A342                 retn
.text$mn:0000A342 ?destroy@StaticDialog@@UAEXXZ endp
.text$mn:0000A342
.text$mn:0000A342 ; ---------------------------------------------------------------------------
.text$mn:0000A343                 align 4
.text$mn:0000A343 _text$mn        ends
.text$mn:0000A343
.text$mn:0000A344 ; ===========================================================================
.text$mn:0000A344
.text$mn:0000A344 ; Segment type: Pure code
.text$mn:0000A344 ; Segment permissions: Read/Execute
.text$mn:0000A344 _text$mn        segment para public 'CODE' use32
.text$mn:0000A344                 assume cs:_text$mn
.text$mn:0000A344                 ;org 0A344h
.text$mn:0000A344 ; COMDAT (pick any)
.text$mn:0000A344                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A344
.text$mn:0000A344 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A344
.text$mn:0000A344 ; Attributes: bp-based frame
.text$mn:0000A344
.text$mn:0000A344 ; void __thiscall Window::display(Window *this, bool)
.text$mn:0000A344                 public ?display@Window@@UBEX_N@Z
.text$mn:0000A344 ?display@Window@@UBEX_N@Z proc near     ; DATA XREF: .rdata:0000D1D8o
.text$mn:0000A344
.text$mn:0000A344 var_8           = dword ptr -8
.text$mn:0000A344 nCmdShow        = dword ptr -4
.text$mn:0000A344 arg_0           = byte ptr  8
.text$mn:0000A344
.text$mn:0000A344                 push    ebp
.text$mn:0000A345                 mov     ebp, esp
.text$mn:0000A347                 sub     esp, 8
.text$mn:0000A34A                 mov     [ebp+var_8], ecx
.text$mn:0000A34D                 movzx   eax, [ebp+arg_0]
.text$mn:0000A351                 test    eax, eax
.text$mn:0000A353                 jz      short loc_A35E
.text$mn:0000A355                 mov     [ebp+nCmdShow], 5
.text$mn:0000A35C                 jmp     short loc_A365
.text$mn:0000A35E ; ---------------------------------------------------------------------------
.text$mn:0000A35E
.text$mn:0000A35E loc_A35E:                               ; CODE XREF: Window::display(bool)+Fj
.text$mn:0000A35E                 mov     [ebp+nCmdShow], 0
.text$mn:0000A365
.text$mn:0000A365 loc_A365:                               ; CODE XREF: Window::display(bool)+18j
.text$mn:0000A365                 mov     ecx, [ebp+nCmdShow]
.text$mn:0000A368                 push    ecx             ; nCmdShow
.text$mn:0000A369                 mov     edx, [ebp+var_8]
.text$mn:0000A36C                 mov     eax, [edx+0Ch]
.text$mn:0000A36F                 push    eax             ; hWnd
.text$mn:0000A370                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:0000A376                 mov     esp, ebp
.text$mn:0000A378                 pop     ebp
.text$mn:0000A379                 retn    4
.text$mn:0000A379 ?display@Window@@UBEX_N@Z endp
.text$mn:0000A379
.text$mn:0000A379 _text$mn        ends
.text$mn:0000A379
.text$mn:0000A37C ; ===========================================================================
.text$mn:0000A37C
.text$mn:0000A37C ; Segment type: Pure code
.text$mn:0000A37C ; Segment permissions: Read/Execute
.text$mn:0000A37C _text$mn        segment para public 'CODE' use32
.text$mn:0000A37C                 assume cs:_text$mn
.text$mn:0000A37C                 ;org 0A37Ch
.text$mn:0000A37C ; COMDAT (pick any)
.text$mn:0000A37C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A37C
.text$mn:0000A37C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A37C
.text$mn:0000A37C ; Attributes: bp-based frame
.text$mn:0000A37C
.text$mn:0000A37C ; public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>> __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::end(void)
.text$mn:0000A37C                 public ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:0000A37C ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$mn:0000A37C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+72p
.text$mn:0000A37C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+8Ep
.text$mn:0000A37C
.text$mn:0000A37C var_14          = dword ptr -14h
.text$mn:0000A37C var_10          = dword ptr -10h
.text$mn:0000A37C var_C           = dword ptr -0Ch
.text$mn:0000A37C var_4           = dword ptr -4
.text$mn:0000A37C arg_0           = dword ptr  8
.text$mn:0000A37C
.text$mn:0000A37C                 push    ebp
.text$mn:0000A37D                 mov     ebp, esp
.text$mn:0000A37F                 push    0FFFFFFFFh
.text$mn:0000A381                 push    offset __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:0000A386                 mov     eax, large fs:0
.text$mn:0000A38C                 push    eax
.text$mn:0000A38D                 sub     esp, 8
.text$mn:0000A390                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000A395                 xor     eax, ebp
.text$mn:0000A397                 push    eax
.text$mn:0000A398                 lea     eax, [ebp+var_C]
.text$mn:0000A39B                 mov     large fs:0, eax
.text$mn:0000A3A1                 mov     [ebp+var_10], ecx
.text$mn:0000A3A4                 mov     [ebp+var_14], 0
.text$mn:0000A3AB                 mov     eax, [ebp+var_10]
.text$mn:0000A3AE                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000A3AF                 mov     ecx, [ebp+var_10]
.text$mn:0000A3B2                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A3B7                 mov     ecx, [ebp+var_10]
.text$mn:0000A3BA                 mov     edx, [ecx+14h]
.text$mn:0000A3BD                 lea     eax, [eax+edx*2]
.text$mn:0000A3C0                 push    eax             ; int
.text$mn:0000A3C1                 mov     ecx, [ebp+arg_0]
.text$mn:0000A3C4                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)
.text$mn:0000A3C9                 mov     [ebp+var_4], 0
.text$mn:0000A3D0                 mov     ecx, [ebp+var_14]
.text$mn:0000A3D3                 or      ecx, 1
.text$mn:0000A3D6                 mov     [ebp+var_14], ecx
.text$mn:0000A3D9                 mov     eax, [ebp+arg_0]
.text$mn:0000A3DC                 mov     ecx, [ebp+var_C]
.text$mn:0000A3DF                 mov     large fs:0, ecx
.text$mn:0000A3E6                 pop     ecx
.text$mn:0000A3E7                 mov     esp, ebp
.text$mn:0000A3E9                 pop     ebp
.text$mn:0000A3EA                 retn    4
.text$mn:0000A3EA ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$mn:0000A3EA
.text$mn:0000A3EA ; ---------------------------------------------------------------------------
.text$mn:0000A3ED                 align 10h
.text$mn:0000A3ED _text$mn        ends
.text$mn:0000A3ED
.text$x:0000A3F0 ; ===========================================================================
.text$x:0000A3F0
.text$x:0000A3F0 ; Segment type: Pure code
.text$x:0000A3F0 ; Segment permissions: Read/Execute
.text$x:0000A3F0 _text$x         segment para public 'CODE' use32
.text$x:0000A3F0                 assume cs:_text$x
.text$x:0000A3F0                 ;org 0A3F0h
.text$x:0000A3F0 ; COMDAT (pick associative to section at A37C)
.text$x:0000A3F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A3F0
.text$x:0000A3F0 ; =============== S U B R O U T I N E =======================================
.text$x:0000A3F0
.text$x:0000A3F0
.text$x:0000A3F0 __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 proc near
.text$x:0000A3F0                                         ; DATA XREF: .xdata$x:0000C50Co
.text$x:0000A3F0                 mov     eax, [ebp-14h]
.text$x:0000A3F3                 and     eax, 1
.text$x:0000A3F6                 jz      $LN4_0
.text$x:0000A3FC                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:0000A400                 mov     ecx, [ebp+8]
.text$x:0000A403                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000A408 ; ---------------------------------------------------------------------------
.text$x:0000A408
.text$x:0000A408 $LN4_0:                                 ; CODE XREF: __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0+6j
.text$x:0000A408                 retn
.text$x:0000A408 __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 endp
.text$x:0000A408
.text$x:0000A409
.text$x:0000A409 ; =============== S U B R O U T I N E =======================================
.text$x:0000A409
.text$x:0000A409
.text$x:0000A409 __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$x:0000A409                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)+5o
.text$x:0000A409
.text$x:0000A409 arg_4           = dword ptr  8
.text$x:0000A409
.text$x:0000A409                 mov     edx, [esp+arg_4]
.text$x:0000A40D                 lea     eax, [edx+0Ch]
.text$x:0000A410                 mov     ecx, [edx-0Ch]
.text$x:0000A413                 xor     ecx, eax
.text$x:0000A415                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A41A                 mov     eax, offset __ehfuncinfo$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$x:0000A41F                 jmp     ___CxxFrameHandler3
.text$x:0000A41F __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$x:0000A41F
.text$x:0000A41F _text$x         ends
.text$x:0000A41F
.text$mn:0000A424 ; ===========================================================================
.text$mn:0000A424
.text$mn:0000A424 ; Segment type: Pure code
.text$mn:0000A424 ; Segment permissions: Read/Execute
.text$mn:0000A424 _text$mn        segment para public 'CODE' use32
.text$mn:0000A424                 assume cs:_text$mn
.text$mn:0000A424                 ;org 0A424h
.text$mn:0000A424 ; COMDAT (pick any)
.text$mn:0000A424                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A424
.text$mn:0000A424 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A424
.text$mn:0000A424 ; Attributes: bp-based frame
.text$mn:0000A424
.text$mn:0000A424 ; public: static bool __cdecl std::char_traits<wchar_t>::eq(wchar_t const &, wchar_t const &)
.text$mn:0000A424                 public ?eq@?$char_traits@_W@std@@SA_NAB_W0@Z
.text$mn:0000A424 ?eq@?$char_traits@_W@std@@SA_NAB_W0@Z proc near
.text$mn:0000A424                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+A4p
.text$mn:0000A424
.text$mn:0000A424 var_4           = dword ptr -4
.text$mn:0000A424 arg_0           = dword ptr  8
.text$mn:0000A424 arg_4           = dword ptr  0Ch
.text$mn:0000A424
.text$mn:0000A424                 push    ebp
.text$mn:0000A425                 mov     ebp, esp
.text$mn:0000A427                 push    ecx
.text$mn:0000A428                 mov     eax, [ebp+arg_0]
.text$mn:0000A42B                 movzx   ecx, word ptr [eax]
.text$mn:0000A42E                 mov     edx, [ebp+arg_4]
.text$mn:0000A431                 movzx   eax, word ptr [edx]
.text$mn:0000A434                 cmp     ecx, eax
.text$mn:0000A436                 jnz     short loc_A441
.text$mn:0000A438                 mov     [ebp+var_4], 1
.text$mn:0000A43F                 jmp     short loc_A448
.text$mn:0000A441 ; ---------------------------------------------------------------------------
.text$mn:0000A441
.text$mn:0000A441 loc_A441:                               ; CODE XREF: std::char_traits<wchar_t>::eq(wchar_t const &,wchar_t const &)+12j
.text$mn:0000A441                 mov     [ebp+var_4], 0
.text$mn:0000A448
.text$mn:0000A448 loc_A448:                               ; CODE XREF: std::char_traits<wchar_t>::eq(wchar_t const &,wchar_t const &)+1Bj
.text$mn:0000A448                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000A44B                 mov     esp, ebp
.text$mn:0000A44D                 pop     ebp
.text$mn:0000A44E                 retn
.text$mn:0000A44E ?eq@?$char_traits@_W@std@@SA_NAB_W0@Z endp
.text$mn:0000A44E
.text$mn:0000A44E ; ---------------------------------------------------------------------------
.text$mn:0000A44F                 align 10h
.text$mn:0000A44F _text$mn        ends
.text$mn:0000A44F
.text$mn:0000A450 ; ===========================================================================
.text$mn:0000A450
.text$mn:0000A450 ; Segment type: Pure code
.text$mn:0000A450 ; Segment permissions: Read/Execute
.text$mn:0000A450 _text$mn        segment para public 'CODE' use32
.text$mn:0000A450                 assume cs:_text$mn
.text$mn:0000A450                 ;org 0A450h
.text$mn:0000A450 ; COMDAT (pick any)
.text$mn:0000A450                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A450
.text$mn:0000A450 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A450
.text$mn:0000A450 ; Attributes: bp-based frame
.text$mn:0000A450
.text$mn:0000A450 ; bool __thiscall std::error_category::equivalent(std::error_category *this, const struct std::error_code *, int)
.text$mn:0000A450                 public ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
.text$mn:0000A450 ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
.text$mn:0000A450                                         ; DATA XREF: .rdata:0000D110o
.text$mn:0000A450                                         ; .rdata:0000D12Co ...
.text$mn:0000A450
.text$mn:0000A450 var_8           = dword ptr -8
.text$mn:0000A450 var_4           = dword ptr -4
.text$mn:0000A450 arg_0           = dword ptr  8
.text$mn:0000A450 arg_4           = dword ptr  0Ch
.text$mn:0000A450
.text$mn:0000A450                 push    ebp
.text$mn:0000A451                 mov     ebp, esp
.text$mn:0000A453                 sub     esp, 8
.text$mn:0000A456                 mov     [ebp+var_8], ecx
.text$mn:0000A459                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000A45C                 call    ?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category(void)
.text$mn:0000A461                 push    eax
.text$mn:0000A462                 mov     ecx, [ebp+var_8]
.text$mn:0000A465                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:0000A46A                 movzx   eax, al
.text$mn:0000A46D                 test    eax, eax
.text$mn:0000A46F                 jz      short loc_A487
.text$mn:0000A471                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000A474                 call    ?value@error_code@std@@QBEHXZ ; std::error_code::value(void)
.text$mn:0000A479                 cmp     eax, [ebp+arg_4]
.text$mn:0000A47C                 jnz     short loc_A487
.text$mn:0000A47E                 mov     [ebp+var_4], 1
.text$mn:0000A485                 jmp     short loc_A48E
.text$mn:0000A487 ; ---------------------------------------------------------------------------
.text$mn:0000A487
.text$mn:0000A487 loc_A487:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+1Fj
.text$mn:0000A487                                         ; std::error_category::equivalent(std::error_code const &,int)+2Cj
.text$mn:0000A487                 mov     [ebp+var_4], 0
.text$mn:0000A48E
.text$mn:0000A48E loc_A48E:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+35j
.text$mn:0000A48E                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000A491                 mov     esp, ebp
.text$mn:0000A493                 pop     ebp
.text$mn:0000A494                 retn    8
.text$mn:0000A494 ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z endp
.text$mn:0000A494
.text$mn:0000A494 ; ---------------------------------------------------------------------------
.text$mn:0000A497                 align 4
.text$mn:0000A497 _text$mn        ends
.text$mn:0000A497
.text$mn:0000A498 ; ===========================================================================
.text$mn:0000A498
.text$mn:0000A498 ; Segment type: Pure code
.text$mn:0000A498 ; Segment permissions: Read/Execute
.text$mn:0000A498 _text$mn        segment para public 'CODE' use32
.text$mn:0000A498                 assume cs:_text$mn
.text$mn:0000A498                 ;org 0A498h
.text$mn:0000A498 ; COMDAT (pick any)
.text$mn:0000A498                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A498
.text$mn:0000A498 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A498
.text$mn:0000A498 ; Attributes: bp-based frame
.text$mn:0000A498
.text$mn:0000A498 ; bool __thiscall std::error_category::equivalent(std::error_category *this, int, const struct std::error_condition *)
.text$mn:0000A498                 public ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
.text$mn:0000A498 ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
.text$mn:0000A498                                         ; DATA XREF: .rdata:0000D114o
.text$mn:0000A498                                         ; .rdata:0000D130o ...
.text$mn:0000A498
.text$mn:0000A498 var_C           = byte ptr -0Ch
.text$mn:0000A498 var_4           = dword ptr -4
.text$mn:0000A498 arg_0           = dword ptr  8
.text$mn:0000A498 arg_4           = dword ptr  0Ch
.text$mn:0000A498
.text$mn:0000A498                 push    ebp
.text$mn:0000A499                 mov     ebp, esp
.text$mn:0000A49B                 sub     esp, 0Ch
.text$mn:0000A49E                 mov     [ebp+var_4], ecx
.text$mn:0000A4A1                 mov     eax, [ebp+arg_4]
.text$mn:0000A4A4                 push    eax             ; std::error_condition *
.text$mn:0000A4A5                 mov     ecx, [ebp+arg_0]
.text$mn:0000A4A8                 push    ecx
.text$mn:0000A4A9                 lea     edx, [ebp+var_C]
.text$mn:0000A4AC                 push    edx
.text$mn:0000A4AD                 mov     eax, [ebp+var_4]
.text$mn:0000A4B0                 mov     edx, [eax]
.text$mn:0000A4B2                 mov     ecx, [ebp+var_4]
.text$mn:0000A4B5                 mov     eax, [edx+0Ch]
.text$mn:0000A4B8                 call    eax
.text$mn:0000A4BA                 mov     ecx, eax
.text$mn:0000A4BC                 call    ??8error_condition@std@@QBE_NABV01@@Z ; std::error_condition::operator==(std::error_condition const &)
.text$mn:0000A4C1                 mov     esp, ebp
.text$mn:0000A4C3                 pop     ebp
.text$mn:0000A4C4                 retn    8
.text$mn:0000A4C4 ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z endp
.text$mn:0000A4C4
.text$mn:0000A4C4 ; ---------------------------------------------------------------------------
.text$mn:0000A4C7                 align 4
.text$mn:0000A4C7 _text$mn        ends
.text$mn:0000A4C7
.text$mn:0000A4C8 ; ===========================================================================
.text$mn:0000A4C8
.text$mn:0000A4C8 ; Segment type: Pure code
.text$mn:0000A4C8 ; Segment permissions: Read/Execute
.text$mn:0000A4C8 _text$mn        segment para public 'CODE' use32
.text$mn:0000A4C8                 assume cs:_text$mn
.text$mn:0000A4C8                 ;org 0A4C8h
.text$mn:0000A4C8 ; COMDAT (pick any)
.text$mn:0000A4C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A4C8
.text$mn:0000A4C8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A4C8
.text$mn:0000A4C8 ; Attributes: bp-based frame
.text$mn:0000A4C8
.text$mn:0000A4C8 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int)
.text$mn:0000A4C8                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
.text$mn:0000A4C8 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
.text$mn:0000A4C8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+4Cp
.text$mn:0000A4C8
.text$mn:0000A4C8 var_4           = dword ptr -4
.text$mn:0000A4C8 arg_0           = dword ptr  8
.text$mn:0000A4C8
.text$mn:0000A4C8                 push    ebp
.text$mn:0000A4C9                 mov     ebp, esp
.text$mn:0000A4CB                 push    ecx
.text$mn:0000A4CC                 mov     [ebp+var_4], ecx
.text$mn:0000A4CF                 mov     eax, [ebp+var_4]
.text$mn:0000A4D2                 mov     ecx, [eax+14h]
.text$mn:0000A4D5                 cmp     ecx, [ebp+arg_0]
.text$mn:0000A4D8                 jnb     short loc_A4E2
.text$mn:0000A4DA                 mov     ecx, [ebp+var_4]
.text$mn:0000A4DD                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:0000A4E2
.text$mn:0000A4E2 loc_A4E2:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+10j
.text$mn:0000A4E2                 mov     edx, [ebp+arg_0]
.text$mn:0000A4E5                 push    edx
.text$mn:0000A4E6                 mov     ecx, [ebp+var_4]
.text$mn:0000A4E9                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000A4EE                 mov     eax, [ebp+var_4]
.text$mn:0000A4F1                 mov     esp, ebp
.text$mn:0000A4F3                 pop     ebp
.text$mn:0000A4F4                 retn    4
.text$mn:0000A4F4 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z endp
.text$mn:0000A4F4
.text$mn:0000A4F4 ; ---------------------------------------------------------------------------
.text$mn:0000A4F7                 align 4
.text$mn:0000A4F7 _text$mn        ends
.text$mn:0000A4F7
.text$mn:0000A4F8 ; ===========================================================================
.text$mn:0000A4F8
.text$mn:0000A4F8 ; Segment type: Pure code
.text$mn:0000A4F8 ; Segment permissions: Read/Execute
.text$mn:0000A4F8 _text$mn        segment para public 'CODE' use32
.text$mn:0000A4F8                 assume cs:_text$mn
.text$mn:0000A4F8                 ;org 0A4F8h
.text$mn:0000A4F8 ; COMDAT (pick any)
.text$mn:0000A4F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A4F8
.text$mn:0000A4F8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A4F8
.text$mn:0000A4F8 ; Attributes: bp-based frame
.text$mn:0000A4F8
.text$mn:0000A4F8 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int, unsigned int)
.text$mn:0000A4F8                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
.text$mn:0000A4F8 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
.text$mn:0000A4F8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Ap
.text$mn:0000A4F8
.text$mn:0000A4F8 var_C           = dword ptr -0Ch
.text$mn:0000A4F8 Dst             = dword ptr -8
.text$mn:0000A4F8 var_4           = dword ptr -4
.text$mn:0000A4F8 arg_0           = dword ptr  8
.text$mn:0000A4F8 arg_4           = dword ptr  0Ch
.text$mn:0000A4F8
.text$mn:0000A4F8                 push    ebp
.text$mn:0000A4F9                 mov     ebp, esp
.text$mn:0000A4FB                 sub     esp, 0Ch
.text$mn:0000A4FE                 mov     [ebp+var_4], ecx
.text$mn:0000A501                 mov     eax, [ebp+var_4]
.text$mn:0000A504                 mov     ecx, [eax+14h]
.text$mn:0000A507                 cmp     ecx, [ebp+arg_0]
.text$mn:0000A50A                 jnb     short loc_A514
.text$mn:0000A50C                 mov     ecx, [ebp+var_4]
.text$mn:0000A50F                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:0000A514
.text$mn:0000A514 loc_A514:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+12j
.text$mn:0000A514                 mov     edx, [ebp+var_4]
.text$mn:0000A517                 mov     eax, [edx+14h]
.text$mn:0000A51A                 sub     eax, [ebp+arg_0]
.text$mn:0000A51D                 cmp     eax, [ebp+arg_4]
.text$mn:0000A520                 ja      short loc_A530
.text$mn:0000A522                 mov     ecx, [ebp+arg_0]
.text$mn:0000A525                 push    ecx
.text$mn:0000A526                 mov     ecx, [ebp+var_4]
.text$mn:0000A529                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000A52E                 jmp     short loc_A576
.text$mn:0000A530 ; ---------------------------------------------------------------------------
.text$mn:0000A530
.text$mn:0000A530 loc_A530:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+28j
.text$mn:0000A530                 cmp     [ebp+arg_4], 0
.text$mn:0000A534                 jbe     short loc_A576
.text$mn:0000A536                 mov     ecx, [ebp+var_4]
.text$mn:0000A539                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000A53E                 add     eax, [ebp+arg_0]
.text$mn:0000A541                 mov     [ebp+Dst], eax
.text$mn:0000A544                 mov     edx, [ebp+var_4]
.text$mn:0000A547                 mov     eax, [edx+14h]
.text$mn:0000A54A                 sub     eax, [ebp+arg_4]
.text$mn:0000A54D                 mov     [ebp+var_C], eax
.text$mn:0000A550                 mov     ecx, [ebp+var_C]
.text$mn:0000A553                 sub     ecx, [ebp+arg_0]
.text$mn:0000A556                 push    ecx             ; Size
.text$mn:0000A557                 mov     edx, [ebp+Dst]
.text$mn:0000A55A                 add     edx, [ebp+arg_4]
.text$mn:0000A55D                 push    edx             ; Src
.text$mn:0000A55E                 mov     eax, [ebp+Dst]
.text$mn:0000A561                 push    eax             ; Dst
.text$mn:0000A562                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:0000A567                 add     esp, 0Ch
.text$mn:0000A56A                 mov     ecx, [ebp+var_C]
.text$mn:0000A56D                 push    ecx
.text$mn:0000A56E                 mov     ecx, [ebp+var_4]
.text$mn:0000A571                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000A576
.text$mn:0000A576 loc_A576:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+36j
.text$mn:0000A576                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+3Cj
.text$mn:0000A576                 mov     eax, [ebp+var_4]
.text$mn:0000A579                 mov     esp, ebp
.text$mn:0000A57B                 pop     ebp
.text$mn:0000A57C                 retn    8
.text$mn:0000A57C ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z endp
.text$mn:0000A57C
.text$mn:0000A57C ; ---------------------------------------------------------------------------
.text$mn:0000A57F                 align 10h
.text$mn:0000A57F _text$mn        ends
.text$mn:0000A57F
.text$mn:0000A580 ; ===========================================================================
.text$mn:0000A580
.text$mn:0000A580 ; Segment type: Pure code
.text$mn:0000A580 ; Segment permissions: Read/Execute
.text$mn:0000A580 _text$mn        segment para public 'CODE' use32
.text$mn:0000A580                 assume cs:_text$mn
.text$mn:0000A580                 ;org 0A580h
.text$mn:0000A580 ; COMDAT (pick any)
.text$mn:0000A580                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A580
.text$mn:0000A580 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A580
.text$mn:0000A580 ; Attributes: bp-based frame
.text$mn:0000A580
.text$mn:0000A580 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int)
.text$mn:0000A580                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z
.text$mn:0000A580 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z proc near
.text$mn:0000A580                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Cp
.text$mn:0000A580
.text$mn:0000A580 var_4           = dword ptr -4
.text$mn:0000A580 arg_0           = dword ptr  8
.text$mn:0000A580
.text$mn:0000A580                 push    ebp
.text$mn:0000A581                 mov     ebp, esp
.text$mn:0000A583                 push    ecx
.text$mn:0000A584                 mov     [ebp+var_4], ecx
.text$mn:0000A587                 mov     eax, [ebp+var_4]
.text$mn:0000A58A                 mov     ecx, [eax+14h]
.text$mn:0000A58D                 cmp     ecx, [ebp+arg_0]
.text$mn:0000A590                 jnb     short loc_A59A
.text$mn:0000A592                 mov     ecx, [ebp+var_4]
.text$mn:0000A595                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000A59A
.text$mn:0000A59A loc_A59A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)+10j
.text$mn:0000A59A                 mov     edx, [ebp+arg_0]
.text$mn:0000A59D                 push    edx
.text$mn:0000A59E                 mov     ecx, [ebp+var_4]
.text$mn:0000A5A1                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000A5A6                 mov     eax, [ebp+var_4]
.text$mn:0000A5A9                 mov     esp, ebp
.text$mn:0000A5AB                 pop     ebp
.text$mn:0000A5AC                 retn    4
.text$mn:0000A5AC ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z endp
.text$mn:0000A5AC
.text$mn:0000A5AC ; ---------------------------------------------------------------------------
.text$mn:0000A5AF                 align 10h
.text$mn:0000A5AF _text$mn        ends
.text$mn:0000A5AF
.text$mn:0000A5B0 ; ===========================================================================
.text$mn:0000A5B0
.text$mn:0000A5B0 ; Segment type: Pure code
.text$mn:0000A5B0 ; Segment permissions: Read/Execute
.text$mn:0000A5B0 _text$mn        segment para public 'CODE' use32
.text$mn:0000A5B0                 assume cs:_text$mn
.text$mn:0000A5B0                 ;org 0A5B0h
.text$mn:0000A5B0 ; COMDAT (pick any)
.text$mn:0000A5B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A5B0
.text$mn:0000A5B0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A5B0
.text$mn:0000A5B0 ; Attributes: bp-based frame
.text$mn:0000A5B0
.text$mn:0000A5B0 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int, unsigned int)
.text$mn:0000A5B0                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
.text$mn:0000A5B0 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z proc near
.text$mn:0000A5B0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Ap
.text$mn:0000A5B0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+10Cp
.text$mn:0000A5B0
.text$mn:0000A5B0 var_C           = dword ptr -0Ch
.text$mn:0000A5B0 Dst             = dword ptr -8
.text$mn:0000A5B0 var_4           = dword ptr -4
.text$mn:0000A5B0 arg_0           = dword ptr  8
.text$mn:0000A5B0 arg_4           = dword ptr  0Ch
.text$mn:0000A5B0
.text$mn:0000A5B0                 push    ebp
.text$mn:0000A5B1                 mov     ebp, esp
.text$mn:0000A5B3                 sub     esp, 0Ch
.text$mn:0000A5B6                 mov     [ebp+var_4], ecx
.text$mn:0000A5B9                 mov     eax, [ebp+var_4]
.text$mn:0000A5BC                 mov     ecx, [eax+14h]
.text$mn:0000A5BF                 cmp     ecx, [ebp+arg_0]
.text$mn:0000A5C2                 jnb     short loc_A5CC
.text$mn:0000A5C4                 mov     ecx, [ebp+var_4]
.text$mn:0000A5C7                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000A5CC
.text$mn:0000A5CC loc_A5CC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+12j
.text$mn:0000A5CC                 mov     edx, [ebp+var_4]
.text$mn:0000A5CF                 mov     eax, [edx+14h]
.text$mn:0000A5D2                 sub     eax, [ebp+arg_0]
.text$mn:0000A5D5                 cmp     eax, [ebp+arg_4]
.text$mn:0000A5D8                 ja      short loc_A5E8
.text$mn:0000A5DA                 mov     ecx, [ebp+arg_0]
.text$mn:0000A5DD                 push    ecx
.text$mn:0000A5DE                 mov     ecx, [ebp+var_4]
.text$mn:0000A5E1                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000A5E6                 jmp     short loc_A634
.text$mn:0000A5E8 ; ---------------------------------------------------------------------------
.text$mn:0000A5E8
.text$mn:0000A5E8 loc_A5E8:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+28j
.text$mn:0000A5E8                 cmp     [ebp+arg_4], 0
.text$mn:0000A5EC                 jbe     short loc_A634
.text$mn:0000A5EE                 mov     ecx, [ebp+var_4]
.text$mn:0000A5F1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A5F6                 mov     edx, [ebp+arg_0]
.text$mn:0000A5F9                 lea     eax, [eax+edx*2]
.text$mn:0000A5FC                 mov     [ebp+Dst], eax
.text$mn:0000A5FF                 mov     ecx, [ebp+var_4]
.text$mn:0000A602                 mov     edx, [ecx+14h]
.text$mn:0000A605                 sub     edx, [ebp+arg_4]
.text$mn:0000A608                 mov     [ebp+var_C], edx
.text$mn:0000A60B                 mov     eax, [ebp+var_C]
.text$mn:0000A60E                 sub     eax, [ebp+arg_0]
.text$mn:0000A611                 push    eax             ; int
.text$mn:0000A612                 mov     ecx, [ebp+arg_4]
.text$mn:0000A615                 mov     edx, [ebp+Dst]
.text$mn:0000A618                 lea     eax, [edx+ecx*2]
.text$mn:0000A61B                 push    eax             ; Src
.text$mn:0000A61C                 mov     ecx, [ebp+Dst]
.text$mn:0000A61F                 push    ecx             ; Dst
.text$mn:0000A620                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000A625                 add     esp, 0Ch
.text$mn:0000A628                 mov     edx, [ebp+var_C]
.text$mn:0000A62B                 push    edx
.text$mn:0000A62C                 mov     ecx, [ebp+var_4]
.text$mn:0000A62F                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000A634
.text$mn:0000A634 loc_A634:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+36j
.text$mn:0000A634                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+3Cj
.text$mn:0000A634                 mov     eax, [ebp+var_4]
.text$mn:0000A637                 mov     esp, ebp
.text$mn:0000A639                 pop     ebp
.text$mn:0000A63A                 retn    8
.text$mn:0000A63A ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z endp
.text$mn:0000A63A
.text$mn:0000A63A ; ---------------------------------------------------------------------------
.text$mn:0000A63D                 align 10h
.text$mn:0000A63D _text$mn        ends
.text$mn:0000A63D
.text$mn:0000A640 ; ===========================================================================
.text$mn:0000A640
.text$mn:0000A640 ; Segment type: Pure code
.text$mn:0000A640 ; Segment permissions: Read/Execute
.text$mn:0000A640 _text$mn        segment para public 'CODE' use32
.text$mn:0000A640                 assume cs:_text$mn
.text$mn:0000A640                 ;org 0A640h
.text$mn:0000A640 ; COMDAT (pick any)
.text$mn:0000A640                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A640
.text$mn:0000A640 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A640
.text$mn:0000A640 ; Attributes: bp-based frame
.text$mn:0000A640
.text$mn:0000A640 ; void __thiscall TreeView::expand(TreeView *this, struct _TREEITEM *)
.text$mn:0000A640                 public ?expand@TreeView@@QBEXPAU_TREEITEM@@@Z
.text$mn:0000A640 ?expand@TreeView@@QBEXPAU_TREEITEM@@@Z proc near
.text$mn:0000A640                                         ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+1B0p
.text$mn:0000A640                                         ; ProjectPanel::addFiles(_TREEITEM *)+137p ...
.text$mn:0000A640
.text$mn:0000A640 var_4           = dword ptr -4
.text$mn:0000A640 lParam          = dword ptr  8
.text$mn:0000A640
.text$mn:0000A640                 push    ebp
.text$mn:0000A641                 mov     ebp, esp
.text$mn:0000A643                 push    ecx
.text$mn:0000A644                 mov     [ebp+var_4], ecx
.text$mn:0000A647                 mov     eax, [ebp+lParam]
.text$mn:0000A64A                 push    eax             ; lParam
.text$mn:0000A64B                 push    2               ; wParam
.text$mn:0000A64D                 push    1102h           ; Msg
.text$mn:0000A652                 mov     ecx, [ebp+var_4]
.text$mn:0000A655                 mov     edx, [ecx+0Ch]
.text$mn:0000A658                 push    edx             ; hWnd
.text$mn:0000A659                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000A65F                 mov     esp, ebp
.text$mn:0000A661                 pop     ebp
.text$mn:0000A662                 retn    4
.text$mn:0000A662 ?expand@TreeView@@QBEXPAU_TREEITEM@@@Z endp
.text$mn:0000A662
.text$mn:0000A662 ; ---------------------------------------------------------------------------
.text$mn:0000A665                 align 4
.text$mn:0000A665 _text$mn        ends
.text$mn:0000A665
.text$mn:0000A668 ; ===========================================================================
.text$mn:0000A668
.text$mn:0000A668 ; Segment type: Pure code
.text$mn:0000A668 ; Segment permissions: Read/Execute
.text$mn:0000A668 _text$mn        segment para public 'CODE' use32
.text$mn:0000A668                 assume cs:_text$mn
.text$mn:0000A668                 ;org 0A668h
.text$mn:0000A668 ; COMDAT (pick any)
.text$mn:0000A668                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A668
.text$mn:0000A668 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A668
.text$mn:0000A668 ; Attributes: bp-based frame
.text$mn:0000A668
.text$mn:0000A668 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t *Str, int)
.text$mn:0000A668                 public ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z
.text$mn:0000A668 ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z proc near
.text$mn:0000A668                                         ; CODE XREF: ProjectPanel::getRelativePath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+66p
.text$mn:0000A668
.text$mn:0000A668 var_4           = dword ptr -4
.text$mn:0000A668 Str             = dword ptr  8
.text$mn:0000A668 arg_4           = dword ptr  0Ch
.text$mn:0000A668
.text$mn:0000A668                 push    ebp
.text$mn:0000A669                 mov     ebp, esp
.text$mn:0000A66B                 push    ecx
.text$mn:0000A66C                 mov     [ebp+var_4], ecx
.text$mn:0000A66F                 push    77Eh            ; unsigned int
.text$mn:0000A674                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A679                 mov     eax, [ebp+Str]
.text$mn:0000A67C                 push    eax             ; int
.text$mn:0000A67D                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000A682                 add     esp, 0Ch
.text$mn:0000A685                 mov     ecx, [ebp+Str]
.text$mn:0000A688                 push    ecx             ; Str
.text$mn:0000A689                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:0000A68E                 add     esp, 4
.text$mn:0000A691                 push    eax
.text$mn:0000A692                 mov     edx, [ebp+arg_4]
.text$mn:0000A695                 push    edx
.text$mn:0000A696                 mov     eax, [ebp+Str]
.text$mn:0000A699                 push    eax
.text$mn:0000A69A                 mov     ecx, [ebp+var_4]
.text$mn:0000A69D                 call    ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)
.text$mn:0000A6A2                 mov     esp, ebp
.text$mn:0000A6A4                 pop     ebp
.text$mn:0000A6A5                 retn    8
.text$mn:0000A6A5 ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z endp
.text$mn:0000A6A5
.text$mn:0000A6A5 _text$mn        ends
.text$mn:0000A6A5
.text$mn:0000A6A8 ; ===========================================================================
.text$mn:0000A6A8
.text$mn:0000A6A8 ; Segment type: Pure code
.text$mn:0000A6A8 ; Segment permissions: Read/Execute
.text$mn:0000A6A8 _text$mn        segment para public 'CODE' use32
.text$mn:0000A6A8                 assume cs:_text$mn
.text$mn:0000A6A8                 ;org 0A6A8h
.text$mn:0000A6A8 ; COMDAT (pick any)
.text$mn:0000A6A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A6A8
.text$mn:0000A6A8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A6A8
.text$mn:0000A6A8 ; Attributes: bp-based frame
.text$mn:0000A6A8
.text$mn:0000A6A8 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::find(wchar_t const *, unsigned int, unsigned int)const
.text$mn:0000A6A8                 public ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z
.text$mn:0000A6A8 ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z proc near
.text$mn:0000A6A8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint)+35p
.text$mn:0000A6A8
.text$mn:0000A6A8 var_10          = dword ptr -10h
.text$mn:0000A6A8 var_C           = dword ptr -0Ch
.text$mn:0000A6A8 var_8           = dword ptr -8
.text$mn:0000A6A8 var_4           = dword ptr -4
.text$mn:0000A6A8 arg_0           = dword ptr  8
.text$mn:0000A6A8 arg_4           = dword ptr  0Ch
.text$mn:0000A6A8 arg_8           = dword ptr  10h
.text$mn:0000A6A8
.text$mn:0000A6A8                 push    ebp
.text$mn:0000A6A9                 mov     ebp, esp
.text$mn:0000A6AB                 sub     esp, 10h
.text$mn:0000A6AE                 mov     [ebp+var_8], ecx
.text$mn:0000A6B1                 cmp     [ebp+arg_8], 0
.text$mn:0000A6B5                 jz      short loc_A6CD
.text$mn:0000A6B7                 push    768h            ; unsigned int
.text$mn:0000A6BC                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A6C1                 mov     eax, [ebp+arg_0]
.text$mn:0000A6C4                 push    eax             ; int
.text$mn:0000A6C5                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000A6CA                 add     esp, 0Ch
.text$mn:0000A6CD
.text$mn:0000A6CD loc_A6CD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+Dj
.text$mn:0000A6CD                 cmp     [ebp+arg_8], 0
.text$mn:0000A6D1                 jnz     short loc_A6E6
.text$mn:0000A6D3                 mov     ecx, [ebp+var_8]
.text$mn:0000A6D6                 mov     edx, [ebp+arg_4]
.text$mn:0000A6D9                 cmp     edx, [ecx+14h]
.text$mn:0000A6DC                 ja      short loc_A6E6
.text$mn:0000A6DE                 mov     eax, [ebp+arg_4]
.text$mn:0000A6E1                 jmp     loc_A799
.text$mn:0000A6E6 ; ---------------------------------------------------------------------------
.text$mn:0000A6E6
.text$mn:0000A6E6 loc_A6E6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+29j
.text$mn:0000A6E6                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+34j
.text$mn:0000A6E6                 mov     eax, [ebp+var_8]
.text$mn:0000A6E9                 mov     ecx, [ebp+arg_4]
.text$mn:0000A6EC                 cmp     ecx, [eax+14h]
.text$mn:0000A6EF                 jnb     loc_A794
.text$mn:0000A6F5                 mov     edx, [ebp+var_8]
.text$mn:0000A6F8                 mov     eax, [edx+14h]
.text$mn:0000A6FB                 sub     eax, [ebp+arg_4]
.text$mn:0000A6FE                 mov     [ebp+var_4], eax
.text$mn:0000A701                 mov     ecx, [ebp+arg_8]
.text$mn:0000A704                 cmp     ecx, [ebp+var_4]
.text$mn:0000A707                 ja      loc_A794
.text$mn:0000A70D                 mov     edx, [ebp+arg_8]
.text$mn:0000A710                 sub     edx, 1
.text$mn:0000A713                 mov     eax, [ebp+var_4]
.text$mn:0000A716                 sub     eax, edx
.text$mn:0000A718                 mov     [ebp+var_4], eax
.text$mn:0000A71B                 mov     ecx, [ebp+var_8]
.text$mn:0000A71E                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A723                 mov     ecx, [ebp+arg_4]
.text$mn:0000A726                 lea     edx, [eax+ecx*2]
.text$mn:0000A729                 mov     [ebp+var_10], edx
.text$mn:0000A72C                 jmp     short loc_A74A
.text$mn:0000A72E ; ---------------------------------------------------------------------------
.text$mn:0000A72E
.text$mn:0000A72E loc_A72E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint):loc_A792j
.text$mn:0000A72E                 mov     eax, [ebp+var_C]
.text$mn:0000A731                 sub     eax, [ebp+var_10]
.text$mn:0000A734                 sar     eax, 1
.text$mn:0000A736                 add     eax, 1
.text$mn:0000A739                 mov     ecx, [ebp+var_4]
.text$mn:0000A73C                 sub     ecx, eax
.text$mn:0000A73E                 mov     [ebp+var_4], ecx
.text$mn:0000A741                 mov     edx, [ebp+var_C]
.text$mn:0000A744                 add     edx, 2
.text$mn:0000A747                 mov     [ebp+var_10], edx
.text$mn:0000A74A
.text$mn:0000A74A loc_A74A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+84j
.text$mn:0000A74A                 mov     eax, [ebp+arg_0]
.text$mn:0000A74D                 push    eax
.text$mn:0000A74E                 mov     ecx, [ebp+var_4]
.text$mn:0000A751                 push    ecx
.text$mn:0000A752                 mov     edx, [ebp+var_10]
.text$mn:0000A755                 push    edx
.text$mn:0000A756                 call    ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z ; std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)
.text$mn:0000A75B                 add     esp, 0Ch
.text$mn:0000A75E                 mov     [ebp+var_C], eax
.text$mn:0000A761                 cmp     [ebp+var_C], 0
.text$mn:0000A765                 jz      short loc_A794
.text$mn:0000A767                 mov     eax, [ebp+arg_8]
.text$mn:0000A76A                 push    eax
.text$mn:0000A76B                 mov     ecx, [ebp+arg_0]
.text$mn:0000A76E                 push    ecx
.text$mn:0000A76F                 mov     edx, [ebp+var_C]
.text$mn:0000A772                 push    edx
.text$mn:0000A773                 call    ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z ; std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)
.text$mn:0000A778                 add     esp, 0Ch
.text$mn:0000A77B                 test    eax, eax
.text$mn:0000A77D                 jnz     short loc_A792
.text$mn:0000A77F                 mov     ecx, [ebp+var_8]
.text$mn:0000A782                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A787                 mov     ecx, [ebp+var_C]
.text$mn:0000A78A                 sub     ecx, eax
.text$mn:0000A78C                 sar     ecx, 1
.text$mn:0000A78E                 mov     eax, ecx
.text$mn:0000A790                 jmp     short loc_A799
.text$mn:0000A792 ; ---------------------------------------------------------------------------
.text$mn:0000A792
.text$mn:0000A792 loc_A792:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+D5j
.text$mn:0000A792                 jmp     short loc_A72E
.text$mn:0000A794 ; ---------------------------------------------------------------------------
.text$mn:0000A794
.text$mn:0000A794 loc_A794:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+47j
.text$mn:0000A794                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+5Fj ...
.text$mn:0000A794                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000A799
.text$mn:0000A799 loc_A799:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+39j
.text$mn:0000A799                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+E8j
.text$mn:0000A799                 mov     esp, ebp
.text$mn:0000A79B                 pop     ebp
.text$mn:0000A79C                 retn    0Ch
.text$mn:0000A79C ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z endp
.text$mn:0000A79C
.text$mn:0000A79C ; ---------------------------------------------------------------------------
.text$mn:0000A79F                 align 10h
.text$mn:0000A79F _text$mn        ends
.text$mn:0000A79F
.text$mn:0000A7A0 ; ===========================================================================
.text$mn:0000A7A0
.text$mn:0000A7A0 ; Segment type: Pure code
.text$mn:0000A7A0 ; Segment permissions: Read/Execute
.text$mn:0000A7A0 _text$mn        segment para public 'CODE' use32
.text$mn:0000A7A0                 assume cs:_text$mn
.text$mn:0000A7A0                 ;org 0A7A0h
.text$mn:0000A7A0 ; COMDAT (pick any)
.text$mn:0000A7A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A7A0
.text$mn:0000A7A0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A7A0
.text$mn:0000A7A0 ; Attributes: bp-based frame
.text$mn:0000A7A0
.text$mn:0000A7A0 ; public: static wchar_t const * __cdecl std::char_traits<wchar_t>::find(wchar_t const *, unsigned int, wchar_t const &)
.text$mn:0000A7A0                 public ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z
.text$mn:0000A7A0 ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z proc near
.text$mn:0000A7A0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+AEp
.text$mn:0000A7A0
.text$mn:0000A7A0 var_4           = dword ptr -4
.text$mn:0000A7A0 arg_0           = dword ptr  8
.text$mn:0000A7A0 arg_4           = dword ptr  0Ch
.text$mn:0000A7A0 arg_8           = dword ptr  10h
.text$mn:0000A7A0
.text$mn:0000A7A0                 push    ebp
.text$mn:0000A7A1                 mov     ebp, esp
.text$mn:0000A7A3                 push    ecx
.text$mn:0000A7A4                 cmp     [ebp+arg_4], 0
.text$mn:0000A7A8                 jnz     short loc_A7B3
.text$mn:0000A7AA                 mov     [ebp+var_4], 0
.text$mn:0000A7B1                 jmp     short loc_A7CD
.text$mn:0000A7B3 ; ---------------------------------------------------------------------------
.text$mn:0000A7B3
.text$mn:0000A7B3 loc_A7B3:                               ; CODE XREF: std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)+8j
.text$mn:0000A7B3                 mov     eax, [ebp+arg_4]
.text$mn:0000A7B6                 push    eax
.text$mn:0000A7B7                 mov     ecx, [ebp+arg_8]
.text$mn:0000A7BA                 movzx   edx, word ptr [ecx]
.text$mn:0000A7BD                 push    edx
.text$mn:0000A7BE                 mov     eax, [ebp+arg_0]
.text$mn:0000A7C1                 push    eax
.text$mn:0000A7C2                 call    _wmemchr
.text$mn:0000A7C7                 add     esp, 0Ch
.text$mn:0000A7CA                 mov     [ebp+var_4], eax
.text$mn:0000A7CD
.text$mn:0000A7CD loc_A7CD:                               ; CODE XREF: std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)+11j
.text$mn:0000A7CD                 mov     eax, [ebp+var_4]
.text$mn:0000A7D0                 mov     esp, ebp
.text$mn:0000A7D2                 pop     ebp
.text$mn:0000A7D3                 retn
.text$mn:0000A7D3 ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z endp
.text$mn:0000A7D3
.text$mn:0000A7D3 _text$mn        ends
.text$mn:0000A7D3
.text$mn:0000A7D4 ; ===========================================================================
.text$mn:0000A7D4
.text$mn:0000A7D4 ; Segment type: Pure code
.text$mn:0000A7D4 ; Segment permissions: Read/Execute
.text$mn:0000A7D4 _text$mn        segment para public 'CODE' use32
.text$mn:0000A7D4                 assume cs:_text$mn
.text$mn:0000A7D4                 ;org 0A7D4h
.text$mn:0000A7D4 ; COMDAT (pick any)
.text$mn:0000A7D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A7D4
.text$mn:0000A7D4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A7D4
.text$mn:0000A7D4 ; Attributes: bp-based frame
.text$mn:0000A7D4
.text$mn:0000A7D4 ; const struct std::error_category *__cdecl std::generic_category()
.text$mn:0000A7D4                 public ?generic_category@std@@YAABVerror_category@1@XZ
.text$mn:0000A7D4 ?generic_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:0000A7D4                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+17p
.text$mn:0000A7D4                 push    ebp
.text$mn:0000A7D5                 mov     ebp, esp
.text$mn:0000A7D7                 mov     eax, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.text$mn:0000A7DC                 pop     ebp
.text$mn:0000A7DD                 retn
.text$mn:0000A7DD ?generic_category@std@@YAABVerror_category@1@XZ endp
.text$mn:0000A7DD
.text$mn:0000A7DD ; ---------------------------------------------------------------------------
.text$mn:0000A7DE                 align 10h
.text$mn:0000A7DE _text$mn        ends
.text$mn:0000A7DE
.text$mn:0000A7E0 ; ===========================================================================
.text$mn:0000A7E0
.text$mn:0000A7E0 ; Segment type: Pure code
.text$mn:0000A7E0 ; Segment permissions: Read/Execute
.text$mn:0000A7E0 _text$mn        segment para public 'CODE' use32
.text$mn:0000A7E0                 assume cs:_text$mn
.text$mn:0000A7E0                 ;org 0A7E0h
.text$mn:0000A7E0 ; COMDAT (pick any)
.text$mn:0000A7E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A7E0
.text$mn:0000A7E0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A7E0
.text$mn:0000A7E0 ; Attributes: bp-based frame
.text$mn:0000A7E0
.text$mn:0000A7E0 ; struct _TREEITEM *__thiscall TreeView::getChildFrom(TreeView *this, struct _TREEITEM *)
.text$mn:0000A7E0                 public ?getChildFrom@TreeView@@QBEPAU_TREEITEM@@PAU2@@Z
.text$mn:0000A7E0 ?getChildFrom@TreeView@@QBEPAU_TREEITEM@@PAU2@@Z proc near
.text$mn:0000A7E0                                         ; CODE XREF: ProjectPanel::writeWorkSpace(wchar_t *)+13Cp
.text$mn:0000A7E0                                         ; ProjectPanel::buildProjectXml(TiXmlNode *,_TREEITEM *,wchar_t const *)+5Ep ...
.text$mn:0000A7E0
.text$mn:0000A7E0 var_4           = dword ptr -4
.text$mn:0000A7E0 lParam          = dword ptr  8
.text$mn:0000A7E0
.text$mn:0000A7E0                 push    ebp
.text$mn:0000A7E1                 mov     ebp, esp
.text$mn:0000A7E3                 push    ecx
.text$mn:0000A7E4                 mov     [ebp+var_4], ecx
.text$mn:0000A7E7                 mov     eax, [ebp+lParam]
.text$mn:0000A7EA                 push    eax             ; lParam
.text$mn:0000A7EB                 push    4               ; wParam
.text$mn:0000A7ED                 push    110Ah           ; Msg
.text$mn:0000A7F2                 mov     ecx, [ebp+var_4]
.text$mn:0000A7F5                 mov     edx, [ecx+0Ch]
.text$mn:0000A7F8                 push    edx             ; hWnd
.text$mn:0000A7F9                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000A7FF                 mov     esp, ebp
.text$mn:0000A801                 pop     ebp
.text$mn:0000A802                 retn    4
.text$mn:0000A802 ?getChildFrom@TreeView@@QBEPAU_TREEITEM@@PAU2@@Z endp
.text$mn:0000A802
.text$mn:0000A802 ; ---------------------------------------------------------------------------
.text$mn:0000A805                 align 4
.text$mn:0000A805 _text$mn        ends
.text$mn:0000A805
.text$mn:0000A808 ; ===========================================================================
.text$mn:0000A808
.text$mn:0000A808 ; Segment type: Pure code
.text$mn:0000A808 ; Segment permissions: Read/Execute
.text$mn:0000A808 _text$mn        segment para public 'CODE' use32
.text$mn:0000A808                 assume cs:_text$mn
.text$mn:0000A808                 ;org 0A808h
.text$mn:0000A808 ; COMDAT (pick any)
.text$mn:0000A808                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A808
.text$mn:0000A808 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A808
.text$mn:0000A808 ; Attributes: bp-based frame
.text$mn:0000A808
.text$mn:0000A808 ; void __thiscall Window::getClientRect(Window *this, struct tagRECT *)
.text$mn:0000A808                 public ?getClientRect@Window@@UBEXAAUtagRECT@@@Z
.text$mn:0000A808 ?getClientRect@Window@@UBEXAAUtagRECT@@@Z proc near
.text$mn:0000A808                                         ; DATA XREF: .rdata:0000D1E8o
.text$mn:0000A808                                         ; .rdata:0000D21Co ...
.text$mn:0000A808
.text$mn:0000A808 var_4           = dword ptr -4
.text$mn:0000A808 lpRect          = dword ptr  8
.text$mn:0000A808
.text$mn:0000A808                 push    ebp
.text$mn:0000A809                 mov     ebp, esp
.text$mn:0000A80B                 push    ecx
.text$mn:0000A80C                 mov     [ebp+var_4], ecx
.text$mn:0000A80F                 mov     eax, [ebp+lpRect]
.text$mn:0000A812                 push    eax             ; lpRect
.text$mn:0000A813                 mov     ecx, [ebp+var_4]
.text$mn:0000A816                 mov     edx, [ecx+0Ch]
.text$mn:0000A819                 push    edx             ; hWnd
.text$mn:0000A81A                 call    dword ptr ds:__imp__GetClientRect@8 ; GetClientRect(x,x)
.text$mn:0000A820                 mov     esp, ebp
.text$mn:0000A822                 pop     ebp
.text$mn:0000A823                 retn    4
.text$mn:0000A823 ?getClientRect@Window@@UBEXAAUtagRECT@@@Z endp
.text$mn:0000A823
.text$mn:0000A823 ; ---------------------------------------------------------------------------
.text$mn:0000A826                 align 4
.text$mn:0000A826 _text$mn        ends
.text$mn:0000A826
.text$mn:0000A828 ; ===========================================================================
.text$mn:0000A828
.text$mn:0000A828 ; Segment type: Pure code
.text$mn:0000A828 ; Segment permissions: Read/Execute
.text$mn:0000A828 _text$mn        segment para public 'CODE' use32
.text$mn:0000A828                 assume cs:_text$mn
.text$mn:0000A828                 ;org 0A828h
.text$mn:0000A828 ; COMDAT (pick any)
.text$mn:0000A828                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A828
.text$mn:0000A828 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A828
.text$mn:0000A828 ; Attributes: bp-based frame
.text$mn:0000A828
.text$mn:0000A828 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __thiscall FileRelocalizerDlg::getFullFilePath(void)
.text$mn:0000A828                 public ?getFullFilePath@FileRelocalizerDlg@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.text$mn:0000A828 ?getFullFilePath@FileRelocalizerDlg@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ proc near
.text$mn:0000A828                                         ; CODE XREF: ProjectPanel::popupMenuCmd(int)+932p
.text$mn:0000A828
.text$mn:0000A828 var_14          = dword ptr -14h
.text$mn:0000A828 var_10          = dword ptr -10h
.text$mn:0000A828 var_C           = dword ptr -0Ch
.text$mn:0000A828 var_4           = dword ptr -4
.text$mn:0000A828 arg_0           = dword ptr  8
.text$mn:0000A828
.text$mn:0000A828                 push    ebp
.text$mn:0000A829                 mov     ebp, esp
.text$mn:0000A82B                 push    0FFFFFFFFh
.text$mn:0000A82D                 push    offset __ehhandler$?getFullFilePath@FileRelocalizerDlg@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.text$mn:0000A832                 mov     eax, large fs:0
.text$mn:0000A838                 push    eax
.text$mn:0000A839                 sub     esp, 8
.text$mn:0000A83C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000A841                 xor     eax, ebp
.text$mn:0000A843                 push    eax
.text$mn:0000A844                 lea     eax, [ebp+var_C]
.text$mn:0000A847                 mov     large fs:0, eax
.text$mn:0000A84D                 mov     [ebp+var_14], ecx
.text$mn:0000A850                 mov     [ebp+var_10], 0
.text$mn:0000A857                 mov     eax, [ebp+var_14]
.text$mn:0000A85A                 add     eax, 20h ; ' '
.text$mn:0000A85D                 push    eax
.text$mn:0000A85E                 mov     ecx, [ebp+arg_0]
.text$mn:0000A861                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000A866                 mov     [ebp+var_4], 0
.text$mn:0000A86D                 mov     ecx, [ebp+var_10]
.text$mn:0000A870                 or      ecx, 1
.text$mn:0000A873                 mov     [ebp+var_10], ecx
.text$mn:0000A876                 mov     eax, [ebp+arg_0]
.text$mn:0000A879                 mov     ecx, [ebp+var_C]
.text$mn:0000A87C                 mov     large fs:0, ecx
.text$mn:0000A883                 pop     ecx
.text$mn:0000A884                 mov     esp, ebp
.text$mn:0000A886                 pop     ebp
.text$mn:0000A887                 retn    4
.text$mn:0000A887 ?getFullFilePath@FileRelocalizerDlg@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ endp
.text$mn:0000A887
.text$mn:0000A887 ; ---------------------------------------------------------------------------
.text$mn:0000A88A                 align 4
.text$mn:0000A88A _text$mn        ends
.text$mn:0000A88A
.text$x:0000A88C ; ===========================================================================
.text$x:0000A88C
.text$x:0000A88C ; Segment type: Pure code
.text$x:0000A88C ; Segment permissions: Read/Execute
.text$x:0000A88C _text$x         segment para public 'CODE' use32
.text$x:0000A88C                 assume cs:_text$x
.text$x:0000A88C                 ;org 0A88Ch
.text$x:0000A88C ; COMDAT (pick associative to section at A828)
.text$x:0000A88C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A88C
.text$x:0000A88C ; =============== S U B R O U T I N E =======================================
.text$x:0000A88C
.text$x:0000A88C
.text$x:0000A88C __unwindfunclet$?getFullFilePath@FileRelocalizerDlg@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0 proc near
.text$x:0000A88C                                         ; DATA XREF: .xdata$x:0000CAB8o
.text$x:0000A88C                 mov     eax, [ebp-10h]
.text$x:0000A88F                 and     eax, 1
.text$x:0000A892                 jz      $LN4_3
.text$x:0000A898                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:0000A89C                 mov     ecx, [ebp+8]
.text$x:0000A89F                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000A8A4 ; ---------------------------------------------------------------------------
.text$x:0000A8A4
.text$x:0000A8A4 $LN4_3:                                 ; CODE XREF: __unwindfunclet$?getFullFilePath@FileRelocalizerDlg@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0+6j
.text$x:0000A8A4                 retn
.text$x:0000A8A4 __unwindfunclet$?getFullFilePath@FileRelocalizerDlg@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0 endp
.text$x:0000A8A4
.text$x:0000A8A5
.text$x:0000A8A5 ; =============== S U B R O U T I N E =======================================
.text$x:0000A8A5
.text$x:0000A8A5
.text$x:0000A8A5 __ehhandler$?getFullFilePath@FileRelocalizerDlg@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ proc near
.text$x:0000A8A5                                         ; DATA XREF: FileRelocalizerDlg::getFullFilePath(void)+5o
.text$x:0000A8A5
.text$x:0000A8A5 arg_4           = dword ptr  8
.text$x:0000A8A5
.text$x:0000A8A5                 mov     edx, [esp+arg_4]
.text$x:0000A8A9                 lea     eax, [edx+0Ch]
.text$x:0000A8AC                 mov     ecx, [edx-0Ch]
.text$x:0000A8AF                 xor     ecx, eax
.text$x:0000A8B1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A8B6                 mov     eax, offset __ehfuncinfo$?getFullFilePath@FileRelocalizerDlg@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.text$x:0000A8BB                 jmp     ___CxxFrameHandler3
.text$x:0000A8BB __ehhandler$?getFullFilePath@FileRelocalizerDlg@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ endp
.text$x:0000A8BB
.text$x:0000A8BB _text$x         ends
.text$x:0000A8BB
.text$mn:0000A8C0 ; ===========================================================================
.text$mn:0000A8C0
.text$mn:0000A8C0 ; Segment type: Pure code
.text$mn:0000A8C0 ; Segment permissions: Read/Execute
.text$mn:0000A8C0 _text$mn        segment para public 'CODE' use32
.text$mn:0000A8C0                 assume cs:_text$mn
.text$mn:0000A8C0                 ;org 0A8C0h
.text$mn:0000A8C0 ; COMDAT (pick any)
.text$mn:0000A8C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A8C0
.text$mn:0000A8C0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A8C0
.text$mn:0000A8C0 ; Attributes: bp-based frame
.text$mn:0000A8C0
.text$mn:0000A8C0 ; HWND __thiscall Window::getHSelf(Window *__hidden this)
.text$mn:0000A8C0                 public ?getHSelf@Window@@QBEPAUHWND__@@XZ
.text$mn:0000A8C0 ?getHSelf@Window@@QBEPAUHWND__@@XZ proc near
.text$mn:0000A8C0                                         ; CODE XREF: ProjectPanel::setImageList(int,int,int,int,int,int,int)+24Cp
.text$mn:0000A8C0                                         ; ProjectPanel::addFolder(_TREEITEM *,wchar_t const *)+34p ...
.text$mn:0000A8C0
.text$mn:0000A8C0 var_4           = dword ptr -4
.text$mn:0000A8C0
.text$mn:0000A8C0                 push    ebp
.text$mn:0000A8C1                 mov     ebp, esp
.text$mn:0000A8C3                 push    ecx
.text$mn:0000A8C4                 mov     [ebp+var_4], ecx
.text$mn:0000A8C7                 mov     eax, [ebp+var_4]
.text$mn:0000A8CA                 mov     eax, [eax+0Ch]
.text$mn:0000A8CD                 mov     esp, ebp
.text$mn:0000A8CF                 pop     ebp
.text$mn:0000A8D0                 retn
.text$mn:0000A8D0 ?getHSelf@Window@@QBEPAUHWND__@@XZ endp
.text$mn:0000A8D0
.text$mn:0000A8D0 ; ---------------------------------------------------------------------------
.text$mn:0000A8D1                 align 4
.text$mn:0000A8D1 _text$mn        ends
.text$mn:0000A8D1
.text$mn:0000A8D4 ; ===========================================================================
.text$mn:0000A8D4
.text$mn:0000A8D4 ; Segment type: Pure code
.text$mn:0000A8D4 ; Segment permissions: Read/Execute
.text$mn:0000A8D4 _text$mn        segment para public 'CODE' use32
.text$mn:0000A8D4                 assume cs:_text$mn
.text$mn:0000A8D4                 ;org 0A8D4h
.text$mn:0000A8D4 ; COMDAT (pick any)
.text$mn:0000A8D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A8D4
.text$mn:0000A8D4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A8D4
.text$mn:0000A8D4 ; Attributes: bp-based frame
.text$mn:0000A8D4
.text$mn:0000A8D4 ; int __thiscall Window::getHeight(Window *__hidden this)
.text$mn:0000A8D4                 public ?getHeight@Window@@UBEHXZ
.text$mn:0000A8D4 ?getHeight@Window@@UBEHXZ proc near     ; DATA XREF: .rdata:0000D1F4o
.text$mn:0000A8D4                                         ; .rdata:0000D228o ...
.text$mn:0000A8D4
.text$mn:0000A8D4 var_18          = dword ptr -18h
.text$mn:0000A8D4 Rect            = tagRECT ptr -14h
.text$mn:0000A8D4 var_4           = dword ptr -4
.text$mn:0000A8D4
.text$mn:0000A8D4                 push    ebp
.text$mn:0000A8D5                 mov     ebp, esp
.text$mn:0000A8D7                 sub     esp, 18h
.text$mn:0000A8DA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000A8DF                 xor     eax, ebp
.text$mn:0000A8E1                 mov     [ebp+var_4], eax
.text$mn:0000A8E4                 mov     [ebp+var_18], ecx
.text$mn:0000A8E7                 lea     eax, [ebp+Rect]
.text$mn:0000A8EA                 push    eax             ; lpRect
.text$mn:0000A8EB                 mov     ecx, [ebp+var_18]
.text$mn:0000A8EE                 mov     edx, [ecx+0Ch]
.text$mn:0000A8F1                 push    edx             ; hWnd
.text$mn:0000A8F2                 call    dword ptr ds:__imp__GetClientRect@8 ; GetClientRect(x,x)
.text$mn:0000A8F8                 mov     eax, [ebp+var_18]
.text$mn:0000A8FB                 mov     ecx, [eax+0Ch]
.text$mn:0000A8FE                 push    ecx             ; hWnd
.text$mn:0000A8FF                 call    dword ptr ds:__imp__IsWindowVisible@4 ; IsWindowVisible(x)
.text$mn:0000A905                 cmp     eax, 1
.text$mn:0000A908                 jnz     short loc_A912
.text$mn:0000A90A                 mov     eax, [ebp+Rect.bottom]
.text$mn:0000A90D                 sub     eax, [ebp+Rect.top]
.text$mn:0000A910                 jmp     short loc_A914
.text$mn:0000A912 ; ---------------------------------------------------------------------------
.text$mn:0000A912
.text$mn:0000A912 loc_A912:                               ; CODE XREF: Window::getHeight(void)+34j
.text$mn:0000A912                 xor     eax, eax
.text$mn:0000A914
.text$mn:0000A914 loc_A914:                               ; CODE XREF: Window::getHeight(void)+3Cj
.text$mn:0000A914                 mov     ecx, [ebp+var_4]
.text$mn:0000A917                 xor     ecx, ebp
.text$mn:0000A919                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000A91E                 mov     esp, ebp
.text$mn:0000A920                 pop     ebp
.text$mn:0000A921                 retn
.text$mn:0000A921 ?getHeight@Window@@UBEHXZ endp
.text$mn:0000A921
.text$mn:0000A921 ; ---------------------------------------------------------------------------
.text$mn:0000A922                 align 4
.text$mn:0000A922 _text$mn        ends
.text$mn:0000A922
.text$mn:0000A924 ; ===========================================================================
.text$mn:0000A924
.text$mn:0000A924 ; Segment type: Pure code
.text$mn:0000A924 ; Segment permissions: Read/Execute
.text$mn:0000A924 _text$mn        segment para public 'CODE' use32
.text$mn:0000A924                 assume cs:_text$mn
.text$mn:0000A924                 ;org 0A924h
.text$mn:0000A924 ; COMDAT (pick any)
.text$mn:0000A924                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A924
.text$mn:0000A924 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A924
.text$mn:0000A924 ; Attributes: bp-based frame
.text$mn:0000A924
.text$mn:0000A924 ; struct NppParameters *__cdecl NppParameters::getInstance()
.text$mn:0000A924                 public ?getInstance@NppParameters@@SAPAV1@XZ
.text$mn:0000A924 ?getInstance@NppParameters@@SAPAV1@XZ proc near
.text$mn:0000A924                                         ; CODE XREF: ProjectPanel::newWorkSpace(void)+2Bp
.text$mn:0000A924                                         ; ProjectPanel::openWorkSpace(wchar_t const *)+F6p ...
.text$mn:0000A924                 push    ebp
.text$mn:0000A925                 mov     ebp, esp
.text$mn:0000A927                 mov     eax, dword ptr ds:?_pSelf@NppParameters@@0PAV1@A ; NppParameters * NppParameters::_pSelf
.text$mn:0000A92C                 pop     ebp
.text$mn:0000A92D                 retn
.text$mn:0000A92D ?getInstance@NppParameters@@SAPAV1@XZ endp
.text$mn:0000A92D
.text$mn:0000A92D ; ---------------------------------------------------------------------------
.text$mn:0000A92E                 align 10h
.text$mn:0000A92E _text$mn        ends
.text$mn:0000A92E
.text$mn:0000A930 ; ===========================================================================
.text$mn:0000A930
.text$mn:0000A930 ; Segment type: Pure code
.text$mn:0000A930 ; Segment permissions: Read/Execute
.text$mn:0000A930 _text$mn        segment para public 'CODE' use32
.text$mn:0000A930                 assume cs:_text$mn
.text$mn:0000A930                 ;org 0A930h
.text$mn:0000A930 ; COMDAT (pick any)
.text$mn:0000A930                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A930
.text$mn:0000A930 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A930
.text$mn:0000A930 ; Attributes: bp-based frame
.text$mn:0000A930
.text$mn:0000A930 ; struct NativeLangSpeaker *__thiscall NppParameters::getNativeLangSpeaker(NppParameters *__hidden this)
.text$mn:0000A930                 public ?getNativeLangSpeaker@NppParameters@@QAEPAVNativeLangSpeaker@@XZ
.text$mn:0000A930 ?getNativeLangSpeaker@NppParameters@@QAEPAVNativeLangSpeaker@@XZ proc near
.text$mn:0000A930                                         ; CODE XREF: ProjectPanel::newWorkSpace(void)+32p
.text$mn:0000A930                                         ; ProjectPanel::openWorkSpace(wchar_t const *)+FDp ...
.text$mn:0000A930
.text$mn:0000A930 var_4           = dword ptr -4
.text$mn:0000A930
.text$mn:0000A930                 push    ebp
.text$mn:0000A931                 mov     ebp, esp
.text$mn:0000A933                 push    ecx
.text$mn:0000A934                 mov     [ebp+var_4], ecx
.text$mn:0000A937                 mov     eax, [ebp+var_4]
.text$mn:0000A93A                 mov     eax, [eax+1CC20h]
.text$mn:0000A940                 mov     esp, ebp
.text$mn:0000A942                 pop     ebp
.text$mn:0000A943                 retn
.text$mn:0000A943 ?getNativeLangSpeaker@NppParameters@@QAEPAVNativeLangSpeaker@@XZ endp
.text$mn:0000A943
.text$mn:0000A943 _text$mn        ends
.text$mn:0000A943
.text$mn:0000A944 ; ===========================================================================
.text$mn:0000A944
.text$mn:0000A944 ; Segment type: Pure code
.text$mn:0000A944 ; Segment permissions: Read/Execute
.text$mn:0000A944 _text$mn        segment para public 'CODE' use32
.text$mn:0000A944                 assume cs:_text$mn
.text$mn:0000A944                 ;org 0A944h
.text$mn:0000A944 ; COMDAT (pick any)
.text$mn:0000A944                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A944
.text$mn:0000A944 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A944
.text$mn:0000A944 ; Attributes: bp-based frame
.text$mn:0000A944
.text$mn:0000A944 ; struct _TREEITEM *__thiscall TreeView::getNextSibling(TreeView *this, struct _TREEITEM *)
.text$mn:0000A944                 public ?getNextSibling@TreeView@@QBEPAU_TREEITEM@@PAU2@@Z
.text$mn:0000A944 ?getNextSibling@TreeView@@QBEPAU_TREEITEM@@PAU2@@Z proc near
.text$mn:0000A944                                         ; CODE XREF: ProjectPanel::writeWorkSpace(wchar_t *)+159p
.text$mn:0000A944                                         ; ProjectPanel::buildProjectXml(TiXmlNode *,_TREEITEM *,wchar_t const *)+7Bp
.text$mn:0000A944
.text$mn:0000A944 var_4           = dword ptr -4
.text$mn:0000A944 lParam          = dword ptr  8
.text$mn:0000A944
.text$mn:0000A944                 push    ebp
.text$mn:0000A945                 mov     ebp, esp
.text$mn:0000A947                 push    ecx
.text$mn:0000A948                 mov     [ebp+var_4], ecx
.text$mn:0000A94B                 mov     eax, [ebp+lParam]
.text$mn:0000A94E                 push    eax             ; lParam
.text$mn:0000A94F                 push    1               ; wParam
.text$mn:0000A951                 push    110Ah           ; Msg
.text$mn:0000A956                 mov     ecx, [ebp+var_4]
.text$mn:0000A959                 mov     edx, [ecx+0Ch]
.text$mn:0000A95C                 push    edx             ; hWnd
.text$mn:0000A95D                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000A963                 mov     esp, ebp
.text$mn:0000A965                 pop     ebp
.text$mn:0000A966                 retn    4
.text$mn:0000A966 ?getNextSibling@TreeView@@QBEPAU_TREEITEM@@PAU2@@Z endp
.text$mn:0000A966
.text$mn:0000A966 ; ---------------------------------------------------------------------------
.text$mn:0000A969                 align 4
.text$mn:0000A969 _text$mn        ends
.text$mn:0000A969
.text$mn:0000A96C ; ===========================================================================
.text$mn:0000A96C
.text$mn:0000A96C ; Segment type: Pure code
.text$mn:0000A96C ; Segment permissions: Read/Execute
.text$mn:0000A96C _text$mn        segment para public 'CODE' use32
.text$mn:0000A96C                 assume cs:_text$mn
.text$mn:0000A96C                 ;org 0A96Ch
.text$mn:0000A96C ; COMDAT (pick any)
.text$mn:0000A96C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A96C
.text$mn:0000A96C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A96C
.text$mn:0000A96C ; Attributes: bp-based frame
.text$mn:0000A96C
.text$mn:0000A96C ; struct _TREEITEM *__thiscall TreeView::getParent(TreeView *this, struct _TREEITEM *)
.text$mn:0000A96C                 public ?getParent@TreeView@@QBEPAU_TREEITEM@@PAU2@@Z
.text$mn:0000A96C ?getParent@TreeView@@QBEPAU_TREEITEM@@PAU2@@Z proc near
.text$mn:0000A96C                                         ; CODE XREF: ProjectPanel::popupMenuCmd(int)+6AFp
.text$mn:0000A96C                                         ; ProjectPanel::popupMenuCmd(int)+7ABp
.text$mn:0000A96C
.text$mn:0000A96C var_4           = dword ptr -4
.text$mn:0000A96C lParam          = dword ptr  8
.text$mn:0000A96C
.text$mn:0000A96C                 push    ebp
.text$mn:0000A96D                 mov     ebp, esp
.text$mn:0000A96F                 push    ecx
.text$mn:0000A970                 mov     [ebp+var_4], ecx
.text$mn:0000A973                 mov     eax, [ebp+lParam]
.text$mn:0000A976                 push    eax             ; lParam
.text$mn:0000A977                 push    3               ; wParam
.text$mn:0000A979                 push    110Ah           ; Msg
.text$mn:0000A97E                 mov     ecx, [ebp+var_4]
.text$mn:0000A981                 mov     edx, [ecx+0Ch]
.text$mn:0000A984                 push    edx             ; hWnd
.text$mn:0000A985                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000A98B                 mov     esp, ebp
.text$mn:0000A98D                 pop     ebp
.text$mn:0000A98E                 retn    4
.text$mn:0000A98E ?getParent@TreeView@@QBEPAU_TREEITEM@@PAU2@@Z endp
.text$mn:0000A98E
.text$mn:0000A98E ; ---------------------------------------------------------------------------
.text$mn:0000A991                 align 4
.text$mn:0000A991 _text$mn        ends
.text$mn:0000A991
.text$mn:0000A994 ; ===========================================================================
.text$mn:0000A994
.text$mn:0000A994 ; Segment type: Pure code
.text$mn:0000A994 ; Segment permissions: Read/Execute
.text$mn:0000A994 _text$mn        segment para public 'CODE' use32
.text$mn:0000A994                 assume cs:_text$mn
.text$mn:0000A994                 ;org 0A994h
.text$mn:0000A994 ; COMDAT (pick any)
.text$mn:0000A994                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A994
.text$mn:0000A994 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A994
.text$mn:0000A994 ; Attributes: bp-based frame
.text$mn:0000A994
.text$mn:0000A994 ; struct _TREEITEM *__thiscall TreeView::getRoot(TreeView *__hidden this)
.text$mn:0000A994                 public ?getRoot@TreeView@@QBEPAU_TREEITEM@@XZ
.text$mn:0000A994 ?getRoot@TreeView@@QBEPAU_TREEITEM@@XZ proc near
.text$mn:0000A994                                         ; CODE XREF: ProjectPanel::writeWorkSpace(wchar_t *)+F4p
.text$mn:0000A994                                         ; ProjectPanel::setWorkSpaceDirty(bool)+47p ...
.text$mn:0000A994
.text$mn:0000A994 var_4           = dword ptr -4
.text$mn:0000A994
.text$mn:0000A994                 push    ebp
.text$mn:0000A995                 mov     ebp, esp
.text$mn:0000A997                 push    ecx
.text$mn:0000A998                 mov     [ebp+var_4], ecx
.text$mn:0000A99B                 push    0               ; lParam
.text$mn:0000A99D                 push    0               ; wParam
.text$mn:0000A99F                 push    110Ah           ; Msg
.text$mn:0000A9A4                 mov     eax, [ebp+var_4]
.text$mn:0000A9A7                 mov     ecx, [eax+0Ch]
.text$mn:0000A9AA                 push    ecx             ; hWnd
.text$mn:0000A9AB                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000A9B1                 mov     esp, ebp
.text$mn:0000A9B3                 pop     ebp
.text$mn:0000A9B4                 retn
.text$mn:0000A9B4 ?getRoot@TreeView@@QBEPAU_TREEITEM@@XZ endp
.text$mn:0000A9B4
.text$mn:0000A9B4 ; ---------------------------------------------------------------------------
.text$mn:0000A9B5                 align 4
.text$mn:0000A9B5 _text$mn        ends
.text$mn:0000A9B5
.text$mn:0000A9B8 ; ===========================================================================
.text$mn:0000A9B8
.text$mn:0000A9B8 ; Segment type: Pure code
.text$mn:0000A9B8 ; Segment permissions: Read/Execute
.text$mn:0000A9B8 _text$mn        segment para public 'CODE' use32
.text$mn:0000A9B8                 assume cs:_text$mn
.text$mn:0000A9B8                 ;org 0A9B8h
.text$mn:0000A9B8 ; COMDAT (pick any)
.text$mn:0000A9B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A9B8
.text$mn:0000A9B8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A9B8
.text$mn:0000A9B8 ; Attributes: bp-based frame
.text$mn:0000A9B8
.text$mn:0000A9B8 ; struct _TREEITEM *__thiscall TreeView::getSelection(TreeView *__hidden this)
.text$mn:0000A9B8                 public ?getSelection@TreeView@@QBEPAU_TREEITEM@@XZ
.text$mn:0000A9B8 ?getSelection@TreeView@@QBEPAU_TREEITEM@@XZ proc near
.text$mn:0000A9B8                                         ; CODE XREF: ProjectPanel::popupMenuCmd(int)+40p
.text$mn:0000A9B8                                         ; ProjectPanel::notified(tagNMHDR *)+12Ap ...
.text$mn:0000A9B8
.text$mn:0000A9B8 var_4           = dword ptr -4
.text$mn:0000A9B8
.text$mn:0000A9B8                 push    ebp
.text$mn:0000A9B9                 mov     ebp, esp
.text$mn:0000A9BB                 push    ecx
.text$mn:0000A9BC                 mov     [ebp+var_4], ecx
.text$mn:0000A9BF                 push    0               ; lParam
.text$mn:0000A9C1                 push    9               ; wParam
.text$mn:0000A9C3                 push    110Ah           ; Msg
.text$mn:0000A9C8                 mov     eax, [ebp+var_4]
.text$mn:0000A9CB                 mov     ecx, [eax+0Ch]
.text$mn:0000A9CE                 push    ecx             ; hWnd
.text$mn:0000A9CF                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000A9D5                 mov     esp, ebp
.text$mn:0000A9D7                 pop     ebp
.text$mn:0000A9D8                 retn
.text$mn:0000A9D8 ?getSelection@TreeView@@QBEPAU_TREEITEM@@XZ endp
.text$mn:0000A9D8
.text$mn:0000A9D8 ; ---------------------------------------------------------------------------
.text$mn:0000A9D9                 align 4
.text$mn:0000A9D9 _text$mn        ends
.text$mn:0000A9D9
.text$mn:0000A9DC ; ===========================================================================
.text$mn:0000A9DC
.text$mn:0000A9DC ; Segment type: Pure code
.text$mn:0000A9DC ; Segment permissions: Read/Execute
.text$mn:0000A9DC _text$mn        segment para public 'CODE' use32
.text$mn:0000A9DC                 assume cs:_text$mn
.text$mn:0000A9DC                 ;org 0A9DCh
.text$mn:0000A9DC ; COMDAT (pick any)
.text$mn:0000A9DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A9DC
.text$mn:0000A9DC ; =============== S U B R O U T I N E =======================================
.text$mn:0000A9DC
.text$mn:0000A9DC ; Attributes: bp-based frame
.text$mn:0000A9DC
.text$mn:0000A9DC ; int __thiscall Window::getWidth(Window *__hidden this)
.text$mn:0000A9DC                 public ?getWidth@Window@@UBEHXZ
.text$mn:0000A9DC ?getWidth@Window@@UBEHXZ proc near      ; DATA XREF: .rdata:0000D1F0o
.text$mn:0000A9DC                                         ; .rdata:0000D224o ...
.text$mn:0000A9DC
.text$mn:0000A9DC var_18          = dword ptr -18h
.text$mn:0000A9DC Rect            = tagRECT ptr -14h
.text$mn:0000A9DC var_4           = dword ptr -4
.text$mn:0000A9DC
.text$mn:0000A9DC                 push    ebp
.text$mn:0000A9DD                 mov     ebp, esp
.text$mn:0000A9DF                 sub     esp, 18h
.text$mn:0000A9E2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000A9E7                 xor     eax, ebp
.text$mn:0000A9E9                 mov     [ebp+var_4], eax
.text$mn:0000A9EC                 mov     [ebp+var_18], ecx
.text$mn:0000A9EF                 lea     eax, [ebp+Rect]
.text$mn:0000A9F2                 push    eax             ; lpRect
.text$mn:0000A9F3                 mov     ecx, [ebp+var_18]
.text$mn:0000A9F6                 mov     edx, [ecx+0Ch]
.text$mn:0000A9F9                 push    edx             ; hWnd
.text$mn:0000A9FA                 call    dword ptr ds:__imp__GetClientRect@8 ; GetClientRect(x,x)
.text$mn:0000AA00                 mov     eax, [ebp+Rect.right]
.text$mn:0000AA03                 sub     eax, [ebp+Rect.left]
.text$mn:0000AA06                 mov     ecx, [ebp+var_4]
.text$mn:0000AA09                 xor     ecx, ebp
.text$mn:0000AA0B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000AA10                 mov     esp, ebp
.text$mn:0000AA12                 pop     ebp
.text$mn:0000AA13                 retn
.text$mn:0000AA13 ?getWidth@Window@@UBEHXZ endp
.text$mn:0000AA13
.text$mn:0000AA13 _text$mn        ends
.text$mn:0000AA13
.text$mn:0000AA14 ; ===========================================================================
.text$mn:0000AA14
.text$mn:0000AA14 ; Segment type: Pure code
.text$mn:0000AA14 ; Segment permissions: Read/Execute
.text$mn:0000AA14 _text$mn        segment para public 'CODE' use32
.text$mn:0000AA14                 assume cs:_text$mn
.text$mn:0000AA14                 ;org 0AA14h
.text$mn:0000AA14 ; COMDAT (pick any)
.text$mn:0000AA14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AA14
.text$mn:0000AA14 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AA14
.text$mn:0000AA14 ; Attributes: bp-based frame
.text$mn:0000AA14
.text$mn:0000AA14 ; void __thiscall Window::getWindowRect(Window *this, struct tagRECT *)
.text$mn:0000AA14                 public ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z
.text$mn:0000AA14 ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z proc near
.text$mn:0000AA14                                         ; DATA XREF: .rdata:0000D1ECo
.text$mn:0000AA14                                         ; .rdata:0000D220o ...
.text$mn:0000AA14
.text$mn:0000AA14 var_4           = dword ptr -4
.text$mn:0000AA14 lpRect          = dword ptr  8
.text$mn:0000AA14
.text$mn:0000AA14                 push    ebp
.text$mn:0000AA15                 mov     ebp, esp
.text$mn:0000AA17                 push    ecx
.text$mn:0000AA18                 mov     [ebp+var_4], ecx
.text$mn:0000AA1B                 mov     eax, [ebp+lpRect]
.text$mn:0000AA1E                 push    eax             ; lpRect
.text$mn:0000AA1F                 mov     ecx, [ebp+var_4]
.text$mn:0000AA22                 mov     edx, [ecx+0Ch]
.text$mn:0000AA25                 push    edx             ; hWnd
.text$mn:0000AA26                 call    dword ptr ds:__imp__GetWindowRect@8 ; GetWindowRect(x,x)
.text$mn:0000AA2C                 mov     esp, ebp
.text$mn:0000AA2E                 pop     ebp
.text$mn:0000AA2F                 retn    4
.text$mn:0000AA2F ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z endp
.text$mn:0000AA2F
.text$mn:0000AA2F ; ---------------------------------------------------------------------------
.text$mn:0000AA32                 align 4
.text$mn:0000AA32 _text$mn        ends
.text$mn:0000AA32
.text$mn:0000AA34 ; ===========================================================================
.text$mn:0000AA34
.text$mn:0000AA34 ; Segment type: Pure code
.text$mn:0000AA34 ; Segment permissions: Read/Execute
.text$mn:0000AA34 _text$mn        segment para public 'CODE' use32
.text$mn:0000AA34                 assume cs:_text$mn
.text$mn:0000AA34                 ;org 0AA34h
.text$mn:0000AA34 ; COMDAT (pick any)
.text$mn:0000AA34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AA34
.text$mn:0000AA34 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AA34
.text$mn:0000AA34 ; Attributes: bp-based frame
.text$mn:0000AA34
.text$mn:0000AA34 ; void __thiscall FileRelocalizerDlg::init(FileRelocalizerDlg *this, HINSTANCE, HWND)
.text$mn:0000AA34                 public ?init@FileRelocalizerDlg@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z
.text$mn:0000AA34 ?init@FileRelocalizerDlg@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z proc near
.text$mn:0000AA34                                         ; CODE XREF: ProjectPanel::popupMenuCmd(int)+884p
.text$mn:0000AA34                                         ; DATA XREF: .rdata:0000D244o
.text$mn:0000AA34
.text$mn:0000AA34 var_4           = dword ptr -4
.text$mn:0000AA34 arg_0           = dword ptr  8
.text$mn:0000AA34 arg_4           = dword ptr  0Ch
.text$mn:0000AA34
.text$mn:0000AA34                 push    ebp
.text$mn:0000AA35                 mov     ebp, esp
.text$mn:0000AA37                 push    ecx
.text$mn:0000AA38                 mov     [ebp+var_4], ecx
.text$mn:0000AA3B                 mov     eax, [ebp+arg_4]
.text$mn:0000AA3E                 push    eax             ; HWND
.text$mn:0000AA3F                 mov     ecx, [ebp+arg_0]
.text$mn:0000AA42                 push    ecx             ; HINSTANCE
.text$mn:0000AA43                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000AA46                 call    ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; Window::init(HINSTANCE__ *,HWND__ *)
.text$mn:0000AA4B                 mov     esp, ebp
.text$mn:0000AA4D                 pop     ebp
.text$mn:0000AA4E                 retn    8
.text$mn:0000AA4E ?init@FileRelocalizerDlg@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z endp
.text$mn:0000AA4E
.text$mn:0000AA4E ; ---------------------------------------------------------------------------
.text$mn:0000AA51                 align 4
.text$mn:0000AA51 _text$mn        ends
.text$mn:0000AA51
.text$mn:0000AA54 ; ===========================================================================
.text$mn:0000AA54
.text$mn:0000AA54 ; Segment type: Pure code
.text$mn:0000AA54 ; Segment permissions: Read/Execute
.text$mn:0000AA54 _text$mn        segment para public 'CODE' use32
.text$mn:0000AA54                 assume cs:_text$mn
.text$mn:0000AA54                 ;org 0AA54h
.text$mn:0000AA54 ; COMDAT (pick any)
.text$mn:0000AA54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AA54
.text$mn:0000AA54 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AA54
.text$mn:0000AA54 ; Attributes: bp-based frame
.text$mn:0000AA54
.text$mn:0000AA54 ; void __thiscall Window::init(Window *this, HINSTANCE, HWND)
.text$mn:0000AA54                 public ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z
.text$mn:0000AA54 ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z proc near
.text$mn:0000AA54                                         ; CODE XREF: FileRelocalizerDlg::init(HINSTANCE__ *,HWND__ *)+12p
.text$mn:0000AA54                                         ; DATA XREF: .rdata:0000D1D0o ...
.text$mn:0000AA54
.text$mn:0000AA54 var_4           = dword ptr -4
.text$mn:0000AA54 arg_0           = dword ptr  8
.text$mn:0000AA54 arg_4           = dword ptr  0Ch
.text$mn:0000AA54
.text$mn:0000AA54                 push    ebp
.text$mn:0000AA55                 mov     ebp, esp
.text$mn:0000AA57                 push    ecx
.text$mn:0000AA58                 mov     [ebp+var_4], ecx
.text$mn:0000AA5B                 mov     eax, [ebp+var_4]
.text$mn:0000AA5E                 mov     ecx, [ebp+arg_0]
.text$mn:0000AA61                 mov     [eax+4], ecx
.text$mn:0000AA64                 mov     edx, [ebp+var_4]
.text$mn:0000AA67                 mov     eax, [ebp+arg_4]
.text$mn:0000AA6A                 mov     [edx+8], eax
.text$mn:0000AA6D                 mov     esp, ebp
.text$mn:0000AA6F                 pop     ebp
.text$mn:0000AA70                 retn    8
.text$mn:0000AA70 ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z endp
.text$mn:0000AA70
.text$mn:0000AA70 ; ---------------------------------------------------------------------------
.text$mn:0000AA73                 align 4
.text$mn:0000AA73 _text$mn        ends
.text$mn:0000AA73
.text$mn:0000AA74 ; ===========================================================================
.text$mn:0000AA74
.text$mn:0000AA74 ; Segment type: Pure code
.text$mn:0000AA74 ; Segment permissions: Read/Execute
.text$mn:0000AA74 _text$mn        segment para public 'CODE' use32
.text$mn:0000AA74                 assume cs:_text$mn
.text$mn:0000AA74                 ;org 0AA74h
.text$mn:0000AA74 ; COMDAT (pick any)
.text$mn:0000AA74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AA74
.text$mn:0000AA74 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AA74
.text$mn:0000AA74 ; Attributes: bp-based frame
.text$mn:0000AA74
.text$mn:0000AA74 ; bool __thiscall StaticDialog::isCreated(StaticDialog *__hidden this)
.text$mn:0000AA74                 public ?isCreated@StaticDialog@@UBE_NXZ
.text$mn:0000AA74 ?isCreated@StaticDialog@@UBE_NXZ proc near
.text$mn:0000AA74                                         ; CODE XREF: StaticDialog::~StaticDialog(void)+39p
.text$mn:0000AA74                                         ; DATA XREF: .rdata:0000D234o ...
.text$mn:0000AA74
.text$mn:0000AA74 var_8           = dword ptr -8
.text$mn:0000AA74 var_4           = dword ptr -4
.text$mn:0000AA74
.text$mn:0000AA74                 push    ebp
.text$mn:0000AA75                 mov     ebp, esp
.text$mn:0000AA77                 sub     esp, 8
.text$mn:0000AA7A                 mov     [ebp+var_8], ecx
.text$mn:0000AA7D                 mov     eax, [ebp+var_8]
.text$mn:0000AA80                 cmp     dword ptr [eax+0Ch], 0
.text$mn:0000AA84                 jz      short loc_AA8F
.text$mn:0000AA86                 mov     [ebp+var_4], 1
.text$mn:0000AA8D                 jmp     short loc_AA96
.text$mn:0000AA8F ; ---------------------------------------------------------------------------
.text$mn:0000AA8F
.text$mn:0000AA8F loc_AA8F:                               ; CODE XREF: StaticDialog::isCreated(void)+10j
.text$mn:0000AA8F                 mov     [ebp+var_4], 0
.text$mn:0000AA96
.text$mn:0000AA96 loc_AA96:                               ; CODE XREF: StaticDialog::isCreated(void)+19j
.text$mn:0000AA96                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000AA99                 mov     esp, ebp
.text$mn:0000AA9B                 pop     ebp
.text$mn:0000AA9C                 retn
.text$mn:0000AA9C ?isCreated@StaticDialog@@UBE_NXZ endp
.text$mn:0000AA9C
.text$mn:0000AA9C ; ---------------------------------------------------------------------------
.text$mn:0000AA9D                 align 10h
.text$mn:0000AA9D _text$mn        ends
.text$mn:0000AA9D
.text$mn:0000AAA0 ; ===========================================================================
.text$mn:0000AAA0
.text$mn:0000AAA0 ; Segment type: Pure code
.text$mn:0000AAA0 ; Segment permissions: Read/Execute
.text$mn:0000AAA0 _text$mn        segment para public 'CODE' use32
.text$mn:0000AAA0                 assume cs:_text$mn
.text$mn:0000AAA0                 ;org 0AAA0h
.text$mn:0000AAA0 ; COMDAT (pick any)
.text$mn:0000AAA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AAA0
.text$mn:0000AAA0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AAA0
.text$mn:0000AAA0 ; Attributes: bp-based frame
.text$mn:0000AAA0
.text$mn:0000AAA0 ; bool __thiscall TreeView::isDragging(TreeView *__hidden this)
.text$mn:0000AAA0                 public ?isDragging@TreeView@@QBE_NXZ
.text$mn:0000AAA0 ?isDragging@TreeView@@QBE_NXZ proc near ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+34Ep
.text$mn:0000AAA0                                         ; ProjectPanel::run_dlgProc(uint,uint,long)+394p ...
.text$mn:0000AAA0
.text$mn:0000AAA0 var_4           = dword ptr -4
.text$mn:0000AAA0
.text$mn:0000AAA0                 push    ebp
.text$mn:0000AAA1                 mov     ebp, esp
.text$mn:0000AAA3                 push    ecx
.text$mn:0000AAA4                 mov     [ebp+var_4], ecx
.text$mn:0000AAA7                 mov     eax, [ebp+var_4]
.text$mn:0000AAAA                 mov     al, [eax+1Ch]
.text$mn:0000AAAD                 mov     esp, ebp
.text$mn:0000AAAF                 pop     ebp
.text$mn:0000AAB0                 retn
.text$mn:0000AAB0 ?isDragging@TreeView@@QBE_NXZ endp
.text$mn:0000AAB0
.text$mn:0000AAB0 ; ---------------------------------------------------------------------------
.text$mn:0000AAB1                 align 4
.text$mn:0000AAB1 _text$mn        ends
.text$mn:0000AAB1
.text$mn:0000AAB4 ; ===========================================================================
.text$mn:0000AAB4
.text$mn:0000AAB4 ; Segment type: Pure code
.text$mn:0000AAB4 ; Segment permissions: Read/Execute
.text$mn:0000AAB4 _text$mn        segment para public 'CODE' use32
.text$mn:0000AAB4                 assume cs:_text$mn
.text$mn:0000AAB4                 ;org 0AAB4h
.text$mn:0000AAB4 ; COMDAT (pick any)
.text$mn:0000AAB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AAB4
.text$mn:0000AAB4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AAB4
.text$mn:0000AAB4 ; Attributes: bp-based frame
.text$mn:0000AAB4
.text$mn:0000AAB4 ; bool __thiscall Window::isVisible(Window *__hidden this)
.text$mn:0000AAB4                 public ?isVisible@Window@@UBE_NXZ
.text$mn:0000AAB4 ?isVisible@Window@@UBE_NXZ proc near    ; DATA XREF: .rdata:0000D1F8o
.text$mn:0000AAB4                                         ; .rdata:0000D22Co ...
.text$mn:0000AAB4
.text$mn:0000AAB4 var_8           = dword ptr -8
.text$mn:0000AAB4 var_1           = byte ptr -1
.text$mn:0000AAB4
.text$mn:0000AAB4                 push    ebp
.text$mn:0000AAB5                 mov     ebp, esp
.text$mn:0000AAB7                 sub     esp, 8
.text$mn:0000AABA                 mov     [ebp+var_8], ecx
.text$mn:0000AABD                 mov     eax, [ebp+var_8]
.text$mn:0000AAC0                 mov     ecx, [eax+0Ch]
.text$mn:0000AAC3                 push    ecx             ; hWnd
.text$mn:0000AAC4                 call    dword ptr ds:__imp__IsWindowVisible@4 ; IsWindowVisible(x)
.text$mn:0000AACA                 test    eax, eax
.text$mn:0000AACC                 jz      short loc_AAD4
.text$mn:0000AACE                 mov     [ebp+var_1], 1
.text$mn:0000AAD2                 jmp     short loc_AAD8
.text$mn:0000AAD4 ; ---------------------------------------------------------------------------
.text$mn:0000AAD4
.text$mn:0000AAD4 loc_AAD4:                               ; CODE XREF: Window::isVisible(void)+18j
.text$mn:0000AAD4                 mov     [ebp+var_1], 0
.text$mn:0000AAD8
.text$mn:0000AAD8 loc_AAD8:                               ; CODE XREF: Window::isVisible(void)+1Ej
.text$mn:0000AAD8                 mov     al, [ebp+var_1]
.text$mn:0000AADB                 mov     esp, ebp
.text$mn:0000AADD                 pop     ebp
.text$mn:0000AADE                 retn
.text$mn:0000AADE ?isVisible@Window@@UBE_NXZ endp
.text$mn:0000AADE
.text$mn:0000AADE ; ---------------------------------------------------------------------------
.text$mn:0000AADF                 align 10h
.text$mn:0000AADF _text$mn        ends
.text$mn:0000AADF
.text$mn:0000AAE0 ; ===========================================================================
.text$mn:0000AAE0
.text$mn:0000AAE0 ; Segment type: Pure code
.text$mn:0000AAE0 ; Segment permissions: Read/Execute
.text$mn:0000AAE0 _text$mn        segment para public 'CODE' use32
.text$mn:0000AAE0                 assume cs:_text$mn
.text$mn:0000AAE0                 ;org 0AAE0h
.text$mn:0000AAE0 ; COMDAT (pick any)
.text$mn:0000AAE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AAE0
.text$mn:0000AAE0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AAE0
.text$mn:0000AAE0 ; Attributes: bp-based frame
.text$mn:0000AAE0
.text$mn:0000AAE0 ; int __cdecl std::char_traits<char>::length(char *Str)
.text$mn:0000AAE0                 public ?length@?$char_traits@D@std@@SAIPBD@Z
.text$mn:0000AAE0 ?length@?$char_traits@D@std@@SAIPBD@Z proc near
.text$mn:0000AAE0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+21p
.text$mn:0000AAE0
.text$mn:0000AAE0 var_4           = dword ptr -4
.text$mn:0000AAE0 Str             = dword ptr  8
.text$mn:0000AAE0
.text$mn:0000AAE0                 push    ebp
.text$mn:0000AAE1                 mov     ebp, esp
.text$mn:0000AAE3                 push    ecx
.text$mn:0000AAE4                 mov     eax, [ebp+Str]
.text$mn:0000AAE7                 movsx   ecx, byte ptr [eax]
.text$mn:0000AAEA                 test    ecx, ecx
.text$mn:0000AAEC                 jnz     short loc_AAF7
.text$mn:0000AAEE                 mov     [ebp+var_4], 0
.text$mn:0000AAF5                 jmp     short loc_AB06
.text$mn:0000AAF7 ; ---------------------------------------------------------------------------
.text$mn:0000AAF7
.text$mn:0000AAF7 loc_AAF7:                               ; CODE XREF: std::char_traits<char>::length(char const *)+Cj
.text$mn:0000AAF7                 mov     edx, [ebp+Str]
.text$mn:0000AAFA                 push    edx             ; Str
.text$mn:0000AAFB                 call    _strlen
.text$mn:0000AB00                 add     esp, 4
.text$mn:0000AB03                 mov     [ebp+var_4], eax
.text$mn:0000AB06
.text$mn:0000AB06 loc_AB06:                               ; CODE XREF: std::char_traits<char>::length(char const *)+15j
.text$mn:0000AB06                 mov     eax, [ebp+var_4]
.text$mn:0000AB09                 mov     esp, ebp
.text$mn:0000AB0B                 pop     ebp
.text$mn:0000AB0C                 retn
.text$mn:0000AB0C ?length@?$char_traits@D@std@@SAIPBD@Z endp
.text$mn:0000AB0C
.text$mn:0000AB0C ; ---------------------------------------------------------------------------
.text$mn:0000AB0D                 align 10h
.text$mn:0000AB0D _text$mn        ends
.text$mn:0000AB0D
.text$mn:0000AB10 ; ===========================================================================
.text$mn:0000AB10
.text$mn:0000AB10 ; Segment type: Pure code
.text$mn:0000AB10 ; Segment permissions: Read/Execute
.text$mn:0000AB10 _text$mn        segment para public 'CODE' use32
.text$mn:0000AB10                 assume cs:_text$mn
.text$mn:0000AB10                 ;org 0AB10h
.text$mn:0000AB10 ; COMDAT (pick any)
.text$mn:0000AB10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AB10
.text$mn:0000AB10 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AB10
.text$mn:0000AB10 ; Attributes: bp-based frame
.text$mn:0000AB10
.text$mn:0000AB10 ; int __cdecl std::char_traits<wchar_t>::length(wchar_t *Str)
.text$mn:0000AB10                 public ?length@?$char_traits@_W@std@@SAIPB_W@Z
.text$mn:0000AB10 ?length@?$char_traits@_W@std@@SAIPB_W@Z proc near
.text$mn:0000AB10                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+21p
.text$mn:0000AB10                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+21p ...
.text$mn:0000AB10
.text$mn:0000AB10 var_4           = dword ptr -4
.text$mn:0000AB10 Str             = dword ptr  8
.text$mn:0000AB10
.text$mn:0000AB10                 push    ebp
.text$mn:0000AB11                 mov     ebp, esp
.text$mn:0000AB13                 push    ecx
.text$mn:0000AB14                 mov     eax, [ebp+Str]
.text$mn:0000AB17                 movzx   ecx, word ptr [eax]
.text$mn:0000AB1A                 test    ecx, ecx
.text$mn:0000AB1C                 jnz     short loc_AB27
.text$mn:0000AB1E                 mov     [ebp+var_4], 0
.text$mn:0000AB25                 jmp     short loc_AB36
.text$mn:0000AB27 ; ---------------------------------------------------------------------------
.text$mn:0000AB27
.text$mn:0000AB27 loc_AB27:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+Cj
.text$mn:0000AB27                 mov     edx, [ebp+Str]
.text$mn:0000AB2A                 push    edx             ; Str
.text$mn:0000AB2B                 call    _wcslen
.text$mn:0000AB30                 add     esp, 4
.text$mn:0000AB33                 mov     [ebp+var_4], eax
.text$mn:0000AB36
.text$mn:0000AB36 loc_AB36:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+15j
.text$mn:0000AB36                 mov     eax, [ebp+var_4]
.text$mn:0000AB39                 mov     esp, ebp
.text$mn:0000AB3B                 pop     ebp
.text$mn:0000AB3C                 retn
.text$mn:0000AB3C ?length@?$char_traits@_W@std@@SAIPB_W@Z endp
.text$mn:0000AB3C
.text$mn:0000AB3C ; ---------------------------------------------------------------------------
.text$mn:0000AB3D                 align 10h
.text$mn:0000AB3D _text$mn        ends
.text$mn:0000AB3D
.text$mn:0000AB40 ; ===========================================================================
.text$mn:0000AB40
.text$mn:0000AB40 ; Segment type: Pure code
.text$mn:0000AB40 ; Segment permissions: Read/Execute
.text$mn:0000AB40 _text$mn        segment para public 'CODE' use32
.text$mn:0000AB40                 assume cs:_text$mn
.text$mn:0000AB40                 ;org 0AB40h
.text$mn:0000AB40 ; COMDAT (pick any)
.text$mn:0000AB40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AB40
.text$mn:0000AB40 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AB40
.text$mn:0000AB40 ; Attributes: bp-based frame
.text$mn:0000AB40
.text$mn:0000AB40 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<char>>::max_size(void)const
.text$mn:0000AB40                 public ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
.text$mn:0000AB40 ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
.text$mn:0000AB40                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+17p
.text$mn:0000AB40
.text$mn:0000AB40 var_4           = dword ptr -4
.text$mn:0000AB40
.text$mn:0000AB40                 push    ebp
.text$mn:0000AB41                 mov     ebp, esp
.text$mn:0000AB43                 push    ecx
.text$mn:0000AB44                 mov     [ebp+var_4], ecx
.text$mn:0000AB47                 mov     eax, [ebp+var_4]
.text$mn:0000AB4A                 push    eax
.text$mn:0000AB4B                 call    ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)
.text$mn:0000AB50                 add     esp, 4
.text$mn:0000AB53                 mov     esp, ebp
.text$mn:0000AB55                 pop     ebp
.text$mn:0000AB56                 retn
.text$mn:0000AB56 ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ endp
.text$mn:0000AB56
.text$mn:0000AB56 ; ---------------------------------------------------------------------------
.text$mn:0000AB57                 align 4
.text$mn:0000AB57 _text$mn        ends
.text$mn:0000AB57
.text$mn:0000AB58 ; ===========================================================================
.text$mn:0000AB58
.text$mn:0000AB58 ; Segment type: Pure code
.text$mn:0000AB58 ; Segment permissions: Read/Execute
.text$mn:0000AB58 _text$mn        segment para public 'CODE' use32
.text$mn:0000AB58                 assume cs:_text$mn
.text$mn:0000AB58                 ;org 0AB58h
.text$mn:0000AB58 ; COMDAT (pick any)
.text$mn:0000AB58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AB58
.text$mn:0000AB58 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AB58
.text$mn:0000AB58 ; Attributes: bp-based frame
.text$mn:0000AB58
.text$mn:0000AB58 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<int>>::max_size(void)const
.text$mn:0000AB58                 public ?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIXZ
.text$mn:0000AB58 ?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIXZ proc near
.text$mn:0000AB58                                         ; CODE XREF: std::vector<int,std::allocator<int>>::max_size(void)+17p
.text$mn:0000AB58
.text$mn:0000AB58 var_4           = dword ptr -4
.text$mn:0000AB58
.text$mn:0000AB58                 push    ebp
.text$mn:0000AB59                 mov     ebp, esp
.text$mn:0000AB5B                 push    ecx
.text$mn:0000AB5C                 mov     [ebp+var_4], ecx
.text$mn:0000AB5F                 mov     eax, [ebp+var_4]
.text$mn:0000AB62                 push    eax
.text$mn:0000AB63                 call    ?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z ; std::allocator_traits<std::allocator<int>>::max_size(std::allocator<int> const &)
.text$mn:0000AB68                 add     esp, 4
.text$mn:0000AB6B                 mov     esp, ebp
.text$mn:0000AB6D                 pop     ebp
.text$mn:0000AB6E                 retn
.text$mn:0000AB6E ?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIXZ endp
.text$mn:0000AB6E
.text$mn:0000AB6E ; ---------------------------------------------------------------------------
.text$mn:0000AB6F                 align 10h
.text$mn:0000AB6F _text$mn        ends
.text$mn:0000AB6F
.text$mn:0000AB70 ; ===========================================================================
.text$mn:0000AB70
.text$mn:0000AB70 ; Segment type: Pure code
.text$mn:0000AB70 ; Segment permissions: Read/Execute
.text$mn:0000AB70 _text$mn        segment para public 'CODE' use32
.text$mn:0000AB70                 assume cs:_text$mn
.text$mn:0000AB70                 ;org 0AB70h
.text$mn:0000AB70 ; COMDAT (pick any)
.text$mn:0000AB70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AB70
.text$mn:0000AB70 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AB70
.text$mn:0000AB70 ; Attributes: bp-based frame
.text$mn:0000AB70
.text$mn:0000AB70 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::max_size(void)const
.text$mn:0000AB70                 public ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ
.text$mn:0000AB70 ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ proc near
.text$mn:0000AB70                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)+17p
.text$mn:0000AB70
.text$mn:0000AB70 var_4           = dword ptr -4
.text$mn:0000AB70
.text$mn:0000AB70                 push    ebp
.text$mn:0000AB71                 mov     ebp, esp
.text$mn:0000AB73                 push    ecx
.text$mn:0000AB74                 mov     [ebp+var_4], ecx
.text$mn:0000AB77                 mov     eax, [ebp+var_4]
.text$mn:0000AB7A                 push    eax
.text$mn:0000AB7B                 call    ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)
.text$mn:0000AB80                 add     esp, 4
.text$mn:0000AB83                 mov     esp, ebp
.text$mn:0000AB85                 pop     ebp
.text$mn:0000AB86                 retn
.text$mn:0000AB86 ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ endp
.text$mn:0000AB86
.text$mn:0000AB86 ; ---------------------------------------------------------------------------
.text$mn:0000AB87                 align 4
.text$mn:0000AB87 _text$mn        ends
.text$mn:0000AB87
.text$mn:0000AB88 ; ===========================================================================
.text$mn:0000AB88
.text$mn:0000AB88 ; Segment type: Pure code
.text$mn:0000AB88 ; Segment permissions: Read/Execute
.text$mn:0000AB88 _text$mn        segment para public 'CODE' use32
.text$mn:0000AB88                 assume cs:_text$mn
.text$mn:0000AB88                 ;org 0AB88h
.text$mn:0000AB88 ; COMDAT (pick any)
.text$mn:0000AB88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AB88
.text$mn:0000AB88 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AB88
.text$mn:0000AB88 ; Attributes: bp-based frame
.text$mn:0000AB88
.text$mn:0000AB88 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::max_size(void)const
.text$mn:0000AB88                 public ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ
.text$mn:0000AB88 ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ proc near
.text$mn:0000AB88                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+17p
.text$mn:0000AB88
.text$mn:0000AB88 var_4           = dword ptr -4
.text$mn:0000AB88
.text$mn:0000AB88                 push    ebp
.text$mn:0000AB89                 mov     ebp, esp
.text$mn:0000AB8B                 push    ecx
.text$mn:0000AB8C                 mov     [ebp+var_4], ecx
.text$mn:0000AB8F                 mov     eax, [ebp+var_4]
.text$mn:0000AB92                 push    eax
.text$mn:0000AB93                 call    ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)
.text$mn:0000AB98                 add     esp, 4
.text$mn:0000AB9B                 mov     esp, ebp
.text$mn:0000AB9D                 pop     ebp
.text$mn:0000AB9E                 retn
.text$mn:0000AB9E ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ endp
.text$mn:0000AB9E
.text$mn:0000AB9E ; ---------------------------------------------------------------------------
.text$mn:0000AB9F                 align 10h
.text$mn:0000AB9F _text$mn        ends
.text$mn:0000AB9F
.text$mn:0000ABA0 ; ===========================================================================
.text$mn:0000ABA0
.text$mn:0000ABA0 ; Segment type: Pure code
.text$mn:0000ABA0 ; Segment permissions: Read/Execute
.text$mn:0000ABA0 _text$mn        segment para public 'CODE' use32
.text$mn:0000ABA0                 assume cs:_text$mn
.text$mn:0000ABA0                 ;org 0ABA0h
.text$mn:0000ABA0 ; COMDAT (pick any)
.text$mn:0000ABA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ABA0
.text$mn:0000ABA0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ABA0
.text$mn:0000ABA0 ; Attributes: bp-based frame
.text$mn:0000ABA0
.text$mn:0000ABA0 ; public: unsigned int __thiscall std::allocator<char>::max_size(void)const
.text$mn:0000ABA0                 public ?max_size@?$allocator@D@std@@QBEIXZ
.text$mn:0000ABA0 ?max_size@?$allocator@D@std@@QBEIXZ proc near
.text$mn:0000ABA0                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)+6p
.text$mn:0000ABA0
.text$mn:0000ABA0 var_4           = dword ptr -4
.text$mn:0000ABA0
.text$mn:0000ABA0                 push    ebp
.text$mn:0000ABA1                 mov     ebp, esp
.text$mn:0000ABA3                 push    ecx
.text$mn:0000ABA4                 mov     [ebp+var_4], ecx
.text$mn:0000ABA7                 or      eax, 0FFFFFFFFh
.text$mn:0000ABAA                 mov     esp, ebp
.text$mn:0000ABAC                 pop     ebp
.text$mn:0000ABAD                 retn
.text$mn:0000ABAD ?max_size@?$allocator@D@std@@QBEIXZ endp
.text$mn:0000ABAD
.text$mn:0000ABAD ; ---------------------------------------------------------------------------
.text$mn:0000ABAE                 align 10h
.text$mn:0000ABAE _text$mn        ends
.text$mn:0000ABAE
.text$mn:0000ABB0 ; ===========================================================================
.text$mn:0000ABB0
.text$mn:0000ABB0 ; Segment type: Pure code
.text$mn:0000ABB0 ; Segment permissions: Read/Execute
.text$mn:0000ABB0 _text$mn        segment para public 'CODE' use32
.text$mn:0000ABB0                 assume cs:_text$mn
.text$mn:0000ABB0                 ;org 0ABB0h
.text$mn:0000ABB0 ; COMDAT (pick any)
.text$mn:0000ABB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ABB0
.text$mn:0000ABB0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ABB0
.text$mn:0000ABB0 ; Attributes: bp-based frame
.text$mn:0000ABB0
.text$mn:0000ABB0 ; public: unsigned int __thiscall std::allocator<int>::max_size(void)const
.text$mn:0000ABB0                 public ?max_size@?$allocator@H@std@@QBEIXZ
.text$mn:0000ABB0 ?max_size@?$allocator@H@std@@QBEIXZ proc near
.text$mn:0000ABB0                                         ; CODE XREF: std::allocator_traits<std::allocator<int>>::max_size(std::allocator<int> const &)+6p
.text$mn:0000ABB0
.text$mn:0000ABB0 var_4           = dword ptr -4
.text$mn:0000ABB0
.text$mn:0000ABB0                 push    ebp
.text$mn:0000ABB1                 mov     ebp, esp
.text$mn:0000ABB3                 push    ecx
.text$mn:0000ABB4                 mov     [ebp+var_4], ecx
.text$mn:0000ABB7                 mov     eax, 3FFFFFFFh
.text$mn:0000ABBC                 mov     esp, ebp
.text$mn:0000ABBE                 pop     ebp
.text$mn:0000ABBF                 retn
.text$mn:0000ABBF ?max_size@?$allocator@H@std@@QBEIXZ endp
.text$mn:0000ABBF
.text$mn:0000ABBF _text$mn        ends
.text$mn:0000ABBF
.text$mn:0000ABC0 ; ===========================================================================
.text$mn:0000ABC0
.text$mn:0000ABC0 ; Segment type: Pure code
.text$mn:0000ABC0 ; Segment permissions: Read/Execute
.text$mn:0000ABC0 _text$mn        segment para public 'CODE' use32
.text$mn:0000ABC0                 assume cs:_text$mn
.text$mn:0000ABC0                 ;org 0ABC0h
.text$mn:0000ABC0 ; COMDAT (pick any)
.text$mn:0000ABC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ABC0
.text$mn:0000ABC0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ABC0
.text$mn:0000ABC0 ; Attributes: bp-based frame
.text$mn:0000ABC0
.text$mn:0000ABC0 ; public: unsigned int __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::max_size(void)const
.text$mn:0000ABC0                 public ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ
.text$mn:0000ABC0 ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ proc near
.text$mn:0000ABC0                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+6p
.text$mn:0000ABC0
.text$mn:0000ABC0 var_4           = dword ptr -4
.text$mn:0000ABC0
.text$mn:0000ABC0                 push    ebp
.text$mn:0000ABC1                 mov     ebp, esp
.text$mn:0000ABC3                 push    ecx
.text$mn:0000ABC4                 mov     [ebp+var_4], ecx
.text$mn:0000ABC7                 mov     eax, 9249249h
.text$mn:0000ABCC                 mov     esp, ebp
.text$mn:0000ABCE                 pop     ebp
.text$mn:0000ABCF                 retn
.text$mn:0000ABCF ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ endp
.text$mn:0000ABCF
.text$mn:0000ABCF _text$mn        ends
.text$mn:0000ABCF
.text$mn:0000ABD0 ; ===========================================================================
.text$mn:0000ABD0
.text$mn:0000ABD0 ; Segment type: Pure code
.text$mn:0000ABD0 ; Segment permissions: Read/Execute
.text$mn:0000ABD0 _text$mn        segment para public 'CODE' use32
.text$mn:0000ABD0                 assume cs:_text$mn
.text$mn:0000ABD0                 ;org 0ABD0h
.text$mn:0000ABD0 ; COMDAT (pick any)
.text$mn:0000ABD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ABD0
.text$mn:0000ABD0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ABD0
.text$mn:0000ABD0 ; Attributes: bp-based frame
.text$mn:0000ABD0
.text$mn:0000ABD0 ; public: unsigned int __thiscall std::allocator<wchar_t>::max_size(void)const
.text$mn:0000ABD0                 public ?max_size@?$allocator@_W@std@@QBEIXZ
.text$mn:0000ABD0 ?max_size@?$allocator@_W@std@@QBEIXZ proc near
.text$mn:0000ABD0                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)+6p
.text$mn:0000ABD0
.text$mn:0000ABD0 var_4           = dword ptr -4
.text$mn:0000ABD0
.text$mn:0000ABD0                 push    ebp
.text$mn:0000ABD1                 mov     ebp, esp
.text$mn:0000ABD3                 push    ecx
.text$mn:0000ABD4                 mov     [ebp+var_4], ecx
.text$mn:0000ABD7                 mov     eax, 7FFFFFFFh
.text$mn:0000ABDC                 mov     esp, ebp
.text$mn:0000ABDE                 pop     ebp
.text$mn:0000ABDF                 retn
.text$mn:0000ABDF ?max_size@?$allocator@_W@std@@QBEIXZ endp
.text$mn:0000ABDF
.text$mn:0000ABDF _text$mn        ends
.text$mn:0000ABDF
.text$mn:0000ABE0 ; ===========================================================================
.text$mn:0000ABE0
.text$mn:0000ABE0 ; Segment type: Pure code
.text$mn:0000ABE0 ; Segment permissions: Read/Execute
.text$mn:0000ABE0 _text$mn        segment para public 'CODE' use32
.text$mn:0000ABE0                 assume cs:_text$mn
.text$mn:0000ABE0                 ;org 0ABE0h
.text$mn:0000ABE0 ; COMDAT (pick any)
.text$mn:0000ABE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ABE0
.text$mn:0000ABE0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ABE0
.text$mn:0000ABE0 ; Attributes: bp-based frame
.text$mn:0000ABE0
.text$mn:0000ABE0 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<char>>::max_size(class std::allocator<char> const &)
.text$mn:0000ABE0                 public ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
.text$mn:0000ABE0 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z proc near
.text$mn:0000ABE0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::max_size(void)+Bp
.text$mn:0000ABE0
.text$mn:0000ABE0 arg_0           = dword ptr  8
.text$mn:0000ABE0
.text$mn:0000ABE0                 push    ebp
.text$mn:0000ABE1                 mov     ebp, esp
.text$mn:0000ABE3                 mov     ecx, [ebp+arg_0]
.text$mn:0000ABE6                 call    ?max_size@?$allocator@D@std@@QBEIXZ ; std::allocator<char>::max_size(void)
.text$mn:0000ABEB                 pop     ebp
.text$mn:0000ABEC                 retn
.text$mn:0000ABEC ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z endp
.text$mn:0000ABEC
.text$mn:0000ABEC ; ---------------------------------------------------------------------------
.text$mn:0000ABED                 align 10h
.text$mn:0000ABED _text$mn        ends
.text$mn:0000ABED
.text$mn:0000ABF0 ; ===========================================================================
.text$mn:0000ABF0
.text$mn:0000ABF0 ; Segment type: Pure code
.text$mn:0000ABF0 ; Segment permissions: Read/Execute
.text$mn:0000ABF0 _text$mn        segment para public 'CODE' use32
.text$mn:0000ABF0                 assume cs:_text$mn
.text$mn:0000ABF0                 ;org 0ABF0h
.text$mn:0000ABF0 ; COMDAT (pick any)
.text$mn:0000ABF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ABF0
.text$mn:0000ABF0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ABF0
.text$mn:0000ABF0 ; Attributes: bp-based frame
.text$mn:0000ABF0
.text$mn:0000ABF0 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<int>>::max_size(class std::allocator<int> const &)
.text$mn:0000ABF0                 public ?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z
.text$mn:0000ABF0 ?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z proc near
.text$mn:0000ABF0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<int>>::max_size(void)+Bp
.text$mn:0000ABF0
.text$mn:0000ABF0 arg_0           = dword ptr  8
.text$mn:0000ABF0
.text$mn:0000ABF0                 push    ebp
.text$mn:0000ABF1                 mov     ebp, esp
.text$mn:0000ABF3                 mov     ecx, [ebp+arg_0]
.text$mn:0000ABF6                 call    ?max_size@?$allocator@H@std@@QBEIXZ ; std::allocator<int>::max_size(void)
.text$mn:0000ABFB                 pop     ebp
.text$mn:0000ABFC                 retn
.text$mn:0000ABFC ?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z endp
.text$mn:0000ABFC
.text$mn:0000ABFC ; ---------------------------------------------------------------------------
.text$mn:0000ABFD                 align 10h
.text$mn:0000ABFD _text$mn        ends
.text$mn:0000ABFD
.text$mn:0000AC00 ; ===========================================================================
.text$mn:0000AC00
.text$mn:0000AC00 ; Segment type: Pure code
.text$mn:0000AC00 ; Segment permissions: Read/Execute
.text$mn:0000AC00 _text$mn        segment para public 'CODE' use32
.text$mn:0000AC00                 assume cs:_text$mn
.text$mn:0000AC00                 ;org 0AC00h
.text$mn:0000AC00 ; COMDAT (pick any)
.text$mn:0000AC00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AC00
.text$mn:0000AC00 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AC00
.text$mn:0000AC00 ; Attributes: bp-based frame
.text$mn:0000AC00
.text$mn:0000AC00 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::max_size(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> const &)
.text$mn:0000AC00                 public ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z
.text$mn:0000AC00 ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z proc near
.text$mn:0000AC00                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)+Bp
.text$mn:0000AC00
.text$mn:0000AC00 arg_0           = dword ptr  8
.text$mn:0000AC00
.text$mn:0000AC00                 push    ebp
.text$mn:0000AC01                 mov     ebp, esp
.text$mn:0000AC03                 mov     ecx, [ebp+arg_0]
.text$mn:0000AC06                 call    ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::max_size(void)
.text$mn:0000AC0B                 pop     ebp
.text$mn:0000AC0C                 retn
.text$mn:0000AC0C ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z endp
.text$mn:0000AC0C
.text$mn:0000AC0C ; ---------------------------------------------------------------------------
.text$mn:0000AC0D                 align 10h
.text$mn:0000AC0D _text$mn        ends
.text$mn:0000AC0D
.text$mn:0000AC10 ; ===========================================================================
.text$mn:0000AC10
.text$mn:0000AC10 ; Segment type: Pure code
.text$mn:0000AC10 ; Segment permissions: Read/Execute
.text$mn:0000AC10 _text$mn        segment para public 'CODE' use32
.text$mn:0000AC10                 assume cs:_text$mn
.text$mn:0000AC10                 ;org 0AC10h
.text$mn:0000AC10 ; COMDAT (pick any)
.text$mn:0000AC10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AC10
.text$mn:0000AC10 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AC10
.text$mn:0000AC10 ; Attributes: bp-based frame
.text$mn:0000AC10
.text$mn:0000AC10 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<wchar_t>>::max_size(class std::allocator<wchar_t> const &)
.text$mn:0000AC10                 public ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
.text$mn:0000AC10 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z proc near
.text$mn:0000AC10                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)+Bp
.text$mn:0000AC10
.text$mn:0000AC10 arg_0           = dword ptr  8
.text$mn:0000AC10
.text$mn:0000AC10                 push    ebp
.text$mn:0000AC11                 mov     ebp, esp
.text$mn:0000AC13                 mov     ecx, [ebp+arg_0]
.text$mn:0000AC16                 call    ?max_size@?$allocator@_W@std@@QBEIXZ ; std::allocator<wchar_t>::max_size(void)
.text$mn:0000AC1B                 pop     ebp
.text$mn:0000AC1C                 retn
.text$mn:0000AC1C ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z endp
.text$mn:0000AC1C
.text$mn:0000AC1C ; ---------------------------------------------------------------------------
.text$mn:0000AC1D                 align 10h
.text$mn:0000AC1D _text$mn        ends
.text$mn:0000AC1D
.text$mn:0000AC20 ; ===========================================================================
.text$mn:0000AC20
.text$mn:0000AC20 ; Segment type: Pure code
.text$mn:0000AC20 ; Segment permissions: Read/Execute
.text$mn:0000AC20 _text$mn        segment para public 'CODE' use32
.text$mn:0000AC20                 assume cs:_text$mn
.text$mn:0000AC20                 ;org 0AC20h
.text$mn:0000AC20 ; COMDAT (pick any)
.text$mn:0000AC20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AC20
.text$mn:0000AC20 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AC20
.text$mn:0000AC20 ; Attributes: bp-based frame
.text$mn:0000AC20
.text$mn:0000AC20 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::max_size(void)const
.text$mn:0000AC20                 public ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:0000AC20 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:0000AC20                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+3Bp
.text$mn:0000AC20                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+6Ap ...
.text$mn:0000AC20
.text$mn:0000AC20 var_10          = dword ptr -10h
.text$mn:0000AC20 var_C           = dword ptr -0Ch
.text$mn:0000AC20 var_8           = dword ptr -8
.text$mn:0000AC20 var_1           = byte ptr -1
.text$mn:0000AC20
.text$mn:0000AC20                 push    ebp
.text$mn:0000AC21                 mov     ebp, esp
.text$mn:0000AC23                 sub     esp, 10h
.text$mn:0000AC26                 mov     [ebp+var_10], ecx
.text$mn:0000AC29                 lea     eax, [ebp+var_1]
.text$mn:0000AC2C                 push    eax
.text$mn:0000AC2D                 mov     ecx, [ebp+var_10]
.text$mn:0000AC30                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:0000AC35                 mov     ecx, eax
.text$mn:0000AC37                 call    ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char>>::max_size(void)
.text$mn:0000AC3C                 mov     [ebp+var_8], eax
.text$mn:0000AC3F                 cmp     [ebp+var_8], 1
.text$mn:0000AC43                 ja      short loc_AC4E
.text$mn:0000AC45                 mov     [ebp+var_C], 1
.text$mn:0000AC4C                 jmp     short loc_AC57
.text$mn:0000AC4E ; ---------------------------------------------------------------------------
.text$mn:0000AC4E
.text$mn:0000AC4E loc_AC4E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+23j
.text$mn:0000AC4E                 mov     ecx, [ebp+var_8]
.text$mn:0000AC51                 sub     ecx, 1
.text$mn:0000AC54                 mov     [ebp+var_C], ecx
.text$mn:0000AC57
.text$mn:0000AC57 loc_AC57:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+2Cj
.text$mn:0000AC57                 mov     eax, [ebp+var_C]
.text$mn:0000AC5A                 mov     esp, ebp
.text$mn:0000AC5C                 pop     ebp
.text$mn:0000AC5D                 retn
.text$mn:0000AC5D ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:0000AC5D
.text$mn:0000AC5D ; ---------------------------------------------------------------------------
.text$mn:0000AC5E                 align 10h
.text$mn:0000AC5E _text$mn        ends
.text$mn:0000AC5E
.text$mn:0000AC60 ; ===========================================================================
.text$mn:0000AC60
.text$mn:0000AC60 ; Segment type: Pure code
.text$mn:0000AC60 ; Segment permissions: Read/Execute
.text$mn:0000AC60 _text$mn        segment para public 'CODE' use32
.text$mn:0000AC60                 assume cs:_text$mn
.text$mn:0000AC60                 ;org 0AC60h
.text$mn:0000AC60 ; COMDAT (pick any)
.text$mn:0000AC60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AC60
.text$mn:0000AC60 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AC60
.text$mn:0000AC60 ; Attributes: bp-based frame
.text$mn:0000AC60
.text$mn:0000AC60 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::max_size(void)const
.text$mn:0000AC60                 public ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:0000AC60 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:0000AC60                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+3Bp
.text$mn:0000AC60                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+6Ap ...
.text$mn:0000AC60
.text$mn:0000AC60 var_10          = dword ptr -10h
.text$mn:0000AC60 var_C           = dword ptr -0Ch
.text$mn:0000AC60 var_8           = dword ptr -8
.text$mn:0000AC60 var_1           = byte ptr -1
.text$mn:0000AC60
.text$mn:0000AC60                 push    ebp
.text$mn:0000AC61                 mov     ebp, esp
.text$mn:0000AC63                 sub     esp, 10h
.text$mn:0000AC66                 mov     [ebp+var_10], ecx
.text$mn:0000AC69                 lea     eax, [ebp+var_1]
.text$mn:0000AC6C                 push    eax
.text$mn:0000AC6D                 mov     ecx, [ebp+var_10]
.text$mn:0000AC70                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000AC75                 mov     ecx, eax
.text$mn:0000AC77                 call    ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)
.text$mn:0000AC7C                 mov     [ebp+var_8], eax
.text$mn:0000AC7F                 cmp     [ebp+var_8], 1
.text$mn:0000AC83                 ja      short loc_AC8E
.text$mn:0000AC85                 mov     [ebp+var_C], 1
.text$mn:0000AC8C                 jmp     short loc_AC97
.text$mn:0000AC8E ; ---------------------------------------------------------------------------
.text$mn:0000AC8E
.text$mn:0000AC8E loc_AC8E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+23j
.text$mn:0000AC8E                 mov     ecx, [ebp+var_8]
.text$mn:0000AC91                 sub     ecx, 1
.text$mn:0000AC94                 mov     [ebp+var_C], ecx
.text$mn:0000AC97
.text$mn:0000AC97 loc_AC97:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+2Cj
.text$mn:0000AC97                 mov     eax, [ebp+var_C]
.text$mn:0000AC9A                 mov     esp, ebp
.text$mn:0000AC9C                 pop     ebp
.text$mn:0000AC9D                 retn
.text$mn:0000AC9D ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:0000AC9D
.text$mn:0000AC9D ; ---------------------------------------------------------------------------
.text$mn:0000AC9E                 align 10h
.text$mn:0000AC9E _text$mn        ends
.text$mn:0000AC9E
.text$mn:0000ACA0 ; ===========================================================================
.text$mn:0000ACA0
.text$mn:0000ACA0 ; Segment type: Pure code
.text$mn:0000ACA0 ; Segment permissions: Read/Execute
.text$mn:0000ACA0 _text$mn        segment para public 'CODE' use32
.text$mn:0000ACA0                 assume cs:_text$mn
.text$mn:0000ACA0                 ;org 0ACA0h
.text$mn:0000ACA0 ; COMDAT (pick any)
.text$mn:0000ACA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ACA0
.text$mn:0000ACA0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ACA0
.text$mn:0000ACA0 ; Attributes: bp-based frame
.text$mn:0000ACA0
.text$mn:0000ACA0 ; public: unsigned int __thiscall std::vector<int, class std::allocator<int>>::max_size(void)const
.text$mn:0000ACA0                 public ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
.text$mn:0000ACA0 ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ proc near
.text$mn:0000ACA0                                         ; CODE XREF: std::vector<int,std::allocator<int>>::_Grow_to(uint)+17p
.text$mn:0000ACA0                                         ; std::vector<int,std::allocator<int>>::_Reserve(uint)+18p
.text$mn:0000ACA0
.text$mn:0000ACA0 var_8           = dword ptr -8
.text$mn:0000ACA0 var_1           = byte ptr -1
.text$mn:0000ACA0
.text$mn:0000ACA0                 push    ebp
.text$mn:0000ACA1                 mov     ebp, esp
.text$mn:0000ACA3                 sub     esp, 8
.text$mn:0000ACA6                 mov     [ebp+var_8], ecx
.text$mn:0000ACA9                 lea     eax, [ebp+var_1]
.text$mn:0000ACAC                 push    eax
.text$mn:0000ACAD                 mov     ecx, [ebp+var_8]
.text$mn:0000ACB0                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int>>>::_Getal(void)
.text$mn:0000ACB5                 mov     ecx, eax
.text$mn:0000ACB7                 call    ?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<int>>::max_size(void)
.text$mn:0000ACBC                 mov     esp, ebp
.text$mn:0000ACBE                 pop     ebp
.text$mn:0000ACBF                 retn
.text$mn:0000ACBF ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ endp
.text$mn:0000ACBF
.text$mn:0000ACBF _text$mn        ends
.text$mn:0000ACBF
.text$mn:0000ACC0 ; ===========================================================================
.text$mn:0000ACC0
.text$mn:0000ACC0 ; Segment type: Pure code
.text$mn:0000ACC0 ; Segment permissions: Read/Execute
.text$mn:0000ACC0 _text$mn        segment para public 'CODE' use32
.text$mn:0000ACC0                 assume cs:_text$mn
.text$mn:0000ACC0                 ;org 0ACC0h
.text$mn:0000ACC0 ; COMDAT (pick any)
.text$mn:0000ACC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ACC0
.text$mn:0000ACC0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ACC0
.text$mn:0000ACC0 ; Attributes: bp-based frame
.text$mn:0000ACC0
.text$mn:0000ACC0 ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::max_size(void)const
.text$mn:0000ACC0                 public ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:0000ACC0 ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:0000ACC0                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+17p
.text$mn:0000ACC0                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+18p
.text$mn:0000ACC0
.text$mn:0000ACC0 var_8           = dword ptr -8
.text$mn:0000ACC0 var_1           = byte ptr -1
.text$mn:0000ACC0
.text$mn:0000ACC0                 push    ebp
.text$mn:0000ACC1                 mov     ebp, esp
.text$mn:0000ACC3                 sub     esp, 8
.text$mn:0000ACC6                 mov     [ebp+var_8], ecx
.text$mn:0000ACC9                 lea     eax, [ebp+var_1]
.text$mn:0000ACCC                 push    eax
.text$mn:0000ACCD                 mov     ecx, [ebp+var_8]
.text$mn:0000ACD0                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000ACD5                 mov     ecx, eax
.text$mn:0000ACD7                 call    ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)
.text$mn:0000ACDC                 mov     esp, ebp
.text$mn:0000ACDE                 pop     ebp
.text$mn:0000ACDF                 retn
.text$mn:0000ACDF ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:0000ACDF
.text$mn:0000ACDF _text$mn        ends
.text$mn:0000ACDF
.text$mn:0000ACE0 ; ===========================================================================
.text$mn:0000ACE0
.text$mn:0000ACE0 ; Segment type: Pure code
.text$mn:0000ACE0 ; Segment permissions: Read/Execute
.text$mn:0000ACE0 _text$mn        segment para public 'CODE' use32
.text$mn:0000ACE0                 assume cs:_text$mn
.text$mn:0000ACE0                 ;org 0ACE0h
.text$mn:0000ACE0 ; COMDAT (pick any)
.text$mn:0000ACE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ACE0
.text$mn:0000ACE0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ACE0
.text$mn:0000ACE0 ; Attributes: bp-based frame
.text$mn:0000ACE0
.text$mn:0000ACE0 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Generic_error_category::message(int)const
.text$mn:0000ACE0                 public ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000ACE0 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:0000ACE0                                         ; CODE XREF: std::_Iostream_error_category::message(int)+64p
.text$mn:0000ACE0                                         ; DATA XREF: .rdata:0000D124o
.text$mn:0000ACE0
.text$mn:0000ACE0 var_1C          = dword ptr -1Ch
.text$mn:0000ACE0 var_18          = dword ptr -18h
.text$mn:0000ACE0 Str             = dword ptr -14h
.text$mn:0000ACE0 var_10          = dword ptr -10h
.text$mn:0000ACE0 var_C           = dword ptr -0Ch
.text$mn:0000ACE0 var_4           = dword ptr -4
.text$mn:0000ACE0 arg_0           = dword ptr  8
.text$mn:0000ACE0 arg_4           = dword ptr  0Ch
.text$mn:0000ACE0
.text$mn:0000ACE0                 push    ebp
.text$mn:0000ACE1                 mov     ebp, esp
.text$mn:0000ACE3                 push    0FFFFFFFFh
.text$mn:0000ACE5                 push    offset __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000ACEA                 mov     eax, large fs:0
.text$mn:0000ACF0                 push    eax
.text$mn:0000ACF1                 sub     esp, 10h
.text$mn:0000ACF4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000ACF9                 xor     eax, ebp
.text$mn:0000ACFB                 push    eax
.text$mn:0000ACFC                 lea     eax, [ebp+var_C]
.text$mn:0000ACFF                 mov     large fs:0, eax
.text$mn:0000AD05                 mov     [ebp+var_1C], ecx
.text$mn:0000AD08                 mov     [ebp+var_18], 0
.text$mn:0000AD0F                 mov     eax, [ebp+arg_4]
.text$mn:0000AD12                 push    eax             ; int
.text$mn:0000AD13                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:0000AD18                 add     esp, 4
.text$mn:0000AD1B                 mov     [ebp+var_10], eax
.text$mn:0000AD1E                 cmp     [ebp+var_10], 0
.text$mn:0000AD22                 jz      short loc_AD2C
.text$mn:0000AD24                 mov     ecx, [ebp+var_10]
.text$mn:0000AD27                 mov     [ebp+Str], ecx
.text$mn:0000AD2A                 jmp     short loc_AD33
.text$mn:0000AD2C ; ---------------------------------------------------------------------------
.text$mn:0000AD2C
.text$mn:0000AD2C loc_AD2C:                               ; CODE XREF: std::_Generic_error_category::message(int)+42j
.text$mn:0000AD2C                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:0000AD33
.text$mn:0000AD33 loc_AD33:                               ; CODE XREF: std::_Generic_error_category::message(int)+4Aj
.text$mn:0000AD33                 mov     edx, [ebp+Str]
.text$mn:0000AD36                 push    edx             ; Str
.text$mn:0000AD37                 mov     ecx, [ebp+arg_0]
.text$mn:0000AD3A                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:0000AD3F                 mov     [ebp+var_4], 0
.text$mn:0000AD46                 mov     eax, [ebp+var_18]
.text$mn:0000AD49                 or      eax, 1
.text$mn:0000AD4C                 mov     [ebp+var_18], eax
.text$mn:0000AD4F                 mov     eax, [ebp+arg_0]
.text$mn:0000AD52                 mov     ecx, [ebp+var_C]
.text$mn:0000AD55                 mov     large fs:0, ecx
.text$mn:0000AD5C                 pop     ecx
.text$mn:0000AD5D                 mov     esp, ebp
.text$mn:0000AD5F                 pop     ebp
.text$mn:0000AD60                 retn    8
.text$mn:0000AD60 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:0000AD60
.text$mn:0000AD60 ; ---------------------------------------------------------------------------
.text$mn:0000AD63                 align 4
.text$mn:0000AD63 _text$mn        ends
.text$mn:0000AD63
.text$x:0000AD64 ; ===========================================================================
.text$x:0000AD64
.text$x:0000AD64 ; Segment type: Pure code
.text$x:0000AD64 ; Segment permissions: Read/Execute
.text$x:0000AD64 _text$x         segment para public 'CODE' use32
.text$x:0000AD64                 assume cs:_text$x
.text$x:0000AD64                 ;org 0AD64h
.text$x:0000AD64 ; COMDAT (pick associative to section at ACE0)
.text$x:0000AD64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000AD64
.text$x:0000AD64 ; =============== S U B R O U T I N E =======================================
.text$x:0000AD64
.text$x:0000AD64
.text$x:0000AD64 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:0000AD64                                         ; DATA XREF: .xdata$x:0000C12Co
.text$x:0000AD64                 mov     eax, [ebp-18h]
.text$x:0000AD67                 and     eax, 1
.text$x:0000AD6A                 jz      $LN6
.text$x:0000AD70                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:0000AD74                 mov     ecx, [ebp+8]
.text$x:0000AD77                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000AD7C ; ---------------------------------------------------------------------------
.text$x:0000AD7C
.text$x:0000AD7C $LN6:                                   ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:0000AD7C                 retn
.text$x:0000AD7C __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:0000AD7C
.text$x:0000AD7D
.text$x:0000AD7D ; =============== S U B R O U T I N E =======================================
.text$x:0000AD7D
.text$x:0000AD7D
.text$x:0000AD7D __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:0000AD7D                                         ; DATA XREF: std::_Generic_error_category::message(int)+5o
.text$x:0000AD7D
.text$x:0000AD7D arg_4           = dword ptr  8
.text$x:0000AD7D
.text$x:0000AD7D                 mov     edx, [esp+arg_4]
.text$x:0000AD81                 lea     eax, [edx+0Ch]
.text$x:0000AD84                 mov     ecx, [edx-14h]
.text$x:0000AD87                 xor     ecx, eax
.text$x:0000AD89                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000AD8E                 mov     eax, offset __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:0000AD93                 jmp     ___CxxFrameHandler3
.text$x:0000AD93 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:0000AD93
.text$x:0000AD93 _text$x         ends
.text$x:0000AD93
.text$mn:0000AD98 ; ===========================================================================
.text$mn:0000AD98
.text$mn:0000AD98 ; Segment type: Pure code
.text$mn:0000AD98 ; Segment permissions: Read/Execute
.text$mn:0000AD98 _text$mn        segment para public 'CODE' use32
.text$mn:0000AD98                 assume cs:_text$mn
.text$mn:0000AD98                 ;org 0AD98h
.text$mn:0000AD98 ; COMDAT (pick any)
.text$mn:0000AD98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AD98
.text$mn:0000AD98 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AD98
.text$mn:0000AD98 ; Attributes: bp-based frame
.text$mn:0000AD98
.text$mn:0000AD98 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Iostream_error_category::message(int)const
.text$mn:0000AD98                 public ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000AD98 ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:0000AD98                                         ; DATA XREF: .rdata:0000D158o
.text$mn:0000AD98
.text$mn:0000AD98 var_14          = dword ptr -14h
.text$mn:0000AD98 var_10          = dword ptr -10h
.text$mn:0000AD98 var_C           = dword ptr -0Ch
.text$mn:0000AD98 var_4           = dword ptr -4
.text$mn:0000AD98 arg_0           = dword ptr  8
.text$mn:0000AD98 arg_4           = dword ptr  0Ch
.text$mn:0000AD98
.text$mn:0000AD98                 push    ebp
.text$mn:0000AD99                 mov     ebp, esp
.text$mn:0000AD9B                 push    0FFFFFFFFh
.text$mn:0000AD9D                 push    offset __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000ADA2                 mov     eax, large fs:0
.text$mn:0000ADA8                 push    eax
.text$mn:0000ADA9                 sub     esp, 8
.text$mn:0000ADAC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000ADB1                 xor     eax, ebp
.text$mn:0000ADB3                 push    eax
.text$mn:0000ADB4                 lea     eax, [ebp+var_C]
.text$mn:0000ADB7                 mov     large fs:0, eax
.text$mn:0000ADBD                 mov     [ebp+var_14], ecx
.text$mn:0000ADC0                 mov     [ebp+var_10], 0
.text$mn:0000ADC7                 cmp     [ebp+arg_4], 1
.text$mn:0000ADCB                 jnz     short loc_ADF1
.text$mn:0000ADCD                 push    offset ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ ; "iostream stream error"
.text$mn:0000ADD2                 mov     ecx, [ebp+arg_0]
.text$mn:0000ADD5                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:0000ADDA                 mov     [ebp+var_4], 0
.text$mn:0000ADE1                 mov     eax, [ebp+var_10]
.text$mn:0000ADE4                 or      eax, 1
.text$mn:0000ADE7                 mov     [ebp+var_10], eax
.text$mn:0000ADEA                 mov     eax, [ebp+arg_0]
.text$mn:0000ADED                 jmp     short loc_AE14
.text$mn:0000ADEF ; ---------------------------------------------------------------------------
.text$mn:0000ADEF                 jmp     short loc_AE14
.text$mn:0000ADF1 ; ---------------------------------------------------------------------------
.text$mn:0000ADF1
.text$mn:0000ADF1 loc_ADF1:                               ; CODE XREF: std::_Iostream_error_category::message(int)+33j
.text$mn:0000ADF1                 mov     ecx, [ebp+arg_4]
.text$mn:0000ADF4                 push    ecx
.text$mn:0000ADF5                 mov     edx, [ebp+arg_0]
.text$mn:0000ADF8                 push    edx
.text$mn:0000ADF9                 mov     ecx, [ebp+var_14]
.text$mn:0000ADFC                 call    ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.text$mn:0000AE01                 mov     [ebp+var_4], 0
.text$mn:0000AE08                 mov     eax, [ebp+var_10]
.text$mn:0000AE0B                 or      eax, 1
.text$mn:0000AE0E                 mov     [ebp+var_10], eax
.text$mn:0000AE11                 mov     eax, [ebp+arg_0]
.text$mn:0000AE14
.text$mn:0000AE14 loc_AE14:                               ; CODE XREF: std::_Iostream_error_category::message(int)+55j
.text$mn:0000AE14                                         ; std::_Iostream_error_category::message(int)+57j
.text$mn:0000AE14                 mov     ecx, [ebp+var_C]
.text$mn:0000AE17                 mov     large fs:0, ecx
.text$mn:0000AE1E                 pop     ecx
.text$mn:0000AE1F                 mov     esp, ebp
.text$mn:0000AE21                 pop     ebp
.text$mn:0000AE22                 retn    8
.text$mn:0000AE22 ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:0000AE22
.text$mn:0000AE22 ; ---------------------------------------------------------------------------
.text$mn:0000AE25                 align 4
.text$mn:0000AE25 _text$mn        ends
.text$mn:0000AE25
.text$x:0000AE28 ; ===========================================================================
.text$x:0000AE28
.text$x:0000AE28 ; Segment type: Pure code
.text$x:0000AE28 ; Segment permissions: Read/Execute
.text$x:0000AE28 _text$x         segment para public 'CODE' use32
.text$x:0000AE28                 assume cs:_text$x
.text$x:0000AE28                 ;org 0AE28h
.text$x:0000AE28 ; COMDAT (pick associative to section at AD98)
.text$x:0000AE28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000AE28
.text$x:0000AE28 ; =============== S U B R O U T I N E =======================================
.text$x:0000AE28
.text$x:0000AE28
.text$x:0000AE28 __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:0000AE28                                         ; DATA XREF: .xdata$x:0000C1B0o
.text$x:0000AE28                 mov     eax, [ebp-10h]
.text$x:0000AE2B                 and     eax, 1
.text$x:0000AE2E                 jz      $LN6_0
.text$x:0000AE34                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:0000AE38                 mov     ecx, [ebp+8]
.text$x:0000AE3B                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000AE40 ; ---------------------------------------------------------------------------
.text$x:0000AE40
.text$x:0000AE40 $LN6_0:                                 ; CODE XREF: __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:0000AE40                 retn
.text$x:0000AE40 __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:0000AE40
.text$x:0000AE41
.text$x:0000AE41 ; =============== S U B R O U T I N E =======================================
.text$x:0000AE41
.text$x:0000AE41
.text$x:0000AE41 __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:0000AE41                                         ; DATA XREF: std::_Iostream_error_category::message(int)+5o
.text$x:0000AE41
.text$x:0000AE41 arg_4           = dword ptr  8
.text$x:0000AE41
.text$x:0000AE41                 mov     edx, [esp+arg_4]
.text$x:0000AE45                 lea     eax, [edx+0Ch]
.text$x:0000AE48                 mov     ecx, [edx-0Ch]
.text$x:0000AE4B                 xor     ecx, eax
.text$x:0000AE4D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000AE52                 mov     eax, offset __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:0000AE57                 jmp     ___CxxFrameHandler3
.text$x:0000AE57 __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:0000AE57
.text$x:0000AE57 _text$x         ends
.text$x:0000AE57
.text$mn:0000AE5C ; ===========================================================================
.text$mn:0000AE5C
.text$mn:0000AE5C ; Segment type: Pure code
.text$mn:0000AE5C ; Segment permissions: Read/Execute
.text$mn:0000AE5C _text$mn        segment para public 'CODE' use32
.text$mn:0000AE5C                 assume cs:_text$mn
.text$mn:0000AE5C                 ;org 0AE5Ch
.text$mn:0000AE5C ; COMDAT (pick any)
.text$mn:0000AE5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AE5C
.text$mn:0000AE5C ; =============== S U B R O U T I N E =======================================
.text$mn:0000AE5C
.text$mn:0000AE5C ; Attributes: bp-based frame
.text$mn:0000AE5C
.text$mn:0000AE5C ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_System_error_category::message(int)const
.text$mn:0000AE5C                 public ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000AE5C ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:0000AE5C                                         ; DATA XREF: .rdata:0000D198o
.text$mn:0000AE5C
.text$mn:0000AE5C var_1C          = dword ptr -1Ch
.text$mn:0000AE5C var_18          = dword ptr -18h
.text$mn:0000AE5C Str             = dword ptr -14h
.text$mn:0000AE5C var_10          = dword ptr -10h
.text$mn:0000AE5C var_C           = dword ptr -0Ch
.text$mn:0000AE5C var_4           = dword ptr -4
.text$mn:0000AE5C arg_0           = dword ptr  8
.text$mn:0000AE5C arg_4           = dword ptr  0Ch
.text$mn:0000AE5C
.text$mn:0000AE5C                 push    ebp
.text$mn:0000AE5D                 mov     ebp, esp
.text$mn:0000AE5F                 push    0FFFFFFFFh
.text$mn:0000AE61                 push    offset __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000AE66                 mov     eax, large fs:0
.text$mn:0000AE6C                 push    eax
.text$mn:0000AE6D                 sub     esp, 10h
.text$mn:0000AE70                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000AE75                 xor     eax, ebp
.text$mn:0000AE77                 push    eax
.text$mn:0000AE78                 lea     eax, [ebp+var_C]
.text$mn:0000AE7B                 mov     large fs:0, eax
.text$mn:0000AE81                 mov     [ebp+var_1C], ecx
.text$mn:0000AE84                 mov     [ebp+var_18], 0
.text$mn:0000AE8B                 mov     eax, [ebp+arg_4]
.text$mn:0000AE8E                 push    eax             ; int
.text$mn:0000AE8F                 call    ?_Winerror_map@std@@YAPBDH@Z ; std::_Winerror_map(int)
.text$mn:0000AE94                 add     esp, 4
.text$mn:0000AE97                 mov     [ebp+var_10], eax
.text$mn:0000AE9A                 cmp     [ebp+var_10], 0
.text$mn:0000AE9E                 jz      short loc_AEA8
.text$mn:0000AEA0                 mov     ecx, [ebp+var_10]
.text$mn:0000AEA3                 mov     [ebp+Str], ecx
.text$mn:0000AEA6                 jmp     short loc_AEAF
.text$mn:0000AEA8 ; ---------------------------------------------------------------------------
.text$mn:0000AEA8
.text$mn:0000AEA8 loc_AEA8:                               ; CODE XREF: std::_System_error_category::message(int)+42j
.text$mn:0000AEA8                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:0000AEAF
.text$mn:0000AEAF loc_AEAF:                               ; CODE XREF: std::_System_error_category::message(int)+4Aj
.text$mn:0000AEAF                 mov     edx, [ebp+Str]
.text$mn:0000AEB2                 push    edx             ; Str
.text$mn:0000AEB3                 mov     ecx, [ebp+arg_0]
.text$mn:0000AEB6                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:0000AEBB                 mov     [ebp+var_4], 0
.text$mn:0000AEC2                 mov     eax, [ebp+var_18]
.text$mn:0000AEC5                 or      eax, 1
.text$mn:0000AEC8                 mov     [ebp+var_18], eax
.text$mn:0000AECB                 mov     eax, [ebp+arg_0]
.text$mn:0000AECE                 mov     ecx, [ebp+var_C]
.text$mn:0000AED1                 mov     large fs:0, ecx
.text$mn:0000AED8                 pop     ecx
.text$mn:0000AED9                 mov     esp, ebp
.text$mn:0000AEDB                 pop     ebp
.text$mn:0000AEDC                 retn    8
.text$mn:0000AEDC ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:0000AEDC
.text$mn:0000AEDC ; ---------------------------------------------------------------------------
.text$mn:0000AEDF                 align 10h
.text$mn:0000AEDF _text$mn        ends
.text$mn:0000AEDF
.text$x:0000AEE0 ; ===========================================================================
.text$x:0000AEE0
.text$x:0000AEE0 ; Segment type: Pure code
.text$x:0000AEE0 ; Segment permissions: Read/Execute
.text$x:0000AEE0 _text$x         segment para public 'CODE' use32
.text$x:0000AEE0                 assume cs:_text$x
.text$x:0000AEE0                 ;org 0AEE0h
.text$x:0000AEE0 ; COMDAT (pick associative to section at AE5C)
.text$x:0000AEE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000AEE0
.text$x:0000AEE0 ; =============== S U B R O U T I N E =======================================
.text$x:0000AEE0
.text$x:0000AEE0
.text$x:0000AEE0 __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:0000AEE0                                         ; DATA XREF: .xdata$x:0000C234o
.text$x:0000AEE0                 mov     eax, [ebp-18h]
.text$x:0000AEE3                 and     eax, 1
.text$x:0000AEE6                 jz      $LN6_1
.text$x:0000AEEC                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:0000AEF0                 mov     ecx, [ebp+8]
.text$x:0000AEF3                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000AEF8 ; ---------------------------------------------------------------------------
.text$x:0000AEF8
.text$x:0000AEF8 $LN6_1:                                 ; CODE XREF: __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:0000AEF8                 retn
.text$x:0000AEF8 __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:0000AEF8
.text$x:0000AEF9
.text$x:0000AEF9 ; =============== S U B R O U T I N E =======================================
.text$x:0000AEF9
.text$x:0000AEF9
.text$x:0000AEF9 __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:0000AEF9                                         ; DATA XREF: std::_System_error_category::message(int)+5o
.text$x:0000AEF9
.text$x:0000AEF9 arg_4           = dword ptr  8
.text$x:0000AEF9
.text$x:0000AEF9                 mov     edx, [esp+arg_4]
.text$x:0000AEFD                 lea     eax, [edx+0Ch]
.text$x:0000AF00                 mov     ecx, [edx-14h]
.text$x:0000AF03                 xor     ecx, eax
.text$x:0000AF05                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000AF0A                 mov     eax, offset __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:0000AF0F                 jmp     ___CxxFrameHandler3
.text$x:0000AF0F __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:0000AF0F
.text$x:0000AF0F _text$x         ends
.text$x:0000AF0F
.text$mn:0000AF14 ; ===========================================================================
.text$mn:0000AF14
.text$mn:0000AF14 ; Segment type: Pure code
.text$mn:0000AF14 ; Segment permissions: Read/Execute
.text$mn:0000AF14 _text$mn        segment para public 'CODE' use32
.text$mn:0000AF14                 assume cs:_text$mn
.text$mn:0000AF14                 ;org 0AF14h
.text$mn:0000AF14 ; COMDAT (pick any)
.text$mn:0000AF14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AF14
.text$mn:0000AF14 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AF14
.text$mn:0000AF14 ; Attributes: bp-based frame
.text$mn:0000AF14
.text$mn:0000AF14 ; int __cdecl std::char_traits<char>::move(void *Dst, void *Src, size_t Size)
.text$mn:0000AF14                 public ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:0000AF14 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
.text$mn:0000AF14                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+6Ap
.text$mn:0000AF14
.text$mn:0000AF14 var_4           = dword ptr -4
.text$mn:0000AF14 Dst             = dword ptr  8
.text$mn:0000AF14 Src             = dword ptr  0Ch
.text$mn:0000AF14 Size            = dword ptr  10h
.text$mn:0000AF14
.text$mn:0000AF14                 push    ebp
.text$mn:0000AF15                 mov     ebp, esp
.text$mn:0000AF17                 push    ecx
.text$mn:0000AF18                 cmp     [ebp+Size], 0
.text$mn:0000AF1C                 jnz     short loc_AF26
.text$mn:0000AF1E                 mov     eax, [ebp+Dst]
.text$mn:0000AF21                 mov     [ebp+var_4], eax
.text$mn:0000AF24                 jmp     short loc_AF3D
.text$mn:0000AF26 ; ---------------------------------------------------------------------------
.text$mn:0000AF26
.text$mn:0000AF26 loc_AF26:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+8j
.text$mn:0000AF26                 mov     ecx, [ebp+Size]
.text$mn:0000AF29                 push    ecx             ; Size
.text$mn:0000AF2A                 mov     edx, [ebp+Src]
.text$mn:0000AF2D                 push    edx             ; Src
.text$mn:0000AF2E                 mov     eax, [ebp+Dst]
.text$mn:0000AF31                 push    eax             ; Dst
.text$mn:0000AF32                 call    _memmove
.text$mn:0000AF37                 add     esp, 0Ch
.text$mn:0000AF3A                 mov     [ebp+var_4], eax
.text$mn:0000AF3D
.text$mn:0000AF3D loc_AF3D:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+10j
.text$mn:0000AF3D                 mov     eax, [ebp+var_4]
.text$mn:0000AF40                 mov     esp, ebp
.text$mn:0000AF42                 pop     ebp
.text$mn:0000AF43                 retn
.text$mn:0000AF43 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:0000AF43
.text$mn:0000AF43 _text$mn        ends
.text$mn:0000AF43
.text$mn:0000AF44 ; ===========================================================================
.text$mn:0000AF44
.text$mn:0000AF44 ; Segment type: Pure code
.text$mn:0000AF44 ; Segment permissions: Read/Execute
.text$mn:0000AF44 _text$mn        segment para public 'CODE' use32
.text$mn:0000AF44                 assume cs:_text$mn
.text$mn:0000AF44                 ;org 0AF44h
.text$mn:0000AF44 ; COMDAT (pick any)
.text$mn:0000AF44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AF44
.text$mn:0000AF44 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AF44
.text$mn:0000AF44 ; Attributes: bp-based frame
.text$mn:0000AF44
.text$mn:0000AF44 ; int __cdecl std::char_traits<wchar_t>::move(void *Dst, void *Src, int)
.text$mn:0000AF44                 public ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:0000AF44 ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:0000AF44                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Ap
.text$mn:0000AF44                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+70p ...
.text$mn:0000AF44
.text$mn:0000AF44 var_4           = dword ptr -4
.text$mn:0000AF44 Dst             = dword ptr  8
.text$mn:0000AF44 Src             = dword ptr  0Ch
.text$mn:0000AF44 arg_8           = dword ptr  10h
.text$mn:0000AF44
.text$mn:0000AF44                 push    ebp
.text$mn:0000AF45                 mov     ebp, esp
.text$mn:0000AF47                 push    ecx
.text$mn:0000AF48                 cmp     [ebp+arg_8], 0
.text$mn:0000AF4C                 jnz     short loc_AF56
.text$mn:0000AF4E                 mov     eax, [ebp+Dst]
.text$mn:0000AF51                 mov     [ebp+var_4], eax
.text$mn:0000AF54                 jmp     short loc_AF6D
.text$mn:0000AF56 ; ---------------------------------------------------------------------------
.text$mn:0000AF56
.text$mn:0000AF56 loc_AF56:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+8j
.text$mn:0000AF56                 mov     ecx, [ebp+arg_8]
.text$mn:0000AF59                 push    ecx             ; int
.text$mn:0000AF5A                 mov     edx, [ebp+Src]
.text$mn:0000AF5D                 push    edx             ; Src
.text$mn:0000AF5E                 mov     eax, [ebp+Dst]
.text$mn:0000AF61                 push    eax             ; Dst
.text$mn:0000AF62                 call    _wmemmove
.text$mn:0000AF67                 add     esp, 0Ch
.text$mn:0000AF6A                 mov     [ebp+var_4], eax
.text$mn:0000AF6D
.text$mn:0000AF6D loc_AF6D:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+10j
.text$mn:0000AF6D                 mov     eax, [ebp+var_4]
.text$mn:0000AF70                 mov     esp, ebp
.text$mn:0000AF72                 pop     ebp
.text$mn:0000AF73                 retn
.text$mn:0000AF73 ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:0000AF73
.text$mn:0000AF73 _text$mn        ends
.text$mn:0000AF73
.text$mn:0000AF74 ; ===========================================================================
.text$mn:0000AF74
.text$mn:0000AF74 ; Segment type: Pure code
.text$mn:0000AF74 ; Segment permissions: Read/Execute
.text$mn:0000AF74 _text$mn        segment para public 'CODE' use32
.text$mn:0000AF74                 assume cs:_text$mn
.text$mn:0000AF74                 ;org 0AF74h
.text$mn:0000AF74 ; COMDAT (pick any)
.text$mn:0000AF74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AF74
.text$mn:0000AF74 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AF74
.text$mn:0000AF74 ; Attributes: bp-based frame
.text$mn:0000AF74
.text$mn:0000AF74 ; const char *__thiscall std::_Generic_error_category::name(std::_Generic_error_category *__hidden this)
.text$mn:0000AF74                 public ?name@_Generic_error_category@std@@UBEPBDXZ
.text$mn:0000AF74 ?name@_Generic_error_category@std@@UBEPBDXZ proc near
.text$mn:0000AF74                                         ; DATA XREF: .rdata:0000D120o
.text$mn:0000AF74
.text$mn:0000AF74 var_4           = dword ptr -4
.text$mn:0000AF74
.text$mn:0000AF74                 push    ebp
.text$mn:0000AF75                 mov     ebp, esp
.text$mn:0000AF77                 push    ecx
.text$mn:0000AF78                 mov     [ebp+var_4], ecx
.text$mn:0000AF7B                 mov     eax, offset ??_C@_07DCLBNMLN@generic?$AA@ ; "generic"
.text$mn:0000AF80                 mov     esp, ebp
.text$mn:0000AF82                 pop     ebp
.text$mn:0000AF83                 retn
.text$mn:0000AF83 ?name@_Generic_error_category@std@@UBEPBDXZ endp
.text$mn:0000AF83
.text$mn:0000AF83 _text$mn        ends
.text$mn:0000AF83
.text$mn:0000AF84 ; ===========================================================================
.text$mn:0000AF84
.text$mn:0000AF84 ; Segment type: Pure code
.text$mn:0000AF84 ; Segment permissions: Read/Execute
.text$mn:0000AF84 _text$mn        segment para public 'CODE' use32
.text$mn:0000AF84                 assume cs:_text$mn
.text$mn:0000AF84                 ;org 0AF84h
.text$mn:0000AF84 ; COMDAT (pick any)
.text$mn:0000AF84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AF84
.text$mn:0000AF84 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AF84
.text$mn:0000AF84 ; Attributes: bp-based frame
.text$mn:0000AF84
.text$mn:0000AF84 ; const char *__thiscall std::_Iostream_error_category::name(std::_Iostream_error_category *__hidden this)
.text$mn:0000AF84                 public ?name@_Iostream_error_category@std@@UBEPBDXZ
.text$mn:0000AF84 ?name@_Iostream_error_category@std@@UBEPBDXZ proc near
.text$mn:0000AF84                                         ; DATA XREF: .rdata:0000D154o
.text$mn:0000AF84
.text$mn:0000AF84 var_4           = dword ptr -4
.text$mn:0000AF84
.text$mn:0000AF84                 push    ebp
.text$mn:0000AF85                 mov     ebp, esp
.text$mn:0000AF87                 push    ecx
.text$mn:0000AF88                 mov     [ebp+var_4], ecx
.text$mn:0000AF8B                 mov     eax, offset ??_C@_08LLGCOLLL@iostream?$AA@ ; "iostream"
.text$mn:0000AF90                 mov     esp, ebp
.text$mn:0000AF92                 pop     ebp
.text$mn:0000AF93                 retn
.text$mn:0000AF93 ?name@_Iostream_error_category@std@@UBEPBDXZ endp
.text$mn:0000AF93
.text$mn:0000AF93 _text$mn        ends
.text$mn:0000AF93
.text$mn:0000AF94 ; ===========================================================================
.text$mn:0000AF94
.text$mn:0000AF94 ; Segment type: Pure code
.text$mn:0000AF94 ; Segment permissions: Read/Execute
.text$mn:0000AF94 _text$mn        segment para public 'CODE' use32
.text$mn:0000AF94                 assume cs:_text$mn
.text$mn:0000AF94                 ;org 0AF94h
.text$mn:0000AF94 ; COMDAT (pick any)
.text$mn:0000AF94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AF94
.text$mn:0000AF94 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AF94
.text$mn:0000AF94 ; Attributes: bp-based frame
.text$mn:0000AF94
.text$mn:0000AF94 ; const char *__thiscall std::_System_error_category::name(std::_System_error_category *__hidden this)
.text$mn:0000AF94                 public ?name@_System_error_category@std@@UBEPBDXZ
.text$mn:0000AF94 ?name@_System_error_category@std@@UBEPBDXZ proc near
.text$mn:0000AF94                                         ; DATA XREF: .rdata:0000D194o
.text$mn:0000AF94
.text$mn:0000AF94 var_4           = dword ptr -4
.text$mn:0000AF94
.text$mn:0000AF94                 push    ebp
.text$mn:0000AF95                 mov     ebp, esp
.text$mn:0000AF97                 push    ecx
.text$mn:0000AF98                 mov     [ebp+var_4], ecx
.text$mn:0000AF9B                 mov     eax, offset ??_C@_06FHFOAHML@system?$AA@ ; "system"
.text$mn:0000AFA0                 mov     esp, ebp
.text$mn:0000AFA2                 pop     ebp
.text$mn:0000AFA3                 retn
.text$mn:0000AFA3 ?name@_System_error_category@std@@UBEPBDXZ endp
.text$mn:0000AFA3
.text$mn:0000AFA3 _text$mn        ends
.text$mn:0000AFA3
.text$mn:0000AFA4 ; ===========================================================================
.text$mn:0000AFA4
.text$mn:0000AFA4 ; Segment type: Pure code
.text$mn:0000AFA4 ; Segment permissions: Read/Execute
.text$mn:0000AFA4 _text$mn        segment para public 'CODE' use32
.text$mn:0000AFA4                 assume cs:_text$mn
.text$mn:0000AFA4                 ;org 0AFA4h
.text$mn:0000AFA4 ; COMDAT (pick any)
.text$mn:0000AFA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AFA4
.text$mn:0000AFA4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AFA4
.text$mn:0000AFA4 ; Attributes: bp-based frame
.text$mn:0000AFA4
.text$mn:0000AFA4 ; public: void __thiscall std::vector<int, class std::allocator<int>>::push_back(int const &)
.text$mn:0000AFA4                 public ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z
.text$mn:0000AFA4 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z proc near
.text$mn:0000AFA4                                         ; CODE XREF: TreeView::addCanNotDragOutList(int)+11p
.text$mn:0000AFA4                                         ; TreeView::addCanNotDropInList(int)+11p
.text$mn:0000AFA4
.text$mn:0000AFA4 var_C           = dword ptr -0Ch
.text$mn:0000AFA4 var_8           = dword ptr -8
.text$mn:0000AFA4 var_2           = byte ptr -2
.text$mn:0000AFA4 var_1           = byte ptr -1
.text$mn:0000AFA4 arg_0           = dword ptr  8
.text$mn:0000AFA4
.text$mn:0000AFA4                 push    ebp
.text$mn:0000AFA5                 mov     ebp, esp
.text$mn:0000AFA7                 sub     esp, 0Ch
.text$mn:0000AFAA                 mov     [ebp+var_8], ecx
.text$mn:0000AFAD                 mov     eax, [ebp+arg_0]
.text$mn:0000AFB0                 push    eax
.text$mn:0000AFB1                 call    ??$addressof@$$CBH@std@@YAPBHABH@Z ; std::addressof<int const>(int const &)
.text$mn:0000AFB6                 add     esp, 4
.text$mn:0000AFB9                 push    eax
.text$mn:0000AFBA                 mov     ecx, [ebp+var_8]
.text$mn:0000AFBD                 call    ?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z ; std::vector<int,std::allocator<int>>::_Inside(int const *)
.text$mn:0000AFC2                 movzx   ecx, al
.text$mn:0000AFC5                 test    ecx, ecx
.text$mn:0000AFC7                 jz      short loc_B047
.text$mn:0000AFC9                 mov     edx, [ebp+arg_0]
.text$mn:0000AFCC                 push    edx
.text$mn:0000AFCD                 call    ??$addressof@$$CBH@std@@YAPBHABH@Z ; std::addressof<int const>(int const &)
.text$mn:0000AFD2                 add     esp, 4
.text$mn:0000AFD5                 mov     ecx, [ebp+var_8]
.text$mn:0000AFD8                 sub     eax, [ecx+4]
.text$mn:0000AFDB                 sar     eax, 2
.text$mn:0000AFDE                 mov     [ebp+var_C], eax
.text$mn:0000AFE1                 mov     edx, [ebp+var_8]
.text$mn:0000AFE4                 mov     eax, [ebp+var_8]
.text$mn:0000AFE7                 mov     ecx, [edx+8]
.text$mn:0000AFEA                 cmp     ecx, [eax+0Ch]
.text$mn:0000AFED                 jnz     short loc_AFF9
.text$mn:0000AFEF                 push    1
.text$mn:0000AFF1                 mov     ecx, [ebp+var_8]
.text$mn:0000AFF4                 call    ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int>>::_Reserve(uint)
.text$mn:0000AFF9
.text$mn:0000AFF9 loc_AFF9:                               ; CODE XREF: std::vector<int,std::allocator<int>>::push_back(int const &)+49j
.text$mn:0000AFF9                 mov     edx, [ebp+var_8]
.text$mn:0000AFFC                 mov     eax, [edx+8]
.text$mn:0000AFFF                 push    eax
.text$mn:0000B000                 mov     ecx, [ebp+var_8]
.text$mn:0000B003                 mov     edx, [ecx+8]
.text$mn:0000B006                 push    edx
.text$mn:0000B007                 mov     ecx, [ebp+var_8]
.text$mn:0000B00A                 call    ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int>>::_Orphan_range(int *,int *)
.text$mn:0000B00F                 mov     eax, [ebp+var_8]
.text$mn:0000B012                 mov     ecx, [eax+4]
.text$mn:0000B015                 mov     edx, [ebp+var_C]
.text$mn:0000B018                 lea     eax, [ecx+edx*4]
.text$mn:0000B01B                 push    eax             ; int
.text$mn:0000B01C                 mov     ecx, [ebp+var_8]
.text$mn:0000B01F                 mov     edx, [ecx+8]
.text$mn:0000B022                 push    edx             ; void *
.text$mn:0000B023                 lea     eax, [ebp+var_1]
.text$mn:0000B026                 push    eax
.text$mn:0000B027                 mov     ecx, [ebp+var_8]
.text$mn:0000B02A                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int>>>::_Getal(void)
.text$mn:0000B02F                 mov     ecx, eax
.text$mn:0000B031                 call    ??$construct@HAAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHAAH@Z ; std::_Wrap_alloc<std::allocator<int>>::construct<int,int &>(int *,int &)
.text$mn:0000B036                 mov     ecx, [ebp+var_8]
.text$mn:0000B039                 mov     edx, [ecx+8]
.text$mn:0000B03C                 add     edx, 4
.text$mn:0000B03F                 mov     eax, [ebp+var_8]
.text$mn:0000B042                 mov     [eax+8], edx
.text$mn:0000B045                 jmp     short loc_B0A2
.text$mn:0000B047 ; ---------------------------------------------------------------------------
.text$mn:0000B047
.text$mn:0000B047 loc_B047:                               ; CODE XREF: std::vector<int,std::allocator<int>>::push_back(int const &)+23j
.text$mn:0000B047                 mov     ecx, [ebp+var_8]
.text$mn:0000B04A                 mov     edx, [ebp+var_8]
.text$mn:0000B04D                 mov     eax, [ecx+8]
.text$mn:0000B050                 cmp     eax, [edx+0Ch]
.text$mn:0000B053                 jnz     short loc_B05F
.text$mn:0000B055                 push    1
.text$mn:0000B057                 mov     ecx, [ebp+var_8]
.text$mn:0000B05A                 call    ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z ; std::vector<int,std::allocator<int>>::_Reserve(uint)
.text$mn:0000B05F
.text$mn:0000B05F loc_B05F:                               ; CODE XREF: std::vector<int,std::allocator<int>>::push_back(int const &)+AFj
.text$mn:0000B05F                 mov     ecx, [ebp+var_8]
.text$mn:0000B062                 mov     edx, [ecx+8]
.text$mn:0000B065                 push    edx
.text$mn:0000B066                 mov     eax, [ebp+var_8]
.text$mn:0000B069                 mov     ecx, [eax+8]
.text$mn:0000B06C                 push    ecx
.text$mn:0000B06D                 mov     ecx, [ebp+var_8]
.text$mn:0000B070                 call    ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z ; std::vector<int,std::allocator<int>>::_Orphan_range(int *,int *)
.text$mn:0000B075                 mov     edx, [ebp+arg_0]
.text$mn:0000B078                 push    edx             ; int
.text$mn:0000B079                 mov     eax, [ebp+var_8]
.text$mn:0000B07C                 mov     ecx, [eax+8]
.text$mn:0000B07F                 push    ecx             ; void *
.text$mn:0000B080                 lea     edx, [ebp+var_2]
.text$mn:0000B083                 push    edx
.text$mn:0000B084                 mov     ecx, [ebp+var_8]
.text$mn:0000B087                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int>>>::_Getal(void)
.text$mn:0000B08C                 mov     ecx, eax
.text$mn:0000B08E                 call    ??$construct@HABH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHABH@Z ; std::_Wrap_alloc<std::allocator<int>>::construct<int,int const &>(int *,int const &)
.text$mn:0000B093                 mov     eax, [ebp+var_8]
.text$mn:0000B096                 mov     ecx, [eax+8]
.text$mn:0000B099                 add     ecx, 4
.text$mn:0000B09C                 mov     edx, [ebp+var_8]
.text$mn:0000B09F                 mov     [edx+8], ecx
.text$mn:0000B0A2
.text$mn:0000B0A2 loc_B0A2:                               ; CODE XREF: std::vector<int,std::allocator<int>>::push_back(int const &)+A1j
.text$mn:0000B0A2                 mov     esp, ebp
.text$mn:0000B0A4                 pop     ebp
.text$mn:0000B0A5                 retn    4
.text$mn:0000B0A5 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z endp
.text$mn:0000B0A5
.text$mn:0000B0A5 _text$mn        ends
.text$mn:0000B0A5
.text$mn:0000B0A8 ; ===========================================================================
.text$mn:0000B0A8
.text$mn:0000B0A8 ; Segment type: Pure code
.text$mn:0000B0A8 ; Segment permissions: Read/Execute
.text$mn:0000B0A8 _text$mn        segment para public 'CODE' use32
.text$mn:0000B0A8                 assume cs:_text$mn
.text$mn:0000B0A8                 ;org 0B0A8h
.text$mn:0000B0A8 ; COMDAT (pick any)
.text$mn:0000B0A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B0A8
.text$mn:0000B0A8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B0A8
.text$mn:0000B0A8 ; Attributes: bp-based frame
.text$mn:0000B0A8
.text$mn:0000B0A8 ; public: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::push_back(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:0000B0A8                 public ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
.text$mn:0000B0A8 ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z proc near
.text$mn:0000B0A8                                         ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+1DBp
.text$mn:0000B0A8
.text$mn:0000B0A8 var_C           = dword ptr -0Ch
.text$mn:0000B0A8 var_8           = dword ptr -8
.text$mn:0000B0A8 var_2           = byte ptr -2
.text$mn:0000B0A8 var_1           = byte ptr -1
.text$mn:0000B0A8 arg_0           = dword ptr  8
.text$mn:0000B0A8
.text$mn:0000B0A8                 push    ebp
.text$mn:0000B0A9                 mov     ebp, esp
.text$mn:0000B0AB                 sub     esp, 0Ch
.text$mn:0000B0AE                 mov     [ebp+var_8], ecx
.text$mn:0000B0B1                 mov     eax, [ebp+arg_0]
.text$mn:0000B0B4                 push    eax
.text$mn:0000B0B5                 call    ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000B0BA                 add     esp, 4
.text$mn:0000B0BD                 push    eax
.text$mn:0000B0BE                 mov     ecx, [ebp+var_8]
.text$mn:0000B0C1                 call    ?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Inside(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *)
.text$mn:0000B0C6                 movzx   ecx, al
.text$mn:0000B0C9                 test    ecx, ecx
.text$mn:0000B0CB                 jz      loc_B15B
.text$mn:0000B0D1                 mov     edx, [ebp+arg_0]
.text$mn:0000B0D4                 push    edx
.text$mn:0000B0D5                 call    ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000B0DA                 add     esp, 4
.text$mn:0000B0DD                 mov     ecx, [ebp+var_8]
.text$mn:0000B0E0                 sub     eax, [ecx+4]
.text$mn:0000B0E3                 cdq
.text$mn:0000B0E4                 mov     ecx, 1Ch
.text$mn:0000B0E9                 idiv    ecx
.text$mn:0000B0EB                 mov     [ebp+var_C], eax
.text$mn:0000B0EE                 mov     edx, [ebp+var_8]
.text$mn:0000B0F1                 mov     eax, [ebp+var_8]
.text$mn:0000B0F4                 mov     ecx, [edx+8]
.text$mn:0000B0F7                 cmp     ecx, [eax+0Ch]
.text$mn:0000B0FA                 jnz     short loc_B106
.text$mn:0000B0FC                 push    1
.text$mn:0000B0FE                 mov     ecx, [ebp+var_8]
.text$mn:0000B101                 call    ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)
.text$mn:0000B106
.text$mn:0000B106 loc_B106:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+52j
.text$mn:0000B106                 mov     edx, [ebp+var_8]
.text$mn:0000B109                 mov     eax, [edx+8]
.text$mn:0000B10C                 push    eax
.text$mn:0000B10D                 mov     ecx, [ebp+var_8]
.text$mn:0000B110                 mov     edx, [ecx+8]
.text$mn:0000B113                 push    edx
.text$mn:0000B114                 mov     ecx, [ebp+var_8]
.text$mn:0000B117                 call    ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000B11C                 imul    eax, [ebp+var_C], 1Ch
.text$mn:0000B120                 mov     ecx, [ebp+var_8]
.text$mn:0000B123                 add     eax, [ecx+4]
.text$mn:0000B126                 push    eax
.text$mn:0000B127                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000B12C                 add     esp, 4
.text$mn:0000B12F                 push    eax             ; int
.text$mn:0000B130                 mov     edx, [ebp+var_8]
.text$mn:0000B133                 mov     eax, [edx+8]
.text$mn:0000B136                 push    eax             ; void *
.text$mn:0000B137                 lea     ecx, [ebp+var_1]
.text$mn:0000B13A                 push    ecx
.text$mn:0000B13B                 mov     ecx, [ebp+var_8]
.text$mn:0000B13E                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000B143                 mov     ecx, eax
.text$mn:0000B145                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000B14A                 mov     edx, [ebp+var_8]
.text$mn:0000B14D                 mov     eax, [edx+8]
.text$mn:0000B150                 add     eax, 1Ch
.text$mn:0000B153                 mov     ecx, [ebp+var_8]
.text$mn:0000B156                 mov     [ecx+8], eax
.text$mn:0000B159                 jmp     short loc_B1BF
.text$mn:0000B15B ; ---------------------------------------------------------------------------
.text$mn:0000B15B
.text$mn:0000B15B loc_B15B:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+23j
.text$mn:0000B15B                 mov     edx, [ebp+var_8]
.text$mn:0000B15E                 mov     eax, [ebp+var_8]
.text$mn:0000B161                 mov     ecx, [edx+8]
.text$mn:0000B164                 cmp     ecx, [eax+0Ch]
.text$mn:0000B167                 jnz     short loc_B173
.text$mn:0000B169                 push    1
.text$mn:0000B16B                 mov     ecx, [ebp+var_8]
.text$mn:0000B16E                 call    ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)
.text$mn:0000B173
.text$mn:0000B173 loc_B173:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+BFj
.text$mn:0000B173                 mov     edx, [ebp+var_8]
.text$mn:0000B176                 mov     eax, [edx+8]
.text$mn:0000B179                 push    eax
.text$mn:0000B17A                 mov     ecx, [ebp+var_8]
.text$mn:0000B17D                 mov     edx, [ecx+8]
.text$mn:0000B180                 push    edx
.text$mn:0000B181                 mov     ecx, [ebp+var_8]
.text$mn:0000B184                 call    ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000B189                 mov     eax, [ebp+arg_0]
.text$mn:0000B18C                 push    eax
.text$mn:0000B18D                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000B192                 add     esp, 4
.text$mn:0000B195                 push    eax             ; int
.text$mn:0000B196                 mov     ecx, [ebp+var_8]
.text$mn:0000B199                 mov     edx, [ecx+8]
.text$mn:0000B19C                 push    edx             ; void *
.text$mn:0000B19D                 lea     eax, [ebp+var_2]
.text$mn:0000B1A0                 push    eax
.text$mn:0000B1A1                 mov     ecx, [ebp+var_8]
.text$mn:0000B1A4                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000B1A9                 mov     ecx, eax
.text$mn:0000B1AB                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000B1B0                 mov     ecx, [ebp+var_8]
.text$mn:0000B1B3                 mov     edx, [ecx+8]
.text$mn:0000B1B6                 add     edx, 1Ch
.text$mn:0000B1B9                 mov     eax, [ebp+var_8]
.text$mn:0000B1BC                 mov     [eax+8], edx
.text$mn:0000B1BF
.text$mn:0000B1BF loc_B1BF:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+B1j
.text$mn:0000B1BF                 mov     esp, ebp
.text$mn:0000B1C1                 pop     ebp
.text$mn:0000B1C2                 retn    4
.text$mn:0000B1C2 ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z endp
.text$mn:0000B1C2
.text$mn:0000B1C2 ; ---------------------------------------------------------------------------
.text$mn:0000B1C5                 align 4
.text$mn:0000B1C5 _text$mn        ends
.text$mn:0000B1C5
.text$mn:0000B1C8 ; ===========================================================================
.text$mn:0000B1C8
.text$mn:0000B1C8 ; Segment type: Pure code
.text$mn:0000B1C8 ; Segment permissions: Read/Execute
.text$mn:0000B1C8 _text$mn        segment para public 'CODE' use32
.text$mn:0000B1C8                 assume cs:_text$mn
.text$mn:0000B1C8                 ;org 0B1C8h
.text$mn:0000B1C8 ; COMDAT (pick any)
.text$mn:0000B1C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B1C8
.text$mn:0000B1C8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B1C8
.text$mn:0000B1C8 ; Attributes: bp-based frame
.text$mn:0000B1C8
.text$mn:0000B1C8 ; void __thiscall Window::reSizeTo(Window *this, struct tagRECT *)
.text$mn:0000B1C8                 public ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z
.text$mn:0000B1C8 ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z proc near
.text$mn:0000B1C8                                         ; DATA XREF: .rdata:0000D1DCo
.text$mn:0000B1C8                                         ; .rdata:0000D210o ...
.text$mn:0000B1C8
.text$mn:0000B1C8 var_4           = dword ptr -4
.text$mn:0000B1C8 arg_0           = dword ptr  8
.text$mn:0000B1C8
.text$mn:0000B1C8                 push    ebp
.text$mn:0000B1C9                 mov     ebp, esp
.text$mn:0000B1CB                 push    ecx
.text$mn:0000B1CC                 mov     [ebp+var_4], ecx
.text$mn:0000B1CF                 push    1               ; bRepaint
.text$mn:0000B1D1                 mov     eax, [ebp+arg_0]
.text$mn:0000B1D4                 mov     ecx, [eax+0Ch]
.text$mn:0000B1D7                 push    ecx             ; nHeight
.text$mn:0000B1D8                 mov     edx, [ebp+arg_0]
.text$mn:0000B1DB                 mov     eax, [edx+8]
.text$mn:0000B1DE                 push    eax             ; nWidth
.text$mn:0000B1DF                 mov     ecx, [ebp+arg_0]
.text$mn:0000B1E2                 mov     edx, [ecx+4]
.text$mn:0000B1E5                 push    edx             ; Y
.text$mn:0000B1E6                 mov     eax, [ebp+arg_0]
.text$mn:0000B1E9                 mov     ecx, [eax]
.text$mn:0000B1EB                 push    ecx             ; X
.text$mn:0000B1EC                 mov     edx, [ebp+var_4]
.text$mn:0000B1EF                 mov     eax, [edx+0Ch]
.text$mn:0000B1F2                 push    eax             ; hWnd
.text$mn:0000B1F3                 call    dword ptr ds:__imp__MoveWindow@24 ; MoveWindow(x,x,x,x,x,x)
.text$mn:0000B1F9                 push    0
.text$mn:0000B1FB                 mov     ecx, [ebp+var_4]
.text$mn:0000B1FE                 mov     edx, [ecx]
.text$mn:0000B200                 mov     ecx, [ebp+var_4]
.text$mn:0000B203                 mov     eax, [edx+18h]
.text$mn:0000B206                 call    eax
.text$mn:0000B208                 mov     esp, ebp
.text$mn:0000B20A                 pop     ebp
.text$mn:0000B20B                 retn    4
.text$mn:0000B20B ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z endp
.text$mn:0000B20B
.text$mn:0000B20B ; ---------------------------------------------------------------------------
.text$mn:0000B20E                 align 10h
.text$mn:0000B20E _text$mn        ends
.text$mn:0000B20E
.text$mn:0000B210 ; ===========================================================================
.text$mn:0000B210
.text$mn:0000B210 ; Segment type: Pure code
.text$mn:0000B210 ; Segment permissions: Read/Execute
.text$mn:0000B210 _text$mn        segment para public 'CODE' use32
.text$mn:0000B210                 assume cs:_text$mn
.text$mn:0000B210                 ;org 0B210h
.text$mn:0000B210 ; COMDAT (pick any)
.text$mn:0000B210                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B210
.text$mn:0000B210 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B210
.text$mn:0000B210 ; Attributes: bp-based frame
.text$mn:0000B210
.text$mn:0000B210 ; void __thiscall Window::reSizeToWH(Window *this, struct tagRECT *)
.text$mn:0000B210                 public ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z
.text$mn:0000B210 ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z proc near
.text$mn:0000B210                                         ; DATA XREF: .rdata:0000D1E0o
.text$mn:0000B210                                         ; .rdata:0000D214o ...
.text$mn:0000B210
.text$mn:0000B210 var_4           = dword ptr -4
.text$mn:0000B210 arg_0           = dword ptr  8
.text$mn:0000B210
.text$mn:0000B210                 push    ebp
.text$mn:0000B211                 mov     ebp, esp
.text$mn:0000B213                 push    ecx
.text$mn:0000B214                 mov     [ebp+var_4], ecx
.text$mn:0000B217                 push    1               ; bRepaint
.text$mn:0000B219                 mov     eax, [ebp+arg_0]
.text$mn:0000B21C                 mov     ecx, [ebp+arg_0]
.text$mn:0000B21F                 mov     edx, [eax+0Ch]
.text$mn:0000B222                 sub     edx, [ecx+4]
.text$mn:0000B225                 push    edx             ; nHeight
.text$mn:0000B226                 mov     eax, [ebp+arg_0]
.text$mn:0000B229                 mov     ecx, [ebp+arg_0]
.text$mn:0000B22C                 mov     edx, [eax+8]
.text$mn:0000B22F                 sub     edx, [ecx]
.text$mn:0000B231                 push    edx             ; nWidth
.text$mn:0000B232                 mov     eax, [ebp+arg_0]
.text$mn:0000B235                 mov     ecx, [eax+4]
.text$mn:0000B238                 push    ecx             ; Y
.text$mn:0000B239                 mov     edx, [ebp+arg_0]
.text$mn:0000B23C                 mov     eax, [edx]
.text$mn:0000B23E                 push    eax             ; X
.text$mn:0000B23F                 mov     ecx, [ebp+var_4]
.text$mn:0000B242                 mov     edx, [ecx+0Ch]
.text$mn:0000B245                 push    edx             ; hWnd
.text$mn:0000B246                 call    dword ptr ds:__imp__MoveWindow@24 ; MoveWindow(x,x,x,x,x,x)
.text$mn:0000B24C                 push    0
.text$mn:0000B24E                 mov     eax, [ebp+var_4]
.text$mn:0000B251                 mov     edx, [eax]
.text$mn:0000B253                 mov     ecx, [ebp+var_4]
.text$mn:0000B256                 mov     eax, [edx+18h]
.text$mn:0000B259                 call    eax
.text$mn:0000B25B                 mov     esp, ebp
.text$mn:0000B25D                 pop     ebp
.text$mn:0000B25E                 retn    4
.text$mn:0000B25E ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z endp
.text$mn:0000B25E
.text$mn:0000B25E ; ---------------------------------------------------------------------------
.text$mn:0000B261                 align 4
.text$mn:0000B261 _text$mn        ends
.text$mn:0000B261
.text$mn:0000B264 ; ===========================================================================
.text$mn:0000B264
.text$mn:0000B264 ; Segment type: Pure code
.text$mn:0000B264 ; Segment permissions: Read/Execute
.text$mn:0000B264 _text$mn        segment para public 'CODE' use32
.text$mn:0000B264                 assume cs:_text$mn
.text$mn:0000B264                 ;org 0B264h
.text$mn:0000B264 ; COMDAT (pick any)
.text$mn:0000B264                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B264
.text$mn:0000B264 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B264
.text$mn:0000B264 ; Attributes: bp-based frame
.text$mn:0000B264
.text$mn:0000B264 ; void __thiscall Window::redraw(Window *this, bool)
.text$mn:0000B264                 public ?redraw@Window@@UBEX_N@Z
.text$mn:0000B264 ?redraw@Window@@UBEX_N@Z proc near      ; DATA XREF: .rdata:0000D1E4o
.text$mn:0000B264                                         ; .rdata:0000D218o ...
.text$mn:0000B264
.text$mn:0000B264 var_4           = dword ptr -4
.text$mn:0000B264 arg_0           = byte ptr  8
.text$mn:0000B264
.text$mn:0000B264                 push    ebp
.text$mn:0000B265                 mov     ebp, esp
.text$mn:0000B267                 push    ecx
.text$mn:0000B268                 mov     [ebp+var_4], ecx
.text$mn:0000B26B                 push    1               ; bErase
.text$mn:0000B26D                 push    0               ; lpRect
.text$mn:0000B26F                 mov     eax, [ebp+var_4]
.text$mn:0000B272                 mov     ecx, [eax+0Ch]
.text$mn:0000B275                 push    ecx             ; hWnd
.text$mn:0000B276                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text$mn:0000B27C                 movzx   edx, [ebp+arg_0]
.text$mn:0000B280                 test    edx, edx
.text$mn:0000B282                 jz      short loc_B291
.text$mn:0000B284                 mov     eax, [ebp+var_4]
.text$mn:0000B287                 mov     ecx, [eax+0Ch]
.text$mn:0000B28A                 push    ecx             ; hWnd
.text$mn:0000B28B                 call    dword ptr ds:__imp__UpdateWindow@4 ; UpdateWindow(x)
.text$mn:0000B291
.text$mn:0000B291 loc_B291:                               ; CODE XREF: Window::redraw(bool)+1Ej
.text$mn:0000B291                 mov     esp, ebp
.text$mn:0000B293                 pop     ebp
.text$mn:0000B294                 retn    4
.text$mn:0000B294 ?redraw@Window@@UBEX_N@Z endp
.text$mn:0000B294
.text$mn:0000B294 ; ---------------------------------------------------------------------------
.text$mn:0000B297                 align 4
.text$mn:0000B297 _text$mn        ends
.text$mn:0000B297
.text$mn:0000B298 ; ===========================================================================
.text$mn:0000B298
.text$mn:0000B298 ; Segment type: Pure code
.text$mn:0000B298 ; Segment permissions: Read/Execute
.text$mn:0000B298 _text$mn        segment para public 'CODE' use32
.text$mn:0000B298                 assume cs:_text$mn
.text$mn:0000B298                 ;org 0B298h
.text$mn:0000B298 ; COMDAT (pick any)
.text$mn:0000B298                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B298
.text$mn:0000B298 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B298
.text$mn:0000B298 ; Attributes: bp-based frame
.text$mn:0000B298
.text$mn:0000B298 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::replace(unsigned int, unsigned int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:0000B298                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z
.text$mn:0000B298 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z proc near
.text$mn:0000B298                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+5Bp
.text$mn:0000B298
.text$mn:0000B298 var_10          = dword ptr -10h
.text$mn:0000B298 var_C           = dword ptr -0Ch
.text$mn:0000B298 var_8           = dword ptr -8
.text$mn:0000B298 var_4           = dword ptr -4
.text$mn:0000B298 arg_0           = dword ptr  8
.text$mn:0000B298 arg_4           = dword ptr  0Ch
.text$mn:0000B298 arg_8           = dword ptr  10h
.text$mn:0000B298 arg_C           = dword ptr  14h
.text$mn:0000B298 arg_10          = dword ptr  18h
.text$mn:0000B298
.text$mn:0000B298                 push    ebp
.text$mn:0000B299                 mov     ebp, esp
.text$mn:0000B29B                 sub     esp, 10h
.text$mn:0000B29E                 mov     [ebp+var_4], ecx
.text$mn:0000B2A1                 mov     eax, [ebp+var_4]
.text$mn:0000B2A4                 mov     ecx, [eax+14h]
.text$mn:0000B2A7                 cmp     ecx, [ebp+arg_0]
.text$mn:0000B2AA                 jb      short loc_B2B9
.text$mn:0000B2AC                 mov     ecx, [ebp+arg_8]
.text$mn:0000B2AF                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000B2B4                 cmp     eax, [ebp+arg_C]
.text$mn:0000B2B7                 jnb     short loc_B2C1
.text$mn:0000B2B9
.text$mn:0000B2B9 loc_B2B9:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+12j
.text$mn:0000B2B9                 mov     ecx, [ebp+var_4]
.text$mn:0000B2BC                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000B2C1
.text$mn:0000B2C1 loc_B2C1:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+1Fj
.text$mn:0000B2C1                 mov     edx, [ebp+var_4]
.text$mn:0000B2C4                 mov     eax, [edx+14h]
.text$mn:0000B2C7                 sub     eax, [ebp+arg_0]
.text$mn:0000B2CA                 cmp     eax, [ebp+arg_4]
.text$mn:0000B2CD                 jnb     short loc_B2DB
.text$mn:0000B2CF                 mov     ecx, [ebp+var_4]
.text$mn:0000B2D2                 mov     edx, [ecx+14h]
.text$mn:0000B2D5                 sub     edx, [ebp+arg_0]
.text$mn:0000B2D8                 mov     [ebp+arg_4], edx
.text$mn:0000B2DB
.text$mn:0000B2DB loc_B2DB:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+35j
.text$mn:0000B2DB                 mov     ecx, [ebp+arg_8]
.text$mn:0000B2DE                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000B2E3                 sub     eax, [ebp+arg_C]
.text$mn:0000B2E6                 mov     [ebp+var_10], eax
.text$mn:0000B2E9                 mov     eax, [ebp+var_10]
.text$mn:0000B2EC                 cmp     eax, [ebp+arg_10]
.text$mn:0000B2EF                 jnb     short loc_B2F7
.text$mn:0000B2F1                 mov     ecx, [ebp+var_10]
.text$mn:0000B2F4                 mov     [ebp+arg_10], ecx
.text$mn:0000B2F7
.text$mn:0000B2F7 loc_B2F7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+57j
.text$mn:0000B2F7                 mov     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000B2FD                 sub     edx, [ebp+arg_10]
.text$mn:0000B300                 mov     eax, [ebp+var_4]
.text$mn:0000B303                 mov     ecx, [eax+14h]
.text$mn:0000B306                 sub     ecx, [ebp+arg_4]
.text$mn:0000B309                 cmp     edx, ecx
.text$mn:0000B30B                 ja      short loc_B315
.text$mn:0000B30D                 mov     ecx, [ebp+var_4]
.text$mn:0000B310                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000B315
.text$mn:0000B315 loc_B315:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+73j
.text$mn:0000B315                 mov     edx, [ebp+var_4]
.text$mn:0000B318                 mov     eax, [edx+14h]
.text$mn:0000B31B                 sub     eax, [ebp+arg_4]
.text$mn:0000B31E                 sub     eax, [ebp+arg_0]
.text$mn:0000B321                 mov     [ebp+var_8], eax
.text$mn:0000B324                 mov     ecx, [ebp+var_4]
.text$mn:0000B327                 mov     edx, [ecx+14h]
.text$mn:0000B32A                 add     edx, [ebp+arg_10]
.text$mn:0000B32D                 sub     edx, [ebp+arg_4]
.text$mn:0000B330                 mov     [ebp+var_C], edx
.text$mn:0000B333                 mov     eax, [ebp+var_4]
.text$mn:0000B336                 mov     ecx, [eax+14h]
.text$mn:0000B339                 cmp     ecx, [ebp+var_C]
.text$mn:0000B33C                 jnb     short loc_B34C
.text$mn:0000B33E                 push    0
.text$mn:0000B340                 mov     edx, [ebp+var_C]
.text$mn:0000B343                 push    edx
.text$mn:0000B344                 mov     ecx, [ebp+var_4]
.text$mn:0000B347                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000B34C
.text$mn:0000B34C loc_B34C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+A4j
.text$mn:0000B34C                 mov     eax, [ebp+var_4]
.text$mn:0000B34F                 cmp     eax, [ebp+arg_8]
.text$mn:0000B352                 jz      short loc_B3B9
.text$mn:0000B354                 mov     ecx, [ebp+var_8]
.text$mn:0000B357                 push    ecx             ; int
.text$mn:0000B358                 mov     ecx, [ebp+var_4]
.text$mn:0000B35B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B360                 mov     edx, [ebp+arg_0]
.text$mn:0000B363                 lea     eax, [eax+edx*2]
.text$mn:0000B366                 mov     ecx, [ebp+arg_4]
.text$mn:0000B369                 lea     edx, [eax+ecx*2]
.text$mn:0000B36C                 push    edx             ; Src
.text$mn:0000B36D                 mov     ecx, [ebp+var_4]
.text$mn:0000B370                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B375                 mov     ecx, [ebp+arg_0]
.text$mn:0000B378                 lea     edx, [eax+ecx*2]
.text$mn:0000B37B                 mov     eax, [ebp+arg_10]
.text$mn:0000B37E                 lea     ecx, [edx+eax*2]
.text$mn:0000B381                 push    ecx             ; Dst
.text$mn:0000B382                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000B387                 add     esp, 0Ch
.text$mn:0000B38A                 mov     edx, [ebp+arg_10]
.text$mn:0000B38D                 push    edx             ; int
.text$mn:0000B38E                 mov     ecx, [ebp+arg_8]
.text$mn:0000B391                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B396                 mov     ecx, [ebp+arg_C]
.text$mn:0000B399                 lea     edx, [eax+ecx*2]
.text$mn:0000B39C                 push    edx             ; Src
.text$mn:0000B39D                 mov     ecx, [ebp+var_4]
.text$mn:0000B3A0                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B3A5                 mov     ecx, [ebp+arg_0]
.text$mn:0000B3A8                 lea     edx, [eax+ecx*2]
.text$mn:0000B3AB                 push    edx             ; Dst
.text$mn:0000B3AC                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000B3B1                 add     esp, 0Ch
.text$mn:0000B3B4                 jmp     loc_B5A2
.text$mn:0000B3B9 ; ---------------------------------------------------------------------------
.text$mn:0000B3B9
.text$mn:0000B3B9 loc_B3B9:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+BAj
.text$mn:0000B3B9                 mov     eax, [ebp+arg_10]
.text$mn:0000B3BC                 cmp     eax, [ebp+arg_4]
.text$mn:0000B3BF                 ja      short loc_B426
.text$mn:0000B3C1                 mov     ecx, [ebp+arg_10]
.text$mn:0000B3C4                 push    ecx             ; int
.text$mn:0000B3C5                 mov     ecx, [ebp+var_4]
.text$mn:0000B3C8                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B3CD                 mov     edx, [ebp+arg_C]
.text$mn:0000B3D0                 lea     eax, [eax+edx*2]
.text$mn:0000B3D3                 push    eax             ; Src
.text$mn:0000B3D4                 mov     ecx, [ebp+var_4]
.text$mn:0000B3D7                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B3DC                 mov     ecx, [ebp+arg_0]
.text$mn:0000B3DF                 lea     edx, [eax+ecx*2]
.text$mn:0000B3E2                 push    edx             ; Dst
.text$mn:0000B3E3                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000B3E8                 add     esp, 0Ch
.text$mn:0000B3EB                 mov     eax, [ebp+var_8]
.text$mn:0000B3EE                 push    eax             ; int
.text$mn:0000B3EF                 mov     ecx, [ebp+var_4]
.text$mn:0000B3F2                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B3F7                 mov     ecx, [ebp+arg_0]
.text$mn:0000B3FA                 lea     edx, [eax+ecx*2]
.text$mn:0000B3FD                 mov     eax, [ebp+arg_4]
.text$mn:0000B400                 lea     ecx, [edx+eax*2]
.text$mn:0000B403                 push    ecx             ; Src
.text$mn:0000B404                 mov     ecx, [ebp+var_4]
.text$mn:0000B407                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B40C                 mov     edx, [ebp+arg_0]
.text$mn:0000B40F                 lea     eax, [eax+edx*2]
.text$mn:0000B412                 mov     ecx, [ebp+arg_10]
.text$mn:0000B415                 lea     edx, [eax+ecx*2]
.text$mn:0000B418                 push    edx             ; Dst
.text$mn:0000B419                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000B41E                 add     esp, 0Ch
.text$mn:0000B421                 jmp     loc_B5A2
.text$mn:0000B426 ; ---------------------------------------------------------------------------
.text$mn:0000B426
.text$mn:0000B426 loc_B426:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+127j
.text$mn:0000B426                 mov     eax, [ebp+arg_C]
.text$mn:0000B429                 cmp     eax, [ebp+arg_0]
.text$mn:0000B42C                 ja      short loc_B493
.text$mn:0000B42E                 mov     ecx, [ebp+var_8]
.text$mn:0000B431                 push    ecx             ; int
.text$mn:0000B432                 mov     ecx, [ebp+var_4]
.text$mn:0000B435                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B43A                 mov     edx, [ebp+arg_0]
.text$mn:0000B43D                 lea     eax, [eax+edx*2]
.text$mn:0000B440                 mov     ecx, [ebp+arg_4]
.text$mn:0000B443                 lea     edx, [eax+ecx*2]
.text$mn:0000B446                 push    edx             ; Src
.text$mn:0000B447                 mov     ecx, [ebp+var_4]
.text$mn:0000B44A                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B44F                 mov     ecx, [ebp+arg_0]
.text$mn:0000B452                 lea     edx, [eax+ecx*2]
.text$mn:0000B455                 mov     eax, [ebp+arg_10]
.text$mn:0000B458                 lea     ecx, [edx+eax*2]
.text$mn:0000B45B                 push    ecx             ; Dst
.text$mn:0000B45C                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000B461                 add     esp, 0Ch
.text$mn:0000B464                 mov     edx, [ebp+arg_10]
.text$mn:0000B467                 push    edx             ; int
.text$mn:0000B468                 mov     ecx, [ebp+var_4]
.text$mn:0000B46B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B470                 mov     ecx, [ebp+arg_C]
.text$mn:0000B473                 lea     edx, [eax+ecx*2]
.text$mn:0000B476                 push    edx             ; Src
.text$mn:0000B477                 mov     ecx, [ebp+var_4]
.text$mn:0000B47A                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B47F                 mov     ecx, [ebp+arg_0]
.text$mn:0000B482                 lea     edx, [eax+ecx*2]
.text$mn:0000B485                 push    edx             ; Dst
.text$mn:0000B486                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000B48B                 add     esp, 0Ch
.text$mn:0000B48E                 jmp     loc_B5A2
.text$mn:0000B493 ; ---------------------------------------------------------------------------
.text$mn:0000B493
.text$mn:0000B493 loc_B493:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+194j
.text$mn:0000B493                 mov     eax, [ebp+arg_0]
.text$mn:0000B496                 add     eax, [ebp+arg_4]
.text$mn:0000B499                 cmp     eax, [ebp+arg_C]
.text$mn:0000B49C                 ja      short loc_B509
.text$mn:0000B49E                 mov     ecx, [ebp+var_8]
.text$mn:0000B4A1                 push    ecx             ; int
.text$mn:0000B4A2                 mov     ecx, [ebp+var_4]
.text$mn:0000B4A5                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B4AA                 mov     edx, [ebp+arg_0]
.text$mn:0000B4AD                 lea     eax, [eax+edx*2]
.text$mn:0000B4B0                 mov     ecx, [ebp+arg_4]
.text$mn:0000B4B3                 lea     edx, [eax+ecx*2]
.text$mn:0000B4B6                 push    edx             ; Src
.text$mn:0000B4B7                 mov     ecx, [ebp+var_4]
.text$mn:0000B4BA                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B4BF                 mov     ecx, [ebp+arg_0]
.text$mn:0000B4C2                 lea     edx, [eax+ecx*2]
.text$mn:0000B4C5                 mov     eax, [ebp+arg_10]
.text$mn:0000B4C8                 lea     ecx, [edx+eax*2]
.text$mn:0000B4CB                 push    ecx             ; Dst
.text$mn:0000B4CC                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000B4D1                 add     esp, 0Ch
.text$mn:0000B4D4                 mov     edx, [ebp+arg_10]
.text$mn:0000B4D7                 push    edx             ; int
.text$mn:0000B4D8                 mov     ecx, [ebp+var_4]
.text$mn:0000B4DB                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B4E0                 mov     ecx, [ebp+arg_C]
.text$mn:0000B4E3                 add     ecx, [ebp+arg_10]
.text$mn:0000B4E6                 sub     ecx, [ebp+arg_4]
.text$mn:0000B4E9                 lea     edx, [eax+ecx*2]
.text$mn:0000B4EC                 push    edx             ; Src
.text$mn:0000B4ED                 mov     ecx, [ebp+var_4]
.text$mn:0000B4F0                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B4F5                 mov     ecx, [ebp+arg_0]
.text$mn:0000B4F8                 lea     edx, [eax+ecx*2]
.text$mn:0000B4FB                 push    edx             ; Dst
.text$mn:0000B4FC                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000B501                 add     esp, 0Ch
.text$mn:0000B504                 jmp     loc_B5A2
.text$mn:0000B509 ; ---------------------------------------------------------------------------
.text$mn:0000B509
.text$mn:0000B509 loc_B509:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+204j
.text$mn:0000B509                 mov     eax, [ebp+arg_4]
.text$mn:0000B50C                 push    eax             ; int
.text$mn:0000B50D                 mov     ecx, [ebp+var_4]
.text$mn:0000B510                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B515                 mov     ecx, [ebp+arg_C]
.text$mn:0000B518                 lea     edx, [eax+ecx*2]
.text$mn:0000B51B                 push    edx             ; Src
.text$mn:0000B51C                 mov     ecx, [ebp+var_4]
.text$mn:0000B51F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B524                 mov     ecx, [ebp+arg_0]
.text$mn:0000B527                 lea     edx, [eax+ecx*2]
.text$mn:0000B52A                 push    edx             ; Dst
.text$mn:0000B52B                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000B530                 add     esp, 0Ch
.text$mn:0000B533                 mov     eax, [ebp+var_8]
.text$mn:0000B536                 push    eax             ; int
.text$mn:0000B537                 mov     ecx, [ebp+var_4]
.text$mn:0000B53A                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B53F                 mov     ecx, [ebp+arg_0]
.text$mn:0000B542                 lea     edx, [eax+ecx*2]
.text$mn:0000B545                 mov     eax, [ebp+arg_4]
.text$mn:0000B548                 lea     ecx, [edx+eax*2]
.text$mn:0000B54B                 push    ecx             ; Src
.text$mn:0000B54C                 mov     ecx, [ebp+var_4]
.text$mn:0000B54F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B554                 mov     edx, [ebp+arg_0]
.text$mn:0000B557                 lea     eax, [eax+edx*2]
.text$mn:0000B55A                 mov     ecx, [ebp+arg_10]
.text$mn:0000B55D                 lea     edx, [eax+ecx*2]
.text$mn:0000B560                 push    edx             ; Dst
.text$mn:0000B561                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000B566                 add     esp, 0Ch
.text$mn:0000B569                 mov     eax, [ebp+arg_10]
.text$mn:0000B56C                 sub     eax, [ebp+arg_4]
.text$mn:0000B56F                 push    eax             ; int
.text$mn:0000B570                 mov     ecx, [ebp+var_4]
.text$mn:0000B573                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B578                 mov     ecx, [ebp+arg_C]
.text$mn:0000B57B                 lea     edx, [eax+ecx*2]
.text$mn:0000B57E                 mov     eax, [ebp+arg_10]
.text$mn:0000B581                 lea     ecx, [edx+eax*2]
.text$mn:0000B584                 push    ecx             ; Src
.text$mn:0000B585                 mov     ecx, [ebp+var_4]
.text$mn:0000B588                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B58D                 mov     edx, [ebp+arg_0]
.text$mn:0000B590                 lea     eax, [eax+edx*2]
.text$mn:0000B593                 mov     ecx, [ebp+arg_4]
.text$mn:0000B596                 lea     edx, [eax+ecx*2]
.text$mn:0000B599                 push    edx             ; Dst
.text$mn:0000B59A                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000B59F                 add     esp, 0Ch
.text$mn:0000B5A2
.text$mn:0000B5A2 loc_B5A2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+11Cj
.text$mn:0000B5A2                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+189j ...
.text$mn:0000B5A2                 mov     eax, [ebp+var_C]
.text$mn:0000B5A5                 push    eax
.text$mn:0000B5A6                 mov     ecx, [ebp+var_4]
.text$mn:0000B5A9                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000B5AE                 mov     eax, [ebp+var_4]
.text$mn:0000B5B1                 mov     esp, ebp
.text$mn:0000B5B3                 pop     ebp
.text$mn:0000B5B4                 retn    14h
.text$mn:0000B5B4 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z endp
.text$mn:0000B5B4
.text$mn:0000B5B4 ; ---------------------------------------------------------------------------
.text$mn:0000B5B7                 align 4
.text$mn:0000B5B7 _text$mn        ends
.text$mn:0000B5B7
.text$mn:0000B5B8 ; ===========================================================================
.text$mn:0000B5B8
.text$mn:0000B5B8 ; Segment type: Pure code
.text$mn:0000B5B8 ; Segment permissions: Read/Execute
.text$mn:0000B5B8 _text$mn        segment para public 'CODE' use32
.text$mn:0000B5B8                 assume cs:_text$mn
.text$mn:0000B5B8                 ;org 0B5B8h
.text$mn:0000B5B8 ; COMDAT (pick any)
.text$mn:0000B5B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B5B8
.text$mn:0000B5B8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B5B8
.text$mn:0000B5B8 ; Attributes: bp-based frame
.text$mn:0000B5B8
.text$mn:0000B5B8 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(int, int, wchar_t *Str)
.text$mn:0000B5B8                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_W@Z
.text$mn:0000B5B8 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_W@Z proc near
.text$mn:0000B5B8                                         ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+1C5p
.text$mn:0000B5B8
.text$mn:0000B5B8 var_4           = dword ptr -4
.text$mn:0000B5B8 arg_0           = dword ptr  8
.text$mn:0000B5B8 arg_4           = dword ptr  0Ch
.text$mn:0000B5B8 Str             = dword ptr  10h
.text$mn:0000B5B8
.text$mn:0000B5B8                 push    ebp
.text$mn:0000B5B9                 mov     ebp, esp
.text$mn:0000B5BB                 push    ecx
.text$mn:0000B5BC                 mov     [ebp+var_4], ecx
.text$mn:0000B5BF                 push    5CBh            ; unsigned int
.text$mn:0000B5C4                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000B5C9                 mov     eax, [ebp+Str]
.text$mn:0000B5CC                 push    eax             ; int
.text$mn:0000B5CD                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000B5D2                 add     esp, 0Ch
.text$mn:0000B5D5                 mov     ecx, [ebp+Str]
.text$mn:0000B5D8                 push    ecx             ; Str
.text$mn:0000B5D9                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:0000B5DE                 add     esp, 4
.text$mn:0000B5E1                 push    eax             ; int
.text$mn:0000B5E2                 mov     edx, [ebp+Str]
.text$mn:0000B5E5                 push    edx             ; Src
.text$mn:0000B5E6                 mov     eax, [ebp+arg_4]
.text$mn:0000B5E9                 push    eax             ; int
.text$mn:0000B5EA                 mov     ecx, [ebp+arg_0]
.text$mn:0000B5ED                 push    ecx             ; int
.text$mn:0000B5EE                 mov     ecx, [ebp+var_4]
.text$mn:0000B5F1                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)
.text$mn:0000B5F6                 mov     esp, ebp
.text$mn:0000B5F8                 pop     ebp
.text$mn:0000B5F9                 retn    0Ch
.text$mn:0000B5F9 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_W@Z endp
.text$mn:0000B5F9
.text$mn:0000B5F9 _text$mn        ends
.text$mn:0000B5F9
.text$mn:0000B5FC ; ===========================================================================
.text$mn:0000B5FC
.text$mn:0000B5FC ; Segment type: Pure code
.text$mn:0000B5FC ; Segment permissions: Read/Execute
.text$mn:0000B5FC _text$mn        segment para public 'CODE' use32
.text$mn:0000B5FC                 assume cs:_text$mn
.text$mn:0000B5FC                 ;org 0B5FCh
.text$mn:0000B5FC ; COMDAT (pick any)
.text$mn:0000B5FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B5FC
.text$mn:0000B5FC ; =============== S U B R O U T I N E =======================================
.text$mn:0000B5FC
.text$mn:0000B5FC ; Attributes: bp-based frame
.text$mn:0000B5FC
.text$mn:0000B5FC ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(int, int, void *Src, int)
.text$mn:0000B5FC                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z
.text$mn:0000B5FC ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z proc near
.text$mn:0000B5FC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *)+39p
.text$mn:0000B5FC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+201p
.text$mn:0000B5FC
.text$mn:0000B5FC var_C           = dword ptr -0Ch
.text$mn:0000B5FC var_8           = dword ptr -8
.text$mn:0000B5FC var_4           = dword ptr -4
.text$mn:0000B5FC arg_0           = dword ptr  8
.text$mn:0000B5FC arg_4           = dword ptr  0Ch
.text$mn:0000B5FC Src             = dword ptr  10h
.text$mn:0000B5FC arg_C           = dword ptr  14h
.text$mn:0000B5FC
.text$mn:0000B5FC                 push    ebp
.text$mn:0000B5FD                 mov     ebp, esp
.text$mn:0000B5FF                 sub     esp, 0Ch
.text$mn:0000B602                 mov     [ebp+var_4], ecx
.text$mn:0000B605                 cmp     [ebp+arg_C], 0
.text$mn:0000B609                 jz      short loc_B621
.text$mn:0000B60B                 push    5A9h            ; unsigned int
.text$mn:0000B610                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000B615                 mov     eax, [ebp+Src]
.text$mn:0000B618                 push    eax             ; int
.text$mn:0000B619                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000B61E                 add     esp, 0Ch
.text$mn:0000B621
.text$mn:0000B621 loc_B621:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+Dj
.text$mn:0000B621                 mov     ecx, [ebp+Src]
.text$mn:0000B624                 push    ecx
.text$mn:0000B625                 mov     ecx, [ebp+var_4]
.text$mn:0000B628                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:0000B62D                 movzx   edx, al
.text$mn:0000B630                 test    edx, edx
.text$mn:0000B632                 jz      short loc_B661
.text$mn:0000B634                 mov     eax, [ebp+arg_C]
.text$mn:0000B637                 push    eax
.text$mn:0000B638                 mov     ecx, [ebp+var_4]
.text$mn:0000B63B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B640                 mov     ecx, [ebp+Src]
.text$mn:0000B643                 sub     ecx, eax
.text$mn:0000B645                 sar     ecx, 1
.text$mn:0000B647                 push    ecx
.text$mn:0000B648                 mov     edx, [ebp+var_4]
.text$mn:0000B64B                 push    edx
.text$mn:0000B64C                 mov     eax, [ebp+arg_4]
.text$mn:0000B64F                 push    eax
.text$mn:0000B650                 mov     ecx, [ebp+arg_0]
.text$mn:0000B653                 push    ecx
.text$mn:0000B654                 mov     ecx, [ebp+var_4]
.text$mn:0000B657                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000B65C                 jmp     loc_B799
.text$mn:0000B661 ; ---------------------------------------------------------------------------
.text$mn:0000B661
.text$mn:0000B661 loc_B661:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+36j
.text$mn:0000B661                 mov     edx, [ebp+var_4]
.text$mn:0000B664                 mov     eax, [edx+14h]
.text$mn:0000B667                 cmp     eax, [ebp+arg_0]
.text$mn:0000B66A                 jnb     short loc_B674
.text$mn:0000B66C                 mov     ecx, [ebp+var_4]
.text$mn:0000B66F                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000B674
.text$mn:0000B674 loc_B674:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+6Ej
.text$mn:0000B674                 mov     ecx, [ebp+var_4]
.text$mn:0000B677                 mov     edx, [ecx+14h]
.text$mn:0000B67A                 sub     edx, [ebp+arg_0]
.text$mn:0000B67D                 cmp     edx, [ebp+arg_4]
.text$mn:0000B680                 jnb     short loc_B68E
.text$mn:0000B682                 mov     eax, [ebp+var_4]
.text$mn:0000B685                 mov     ecx, [eax+14h]
.text$mn:0000B688                 sub     ecx, [ebp+arg_0]
.text$mn:0000B68B                 mov     [ebp+arg_4], ecx
.text$mn:0000B68E
.text$mn:0000B68E loc_B68E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+84j
.text$mn:0000B68E                 mov     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000B694                 sub     edx, [ebp+arg_C]
.text$mn:0000B697                 mov     eax, [ebp+var_4]
.text$mn:0000B69A                 mov     ecx, [eax+14h]
.text$mn:0000B69D                 sub     ecx, [ebp+arg_4]
.text$mn:0000B6A0                 cmp     edx, ecx
.text$mn:0000B6A2                 ja      short loc_B6AC
.text$mn:0000B6A4                 mov     ecx, [ebp+var_4]
.text$mn:0000B6A7                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000B6AC
.text$mn:0000B6AC loc_B6AC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+A6j
.text$mn:0000B6AC                 mov     edx, [ebp+var_4]
.text$mn:0000B6AF                 mov     eax, [edx+14h]
.text$mn:0000B6B2                 sub     eax, [ebp+arg_4]
.text$mn:0000B6B5                 sub     eax, [ebp+arg_0]
.text$mn:0000B6B8                 mov     [ebp+var_8], eax
.text$mn:0000B6BB                 mov     ecx, [ebp+arg_C]
.text$mn:0000B6BE                 cmp     ecx, [ebp+arg_4]
.text$mn:0000B6C1                 jnb     short loc_B6F9
.text$mn:0000B6C3                 mov     edx, [ebp+var_8]
.text$mn:0000B6C6                 push    edx             ; int
.text$mn:0000B6C7                 mov     ecx, [ebp+var_4]
.text$mn:0000B6CA                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B6CF                 mov     ecx, [ebp+arg_0]
.text$mn:0000B6D2                 lea     edx, [eax+ecx*2]
.text$mn:0000B6D5                 mov     eax, [ebp+arg_4]
.text$mn:0000B6D8                 lea     ecx, [edx+eax*2]
.text$mn:0000B6DB                 push    ecx             ; Src
.text$mn:0000B6DC                 mov     ecx, [ebp+var_4]
.text$mn:0000B6DF                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B6E4                 mov     edx, [ebp+arg_0]
.text$mn:0000B6E7                 lea     eax, [eax+edx*2]
.text$mn:0000B6EA                 mov     ecx, [ebp+arg_C]
.text$mn:0000B6ED                 lea     edx, [eax+ecx*2]
.text$mn:0000B6F0                 push    edx             ; Dst
.text$mn:0000B6F1                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000B6F6                 add     esp, 0Ch
.text$mn:0000B6F9
.text$mn:0000B6F9 loc_B6F9:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+C5j
.text$mn:0000B6F9                 cmp     [ebp+arg_C], 0
.text$mn:0000B6FD                 ja      short loc_B709
.text$mn:0000B6FF                 cmp     [ebp+arg_4], 0
.text$mn:0000B703                 jbe     loc_B796
.text$mn:0000B709
.text$mn:0000B709 loc_B709:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+101j
.text$mn:0000B709                 mov     eax, [ebp+var_4]
.text$mn:0000B70C                 mov     ecx, [eax+14h]
.text$mn:0000B70F                 add     ecx, [ebp+arg_C]
.text$mn:0000B712                 sub     ecx, [ebp+arg_4]
.text$mn:0000B715                 mov     [ebp+var_C], ecx
.text$mn:0000B718                 push    0
.text$mn:0000B71A                 mov     edx, [ebp+var_C]
.text$mn:0000B71D                 push    edx
.text$mn:0000B71E                 mov     ecx, [ebp+var_4]
.text$mn:0000B721                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000B726                 movzx   eax, al
.text$mn:0000B729                 test    eax, eax
.text$mn:0000B72B                 jz      short loc_B796
.text$mn:0000B72D                 mov     ecx, [ebp+arg_4]
.text$mn:0000B730                 cmp     ecx, [ebp+arg_C]
.text$mn:0000B733                 jnb     short loc_B76B
.text$mn:0000B735                 mov     edx, [ebp+var_8]
.text$mn:0000B738                 push    edx             ; int
.text$mn:0000B739                 mov     ecx, [ebp+var_4]
.text$mn:0000B73C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B741                 mov     ecx, [ebp+arg_0]
.text$mn:0000B744                 lea     edx, [eax+ecx*2]
.text$mn:0000B747                 mov     eax, [ebp+arg_4]
.text$mn:0000B74A                 lea     ecx, [edx+eax*2]
.text$mn:0000B74D                 push    ecx             ; Src
.text$mn:0000B74E                 mov     ecx, [ebp+var_4]
.text$mn:0000B751                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B756                 mov     edx, [ebp+arg_0]
.text$mn:0000B759                 lea     eax, [eax+edx*2]
.text$mn:0000B75C                 mov     ecx, [ebp+arg_C]
.text$mn:0000B75F                 lea     edx, [eax+ecx*2]
.text$mn:0000B762                 push    edx             ; Dst
.text$mn:0000B763                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000B768                 add     esp, 0Ch
.text$mn:0000B76B
.text$mn:0000B76B loc_B76B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+137j
.text$mn:0000B76B                 mov     eax, [ebp+arg_C]
.text$mn:0000B76E                 push    eax             ; int
.text$mn:0000B76F                 mov     ecx, [ebp+Src]
.text$mn:0000B772                 push    ecx             ; Src
.text$mn:0000B773                 mov     ecx, [ebp+var_4]
.text$mn:0000B776                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B77B                 mov     edx, [ebp+arg_0]
.text$mn:0000B77E                 lea     eax, [eax+edx*2]
.text$mn:0000B781                 push    eax             ; Dst
.text$mn:0000B782                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000B787                 add     esp, 0Ch
.text$mn:0000B78A                 mov     ecx, [ebp+var_C]
.text$mn:0000B78D                 push    ecx
.text$mn:0000B78E                 mov     ecx, [ebp+var_4]
.text$mn:0000B791                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000B796
.text$mn:0000B796 loc_B796:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+107j
.text$mn:0000B796                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+12Fj
.text$mn:0000B796                 mov     eax, [ebp+var_4]
.text$mn:0000B799
.text$mn:0000B799 loc_B799:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+60j
.text$mn:0000B799                 mov     esp, ebp
.text$mn:0000B79B                 pop     ebp
.text$mn:0000B79C                 retn    10h
.text$mn:0000B79C ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z endp
.text$mn:0000B79C
.text$mn:0000B79C ; ---------------------------------------------------------------------------
.text$mn:0000B79F                 align 10h
.text$mn:0000B79F _text$mn        ends
.text$mn:0000B79F
.text$mn:0000B7A0 ; ===========================================================================
.text$mn:0000B7A0
.text$mn:0000B7A0 ; Segment type: Pure code
.text$mn:0000B7A0 ; Segment permissions: Read/Execute
.text$mn:0000B7A0 _text$mn        segment para public 'CODE' use32
.text$mn:0000B7A0                 assume cs:_text$mn
.text$mn:0000B7A0                 ;org 0B7A0h
.text$mn:0000B7A0 ; COMDAT (pick any)
.text$mn:0000B7A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B7A0
.text$mn:0000B7A0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B7A0
.text$mn:0000B7A0 ; Attributes: bp-based frame
.text$mn:0000B7A0
.text$mn:0000B7A0 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::replace(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>)
.text$mn:0000B7A0                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.text$mn:0000B7A0 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z proc near
.text$mn:0000B7A0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+E0p
.text$mn:0000B7A0
.text$mn:0000B7A0 var_AC          = byte ptr -0ACh
.text$mn:0000B7A0 var_A0          = byte ptr -0A0h
.text$mn:0000B7A0 var_94          = dword ptr -94h
.text$mn:0000B7A0 var_90          = dword ptr -90h
.text$mn:0000B7A0 var_8C          = dword ptr -8Ch
.text$mn:0000B7A0 var_88          = dword ptr -88h
.text$mn:0000B7A0 var_84          = dword ptr -84h
.text$mn:0000B7A0 var_80          = dword ptr -80h
.text$mn:0000B7A0 var_7C          = dword ptr -7Ch
.text$mn:0000B7A0 var_78          = dword ptr -78h
.text$mn:0000B7A0 var_74          = dword ptr -74h
.text$mn:0000B7A0 var_70          = dword ptr -70h
.text$mn:0000B7A0 var_6C          = dword ptr -6Ch
.text$mn:0000B7A0 var_68          = dword ptr -68h
.text$mn:0000B7A0 var_64          = dword ptr -64h
.text$mn:0000B7A0 var_60          = dword ptr -60h
.text$mn:0000B7A0 var_5C          = dword ptr -5Ch
.text$mn:0000B7A0 var_58          = dword ptr -58h
.text$mn:0000B7A0 var_54          = dword ptr -54h
.text$mn:0000B7A0 var_50          = dword ptr -50h
.text$mn:0000B7A0 var_4C          = dword ptr -4Ch
.text$mn:0000B7A0 var_48          = dword ptr -48h
.text$mn:0000B7A0 var_44          = dword ptr -44h
.text$mn:0000B7A0 var_40          = dword ptr -40h
.text$mn:0000B7A0 var_3C          = dword ptr -3Ch
.text$mn:0000B7A0 var_38          = dword ptr -38h
.text$mn:0000B7A0 var_34          = dword ptr -34h
.text$mn:0000B7A0 var_30          = dword ptr -30h
.text$mn:0000B7A0 var_2C          = dword ptr -2Ch
.text$mn:0000B7A0 var_28          = dword ptr -28h
.text$mn:0000B7A0 var_24          = dword ptr -24h
.text$mn:0000B7A0 var_20          = dword ptr -20h
.text$mn:0000B7A0 var_1C          = dword ptr -1Ch
.text$mn:0000B7A0 var_18          = dword ptr -18h
.text$mn:0000B7A0 var_14          = dword ptr -14h
.text$mn:0000B7A0 var_10          = dword ptr -10h
.text$mn:0000B7A0 var_C           = dword ptr -0Ch
.text$mn:0000B7A0 var_4           = dword ptr -4
.text$mn:0000B7A0 arg_0           = byte ptr  8
.text$mn:0000B7A0 arg_C           = byte ptr  14h
.text$mn:0000B7A0 arg_18          = byte ptr  20h
.text$mn:0000B7A0 arg_24          = byte ptr  2Ch
.text$mn:0000B7A0
.text$mn:0000B7A0                 push    ebp
.text$mn:0000B7A1                 mov     ebp, esp
.text$mn:0000B7A3                 push    0FFFFFFFFh
.text$mn:0000B7A5                 push    offset __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.text$mn:0000B7AA                 mov     eax, large fs:0
.text$mn:0000B7B0                 push    eax
.text$mn:0000B7B1                 sub     esp, 0A0h
.text$mn:0000B7B7                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B7BC                 xor     eax, ebp
.text$mn:0000B7BE                 push    eax
.text$mn:0000B7BF                 lea     eax, [ebp+var_C]
.text$mn:0000B7C2                 mov     large fs:0, eax
.text$mn:0000B7C8                 mov     [ebp+var_10], ecx
.text$mn:0000B7CB                 mov     [ebp+var_4], 3
.text$mn:0000B7D2                 lea     eax, [ebp+arg_24]
.text$mn:0000B7D5                 push    eax             ; std::_Iterator_base12 *
.text$mn:0000B7D6                 lea     ecx, [ebp+arg_18]
.text$mn:0000B7D9                 call    ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000B7DE                 movzx   ecx, al
.text$mn:0000B7E1                 test    ecx, ecx
.text$mn:0000B7E3                 jz      loc_B8C5
.text$mn:0000B7E9                 sub     esp, 0Ch
.text$mn:0000B7EC                 mov     ecx, esp
.text$mn:0000B7EE                 mov     [ebp+var_58], esp
.text$mn:0000B7F1                 lea     edx, [ebp+arg_0]
.text$mn:0000B7F4                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000B7F5                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000B7FA                 mov     [ebp+var_54], eax
.text$mn:0000B7FD                 mov     eax, [ebp+var_54]
.text$mn:0000B800                 mov     [ebp+var_60], eax
.text$mn:0000B803                 mov     byte ptr [ebp+var_4], 4
.text$mn:0000B807                 sub     esp, 0Ch
.text$mn:0000B80A                 mov     ecx, esp
.text$mn:0000B80C                 mov     [ebp+var_80], esp
.text$mn:0000B80F                 lea     edx, [ebp+arg_C]
.text$mn:0000B812                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000B813                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000B818                 mov     [ebp+var_38], eax
.text$mn:0000B81B                 mov     eax, [ebp+var_38]
.text$mn:0000B81E                 mov     [ebp+var_68], eax
.text$mn:0000B821                 mov     byte ptr [ebp+var_4], 5
.text$mn:0000B825                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000B829                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000B82E                 add     esp, 18h
.text$mn:0000B831                 mov     [ebp+var_20], eax
.text$mn:0000B834                 mov     ecx, [ebp+var_20]
.text$mn:0000B837                 push    ecx
.text$mn:0000B838                 lea     edx, [ebp+var_A0]
.text$mn:0000B83E                 push    edx
.text$mn:0000B83F                 mov     ecx, [ebp+var_10]
.text$mn:0000B842                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:0000B847                 mov     [ebp+var_48], eax
.text$mn:0000B84A                 mov     eax, [ebp+var_48]
.text$mn:0000B84D                 mov     [ebp+var_28], eax
.text$mn:0000B850                 mov     byte ptr [ebp+var_4], 6
.text$mn:0000B854                 sub     esp, 0Ch
.text$mn:0000B857                 mov     ecx, esp
.text$mn:0000B859                 mov     [ebp+var_90], esp
.text$mn:0000B85F                 mov     edx, [ebp+var_28]
.text$mn:0000B862                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000B863                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000B868                 mov     [ebp+var_40], eax
.text$mn:0000B86B                 mov     eax, [ebp+var_40]
.text$mn:0000B86E                 mov     [ebp+var_70], eax
.text$mn:0000B871                 mov     byte ptr [ebp+var_4], 7
.text$mn:0000B875                 sub     esp, 0Ch
.text$mn:0000B878                 mov     ecx, esp
.text$mn:0000B87A                 mov     [ebp+var_88], esp
.text$mn:0000B880                 lea     edx, [ebp+arg_0]
.text$mn:0000B883                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000B884                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000B889                 mov     [ebp+var_30], eax
.text$mn:0000B88C                 mov     eax, [ebp+var_30]
.text$mn:0000B88F                 mov     [ebp+var_78], eax
.text$mn:0000B892                 mov     byte ptr [ebp+var_4], 8
.text$mn:0000B896                 mov     byte ptr [ebp+var_4], 6
.text$mn:0000B89A                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000B89F                 add     esp, 18h
.text$mn:0000B8A2                 mov     [ebp+var_50], eax
.text$mn:0000B8A5                 mov     ecx, [ebp+var_50]
.text$mn:0000B8A8                 push    ecx
.text$mn:0000B8A9                 mov     ecx, [ebp+var_10]
.text$mn:0000B8AC                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)
.text$mn:0000B8B1                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000B8B5                 lea     ecx, [ebp+var_A0]
.text$mn:0000B8BB                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000B8C0                 jmp     loc_B9B5
.text$mn:0000B8C5 ; ---------------------------------------------------------------------------
.text$mn:0000B8C5
.text$mn:0000B8C5 loc_B8C5:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+43j
.text$mn:0000B8C5                 lea     edx, [ebp+arg_18]
.text$mn:0000B8C8                 push    edx             ; std::_Iterator_base12 *
.text$mn:0000B8C9                 lea     ecx, [ebp+arg_24]
.text$mn:0000B8CC                 call    ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000B8D1                 push    eax             ; int
.text$mn:0000B8D2                 lea     ecx, [ebp+arg_18]
.text$mn:0000B8D5                 call    ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)
.text$mn:0000B8DA                 push    eax             ; Src
.text$mn:0000B8DB                 sub     esp, 0Ch
.text$mn:0000B8DE                 mov     ecx, esp
.text$mn:0000B8E0                 mov     [ebp+var_94], esp
.text$mn:0000B8E6                 lea     eax, [ebp+arg_0]
.text$mn:0000B8E9                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:0000B8EA                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000B8EF                 mov     [ebp+var_18], eax
.text$mn:0000B8F2                 mov     ecx, [ebp+var_18]
.text$mn:0000B8F5                 mov     [ebp+var_5C], ecx
.text$mn:0000B8F8                 mov     byte ptr [ebp+var_4], 9
.text$mn:0000B8FC                 sub     esp, 0Ch
.text$mn:0000B8FF                 mov     ecx, esp
.text$mn:0000B901                 mov     [ebp+var_64], esp
.text$mn:0000B904                 lea     edx, [ebp+arg_C]
.text$mn:0000B907                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000B908                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000B90D                 mov     [ebp+var_1C], eax
.text$mn:0000B910                 mov     eax, [ebp+var_1C]
.text$mn:0000B913                 mov     [ebp+var_6C], eax
.text$mn:0000B916                 mov     byte ptr [ebp+var_4], 0Ah
.text$mn:0000B91A                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000B91E                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000B923                 add     esp, 18h
.text$mn:0000B926                 mov     [ebp+var_24], eax
.text$mn:0000B929                 mov     ecx, [ebp+var_24]
.text$mn:0000B92C                 push    ecx             ; int
.text$mn:0000B92D                 lea     edx, [ebp+var_AC]
.text$mn:0000B933                 push    edx
.text$mn:0000B934                 mov     ecx, [ebp+var_10]
.text$mn:0000B937                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:0000B93C                 mov     [ebp+var_2C], eax
.text$mn:0000B93F                 mov     eax, [ebp+var_2C]
.text$mn:0000B942                 mov     [ebp+var_34], eax
.text$mn:0000B945                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:0000B949                 sub     esp, 0Ch
.text$mn:0000B94C                 mov     ecx, esp
.text$mn:0000B94E                 mov     [ebp+var_74], esp
.text$mn:0000B951                 mov     edx, [ebp+var_34]
.text$mn:0000B954                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000B955                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000B95A                 mov     [ebp+var_3C], eax
.text$mn:0000B95D                 mov     eax, [ebp+var_3C]
.text$mn:0000B960                 mov     [ebp+var_7C], eax
.text$mn:0000B963                 mov     byte ptr [ebp+var_4], 0Ch
.text$mn:0000B967                 sub     esp, 0Ch
.text$mn:0000B96A                 mov     ecx, esp
.text$mn:0000B96C                 mov     [ebp+var_84], esp
.text$mn:0000B972                 lea     edx, [ebp+arg_0]
.text$mn:0000B975                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000B976                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000B97B                 mov     [ebp+var_44], eax
.text$mn:0000B97E                 mov     eax, [ebp+var_44]
.text$mn:0000B981                 mov     [ebp+var_8C], eax
.text$mn:0000B987                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:0000B98B                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:0000B98F                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000B994                 add     esp, 18h
.text$mn:0000B997                 mov     [ebp+var_4C], eax
.text$mn:0000B99A                 mov     ecx, [ebp+var_4C]
.text$mn:0000B99D                 push    ecx             ; int
.text$mn:0000B99E                 mov     ecx, [ebp+var_10]
.text$mn:0000B9A1                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)
.text$mn:0000B9A6                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000B9AA                 lea     ecx, [ebp+var_AC]
.text$mn:0000B9B0                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000B9B5
.text$mn:0000B9B5 loc_B9B5:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+120j
.text$mn:0000B9B5                 mov     edx, [ebp+var_10]
.text$mn:0000B9B8                 mov     [ebp+var_14], edx
.text$mn:0000B9BB                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000B9BF                 lea     ecx, [ebp+arg_0]
.text$mn:0000B9C2                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000B9C7                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000B9CB                 lea     ecx, [ebp+arg_C]
.text$mn:0000B9CE                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000B9D3                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000B9D7                 lea     ecx, [ebp+arg_18]
.text$mn:0000B9DA                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000B9DF                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000B9E6                 lea     ecx, [ebp+arg_24]
.text$mn:0000B9E9                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000B9EE                 mov     eax, [ebp+var_14]
.text$mn:0000B9F1                 mov     ecx, [ebp+var_C]
.text$mn:0000B9F4                 mov     large fs:0, ecx
.text$mn:0000B9FB                 pop     ecx
.text$mn:0000B9FC                 mov     esp, ebp
.text$mn:0000B9FE                 pop     ebp
.text$mn:0000B9FF                 retn    30h
.text$mn:0000B9FF ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z endp
.text$mn:0000B9FF
.text$mn:0000B9FF ; ---------------------------------------------------------------------------
.text$mn:0000BA02                 align 4
.text$mn:0000BA02 _text$mn        ends
.text$mn:0000BA02
.text$x:0000BA04 ; ===========================================================================
.text$x:0000BA04
.text$x:0000BA04 ; Segment type: Pure code
.text$x:0000BA04 ; Segment permissions: Read/Execute
.text$x:0000BA04 _text$x         segment para public 'CODE' use32
.text$x:0000BA04                 assume cs:_text$x
.text$x:0000BA04                 ;org 0BA04h
.text$x:0000BA04 ; COMDAT (pick associative to section at B7A0)
.text$x:0000BA04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000BA04
.text$x:0000BA04 ; =============== S U B R O U T I N E =======================================
.text$x:0000BA04
.text$x:0000BA04
.text$x:0000BA04 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$0 proc near
.text$x:0000BA04                                         ; DATA XREF: .xdata$x:0000C470o
.text$x:0000BA04                 lea     ecx, [ebp+2Ch]
.text$x:0000BA07                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000BA07 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$0 endp
.text$x:0000BA07
.text$x:0000BA0C
.text$x:0000BA0C ; =============== S U B R O U T I N E =======================================
.text$x:0000BA0C
.text$x:0000BA0C
.text$x:0000BA0C __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$1 proc near
.text$x:0000BA0C                                         ; DATA XREF: .xdata$x:0000C478o
.text$x:0000BA0C                 lea     ecx, [ebp+20h]
.text$x:0000BA0F                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000BA0F __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$1 endp
.text$x:0000BA0F
.text$x:0000BA14
.text$x:0000BA14 ; =============== S U B R O U T I N E =======================================
.text$x:0000BA14
.text$x:0000BA14
.text$x:0000BA14 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$2 proc near
.text$x:0000BA14                                         ; DATA XREF: .xdata$x:0000C480o
.text$x:0000BA14                 lea     ecx, [ebp+14h]
.text$x:0000BA17                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000BA17 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$2 endp
.text$x:0000BA17
.text$x:0000BA1C
.text$x:0000BA1C ; =============== S U B R O U T I N E =======================================
.text$x:0000BA1C
.text$x:0000BA1C
.text$x:0000BA1C __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$3 proc near
.text$x:0000BA1C                                         ; DATA XREF: .xdata$x:0000C488o
.text$x:0000BA1C                 lea     ecx, [ebp+8]
.text$x:0000BA1F                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000BA1F __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$3 endp
.text$x:0000BA1F
.text$x:0000BA24
.text$x:0000BA24 ; =============== S U B R O U T I N E =======================================
.text$x:0000BA24
.text$x:0000BA24
.text$x:0000BA24 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$4 proc near
.text$x:0000BA24                                         ; DATA XREF: .xdata$x:0000C490o
.text$x:0000BA24                 mov     ecx, [ebp-58h]
.text$x:0000BA27                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000BA27 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$4 endp
.text$x:0000BA27
.text$x:0000BA2C
.text$x:0000BA2C ; =============== S U B R O U T I N E =======================================
.text$x:0000BA2C
.text$x:0000BA2C
.text$x:0000BA2C __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$5 proc near
.text$x:0000BA2C                                         ; DATA XREF: .xdata$x:0000C498o
.text$x:0000BA2C                 mov     ecx, [ebp-80h]
.text$x:0000BA2F                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000BA2F __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$5 endp
.text$x:0000BA2F
.text$x:0000BA34
.text$x:0000BA34 ; =============== S U B R O U T I N E =======================================
.text$x:0000BA34
.text$x:0000BA34
.text$x:0000BA34 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$6 proc near
.text$x:0000BA34                                         ; DATA XREF: .xdata$x:0000C4A0o
.text$x:0000BA34                 lea     ecx, [ebp-0A0h]
.text$x:0000BA3A                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000BA3A __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$6 endp
.text$x:0000BA3A
.text$x:0000BA3F
.text$x:0000BA3F ; =============== S U B R O U T I N E =======================================
.text$x:0000BA3F
.text$x:0000BA3F
.text$x:0000BA3F __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$7 proc near
.text$x:0000BA3F                                         ; DATA XREF: .xdata$x:0000C4A8o
.text$x:0000BA3F                 mov     ecx, [ebp-90h]
.text$x:0000BA45                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000BA45 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$7 endp
.text$x:0000BA45
.text$x:0000BA4A
.text$x:0000BA4A ; =============== S U B R O U T I N E =======================================
.text$x:0000BA4A
.text$x:0000BA4A
.text$x:0000BA4A __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$8 proc near
.text$x:0000BA4A                                         ; DATA XREF: .xdata$x:0000C4B0o
.text$x:0000BA4A                 mov     ecx, [ebp-88h]
.text$x:0000BA50                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000BA50 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$8 endp
.text$x:0000BA50
.text$x:0000BA55
.text$x:0000BA55 ; =============== S U B R O U T I N E =======================================
.text$x:0000BA55
.text$x:0000BA55
.text$x:0000BA55 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$9 proc near
.text$x:0000BA55                                         ; DATA XREF: .xdata$x:0000C4B8o
.text$x:0000BA55                 mov     ecx, [ebp-94h]
.text$x:0000BA5B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000BA5B __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$9 endp
.text$x:0000BA5B
.text$x:0000BA60
.text$x:0000BA60 ; =============== S U B R O U T I N E =======================================
.text$x:0000BA60
.text$x:0000BA60
.text$x:0000BA60 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$10 proc near
.text$x:0000BA60                                         ; DATA XREF: .xdata$x:0000C4C0o
.text$x:0000BA60                 mov     ecx, [ebp-64h]
.text$x:0000BA63                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000BA63 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$10 endp
.text$x:0000BA63
.text$x:0000BA68
.text$x:0000BA68 ; =============== S U B R O U T I N E =======================================
.text$x:0000BA68
.text$x:0000BA68
.text$x:0000BA68 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$11 proc near
.text$x:0000BA68                                         ; DATA XREF: .xdata$x:0000C4C8o
.text$x:0000BA68                 lea     ecx, [ebp-0ACh]
.text$x:0000BA6E                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000BA6E __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$11 endp
.text$x:0000BA6E
.text$x:0000BA73
.text$x:0000BA73 ; =============== S U B R O U T I N E =======================================
.text$x:0000BA73
.text$x:0000BA73
.text$x:0000BA73 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$12 proc near
.text$x:0000BA73                                         ; DATA XREF: .xdata$x:0000C4D0o
.text$x:0000BA73                 mov     ecx, [ebp-74h]
.text$x:0000BA76                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000BA76 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$12 endp
.text$x:0000BA76
.text$x:0000BA7B
.text$x:0000BA7B ; =============== S U B R O U T I N E =======================================
.text$x:0000BA7B
.text$x:0000BA7B
.text$x:0000BA7B __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$13 proc near
.text$x:0000BA7B                                         ; DATA XREF: .xdata$x:0000C4D8o
.text$x:0000BA7B                 mov     ecx, [ebp-84h]
.text$x:0000BA81                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000BA81 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$13 endp
.text$x:0000BA81
.text$x:0000BA86
.text$x:0000BA86 ; =============== S U B R O U T I N E =======================================
.text$x:0000BA86
.text$x:0000BA86
.text$x:0000BA86 __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z proc near
.text$x:0000BA86                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+5o
.text$x:0000BA86
.text$x:0000BA86 arg_4           = dword ptr  8
.text$x:0000BA86
.text$x:0000BA86                 mov     edx, [esp+arg_4]
.text$x:0000BA8A                 lea     eax, [edx+0Ch]
.text$x:0000BA8D                 mov     ecx, [edx-0A4h]
.text$x:0000BA93                 xor     ecx, eax
.text$x:0000BA95                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000BA9A                 mov     eax, offset __ehfuncinfo$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.text$x:0000BA9F                 jmp     ___CxxFrameHandler3
.text$x:0000BA9F __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z endp
.text$x:0000BA9F
.text$x:0000BA9F _text$x         ends
.text$x:0000BA9F
.text$mn:0000BAA4 ; ===========================================================================
.text$mn:0000BAA4
.text$mn:0000BAA4 ; Segment type: Pure code
.text$mn:0000BAA4 ; Segment permissions: Read/Execute
.text$mn:0000BAA4 _text$mn        segment para public 'CODE' use32
.text$mn:0000BAA4                 assume cs:_text$mn
.text$mn:0000BAA4                 ;org 0BAA4h
.text$mn:0000BAA4 ; COMDAT (pick any)
.text$mn:0000BAA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BAA4
.text$mn:0000BAA4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BAA4
.text$mn:0000BAA4 ; Attributes: bp-based frame
.text$mn:0000BAA4
.text$mn:0000BAA4 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t *Str, int)
.text$mn:0000BAA4                 public ?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z
.text$mn:0000BAA4 ?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z proc near
.text$mn:0000BAA4                                         ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+18Ep
.text$mn:0000BAA4
.text$mn:0000BAA4 var_4           = dword ptr -4
.text$mn:0000BAA4 Str             = dword ptr  8
.text$mn:0000BAA4 arg_4           = dword ptr  0Ch
.text$mn:0000BAA4
.text$mn:0000BAA4                 push    ebp
.text$mn:0000BAA5                 mov     ebp, esp
.text$mn:0000BAA7                 push    ecx
.text$mn:0000BAA8                 mov     [ebp+var_4], ecx
.text$mn:0000BAAB                 push    7A9h            ; unsigned int
.text$mn:0000BAB0                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000BAB5                 mov     eax, [ebp+Str]
.text$mn:0000BAB8                 push    eax             ; int
.text$mn:0000BAB9                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000BABE                 add     esp, 0Ch
.text$mn:0000BAC1                 mov     ecx, [ebp+Str]
.text$mn:0000BAC4                 push    ecx             ; Str
.text$mn:0000BAC5                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:0000BACA                 add     esp, 4
.text$mn:0000BACD                 push    eax
.text$mn:0000BACE                 mov     edx, [ebp+arg_4]
.text$mn:0000BAD1                 push    edx
.text$mn:0000BAD2                 mov     eax, [ebp+Str]
.text$mn:0000BAD5                 push    eax
.text$mn:0000BAD6                 mov     ecx, [ebp+var_4]
.text$mn:0000BAD9                 call    ?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)
.text$mn:0000BADE                 mov     esp, ebp
.text$mn:0000BAE0                 pop     ebp
.text$mn:0000BAE1                 retn    8
.text$mn:0000BAE1 ?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z endp
.text$mn:0000BAE1
.text$mn:0000BAE1 _text$mn        ends
.text$mn:0000BAE1
.text$mn:0000BAE4 ; ===========================================================================
.text$mn:0000BAE4
.text$mn:0000BAE4 ; Segment type: Pure code
.text$mn:0000BAE4 ; Segment permissions: Read/Execute
.text$mn:0000BAE4 _text$mn        segment para public 'CODE' use32
.text$mn:0000BAE4                 assume cs:_text$mn
.text$mn:0000BAE4                 ;org 0BAE4h
.text$mn:0000BAE4 ; COMDAT (pick any)
.text$mn:0000BAE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BAE4
.text$mn:0000BAE4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BAE4
.text$mn:0000BAE4 ; Attributes: bp-based frame
.text$mn:0000BAE4
.text$mn:0000BAE4 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::rfind(wchar_t const *, unsigned int, unsigned int)const
.text$mn:0000BAE4                 public ?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z
.text$mn:0000BAE4 ?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z proc near
.text$mn:0000BAE4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint)+35p
.text$mn:0000BAE4
.text$mn:0000BAE4 var_10          = dword ptr -10h
.text$mn:0000BAE4 var_C           = dword ptr -0Ch
.text$mn:0000BAE4 var_8           = dword ptr -8
.text$mn:0000BAE4 var_4           = dword ptr -4
.text$mn:0000BAE4 arg_0           = dword ptr  8
.text$mn:0000BAE4 arg_4           = dword ptr  0Ch
.text$mn:0000BAE4 arg_8           = dword ptr  10h
.text$mn:0000BAE4
.text$mn:0000BAE4                 push    ebp
.text$mn:0000BAE5                 mov     ebp, esp
.text$mn:0000BAE7                 sub     esp, 10h
.text$mn:0000BAEA                 mov     [ebp+var_4], ecx
.text$mn:0000BAED                 cmp     [ebp+arg_8], 0
.text$mn:0000BAF1                 jz      short loc_BB09
.text$mn:0000BAF3                 push    791h            ; unsigned int
.text$mn:0000BAF8                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000BAFD                 mov     eax, [ebp+arg_0]
.text$mn:0000BB00                 push    eax             ; int
.text$mn:0000BB01                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000BB06                 add     esp, 0Ch
.text$mn:0000BB09
.text$mn:0000BB09 loc_BB09:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+Dj
.text$mn:0000BB09                 cmp     [ebp+arg_8], 0
.text$mn:0000BB0D                 jnz     short loc_BB33
.text$mn:0000BB0F                 mov     ecx, [ebp+var_4]
.text$mn:0000BB12                 mov     edx, [ebp+arg_4]
.text$mn:0000BB15                 cmp     edx, [ecx+14h]
.text$mn:0000BB18                 jnb     short loc_BB22
.text$mn:0000BB1A                 mov     eax, [ebp+arg_4]
.text$mn:0000BB1D                 mov     [ebp+var_C], eax
.text$mn:0000BB20                 jmp     short loc_BB2B
.text$mn:0000BB22 ; ---------------------------------------------------------------------------
.text$mn:0000BB22
.text$mn:0000BB22 loc_BB22:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+34j
.text$mn:0000BB22                 mov     ecx, [ebp+var_4]
.text$mn:0000BB25                 mov     edx, [ecx+14h]
.text$mn:0000BB28                 mov     [ebp+var_C], edx
.text$mn:0000BB2B
.text$mn:0000BB2B loc_BB2B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+3Cj
.text$mn:0000BB2B                 mov     eax, [ebp+var_C]
.text$mn:0000BB2E                 jmp     loc_BBDA
.text$mn:0000BB33 ; ---------------------------------------------------------------------------
.text$mn:0000BB33
.text$mn:0000BB33 loc_BB33:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+29j
.text$mn:0000BB33                 mov     eax, [ebp+var_4]
.text$mn:0000BB36                 mov     ecx, [ebp+arg_8]
.text$mn:0000BB39                 cmp     ecx, [eax+14h]
.text$mn:0000BB3C                 ja      loc_BBD5
.text$mn:0000BB42                 mov     edx, [ebp+var_4]
.text$mn:0000BB45                 mov     eax, [edx+14h]
.text$mn:0000BB48                 sub     eax, [ebp+arg_8]
.text$mn:0000BB4B                 cmp     [ebp+arg_4], eax
.text$mn:0000BB4E                 jnb     short loc_BB58
.text$mn:0000BB50                 mov     ecx, [ebp+arg_4]
.text$mn:0000BB53                 mov     [ebp+var_10], ecx
.text$mn:0000BB56                 jmp     short loc_BB64
.text$mn:0000BB58 ; ---------------------------------------------------------------------------
.text$mn:0000BB58
.text$mn:0000BB58 loc_BB58:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+6Aj
.text$mn:0000BB58                 mov     edx, [ebp+var_4]
.text$mn:0000BB5B                 mov     eax, [edx+14h]
.text$mn:0000BB5E                 sub     eax, [ebp+arg_8]
.text$mn:0000BB61                 mov     [ebp+var_10], eax
.text$mn:0000BB64
.text$mn:0000BB64 loc_BB64:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+72j
.text$mn:0000BB64                 mov     ecx, [ebp+var_4]
.text$mn:0000BB67                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000BB6C                 mov     ecx, [ebp+var_10]
.text$mn:0000BB6F                 lea     edx, [eax+ecx*2]
.text$mn:0000BB72                 mov     [ebp+var_8], edx
.text$mn:0000BB75                 jmp     short loc_BB80
.text$mn:0000BB77 ; ---------------------------------------------------------------------------
.text$mn:0000BB77
.text$mn:0000BB77 loc_BB77:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint):loc_BBD3j
.text$mn:0000BB77                 mov     eax, [ebp+var_8]
.text$mn:0000BB7A                 sub     eax, 2
.text$mn:0000BB7D                 mov     [ebp+var_8], eax
.text$mn:0000BB80
.text$mn:0000BB80 loc_BB80:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+91j
.text$mn:0000BB80                 mov     ecx, [ebp+arg_0]
.text$mn:0000BB83                 push    ecx
.text$mn:0000BB84                 mov     edx, [ebp+var_8]
.text$mn:0000BB87                 push    edx
.text$mn:0000BB88                 call    ?eq@?$char_traits@_W@std@@SA_NAB_W0@Z ; std::char_traits<wchar_t>::eq(wchar_t const &,wchar_t const &)
.text$mn:0000BB8D                 add     esp, 8
.text$mn:0000BB90                 movzx   eax, al
.text$mn:0000BB93                 test    eax, eax
.text$mn:0000BB95                 jz      short loc_BBC4
.text$mn:0000BB97                 mov     ecx, [ebp+arg_8]
.text$mn:0000BB9A                 push    ecx
.text$mn:0000BB9B                 mov     edx, [ebp+arg_0]
.text$mn:0000BB9E                 push    edx
.text$mn:0000BB9F                 mov     eax, [ebp+var_8]
.text$mn:0000BBA2                 push    eax
.text$mn:0000BBA3                 call    ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z ; std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)
.text$mn:0000BBA8                 add     esp, 0Ch
.text$mn:0000BBAB                 test    eax, eax
.text$mn:0000BBAD                 jnz     short loc_BBC4
.text$mn:0000BBAF                 mov     ecx, [ebp+var_4]
.text$mn:0000BBB2                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000BBB7                 mov     ecx, [ebp+var_8]
.text$mn:0000BBBA                 sub     ecx, eax
.text$mn:0000BBBC                 sar     ecx, 1
.text$mn:0000BBBE                 mov     eax, ecx
.text$mn:0000BBC0                 jmp     short loc_BBDA
.text$mn:0000BBC2 ; ---------------------------------------------------------------------------
.text$mn:0000BBC2                 jmp     short loc_BBD3
.text$mn:0000BBC4 ; ---------------------------------------------------------------------------
.text$mn:0000BBC4
.text$mn:0000BBC4 loc_BBC4:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+B1j
.text$mn:0000BBC4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+C9j
.text$mn:0000BBC4                 mov     ecx, [ebp+var_4]
.text$mn:0000BBC7                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000BBCC                 cmp     [ebp+var_8], eax
.text$mn:0000BBCF                 jnz     short loc_BBD3
.text$mn:0000BBD1                 jmp     short loc_BBD5
.text$mn:0000BBD3 ; ---------------------------------------------------------------------------
.text$mn:0000BBD3
.text$mn:0000BBD3 loc_BBD3:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+DEj
.text$mn:0000BBD3                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+EBj
.text$mn:0000BBD3                 jmp     short loc_BB77
.text$mn:0000BBD5 ; ---------------------------------------------------------------------------
.text$mn:0000BBD5
.text$mn:0000BBD5 loc_BBD5:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+58j
.text$mn:0000BBD5                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+EDj
.text$mn:0000BBD5                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000BBDA
.text$mn:0000BBDA loc_BBDA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+4Aj
.text$mn:0000BBDA                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::rfind(wchar_t const *,uint,uint)+DCj
.text$mn:0000BBDA                 mov     esp, ebp
.text$mn:0000BBDC                 pop     ebp
.text$mn:0000BBDD                 retn    0Ch
.text$mn:0000BBDD ?rfind@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z endp
.text$mn:0000BBDD
.text$mn:0000BBDD _text$mn        ends
.text$mn:0000BBDD
.text$mn:0000BBE0 ; ===========================================================================
.text$mn:0000BBE0
.text$mn:0000BBE0 ; Segment type: Pure code
.text$mn:0000BBE0 ; Segment permissions: Read/Execute
.text$mn:0000BBE0 _text$mn        segment para public 'CODE' use32
.text$mn:0000BBE0                 assume cs:_text$mn
.text$mn:0000BBE0                 ;org 0BBE0h
.text$mn:0000BBE0 ; COMDAT (pick any)
.text$mn:0000BBE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BBE0
.text$mn:0000BBE0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BBE0
.text$mn:0000BBE0 ; Attributes: bp-based frame
.text$mn:0000BBE0
.text$mn:0000BBE0 ; int __stdcall DockingDlgInterface::run_dlgProc(DockingDlgInterface *this, unsigned int, unsigned int, __int32)
.text$mn:0000BBE0                 public ?run_dlgProc@DockingDlgInterface@@MAGHIIJ@Z
.text$mn:0000BBE0 ?run_dlgProc@DockingDlgInterface@@MAGHIIJ@Z proc near
.text$mn:0000BBE0                                         ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+526p
.text$mn:0000BBE0                                         ; ProjectPanel::run_dlgProc(uint,uint,long)+53Dp
.text$mn:0000BBE0
.text$mn:0000BBE0 var_C           = dword ptr -0Ch
.text$mn:0000BBE0 var_8           = dword ptr -8
.text$mn:0000BBE0 var_4           = dword ptr -4
.text$mn:0000BBE0 this            = dword ptr  8
.text$mn:0000BBE0 arg_4           = dword ptr  0Ch
.text$mn:0000BBE0 arg_C           = dword ptr  14h
.text$mn:0000BBE0
.text$mn:0000BBE0                 push    ebp
.text$mn:0000BBE1                 mov     ebp, esp
.text$mn:0000BBE3                 sub     esp, 0Ch
.text$mn:0000BBE6                 mov     eax, [ebp+arg_4]
.text$mn:0000BBE9                 mov     [ebp+var_C], eax
.text$mn:0000BBEC                 cmp     [ebp+var_C], 4Eh ; 'N'
.text$mn:0000BBF0                 jz      short loc_BBF4
.text$mn:0000BBF2                 jmp     short loc_BC56
.text$mn:0000BBF4 ; ---------------------------------------------------------------------------
.text$mn:0000BBF4
.text$mn:0000BBF4 loc_BBF4:                               ; CODE XREF: DockingDlgInterface::run_dlgProc(uint,uint,long)+10j
.text$mn:0000BBF4                 mov     ecx, [ebp+arg_C]
.text$mn:0000BBF7                 mov     [ebp+var_4], ecx
.text$mn:0000BBFA                 mov     edx, [ebp+var_4]
.text$mn:0000BBFD                 mov     eax, [ebp+this]
.text$mn:0000BC00                 mov     ecx, [edx]
.text$mn:0000BC02                 cmp     ecx, [eax+8]
.text$mn:0000BC05                 jnz     short loc_BC56
.text$mn:0000BC07                 mov     edx, [ebp+var_4]
.text$mn:0000BC0A                 mov     eax, [edx+8]
.text$mn:0000BC0D                 and     eax, 0FFFFh
.text$mn:0000BC12                 movzx   ecx, ax
.text$mn:0000BC15                 mov     [ebp+var_8], ecx
.text$mn:0000BC18                 cmp     [ebp+var_8], 41Ch
.text$mn:0000BC1F                 jz      short loc_BC37
.text$mn:0000BC21                 cmp     [ebp+var_8], 41Dh
.text$mn:0000BC28                 jz      short loc_BC2E
.text$mn:0000BC2A                 jmp     short loc_BC56
.text$mn:0000BC2C ; ---------------------------------------------------------------------------
.text$mn:0000BC2C                 jmp     short loc_BC56
.text$mn:0000BC2E ; ---------------------------------------------------------------------------
.text$mn:0000BC2E
.text$mn:0000BC2E loc_BC2E:                               ; CODE XREF: DockingDlgInterface::run_dlgProc(uint,uint,long)+48j
.text$mn:0000BC2E                 mov     edx, [ebp+this]
.text$mn:0000BC31                 mov     byte ptr [edx+28h], 1
.text$mn:0000BC35                 jmp     short loc_BC56
.text$mn:0000BC37 ; ---------------------------------------------------------------------------
.text$mn:0000BC37
.text$mn:0000BC37 loc_BC37:                               ; CODE XREF: DockingDlgInterface::run_dlgProc(uint,uint,long)+3Fj
.text$mn:0000BC37                 mov     eax, [ebp+var_4]
.text$mn:0000BC3A                 mov     ecx, [eax+8]
.text$mn:0000BC3D                 shr     ecx, 10h
.text$mn:0000BC40                 and     ecx, 0FFFFh
.text$mn:0000BC46                 movzx   edx, cx
.text$mn:0000BC49                 mov     eax, [ebp+this]
.text$mn:0000BC4C                 mov     [eax+2Ch], edx
.text$mn:0000BC4F                 mov     ecx, [ebp+this]
.text$mn:0000BC52                 mov     byte ptr [ecx+28h], 0
.text$mn:0000BC56
.text$mn:0000BC56 loc_BC56:                               ; CODE XREF: DockingDlgInterface::run_dlgProc(uint,uint,long)+12j
.text$mn:0000BC56                                         ; DockingDlgInterface::run_dlgProc(uint,uint,long)+25j ...
.text$mn:0000BC56                 xor     eax, eax
.text$mn:0000BC58                 mov     esp, ebp
.text$mn:0000BC5A                 pop     ebp
.text$mn:0000BC5B                 retn    10h
.text$mn:0000BC5B ?run_dlgProc@DockingDlgInterface@@MAGHIIJ@Z endp
.text$mn:0000BC5B
.text$mn:0000BC5B ; ---------------------------------------------------------------------------
.text$mn:0000BC5E                 align 10h
.text$mn:0000BC5E _text$mn        ends
.text$mn:0000BC5E
.text$mn:0000BC60 ; ===========================================================================
.text$mn:0000BC60
.text$mn:0000BC60 ; Segment type: Pure code
.text$mn:0000BC60 ; Segment permissions: Read/Execute
.text$mn:0000BC60 _text$mn        segment para public 'CODE' use32
.text$mn:0000BC60                 assume cs:_text$mn
.text$mn:0000BC60                 ;org 0BC60h
.text$mn:0000BC60 ; COMDAT (pick any)
.text$mn:0000BC60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BC60
.text$mn:0000BC60 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BC60
.text$mn:0000BC60 ; Attributes: bp-based frame
.text$mn:0000BC60
.text$mn:0000BC60 ; bool __thiscall TreeView::selectItem(TreeView *this, struct _TREEITEM *)
.text$mn:0000BC60                 public ?selectItem@TreeView@@QBE_NPAU_TREEITEM@@@Z
.text$mn:0000BC60 ?selectItem@TreeView@@QBE_NPAU_TREEITEM@@@Z proc near
.text$mn:0000BC60                                         ; CODE XREF: ProjectPanel::showContextMenu(int,int)+66p
.text$mn:0000BC60
.text$mn:0000BC60 var_8           = dword ptr -8
.text$mn:0000BC60 var_4           = dword ptr -4
.text$mn:0000BC60 lParam          = dword ptr  8
.text$mn:0000BC60
.text$mn:0000BC60                 push    ebp
.text$mn:0000BC61                 mov     ebp, esp
.text$mn:0000BC63                 sub     esp, 8
.text$mn:0000BC66                 mov     [ebp+var_8], ecx
.text$mn:0000BC69                 mov     eax, [ebp+lParam]
.text$mn:0000BC6C                 push    eax             ; lParam
.text$mn:0000BC6D                 push    9               ; wParam
.text$mn:0000BC6F                 push    110Bh           ; Msg
.text$mn:0000BC74                 mov     ecx, [ebp+var_8]
.text$mn:0000BC77                 mov     edx, [ecx+0Ch]
.text$mn:0000BC7A                 push    edx             ; hWnd
.text$mn:0000BC7B                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000BC81                 cmp     eax, 1
.text$mn:0000BC84                 jnz     short loc_BC8F
.text$mn:0000BC86                 mov     [ebp+var_4], 1
.text$mn:0000BC8D                 jmp     short loc_BC96
.text$mn:0000BC8F ; ---------------------------------------------------------------------------
.text$mn:0000BC8F
.text$mn:0000BC8F loc_BC8F:                               ; CODE XREF: TreeView::selectItem(_TREEITEM *)+24j
.text$mn:0000BC8F                 mov     [ebp+var_4], 0
.text$mn:0000BC96
.text$mn:0000BC96 loc_BC96:                               ; CODE XREF: TreeView::selectItem(_TREEITEM *)+2Dj
.text$mn:0000BC96                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000BC99                 mov     esp, ebp
.text$mn:0000BC9B                 pop     ebp
.text$mn:0000BC9C                 retn    4
.text$mn:0000BC9C ?selectItem@TreeView@@QBE_NPAU_TREEITEM@@@Z endp
.text$mn:0000BC9C
.text$mn:0000BC9C ; ---------------------------------------------------------------------------
.text$mn:0000BC9F                 align 10h
.text$mn:0000BC9F _text$mn        ends
.text$mn:0000BC9F
.text$mn:0000BCA0 ; ===========================================================================
.text$mn:0000BCA0
.text$mn:0000BCA0 ; Segment type: Pure code
.text$mn:0000BCA0 ; Segment permissions: Read/Execute
.text$mn:0000BCA0 _text$mn        segment para public 'CODE' use32
.text$mn:0000BCA0                 assume cs:_text$mn
.text$mn:0000BCA0                 ;org 0BCA0h
.text$mn:0000BCA0 ; COMDAT (pick any)
.text$mn:0000BCA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BCA0
.text$mn:0000BCA0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BCA0
.text$mn:0000BCA0 ; Attributes: bp-based frame
.text$mn:0000BCA0
.text$mn:0000BCA0 ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::select_on_container_copy_construction(void)const
.text$mn:0000BCA0                 public ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ
.text$mn:0000BCA0 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ proc near
.text$mn:0000BCA0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+3Ap
.text$mn:0000BCA0
.text$mn:0000BCA0 var_8           = dword ptr -8
.text$mn:0000BCA0 var_1           = byte ptr -1
.text$mn:0000BCA0 arg_0           = dword ptr  8
.text$mn:0000BCA0
.text$mn:0000BCA0                 push    ebp
.text$mn:0000BCA1                 mov     ebp, esp
.text$mn:0000BCA3                 sub     esp, 8
.text$mn:0000BCA6                 mov     [ebp+var_8], ecx
.text$mn:0000BCA9                 mov     eax, [ebp+var_8]
.text$mn:0000BCAC                 push    eax
.text$mn:0000BCAD                 lea     ecx, [ebp+var_1]
.text$mn:0000BCB0                 push    ecx
.text$mn:0000BCB1                 call    ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ; std::allocator_traits<std::allocator<wchar_t>>::select_on_container_copy_construction(std::allocator<wchar_t> const &)
.text$mn:0000BCB6                 add     esp, 8
.text$mn:0000BCB9                 push    eax
.text$mn:0000BCBA                 mov     ecx, [ebp+arg_0]
.text$mn:0000BCBD                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(std::allocator<wchar_t> const &)
.text$mn:0000BCC2                 mov     eax, [ebp+arg_0]
.text$mn:0000BCC5                 mov     esp, ebp
.text$mn:0000BCC7                 pop     ebp
.text$mn:0000BCC8                 retn    4
.text$mn:0000BCC8 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ endp
.text$mn:0000BCC8
.text$mn:0000BCC8 ; ---------------------------------------------------------------------------
.text$mn:0000BCCB                 align 4
.text$mn:0000BCCB _text$mn        ends
.text$mn:0000BCCB
.text$mn:0000BCCC ; ===========================================================================
.text$mn:0000BCCC
.text$mn:0000BCCC ; Segment type: Pure code
.text$mn:0000BCCC ; Segment permissions: Read/Execute
.text$mn:0000BCCC _text$mn        segment para public 'CODE' use32
.text$mn:0000BCCC                 assume cs:_text$mn
.text$mn:0000BCCC                 ;org 0BCCCh
.text$mn:0000BCCC ; COMDAT (pick any)
.text$mn:0000BCCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BCCC
.text$mn:0000BCCC ; =============== S U B R O U T I N E =======================================
.text$mn:0000BCCC
.text$mn:0000BCCC ; Attributes: bp-based frame
.text$mn:0000BCCC
.text$mn:0000BCCC ; public: class std::allocator<wchar_t> __thiscall std::allocator<wchar_t>::select_on_container_copy_construction(void)const
.text$mn:0000BCCC                 public ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ
.text$mn:0000BCCC ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ proc near
.text$mn:0000BCCC                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::select_on_container_copy_construction(std::allocator<wchar_t> const &)+Ap
.text$mn:0000BCCC
.text$mn:0000BCCC var_4           = dword ptr -4
.text$mn:0000BCCC arg_0           = dword ptr  8
.text$mn:0000BCCC
.text$mn:0000BCCC                 push    ebp
.text$mn:0000BCCD                 mov     ebp, esp
.text$mn:0000BCCF                 push    ecx
.text$mn:0000BCD0                 mov     [ebp+var_4], ecx
.text$mn:0000BCD3                 mov     eax, [ebp+var_4]
.text$mn:0000BCD6                 push    eax
.text$mn:0000BCD7                 mov     ecx, [ebp+arg_0]
.text$mn:0000BCDA                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:0000BCDF                 mov     eax, [ebp+arg_0]
.text$mn:0000BCE2                 mov     esp, ebp
.text$mn:0000BCE4                 pop     ebp
.text$mn:0000BCE5                 retn    4
.text$mn:0000BCE5 ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ endp
.text$mn:0000BCE5
.text$mn:0000BCE5 _text$mn        ends
.text$mn:0000BCE5
.text$mn:0000BCE8 ; ===========================================================================
.text$mn:0000BCE8
.text$mn:0000BCE8 ; Segment type: Pure code
.text$mn:0000BCE8 ; Segment permissions: Read/Execute
.text$mn:0000BCE8 _text$mn        segment para public 'CODE' use32
.text$mn:0000BCE8                 assume cs:_text$mn
.text$mn:0000BCE8                 ;org 0BCE8h
.text$mn:0000BCE8 ; COMDAT (pick any)
.text$mn:0000BCE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BCE8
.text$mn:0000BCE8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BCE8
.text$mn:0000BCE8 ; Attributes: bp-based frame
.text$mn:0000BCE8
.text$mn:0000BCE8 ; public: static class std::allocator<wchar_t> __cdecl std::allocator_traits<class std::allocator<wchar_t>>::select_on_container_copy_construction(class std::allocator<wchar_t> const &)
.text$mn:0000BCE8                 public ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z
.text$mn:0000BCE8 ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z proc near
.text$mn:0000BCE8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)+11p
.text$mn:0000BCE8
.text$mn:0000BCE8 arg_0           = dword ptr  8
.text$mn:0000BCE8 arg_4           = dword ptr  0Ch
.text$mn:0000BCE8
.text$mn:0000BCE8                 push    ebp
.text$mn:0000BCE9                 mov     ebp, esp
.text$mn:0000BCEB                 mov     eax, [ebp+arg_0]
.text$mn:0000BCEE                 push    eax
.text$mn:0000BCEF                 mov     ecx, [ebp+arg_4]
.text$mn:0000BCF2                 call    ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ ; std::allocator<wchar_t>::select_on_container_copy_construction(void)
.text$mn:0000BCF7                 mov     eax, [ebp+arg_0]
.text$mn:0000BCFA                 pop     ebp
.text$mn:0000BCFB                 retn
.text$mn:0000BCFB ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z endp
.text$mn:0000BCFB
.text$mn:0000BCFB _text$mn        ends
.text$mn:0000BCFB
.text$mn:0000BCFC ; ===========================================================================
.text$mn:0000BCFC
.text$mn:0000BCFC ; Segment type: Pure code
.text$mn:0000BCFC ; Segment permissions: Read/Execute
.text$mn:0000BCFC _text$mn        segment para public 'CODE' use32
.text$mn:0000BCFC                 assume cs:_text$mn
.text$mn:0000BCFC                 ;org 0BCFCh
.text$mn:0000BCFC ; COMDAT (pick any)
.text$mn:0000BCFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BCFC
.text$mn:0000BCFC ; =============== S U B R O U T I N E =======================================
.text$mn:0000BCFC
.text$mn:0000BCFC ; Attributes: bp-based frame
.text$mn:0000BCFC
.text$mn:0000BCFC ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::size(void)const
.text$mn:0000BCFC                 public ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:0000BCFC ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:0000BCFC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+Cp
.text$mn:0000BCFC                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+21p
.text$mn:0000BCFC
.text$mn:0000BCFC var_4           = dword ptr -4
.text$mn:0000BCFC
.text$mn:0000BCFC                 push    ebp
.text$mn:0000BCFD                 mov     ebp, esp
.text$mn:0000BCFF                 push    ecx
.text$mn:0000BD00                 mov     [ebp+var_4], ecx
.text$mn:0000BD03                 mov     eax, [ebp+var_4]
.text$mn:0000BD06                 mov     eax, [eax+14h]
.text$mn:0000BD09                 mov     esp, ebp
.text$mn:0000BD0B                 pop     ebp
.text$mn:0000BD0C                 retn
.text$mn:0000BD0C ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:0000BD0C
.text$mn:0000BD0C ; ---------------------------------------------------------------------------
.text$mn:0000BD0D                 align 10h
.text$mn:0000BD0D _text$mn        ends
.text$mn:0000BD0D
.text$mn:0000BD10 ; ===========================================================================
.text$mn:0000BD10
.text$mn:0000BD10 ; Segment type: Pure code
.text$mn:0000BD10 ; Segment permissions: Read/Execute
.text$mn:0000BD10 _text$mn        segment para public 'CODE' use32
.text$mn:0000BD10                 assume cs:_text$mn
.text$mn:0000BD10                 ;org 0BD10h
.text$mn:0000BD10 ; COMDAT (pick any)
.text$mn:0000BD10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BD10
.text$mn:0000BD10 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BD10
.text$mn:0000BD10 ; Attributes: bp-based frame
.text$mn:0000BD10
.text$mn:0000BD10 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::size(void)const
.text$mn:0000BD10                 public ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:0000BD10 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:0000BD10                                         ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+2E6p
.text$mn:0000BD10                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+Cp ...
.text$mn:0000BD10
.text$mn:0000BD10 var_4           = dword ptr -4
.text$mn:0000BD10
.text$mn:0000BD10                 push    ebp
.text$mn:0000BD11                 mov     ebp, esp
.text$mn:0000BD13                 push    ecx
.text$mn:0000BD14                 mov     [ebp+var_4], ecx
.text$mn:0000BD17                 mov     eax, [ebp+var_4]
.text$mn:0000BD1A                 mov     eax, [eax+14h]
.text$mn:0000BD1D                 mov     esp, ebp
.text$mn:0000BD1F                 pop     ebp
.text$mn:0000BD20                 retn
.text$mn:0000BD20 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:0000BD20
.text$mn:0000BD20 ; ---------------------------------------------------------------------------
.text$mn:0000BD21                 align 4
.text$mn:0000BD21 _text$mn        ends
.text$mn:0000BD21
.text$mn:0000BD24 ; ===========================================================================
.text$mn:0000BD24
.text$mn:0000BD24 ; Segment type: Pure code
.text$mn:0000BD24 ; Segment permissions: Read/Execute
.text$mn:0000BD24 _text$mn        segment para public 'CODE' use32
.text$mn:0000BD24                 assume cs:_text$mn
.text$mn:0000BD24                 ;org 0BD24h
.text$mn:0000BD24 ; COMDAT (pick any)
.text$mn:0000BD24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BD24
.text$mn:0000BD24 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BD24
.text$mn:0000BD24 ; Attributes: bp-based frame
.text$mn:0000BD24
.text$mn:0000BD24 ; public: unsigned int __thiscall std::vector<int, class std::allocator<int>>::size(void)const
.text$mn:0000BD24                 public ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
.text$mn:0000BD24 ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ proc near
.text$mn:0000BD24                                         ; CODE XREF: std::vector<int,std::allocator<int>>::_Reallocate(uint)+A9p
.text$mn:0000BD24                                         ; std::vector<int,std::allocator<int>>::_Reserve(uint)+22p ...
.text$mn:0000BD24
.text$mn:0000BD24 var_4           = dword ptr -4
.text$mn:0000BD24
.text$mn:0000BD24                 push    ebp
.text$mn:0000BD25                 mov     ebp, esp
.text$mn:0000BD27                 push    ecx
.text$mn:0000BD28                 mov     [ebp+var_4], ecx
.text$mn:0000BD2B                 mov     eax, [ebp+var_4]
.text$mn:0000BD2E                 mov     ecx, [ebp+var_4]
.text$mn:0000BD31                 mov     eax, [eax+8]
.text$mn:0000BD34                 sub     eax, [ecx+4]
.text$mn:0000BD37                 sar     eax, 2
.text$mn:0000BD3A                 mov     esp, ebp
.text$mn:0000BD3C                 pop     ebp
.text$mn:0000BD3D                 retn
.text$mn:0000BD3D ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ endp
.text$mn:0000BD3D
.text$mn:0000BD3D ; ---------------------------------------------------------------------------
.text$mn:0000BD3E                 align 10h
.text$mn:0000BD3E _text$mn        ends
.text$mn:0000BD3E
.text$mn:0000BD40 ; ===========================================================================
.text$mn:0000BD40
.text$mn:0000BD40 ; Segment type: Pure code
.text$mn:0000BD40 ; Segment permissions: Read/Execute
.text$mn:0000BD40 _text$mn        segment para public 'CODE' use32
.text$mn:0000BD40                 assume cs:_text$mn
.text$mn:0000BD40                 ;org 0BD40h
.text$mn:0000BD40 ; COMDAT (pick any)
.text$mn:0000BD40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BD40
.text$mn:0000BD40 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BD40
.text$mn:0000BD40 ; Attributes: bp-based frame
.text$mn:0000BD40
.text$mn:0000BD40 ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::size(void)const
.text$mn:0000BD40                 public ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:0000BD40 ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:0000BD40                                         ; CODE XREF: ProjectPanel::addFiles(_TREEITEM *)+99p
.text$mn:0000BD40                                         ; ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+218p ...
.text$mn:0000BD40
.text$mn:0000BD40 var_4           = dword ptr -4
.text$mn:0000BD40
.text$mn:0000BD40                 push    ebp
.text$mn:0000BD41                 mov     ebp, esp
.text$mn:0000BD43                 push    ecx
.text$mn:0000BD44                 mov     [ebp+var_4], ecx
.text$mn:0000BD47                 mov     eax, [ebp+var_4]
.text$mn:0000BD4A                 mov     ecx, [ebp+var_4]
.text$mn:0000BD4D                 mov     eax, [eax+8]
.text$mn:0000BD50                 sub     eax, [ecx+4]
.text$mn:0000BD53                 cdq
.text$mn:0000BD54                 mov     ecx, 1Ch
.text$mn:0000BD59                 idiv    ecx
.text$mn:0000BD5B                 mov     esp, ebp
.text$mn:0000BD5D                 pop     ebp
.text$mn:0000BD5E                 retn
.text$mn:0000BD5E ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:0000BD5E
.text$mn:0000BD5E ; ---------------------------------------------------------------------------
.text$mn:0000BD5F                 align 10h
.text$mn:0000BD5F _text$mn        ends
.text$mn:0000BD5F
.text$mn:0000BD60 ; ===========================================================================
.text$mn:0000BD60
.text$mn:0000BD60 ; Segment type: Pure code
.text$mn:0000BD60 ; Segment permissions: Read/Execute
.text$mn:0000BD60 _text$mn        segment para public 'CODE' use32
.text$mn:0000BD60                 assume cs:_text$mn
.text$mn:0000BD60                 ;org 0BD60h
.text$mn:0000BD60 ; COMDAT (pick any)
.text$mn:0000BD60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BD60
.text$mn:0000BD60 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BD60
.text$mn:0000BD60 ; Attributes: bp-based frame
.text$mn:0000BD60
.text$mn:0000BD60 ; const struct std::error_category *__cdecl std::system_category()
.text$mn:0000BD60                 public ?system_category@std@@YAABVerror_category@1@XZ
.text$mn:0000BD60 ?system_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:0000BD60                                         ; CODE XREF: std::_System_error_category::default_error_condition(int):loc_A2C8p
.text$mn:0000BD60                 push    ebp
.text$mn:0000BD61                 mov     ebp, esp
.text$mn:0000BD63                 mov     eax, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_System_error_category std::_Error_objects<int>::_System_object
.text$mn:0000BD68                 pop     ebp
.text$mn:0000BD69                 retn
.text$mn:0000BD69 ?system_category@std@@YAABVerror_category@1@XZ endp
.text$mn:0000BD69
.text$mn:0000BD69 ; ---------------------------------------------------------------------------
.text$mn:0000BD6A                 align 4
.text$mn:0000BD6A _text$mn        ends
.text$mn:0000BD6A
.text$mn:0000BD6C ; ===========================================================================
.text$mn:0000BD6C
.text$mn:0000BD6C ; Segment type: Pure code
.text$mn:0000BD6C ; Segment permissions: Read/Execute
.text$mn:0000BD6C _text$mn        segment para public 'CODE' use32
.text$mn:0000BD6C                 assume cs:_text$mn
.text$mn:0000BD6C                 ;org 0BD6Ch
.text$mn:0000BD6C ; COMDAT (pick any)
.text$mn:0000BD6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BD6C
.text$mn:0000BD6C ; =============== S U B R O U T I N E =======================================
.text$mn:0000BD6C
.text$mn:0000BD6C ; Attributes: bp-based frame
.text$mn:0000BD6C
.text$mn:0000BD6C ; void __thiscall TreeView::toggleExpandCollapse(TreeView *this, struct _TREEITEM *)
.text$mn:0000BD6C                 public ?toggleExpandCollapse@TreeView@@QBEXPAU_TREEITEM@@@Z
.text$mn:0000BD6C ?toggleExpandCollapse@TreeView@@QBEXPAU_TREEITEM@@@Z proc near
.text$mn:0000BD6C                                         ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+3E0p
.text$mn:0000BD6C
.text$mn:0000BD6C var_4           = dword ptr -4
.text$mn:0000BD6C lParam          = dword ptr  8
.text$mn:0000BD6C
.text$mn:0000BD6C                 push    ebp
.text$mn:0000BD6D                 mov     ebp, esp
.text$mn:0000BD6F                 push    ecx
.text$mn:0000BD70                 mov     [ebp+var_4], ecx
.text$mn:0000BD73                 mov     eax, [ebp+lParam]
.text$mn:0000BD76                 push    eax             ; lParam
.text$mn:0000BD77                 push    3               ; wParam
.text$mn:0000BD79                 push    1102h           ; Msg
.text$mn:0000BD7E                 mov     ecx, [ebp+var_4]
.text$mn:0000BD81                 mov     edx, [ecx+0Ch]
.text$mn:0000BD84                 push    edx             ; hWnd
.text$mn:0000BD85                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000BD8B                 mov     esp, ebp
.text$mn:0000BD8D                 pop     ebp
.text$mn:0000BD8E                 retn    4
.text$mn:0000BD8E ?toggleExpandCollapse@TreeView@@QBEXPAU_TREEITEM@@@Z endp
.text$mn:0000BD8E
.text$mn:0000BD8E ; ---------------------------------------------------------------------------
.text$mn:0000BD91                 align 4
.text$mn:0000BD91 _text$mn        ends
.text$mn:0000BD91
.text$mn:0000BD94 ; ===========================================================================
.text$mn:0000BD94
.text$mn:0000BD94 ; Segment type: Pure code
.text$mn:0000BD94 ; Segment permissions: Read/Execute
.text$mn:0000BD94 _text$mn        segment para public 'CODE' use32
.text$mn:0000BD94                 assume cs:_text$mn
.text$mn:0000BD94                 ;org 0BD94h
.text$mn:0000BD94 ; COMDAT (pick any)
.text$mn:0000BD94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BD94
.text$mn:0000BD94 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BD94
.text$mn:0000BD94 ; Attributes: bp-based frame
.text$mn:0000BD94
.text$mn:0000BD94 ; int __thiscall std::error_code::value(std::error_code *__hidden this)
.text$mn:0000BD94                 public ?value@error_code@std@@QBEHXZ
.text$mn:0000BD94 ?value@error_code@std@@QBEHXZ proc near ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+24p
.text$mn:0000BD94
.text$mn:0000BD94 var_4           = dword ptr -4
.text$mn:0000BD94
.text$mn:0000BD94                 push    ebp
.text$mn:0000BD95                 mov     ebp, esp
.text$mn:0000BD97                 push    ecx
.text$mn:0000BD98                 mov     [ebp+var_4], ecx
.text$mn:0000BD9B                 mov     eax, [ebp+var_4]
.text$mn:0000BD9E                 mov     eax, [eax]
.text$mn:0000BDA0                 mov     esp, ebp
.text$mn:0000BDA2                 pop     ebp
.text$mn:0000BDA3                 retn
.text$mn:0000BDA3 ?value@error_code@std@@QBEHXZ endp
.text$mn:0000BDA3
.text$mn:0000BDA3 _text$mn        ends
.text$mn:0000BDA3
.text$mn:0000BDA4 ; ===========================================================================
.text$mn:0000BDA4
.text$mn:0000BDA4 ; Segment type: Pure code
.text$mn:0000BDA4 ; Segment permissions: Read/Execute
.text$mn:0000BDA4 _text$mn        segment para public 'CODE' use32
.text$mn:0000BDA4                 assume cs:_text$mn
.text$mn:0000BDA4                 ;org 0BDA4h
.text$mn:0000BDA4 ; COMDAT (pick any)
.text$mn:0000BDA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BDA4
.text$mn:0000BDA4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BDA4
.text$mn:0000BDA4 ; Attributes: bp-based frame
.text$mn:0000BDA4
.text$mn:0000BDA4 ; int __thiscall std::error_condition::value(std::error_condition *__hidden this)
.text$mn:0000BDA4                 public ?value@error_condition@std@@QBEHXZ
.text$mn:0000BDA4 ?value@error_condition@std@@QBEHXZ proc near
.text$mn:0000BDA4                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+2Cp
.text$mn:0000BDA4                                         ; std::error_condition::operator==(std::error_condition const &)+36p
.text$mn:0000BDA4
.text$mn:0000BDA4 var_4           = dword ptr -4
.text$mn:0000BDA4
.text$mn:0000BDA4                 push    ebp
.text$mn:0000BDA5                 mov     ebp, esp
.text$mn:0000BDA7                 push    ecx
.text$mn:0000BDA8                 mov     [ebp+var_4], ecx
.text$mn:0000BDAB                 mov     eax, [ebp+var_4]
.text$mn:0000BDAE                 mov     eax, [eax]
.text$mn:0000BDB0                 mov     esp, ebp
.text$mn:0000BDB2                 pop     ebp
.text$mn:0000BDB3                 retn
.text$mn:0000BDB3 ?value@error_condition@std@@QBEHXZ endp
.text$mn:0000BDB3
.text$mn:0000BDB3 _text$mn        ends
.text$mn:0000BDB3
.text$mn:0000BDB4 ; ===========================================================================
.text$mn:0000BDB4
.text$mn:0000BDB4 ; Segment type: Pure code
.text$mn:0000BDB4 ; Segment permissions: Read/Execute
.text$mn:0000BDB4 _text$mn        segment para public 'CODE' use32
.text$mn:0000BDB4                 assume cs:_text$mn
.text$mn:0000BDB4                 ;org 0BDB4h
.text$mn:0000BDB4 ; COMDAT (pick any)
.text$mn:0000BDB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BDB4
.text$mn:0000BDB4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BDB4
.text$mn:0000BDB4 ; Attributes: bp-based frame
.text$mn:0000BDB4
.text$mn:0000BDB4                 public _hypot
.text$mn:0000BDB4 _hypot          proc near
.text$mn:0000BDB4
.text$mn:0000BDB4 var_10          = qword ptr -10h
.text$mn:0000BDB4 var_8           = qword ptr -8
.text$mn:0000BDB4 arg_0           = qword ptr  8
.text$mn:0000BDB4 arg_8           = qword ptr  10h
.text$mn:0000BDB4
.text$mn:0000BDB4                 push    ebp
.text$mn:0000BDB5                 mov     ebp, esp
.text$mn:0000BDB7                 sub     esp, 8
.text$mn:0000BDBA                 movsd   xmm0, [ebp+arg_8]
.text$mn:0000BDBF                 movsd   [esp+8+var_8], xmm0
.text$mn:0000BDC4                 sub     esp, 8
.text$mn:0000BDC7                 movsd   xmm0, [ebp+arg_0]
.text$mn:0000BDCC                 movsd   [esp+10h+var_10], xmm0
.text$mn:0000BDD1                 call    __hypot
.text$mn:0000BDD6                 add     esp, 10h
.text$mn:0000BDD9                 pop     ebp
.text$mn:0000BDDA                 retn
.text$mn:0000BDDA _hypot          endp
.text$mn:0000BDDA
.text$mn:0000BDDA ; ---------------------------------------------------------------------------
.text$mn:0000BDDB                 align 4
.text$mn:0000BDDB _text$mn        ends
.text$mn:0000BDDB
.text$mn:0000BDDC ; ===========================================================================
.text$mn:0000BDDC
.text$mn:0000BDDC ; Segment type: Pure code
.text$mn:0000BDDC ; Segment permissions: Read/Execute
.text$mn:0000BDDC _text$mn        segment para public 'CODE' use32
.text$mn:0000BDDC                 assume cs:_text$mn
.text$mn:0000BDDC                 ;org 0BDDCh
.text$mn:0000BDDC ; COMDAT (pick any)
.text$mn:0000BDDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BDDC
.text$mn:0000BDDC ; =============== S U B R O U T I N E =======================================
.text$mn:0000BDDC
.text$mn:0000BDDC ; Attributes: bp-based frame
.text$mn:0000BDDC
.text$mn:0000BDDC                 public _wmemchr
.text$mn:0000BDDC _wmemchr        proc near               ; CODE XREF: std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)+22p
.text$mn:0000BDDC
.text$mn:0000BDDC arg_0           = dword ptr  8
.text$mn:0000BDDC arg_4           = word ptr  0Ch
.text$mn:0000BDDC arg_8           = dword ptr  10h
.text$mn:0000BDDC
.text$mn:0000BDDC                 push    ebp
.text$mn:0000BDDD                 mov     ebp, esp
.text$mn:0000BDDF                 jmp     short loc_BDF3
.text$mn:0000BDE1 ; ---------------------------------------------------------------------------
.text$mn:0000BDE1
.text$mn:0000BDE1 loc_BDE1:                               ; CODE XREF: _wmemchr:loc_BE0Cj
.text$mn:0000BDE1                 mov     eax, [ebp+arg_0]
.text$mn:0000BDE4                 add     eax, 2
.text$mn:0000BDE7                 mov     [ebp+arg_0], eax
.text$mn:0000BDEA                 mov     ecx, [ebp+arg_8]
.text$mn:0000BDED                 sub     ecx, 1
.text$mn:0000BDF0                 mov     [ebp+arg_8], ecx
.text$mn:0000BDF3
.text$mn:0000BDF3 loc_BDF3:                               ; CODE XREF: _wmemchr+3j
.text$mn:0000BDF3                 cmp     [ebp+arg_8], 0
.text$mn:0000BDF7                 jbe     short loc_BE0E
.text$mn:0000BDF9                 mov     edx, [ebp+arg_0]
.text$mn:0000BDFC                 movzx   eax, word ptr [edx]
.text$mn:0000BDFF                 movzx   ecx, [ebp+arg_4]
.text$mn:0000BE03                 cmp     eax, ecx
.text$mn:0000BE05                 jnz     short loc_BE0C
.text$mn:0000BE07                 mov     eax, [ebp+arg_0]
.text$mn:0000BE0A                 jmp     short loc_BE10
.text$mn:0000BE0C ; ---------------------------------------------------------------------------
.text$mn:0000BE0C
.text$mn:0000BE0C loc_BE0C:                               ; CODE XREF: _wmemchr+29j
.text$mn:0000BE0C                 jmp     short loc_BDE1
.text$mn:0000BE0E ; ---------------------------------------------------------------------------
.text$mn:0000BE0E
.text$mn:0000BE0E loc_BE0E:                               ; CODE XREF: _wmemchr+1Bj
.text$mn:0000BE0E                 xor     eax, eax
.text$mn:0000BE10
.text$mn:0000BE10 loc_BE10:                               ; CODE XREF: _wmemchr+2Ej
.text$mn:0000BE10                 pop     ebp
.text$mn:0000BE11                 retn
.text$mn:0000BE11 _wmemchr        endp
.text$mn:0000BE11
.text$mn:0000BE11 ; ---------------------------------------------------------------------------
.text$mn:0000BE12                 align 4
.text$mn:0000BE12 _text$mn        ends
.text$mn:0000BE12
.text$mn:0000BE14 ; ===========================================================================
.text$mn:0000BE14
.text$mn:0000BE14 ; Segment type: Pure code
.text$mn:0000BE14 ; Segment permissions: Read/Execute
.text$mn:0000BE14 _text$mn        segment para public 'CODE' use32
.text$mn:0000BE14                 assume cs:_text$mn
.text$mn:0000BE14                 ;org 0BE14h
.text$mn:0000BE14 ; COMDAT (pick any)
.text$mn:0000BE14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BE14
.text$mn:0000BE14 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BE14
.text$mn:0000BE14 ; Attributes: bp-based frame
.text$mn:0000BE14
.text$mn:0000BE14                 public _wmemcmp
.text$mn:0000BE14 _wmemcmp        proc near               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+1Fp
.text$mn:0000BE14
.text$mn:0000BE14 var_4           = dword ptr -4
.text$mn:0000BE14 arg_0           = dword ptr  8
.text$mn:0000BE14 arg_4           = dword ptr  0Ch
.text$mn:0000BE14 arg_8           = dword ptr  10h
.text$mn:0000BE14
.text$mn:0000BE14                 push    ebp
.text$mn:0000BE15                 mov     ebp, esp
.text$mn:0000BE17                 push    ecx
.text$mn:0000BE18                 jmp     short loc_BE35
.text$mn:0000BE1A ; ---------------------------------------------------------------------------
.text$mn:0000BE1A
.text$mn:0000BE1A loc_BE1A:                               ; CODE XREF: _wmemcmp:loc_BE70j
.text$mn:0000BE1A                 mov     eax, [ebp+arg_0]
.text$mn:0000BE1D                 add     eax, 2
.text$mn:0000BE20                 mov     [ebp+arg_0], eax
.text$mn:0000BE23                 mov     ecx, [ebp+arg_4]
.text$mn:0000BE26                 add     ecx, 2
.text$mn:0000BE29                 mov     [ebp+arg_4], ecx
.text$mn:0000BE2C                 mov     edx, [ebp+arg_8]
.text$mn:0000BE2F                 sub     edx, 1
.text$mn:0000BE32                 mov     [ebp+arg_8], edx
.text$mn:0000BE35
.text$mn:0000BE35 loc_BE35:                               ; CODE XREF: _wmemcmp+4j
.text$mn:0000BE35                 cmp     [ebp+arg_8], 0
.text$mn:0000BE39                 jbe     short loc_BE72
.text$mn:0000BE3B                 mov     eax, [ebp+arg_0]
.text$mn:0000BE3E                 movzx   ecx, word ptr [eax]
.text$mn:0000BE41                 mov     edx, [ebp+arg_4]
.text$mn:0000BE44                 movzx   eax, word ptr [edx]
.text$mn:0000BE47                 cmp     ecx, eax
.text$mn:0000BE49                 jz      short loc_BE70
.text$mn:0000BE4B                 mov     ecx, [ebp+arg_0]
.text$mn:0000BE4E                 movzx   edx, word ptr [ecx]
.text$mn:0000BE51                 mov     eax, [ebp+arg_4]
.text$mn:0000BE54                 movzx   ecx, word ptr [eax]
.text$mn:0000BE57                 cmp     edx, ecx
.text$mn:0000BE59                 jge     short loc_BE64
.text$mn:0000BE5B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000BE62                 jmp     short loc_BE6B
.text$mn:0000BE64 ; ---------------------------------------------------------------------------
.text$mn:0000BE64
.text$mn:0000BE64 loc_BE64:                               ; CODE XREF: _wmemcmp+45j
.text$mn:0000BE64                 mov     [ebp+var_4], 1
.text$mn:0000BE6B
.text$mn:0000BE6B loc_BE6B:                               ; CODE XREF: _wmemcmp+4Ej
.text$mn:0000BE6B                 mov     eax, [ebp+var_4]
.text$mn:0000BE6E                 jmp     short loc_BE74
.text$mn:0000BE70 ; ---------------------------------------------------------------------------
.text$mn:0000BE70
.text$mn:0000BE70 loc_BE70:                               ; CODE XREF: _wmemcmp+35j
.text$mn:0000BE70                 jmp     short loc_BE1A
.text$mn:0000BE72 ; ---------------------------------------------------------------------------
.text$mn:0000BE72
.text$mn:0000BE72 loc_BE72:                               ; CODE XREF: _wmemcmp+25j
.text$mn:0000BE72                 xor     eax, eax
.text$mn:0000BE74
.text$mn:0000BE74 loc_BE74:                               ; CODE XREF: _wmemcmp+5Aj
.text$mn:0000BE74                 mov     esp, ebp
.text$mn:0000BE76                 pop     ebp
.text$mn:0000BE77                 retn
.text$mn:0000BE77 _wmemcmp        endp
.text$mn:0000BE77
.text$mn:0000BE77 _text$mn        ends
.text$mn:0000BE77
.text$mn:0000BE78 ; ===========================================================================
.text$mn:0000BE78
.text$mn:0000BE78 ; Segment type: Pure code
.text$mn:0000BE78 ; Segment permissions: Read/Execute
.text$mn:0000BE78 _text$mn        segment para public 'CODE' use32
.text$mn:0000BE78                 assume cs:_text$mn
.text$mn:0000BE78                 ;org 0BE78h
.text$mn:0000BE78 ; COMDAT (pick any)
.text$mn:0000BE78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BE78
.text$mn:0000BE78 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BE78
.text$mn:0000BE78 ; Attributes: bp-based frame
.text$mn:0000BE78
.text$mn:0000BE78 ; int __cdecl wmemcpy(void *Dst, void *Src, int)
.text$mn:0000BE78                 public _wmemcpy
.text$mn:0000BE78 _wmemcpy        proc near               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:0000BE78
.text$mn:0000BE78 Dst             = dword ptr  8
.text$mn:0000BE78 Src             = dword ptr  0Ch
.text$mn:0000BE78 arg_8           = dword ptr  10h
.text$mn:0000BE78
.text$mn:0000BE78                 push    ebp
.text$mn:0000BE79                 mov     ebp, esp
.text$mn:0000BE7B                 mov     eax, [ebp+arg_8]
.text$mn:0000BE7E                 shl     eax, 1
.text$mn:0000BE80                 push    eax             ; Size
.text$mn:0000BE81                 mov     ecx, [ebp+Src]
.text$mn:0000BE84                 push    ecx             ; Src
.text$mn:0000BE85                 mov     edx, [ebp+Dst]
.text$mn:0000BE88                 push    edx             ; Dst
.text$mn:0000BE89                 call    _memcpy
.text$mn:0000BE8E                 add     esp, 0Ch
.text$mn:0000BE91                 pop     ebp
.text$mn:0000BE92                 retn
.text$mn:0000BE92 _wmemcpy        endp
.text$mn:0000BE92
.text$mn:0000BE92 ; ---------------------------------------------------------------------------
.text$mn:0000BE93                 align 4
.text$mn:0000BE93 _text$mn        ends
.text$mn:0000BE93
.text$mn:0000BE94 ; ===========================================================================
.text$mn:0000BE94
.text$mn:0000BE94 ; Segment type: Pure code
.text$mn:0000BE94 ; Segment permissions: Read/Execute
.text$mn:0000BE94 _text$mn        segment para public 'CODE' use32
.text$mn:0000BE94                 assume cs:_text$mn
.text$mn:0000BE94                 ;org 0BE94h
.text$mn:0000BE94 ; COMDAT (pick any)
.text$mn:0000BE94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BE94
.text$mn:0000BE94 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BE94
.text$mn:0000BE94 ; Attributes: bp-based frame
.text$mn:0000BE94
.text$mn:0000BE94 ; int __cdecl wmemmove(void *Dst, void *Src, int)
.text$mn:0000BE94                 public _wmemmove
.text$mn:0000BE94 _wmemmove       proc near               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:0000BE94
.text$mn:0000BE94 Dst             = dword ptr  8
.text$mn:0000BE94 Src             = dword ptr  0Ch
.text$mn:0000BE94 arg_8           = dword ptr  10h
.text$mn:0000BE94
.text$mn:0000BE94                 push    ebp
.text$mn:0000BE95                 mov     ebp, esp
.text$mn:0000BE97                 mov     eax, [ebp+arg_8]
.text$mn:0000BE9A                 shl     eax, 1
.text$mn:0000BE9C                 push    eax             ; Size
.text$mn:0000BE9D                 mov     ecx, [ebp+Src]
.text$mn:0000BEA0                 push    ecx             ; Src
.text$mn:0000BEA1                 mov     edx, [ebp+Dst]
.text$mn:0000BEA4                 push    edx             ; Dst
.text$mn:0000BEA5                 call    _memmove
.text$mn:0000BEAA                 add     esp, 0Ch
.text$mn:0000BEAD                 pop     ebp
.text$mn:0000BEAE                 retn
.text$mn:0000BEAE _wmemmove       endp
.text$mn:0000BEAE
.text$mn:0000BEAE ; ---------------------------------------------------------------------------
.text$mn:0000BEAF                 align 10h
.text$mn:0000BEAF _text$mn        ends
.text$mn:0000BEAF
.xdata$x:0000BEB0 ; ===========================================================================
.xdata$x:0000BEB0
.xdata$x:0000BEB0 ; Segment type: Pure data
.xdata$x:0000BEB0 ; Segment permissions: Read
.xdata$x:0000BEB0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BEB0                 assume cs:_xdata$x
.xdata$x:0000BEB0                 ;org 0BEB0h
.xdata$x:0000BEB0 ; COMDAT (pick associative to section at 8DBC)
.xdata$x:0000BEB0 __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ db 0FFh
.xdata$x:0000BEB0                                         ; DATA XREF: .xdata$x:0000BEC0o
.xdata$x:0000BEB1                 db 0FFh
.xdata$x:0000BEB2                 db 0FFh
.xdata$x:0000BEB3                 db 0FFh
.xdata$x:0000BEB4                 dd offset __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
.xdata$x:0000BEB8 __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ db  22h ; "
.xdata$x:0000BEB8                                         ; DATA XREF: __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ+11o
.xdata$x:0000BEB9                 db    5
.xdata$x:0000BEBA                 db  93h ; ô
.xdata$x:0000BEBB                 db  19h
.xdata$x:0000BEBC                 db    1
.xdata$x:0000BEBD                 db    0
.xdata$x:0000BEBE                 db    0
.xdata$x:0000BEBF                 db    0
.xdata$x:0000BEC0                 dd offset __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
.xdata$x:0000BEC4                 db    0
.xdata$x:0000BEC5                 db    0
.xdata$x:0000BEC6                 db    0
.xdata$x:0000BEC7                 db    0
.xdata$x:0000BEC8                 db    0
.xdata$x:0000BEC9                 db    0
.xdata$x:0000BECA                 db    0
.xdata$x:0000BECB                 db    0
.xdata$x:0000BECC                 db    0
.xdata$x:0000BECD                 db    0
.xdata$x:0000BECE                 db    0
.xdata$x:0000BECF                 db    0
.xdata$x:0000BED0                 db    0
.xdata$x:0000BED1                 db    0
.xdata$x:0000BED2                 db    0
.xdata$x:0000BED3                 db    0
.xdata$x:0000BED4                 db    0
.xdata$x:0000BED5                 db    0
.xdata$x:0000BED6                 db    0
.xdata$x:0000BED7                 db    0
.xdata$x:0000BED8                 db    0
.xdata$x:0000BED9                 db    0
.xdata$x:0000BEDA                 db    0
.xdata$x:0000BEDB                 db    0
.xdata$x:0000BEDB _xdata$x        ends
.xdata$x:0000BEDB
.xdata$x:0000BEDC ; ===========================================================================
.xdata$x:0000BEDC
.xdata$x:0000BEDC ; Segment type: Pure data
.xdata$x:0000BEDC ; Segment permissions: Read
.xdata$x:0000BEDC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BEDC                 assume cs:_xdata$x
.xdata$x:0000BEDC                 ;org 0BEDCh
.xdata$x:0000BEDC ; COMDAT (pick associative to section at 79FC)
.xdata$x:0000BEDC __unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z db 0FFh
.xdata$x:0000BEDC                                         ; DATA XREF: .xdata$x:0000BEECo
.xdata$x:0000BEDD                 db 0FFh
.xdata$x:0000BEDE                 db 0FFh
.xdata$x:0000BEDF                 db 0FFh
.xdata$x:0000BEE0                 dd offset __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0
.xdata$x:0000BEE4 __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z db  22h ; "
.xdata$x:0000BEE4                                         ; DATA XREF: __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z+11o
.xdata$x:0000BEE5                 db    5
.xdata$x:0000BEE6                 db  93h ; ô
.xdata$x:0000BEE7                 db  19h
.xdata$x:0000BEE8                 db    1
.xdata$x:0000BEE9                 db    0
.xdata$x:0000BEEA                 db    0
.xdata$x:0000BEEB                 db    0
.xdata$x:0000BEEC                 dd offset __unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.xdata$x:0000BEF0                 db    0
.xdata$x:0000BEF1                 db    0
.xdata$x:0000BEF2                 db    0
.xdata$x:0000BEF3                 db    0
.xdata$x:0000BEF4                 db    0
.xdata$x:0000BEF5                 db    0
.xdata$x:0000BEF6                 db    0
.xdata$x:0000BEF7                 db    0
.xdata$x:0000BEF8                 db    0
.xdata$x:0000BEF9                 db    0
.xdata$x:0000BEFA                 db    0
.xdata$x:0000BEFB                 db    0
.xdata$x:0000BEFC                 db    0
.xdata$x:0000BEFD                 db    0
.xdata$x:0000BEFE                 db    0
.xdata$x:0000BEFF                 db    0
.xdata$x:0000BF00                 db    0
.xdata$x:0000BF01                 db    0
.xdata$x:0000BF02                 db    0
.xdata$x:0000BF03                 db    0
.xdata$x:0000BF04                 db    0
.xdata$x:0000BF05                 db    0
.xdata$x:0000BF06                 db    0
.xdata$x:0000BF07                 db    0
.xdata$x:0000BF07 _xdata$x        ends
.xdata$x:0000BF07
.xdata$x:0000BF08 ; ===========================================================================
.xdata$x:0000BF08
.xdata$x:0000BF08 ; Segment type: Pure data
.xdata$x:0000BF08 ; Segment permissions: Read
.xdata$x:0000BF08 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BF08                 assume cs:_xdata$x
.xdata$x:0000BF08                 ;org 0BF08h
.xdata$x:0000BF08 ; COMDAT (pick associative to section at 772C)
.xdata$x:0000BF08 __unwindtable$??1_Iterator_base12@std@@QAE@XZ db 0FFh
.xdata$x:0000BF08                                         ; DATA XREF: .xdata$x:0000BF18o
.xdata$x:0000BF09                 db 0FFh
.xdata$x:0000BF0A                 db 0FFh
.xdata$x:0000BF0B                 db 0FFh
.xdata$x:0000BF0C                 dd offset __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0
.xdata$x:0000BF10 __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ db  22h ; "
.xdata$x:0000BF10                                         ; DATA XREF: __ehhandler$??1_Iterator_base12@std@@QAE@XZ+11o
.xdata$x:0000BF11                 db    5
.xdata$x:0000BF12                 db  93h ; ô
.xdata$x:0000BF13                 db  19h
.xdata$x:0000BF14                 db    1
.xdata$x:0000BF15                 db    0
.xdata$x:0000BF16                 db    0
.xdata$x:0000BF17                 db    0
.xdata$x:0000BF18                 dd offset __unwindtable$??1_Iterator_base12@std@@QAE@XZ
.xdata$x:0000BF1C                 db    0
.xdata$x:0000BF1D                 db    0
.xdata$x:0000BF1E                 db    0
.xdata$x:0000BF1F                 db    0
.xdata$x:0000BF20                 db    0
.xdata$x:0000BF21                 db    0
.xdata$x:0000BF22                 db    0
.xdata$x:0000BF23                 db    0
.xdata$x:0000BF24                 db    0
.xdata$x:0000BF25                 db    0
.xdata$x:0000BF26                 db    0
.xdata$x:0000BF27                 db    0
.xdata$x:0000BF28                 db    0
.xdata$x:0000BF29                 db    0
.xdata$x:0000BF2A                 db    0
.xdata$x:0000BF2B                 db    0
.xdata$x:0000BF2C                 db    0
.xdata$x:0000BF2D                 db    0
.xdata$x:0000BF2E                 db    0
.xdata$x:0000BF2F                 db    0
.xdata$x:0000BF30                 db    0
.xdata$x:0000BF31                 db    0
.xdata$x:0000BF32                 db    0
.xdata$x:0000BF33                 db    0
.xdata$x:0000BF33 _xdata$x        ends
.xdata$x:0000BF33
.xdata$x:0000BF34 ; ===========================================================================
.xdata$x:0000BF34
.xdata$x:0000BF34 ; Segment type: Pure data
.xdata$x:0000BF34 ; Segment permissions: Read
.xdata$x:0000BF34 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BF34                 assume cs:_xdata$x
.xdata$x:0000BF34                 ;org 0BF34h
.xdata$x:0000BF34 ; COMDAT (pick associative to section at 80F0)
.xdata$x:0000BF34 __unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z db 0FFh
.xdata$x:0000BF34                                         ; DATA XREF: .xdata$x:0000BF4Co
.xdata$x:0000BF35                 db 0FFh
.xdata$x:0000BF36                 db 0FFh
.xdata$x:0000BF37                 db 0FFh
.xdata$x:0000BF38                 dd offset __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0
.xdata$x:0000BF3C                 db 0FFh
.xdata$x:0000BF3D                 db 0FFh
.xdata$x:0000BF3E                 db 0FFh
.xdata$x:0000BF3F                 db 0FFh
.xdata$x:0000BF40                 dd offset __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1
.xdata$x:0000BF44 __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z db  22h ; "
.xdata$x:0000BF44                                         ; DATA XREF: __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z+11o
.xdata$x:0000BF45                 db    5
.xdata$x:0000BF46                 db  93h ; ô
.xdata$x:0000BF47                 db  19h
.xdata$x:0000BF48                 db    2
.xdata$x:0000BF49                 db    0
.xdata$x:0000BF4A                 db    0
.xdata$x:0000BF4B                 db    0
.xdata$x:0000BF4C                 dd offset __unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.xdata$x:0000BF50                 db    0
.xdata$x:0000BF51                 db    0
.xdata$x:0000BF52                 db    0
.xdata$x:0000BF53                 db    0
.xdata$x:0000BF54                 db    0
.xdata$x:0000BF55                 db    0
.xdata$x:0000BF56                 db    0
.xdata$x:0000BF57                 db    0
.xdata$x:0000BF58                 db    0
.xdata$x:0000BF59                 db    0
.xdata$x:0000BF5A                 db    0
.xdata$x:0000BF5B                 db    0
.xdata$x:0000BF5C                 db    0
.xdata$x:0000BF5D                 db    0
.xdata$x:0000BF5E                 db    0
.xdata$x:0000BF5F                 db    0
.xdata$x:0000BF60                 db    0
.xdata$x:0000BF61                 db    0
.xdata$x:0000BF62                 db    0
.xdata$x:0000BF63                 db    0
.xdata$x:0000BF64                 db    0
.xdata$x:0000BF65                 db    0
.xdata$x:0000BF66                 db    0
.xdata$x:0000BF67                 db    0
.xdata$x:0000BF67 _xdata$x        ends
.xdata$x:0000BF67
.xdata$x:0000BF68 ; ===========================================================================
.xdata$x:0000BF68
.xdata$x:0000BF68 ; Segment type: Pure data
.xdata$x:0000BF68 ; Segment permissions: Read
.xdata$x:0000BF68 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BF68                 assume cs:_xdata$x
.xdata$x:0000BF68                 ;org 0BF68h
.xdata$x:0000BF68 ; COMDAT (pick associative to section at 64A8)
.xdata$x:0000BF68 __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000BF68                                         ; DATA XREF: .xdata$x:0000BF78o
.xdata$x:0000BF69                 db 0FFh
.xdata$x:0000BF6A                 db 0FFh
.xdata$x:0000BF6B                 db 0FFh
.xdata$x:0000BF6C                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:0000BF70 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000BF70                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:0000BF71                 db    5
.xdata$x:0000BF72                 db  93h ; ô
.xdata$x:0000BF73                 db  19h
.xdata$x:0000BF74                 db    1
.xdata$x:0000BF75                 db    0
.xdata$x:0000BF76                 db    0
.xdata$x:0000BF77                 db    0
.xdata$x:0000BF78                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:0000BF7C                 db    0
.xdata$x:0000BF7D                 db    0
.xdata$x:0000BF7E                 db    0
.xdata$x:0000BF7F                 db    0
.xdata$x:0000BF80                 db    0
.xdata$x:0000BF81                 db    0
.xdata$x:0000BF82                 db    0
.xdata$x:0000BF83                 db    0
.xdata$x:0000BF84                 db    0
.xdata$x:0000BF85                 db    0
.xdata$x:0000BF86                 db    0
.xdata$x:0000BF87                 db    0
.xdata$x:0000BF88                 db    0
.xdata$x:0000BF89                 db    0
.xdata$x:0000BF8A                 db    0
.xdata$x:0000BF8B                 db    0
.xdata$x:0000BF8C                 db    0
.xdata$x:0000BF8D                 db    0
.xdata$x:0000BF8E                 db    0
.xdata$x:0000BF8F                 db    0
.xdata$x:0000BF90                 db    0
.xdata$x:0000BF91                 db    0
.xdata$x:0000BF92                 db    0
.xdata$x:0000BF93                 db    0
.xdata$x:0000BF93 _xdata$x        ends
.xdata$x:0000BF93
.xdata$x:0000BF94 ; ===========================================================================
.xdata$x:0000BF94
.xdata$x:0000BF94 ; Segment type: Pure data
.xdata$x:0000BF94 ; Segment permissions: Read
.xdata$x:0000BF94 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BF94                 assume cs:_xdata$x
.xdata$x:0000BF94                 ;org 0BF94h
.xdata$x:0000BF94 ; COMDAT (pick associative to section at 712C)
.xdata$x:0000BF94 __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000BF94                                         ; DATA XREF: .xdata$x:0000BFA4o
.xdata$x:0000BF95                 db 0FFh
.xdata$x:0000BF96                 db 0FFh
.xdata$x:0000BF97                 db 0FFh
.xdata$x:0000BF98                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:0000BF9C __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000BF9C                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:0000BF9D                 db    5
.xdata$x:0000BF9E                 db  93h ; ô
.xdata$x:0000BF9F                 db  19h
.xdata$x:0000BFA0                 db    1
.xdata$x:0000BFA1                 db    0
.xdata$x:0000BFA2                 db    0
.xdata$x:0000BFA3                 db    0
.xdata$x:0000BFA4                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:0000BFA8                 align 20h
.xdata$x:0000BFA8 _xdata$x        ends
.xdata$x:0000BFA8
.xdata$x:0000BFC0 ; ===========================================================================
.xdata$x:0000BFC0
.xdata$x:0000BFC0 ; Segment type: Pure data
.xdata$x:0000BFC0 ; Segment permissions: Read
.xdata$x:0000BFC0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BFC0                 assume cs:_xdata$x
.xdata$x:0000BFC0                 ;org 0BFC0h
.xdata$x:0000BFC0 ; COMDAT (pick associative to section at 61AC)
.xdata$x:0000BFC0 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db 0FFh
.xdata$x:0000BFC0                                         ; DATA XREF: .xdata$x:0000BFD0o
.xdata$x:0000BFC1                 db 0FFh
.xdata$x:0000BFC2                 db 0FFh
.xdata$x:0000BFC3                 db 0FFh
.xdata$x:0000BFC4                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
.xdata$x:0000BFC8 __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db  22h ; "
.xdata$x:0000BFC8                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z+11o
.xdata$x:0000BFC9                 db    5
.xdata$x:0000BFCA                 db  93h ; ô
.xdata$x:0000BFCB                 db  19h
.xdata$x:0000BFCC                 db    1
.xdata$x:0000BFCD                 db    0
.xdata$x:0000BFCE                 db    0
.xdata$x:0000BFCF                 db    0
.xdata$x:0000BFD0                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.xdata$x:0000BFD4                 db    0
.xdata$x:0000BFD5                 db    0
.xdata$x:0000BFD6                 db    0
.xdata$x:0000BFD7                 db    0
.xdata$x:0000BFD8                 db    0
.xdata$x:0000BFD9                 db    0
.xdata$x:0000BFDA                 db    0
.xdata$x:0000BFDB                 db    0
.xdata$x:0000BFDC                 db    0
.xdata$x:0000BFDD                 db    0
.xdata$x:0000BFDE                 db    0
.xdata$x:0000BFDF                 db    0
.xdata$x:0000BFE0                 db    0
.xdata$x:0000BFE1                 db    0
.xdata$x:0000BFE2                 db    0
.xdata$x:0000BFE3                 db    0
.xdata$x:0000BFE4                 db    0
.xdata$x:0000BFE5                 db    0
.xdata$x:0000BFE6                 db    0
.xdata$x:0000BFE7                 db    0
.xdata$x:0000BFE8                 db    0
.xdata$x:0000BFE9                 db    0
.xdata$x:0000BFEA                 db    0
.xdata$x:0000BFEB                 db    0
.xdata$x:0000BFEB _xdata$x        ends
.xdata$x:0000BFEB
.xdata$x:0000BFEC ; ===========================================================================
.xdata$x:0000BFEC
.xdata$x:0000BFEC ; Segment type: Pure data
.xdata$x:0000BFEC ; Segment permissions: Read
.xdata$x:0000BFEC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000BFEC                 assume cs:_xdata$x
.xdata$x:0000BFEC                 ;org 0BFECh
.xdata$x:0000BFEC ; COMDAT (pick associative to section at 6F5C)
.xdata$x:0000BFEC __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000BFEC                                         ; DATA XREF: .xdata$x:0000BFFCo
.xdata$x:0000BFED                 db 0FFh
.xdata$x:0000BFEE                 db 0FFh
.xdata$x:0000BFEF                 db 0FFh
.xdata$x:0000BFF0                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000BFF4 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000BFF4                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000BFF5                 db    5
.xdata$x:0000BFF6                 db  93h ; ô
.xdata$x:0000BFF7                 db  19h
.xdata$x:0000BFF8                 db    1
.xdata$x:0000BFF9                 db    0
.xdata$x:0000BFFA                 db    0
.xdata$x:0000BFFB                 db    0
.xdata$x:0000BFFC                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.xdata$x:0000C000                 db    0
.xdata$x:0000C001                 db    0
.xdata$x:0000C002                 db    0
.xdata$x:0000C003                 db    0
.xdata$x:0000C004                 db    0
.xdata$x:0000C005                 db    0
.xdata$x:0000C006                 db    0
.xdata$x:0000C007                 db    0
.xdata$x:0000C008                 db    0
.xdata$x:0000C009                 db    0
.xdata$x:0000C00A                 db    0
.xdata$x:0000C00B                 db    0
.xdata$x:0000C00C                 db    0
.xdata$x:0000C00D                 db    0
.xdata$x:0000C00E                 db    0
.xdata$x:0000C00F                 db    0
.xdata$x:0000C010                 db    0
.xdata$x:0000C011                 db    0
.xdata$x:0000C012                 db    0
.xdata$x:0000C013                 db    0
.xdata$x:0000C014                 db    0
.xdata$x:0000C015                 db    0
.xdata$x:0000C016                 db    0
.xdata$x:0000C017                 db    0
.xdata$x:0000C017 _xdata$x        ends
.xdata$x:0000C017
.xdata$x:0000C018 ; ===========================================================================
.xdata$x:0000C018
.xdata$x:0000C018 ; Segment type: Pure data
.xdata$x:0000C018 ; Segment permissions: Read
.xdata$x:0000C018 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C018                 assume cs:_xdata$x
.xdata$x:0000C018                 ;org 0C018h
.xdata$x:0000C018 ; COMDAT (pick associative to section at 67B8)
.xdata$x:0000C018 __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db 0FFh
.xdata$x:0000C018                                         ; DATA XREF: .xdata$x:0000C028o
.xdata$x:0000C019                 db 0FFh
.xdata$x:0000C01A                 db 0FFh
.xdata$x:0000C01B                 db 0FFh
.xdata$x:0000C01C                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
.xdata$x:0000C020 __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db  22h ; "
.xdata$x:0000C020                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z+11o
.xdata$x:0000C021                 db    5
.xdata$x:0000C022                 db  93h ; ô
.xdata$x:0000C023                 db  19h
.xdata$x:0000C024                 db    1
.xdata$x:0000C025                 db    0
.xdata$x:0000C026                 db    0
.xdata$x:0000C027                 db    0
.xdata$x:0000C028                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.xdata$x:0000C02C                 db    0
.xdata$x:0000C02D                 db    0
.xdata$x:0000C02E                 db    0
.xdata$x:0000C02F                 db    0
.xdata$x:0000C030                 db    0
.xdata$x:0000C031                 db    0
.xdata$x:0000C032                 db    0
.xdata$x:0000C033                 db    0
.xdata$x:0000C034                 db    0
.xdata$x:0000C035                 db    0
.xdata$x:0000C036                 db    0
.xdata$x:0000C037                 db    0
.xdata$x:0000C038                 db    0
.xdata$x:0000C039                 db    0
.xdata$x:0000C03A                 db    0
.xdata$x:0000C03B                 db    0
.xdata$x:0000C03C                 db    0
.xdata$x:0000C03D                 db    0
.xdata$x:0000C03E                 db    0
.xdata$x:0000C03F                 db    0
.xdata$x:0000C040                 db    0
.xdata$x:0000C041                 db    0
.xdata$x:0000C042                 db    0
.xdata$x:0000C043                 db    0
.xdata$x:0000C043 _xdata$x        ends
.xdata$x:0000C043
.xdata$x:0000C044 ; ===========================================================================
.xdata$x:0000C044
.xdata$x:0000C044 ; Segment type: Pure data
.xdata$x:0000C044 ; Segment permissions: Read
.xdata$x:0000C044 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C044                 assume cs:_xdata$x
.xdata$x:0000C044                 ;org 0C044h
.xdata$x:0000C044 ; COMDAT (pick associative to section at 72F4)
.xdata$x:0000C044 __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000C044                                         ; DATA XREF: .xdata$x:0000C054o
.xdata$x:0000C045                 db 0FFh
.xdata$x:0000C046                 db 0FFh
.xdata$x:0000C047                 db 0FFh
.xdata$x:0000C048                 dd offset __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
.xdata$x:0000C04C __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000C04C                                         ; DATA XREF: __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ+11o
.xdata$x:0000C04D                 db    5
.xdata$x:0000C04E                 db  93h ; ô
.xdata$x:0000C04F                 db  19h
.xdata$x:0000C050                 db    1
.xdata$x:0000C051                 db    0
.xdata$x:0000C052                 db    0
.xdata$x:0000C053                 db    0
.xdata$x:0000C054                 dd offset __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.xdata$x:0000C058                 db    0
.xdata$x:0000C059                 db    0
.xdata$x:0000C05A                 db    0
.xdata$x:0000C05B                 db    0
.xdata$x:0000C05C                 db    0
.xdata$x:0000C05D                 db    0
.xdata$x:0000C05E                 db    0
.xdata$x:0000C05F                 db    0
.xdata$x:0000C060                 db    0
.xdata$x:0000C061                 db    0
.xdata$x:0000C062                 db    0
.xdata$x:0000C063                 db    0
.xdata$x:0000C064                 db    0
.xdata$x:0000C065                 db    0
.xdata$x:0000C066                 db    0
.xdata$x:0000C067                 db    0
.xdata$x:0000C068                 db    0
.xdata$x:0000C069                 db    0
.xdata$x:0000C06A                 db    0
.xdata$x:0000C06B                 db    0
.xdata$x:0000C06C                 db    0
.xdata$x:0000C06D                 db    0
.xdata$x:0000C06E                 db    0
.xdata$x:0000C06F                 db    0
.xdata$x:0000C06F _xdata$x        ends
.xdata$x:0000C06F
.xdata$x:0000C070 ; ===========================================================================
.xdata$x:0000C070
.xdata$x:0000C070 ; Segment type: Pure data
.xdata$x:0000C070 ; Segment permissions: Read
.xdata$x:0000C070 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C070                 assume cs:_xdata$x
.xdata$x:0000C070                 ;org 0C070h
.xdata$x:0000C070 ; COMDAT (pick associative to section at 8400)
.xdata$x:0000C070 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 db    0
.xdata$x:0000C070                                         ; DATA XREF: .xdata$x:0000C0F8o
.xdata$x:0000C071                 db    0
.xdata$x:0000C072                 db    0
.xdata$x:0000C073                 db    0
.xdata$x:0000C074                 db    0
.xdata$x:0000C075                 db    0
.xdata$x:0000C076                 db    0
.xdata$x:0000C077                 db    0
.xdata$x:0000C078                 db    0
.xdata$x:0000C079                 db    0
.xdata$x:0000C07A                 db    0
.xdata$x:0000C07B                 db    0
.xdata$x:0000C07C                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.xdata$x:0000C080 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 db    0
.xdata$x:0000C080                                         ; DATA XREF: .xdata$x:0000C0E4o
.xdata$x:0000C081                 db    0
.xdata$x:0000C082                 db    0
.xdata$x:0000C083                 db    0
.xdata$x:0000C084                 db    0
.xdata$x:0000C085                 db    0
.xdata$x:0000C086                 db    0
.xdata$x:0000C087                 db    0
.xdata$x:0000C088                 db    0
.xdata$x:0000C089                 db    0
.xdata$x:0000C08A                 db    0
.xdata$x:0000C08B                 db    0
.xdata$x:0000C08C                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
.xdata$x:0000C090 __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db 0FFh
.xdata$x:0000C090                                         ; DATA XREF: .xdata$x:0000C0B8o
.xdata$x:0000C091                 db 0FFh
.xdata$x:0000C092                 db 0FFh
.xdata$x:0000C093                 db 0FFh
.xdata$x:0000C094                 db    0
.xdata$x:0000C095                 db    0
.xdata$x:0000C096                 db    0
.xdata$x:0000C097                 db    0
.xdata$x:0000C098                 db 0FFh
.xdata$x:0000C099                 db 0FFh
.xdata$x:0000C09A                 db 0FFh
.xdata$x:0000C09B                 db 0FFh
.xdata$x:0000C09C                 db    0
.xdata$x:0000C09D                 db    0
.xdata$x:0000C09E                 db    0
.xdata$x:0000C09F                 db    0
.xdata$x:0000C0A0                 db    1
.xdata$x:0000C0A1                 db    0
.xdata$x:0000C0A2                 db    0
.xdata$x:0000C0A3                 db    0
.xdata$x:0000C0A4                 db    0
.xdata$x:0000C0A5                 db    0
.xdata$x:0000C0A6                 db    0
.xdata$x:0000C0A7                 db    0
.xdata$x:0000C0A8                 db    1
.xdata$x:0000C0A9                 db    0
.xdata$x:0000C0AA                 db    0
.xdata$x:0000C0AB                 db    0
.xdata$x:0000C0AC                 db    0
.xdata$x:0000C0AD                 db    0
.xdata$x:0000C0AE                 db    0
.xdata$x:0000C0AF                 db    0
.xdata$x:0000C0B0 __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:0000C0B0                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z+11o
.xdata$x:0000C0B1                 db    5
.xdata$x:0000C0B2                 db  93h ; ô
.xdata$x:0000C0B3                 db  19h
.xdata$x:0000C0B4                 db    4
.xdata$x:0000C0B5                 db    0
.xdata$x:0000C0B6                 db    0
.xdata$x:0000C0B7                 db    0
.xdata$x:0000C0B8                 dd offset __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:0000C0BC                 db    2
.xdata$x:0000C0BD                 db    0
.xdata$x:0000C0BE                 db    0
.xdata$x:0000C0BF                 db    0
.xdata$x:0000C0C0                 dd offset __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:0000C0C4                 db    0
.xdata$x:0000C0C5                 db    0
.xdata$x:0000C0C6                 db    0
.xdata$x:0000C0C7                 db    0
.xdata$x:0000C0C8                 db    0
.xdata$x:0000C0C9                 db    0
.xdata$x:0000C0CA                 db    0
.xdata$x:0000C0CB                 db    0
.xdata$x:0000C0CC                 db    0
.xdata$x:0000C0CD                 db    0
.xdata$x:0000C0CE                 db    0
.xdata$x:0000C0CF                 db    0
.xdata$x:0000C0D0                 db    0
.xdata$x:0000C0D1                 db    0
.xdata$x:0000C0D2                 db    0
.xdata$x:0000C0D3                 db    0
.xdata$x:0000C0D4 __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db    2
.xdata$x:0000C0D4                                         ; DATA XREF: .xdata$x:0000C0C0o
.xdata$x:0000C0D5                 db    0
.xdata$x:0000C0D6                 db    0
.xdata$x:0000C0D7                 db    0
.xdata$x:0000C0D8                 db    2
.xdata$x:0000C0D9                 db    0
.xdata$x:0000C0DA                 db    0
.xdata$x:0000C0DB                 db    0
.xdata$x:0000C0DC                 db    3
.xdata$x:0000C0DD                 db    0
.xdata$x:0000C0DE                 db    0
.xdata$x:0000C0DF                 db    0
.xdata$x:0000C0E0                 db    1
.xdata$x:0000C0E1                 db    0
.xdata$x:0000C0E2                 db    0
.xdata$x:0000C0E3                 db    0
.xdata$x:0000C0E4                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
.xdata$x:0000C0E8                 align 10h
.xdata$x:0000C0F0                 db    3
.xdata$x:0000C0F1                 db    0
.xdata$x:0000C0F2                 db    0
.xdata$x:0000C0F3                 db    0
.xdata$x:0000C0F4                 db    1
.xdata$x:0000C0F5                 db    0
.xdata$x:0000C0F6                 db    0
.xdata$x:0000C0F7                 db    0
.xdata$x:0000C0F8                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
.xdata$x:0000C0F8 _xdata$x        ends
.xdata$x:0000C0F8
.xdata$x:0000C0FC ; ===========================================================================
.xdata$x:0000C0FC
.xdata$x:0000C0FC ; Segment type: Pure data
.xdata$x:0000C0FC ; Segment permissions: Read
.xdata$x:0000C0FC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C0FC                 assume cs:_xdata$x
.xdata$x:0000C0FC                 ;org 0C0FCh
.xdata$x:0000C0FC ; COMDAT (pick associative to section at 6CD0)
.xdata$x:0000C0FC __unwindtable$??0_Generic_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000C0FC                                         ; DATA XREF: .xdata$x:0000C10Co
.xdata$x:0000C0FD                 db 0FFh
.xdata$x:0000C0FE                 db 0FFh
.xdata$x:0000C0FF                 db 0FFh
.xdata$x:0000C100                 dd offset __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0
.xdata$x:0000C104 __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000C104                                         ; DATA XREF: __ehhandler$??0_Generic_error_category@std@@QAE@XZ+11o
.xdata$x:0000C105                 db    5
.xdata$x:0000C106                 db  93h ; ô
.xdata$x:0000C107                 db  19h
.xdata$x:0000C108                 db    1
.xdata$x:0000C109                 db    0
.xdata$x:0000C10A                 db    0
.xdata$x:0000C10B                 db    0
.xdata$x:0000C10C                 dd offset __unwindtable$??0_Generic_error_category@std@@QAE@XZ
.xdata$x:0000C110                 db    0
.xdata$x:0000C111                 db    0
.xdata$x:0000C112                 db    0
.xdata$x:0000C113                 db    0
.xdata$x:0000C114                 db    0
.xdata$x:0000C115                 db    0
.xdata$x:0000C116                 db    0
.xdata$x:0000C117                 db    0
.xdata$x:0000C118                 db    0
.xdata$x:0000C119                 db    0
.xdata$x:0000C11A                 db    0
.xdata$x:0000C11B                 db    0
.xdata$x:0000C11C                 db    0
.xdata$x:0000C11D                 db    0
.xdata$x:0000C11E                 db    0
.xdata$x:0000C11F                 db    0
.xdata$x:0000C120                 db    0
.xdata$x:0000C121                 db    0
.xdata$x:0000C122                 db    0
.xdata$x:0000C123                 db    0
.xdata$x:0000C124                 db    0
.xdata$x:0000C125                 db    0
.xdata$x:0000C126                 db    0
.xdata$x:0000C127                 db    0
.xdata$x:0000C127 _xdata$x        ends
.xdata$x:0000C127
.xdata$x:0000C128 ; ===========================================================================
.xdata$x:0000C128
.xdata$x:0000C128 ; Segment type: Pure data
.xdata$x:0000C128 ; Segment permissions: Read
.xdata$x:0000C128 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C128                 assume cs:_xdata$x
.xdata$x:0000C128                 ;org 0C128h
.xdata$x:0000C128 ; COMDAT (pick associative to section at ACE0)
.xdata$x:0000C128 __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:0000C128                                         ; DATA XREF: .xdata$x:0000C138o
.xdata$x:0000C129                 db 0FFh
.xdata$x:0000C12A                 db 0FFh
.xdata$x:0000C12B                 db 0FFh
.xdata$x:0000C12C                 dd offset __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:0000C130 __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:0000C130                                         ; DATA XREF: __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:0000C131                 db    5
.xdata$x:0000C132                 db  93h ; ô
.xdata$x:0000C133                 db  19h
.xdata$x:0000C134                 db    1
.xdata$x:0000C135                 db    0
.xdata$x:0000C136                 db    0
.xdata$x:0000C137                 db    0
.xdata$x:0000C138                 dd offset __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000C13C                 db    0
.xdata$x:0000C13D                 db    0
.xdata$x:0000C13E                 db    0
.xdata$x:0000C13F                 db    0
.xdata$x:0000C140                 db    0
.xdata$x:0000C141                 db    0
.xdata$x:0000C142                 db    0
.xdata$x:0000C143                 db    0
.xdata$x:0000C144                 db    0
.xdata$x:0000C145                 db    0
.xdata$x:0000C146                 db    0
.xdata$x:0000C147                 db    0
.xdata$x:0000C148                 db    0
.xdata$x:0000C149                 db    0
.xdata$x:0000C14A                 db    0
.xdata$x:0000C14B                 db    0
.xdata$x:0000C14C                 db    0
.xdata$x:0000C14D                 db    0
.xdata$x:0000C14E                 db    0
.xdata$x:0000C14F                 db    0
.xdata$x:0000C150                 db    0
.xdata$x:0000C151                 db    0
.xdata$x:0000C152                 db    0
.xdata$x:0000C153                 db    0
.xdata$x:0000C153 _xdata$x        ends
.xdata$x:0000C153
.xdata$x:0000C154 ; ===========================================================================
.xdata$x:0000C154
.xdata$x:0000C154 ; Segment type: Pure data
.xdata$x:0000C154 ; Segment permissions: Read
.xdata$x:0000C154 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C154                 assume cs:_xdata$x
.xdata$x:0000C154                 ;org 0C154h
.xdata$x:0000C154 ; COMDAT (pick associative to section at 764C)
.xdata$x:0000C154 __unwindtable$??1_Generic_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000C154                                         ; DATA XREF: .xdata$x:0000C164o
.xdata$x:0000C155                 db 0FFh
.xdata$x:0000C156                 db 0FFh
.xdata$x:0000C157                 db 0FFh
.xdata$x:0000C158                 dd offset __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0
.xdata$x:0000C15C __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000C15C                                         ; DATA XREF: __ehhandler$??1_Generic_error_category@std@@UAE@XZ+11o
.xdata$x:0000C15D                 db    5
.xdata$x:0000C15E                 db  93h ; ô
.xdata$x:0000C15F                 db  19h
.xdata$x:0000C160                 db    1
.xdata$x:0000C161                 db    0
.xdata$x:0000C162                 db    0
.xdata$x:0000C163                 db    0
.xdata$x:0000C164                 dd offset __unwindtable$??1_Generic_error_category@std@@UAE@XZ
.xdata$x:0000C168                 align 20h
.xdata$x:0000C168 _xdata$x        ends
.xdata$x:0000C168
.xdata$x:0000C180 ; ===========================================================================
.xdata$x:0000C180
.xdata$x:0000C180 ; Segment type: Pure data
.xdata$x:0000C180 ; Segment permissions: Read
.xdata$x:0000C180 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C180                 assume cs:_xdata$x
.xdata$x:0000C180                 ;org 0C180h
.xdata$x:0000C180 ; COMDAT (pick associative to section at 6D4C)
.xdata$x:0000C180 __unwindtable$??0_Iostream_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000C180                                         ; DATA XREF: .xdata$x:0000C190o
.xdata$x:0000C181                 db 0FFh
.xdata$x:0000C182                 db 0FFh
.xdata$x:0000C183                 db 0FFh
.xdata$x:0000C184                 dd offset __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0
.xdata$x:0000C188 __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000C188                                         ; DATA XREF: __ehhandler$??0_Iostream_error_category@std@@QAE@XZ+11o
.xdata$x:0000C189                 db    5
.xdata$x:0000C18A                 db  93h ; ô
.xdata$x:0000C18B                 db  19h
.xdata$x:0000C18C                 db    1
.xdata$x:0000C18D                 db    0
.xdata$x:0000C18E                 db    0
.xdata$x:0000C18F                 db    0
.xdata$x:0000C190                 dd offset __unwindtable$??0_Iostream_error_category@std@@QAE@XZ
.xdata$x:0000C194                 db    0
.xdata$x:0000C195                 db    0
.xdata$x:0000C196                 db    0
.xdata$x:0000C197                 db    0
.xdata$x:0000C198                 db    0
.xdata$x:0000C199                 db    0
.xdata$x:0000C19A                 db    0
.xdata$x:0000C19B                 db    0
.xdata$x:0000C19C                 db    0
.xdata$x:0000C19D                 db    0
.xdata$x:0000C19E                 db    0
.xdata$x:0000C19F                 db    0
.xdata$x:0000C1A0                 db    0
.xdata$x:0000C1A1                 db    0
.xdata$x:0000C1A2                 db    0
.xdata$x:0000C1A3                 db    0
.xdata$x:0000C1A4                 db    0
.xdata$x:0000C1A5                 db    0
.xdata$x:0000C1A6                 db    0
.xdata$x:0000C1A7                 db    0
.xdata$x:0000C1A8                 db    0
.xdata$x:0000C1A9                 db    0
.xdata$x:0000C1AA                 db    0
.xdata$x:0000C1AB                 db    0
.xdata$x:0000C1AB _xdata$x        ends
.xdata$x:0000C1AB
.xdata$x:0000C1AC ; ===========================================================================
.xdata$x:0000C1AC
.xdata$x:0000C1AC ; Segment type: Pure data
.xdata$x:0000C1AC ; Segment permissions: Read
.xdata$x:0000C1AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C1AC                 assume cs:_xdata$x
.xdata$x:0000C1AC                 ;org 0C1ACh
.xdata$x:0000C1AC ; COMDAT (pick associative to section at AD98)
.xdata$x:0000C1AC __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:0000C1AC                                         ; DATA XREF: .xdata$x:0000C1BCo
.xdata$x:0000C1AD                 db 0FFh
.xdata$x:0000C1AE                 db 0FFh
.xdata$x:0000C1AF                 db 0FFh
.xdata$x:0000C1B0                 dd offset __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:0000C1B4 __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:0000C1B4                                         ; DATA XREF: __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:0000C1B5                 db    5
.xdata$x:0000C1B6                 db  93h ; ô
.xdata$x:0000C1B7                 db  19h
.xdata$x:0000C1B8                 db    1
.xdata$x:0000C1B9                 db    0
.xdata$x:0000C1BA                 db    0
.xdata$x:0000C1BB                 db    0
.xdata$x:0000C1BC                 dd offset __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000C1C0                 db    0
.xdata$x:0000C1C1                 db    0
.xdata$x:0000C1C2                 db    0
.xdata$x:0000C1C3                 db    0
.xdata$x:0000C1C4                 db    0
.xdata$x:0000C1C5                 db    0
.xdata$x:0000C1C6                 db    0
.xdata$x:0000C1C7                 db    0
.xdata$x:0000C1C8                 db    0
.xdata$x:0000C1C9                 db    0
.xdata$x:0000C1CA                 db    0
.xdata$x:0000C1CB                 db    0
.xdata$x:0000C1CC                 db    0
.xdata$x:0000C1CD                 db    0
.xdata$x:0000C1CE                 db    0
.xdata$x:0000C1CF                 db    0
.xdata$x:0000C1D0                 db    0
.xdata$x:0000C1D1                 db    0
.xdata$x:0000C1D2                 db    0
.xdata$x:0000C1D3                 db    0
.xdata$x:0000C1D4                 db    0
.xdata$x:0000C1D5                 db    0
.xdata$x:0000C1D6                 db    0
.xdata$x:0000C1D7                 db    0
.xdata$x:0000C1D7 _xdata$x        ends
.xdata$x:0000C1D7
.xdata$x:0000C1D8 ; ===========================================================================
.xdata$x:0000C1D8
.xdata$x:0000C1D8 ; Segment type: Pure data
.xdata$x:0000C1D8 ; Segment permissions: Read
.xdata$x:0000C1D8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C1D8                 assume cs:_xdata$x
.xdata$x:0000C1D8                 ;org 0C1D8h
.xdata$x:0000C1D8 ; COMDAT (pick associative to section at 76BC)
.xdata$x:0000C1D8 __unwindtable$??1_Iostream_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000C1D8                                         ; DATA XREF: .xdata$x:0000C1E8o
.xdata$x:0000C1D9                 db 0FFh
.xdata$x:0000C1DA                 db 0FFh
.xdata$x:0000C1DB                 db 0FFh
.xdata$x:0000C1DC                 dd offset __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0
.xdata$x:0000C1E0 __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000C1E0                                         ; DATA XREF: __ehhandler$??1_Iostream_error_category@std@@UAE@XZ+11o
.xdata$x:0000C1E1                 db    5
.xdata$x:0000C1E2                 db  93h ; ô
.xdata$x:0000C1E3                 db  19h
.xdata$x:0000C1E4                 db    1
.xdata$x:0000C1E5                 db    0
.xdata$x:0000C1E6                 db    0
.xdata$x:0000C1E7                 db    0
.xdata$x:0000C1E8                 dd offset __unwindtable$??1_Iostream_error_category@std@@UAE@XZ
.xdata$x:0000C1EC                 db    0
.xdata$x:0000C1ED                 db    0
.xdata$x:0000C1EE                 db    0
.xdata$x:0000C1EF                 db    0
.xdata$x:0000C1F0                 db    0
.xdata$x:0000C1F1                 db    0
.xdata$x:0000C1F2                 db    0
.xdata$x:0000C1F3                 db    0
.xdata$x:0000C1F4                 db    0
.xdata$x:0000C1F5                 db    0
.xdata$x:0000C1F6                 db    0
.xdata$x:0000C1F7                 db    0
.xdata$x:0000C1F8                 db    0
.xdata$x:0000C1F9                 db    0
.xdata$x:0000C1FA                 db    0
.xdata$x:0000C1FB                 db    0
.xdata$x:0000C1FC                 db    0
.xdata$x:0000C1FD                 db    0
.xdata$x:0000C1FE                 db    0
.xdata$x:0000C1FF                 db    0
.xdata$x:0000C200                 db    0
.xdata$x:0000C201                 db    0
.xdata$x:0000C202                 db    0
.xdata$x:0000C203                 db    0
.xdata$x:0000C203 _xdata$x        ends
.xdata$x:0000C203
.xdata$x:0000C204 ; ===========================================================================
.xdata$x:0000C204
.xdata$x:0000C204 ; Segment type: Pure data
.xdata$x:0000C204 ; Segment permissions: Read
.xdata$x:0000C204 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C204                 assume cs:_xdata$x
.xdata$x:0000C204                 ;org 0C204h
.xdata$x:0000C204 ; COMDAT (pick associative to section at 6E1C)
.xdata$x:0000C204 __unwindtable$??0_System_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000C204                                         ; DATA XREF: .xdata$x:0000C214o
.xdata$x:0000C205                 db 0FFh
.xdata$x:0000C206                 db 0FFh
.xdata$x:0000C207                 db 0FFh
.xdata$x:0000C208                 dd offset __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0
.xdata$x:0000C20C __ehfuncinfo$??0_System_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000C20C                                         ; DATA XREF: __ehhandler$??0_System_error_category@std@@QAE@XZ+11o
.xdata$x:0000C20D                 db    5
.xdata$x:0000C20E                 db  93h ; ô
.xdata$x:0000C20F                 db  19h
.xdata$x:0000C210                 db    1
.xdata$x:0000C211                 db    0
.xdata$x:0000C212                 db    0
.xdata$x:0000C213                 db    0
.xdata$x:0000C214                 dd offset __unwindtable$??0_System_error_category@std@@QAE@XZ
.xdata$x:0000C218                 db    0
.xdata$x:0000C219                 db    0
.xdata$x:0000C21A                 db    0
.xdata$x:0000C21B                 db    0
.xdata$x:0000C21C                 db    0
.xdata$x:0000C21D                 db    0
.xdata$x:0000C21E                 db    0
.xdata$x:0000C21F                 db    0
.xdata$x:0000C220                 db    0
.xdata$x:0000C221                 db    0
.xdata$x:0000C222                 db    0
.xdata$x:0000C223                 db    0
.xdata$x:0000C224                 db    0
.xdata$x:0000C225                 db    0
.xdata$x:0000C226                 db    0
.xdata$x:0000C227                 db    0
.xdata$x:0000C228                 db    0
.xdata$x:0000C229                 db    0
.xdata$x:0000C22A                 db    0
.xdata$x:0000C22B                 db    0
.xdata$x:0000C22C                 db    0
.xdata$x:0000C22D                 db    0
.xdata$x:0000C22E                 db    0
.xdata$x:0000C22F                 db    0
.xdata$x:0000C22F _xdata$x        ends
.xdata$x:0000C22F
.xdata$x:0000C230 ; ===========================================================================
.xdata$x:0000C230
.xdata$x:0000C230 ; Segment type: Pure data
.xdata$x:0000C230 ; Segment permissions: Read
.xdata$x:0000C230 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C230                 assume cs:_xdata$x
.xdata$x:0000C230                 ;org 0C230h
.xdata$x:0000C230 ; COMDAT (pick associative to section at AE5C)
.xdata$x:0000C230 __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:0000C230                                         ; DATA XREF: .xdata$x:0000C240o
.xdata$x:0000C231                 db 0FFh
.xdata$x:0000C232                 db 0FFh
.xdata$x:0000C233                 db 0FFh
.xdata$x:0000C234                 dd offset __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:0000C238 __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:0000C238                                         ; DATA XREF: __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:0000C239                 db    5
.xdata$x:0000C23A                 db  93h ; ô
.xdata$x:0000C23B                 db  19h
.xdata$x:0000C23C                 db    1
.xdata$x:0000C23D                 db    0
.xdata$x:0000C23E                 db    0
.xdata$x:0000C23F                 db    0
.xdata$x:0000C240                 dd offset __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000C244                 db    0
.xdata$x:0000C245                 db    0
.xdata$x:0000C246                 db    0
.xdata$x:0000C247                 db    0
.xdata$x:0000C248                 db    0
.xdata$x:0000C249                 db    0
.xdata$x:0000C24A                 db    0
.xdata$x:0000C24B                 db    0
.xdata$x:0000C24C                 db    0
.xdata$x:0000C24D                 db    0
.xdata$x:0000C24E                 db    0
.xdata$x:0000C24F                 db    0
.xdata$x:0000C250                 db    0
.xdata$x:0000C251                 db    0
.xdata$x:0000C252                 db    0
.xdata$x:0000C253                 db    0
.xdata$x:0000C254                 db    0
.xdata$x:0000C255                 db    0
.xdata$x:0000C256                 db    0
.xdata$x:0000C257                 db    0
.xdata$x:0000C258                 db    0
.xdata$x:0000C259                 db    0
.xdata$x:0000C25A                 db    0
.xdata$x:0000C25B                 db    0
.xdata$x:0000C25B _xdata$x        ends
.xdata$x:0000C25B
.xdata$x:0000C25C ; ===========================================================================
.xdata$x:0000C25C
.xdata$x:0000C25C ; Segment type: Pure data
.xdata$x:0000C25C ; Segment permissions: Read
.xdata$x:0000C25C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C25C                 assume cs:_xdata$x
.xdata$x:0000C25C                 ;org 0C25Ch
.xdata$x:0000C25C ; COMDAT (pick associative to section at 77B0)
.xdata$x:0000C25C __unwindtable$??1_System_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000C25C                                         ; DATA XREF: .xdata$x:0000C26Co
.xdata$x:0000C25D                 db 0FFh
.xdata$x:0000C25E                 db 0FFh
.xdata$x:0000C25F                 db 0FFh
.xdata$x:0000C260                 dd offset __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0
.xdata$x:0000C264 __ehfuncinfo$??1_System_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000C264                                         ; DATA XREF: __ehhandler$??1_System_error_category@std@@UAE@XZ+11o
.xdata$x:0000C265                 db    5
.xdata$x:0000C266                 db  93h ; ô
.xdata$x:0000C267                 db  19h
.xdata$x:0000C268                 db    1
.xdata$x:0000C269                 db    0
.xdata$x:0000C26A                 db    0
.xdata$x:0000C26B                 db    0
.xdata$x:0000C26C                 dd offset __unwindtable$??1_System_error_category@std@@UAE@XZ
.xdata$x:0000C270                 db    0
.xdata$x:0000C271                 db    0
.xdata$x:0000C272                 db    0
.xdata$x:0000C273                 db    0
.xdata$x:0000C274                 db    0
.xdata$x:0000C275                 db    0
.xdata$x:0000C276                 db    0
.xdata$x:0000C277                 db    0
.xdata$x:0000C278                 db    0
.xdata$x:0000C279                 db    0
.xdata$x:0000C27A                 db    0
.xdata$x:0000C27B                 db    0
.xdata$x:0000C27C                 db    0
.xdata$x:0000C27D                 db    0
.xdata$x:0000C27E                 db    0
.xdata$x:0000C27F                 db    0
.xdata$x:0000C280                 db    0
.xdata$x:0000C281                 db    0
.xdata$x:0000C282                 db    0
.xdata$x:0000C283                 db    0
.xdata$x:0000C284                 db    0
.xdata$x:0000C285                 db    0
.xdata$x:0000C286                 db    0
.xdata$x:0000C287                 db    0
.xdata$x:0000C287 _xdata$x        ends
.xdata$x:0000C287
.xdata$x:0000C288 ; ===========================================================================
.xdata$x:0000C288
.xdata$x:0000C288 ; Segment type: Pure data
.xdata$x:0000C288 ; Segment permissions: Read
.xdata$x:0000C288 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C288                 assume cs:_xdata$x
.xdata$x:0000C288                 ;org 0C288h
.xdata$x:0000C288 ; COMDAT (pick associative to section at 6530)
.xdata$x:0000C288 __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000C288                                         ; DATA XREF: .xdata$x:0000C298o
.xdata$x:0000C289                 db 0FFh
.xdata$x:0000C28A                 db 0FFh
.xdata$x:0000C28B                 db 0FFh
.xdata$x:0000C28C                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:0000C290 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000C290                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:0000C291                 db    5
.xdata$x:0000C292                 db  93h ; ô
.xdata$x:0000C293                 db  19h
.xdata$x:0000C294                 db    1
.xdata$x:0000C295                 db    0
.xdata$x:0000C296                 db    0
.xdata$x:0000C297                 db    0
.xdata$x:0000C298                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:0000C29C                 db    0
.xdata$x:0000C29D                 db    0
.xdata$x:0000C29E                 db    0
.xdata$x:0000C29F                 db    0
.xdata$x:0000C2A0                 db    0
.xdata$x:0000C2A1                 db    0
.xdata$x:0000C2A2                 db    0
.xdata$x:0000C2A3                 db    0
.xdata$x:0000C2A4                 db    0
.xdata$x:0000C2A5                 db    0
.xdata$x:0000C2A6                 db    0
.xdata$x:0000C2A7                 db    0
.xdata$x:0000C2A8                 db    0
.xdata$x:0000C2A9                 db    0
.xdata$x:0000C2AA                 db    0
.xdata$x:0000C2AB                 db    0
.xdata$x:0000C2AC                 db    0
.xdata$x:0000C2AD                 db    0
.xdata$x:0000C2AE                 db    0
.xdata$x:0000C2AF                 db    0
.xdata$x:0000C2B0                 db    0
.xdata$x:0000C2B1                 db    0
.xdata$x:0000C2B2                 db    0
.xdata$x:0000C2B3                 db    0
.xdata$x:0000C2B3 _xdata$x        ends
.xdata$x:0000C2B3
.xdata$x:0000C2B4 ; ===========================================================================
.xdata$x:0000C2B4
.xdata$x:0000C2B4 ; Segment type: Pure data
.xdata$x:0000C2B4 ; Segment permissions: Read
.xdata$x:0000C2B4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C2B4                 assume cs:_xdata$x
.xdata$x:0000C2B4                 ;org 0C2B4h
.xdata$x:0000C2B4 ; COMDAT (pick associative to section at 719C)
.xdata$x:0000C2B4 __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000C2B4                                         ; DATA XREF: .xdata$x:0000C2C4o
.xdata$x:0000C2B5                 db 0FFh
.xdata$x:0000C2B6                 db 0FFh
.xdata$x:0000C2B7                 db 0FFh
.xdata$x:0000C2B8                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:0000C2BC __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000C2BC                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:0000C2BD                 db    5
.xdata$x:0000C2BE                 db  93h ; ô
.xdata$x:0000C2BF                 db  19h
.xdata$x:0000C2C0                 db    1
.xdata$x:0000C2C1                 db    0
.xdata$x:0000C2C2                 db    0
.xdata$x:0000C2C3                 db    0
.xdata$x:0000C2C4                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:0000C2C8                 align 20h
.xdata$x:0000C2C8 _xdata$x        ends
.xdata$x:0000C2C8
.xdata$x:0000C2E0 ; ===========================================================================
.xdata$x:0000C2E0
.xdata$x:0000C2E0 ; Segment type: Pure data
.xdata$x:0000C2E0 ; Segment permissions: Read
.xdata$x:0000C2E0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C2E0                 assume cs:_xdata$x
.xdata$x:0000C2E0                 ;org 0C2E0h
.xdata$x:0000C2E0 ; COMDAT (pick associative to section at 6228)
.xdata$x:0000C2E0 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db 0FFh
.xdata$x:0000C2E0                                         ; DATA XREF: .xdata$x:0000C2F0o
.xdata$x:0000C2E1                 db 0FFh
.xdata$x:0000C2E2                 db 0FFh
.xdata$x:0000C2E3                 db 0FFh
.xdata$x:0000C2E4                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0
.xdata$x:0000C2E8 __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db  22h ; "
.xdata$x:0000C2E8                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z+11o
.xdata$x:0000C2E9                 db    5
.xdata$x:0000C2EA                 db  93h ; ô
.xdata$x:0000C2EB                 db  19h
.xdata$x:0000C2EC                 db    1
.xdata$x:0000C2ED                 db    0
.xdata$x:0000C2EE                 db    0
.xdata$x:0000C2EF                 db    0
.xdata$x:0000C2F0                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.xdata$x:0000C2F4                 db    0
.xdata$x:0000C2F5                 db    0
.xdata$x:0000C2F6                 db    0
.xdata$x:0000C2F7                 db    0
.xdata$x:0000C2F8                 db    0
.xdata$x:0000C2F9                 db    0
.xdata$x:0000C2FA                 db    0
.xdata$x:0000C2FB                 db    0
.xdata$x:0000C2FC                 db    0
.xdata$x:0000C2FD                 db    0
.xdata$x:0000C2FE                 db    0
.xdata$x:0000C2FF                 db    0
.xdata$x:0000C300                 db    0
.xdata$x:0000C301                 db    0
.xdata$x:0000C302                 db    0
.xdata$x:0000C303                 db    0
.xdata$x:0000C304                 db    0
.xdata$x:0000C305                 db    0
.xdata$x:0000C306                 db    0
.xdata$x:0000C307                 db    0
.xdata$x:0000C308                 db    0
.xdata$x:0000C309                 db    0
.xdata$x:0000C30A                 db    0
.xdata$x:0000C30B                 db    0
.xdata$x:0000C30B _xdata$x        ends
.xdata$x:0000C30B
.xdata$x:0000C30C ; ===========================================================================
.xdata$x:0000C30C
.xdata$x:0000C30C ; Segment type: Pure data
.xdata$x:0000C30C ; Segment permissions: Read
.xdata$x:0000C30C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C30C                 assume cs:_xdata$x
.xdata$x:0000C30C                 ;org 0C30Ch
.xdata$x:0000C30C ; COMDAT (pick associative to section at 6FD4)
.xdata$x:0000C30C __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000C30C                                         ; DATA XREF: .xdata$x:0000C31Co
.xdata$x:0000C30D                 db 0FFh
.xdata$x:0000C30E                 db 0FFh
.xdata$x:0000C30F                 db 0FFh
.xdata$x:0000C310                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000C314 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000C314                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000C315                 db    5
.xdata$x:0000C316                 db  93h ; ô
.xdata$x:0000C317                 db  19h
.xdata$x:0000C318                 db    1
.xdata$x:0000C319                 db    0
.xdata$x:0000C31A                 db    0
.xdata$x:0000C31B                 db    0
.xdata$x:0000C31C                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:0000C320                 db    0
.xdata$x:0000C321                 db    0
.xdata$x:0000C322                 db    0
.xdata$x:0000C323                 db    0
.xdata$x:0000C324                 db    0
.xdata$x:0000C325                 db    0
.xdata$x:0000C326                 db    0
.xdata$x:0000C327                 db    0
.xdata$x:0000C328                 db    0
.xdata$x:0000C329                 db    0
.xdata$x:0000C32A                 db    0
.xdata$x:0000C32B                 db    0
.xdata$x:0000C32C                 db    0
.xdata$x:0000C32D                 db    0
.xdata$x:0000C32E                 db    0
.xdata$x:0000C32F                 db    0
.xdata$x:0000C330                 db    0
.xdata$x:0000C331                 db    0
.xdata$x:0000C332                 db    0
.xdata$x:0000C333                 db    0
.xdata$x:0000C334                 db    0
.xdata$x:0000C335                 db    0
.xdata$x:0000C336                 db    0
.xdata$x:0000C337                 db    0
.xdata$x:0000C337 _xdata$x        ends
.xdata$x:0000C337
.xdata$x:0000C338 ; ===========================================================================
.xdata$x:0000C338
.xdata$x:0000C338 ; Segment type: Pure data
.xdata$x:0000C338 ; Segment permissions: Read
.xdata$x:0000C338 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C338                 assume cs:_xdata$x
.xdata$x:0000C338                 ;org 0C338h
.xdata$x:0000C338 ; COMDAT (pick associative to section at 68F4)
.xdata$x:0000C338 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000C338                                         ; DATA XREF: .xdata$x:0000C348o
.xdata$x:0000C339                 db 0FFh
.xdata$x:0000C33A                 db 0FFh
.xdata$x:0000C33B                 db 0FFh
.xdata$x:0000C33C                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0
.xdata$x:0000C340 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000C340                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000C341                 db    5
.xdata$x:0000C342                 db  93h ; ô
.xdata$x:0000C343                 db  19h
.xdata$x:0000C344                 db    1
.xdata$x:0000C345                 db    0
.xdata$x:0000C346                 db    0
.xdata$x:0000C347                 db    0
.xdata$x:0000C348                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.xdata$x:0000C34C                 db    0
.xdata$x:0000C34D                 db    0
.xdata$x:0000C34E                 db    0
.xdata$x:0000C34F                 db    0
.xdata$x:0000C350                 db    0
.xdata$x:0000C351                 db    0
.xdata$x:0000C352                 db    0
.xdata$x:0000C353                 db    0
.xdata$x:0000C354                 db    0
.xdata$x:0000C355                 db    0
.xdata$x:0000C356                 db    0
.xdata$x:0000C357                 db    0
.xdata$x:0000C358                 db    0
.xdata$x:0000C359                 db    0
.xdata$x:0000C35A                 db    0
.xdata$x:0000C35B                 db    0
.xdata$x:0000C35C                 db    0
.xdata$x:0000C35D                 db    0
.xdata$x:0000C35E                 db    0
.xdata$x:0000C35F                 db    0
.xdata$x:0000C360                 db    0
.xdata$x:0000C361                 db    0
.xdata$x:0000C362                 db    0
.xdata$x:0000C363                 db    0
.xdata$x:0000C363 _xdata$x        ends
.xdata$x:0000C363
.xdata$x:0000C364 ; ===========================================================================
.xdata$x:0000C364
.xdata$x:0000C364 ; Segment type: Pure data
.xdata$x:0000C364 ; Segment permissions: Read
.xdata$x:0000C364 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C364                 assume cs:_xdata$x
.xdata$x:0000C364                 ;org 0C364h
.xdata$x:0000C364 ; COMDAT (pick associative to section at 6A3C)
.xdata$x:0000C364 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000C364                                         ; DATA XREF: .xdata$x:0000C374o
.xdata$x:0000C365                 db 0FFh
.xdata$x:0000C366                 db 0FFh
.xdata$x:0000C367                 db 0FFh
.xdata$x:0000C368                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:0000C36C __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000C36C                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:0000C36D                 db    5
.xdata$x:0000C36E                 db  93h ; ô
.xdata$x:0000C36F                 db  19h
.xdata$x:0000C370                 db    1
.xdata$x:0000C371                 db    0
.xdata$x:0000C372                 db    0
.xdata$x:0000C373                 db    0
.xdata$x:0000C374                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:0000C378                 db    0
.xdata$x:0000C379                 db    0
.xdata$x:0000C37A                 db    0
.xdata$x:0000C37B                 db    0
.xdata$x:0000C37C                 db    0
.xdata$x:0000C37D                 db    0
.xdata$x:0000C37E                 db    0
.xdata$x:0000C37F                 db    0
.xdata$x:0000C380                 db    0
.xdata$x:0000C381                 db    0
.xdata$x:0000C382                 db    0
.xdata$x:0000C383                 db    0
.xdata$x:0000C384                 db    0
.xdata$x:0000C385                 db    0
.xdata$x:0000C386                 db    0
.xdata$x:0000C387                 db    0
.xdata$x:0000C388                 db    0
.xdata$x:0000C389                 db    0
.xdata$x:0000C38A                 db    0
.xdata$x:0000C38B                 db    0
.xdata$x:0000C38C                 db    0
.xdata$x:0000C38D                 db    0
.xdata$x:0000C38E                 db    0
.xdata$x:0000C38F                 db    0
.xdata$x:0000C38F _xdata$x        ends
.xdata$x:0000C38F
.xdata$x:0000C390 ; ===========================================================================
.xdata$x:0000C390
.xdata$x:0000C390 ; Segment type: Pure data
.xdata$x:0000C390 ; Segment permissions: Read
.xdata$x:0000C390 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C390                 assume cs:_xdata$x
.xdata$x:0000C390                 ;org 0C390h
.xdata$x:0000C390 ; COMDAT (pick associative to section at 69A4)
.xdata$x:0000C390 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db 0FFh
.xdata$x:0000C390                                         ; DATA XREF: .xdata$x:0000C3A0o
.xdata$x:0000C391                 db 0FFh
.xdata$x:0000C392                 db 0FFh
.xdata$x:0000C393                 db 0FFh
.xdata$x:0000C394                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0
.xdata$x:0000C398 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db  22h ; "
.xdata$x:0000C398                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z+11o
.xdata$x:0000C399                 db    5
.xdata$x:0000C39A                 db  93h ; ô
.xdata$x:0000C39B                 db  19h
.xdata$x:0000C39C                 db    1
.xdata$x:0000C39D                 db    0
.xdata$x:0000C39E                 db    0
.xdata$x:0000C39F                 db    0
.xdata$x:0000C3A0                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.xdata$x:0000C3A4                 db    0
.xdata$x:0000C3A5                 db    0
.xdata$x:0000C3A6                 db    0
.xdata$x:0000C3A7                 db    0
.xdata$x:0000C3A8                 db    0
.xdata$x:0000C3A9                 db    0
.xdata$x:0000C3AA                 db    0
.xdata$x:0000C3AB                 db    0
.xdata$x:0000C3AC                 db    0
.xdata$x:0000C3AD                 db    0
.xdata$x:0000C3AE                 db    0
.xdata$x:0000C3AF                 db    0
.xdata$x:0000C3B0                 db    0
.xdata$x:0000C3B1                 db    0
.xdata$x:0000C3B2                 db    0
.xdata$x:0000C3B3                 db    0
.xdata$x:0000C3B4                 db    0
.xdata$x:0000C3B5                 db    0
.xdata$x:0000C3B6                 db    0
.xdata$x:0000C3B7                 db    0
.xdata$x:0000C3B8                 db    0
.xdata$x:0000C3B9                 db    0
.xdata$x:0000C3BA                 db    0
.xdata$x:0000C3BB                 db    0
.xdata$x:0000C3BB _xdata$x        ends
.xdata$x:0000C3BB
.xdata$x:0000C3BC ; ===========================================================================
.xdata$x:0000C3BC
.xdata$x:0000C3BC ; Segment type: Pure data
.xdata$x:0000C3BC ; Segment permissions: Read
.xdata$x:0000C3BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C3BC                 assume cs:_xdata$x
.xdata$x:0000C3BC                 ;org 0C3BCh
.xdata$x:0000C3BC ; COMDAT (pick associative to section at 6850)
.xdata$x:0000C3BC __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z db 0FFh
.xdata$x:0000C3BC                                         ; DATA XREF: .xdata$x:0000C3CCo
.xdata$x:0000C3BD                 db 0FFh
.xdata$x:0000C3BE                 db 0FFh
.xdata$x:0000C3BF                 db 0FFh
.xdata$x:0000C3C0                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0
.xdata$x:0000C3C4 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z db  22h ; "
.xdata$x:0000C3C4                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z+11o
.xdata$x:0000C3C5                 db    5
.xdata$x:0000C3C6                 db  93h ; ô
.xdata$x:0000C3C7                 db  19h
.xdata$x:0000C3C8                 db    1
.xdata$x:0000C3C9                 db    0
.xdata$x:0000C3CA                 db    0
.xdata$x:0000C3CB                 db    0
.xdata$x:0000C3CC                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.xdata$x:0000C3D0                 db    0
.xdata$x:0000C3D1                 db    0
.xdata$x:0000C3D2                 db    0
.xdata$x:0000C3D3                 db    0
.xdata$x:0000C3D4                 db    0
.xdata$x:0000C3D5                 db    0
.xdata$x:0000C3D6                 db    0
.xdata$x:0000C3D7                 db    0
.xdata$x:0000C3D8                 db    0
.xdata$x:0000C3D9                 db    0
.xdata$x:0000C3DA                 db    0
.xdata$x:0000C3DB                 db    0
.xdata$x:0000C3DC                 db    0
.xdata$x:0000C3DD                 db    0
.xdata$x:0000C3DE                 db    0
.xdata$x:0000C3DF                 db    0
.xdata$x:0000C3E0                 db    0
.xdata$x:0000C3E1                 db    0
.xdata$x:0000C3E2                 db    0
.xdata$x:0000C3E3                 db    0
.xdata$x:0000C3E4                 db    0
.xdata$x:0000C3E5                 db    0
.xdata$x:0000C3E6                 db    0
.xdata$x:0000C3E7                 db    0
.xdata$x:0000C3E7 _xdata$x        ends
.xdata$x:0000C3E7
.xdata$x:0000C3E8 ; ===========================================================================
.xdata$x:0000C3E8
.xdata$x:0000C3E8 ; Segment type: Pure data
.xdata$x:0000C3E8 ; Segment permissions: Read
.xdata$x:0000C3E8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C3E8                 assume cs:_xdata$x
.xdata$x:0000C3E8                 ;org 0C3E8h
.xdata$x:0000C3E8 ; COMDAT (pick associative to section at 7844)
.xdata$x:0000C3E8 __unwindtable$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z db 0FFh
.xdata$x:0000C3E8                                         ; DATA XREF: .xdata$x:0000C400o
.xdata$x:0000C3E9                 db 0FFh
.xdata$x:0000C3EA                 db 0FFh
.xdata$x:0000C3EB                 db 0FFh
.xdata$x:0000C3EC                 dd offset __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$0
.xdata$x:0000C3F0                 db    0
.xdata$x:0000C3F1                 db    0
.xdata$x:0000C3F2                 db    0
.xdata$x:0000C3F3                 db    0
.xdata$x:0000C3F4                 dd offset __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$1
.xdata$x:0000C3F8 __ehfuncinfo$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z db  22h ; "
.xdata$x:0000C3F8                                         ; DATA XREF: __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z+11o
.xdata$x:0000C3F9                 db    5
.xdata$x:0000C3FA                 db  93h ; ô
.xdata$x:0000C3FB                 db  19h
.xdata$x:0000C3FC                 db    2
.xdata$x:0000C3FD                 db    0
.xdata$x:0000C3FE                 db    0
.xdata$x:0000C3FF                 db    0
.xdata$x:0000C400                 dd offset __unwindtable$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.xdata$x:0000C404                 db    0
.xdata$x:0000C405                 db    0
.xdata$x:0000C406                 db    0
.xdata$x:0000C407                 db    0
.xdata$x:0000C408                 db    0
.xdata$x:0000C409                 db    0
.xdata$x:0000C40A                 db    0
.xdata$x:0000C40B                 db    0
.xdata$x:0000C40C                 db    0
.xdata$x:0000C40D                 db    0
.xdata$x:0000C40E                 db    0
.xdata$x:0000C40F                 db    0
.xdata$x:0000C410                 db    0
.xdata$x:0000C411                 db    0
.xdata$x:0000C412                 db    0
.xdata$x:0000C413                 db    0
.xdata$x:0000C414                 db    0
.xdata$x:0000C415                 db    0
.xdata$x:0000C416                 db    0
.xdata$x:0000C417                 db    0
.xdata$x:0000C418                 db    0
.xdata$x:0000C419                 db    0
.xdata$x:0000C41A                 db    0
.xdata$x:0000C41B                 db    0
.xdata$x:0000C41B _xdata$x        ends
.xdata$x:0000C41B
.xdata$x:0000C41C ; ===========================================================================
.xdata$x:0000C41C
.xdata$x:0000C41C ; Segment type: Pure data
.xdata$x:0000C41C ; Segment permissions: Read
.xdata$x:0000C41C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C41C                 assume cs:_xdata$x
.xdata$x:0000C41C                 ;org 0C41Ch
.xdata$x:0000C41C ; COMDAT (pick associative to section at 7370)
.xdata$x:0000C41C __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000C41C                                         ; DATA XREF: .xdata$x:0000C42Co
.xdata$x:0000C41D                 db 0FFh
.xdata$x:0000C41E                 db 0FFh
.xdata$x:0000C41F                 db 0FFh
.xdata$x:0000C420                 dd offset __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:0000C424 __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000C424                                         ; DATA XREF: __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:0000C425                 db    5
.xdata$x:0000C426                 db  93h ; ô
.xdata$x:0000C427                 db  19h
.xdata$x:0000C428                 db    1
.xdata$x:0000C429                 db    0
.xdata$x:0000C42A                 db    0
.xdata$x:0000C42B                 db    0
.xdata$x:0000C42C                 dd offset __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:0000C430                 db    0
.xdata$x:0000C431                 db    0
.xdata$x:0000C432                 db    0
.xdata$x:0000C433                 db    0
.xdata$x:0000C434                 db    0
.xdata$x:0000C435                 db    0
.xdata$x:0000C436                 db    0
.xdata$x:0000C437                 db    0
.xdata$x:0000C438                 db    0
.xdata$x:0000C439                 db    0
.xdata$x:0000C43A                 db    0
.xdata$x:0000C43B                 db    0
.xdata$x:0000C43C                 db    0
.xdata$x:0000C43D                 db    0
.xdata$x:0000C43E                 db    0
.xdata$x:0000C43F                 db    0
.xdata$x:0000C440                 db    0
.xdata$x:0000C441                 db    0
.xdata$x:0000C442                 db    0
.xdata$x:0000C443                 db    0
.xdata$x:0000C444                 db    0
.xdata$x:0000C445                 db    0
.xdata$x:0000C446                 db    0
.xdata$x:0000C447                 db    0
.xdata$x:0000C447 _xdata$x        ends
.xdata$x:0000C447
.xdata$x:0000C448 ; ===========================================================================
.xdata$x:0000C448
.xdata$x:0000C448 ; Segment type: Pure data
.xdata$x:0000C448 ; Segment permissions: Read
.xdata$x:0000C448 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C448                 assume cs:_xdata$x
.xdata$x:0000C448                 ;org 0C448h
.xdata$x:0000C448 ; COMDAT (pick associative to section at B7A0)
.xdata$x:0000C448 __ehfuncinfo$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z db  22h ; "
.xdata$x:0000C448                                         ; DATA XREF: __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z+14o
.xdata$x:0000C449                 db    5
.xdata$x:0000C44A                 db  93h ; ô
.xdata$x:0000C44B                 db  19h
.xdata$x:0000C44C                 db  0Eh
.xdata$x:0000C44D                 db    0
.xdata$x:0000C44E                 db    0
.xdata$x:0000C44F                 db    0
.xdata$x:0000C450                 dd offset __unwindtable$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.xdata$x:0000C454                 db    0
.xdata$x:0000C455                 db    0
.xdata$x:0000C456                 db    0
.xdata$x:0000C457                 db    0
.xdata$x:0000C458                 db    0
.xdata$x:0000C459                 db    0
.xdata$x:0000C45A                 db    0
.xdata$x:0000C45B                 db    0
.xdata$x:0000C45C                 db    0
.xdata$x:0000C45D                 db    0
.xdata$x:0000C45E                 db    0
.xdata$x:0000C45F                 db    0
.xdata$x:0000C460                 db    0
.xdata$x:0000C461                 db    0
.xdata$x:0000C462                 db    0
.xdata$x:0000C463                 db    0
.xdata$x:0000C464                 db    0
.xdata$x:0000C465                 db    0
.xdata$x:0000C466                 db    0
.xdata$x:0000C467                 db    0
.xdata$x:0000C468                 db    0
.xdata$x:0000C469                 db    0
.xdata$x:0000C46A                 db    0
.xdata$x:0000C46B                 db    0
.xdata$x:0000C46C __unwindtable$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z db 0FFh
.xdata$x:0000C46C                                         ; DATA XREF: .xdata$x:0000C450o
.xdata$x:0000C46D                 db 0FFh
.xdata$x:0000C46E                 db 0FFh
.xdata$x:0000C46F                 db 0FFh
.xdata$x:0000C470                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$0
.xdata$x:0000C474                 align 8
.xdata$x:0000C478                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$1
.xdata$x:0000C47C                 db    1
.xdata$x:0000C47D                 db    0
.xdata$x:0000C47E                 db    0
.xdata$x:0000C47F                 db    0
.xdata$x:0000C480                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$2
.xdata$x:0000C484                 db    2
.xdata$x:0000C485                 db    0
.xdata$x:0000C486                 db    0
.xdata$x:0000C487                 db    0
.xdata$x:0000C488                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$3
.xdata$x:0000C48C                 db    3
.xdata$x:0000C48D                 db    0
.xdata$x:0000C48E                 db    0
.xdata$x:0000C48F                 db    0
.xdata$x:0000C490                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$4
.xdata$x:0000C494                 db    4
.xdata$x:0000C495                 db    0
.xdata$x:0000C496                 db    0
.xdata$x:0000C497                 db    0
.xdata$x:0000C498                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$5
.xdata$x:0000C49C                 db    3
.xdata$x:0000C49D                 db    0
.xdata$x:0000C49E                 db    0
.xdata$x:0000C49F                 db    0
.xdata$x:0000C4A0                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$6
.xdata$x:0000C4A4                 db    6
.xdata$x:0000C4A5                 db    0
.xdata$x:0000C4A6                 db    0
.xdata$x:0000C4A7                 db    0
.xdata$x:0000C4A8                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$7
.xdata$x:0000C4AC                 db    7
.xdata$x:0000C4AD                 db    0
.xdata$x:0000C4AE                 db    0
.xdata$x:0000C4AF                 db    0
.xdata$x:0000C4B0                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$8
.xdata$x:0000C4B4                 db    3
.xdata$x:0000C4B5                 db    0
.xdata$x:0000C4B6                 db    0
.xdata$x:0000C4B7                 db    0
.xdata$x:0000C4B8                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$9
.xdata$x:0000C4BC                 db    9
.xdata$x:0000C4BD                 db    0
.xdata$x:0000C4BE                 db    0
.xdata$x:0000C4BF                 db    0
.xdata$x:0000C4C0                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$10
.xdata$x:0000C4C4                 db    3
.xdata$x:0000C4C5                 db    0
.xdata$x:0000C4C6                 db    0
.xdata$x:0000C4C7                 db    0
.xdata$x:0000C4C8                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$11
.xdata$x:0000C4CC                 db  0Bh
.xdata$x:0000C4CD                 db    0
.xdata$x:0000C4CE                 db    0
.xdata$x:0000C4CF                 db    0
.xdata$x:0000C4D0                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$12
.xdata$x:0000C4D4                 db  0Ch
.xdata$x:0000C4D5                 db    0
.xdata$x:0000C4D6                 db    0
.xdata$x:0000C4D7                 db    0
.xdata$x:0000C4D8                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$13
.xdata$x:0000C4D8 _xdata$x        ends
.xdata$x:0000C4D8
.xdata$x:0000C4DC ; ===========================================================================
.xdata$x:0000C4DC
.xdata$x:0000C4DC ; Segment type: Pure data
.xdata$x:0000C4DC ; Segment permissions: Read
.xdata$x:0000C4DC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C4DC                 assume cs:_xdata$x
.xdata$x:0000C4DC                 ;org 0C4DCh
.xdata$x:0000C4DC ; COMDAT (pick associative to section at 9E34)
.xdata$x:0000C4DC __unwindtable$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db 0FFh
.xdata$x:0000C4DC                                         ; DATA XREF: .xdata$x:0000C4ECo
.xdata$x:0000C4DD                 db 0FFh
.xdata$x:0000C4DE                 db 0FFh
.xdata$x:0000C4DF                 db 0FFh
.xdata$x:0000C4E0                 dd offset __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0
.xdata$x:0000C4E4 __ehfuncinfo$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000C4E4                                         ; DATA XREF: __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ+11o
.xdata$x:0000C4E5                 db    5
.xdata$x:0000C4E6                 db  93h ; ô
.xdata$x:0000C4E7                 db  19h
.xdata$x:0000C4E8                 db    1
.xdata$x:0000C4E9                 db    0
.xdata$x:0000C4EA                 db    0
.xdata$x:0000C4EB                 db    0
.xdata$x:0000C4EC                 dd offset __unwindtable$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.xdata$x:0000C4F0                 db    0
.xdata$x:0000C4F1                 db    0
.xdata$x:0000C4F2                 db    0
.xdata$x:0000C4F3                 db    0
.xdata$x:0000C4F4                 db    0
.xdata$x:0000C4F5                 db    0
.xdata$x:0000C4F6                 db    0
.xdata$x:0000C4F7                 db    0
.xdata$x:0000C4F8                 db    0
.xdata$x:0000C4F9                 db    0
.xdata$x:0000C4FA                 db    0
.xdata$x:0000C4FB                 db    0
.xdata$x:0000C4FC                 db    0
.xdata$x:0000C4FD                 db    0
.xdata$x:0000C4FE                 db    0
.xdata$x:0000C4FF                 db    0
.xdata$x:0000C500                 db    0
.xdata$x:0000C501                 db    0
.xdata$x:0000C502                 db    0
.xdata$x:0000C503                 db    0
.xdata$x:0000C504                 db    0
.xdata$x:0000C505                 db    0
.xdata$x:0000C506                 db    0
.xdata$x:0000C507                 db    0
.xdata$x:0000C507 _xdata$x        ends
.xdata$x:0000C507
.xdata$x:0000C508 ; ===========================================================================
.xdata$x:0000C508
.xdata$x:0000C508 ; Segment type: Pure data
.xdata$x:0000C508 ; Segment permissions: Read
.xdata$x:0000C508 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C508                 assume cs:_xdata$x
.xdata$x:0000C508                 ;org 0C508h
.xdata$x:0000C508 ; COMDAT (pick associative to section at A37C)
.xdata$x:0000C508 __unwindtable$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db 0FFh
.xdata$x:0000C508                                         ; DATA XREF: .xdata$x:0000C518o
.xdata$x:0000C509                 db 0FFh
.xdata$x:0000C50A                 db 0FFh
.xdata$x:0000C50B                 db 0FFh
.xdata$x:0000C50C                 dd offset __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0
.xdata$x:0000C510 __ehfuncinfo$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000C510                                         ; DATA XREF: __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ+11o
.xdata$x:0000C511                 db    5
.xdata$x:0000C512                 db  93h ; ô
.xdata$x:0000C513                 db  19h
.xdata$x:0000C514                 db    1
.xdata$x:0000C515                 db    0
.xdata$x:0000C516                 db    0
.xdata$x:0000C517                 db    0
.xdata$x:0000C518                 dd offset __unwindtable$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.xdata$x:0000C51C                 db    0
.xdata$x:0000C51D                 db    0
.xdata$x:0000C51E                 db    0
.xdata$x:0000C51F                 db    0
.xdata$x:0000C520                 db    0
.xdata$x:0000C521                 db    0
.xdata$x:0000C522                 db    0
.xdata$x:0000C523                 db    0
.xdata$x:0000C524                 db    0
.xdata$x:0000C525                 db    0
.xdata$x:0000C526                 db    0
.xdata$x:0000C527                 db    0
.xdata$x:0000C528                 db    0
.xdata$x:0000C529                 db    0
.xdata$x:0000C52A                 db    0
.xdata$x:0000C52B                 db    0
.xdata$x:0000C52C                 db    0
.xdata$x:0000C52D                 db    0
.xdata$x:0000C52E                 db    0
.xdata$x:0000C52F                 db    0
.xdata$x:0000C530                 db    0
.xdata$x:0000C531                 db    0
.xdata$x:0000C532                 db    0
.xdata$x:0000C533                 db    0
.xdata$x:0000C533 _xdata$x        ends
.xdata$x:0000C533
.xdata$x:0000C534 ; ===========================================================================
.xdata$x:0000C534
.xdata$x:0000C534 ; Segment type: Pure data
.xdata$x:0000C534 ; Segment permissions: Read
.xdata$x:0000C534 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C534                 assume cs:_xdata$x
.xdata$x:0000C534                 ;org 0C534h
.xdata$x:0000C534 ; COMDAT (pick associative to section at 85C0)
.xdata$x:0000C534 __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5 db    0
.xdata$x:0000C534                                         ; DATA XREF: .xdata$x:0000C5BCo
.xdata$x:0000C535                 db    0
.xdata$x:0000C536                 db    0
.xdata$x:0000C537                 db    0
.xdata$x:0000C538                 db    0
.xdata$x:0000C539                 db    0
.xdata$x:0000C53A                 db    0
.xdata$x:0000C53B                 db    0
.xdata$x:0000C53C                 db    0
.xdata$x:0000C53D                 db    0
.xdata$x:0000C53E                 db    0
.xdata$x:0000C53F                 db    0
.xdata$x:0000C540                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.xdata$x:0000C544 __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4 db    0
.xdata$x:0000C544                                         ; DATA XREF: .xdata$x:0000C5A8o
.xdata$x:0000C545                 db    0
.xdata$x:0000C546                 db    0
.xdata$x:0000C547                 db    0
.xdata$x:0000C548                 db    0
.xdata$x:0000C549                 db    0
.xdata$x:0000C54A                 db    0
.xdata$x:0000C54B                 db    0
.xdata$x:0000C54C                 db    0
.xdata$x:0000C54D                 db    0
.xdata$x:0000C54E                 db    0
.xdata$x:0000C54F                 db    0
.xdata$x:0000C550                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1
.xdata$x:0000C554 __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db 0FFh
.xdata$x:0000C554                                         ; DATA XREF: .xdata$x:0000C57Co
.xdata$x:0000C555                 db 0FFh
.xdata$x:0000C556                 db 0FFh
.xdata$x:0000C557                 db 0FFh
.xdata$x:0000C558                 db    0
.xdata$x:0000C559                 db    0
.xdata$x:0000C55A                 db    0
.xdata$x:0000C55B                 db    0
.xdata$x:0000C55C                 db 0FFh
.xdata$x:0000C55D                 db 0FFh
.xdata$x:0000C55E                 db 0FFh
.xdata$x:0000C55F                 db 0FFh
.xdata$x:0000C560                 db    0
.xdata$x:0000C561                 db    0
.xdata$x:0000C562                 db    0
.xdata$x:0000C563                 db    0
.xdata$x:0000C564                 db    1
.xdata$x:0000C565                 db    0
.xdata$x:0000C566                 db    0
.xdata$x:0000C567                 db    0
.xdata$x:0000C568                 db    0
.xdata$x:0000C569                 db    0
.xdata$x:0000C56A                 db    0
.xdata$x:0000C56B                 db    0
.xdata$x:0000C56C                 db    1
.xdata$x:0000C56D                 db    0
.xdata$x:0000C56E                 db    0
.xdata$x:0000C56F                 db    0
.xdata$x:0000C570                 db    0
.xdata$x:0000C571                 db    0
.xdata$x:0000C572                 db    0
.xdata$x:0000C573                 db    0
.xdata$x:0000C574 __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:0000C574                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z+11o
.xdata$x:0000C575                 db    5
.xdata$x:0000C576                 db  93h ; ô
.xdata$x:0000C577                 db  19h
.xdata$x:0000C578                 db    4
.xdata$x:0000C579                 db    0
.xdata$x:0000C57A                 db    0
.xdata$x:0000C57B                 db    0
.xdata$x:0000C57C                 dd offset __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:0000C580                 db    2
.xdata$x:0000C581                 db    0
.xdata$x:0000C582                 db    0
.xdata$x:0000C583                 db    0
.xdata$x:0000C584                 dd offset __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:0000C588                 db    0
.xdata$x:0000C589                 db    0
.xdata$x:0000C58A                 db    0
.xdata$x:0000C58B                 db    0
.xdata$x:0000C58C                 db    0
.xdata$x:0000C58D                 db    0
.xdata$x:0000C58E                 db    0
.xdata$x:0000C58F                 db    0
.xdata$x:0000C590                 db    0
.xdata$x:0000C591                 db    0
.xdata$x:0000C592                 db    0
.xdata$x:0000C593                 db    0
.xdata$x:0000C594                 db    0
.xdata$x:0000C595                 db    0
.xdata$x:0000C596                 db    0
.xdata$x:0000C597                 db    0
.xdata$x:0000C598 __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db    2
.xdata$x:0000C598                                         ; DATA XREF: .xdata$x:0000C584o
.xdata$x:0000C599                 db    0
.xdata$x:0000C59A                 db    0
.xdata$x:0000C59B                 db    0
.xdata$x:0000C59C                 db    2
.xdata$x:0000C59D                 db    0
.xdata$x:0000C59E                 db    0
.xdata$x:0000C59F                 db    0
.xdata$x:0000C5A0                 db    3
.xdata$x:0000C5A1                 db    0
.xdata$x:0000C5A2                 db    0
.xdata$x:0000C5A3                 db    0
.xdata$x:0000C5A4                 db    1
.xdata$x:0000C5A5                 db    0
.xdata$x:0000C5A6                 db    0
.xdata$x:0000C5A7                 db    0
.xdata$x:0000C5A8                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4
.xdata$x:0000C5AC                 db    0
.xdata$x:0000C5AD                 db    0
.xdata$x:0000C5AE                 db    0
.xdata$x:0000C5AF                 db    0
.xdata$x:0000C5B0                 db    0
.xdata$x:0000C5B1                 db    0
.xdata$x:0000C5B2                 db    0
.xdata$x:0000C5B3                 db    0
.xdata$x:0000C5B4                 db    3
.xdata$x:0000C5B5                 db    0
.xdata$x:0000C5B6                 db    0
.xdata$x:0000C5B7                 db    0
.xdata$x:0000C5B8                 db    1
.xdata$x:0000C5B9                 db    0
.xdata$x:0000C5BA                 db    0
.xdata$x:0000C5BB                 db    0
.xdata$x:0000C5BC                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5
.xdata$x:0000C5BC _xdata$x        ends
.xdata$x:0000C5BC
.xdata$x:0000C5C0 ; ===========================================================================
.xdata$x:0000C5C0
.xdata$x:0000C5C0 ; Segment type: Pure data
.xdata$x:0000C5C0 ; Segment permissions: Read
.xdata$x:0000C5C0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C5C0                 assume cs:_xdata$x
.xdata$x:0000C5C0                 ;org 0C5C0h
.xdata$x:0000C5C0 ; COMDAT (pick associative to section at 90A8)
.xdata$x:0000C5C0 __unwindtable$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z db 0FFh
.xdata$x:0000C5C0                                         ; DATA XREF: .xdata$x:0000C5D8o
.xdata$x:0000C5C1                 db 0FFh
.xdata$x:0000C5C2                 db 0FFh
.xdata$x:0000C5C3                 db 0FFh
.xdata$x:0000C5C4                 dd offset __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$0
.xdata$x:0000C5C8                 db    0
.xdata$x:0000C5C9                 db    0
.xdata$x:0000C5CA                 db    0
.xdata$x:0000C5CB                 db    0
.xdata$x:0000C5CC                 dd offset __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$1
.xdata$x:0000C5D0 __ehfuncinfo$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z db  22h ; "
.xdata$x:0000C5D0                                         ; DATA XREF: __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z+11o
.xdata$x:0000C5D1                 db    5
.xdata$x:0000C5D2                 db  93h ; ô
.xdata$x:0000C5D3                 db  19h
.xdata$x:0000C5D4                 db    2
.xdata$x:0000C5D5                 db    0
.xdata$x:0000C5D6                 db    0
.xdata$x:0000C5D7                 db    0
.xdata$x:0000C5D8                 dd offset __unwindtable$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.xdata$x:0000C5DC                 db    0
.xdata$x:0000C5DD                 db    0
.xdata$x:0000C5DE                 db    0
.xdata$x:0000C5DF                 db    0
.xdata$x:0000C5E0                 db    0
.xdata$x:0000C5E1                 db    0
.xdata$x:0000C5E2                 db    0
.xdata$x:0000C5E3                 db    0
.xdata$x:0000C5E4                 db    0
.xdata$x:0000C5E5                 db    0
.xdata$x:0000C5E6                 db    0
.xdata$x:0000C5E7                 db    0
.xdata$x:0000C5E8                 db    0
.xdata$x:0000C5E9                 db    0
.xdata$x:0000C5EA                 db    0
.xdata$x:0000C5EB                 db    0
.xdata$x:0000C5EC                 db    0
.xdata$x:0000C5ED                 db    0
.xdata$x:0000C5EE                 db    0
.xdata$x:0000C5EF                 db    0
.xdata$x:0000C5F0                 db    0
.xdata$x:0000C5F1                 db    0
.xdata$x:0000C5F2                 db    0
.xdata$x:0000C5F3                 db    0
.xdata$x:0000C5F3 _xdata$x        ends
.xdata$x:0000C5F3
.xdata$x:0000C5F4 ; ===========================================================================
.xdata$x:0000C5F4
.xdata$x:0000C5F4 ; Segment type: Pure data
.xdata$x:0000C5F4 ; Segment permissions: Read
.xdata$x:0000C5F4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C5F4                 assume cs:_xdata$x
.xdata$x:0000C5F4                 ;org 0C5F4h
.xdata$x:0000C5F4 ; COMDAT (pick associative to section at 6BE0)
.xdata$x:0000C5F4 __unwindtable$??0StaticDialog@@QAE@XZ db 0FFh
.xdata$x:0000C5F4                                         ; DATA XREF: .xdata$x:0000C604o
.xdata$x:0000C5F5                 db 0FFh
.xdata$x:0000C5F6                 db 0FFh
.xdata$x:0000C5F7                 db 0FFh
.xdata$x:0000C5F8                 dd offset __unwindfunclet$??0StaticDialog@@QAE@XZ$0
.xdata$x:0000C5FC __ehfuncinfo$??0StaticDialog@@QAE@XZ db  22h ; "
.xdata$x:0000C5FC                                         ; DATA XREF: __ehhandler$??0StaticDialog@@QAE@XZ+11o
.xdata$x:0000C5FD                 db    5
.xdata$x:0000C5FE                 db  93h ; ô
.xdata$x:0000C5FF                 db  19h
.xdata$x:0000C600                 db    1
.xdata$x:0000C601                 db    0
.xdata$x:0000C602                 db    0
.xdata$x:0000C603                 db    0
.xdata$x:0000C604                 dd offset __unwindtable$??0StaticDialog@@QAE@XZ
.xdata$x:0000C608                 align 20h
.xdata$x:0000C608 _xdata$x        ends
.xdata$x:0000C608
.xdata$x:0000C620 ; ===========================================================================
.xdata$x:0000C620
.xdata$x:0000C620 ; Segment type: Pure data
.xdata$x:0000C620 ; Segment permissions: Read
.xdata$x:0000C620 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C620                 assume cs:_xdata$x
.xdata$x:0000C620                 ;org 0C620h
.xdata$x:0000C620 ; COMDAT (pick associative to section at 74F0)
.xdata$x:0000C620 __unwindtable$??1StaticDialog@@UAE@XZ db 0FFh
.xdata$x:0000C620                                         ; DATA XREF: .xdata$x:0000C630o
.xdata$x:0000C621                 db 0FFh
.xdata$x:0000C622                 db 0FFh
.xdata$x:0000C623                 db 0FFh
.xdata$x:0000C624                 dd offset __unwindfunclet$??1StaticDialog@@UAE@XZ$0
.xdata$x:0000C628 __ehfuncinfo$??1StaticDialog@@UAE@XZ db  22h ; "
.xdata$x:0000C628                                         ; DATA XREF: __ehhandler$??1StaticDialog@@UAE@XZ+11o
.xdata$x:0000C629                 db    5
.xdata$x:0000C62A                 db  93h ; ô
.xdata$x:0000C62B                 db  19h
.xdata$x:0000C62C                 db    1
.xdata$x:0000C62D                 db    0
.xdata$x:0000C62E                 db    0
.xdata$x:0000C62F                 db    0
.xdata$x:0000C630                 dd offset __unwindtable$??1StaticDialog@@UAE@XZ
.xdata$x:0000C634                 db    0
.xdata$x:0000C635                 db    0
.xdata$x:0000C636                 db    0
.xdata$x:0000C637                 db    0
.xdata$x:0000C638                 db    0
.xdata$x:0000C639                 db    0
.xdata$x:0000C63A                 db    0
.xdata$x:0000C63B                 db    0
.xdata$x:0000C63C                 db    0
.xdata$x:0000C63D                 db    0
.xdata$x:0000C63E                 db    0
.xdata$x:0000C63F                 db    0
.xdata$x:0000C640                 db    0
.xdata$x:0000C641                 db    0
.xdata$x:0000C642                 db    0
.xdata$x:0000C643                 db    0
.xdata$x:0000C644                 db    0
.xdata$x:0000C645                 db    0
.xdata$x:0000C646                 db    0
.xdata$x:0000C647                 db    0
.xdata$x:0000C648                 db    0
.xdata$x:0000C649                 db    0
.xdata$x:0000C64A                 db    0
.xdata$x:0000C64B                 db    0
.xdata$x:0000C64B _xdata$x        ends
.xdata$x:0000C64B
.xdata$x:0000C64C ; ===========================================================================
.xdata$x:0000C64C
.xdata$x:0000C64C ; Segment type: Pure data
.xdata$x:0000C64C ; Segment permissions: Read
.xdata$x:0000C64C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C64C                 assume cs:_xdata$x
.xdata$x:0000C64C                 ;org 0C64Ch
.xdata$x:0000C64C ; COMDAT (pick associative to section at 9154)
.xdata$x:0000C64C __catchsym$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$2 db    0
.xdata$x:0000C64C                                         ; DATA XREF: .xdata$x:0000C67Co
.xdata$x:0000C64D                 db    0
.xdata$x:0000C64E                 db    0
.xdata$x:0000C64F                 db    0
.xdata$x:0000C650                 db    0
.xdata$x:0000C651                 db    0
.xdata$x:0000C652                 db    0
.xdata$x:0000C653                 db    0
.xdata$x:0000C654                 db    0
.xdata$x:0000C655                 db    0
.xdata$x:0000C656                 db    0
.xdata$x:0000C657                 db    0
.xdata$x:0000C658                 dd offset __catch$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$0
.xdata$x:0000C65C __unwindtable$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z db 0FFh
.xdata$x:0000C65C                                         ; DATA XREF: .xdata$x:0000C688o
.xdata$x:0000C65D                 db 0FFh
.xdata$x:0000C65E                 db 0FFh
.xdata$x:0000C65F                 db 0FFh
.xdata$x:0000C660                 db    0
.xdata$x:0000C661                 db    0
.xdata$x:0000C662                 db    0
.xdata$x:0000C663                 db    0
.xdata$x:0000C664                 db 0FFh
.xdata$x:0000C665                 db 0FFh
.xdata$x:0000C666                 db 0FFh
.xdata$x:0000C667                 db 0FFh
.xdata$x:0000C668                 db    0
.xdata$x:0000C669                 db    0
.xdata$x:0000C66A                 db    0
.xdata$x:0000C66B                 db    0
.xdata$x:0000C66C __tryblocktable$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z db    0
.xdata$x:0000C66C                                         ; DATA XREF: .xdata$x:0000C690o
.xdata$x:0000C66D                 db    0
.xdata$x:0000C66E                 db    0
.xdata$x:0000C66F                 db    0
.xdata$x:0000C670                 db    0
.xdata$x:0000C671                 db    0
.xdata$x:0000C672                 db    0
.xdata$x:0000C673                 db    0
.xdata$x:0000C674                 db    1
.xdata$x:0000C675                 db    0
.xdata$x:0000C676                 db    0
.xdata$x:0000C677                 db    0
.xdata$x:0000C678                 db    1
.xdata$x:0000C679                 db    0
.xdata$x:0000C67A                 db    0
.xdata$x:0000C67B                 db    0
.xdata$x:0000C67C                 dd offset __catchsym$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$2
.xdata$x:0000C680 __ehfuncinfo$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z db  22h ; "
.xdata$x:0000C680                                         ; DATA XREF: __ehhandler$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z+11o
.xdata$x:0000C681                 db    5
.xdata$x:0000C682                 db  93h ; ô
.xdata$x:0000C683                 db  19h
.xdata$x:0000C684                 db    2
.xdata$x:0000C685                 db    0
.xdata$x:0000C686                 db    0
.xdata$x:0000C687                 db    0
.xdata$x:0000C688                 dd offset __unwindtable$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
.xdata$x:0000C68C                 db    1
.xdata$x:0000C68D                 db    0
.xdata$x:0000C68E                 db    0
.xdata$x:0000C68F                 db    0
.xdata$x:0000C690                 dd offset __tryblocktable$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z
.xdata$x:0000C694                 db    0
.xdata$x:0000C695                 db    0
.xdata$x:0000C696                 db    0
.xdata$x:0000C697                 db    0
.xdata$x:0000C698                 db    0
.xdata$x:0000C699                 db    0
.xdata$x:0000C69A                 db    0
.xdata$x:0000C69B                 db    0
.xdata$x:0000C69C                 db    0
.xdata$x:0000C69D                 db    0
.xdata$x:0000C69E                 db    0
.xdata$x:0000C69F                 db    0
.xdata$x:0000C6A0                 db    0
.xdata$x:0000C6A1                 db    0
.xdata$x:0000C6A2                 db    0
.xdata$x:0000C6A3                 db    0
.xdata$x:0000C6A3 _xdata$x        ends
.xdata$x:0000C6A3
.xdata$x:0000C6A4 ; ===========================================================================
.xdata$x:0000C6A4
.xdata$x:0000C6A4 ; Segment type: Pure data
.xdata$x:0000C6A4 ; Segment permissions: Read
.xdata$x:0000C6A4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C6A4                 assume cs:_xdata$x
.xdata$x:0000C6A4                 ;org 0C6A4h
.xdata$x:0000C6A4 ; COMDAT (pick associative to section at 8EF0)
.xdata$x:0000C6A4 __unwindtable$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z db 0FFh
.xdata$x:0000C6A4                                         ; DATA XREF: .xdata$x:0000C6B4o
.xdata$x:0000C6A5                 db 0FFh
.xdata$x:0000C6A6                 db 0FFh
.xdata$x:0000C6A7                 db 0FFh
.xdata$x:0000C6A8                 dd offset __unwindfunclet$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z$0
.xdata$x:0000C6AC __ehfuncinfo$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z db  22h ; "
.xdata$x:0000C6AC                                         ; DATA XREF: __ehhandler$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z+11o
.xdata$x:0000C6AD                 db    5
.xdata$x:0000C6AE                 db  93h ; ô
.xdata$x:0000C6AF                 db  19h
.xdata$x:0000C6B0                 db    1
.xdata$x:0000C6B1                 db    0
.xdata$x:0000C6B2                 db    0
.xdata$x:0000C6B3                 db    0
.xdata$x:0000C6B4                 dd offset __unwindtable$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z
.xdata$x:0000C6B8                 db    0
.xdata$x:0000C6B9                 db    0
.xdata$x:0000C6BA                 db    0
.xdata$x:0000C6BB                 db    0
.xdata$x:0000C6BC                 db    0
.xdata$x:0000C6BD                 db    0
.xdata$x:0000C6BE                 db    0
.xdata$x:0000C6BF                 db    0
.xdata$x:0000C6C0                 db    0
.xdata$x:0000C6C1                 db    0
.xdata$x:0000C6C2                 db    0
.xdata$x:0000C6C3                 db    0
.xdata$x:0000C6C4                 db    0
.xdata$x:0000C6C5                 db    0
.xdata$x:0000C6C6                 db    0
.xdata$x:0000C6C7                 db    0
.xdata$x:0000C6C8                 db    0
.xdata$x:0000C6C9                 db    0
.xdata$x:0000C6CA                 db    0
.xdata$x:0000C6CB                 db    0
.xdata$x:0000C6CC                 db    0
.xdata$x:0000C6CD                 db    0
.xdata$x:0000C6CE                 db    0
.xdata$x:0000C6CF                 db    0
.xdata$x:0000C6CF _xdata$x        ends
.xdata$x:0000C6CF
.xdata$x:0000C6D0 ; ===========================================================================
.xdata$x:0000C6D0
.xdata$x:0000C6D0 ; Segment type: Pure data
.xdata$x:0000C6D0 ; Segment permissions: Read
.xdata$x:0000C6D0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000C6D0                 assume cs:_xdata$x
.xdata$x:0000C6D0                 ;org 0C6D0h
.xdata$x:0000C6D0 __unwindtable$?getAbsoluteFilePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z db 0FFh
.xdata$x:0000C6D0                                         ; DATA XREF: .xdata$x:0000C770o
.xdata$x:0000C6D1                 db 0FFh
.xdata$x:0000C6D2                 db 0FFh
.xdata$x:0000C6D3                 db 0FFh
.xdata$x:0000C6D4                 dd offset __unwindfunclet$?getAbsoluteFilePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z$0
.xdata$x:0000C6D8 __unwindtable$?buildTreeFrom@ProjectPanel@@IAE_NPAVTiXmlNode@@PAU_TREEITEM@@@Z db 0FFh
.xdata$x:0000C6D8                                         ; DATA XREF: .xdata$x:0000C794o
.xdata$x:0000C6D9                 db 0FFh
.xdata$x:0000C6DA                 db 0FFh
.xdata$x:0000C6DB                 db 0FFh
.xdata$x:0000C6DC                 dd offset __unwindfunclet$?buildTreeFrom@ProjectPanel@@IAE_NPAVTiXmlNode@@PAU_TREEITEM@@@Z$0
.xdata$x:0000C6E0 __unwindtable$?getRelativePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV23@PB_W@Z db 0FFh
.xdata$x:0000C6E0                                         ; DATA XREF: .xdata$x:0000C824o
.xdata$x:0000C6E1                 db 0FFh
.xdata$x:0000C6E2                 db 0FFh
.xdata$x:0000C6E3                 db 0FFh
.xdata$x:0000C6E4                 dd offset __unwindfunclet$?getRelativePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV23@PB_W@Z$0
.xdata$x:0000C6E8 __unwindtable$?addFiles@ProjectPanel@@IAEXPAU_TREEITEM@@@Z db 0FFh
.xdata$x:0000C6E8                                         ; DATA XREF: .xdata$x:0000C8B4o
.xdata$x:0000C6E9                 db 0FFh
.xdata$x:0000C6EA                 db 0FFh
.xdata$x:0000C6EB                 db 0FFh
.xdata$x:0000C6EC                 dd offset __unwindfunclet$?addFiles@ProjectPanel@@IAEXPAU_TREEITEM@@@Z$0
.xdata$x:0000C6F0 __unwindtable$?saveWorkSpaceAs@ProjectPanel@@QAE_N_N@Z db 0FFh
.xdata$x:0000C6F0                                         ; DATA XREF: .xdata$x:0000C8FCo
.xdata$x:0000C6F1                 db 0FFh
.xdata$x:0000C6F2                 db 0FFh
.xdata$x:0000C6F3                 db 0FFh
.xdata$x:0000C6F4                 dd offset __unwindfunclet$?saveWorkSpaceAs@ProjectPanel@@QAE_N_N@Z$0
.xdata$x:0000C6F8 __unwindtable$?newWorkSpace@ProjectPanel@@QAEXXZ db 0FFh
.xdata$x:0000C6F8                                         ; DATA XREF: .xdata$x:0000C944o
.xdata$x:0000C6F9                 db 0FFh
.xdata$x:0000C6FA                 db 0FFh
.xdata$x:0000C6FB                 db 0FFh
.xdata$x:0000C6FC                 dd offset __unwindfunclet$?newWorkSpace@ProjectPanel@@QAEXXZ$0
.xdata$x:0000C700 __unwindtable$?run_dlgProc@ProjectPanel@@MAGHIIJ@Z db 0FFh
.xdata$x:0000C700                                         ; DATA XREF: .xdata$x:0000C7B8o
.xdata$x:0000C701                 db 0FFh
.xdata$x:0000C702                 db 0FFh
.xdata$x:0000C703                 db 0FFh
.xdata$x:0000C704                 dd offset __unwindfunclet$?run_dlgProc@ProjectPanel@@MAGHIIJ@Z$0
.xdata$x:0000C708                 db    0
.xdata$x:0000C709                 db    0
.xdata$x:0000C70A                 db    0
.xdata$x:0000C70B                 db    0
.xdata$x:0000C70C                 dd offset __unwindfunclet$?run_dlgProc@ProjectPanel@@MAGHIIJ@Z$1
.xdata$x:0000C710 __unwindtable$?openWorkSpace@ProjectPanel@@QAE_NPB_W@Z db 0FFh
.xdata$x:0000C710                                         ; DATA XREF: .xdata$x:0000C920o
.xdata$x:0000C711                 db 0FFh
.xdata$x:0000C712                 db 0FFh
.xdata$x:0000C713                 db 0FFh
.xdata$x:0000C714                 dd offset __unwindfunclet$?openWorkSpace@ProjectPanel@@QAE_NPB_W@Z$0
.xdata$x:0000C718                 db 0FFh
.xdata$x:0000C719                 db 0FFh
.xdata$x:0000C71A                 db 0FFh
.xdata$x:0000C71B                 db 0FFh
.xdata$x:0000C71C                 dd offset __unwindfunclet$?openWorkSpace@ProjectPanel@@QAE_NPB_W@Z$1
.xdata$x:0000C720 __unwindtable$?buildProjectXml@ProjectPanel@@IAEXPAVTiXmlNode@@PAU_TREEITEM@@PB_W@Z db 0FFh
.xdata$x:0000C720                                         ; DATA XREF: .xdata$x:0000C800o
.xdata$x:0000C721                 db 0FFh
.xdata$x:0000C722                 db 0FFh
.xdata$x:0000C723                 db 0FFh
.xdata$x:0000C724                 dd offset __unwindfunclet$?buildProjectXml@ProjectPanel@@IAEXPAVTiXmlNode@@PAU_TREEITEM@@PB_W@Z$0
.xdata$x:0000C728                 db    0
.xdata$x:0000C729                 db    0
.xdata$x:0000C72A                 db    0
.xdata$x:0000C72B                 db    0
.xdata$x:0000C72C                 dd offset __unwindfunclet$?buildProjectXml@ProjectPanel@@IAEXPAVTiXmlNode@@PAU_TREEITEM@@PB_W@Z$1
.xdata$x:0000C730                 db 0FFh
.xdata$x:0000C731                 db 0FFh
.xdata$x:0000C732                 db 0FFh
.xdata$x:0000C733                 db 0FFh
.xdata$x:0000C734                 dd offset __unwindfunclet$?buildProjectXml@ProjectPanel@@IAEXPAVTiXmlNode@@PAU_TREEITEM@@PB_W@Z$2
.xdata$x:0000C738 __unwindtable$?writeWorkSpace@ProjectPanel@@IAE_NPA_W@Z db 0FFh
.xdata$x:0000C738                                         ; DATA XREF: .xdata$x:0000C848o
.xdata$x:0000C739                 db 0FFh
.xdata$x:0000C73A                 db 0FFh
.xdata$x:0000C73B                 db 0FFh
.xdata$x:0000C73C                 dd offset __unwindfunclet$?writeWorkSpace@ProjectPanel@@IAE_NPA_W@Z$0
.xdata$x:0000C740                 db    0
.xdata$x:0000C741                 db    0
.xdata$x:0000C742                 db    0
.xdata$x:0000C743                 db    0
.xdata$x:0000C744                 dd offset __unwindfunclet$?writeWorkSpace@ProjectPanel@@IAE_NPA_W@Z$1
.xdata$x:0000C748                 db    0
.xdata$x:0000C749                 db    0
.xdata$x:0000C74A                 db    0
.xdata$x:0000C74B                 db    0
.xdata$x:0000C74C                 dd offset __unwindfunclet$?writeWorkSpace@ProjectPanel@@IAE_NPA_W@Z$2
.xdata$x:0000C750 __unwindtable$?addFilesFromDirectory@ProjectPanel@@IAEXPAU_TREEITEM@@@Z db 0FFh
.xdata$x:0000C750                                         ; DATA XREF: .xdata$x:0000C890o
.xdata$x:0000C751                 db 0FFh
.xdata$x:0000C752                 db 0FFh
.xdata$x:0000C753                 db 0FFh
.xdata$x:0000C754                 dd offset __unwindfunclet$?addFilesFromDirectory@ProjectPanel@@IAEXPAU_TREEITEM@@@Z$0
.xdata$x:0000C758                 db    0
.xdata$x:0000C759                 db    0
.xdata$x:0000C75A                 db    0
.xdata$x:0000C75B                 db    0
.xdata$x:0000C75C                 dd offset __unwindfunclet$?addFilesFromDirectory@ProjectPanel@@IAEXPAU_TREEITEM@@@Z$1
.xdata$x:0000C760                 db    0
.xdata$x:0000C761                 db    0
.xdata$x:0000C762                 db    0
.xdata$x:0000C763                 db    0
.xdata$x:0000C764                 dd offset __unwindfunclet$?addFilesFromDirectory@ProjectPanel@@IAEXPAU_TREEITEM@@@Z$2
.xdata$x:0000C768 __ehfuncinfo$?getAbsoluteFilePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z db  22h ; "
.xdata$x:0000C768                                         ; DATA XREF: __ehhandler$?getAbsoluteFilePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z+1Eo
.xdata$x:0000C769                 db    5
.xdata$x:0000C76A                 db  93h ; ô
.xdata$x:0000C76B                 db  19h
.xdata$x:0000C76C                 db    1
.xdata$x:0000C76D                 db    0
.xdata$x:0000C76E                 db    0
.xdata$x:0000C76F                 db    0
.xdata$x:0000C770                 dd offset __unwindtable$?getAbsoluteFilePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z
.xdata$x:0000C774                 db    0
.xdata$x:0000C775                 db    0
.xdata$x:0000C776                 db    0
.xdata$x:0000C777                 db    0
.xdata$x:0000C778                 db    0
.xdata$x:0000C779                 db    0
.xdata$x:0000C77A                 db    0
.xdata$x:0000C77B                 db    0
.xdata$x:0000C77C                 db    0
.xdata$x:0000C77D                 db    0
.xdata$x:0000C77E                 db    0
.xdata$x:0000C77F                 db    0
.xdata$x:0000C780                 db    0
.xdata$x:0000C781                 db    0
.xdata$x:0000C782                 db    0
.xdata$x:0000C783                 db    0
.xdata$x:0000C784                 db    0
.xdata$x:0000C785                 db    0
.xdata$x:0000C786                 db    0
.xdata$x:0000C787                 db    0
.xdata$x:0000C788                 db    0
.xdata$x:0000C789                 db    0
.xdata$x:0000C78A                 db    0
.xdata$x:0000C78B                 db    0
.xdata$x:0000C78C __ehfuncinfo$?buildTreeFrom@ProjectPanel@@IAE_NPAVTiXmlNode@@PAU_TREEITEM@@@Z db  22h ; "
.xdata$x:0000C78C                                         ; DATA XREF: __ehhandler$?buildTreeFrom@ProjectPanel@@IAE_NPAVTiXmlNode@@PAU_TREEITEM@@@Z+1Bo
.xdata$x:0000C78D                 db    5
.xdata$x:0000C78E                 db  93h ; ô
.xdata$x:0000C78F                 db  19h
.xdata$x:0000C790                 db    1
.xdata$x:0000C791                 db    0
.xdata$x:0000C792                 db    0
.xdata$x:0000C793                 db    0
.xdata$x:0000C794                 dd offset __unwindtable$?buildTreeFrom@ProjectPanel@@IAE_NPAVTiXmlNode@@PAU_TREEITEM@@@Z
.xdata$x:0000C798                 db    0
.xdata$x:0000C799                 db    0
.xdata$x:0000C79A                 db    0
.xdata$x:0000C79B                 db    0
.xdata$x:0000C79C                 db    0
.xdata$x:0000C79D                 db    0
.xdata$x:0000C79E                 db    0
.xdata$x:0000C79F                 db    0
.xdata$x:0000C7A0                 db    0
.xdata$x:0000C7A1                 db    0
.xdata$x:0000C7A2                 db    0
.xdata$x:0000C7A3                 db    0
.xdata$x:0000C7A4                 db    0
.xdata$x:0000C7A5                 db    0
.xdata$x:0000C7A6                 db    0
.xdata$x:0000C7A7                 db    0
.xdata$x:0000C7A8                 db    0
.xdata$x:0000C7A9                 db    0
.xdata$x:0000C7AA                 db    0
.xdata$x:0000C7AB                 db    0
.xdata$x:0000C7AC                 db    0
.xdata$x:0000C7AD                 db    0
.xdata$x:0000C7AE                 db    0
.xdata$x:0000C7AF                 db    0
.xdata$x:0000C7B0 __ehfuncinfo$?run_dlgProc@ProjectPanel@@MAGHIIJ@Z db  22h ; "
.xdata$x:0000C7B0                                         ; DATA XREF: __ehhandler$?run_dlgProc@ProjectPanel@@MAGHIIJ@Z+1Eo
.xdata$x:0000C7B1                 db    5
.xdata$x:0000C7B2                 db  93h ; ô
.xdata$x:0000C7B3                 db  19h
.xdata$x:0000C7B4                 db    2
.xdata$x:0000C7B5                 db    0
.xdata$x:0000C7B6                 db    0
.xdata$x:0000C7B7                 db    0
.xdata$x:0000C7B8                 dd offset __unwindtable$?run_dlgProc@ProjectPanel@@MAGHIIJ@Z
.xdata$x:0000C7BC                 db    0
.xdata$x:0000C7BD                 db    0
.xdata$x:0000C7BE                 db    0
.xdata$x:0000C7BF                 db    0
.xdata$x:0000C7C0                 db    0
.xdata$x:0000C7C1                 db    0
.xdata$x:0000C7C2                 db    0
.xdata$x:0000C7C3                 db    0
.xdata$x:0000C7C4                 db    0
.xdata$x:0000C7C5                 db    0
.xdata$x:0000C7C6                 db    0
.xdata$x:0000C7C7                 db    0
.xdata$x:0000C7C8                 db    0
.xdata$x:0000C7C9                 db    0
.xdata$x:0000C7CA                 db    0
.xdata$x:0000C7CB                 db    0
.xdata$x:0000C7CC                 db    0
.xdata$x:0000C7CD                 db    0
.xdata$x:0000C7CE                 db    0
.xdata$x:0000C7CF                 db    0
.xdata$x:0000C7D0                 db    0
.xdata$x:0000C7D1                 db    0
.xdata$x:0000C7D2                 db    0
.xdata$x:0000C7D3                 db    0
.xdata$x:0000C7D4 __ehfuncinfo$?popupMenuCmd@ProjectPanel@@IAEXH@Z db  22h ; "
.xdata$x:0000C7D4                                         ; DATA XREF: __ehhandler$?popupMenuCmd@ProjectPanel@@IAEXH@Z+1Eo
.xdata$x:0000C7D5                 db    5
.xdata$x:0000C7D6                 db  93h ; ô
.xdata$x:0000C7D7                 db  19h
.xdata$x:0000C7D8                 db    5
.xdata$x:0000C7D9                 db    0
.xdata$x:0000C7DA                 db    0
.xdata$x:0000C7DB                 db    0
.xdata$x:0000C7DC                 dd offset __unwindtable$?popupMenuCmd@ProjectPanel@@IAEXH@Z
.xdata$x:0000C7E0                 db    0
.xdata$x:0000C7E1                 db    0
.xdata$x:0000C7E2                 db    0
.xdata$x:0000C7E3                 db    0
.xdata$x:0000C7E4                 db    0
.xdata$x:0000C7E5                 db    0
.xdata$x:0000C7E6                 db    0
.xdata$x:0000C7E7                 db    0
.xdata$x:0000C7E8                 db    0
.xdata$x:0000C7E9                 db    0
.xdata$x:0000C7EA                 db    0
.xdata$x:0000C7EB                 db    0
.xdata$x:0000C7EC                 db    0
.xdata$x:0000C7ED                 db    0
.xdata$x:0000C7EE                 db    0
.xdata$x:0000C7EF                 db    0
.xdata$x:0000C7F0                 db    0
.xdata$x:0000C7F1                 db    0
.xdata$x:0000C7F2                 db    0
.xdata$x:0000C7F3                 db    0
.xdata$x:0000C7F4                 db    0
.xdata$x:0000C7F5                 db    0
.xdata$x:0000C7F6                 db    0
.xdata$x:0000C7F7                 db    0
.xdata$x:0000C7F8 __ehfuncinfo$?buildProjectXml@ProjectPanel@@IAEXPAVTiXmlNode@@PAU_TREEITEM@@PB_W@Z db  22h ; "
.xdata$x:0000C7F8                                         ; DATA XREF: __ehhandler$?buildProjectXml@ProjectPanel@@IAEXPAVTiXmlNode@@PAU_TREEITEM@@PB_W@Z+1Eo
.xdata$x:0000C7F9                 db    5
.xdata$x:0000C7FA                 db  93h ; ô
.xdata$x:0000C7FB                 db  19h
.xdata$x:0000C7FC                 db    3
.xdata$x:0000C7FD                 db    0
.xdata$x:0000C7FE                 db    0
.xdata$x:0000C7FF                 db    0
.xdata$x:0000C800                 dd offset __unwindtable$?buildProjectXml@ProjectPanel@@IAEXPAVTiXmlNode@@PAU_TREEITEM@@PB_W@Z
.xdata$x:0000C804                 db    0
.xdata$x:0000C805                 db    0
.xdata$x:0000C806                 db    0
.xdata$x:0000C807                 db    0
.xdata$x:0000C808                 db    0
.xdata$x:0000C809                 db    0
.xdata$x:0000C80A                 db    0
.xdata$x:0000C80B                 db    0
.xdata$x:0000C80C                 db    0
.xdata$x:0000C80D                 db    0
.xdata$x:0000C80E                 db    0
.xdata$x:0000C80F                 db    0
.xdata$x:0000C810                 db    0
.xdata$x:0000C811                 db    0
.xdata$x:0000C812                 db    0
.xdata$x:0000C813                 db    0
.xdata$x:0000C814                 db    0
.xdata$x:0000C815                 db    0
.xdata$x:0000C816                 db    0
.xdata$x:0000C817                 db    0
.xdata$x:0000C818                 db    0
.xdata$x:0000C819                 db    0
.xdata$x:0000C81A                 db    0
.xdata$x:0000C81B                 db    0
.xdata$x:0000C81C __ehfuncinfo$?getRelativePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV23@PB_W@Z db  22h ; "
.xdata$x:0000C81C                                         ; DATA XREF: __ehhandler$?getRelativePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV23@PB_W@Z+1Eo
.xdata$x:0000C81D                 db    5
.xdata$x:0000C81E                 db  93h ; ô
.xdata$x:0000C81F                 db  19h
.xdata$x:0000C820                 db    1
.xdata$x:0000C821                 db    0
.xdata$x:0000C822                 db    0
.xdata$x:0000C823                 db    0
.xdata$x:0000C824                 dd offset __unwindtable$?getRelativePath@ProjectPanel@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV23@PB_W@Z
.xdata$x:0000C828                 align 20h
.xdata$x:0000C840 __ehfuncinfo$?writeWorkSpace@ProjectPanel@@IAE_NPA_W@Z db  22h ; "
.xdata$x:0000C840                                         ; DATA XREF: __ehhandler$?writeWorkSpace@ProjectPanel@@IAE_NPA_W@Z+1Eo
.xdata$x:0000C841                 db    5
.xdata$x:0000C842                 db  93h ; ô
.xdata$x:0000C843                 db  19h
.xdata$x:0000C844                 db    3
.xdata$x:0000C845                 db    0
.xdata$x:0000C846                 db    0
.xdata$x:0000C847                 db    0
.xdata$x:0000C848                 dd offset __unwindtable$?writeWorkSpace@ProjectPanel@@IAE_NPA_W@Z
.xdata$x:0000C84C                 db    0
.xdata$x:0000C84D                 db    0
.xdata$x:0000C84E                 db    0
.xdata$x:0000C84F                 db    0
.xdata$x:0000C850                 db    0
.xdata$x:0000C851                 db    0
.xdata$x:0000C852                 db    0
.xdata$x:0000C853                 db    0
.xdata$x:0000C854                 db    0
.xdata$x:0000C855                 db    0
.xdata$x:0000C856                 db    0
.xdata$x:0000C857                 db    0
.xdata$x:0000C858                 db    0
.xdata$x:0000C859                 db    0
.xdata$x:0000C85A                 db    0
.xdata$x:0000C85B                 db    0
.xdata$x:0000C85C                 db    0
.xdata$x:0000C85D                 db    0
.xdata$x:0000C85E                 db    0
.xdata$x:0000C85F                 db    0
.xdata$x:0000C860                 db    0
.xdata$x:0000C861                 db    0
.xdata$x:0000C862                 db    0
.xdata$x:0000C863                 db    0
.xdata$x:0000C864 __ehfuncinfo$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z db  22h ; "
.xdata$x:0000C864                                         ; DATA XREF: __ehhandler$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z+1Eo
.xdata$x:0000C865                 db    5
.xdata$x:0000C866                 db  93h ; ô
.xdata$x:0000C867                 db  19h
.xdata$x:0000C868                 db    5
.xdata$x:0000C869                 db    0
.xdata$x:0000C86A                 db    0
.xdata$x:0000C86B                 db    0
.xdata$x:0000C86C                 dd offset __unwindtable$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z
.xdata$x:0000C870                 db    0
.xdata$x:0000C871                 db    0
.xdata$x:0000C872                 db    0
.xdata$x:0000C873                 db    0
.xdata$x:0000C874                 db    0
.xdata$x:0000C875                 db    0
.xdata$x:0000C876                 db    0
.xdata$x:0000C877                 db    0
.xdata$x:0000C878                 db    0
.xdata$x:0000C879                 db    0
.xdata$x:0000C87A                 db    0
.xdata$x:0000C87B                 db    0
.xdata$x:0000C87C                 db    0
.xdata$x:0000C87D                 db    0
.xdata$x:0000C87E                 db    0
.xdata$x:0000C87F                 db    0
.xdata$x:0000C880                 db    0
.xdata$x:0000C881                 db    0
.xdata$x:0000C882                 db    0
.xdata$x:0000C883                 db    0
.xdata$x:0000C884                 db    0
.xdata$x:0000C885                 db    0
.xdata$x:0000C886                 db    0
.xdata$x:0000C887                 db    0
.xdata$x:0000C888 __ehfuncinfo$?addFilesFromDirectory@ProjectPanel@@IAEXPAU_TREEITEM@@@Z db  22h ; "
.xdata$x:0000C888                                         ; DATA XREF: __ehhandler$?addFilesFromDirectory@ProjectPanel@@IAEXPAU_TREEITEM@@@Z+1Eo
.xdata$x:0000C889                 db    5
.xdata$x:0000C88A                 db  93h ; ô
.xdata$x:0000C88B                 db  19h
.xdata$x:0000C88C                 db    3
.xdata$x:0000C88D                 db    0
.xdata$x:0000C88E                 db    0
.xdata$x:0000C88F                 db    0
.xdata$x:0000C890                 dd offset __unwindtable$?addFilesFromDirectory@ProjectPanel@@IAEXPAU_TREEITEM@@@Z
.xdata$x:0000C894                 db    0
.xdata$x:0000C895                 db    0
.xdata$x:0000C896                 db    0
.xdata$x:0000C897                 db    0
.xdata$x:0000C898                 db    0
.xdata$x:0000C899                 db    0
.xdata$x:0000C89A                 db    0
.xdata$x:0000C89B                 db    0
.xdata$x:0000C89C                 db    0
.xdata$x:0000C89D                 db    0
.xdata$x:0000C89E                 db    0
.xdata$x:0000C89F                 db    0
.xdata$x:0000C8A0                 db    0
.xdata$x:0000C8A1                 db    0
.xdata$x:0000C8A2                 db    0
.xdata$x:0000C8A3                 db    0
.xdata$x:0000C8A4                 db    0
.xdata$x:0000C8A5                 db    0
.xdata$x:0000C8A6                 db    0
.xdata$x:0000C8A7                 db    0
.xdata$x:0000C8A8                 db    0
.xdata$x:0000C8A9                 db    0
.xdata$x:0000C8AA                 db    0
.xdata$x:0000C8AB                 db    0
.xdata$x:0000C8AC __ehfuncinfo$?addFiles@ProjectPanel@@IAEXPAU_TREEITEM@@@Z db  22h ; "
.xdata$x:0000C8AC                                         ; DATA XREF: __ehhandler$?addFiles@ProjectPanel@@IAEXPAU_TREEITEM@@@Z+1Eo
.xdata$x:0000C8AD                 db    5
.xdata$x:0000C8AE                 db  93h ; ô
.xdata$x:0000C8AF                 db  19h
.xdata$x:0000C8B0                 db    1
.xdata$x:0000C8B1                 db    0
.xdata$x:0000C8B2                 db    0
.xdata$x:0000C8B3                 db    0
.xdata$x:0000C8B4                 dd offset __unwindtable$?addFiles@ProjectPanel@@IAEXPAU_TREEITEM@@@Z
.xdata$x:0000C8B8                 db    0
.xdata$x:0000C8B9                 db    0
.xdata$x:0000C8BA                 db    0
.xdata$x:0000C8BB                 db    0
.xdata$x:0000C8BC                 db    0
.xdata$x:0000C8BD                 db    0
.xdata$x:0000C8BE                 db    0
.xdata$x:0000C8BF                 db    0
.xdata$x:0000C8C0                 db    0
.xdata$x:0000C8C1                 db    0
.xdata$x:0000C8C2                 db    0
.xdata$x:0000C8C3                 db    0
.xdata$x:0000C8C4                 db    0
.xdata$x:0000C8C5                 db    0
.xdata$x:0000C8C6                 db    0
.xdata$x:0000C8C7                 db    0
.xdata$x:0000C8C8                 db    0
.xdata$x:0000C8C9                 db    0
.xdata$x:0000C8CA                 db    0
.xdata$x:0000C8CB                 db    0
.xdata$x:0000C8CC                 db    0
.xdata$x:0000C8CD                 db    0
.xdata$x:0000C8CE                 db    0
.xdata$x:0000C8CF                 db    0
.xdata$x:0000C8D0 __ehfuncinfo$?initMenus@ProjectPanel@@IAEXXZ db  22h ; "
.xdata$x:0000C8D0                                         ; DATA XREF: __ehhandler$?initMenus@ProjectPanel@@IAEXXZ+1Eo
.xdata$x:0000C8D1                 db    5
.xdata$x:0000C8D2                 db  93h ; ô
.xdata$x:0000C8D3                 db  19h
.xdata$x:0000C8D4                 db  1Ah
.xdata$x:0000C8D5                 db    0
.xdata$x:0000C8D6                 db    0
.xdata$x:0000C8D7                 db    0
.xdata$x:0000C8D8                 dd offset __unwindtable$?initMenus@ProjectPanel@@IAEXXZ
.xdata$x:0000C8DC                 db    0
.xdata$x:0000C8DD                 db    0
.xdata$x:0000C8DE                 db    0
.xdata$x:0000C8DF                 db    0
.xdata$x:0000C8E0                 db    0
.xdata$x:0000C8E1                 db    0
.xdata$x:0000C8E2                 db    0
.xdata$x:0000C8E3                 db    0
.xdata$x:0000C8E4                 db    0
.xdata$x:0000C8E5                 db    0
.xdata$x:0000C8E6                 db    0
.xdata$x:0000C8E7                 db    0
.xdata$x:0000C8E8                 db    0
.xdata$x:0000C8E9                 db    0
.xdata$x:0000C8EA                 db    0
.xdata$x:0000C8EB                 db    0
.xdata$x:0000C8EC                 db    0
.xdata$x:0000C8ED                 db    0
.xdata$x:0000C8EE                 db    0
.xdata$x:0000C8EF                 db    0
.xdata$x:0000C8F0                 db    0
.xdata$x:0000C8F1                 db    0
.xdata$x:0000C8F2                 db    0
.xdata$x:0000C8F3                 db    0
.xdata$x:0000C8F4 __ehfuncinfo$?saveWorkSpaceAs@ProjectPanel@@QAE_N_N@Z db  22h ; "
.xdata$x:0000C8F4                                         ; DATA XREF: __ehhandler$?saveWorkSpaceAs@ProjectPanel@@QAE_N_N@Z+1Eo
.xdata$x:0000C8F5                 db    5
.xdata$x:0000C8F6                 db  93h ; ô
.xdata$x:0000C8F7                 db  19h
.xdata$x:0000C8F8                 db    1
.xdata$x:0000C8F9                 db    0
.xdata$x:0000C8FA                 db    0
.xdata$x:0000C8FB                 db    0
.xdata$x:0000C8FC                 dd offset __unwindtable$?saveWorkSpaceAs@ProjectPanel@@QAE_N_N@Z
.xdata$x:0000C900                 db    0
.xdata$x:0000C901                 db    0
.xdata$x:0000C902                 db    0
.xdata$x:0000C903                 db    0
.xdata$x:0000C904                 db    0
.xdata$x:0000C905                 db    0
.xdata$x:0000C906                 db    0
.xdata$x:0000C907                 db    0
.xdata$x:0000C908                 db    0
.xdata$x:0000C909                 db    0
.xdata$x:0000C90A                 db    0
.xdata$x:0000C90B                 db    0
.xdata$x:0000C90C                 db    0
.xdata$x:0000C90D                 db    0
.xdata$x:0000C90E                 db    0
.xdata$x:0000C90F                 db    0
.xdata$x:0000C910                 db    0
.xdata$x:0000C911                 db    0
.xdata$x:0000C912                 db    0
.xdata$x:0000C913                 db    0
.xdata$x:0000C914                 db    0
.xdata$x:0000C915                 db    0
.xdata$x:0000C916                 db    0
.xdata$x:0000C917                 db    0
.xdata$x:0000C918 __ehfuncinfo$?openWorkSpace@ProjectPanel@@QAE_NPB_W@Z db  22h ; "
.xdata$x:0000C918                                         ; DATA XREF: __ehhandler$?openWorkSpace@ProjectPanel@@QAE_NPB_W@Z+1Bo
.xdata$x:0000C919                 db    5
.xdata$x:0000C91A                 db  93h ; ô
.xdata$x:0000C91B                 db  19h
.xdata$x:0000C91C                 db    2
.xdata$x:0000C91D                 db    0
.xdata$x:0000C91E                 db    0
.xdata$x:0000C91F                 db    0
.xdata$x:0000C920                 dd offset __unwindtable$?openWorkSpace@ProjectPanel@@QAE_NPB_W@Z
.xdata$x:0000C924                 db    0
.xdata$x:0000C925                 db    0
.xdata$x:0000C926                 db    0
.xdata$x:0000C927                 db    0
.xdata$x:0000C928                 db    0
.xdata$x:0000C929                 db    0
.xdata$x:0000C92A                 db    0
.xdata$x:0000C92B                 db    0
.xdata$x:0000C92C                 db    0
.xdata$x:0000C92D                 db    0
.xdata$x:0000C92E                 db    0
.xdata$x:0000C92F                 db    0
.xdata$x:0000C930                 db    0
.xdata$x:0000C931                 db    0
.xdata$x:0000C932                 db    0
.xdata$x:0000C933                 db    0
.xdata$x:0000C934                 db    0
.xdata$x:0000C935                 db    0
.xdata$x:0000C936                 db    0
.xdata$x:0000C937                 db    0
.xdata$x:0000C938                 db    0
.xdata$x:0000C939                 db    0
.xdata$x:0000C93A                 db    0
.xdata$x:0000C93B                 db    0
.xdata$x:0000C93C __ehfuncinfo$?newWorkSpace@ProjectPanel@@QAEXXZ db  22h ; "
.xdata$x:0000C93C                                         ; DATA XREF: __ehhandler$?newWorkSpace@ProjectPanel@@QAEXXZ+1Bo
.xdata$x:0000C93D                 db    5
.xdata$x:0000C93E                 db  93h ; ô
.xdata$x:0000C93F                 db  19h
.xdata$x:0000C940                 db    1
.xdata$x:0000C941                 db    0
.xdata$x:0000C942                 db    0
.xdata$x:0000C943                 db    0
.xdata$x:0000C944                 dd offset __unwindtable$?newWorkSpace@ProjectPanel@@QAEXXZ
.xdata$x:0000C948                 align 20h
.xdata$x:0000C960 __unwindtable$?popupMenuCmd@ProjectPanel@@IAEXH@Z db 0FFh
.xdata$x:0000C960                                         ; DATA XREF: .xdata$x:0000C7DCo
.xdata$x:0000C961                 db 0FFh
.xdata$x:0000C962                 db 0FFh
.xdata$x:0000C963                 db 0FFh
.xdata$x:0000C964                 dd offset __unwindfunclet$?popupMenuCmd@ProjectPanel@@IAEXH@Z$0
.xdata$x:0000C968                 db 0FFh
.xdata$x:0000C969                 db 0FFh
.xdata$x:0000C96A                 db 0FFh
.xdata$x:0000C96B                 db 0FFh
.xdata$x:0000C96C                 dd offset __unwindfunclet$?popupMenuCmd@ProjectPanel@@IAEXH@Z$1
.xdata$x:0000C970                 db 0FFh
.xdata$x:0000C971                 db 0FFh
.xdata$x:0000C972                 db 0FFh
.xdata$x:0000C973                 db 0FFh
.xdata$x:0000C974                 dd offset __unwindfunclet$?popupMenuCmd@ProjectPanel@@IAEXH@Z$2
.xdata$x:0000C978                 db 0FFh
.xdata$x:0000C979                 db 0FFh
.xdata$x:0000C97A                 db 0FFh
.xdata$x:0000C97B                 db 0FFh
.xdata$x:0000C97C                 dd offset __unwindfunclet$?popupMenuCmd@ProjectPanel@@IAEXH@Z$3
.xdata$x:0000C980                 db    3
.xdata$x:0000C981                 db    0
.xdata$x:0000C982                 db    0
.xdata$x:0000C983                 db    0
.xdata$x:0000C984                 dd offset __unwindfunclet$?popupMenuCmd@ProjectPanel@@IAEXH@Z$4
.xdata$x:0000C988 __unwindtable$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z db 0FFh
.xdata$x:0000C988                                         ; DATA XREF: .xdata$x:0000C86Co
.xdata$x:0000C989                 db 0FFh
.xdata$x:0000C98A                 db 0FFh
.xdata$x:0000C98B                 db 0FFh
.xdata$x:0000C98C                 dd offset __unwindfunclet$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z$0
.xdata$x:0000C990                 db    0
.xdata$x:0000C991                 db    0
.xdata$x:0000C992                 db    0
.xdata$x:0000C993                 db    0
.xdata$x:0000C994                 dd offset __unwindfunclet$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z$1
.xdata$x:0000C998                 db    1
.xdata$x:0000C999                 db    0
.xdata$x:0000C99A                 db    0
.xdata$x:0000C99B                 db    0
.xdata$x:0000C99C                 dd offset __unwindfunclet$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z$2
.xdata$x:0000C9A0                 db    1
.xdata$x:0000C9A1                 db    0
.xdata$x:0000C9A2                 db    0
.xdata$x:0000C9A3                 db    0
.xdata$x:0000C9A4                 dd offset __unwindfunclet$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z$3
.xdata$x:0000C9A8                 db    1
.xdata$x:0000C9A9                 db    0
.xdata$x:0000C9AA                 db    0
.xdata$x:0000C9AB                 db    0
.xdata$x:0000C9AC                 dd offset __unwindfunclet$?recursiveAddFilesFrom@ProjectPanel@@IAEXPB_WPAU_TREEITEM@@@Z$4
.xdata$x:0000C9B0 __unwindtable$?initMenus@ProjectPanel@@IAEXXZ db 0FFh
.xdata$x:0000C9B0                                         ; DATA XREF: .xdata$x:0000C8D8o
.xdata$x:0000C9B1                 db 0FFh
.xdata$x:0000C9B2                 db 0FFh
.xdata$x:0000C9B3                 db 0FFh
.xdata$x:0000C9B4                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$0
.xdata$x:0000C9B8                 db    0
.xdata$x:0000C9B9                 db    0
.xdata$x:0000C9BA                 db    0
.xdata$x:0000C9BB                 db    0
.xdata$x:0000C9BC                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$1
.xdata$x:0000C9C0                 db    1
.xdata$x:0000C9C1                 db    0
.xdata$x:0000C9C2                 db    0
.xdata$x:0000C9C3                 db    0
.xdata$x:0000C9C4                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$2
.xdata$x:0000C9C8                 db    2
.xdata$x:0000C9C9                 db    0
.xdata$x:0000C9CA                 db    0
.xdata$x:0000C9CB                 db    0
.xdata$x:0000C9CC                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$3
.xdata$x:0000C9D0                 db    3
.xdata$x:0000C9D1                 db    0
.xdata$x:0000C9D2                 db    0
.xdata$x:0000C9D3                 db    0
.xdata$x:0000C9D4                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$4
.xdata$x:0000C9D8                 db    4
.xdata$x:0000C9D9                 db    0
.xdata$x:0000C9DA                 db    0
.xdata$x:0000C9DB                 db    0
.xdata$x:0000C9DC                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$5
.xdata$x:0000C9E0                 db    5
.xdata$x:0000C9E1                 db    0
.xdata$x:0000C9E2                 db    0
.xdata$x:0000C9E3                 db    0
.xdata$x:0000C9E4                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$6
.xdata$x:0000C9E8                 db    6
.xdata$x:0000C9E9                 db    0
.xdata$x:0000C9EA                 db    0
.xdata$x:0000C9EB                 db    0
.xdata$x:0000C9EC                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$7
.xdata$x:0000C9F0                 db    7
.xdata$x:0000C9F1                 db    0
.xdata$x:0000C9F2                 db    0
.xdata$x:0000C9F3                 db    0
.xdata$x:0000C9F4                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$8
.xdata$x:0000C9F8                 db    8
.xdata$x:0000C9F9                 db    0
.xdata$x:0000C9FA                 db    0
.xdata$x:0000C9FB                 db    0
.xdata$x:0000C9FC                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$9
.xdata$x:0000CA00                 db    9
.xdata$x:0000CA01                 db    0
.xdata$x:0000CA02                 db    0
.xdata$x:0000CA03                 db    0
.xdata$x:0000CA04                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$10
.xdata$x:0000CA08                 db  0Ah
.xdata$x:0000CA09                 db    0
.xdata$x:0000CA0A                 db    0
.xdata$x:0000CA0B                 db    0
.xdata$x:0000CA0C                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$11
.xdata$x:0000CA10                 db  0Bh
.xdata$x:0000CA11                 db    0
.xdata$x:0000CA12                 db    0
.xdata$x:0000CA13                 db    0
.xdata$x:0000CA14                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$12
.xdata$x:0000CA18                 db  0Ch
.xdata$x:0000CA19                 db    0
.xdata$x:0000CA1A                 db    0
.xdata$x:0000CA1B                 db    0
.xdata$x:0000CA1C                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$13
.xdata$x:0000CA20                 db  0Dh
.xdata$x:0000CA21                 db    0
.xdata$x:0000CA22                 db    0
.xdata$x:0000CA23                 db    0
.xdata$x:0000CA24                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$14
.xdata$x:0000CA28                 db  0Dh
.xdata$x:0000CA29                 db    0
.xdata$x:0000CA2A                 db    0
.xdata$x:0000CA2B                 db    0
.xdata$x:0000CA2C                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$15
.xdata$x:0000CA30                 db  0Dh
.xdata$x:0000CA31                 db    0
.xdata$x:0000CA32                 db    0
.xdata$x:0000CA33                 db    0
.xdata$x:0000CA34                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$16
.xdata$x:0000CA38                 db  0Dh
.xdata$x:0000CA39                 db    0
.xdata$x:0000CA3A                 db    0
.xdata$x:0000CA3B                 db    0
.xdata$x:0000CA3C                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$17
.xdata$x:0000CA40                 db  0Dh
.xdata$x:0000CA41                 db    0
.xdata$x:0000CA42                 db    0
.xdata$x:0000CA43                 db    0
.xdata$x:0000CA44                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$18
.xdata$x:0000CA48                 db  0Dh
.xdata$x:0000CA49                 db    0
.xdata$x:0000CA4A                 db    0
.xdata$x:0000CA4B                 db    0
.xdata$x:0000CA4C                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$19
.xdata$x:0000CA50                 db  0Dh
.xdata$x:0000CA51                 db    0
.xdata$x:0000CA52                 db    0
.xdata$x:0000CA53                 db    0
.xdata$x:0000CA54                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$20
.xdata$x:0000CA58                 db  0Dh
.xdata$x:0000CA59                 db    0
.xdata$x:0000CA5A                 db    0
.xdata$x:0000CA5B                 db    0
.xdata$x:0000CA5C                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$21
.xdata$x:0000CA60                 db  0Dh
.xdata$x:0000CA61                 db    0
.xdata$x:0000CA62                 db    0
.xdata$x:0000CA63                 db    0
.xdata$x:0000CA64                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$22
.xdata$x:0000CA68                 db  0Dh
.xdata$x:0000CA69                 db    0
.xdata$x:0000CA6A                 db    0
.xdata$x:0000CA6B                 db    0
.xdata$x:0000CA6C                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$23
.xdata$x:0000CA70                 db  0Dh
.xdata$x:0000CA71                 db    0
.xdata$x:0000CA72                 db    0
.xdata$x:0000CA73                 db    0
.xdata$x:0000CA74                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$24
.xdata$x:0000CA78                 db  0Dh
.xdata$x:0000CA79                 db    0
.xdata$x:0000CA7A                 db    0
.xdata$x:0000CA7B                 db    0
.xdata$x:0000CA7C                 dd offset __unwindfunclet$?initMenus@ProjectPanel@@IAEXXZ$25
.xdata$x:0000CA7C _xdata$x        ends
.xdata$x:0000CA7C
.xdata$x:0000CA80 ; ===========================================================================
.xdata$x:0000CA80
.xdata$x:0000CA80 ; Segment type: Pure data
.xdata$x:0000CA80 ; Segment permissions: Read
.xdata$x:0000CA80 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CA80                 assume cs:_xdata$x
.xdata$x:0000CA80                 ;org 0CA80h
.xdata$x:0000CA80 ; COMDAT (pick associative to section at 6B48)
.xdata$x:0000CA80 __unwindtable$??0FileRelocalizerDlg@@QAE@XZ db 0FFh
.xdata$x:0000CA80                                         ; DATA XREF: .xdata$x:0000CA98o
.xdata$x:0000CA81                 db 0FFh
.xdata$x:0000CA82                 db 0FFh
.xdata$x:0000CA83                 db 0FFh
.xdata$x:0000CA84                 dd offset __unwindfunclet$??0FileRelocalizerDlg@@QAE@XZ$0
.xdata$x:0000CA88                 db    0
.xdata$x:0000CA89                 db    0
.xdata$x:0000CA8A                 db    0
.xdata$x:0000CA8B                 db    0
.xdata$x:0000CA8C                 dd offset __unwindfunclet$??0FileRelocalizerDlg@@QAE@XZ$1
.xdata$x:0000CA90 __ehfuncinfo$??0FileRelocalizerDlg@@QAE@XZ db  22h ; "
.xdata$x:0000CA90                                         ; DATA XREF: __ehhandler$??0FileRelocalizerDlg@@QAE@XZ+11o
.xdata$x:0000CA91                 db    5
.xdata$x:0000CA92                 db  93h ; ô
.xdata$x:0000CA93                 db  19h
.xdata$x:0000CA94                 db    2
.xdata$x:0000CA95                 db    0
.xdata$x:0000CA96                 db    0
.xdata$x:0000CA97                 db    0
.xdata$x:0000CA98                 dd offset __unwindtable$??0FileRelocalizerDlg@@QAE@XZ
.xdata$x:0000CA9C                 db    0
.xdata$x:0000CA9D                 db    0
.xdata$x:0000CA9E                 db    0
.xdata$x:0000CA9F                 db    0
.xdata$x:0000CAA0                 db    0
.xdata$x:0000CAA1                 db    0
.xdata$x:0000CAA2                 db    0
.xdata$x:0000CAA3                 db    0
.xdata$x:0000CAA4                 db    0
.xdata$x:0000CAA5                 db    0
.xdata$x:0000CAA6                 db    0
.xdata$x:0000CAA7                 db    0
.xdata$x:0000CAA8                 db    0
.xdata$x:0000CAA9                 db    0
.xdata$x:0000CAAA                 db    0
.xdata$x:0000CAAB                 db    0
.xdata$x:0000CAAC                 db    0
.xdata$x:0000CAAD                 db    0
.xdata$x:0000CAAE                 db    0
.xdata$x:0000CAAF                 db    0
.xdata$x:0000CAB0                 db    0
.xdata$x:0000CAB1                 db    0
.xdata$x:0000CAB2                 db    0
.xdata$x:0000CAB3                 db    0
.xdata$x:0000CAB3 _xdata$x        ends
.xdata$x:0000CAB3
.xdata$x:0000CAB4 ; ===========================================================================
.xdata$x:0000CAB4
.xdata$x:0000CAB4 ; Segment type: Pure data
.xdata$x:0000CAB4 ; Segment permissions: Read
.xdata$x:0000CAB4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CAB4                 assume cs:_xdata$x
.xdata$x:0000CAB4                 ;org 0CAB4h
.xdata$x:0000CAB4 ; COMDAT (pick associative to section at A828)
.xdata$x:0000CAB4 __unwindtable$?getFullFilePath@FileRelocalizerDlg@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ db 0FFh
.xdata$x:0000CAB4                                         ; DATA XREF: .xdata$x:0000CAC4o
.xdata$x:0000CAB5                 db 0FFh
.xdata$x:0000CAB6                 db 0FFh
.xdata$x:0000CAB7                 db 0FFh
.xdata$x:0000CAB8                 dd offset __unwindfunclet$?getFullFilePath@FileRelocalizerDlg@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0
.xdata$x:0000CABC __ehfuncinfo$?getFullFilePath@FileRelocalizerDlg@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ db  22h ; "
.xdata$x:0000CABC                                         ; DATA XREF: __ehhandler$?getFullFilePath@FileRelocalizerDlg@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ+11o
.xdata$x:0000CABD                 db    5
.xdata$x:0000CABE                 db  93h ; ô
.xdata$x:0000CABF                 db  19h
.xdata$x:0000CAC0                 db    1
.xdata$x:0000CAC1                 db    0
.xdata$x:0000CAC2                 db    0
.xdata$x:0000CAC3                 db    0
.xdata$x:0000CAC4                 dd offset __unwindtable$?getFullFilePath@FileRelocalizerDlg@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.xdata$x:0000CAC8                 align 20h
.xdata$x:0000CAC8 _xdata$x        ends
.xdata$x:0000CAC8
.xdata$x:0000CAE0 ; ===========================================================================
.xdata$x:0000CAE0
.xdata$x:0000CAE0 ; Segment type: Pure data
.xdata$x:0000CAE0 ; Segment permissions: Read
.xdata$x:0000CAE0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CAE0                 assume cs:_xdata$x
.xdata$x:0000CAE0                 ;org 0CAE0h
.xdata$x:0000CAE0 ; COMDAT (pick associative to section at 7464)
.xdata$x:0000CAE0 __unwindtable$??1FileRelocalizerDlg@@UAE@XZ db 0FFh
.xdata$x:0000CAE0                                         ; DATA XREF: .xdata$x:0000CAF8o
.xdata$x:0000CAE1                 db 0FFh
.xdata$x:0000CAE2                 db 0FFh
.xdata$x:0000CAE3                 db 0FFh
.xdata$x:0000CAE4                 dd offset __unwindfunclet$??1FileRelocalizerDlg@@UAE@XZ$0
.xdata$x:0000CAE8                 db    0
.xdata$x:0000CAE9                 db    0
.xdata$x:0000CAEA                 db    0
.xdata$x:0000CAEB                 db    0
.xdata$x:0000CAEC                 dd offset __unwindfunclet$??1FileRelocalizerDlg@@UAE@XZ$1
.xdata$x:0000CAF0 __ehfuncinfo$??1FileRelocalizerDlg@@UAE@XZ db  22h ; "
.xdata$x:0000CAF0                                         ; DATA XREF: __ehhandler$??1FileRelocalizerDlg@@UAE@XZ+11o
.xdata$x:0000CAF1                 db    5
.xdata$x:0000CAF2                 db  93h ; ô
.xdata$x:0000CAF3                 db  19h
.xdata$x:0000CAF4                 db    2
.xdata$x:0000CAF5                 db    0
.xdata$x:0000CAF6                 db    0
.xdata$x:0000CAF7                 db    0
.xdata$x:0000CAF8                 dd offset __unwindtable$??1FileRelocalizerDlg@@UAE@XZ
.xdata$x:0000CAFC                 db    0
.xdata$x:0000CAFD                 db    0
.xdata$x:0000CAFE                 db    0
.xdata$x:0000CAFF                 db    0
.xdata$x:0000CB00                 db    0
.xdata$x:0000CB01                 db    0
.xdata$x:0000CB02                 db    0
.xdata$x:0000CB03                 db    0
.xdata$x:0000CB04                 db    0
.xdata$x:0000CB05                 db    0
.xdata$x:0000CB06                 db    0
.xdata$x:0000CB07                 db    0
.xdata$x:0000CB08                 db    0
.xdata$x:0000CB09                 db    0
.xdata$x:0000CB0A                 db    0
.xdata$x:0000CB0B                 db    0
.xdata$x:0000CB0C                 db    0
.xdata$x:0000CB0D                 db    0
.xdata$x:0000CB0E                 db    0
.xdata$x:0000CB0F                 db    0
.xdata$x:0000CB10                 db    0
.xdata$x:0000CB11                 db    0
.xdata$x:0000CB12                 db    0
.xdata$x:0000CB13                 db    0
.xdata$x:0000CB13 _xdata$x        ends
.xdata$x:0000CB13
.xdata$x:0000CB14 ; ===========================================================================
.xdata$x:0000CB14
.xdata$x:0000CB14 ; Segment type: Pure data
.xdata$x:0000CB14 ; Segment permissions: Read
.xdata$x:0000CB14 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CB14                 assume cs:_xdata$x
.xdata$x:0000CB14                 ;org 0CB14h
.xdata$x:0000CB14 ; COMDAT (pick associative to section at 7590)
.xdata$x:0000CB14 __unwindtable$??1TiXmlDocument@@UAE@XZ db 0FFh
.xdata$x:0000CB14                                         ; DATA XREF: .xdata$x:0000CB2Co
.xdata$x:0000CB15                 db 0FFh
.xdata$x:0000CB16                 db 0FFh
.xdata$x:0000CB17                 db 0FFh
.xdata$x:0000CB18                 dd offset __unwindfunclet$??1TiXmlDocument@@UAE@XZ$0
.xdata$x:0000CB1C                 align 10h
.xdata$x:0000CB20                 dd offset __unwindfunclet$??1TiXmlDocument@@UAE@XZ$1
.xdata$x:0000CB24 __ehfuncinfo$??1TiXmlDocument@@UAE@XZ db  22h ; "
.xdata$x:0000CB24                                         ; DATA XREF: __ehhandler$??1TiXmlDocument@@UAE@XZ+11o
.xdata$x:0000CB25                 db    5
.xdata$x:0000CB26                 db  93h ; ô
.xdata$x:0000CB27                 db  19h
.xdata$x:0000CB28                 db    2
.xdata$x:0000CB29                 db    0
.xdata$x:0000CB2A                 db    0
.xdata$x:0000CB2B                 db    0
.xdata$x:0000CB2C                 dd offset __unwindtable$??1TiXmlDocument@@UAE@XZ
.xdata$x:0000CB30                 db    0
.xdata$x:0000CB31                 db    0
.xdata$x:0000CB32                 db    0
.xdata$x:0000CB33                 db    0
.xdata$x:0000CB34                 db    0
.xdata$x:0000CB35                 db    0
.xdata$x:0000CB36                 db    0
.xdata$x:0000CB37                 db    0
.xdata$x:0000CB38                 db    0
.xdata$x:0000CB39                 db    0
.xdata$x:0000CB3A                 db    0
.xdata$x:0000CB3B                 db    0
.xdata$x:0000CB3C                 db    0
.xdata$x:0000CB3D                 db    0
.xdata$x:0000CB3E                 db    0
.xdata$x:0000CB3F                 db    0
.xdata$x:0000CB40                 db    0
.xdata$x:0000CB41                 db    0
.xdata$x:0000CB42                 db    0
.xdata$x:0000CB43                 db    0
.xdata$x:0000CB44                 db    0
.xdata$x:0000CB45                 db    0
.xdata$x:0000CB46                 db    0
.xdata$x:0000CB47                 db    0
.xdata$x:0000CB47 _xdata$x        ends
.xdata$x:0000CB47
.xdata$x:0000CB48 ; ===========================================================================
.xdata$x:0000CB48
.xdata$x:0000CB48 ; Segment type: Pure data
.xdata$x:0000CB48 ; Segment permissions: Read
.xdata$x:0000CB48 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CB48                 assume cs:_xdata$x
.xdata$x:0000CB48                 ;org 0CB48h
.xdata$x:0000CB48 ; COMDAT (pick associative to section at 6634)
.xdata$x:0000CB48 __unwindtable$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000CB48                                         ; DATA XREF: .xdata$x:0000CB58o
.xdata$x:0000CB49                 db 0FFh
.xdata$x:0000CB4A                 db 0FFh
.xdata$x:0000CB4B                 db 0FFh
.xdata$x:0000CB4C                 dd offset __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000CB50 __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000CB50                                         ; DATA XREF: __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000CB51                 db    5
.xdata$x:0000CB52                 db  93h ; ô
.xdata$x:0000CB53                 db  19h
.xdata$x:0000CB54                 db    1
.xdata$x:0000CB55                 db    0
.xdata$x:0000CB56                 db    0
.xdata$x:0000CB57                 db    0
.xdata$x:0000CB58                 dd offset __unwindtable$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.xdata$x:0000CB5C                 db    0
.xdata$x:0000CB5D                 db    0
.xdata$x:0000CB5E                 db    0
.xdata$x:0000CB5F                 db    0
.xdata$x:0000CB60                 db    0
.xdata$x:0000CB61                 db    0
.xdata$x:0000CB62                 db    0
.xdata$x:0000CB63                 db    0
.xdata$x:0000CB64                 db    0
.xdata$x:0000CB65                 db    0
.xdata$x:0000CB66                 db    0
.xdata$x:0000CB67                 db    0
.xdata$x:0000CB68                 db    0
.xdata$x:0000CB69                 db    0
.xdata$x:0000CB6A                 db    0
.xdata$x:0000CB6B                 db    0
.xdata$x:0000CB6C                 db    0
.xdata$x:0000CB6D                 db    0
.xdata$x:0000CB6E                 db    0
.xdata$x:0000CB6F                 db    0
.xdata$x:0000CB70                 db    0
.xdata$x:0000CB71                 db    0
.xdata$x:0000CB72                 db    0
.xdata$x:0000CB73                 db    0
.xdata$x:0000CB73 _xdata$x        ends
.xdata$x:0000CB73
.xdata$x:0000CB74 ; ===========================================================================
.xdata$x:0000CB74
.xdata$x:0000CB74 ; Segment type: Pure data
.xdata$x:0000CB74 ; Segment permissions: Read
.xdata$x:0000CB74 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CB74                 assume cs:_xdata$x
.xdata$x:0000CB74                 ;org 0CB74h
.xdata$x:0000CB74 ; COMDAT (pick associative to section at 7284)
.xdata$x:0000CB74 __unwindtable$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000CB74                                         ; DATA XREF: .xdata$x:0000CB84o
.xdata$x:0000CB75                 db 0FFh
.xdata$x:0000CB76                 db 0FFh
.xdata$x:0000CB77                 db 0FFh
.xdata$x:0000CB78                 dd offset __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000CB7C __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000CB7C                                         ; DATA XREF: __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000CB7D                 db    5
.xdata$x:0000CB7E                 db  93h ; ô
.xdata$x:0000CB7F                 db  19h
.xdata$x:0000CB80                 db    1
.xdata$x:0000CB81                 db    0
.xdata$x:0000CB82                 db    0
.xdata$x:0000CB83                 db    0
.xdata$x:0000CB84                 dd offset __unwindtable$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.xdata$x:0000CB88                 align 20h
.xdata$x:0000CB88 _xdata$x        ends
.xdata$x:0000CB88
.xdata$x:0000CBA0 ; ===========================================================================
.xdata$x:0000CBA0
.xdata$x:0000CBA0 ; Segment type: Pure data
.xdata$x:0000CBA0 ; Segment permissions: Read
.xdata$x:0000CBA0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CBA0                 assume cs:_xdata$x
.xdata$x:0000CBA0                 ;org 0CBA0h
.xdata$x:0000CBA0 ; COMDAT (pick associative to section at 65B8)
.xdata$x:0000CBA0 __unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z db 0FFh
.xdata$x:0000CBA0                                         ; DATA XREF: .xdata$x:0000CBB0o
.xdata$x:0000CBA1                 db 0FFh
.xdata$x:0000CBA2                 db 0FFh
.xdata$x:0000CBA3                 db 0FFh
.xdata$x:0000CBA4                 dd offset __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0
.xdata$x:0000CBA8 __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z db  22h ; "
.xdata$x:0000CBA8                                         ; DATA XREF: __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z+11o
.xdata$x:0000CBA9                 db    5
.xdata$x:0000CBAA                 db  93h ; ô
.xdata$x:0000CBAB                 db  19h
.xdata$x:0000CBAC                 db    1
.xdata$x:0000CBAD                 db    0
.xdata$x:0000CBAE                 db    0
.xdata$x:0000CBAF                 db    0
.xdata$x:0000CBB0                 dd offset __unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.xdata$x:0000CBB4                 db    0
.xdata$x:0000CBB5                 db    0
.xdata$x:0000CBB6                 db    0
.xdata$x:0000CBB7                 db    0
.xdata$x:0000CBB8                 db    0
.xdata$x:0000CBB9                 db    0
.xdata$x:0000CBBA                 db    0
.xdata$x:0000CBBB                 db    0
.xdata$x:0000CBBC                 db    0
.xdata$x:0000CBBD                 db    0
.xdata$x:0000CBBE                 db    0
.xdata$x:0000CBBF                 db    0
.xdata$x:0000CBC0                 db    0
.xdata$x:0000CBC1                 db    0
.xdata$x:0000CBC2                 db    0
.xdata$x:0000CBC3                 db    0
.xdata$x:0000CBC4                 db    0
.xdata$x:0000CBC5                 db    0
.xdata$x:0000CBC6                 db    0
.xdata$x:0000CBC7                 db    0
.xdata$x:0000CBC8                 db    0
.xdata$x:0000CBC9                 db    0
.xdata$x:0000CBCA                 db    0
.xdata$x:0000CBCB                 db    0
.xdata$x:0000CBCB _xdata$x        ends
.xdata$x:0000CBCB
.xdata$x:0000CBCC ; ===========================================================================
.xdata$x:0000CBCC
.xdata$x:0000CBCC ; Segment type: Pure data
.xdata$x:0000CBCC ; Segment permissions: Read
.xdata$x:0000CBCC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CBCC                 assume cs:_xdata$x
.xdata$x:0000CBCC                 ;org 0CBCCh
.xdata$x:0000CBCC ; COMDAT (pick associative to section at 720C)
.xdata$x:0000CBCC __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000CBCC                                         ; DATA XREF: .xdata$x:0000CBDCo
.xdata$x:0000CBCD                 db 0FFh
.xdata$x:0000CBCE                 db 0FFh
.xdata$x:0000CBCF                 db 0FFh
.xdata$x:0000CBD0                 dd offset __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ$0
.xdata$x:0000CBD4 __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000CBD4                                         ; DATA XREF: __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ+11o
.xdata$x:0000CBD5                 db    5
.xdata$x:0000CBD6                 db  93h ; ô
.xdata$x:0000CBD7                 db  19h
.xdata$x:0000CBD8                 db    1
.xdata$x:0000CBD9                 db    0
.xdata$x:0000CBDA                 db    0
.xdata$x:0000CBDB                 db    0
.xdata$x:0000CBDC                 dd offset __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.xdata$x:0000CBE0                 db    0
.xdata$x:0000CBE1                 db    0
.xdata$x:0000CBE2                 db    0
.xdata$x:0000CBE3                 db    0
.xdata$x:0000CBE4                 db    0
.xdata$x:0000CBE5                 db    0
.xdata$x:0000CBE6                 db    0
.xdata$x:0000CBE7                 db    0
.xdata$x:0000CBE8                 db    0
.xdata$x:0000CBE9                 db    0
.xdata$x:0000CBEA                 db    0
.xdata$x:0000CBEB                 db    0
.xdata$x:0000CBEC                 db    0
.xdata$x:0000CBED                 db    0
.xdata$x:0000CBEE                 db    0
.xdata$x:0000CBEF                 db    0
.xdata$x:0000CBF0                 db    0
.xdata$x:0000CBF1                 db    0
.xdata$x:0000CBF2                 db    0
.xdata$x:0000CBF3                 db    0
.xdata$x:0000CBF4                 db    0
.xdata$x:0000CBF5                 db    0
.xdata$x:0000CBF6                 db    0
.xdata$x:0000CBF7                 db    0
.xdata$x:0000CBF7 _xdata$x        ends
.xdata$x:0000CBF7
.xdata$x:0000CBF8 ; ===========================================================================
.xdata$x:0000CBF8
.xdata$x:0000CBF8 ; Segment type: Pure data
.xdata$x:0000CBF8 ; Segment permissions: Read
.xdata$x:0000CBF8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CBF8                 assume cs:_xdata$x
.xdata$x:0000CBF8                 ;org 0CBF8h
.xdata$x:0000CBF8 ; COMDAT (pick associative to section at 6AC8)
.xdata$x:0000CBF8 __unwindtable$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000CBF8                                         ; DATA XREF: .xdata$x:0000CC08o
.xdata$x:0000CBF9                 db 0FFh
.xdata$x:0000CBFA                 db 0FFh
.xdata$x:0000CBFB                 db 0FFh
.xdata$x:0000CBFC                 dd offset __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0
.xdata$x:0000CC00 __ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000CC00                                         ; DATA XREF: __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ+11o
.xdata$x:0000CC01                 db    5
.xdata$x:0000CC02                 db  93h ; ô
.xdata$x:0000CC03                 db  19h
.xdata$x:0000CC04                 db    1
.xdata$x:0000CC05                 db    0
.xdata$x:0000CC06                 db    0
.xdata$x:0000CC07                 db    0
.xdata$x:0000CC08                 dd offset __unwindtable$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.xdata$x:0000CC0C                 db    0
.xdata$x:0000CC0D                 db    0
.xdata$x:0000CC0E                 db    0
.xdata$x:0000CC0F                 db    0
.xdata$x:0000CC10                 db    0
.xdata$x:0000CC11                 db    0
.xdata$x:0000CC12                 db    0
.xdata$x:0000CC13                 db    0
.xdata$x:0000CC14                 db    0
.xdata$x:0000CC15                 db    0
.xdata$x:0000CC16                 db    0
.xdata$x:0000CC17                 db    0
.xdata$x:0000CC18                 db    0
.xdata$x:0000CC19                 db    0
.xdata$x:0000CC1A                 db    0
.xdata$x:0000CC1B                 db    0
.xdata$x:0000CC1C                 db    0
.xdata$x:0000CC1D                 db    0
.xdata$x:0000CC1E                 db    0
.xdata$x:0000CC1F                 db    0
.xdata$x:0000CC20                 db    0
.xdata$x:0000CC21                 db    0
.xdata$x:0000CC22                 db    0
.xdata$x:0000CC23                 db    0
.xdata$x:0000CC23 _xdata$x        ends
.xdata$x:0000CC23
.xdata$x:0000CC24 ; ===========================================================================
.xdata$x:0000CC24
.xdata$x:0000CC24 ; Segment type: Pure data
.xdata$x:0000CC24 ; Segment permissions: Read
.xdata$x:0000CC24 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CC24                 assume cs:_xdata$x
.xdata$x:0000CC24                 ;org 0CC24h
.xdata$x:0000CC24 ; COMDAT (pick associative to section at 73EC)
.xdata$x:0000CC24 __unwindtable$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000CC24                                         ; DATA XREF: .xdata$x:0000CC34o
.xdata$x:0000CC25                 db 0FFh
.xdata$x:0000CC26                 db 0FFh
.xdata$x:0000CC27                 db 0FFh
.xdata$x:0000CC28                 dd offset __unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0
.xdata$x:0000CC2C __ehfuncinfo$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000CC2C                                         ; DATA XREF: __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ+11o
.xdata$x:0000CC2D                 db    5
.xdata$x:0000CC2E                 db  93h ; ô
.xdata$x:0000CC2F                 db  19h
.xdata$x:0000CC30                 db    1
.xdata$x:0000CC31                 db    0
.xdata$x:0000CC32                 db    0
.xdata$x:0000CC33                 db    0
.xdata$x:0000CC34                 dd offset __unwindtable$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.xdata$x:0000CC38                 db    0
.xdata$x:0000CC39                 db    0
.xdata$x:0000CC3A                 db    0
.xdata$x:0000CC3B                 db    0
.xdata$x:0000CC3C                 db    0
.xdata$x:0000CC3D                 db    0
.xdata$x:0000CC3E                 db    0
.xdata$x:0000CC3F                 db    0
.xdata$x:0000CC40                 db    0
.xdata$x:0000CC41                 db    0
.xdata$x:0000CC42                 db    0
.xdata$x:0000CC43                 db    0
.xdata$x:0000CC44                 db    0
.xdata$x:0000CC45                 db    0
.xdata$x:0000CC46                 db    0
.xdata$x:0000CC47                 db    0
.xdata$x:0000CC48                 db    0
.xdata$x:0000CC49                 db    0
.xdata$x:0000CC4A                 db    0
.xdata$x:0000CC4B                 db    0
.xdata$x:0000CC4C                 db    0
.xdata$x:0000CC4D                 db    0
.xdata$x:0000CC4E                 db    0
.xdata$x:0000CC4F                 db    0
.xdata$x:0000CC4F _xdata$x        ends
.xdata$x:0000CC4F
.xdata$x:0000CC50 ; ===========================================================================
.xdata$x:0000CC50
.xdata$x:0000CC50 ; Segment type: Pure data
.xdata$x:0000CC50 ; Segment permissions: Read
.xdata$x:0000CC50 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CC50                 assume cs:_xdata$x
.xdata$x:0000CC50                 ;org 0CC50h
.xdata$x:0000CC50 ; COMDAT (pick associative to section at 92B0)
.xdata$x:0000CC50 __catchsym$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$2 db    0
.xdata$x:0000CC50                                         ; DATA XREF: .xdata$x:0000CC80o
.xdata$x:0000CC51                 db    0
.xdata$x:0000CC52                 db    0
.xdata$x:0000CC53                 db    0
.xdata$x:0000CC54                 db    0
.xdata$x:0000CC55                 db    0
.xdata$x:0000CC56                 db    0
.xdata$x:0000CC57                 db    0
.xdata$x:0000CC58                 db    0
.xdata$x:0000CC59                 db    0
.xdata$x:0000CC5A                 db    0
.xdata$x:0000CC5B                 db    0
.xdata$x:0000CC5C                 dd offset __catch$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$0
.xdata$x:0000CC60 __unwindtable$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z db 0FFh
.xdata$x:0000CC60                                         ; DATA XREF: .xdata$x:0000CC8Co
.xdata$x:0000CC61                 db 0FFh
.xdata$x:0000CC62                 db 0FFh
.xdata$x:0000CC63                 db 0FFh
.xdata$x:0000CC64                 db    0
.xdata$x:0000CC65                 db    0
.xdata$x:0000CC66                 db    0
.xdata$x:0000CC67                 db    0
.xdata$x:0000CC68                 db 0FFh
.xdata$x:0000CC69                 db 0FFh
.xdata$x:0000CC6A                 db 0FFh
.xdata$x:0000CC6B                 db 0FFh
.xdata$x:0000CC6C                 db    0
.xdata$x:0000CC6D                 db    0
.xdata$x:0000CC6E                 db    0
.xdata$x:0000CC6F                 db    0
.xdata$x:0000CC70 __tryblocktable$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z db    0
.xdata$x:0000CC70                                         ; DATA XREF: .xdata$x:0000CC94o
.xdata$x:0000CC71                 db    0
.xdata$x:0000CC72                 db    0
.xdata$x:0000CC73                 db    0
.xdata$x:0000CC74                 db    0
.xdata$x:0000CC75                 db    0
.xdata$x:0000CC76                 db    0
.xdata$x:0000CC77                 db    0
.xdata$x:0000CC78                 db    1
.xdata$x:0000CC79                 db    0
.xdata$x:0000CC7A                 db    0
.xdata$x:0000CC7B                 db    0
.xdata$x:0000CC7C                 db    1
.xdata$x:0000CC7D                 db    0
.xdata$x:0000CC7E                 db    0
.xdata$x:0000CC7F                 db    0
.xdata$x:0000CC80                 dd offset __catchsym$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$2
.xdata$x:0000CC84 __ehfuncinfo$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z db  22h ; "
.xdata$x:0000CC84                                         ; DATA XREF: __ehhandler$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z+11o
.xdata$x:0000CC85                 db    5
.xdata$x:0000CC86                 db  93h ; ô
.xdata$x:0000CC87                 db  19h
.xdata$x:0000CC88                 db    2
.xdata$x:0000CC89                 db    0
.xdata$x:0000CC8A                 db    0
.xdata$x:0000CC8B                 db    0
.xdata$x:0000CC8C                 dd offset __unwindtable$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.xdata$x:0000CC90                 db    1
.xdata$x:0000CC91                 db    0
.xdata$x:0000CC92                 db    0
.xdata$x:0000CC93                 db    0
.xdata$x:0000CC94                 dd offset __tryblocktable$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.xdata$x:0000CC98                 db    0
.xdata$x:0000CC99                 db    0
.xdata$x:0000CC9A                 db    0
.xdata$x:0000CC9B                 db    0
.xdata$x:0000CC9C                 db    0
.xdata$x:0000CC9D                 db    0
.xdata$x:0000CC9E                 db    0
.xdata$x:0000CC9F                 db    0
.xdata$x:0000CCA0                 db    0
.xdata$x:0000CCA1                 db    0
.xdata$x:0000CCA2                 db    0
.xdata$x:0000CCA3                 db    0
.xdata$x:0000CCA4                 db    0
.xdata$x:0000CCA5                 db    0
.xdata$x:0000CCA6                 db    0
.xdata$x:0000CCA7                 db    0
.xdata$x:0000CCA7 _xdata$x        ends
.xdata$x:0000CCA7
.xdata$x:0000CCA8 ; ===========================================================================
.xdata$x:0000CCA8
.xdata$x:0000CCA8 ; Segment type: Pure data
.xdata$x:0000CCA8 ; Segment permissions: Read
.xdata$x:0000CCA8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CCA8                 assume cs:_xdata$x
.xdata$x:0000CCA8                 ;org 0CCA8h
.xdata$x:0000CCA8 ; COMDAT (pick associative to section at 8FCC)
.xdata$x:0000CCA8 __unwindtable$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z db 0FFh
.xdata$x:0000CCA8                                         ; DATA XREF: .xdata$x:0000CCB8o
.xdata$x:0000CCA9                 db 0FFh
.xdata$x:0000CCAA                 db 0FFh
.xdata$x:0000CCAB                 db 0FFh
.xdata$x:0000CCAC                 dd offset __unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z$0
.xdata$x:0000CCB0 __ehfuncinfo$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z db  22h ; "
.xdata$x:0000CCB0                                         ; DATA XREF: __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z+11o
.xdata$x:0000CCB1                 db    5
.xdata$x:0000CCB2                 db  93h ; ô
.xdata$x:0000CCB3                 db  19h
.xdata$x:0000CCB4                 db    1
.xdata$x:0000CCB5                 db    0
.xdata$x:0000CCB6                 db    0
.xdata$x:0000CCB7                 db    0
.xdata$x:0000CCB8                 dd offset __unwindtable$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.xdata$x:0000CCBC                 db    0
.xdata$x:0000CCBD                 db    0
.xdata$x:0000CCBE                 db    0
.xdata$x:0000CCBF                 db    0
.xdata$x:0000CCC0                 db    0
.xdata$x:0000CCC1                 db    0
.xdata$x:0000CCC2                 db    0
.xdata$x:0000CCC3                 db    0
.xdata$x:0000CCC4                 db    0
.xdata$x:0000CCC5                 db    0
.xdata$x:0000CCC6                 db    0
.xdata$x:0000CCC7                 db    0
.xdata$x:0000CCC8                 db    0
.xdata$x:0000CCC9                 db    0
.xdata$x:0000CCCA                 db    0
.xdata$x:0000CCCB                 db    0
.xdata$x:0000CCCC                 db    0
.xdata$x:0000CCCD                 db    0
.xdata$x:0000CCCE                 db    0
.xdata$x:0000CCCF                 db    0
.xdata$x:0000CCD0                 db    0
.xdata$x:0000CCD1                 db    0
.xdata$x:0000CCD2                 db    0
.xdata$x:0000CCD3                 db    0
.xdata$x:0000CCD3 _xdata$x        ends
.xdata$x:0000CCD3
.xdata$x:0000CCD4 ; ===========================================================================
.xdata$x:0000CCD4
.xdata$x:0000CCD4 ; Segment type: Pure data
.xdata$x:0000CCD4 ; Segment permissions: Read
.xdata$x:0000CCD4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CCD4                 assume cs:_xdata$x
.xdata$x:0000CCD4                 ;org 0CCD4h
.xdata$x:0000CCD4 ; COMDAT (pick associative to section at 6138)
.xdata$x:0000CCD4 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000CCD4                                         ; DATA XREF: .xdata$x:0000CCE4o
.xdata$x:0000CCD5                 db 0FFh
.xdata$x:0000CCD6                 db 0FFh
.xdata$x:0000CCD7                 db 0FFh
.xdata$x:0000CCD8                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:0000CCDC __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000CCDC                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:0000CCDD                 db    5
.xdata$x:0000CCDE                 db  93h ; ô
.xdata$x:0000CCDF                 db  19h
.xdata$x:0000CCE0                 db    1
.xdata$x:0000CCE1                 db    0
.xdata$x:0000CCE2                 db    0
.xdata$x:0000CCE3                 db    0
.xdata$x:0000CCE4                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:0000CCE8                 align 20h
.xdata$x:0000CCE8 _xdata$x        ends
.xdata$x:0000CCE8
.xdata$x:0000CD00 ; ===========================================================================
.xdata$x:0000CD00
.xdata$x:0000CD00 ; Segment type: Pure data
.xdata$x:0000CD00 ; Segment permissions: Read
.xdata$x:0000CD00 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CD00                 assume cs:_xdata$x
.xdata$x:0000CD00                 ;org 0CD00h
.xdata$x:0000CD00 ; COMDAT (pick associative to section at 6EEC)
.xdata$x:0000CD00 __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000CD00                                         ; DATA XREF: .xdata$x:0000CD10o
.xdata$x:0000CD01                 db 0FFh
.xdata$x:0000CD02                 db 0FFh
.xdata$x:0000CD03                 db 0FFh
.xdata$x:0000CD04                 dd offset __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:0000CD08 __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000CD08                                         ; DATA XREF: __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:0000CD09                 db    5
.xdata$x:0000CD0A                 db  93h ; ô
.xdata$x:0000CD0B                 db  19h
.xdata$x:0000CD0C                 db    1
.xdata$x:0000CD0D                 db    0
.xdata$x:0000CD0E                 db    0
.xdata$x:0000CD0F                 db    0
.xdata$x:0000CD10                 dd offset __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:0000CD14                 db    0
.xdata$x:0000CD15                 db    0
.xdata$x:0000CD16                 db    0
.xdata$x:0000CD17                 db    0
.xdata$x:0000CD18                 db    0
.xdata$x:0000CD19                 db    0
.xdata$x:0000CD1A                 db    0
.xdata$x:0000CD1B                 db    0
.xdata$x:0000CD1C                 db    0
.xdata$x:0000CD1D                 db    0
.xdata$x:0000CD1E                 db    0
.xdata$x:0000CD1F                 db    0
.xdata$x:0000CD20                 db    0
.xdata$x:0000CD21                 db    0
.xdata$x:0000CD22                 db    0
.xdata$x:0000CD23                 db    0
.xdata$x:0000CD24                 db    0
.xdata$x:0000CD25                 db    0
.xdata$x:0000CD26                 db    0
.xdata$x:0000CD27                 db    0
.xdata$x:0000CD28                 db    0
.xdata$x:0000CD29                 db    0
.xdata$x:0000CD2A                 db    0
.xdata$x:0000CD2B                 db    0
.xdata$x:0000CD2B _xdata$x        ends
.xdata$x:0000CD2B
.xdata$x:0000CD2C ; ===========================================================================
.xdata$x:0000CD2C
.xdata$x:0000CD2C ; Segment type: Pure data
.xdata$x:0000CD2C ; Segment permissions: Read
.xdata$x:0000CD2C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CD2C                 assume cs:_xdata$x
.xdata$x:0000CD2C                 ;org 0CD2Ch
.xdata$x:0000CD2C ; COMDAT (pick associative to section at 60C0)
.xdata$x:0000CD2C __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z db 0FFh
.xdata$x:0000CD2C                                         ; DATA XREF: .xdata$x:0000CD3Co
.xdata$x:0000CD2D                 db 0FFh
.xdata$x:0000CD2E                 db 0FFh
.xdata$x:0000CD2F                 db 0FFh
.xdata$x:0000CD30                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
.xdata$x:0000CD34 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z db  22h ; "
.xdata$x:0000CD34                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z+11o
.xdata$x:0000CD35                 db    5
.xdata$x:0000CD36                 db  93h ; ô
.xdata$x:0000CD37                 db  19h
.xdata$x:0000CD38                 db    1
.xdata$x:0000CD39                 db    0
.xdata$x:0000CD3A                 db    0
.xdata$x:0000CD3B                 db    0
.xdata$x:0000CD3C                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.xdata$x:0000CD40                 db    0
.xdata$x:0000CD41                 db    0
.xdata$x:0000CD42                 db    0
.xdata$x:0000CD43                 db    0
.xdata$x:0000CD44                 db    0
.xdata$x:0000CD45                 db    0
.xdata$x:0000CD46                 db    0
.xdata$x:0000CD47                 db    0
.xdata$x:0000CD48                 db    0
.xdata$x:0000CD49                 db    0
.xdata$x:0000CD4A                 db    0
.xdata$x:0000CD4B                 db    0
.xdata$x:0000CD4C                 db    0
.xdata$x:0000CD4D                 db    0
.xdata$x:0000CD4E                 db    0
.xdata$x:0000CD4F                 db    0
.xdata$x:0000CD50                 db    0
.xdata$x:0000CD51                 db    0
.xdata$x:0000CD52                 db    0
.xdata$x:0000CD53                 db    0
.xdata$x:0000CD54                 db    0
.xdata$x:0000CD55                 db    0
.xdata$x:0000CD56                 db    0
.xdata$x:0000CD57                 db    0
.xdata$x:0000CD57 _xdata$x        ends
.xdata$x:0000CD57
.xdata$x:0000CD58 ; ===========================================================================
.xdata$x:0000CD58
.xdata$x:0000CD58 ; Segment type: Pure data
.xdata$x:0000CD58 ; Segment permissions: Read
.xdata$x:0000CD58 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CD58                 assume cs:_xdata$x
.xdata$x:0000CD58                 ;org 0CD58h
.xdata$x:0000CD58 ; COMDAT (pick associative to section at 6328)
.xdata$x:0000CD58 __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z db 0FFh
.xdata$x:0000CD58                                         ; DATA XREF: .xdata$x:0000CD68o
.xdata$x:0000CD59                 db 0FFh
.xdata$x:0000CD5A                 db 0FFh
.xdata$x:0000CD5B                 db 0FFh
.xdata$x:0000CD5C                 dd offset __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0
.xdata$x:0000CD60 __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z db  22h ; "
.xdata$x:0000CD60                                         ; DATA XREF: __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z+11o
.xdata$x:0000CD61                 db    5
.xdata$x:0000CD62                 db  93h ; ô
.xdata$x:0000CD63                 db  19h
.xdata$x:0000CD64                 db    1
.xdata$x:0000CD65                 db    0
.xdata$x:0000CD66                 db    0
.xdata$x:0000CD67                 db    0
.xdata$x:0000CD68                 dd offset __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.xdata$x:0000CD6C                 db    0
.xdata$x:0000CD6D                 db    0
.xdata$x:0000CD6E                 db    0
.xdata$x:0000CD6F                 db    0
.xdata$x:0000CD70                 db    0
.xdata$x:0000CD71                 db    0
.xdata$x:0000CD72                 db    0
.xdata$x:0000CD73                 db    0
.xdata$x:0000CD74                 db    0
.xdata$x:0000CD75                 db    0
.xdata$x:0000CD76                 db    0
.xdata$x:0000CD77                 db    0
.xdata$x:0000CD78                 db    0
.xdata$x:0000CD79                 db    0
.xdata$x:0000CD7A                 db    0
.xdata$x:0000CD7B                 db    0
.xdata$x:0000CD7C                 db    0
.xdata$x:0000CD7D                 db    0
.xdata$x:0000CD7E                 db    0
.xdata$x:0000CD7F                 db    0
.xdata$x:0000CD80                 db    0
.xdata$x:0000CD81                 db    0
.xdata$x:0000CD82                 db    0
.xdata$x:0000CD83                 db    0
.xdata$x:0000CD83 _xdata$x        ends
.xdata$x:0000CD83
.xdata$x:0000CD84 ; ===========================================================================
.xdata$x:0000CD84
.xdata$x:0000CD84 ; Segment type: Pure data
.xdata$x:0000CD84 ; Segment permissions: Read
.xdata$x:0000CD84 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CD84                 assume cs:_xdata$x
.xdata$x:0000CD84                 ;org 0CD84h
.xdata$x:0000CD84 ; COMDAT (pick associative to section at 704C)
.xdata$x:0000CD84 __unwindtable$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000CD84                                         ; DATA XREF: .xdata$x:0000CD94o
.xdata$x:0000CD85                 db 0FFh
.xdata$x:0000CD86                 db 0FFh
.xdata$x:0000CD87                 db 0FFh
.xdata$x:0000CD88                 dd offset __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000CD8C __ehfuncinfo$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000CD8C                                         ; DATA XREF: __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000CD8D                 db    5
.xdata$x:0000CD8E                 db  93h ; ô
.xdata$x:0000CD8F                 db  19h
.xdata$x:0000CD90                 db    1
.xdata$x:0000CD91                 db    0
.xdata$x:0000CD92                 db    0
.xdata$x:0000CD93                 db    0
.xdata$x:0000CD94                 dd offset __unwindtable$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:0000CD98                 db    0
.xdata$x:0000CD99                 db    0
.xdata$x:0000CD9A                 db    0
.xdata$x:0000CD9B                 db    0
.xdata$x:0000CD9C                 db    0
.xdata$x:0000CD9D                 db    0
.xdata$x:0000CD9E                 db    0
.xdata$x:0000CD9F                 db    0
.xdata$x:0000CDA0                 db    0
.xdata$x:0000CDA1                 db    0
.xdata$x:0000CDA2                 db    0
.xdata$x:0000CDA3                 db    0
.xdata$x:0000CDA4                 db    0
.xdata$x:0000CDA5                 db    0
.xdata$x:0000CDA6                 db    0
.xdata$x:0000CDA7                 db    0
.xdata$x:0000CDA8                 db    0
.xdata$x:0000CDA9                 db    0
.xdata$x:0000CDAA                 db    0
.xdata$x:0000CDAB                 db    0
.xdata$x:0000CDAC                 db    0
.xdata$x:0000CDAD                 db    0
.xdata$x:0000CDAE                 db    0
.xdata$x:0000CDAF                 db    0
.xdata$x:0000CDAF _xdata$x        ends
.xdata$x:0000CDAF
.xdata$x:0000CDB0 ; ===========================================================================
.xdata$x:0000CDB0
.xdata$x:0000CDB0 ; Segment type: Pure data
.xdata$x:0000CDB0 ; Segment permissions: Read
.xdata$x:0000CDB0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CDB0                 assume cs:_xdata$x
.xdata$x:0000CDB0                 ;org 0CDB0h
.xdata$x:0000CDB0 ; COMDAT (pick associative to section at 62A4)
.xdata$x:0000CDB0 __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000CDB0                                         ; DATA XREF: .xdata$x:0000CDC0o
.xdata$x:0000CDB1                 db 0FFh
.xdata$x:0000CDB2                 db 0FFh
.xdata$x:0000CDB3                 db 0FFh
.xdata$x:0000CDB4                 dd offset __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:0000CDB8 __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000CDB8                                         ; DATA XREF: __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000CDB9                 db    5
.xdata$x:0000CDBA                 db  93h ; ô
.xdata$x:0000CDBB                 db  19h
.xdata$x:0000CDBC                 db    1
.xdata$x:0000CDBD                 db    0
.xdata$x:0000CDBE                 db    0
.xdata$x:0000CDBF                 db    0
.xdata$x:0000CDC0                 dd offset __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:0000CDC4                 db    0
.xdata$x:0000CDC5                 db    0
.xdata$x:0000CDC6                 db    0
.xdata$x:0000CDC7                 db    0
.xdata$x:0000CDC8                 db    0
.xdata$x:0000CDC9                 db    0
.xdata$x:0000CDCA                 db    0
.xdata$x:0000CDCB                 db    0
.xdata$x:0000CDCC                 db    0
.xdata$x:0000CDCD                 db    0
.xdata$x:0000CDCE                 db    0
.xdata$x:0000CDCF                 db    0
.xdata$x:0000CDD0                 db    0
.xdata$x:0000CDD1                 db    0
.xdata$x:0000CDD2                 db    0
.xdata$x:0000CDD3                 db    0
.xdata$x:0000CDD4                 db    0
.xdata$x:0000CDD5                 db    0
.xdata$x:0000CDD6                 db    0
.xdata$x:0000CDD7                 db    0
.xdata$x:0000CDD8                 db    0
.xdata$x:0000CDD9                 db    0
.xdata$x:0000CDDA                 db    0
.xdata$x:0000CDDB                 db    0
.xdata$x:0000CDDB _xdata$x        ends
.xdata$x:0000CDDB
.xdata$x:0000CDDC ; ===========================================================================
.xdata$x:0000CDDC
.xdata$x:0000CDDC ; Segment type: Pure data
.xdata$x:0000CDDC ; Segment permissions: Read
.xdata$x:0000CDDC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CDDC                 assume cs:_xdata$x
.xdata$x:0000CDDC                 ;org 0CDDCh
.xdata$x:0000CDDC ; COMDAT (pick associative to section at 642C)
.xdata$x:0000CDDC __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z db 0FFh
.xdata$x:0000CDDC                                         ; DATA XREF: .xdata$x:0000CDECo
.xdata$x:0000CDDD                 db 0FFh
.xdata$x:0000CDDE                 db 0FFh
.xdata$x:0000CDDF                 db 0FFh
.xdata$x:0000CDE0                 dd offset __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0
.xdata$x:0000CDE4 __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z db  22h ; "
.xdata$x:0000CDE4                                         ; DATA XREF: __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z+11o
.xdata$x:0000CDE5                 db    5
.xdata$x:0000CDE6                 db  93h ; ô
.xdata$x:0000CDE7                 db  19h
.xdata$x:0000CDE8                 db    1
.xdata$x:0000CDE9                 db    0
.xdata$x:0000CDEA                 db    0
.xdata$x:0000CDEB                 db    0
.xdata$x:0000CDEC                 dd offset __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.xdata$x:0000CDF0                 db    0
.xdata$x:0000CDF1                 db    0
.xdata$x:0000CDF2                 db    0
.xdata$x:0000CDF3                 db    0
.xdata$x:0000CDF4                 db    0
.xdata$x:0000CDF5                 db    0
.xdata$x:0000CDF6                 db    0
.xdata$x:0000CDF7                 db    0
.xdata$x:0000CDF8                 db    0
.xdata$x:0000CDF9                 db    0
.xdata$x:0000CDFA                 db    0
.xdata$x:0000CDFB                 db    0
.xdata$x:0000CDFC                 db    0
.xdata$x:0000CDFD                 db    0
.xdata$x:0000CDFE                 db    0
.xdata$x:0000CDFF                 db    0
.xdata$x:0000CE00                 db    0
.xdata$x:0000CE01                 db    0
.xdata$x:0000CE02                 db    0
.xdata$x:0000CE03                 db    0
.xdata$x:0000CE04                 db    0
.xdata$x:0000CE05                 db    0
.xdata$x:0000CE06                 db    0
.xdata$x:0000CE07                 db    0
.xdata$x:0000CE07 _xdata$x        ends
.xdata$x:0000CE07
.xdata$x:0000CE08 ; ===========================================================================
.xdata$x:0000CE08
.xdata$x:0000CE08 ; Segment type: Pure data
.xdata$x:0000CE08 ; Segment permissions: Read
.xdata$x:0000CE08 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CE08                 assume cs:_xdata$x
.xdata$x:0000CE08                 ;org 0CE08h
.xdata$x:0000CE08 ; COMDAT (pick associative to section at 7D00)
.xdata$x:0000CE08 __unwindtable$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z db 0FFh
.xdata$x:0000CE08                                         ; DATA XREF: .xdata$x:0000CE18o
.xdata$x:0000CE09                 db 0FFh
.xdata$x:0000CE0A                 db 0FFh
.xdata$x:0000CE0B                 db 0FFh
.xdata$x:0000CE0C                 dd offset __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0
.xdata$x:0000CE10 __ehfuncinfo$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z db  22h ; "
.xdata$x:0000CE10                                         ; DATA XREF: __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z+11o
.xdata$x:0000CE11                 db    5
.xdata$x:0000CE12                 db  93h ; ô
.xdata$x:0000CE13                 db  19h
.xdata$x:0000CE14                 db    1
.xdata$x:0000CE15                 db    0
.xdata$x:0000CE16                 db    0
.xdata$x:0000CE17                 db    0
.xdata$x:0000CE18                 dd offset __unwindtable$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.xdata$x:0000CE1C                 db    0
.xdata$x:0000CE1D                 db    0
.xdata$x:0000CE1E                 db    0
.xdata$x:0000CE1F                 db    0
.xdata$x:0000CE20                 db    0
.xdata$x:0000CE21                 db    0
.xdata$x:0000CE22                 db    0
.xdata$x:0000CE23                 db    0
.xdata$x:0000CE24                 db    0
.xdata$x:0000CE25                 db    0
.xdata$x:0000CE26                 db    0
.xdata$x:0000CE27                 db    0
.xdata$x:0000CE28                 db    0
.xdata$x:0000CE29                 db    0
.xdata$x:0000CE2A                 db    0
.xdata$x:0000CE2B                 db    0
.xdata$x:0000CE2C                 db    0
.xdata$x:0000CE2D                 db    0
.xdata$x:0000CE2E                 db    0
.xdata$x:0000CE2F                 db    0
.xdata$x:0000CE30                 db    0
.xdata$x:0000CE31                 db    0
.xdata$x:0000CE32                 db    0
.xdata$x:0000CE33                 db    0
.xdata$x:0000CE33 _xdata$x        ends
.xdata$x:0000CE33
.xdata$x:0000CE34 ; ===========================================================================
.xdata$x:0000CE34
.xdata$x:0000CE34 ; Segment type: Pure data
.xdata$x:0000CE34 ; Segment permissions: Read
.xdata$x:0000CE34 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CE34                 assume cs:_xdata$x
.xdata$x:0000CE34                 ;org 0CE34h
.xdata$x:0000CE34 ; COMDAT (pick associative to section at 70BC)
.xdata$x:0000CE34 __unwindtable$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000CE34                                         ; DATA XREF: .xdata$x:0000CE44o
.xdata$x:0000CE35                 db 0FFh
.xdata$x:0000CE36                 db 0FFh
.xdata$x:0000CE37                 db 0FFh
.xdata$x:0000CE38                 dd offset __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000CE3C __ehfuncinfo$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000CE3C                                         ; DATA XREF: __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000CE3D                 db    5
.xdata$x:0000CE3E                 db  93h ; ô
.xdata$x:0000CE3F                 db  19h
.xdata$x:0000CE40                 db    1
.xdata$x:0000CE41                 db    0
.xdata$x:0000CE42                 db    0
.xdata$x:0000CE43                 db    0
.xdata$x:0000CE44                 dd offset __unwindtable$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:0000CE48                 align 20h
.xdata$x:0000CE48 _xdata$x        ends
.xdata$x:0000CE48
.xdata$x:0000CE60 ; ===========================================================================
.xdata$x:0000CE60
.xdata$x:0000CE60 ; Segment type: Pure data
.xdata$x:0000CE60 ; Segment permissions: Read
.xdata$x:0000CE60 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CE60                 assume cs:_xdata$x
.xdata$x:0000CE60                 ;org 0CE60h
.xdata$x:0000CE60 ; COMDAT (pick associative to section at 63B4)
.xdata$x:0000CE60 __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000CE60                                         ; DATA XREF: .xdata$x:0000CE70o
.xdata$x:0000CE61                 db 0FFh
.xdata$x:0000CE62                 db 0FFh
.xdata$x:0000CE63                 db 0FFh
.xdata$x:0000CE64                 dd offset __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:0000CE68 __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000CE68                                         ; DATA XREF: __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000CE69                 db    5
.xdata$x:0000CE6A                 db  93h ; ô
.xdata$x:0000CE6B                 db  19h
.xdata$x:0000CE6C                 db    1
.xdata$x:0000CE6D                 db    0
.xdata$x:0000CE6E                 db    0
.xdata$x:0000CE6F                 db    0
.xdata$x:0000CE70                 dd offset __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:0000CE74                 db    0
.xdata$x:0000CE75                 db    0
.xdata$x:0000CE76                 db    0
.xdata$x:0000CE77                 db    0
.xdata$x:0000CE78                 db    0
.xdata$x:0000CE79                 db    0
.xdata$x:0000CE7A                 db    0
.xdata$x:0000CE7B                 db    0
.xdata$x:0000CE7C                 db    0
.xdata$x:0000CE7D                 db    0
.xdata$x:0000CE7E                 db    0
.xdata$x:0000CE7F                 db    0
.xdata$x:0000CE80                 db    0
.xdata$x:0000CE81                 db    0
.xdata$x:0000CE82                 db    0
.xdata$x:0000CE83                 db    0
.xdata$x:0000CE84                 db    0
.xdata$x:0000CE85                 db    0
.xdata$x:0000CE86                 db    0
.xdata$x:0000CE87                 db    0
.xdata$x:0000CE88                 db    0
.xdata$x:0000CE89                 db    0
.xdata$x:0000CE8A                 db    0
.xdata$x:0000CE8B                 db    0
.xdata$x:0000CE8B _xdata$x        ends
.xdata$x:0000CE8B
.xdata$x:0000CE8C ; ===========================================================================
.xdata$x:0000CE8C
.xdata$x:0000CE8C ; Segment type: Pure data
.xdata$x:0000CE8C ; Segment permissions: Read
.xdata$x:0000CE8C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CE8C                 assume cs:_xdata$x
.xdata$x:0000CE8C                 ;org 0CE8Ch
.xdata$x:0000CE8C ; COMDAT (pick associative to section at 5894)
.xdata$x:0000CE8C __ehfuncinfo$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z db  22h ; "
.xdata$x:0000CE8C                                         ; DATA XREF: __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z+11o
.xdata$x:0000CE8D                 db    5
.xdata$x:0000CE8E                 db  93h ; ô
.xdata$x:0000CE8F                 db  19h
.xdata$x:0000CE90                 db  0Ah
.xdata$x:0000CE91                 db    0
.xdata$x:0000CE92                 db    0
.xdata$x:0000CE93                 db    0
.xdata$x:0000CE94                 dd offset __unwindtable$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.xdata$x:0000CE98                 db    0
.xdata$x:0000CE99                 db    0
.xdata$x:0000CE9A                 db    0
.xdata$x:0000CE9B                 db    0
.xdata$x:0000CE9C                 db    0
.xdata$x:0000CE9D                 db    0
.xdata$x:0000CE9E                 db    0
.xdata$x:0000CE9F                 db    0
.xdata$x:0000CEA0                 db    0
.xdata$x:0000CEA1                 db    0
.xdata$x:0000CEA2                 db    0
.xdata$x:0000CEA3                 db    0
.xdata$x:0000CEA4                 db    0
.xdata$x:0000CEA5                 db    0
.xdata$x:0000CEA6                 db    0
.xdata$x:0000CEA7                 db    0
.xdata$x:0000CEA8                 db    0
.xdata$x:0000CEA9                 db    0
.xdata$x:0000CEAA                 db    0
.xdata$x:0000CEAB                 db    0
.xdata$x:0000CEAC                 db    0
.xdata$x:0000CEAD                 db    0
.xdata$x:0000CEAE                 db    0
.xdata$x:0000CEAF                 db    0
.xdata$x:0000CEB0 __unwindtable$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z db 0FFh
.xdata$x:0000CEB0                                         ; DATA XREF: .xdata$x:0000CE94o
.xdata$x:0000CEB1                 db 0FFh
.xdata$x:0000CEB2                 db 0FFh
.xdata$x:0000CEB3                 db 0FFh
.xdata$x:0000CEB4                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0
.xdata$x:0000CEB8                 db    0
.xdata$x:0000CEB9                 db    0
.xdata$x:0000CEBA                 db    0
.xdata$x:0000CEBB                 db    0
.xdata$x:0000CEBC                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1
.xdata$x:0000CEC0                 db    1
.xdata$x:0000CEC1                 db    0
.xdata$x:0000CEC2                 db    0
.xdata$x:0000CEC3                 db    0
.xdata$x:0000CEC4                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2
.xdata$x:0000CEC8                 db    2
.xdata$x:0000CEC9                 db    0
.xdata$x:0000CECA                 db    0
.xdata$x:0000CECB                 db    0
.xdata$x:0000CECC                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3
.xdata$x:0000CED0                 db    3
.xdata$x:0000CED1                 db    0
.xdata$x:0000CED2                 db    0
.xdata$x:0000CED3                 db    0
.xdata$x:0000CED4                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4
.xdata$x:0000CED8                 db    4
.xdata$x:0000CED9                 db    0
.xdata$x:0000CEDA                 db    0
.xdata$x:0000CEDB                 db    0
.xdata$x:0000CEDC                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5
.xdata$x:0000CEE0                 db    5
.xdata$x:0000CEE1                 db    0
.xdata$x:0000CEE2                 db    0
.xdata$x:0000CEE3                 db    0
.xdata$x:0000CEE4                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6
.xdata$x:0000CEE8                 db    6
.xdata$x:0000CEE9                 db    0
.xdata$x:0000CEEA                 db    0
.xdata$x:0000CEEB                 db    0
.xdata$x:0000CEEC                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7
.xdata$x:0000CEF0                 db    1
.xdata$x:0000CEF1                 db    0
.xdata$x:0000CEF2                 db    0
.xdata$x:0000CEF3                 db    0
.xdata$x:0000CEF4                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4
.xdata$x:0000CEF8                 db    8
.xdata$x:0000CEF9                 db    0
.xdata$x:0000CEFA                 db    0
.xdata$x:0000CEFB                 db    0
.xdata$x:0000CEFC                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6
.xdata$x:0000CEFC _xdata$x        ends
.xdata$x:0000CEFC
.xdata$x:0000CF00 ; ===========================================================================
.xdata$x:0000CF00
.xdata$x:0000CF00 ; Segment type: Pure data
.xdata$x:0000CF00 ; Segment permissions: Read
.xdata$x:0000CF00 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CF00                 assume cs:_xdata$x
.xdata$x:0000CF00                 ;org 0CF00h
.xdata$x:0000CF00 ; COMDAT (pick associative to section at 5DA0)
.xdata$x:0000CF00 __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db 0FFh
.xdata$x:0000CF00                                         ; DATA XREF: .xdata$x:0000CF10o
.xdata$x:0000CF01                 db 0FFh
.xdata$x:0000CF02                 db 0FFh
.xdata$x:0000CF03                 db 0FFh
.xdata$x:0000CF04                 dd offset __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
.xdata$x:0000CF08 __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db  22h ; "
.xdata$x:0000CF08                                         ; DATA XREF: __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z+11o
.xdata$x:0000CF09                 db    5
.xdata$x:0000CF0A                 db  93h ; ô
.xdata$x:0000CF0B                 db  19h
.xdata$x:0000CF0C                 db    1
.xdata$x:0000CF0D                 db    0
.xdata$x:0000CF0E                 db    0
.xdata$x:0000CF0F                 db    0
.xdata$x:0000CF10                 dd offset __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.xdata$x:0000CF14                 db    0
.xdata$x:0000CF15                 db    0
.xdata$x:0000CF16                 db    0
.xdata$x:0000CF17                 db    0
.xdata$x:0000CF18                 db    0
.xdata$x:0000CF19                 db    0
.xdata$x:0000CF1A                 db    0
.xdata$x:0000CF1B                 db    0
.xdata$x:0000CF1C                 db    0
.xdata$x:0000CF1D                 db    0
.xdata$x:0000CF1E                 db    0
.xdata$x:0000CF1F                 db    0
.xdata$x:0000CF20                 db    0
.xdata$x:0000CF21                 db    0
.xdata$x:0000CF22                 db    0
.xdata$x:0000CF23                 db    0
.xdata$x:0000CF24                 db    0
.xdata$x:0000CF25                 db    0
.xdata$x:0000CF26                 db    0
.xdata$x:0000CF27                 db    0
.xdata$x:0000CF28                 db    0
.xdata$x:0000CF29                 db    0
.xdata$x:0000CF2A                 db    0
.xdata$x:0000CF2B                 db    0
.xdata$x:0000CF2B _xdata$x        ends
.xdata$x:0000CF2B
.xdata$x:0000CF2C ; ===========================================================================
.xdata$x:0000CF2C
.xdata$x:0000CF2C ; Segment type: Pure data
.xdata$x:0000CF2C ; Segment permissions: Read
.xdata$x:0000CF2C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CF2C                 assume cs:_xdata$x
.xdata$x:0000CF2C                 ;org 0CF2Ch
.xdata$x:0000CF2C ; COMDAT (pick associative to section at 5A54)
.xdata$x:0000CF2C __unwindtable$??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z db 0FFh
.xdata$x:0000CF2C                                         ; DATA XREF: .xdata$x:0000CF3Co
.xdata$x:0000CF2D                 db 0FFh
.xdata$x:0000CF2E                 db 0FFh
.xdata$x:0000CF2F                 db 0FFh
.xdata$x:0000CF30                 dd offset __unwindfunclet$??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z$0
.xdata$x:0000CF34 __ehfuncinfo$??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z db  22h ; "
.xdata$x:0000CF34                                         ; DATA XREF: __ehhandler$??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z+11o
.xdata$x:0000CF35                 db    5
.xdata$x:0000CF36                 db  93h ; ô
.xdata$x:0000CF37                 db  19h
.xdata$x:0000CF38                 db    1
.xdata$x:0000CF39                 db    0
.xdata$x:0000CF3A                 db    0
.xdata$x:0000CF3B                 db    0
.xdata$x:0000CF3C                 dd offset __unwindtable$??$construct@HAAH@?$allocator@H@std@@QAEXPAHAAH@Z
.xdata$x:0000CF40                 db    0
.xdata$x:0000CF41                 db    0
.xdata$x:0000CF42                 db    0
.xdata$x:0000CF43                 db    0
.xdata$x:0000CF44                 db    0
.xdata$x:0000CF45                 db    0
.xdata$x:0000CF46                 db    0
.xdata$x:0000CF47                 db    0
.xdata$x:0000CF48                 db    0
.xdata$x:0000CF49                 db    0
.xdata$x:0000CF4A                 db    0
.xdata$x:0000CF4B                 db    0
.xdata$x:0000CF4C                 db    0
.xdata$x:0000CF4D                 db    0
.xdata$x:0000CF4E                 db    0
.xdata$x:0000CF4F                 db    0
.xdata$x:0000CF50                 db    0
.xdata$x:0000CF51                 db    0
.xdata$x:0000CF52                 db    0
.xdata$x:0000CF53                 db    0
.xdata$x:0000CF54                 db    0
.xdata$x:0000CF55                 db    0
.xdata$x:0000CF56                 db    0
.xdata$x:0000CF57                 db    0
.xdata$x:0000CF57 _xdata$x        ends
.xdata$x:0000CF57
.xdata$x:0000CF58 ; ===========================================================================
.xdata$x:0000CF58
.xdata$x:0000CF58 ; Segment type: Pure data
.xdata$x:0000CF58 ; Segment permissions: Read
.xdata$x:0000CF58 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CF58                 assume cs:_xdata$x
.xdata$x:0000CF58                 ;org 0CF58h
.xdata$x:0000CF58 ; COMDAT (pick associative to section at 5EA4)
.xdata$x:0000CF58 __unwindtable$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z db 0FFh
.xdata$x:0000CF58                                         ; DATA XREF: .xdata$x:0000CF68o
.xdata$x:0000CF59                 db 0FFh
.xdata$x:0000CF5A                 db 0FFh
.xdata$x:0000CF5B                 db 0FFh
.xdata$x:0000CF5C                 dd offset __unwindfunclet$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z$0
.xdata$x:0000CF60 __ehfuncinfo$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z db  22h ; "
.xdata$x:0000CF60                                         ; DATA XREF: __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z+11o
.xdata$x:0000CF61                 db    5
.xdata$x:0000CF62                 db  93h ; ô
.xdata$x:0000CF63                 db  19h
.xdata$x:0000CF64                 db    1
.xdata$x:0000CF65                 db    0
.xdata$x:0000CF66                 db    0
.xdata$x:0000CF67                 db    0
.xdata$x:0000CF68                 dd offset __unwindtable$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.xdata$x:0000CF6C                 db    0
.xdata$x:0000CF6D                 db    0
.xdata$x:0000CF6E                 db    0
.xdata$x:0000CF6F                 db    0
.xdata$x:0000CF70                 db    0
.xdata$x:0000CF71                 db    0
.xdata$x:0000CF72                 db    0
.xdata$x:0000CF73                 db    0
.xdata$x:0000CF74                 db    0
.xdata$x:0000CF75                 db    0
.xdata$x:0000CF76                 db    0
.xdata$x:0000CF77                 db    0
.xdata$x:0000CF78                 db    0
.xdata$x:0000CF79                 db    0
.xdata$x:0000CF7A                 db    0
.xdata$x:0000CF7B                 db    0
.xdata$x:0000CF7C                 db    0
.xdata$x:0000CF7D                 db    0
.xdata$x:0000CF7E                 db    0
.xdata$x:0000CF7F                 db    0
.xdata$x:0000CF80                 db    0
.xdata$x:0000CF81                 db    0
.xdata$x:0000CF82                 db    0
.xdata$x:0000CF83                 db    0
.xdata$x:0000CF83 _xdata$x        ends
.xdata$x:0000CF83
.xdata$x:0000CF84 ; ===========================================================================
.xdata$x:0000CF84
.xdata$x:0000CF84 ; Segment type: Pure data
.xdata$x:0000CF84 ; Segment permissions: Read
.xdata$x:0000CF84 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CF84                 assume cs:_xdata$x
.xdata$x:0000CF84                 ;org 0CF84h
.xdata$x:0000CF84 ; COMDAT (pick associative to section at 5BA0)
.xdata$x:0000CF84 __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db 0FFh
.xdata$x:0000CF84                                         ; DATA XREF: .xdata$x:0000CF94o
.xdata$x:0000CF85                 db 0FFh
.xdata$x:0000CF86                 db 0FFh
.xdata$x:0000CF87                 db 0FFh
.xdata$x:0000CF88                 dd offset __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
.xdata$x:0000CF8C __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db  22h ; "
.xdata$x:0000CF8C                                         ; DATA XREF: __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z+11o
.xdata$x:0000CF8D                 db    5
.xdata$x:0000CF8E                 db  93h ; ô
.xdata$x:0000CF8F                 db  19h
.xdata$x:0000CF90                 db    1
.xdata$x:0000CF91                 db    0
.xdata$x:0000CF92                 db    0
.xdata$x:0000CF93                 db    0
.xdata$x:0000CF94                 dd offset __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.xdata$x:0000CF98                 db    0
.xdata$x:0000CF99                 db    0
.xdata$x:0000CF9A                 db    0
.xdata$x:0000CF9B                 db    0
.xdata$x:0000CF9C                 db    0
.xdata$x:0000CF9D                 db    0
.xdata$x:0000CF9E                 db    0
.xdata$x:0000CF9F                 db    0
.xdata$x:0000CFA0                 db    0
.xdata$x:0000CFA1                 db    0
.xdata$x:0000CFA2                 db    0
.xdata$x:0000CFA3                 db    0
.xdata$x:0000CFA4                 db    0
.xdata$x:0000CFA5                 db    0
.xdata$x:0000CFA6                 db    0
.xdata$x:0000CFA7                 db    0
.xdata$x:0000CFA8                 db    0
.xdata$x:0000CFA9                 db    0
.xdata$x:0000CFAA                 db    0
.xdata$x:0000CFAB                 db    0
.xdata$x:0000CFAC                 db    0
.xdata$x:0000CFAD                 db    0
.xdata$x:0000CFAE                 db    0
.xdata$x:0000CFAF                 db    0
.xdata$x:0000CFAF _xdata$x        ends
.xdata$x:0000CFAF
.xdata$x:0000CFB0 ; ===========================================================================
.xdata$x:0000CFB0
.xdata$x:0000CFB0 ; Segment type: Pure data
.xdata$x:0000CFB0 ; Segment permissions: Read
.xdata$x:0000CFB0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CFB0                 assume cs:_xdata$x
.xdata$x:0000CFB0                 ;org 0CFB0h
.xdata$x:0000CFB0 ; COMDAT (pick associative to section at 5CA0)
.xdata$x:0000CFB0 __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db 0FFh
.xdata$x:0000CFB0                                         ; DATA XREF: .xdata$x:0000CFC0o
.xdata$x:0000CFB1                 db 0FFh
.xdata$x:0000CFB2                 db 0FFh
.xdata$x:0000CFB3                 db 0FFh
.xdata$x:0000CFB4                 dd offset __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0
.xdata$x:0000CFB8 __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db  22h ; "
.xdata$x:0000CFB8                                         ; DATA XREF: __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z+11o
.xdata$x:0000CFB9                 db    5
.xdata$x:0000CFBA                 db  93h ; ô
.xdata$x:0000CFBB                 db  19h
.xdata$x:0000CFBC                 db    1
.xdata$x:0000CFBD                 db    0
.xdata$x:0000CFBE                 db    0
.xdata$x:0000CFBF                 db    0
.xdata$x:0000CFC0                 dd offset __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.xdata$x:0000CFC4                 db    0
.xdata$x:0000CFC5                 db    0
.xdata$x:0000CFC6                 db    0
.xdata$x:0000CFC7                 db    0
.xdata$x:0000CFC8                 db    0
.xdata$x:0000CFC9                 db    0
.xdata$x:0000CFCA                 db    0
.xdata$x:0000CFCB                 db    0
.xdata$x:0000CFCC                 db    0
.xdata$x:0000CFCD                 db    0
.xdata$x:0000CFCE                 db    0
.xdata$x:0000CFCF                 db    0
.xdata$x:0000CFD0                 db    0
.xdata$x:0000CFD1                 db    0
.xdata$x:0000CFD2                 db    0
.xdata$x:0000CFD3                 db    0
.xdata$x:0000CFD4                 db    0
.xdata$x:0000CFD5                 db    0
.xdata$x:0000CFD6                 db    0
.xdata$x:0000CFD7                 db    0
.xdata$x:0000CFD8                 db    0
.xdata$x:0000CFD9                 db    0
.xdata$x:0000CFDA                 db    0
.xdata$x:0000CFDB                 db    0
.xdata$x:0000CFDB _xdata$x        ends
.xdata$x:0000CFDB
.xdata$x:0000CFDC ; ===========================================================================
.xdata$x:0000CFDC
.xdata$x:0000CFDC ; Segment type: Pure data
.xdata$x:0000CFDC ; Segment permissions: Read
.xdata$x:0000CFDC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000CFDC                 assume cs:_xdata$x
.xdata$x:0000CFDC                 ;org 0CFDCh
.xdata$x:0000CFDC ; COMDAT (pick associative to section at 56CC)
.xdata$x:0000CFDC __catchsym$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 db    0
.xdata$x:0000CFDC                                         ; DATA XREF: .xdata$x:0000D00Co
.xdata$x:0000CFDD                 db    0
.xdata$x:0000CFDE                 db    0
.xdata$x:0000CFDF                 db    0
.xdata$x:0000CFE0                 db    0
.xdata$x:0000CFE1                 db    0
.xdata$x:0000CFE2                 db    0
.xdata$x:0000CFE3                 db    0
.xdata$x:0000CFE4                 db    0
.xdata$x:0000CFE5                 db    0
.xdata$x:0000CFE6                 db    0
.xdata$x:0000CFE7                 db    0
.xdata$x:0000CFE8                 dd offset __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
.xdata$x:0000CFEC __unwindtable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db 0FFh
.xdata$x:0000CFEC                                         ; DATA XREF: .xdata$x:0000D018o
.xdata$x:0000CFED                 db 0FFh
.xdata$x:0000CFEE                 db 0FFh
.xdata$x:0000CFEF                 db 0FFh
.xdata$x:0000CFF0                 db    0
.xdata$x:0000CFF1                 db    0
.xdata$x:0000CFF2                 db    0
.xdata$x:0000CFF3                 db    0
.xdata$x:0000CFF4                 db 0FFh
.xdata$x:0000CFF5                 db 0FFh
.xdata$x:0000CFF6                 db 0FFh
.xdata$x:0000CFF7                 db 0FFh
.xdata$x:0000CFF8                 db    0
.xdata$x:0000CFF9                 db    0
.xdata$x:0000CFFA                 db    0
.xdata$x:0000CFFB                 db    0
.xdata$x:0000CFFC __tryblocktable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db    0
.xdata$x:0000CFFC                                         ; DATA XREF: .xdata$x:0000D020o
.xdata$x:0000CFFD                 db    0
.xdata$x:0000CFFE                 db    0
.xdata$x:0000CFFF                 db    0
.xdata$x:0000D000                 db    0
.xdata$x:0000D001                 db    0
.xdata$x:0000D002                 db    0
.xdata$x:0000D003                 db    0
.xdata$x:0000D004                 db    1
.xdata$x:0000D005                 db    0
.xdata$x:0000D006                 db    0
.xdata$x:0000D007                 db    0
.xdata$x:0000D008                 db    1
.xdata$x:0000D009                 db    0
.xdata$x:0000D00A                 db    0
.xdata$x:0000D00B                 db    0
.xdata$x:0000D00C                 dd offset __catchsym$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
.xdata$x:0000D010 __ehfuncinfo$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db  22h ; "
.xdata$x:0000D010                                         ; DATA XREF: __ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z+11o
.xdata$x:0000D011                 db    5
.xdata$x:0000D012                 db  93h ; ô
.xdata$x:0000D013                 db  19h
.xdata$x:0000D014                 db    2
.xdata$x:0000D015                 db    0
.xdata$x:0000D016                 db    0
.xdata$x:0000D017                 db    0
.xdata$x:0000D018                 dd offset __unwindtable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:0000D01C                 db    1
.xdata$x:0000D01D                 db    0
.xdata$x:0000D01E                 db    0
.xdata$x:0000D01F                 db    0
.xdata$x:0000D020                 dd offset __tryblocktable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:0000D024                 db    0
.xdata$x:0000D025                 db    0
.xdata$x:0000D026                 db    0
.xdata$x:0000D027                 db    0
.xdata$x:0000D028                 db    0
.xdata$x:0000D029                 db    0
.xdata$x:0000D02A                 db    0
.xdata$x:0000D02B                 db    0
.xdata$x:0000D02C                 db    0
.xdata$x:0000D02D                 db    0
.xdata$x:0000D02E                 db    0
.xdata$x:0000D02F                 db    0
.xdata$x:0000D030                 db    0
.xdata$x:0000D031                 db    0
.xdata$x:0000D032                 db    0
.xdata$x:0000D033                 db    0
.xdata$x:0000D033 _xdata$x        ends
.xdata$x:0000D033
.bss:0000D034 ; ===========================================================================
.bss:0000D034
.bss:0000D034 ; Segment type: Uninitialized
.bss:0000D034 ; Segment permissions: Read/Write
.bss:0000D034 _bss            segment byte public 'BSS' use32
.bss:0000D034                 assume cs:_bss
.bss:0000D034                 ;org 0D034h
.bss:0000D034                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000D034 _allocator_arg  db    ? ;
.bss:0000D035 _piecewise_construct db    ? ;
.bss:0000D036                 align 4
.bss:0000D036 _bss            ends
.bss:0000D036
.rdata:0000D038 ; ===========================================================================
.rdata:0000D038
.rdata:0000D038 ; Segment type: Pure data
.rdata:0000D038 ; Segment permissions: Read
.rdata:0000D038 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000D038 _rdata          segment para public 'DATA' use32
.rdata:0000D038                 assume cs:_rdata
.rdata:0000D038                 ;org 0D038h
.rdata:0000D038 ; COMDAT (pick any)
.rdata:0000D038                 public ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000D038 ; wchar_t `string'
.rdata:0000D038 ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000D038                                         ; DATA XREF: std::_Iterator_base12::_Orphan_me(void)+48o
.rdata:0000D038                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000D038                 unicode 0, <clude\xutility>,0
.rdata:0000D038 _rdata          ends
.rdata:0000D038
.rdata:0000D0C8 ; ===========================================================================
.rdata:0000D0C8
.rdata:0000D0C8 ; Segment type: Pure data
.rdata:0000D0C8 ; Segment permissions: Read
.rdata:0000D0C8 _rdata          segment dword public 'DATA' use32
.rdata:0000D0C8                 assume cs:_rdata
.rdata:0000D0C8                 ;org 0D0C8h
.rdata:0000D0C8 ; COMDAT (pick any)
.rdata:0000D0C8                 public ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
.rdata:0000D0C8 ; wchar_t `string'
.rdata:0000D0C8 ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@:
.rdata:0000D0C8                                         ; DATA XREF: std::_Iterator_base12::_Orphan_me(void)+4Do
.rdata:0000D0C8                 unicode 0, <ITERATOR LIST CORRUPTED!>,0
.rdata:0000D0FA                 align 4
.rdata:0000D0FA _rdata          ends
.rdata:0000D0FA
.rdata:0000D0FC ; ===========================================================================
.rdata:0000D0FC
.rdata:0000D0FC ; Segment type: Pure data
.rdata:0000D0FC ; Segment permissions: Read
.rdata:0000D0FC _rdata          segment dword public 'DATA' use32
.rdata:0000D0FC                 assume cs:_rdata
.rdata:0000D0FC                 ;org 0D0FCh
.rdata:0000D0FC ; COMDAT (pick largest)
.rdata:0000D0FC                 dd offset ??_R4error_category@std@@6B@ ; const std::error_category::`RTTI Complete Object Locator'
.rdata:0000D100                 public ??_7error_category@std@@6B@
.rdata:0000D100 ; const std::error_category::`vftable'
.rdata:0000D100 ??_7error_category@std@@6B@ dd offset ??_Eerror_category@std@@UAEPAXI@Z
.rdata:0000D100                                         ; DATA XREF: std::error_category::error_category(void)+Ao
.rdata:0000D100                                         ; std::error_category::~error_category(void)+Ao
.rdata:0000D100                                         ; std::error_category::`vector deleting destructor'(uint)
.rdata:0000D104                 dd offset __purecall
.rdata:0000D108                 dd offset __purecall
.rdata:0000D10C                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000D110                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000D114                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000D114 _rdata          ends
.rdata:0000D114
.rdata:0000D118 ; ===========================================================================
.rdata:0000D118
.rdata:0000D118 ; Segment type: Pure data
.rdata:0000D118 ; Segment permissions: Read
.rdata:0000D118 _rdata          segment dword public 'DATA' use32
.rdata:0000D118                 assume cs:_rdata
.rdata:0000D118                 ;org 0D118h
.rdata:0000D118 ; COMDAT (pick largest)
.rdata:0000D118                 dd offset ??_R4_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata:0000D11C                 public ??_7_Generic_error_category@std@@6B@
.rdata:0000D11C ; const std::_Generic_error_category::`vftable'
.rdata:0000D11C ??_7_Generic_error_category@std@@6B@ dd offset ??_E_Generic_error_category@std@@UAEPAXI@Z
.rdata:0000D11C                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+38o
.rdata:0000D11C                                         ; std::_Generic_error_category::`vector deleting destructor'(uint)
.rdata:0000D120                 dd offset ?name@_Generic_error_category@std@@UBEPBDXZ ; std::_Generic_error_category::name(void)
.rdata:0000D124                 dd offset ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.rdata:0000D128                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000D12C                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000D130                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000D130 _rdata          ends
.rdata:0000D130
.rdata:0000D134 ; ===========================================================================
.rdata:0000D134
.rdata:0000D134 ; Segment type: Pure data
.rdata:0000D134 ; Segment permissions: Read
.rdata:0000D134 _rdata          segment dword public 'DATA' use32
.rdata:0000D134                 assume cs:_rdata
.rdata:0000D134                 ;org 0D134h
.rdata:0000D134 ; COMDAT (pick any)
.rdata:0000D134                 public ??_C@_07DCLBNMLN@generic?$AA@
.rdata:0000D134 ; `string'
.rdata:0000D134 ??_C@_07DCLBNMLN@generic?$AA@ db 'generic',0
.rdata:0000D134                                         ; DATA XREF: std::_Generic_error_category::name(void)+7o
.rdata:0000D134 _rdata          ends
.rdata:0000D134
.rdata:0000D13C ; ===========================================================================
.rdata:0000D13C
.rdata:0000D13C ; Segment type: Pure data
.rdata:0000D13C ; Segment permissions: Read
.rdata:0000D13C _rdata          segment dword public 'DATA' use32
.rdata:0000D13C                 assume cs:_rdata
.rdata:0000D13C                 ;org 0D13Ch
.rdata:0000D13C ; COMDAT (pick any)
.rdata:0000D13C                 public ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
.rdata:0000D13C ; `string'
.rdata:0000D13C ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ db 'unknown error',0
.rdata:0000D13C                                         ; DATA XREF: std::_Generic_error_category::message(int):loc_AD2Co
.rdata:0000D13C                                         ; std::_System_error_category::message(int):loc_AEA8o
.rdata:0000D14A                 align 4
.rdata:0000D14A _rdata          ends
.rdata:0000D14A
.rdata:0000D14C ; ===========================================================================
.rdata:0000D14C
.rdata:0000D14C ; Segment type: Pure data
.rdata:0000D14C ; Segment permissions: Read
.rdata:0000D14C _rdata          segment dword public 'DATA' use32
.rdata:0000D14C                 assume cs:_rdata
.rdata:0000D14C                 ;org 0D14Ch
.rdata:0000D14C ; COMDAT (pick largest)
.rdata:0000D14C                 dd offset ??_R4_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata:0000D150                 public ??_7_Iostream_error_category@std@@6B@
.rdata:0000D150 ; const std::_Iostream_error_category::`vftable'
.rdata:0000D150 ??_7_Iostream_error_category@std@@6B@ dd offset ??_E_Iostream_error_category@std@@UAEPAXI@Z
.rdata:0000D150                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+38o
.rdata:0000D150                                         ; std::_Iostream_error_category::`vector deleting destructor'(uint)
.rdata:0000D154                 dd offset ?name@_Iostream_error_category@std@@UBEPBDXZ ; std::_Iostream_error_category::name(void)
.rdata:0000D158                 dd offset ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message(int)
.rdata:0000D15C                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000D160                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000D164                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000D164 _rdata          ends
.rdata:0000D164
.rdata:0000D168 ; ===========================================================================
.rdata:0000D168
.rdata:0000D168 ; Segment type: Pure data
.rdata:0000D168 ; Segment permissions: Read
.rdata:0000D168 _rdata          segment dword public 'DATA' use32
.rdata:0000D168                 assume cs:_rdata
.rdata:0000D168                 ;org 0D168h
.rdata:0000D168 ; COMDAT (pick any)
.rdata:0000D168                 public ??_C@_08LLGCOLLL@iostream?$AA@
.rdata:0000D168 ; `string'
.rdata:0000D168 ??_C@_08LLGCOLLL@iostream?$AA@ db 'iostream',0
.rdata:0000D168                                         ; DATA XREF: std::_Iostream_error_category::name(void)+7o
.rdata:0000D171                 align 4
.rdata:0000D171 _rdata          ends
.rdata:0000D171
.rdata:0000D174 ; ===========================================================================
.rdata:0000D174
.rdata:0000D174 ; Segment type: Pure data
.rdata:0000D174 ; Segment permissions: Read
.rdata:0000D174 _rdata          segment dword public 'DATA' use32
.rdata:0000D174                 assume cs:_rdata
.rdata:0000D174                 ;org 0D174h
.rdata:0000D174 ; COMDAT (pick any)
.rdata:0000D174                 public ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
.rdata:0000D174 ; char `string'[]
.rdata:0000D174 ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ db 'iostream stream error',0
.rdata:0000D174                                         ; DATA XREF: std::_Iostream_error_category::message(int)+35o
.rdata:0000D18A                 align 4
.rdata:0000D18A _rdata          ends
.rdata:0000D18A
.rdata:0000D18C ; ===========================================================================
.rdata:0000D18C
.rdata:0000D18C ; Segment type: Pure data
.rdata:0000D18C ; Segment permissions: Read
.rdata:0000D18C _rdata          segment dword public 'DATA' use32
.rdata:0000D18C                 assume cs:_rdata
.rdata:0000D18C                 ;org 0D18Ch
.rdata:0000D18C ; COMDAT (pick largest)
.rdata:0000D18C                 dd offset ??_R4_System_error_category@std@@6B@ ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata:0000D190                 public ??_7_System_error_category@std@@6B@
.rdata:0000D190 ; const std::_System_error_category::`vftable'
.rdata:0000D190 ??_7_System_error_category@std@@6B@ dd offset ??_E_System_error_category@std@@UAEPAXI@Z
.rdata:0000D190                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+38o
.rdata:0000D190                                         ; std::_System_error_category::`vector deleting destructor'(uint)
.rdata:0000D194                 dd offset ?name@_System_error_category@std@@UBEPBDXZ ; std::_System_error_category::name(void)
.rdata:0000D198                 dd offset ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message(int)
.rdata:0000D19C                 dd offset ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition(int)
.rdata:0000D1A0                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000D1A4                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000D1A4 _rdata          ends
.rdata:0000D1A4
.rdata:0000D1A8 ; ===========================================================================
.rdata:0000D1A8
.rdata:0000D1A8 ; Segment type: Pure data
.rdata:0000D1A8 ; Segment permissions: Read
.rdata:0000D1A8 _rdata          segment dword public 'DATA' use32
.rdata:0000D1A8                 assume cs:_rdata
.rdata:0000D1A8                 ;org 0D1A8h
.rdata:0000D1A8 ; COMDAT (pick any)
.rdata:0000D1A8                 public ??_C@_06FHFOAHML@system?$AA@
.rdata:0000D1A8 ; `string'
.rdata:0000D1A8 ??_C@_06FHFOAHML@system?$AA@ db 'system',0
.rdata:0000D1A8                                         ; DATA XREF: std::_System_error_category::name(void)+7o
.rdata:0000D1AF                 align 10h
.rdata:0000D1AF _rdata          ends
.rdata:0000D1AF
.bss:0000D1B0 ; ===========================================================================
.bss:0000D1B0
.bss:0000D1B0 ; Segment type: Uninitialized
.bss:0000D1B0 ; Segment permissions: Read/Write
.bss:0000D1B0 _bss            segment dword public 'BSS' use32
.bss:0000D1B0                 assume cs:_bss
.bss:0000D1B0                 ;org 0D1B0h
.bss:0000D1B0 ; COMDAT (pick any)
.bss:0000D1B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000D1B0                 public ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.bss:0000D1B0 ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.bss:0000D1B0 ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A db    ? ;
.bss:0000D1B0                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o
.bss:0000D1B0                                         ; `dynamic atexit destructor for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o ...
.bss:0000D1B1                 db    ? ;
.bss:0000D1B2                 db    ? ;
.bss:0000D1B3                 db    ? ;
.bss:0000D1B3 _bss            ends
.bss:0000D1B3
.bss:0000D1B4 ; ===========================================================================
.bss:0000D1B4
.bss:0000D1B4 ; Segment type: Uninitialized
.bss:0000D1B4 ; Segment permissions: Read/Write
.bss:0000D1B4 _bss            segment dword public 'BSS' use32
.bss:0000D1B4                 assume cs:_bss
.bss:0000D1B4                 ;org 0D1B4h
.bss:0000D1B4 ; COMDAT (pick any)
.bss:0000D1B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000D1B4                 public ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.bss:0000D1B4 ; std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object
.bss:0000D1B4 ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A db    ? ;
.bss:0000D1B4                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:0000D1B4                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:0000D1B5                 db    ? ;
.bss:0000D1B6                 db    ? ;
.bss:0000D1B7                 db    ? ;
.bss:0000D1B7 _bss            ends
.bss:0000D1B7
.bss:0000D1B8 ; ===========================================================================
.bss:0000D1B8
.bss:0000D1B8 ; Segment type: Uninitialized
.bss:0000D1B8 ; Segment permissions: Read/Write
.bss:0000D1B8 _bss            segment dword public 'BSS' use32
.bss:0000D1B8                 assume cs:_bss
.bss:0000D1B8                 ;org 0D1B8h
.bss:0000D1B8 ; COMDAT (pick any)
.bss:0000D1B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000D1B8                 public ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.bss:0000D1B8 ; std::_System_error_category std::_Error_objects<int>::_System_object
.bss:0000D1B8 ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A db    ? ;
.bss:0000D1B8                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o
.bss:0000D1B8                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o ...
.bss:0000D1B9                 db    ? ;
.bss:0000D1BA                 db    ? ;
.bss:0000D1BB                 db    ? ;
.bss:0000D1BB _bss            ends
.bss:0000D1BB
.rdata:0000D1BC ; ===========================================================================
.rdata:0000D1BC
.rdata:0000D1BC ; Segment type: Pure data
.rdata:0000D1BC ; Segment permissions: Read
.rdata:0000D1BC _rdata          segment dword public 'DATA' use32
.rdata:0000D1BC                 assume cs:_rdata
.rdata:0000D1BC                 ;org 0D1BCh
.rdata:0000D1BC ; COMDAT (pick any)
.rdata:0000D1BC                 public ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
.rdata:0000D1BC ; int std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.rdata:0000D1BC ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB dd 0FFFFFFFFh
.rdata:0000D1BC                                         ; DATA XREF: ProjectPanel::getRelativePath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+77r
.rdata:0000D1BC                                         ; ProjectPanel::notified(tagNMHDR *)+17Ar ...
.rdata:0000D1BC _rdata          ends
.rdata:0000D1BC
.bss:0000D1C0 ; ===========================================================================
.bss:0000D1C0
.bss:0000D1C0 ; Segment type: Uninitialized
.bss:0000D1C0 ; Segment permissions: Read/Write
.bss:0000D1C0 _bss            segment dword public 'BSS' use32
.bss:0000D1C0                 assume cs:_bss
.bss:0000D1C0                 ;org 0D1C0h
.bss:0000D1C0 ; COMDAT (pick any)
.bss:0000D1C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000D1C0                 public ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.bss:0000D1C0 ; std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id
.bss:0000D1C0 ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:0000D1C0                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+5o
.bss:0000D1C1                 db    ? ;
.bss:0000D1C2                 db    ? ;
.bss:0000D1C3                 db    ? ;
.bss:0000D1C3 _bss            ends
.bss:0000D1C3
.bss:0000D1C4 ; ===========================================================================
.bss:0000D1C4
.bss:0000D1C4 ; Segment type: Uninitialized
.bss:0000D1C4 ; Segment permissions: Read/Write
.bss:0000D1C4 _bss            segment dword public 'BSS' use32
.bss:0000D1C4                 assume cs:_bss
.bss:0000D1C4                 ;org 0D1C4h
.bss:0000D1C4 ; COMDAT (pick any)
.bss:0000D1C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000D1C4                 public ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.bss:0000D1C4 ; std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id
.bss:0000D1C4 ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:0000D1C4                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+5o
.bss:0000D1C5                 db    ? ;
.bss:0000D1C6                 db    ? ;
.bss:0000D1C7                 db    ? ;
.bss:0000D1C7 _bss            ends
.bss:0000D1C7
.rdata:0000D1C8 ; ===========================================================================
.rdata:0000D1C8
.rdata:0000D1C8 ; Segment type: Pure data
.rdata:0000D1C8 ; Segment permissions: Read
.rdata:0000D1C8 _rdata          segment dword public 'DATA' use32
.rdata:0000D1C8                 assume cs:_rdata
.rdata:0000D1C8                 ;org 0D1C8h
.rdata:0000D1C8 ; COMDAT (pick largest)
.rdata:0000D1C8                 dd offset ??_R4Window@@6B@ ; const Window::`RTTI Complete Object Locator'
.rdata:0000D1CC                 public ??_7Window@@6B@
.rdata:0000D1CC ; const Window::`vftable'
.rdata:0000D1CC ??_7Window@@6B@ dd offset ??_EWindow@@UAEPAXI@Z
.rdata:0000D1CC                                         ; DATA XREF: Window::Window(void)+Ao
.rdata:0000D1CC                                         ; Window::~Window(void)+Ao
.rdata:0000D1CC                                         ; Window::`vector deleting destructor'(uint)
.rdata:0000D1D0                 dd offset ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; Window::init(HINSTANCE__ *,HWND__ *)
.rdata:0000D1D4                 dd offset __purecall
.rdata:0000D1D8                 dd offset ?display@Window@@UBEX_N@Z ; Window::display(bool)
.rdata:0000D1DC                 dd offset ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z ; Window::reSizeTo(tagRECT &)
.rdata:0000D1E0                 dd offset ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z ; Window::reSizeToWH(tagRECT &)
.rdata:0000D1E4                 dd offset ?redraw@Window@@UBEX_N@Z ; Window::redraw(bool)
.rdata:0000D1E8                 dd offset ?getClientRect@Window@@UBEXAAUtagRECT@@@Z ; Window::getClientRect(tagRECT &)
.rdata:0000D1EC                 dd offset ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z ; Window::getWindowRect(tagRECT &)
.rdata:0000D1F0                 dd offset ?getWidth@Window@@UBEHXZ ; Window::getWidth(void)
.rdata:0000D1F4                 dd offset ?getHeight@Window@@UBEHXZ ; Window::getHeight(void)
.rdata:0000D1F8                 dd offset ?isVisible@Window@@UBE_NXZ ; Window::isVisible(void)
.rdata:0000D1F8 _rdata          ends
.rdata:0000D1F8
.rdata:0000D1FC ; ===========================================================================
.rdata:0000D1FC
.rdata:0000D1FC ; Segment type: Pure data
.rdata:0000D1FC ; Segment permissions: Read
.rdata:0000D1FC _rdata          segment dword public 'DATA' use32
.rdata:0000D1FC                 assume cs:_rdata
.rdata:0000D1FC                 ;org 0D1FCh
.rdata:0000D1FC ; COMDAT (pick largest)
.rdata:0000D1FC                 dd offset ??_R4StaticDialog@@6B@ ; const StaticDialog::`RTTI Complete Object Locator'
.rdata:0000D200                 public ??_7StaticDialog@@6B@
.rdata:0000D200 ; const StaticDialog::`vftable'
.rdata:0000D200 ??_7StaticDialog@@6B@ dd offset ??_EStaticDialog@@UAEPAXI@Z
.rdata:0000D200                                         ; DATA XREF: StaticDialog::StaticDialog(void)+38o
.rdata:0000D200                                         ; StaticDialog::~StaticDialog(void)+29o
.rdata:0000D200                                         ; StaticDialog::`vector deleting destructor'(uint)
.rdata:0000D204                 dd offset ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; Window::init(HINSTANCE__ *,HWND__ *)
.rdata:0000D208                 dd offset ?destroy@StaticDialog@@UAEXXZ ; StaticDialog::destroy(void)
.rdata:0000D20C                 dd offset ?display@StaticDialog@@UBEX_N@Z ; StaticDialog::display(bool)
.rdata:0000D210                 dd offset ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z ; Window::reSizeTo(tagRECT &)
.rdata:0000D214                 dd offset ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z ; Window::reSizeToWH(tagRECT &)
.rdata:0000D218                 dd offset ?redraw@Window@@UBEX_N@Z ; Window::redraw(bool)
.rdata:0000D21C                 dd offset ?getClientRect@Window@@UBEXAAUtagRECT@@@Z ; Window::getClientRect(tagRECT &)
.rdata:0000D220                 dd offset ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z ; Window::getWindowRect(tagRECT &)
.rdata:0000D224                 dd offset ?getWidth@Window@@UBEHXZ ; Window::getWidth(void)
.rdata:0000D228                 dd offset ?getHeight@Window@@UBEHXZ ; Window::getHeight(void)
.rdata:0000D22C                 dd offset ?isVisible@Window@@UBE_NXZ ; Window::isVisible(void)
.rdata:0000D230                 dd offset ?create@StaticDialog@@UAEXH_N0@Z ; StaticDialog::create(int,bool,bool)
.rdata:0000D234                 dd offset ?isCreated@StaticDialog@@UBE_NXZ ; StaticDialog::isCreated(void)
.rdata:0000D238                 dd offset __purecall
.rdata:0000D238 _rdata          ends
.rdata:0000D238
.rdata:0000D23C ; ===========================================================================
.rdata:0000D23C
.rdata:0000D23C ; Segment type: Pure data
.rdata:0000D23C ; Segment permissions: Read
.rdata:0000D23C _rdata          segment dword public 'DATA' use32
.rdata:0000D23C                 assume cs:_rdata
.rdata:0000D23C                 ;org 0D23Ch
.rdata:0000D23C ; COMDAT (pick largest)
.rdata:0000D23C                 dd offset ??_R4FileRelocalizerDlg@@6B@ ; const FileRelocalizerDlg::`RTTI Complete Object Locator'
.rdata:0000D240                 public ??_7FileRelocalizerDlg@@6B@
.rdata:0000D240 ; const FileRelocalizerDlg::`vftable'
.rdata:0000D240 ??_7FileRelocalizerDlg@@6B@ dd offset ??_EFileRelocalizerDlg@@UAEPAXI@Z
.rdata:0000D240                                         ; DATA XREF: FileRelocalizerDlg::FileRelocalizerDlg(void)+38o
.rdata:0000D240                                         ; FileRelocalizerDlg::`vector deleting destructor'(uint)
.rdata:0000D244                 dd offset ?init@FileRelocalizerDlg@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; FileRelocalizerDlg::init(HINSTANCE__ *,HWND__ *)
.rdata:0000D248                 dd offset ?destroy@FileRelocalizerDlg@@UAEXXZ ; FileRelocalizerDlg::destroy(void)
.rdata:0000D24C                 dd offset ?display@StaticDialog@@UBEX_N@Z ; StaticDialog::display(bool)
.rdata:0000D250                 dd offset ?reSizeTo@Window@@UAEXAAUtagRECT@@@Z ; Window::reSizeTo(tagRECT &)
.rdata:0000D254                 dd offset ?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z ; Window::reSizeToWH(tagRECT &)
.rdata:0000D258                 dd offset ?redraw@Window@@UBEX_N@Z ; Window::redraw(bool)
.rdata:0000D25C                 dd offset ?getClientRect@Window@@UBEXAAUtagRECT@@@Z ; Window::getClientRect(tagRECT &)
.rdata:0000D260                 dd offset ?getWindowRect@Window@@UBEXAAUtagRECT@@@Z ; Window::getWindowRect(tagRECT &)
.rdata:0000D264                 dd offset ?getWidth@Window@@UBEHXZ ; Window::getWidth(void)
.rdata:0000D268                 dd offset ?getHeight@Window@@UBEHXZ ; Window::getHeight(void)
.rdata:0000D26C                 dd offset ?isVisible@Window@@UBE_NXZ ; Window::isVisible(void)
.rdata:0000D270                 dd offset ?create@StaticDialog@@UAEXH_N0@Z ; StaticDialog::create(int,bool,bool)
.rdata:0000D274                 dd offset ?isCreated@StaticDialog@@UBE_NXZ ; StaticDialog::isCreated(void)
.rdata:0000D278                 dd offset ?run_dlgProc@FileRelocalizerDlg@@MAGHIIJ@Z ; FileRelocalizerDlg::run_dlgProc(uint,uint,long)
.rdata:0000D278 _rdata          ends
.rdata:0000D278
.rdata:0000D27C ; ===========================================================================
.rdata:0000D27C
.rdata:0000D27C ; Segment type: Pure data
.rdata:0000D27C ; Segment permissions: Read
.rdata:0000D27C _rdata          segment dword public 'DATA' use32
.rdata:0000D27C                 assume cs:_rdata
.rdata:0000D27C                 ;org 0D27Ch
.rdata:0000D27C ; COMDAT (pick largest)
.rdata:0000D27C                 dd offset ??_R4TiXmlDocument@@6B@ ; const TiXmlDocument::`RTTI Complete Object Locator'
.rdata:0000D280                 public ??_7TiXmlDocument@@6B@
.rdata:0000D280 ; const TiXmlDocument::`vftable'
.rdata:0000D280 ??_7TiXmlDocument@@6B@ dd offset ??_ETiXmlDocument@@UAEPAXI@Z
.rdata:0000D280                                         ; DATA XREF: TiXmlDocument::~TiXmlDocument(void)+29o
.rdata:0000D280                                         ; TiXmlDocument::`vector deleting destructor'(uint)
.rdata:0000D284                 dd offset ?Print@TiXmlDocument@@UBEXPAU_iobuf@@H@Z ; TiXmlDocument::Print(_iobuf *,int)
.rdata:0000D288                 dd offset ?StreamOut@TiXmlDocument@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z ; TiXmlDocument::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.rdata:0000D28C                 dd offset ?Parse@TiXmlDocument@@UAEPB_WPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::Parse(wchar_t const *,TiXmlParsingData *)
.rdata:0000D290                 dd offset ?Type@TiXmlNode@@UBEHXZ ; TiXmlNode::Type(void)
.rdata:0000D294                 dd offset ?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ ; TiXmlDocument::Clone(void)
.rdata:0000D298                 dd offset ?StreamIn@TiXmlDocument@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z ; TiXmlDocument::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.rdata:0000D298 _rdata          ends
.rdata:0000D298
.rdata:0000D29C ; ===========================================================================
.rdata:0000D29C
.rdata:0000D29C ; Segment type: Pure data
.rdata:0000D29C ; Segment permissions: Read
.rdata:0000D29C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000D29C _rdata          segment para public 'DATA' use32
.rdata:0000D29C                 assume cs:_rdata
.rdata:0000D29C                 ;org 0D29Ch
.rdata:0000D29C ; COMDAT (pick any)
.rdata:0000D29C                 public ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000D29C ; wchar_t `string'
.rdata:0000D29C ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000D29C                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+5Do
.rdata:0000D29C                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+8Ao ...
.rdata:0000D29C                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000D29C                 unicode 0, <clude\xstring>,0
.rdata:0000D32A                 align 4
.rdata:0000D32A _rdata          ends
.rdata:0000D32A
.bss:0000D32C ; ===========================================================================
.bss:0000D32C
.bss:0000D32C ; Segment type: Uninitialized
.bss:0000D32C ; Segment permissions: Read/Write
.bss:0000D32C _bss            segment dword public 'BSS' use32
.bss:0000D32C                 assume cs:_bss
.bss:0000D32C                 ;org 0D32Ch
.bss:0000D32C ; COMDAT (pick any)
.bss:0000D32C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000D32C                 public ?id@?$numpunct@D@std@@2V0locale@2@A
.bss:0000D32C ; std::locale::id std::numpunct<char>::id
.bss:0000D32C ?id@?$numpunct@D@std@@2V0locale@2@A db    ? ;
.bss:0000D32C                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)+5o
.bss:0000D32D                 db    ? ;
.bss:0000D32E                 db    ? ;
.bss:0000D32F                 db    ? ;
.bss:0000D32F _bss            ends
.bss:0000D32F
.bss:0000D330 ; ===========================================================================
.bss:0000D330
.bss:0000D330 ; Segment type: Uninitialized
.bss:0000D330 ; Segment permissions: Read/Write
.bss:0000D330 _bss            segment dword public 'BSS' use32
.bss:0000D330                 assume cs:_bss
.bss:0000D330                 ;org 0D330h
.bss:0000D330 ; COMDAT (pick any)
.bss:0000D330                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000D330                 public ?id@?$numpunct@_W@std@@2V0locale@2@A
.bss:0000D330 ; std::locale::id std::numpunct<wchar_t>::id
.bss:0000D330 ?id@?$numpunct@_W@std@@2V0locale@2@A db    ? ;
.bss:0000D330                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)+5o
.bss:0000D331                 db    ? ;
.bss:0000D332                 db    ? ;
.bss:0000D333                 db    ? ;
.bss:0000D333 _bss            ends
.bss:0000D333
.rdata:0000D334 ; ===========================================================================
.rdata:0000D334
.rdata:0000D334 ; Segment type: Pure data
.rdata:0000D334 ; Segment permissions: Read
.rdata:0000D334 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000D334 _rdata          segment para public 'DATA' use32
.rdata:0000D334                 assume cs:_rdata
.rdata:0000D334                 ;org 0D334h
.rdata:0000D334 ; COMDAT (pick any)
.rdata:0000D334                 public ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000D334 ; wchar_t `string'
.rdata:0000D334 ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000D334                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+19o
.rdata:0000D334                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+49o ...
.rdata:0000D334                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000D334                 unicode 0, <clude\vector>,0
.rdata:0000D334 _rdata          ends
.rdata:0000D334
.rdata:0000D3C0 ; ===========================================================================
.rdata:0000D3C0
.rdata:0000D3C0 ; Segment type: Pure data
.rdata:0000D3C0 ; Segment permissions: Read
.rdata:0000D3C0 _rdata          segment dword public 'DATA' use32
.rdata:0000D3C0                 assume cs:_rdata
.rdata:0000D3C0                 ;org 0D3C0h
.rdata:0000D3C0 ; COMDAT (pick any)
.rdata:0000D3C0                 public ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:0000D3C0 ; wchar_t `string'
.rdata:0000D3C0 ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:0000D3C0                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+1Eo
.rdata:0000D3C0                 unicode 0, <vector subscript out of range>,0
.rdata:0000D3C0 _rdata          ends
.rdata:0000D3C0
.rdata:0000D3FC ; ===========================================================================
.rdata:0000D3FC
.rdata:0000D3FC ; Segment type: Pure data
.rdata:0000D3FC ; Segment permissions: Read
.rdata:0000D3FC _rdata          segment dword public 'DATA' use32
.rdata:0000D3FC                 assume cs:_rdata
.rdata:0000D3FC                 ;org 0D3FCh
.rdata:0000D3FC ; COMDAT (pick any)
.rdata:0000D3FC                 public ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
.rdata:0000D3FC ; `string'
.rdata:0000D3FC ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ db 'Standard C++ Libraries Out of Range',0
.rdata:0000D3FC                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+2Bo
.rdata:0000D3FC                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+6Fo
.rdata:0000D3FC _rdata          ends
.rdata:0000D3FC
.rdata:0000D420 ; ===========================================================================
.rdata:0000D420
.rdata:0000D420 ; Segment type: Pure data
.rdata:0000D420 ; Segment permissions: Read
.rdata:0000D420 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000D420 _rdata          segment para public 'DATA' use32
.rdata:0000D420                 assume cs:_rdata
.rdata:0000D420                 ;org 0D420h
.rdata:0000D420 ; COMDAT (pick any)
.rdata:0000D420                 public ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
.rdata:0000D420 ; `string'
.rdata:0000D420 ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@:
.rdata:0000D420                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint):loc_7BA8o
.rdata:0000D420                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void):loc_7C78o
.rdata:0000D420                 unicode 0, <"Standard C++ Libraries Out of Range" && 0>,0
.rdata:0000D476                 align 4
.rdata:0000D476 _rdata          ends
.rdata:0000D476
.rdata:0000D478 ; ===========================================================================
.rdata:0000D478
.rdata:0000D478 ; Segment type: Pure data
.rdata:0000D478 ; Segment permissions: Read
.rdata:0000D478 _rdata          segment dword public 'DATA' use32
.rdata:0000D478                 assume cs:_rdata
.rdata:0000D478                 ;org 0D478h
.rdata:0000D478 ; COMDAT (pick any)
.rdata:0000D478                 public ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
.rdata:0000D478 ; `string'
.rdata:0000D478 ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@:
.rdata:0000D478                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+3Do
.rdata:0000D478                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+81o ...
.rdata:0000D478                 unicode 0, <%s>,0
.rdata:0000D47E                 align 10h
.rdata:0000D47E _rdata          ends
.rdata:0000D47E
.rdata:0000D480 ; ===========================================================================
.rdata:0000D480
.rdata:0000D480 ; Segment type: Pure data
.rdata:0000D480 ; Segment permissions: Read
.rdata:0000D480 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000D480 _rdata          segment para public 'DATA' use32
.rdata:0000D480                 assume cs:_rdata
.rdata:0000D480                 ;org 0D480h
.rdata:0000D480 ; COMDAT (pick any)
.rdata:0000D480                 public ??_C@_1BOI@OCMBMPPD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@
.rdata:0000D480 ; `string'
.rdata:0000D480 ??_C@_1BOI@OCMBMPPD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@:
.rdata:0000D480                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+6Ao
.rdata:0000D480                 unicode 0, <std::vector>
.rdata:0000D480                 dw 3Ch
.rdata:0000D480                 unicode 0, <class std::basic_string>
.rdata:0000D480                 dw 3Ch
.rdata:0000D480                 unicode 0, <wchar_t,struct std::char_traits>
.rdata:0000D480                 dw 3Ch
.rdata:0000D480                 unicode 0, <wchar_t>
.rdata:0000D480                 dw 3Eh
.rdata:0000D480                 unicode 0, <,class std::allocator>
.rdata:0000D480                 dw 3Ch
.rdata:0000D480                 unicode 0, <wchar_t>
.rdata:0000D480                 dw 3Eh
.rdata:0000D480                 unicode 0, < >
.rdata:0000D480                 dw 3Eh
.rdata:0000D480                 unicode 0, <,class std::allocator>
.rdata:0000D480                 dw 3Ch
.rdata:0000D480                 unicode 0, <class std::basic_string>
.rdata:0000D480                 dw 3Ch
.rdata:0000D480                 unicode 0, <wchar_t,struct std::char_traits>
.rdata:0000D480                 dw 3Ch
.rdata:0000D480                 unicode 0, <wchar_t>
.rdata:0000D480                 dw 3Eh
.rdata:0000D480                 unicode 0, <,class std::allocator>
.rdata:0000D480                 dw 3Ch
.rdata:0000D480                 unicode 0, <wchar_t>
.rdata:0000D480                 dw 3Eh
.rdata:0000D480                 unicode 0, < >
.rdata:0000D480                 dw 3Eh
.rdata:0000D480                 unicode 0, < >
.rdata:0000D480                 dw 3Eh
.rdata:0000D480                 unicode 0, < >
.rdata:0000D480                 dw 3Eh
.rdata:0000D480                 unicode 0, <::operator []>,0
.rdata:0000D480 _rdata          ends
.rdata:0000D480
.rdata:0000D668 ; ===========================================================================
.rdata:0000D668
.rdata:0000D668 ; Segment type: Pure data
.rdata:0000D668 ; Segment permissions: Read
.rdata:0000D668 _rdata          segment dword public 'DATA' use32
.rdata:0000D668                 assume cs:_rdata
.rdata:0000D668                 ;org 0D668h
.rdata:0000D668 ; COMDAT (pick any)
.rdata:0000D668                 public ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
.rdata:0000D668 ; `string'
.rdata:0000D668 ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@:
.rdata:0000D668                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+6Fo
.rdata:0000D668                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+ADo
.rdata:0000D668                 unicode 0, <"out of range">,0
.rdata:0000D686                 align 4
.rdata:0000D686 _rdata          ends
.rdata:0000D686
.rdata:0000D688 ; ===========================================================================
.rdata:0000D688
.rdata:0000D688 ; Segment type: Pure data
.rdata:0000D688 ; Segment permissions: Read
.rdata:0000D688 _rdata          segment dword public 'DATA' use32
.rdata:0000D688                 assume cs:_rdata
.rdata:0000D688                 ;org 0D688h
.rdata:0000D688 ; COMDAT (pick any)
.rdata:0000D688                 public ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
.rdata:0000D688 ; char `string'[]
.rdata:0000D688 ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@ db 'invalid vector<T> subscript',0
.rdata:0000D688                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Xran(void)+7o
.rdata:0000D688 _rdata          ends
.rdata:0000D688
.rdata:0000D6A4 ; ===========================================================================
.rdata:0000D6A4
.rdata:0000D6A4 ; Segment type: Pure data
.rdata:0000D6A4 ; Segment permissions: Read
.rdata:0000D6A4 _rdata          segment dword public 'DATA' use32
.rdata:0000D6A4                 assume cs:_rdata
.rdata:0000D6A4                 ;org 0D6A4h
.rdata:0000D6A4 ; COMDAT (pick any)
.rdata:0000D6A4                 public ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
.rdata:0000D6A4 ; char `string'[]
.rdata:0000D6A4 ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ db 'string too long',0
.rdata:0000D6A4                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+7o
.rdata:0000D6A4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+7o
.rdata:0000D6A4 _rdata          ends
.rdata:0000D6A4
.rdata:0000D6B4 ; ===========================================================================
.rdata:0000D6B4
.rdata:0000D6B4 ; Segment type: Pure data
.rdata:0000D6B4 ; Segment permissions: Read
.rdata:0000D6B4 _rdata          segment dword public 'DATA' use32
.rdata:0000D6B4                 assume cs:_rdata
.rdata:0000D6B4                 ;org 0D6B4h
.rdata:0000D6B4 ; COMDAT (pick any)
.rdata:0000D6B4                 public ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
.rdata:0000D6B4 ; char `string'[]
.rdata:0000D6B4 ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ db 'invalid string position',0
.rdata:0000D6B4                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+7o
.rdata:0000D6B4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+7o
.rdata:0000D6B4 _rdata          ends
.rdata:0000D6B4
.rdata:0000D6CC ; ===========================================================================
.rdata:0000D6CC
.rdata:0000D6CC ; Segment type: Pure data
.rdata:0000D6CC ; Segment permissions: Read
.rdata:0000D6CC _rdata          segment dword public 'DATA' use32
.rdata:0000D6CC                 assume cs:_rdata
.rdata:0000D6CC                 ;org 0D6CCh
.rdata:0000D6CC ; COMDAT (pick any)
.rdata:0000D6CC                 public ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
.rdata:0000D6CC ; char `string'[]
.rdata:0000D6CC ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ db 'vector<T> too long',0
.rdata:0000D6CC                                         ; DATA XREF: std::vector<int,std::allocator<int>>::_Xlen(void)+7o
.rdata:0000D6CC                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Xlen(void)+7o
.rdata:0000D6DF                 align 10h
.rdata:0000D6DF _rdata          ends
.rdata:0000D6DF
.rdata:0000D6E0 ; ===========================================================================
.rdata:0000D6E0
.rdata:0000D6E0 ; Segment type: Pure data
.rdata:0000D6E0 ; Segment permissions: Read
.rdata:0000D6E0 _rdata          segment dword public 'DATA' use32
.rdata:0000D6E0                 assume cs:_rdata
.rdata:0000D6E0                 ;org 0D6E0h
.rdata:0000D6E0 ; COMDAT (pick any)
.rdata:0000D6E0                 public ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
.rdata:0000D6E0 ; `string'
.rdata:0000D6E0 ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ db 'Standard C++ Libraries Invalid Argument',0
.rdata:0000D6E0                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+41o
.rdata:0000D6E0 _rdata          ends
.rdata:0000D6E0
.rdata:0000D708 ; ===========================================================================
.rdata:0000D708
.rdata:0000D708 ; Segment type: Pure data
.rdata:0000D708 ; Segment permissions: Read
.rdata:0000D708 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000D708 _rdata          segment para public 'DATA' use32
.rdata:0000D708                 assume cs:_rdata
.rdata:0000D708                 ;org 0D708h
.rdata:0000D708 ; COMDAT (pick any)
.rdata:0000D708                 public ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
.rdata:0000D708 ; `string'
.rdata:0000D708 ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@:
.rdata:0000D708                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &):loc_83B2o
.rdata:0000D708                 unicode 0, <"Standard C++ Libraries Invalid Argument" && 0>,0
.rdata:0000D766                 align 4
.rdata:0000D766 _rdata          ends
.rdata:0000D766
.rdata:0000D768 ; ===========================================================================
.rdata:0000D768
.rdata:0000D768 ; Segment type: Pure data
.rdata:0000D768 ; Segment permissions: Read
.rdata:0000D768 _rdata          segment dword public 'DATA' use32
.rdata:0000D768                 assume cs:_rdata
.rdata:0000D768                 ;org 0D768h
.rdata:0000D768 ; COMDAT (pick any)
.rdata:0000D768                 public ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
.rdata:0000D768 ; `string'
.rdata:0000D768 ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@:
.rdata:0000D768                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+85o
.rdata:0000D768                 unicode 0, <"invalid argument">,0
.rdata:0000D78E                 align 10h
.rdata:0000D78E _rdata          ends
.rdata:0000D78E
.rdata:0000D790 ; ===========================================================================
.rdata:0000D790
.rdata:0000D790 ; Segment type: Pure data
.rdata:0000D790 ; Segment permissions: Read
.rdata:0000D790 _rdata          segment dword public 'DATA' use32
.rdata:0000D790                 assume cs:_rdata
.rdata:0000D790                 ;org 0D790h
.rdata:0000D790 ; COMDAT (pick any)
.rdata:0000D790                 public ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
.rdata:0000D790 ; wchar_t `string'
.rdata:0000D790 ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@:
.rdata:0000D790                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+34o
.rdata:0000D790                 unicode 0, <string iterators incompatible>,0
.rdata:0000D790 _rdata          ends
.rdata:0000D790
.rdata:0000D7CC ; ===========================================================================
.rdata:0000D7CC
.rdata:0000D7CC ; Segment type: Pure data
.rdata:0000D7CC ; Segment permissions: Read
.rdata:0000D7CC ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000D7CC _rdata          segment para public 'DATA' use32
.rdata:0000D7CC                 assume cs:_rdata
.rdata:0000D7CC                 ;org 0D7CCh
.rdata:0000D7CC ; COMDAT (pick any)
.rdata:0000D7CC                 public ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
.rdata:0000D7CC ; `string'
.rdata:0000D7CC ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@:
.rdata:0000D7CC                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+80o
.rdata:0000D7CC                 unicode 0, <std::_String_const_iterator>
.rdata:0000D7CC                 dw 3Ch
.rdata:0000D7CC                 unicode 0, <class std::_String_val>
.rdata:0000D7CC                 dw 3Ch
.rdata:0000D7CC                 unicode 0, <struct std::_Simple_types>
.rdata:0000D7CC                 dw 3Ch
.rdata:0000D7CC                 unicode 0, <wchar_t>
.rdata:0000D7CC                 dw 3Eh
.rdata:0000D7CC                 unicode 0, < >
.rdata:0000D7CC                 dw 3Eh
.rdata:0000D7CC                 unicode 0, < >
.rdata:0000D7CC                 dw 3Eh
.rdata:0000D7CC                 unicode 0, <::_Compat>,0
.rdata:0000D892                 align 4
.rdata:0000D892 _rdata          ends
.rdata:0000D892
.rdata:0000D894 ; ===========================================================================
.rdata:0000D894
.rdata:0000D894 ; Segment type: Pure data
.rdata:0000D894 ; Segment permissions: Read
.rdata:0000D894 _rdata          segment dword public 'DATA' use32
.rdata:0000D894                 assume cs:_rdata
.rdata:0000D894                 ;org 0D894h
.rdata:0000D894 ; COMDAT (pick any)
.rdata:0000D894                 public ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
.rdata:0000D894 ; wchar_t `string'
.rdata:0000D894 ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@:
.rdata:0000D894                                         ; DATA XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+11o
.rdata:0000D894                                         ; std::_Debug_pointer<int>(int *,wchar_t const *,uint)+11o ...
.rdata:0000D894                 unicode 0, <invalid null pointer>,0
.rdata:0000D8BE                 align 10h
.rdata:0000D8BE _rdata          ends
.rdata:0000D8BE
.rdata:0000D8C0 ; ===========================================================================
.rdata:0000D8C0
.rdata:0000D8C0 ; Segment type: Pure data
.rdata:0000D8C0 ; Segment permissions: Read
.rdata:0000D8C0 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000D8C0 _rdata          segment para public 'DATA' use32
.rdata:0000D8C0                 assume cs:_rdata
.rdata:0000D8C0                 ;org 0D8C0h
.rdata:0000D8C0 ; COMDAT (pick any)
.rdata:0000D8C0                 public ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
.rdata:0000D8C0 ; wchar_t `string'
.rdata:0000D8C0 ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@:
.rdata:0000D8C0                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+62o
.rdata:0000D8C0                 unicode 0, <string iterator not dereferencable>,0
.rdata:0000D906                 align 4
.rdata:0000D906 _rdata          ends
.rdata:0000D906
.rdata:0000D908 ; ===========================================================================
.rdata:0000D908
.rdata:0000D908 ; Segment type: Pure data
.rdata:0000D908 ; Segment permissions: Read
.rdata:0000D908 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000D908 _rdata          segment para public 'DATA' use32
.rdata:0000D908                 assume cs:_rdata
.rdata:0000D908                 ;org 0D908h
.rdata:0000D908 ; COMDAT (pick any)
.rdata:0000D908                 public ??_C@_1MM@BFHGHMKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
.rdata:0000D908 ; `string'
.rdata:0000D908 ??_C@_1MM@BFHGHMKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@:
.rdata:0000D908                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+A8o
.rdata:0000D908                 unicode 0, <std::_String_const_iterator>
.rdata:0000D908                 dw 3Ch
.rdata:0000D908                 unicode 0, <class std::_String_val>
.rdata:0000D908                 dw 3Ch
.rdata:0000D908                 unicode 0, <struct std::_Simple_types>
.rdata:0000D908                 dw 3Ch
.rdata:0000D908                 unicode 0, <wchar_t>
.rdata:0000D908                 dw 3Eh
.rdata:0000D908                 unicode 0, < >
.rdata:0000D908                 dw 3Eh
.rdata:0000D908                 unicode 0, < >
.rdata:0000D908                 dw 3Eh
.rdata:0000D908                 unicode 0, <::operator *>,0
.rdata:0000D908 _rdata          ends
.rdata:0000D908
.rdata:0000D9D4 ; ===========================================================================
.rdata:0000D9D4
.rdata:0000D9D4 ; Segment type: Pure data
.rdata:0000D9D4 ; Segment permissions: Read
.rdata:0000D9D4 _rdata          segment dword public 'DATA' use32
.rdata:0000D9D4                 assume cs:_rdata
.rdata:0000D9D4                 ;org 0D9D4h
.rdata:0000D9D4 ; COMDAT (pick any)
.rdata:0000D9D4                 public ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:0000D9D4 ; wchar_t `string'
.rdata:0000D9D4 ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:0000D9D4                                         ; DATA XREF: std::_Debug_range2<int *>(int *,int *,wchar_t const *,uint,std::random_access_iterator_tag)+43o
.rdata:0000D9D4                                         ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+43o
.rdata:0000D9D4                 unicode 0, <invalid iterator range>,0
.rdata:0000DA02                 align 4
.rdata:0000DA02 _rdata          ends
.rdata:0000DA02
.rdata:0000DA04 ; ===========================================================================
.rdata:0000DA04
.rdata:0000DA04 ; Segment type: Pure data
.rdata:0000DA04 ; Segment permissions: Read
.rdata:0000DA04 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000DA04 _rdata          segment para public 'DATA' use32
.rdata:0000DA04                 assume cs:_rdata
.rdata:0000DA04                 ;org 0DA04h
.rdata:0000DA04 ; COMDAT (pick any)
.rdata:0000DA04                 public ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000DA04 ; wchar_t `string'
.rdata:0000DA04 ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000DA04                                         ; DATA XREF: std::_Uninit_move<int,int,int>(int *,int *,int *,std::_Wrap_alloc<std::allocator<int>> &,int *,std::_Scalar_ptr_iterator_tag)+9o
.rdata:0000DA04                                         ; std::_Uninit_move<int,int,int>(int *,int *,int *,std::_Wrap_alloc<std::allocator<int>> &,int *,std::_Scalar_ptr_iterator_tag)+23o ...
.rdata:0000DA04                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000DA04                 unicode 0, <clude\xmemory>,0
.rdata:0000DA92                 align 4
.rdata:0000DA92 _rdata          ends
.rdata:0000DA92
.rdata$r:0000DA94 ; ===========================================================================
.rdata$r:0000DA94
.rdata$r:0000DA94 ; Segment type: Pure data
.rdata$r:0000DA94 ; Segment permissions: Read
.rdata$r:0000DA94 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DA94                 assume cs:_rdata$r
.rdata$r:0000DA94                 ;org 0DA94h
.rdata$r:0000DA94 ; COMDAT (pick any)
.rdata$r:0000DA94                 public ??_R4error_category@std@@6B@
.rdata$r:0000DA94 ; const std::error_category::`RTTI Complete Object Locator'
.rdata$r:0000DA94 ??_R4error_category@std@@6B@ db    0    ; DATA XREF: .rdata:0000D0FCo
.rdata$r:0000DA95                 db    0
.rdata$r:0000DA96                 db    0
.rdata$r:0000DA97                 db    0
.rdata$r:0000DA98                 db    0
.rdata$r:0000DA99                 db    0
.rdata$r:0000DA9A                 db    0
.rdata$r:0000DA9B                 db    0
.rdata$r:0000DA9C                 db    0
.rdata$r:0000DA9D                 db    0
.rdata$r:0000DA9E                 db    0
.rdata$r:0000DA9F                 db    0
.rdata$r:0000DAA0                 dd offset ??_R0?AVerror_category@std@@@8 ; std::error_category `RTTI Type Descriptor'
.rdata$r:0000DAA4                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DAA4 _rdata$r        ends
.rdata$r:0000DAA4
.data$r:0000DAA8 ; ===========================================================================
.data$r:0000DAA8
.data$r:0000DAA8 ; Segment type: Pure data
.data$r:0000DAA8 ; Segment permissions: Read/Write
.data$r:0000DAA8 _data$r         segment dword public 'DATA' use32
.data$r:0000DAA8                 assume cs:_data$r
.data$r:0000DAA8                 ;org 0DAA8h
.data$r:0000DAA8 ; COMDAT (pick any)
.data$r:0000DAA8                 public ??_R0?AVerror_category@std@@@8
.data$r:0000DAA8 ; class std::error_category `RTTI Type Descriptor'
.data$r:0000DAA8 ??_R0?AVerror_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000DAA8                                         ; DATA XREF: .rdata$r:0000DAA0o
.data$r:0000DAA8                                         ; .rdata$r:std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000DAA8                                         ; const type_info::`vftable'
.data$r:0000DAAC                 align 10h
.data$r:0000DAB0 a_?averror_cate db '.?AVerror_category@std@@',0
.data$r:0000DAC9                 align 4
.data$r:0000DAC9 _data$r         ends
.data$r:0000DAC9
.rdata$r:0000DACC ; ===========================================================================
.rdata$r:0000DACC
.rdata$r:0000DACC ; Segment type: Pure data
.rdata$r:0000DACC ; Segment permissions: Read
.rdata$r:0000DACC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DACC                 assume cs:_rdata$r
.rdata$r:0000DACC                 ;org 0DACCh
.rdata$r:0000DACC ; COMDAT (pick any)
.rdata$r:0000DACC                 public ??_R3error_category@std@@8
.rdata$r:0000DACC ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DACC ??_R3error_category@std@@8 db    0      ; DATA XREF: .rdata$r:0000DAA4o
.rdata$r:0000DACC                                         ; .rdata$r:0000DAFCo
.rdata$r:0000DACD                 db    0
.rdata$r:0000DACE                 db    0
.rdata$r:0000DACF                 db    0
.rdata$r:0000DAD0                 db    0
.rdata$r:0000DAD1                 db    0
.rdata$r:0000DAD2                 db    0
.rdata$r:0000DAD3                 db    0
.rdata$r:0000DAD4                 db    1
.rdata$r:0000DAD5                 db    0
.rdata$r:0000DAD6                 db    0
.rdata$r:0000DAD7                 db    0
.rdata$r:0000DAD8                 dd offset ??_R2error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
.rdata$r:0000DAD8 _rdata$r        ends
.rdata$r:0000DAD8
.rdata$r:0000DADC ; ===========================================================================
.rdata$r:0000DADC
.rdata$r:0000DADC ; Segment type: Pure data
.rdata$r:0000DADC ; Segment permissions: Read
.rdata$r:0000DADC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DADC                 assume cs:_rdata$r
.rdata$r:0000DADC                 ;org 0DADCh
.rdata$r:0000DADC ; COMDAT (pick any)
.rdata$r:0000DADC                 public ??_R2error_category@std@@8
.rdata$r:0000DADC ; std::error_category::`RTTI Base Class Array'
.rdata$r:0000DADC ??_R2error_category@std@@8 dd offset ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:0000DADC                                         ; DATA XREF: .rdata$r:0000DAD8o
.rdata$r:0000DADC                                         ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DAE0                 db    0
.rdata$r:0000DAE1                 align 4
.rdata$r:0000DAE1 _rdata$r        ends
.rdata$r:0000DAE1
.rdata$r:0000DAE4 ; ===========================================================================
.rdata$r:0000DAE4
.rdata$r:0000DAE4 ; Segment type: Pure data
.rdata$r:0000DAE4 ; Segment permissions: Read
.rdata$r:0000DAE4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DAE4                 assume cs:_rdata$r
.rdata$r:0000DAE4                 ;org 0DAE4h
.rdata$r:0000DAE4 ; COMDAT (pick any)
.rdata$r:0000DAE4                 public ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:0000DAE4 ; std::error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DAE4 ??_R1A@?0A@EA@error_category@std@@8 dd offset ??_R0?AVerror_category@std@@@8
.rdata$r:0000DAE4                                         ; DATA XREF: .rdata$r:std::error_category::`RTTI Base Class Array'o
.rdata$r:0000DAE4                                         ; .rdata$r:0000DB54o ...
.rdata$r:0000DAE4                                         ; std::error_category `RTTI Type Descriptor'
.rdata$r:0000DAE8                 align 10h
.rdata$r:0000DAF0                 db 0FFh
.rdata$r:0000DAF1                 db 0FFh
.rdata$r:0000DAF2                 db 0FFh
.rdata$r:0000DAF3                 db 0FFh
.rdata$r:0000DAF4                 db    0
.rdata$r:0000DAF5                 db    0
.rdata$r:0000DAF6                 db    0
.rdata$r:0000DAF7                 db    0
.rdata$r:0000DAF8                 db  40h ; @
.rdata$r:0000DAF9                 db    0
.rdata$r:0000DAFA                 db    0
.rdata$r:0000DAFB                 db    0
.rdata$r:0000DAFC                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DAFC _rdata$r        ends
.rdata$r:0000DAFC
.rdata$r:0000DB00 ; ===========================================================================
.rdata$r:0000DB00
.rdata$r:0000DB00 ; Segment type: Pure data
.rdata$r:0000DB00 ; Segment permissions: Read
.rdata$r:0000DB00 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DB00                 assume cs:_rdata$r
.rdata$r:0000DB00                 ;org 0DB00h
.rdata$r:0000DB00 ; COMDAT (pick any)
.rdata$r:0000DB00                 public ??_R4_Generic_error_category@std@@6B@
.rdata$r:0000DB00 ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata$r:0000DB00 ??_R4_Generic_error_category@std@@6B@ db    0
.rdata$r:0000DB00                                         ; DATA XREF: .rdata:0000D118o
.rdata$r:0000DB01                 db    0
.rdata$r:0000DB02                 db    0
.rdata$r:0000DB03                 db    0
.rdata$r:0000DB04                 db    0
.rdata$r:0000DB05                 db    0
.rdata$r:0000DB06                 db    0
.rdata$r:0000DB07                 db    0
.rdata$r:0000DB08                 db    0
.rdata$r:0000DB09                 db    0
.rdata$r:0000DB0A                 db    0
.rdata$r:0000DB0B                 db    0
.rdata$r:0000DB0C                 dd offset ??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:0000DB10                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DB10 _rdata$r        ends
.rdata$r:0000DB10
.data$r:0000DB14 ; ===========================================================================
.data$r:0000DB14
.data$r:0000DB14 ; Segment type: Pure data
.data$r:0000DB14 ; Segment permissions: Read/Write
.data$r:0000DB14 _data$r         segment dword public 'DATA' use32
.data$r:0000DB14                 assume cs:_data$r
.data$r:0000DB14                 ;org 0DB14h
.data$r:0000DB14 ; COMDAT (pick any)
.data$r:0000DB14                 public ??_R0?AV_Generic_error_category@std@@@8
.data$r:0000DB14 ; class std::_Generic_error_category `RTTI Type Descriptor'
.data$r:0000DB14 ??_R0?AV_Generic_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000DB14                                         ; DATA XREF: .rdata$r:0000DB0Co
.data$r:0000DB14                                         ; .rdata$r:std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000DB14                                         ; const type_info::`vftable'
.data$r:0000DB18                 db    0
.data$r:0000DB19                 db    0
.data$r:0000DB1A                 db    0
.data$r:0000DB1B                 db    0
.data$r:0000DB1C                 db  2Eh ; .
.data$r:0000DB1D                 db  3Fh ; ?
.data$r:0000DB1E                 db  41h ; A
.data$r:0000DB1F                 db  56h ; V
.data$r:0000DB20                 db  5Fh ; _
.data$r:0000DB21                 db  47h ; G
.data$r:0000DB22                 db  65h ; e
.data$r:0000DB23                 db  6Eh ; n
.data$r:0000DB24                 db  65h ; e
.data$r:0000DB25                 db  72h ; r
.data$r:0000DB26                 db  69h ; i
.data$r:0000DB27                 db  63h ; c
.data$r:0000DB28                 db  5Fh ; _
.data$r:0000DB29                 db  65h ; e
.data$r:0000DB2A                 db  72h ; r
.data$r:0000DB2B                 db  72h ; r
.data$r:0000DB2C                 db  6Fh ; o
.data$r:0000DB2D                 db  72h ; r
.data$r:0000DB2E                 db  5Fh ; _
.data$r:0000DB2F                 db  63h ; c
.data$r:0000DB30                 db  61h ; a
.data$r:0000DB31                 db  74h ; t
.data$r:0000DB32                 db  65h ; e
.data$r:0000DB33                 db  67h ; g
.data$r:0000DB34                 db  6Fh ; o
.data$r:0000DB35                 db  72h ; r
.data$r:0000DB36                 db  79h ; y
.data$r:0000DB37                 db  40h ; @
.data$r:0000DB38                 db  73h ; s
.data$r:0000DB39                 db  74h ; t
.data$r:0000DB3A                 db  64h ; d
.data$r:0000DB3B                 db  40h ; @
.data$r:0000DB3C                 db  40h ; @
.data$r:0000DB3D                 db    0
.data$r:0000DB3E                 align 10h
.data$r:0000DB3E _data$r         ends
.data$r:0000DB3E
.rdata$r:0000DB40 ; ===========================================================================
.rdata$r:0000DB40
.rdata$r:0000DB40 ; Segment type: Pure data
.rdata$r:0000DB40 ; Segment permissions: Read
.rdata$r:0000DB40 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DB40                 assume cs:_rdata$r
.rdata$r:0000DB40                 ;org 0DB40h
.rdata$r:0000DB40 ; COMDAT (pick any)
.rdata$r:0000DB40                 public ??_R3_Generic_error_category@std@@8
.rdata$r:0000DB40 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DB40 ??_R3_Generic_error_category@std@@8 db    0
.rdata$r:0000DB40                                         ; DATA XREF: .rdata$r:0000DB10o
.rdata$r:0000DB40                                         ; .rdata$r:0000DB74o
.rdata$r:0000DB41                 db    0
.rdata$r:0000DB42                 db    0
.rdata$r:0000DB43                 db    0
.rdata$r:0000DB44                 db    0
.rdata$r:0000DB45                 db    0
.rdata$r:0000DB46                 db    0
.rdata$r:0000DB47                 db    0
.rdata$r:0000DB48                 db    2
.rdata$r:0000DB49                 db    0
.rdata$r:0000DB4A                 db    0
.rdata$r:0000DB4B                 db    0
.rdata$r:0000DB4C                 dd offset ??_R2_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:0000DB4C _rdata$r        ends
.rdata$r:0000DB4C
.rdata$r:0000DB50 ; ===========================================================================
.rdata$r:0000DB50
.rdata$r:0000DB50 ; Segment type: Pure data
.rdata$r:0000DB50 ; Segment permissions: Read
.rdata$r:0000DB50 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DB50                 assume cs:_rdata$r
.rdata$r:0000DB50                 ;org 0DB50h
.rdata$r:0000DB50 ; COMDAT (pick any)
.rdata$r:0000DB50                 public ??_R2_Generic_error_category@std@@8
.rdata$r:0000DB50 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:0000DB50 ??_R2_Generic_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:0000DB50                                         ; DATA XREF: .rdata$r:0000DB4Co
.rdata$r:0000DB50                                         ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DB54                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DB58                 db    0
.rdata$r:0000DB59                 align 4
.rdata$r:0000DB59 _rdata$r        ends
.rdata$r:0000DB59
.rdata$r:0000DB5C ; ===========================================================================
.rdata$r:0000DB5C
.rdata$r:0000DB5C ; Segment type: Pure data
.rdata$r:0000DB5C ; Segment permissions: Read
.rdata$r:0000DB5C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DB5C                 assume cs:_rdata$r
.rdata$r:0000DB5C                 ;org 0DB5Ch
.rdata$r:0000DB5C ; COMDAT (pick any)
.rdata$r:0000DB5C                 public ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:0000DB5C ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DB5C ??_R1A@?0A@EA@_Generic_error_category@std@@8 dd offset ??_R0?AV_Generic_error_category@std@@@8
.rdata$r:0000DB5C                                         ; DATA XREF: .rdata$r:std::_Generic_error_category::`RTTI Base Class Array'o
.rdata$r:0000DB5C                                         ; .rdata$r:0000DBCCo ...
.rdata$r:0000DB5C                                         ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:0000DB60                 db    1
.rdata$r:0000DB61                 db    0
.rdata$r:0000DB62                 db    0
.rdata$r:0000DB63                 db    0
.rdata$r:0000DB64                 db    0
.rdata$r:0000DB65                 db    0
.rdata$r:0000DB66                 db    0
.rdata$r:0000DB67                 db    0
.rdata$r:0000DB68                 db 0FFh
.rdata$r:0000DB69                 db 0FFh
.rdata$r:0000DB6A                 db 0FFh
.rdata$r:0000DB6B                 db 0FFh
.rdata$r:0000DB6C                 db    0
.rdata$r:0000DB6D                 db    0
.rdata$r:0000DB6E                 db    0
.rdata$r:0000DB6F                 db    0
.rdata$r:0000DB70                 db  40h ; @
.rdata$r:0000DB71                 db    0
.rdata$r:0000DB72                 db    0
.rdata$r:0000DB73                 db    0
.rdata$r:0000DB74                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DB74 _rdata$r        ends
.rdata$r:0000DB74
.rdata$r:0000DB78 ; ===========================================================================
.rdata$r:0000DB78
.rdata$r:0000DB78 ; Segment type: Pure data
.rdata$r:0000DB78 ; Segment permissions: Read
.rdata$r:0000DB78 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DB78                 assume cs:_rdata$r
.rdata$r:0000DB78                 ;org 0DB78h
.rdata$r:0000DB78 ; COMDAT (pick any)
.rdata$r:0000DB78                 public ??_R4_Iostream_error_category@std@@6B@
.rdata$r:0000DB78 ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata$r:0000DB78 ??_R4_Iostream_error_category@std@@6B@ db    0
.rdata$r:0000DB78                                         ; DATA XREF: .rdata:0000D14Co
.rdata$r:0000DB79                 db    0
.rdata$r:0000DB7A                 db    0
.rdata$r:0000DB7B                 db    0
.rdata$r:0000DB7C                 db    0
.rdata$r:0000DB7D                 db    0
.rdata$r:0000DB7E                 db    0
.rdata$r:0000DB7F                 db    0
.rdata$r:0000DB80                 db    0
.rdata$r:0000DB81                 db    0
.rdata$r:0000DB82                 db    0
.rdata$r:0000DB83                 db    0
.rdata$r:0000DB84                 dd offset ??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:0000DB88                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DB88 _rdata$r        ends
.rdata$r:0000DB88
.data$r:0000DB8C ; ===========================================================================
.data$r:0000DB8C
.data$r:0000DB8C ; Segment type: Pure data
.data$r:0000DB8C ; Segment permissions: Read/Write
.data$r:0000DB8C _data$r         segment dword public 'DATA' use32
.data$r:0000DB8C                 assume cs:_data$r
.data$r:0000DB8C                 ;org 0DB8Ch
.data$r:0000DB8C ; COMDAT (pick any)
.data$r:0000DB8C                 public ??_R0?AV_Iostream_error_category@std@@@8
.data$r:0000DB8C ; class std::_Iostream_error_category `RTTI Type Descriptor'
.data$r:0000DB8C ??_R0?AV_Iostream_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000DB8C                                         ; DATA XREF: .rdata$r:0000DB84o
.data$r:0000DB8C                                         ; .rdata$r:std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000DB8C                                         ; const type_info::`vftable'
.data$r:0000DB90                 db    0
.data$r:0000DB91                 db    0
.data$r:0000DB92                 db    0
.data$r:0000DB93                 db    0
.data$r:0000DB94                 db  2Eh ; .
.data$r:0000DB95                 db  3Fh ; ?
.data$r:0000DB96                 db  41h ; A
.data$r:0000DB97                 db  56h ; V
.data$r:0000DB98                 db  5Fh ; _
.data$r:0000DB99                 db  49h ; I
.data$r:0000DB9A                 db  6Fh ; o
.data$r:0000DB9B                 db  73h ; s
.data$r:0000DB9C                 db  74h ; t
.data$r:0000DB9D                 db  72h ; r
.data$r:0000DB9E                 db  65h ; e
.data$r:0000DB9F                 db  61h ; a
.data$r:0000DBA0                 db  6Dh ; m
.data$r:0000DBA1                 db  5Fh ; _
.data$r:0000DBA2                 db  65h ; e
.data$r:0000DBA3                 db  72h ; r
.data$r:0000DBA4                 db  72h ; r
.data$r:0000DBA5                 db  6Fh ; o
.data$r:0000DBA6                 db  72h ; r
.data$r:0000DBA7                 db  5Fh ; _
.data$r:0000DBA8                 db  63h ; c
.data$r:0000DBA9                 db  61h ; a
.data$r:0000DBAA                 db  74h ; t
.data$r:0000DBAB                 db  65h ; e
.data$r:0000DBAC                 db  67h ; g
.data$r:0000DBAD                 db  6Fh ; o
.data$r:0000DBAE                 db  72h ; r
.data$r:0000DBAF                 db  79h ; y
.data$r:0000DBB0                 db  40h ; @
.data$r:0000DBB1                 db  73h ; s
.data$r:0000DBB2                 db  74h ; t
.data$r:0000DBB3                 db  64h ; d
.data$r:0000DBB4                 db  40h ; @
.data$r:0000DBB5                 db  40h ; @
.data$r:0000DBB6                 db    0
.data$r:0000DBB7                 align 4
.data$r:0000DBB7 _data$r         ends
.data$r:0000DBB7
.rdata$r:0000DBB8 ; ===========================================================================
.rdata$r:0000DBB8
.rdata$r:0000DBB8 ; Segment type: Pure data
.rdata$r:0000DBB8 ; Segment permissions: Read
.rdata$r:0000DBB8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DBB8                 assume cs:_rdata$r
.rdata$r:0000DBB8                 ;org 0DBB8h
.rdata$r:0000DBB8 ; COMDAT (pick any)
.rdata$r:0000DBB8                 public ??_R3_Iostream_error_category@std@@8
.rdata$r:0000DBB8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DBB8 ??_R3_Iostream_error_category@std@@8 db    0
.rdata$r:0000DBB8                                         ; DATA XREF: .rdata$r:0000DB88o
.rdata$r:0000DBB8                                         ; .rdata$r:0000DBF0o
.rdata$r:0000DBB9                 db    0
.rdata$r:0000DBBA                 db    0
.rdata$r:0000DBBB                 db    0
.rdata$r:0000DBBC                 db    0
.rdata$r:0000DBBD                 db    0
.rdata$r:0000DBBE                 db    0
.rdata$r:0000DBBF                 db    0
.rdata$r:0000DBC0                 db    3
.rdata$r:0000DBC1                 db    0
.rdata$r:0000DBC2                 db    0
.rdata$r:0000DBC3                 db    0
.rdata$r:0000DBC4                 dd offset ??_R2_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:0000DBC4 _rdata$r        ends
.rdata$r:0000DBC4
.rdata$r:0000DBC8 ; ===========================================================================
.rdata$r:0000DBC8
.rdata$r:0000DBC8 ; Segment type: Pure data
.rdata$r:0000DBC8 ; Segment permissions: Read
.rdata$r:0000DBC8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DBC8                 assume cs:_rdata$r
.rdata$r:0000DBC8                 ;org 0DBC8h
.rdata$r:0000DBC8 ; COMDAT (pick any)
.rdata$r:0000DBC8                 public ??_R2_Iostream_error_category@std@@8
.rdata$r:0000DBC8 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:0000DBC8 ??_R2_Iostream_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:0000DBC8                                         ; DATA XREF: .rdata$r:0000DBC4o
.rdata$r:0000DBC8                                         ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DBCC                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DBD0                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DBD4                 db    0
.rdata$r:0000DBD5                 align 4
.rdata$r:0000DBD5 _rdata$r        ends
.rdata$r:0000DBD5
.rdata$r:0000DBD8 ; ===========================================================================
.rdata$r:0000DBD8
.rdata$r:0000DBD8 ; Segment type: Pure data
.rdata$r:0000DBD8 ; Segment permissions: Read
.rdata$r:0000DBD8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DBD8                 assume cs:_rdata$r
.rdata$r:0000DBD8                 ;org 0DBD8h
.rdata$r:0000DBD8 ; COMDAT (pick any)
.rdata$r:0000DBD8                 public ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:0000DBD8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DBD8 ??_R1A@?0A@EA@_Iostream_error_category@std@@8 dd offset ??_R0?AV_Iostream_error_category@std@@@8
.rdata$r:0000DBD8                                         ; DATA XREF: .rdata$r:std::_Iostream_error_category::`RTTI Base Class Array'o
.rdata$r:0000DBD8                                         ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:0000DBDC                 db    2
.rdata$r:0000DBDD                 db    0
.rdata$r:0000DBDE                 db    0
.rdata$r:0000DBDF                 db    0
.rdata$r:0000DBE0                 db    0
.rdata$r:0000DBE1                 db    0
.rdata$r:0000DBE2                 db    0
.rdata$r:0000DBE3                 db    0
.rdata$r:0000DBE4                 db 0FFh
.rdata$r:0000DBE5                 db 0FFh
.rdata$r:0000DBE6                 db 0FFh
.rdata$r:0000DBE7                 db 0FFh
.rdata$r:0000DBE8                 db    0
.rdata$r:0000DBE9                 db    0
.rdata$r:0000DBEA                 db    0
.rdata$r:0000DBEB                 db    0
.rdata$r:0000DBEC                 db  40h ; @
.rdata$r:0000DBED                 db    0
.rdata$r:0000DBEE                 db    0
.rdata$r:0000DBEF                 db    0
.rdata$r:0000DBF0                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DBF0 _rdata$r        ends
.rdata$r:0000DBF0
.rdata$r:0000DBF4 ; ===========================================================================
.rdata$r:0000DBF4
.rdata$r:0000DBF4 ; Segment type: Pure data
.rdata$r:0000DBF4 ; Segment permissions: Read
.rdata$r:0000DBF4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DBF4                 assume cs:_rdata$r
.rdata$r:0000DBF4                 ;org 0DBF4h
.rdata$r:0000DBF4 ; COMDAT (pick any)
.rdata$r:0000DBF4                 public ??_R4_System_error_category@std@@6B@
.rdata$r:0000DBF4 ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata$r:0000DBF4 ??_R4_System_error_category@std@@6B@ db    0 ; DATA XREF: .rdata:0000D18Co
.rdata$r:0000DBF5                 db    0
.rdata$r:0000DBF6                 db    0
.rdata$r:0000DBF7                 db    0
.rdata$r:0000DBF8                 db    0
.rdata$r:0000DBF9                 db    0
.rdata$r:0000DBFA                 db    0
.rdata$r:0000DBFB                 db    0
.rdata$r:0000DBFC                 db    0
.rdata$r:0000DBFD                 db    0
.rdata$r:0000DBFE                 db    0
.rdata$r:0000DBFF                 db    0
.rdata$r:0000DC00                 dd offset ??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:0000DC04                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DC04 _rdata$r        ends
.rdata$r:0000DC04
.data$r:0000DC08 ; ===========================================================================
.data$r:0000DC08
.data$r:0000DC08 ; Segment type: Pure data
.data$r:0000DC08 ; Segment permissions: Read/Write
.data$r:0000DC08 _data$r         segment dword public 'DATA' use32
.data$r:0000DC08                 assume cs:_data$r
.data$r:0000DC08                 ;org 0DC08h
.data$r:0000DC08 ; COMDAT (pick any)
.data$r:0000DC08                 public ??_R0?AV_System_error_category@std@@@8
.data$r:0000DC08 ; class std::_System_error_category `RTTI Type Descriptor'
.data$r:0000DC08 ??_R0?AV_System_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000DC08                                         ; DATA XREF: .rdata$r:0000DC00o
.data$r:0000DC08                                         ; .rdata$r:std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000DC08                                         ; const type_info::`vftable'
.data$r:0000DC0C                 align 10h
.data$r:0000DC10 a_?av_system_er db '.?AV_System_error_category@std@@',0
.data$r:0000DC31                 align 4
.data$r:0000DC31 _data$r         ends
.data$r:0000DC31
.rdata$r:0000DC34 ; ===========================================================================
.rdata$r:0000DC34
.rdata$r:0000DC34 ; Segment type: Pure data
.rdata$r:0000DC34 ; Segment permissions: Read
.rdata$r:0000DC34 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DC34                 assume cs:_rdata$r
.rdata$r:0000DC34                 ;org 0DC34h
.rdata$r:0000DC34 ; COMDAT (pick any)
.rdata$r:0000DC34                 public ??_R3_System_error_category@std@@8
.rdata$r:0000DC34 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DC34 ??_R3_System_error_category@std@@8 db    0 ; DATA XREF: .rdata$r:0000DC04o
.rdata$r:0000DC34                                         ; .rdata$r:0000DC6Co
.rdata$r:0000DC35                 db    0
.rdata$r:0000DC36                 db    0
.rdata$r:0000DC37                 db    0
.rdata$r:0000DC38                 db    0
.rdata$r:0000DC39                 db    0
.rdata$r:0000DC3A                 db    0
.rdata$r:0000DC3B                 db    0
.rdata$r:0000DC3C                 db    3
.rdata$r:0000DC3D                 db    0
.rdata$r:0000DC3E                 db    0
.rdata$r:0000DC3F                 db    0
.rdata$r:0000DC40                 dd offset ??_R2_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:0000DC40 _rdata$r        ends
.rdata$r:0000DC40
.rdata$r:0000DC44 ; ===========================================================================
.rdata$r:0000DC44
.rdata$r:0000DC44 ; Segment type: Pure data
.rdata$r:0000DC44 ; Segment permissions: Read
.rdata$r:0000DC44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DC44                 assume cs:_rdata$r
.rdata$r:0000DC44                 ;org 0DC44h
.rdata$r:0000DC44 ; COMDAT (pick any)
.rdata$r:0000DC44                 public ??_R2_System_error_category@std@@8
.rdata$r:0000DC44 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:0000DC44 ??_R2_System_error_category@std@@8 dd offset ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:0000DC44                                         ; DATA XREF: .rdata$r:0000DC40o
.rdata$r:0000DC44                                         ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DC48                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DC4C                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DC50                 db    0
.rdata$r:0000DC51                 align 4
.rdata$r:0000DC51 _rdata$r        ends
.rdata$r:0000DC51
.rdata$r:0000DC54 ; ===========================================================================
.rdata$r:0000DC54
.rdata$r:0000DC54 ; Segment type: Pure data
.rdata$r:0000DC54 ; Segment permissions: Read
.rdata$r:0000DC54 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DC54                 assume cs:_rdata$r
.rdata$r:0000DC54                 ;org 0DC54h
.rdata$r:0000DC54 ; COMDAT (pick any)
.rdata$r:0000DC54                 public ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:0000DC54 ; std::_System_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DC54 ??_R1A@?0A@EA@_System_error_category@std@@8 dd offset ??_R0?AV_System_error_category@std@@@8
.rdata$r:0000DC54                                         ; DATA XREF: .rdata$r:std::_System_error_category::`RTTI Base Class Array'o
.rdata$r:0000DC54                                         ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:0000DC58                 db    2
.rdata$r:0000DC59                 db    0
.rdata$r:0000DC5A                 db    0
.rdata$r:0000DC5B                 db    0
.rdata$r:0000DC5C                 db    0
.rdata$r:0000DC5D                 db    0
.rdata$r:0000DC5E                 db    0
.rdata$r:0000DC5F                 db    0
.rdata$r:0000DC60                 db 0FFh
.rdata$r:0000DC61                 db 0FFh
.rdata$r:0000DC62                 db 0FFh
.rdata$r:0000DC63                 db 0FFh
.rdata$r:0000DC64                 db    0
.rdata$r:0000DC65                 db    0
.rdata$r:0000DC66                 db    0
.rdata$r:0000DC67                 db    0
.rdata$r:0000DC68                 db  40h ; @
.rdata$r:0000DC69                 db    0
.rdata$r:0000DC6A                 db    0
.rdata$r:0000DC6B                 db    0
.rdata$r:0000DC6C                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DC6C _rdata$r        ends
.rdata$r:0000DC6C
.rdata$r:0000DC70 ; ===========================================================================
.rdata$r:0000DC70
.rdata$r:0000DC70 ; Segment type: Pure data
.rdata$r:0000DC70 ; Segment permissions: Read
.rdata$r:0000DC70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DC70                 assume cs:_rdata$r
.rdata$r:0000DC70                 ;org 0DC70h
.rdata$r:0000DC70 ; COMDAT (pick any)
.rdata$r:0000DC70                 public ??_R4Window@@6B@
.rdata$r:0000DC70 ; const Window::`RTTI Complete Object Locator'
.rdata$r:0000DC70 ??_R4Window@@6B@ db    0                ; DATA XREF: .rdata:0000D1C8o
.rdata$r:0000DC71                 db    0
.rdata$r:0000DC72                 db    0
.rdata$r:0000DC73                 db    0
.rdata$r:0000DC74                 db    0
.rdata$r:0000DC75                 db    0
.rdata$r:0000DC76                 db    0
.rdata$r:0000DC77                 db    0
.rdata$r:0000DC78                 db    0
.rdata$r:0000DC79                 db    0
.rdata$r:0000DC7A                 db    0
.rdata$r:0000DC7B                 db    0
.rdata$r:0000DC7C                 dd offset ??_R0?AVWindow@@@8 ; Window `RTTI Type Descriptor'
.rdata$r:0000DC80                 dd offset ??_R3Window@@8 ; Window::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DC80 _rdata$r        ends
.rdata$r:0000DC80
.data$r:0000DC84 ; ===========================================================================
.data$r:0000DC84
.data$r:0000DC84 ; Segment type: Pure data
.data$r:0000DC84 ; Segment permissions: Read/Write
.data$r:0000DC84 _data$r         segment dword public 'DATA' use32
.data$r:0000DC84                 assume cs:_data$r
.data$r:0000DC84                 ;org 0DC84h
.data$r:0000DC84 ; COMDAT (pick any)
.data$r:0000DC84                 public ??_R0?AVWindow@@@8
.data$r:0000DC84 ; class Window `RTTI Type Descriptor'
.data$r:0000DC84 ??_R0?AVWindow@@@8 dd offset ??_7type_info@@6B@
.data$r:0000DC84                                         ; DATA XREF: .rdata$r:0000DC7Co
.data$r:0000DC84                                         ; .rdata$r:Window::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000DC84                                         ; const type_info::`vftable'
.data$r:0000DC88                 db    0
.data$r:0000DC89                 db    0
.data$r:0000DC8A                 db    0
.data$r:0000DC8B                 db    0
.data$r:0000DC8C                 db  2Eh ; .
.data$r:0000DC8D                 db  3Fh ; ?
.data$r:0000DC8E                 db  41h ; A
.data$r:0000DC8F                 db  56h ; V
.data$r:0000DC90                 db  57h ; W
.data$r:0000DC91                 db  69h ; i
.data$r:0000DC92                 db  6Eh ; n
.data$r:0000DC93                 db  64h ; d
.data$r:0000DC94                 db  6Fh ; o
.data$r:0000DC95                 db  77h ; w
.data$r:0000DC96                 db  40h ; @
.data$r:0000DC97                 db  40h ; @
.data$r:0000DC98                 db    0
.data$r:0000DC99                 align 4
.data$r:0000DC99 _data$r         ends
.data$r:0000DC99
.rdata$r:0000DC9C ; ===========================================================================
.rdata$r:0000DC9C
.rdata$r:0000DC9C ; Segment type: Pure data
.rdata$r:0000DC9C ; Segment permissions: Read
.rdata$r:0000DC9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DC9C                 assume cs:_rdata$r
.rdata$r:0000DC9C                 ;org 0DC9Ch
.rdata$r:0000DC9C ; COMDAT (pick any)
.rdata$r:0000DC9C                 public ??_R3Window@@8
.rdata$r:0000DC9C ; Window::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DC9C ??_R3Window@@8  db    0                 ; DATA XREF: .rdata$r:0000DC80o
.rdata$r:0000DC9C                                         ; .rdata$r:0000DCCCo
.rdata$r:0000DC9D                 db    0
.rdata$r:0000DC9E                 db    0
.rdata$r:0000DC9F                 db    0
.rdata$r:0000DCA0                 db    0
.rdata$r:0000DCA1                 db    0
.rdata$r:0000DCA2                 db    0
.rdata$r:0000DCA3                 db    0
.rdata$r:0000DCA4                 db    1
.rdata$r:0000DCA5                 db    0
.rdata$r:0000DCA6                 db    0
.rdata$r:0000DCA7                 db    0
.rdata$r:0000DCA8                 dd offset ??_R2Window@@8 ; Window::`RTTI Base Class Array'
.rdata$r:0000DCA8 _rdata$r        ends
.rdata$r:0000DCA8
.rdata$r:0000DCAC ; ===========================================================================
.rdata$r:0000DCAC
.rdata$r:0000DCAC ; Segment type: Pure data
.rdata$r:0000DCAC ; Segment permissions: Read
.rdata$r:0000DCAC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DCAC                 assume cs:_rdata$r
.rdata$r:0000DCAC                 ;org 0DCACh
.rdata$r:0000DCAC ; COMDAT (pick any)
.rdata$r:0000DCAC                 public ??_R2Window@@8
.rdata$r:0000DCAC ; Window::`RTTI Base Class Array'
.rdata$r:0000DCAC ??_R2Window@@8  dd offset ??_R1A@?0A@EA@Window@@8
.rdata$r:0000DCAC                                         ; DATA XREF: .rdata$r:0000DCA8o
.rdata$r:0000DCAC                                         ; Window::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DCB0                 db    0
.rdata$r:0000DCB1                 align 4
.rdata$r:0000DCB1 _rdata$r        ends
.rdata$r:0000DCB1
.rdata$r:0000DCB4 ; ===========================================================================
.rdata$r:0000DCB4
.rdata$r:0000DCB4 ; Segment type: Pure data
.rdata$r:0000DCB4 ; Segment permissions: Read
.rdata$r:0000DCB4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DCB4                 assume cs:_rdata$r
.rdata$r:0000DCB4                 ;org 0DCB4h
.rdata$r:0000DCB4 ; COMDAT (pick any)
.rdata$r:0000DCB4                 public ??_R1A@?0A@EA@Window@@8
.rdata$r:0000DCB4 ; Window::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DCB4 ??_R1A@?0A@EA@Window@@8 dd offset ??_R0?AVWindow@@@8
.rdata$r:0000DCB4                                         ; DATA XREF: .rdata$r:Window::`RTTI Base Class Array'o
.rdata$r:0000DCB4                                         ; .rdata$r:0000DD14o ...
.rdata$r:0000DCB4                                         ; Window `RTTI Type Descriptor'
.rdata$r:0000DCB8                 align 10h
.rdata$r:0000DCC0                 db 0FFh
.rdata$r:0000DCC1                 db 0FFh
.rdata$r:0000DCC2                 db 0FFh
.rdata$r:0000DCC3                 db 0FFh
.rdata$r:0000DCC4                 db    0
.rdata$r:0000DCC5                 db    0
.rdata$r:0000DCC6                 db    0
.rdata$r:0000DCC7                 db    0
.rdata$r:0000DCC8                 db  40h ; @
.rdata$r:0000DCC9                 db    0
.rdata$r:0000DCCA                 db    0
.rdata$r:0000DCCB                 db    0
.rdata$r:0000DCCC                 dd offset ??_R3Window@@8 ; Window::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DCCC _rdata$r        ends
.rdata$r:0000DCCC
.rdata$r:0000DCD0 ; ===========================================================================
.rdata$r:0000DCD0
.rdata$r:0000DCD0 ; Segment type: Pure data
.rdata$r:0000DCD0 ; Segment permissions: Read
.rdata$r:0000DCD0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DCD0                 assume cs:_rdata$r
.rdata$r:0000DCD0                 ;org 0DCD0h
.rdata$r:0000DCD0 ; COMDAT (pick any)
.rdata$r:0000DCD0                 public ??_R4StaticDialog@@6B@
.rdata$r:0000DCD0 ; const StaticDialog::`RTTI Complete Object Locator'
.rdata$r:0000DCD0 ??_R4StaticDialog@@6B@ db    0          ; DATA XREF: .rdata:0000D1FCo
.rdata$r:0000DCD1                 db    0
.rdata$r:0000DCD2                 db    0
.rdata$r:0000DCD3                 db    0
.rdata$r:0000DCD4                 db    0
.rdata$r:0000DCD5                 db    0
.rdata$r:0000DCD6                 db    0
.rdata$r:0000DCD7                 db    0
.rdata$r:0000DCD8                 db    0
.rdata$r:0000DCD9                 db    0
.rdata$r:0000DCDA                 db    0
.rdata$r:0000DCDB                 db    0
.rdata$r:0000DCDC                 dd offset ??_R0?AVStaticDialog@@@8 ; StaticDialog `RTTI Type Descriptor'
.rdata$r:0000DCE0                 dd offset ??_R3StaticDialog@@8 ; StaticDialog::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DCE0 _rdata$r        ends
.rdata$r:0000DCE0
.data$r:0000DCE4 ; ===========================================================================
.data$r:0000DCE4
.data$r:0000DCE4 ; Segment type: Pure data
.data$r:0000DCE4 ; Segment permissions: Read/Write
.data$r:0000DCE4 _data$r         segment dword public 'DATA' use32
.data$r:0000DCE4                 assume cs:_data$r
.data$r:0000DCE4                 ;org 0DCE4h
.data$r:0000DCE4 ; COMDAT (pick any)
.data$r:0000DCE4                 public ??_R0?AVStaticDialog@@@8
.data$r:0000DCE4 ; class StaticDialog `RTTI Type Descriptor'
.data$r:0000DCE4 ??_R0?AVStaticDialog@@@8 dd offset ??_7type_info@@6B@
.data$r:0000DCE4                                         ; DATA XREF: .rdata$r:0000DCDCo
.data$r:0000DCE4                                         ; .rdata$r:StaticDialog::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000DCE4                                         ; const type_info::`vftable'
.data$r:0000DCE8                 db    0
.data$r:0000DCE9                 db    0
.data$r:0000DCEA                 db    0
.data$r:0000DCEB                 db    0
.data$r:0000DCEC                 db  2Eh ; .
.data$r:0000DCED                 db  3Fh ; ?
.data$r:0000DCEE                 db  41h ; A
.data$r:0000DCEF                 db  56h ; V
.data$r:0000DCF0                 db  53h ; S
.data$r:0000DCF1                 db  74h ; t
.data$r:0000DCF2                 db  61h ; a
.data$r:0000DCF3                 db  74h ; t
.data$r:0000DCF4                 db  69h ; i
.data$r:0000DCF5                 db  63h ; c
.data$r:0000DCF6                 db  44h ; D
.data$r:0000DCF7                 db  69h ; i
.data$r:0000DCF8                 db  61h ; a
.data$r:0000DCF9                 db  6Ch ; l
.data$r:0000DCFA                 db  6Fh ; o
.data$r:0000DCFB                 db  67h ; g
.data$r:0000DCFC                 db  40h ; @
.data$r:0000DCFD                 db  40h ; @
.data$r:0000DCFE                 db    0
.data$r:0000DCFF                 align 10h
.data$r:0000DCFF _data$r         ends
.data$r:0000DCFF
.rdata$r:0000DD00 ; ===========================================================================
.rdata$r:0000DD00
.rdata$r:0000DD00 ; Segment type: Pure data
.rdata$r:0000DD00 ; Segment permissions: Read
.rdata$r:0000DD00 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DD00                 assume cs:_rdata$r
.rdata$r:0000DD00                 ;org 0DD00h
.rdata$r:0000DD00 ; COMDAT (pick any)
.rdata$r:0000DD00                 public ??_R3StaticDialog@@8
.rdata$r:0000DD00 ; StaticDialog::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DD00 ??_R3StaticDialog@@8 db    0            ; DATA XREF: .rdata$r:0000DCE0o
.rdata$r:0000DD00                                         ; .rdata$r:0000DD34o
.rdata$r:0000DD01                 db    0
.rdata$r:0000DD02                 db    0
.rdata$r:0000DD03                 db    0
.rdata$r:0000DD04                 db    0
.rdata$r:0000DD05                 db    0
.rdata$r:0000DD06                 db    0
.rdata$r:0000DD07                 db    0
.rdata$r:0000DD08                 db    2
.rdata$r:0000DD09                 db    0
.rdata$r:0000DD0A                 db    0
.rdata$r:0000DD0B                 db    0
.rdata$r:0000DD0C                 dd offset ??_R2StaticDialog@@8 ; StaticDialog::`RTTI Base Class Array'
.rdata$r:0000DD0C _rdata$r        ends
.rdata$r:0000DD0C
.rdata$r:0000DD10 ; ===========================================================================
.rdata$r:0000DD10
.rdata$r:0000DD10 ; Segment type: Pure data
.rdata$r:0000DD10 ; Segment permissions: Read
.rdata$r:0000DD10 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DD10                 assume cs:_rdata$r
.rdata$r:0000DD10                 ;org 0DD10h
.rdata$r:0000DD10 ; COMDAT (pick any)
.rdata$r:0000DD10                 public ??_R2StaticDialog@@8
.rdata$r:0000DD10 ; StaticDialog::`RTTI Base Class Array'
.rdata$r:0000DD10 ??_R2StaticDialog@@8 dd offset ??_R1A@?0A@EA@StaticDialog@@8
.rdata$r:0000DD10                                         ; DATA XREF: .rdata$r:0000DD0Co
.rdata$r:0000DD10                                         ; StaticDialog::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DD14                 dd offset ??_R1A@?0A@EA@Window@@8 ; Window::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DD18                 db    0
.rdata$r:0000DD19                 align 4
.rdata$r:0000DD19 _rdata$r        ends
.rdata$r:0000DD19
.rdata$r:0000DD1C ; ===========================================================================
.rdata$r:0000DD1C
.rdata$r:0000DD1C ; Segment type: Pure data
.rdata$r:0000DD1C ; Segment permissions: Read
.rdata$r:0000DD1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DD1C                 assume cs:_rdata$r
.rdata$r:0000DD1C                 ;org 0DD1Ch
.rdata$r:0000DD1C ; COMDAT (pick any)
.rdata$r:0000DD1C                 public ??_R1A@?0A@EA@StaticDialog@@8
.rdata$r:0000DD1C ; StaticDialog::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DD1C ??_R1A@?0A@EA@StaticDialog@@8 dd offset ??_R0?AVStaticDialog@@@8
.rdata$r:0000DD1C                                         ; DATA XREF: .rdata$r:StaticDialog::`RTTI Base Class Array'o
.rdata$r:0000DD1C                                         ; .rdata$r:0000DD84o
.rdata$r:0000DD1C                                         ; StaticDialog `RTTI Type Descriptor'
.rdata$r:0000DD20                 db    1
.rdata$r:0000DD21                 db    0
.rdata$r:0000DD22                 db    0
.rdata$r:0000DD23                 db    0
.rdata$r:0000DD24                 db    0
.rdata$r:0000DD25                 db    0
.rdata$r:0000DD26                 db    0
.rdata$r:0000DD27                 db    0
.rdata$r:0000DD28                 db 0FFh
.rdata$r:0000DD29                 db 0FFh
.rdata$r:0000DD2A                 db 0FFh
.rdata$r:0000DD2B                 db 0FFh
.rdata$r:0000DD2C                 db    0
.rdata$r:0000DD2D                 db    0
.rdata$r:0000DD2E                 db    0
.rdata$r:0000DD2F                 db    0
.rdata$r:0000DD30                 db  40h ; @
.rdata$r:0000DD31                 db    0
.rdata$r:0000DD32                 db    0
.rdata$r:0000DD33                 db    0
.rdata$r:0000DD34                 dd offset ??_R3StaticDialog@@8 ; StaticDialog::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DD34 _rdata$r        ends
.rdata$r:0000DD34
.rdata$r:0000DD38 ; ===========================================================================
.rdata$r:0000DD38
.rdata$r:0000DD38 ; Segment type: Pure data
.rdata$r:0000DD38 ; Segment permissions: Read
.rdata$r:0000DD38 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DD38                 assume cs:_rdata$r
.rdata$r:0000DD38                 ;org 0DD38h
.rdata$r:0000DD38 ; COMDAT (pick any)
.rdata$r:0000DD38                 public ??_R4FileRelocalizerDlg@@6B@
.rdata$r:0000DD38 ; const FileRelocalizerDlg::`RTTI Complete Object Locator'
.rdata$r:0000DD38 ??_R4FileRelocalizerDlg@@6B@ db    0    ; DATA XREF: .rdata:0000D23Co
.rdata$r:0000DD39                 db    0
.rdata$r:0000DD3A                 db    0
.rdata$r:0000DD3B                 db    0
.rdata$r:0000DD3C                 db    0
.rdata$r:0000DD3D                 db    0
.rdata$r:0000DD3E                 db    0
.rdata$r:0000DD3F                 db    0
.rdata$r:0000DD40                 db    0
.rdata$r:0000DD41                 db    0
.rdata$r:0000DD42                 db    0
.rdata$r:0000DD43                 db    0
.rdata$r:0000DD44                 dd offset ??_R0?AVFileRelocalizerDlg@@@8 ; FileRelocalizerDlg `RTTI Type Descriptor'
.rdata$r:0000DD48                 dd offset ??_R3FileRelocalizerDlg@@8 ; FileRelocalizerDlg::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DD48 _rdata$r        ends
.rdata$r:0000DD48
.data$r:0000DD4C ; ===========================================================================
.data$r:0000DD4C
.data$r:0000DD4C ; Segment type: Pure data
.data$r:0000DD4C ; Segment permissions: Read/Write
.data$r:0000DD4C _data$r         segment dword public 'DATA' use32
.data$r:0000DD4C                 assume cs:_data$r
.data$r:0000DD4C                 ;org 0DD4Ch
.data$r:0000DD4C ; COMDAT (pick any)
.data$r:0000DD4C                 public ??_R0?AVFileRelocalizerDlg@@@8
.data$r:0000DD4C ; class FileRelocalizerDlg `RTTI Type Descriptor'
.data$r:0000DD4C ??_R0?AVFileRelocalizerDlg@@@8 dd offset ??_7type_info@@6B@
.data$r:0000DD4C                                         ; DATA XREF: .rdata$r:0000DD44o
.data$r:0000DD4C                                         ; .rdata$r:FileRelocalizerDlg::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000DD4C                                         ; const type_info::`vftable'
.data$r:0000DD50                 db    0
.data$r:0000DD51                 db    0
.data$r:0000DD52                 db    0
.data$r:0000DD53                 db    0
.data$r:0000DD54                 db  2Eh ; .
.data$r:0000DD55                 db  3Fh ; ?
.data$r:0000DD56                 db  41h ; A
.data$r:0000DD57                 db  56h ; V
.data$r:0000DD58                 db  46h ; F
.data$r:0000DD59                 db  69h ; i
.data$r:0000DD5A                 db  6Ch ; l
.data$r:0000DD5B                 db  65h ; e
.data$r:0000DD5C                 db  52h ; R
.data$r:0000DD5D                 db  65h ; e
.data$r:0000DD5E                 db  6Ch ; l
.data$r:0000DD5F                 db  6Fh ; o
.data$r:0000DD60                 db  63h ; c
.data$r:0000DD61                 db  61h ; a
.data$r:0000DD62                 db  6Ch ; l
.data$r:0000DD63                 db  69h ; i
.data$r:0000DD64                 db  7Ah ; z
.data$r:0000DD65                 db  65h ; e
.data$r:0000DD66                 db  72h ; r
.data$r:0000DD67                 db  44h ; D
.data$r:0000DD68                 db  6Ch ; l
.data$r:0000DD69                 db  67h ; g
.data$r:0000DD6A                 db  40h ; @
.data$r:0000DD6B                 db  40h ; @
.data$r:0000DD6C                 db    0
.data$r:0000DD6D                 align 10h
.data$r:0000DD6D _data$r         ends
.data$r:0000DD6D
.rdata$r:0000DD70 ; ===========================================================================
.rdata$r:0000DD70
.rdata$r:0000DD70 ; Segment type: Pure data
.rdata$r:0000DD70 ; Segment permissions: Read
.rdata$r:0000DD70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DD70                 assume cs:_rdata$r
.rdata$r:0000DD70                 ;org 0DD70h
.rdata$r:0000DD70 ; COMDAT (pick any)
.rdata$r:0000DD70                 public ??_R3FileRelocalizerDlg@@8
.rdata$r:0000DD70 ; FileRelocalizerDlg::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DD70 ??_R3FileRelocalizerDlg@@8 db    0      ; DATA XREF: .rdata$r:0000DD48o
.rdata$r:0000DD70                                         ; .rdata$r:0000DDA8o
.rdata$r:0000DD71                 db    0
.rdata$r:0000DD72                 db    0
.rdata$r:0000DD73                 db    0
.rdata$r:0000DD74                 db    0
.rdata$r:0000DD75                 db    0
.rdata$r:0000DD76                 db    0
.rdata$r:0000DD77                 db    0
.rdata$r:0000DD78                 db    3
.rdata$r:0000DD79                 db    0
.rdata$r:0000DD7A                 db    0
.rdata$r:0000DD7B                 db    0
.rdata$r:0000DD7C                 dd offset ??_R2FileRelocalizerDlg@@8 ; FileRelocalizerDlg::`RTTI Base Class Array'
.rdata$r:0000DD7C _rdata$r        ends
.rdata$r:0000DD7C
.rdata$r:0000DD80 ; ===========================================================================
.rdata$r:0000DD80
.rdata$r:0000DD80 ; Segment type: Pure data
.rdata$r:0000DD80 ; Segment permissions: Read
.rdata$r:0000DD80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DD80                 assume cs:_rdata$r
.rdata$r:0000DD80                 ;org 0DD80h
.rdata$r:0000DD80 ; COMDAT (pick any)
.rdata$r:0000DD80                 public ??_R2FileRelocalizerDlg@@8
.rdata$r:0000DD80 ; FileRelocalizerDlg::`RTTI Base Class Array'
.rdata$r:0000DD80 ??_R2FileRelocalizerDlg@@8 dd offset ??_R1A@?0A@EA@FileRelocalizerDlg@@8
.rdata$r:0000DD80                                         ; DATA XREF: .rdata$r:0000DD7Co
.rdata$r:0000DD80                                         ; FileRelocalizerDlg::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DD84                 dd offset ??_R1A@?0A@EA@StaticDialog@@8 ; StaticDialog::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DD88                 dd offset ??_R1A@?0A@EA@Window@@8 ; Window::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DD8C                 db    0
.rdata$r:0000DD8D                 align 10h
.rdata$r:0000DD8D _rdata$r        ends
.rdata$r:0000DD8D
.rdata$r:0000DD90 ; ===========================================================================
.rdata$r:0000DD90
.rdata$r:0000DD90 ; Segment type: Pure data
.rdata$r:0000DD90 ; Segment permissions: Read
.rdata$r:0000DD90 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DD90                 assume cs:_rdata$r
.rdata$r:0000DD90                 ;org 0DD90h
.rdata$r:0000DD90 ; COMDAT (pick any)
.rdata$r:0000DD90                 public ??_R1A@?0A@EA@FileRelocalizerDlg@@8
.rdata$r:0000DD90 ; FileRelocalizerDlg::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DD90 ??_R1A@?0A@EA@FileRelocalizerDlg@@8 dd offset ??_R0?AVFileRelocalizerDlg@@@8
.rdata$r:0000DD90                                         ; DATA XREF: .rdata$r:FileRelocalizerDlg::`RTTI Base Class Array'o
.rdata$r:0000DD90                                         ; FileRelocalizerDlg `RTTI Type Descriptor'
.rdata$r:0000DD94                 db    2
.rdata$r:0000DD95                 db    0
.rdata$r:0000DD96                 db    0
.rdata$r:0000DD97                 db    0
.rdata$r:0000DD98                 db    0
.rdata$r:0000DD99                 db    0
.rdata$r:0000DD9A                 db    0
.rdata$r:0000DD9B                 db    0
.rdata$r:0000DD9C                 db 0FFh
.rdata$r:0000DD9D                 db 0FFh
.rdata$r:0000DD9E                 db 0FFh
.rdata$r:0000DD9F                 db 0FFh
.rdata$r:0000DDA0                 db    0
.rdata$r:0000DDA1                 db    0
.rdata$r:0000DDA2                 db    0
.rdata$r:0000DDA3                 db    0
.rdata$r:0000DDA4                 db  40h ; @
.rdata$r:0000DDA5                 db    0
.rdata$r:0000DDA6                 db    0
.rdata$r:0000DDA7                 db    0
.rdata$r:0000DDA8                 dd offset ??_R3FileRelocalizerDlg@@8 ; FileRelocalizerDlg::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DDA8 _rdata$r        ends
.rdata$r:0000DDA8
.rdata$r:0000DDAC ; ===========================================================================
.rdata$r:0000DDAC
.rdata$r:0000DDAC ; Segment type: Pure data
.rdata$r:0000DDAC ; Segment permissions: Read
.rdata$r:0000DDAC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DDAC                 assume cs:_rdata$r
.rdata$r:0000DDAC                 ;org 0DDACh
.rdata$r:0000DDAC ; COMDAT (pick any)
.rdata$r:0000DDAC                 public ??_R4TiXmlDocument@@6B@
.rdata$r:0000DDAC ; const TiXmlDocument::`RTTI Complete Object Locator'
.rdata$r:0000DDAC ??_R4TiXmlDocument@@6B@ db    0         ; DATA XREF: .rdata:0000D27Co
.rdata$r:0000DDAD                 db    0
.rdata$r:0000DDAE                 db    0
.rdata$r:0000DDAF                 db    0
.rdata$r:0000DDB0                 db    0
.rdata$r:0000DDB1                 db    0
.rdata$r:0000DDB2                 db    0
.rdata$r:0000DDB3                 db    0
.rdata$r:0000DDB4                 db    0
.rdata$r:0000DDB5                 db    0
.rdata$r:0000DDB6                 db    0
.rdata$r:0000DDB7                 db    0
.rdata$r:0000DDB8                 dd offset ??_R0?AVTiXmlDocument@@@8 ; TiXmlDocument `RTTI Type Descriptor'
.rdata$r:0000DDBC                 dd offset ??_R3TiXmlDocument@@8 ; TiXmlDocument::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DDBC _rdata$r        ends
.rdata$r:0000DDBC
.data$r:0000DDC0 ; ===========================================================================
.data$r:0000DDC0
.data$r:0000DDC0 ; Segment type: Pure data
.data$r:0000DDC0 ; Segment permissions: Read/Write
.data$r:0000DDC0 _data$r         segment dword public 'DATA' use32
.data$r:0000DDC0                 assume cs:_data$r
.data$r:0000DDC0                 ;org 0DDC0h
.data$r:0000DDC0 ; COMDAT (pick any)
.data$r:0000DDC0                 public ??_R0?AVTiXmlDocument@@@8
.data$r:0000DDC0 ; class TiXmlDocument `RTTI Type Descriptor'
.data$r:0000DDC0 ??_R0?AVTiXmlDocument@@@8 dd offset ??_7type_info@@6B@
.data$r:0000DDC0                                         ; DATA XREF: .rdata$r:0000DDB8o
.data$r:0000DDC0                                         ; .rdata$r:TiXmlDocument::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000DDC0                                         ; const type_info::`vftable'
.data$r:0000DDC4                 align 8
.data$r:0000DDC8 a_?avtixmldocum db '.?AVTiXmlDocument@@',0
.data$r:0000DDC8 _data$r         ends
.data$r:0000DDC8
.rdata$r:0000DDDC ; ===========================================================================
.rdata$r:0000DDDC
.rdata$r:0000DDDC ; Segment type: Pure data
.rdata$r:0000DDDC ; Segment permissions: Read
.rdata$r:0000DDDC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DDDC                 assume cs:_rdata$r
.rdata$r:0000DDDC                 ;org 0DDDCh
.rdata$r:0000DDDC ; COMDAT (pick any)
.rdata$r:0000DDDC                 public ??_R3TiXmlDocument@@8
.rdata$r:0000DDDC ; TiXmlDocument::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DDDC ??_R3TiXmlDocument@@8 db    0           ; DATA XREF: .rdata$r:0000DDBCo
.rdata$r:0000DDDC                                         ; .rdata$r:0000DE14o
.rdata$r:0000DDDD                 db    0
.rdata$r:0000DDDE                 db    0
.rdata$r:0000DDDF                 db    0
.rdata$r:0000DDE0                 db    0
.rdata$r:0000DDE1                 db    0
.rdata$r:0000DDE2                 db    0
.rdata$r:0000DDE3                 db    0
.rdata$r:0000DDE4                 db    3
.rdata$r:0000DDE5                 db    0
.rdata$r:0000DDE6                 db    0
.rdata$r:0000DDE7                 db    0
.rdata$r:0000DDE8                 dd offset ??_R2TiXmlDocument@@8 ; TiXmlDocument::`RTTI Base Class Array'
.rdata$r:0000DDE8 _rdata$r        ends
.rdata$r:0000DDE8
.rdata$r:0000DDEC ; ===========================================================================
.rdata$r:0000DDEC
.rdata$r:0000DDEC ; Segment type: Pure data
.rdata$r:0000DDEC ; Segment permissions: Read
.rdata$r:0000DDEC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DDEC                 assume cs:_rdata$r
.rdata$r:0000DDEC                 ;org 0DDECh
.rdata$r:0000DDEC ; COMDAT (pick any)
.rdata$r:0000DDEC                 public ??_R2TiXmlDocument@@8
.rdata$r:0000DDEC ; TiXmlDocument::`RTTI Base Class Array'
.rdata$r:0000DDEC ??_R2TiXmlDocument@@8 dd offset ??_R1A@?0A@EA@TiXmlDocument@@8
.rdata$r:0000DDEC                                         ; DATA XREF: .rdata$r:0000DDE8o
.rdata$r:0000DDEC                                         ; TiXmlDocument::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DDF0                 dd offset ??_R1A@?0A@EA@TiXmlNode@@8 ; TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DDF4                 dd offset ??_R1A@?0A@EA@TiXmlBase@@8 ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DDF8                 db    0
.rdata$r:0000DDF9                 align 4
.rdata$r:0000DDF9 _rdata$r        ends
.rdata$r:0000DDF9
.rdata$r:0000DDFC ; ===========================================================================
.rdata$r:0000DDFC
.rdata$r:0000DDFC ; Segment type: Pure data
.rdata$r:0000DDFC ; Segment permissions: Read
.rdata$r:0000DDFC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DDFC                 assume cs:_rdata$r
.rdata$r:0000DDFC                 ;org 0DDFCh
.rdata$r:0000DDFC ; COMDAT (pick any)
.rdata$r:0000DDFC                 public ??_R1A@?0A@EA@TiXmlDocument@@8
.rdata$r:0000DDFC ; TiXmlDocument::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DDFC ??_R1A@?0A@EA@TiXmlDocument@@8 dd offset ??_R0?AVTiXmlDocument@@@8
.rdata$r:0000DDFC                                         ; DATA XREF: .rdata$r:TiXmlDocument::`RTTI Base Class Array'o
.rdata$r:0000DDFC                                         ; TiXmlDocument `RTTI Type Descriptor'
.rdata$r:0000DE00                 db    2
.rdata$r:0000DE01                 db    0
.rdata$r:0000DE02                 db    0
.rdata$r:0000DE03                 db    0
.rdata$r:0000DE04                 db    0
.rdata$r:0000DE05                 db    0
.rdata$r:0000DE06                 db    0
.rdata$r:0000DE07                 db    0
.rdata$r:0000DE08                 db 0FFh
.rdata$r:0000DE09                 db 0FFh
.rdata$r:0000DE0A                 db 0FFh
.rdata$r:0000DE0B                 db 0FFh
.rdata$r:0000DE0C                 db    0
.rdata$r:0000DE0D                 db    0
.rdata$r:0000DE0E                 db    0
.rdata$r:0000DE0F                 db    0
.rdata$r:0000DE10                 db  40h ; @
.rdata$r:0000DE11                 db    0
.rdata$r:0000DE12                 db    0
.rdata$r:0000DE13                 db    0
.rdata$r:0000DE14                 dd offset ??_R3TiXmlDocument@@8 ; TiXmlDocument::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DE14 _rdata$r        ends
.rdata$r:0000DE14
.rdata$r:0000DE18 ; ===========================================================================
.rdata$r:0000DE18
.rdata$r:0000DE18 ; Segment type: Pure data
.rdata$r:0000DE18 ; Segment permissions: Read
.rdata$r:0000DE18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DE18                 assume cs:_rdata$r
.rdata$r:0000DE18                 ;org 0DE18h
.rdata$r:0000DE18 ; COMDAT (pick any)
.rdata$r:0000DE18                 public ??_R1A@?0A@EA@TiXmlNode@@8
.rdata$r:0000DE18 ; TiXmlNode::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DE18 ??_R1A@?0A@EA@TiXmlNode@@8 dd offset ??_R0?AVTiXmlNode@@@8
.rdata$r:0000DE18                                         ; DATA XREF: .rdata$r:0000DDF0o
.rdata$r:0000DE18                                         ; .rdata$r:TiXmlNode::`RTTI Base Class Array'o
.rdata$r:0000DE18                                         ; TiXmlNode `RTTI Type Descriptor'
.rdata$r:0000DE1C                 db    1
.rdata$r:0000DE1D                 db    0
.rdata$r:0000DE1E                 db    0
.rdata$r:0000DE1F                 db    0
.rdata$r:0000DE20                 db    0
.rdata$r:0000DE21                 db    0
.rdata$r:0000DE22                 db    0
.rdata$r:0000DE23                 db    0
.rdata$r:0000DE24                 db 0FFh
.rdata$r:0000DE25                 db 0FFh
.rdata$r:0000DE26                 db 0FFh
.rdata$r:0000DE27                 db 0FFh
.rdata$r:0000DE28                 db    0
.rdata$r:0000DE29                 db    0
.rdata$r:0000DE2A                 db    0
.rdata$r:0000DE2B                 db    0
.rdata$r:0000DE2C                 db  40h ; @
.rdata$r:0000DE2D                 db    0
.rdata$r:0000DE2E                 db    0
.rdata$r:0000DE2F                 db    0
.rdata$r:0000DE30                 dd offset ??_R3TiXmlNode@@8 ; TiXmlNode::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DE30 _rdata$r        ends
.rdata$r:0000DE30
.data$r:0000DE34 ; ===========================================================================
.data$r:0000DE34
.data$r:0000DE34 ; Segment type: Pure data
.data$r:0000DE34 ; Segment permissions: Read/Write
.data$r:0000DE34 _data$r         segment dword public 'DATA' use32
.data$r:0000DE34                 assume cs:_data$r
.data$r:0000DE34                 ;org 0DE34h
.data$r:0000DE34 ; COMDAT (pick any)
.data$r:0000DE34                 public ??_R0?AVTiXmlNode@@@8
.data$r:0000DE34 ; class TiXmlNode `RTTI Type Descriptor'
.data$r:0000DE34 ??_R0?AVTiXmlNode@@@8 dd offset ??_7type_info@@6B@
.data$r:0000DE34                                         ; DATA XREF: .rdata$r:TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000DE34                                         ; const type_info::`vftable'
.data$r:0000DE38                 db    0
.data$r:0000DE39                 db    0
.data$r:0000DE3A                 db    0
.data$r:0000DE3B                 db    0
.data$r:0000DE3C                 db  2Eh ; .
.data$r:0000DE3D                 db  3Fh ; ?
.data$r:0000DE3E                 db  41h ; A
.data$r:0000DE3F                 db  56h ; V
.data$r:0000DE40                 db  54h ; T
.data$r:0000DE41                 db  69h ; i
.data$r:0000DE42                 db  58h ; X
.data$r:0000DE43                 db  6Dh ; m
.data$r:0000DE44                 db  6Ch ; l
.data$r:0000DE45                 db  4Eh ; N
.data$r:0000DE46                 db  6Fh ; o
.data$r:0000DE47                 db  64h ; d
.data$r:0000DE48                 db  65h ; e
.data$r:0000DE49                 db  40h ; @
.data$r:0000DE4A                 db  40h ; @
.data$r:0000DE4B                 db    0
.data$r:0000DE4B _data$r         ends
.data$r:0000DE4B
.rdata$r:0000DE4C ; ===========================================================================
.rdata$r:0000DE4C
.rdata$r:0000DE4C ; Segment type: Pure data
.rdata$r:0000DE4C ; Segment permissions: Read
.rdata$r:0000DE4C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DE4C                 assume cs:_rdata$r
.rdata$r:0000DE4C                 ;org 0DE4Ch
.rdata$r:0000DE4C ; COMDAT (pick any)
.rdata$r:0000DE4C                 public ??_R3TiXmlNode@@8
.rdata$r:0000DE4C ; TiXmlNode::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DE4C ??_R3TiXmlNode@@8 db    0               ; DATA XREF: .rdata$r:0000DE30o
.rdata$r:0000DE4D                 db    0
.rdata$r:0000DE4E                 db    0
.rdata$r:0000DE4F                 db    0
.rdata$r:0000DE50                 db    0
.rdata$r:0000DE51                 db    0
.rdata$r:0000DE52                 db    0
.rdata$r:0000DE53                 db    0
.rdata$r:0000DE54                 db    2
.rdata$r:0000DE55                 db    0
.rdata$r:0000DE56                 db    0
.rdata$r:0000DE57                 db    0
.rdata$r:0000DE58                 dd offset ??_R2TiXmlNode@@8 ; TiXmlNode::`RTTI Base Class Array'
.rdata$r:0000DE58 _rdata$r        ends
.rdata$r:0000DE58
.rdata$r:0000DE5C ; ===========================================================================
.rdata$r:0000DE5C
.rdata$r:0000DE5C ; Segment type: Pure data
.rdata$r:0000DE5C ; Segment permissions: Read
.rdata$r:0000DE5C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DE5C                 assume cs:_rdata$r
.rdata$r:0000DE5C                 ;org 0DE5Ch
.rdata$r:0000DE5C ; COMDAT (pick any)
.rdata$r:0000DE5C                 public ??_R2TiXmlNode@@8
.rdata$r:0000DE5C ; TiXmlNode::`RTTI Base Class Array'
.rdata$r:0000DE5C ??_R2TiXmlNode@@8 dd offset ??_R1A@?0A@EA@TiXmlNode@@8
.rdata$r:0000DE5C                                         ; DATA XREF: .rdata$r:0000DE58o
.rdata$r:0000DE5C                                         ; TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DE60                 dd offset ??_R1A@?0A@EA@TiXmlBase@@8 ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DE64                 db    0
.rdata$r:0000DE65                 align 4
.rdata$r:0000DE65 _rdata$r        ends
.rdata$r:0000DE65
.rdata$r:0000DE68 ; ===========================================================================
.rdata$r:0000DE68
.rdata$r:0000DE68 ; Segment type: Pure data
.rdata$r:0000DE68 ; Segment permissions: Read
.rdata$r:0000DE68 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DE68                 assume cs:_rdata$r
.rdata$r:0000DE68                 ;org 0DE68h
.rdata$r:0000DE68 ; COMDAT (pick any)
.rdata$r:0000DE68                 public ??_R1A@?0A@EA@TiXmlBase@@8
.rdata$r:0000DE68 ; TiXmlBase::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000DE68 ??_R1A@?0A@EA@TiXmlBase@@8 dd offset ??_R0?AVTiXmlBase@@@8
.rdata$r:0000DE68                                         ; DATA XREF: .rdata$r:0000DDF4o
.rdata$r:0000DE68                                         ; .rdata$r:0000DE60o ...
.rdata$r:0000DE68                                         ; TiXmlBase `RTTI Type Descriptor'
.rdata$r:0000DE6C                 db    0
.rdata$r:0000DE6D                 db    0
.rdata$r:0000DE6E                 db    0
.rdata$r:0000DE6F                 db    0
.rdata$r:0000DE70                 db    0
.rdata$r:0000DE71                 db    0
.rdata$r:0000DE72                 db    0
.rdata$r:0000DE73                 db    0
.rdata$r:0000DE74                 db 0FFh
.rdata$r:0000DE75                 db 0FFh
.rdata$r:0000DE76                 db 0FFh
.rdata$r:0000DE77                 db 0FFh
.rdata$r:0000DE78                 db    0
.rdata$r:0000DE79                 db    0
.rdata$r:0000DE7A                 db    0
.rdata$r:0000DE7B                 db    0
.rdata$r:0000DE7C                 db  40h ; @
.rdata$r:0000DE7D                 db    0
.rdata$r:0000DE7E                 db    0
.rdata$r:0000DE7F                 db    0
.rdata$r:0000DE80                 dd offset ??_R3TiXmlBase@@8 ; TiXmlBase::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DE80 _rdata$r        ends
.rdata$r:0000DE80
.data$r:0000DE84 ; ===========================================================================
.data$r:0000DE84
.data$r:0000DE84 ; Segment type: Pure data
.data$r:0000DE84 ; Segment permissions: Read/Write
.data$r:0000DE84 _data$r         segment dword public 'DATA' use32
.data$r:0000DE84                 assume cs:_data$r
.data$r:0000DE84                 ;org 0DE84h
.data$r:0000DE84 ; COMDAT (pick any)
.data$r:0000DE84                 public ??_R0?AVTiXmlBase@@@8
.data$r:0000DE84 ; class TiXmlBase `RTTI Type Descriptor'
.data$r:0000DE84 ??_R0?AVTiXmlBase@@@8 dd offset ??_7type_info@@6B@
.data$r:0000DE84                                         ; DATA XREF: .rdata$r:TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000DE84                                         ; const type_info::`vftable'
.data$r:0000DE88                 db    0
.data$r:0000DE89                 db    0
.data$r:0000DE8A                 db    0
.data$r:0000DE8B                 db    0
.data$r:0000DE8C                 db  2Eh ; .
.data$r:0000DE8D                 db  3Fh ; ?
.data$r:0000DE8E                 db  41h ; A
.data$r:0000DE8F                 db  56h ; V
.data$r:0000DE90                 db  54h ; T
.data$r:0000DE91                 db  69h ; i
.data$r:0000DE92                 db  58h ; X
.data$r:0000DE93                 db  6Dh ; m
.data$r:0000DE94                 db  6Ch ; l
.data$r:0000DE95                 db  42h ; B
.data$r:0000DE96                 db  61h ; a
.data$r:0000DE97                 db  73h ; s
.data$r:0000DE98                 db  65h ; e
.data$r:0000DE99                 db  40h ; @
.data$r:0000DE9A                 db  40h ; @
.data$r:0000DE9B                 db    0
.data$r:0000DE9B _data$r         ends
.data$r:0000DE9B
.rdata$r:0000DE9C ; ===========================================================================
.rdata$r:0000DE9C
.rdata$r:0000DE9C ; Segment type: Pure data
.rdata$r:0000DE9C ; Segment permissions: Read
.rdata$r:0000DE9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DE9C                 assume cs:_rdata$r
.rdata$r:0000DE9C                 ;org 0DE9Ch
.rdata$r:0000DE9C ; COMDAT (pick any)
.rdata$r:0000DE9C                 public ??_R3TiXmlBase@@8
.rdata$r:0000DE9C ; TiXmlBase::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000DE9C ??_R3TiXmlBase@@8 db    0               ; DATA XREF: .rdata$r:0000DE80o
.rdata$r:0000DE9D                 db    0
.rdata$r:0000DE9E                 db    0
.rdata$r:0000DE9F                 db    0
.rdata$r:0000DEA0                 db    0
.rdata$r:0000DEA1                 db    0
.rdata$r:0000DEA2                 db    0
.rdata$r:0000DEA3                 db    0
.rdata$r:0000DEA4                 db    1
.rdata$r:0000DEA5                 db    0
.rdata$r:0000DEA6                 db    0
.rdata$r:0000DEA7                 db    0
.rdata$r:0000DEA8                 dd offset ??_R2TiXmlBase@@8 ; TiXmlBase::`RTTI Base Class Array'
.rdata$r:0000DEA8 _rdata$r        ends
.rdata$r:0000DEA8
.rdata$r:0000DEAC ; ===========================================================================
.rdata$r:0000DEAC
.rdata$r:0000DEAC ; Segment type: Pure data
.rdata$r:0000DEAC ; Segment permissions: Read
.rdata$r:0000DEAC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000DEAC                 assume cs:_rdata$r
.rdata$r:0000DEAC                 ;org 0DEACh
.rdata$r:0000DEAC ; COMDAT (pick any)
.rdata$r:0000DEAC                 public ??_R2TiXmlBase@@8
.rdata$r:0000DEAC ; TiXmlBase::`RTTI Base Class Array'
.rdata$r:0000DEAC ??_R2TiXmlBase@@8 dd offset ??_R1A@?0A@EA@TiXmlBase@@8
.rdata$r:0000DEAC                                         ; DATA XREF: .rdata$r:0000DEA8o
.rdata$r:0000DEAC                                         ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000DEB0                 db    0
.rdata$r:0000DEB1                 align 4
.rdata$r:0000DEB1 _rdata$r        ends
.rdata$r:0000DEB1
.CRT$XCU:0000DEB4 ; ===========================================================================
.CRT$XCU:0000DEB4
.CRT$XCU:0000DEB4 ; Segment type: Pure data
.CRT$XCU:0000DEB4 ; Segment permissions: Read
.CRT$XCU:0000DEB4 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000DEB4                 assume cs:_CRT$XCU
.CRT$XCU:0000DEB4                 ;org 0DEB4h
.CRT$XCU:0000DEB4 _piecewise_construct$initializer$ dd offset ??__Epiecewise_construct@std@@YAXXZ ; std::`dynamic initializer for 'piecewise_construct''(void)
.CRT$XCU:0000DEB8 _allocator_arg$initializer$ dd offset ??__Eallocator_arg@std@@YAXXZ ; std::`dynamic initializer for 'allocator_arg''(void)
.CRT$XCU:0000DEB8 _CRT$XCU        ends
.CRT$XCU:0000DEB8
.CRT$XCU:0000DEBC ; ===========================================================================
.CRT$XCU:0000DEBC
.CRT$XCU:0000DEBC ; Segment type: Pure data
.CRT$XCU:0000DEBC ; Segment permissions: Read
.CRT$XCU:0000DEBC _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000DEBC                 assume cs:_CRT$XCU
.CRT$XCU:0000DEBC                 ;org 0DEBCh
.CRT$XCU:0000DEBC ; COMDAT (pick associative to section at D1B0)
.CRT$XCU:0000DEBC ; public: static void (__cdecl *std::_Error_objects<int>::_Generic_object$initializer$)(void)
.CRT$XCU:0000DEBC ?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.CRT$XCU:0000DEBC _CRT$XCU        ends
.CRT$XCU:0000DEBC
.CRT$XCU:0000DEC0 ; ===========================================================================
.CRT$XCU:0000DEC0
.CRT$XCU:0000DEC0 ; Segment type: Pure data
.CRT$XCU:0000DEC0 ; Segment permissions: Read
.CRT$XCU:0000DEC0 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000DEC0                 assume cs:_CRT$XCU
.CRT$XCU:0000DEC0                 ;org 0DEC0h
.CRT$XCU:0000DEC0 ; COMDAT (pick associative to section at D1B4)
.CRT$XCU:0000DEC0 ; public: static void (__cdecl *std::_Error_objects<int>::_Iostream_object$initializer$)(void)
.CRT$XCU:0000DEC0 ?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.CRT$XCU:0000DEC0 _CRT$XCU        ends
.CRT$XCU:0000DEC0
.CRT$XCU:0000DEC4 ; ===========================================================================
.CRT$XCU:0000DEC4
.CRT$XCU:0000DEC4 ; Segment type: Pure data
.CRT$XCU:0000DEC4 ; Segment permissions: Read
.CRT$XCU:0000DEC4 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000DEC4                 assume cs:_CRT$XCU
.CRT$XCU:0000DEC4                 ;org 0DEC4h
.CRT$XCU:0000DEC4 ; COMDAT (pick associative to section at D1B8)
.CRT$XCU:0000DEC4 ; public: static void (__cdecl *std::_Error_objects<int>::_System_object$initializer$)(void)
.CRT$XCU:0000DEC4 ?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.CRT$XCU:0000DEC4 _CRT$XCU        ends
.CRT$XCU:0000DEC4
.CRT$XCU:0000DEC8 ; ===========================================================================
.CRT$XCU:0000DEC8
.CRT$XCU:0000DEC8 ; Segment type: Pure data
.CRT$XCU:0000DEC8 ; Segment permissions: Read
.CRT$XCU:0000DEC8 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000DEC8                 assume cs:_CRT$XCU
.CRT$XCU:0000DEC8                 ;org 0DEC8h
.CRT$XCU:0000DEC8 ; COMDAT (pick associative to section at D1C0)
.CRT$XCU:0000DEC8 ; public: static void (__cdecl *std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id$initializer$)(void)
.CRT$XCU:0000DEC8 ?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)
.CRT$XCU:0000DEC8 _CRT$XCU        ends
.CRT$XCU:0000DEC8
.CRT$XCU:0000DECC ; ===========================================================================
.CRT$XCU:0000DECC
.CRT$XCU:0000DECC ; Segment type: Pure data
.CRT$XCU:0000DECC ; Segment permissions: Read
.CRT$XCU:0000DECC _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000DECC                 assume cs:_CRT$XCU
.CRT$XCU:0000DECC                 ;org 0DECCh
.CRT$XCU:0000DECC ; COMDAT (pick associative to section at D1C4)
.CRT$XCU:0000DECC ; public: static void (__cdecl *std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id$initializer$)(void)
.CRT$XCU:0000DECC ?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)
.CRT$XCU:0000DECC _CRT$XCU        ends
.CRT$XCU:0000DECC
.CRT$XCU:0000DED0 ; ===========================================================================
.CRT$XCU:0000DED0
.CRT$XCU:0000DED0 ; Segment type: Pure data
.CRT$XCU:0000DED0 ; Segment permissions: Read
.CRT$XCU:0000DED0 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000DED0                 assume cs:_CRT$XCU
.CRT$XCU:0000DED0                 ;org 0DED0h
.CRT$XCU:0000DED0 ; COMDAT (pick associative to section at D32C)
.CRT$XCU:0000DED0 ; public: static void (__cdecl *std::numpunct<char>::id$initializer$)(void)
.CRT$XCU:0000DED0 ?id$initializer$@?$numpunct@D@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)
.CRT$XCU:0000DED0 _CRT$XCU        ends
.CRT$XCU:0000DED0
.CRT$XCU:0000DED4 ; ===========================================================================
.CRT$XCU:0000DED4
.CRT$XCU:0000DED4 ; Segment type: Pure data
.CRT$XCU:0000DED4 ; Segment permissions: Read
.CRT$XCU:0000DED4 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000DED4                 assume cs:_CRT$XCU
.CRT$XCU:0000DED4                 ;org 0DED4h
.CRT$XCU:0000DED4 ; COMDAT (pick associative to section at D330)
.CRT$XCU:0000DED4 ; public: static void (__cdecl *std::numpunct<wchar_t>::id$initializer$)(void)
.CRT$XCU:0000DED4 ?id$initializer$@?$numpunct@_W@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)
.CRT$XCU:0000DED4 _CRT$XCU        ends
.CRT$XCU:0000DED4
UNDEF:0000DEE0 ; ===========================================================================
UNDEF:0000DEE0
UNDEF:0000DEE0 ; Segment type: Externs
UNDEF:0000DEE0 ; UNDEF
UNDEF:0000DEE0                 extrn __purecall:near   ; DATA XREF: .rdata:0000D104o
UNDEF:0000DEE0                                         ; .rdata:0000D108o ...
UNDEF:0000DEE4 ; void *__cdecl operator new(unsigned int)
UNDEF:0000DEE4                 extrn ??2@YAPAXI@Z:near ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+2Dp
UNDEF:0000DEE4                                         ; std::_Allocate<char>(uint,char *)+1Dp ...
UNDEF:0000DEE8 ; void __cdecl operator delete(void *)
UNDEF:0000DEE8                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?openWorkSpace@ProjectPanel@@QAE_NPB_W@Z$0+4p
UNDEF:0000DEE8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`scalar deleting destructor'(uint)+1Bp ...
UNDEF:0000DEEC ; int __cdecl atexit(void (__cdecl *)())
UNDEF:0000DEEC                 extrn _atexit:near      ; CODE XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+12p
UNDEF:0000DEEC                                         ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+12p ...
UNDEF:0000DEF0                 extrn __invalid_parameter:near
UNDEF:0000DEF0                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+74p
UNDEF:0000DEF0                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+B2p ...
UNDEF:0000DEF4 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:0000DEF4                 extrn _memcpy:near      ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+1Ep
UNDEF:0000DEF4                                         ; _wmemcpy+11p
UNDEF:0000DEF8 ; size_t __cdecl strlen(const char *Str)
UNDEF:0000DEF8                 extrn _strlen:near      ; CODE XREF: std::char_traits<char>::length(char const *)+1Bp
UNDEF:0000DEFC ; void *__cdecl memmove(void *Dst, const void *Src, size_t Size)
UNDEF:0000DEFC                 extrn _memmove:near     ; CODE XREF: std::_Uninit_move<int,int,int>(int *,int *,int *,std::_Wrap_alloc<std::allocator<int>> &,int *,std::_Scalar_ptr_iterator_tag)+4Fp
UNDEF:0000DEFC                                         ; std::char_traits<char>::move(char *,char const *,uint)+1Ep ...
UNDEF:0000DF00 ; size_t __cdecl wcslen(const wchar_t *Str)
UNDEF:0000DF00                 extrn _wcslen:near      ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+1Bp
UNDEF:0000DF04 ; BOOL __stdcall FindClose(HANDLE hFindFile)
UNDEF:0000DF04                 extrn __imp__FindClose@4:near
UNDEF:0000DF04                                         ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+2E4p
UNDEF:0000DF04                                         ; DATA XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+2E4r
UNDEF:0000DF08 ; HANDLE __stdcall FindFirstFileW(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData)
UNDEF:0000DF08                 extrn __imp__FindFirstFileW@8:near
UNDEF:0000DF08                                         ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+A2p
UNDEF:0000DF08                                         ; DATA XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+A2r
UNDEF:0000DF0C ; BOOL __stdcall FindNextFileW(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData)
UNDEF:0000DF0C                 extrn __imp__FindNextFileW@8:near
UNDEF:0000DF0C                                         ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+1FAp
UNDEF:0000DF0C                                         ; DATA XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+1FAr
UNDEF:0000DF10 ; HMODULE __stdcall GetModuleHandleW(LPCWSTR lpModuleName)
UNDEF:0000DF10                 extrn __imp__GetModuleHandleW@4:near
UNDEF:0000DF10                                         ; CODE XREF: ProjectPanel::saveWorkSpaceAs(bool)+37p
UNDEF:0000DF10                                         ; ProjectPanel::addFiles(_TREEITEM *)+37p ...
UNDEF:0000DF14 ; HGLOBAL __stdcall GlobalFree(HGLOBAL hMem)
UNDEF:0000DF14                 extrn __imp__GlobalFree@4:near
UNDEF:0000DF14                                         ; CODE XREF: FileRelocalizerDlg::doDialog(wchar_t const *,bool)+63p
UNDEF:0000DF14                                         ; DATA XREF: FileRelocalizerDlg::doDialog(wchar_t const *,bool)+63r
UNDEF:0000DF18 ; int __stdcall lstrcmpW(LPCWSTR lpString1, LPCWSTR lpString2)
UNDEF:0000DF18                 extrn __imp__lstrcmpW@8:near
UNDEF:0000DF18                                         ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+101p
UNDEF:0000DF18                                         ; ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+11Bp ...
UNDEF:0000DF1C ; LPWSTR __stdcall lstrcpyW(LPWSTR lpString1, LPCWSTR lpString2)
UNDEF:0000DF1C                 extrn __imp__lstrcpyW@8:near
UNDEF:0000DF1C                                         ; CODE XREF: ProjectPanel::addFilesFromDirectory(_TREEITEM *)+8Bp
UNDEF:0000DF1C                                         ; ProjectPanel::getRelativePath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+47p ...
UNDEF:0000DF20 ; int __stdcall lstrlenW(LPCWSTR lpString)
UNDEF:0000DF20                 extrn __imp__lstrlenW@4:near
UNDEF:0000DF20                                         ; CODE XREF: ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+56p
UNDEF:0000DF20                                         ; ProjectPanel::recursiveAddFilesFrom(wchar_t const *,_TREEITEM *)+13Dp ...
UNDEF:0000DF24 ; BOOL __stdcall DeleteObject(HGDIOBJ ho)
UNDEF:0000DF24                 extrn __imp__DeleteObject@4:near
UNDEF:0000DF24                                         ; CODE XREF: ProjectPanel::setImageList(int,int,int,int,int,int,int)+81p
UNDEF:0000DF24                                         ; ProjectPanel::setImageList(int,int,int,int,int,int,int)+C5p ...
UNDEF:0000DF28 ; LRESULT __stdcall SendMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:0000DF28                 extrn __imp__SendMessageW@16:near
UNDEF:0000DF28                                         ; CODE XREF: ProjectPanel::setImageList(int,int,int,int,int,int,int)+252p
UNDEF:0000DF28                                         ; ProjectPanel::addFolder(_TREEITEM *,wchar_t const *)+3Ap ...
UNDEF:0000DF2C ; HWND __stdcall CreateWindowExW(DWORD dwExStyle, LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam)
UNDEF:0000DF2C                 extrn __imp__CreateWindowExW@48:near
UNDEF:0000DF2C                                         ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+F2p
UNDEF:0000DF2C                                         ; DATA XREF: ProjectPanel::run_dlgProc(uint,uint,long)+F2r
UNDEF:0000DF30 ; BOOL __stdcall DestroyWindow(HWND hWnd)
UNDEF:0000DF30                 extrn __imp__DestroyWindow@4:near
UNDEF:0000DF30                                         ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+4F8p
UNDEF:0000DF30                                         ; StaticDialog::destroy(void)+29p
UNDEF:0000DF30                                         ; DATA XREF: ...
UNDEF:0000DF34 ; BOOL __stdcall ShowWindow(HWND hWnd, int nCmdShow)
UNDEF:0000DF34                 extrn __imp__ShowWindow@8:near
UNDEF:0000DF34                                         ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+249p
UNDEF:0000DF34                                         ; Window::display(bool)+2Cp
UNDEF:0000DF34                                         ; DATA XREF: ...
UNDEF:0000DF38 ; BOOL __stdcall MoveWindow(HWND hWnd, int X, int Y, int nWidth, int nHeight, BOOL bRepaint)
UNDEF:0000DF38                 extrn __imp__MoveWindow@24:near
UNDEF:0000DF38                                         ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+42Dp
UNDEF:0000DF38                                         ; ProjectPanel::run_dlgProc(uint,uint,long)+473p ...
UNDEF:0000DF3C ; BOOL __stdcall IsWindowVisible(HWND hWnd)
UNDEF:0000DF3C                 extrn __imp__IsWindowVisible@4:near
UNDEF:0000DF3C                                         ; CODE XREF: Window::getHeight(void)+2Bp
UNDEF:0000DF3C                                         ; Window::isVisible(void)+10p
UNDEF:0000DF3C                                         ; DATA XREF: ...
UNDEF:0000DF40 ; INT_PTR __stdcall DialogBoxParamW(HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam)
UNDEF:0000DF40                 extrn __imp__DialogBoxParamW@20:near
UNDEF:0000DF40                                         ; CODE XREF: FileRelocalizerDlg::doDialog(wchar_t const *,bool)+8Ap
UNDEF:0000DF40                                         ; DATA XREF: FileRelocalizerDlg::doDialog(wchar_t const *,bool)+8Ar
UNDEF:0000DF44 ; INT_PTR __stdcall DialogBoxIndirectParamW(HINSTANCE hInstance, LPCDLGTEMPLATEW hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam)
UNDEF:0000DF44                 extrn __imp__DialogBoxIndirectParamW@20:near
UNDEF:0000DF44                                         ; CODE XREF: FileRelocalizerDlg::doDialog(wchar_t const *,bool)+56p
UNDEF:0000DF44                                         ; DATA XREF: FileRelocalizerDlg::doDialog(wchar_t const *,bool)+56r
UNDEF:0000DF48 ; BOOL __stdcall EndDialog(HWND hDlg, INT_PTR nResult)
UNDEF:0000DF48                 extrn __imp__EndDialog@8:near
UNDEF:0000DF48                                         ; CODE XREF: FileRelocalizerDlg::run_dlgProc(uint,uint,long)+BCp
UNDEF:0000DF48                                         ; FileRelocalizerDlg::run_dlgProc(uint,uint,long)+D2p
UNDEF:0000DF48                                         ; DATA XREF: ...
UNDEF:0000DF4C ; BOOL __stdcall SetDlgItemTextW(HWND hDlg, int nIDDlgItem, LPCWSTR lpString)
UNDEF:0000DF4C                 extrn __imp__SetDlgItemTextW@12:near
UNDEF:0000DF4C                                         ; CODE XREF: FileRelocalizerDlg::run_dlgProc(uint,uint,long)+59p
UNDEF:0000DF4C                                         ; DATA XREF: FileRelocalizerDlg::run_dlgProc(uint,uint,long)+59r
UNDEF:0000DF50 ; UINT __stdcall GetDlgItemTextW(HWND hDlg, int nIDDlgItem, LPWSTR lpString, int cchMax)
UNDEF:0000DF50                 extrn __imp__GetDlgItemTextW@16:near
UNDEF:0000DF50                                         ; CODE XREF: FileRelocalizerDlg::run_dlgProc(uint,uint,long)+9Bp
UNDEF:0000DF50                                         ; DATA XREF: FileRelocalizerDlg::run_dlgProc(uint,uint,long)+9Br
UNDEF:0000DF54 ; SHORT __stdcall GetKeyState(int nVirtKey)
UNDEF:0000DF54                 extrn __imp__GetKeyState@4:near
UNDEF:0000DF54                                         ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+3FBp
UNDEF:0000DF54                                         ; ProjectPanel::notified(tagNMHDR *)+42Cp
UNDEF:0000DF54                                         ; DATA XREF: ...
UNDEF:0000DF58 ; HMENU __stdcall CreatePopupMenu()
UNDEF:0000DF58                 extrn __imp__CreatePopupMenu@0:near
UNDEF:0000DF58                                         ; CODE XREF: ProjectPanel::initMenus(void)+31p
UNDEF:0000DF58                                         ; ProjectPanel::initMenus(void)+385p ...
UNDEF:0000DF5C ; BOOL __stdcall DestroyMenu(HMENU hMenu)
UNDEF:0000DF5C                 extrn __imp__DestroyMenu@4:near
UNDEF:0000DF5C                                         ; CODE XREF: ProjectPanel::destroyMenus(void)+11p
UNDEF:0000DF5C                                         ; ProjectPanel::destroyMenus(void)+21p ...
UNDEF:0000DF60 ; BOOL __stdcall InsertMenuW(HMENU hMenu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem)
UNDEF:0000DF60                 extrn __imp__InsertMenuW@20:near
UNDEF:0000DF60                                         ; CODE XREF: ProjectPanel::initMenus(void)+17Dp
UNDEF:0000DF60                                         ; ProjectPanel::initMenus(void)+1A5p ...
UNDEF:0000DF64 ; BOOL __stdcall TrackPopupMenu(HMENU hMenu, UINT uFlags, int x, int y, int nReserved, HWND hWnd, const RECT *prcRect)
UNDEF:0000DF64                 extrn __imp__TrackPopupMenu@28:near
UNDEF:0000DF64                                         ; CODE XREF: ProjectPanel::popupMenuCmd(int)+CDp
UNDEF:0000DF64                                         ; ProjectPanel::popupMenuCmd(int)+191p ...
UNDEF:0000DF68 ; BOOL __stdcall UpdateWindow(HWND hWnd)
UNDEF:0000DF68                 extrn __imp__UpdateWindow@4:near
UNDEF:0000DF68                                         ; CODE XREF: Window::redraw(bool)+27p
UNDEF:0000DF68                                         ; DATA XREF: Window::redraw(bool)+27r
UNDEF:0000DF6C ; BOOL __stdcall InvalidateRect(HWND hWnd, const RECT *lpRect, BOOL bErase)
UNDEF:0000DF6C                 extrn __imp__InvalidateRect@12:near
UNDEF:0000DF6C                                         ; CODE XREF: Window::redraw(bool)+12p
UNDEF:0000DF6C                                         ; DATA XREF: Window::redraw(bool)+12r
UNDEF:0000DF70 ; BOOL __stdcall GetClientRect(HWND hWnd, LPRECT lpRect)
UNDEF:0000DF70                 extrn __imp__GetClientRect@8:near
UNDEF:0000DF70                                         ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+40Cp
UNDEF:0000DF70                                         ; Window::getClientRect(tagRECT &)+12p ...
UNDEF:0000DF74 ; BOOL __stdcall GetWindowRect(HWND hWnd, LPRECT lpRect)
UNDEF:0000DF74                 extrn __imp__GetWindowRect@8:near
UNDEF:0000DF74                                         ; CODE XREF: Window::getWindowRect(tagRECT &)+12p
UNDEF:0000DF74                                         ; DATA XREF: Window::getWindowRect(tagRECT &)+12r
UNDEF:0000DF78 ; int __stdcall MessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType)
UNDEF:0000DF78                 extrn __imp__MessageBoxA@16:near
UNDEF:0000DF78                                         ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+50Ep
UNDEF:0000DF78                                         ; DATA XREF: ProjectPanel::run_dlgProc(uint,uint,long)+50Er
UNDEF:0000DF7C ; int __stdcall MessageBoxW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType)
UNDEF:0000DF7C                 extrn __imp__MessageBoxW@16:near
UNDEF:0000DF7C                                         ; CODE XREF: ProjectPanel::checkIfNeedSave(wchar_t const *)+38p
UNDEF:0000DF7C                                         ; ProjectPanel::checkIfNeedSave(wchar_t const *)+68p ...
UNDEF:0000DF80 ; BOOL __stdcall ClientToScreen(HWND hWnd, LPPOINT lpPoint)
UNDEF:0000DF80                 extrn __imp__ClientToScreen@8:near
UNDEF:0000DF80                                         ; CODE XREF: ProjectPanel::getMenuDisplyPoint(int)+4Dp
UNDEF:0000DF80                                         ; DATA XREF: ProjectPanel::getMenuDisplyPoint(int)+4Dr
UNDEF:0000DF84 ; BOOL __stdcall ScreenToClient(HWND hWnd, LPPOINT lpPoint)
UNDEF:0000DF84                 extrn __imp__ScreenToClient@8:near
UNDEF:0000DF84                                         ; CODE XREF: ProjectPanel::showContextMenu(int,int)+2Cp
UNDEF:0000DF84                                         ; DATA XREF: ProjectPanel::showContextMenu(int,int)+2Cr
UNDEF:0000DF88 ; LONG __stdcall SetWindowLongW(HWND hWnd, int nIndex, LONG dwNewLong)
UNDEF:0000DF88                 extrn __imp__SetWindowLongW@12:near
UNDEF:0000DF88                                         ; CODE XREF: StaticDialog::~StaticDialog(void)+50p
UNDEF:0000DF88                                         ; DATA XREF: StaticDialog::~StaticDialog(void)+50r
UNDEF:0000DF8C ; HBITMAP __stdcall LoadBitmapW(HINSTANCE hInstance, LPCWSTR lpBitmapName)
UNDEF:0000DF8C                 extrn __imp__LoadBitmapW@8:near
UNDEF:0000DF8C                                         ; CODE XREF: ProjectPanel::setImageList(int,int,int,int,int,int,int)+4Fp
UNDEF:0000DF8C                                         ; ProjectPanel::setImageList(int,int,int,int,int,int,int)+93p ...
UNDEF:0000DF90 ; BOOL __stdcall PathAppendW(LPWSTR pszPath, LPCWSTR pMore)
UNDEF:0000DF90                 extrn __imp__PathAppendW@8:near
UNDEF:0000DF90                                         ; CODE XREF: ProjectPanel::getAbsoluteFilePath(wchar_t const *)+A7p
UNDEF:0000DF90                                         ; DATA XREF: ProjectPanel::getAbsoluteFilePath(wchar_t const *)+A7r
UNDEF:0000DF94 ; BOOL __stdcall PathFileExistsW(LPCWSTR pszPath)
UNDEF:0000DF94                 extrn __imp__PathFileExistsW@4:near
UNDEF:0000DF94                                         ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+C8p
UNDEF:0000DF94                                         ; ProjectPanel::popupMenuCmd(int)+614p ...
UNDEF:0000DF98 ; LPWSTR __stdcall PathFindFileNameW(LPCWSTR pszPath)
UNDEF:0000DF98                 extrn __imp__PathFindFileNameW@4:near
UNDEF:0000DF98                                         ; CODE XREF: ProjectPanel::addFiles(_TREEITEM *)+E7p
UNDEF:0000DF98                                         ; ProjectPanel::popupMenuCmd(int)+99Cp ...
UNDEF:0000DF9C ; BOOL __stdcall PathIsRelativeW(LPCWSTR pszPath)
UNDEF:0000DF9C                 extrn __imp__PathIsRelativeW@4:near
UNDEF:0000DF9C                                         ; CODE XREF: ProjectPanel::getAbsoluteFilePath(wchar_t const *)+3Fp
UNDEF:0000DF9C                                         ; DATA XREF: ProjectPanel::getAbsoluteFilePath(wchar_t const *)+3Fr
UNDEF:0000DFA0 ; BOOL __stdcall PathRemoveFileSpecW(LPWSTR pszPath)
UNDEF:0000DFA0                 extrn __imp__PathRemoveFileSpecW@4:near
UNDEF:0000DFA0                                         ; CODE XREF: ProjectPanel::addFilesFromDirectory(_TREEITEM *)+98p
UNDEF:0000DFA0                                         ; ProjectPanel::getRelativePath(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+54p ...
UNDEF:0000DFA4 ; _DWORD __thiscall std::_Lockit::_Lockit(std::_Lockit *__hidden this, int)
UNDEF:0000DFA4                 extrn ??0_Lockit@std@@QAE@H@Z:near
UNDEF:0000DFA4                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+2Dp
UNDEF:0000DFA4                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+55p ...
UNDEF:0000DFA8 ; _DWORD __thiscall std::_Lockit::~_Lockit(std::_Lockit *__hidden this)
UNDEF:0000DFA8                 extrn ??1_Lockit@std@@QAE@XZ:near
UNDEF:0000DFA8                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+4Bp
UNDEF:0000DFA8                                         ; __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0+3j ...
UNDEF:0000DFAC                 extrn __hypot:near      ; CODE XREF: _hypot+1Dp
UNDEF:0000DFB0                 extrn __CrtDbgReportW:near
UNDEF:0000DFB0                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+50p
UNDEF:0000DFB0                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+91p ...
UNDEF:0000DFB4 ; void __cdecl std::_Debug_message(const wchar_t *, const wchar_t *, unsigned int)
UNDEF:0000DFB4                 extrn ?_Debug_message@std@@YAXPB_W0I@Z:near
UNDEF:0000DFB4                                         ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+16p
UNDEF:0000DFB4                                         ; std::_Debug_pointer<int>(int *,wchar_t const *,uint)+16p ...
UNDEF:0000DFB8 ; void __cdecl std::_Xbad_alloc()
UNDEF:0000DFB8                 extrn ?_Xbad_alloc@std@@YAXXZ:near
UNDEF:0000DFB8                                         ; CODE XREF: std::_Allocate<char>(uint,char *):loc_51C2p
UNDEF:0000DFB8                                         ; std::_Allocate<int>(uint,int *):loc_5204p ...
UNDEF:0000DFBC ; void __cdecl std::_Xlength_error(const char *)
UNDEF:0000DFBC                 extrn ?_Xlength_error@std@@YAXPBD@Z:near
UNDEF:0000DFBC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+Cp
UNDEF:0000DFBC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+Cp ...
UNDEF:0000DFC0 ; void __cdecl std::_Xout_of_range(const char *)
UNDEF:0000DFC0                 extrn ?_Xout_of_range@std@@YAXPBD@Z:near
UNDEF:0000DFC0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+Cp
UNDEF:0000DFC0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+Cp ...
UNDEF:0000DFC4 ; public: virtual void * __thiscall std::error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000DFC4                 extrn ??_Eerror_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000DFC4                                         ; DATA XREF: .rdata:const std::error_category::`vftable'o
UNDEF:0000DFC8 ; const char *__cdecl std::_Syserror_map(int)
UNDEF:0000DFC8                 extrn ?_Syserror_map@std@@YAPBDH@Z:near
UNDEF:0000DFC8                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+Bp
UNDEF:0000DFC8                                         ; std::_Generic_error_category::message(int)+33p
UNDEF:0000DFCC ; const char *__cdecl std::_Winerror_map(int)
UNDEF:0000DFCC                 extrn ?_Winerror_map@std@@YAPBDH@Z:near
UNDEF:0000DFCC                                         ; CODE XREF: std::_System_error_category::message(int)+33p
UNDEF:0000DFD0 ; public: virtual void * __thiscall std::_Generic_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000DFD0                 extrn ??_E_Generic_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000DFD0                                         ; DATA XREF: .rdata:const std::_Generic_error_category::`vftable'o
UNDEF:0000DFD4 ; public: virtual void * __thiscall std::_Iostream_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000DFD4                 extrn ??_E_Iostream_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000DFD4                                         ; DATA XREF: .rdata:const std::_Iostream_error_category::`vftable'o
UNDEF:0000DFD8 ; public: virtual void * __thiscall std::_System_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000DFD8                 extrn ??_E_System_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000DFD8                                         ; DATA XREF: .rdata:const std::_System_error_category::`vftable'o
UNDEF:0000DFDC ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __cdecl getFolderName(struct HWND__ *, wchar_t const *)
UNDEF:0000DFDC                 extrn ?getFolderName@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@PB_W@Z:near
UNDEF:0000DFDC                                         ; CODE XREF: ProjectPanel::addFilesFromDirectory(_TREEITEM *)+10Cp
UNDEF:0000DFDC                                         ; ProjectPanel::addFilesFromDirectory(_TREEITEM *)+160p
UNDEF:0000DFE0 ; public: virtual void * __thiscall Window::`vector deleting destructor'(unsigned int)
UNDEF:0000DFE0                 extrn ??_EWindow@@UAEPAXI@Z:near ; weak
UNDEF:0000DFE0                                         ; DATA XREF: .rdata:const Window::`vftable'o
UNDEF:0000DFE4 ; public: virtual void __thiscall StaticDialog::create(int, bool, bool)
UNDEF:0000DFE4                 extrn ?create@StaticDialog@@UAEXH_N0@Z:near
UNDEF:0000DFE4                                         ; DATA XREF: .rdata:0000D230o
UNDEF:0000DFE4                                         ; .rdata:0000D270o
UNDEF:0000DFE8 ; void __thiscall StaticDialog::goToCenter(StaticDialog *__hidden this)
UNDEF:0000DFE8                 extrn ?goToCenter@StaticDialog@@QAEXXZ:near
UNDEF:0000DFE8                                         ; CODE XREF: FileRelocalizerDlg::run_dlgProc(uint,uint,long)+3Cp
UNDEF:0000DFEC ; public: virtual void __thiscall StaticDialog::display(bool)const
UNDEF:0000DFEC                 extrn ?display@StaticDialog@@UBEX_N@Z:near
UNDEF:0000DFEC                                         ; DATA XREF: .rdata:0000D20Co
UNDEF:0000DFEC                                         ; .rdata:0000D24Co
UNDEF:0000DFF0 ; INT_PTR __stdcall StaticDialog::dlgProc(HWND, UINT, WPARAM, LPARAM)
UNDEF:0000DFF0                 extrn ?dlgProc@StaticDialog@@KGHPAUHWND__@@IIJ@Z:near
UNDEF:0000DFF0                                         ; DATA XREF: FileRelocalizerDlg::doDialog(wchar_t const *,bool)+3Fo
UNDEF:0000DFF0                                         ; FileRelocalizerDlg::doDialog(wchar_t const *,bool)+72o
UNDEF:0000DFF4 ; void *__thiscall StaticDialog::makeRTLResource(StaticDialog *__hidden this, int, struct DLGTEMPLATE **)
UNDEF:0000DFF4                 extrn ?makeRTLResource@StaticDialog@@IAEPAXHPAPAUDLGTEMPLATE@@@Z:near
UNDEF:0000DFF4                                         ; CODE XREF: FileRelocalizerDlg::doDialog(wchar_t const *,bool)+33p
UNDEF:0000DFF8 ; public: virtual void * __thiscall StaticDialog::`vector deleting destructor'(unsigned int)
UNDEF:0000DFF8                 extrn ??_EStaticDialog@@UAEPAXI@Z:near ; weak
UNDEF:0000DFF8                                         ; DATA XREF: .rdata:const StaticDialog::`vftable'o
UNDEF:0000DFFC ; HIMAGELIST __stdcall ImageList_Create(int cx, int cy, UINT flags, int cInitial, int cGrow)
UNDEF:0000DFFC                 extrn __imp__ImageList_Create@20:near
UNDEF:0000DFFC                                         ; CODE XREF: ProjectPanel::setImageList(int,int,int,int,int,int,int)+21p
UNDEF:0000DFFC                                         ; DATA XREF: ProjectPanel::setImageList(int,int,int,int,int,int,int)+21r
UNDEF:0000E000 ; int __stdcall ImageList_GetImageCount(HIMAGELIST himl)
UNDEF:0000E000                 extrn __imp__ImageList_GetImageCount@4:near
UNDEF:0000E000                                         ; CODE XREF: ProjectPanel::setImageList(int,int,int,int,int,int,int)+226p
UNDEF:0000E000                                         ; DATA XREF: ProjectPanel::setImageList(int,int,int,int,int,int,int)+226r
UNDEF:0000E004 ; int __stdcall ImageList_AddMasked(HIMAGELIST himl, HBITMAP hbmImage, COLORREF crMask)
UNDEF:0000E004                 extrn __imp__ImageList_AddMasked@12:near
UNDEF:0000E004                                         ; CODE XREF: ProjectPanel::setImageList(int,int,int,int,int,int,int)+77p
UNDEF:0000E004                                         ; ProjectPanel::setImageList(int,int,int,int,int,int,int)+BBp ...
UNDEF:0000E008 ; struct _TREEITEM *__thiscall TreeView::addItem(TreeView *__hidden this, const wchar_t *, struct _TREEITEM *, int, const wchar_t *)
UNDEF:0000E008                 extrn ?addItem@TreeView@@QAEPAU_TREEITEM@@PB_WPAU2@H0@Z:near
UNDEF:0000E008                                         ; CODE XREF: ProjectPanel::newWorkSpace(void)+74p
UNDEF:0000E008                                         ; ProjectPanel::openWorkSpace(wchar_t const *)+13Fp ...
UNDEF:0000E00C ; void __thiscall TreeView::removeItem(TreeView *__hidden this, struct _TREEITEM *)
UNDEF:0000E00C                 extrn ?removeItem@TreeView@@QAEXPAU_TREEITEM@@@Z:near
UNDEF:0000E00C                                         ; CODE XREF: ProjectPanel::popupMenuCmd(int)+730p
UNDEF:0000E00C                                         ; ProjectPanel::popupMenuCmd(int)+754p ...
UNDEF:0000E010 ; void __thiscall TreeView::removeAllItems(TreeView *__hidden this)
UNDEF:0000E010                 extrn ?removeAllItems@TreeView@@QAEXXZ:near
UNDEF:0000E010                                         ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+DFp
UNDEF:0000E010                                         ; ProjectPanel::popupMenuCmd(int)+2E8p
UNDEF:0000E014 ; void __thiscall TreeView::setItemImage(TreeView *__hidden this, struct _TREEITEM *, int, int)
UNDEF:0000E014                 extrn ?setItemImage@TreeView@@QAEXPAU_TREEITEM@@HH@Z:near
UNDEF:0000E014                                         ; CODE XREF: ProjectPanel::addFolder(_TREEITEM *,wchar_t const *)+7Cp
UNDEF:0000E014                                         ; ProjectPanel::setWorkSpaceDirty(bool)+53p ...
UNDEF:0000E018 ; void __thiscall TreeView::beginDrag(TreeView *__hidden this, struct tagNMTREEVIEWW *)
UNDEF:0000E018                 extrn ?beginDrag@TreeView@@QAEXPAUtagNMTREEVIEWW@@@Z:near
UNDEF:0000E018                                         ; CODE XREF: ProjectPanel::notified(tagNMHDR *)+50Dp
UNDEF:0000E01C ; void __thiscall TreeView::dragItem(TreeView *__hidden this, HWND, int, int)
UNDEF:0000E01C                 extrn ?dragItem@TreeView@@QAEXPAUHWND__@@HH@Z:near
UNDEF:0000E01C                                         ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+384p
UNDEF:0000E020 ; bool __thiscall TreeView::dropItem(TreeView *__hidden this)
UNDEF:0000E020                 extrn ?dropItem@TreeView@@QAE_NXZ:near
UNDEF:0000E020                                         ; CODE XREF: ProjectPanel::run_dlgProc(uint,uint,long)+3A6p
UNDEF:0000E024 ; bool __thiscall TreeView::moveDown(TreeView *__hidden this, struct _TREEITEM *)
UNDEF:0000E024                 extrn ?moveDown@TreeView@@QAE_NPAU_TREEITEM@@@Z:near
UNDEF:0000E024                                         ; CODE XREF: ProjectPanel::popupMenuCmd(int)+3B1p
UNDEF:0000E028 ; bool __thiscall TreeView::moveUp(TreeView *__hidden this, struct _TREEITEM *)
UNDEF:0000E028                 extrn ?moveUp@TreeView@@QAE_NPAU_TREEITEM@@@Z:near
UNDEF:0000E028                                         ; CODE XREF: ProjectPanel::popupMenuCmd(int)+3DFp
UNDEF:0000E02C ; public: virtual void * __thiscall FileRelocalizerDlg::`vector deleting destructor'(unsigned int)
UNDEF:0000E02C                 extrn ??_EFileRelocalizerDlg@@UAEPAXI@Z:near ; weak
UNDEF:0000E02C                                         ; DATA XREF: .rdata:const FileRelocalizerDlg::`vftable'o
UNDEF:0000E030 ; _DWORD __thiscall TiXmlNode::~TiXmlNode(TiXmlNode *__hidden this)
UNDEF:0000E030                 extrn ??1TiXmlNode@@UAE@XZ:near
UNDEF:0000E030                                         ; CODE XREF: TiXmlDocument::~TiXmlDocument(void)+4Fp
UNDEF:0000E030                                         ; __unwindfunclet$??1TiXmlDocument@@UAE@XZ$0+3j
UNDEF:0000E034 ; struct TiXmlNode *__thiscall TiXmlNode::FirstChild(TiXmlNode *__hidden this, const wchar_t *)
UNDEF:0000E034                 extrn ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z:near
UNDEF:0000E034                                         ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+92p
UNDEF:0000E038 ; struct TiXmlNode *__thiscall TiXmlNode::InsertEndChild(TiXmlNode *__hidden this, const struct TiXmlNode *)
UNDEF:0000E038                 extrn ?InsertEndChild@TiXmlNode@@QAEPAV1@ABV1@@Z:near
UNDEF:0000E038                                         ; CODE XREF: ProjectPanel::writeWorkSpace(wchar_t *)+B1p
UNDEF:0000E038                                         ; ProjectPanel::writeWorkSpace(wchar_t *)+1D3p ...
UNDEF:0000E03C ; struct TiXmlNode *__thiscall TiXmlNode::NextSibling(TiXmlNode *__hidden this, const wchar_t *)
UNDEF:0000E03C                 extrn ?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z:near
UNDEF:0000E03C                                         ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+151p
UNDEF:0000E040 ; struct TiXmlElement *__thiscall TiXmlNode::FirstChildElement(TiXmlNode *__hidden this)
UNDEF:0000E040                 extrn ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ:near
UNDEF:0000E040                                         ; CODE XREF: ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)+2Ep
UNDEF:0000E044 ; struct TiXmlElement *__thiscall TiXmlNode::FirstChildElement(TiXmlNode *__hidden this, const wchar_t *)
UNDEF:0000E044                 extrn ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z:near
UNDEF:0000E044                                         ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+AFp
UNDEF:0000E048 ; _DWORD __thiscall TiXmlElement::TiXmlElement(TiXmlElement *__hidden this, const wchar_t *)
UNDEF:0000E048                 extrn ??0TiXmlElement@@QAE@PB_W@Z:near
UNDEF:0000E048                                         ; CODE XREF: ProjectPanel::writeWorkSpace(wchar_t *)+89p
UNDEF:0000E048                                         ; ProjectPanel::writeWorkSpace(wchar_t *)+1ABp ...
UNDEF:0000E04C ; _DWORD __thiscall TiXmlElement::~TiXmlElement(TiXmlElement *__hidden this)
UNDEF:0000E04C                 extrn ??1TiXmlElement@@UAE@XZ:near
UNDEF:0000E04C                                         ; CODE XREF: ProjectPanel::writeWorkSpace(wchar_t *)+C6p
UNDEF:0000E04C                                         ; ProjectPanel::writeWorkSpace(wchar_t *)+1E8p ...
UNDEF:0000E050 ; const wchar_t *__thiscall TiXmlElement::Attribute(TiXmlElement *__hidden this, const wchar_t *)
UNDEF:0000E050                 extrn ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z:near
UNDEF:0000E050                                         ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+176p
UNDEF:0000E050                                         ; ProjectPanel::buildTreeFrom(TiXmlNode *,_TREEITEM *)+82p ...
UNDEF:0000E054 ; void __thiscall TiXmlElement::SetAttribute(TiXmlElement *__hidden this, const wchar_t *, const wchar_t *)
UNDEF:0000E054                 extrn ?SetAttribute@TiXmlElement@@QAEXPB_W0@Z:near
UNDEF:0000E054                                         ; CODE XREF: ProjectPanel::writeWorkSpace(wchar_t *)+206p
UNDEF:0000E054                                         ; ProjectPanel::buildProjectXml(TiXmlNode *,_TREEITEM *,wchar_t const *)+167p ...
UNDEF:0000E058 ; _DWORD __thiscall TiXmlDocument::TiXmlDocument(TiXmlDocument *__hidden this, const wchar_t *)
UNDEF:0000E058                 extrn ??0TiXmlDocument@@QAE@PB_W@Z:near
UNDEF:0000E058                                         ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+4Cp
UNDEF:0000E058                                         ; ProjectPanel::writeWorkSpace(wchar_t *)+72p
UNDEF:0000E05C ; bool __thiscall TiXmlDocument::LoadFile(TiXmlDocument *__hidden this)
UNDEF:0000E05C                 extrn ?LoadFile@TiXmlDocument@@QAE_NXZ:near
UNDEF:0000E05C                                         ; CODE XREF: ProjectPanel::openWorkSpace(wchar_t const *)+73p
UNDEF:0000E060 ; bool __thiscall TiXmlDocument::SaveFile(TiXmlDocument *__hidden this)
UNDEF:0000E060                 extrn ?SaveFile@TiXmlDocument@@QBE_NXZ:near
UNDEF:0000E060                                         ; CODE XREF: ProjectPanel::writeWorkSpace(wchar_t *)+236p
UNDEF:0000E064 ; public: virtual wchar_t const * __thiscall TiXmlDocument::Parse(wchar_t const *, class TiXmlParsingData *)
UNDEF:0000E064                 extrn ?Parse@TiXmlDocument@@UAEPB_WPB_WPAVTiXmlParsingData@@@Z:near
UNDEF:0000E064                                         ; DATA XREF: .rdata:0000D28Co
UNDEF:0000E068 ; public: virtual void __thiscall TiXmlDocument::Print(struct _iobuf *, int)const
UNDEF:0000E068                 extrn ?Print@TiXmlDocument@@UBEXPAU_iobuf@@H@Z:near
UNDEF:0000E068                                         ; DATA XREF: .rdata:0000D284o
UNDEF:0000E06C ; protected: virtual void __thiscall TiXmlDocument::StreamOut(class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> *)const
UNDEF:0000E06C                 extrn ?StreamOut@TiXmlDocument@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z:near
UNDEF:0000E06C                                         ; DATA XREF: .rdata:0000D288o
UNDEF:0000E070 ; protected: virtual class TiXmlNode * __thiscall TiXmlDocument::Clone(void)const
UNDEF:0000E070                 extrn ?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ:near
UNDEF:0000E070                                         ; DATA XREF: .rdata:0000D294o
UNDEF:0000E074 ; protected: virtual void __thiscall TiXmlDocument::StreamIn(class std::basic_istream<wchar_t, struct std::char_traits<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
UNDEF:0000E074                 extrn ?StreamIn@TiXmlDocument@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z:near
UNDEF:0000E074                                         ; DATA XREF: .rdata:0000D298o
UNDEF:0000E078 ; public: virtual void * __thiscall TiXmlDocument::`vector deleting destructor'(unsigned int)
UNDEF:0000E078                 extrn ??_ETiXmlDocument@@UAEPAXI@Z:near ; weak
UNDEF:0000E078                                         ; DATA XREF: .rdata:const TiXmlDocument::`vftable'o
UNDEF:0000E07C ; _DWORD __thiscall FileDialog::FileDialog(FileDialog *__hidden this, HWND, HINSTANCE)
UNDEF:0000E07C                 extrn ??0FileDialog@@QAE@PAUHWND__@@PAUHINSTANCE__@@@Z:near
UNDEF:0000E07C                                         ; CODE XREF: ProjectPanel::saveWorkSpaceAs(bool)+4Ep
UNDEF:0000E07C                                         ; ProjectPanel::addFiles(_TREEITEM *)+4Ep ...
UNDEF:0000E080 ; _DWORD __thiscall FileDialog::~FileDialog(FileDialog *__hidden this)
UNDEF:0000E080                 extrn ??1FileDialog@@QAE@XZ:near
UNDEF:0000E080                                         ; CODE XREF: ProjectPanel::saveWorkSpaceAs(bool)+E2p
UNDEF:0000E080                                         ; ProjectPanel::saveWorkSpaceAs(bool)+103p ...
UNDEF:0000E084 ; void FileDialog::setExtFilter(FileDialog *__hidden this, const wchar_t *, const wchar_t *, ...)
UNDEF:0000E084                 extrn ?setExtFilter@FileDialog@@QAAXPB_W0ZZ:near
UNDEF:0000E084                                         ; CODE XREF: ProjectPanel::saveWorkSpaceAs(bool)+6Dp
UNDEF:0000E084                                         ; ProjectPanel::addFiles(_TREEITEM *)+6Dp ...
UNDEF:0000E088 ; wchar_t *__thiscall FileDialog::doSaveDlg(FileDialog *__hidden this)
UNDEF:0000E088                 extrn ?doSaveDlg@FileDialog@@QAEPA_WXZ:near
UNDEF:0000E088                                         ; CODE XREF: ProjectPanel::saveWorkSpaceAs(bool)+7Bp
UNDEF:0000E08C ; public: class std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> * __thiscall FileDialog::doOpenMultiFilesDlg(void)
UNDEF:0000E08C                 extrn ?doOpenMultiFilesDlg@FileDialog@@QAEPAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ:near
UNDEF:0000E08C                                         ; CODE XREF: ProjectPanel::addFiles(_TREEITEM *)+7Bp
UNDEF:0000E090 ; wchar_t *__thiscall FileDialog::doOpenSingleFileDlg(FileDialog *__hidden this)
UNDEF:0000E090                 extrn ?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ:near
UNDEF:0000E090                                         ; CODE XREF: ProjectPanel::popupMenuCmd(int)+53Fp
UNDEF:0000E094 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __thiscall NativeLangSpeaker::getProjectPanelLangMenuStr(char const *, int, wchar_t const *)const
UNDEF:0000E094                 extrn ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z:near
UNDEF:0000E094                                         ; CODE XREF: ProjectPanel::initMenus(void)+71p
UNDEF:0000E094                                         ; ProjectPanel::initMenus(void)+99p ...
UNDEF:0000E098 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __thiscall NativeLangSpeaker::getAttrNameStr(wchar_t const *, char const *, char const *)const
UNDEF:0000E098                 extrn ?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z:near
UNDEF:0000E098                                         ; CODE XREF: ProjectPanel::newWorkSpace(void)+50p
UNDEF:0000E098                                         ; ProjectPanel::openWorkSpace(wchar_t const *)+11Bp ...
UNDEF:0000E09C ; __fastcall __security_check_cookie(x)
UNDEF:0000E09C                 extrn @__security_check_cookie@4:near
UNDEF:0000E09C                                         ; CODE XREF: ProjectPanel::newWorkSpace(void)+B5p
UNDEF:0000E09C                                         ; ProjectPanel::openWorkSpace(wchar_t const *)+209p ...
UNDEF:0000E0A0 ; __stdcall _CxxThrowException(x, x)
UNDEF:0000E0A0                 extrn __CxxThrowException@8:near
UNDEF:0000E0A0                                         ; CODE XREF: __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+25p
UNDEF:0000E0A0                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1+10p ...
UNDEF:0000E0A4                 extrn ___CxxFrameHandler3:near
UNDEF:0000E0A4                                         ; CODE XREF: __ehhandler$?newWorkSpace@ProjectPanel@@QAEXXZ+20j
UNDEF:0000E0A4                                         ; __ehhandler$?openWorkSpace@ProjectPanel@@QAE_NPB_W@Z+20j ...
UNDEF:0000E0A8                 extrn __chkstk:near     ; CODE XREF: ProjectPanel::saveWorkSpaceAs(bool)+16p
UNDEF:0000E0A8                                         ; ProjectPanel::addFiles(_TREEITEM *)+16p ...
UNDEF:0000E0AC ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:0000E0AC                 extrn _memset:near      ; CODE XREF: ProjectPanel::popupMenuCmd(int)+6F5p
UNDEF:0000E0AC                                         ; ProjectPanel::popupMenuCmd(int)+7D6p
UNDEF:0000E0B0 ; const type_info::`vftable'
UNDEF:0000E0B0                 extrn ??_7type_info@@6B@:near
UNDEF:0000E0B0                                         ; DATA XREF: .data$r:std::error_category `RTTI Type Descriptor'o
UNDEF:0000E0B0                                         ; .data$r:std::_Generic_error_category `RTTI Type Descriptor'o ...
UNDEF:0000E0B4 ; private: static class NppParameters * NppParameters::_pSelf
UNDEF:0000E0B4                 extrn ?_pSelf@NppParameters@@0PAV1@A:near
UNDEF:0000E0B4                                         ; DATA XREF: NppParameters::getInstance(void)+3r
UNDEF:0000E0B8                 extrn ___security_cookie:near
UNDEF:0000E0B8                                         ; DATA XREF: ProjectPanel::newWorkSpace(void)+14r
UNDEF:0000E0B8                                         ; ProjectPanel::openWorkSpace(wchar_t const *)+14r ...
UNDEF:0000E0BC                 extrn __fltused:near
UNDEF:0000E0BC
UNDEF:0000E0BC
UNDEF:0000E0BC                 end