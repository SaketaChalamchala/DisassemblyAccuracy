.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : E4AD2FEBB00D37F9D8DFDB382F1FC35B
.rdata:00000000 ; Input CRC32 : B476218A
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\FileDialog.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "libcpmtd"
.rdata:00000000 ; must resolve: ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.rdata:00000000 ; must resolve: ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.rdata:00000000 ; must resolve: ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@D@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@_W@std@@2V0locale@2@A
.rdata:00000000 ; includelib "LIBCMTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 ; CHAR _SG124928[]
.rdata:00000000 $SG124928       db 'Exception',0        ; DATA XREF: __catch$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ$0+6o
.rdata:0000000A                 align 4
.rdata:0000000C ; const WCHAR _SG124929
.rdata:0000000C $SG124929       dw 0                    ; DATA XREF: __catch$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ$1+2o
.rdata:0000000E                 align 10h
.rdata:00000010 ; const WCHAR _SG124930
.rdata:00000010 $SG124930:                              ; DATA XREF: __catch$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ$1+7o
.rdata:00000010                 unicode 0, <GetSaveFileName crashes!!!>,0
.rdata:00000046                 align 4
.rdata:00000048 ; const WCHAR _SG124945
.rdata:00000048 $SG124945       dd offset $SG124964     ; DATA XREF: FileDialog::doOpenMultiFilesDlg(void)+19Co
.rdata:00000048                                         ; "GetSaveFileName crashes!!!"
.rdata:0000004C ; CHAR _SG124962[]
.rdata:0000004C $SG124962       db 'Exception',0        ; DATA XREF: __catch$?doSaveDlg@FileDialog@@QAEPA_WXZ$0+6o
.rdata:00000056                 align 4
.rdata:00000058 ; const WCHAR _SG124963
.rdata:00000058 $SG124963       dw 0                    ; DATA XREF: __catch$?doSaveDlg@FileDialog@@QAEPA_WXZ$1+2o
.rdata:0000005A                 align 4
.rdata:0000005C ; const WCHAR _SG124964
.rdata:0000005C $SG124964:                              ; DATA XREF: .rdata:$SG124945o
.rdata:0000005C                                         ; __catch$?doSaveDlg@FileDialog@@QAEPA_WXZ$1+7o
.rdata:0000005C                 unicode 0, <GetSaveFileName crashes!!!>,0
.rdata:00000092                 align 4
.rdata:00000094 ; wchar_t _SG124970
.rdata:00000094 $SG124970       dw 0                    ; DATA XREF: `dynamic initializer for 'currentExt''(void)+3o
.rdata:00000096                 db    0
.rdata:00000097                 db    0
.rdata:00000098 ; wchar_t _SG125013
.rdata:00000098 $SG125013       dw 0                    ; DATA XREF: fileDlgProc(HWND__ *,uint,uint,long):loc_13E1o
.rdata:0000009A                 db    0
.rdata:0000009B                 db    0
.rdata:0000009C ; wchar_t _SG125142
.rdata:0000009C $SG125142       dw 0                    ; DATA XREF: changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+37o
.rdata:0000009E                 db    0
.rdata:0000009F                 db    0
.rdata:000000A0 ; wchar_t _SG125145
.rdata:000000A0 $SG125145       dd offset $SG124930+1Eh ; DATA XREF: changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+9Bo
.rdata:000000A0                                         ; " crashes!!!"
.rdata:000000A4 ; wchar_t _SG125147
.rdata:000000A4 $SG125147       dd offset $SG124930+1Eh ; DATA XREF: changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+ABo
.rdata:000000A4                                         ; " crashes!!!"
.rdata:000000A8 ; wchar_t _SG124884
.rdata:000000A8 $SG124884       dd offset $SG124930+1Ah ; DATA XREF: FileDialog::setExtFilter(wchar_t const *,wchar_t const *,...)+57o
.rdata:000000A8                                         ; "me crashes!!!"
.rdata:000000AC ; wchar_t _SG124885
.rdata:000000AC $SG124885       dd offset $SG124930+2Bh ; DATA XREF: FileDialog::setExtFilter(wchar_t const *,wchar_t const *,...)+70o
.rdata:000000AC                                         ; "猀℀℀℀"
.rdata:000000B0 ; wchar_t _SG124902
.rdata:000000B0 $SG124902:                              ; DATA XREF: FileDialog::setExtsFilter(wchar_t const *,wchar_t const *)+46o
.rdata:000000B0                 unicode 0, < (>,0
.rdata:000000B6                 align 4
.rdata:000000B8 ; wchar_t _SG124903
.rdata:000000B8 $SG124903       dd offset $SG124930+19h ; DATA XREF: FileDialog::setExtsFilter(wchar_t const *,wchar_t const *)+5Fo
.rdata:000000B8 _rdata          ends                    ; "洀攀 挀爀愀猀栀攀猀℀℀℀"...
.rdata:000000B8
.bss:000000BC ; ===========================================================================
.bss:000000BC
.bss:000000BC ; Segment type: Uninitialized
.bss:000000BC ; Segment permissions: Read/Write
.bss:000000BC _bss            segment dword public 'BSS' use32
.bss:000000BC                 assume cs:_bss
.bss:000000BC                 ;org 0BCh
.bss:000000BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000000BC                 public ?staticThis@FileDialog@@0PAV1@A
.bss:000000BC ; LONG FileDialog::staticThis
.bss:000000BC ?staticThis@FileDialog@@0PAV1@A dd ?    ; DATA XREF: FileDialog::FileDialog(HWND__ *,HINSTANCE__ *)+72w
.bss:000000BC                                         ; FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+2Dr
.bss:000000C0 ; HWND hFileDlg
.bss:000000C0 _hFileDlg       dd ?                    ; DATA XREF: FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+4Aw
.bss:000000C0                                         ; FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+4Fr ...
.bss:000000C4 _oldProc        dd ?                    ; DATA XREF: FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+9Dw
.bss:000000C4                                         ; FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+A2r ...
.bss:000000C8 _allocator_arg  db    ? ;
.bss:000000C9 _piecewise_construct db    ? ;
.bss:000000CA                 db    ? ;
.bss:000000CB                 db    ? ;
.bss:000000CC _currentExt     db    ? ;               ; DATA XREF: FileDialog::run(HWND__ *,uint,uint,long)+FDo
.bss:000000CC                                         ; FileDialog::run(HWND__ *,uint,uint,long)+17Co ...
.bss:000000CD                 db    ? ;
.bss:000000CE                 db    ? ;
.bss:000000CF                 db    ? ;
.bss:000000D0                 db    ? ;
.bss:000000D1                 db    ? ;
.bss:000000D2                 db    ? ;
.bss:000000D3                 db    ? ;
.bss:000000D4                 db    ? ;
.bss:000000D5                 db    ? ;
.bss:000000D6                 db    ? ;
.bss:000000D7                 db    ? ;
.bss:000000D8                 db    ? ;
.bss:000000D9                 db    ? ;
.bss:000000DA                 db    ? ;
.bss:000000DB                 db    ? ;
.bss:000000DC                 db    ? ;
.bss:000000DD                 db    ? ;
.bss:000000DE                 db    ? ;
.bss:000000DF                 db    ? ;
.bss:000000E0                 db    ? ;
.bss:000000E1                 db    ? ;
.bss:000000E2                 db    ? ;
.bss:000000E3                 db    ? ;
.bss:000000E4                 db    ? ;
.bss:000000E5                 db    ? ;
.bss:000000E6                 db    ? ;
.bss:000000E7                 db    ? ;
.bss:000000E7 _bss            ends
.bss:000000E7
.text$mn:000000E8 ; ===========================================================================
.text$mn:000000E8
.text$mn:000000E8 ; Segment type: Pure code
.text$mn:000000E8 ; Segment permissions: Read/Execute
.text$mn:000000E8 _text$mn        segment para public 'CODE' use32
.text$mn:000000E8                 assume cs:_text$mn
.text$mn:000000E8                 ;org 0E8h
.text$mn:000000E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000000E8
.text$mn:000000E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000000E8
.text$mn:000000E8 ; Attributes: bp-based frame
.text$mn:000000E8
.text$mn:000000E8 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __cdecl changeExt(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, bool)
.text$mn:000000E8                 public ?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z
.text$mn:000000E8 ?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z proc near
.text$mn:000000E8                                         ; CODE XREF: fileDlgProc(HWND__ *,uint,uint,long)+171p
.text$mn:000000E8                                         ; addExt(HWND__ *,HWND__ *)+16Ap
.text$mn:000000E8
.text$mn:000000E8 var_58          = dword ptr -58h
.text$mn:000000E8 var_54          = dword ptr -54h
.text$mn:000000E8 var_50          = dword ptr -50h
.text$mn:000000E8 var_4C          = dword ptr -4Ch
.text$mn:000000E8 var_48          = byte ptr -48h
.text$mn:000000E8 var_2C          = byte ptr -2Ch
.text$mn:000000E8 var_10          = dword ptr -10h
.text$mn:000000E8 var_C           = dword ptr -0Ch
.text$mn:000000E8 var_4           = dword ptr -4
.text$mn:000000E8 arg_0           = dword ptr  8
.text$mn:000000E8 arg_4           = byte ptr  0Ch
.text$mn:000000E8 arg_20          = dword ptr  28h
.text$mn:000000E8 arg_3C          = byte ptr  44h
.text$mn:000000E8
.text$mn:000000E8                 push    ebp
.text$mn:000000E9                 mov     ebp, esp
.text$mn:000000EB                 push    0FFFFFFFFh
.text$mn:000000ED                 push    offset __ehhandler$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z
.text$mn:000000F2                 mov     eax, large fs:0
.text$mn:000000F8                 push    eax
.text$mn:000000F9                 sub     esp, 4Ch
.text$mn:000000FC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000101                 xor     eax, ebp
.text$mn:00000103                 mov     [ebp+var_10], eax
.text$mn:00000106                 push    esi
.text$mn:00000107                 push    eax
.text$mn:00000108                 lea     eax, [ebp+var_C]
.text$mn:0000010B                 mov     large fs:0, eax
.text$mn:00000111                 mov     [ebp+var_4C], 0
.text$mn:00000118                 mov     [ebp+var_4], 2
.text$mn:0000011F                 push    offset $SG125142 ; Str
.text$mn:00000124                 lea     eax, [ebp+arg_20]
.text$mn:00000127                 push    eax             ; int
.text$mn:00000128                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:0000012D                 add     esp, 8
.text$mn:00000130                 movzx   ecx, al
.text$mn:00000133                 test    ecx, ecx
.text$mn:00000135                 jz      short loc_16C
.text$mn:00000137                 lea     edx, [ebp+arg_4]
.text$mn:0000013A                 push    edx
.text$mn:0000013B                 mov     ecx, [ebp+arg_0]
.text$mn:0000013E                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00000143                 mov     eax, [ebp+var_4C]
.text$mn:00000146                 or      eax, 1
.text$mn:00000149                 mov     [ebp+var_4C], eax
.text$mn:0000014C                 mov     byte ptr [ebp+var_4], 1
.text$mn:00000150                 lea     ecx, [ebp+arg_4]
.text$mn:00000153                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00000158                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000015C                 lea     ecx, [ebp+arg_20]
.text$mn:0000015F                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00000164                 mov     eax, [ebp+arg_0]
.text$mn:00000167                 jmp     loc_26D
.text$mn:0000016C ; ---------------------------------------------------------------------------
.text$mn:0000016C
.text$mn:0000016C loc_16C:                                ; CODE XREF: changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+4Dj
.text$mn:0000016C                 lea     ecx, [ebp+arg_4]
.text$mn:0000016F                 push    ecx
.text$mn:00000170                 lea     ecx, [ebp+var_2C]
.text$mn:00000173                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00000178                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000017C                 mov     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00000182                 push    edx             ; int
.text$mn:00000183                 push    offset $SG125145 ; Str
.text$mn:00000188                 lea     ecx, [ebp+var_2C]
.text$mn:0000018B                 call    ?find_last_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find_last_of(wchar_t const *,uint)
.text$mn:00000190                 mov     [ebp+var_50], eax
.text$mn:00000193                 push    offset $SG125147 ; Str
.text$mn:00000198                 lea     ecx, [ebp+var_48]
.text$mn:0000019B                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000001A0                 mov     byte ptr [ebp+var_4], 4
.text$mn:000001A4                 lea     eax, [ebp+arg_20]
.text$mn:000001A7                 push    eax
.text$mn:000001A8                 lea     ecx, [ebp+var_48]
.text$mn:000001AB                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000001B0                 mov     ecx, [ebp+var_50]
.text$mn:000001B3                 cmp     ecx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:000001B9                 jnz     short loc_1C9
.text$mn:000001BB                 lea     edx, [ebp+var_48]
.text$mn:000001BE                 push    edx
.text$mn:000001BF                 lea     ecx, [ebp+var_2C]
.text$mn:000001C2                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000001C7                 jmp     short loc_225
.text$mn:000001C9 ; ---------------------------------------------------------------------------
.text$mn:000001C9
.text$mn:000001C9 loc_1C9:                                ; CODE XREF: changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+D1j
.text$mn:000001C9                 movzx   eax, [ebp+arg_3C]
.text$mn:000001CD                 test    eax, eax
.text$mn:000001CF                 jz      short loc_225
.text$mn:000001D1                 lea     ecx, [ebp+var_48]
.text$mn:000001D4                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:000001D9                 mov     esi, eax
.text$mn:000001DB                 lea     ecx, [ebp+var_2C]
.text$mn:000001DE                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:000001E3                 sub     eax, [ebp+var_50]
.text$mn:000001E6                 add     eax, 1
.text$mn:000001E9                 cmp     esi, eax
.text$mn:000001EB                 jbe     short loc_1FA
.text$mn:000001ED                 lea     ecx, [ebp+var_48]
.text$mn:000001F0                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:000001F5                 mov     [ebp+var_54], eax
.text$mn:000001F8                 jmp     short loc_20B
.text$mn:000001FA ; ---------------------------------------------------------------------------
.text$mn:000001FA
.text$mn:000001FA loc_1FA:                                ; CODE XREF: changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+103j
.text$mn:000001FA                 lea     ecx, [ebp+var_2C]
.text$mn:000001FD                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00000202                 sub     eax, [ebp+var_50]
.text$mn:00000205                 add     eax, 1
.text$mn:00000208                 mov     [ebp+var_54], eax
.text$mn:0000020B
.text$mn:0000020B loc_20B:                                ; CODE XREF: changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+110j
.text$mn:0000020B                 mov     ecx, [ebp+var_54]
.text$mn:0000020E                 mov     [ebp+var_58], ecx
.text$mn:00000211                 lea     edx, [ebp+var_48]
.text$mn:00000214                 push    edx
.text$mn:00000215                 mov     eax, [ebp+var_58]
.text$mn:00000218                 push    eax
.text$mn:00000219                 mov     ecx, [ebp+var_50]
.text$mn:0000021C                 push    ecx
.text$mn:0000021D                 lea     ecx, [ebp+var_2C]
.text$mn:00000220                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00000225
.text$mn:00000225 loc_225:                                ; CODE XREF: changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+DFj
.text$mn:00000225                                         ; changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+E7j
.text$mn:00000225                 lea     edx, [ebp+var_2C]
.text$mn:00000228                 push    edx
.text$mn:00000229                 mov     ecx, [ebp+arg_0]
.text$mn:0000022C                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00000231                 mov     eax, [ebp+var_4C]
.text$mn:00000234                 or      eax, 1
.text$mn:00000237                 mov     [ebp+var_4C], eax
.text$mn:0000023A                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000023E                 lea     ecx, [ebp+var_48]
.text$mn:00000241                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00000246                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000024A                 lea     ecx, [ebp+var_2C]
.text$mn:0000024D                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00000252                 mov     byte ptr [ebp+var_4], 1
.text$mn:00000256                 lea     ecx, [ebp+arg_4]
.text$mn:00000259                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000025E                 mov     byte ptr [ebp+var_4], 0
.text$mn:00000262                 lea     ecx, [ebp+arg_20]
.text$mn:00000265                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000026A                 mov     eax, [ebp+arg_0]
.text$mn:0000026D
.text$mn:0000026D loc_26D:                                ; CODE XREF: changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+7Fj
.text$mn:0000026D                 mov     ecx, [ebp+var_C]
.text$mn:00000270                 mov     large fs:0, ecx
.text$mn:00000277                 pop     ecx
.text$mn:00000278                 pop     esi
.text$mn:00000279                 mov     ecx, [ebp+var_10]
.text$mn:0000027C                 xor     ecx, ebp
.text$mn:0000027E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00000283                 mov     esp, ebp
.text$mn:00000285                 pop     ebp
.text$mn:00000286                 retn
.text$mn:00000286 ?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z endp
.text$mn:00000286
.text$mn:00000286 ; ---------------------------------------------------------------------------
.text$mn:00000287                 align 4
.text$mn:00000288
.text$mn:00000288 ; =============== S U B R O U T I N E =======================================
.text$mn:00000288
.text$mn:00000288 ; Attributes: bp-based frame
.text$mn:00000288
.text$mn:00000288 ; void __cdecl goToCenter(HWND hWnd)
.text$mn:00000288                 public ?goToCenter@@YAXPAUHWND__@@@Z
.text$mn:00000288 ?goToCenter@@YAXPAUHWND__@@@Z proc near ; CODE XREF: FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+56p
.text$mn:00000288
.text$mn:00000288 Y               = dword ptr -38h
.text$mn:00000288 X               = dword ptr -34h
.text$mn:00000288 Point           = tagPOINT ptr -30h
.text$mn:00000288 var_28          = dword ptr -28h
.text$mn:00000288 var_24          = tagRECT ptr -24h
.text$mn:00000288 Rect            = tagRECT ptr -14h
.text$mn:00000288 var_4           = dword ptr -4
.text$mn:00000288 hWnd            = dword ptr  8
.text$mn:00000288
.text$mn:00000288                 push    ebp
.text$mn:00000289                 mov     ebp, esp
.text$mn:0000028B                 sub     esp, 38h
.text$mn:0000028E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000293                 xor     eax, ebp
.text$mn:00000295                 mov     [ebp+var_4], eax
.text$mn:00000298                 mov     eax, [ebp+hWnd]
.text$mn:0000029B                 push    eax             ; hWnd
.text$mn:0000029C                 call    dword ptr ds:__imp__GetParent@4 ; GetParent(x)
.text$mn:000002A2                 mov     [ebp+var_28], eax
.text$mn:000002A5                 lea     ecx, [ebp+Rect]
.text$mn:000002A8                 push    ecx             ; lpRect
.text$mn:000002A9                 mov     edx, [ebp+var_28]
.text$mn:000002AC                 push    edx             ; hWnd
.text$mn:000002AD                 call    dword ptr ds:__imp__GetClientRect@8 ; GetClientRect(x,x)
.text$mn:000002B3                 cmp     [ebp+Rect.left], 0
.text$mn:000002B7                 jnz     short loc_2E5
.text$mn:000002B9                 cmp     [ebp+Rect.right], 0
.text$mn:000002BD                 jnz     short loc_2E5
.text$mn:000002BF                 cmp     [ebp+Rect.top], 0
.text$mn:000002C3                 jnz     short loc_2E5
.text$mn:000002C5                 cmp     [ebp+Rect.bottom], 0
.text$mn:000002C9                 jnz     short loc_2E5
.text$mn:000002CB                 push    1               ; nCmdShow
.text$mn:000002CD                 mov     eax, [ebp+var_28]
.text$mn:000002D0                 push    eax             ; hWnd
.text$mn:000002D1                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:000002D7                 lea     ecx, [ebp+Rect]
.text$mn:000002DA                 push    ecx             ; lpRect
.text$mn:000002DB                 mov     edx, [ebp+var_28]
.text$mn:000002DE                 push    edx             ; hWnd
.text$mn:000002DF                 call    dword ptr ds:__imp__GetClientRect@8 ; GetClientRect(x,x)
.text$mn:000002E5
.text$mn:000002E5 loc_2E5:                                ; CODE XREF: goToCenter(HWND__ *)+2Fj
.text$mn:000002E5                                         ; goToCenter(HWND__ *)+35j ...
.text$mn:000002E5                 mov     eax, [ebp+Rect.right]
.text$mn:000002E8                 sub     eax, [ebp+Rect.left]
.text$mn:000002EB                 cdq
.text$mn:000002EC                 sub     eax, edx
.text$mn:000002EE                 sar     eax, 1
.text$mn:000002F0                 add     eax, [ebp+Rect.left]
.text$mn:000002F3                 mov     [ebp+Point.x], eax
.text$mn:000002F6                 mov     eax, [ebp+Rect.bottom]
.text$mn:000002F9                 sub     eax, [ebp+Rect.top]
.text$mn:000002FC                 cdq
.text$mn:000002FD                 sub     eax, edx
.text$mn:000002FF                 sar     eax, 1
.text$mn:00000301                 add     eax, [ebp+Rect.top]
.text$mn:00000304                 mov     [ebp+Point.y], eax
.text$mn:00000307                 lea     eax, [ebp+Point]
.text$mn:0000030A                 push    eax             ; lpPoint
.text$mn:0000030B                 mov     ecx, [ebp+var_28]
.text$mn:0000030E                 push    ecx             ; hWnd
.text$mn:0000030F                 call    dword ptr ds:__imp__ClientToScreen@8 ; ClientToScreen(x,x)
.text$mn:00000315                 lea     edx, [ebp+var_24]
.text$mn:00000318                 push    edx             ; lpRect
.text$mn:00000319                 mov     eax, [ebp+hWnd]
.text$mn:0000031C                 push    eax             ; hWnd
.text$mn:0000031D                 call    dword ptr ds:__imp__GetWindowRect@8 ; GetWindowRect(x,x)
.text$mn:00000323                 mov     eax, [ebp+var_24.right]
.text$mn:00000326                 sub     eax, [ebp+var_24.left]
.text$mn:00000329                 cdq
.text$mn:0000032A                 sub     eax, edx
.text$mn:0000032C                 sar     eax, 1
.text$mn:0000032E                 mov     ecx, [ebp+Point.x]
.text$mn:00000331                 sub     ecx, eax
.text$mn:00000333                 mov     [ebp+X], ecx
.text$mn:00000336                 mov     eax, [ebp+var_24.bottom]
.text$mn:00000339                 sub     eax, [ebp+var_24.top]
.text$mn:0000033C                 cdq
.text$mn:0000033D                 sub     eax, edx
.text$mn:0000033F                 sar     eax, 1
.text$mn:00000341                 mov     edx, [ebp+Point.y]
.text$mn:00000344                 sub     edx, eax
.text$mn:00000346                 mov     [ebp+Y], edx
.text$mn:00000349                 push    40h ; '@'       ; uFlags
.text$mn:0000034B                 mov     eax, [ebp+var_24.bottom]
.text$mn:0000034E                 sub     eax, [ebp+var_24.top]
.text$mn:00000351                 push    eax             ; cy
.text$mn:00000352                 mov     ecx, [ebp+var_24.right]
.text$mn:00000355                 sub     ecx, [ebp+var_24.left]
.text$mn:00000358                 push    ecx             ; cx
.text$mn:00000359                 mov     edx, [ebp+Y]
.text$mn:0000035C                 push    edx             ; Y
.text$mn:0000035D                 mov     eax, [ebp+X]
.text$mn:00000360                 push    eax             ; X
.text$mn:00000361                 push    0               ; hWndInsertAfter
.text$mn:00000363                 mov     ecx, [ebp+hWnd]
.text$mn:00000366                 push    ecx             ; hWnd
.text$mn:00000367                 call    dword ptr ds:__imp__SetWindowPos@28 ; SetWindowPos(x,x,x,x,x,x,x)
.text$mn:0000036D                 mov     ecx, [ebp+var_4]
.text$mn:00000370                 xor     ecx, ebp
.text$mn:00000372                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00000377                 mov     esp, ebp
.text$mn:00000379                 pop     ebp
.text$mn:0000037A                 retn
.text$mn:0000037A ?goToCenter@@YAXPAUHWND__@@@Z endp
.text$mn:0000037A
.text$mn:0000037A ; ---------------------------------------------------------------------------
.text$mn:0000037B                 db 0Dh dup(0CCh)
.text$mn:00000388
.text$mn:00000388 ; =============== S U B R O U T I N E =======================================
.text$mn:00000388
.text$mn:00000388 ; Attributes: bp-based frame
.text$mn:00000388
.text$mn:00000388 ; public: __thiscall FileDialog::FileDialog(struct HWND__ *, struct HINSTANCE__ *)
.text$mn:00000388                 public ??0FileDialog@@QAE@PAUHWND__@@PAUHINSTANCE__@@@Z
.text$mn:00000388 ??0FileDialog@@QAE@PAUHWND__@@PAUHINSTANCE__@@@Z proc near
.text$mn:00000388
.text$mn:00000388 var_10          = dword ptr -10h
.text$mn:00000388 var_C           = dword ptr -0Ch
.text$mn:00000388 var_4           = dword ptr -4
.text$mn:00000388 arg_0           = dword ptr  8
.text$mn:00000388 arg_4           = dword ptr  0Ch
.text$mn:00000388
.text$mn:00000388                 push    ebp
.text$mn:00000389                 mov     ebp, esp
.text$mn:0000038B                 push    0FFFFFFFFh
.text$mn:0000038D                 push    offset __ehhandler$??0FileDialog@@QAE@PAUHWND__@@PAUHINSTANCE__@@@Z
.text$mn:00000392                 mov     eax, large fs:0
.text$mn:00000398                 push    eax
.text$mn:00000399                 push    ecx
.text$mn:0000039A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000039F                 xor     eax, ebp
.text$mn:000003A1                 push    eax
.text$mn:000003A2                 lea     eax, [ebp+var_C]
.text$mn:000003A5                 mov     large fs:0, eax
.text$mn:000003AB                 mov     [ebp+var_10], ecx
.text$mn:000003AE                 mov     eax, [ebp+var_10]
.text$mn:000003B1                 mov     dword ptr [eax+1040h], 0
.text$mn:000003BB                 mov     ecx, [ebp+var_10]
.text$mn:000003BE                 mov     dword ptr [ecx+1044h], 0
.text$mn:000003C8                 mov     ecx, [ebp+var_10]
.text$mn:000003CB                 add     ecx, 1048h
.text$mn:000003D1                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:000003D6                 mov     [ebp+var_4], 0
.text$mn:000003DD                 mov     edx, [ebp+var_10]
.text$mn:000003E0                 mov     dword ptr [edx+10B4h], 0
.text$mn:000003EA                 mov     eax, [ebp+var_10]
.text$mn:000003ED                 mov     dword ptr [eax+10B8h], 0FFFFFFFFh
.text$mn:000003F7                 mov     ecx, [ebp+var_10]
.text$mn:000003FA                 mov     ds:?staticThis@FileDialog@@0PAV1@A, ecx ; FileDialog * FileDialog::staticThis
.text$mn:00000400                 mov     edx, 2
.text$mn:00000405                 imul    eax, edx, 0
.text$mn:00000408                 xor     ecx, ecx
.text$mn:0000040A                 mov     edx, [ebp+var_10]
.text$mn:0000040D                 mov     [edx+eax], cx
.text$mn:00000411                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00000416                 mov     ecx, eax
.text$mn:00000418                 call    ?getWinVersion@NppParameters@@QAE?AW4winVer@@XZ ; NppParameters::getWinVersion(void)
.text$mn:0000041D                 mov     ecx, [ebp+var_10]
.text$mn:00000420                 mov     [ecx+10B0h], eax
.text$mn:00000426                 mov     edx, [ebp+var_10]
.text$mn:00000429                 mov     dword ptr [edx+1058h], 58h ; 'X'
.text$mn:00000433                 mov     eax, [ebp+var_10]
.text$mn:00000436                 cmp     dword ptr [eax+10B0h], 6
.text$mn:0000043D                 jge     short loc_44C
.text$mn:0000043F                 mov     ecx, [ebp+var_10]
.text$mn:00000442                 mov     dword ptr [ecx+1058h], 58h ; 'X'
.text$mn:0000044C
.text$mn:0000044C loc_44C:                                ; CODE XREF: FileDialog::FileDialog(HWND__ *,HINSTANCE__ *)+B5j
.text$mn:0000044C                 mov     edx, [ebp+var_10]
.text$mn:0000044F                 mov     eax, [ebp+arg_0]
.text$mn:00000452                 mov     [edx+105Ch], eax
.text$mn:00000458                 mov     ecx, [ebp+var_10]
.text$mn:0000045B                 mov     edx, [ebp+arg_4]
.text$mn:0000045E                 mov     [ecx+1060h], edx
.text$mn:00000464                 mov     eax, [ebp+var_10]
.text$mn:00000467                 mov     dword ptr [eax+1068h], 0
.text$mn:00000471                 mov     ecx, [ebp+var_10]
.text$mn:00000474                 mov     dword ptr [ecx+106Ch], 0
.text$mn:0000047E                 mov     edx, [ebp+var_10]
.text$mn:00000481                 mov     dword ptr [edx+1070h], 1
.text$mn:0000048B                 mov     eax, [ebp+var_10]
.text$mn:0000048E                 mov     ecx, [ebp+var_10]
.text$mn:00000491                 mov     [ecx+1074h], eax
.text$mn:00000497                 mov     edx, [ebp+var_10]
.text$mn:0000049A                 mov     dword ptr [edx+1078h], 820h
.text$mn:000004A4                 mov     eax, [ebp+var_10]
.text$mn:000004A7                 mov     dword ptr [eax+107Ch], 0
.text$mn:000004B1                 mov     ecx, [ebp+var_10]
.text$mn:000004B4                 mov     dword ptr [ecx+1080h], 0
.text$mn:000004BE                 mov     edx, [ebp+var_10]
.text$mn:000004C1                 mov     dword ptr [edx+1084h], 0
.text$mn:000004CB                 mov     eax, [ebp+var_10]
.text$mn:000004CE                 mov     dword ptr [eax+1088h], 0
.text$mn:000004D8                 xor     ecx, ecx
.text$mn:000004DA                 mov     edx, [ebp+var_10]
.text$mn:000004DD                 mov     [edx+1090h], cx
.text$mn:000004E4                 xor     eax, eax
.text$mn:000004E6                 mov     ecx, [ebp+var_10]
.text$mn:000004E9                 mov     [ecx+1092h], ax
.text$mn:000004F0                 mov     edx, [ebp+var_10]
.text$mn:000004F3                 mov     dword ptr [edx+109Ch], 0
.text$mn:000004FD                 mov     eax, [ebp+var_10]
.text$mn:00000500                 mov     dword ptr [eax+1094h], 0
.text$mn:0000050A                 mov     ecx, [ebp+var_10]
.text$mn:0000050D                 mov     dword ptr [ecx+1098h], 0
.text$mn:00000517                 mov     edx, [ebp+var_10]
.text$mn:0000051A                 mov     dword ptr [edx+108Ch], 280804h
.text$mn:00000524                 mov     eax, [ebp+var_10]
.text$mn:00000527                 mov     dword ptr [eax+10A4h], 0
.text$mn:00000531                 mov     ecx, [ebp+var_10]
.text$mn:00000534                 mov     dword ptr [ecx+10A8h], 0
.text$mn:0000053E                 mov     edx, [ebp+var_10]
.text$mn:00000541                 mov     dword ptr [edx+10ACh], 0
.text$mn:0000054B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000552                 mov     eax, [ebp+var_10]
.text$mn:00000555                 mov     ecx, [ebp+var_C]
.text$mn:00000558                 mov     large fs:0, ecx
.text$mn:0000055F                 pop     ecx
.text$mn:00000560                 mov     esp, ebp
.text$mn:00000562                 pop     ebp
.text$mn:00000563                 retn    8
.text$mn:00000563 ??0FileDialog@@QAE@PAUHWND__@@PAUHINSTANCE__@@@Z endp
.text$mn:00000563
.text$mn:00000563 ; ---------------------------------------------------------------------------
.text$mn:00000566                 align 4
.text$mn:00000568
.text$mn:00000568 ; =============== S U B R O U T I N E =======================================
.text$mn:00000568
.text$mn:00000568 ; Attributes: bp-based frame
.text$mn:00000568
.text$mn:00000568 ; _DWORD __thiscall FileDialog::~FileDialog(FileDialog *__hidden this)
.text$mn:00000568                 public ??1FileDialog@@QAE@XZ
.text$mn:00000568 ??1FileDialog@@QAE@XZ proc near
.text$mn:00000568
.text$mn:00000568 var_14          = dword ptr -14h
.text$mn:00000568 var_10          = dword ptr -10h
.text$mn:00000568 var_C           = dword ptr -0Ch
.text$mn:00000568 var_4           = dword ptr -4
.text$mn:00000568
.text$mn:00000568                 push    ebp
.text$mn:00000569                 mov     ebp, esp
.text$mn:0000056B                 push    0FFFFFFFFh
.text$mn:0000056D                 push    offset __ehhandler$??1FileDialog@@QAE@XZ
.text$mn:00000572                 mov     eax, large fs:0
.text$mn:00000578                 push    eax
.text$mn:00000579                 sub     esp, 8
.text$mn:0000057C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000581                 xor     eax, ebp
.text$mn:00000583                 push    eax
.text$mn:00000584                 lea     eax, [ebp+var_C]
.text$mn:00000587                 mov     large fs:0, eax
.text$mn:0000058D                 mov     [ebp+var_10], ecx
.text$mn:00000590                 mov     [ebp+var_4], 0
.text$mn:00000597                 mov     eax, [ebp+var_10]
.text$mn:0000059A                 cmp     dword ptr [eax+1040h], 0
.text$mn:000005A1                 jz      short loc_5C8
.text$mn:000005A3                 mov     ecx, [ebp+var_10]
.text$mn:000005A6                 mov     edx, [ecx+1040h]
.text$mn:000005AC                 mov     [ebp+var_14], edx
.text$mn:000005AF                 mov     eax, [ebp+var_14]
.text$mn:000005B2                 push    eax             ; void *
.text$mn:000005B3                 call    ??_V@YAXPAX@Z   ; operator delete[](void *)
.text$mn:000005B8                 add     esp, 4
.text$mn:000005BB                 mov     ecx, [ebp+var_10]
.text$mn:000005BE                 mov     dword ptr [ecx+1040h], 0
.text$mn:000005C8
.text$mn:000005C8 loc_5C8:                                ; CODE XREF: FileDialog::~FileDialog(void)+39j
.text$mn:000005C8                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000005CF                 mov     ecx, [ebp+var_10]
.text$mn:000005D2                 add     ecx, 1048h
.text$mn:000005D8                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:000005DD                 mov     ecx, [ebp+var_C]
.text$mn:000005E0                 mov     large fs:0, ecx
.text$mn:000005E7                 pop     ecx
.text$mn:000005E8                 mov     esp, ebp
.text$mn:000005EA                 pop     ebp
.text$mn:000005EB                 retn
.text$mn:000005EB ??1FileDialog@@QAE@XZ endp
.text$mn:000005EB
.text$mn:000005EB ; ---------------------------------------------------------------------------
.text$mn:000005EC                 db 0Ch dup(0CCh)
.text$mn:000005F8
.text$mn:000005F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000005F8
.text$mn:000005F8 ; Attributes: bp-based frame
.text$mn:000005F8
.text$mn:000005F8 ; void FileDialog::setExtFilter(FileDialog *this, const wchar_t *, const wchar_t *, ...)
.text$mn:000005F8                 public ?setExtFilter@FileDialog@@QAAXPB_W0ZZ
.text$mn:000005F8 ?setExtFilter@FileDialog@@QAAXPB_W0ZZ proc near
.text$mn:000005F8
.text$mn:000005F8 var_58          = dword ptr -58h
.text$mn:000005F8 var_54          = dword ptr -54h
.text$mn:000005F8 Str             = dword ptr -50h
.text$mn:000005F8 var_4C          = dword ptr -4Ch
.text$mn:000005F8 var_48          = byte ptr -48h
.text$mn:000005F8 var_2C          = byte ptr -2Ch
.text$mn:000005F8 var_10          = dword ptr -10h
.text$mn:000005F8 var_C           = dword ptr -0Ch
.text$mn:000005F8 var_4           = dword ptr -4
.text$mn:000005F8 this            = dword ptr  8
.text$mn:000005F8 arg_4           = dword ptr  0Ch
.text$mn:000005F8 arg_8           = dword ptr  10h
.text$mn:000005F8 arg_C           = byte ptr  14h
.text$mn:000005F8
.text$mn:000005F8                 push    ebp
.text$mn:000005F9                 mov     ebp, esp
.text$mn:000005FB                 push    0FFFFFFFFh
.text$mn:000005FD                 push    offset __ehhandler$?setExtFilter@FileDialog@@QAAXPB_W0ZZ
.text$mn:00000602                 mov     eax, large fs:0
.text$mn:00000608                 push    eax
.text$mn:00000609                 sub     esp, 4Ch
.text$mn:0000060C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000611                 xor     eax, ebp
.text$mn:00000613                 mov     [ebp+var_10], eax
.text$mn:00000616                 push    eax
.text$mn:00000617                 lea     eax, [ebp+var_C]
.text$mn:0000061A                 mov     large fs:0, eax
.text$mn:00000620                 lea     ecx, [ebp+var_2C]
.text$mn:00000623                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00000628                 mov     [ebp+var_4], 0
.text$mn:0000062F                 lea     eax, [ebp+arg_C]
.text$mn:00000632                 mov     [ebp+var_4C], eax
.text$mn:00000635                 mov     ecx, [ebp+arg_8]
.text$mn:00000638                 mov     [ebp+Str], ecx
.text$mn:0000063B
.text$mn:0000063B loc_63B:                                ; CODE XREF: FileDialog::setExtFilter(wchar_t const *,wchar_t const *,...)+93j
.text$mn:0000063B                 mov     edx, 2
.text$mn:00000640                 imul    eax, edx, 0
.text$mn:00000643                 mov     ecx, [ebp+Str]
.text$mn:00000646                 movzx   edx, word ptr [ecx+eax]
.text$mn:0000064A                 cmp     edx, 2Eh ; '.'
.text$mn:0000064D                 jnz     short loc_65C
.text$mn:0000064F                 push    offset $SG124884 ; Str
.text$mn:00000654                 lea     ecx, [ebp+var_2C]
.text$mn:00000657                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:0000065C
.text$mn:0000065C loc_65C:                                ; CODE XREF: FileDialog::setExtFilter(wchar_t const *,wchar_t const *,...)+55j
.text$mn:0000065C                 mov     eax, [ebp+Str]
.text$mn:0000065F                 push    eax             ; Str
.text$mn:00000660                 lea     ecx, [ebp+var_2C]
.text$mn:00000663                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00000668                 push    offset $SG124885 ; Str
.text$mn:0000066D                 lea     ecx, [ebp+var_2C]
.text$mn:00000670                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00000675                 mov     ecx, [ebp+var_4C]
.text$mn:00000678                 add     ecx, 4
.text$mn:0000067B                 mov     [ebp+var_4C], ecx
.text$mn:0000067E                 mov     edx, [ebp+var_4C]
.text$mn:00000681                 mov     eax, [edx-4]
.text$mn:00000684                 mov     [ebp+Str], eax
.text$mn:00000687                 cmp     [ebp+Str], 0
.text$mn:0000068B                 jnz     short loc_63B
.text$mn:0000068D                 mov     [ebp+var_4C], 0
.text$mn:00000694                 lea     ecx, [ebp+var_2C]
.text$mn:00000697                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:0000069C                 sub     eax, 1
.text$mn:0000069F                 push    eax
.text$mn:000006A0                 push    0
.text$mn:000006A2                 lea     ecx, [ebp+var_48]
.text$mn:000006A5                 push    ecx
.text$mn:000006A6                 lea     ecx, [ebp+var_2C]
.text$mn:000006A9                 call    ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::substr(uint,uint)
.text$mn:000006AE                 mov     [ebp+var_54], eax
.text$mn:000006B1                 mov     edx, [ebp+var_54]
.text$mn:000006B4                 mov     [ebp+var_58], edx
.text$mn:000006B7                 mov     byte ptr [ebp+var_4], 1
.text$mn:000006BB                 mov     eax, [ebp+var_58]
.text$mn:000006BE                 push    eax
.text$mn:000006BF                 lea     ecx, [ebp+var_2C]
.text$mn:000006C2                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:000006C7                 mov     byte ptr [ebp+var_4], 0
.text$mn:000006CB                 lea     ecx, [ebp+var_48]
.text$mn:000006CE                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000006D3                 lea     ecx, [ebp+var_2C]
.text$mn:000006D6                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000006DB                 push    eax             ; wchar_t *
.text$mn:000006DC                 mov     ecx, [ebp+arg_4]
.text$mn:000006DF                 push    ecx             ; Str
.text$mn:000006E0                 mov     ecx, [ebp+this] ; this
.text$mn:000006E3                 call    ?setExtsFilter@FileDialog@@QAEHPB_W0@Z ; FileDialog::setExtsFilter(wchar_t const *,wchar_t const *)
.text$mn:000006E8                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000006EF                 lea     ecx, [ebp+var_2C]
.text$mn:000006F2                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000006F7                 mov     ecx, [ebp+var_C]
.text$mn:000006FA                 mov     large fs:0, ecx
.text$mn:00000701                 pop     ecx
.text$mn:00000702                 mov     ecx, [ebp+var_10]
.text$mn:00000705                 xor     ecx, ebp
.text$mn:00000707                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000070C                 mov     esp, ebp
.text$mn:0000070E                 pop     ebp
.text$mn:0000070F                 retn
.text$mn:0000070F ?setExtFilter@FileDialog@@QAAXPB_W0ZZ endp
.text$mn:0000070F
.text$mn:0000070F ; ---------------------------------------------------------------------------
.text$mn:00000710                 db 8 dup(0CCh)
.text$mn:00000718
.text$mn:00000718 ; =============== S U B R O U T I N E =======================================
.text$mn:00000718
.text$mn:00000718 ; Attributes: bp-based frame
.text$mn:00000718
.text$mn:00000718 ; int __thiscall FileDialog::setExtsFilter(FileDialog *this, const wchar_t *Str, const wchar_t *)
.text$mn:00000718                 public ?setExtsFilter@FileDialog@@QAEHPB_W0@Z
.text$mn:00000718 ?setExtsFilter@FileDialog@@QAEHPB_W0@Z proc near
.text$mn:00000718                                         ; CODE XREF: FileDialog::setExtFilter(wchar_t const *,wchar_t const *,...)+EBp
.text$mn:00000718
.text$mn:00000718 var_54          = dword ptr -54h
.text$mn:00000718 var_50          = dword ptr -50h
.text$mn:00000718 var_4C          = dword ptr -4Ch
.text$mn:00000718 var_48          = dword ptr -48h
.text$mn:00000718 var_44          = dword ptr -44h
.text$mn:00000718 var_40          = dword ptr -40h
.text$mn:00000718 var_3C          = dword ptr -3Ch
.text$mn:00000718 lpString1       = dword ptr -38h
.text$mn:00000718 Dst             = dword ptr -34h
.text$mn:00000718 var_30          = dword ptr -30h
.text$mn:00000718 var_2C          = byte ptr -2Ch
.text$mn:00000718 var_10          = dword ptr -10h
.text$mn:00000718 var_C           = dword ptr -0Ch
.text$mn:00000718 var_4           = dword ptr -4
.text$mn:00000718 Str             = dword ptr  8
.text$mn:00000718 lpString        = dword ptr  0Ch
.text$mn:00000718
.text$mn:00000718                 push    ebp
.text$mn:00000719                 mov     ebp, esp
.text$mn:0000071B                 push    0FFFFFFFFh
.text$mn:0000071D                 push    offset __ehhandler$?setExtsFilter@FileDialog@@QAEHPB_W0@Z
.text$mn:00000722                 mov     eax, large fs:0
.text$mn:00000728                 push    eax
.text$mn:00000729                 sub     esp, 48h
.text$mn:0000072C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000731                 xor     eax, ebp
.text$mn:00000733                 mov     [ebp+var_10], eax
.text$mn:00000736                 push    esi
.text$mn:00000737                 push    eax
.text$mn:00000738                 lea     eax, [ebp+var_C]
.text$mn:0000073B                 mov     large fs:0, eax
.text$mn:00000741                 mov     [ebp+var_30], ecx
.text$mn:00000744                 mov     eax, [ebp+Str]
.text$mn:00000747                 push    eax             ; Str
.text$mn:00000748                 lea     ecx, [ebp+var_2C]
.text$mn:0000074B                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00000750                 mov     [ebp+var_4], 0
.text$mn:00000757                 mov     [ebp+Dst], 0
.text$mn:0000075E                 push    offset $SG124902 ; " ("
.text$mn:00000763                 lea     ecx, [ebp+var_2C]
.text$mn:00000766                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:0000076B                 mov     ecx, [ebp+lpString]
.text$mn:0000076E                 push    ecx             ; Str
.text$mn:0000076F                 lea     ecx, [ebp+var_2C]
.text$mn:00000772                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00000777                 push    offset $SG124903 ; Str
.text$mn:0000077C                 lea     ecx, [ebp+var_2C]
.text$mn:0000077F                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00000784                 lea     ecx, [ebp+var_2C]
.text$mn:00000787                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:0000078C                 mov     esi, eax
.text$mn:0000078E                 mov     edx, [ebp+lpString]
.text$mn:00000791                 push    edx             ; lpString
.text$mn:00000792                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00000798                 lea     eax, [esi+eax+3]
.text$mn:0000079C                 mov     [ebp+var_48], eax
.text$mn:0000079F                 mov     ecx, [ebp+var_30]
.text$mn:000007A2                 cmp     dword ptr [ecx+1040h], 0
.text$mn:000007A9                 jz      short loc_81D
.text$mn:000007AB                 xor     ecx, ecx
.text$mn:000007AD                 mov     edx, [ebp+var_30]
.text$mn:000007B0                 mov     eax, [edx+1044h]
.text$mn:000007B6                 mov     edx, 2
.text$mn:000007BB                 mul     edx
.text$mn:000007BD                 seto    cl
.text$mn:000007C0                 neg     ecx
.text$mn:000007C2                 or      ecx, eax
.text$mn:000007C4                 push    ecx             ; unsigned int
.text$mn:000007C5                 call    ??_U@YAPAXI@Z   ; operator new[](uint)
.text$mn:000007CA                 add     esp, 4
.text$mn:000007CD                 mov     [ebp+var_54], eax
.text$mn:000007D0                 mov     eax, [ebp+var_54]
.text$mn:000007D3                 mov     [ebp+Dst], eax
.text$mn:000007D6                 mov     ecx, [ebp+var_30]
.text$mn:000007D9                 mov     edx, [ecx+1044h]
.text$mn:000007DF                 shl     edx, 1
.text$mn:000007E1                 push    edx             ; Size
.text$mn:000007E2                 mov     eax, [ebp+var_30]
.text$mn:000007E5                 mov     ecx, [eax+1040h]
.text$mn:000007EB                 push    ecx             ; Src
.text$mn:000007EC                 mov     edx, [ebp+Dst]
.text$mn:000007EF                 push    edx             ; Dst
.text$mn:000007F0                 call    _memcpy
.text$mn:000007F5                 add     esp, 0Ch
.text$mn:000007F8                 mov     eax, [ebp+var_30]
.text$mn:000007FB                 mov     ecx, [eax+1040h]
.text$mn:00000801                 mov     [ebp+var_40], ecx
.text$mn:00000804                 mov     edx, [ebp+var_40]
.text$mn:00000807                 push    edx             ; void *
.text$mn:00000808                 call    ??_V@YAXPAX@Z   ; operator delete[](void *)
.text$mn:0000080D                 add     esp, 4
.text$mn:00000810                 mov     eax, [ebp+var_30]
.text$mn:00000813                 mov     dword ptr [eax+1040h], 0
.text$mn:0000081D
.text$mn:0000081D loc_81D:                                ; CODE XREF: FileDialog::setExtsFilter(wchar_t const *,wchar_t const *)+91j
.text$mn:0000081D                 mov     ecx, [ebp+var_30]
.text$mn:00000820                 mov     edx, [ecx+1044h]
.text$mn:00000826                 add     edx, [ebp+var_48]
.text$mn:00000829                 mov     [ebp+var_3C], edx
.text$mn:0000082C                 xor     ecx, ecx
.text$mn:0000082E                 mov     eax, [ebp+var_3C]
.text$mn:00000831                 mov     edx, 2
.text$mn:00000836                 mul     edx
.text$mn:00000838                 seto    cl
.text$mn:0000083B                 neg     ecx
.text$mn:0000083D                 or      ecx, eax
.text$mn:0000083F                 push    ecx             ; unsigned int
.text$mn:00000840                 call    ??_U@YAPAXI@Z   ; operator new[](uint)
.text$mn:00000845                 add     esp, 4
.text$mn:00000848                 mov     [ebp+var_50], eax
.text$mn:0000084B                 mov     eax, [ebp+var_30]
.text$mn:0000084E                 mov     ecx, [ebp+var_50]
.text$mn:00000851                 mov     [eax+1040h], ecx
.text$mn:00000857                 mov     edx, [ebp+var_3C]
.text$mn:0000085A                 shl     edx, 1
.text$mn:0000085C                 push    edx             ; Size
.text$mn:0000085D                 push    0               ; Val
.text$mn:0000085F                 mov     eax, [ebp+var_30]
.text$mn:00000862                 mov     ecx, [eax+1040h]
.text$mn:00000868                 push    ecx             ; Dst
.text$mn:00000869                 call    _memset
.text$mn:0000086E                 add     esp, 0Ch
.text$mn:00000871                 cmp     [ebp+Dst], 0
.text$mn:00000875                 jz      short loc_8B2
.text$mn:00000877                 mov     edx, [ebp+var_30]
.text$mn:0000087A                 mov     eax, [edx+1044h]
.text$mn:00000880                 shl     eax, 1
.text$mn:00000882                 push    eax             ; Size
.text$mn:00000883                 mov     ecx, [ebp+Dst]
.text$mn:00000886                 push    ecx             ; Src
.text$mn:00000887                 mov     edx, [ebp+var_30]
.text$mn:0000088A                 mov     eax, [edx+1040h]
.text$mn:00000890                 push    eax             ; Dst
.text$mn:00000891                 call    _memcpy
.text$mn:00000896                 add     esp, 0Ch
.text$mn:00000899                 mov     ecx, [ebp+Dst]
.text$mn:0000089C                 mov     [ebp+var_44], ecx
.text$mn:0000089F                 mov     edx, [ebp+var_44]
.text$mn:000008A2                 push    edx             ; void *
.text$mn:000008A3                 call    ??_V@YAXPAX@Z   ; operator delete[](void *)
.text$mn:000008A8                 add     esp, 4
.text$mn:000008AB                 mov     [ebp+Dst], 0
.text$mn:000008B2
.text$mn:000008B2 loc_8B2:                                ; CODE XREF: FileDialog::setExtsFilter(wchar_t const *,wchar_t const *)+15Dj
.text$mn:000008B2                 mov     eax, [ebp+var_30]
.text$mn:000008B5                 mov     ecx, [eax+1044h]
.text$mn:000008BB                 mov     edx, [ebp+var_30]
.text$mn:000008BE                 mov     eax, [edx+1040h]
.text$mn:000008C4                 lea     ecx, [eax+ecx*2]
.text$mn:000008C7                 mov     [ebp+lpString1], ecx
.text$mn:000008CA                 lea     ecx, [ebp+var_2C]
.text$mn:000008CD                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000008D2                 push    eax             ; lpString2
.text$mn:000008D3                 mov     edx, [ebp+lpString1]
.text$mn:000008D6                 push    edx             ; lpString1
.text$mn:000008D7                 call    dword ptr ds:__imp__lstrcpyW@8 ; lstrcpyW(x,x)
.text$mn:000008DD                 lea     ecx, [ebp+var_2C]
.text$mn:000008E0                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:000008E5                 mov     ecx, [ebp+var_30]
.text$mn:000008E8                 mov     edx, [ecx+1044h]
.text$mn:000008EE                 lea     eax, [eax+edx+1]
.text$mn:000008F2                 mov     ecx, [ebp+var_30]
.text$mn:000008F5                 mov     [ecx+1044h], eax
.text$mn:000008FB                 mov     edx, [ebp+var_30]
.text$mn:000008FE                 mov     eax, [edx+1044h]
.text$mn:00000904                 mov     ecx, [ebp+var_30]
.text$mn:00000907                 mov     edx, [ecx+1040h]
.text$mn:0000090D                 lea     eax, [edx+eax*2]
.text$mn:00000910                 mov     [ebp+lpString1], eax
.text$mn:00000913                 mov     ecx, [ebp+lpString]
.text$mn:00000916                 push    ecx             ; lpString2
.text$mn:00000917                 mov     edx, [ebp+lpString1]
.text$mn:0000091A                 push    edx             ; lpString1
.text$mn:0000091B                 call    dword ptr ds:__imp__lstrcpyW@8 ; lstrcpyW(x,x)
.text$mn:00000921                 mov     eax, [ebp+lpString]
.text$mn:00000924                 push    eax             ; lpString
.text$mn:00000925                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:0000092B                 mov     ecx, [ebp+var_30]
.text$mn:0000092E                 mov     edx, [ecx+1044h]
.text$mn:00000934                 lea     eax, [eax+edx+1]
.text$mn:00000938                 mov     ecx, [ebp+var_30]
.text$mn:0000093B                 mov     [ecx+1044h], eax
.text$mn:00000941                 mov     edx, [ebp+var_30]
.text$mn:00000944                 mov     eax, [ebp+var_30]
.text$mn:00000947                 mov     ecx, [eax+1040h]
.text$mn:0000094D                 mov     [edx+1064h], ecx
.text$mn:00000953                 mov     edx, [ebp+var_30]
.text$mn:00000956                 mov     eax, [edx+10B4h]
.text$mn:0000095C                 mov     [ebp+var_4C], eax
.text$mn:0000095F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000966                 lea     ecx, [ebp+var_2C]
.text$mn:00000969                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000096E                 mov     eax, [ebp+var_4C]
.text$mn:00000971                 mov     ecx, [ebp+var_C]
.text$mn:00000974                 mov     large fs:0, ecx
.text$mn:0000097B                 pop     ecx
.text$mn:0000097C                 pop     esi
.text$mn:0000097D                 mov     ecx, [ebp+var_10]
.text$mn:00000980                 xor     ecx, ebp
.text$mn:00000982                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00000987                 mov     esp, ebp
.text$mn:00000989                 pop     ebp
.text$mn:0000098A                 retn    8
.text$mn:0000098A ?setExtsFilter@FileDialog@@QAEHPB_W0@Z endp
.text$mn:0000098A
.text$mn:0000098A ; ---------------------------------------------------------------------------
.text$mn:0000098D                 db 0Bh dup(0CCh)
.text$mn:00000998
.text$mn:00000998 ; =============== S U B R O U T I N E =======================================
.text$mn:00000998
.text$mn:00000998 ; Attributes: bp-based frame
.text$mn:00000998
.text$mn:00000998 ; wchar_t *__thiscall FileDialog::doSaveDlg(FileDialog *__hidden this)
.text$mn:00000998                 public ?doSaveDlg@FileDialog@@QAEPA_WXZ
.text$mn:00000998 ?doSaveDlg@FileDialog@@QAEPA_WXZ proc near
.text$mn:00000998
.text$mn:00000998 var_22C         = dword ptr -22Ch
.text$mn:00000998 var_228         = dword ptr -228h
.text$mn:00000998 var_224         = dword ptr -224h
.text$mn:00000998 var_220         = dword ptr -220h
.text$mn:00000998 Buffer          = word ptr -21Ch
.text$mn:00000998 var_14          = dword ptr -14h
.text$mn:00000998 var_10          = dword ptr -10h
.text$mn:00000998 var_C           = byte ptr -0Ch
.text$mn:00000998 var_4           = dword ptr -4
.text$mn:00000998
.text$mn:00000998 ; FUNCTION CHUNK AT .text$mn:00000B1F SIZE 00000009 BYTES
.text$mn:00000998
.text$mn:00000998                 push    ebp
.text$mn:00000999                 mov     ebp, esp
.text$mn:0000099B                 push    0FFFFFFFFh
.text$mn:0000099D                 push    offset __ehhandler$?doSaveDlg@FileDialog@@QAEPA_WXZ
.text$mn:000009A2                 mov     eax, large fs:0
.text$mn:000009A8                 push    eax
.text$mn:000009A9                 push    ecx
.text$mn:000009AA                 sub     esp, 228h
.text$mn:000009B0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000009B5                 xor     eax, ebp
.text$mn:000009B7                 mov     [ebp+var_14], eax
.text$mn:000009BA                 push    ebx
.text$mn:000009BB                 push    esi
.text$mn:000009BC                 push    edi
.text$mn:000009BD                 push    eax
.text$mn:000009BE                 lea     eax, [ebp+var_C]
.text$mn:000009C1                 mov     large fs:0, eax
.text$mn:000009C7                 mov     [ebp+var_10], esp
.text$mn:000009CA                 mov     [ebp+var_220], ecx
.text$mn:000009D0                 lea     eax, [ebp+Buffer]
.text$mn:000009D6                 push    eax             ; lpBuffer
.text$mn:000009D7                 push    104h            ; nBufferLength
.text$mn:000009DC                 call    dword ptr ds:__imp__GetCurrentDirectoryW@8 ; GetCurrentDirectoryW(x,x)
.text$mn:000009E2                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:000009E7                 mov     [ebp+var_224], eax
.text$mn:000009ED                 mov     ecx, [ebp+var_224] ; this
.text$mn:000009F3                 call    ?getWorkingDir@NppParameters@@QBEPB_WXZ ; NppParameters::getWorkingDir(void)
.text$mn:000009F8                 mov     ecx, [ebp+var_220]
.text$mn:000009FE                 mov     [ecx+1084h], eax
.text$mn:00000A04                 mov     edx, [ebp+var_220]
.text$mn:00000A0A                 mov     eax, [edx+108Ch]
.text$mn:00000A10                 or      eax, 800006h
.text$mn:00000A15                 mov     ecx, [ebp+var_220]
.text$mn:00000A1B                 mov     [ecx+108Ch], eax
.text$mn:00000A21                 mov     edx, [ebp+var_220]
.text$mn:00000A27                 mov     eax, [edx+108Ch]
.text$mn:00000A2D                 or      eax, 20h
.text$mn:00000A30                 mov     ecx, [ebp+var_220]
.text$mn:00000A36                 mov     [ecx+108Ch], eax
.text$mn:00000A3C                 mov     edx, [ebp+var_220]
.text$mn:00000A42                 mov     dword ptr [edx+109Ch], offset ?OFNHookProc@FileDialog@@KGIPAUHWND__@@IIJ@Z ; FileDialog::OFNHookProc(HWND__ *,uint,uint,long)
.text$mn:00000A4C                 mov     [ebp+var_22C], 0
.text$mn:00000A56                 mov     [ebp+var_4], 0
.text$mn:00000A5D                 mov     eax, [ebp+var_220]
.text$mn:00000A63                 add     eax, 1058h
.text$mn:00000A68                 push    eax             ; LPOPENFILENAMEW
.text$mn:00000A69                 call    dword ptr ds:__imp__GetSaveFileNameW@4 ; GetSaveFileNameW(x)
.text$mn:00000A6F                 test    eax, eax
.text$mn:00000A71                 jz      short loc_A81
.text$mn:00000A73                 mov     ecx, [ebp+var_220]
.text$mn:00000A79                 mov     [ebp+var_228], ecx
.text$mn:00000A7F                 jmp     short loc_A8B
.text$mn:00000A81 ; ---------------------------------------------------------------------------
.text$mn:00000A81
.text$mn:00000A81 loc_A81:                                ; CODE XREF: FileDialog::doSaveDlg(void)+D9j
.text$mn:00000A81                 mov     [ebp+var_228], 0
.text$mn:00000A8B
.text$mn:00000A8B loc_A8B:                                ; CODE XREF: FileDialog::doSaveDlg(void)+E7j
.text$mn:00000A8B                 mov     edx, [ebp+var_228]
.text$mn:00000A91                 mov     [ebp+var_22C], edx
.text$mn:00000A97                 mov     ecx, [ebp+var_224] ; this
.text$mn:00000A9D                 call    ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ ; NppParameters::getNppGUI(void)
.text$mn:00000AA2                 cmp     dword ptr [eax+260h], 1
.text$mn:00000AA9                 jnz     short loc_ACF
.text$mn:00000AAB                 lea     eax, [ebp+Buffer]
.text$mn:00000AB1                 push    eax             ; lpBuffer
.text$mn:00000AB2                 push    104h            ; nBufferLength
.text$mn:00000AB7                 call    dword ptr ds:__imp__GetCurrentDirectoryW@8 ; GetCurrentDirectoryW(x,x)
.text$mn:00000ABD                 lea     ecx, [ebp+Buffer]
.text$mn:00000AC3                 push    ecx             ; wchar_t *
.text$mn:00000AC4                 mov     ecx, [ebp+var_224] ; this
.text$mn:00000ACA                 call    ?setWorkingDir@NppParameters@@QAEXPB_W@Z ; NppParameters::setWorkingDir(wchar_t const *)
.text$mn:00000ACF
.text$mn:00000ACF loc_ACF:                                ; CODE XREF: FileDialog::doSaveDlg(void)+111j
.text$mn:00000ACF                 jmp     short loc_B1F
.text$mn:00000ACF ?doSaveDlg@FileDialog@@QAEPA_WXZ endp
.text$mn:00000ACF
.text$mn:00000AD1
.text$mn:00000AD1 ; =============== S U B R O U T I N E =======================================
.text$mn:00000AD1
.text$mn:00000AD1
.text$mn:00000AD1 __catch$?doSaveDlg@FileDialog@@QAEPA_WXZ$0 proc near
.text$mn:00000AD1                                         ; DATA XREF: .xdata$x:00007B60o
.text$mn:00000AD1                 mov     byte ptr [ebp-4], 2
.text$mn:00000AD5                 push    0               ; uType
.text$mn:00000AD7                 push    offset $SG124962 ; "Exception"
.text$mn:00000ADC                 lea     ecx, [ebp-238h] ; this
.text$mn:00000AE2                 call    ?what@exception@std@@UBEPBDXZ ; std::exception::what(void)
.text$mn:00000AE7                 push    eax             ; lpText
.text$mn:00000AE8                 push    0               ; hWnd
.text$mn:00000AEA                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text$mn:00000AF0                 mov     byte ptr [ebp-4], 1
.text$mn:00000AF4                 lea     ecx, [ebp-238h] ; this
.text$mn:00000AFA                 call    ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$mn:00000AFF                 mov     eax, offset $LN12
.text$mn:00000B04                 retn
.text$mn:00000B04 __catch$?doSaveDlg@FileDialog@@QAEPA_WXZ$0 endp
.text$mn:00000B04
.text$mn:00000B05
.text$mn:00000B05 ; =============== S U B R O U T I N E =======================================
.text$mn:00000B05
.text$mn:00000B05
.text$mn:00000B05 __catch$?doSaveDlg@FileDialog@@QAEPA_WXZ$1 proc near
.text$mn:00000B05                                         ; DATA XREF: .xdata$x:00007B70o
.text$mn:00000B05                 push    0               ; uType
.text$mn:00000B07                 push    offset $SG124963 ; lpCaption
.text$mn:00000B0C                 push    offset $SG124964 ; "GetSaveFileName crashes!!!"
.text$mn:00000B11                 push    0               ; hWnd
.text$mn:00000B13                 call    dword ptr ds:__imp__MessageBoxW@16 ; MessageBoxW(x,x,x,x)
.text$mn:00000B19                 mov     eax, offset $LN14
.text$mn:00000B1E                 retn
.text$mn:00000B1E __catch$?doSaveDlg@FileDialog@@QAEPA_WXZ$1 endp
.text$mn:00000B1E
.text$mn:00000B1F ; ---------------------------------------------------------------------------
.text$mn:00000B1F ; START OF FUNCTION CHUNK FOR ?doSaveDlg@FileDialog@@QAEPA_WXZ
.text$mn:00000B1F
.text$mn:00000B1F loc_B1F:                                ; CODE XREF: FileDialog::doSaveDlg(void):loc_ACFj
.text$mn:00000B1F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000B26                 jmp     short loc_B31
.text$mn:00000B26 ; END OF FUNCTION CHUNK FOR ?doSaveDlg@FileDialog@@QAEPA_WXZ
.text$mn:00000B28
.text$mn:00000B28 ; =============== S U B R O U T I N E =======================================
.text$mn:00000B28
.text$mn:00000B28
.text$mn:00000B28 $LN14           proc near               ; DATA XREF: __catch$?doSaveDlg@FileDialog@@QAEPA_WXZ$1+14o
.text$mn:00000B28                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00000B2F                 jmp     short loc_B3A
.text$mn:00000B31 ; ---------------------------------------------------------------------------
.text$mn:00000B31
.text$mn:00000B31 loc_B31:                                ; CODE XREF: FileDialog::doSaveDlg(void)+18Ej
.text$mn:00000B31                 jmp     short loc_B3A
.text$mn:00000B33 ; ---------------------------------------------------------------------------
.text$mn:00000B33
.text$mn:00000B33 $LN12:                                  ; DATA XREF: __catch$?doSaveDlg@FileDialog@@QAEPA_WXZ$0+2Eo
.text$mn:00000B33                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00000B3A
.text$mn:00000B3A loc_B3A:                                ; CODE XREF: $LN14+7j
.text$mn:00000B3A                                         ; $LN14:loc_B31j
.text$mn:00000B3A                 lea     edx, [ebp-21Ch]
.text$mn:00000B40                 push    edx             ; lpPathName
.text$mn:00000B41                 call    dword ptr ds:__imp__SetCurrentDirectoryW@4 ; SetCurrentDirectoryW(x)
.text$mn:00000B47                 mov     eax, [ebp-22Ch]
.text$mn:00000B4D                 mov     ecx, [ebp-0Ch]
.text$mn:00000B50                 mov     large fs:0, ecx
.text$mn:00000B57                 pop     ecx
.text$mn:00000B58                 pop     edi
.text$mn:00000B59                 pop     esi
.text$mn:00000B5A                 pop     ebx
.text$mn:00000B5B                 mov     ecx, [ebp-14h]
.text$mn:00000B5E                 xor     ecx, ebp
.text$mn:00000B60                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00000B65                 mov     esp, ebp
.text$mn:00000B67                 pop     ebp
.text$mn:00000B68                 retn
.text$mn:00000B68 $LN14           endp ; sp-analysis failed
.text$mn:00000B68
.text$mn:00000B68 ; ---------------------------------------------------------------------------
.text$mn:00000B69                 db 0Fh dup(0CCh)
.text$mn:00000B78
.text$mn:00000B78 ; =============== S U B R O U T I N E =======================================
.text$mn:00000B78
.text$mn:00000B78 ; Attributes: bp-based frame
.text$mn:00000B78
.text$mn:00000B78 ; public: class std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> * __thiscall FileDialog::doOpenMultiFilesDlg(void)
.text$mn:00000B78                 public ?doOpenMultiFilesDlg@FileDialog@@QAEPAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ
.text$mn:00000B78 ?doOpenMultiFilesDlg@FileDialog@@QAEPAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ proc near
.text$mn:00000B78
.text$mn:00000B78 var_480         = dword ptr -480h
.text$mn:00000B78 var_47C         = dword ptr -47Ch
.text$mn:00000B78 var_478         = dword ptr -478h
.text$mn:00000B78 var_474         = dword ptr -474h
.text$mn:00000B78 var_470         = dword ptr -470h
.text$mn:00000B78 var_46C         = dword ptr -46Ch
.text$mn:00000B78 var_468         = dword ptr -468h
.text$mn:00000B78 var_464         = dword ptr -464h
.text$mn:00000B78 lpString2       = dword ptr -460h
.text$mn:00000B78 lpString        = dword ptr -45Ch
.text$mn:00000B78 var_458         = byte ptr -458h
.text$mn:00000B78 var_43C         = byte ptr -43Ch
.text$mn:00000B78 Buffer          = word ptr -420h
.text$mn:00000B78 var_21A         = word ptr -21Ah
.text$mn:00000B78 String1         = word ptr -218h
.text$mn:00000B78 var_10          = dword ptr -10h
.text$mn:00000B78 var_C           = dword ptr -0Ch
.text$mn:00000B78 var_4           = dword ptr -4
.text$mn:00000B78
.text$mn:00000B78                 push    ebp
.text$mn:00000B79                 mov     ebp, esp
.text$mn:00000B7B                 push    0FFFFFFFFh
.text$mn:00000B7D                 push    offset __ehhandler$?doOpenMultiFilesDlg@FileDialog@@QAEPAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ
.text$mn:00000B82                 mov     eax, large fs:0
.text$mn:00000B88                 push    eax
.text$mn:00000B89                 sub     esp, 474h
.text$mn:00000B8F                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000B94                 xor     eax, ebp
.text$mn:00000B96                 mov     [ebp+var_10], eax
.text$mn:00000B99                 push    eax
.text$mn:00000B9A                 lea     eax, [ebp+var_C]
.text$mn:00000B9D                 mov     large fs:0, eax
.text$mn:00000BA3                 mov     [ebp+lpString], ecx
.text$mn:00000BA9                 lea     eax, [ebp+Buffer]
.text$mn:00000BAF                 push    eax             ; lpBuffer
.text$mn:00000BB0                 push    104h            ; nBufferLength
.text$mn:00000BB5                 call    dword ptr ds:__imp__GetCurrentDirectoryW@8 ; GetCurrentDirectoryW(x,x)
.text$mn:00000BBB                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00000BC0                 mov     [ebp+var_464], eax
.text$mn:00000BC6                 mov     ecx, [ebp+var_464] ; this
.text$mn:00000BCC                 call    ?getWorkingDir@NppParameters@@QBEPB_WXZ ; NppParameters::getWorkingDir(void)
.text$mn:00000BD1                 mov     ecx, [ebp+lpString]
.text$mn:00000BD7                 mov     [ecx+1084h], eax
.text$mn:00000BDD                 mov     edx, [ebp+lpString]
.text$mn:00000BE3                 mov     eax, [edx+108Ch]
.text$mn:00000BE9                 or      eax, 1200h
.text$mn:00000BEE                 mov     ecx, [ebp+lpString]
.text$mn:00000BF4                 mov     [ecx+108Ch], eax
.text$mn:00000BFA                 mov     edx, [ebp+lpString]
.text$mn:00000C00                 add     edx, 1058h
.text$mn:00000C06                 push    edx             ; LPOPENFILENAMEW
.text$mn:00000C07                 call    dword ptr ds:__imp__GetOpenFileNameW@4 ; GetOpenFileNameW(x)
.text$mn:00000C0D                 mov     [ebp+var_470], eax
.text$mn:00000C13                 mov     ecx, [ebp+var_464] ; this
.text$mn:00000C19                 call    ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ ; NppParameters::getNppGUI(void)
.text$mn:00000C1E                 cmp     dword ptr [eax+260h], 1
.text$mn:00000C25                 jnz     short loc_C4B
.text$mn:00000C27                 lea     eax, [ebp+Buffer]
.text$mn:00000C2D                 push    eax             ; lpBuffer
.text$mn:00000C2E                 push    104h            ; nBufferLength
.text$mn:00000C33                 call    dword ptr ds:__imp__GetCurrentDirectoryW@8 ; GetCurrentDirectoryW(x,x)
.text$mn:00000C39                 lea     ecx, [ebp+Buffer]
.text$mn:00000C3F                 push    ecx             ; wchar_t *
.text$mn:00000C40                 mov     ecx, [ebp+var_464] ; this
.text$mn:00000C46                 call    ?setWorkingDir@NppParameters@@QAEXPB_W@Z ; NppParameters::setWorkingDir(wchar_t const *)
.text$mn:00000C4B
.text$mn:00000C4B loc_C4B:                                ; CODE XREF: FileDialog::doOpenMultiFilesDlg(void)+ADj
.text$mn:00000C4B                 lea     edx, [ebp+Buffer]
.text$mn:00000C51                 push    edx             ; lpPathName
.text$mn:00000C52                 call    dword ptr ds:__imp__SetCurrentDirectoryW@4 ; SetCurrentDirectoryW(x)
.text$mn:00000C58                 cmp     [ebp+var_470], 0
.text$mn:00000C5F                 jz      loc_E15
.text$mn:00000C65                 mov     eax, [ebp+lpString]
.text$mn:00000C6B                 push    eax             ; lpString
.text$mn:00000C6C                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00000C72                 mov     ecx, [ebp+lpString]
.text$mn:00000C78                 lea     edx, [ecx+eax*2+2]
.text$mn:00000C7C                 mov     [ebp+lpString2], edx
.text$mn:00000C82                 mov     eax, [ebp+lpString2]
.text$mn:00000C88                 movzx   ecx, word ptr [eax]
.text$mn:00000C8B                 test    ecx, ecx
.text$mn:00000C8D                 jnz     short loc_CE6
.text$mn:00000C8F                 mov     edx, [ebp+lpString]
.text$mn:00000C95                 push    edx             ; Str
.text$mn:00000C96                 lea     ecx, [ebp+var_458]
.text$mn:00000C9C                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00000CA1                 mov     [ebp+var_47C], eax
.text$mn:00000CA7                 mov     eax, [ebp+var_47C]
.text$mn:00000CAD                 mov     [ebp+var_46C], eax
.text$mn:00000CB3                 mov     [ebp+var_4], 0
.text$mn:00000CBA                 mov     ecx, [ebp+var_46C]
.text$mn:00000CC0                 push    ecx
.text$mn:00000CC1                 mov     ecx, [ebp+lpString]
.text$mn:00000CC7                 add     ecx, 1048h
.text$mn:00000CCD                 call    ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00000CD2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000CD9                 lea     ecx, [ebp+var_458]
.text$mn:00000CDF                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00000CE4                 jmp     short loc_D26
.text$mn:00000CE6 ; ---------------------------------------------------------------------------
.text$mn:00000CE6
.text$mn:00000CE6 loc_CE6:                                ; CODE XREF: FileDialog::doOpenMultiFilesDlg(void)+115j
.text$mn:00000CE6                 mov     edx, [ebp+lpString]
.text$mn:00000CEC                 push    edx             ; lpString2
.text$mn:00000CED                 lea     eax, [ebp+String1]
.text$mn:00000CF3                 push    eax             ; lpString1
.text$mn:00000CF4                 call    dword ptr ds:__imp__lstrcpyW@8 ; lstrcpyW(x,x)
.text$mn:00000CFA                 lea     ecx, [ebp+String1]
.text$mn:00000D00                 push    ecx             ; lpString
.text$mn:00000D01                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00000D07                 movzx   edx, [ebp+eax*2+var_21A]
.text$mn:00000D0F                 cmp     edx, 5Ch ; '\'
.text$mn:00000D12                 jz      short loc_D26
.text$mn:00000D14                 push    offset $SG124945 ; lpString2
.text$mn:00000D19                 lea     eax, [ebp+String1]
.text$mn:00000D1F                 push    eax             ; lpString1
.text$mn:00000D20                 call    dword ptr ds:__imp__lstrcatW@8 ; lstrcatW(x,x)
.text$mn:00000D26
.text$mn:00000D26 loc_D26:                                ; CODE XREF: FileDialog::doOpenMultiFilesDlg(void)+16Cj
.text$mn:00000D26                                         ; FileDialog::doOpenMultiFilesDlg(void)+19Aj
.text$mn:00000D26                 lea     ecx, [ebp+String1]
.text$mn:00000D2C                 push    ecx             ; lpString
.text$mn:00000D2D                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00000D33                 mov     [ebp+var_478], eax
.text$mn:00000D39
.text$mn:00000D39 loc_D39:                                ; CODE XREF: FileDialog::doOpenMultiFilesDlg(void)+289j
.text$mn:00000D39                 mov     edx, [ebp+lpString2]
.text$mn:00000D3F                 movzx   eax, word ptr [edx]
.text$mn:00000D42                 test    eax, eax
.text$mn:00000D44                 jz      loc_E06
.text$mn:00000D4A                 mov     ecx, [ebp+var_478]
.text$mn:00000D50                 shl     ecx, 1
.text$mn:00000D52                 mov     [ebp+var_468], ecx
.text$mn:00000D58                 cmp     [ebp+var_468], 208h
.text$mn:00000D62                 jnb     short loc_D66
.text$mn:00000D64                 jmp     short loc_D6B
.text$mn:00000D66 ; ---------------------------------------------------------------------------
.text$mn:00000D66
.text$mn:00000D66 loc_D66:                                ; CODE XREF: FileDialog::doOpenMultiFilesDlg(void)+1EAj
.text$mn:00000D66                 call    ___report_rangecheckfailure
.text$mn:00000D6B
.text$mn:00000D6B loc_D6B:                                ; CODE XREF: FileDialog::doOpenMultiFilesDlg(void)+1ECj
.text$mn:00000D6B                 xor     edx, edx
.text$mn:00000D6D                 mov     eax, [ebp+var_468]
.text$mn:00000D73                 mov     [ebp+eax+String1], dx
.text$mn:00000D7B                 mov     ecx, [ebp+lpString2]
.text$mn:00000D81                 push    ecx             ; lpString2
.text$mn:00000D82                 lea     edx, [ebp+String1]
.text$mn:00000D88                 push    edx             ; lpString1
.text$mn:00000D89                 call    dword ptr ds:__imp__lstrcatW@8 ; lstrcatW(x,x)
.text$mn:00000D8F                 lea     eax, [ebp+String1]
.text$mn:00000D95                 push    eax             ; Str
.text$mn:00000D96                 lea     ecx, [ebp+var_43C]
.text$mn:00000D9C                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00000DA1                 mov     [ebp+var_480], eax
.text$mn:00000DA7                 mov     ecx, [ebp+var_480]
.text$mn:00000DAD                 mov     [ebp+var_474], ecx
.text$mn:00000DB3                 mov     [ebp+var_4], 1
.text$mn:00000DBA                 mov     edx, [ebp+var_474]
.text$mn:00000DC0                 push    edx
.text$mn:00000DC1                 mov     ecx, [ebp+lpString]
.text$mn:00000DC7                 add     ecx, 1048h
.text$mn:00000DCD                 call    ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00000DD2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000DD9                 lea     ecx, [ebp+var_43C]
.text$mn:00000DDF                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00000DE4                 mov     eax, [ebp+lpString2]
.text$mn:00000DEA                 push    eax             ; lpString
.text$mn:00000DEB                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00000DF1                 mov     ecx, [ebp+lpString2]
.text$mn:00000DF7                 lea     edx, [ecx+eax*2+2]
.text$mn:00000DFB                 mov     [ebp+lpString2], edx
.text$mn:00000E01                 jmp     loc_D39
.text$mn:00000E06 ; ---------------------------------------------------------------------------
.text$mn:00000E06
.text$mn:00000E06 loc_E06:                                ; CODE XREF: FileDialog::doOpenMultiFilesDlg(void)+1CCj
.text$mn:00000E06                 mov     eax, [ebp+lpString]
.text$mn:00000E0C                 add     eax, 1048h
.text$mn:00000E11                 jmp     short loc_E17
.text$mn:00000E13 ; ---------------------------------------------------------------------------
.text$mn:00000E13                 jmp     short loc_E17
.text$mn:00000E15 ; ---------------------------------------------------------------------------
.text$mn:00000E15
.text$mn:00000E15 loc_E15:                                ; CODE XREF: FileDialog::doOpenMultiFilesDlg(void)+E7j
.text$mn:00000E15                 xor     eax, eax
.text$mn:00000E17
.text$mn:00000E17 loc_E17:                                ; CODE XREF: FileDialog::doOpenMultiFilesDlg(void)+299j
.text$mn:00000E17                                         ; FileDialog::doOpenMultiFilesDlg(void)+29Bj
.text$mn:00000E17                 mov     ecx, [ebp+var_C]
.text$mn:00000E1A                 mov     large fs:0, ecx
.text$mn:00000E21                 pop     ecx
.text$mn:00000E22                 mov     ecx, [ebp+var_10]
.text$mn:00000E25                 xor     ecx, ebp
.text$mn:00000E27                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00000E2C                 mov     esp, ebp
.text$mn:00000E2E                 pop     ebp
.text$mn:00000E2F                 retn
.text$mn:00000E2F ?doOpenMultiFilesDlg@FileDialog@@QAEPAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ endp
.text$mn:00000E2F
.text$mn:00000E2F ; ---------------------------------------------------------------------------
.text$mn:00000E30                 db 8 dup(0CCh)
.text$mn:00000E38
.text$mn:00000E38 ; =============== S U B R O U T I N E =======================================
.text$mn:00000E38
.text$mn:00000E38 ; Attributes: bp-based frame
.text$mn:00000E38
.text$mn:00000E38 ; wchar_t *__thiscall FileDialog::doOpenSingleFileDlg(FileDialog *__hidden this)
.text$mn:00000E38                 public ?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ
.text$mn:00000E38 ?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ proc near
.text$mn:00000E38
.text$mn:00000E38 var_22C         = dword ptr -22Ch
.text$mn:00000E38 var_228         = dword ptr -228h
.text$mn:00000E38 var_224         = dword ptr -224h
.text$mn:00000E38 var_220         = dword ptr -220h
.text$mn:00000E38 Buffer          = word ptr -21Ch
.text$mn:00000E38 var_14          = dword ptr -14h
.text$mn:00000E38 var_10          = dword ptr -10h
.text$mn:00000E38 var_C           = byte ptr -0Ch
.text$mn:00000E38 var_4           = dword ptr -4
.text$mn:00000E38
.text$mn:00000E38 ; FUNCTION CHUNK AT .text$mn:00000F95 SIZE 00000009 BYTES
.text$mn:00000E38
.text$mn:00000E38                 push    ebp
.text$mn:00000E39                 mov     ebp, esp
.text$mn:00000E3B                 push    0FFFFFFFFh
.text$mn:00000E3D                 push    offset __ehhandler$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ
.text$mn:00000E42                 mov     eax, large fs:0
.text$mn:00000E48                 push    eax
.text$mn:00000E49                 push    ecx
.text$mn:00000E4A                 sub     esp, 228h
.text$mn:00000E50                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000E55                 xor     eax, ebp
.text$mn:00000E57                 mov     [ebp+var_14], eax
.text$mn:00000E5A                 push    ebx
.text$mn:00000E5B                 push    esi
.text$mn:00000E5C                 push    edi
.text$mn:00000E5D                 push    eax
.text$mn:00000E5E                 lea     eax, [ebp+var_C]
.text$mn:00000E61                 mov     large fs:0, eax
.text$mn:00000E67                 mov     [ebp+var_10], esp
.text$mn:00000E6A                 mov     [ebp+var_220], ecx
.text$mn:00000E70                 lea     eax, [ebp+Buffer]
.text$mn:00000E76                 push    eax             ; lpBuffer
.text$mn:00000E77                 push    104h            ; nBufferLength
.text$mn:00000E7C                 call    dword ptr ds:__imp__GetCurrentDirectoryW@8 ; GetCurrentDirectoryW(x,x)
.text$mn:00000E82                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00000E87                 mov     [ebp+var_224], eax
.text$mn:00000E8D                 mov     ecx, [ebp+var_224] ; this
.text$mn:00000E93                 call    ?getWorkingDir@NppParameters@@QBEPB_WXZ ; NppParameters::getWorkingDir(void)
.text$mn:00000E98                 mov     ecx, [ebp+var_220]
.text$mn:00000E9E                 mov     [ecx+1084h], eax
.text$mn:00000EA4                 mov     edx, [ebp+var_220]
.text$mn:00000EAA                 mov     eax, [edx+108Ch]
.text$mn:00000EB0                 or      eax, 1000h
.text$mn:00000EB5                 mov     ecx, [ebp+var_220]
.text$mn:00000EBB                 mov     [ecx+108Ch], eax
.text$mn:00000EC1                 mov     [ebp+var_22C], 0
.text$mn:00000ECB                 mov     [ebp+var_4], 0
.text$mn:00000ED2                 mov     edx, [ebp+var_220]
.text$mn:00000ED8                 add     edx, 1058h
.text$mn:00000EDE                 push    edx             ; LPOPENFILENAMEW
.text$mn:00000EDF                 call    dword ptr ds:__imp__GetOpenFileNameW@4 ; GetOpenFileNameW(x)
.text$mn:00000EE5                 test    eax, eax
.text$mn:00000EE7                 jz      short loc_EF7
.text$mn:00000EE9                 mov     eax, [ebp+var_220]
.text$mn:00000EEF                 mov     [ebp+var_228], eax
.text$mn:00000EF5                 jmp     short loc_F01
.text$mn:00000EF7 ; ---------------------------------------------------------------------------
.text$mn:00000EF7
.text$mn:00000EF7 loc_EF7:                                ; CODE XREF: FileDialog::doOpenSingleFileDlg(void)+AFj
.text$mn:00000EF7                 mov     [ebp+var_228], 0
.text$mn:00000F01
.text$mn:00000F01 loc_F01:                                ; CODE XREF: FileDialog::doOpenSingleFileDlg(void)+BDj
.text$mn:00000F01                 mov     ecx, [ebp+var_228]
.text$mn:00000F07                 mov     [ebp+var_22C], ecx
.text$mn:00000F0D                 mov     ecx, [ebp+var_224] ; this
.text$mn:00000F13                 call    ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ ; NppParameters::getNppGUI(void)
.text$mn:00000F18                 cmp     dword ptr [eax+260h], 1
.text$mn:00000F1F                 jnz     short loc_F45
.text$mn:00000F21                 lea     edx, [ebp+Buffer]
.text$mn:00000F27                 push    edx             ; lpBuffer
.text$mn:00000F28                 push    104h            ; nBufferLength
.text$mn:00000F2D                 call    dword ptr ds:__imp__GetCurrentDirectoryW@8 ; GetCurrentDirectoryW(x,x)
.text$mn:00000F33                 lea     eax, [ebp+Buffer]
.text$mn:00000F39                 push    eax             ; wchar_t *
.text$mn:00000F3A                 mov     ecx, [ebp+var_224] ; this
.text$mn:00000F40                 call    ?setWorkingDir@NppParameters@@QAEXPB_W@Z ; NppParameters::setWorkingDir(wchar_t const *)
.text$mn:00000F45
.text$mn:00000F45 loc_F45:                                ; CODE XREF: FileDialog::doOpenSingleFileDlg(void)+E7j
.text$mn:00000F45                 jmp     short loc_F95
.text$mn:00000F45 ?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ endp
.text$mn:00000F45
.text$mn:00000F47
.text$mn:00000F47 ; =============== S U B R O U T I N E =======================================
.text$mn:00000F47
.text$mn:00000F47
.text$mn:00000F47 __catch$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ$0 proc near
.text$mn:00000F47                                         ; DATA XREF: .xdata$x:00007B40o
.text$mn:00000F47                 mov     byte ptr [ebp-4], 2
.text$mn:00000F4B                 push    0               ; uType
.text$mn:00000F4D                 push    offset $SG124928 ; "Exception"
.text$mn:00000F52                 lea     ecx, [ebp-238h] ; this
.text$mn:00000F58                 call    ?what@exception@std@@UBEPBDXZ ; std::exception::what(void)
.text$mn:00000F5D                 push    eax             ; lpText
.text$mn:00000F5E                 push    0               ; hWnd
.text$mn:00000F60                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text$mn:00000F66                 mov     byte ptr [ebp-4], 1
.text$mn:00000F6A                 lea     ecx, [ebp-238h] ; this
.text$mn:00000F70                 call    ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$mn:00000F75                 mov     eax, offset $LN12_0
.text$mn:00000F7A                 retn
.text$mn:00000F7A __catch$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ$0 endp
.text$mn:00000F7A
.text$mn:00000F7B
.text$mn:00000F7B ; =============== S U B R O U T I N E =======================================
.text$mn:00000F7B
.text$mn:00000F7B
.text$mn:00000F7B __catch$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ$1 proc near
.text$mn:00000F7B                                         ; DATA XREF: .xdata$x:00007B50o
.text$mn:00000F7B                 push    0               ; uType
.text$mn:00000F7D                 push    offset $SG124929 ; lpCaption
.text$mn:00000F82                 push    offset $SG124930 ; "GetSaveFileName crashes!!!"
.text$mn:00000F87                 push    0               ; hWnd
.text$mn:00000F89                 call    dword ptr ds:__imp__MessageBoxW@16 ; MessageBoxW(x,x,x,x)
.text$mn:00000F8F                 mov     eax, offset $LN14_0
.text$mn:00000F94                 retn
.text$mn:00000F94 __catch$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ$1 endp
.text$mn:00000F94
.text$mn:00000F95 ; ---------------------------------------------------------------------------
.text$mn:00000F95 ; START OF FUNCTION CHUNK FOR ?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ
.text$mn:00000F95
.text$mn:00000F95 loc_F95:                                ; CODE XREF: FileDialog::doOpenSingleFileDlg(void):loc_F45j
.text$mn:00000F95                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000F9C                 jmp     short loc_FA7
.text$mn:00000F9C ; END OF FUNCTION CHUNK FOR ?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ
.text$mn:00000F9E
.text$mn:00000F9E ; =============== S U B R O U T I N E =======================================
.text$mn:00000F9E
.text$mn:00000F9E
.text$mn:00000F9E $LN14_0         proc near               ; DATA XREF: __catch$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ$1+14o
.text$mn:00000F9E                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00000FA5                 jmp     short loc_FB0
.text$mn:00000FA7 ; ---------------------------------------------------------------------------
.text$mn:00000FA7
.text$mn:00000FA7 loc_FA7:                                ; CODE XREF: FileDialog::doOpenSingleFileDlg(void)+164j
.text$mn:00000FA7                 jmp     short loc_FB0
.text$mn:00000FA9 ; ---------------------------------------------------------------------------
.text$mn:00000FA9
.text$mn:00000FA9 $LN12_0:                                ; DATA XREF: __catch$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ$0+2Eo
.text$mn:00000FA9                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00000FB0
.text$mn:00000FB0 loc_FB0:                                ; CODE XREF: $LN14_0+7j
.text$mn:00000FB0                                         ; $LN14_0:loc_FA7j
.text$mn:00000FB0                 lea     ecx, [ebp-21Ch]
.text$mn:00000FB6                 push    ecx             ; lpPathName
.text$mn:00000FB7                 call    dword ptr ds:__imp__SetCurrentDirectoryW@4 ; SetCurrentDirectoryW(x)
.text$mn:00000FBD                 mov     eax, [ebp-22Ch]
.text$mn:00000FC3                 mov     ecx, [ebp-0Ch]
.text$mn:00000FC6                 mov     large fs:0, ecx
.text$mn:00000FCD                 pop     ecx
.text$mn:00000FCE                 pop     edi
.text$mn:00000FCF                 pop     esi
.text$mn:00000FD0                 pop     ebx
.text$mn:00000FD1                 mov     ecx, [ebp-14h]
.text$mn:00000FD4                 xor     ecx, ebp
.text$mn:00000FD6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00000FDB                 mov     esp, ebp
.text$mn:00000FDD                 pop     ebp
.text$mn:00000FDE                 retn
.text$mn:00000FDE $LN14_0         endp ; sp-analysis failed
.text$mn:00000FDE
.text$mn:00000FDE ; ---------------------------------------------------------------------------
.text$mn:00000FDF                 db 9 dup(0CCh)
.text$mn:00000FE8
.text$mn:00000FE8 ; =============== S U B R O U T I N E =======================================
.text$mn:00000FE8
.text$mn:00000FE8 ; Attributes: bp-based frame
.text$mn:00000FE8
.text$mn:00000FE8 ; unsigned int __stdcall FileDialog::OFNHookProc(HWND hWnd, unsigned int, unsigned int, __int32)
.text$mn:00000FE8                 public ?OFNHookProc@FileDialog@@KGIPAUHWND__@@IIJ@Z
.text$mn:00000FE8 ?OFNHookProc@FileDialog@@KGIPAUHWND__@@IIJ@Z proc near
.text$mn:00000FE8                                         ; DATA XREF: FileDialog::doSaveDlg(void)+AAo
.text$mn:00000FE8
.text$mn:00000FE8 var_14          = dword ptr -14h
.text$mn:00000FE8 var_10          = dword ptr -10h
.text$mn:00000FE8 var_C           = dword ptr -0Ch
.text$mn:00000FE8 var_8           = dword ptr -8
.text$mn:00000FE8 wParam          = dword ptr -4
.text$mn:00000FE8 hWnd            = dword ptr  8
.text$mn:00000FE8 arg_4           = dword ptr  0Ch
.text$mn:00000FE8 arg_8           = dword ptr  10h
.text$mn:00000FE8 arg_C           = dword ptr  14h
.text$mn:00000FE8
.text$mn:00000FE8                 push    ebp
.text$mn:00000FE9                 mov     ebp, esp
.text$mn:00000FEB                 sub     esp, 14h
.text$mn:00000FEE                 mov     eax, [ebp+arg_4]
.text$mn:00000FF1                 mov     [ebp+var_C], eax
.text$mn:00000FF4                 cmp     [ebp+var_C], 110h
.text$mn:00000FFB                 jz      short loc_1002
.text$mn:00000FFD                 jmp     loc_10AA
.text$mn:00001002 ; ---------------------------------------------------------------------------
.text$mn:00001002
.text$mn:00001002 loc_1002:                               ; CODE XREF: FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+13j
.text$mn:00001002                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00001007                 mov     [ebp+var_10], eax
.text$mn:0000100A                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000100D                 call    ?getFileSaveDlgFilterIndex@NppParameters@@QBEHXZ ; NppParameters::getFileSaveDlgFilterIndex(void)
.text$mn:00001012                 mov     [ebp+wParam], eax
.text$mn:00001015                 mov     ecx, ds:?staticThis@FileDialog@@0PAV1@A ; FileDialog * FileDialog::staticThis
.text$mn:0000101B                 push    ecx             ; dwNewLong
.text$mn:0000101C                 push    0FFFFFFEBh      ; nIndex
.text$mn:0000101E                 mov     edx, [ebp+hWnd]
.text$mn:00001021                 push    edx             ; hWnd
.text$mn:00001022                 call    dword ptr ds:__imp__SetWindowLongW@12 ; SetWindowLongW(x,x,x)
.text$mn:00001028                 mov     eax, [ebp+hWnd]
.text$mn:0000102B                 push    eax             ; hWnd
.text$mn:0000102C                 call    dword ptr ds:__imp__GetParent@4 ; GetParent(x)
.text$mn:00001032                 mov     ds:_hFileDlg, eax
.text$mn:00001037                 mov     ecx, ds:_hFileDlg
.text$mn:0000103D                 push    ecx             ; hWnd
.text$mn:0000103E                 call    ?goToCenter@@YAXPAUHWND__@@@Z ; goToCenter(HWND__ *)
.text$mn:00001043                 add     esp, 4
.text$mn:00001046                 cmp     [ebp+wParam], 0FFFFFFFFh
.text$mn:0000104A                 jz      short loc_1076
.text$mn:0000104C                 push    470h            ; nIDDlgItem
.text$mn:00001051                 mov     edx, ds:_hFileDlg
.text$mn:00001057                 push    edx             ; hDlg
.text$mn:00001058                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:0000105E                 mov     [ebp+var_14], eax
.text$mn:00001061                 push    0               ; lParam
.text$mn:00001063                 mov     eax, [ebp+wParam]
.text$mn:00001066                 push    eax             ; wParam
.text$mn:00001067                 push    14Eh            ; Msg
.text$mn:0000106C                 mov     ecx, [ebp+var_14]
.text$mn:0000106F                 push    ecx             ; hWnd
.text$mn:00001070                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001076
.text$mn:00001076 loc_1076:                               ; CODE XREF: FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+62j
.text$mn:00001076                 push    0FFFFFFFCh      ; nIndex
.text$mn:00001078                 mov     edx, ds:_hFileDlg
.text$mn:0000107E                 push    edx             ; hWnd
.text$mn:0000107F                 call    dword ptr ds:__imp__GetWindowLongW@8 ; GetWindowLongW(x,x)
.text$mn:00001085                 mov     ds:_oldProc, eax
.text$mn:0000108A                 cmp     ds:_oldProc, 0
.text$mn:00001091                 jle     short loc_10A6
.text$mn:00001093                 push    offset ?fileDlgProc@@YGJPAUHWND__@@IIJ@Z ; dwNewLong
.text$mn:00001098                 push    0FFFFFFFCh      ; nIndex
.text$mn:0000109A                 mov     eax, ds:_hFileDlg
.text$mn:0000109F                 push    eax             ; hWnd
.text$mn:000010A0                 call    dword ptr ds:__imp__SetWindowLongW@12 ; SetWindowLongW(x,x,x)
.text$mn:000010A6
.text$mn:000010A6 loc_10A6:                               ; CODE XREF: FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+A9j
.text$mn:000010A6                 xor     eax, eax
.text$mn:000010A8                 jmp     short loc_10DC
.text$mn:000010AA ; ---------------------------------------------------------------------------
.text$mn:000010AA
.text$mn:000010AA loc_10AA:                               ; CODE XREF: FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+15j
.text$mn:000010AA                 push    0FFFFFFEBh      ; nIndex
.text$mn:000010AC                 mov     ecx, [ebp+hWnd]
.text$mn:000010AF                 push    ecx             ; hWnd
.text$mn:000010B0                 call    dword ptr ds:__imp__GetWindowLongW@8 ; GetWindowLongW(x,x)
.text$mn:000010B6                 mov     [ebp+var_8], eax
.text$mn:000010B9                 cmp     [ebp+var_8], 0
.text$mn:000010BD                 jnz     short loc_10C3
.text$mn:000010BF                 xor     eax, eax
.text$mn:000010C1                 jmp     short loc_10DC
.text$mn:000010C3 ; ---------------------------------------------------------------------------
.text$mn:000010C3
.text$mn:000010C3 loc_10C3:                               ; CODE XREF: FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+D5j
.text$mn:000010C3                 mov     edx, [ebp+arg_C]
.text$mn:000010C6                 push    edx             ; __int32
.text$mn:000010C7                 mov     eax, [ebp+arg_8]
.text$mn:000010CA                 push    eax             ; unsigned int
.text$mn:000010CB                 mov     ecx, [ebp+arg_4]
.text$mn:000010CE                 push    ecx             ; unsigned int
.text$mn:000010CF                 mov     edx, [ebp+hWnd]
.text$mn:000010D2                 push    edx             ; hWnd
.text$mn:000010D3                 mov     eax, [ebp+var_8]
.text$mn:000010D6                 push    eax             ; this
.text$mn:000010D7                 call    ?run@FileDialog@@IAGHPAUHWND__@@IIJ@Z ; FileDialog::run(HWND__ *,uint,uint,long)
.text$mn:000010DC
.text$mn:000010DC loc_10DC:                               ; CODE XREF: FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+C0j
.text$mn:000010DC                                         ; FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+D9j
.text$mn:000010DC                 mov     esp, ebp
.text$mn:000010DE                 pop     ebp
.text$mn:000010DF                 retn    10h
.text$mn:000010DF ?OFNHookProc@FileDialog@@KGIPAUHWND__@@IIJ@Z endp
.text$mn:000010DF
.text$mn:000010DF ; ---------------------------------------------------------------------------
.text$mn:000010E2                 align 8
.text$mn:000010E8
.text$mn:000010E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000010E8
.text$mn:000010E8 ; Attributes: bp-based frame
.text$mn:000010E8
.text$mn:000010E8 ; int __stdcall FileDialog::run(FileDialog *this, HWND hWnd, unsigned int, unsigned int, __int32)
.text$mn:000010E8                 public ?run@FileDialog@@IAGHPAUHWND__@@IIJ@Z
.text$mn:000010E8 ?run@FileDialog@@IAGHPAUHWND__@@IIJ@Z proc near
.text$mn:000010E8                                         ; CODE XREF: FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+EFp
.text$mn:000010E8
.text$mn:000010E8 var_80          = dword ptr -80h
.text$mn:000010E8 var_7C          = dword ptr -7Ch
.text$mn:000010E8 var_78          = dword ptr -78h
.text$mn:000010E8 var_74          = dword ptr -74h
.text$mn:000010E8 var_70          = dword ptr -70h
.text$mn:000010E8 var_6C          = dword ptr -6Ch
.text$mn:000010E8 var_68          = dword ptr -68h
.text$mn:000010E8 var_64          = dword ptr -64h
.text$mn:000010E8 var_60          = dword ptr -60h
.text$mn:000010E8 var_5C          = dword ptr -5Ch
.text$mn:000010E8 var_58          = dword ptr -58h
.text$mn:000010E8 var_54          = dword ptr -54h
.text$mn:000010E8 var_50          = dword ptr -50h
.text$mn:000010E8 var_4C          = dword ptr -4Ch
.text$mn:000010E8 var_48          = dword ptr -48h
.text$mn:000010E8 var_2C          = dword ptr -2Ch
.text$mn:000010E8 var_10          = dword ptr -10h
.text$mn:000010E8 var_C           = dword ptr -0Ch
.text$mn:000010E8 var_4           = dword ptr -4
.text$mn:000010E8 this            = dword ptr  8
.text$mn:000010E8 hWnd            = dword ptr  0Ch
.text$mn:000010E8 arg_8           = dword ptr  10h
.text$mn:000010E8 arg_10          = dword ptr  18h
.text$mn:000010E8
.text$mn:000010E8                 push    ebp
.text$mn:000010E9                 mov     ebp, esp
.text$mn:000010EB                 push    0FFFFFFFFh
.text$mn:000010ED                 push    offset __ehhandler$?run@FileDialog@@IAGHPAUHWND__@@IIJ@Z
.text$mn:000010F2                 mov     eax, large fs:0
.text$mn:000010F8                 push    eax
.text$mn:000010F9                 sub     esp, 74h
.text$mn:000010FC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001101                 xor     eax, ebp
.text$mn:00001103                 mov     [ebp+var_10], eax
.text$mn:00001106                 push    eax
.text$mn:00001107                 lea     eax, [ebp+var_C]
.text$mn:0000110A                 mov     large fs:0, eax
.text$mn:00001110                 mov     eax, [ebp+arg_8]
.text$mn:00001113                 mov     [ebp+var_64], eax
.text$mn:00001116                 cmp     [ebp+var_64], 4Eh ; 'N'
.text$mn:0000111A                 jz      short loc_1121
.text$mn:0000111C                 jmp     loc_12D2
.text$mn:00001121 ; ---------------------------------------------------------------------------
.text$mn:00001121
.text$mn:00001121 loc_1121:                               ; CODE XREF: FileDialog::run(HWND__ *,uint,uint,long)+32j
.text$mn:00001121                 mov     ecx, [ebp+arg_10]
.text$mn:00001124                 mov     [ebp+var_78], ecx
.text$mn:00001127                 mov     edx, [ebp+var_78]
.text$mn:0000112A                 mov     eax, [edx+8]
.text$mn:0000112D                 mov     [ebp+var_4C], eax
.text$mn:00001130                 cmp     [ebp+var_4C], 0FFFFFDA1h
.text$mn:00001137                 jz      loc_1208
.text$mn:0000113D                 cmp     [ebp+var_4C], 0FFFFFDA2h
.text$mn:00001144                 jz      loc_1284
.text$mn:0000114A                 cmp     [ebp+var_4C], 0FFFFFDA7h
.text$mn:00001151                 jz      short loc_1158
.text$mn:00001153                 jmp     loc_12CE
.text$mn:00001158 ; ---------------------------------------------------------------------------
.text$mn:00001158
.text$mn:00001158 loc_1158:                               ; CODE XREF: FileDialog::run(HWND__ *,uint,uint,long)+69j
.text$mn:00001158                 mov     ecx, [ebp+this]
.text$mn:0000115B                 cmp     dword ptr [ecx+10B8h], 0FFFFFFFFh
.text$mn:00001162                 jnz     short loc_116E
.text$mn:00001164                 mov     eax, 1
.text$mn:00001169                 jmp     loc_12D4
.text$mn:0000116E ; ---------------------------------------------------------------------------
.text$mn:0000116E
.text$mn:0000116E loc_116E:                               ; CODE XREF: FileDialog::run(HWND__ *,uint,uint,long)+7Aj
.text$mn:0000116E                 mov     edx, dword ptr ds:?_dialogFileBoxId@FileDialog@@2HA ; int FileDialog::_dialogFileBoxId
.text$mn:00001174                 push    edx             ; nIDDlgItem
.text$mn:00001175                 mov     eax, [ebp+hWnd]
.text$mn:00001178                 push    eax             ; hWnd
.text$mn:00001179                 call    dword ptr ds:__imp__GetParent@4 ; GetParent(x)
.text$mn:0000117F                 push    eax             ; hDlg
.text$mn:00001180                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00001186                 mov     [ebp+var_80], eax
.text$mn:00001189                 push    470h            ; nIDDlgItem
.text$mn:0000118E                 mov     ecx, [ebp+hWnd]
.text$mn:00001191                 push    ecx             ; hWnd
.text$mn:00001192                 call    dword ptr ds:__imp__GetParent@4 ; GetParent(x)
.text$mn:00001198                 push    eax             ; hDlg
.text$mn:00001199                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:0000119F                 mov     [ebp+var_50], eax
.text$mn:000011A2                 push    0               ; lParam
.text$mn:000011A4                 mov     edx, [ebp+this]
.text$mn:000011A7                 mov     eax, [edx+10B8h]
.text$mn:000011AD                 push    eax             ; wParam
.text$mn:000011AE                 push    14Eh            ; Msg
.text$mn:000011B3                 mov     ecx, [ebp+var_50]
.text$mn:000011B6                 push    ecx             ; hWnd
.text$mn:000011B7                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000011BD                 mov     edx, [ebp+var_50]
.text$mn:000011C0                 push    edx             ; HWND
.text$mn:000011C1                 mov     eax, [ebp+var_80]
.text$mn:000011C4                 push    eax             ; hWnd
.text$mn:000011C5                 lea     ecx, [ebp+var_48]
.text$mn:000011C8                 push    ecx             ; int
.text$mn:000011C9                 call    ?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z ; addExt(HWND__ *,HWND__ *)
.text$mn:000011CE                 add     esp, 0Ch
.text$mn:000011D1                 mov     [ebp+var_5C], eax
.text$mn:000011D4                 mov     edx, [ebp+var_5C]
.text$mn:000011D7                 mov     [ebp+var_7C], edx
.text$mn:000011DA                 mov     [ebp+var_4], 0
.text$mn:000011E1                 mov     eax, [ebp+var_7C]
.text$mn:000011E4                 push    eax
.text$mn:000011E5                 mov     ecx, offset _currentExt
.text$mn:000011EA                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:000011EF                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000011F6                 lea     ecx, [ebp+var_48]
.text$mn:000011F9                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000011FE                 mov     eax, 1
.text$mn:00001203                 jmp     loc_12D4
.text$mn:00001208 ; ---------------------------------------------------------------------------
.text$mn:00001208
.text$mn:00001208 loc_1208:                               ; CODE XREF: FileDialog::run(HWND__ *,uint,uint,long)+4Fj
.text$mn:00001208                 mov     ecx, dword ptr ds:?_dialogFileBoxId@FileDialog@@2HA ; int FileDialog::_dialogFileBoxId
.text$mn:0000120E                 push    ecx             ; nIDDlgItem
.text$mn:0000120F                 mov     edx, [ebp+hWnd]
.text$mn:00001212                 push    edx             ; hWnd
.text$mn:00001213                 call    dword ptr ds:__imp__GetParent@4 ; GetParent(x)
.text$mn:00001219                 push    eax             ; hDlg
.text$mn:0000121A                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00001220                 mov     [ebp+var_74], eax
.text$mn:00001223                 push    470h            ; nIDDlgItem
.text$mn:00001228                 mov     eax, [ebp+hWnd]
.text$mn:0000122B                 push    eax             ; hWnd
.text$mn:0000122C                 call    dword ptr ds:__imp__GetParent@4 ; GetParent(x)
.text$mn:00001232                 push    eax             ; hDlg
.text$mn:00001233                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00001239                 mov     [ebp+var_54], eax
.text$mn:0000123C                 mov     ecx, [ebp+var_54]
.text$mn:0000123F                 push    ecx             ; HWND
.text$mn:00001240                 mov     edx, [ebp+var_74]
.text$mn:00001243                 push    edx             ; hWnd
.text$mn:00001244                 lea     eax, [ebp+var_2C]
.text$mn:00001247                 push    eax             ; int
.text$mn:00001248                 call    ?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z ; addExt(HWND__ *,HWND__ *)
.text$mn:0000124D                 add     esp, 0Ch
.text$mn:00001250                 mov     [ebp+var_6C], eax
.text$mn:00001253                 mov     ecx, [ebp+var_6C]
.text$mn:00001256                 mov     [ebp+var_58], ecx
.text$mn:00001259                 mov     [ebp+var_4], 1
.text$mn:00001260                 mov     edx, [ebp+var_58]
.text$mn:00001263                 push    edx
.text$mn:00001264                 mov     ecx, offset _currentExt
.text$mn:00001269                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000126E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001275                 lea     ecx, [ebp+var_2C]
.text$mn:00001278                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000127D                 mov     eax, 1
.text$mn:00001282                 jmp     short loc_12D4
.text$mn:00001284 ; ---------------------------------------------------------------------------
.text$mn:00001284
.text$mn:00001284 loc_1284:                               ; CODE XREF: FileDialog::run(HWND__ *,uint,uint,long)+5Cj
.text$mn:00001284                 push    470h            ; nIDDlgItem
.text$mn:00001289                 mov     eax, [ebp+hWnd]
.text$mn:0000128C                 push    eax             ; hWnd
.text$mn:0000128D                 call    dword ptr ds:__imp__GetParent@4 ; GetParent(x)
.text$mn:00001293                 push    eax             ; hDlg
.text$mn:00001294                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:0000129A                 mov     [ebp+var_60], eax
.text$mn:0000129D                 push    0               ; lParam
.text$mn:0000129F                 push    0               ; wParam
.text$mn:000012A1                 push    147h            ; Msg
.text$mn:000012A6                 mov     ecx, [ebp+var_60]
.text$mn:000012A9                 push    ecx             ; hWnd
.text$mn:000012AA                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000012B0                 mov     [ebp+var_68], eax
.text$mn:000012B3                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:000012B8                 mov     [ebp+var_70], eax
.text$mn:000012BB                 mov     edx, [ebp+var_68]
.text$mn:000012BE                 push    edx             ; int
.text$mn:000012BF                 mov     ecx, [ebp+var_70] ; this
.text$mn:000012C2                 call    ?setFileSaveDlgFilterIndex@NppParameters@@QAEXH@Z ; NppParameters::setFileSaveDlgFilterIndex(int)
.text$mn:000012C7                 mov     eax, 1
.text$mn:000012CC                 jmp     short loc_12D4
.text$mn:000012CE ; ---------------------------------------------------------------------------
.text$mn:000012CE
.text$mn:000012CE loc_12CE:                               ; CODE XREF: FileDialog::run(HWND__ *,uint,uint,long)+6Bj
.text$mn:000012CE                 xor     eax, eax
.text$mn:000012D0                 jmp     short loc_12D4
.text$mn:000012D2 ; ---------------------------------------------------------------------------
.text$mn:000012D2
.text$mn:000012D2 loc_12D2:                               ; CODE XREF: FileDialog::run(HWND__ *,uint,uint,long)+34j
.text$mn:000012D2                 xor     eax, eax
.text$mn:000012D4
.text$mn:000012D4 loc_12D4:                               ; CODE XREF: FileDialog::run(HWND__ *,uint,uint,long)+81j
.text$mn:000012D4                                         ; FileDialog::run(HWND__ *,uint,uint,long)+11Bj ...
.text$mn:000012D4                 mov     ecx, [ebp+var_C]
.text$mn:000012D7                 mov     large fs:0, ecx
.text$mn:000012DE                 pop     ecx
.text$mn:000012DF                 mov     ecx, [ebp+var_10]
.text$mn:000012E2                 xor     ecx, ebp
.text$mn:000012E4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000012E9                 mov     esp, ebp
.text$mn:000012EB                 pop     ebp
.text$mn:000012EC                 retn    14h
.text$mn:000012EC ?run@FileDialog@@IAGHPAUHWND__@@IIJ@Z endp
.text$mn:000012EC
.text$mn:000012EC ; ---------------------------------------------------------------------------
.text$mn:000012EF                 db 9 dup(0CCh)
.text$mn:000012F8
.text$mn:000012F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000012F8
.text$mn:000012F8 ; Attributes: bp-based frame
.text$mn:000012F8
.text$mn:000012F8 ; int __stdcall fileDlgProc(HWND hDlg, int, int, int)
.text$mn:000012F8 ?fileDlgProc@@YGJPAUHWND__@@IIJ@Z proc near
.text$mn:000012F8                                         ; DATA XREF: FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+ABo
.text$mn:000012F8
.text$mn:000012F8 var_25C         = dword ptr -25Ch
.text$mn:000012F8 var_258         = dword ptr -258h
.text$mn:000012F8 var_254         = dword ptr -254h
.text$mn:000012F8 var_250         = dword ptr -250h
.text$mn:000012F8 var_24C         = dword ptr -24Ch
.text$mn:000012F8 var_248         = dword ptr -248h
.text$mn:000012F8 var_244         = dword ptr -244h
.text$mn:000012F8 var_240         = dword ptr -240h
.text$mn:000012F8 var_23C         = dword ptr -23Ch
.text$mn:000012F8 hWnd            = dword ptr -238h
.text$mn:000012F8 var_234         = byte ptr -234h
.text$mn:000012F8 String          = word ptr -218h
.text$mn:000012F8 var_10          = dword ptr -10h
.text$mn:000012F8 var_C           = dword ptr -0Ch
.text$mn:000012F8 var_4           = dword ptr -4
.text$mn:000012F8 hDlg            = dword ptr  8
.text$mn:000012F8 arg_4           = dword ptr  0Ch
.text$mn:000012F8 arg_8           = dword ptr  10h
.text$mn:000012F8 arg_C           = dword ptr  14h
.text$mn:000012F8
.text$mn:000012F8                 push    ebp
.text$mn:000012F9                 mov     ebp, esp
.text$mn:000012FB                 push    0FFFFFFFFh
.text$mn:000012FD                 push    offset __ehhandler$?fileDlgProc@@YGJPAUHWND__@@IIJ@Z
.text$mn:00001302                 mov     eax, large fs:0
.text$mn:00001308                 push    eax
.text$mn:00001309                 sub     esp, 250h
.text$mn:0000130F                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001314                 xor     eax, ebp
.text$mn:00001316                 mov     [ebp+var_10], eax
.text$mn:00001319                 push    eax
.text$mn:0000131A                 lea     eax, [ebp+var_C]
.text$mn:0000131D                 mov     large fs:0, eax
.text$mn:00001323                 mov     eax, [ebp+arg_4]
.text$mn:00001326                 mov     [ebp+var_248], eax
.text$mn:0000132C                 cmp     [ebp+var_248], 111h
.text$mn:00001336                 jz      short loc_133D
.text$mn:00001338                 jmp     loc_14C1
.text$mn:0000133D ; ---------------------------------------------------------------------------
.text$mn:0000133D
.text$mn:0000133D loc_133D:                               ; CODE XREF: fileDlgProc(HWND__ *,uint,uint,long)+3Ej
.text$mn:0000133D                 mov     ecx, [ebp+arg_8]
.text$mn:00001340                 mov     [ebp+var_240], ecx
.text$mn:00001346                 cmp     [ebp+var_240], 1
.text$mn:0000134D                 jz      short loc_1354
.text$mn:0000134F                 jmp     loc_14C1
.text$mn:00001354 ; ---------------------------------------------------------------------------
.text$mn:00001354
.text$mn:00001354 loc_1354:                               ; CODE XREF: fileDlgProc(HWND__ *,uint,uint,long)+55j
.text$mn:00001354                 mov     edx, dword ptr ds:?_dialogFileBoxId@FileDialog@@2HA ; int FileDialog::_dialogFileBoxId
.text$mn:0000135A                 push    edx             ; nIDDlgItem
.text$mn:0000135B                 mov     eax, [ebp+hDlg]
.text$mn:0000135E                 push    eax             ; hDlg
.text$mn:0000135F                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00001365                 mov     [ebp+hWnd], eax
.text$mn:0000136B                 push    104h            ; nMaxCount
.text$mn:00001370                 lea     ecx, [ebp+String]
.text$mn:00001376                 push    ecx             ; lpString
.text$mn:00001377                 mov     edx, [ebp+hWnd]
.text$mn:0000137D                 push    edx             ; hWnd
.text$mn:0000137E                 call    dword ptr ds:__imp__GetWindowTextW@12 ; GetWindowTextW(x,x,x)
.text$mn:00001384                 mov     eax, 2
.text$mn:00001389                 imul    ecx, eax, 0
.text$mn:0000138C                 movzx   edx, [ebp+ecx+String]
.text$mn:00001394                 test    edx, edx
.text$mn:00001396                 jnz     short loc_13B5
.text$mn:00001398                 mov     eax, [ebp+arg_C]
.text$mn:0000139B                 push    eax
.text$mn:0000139C                 mov     ecx, [ebp+arg_8]
.text$mn:0000139F                 push    ecx
.text$mn:000013A0                 mov     edx, [ebp+arg_4]
.text$mn:000013A3                 push    edx
.text$mn:000013A4                 mov     eax, [ebp+hDlg]
.text$mn:000013A7                 push    eax
.text$mn:000013A8                 call    ds:_oldProc
.text$mn:000013AE                 jmp     loc_14D7
.text$mn:000013B3 ; ---------------------------------------------------------------------------
.text$mn:000013B3                 jmp     short loc_13E1
.text$mn:000013B5 ; ---------------------------------------------------------------------------
.text$mn:000013B5
.text$mn:000013B5 loc_13B5:                               ; CODE XREF: fileDlgProc(HWND__ *,uint,uint,long)+9Ej
.text$mn:000013B5                 lea     ecx, [ebp+String]
.text$mn:000013BB                 push    ecx             ; pszPath
.text$mn:000013BC                 call    dword ptr ds:__imp__PathIsDirectoryW@4 ; PathIsDirectoryW(x)
.text$mn:000013C2                 test    eax, eax
.text$mn:000013C4                 jz      short loc_13E1
.text$mn:000013C6                 mov     edx, [ebp+arg_C]
.text$mn:000013C9                 push    edx
.text$mn:000013CA                 mov     eax, [ebp+arg_8]
.text$mn:000013CD                 push    eax
.text$mn:000013CE                 mov     ecx, [ebp+arg_4]
.text$mn:000013D1                 push    ecx
.text$mn:000013D2                 mov     edx, [ebp+hDlg]
.text$mn:000013D5                 push    edx
.text$mn:000013D6                 call    ds:_oldProc
.text$mn:000013DC                 jmp     loc_14D7
.text$mn:000013E1 ; ---------------------------------------------------------------------------
.text$mn:000013E1
.text$mn:000013E1 loc_13E1:                               ; CODE XREF: fileDlgProc(HWND__ *,uint,uint,long)+BBj
.text$mn:000013E1                                         ; fileDlgProc(HWND__ *,uint,uint,long)+CCj
.text$mn:000013E1                 push    offset $SG125013 ; Str
.text$mn:000013E6                 push    offset _currentExt ; int
.text$mn:000013EB                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:000013F0                 add     esp, 8
.text$mn:000013F3                 movzx   eax, al
.text$mn:000013F6                 test    eax, eax
.text$mn:000013F8                 jz      loc_14A9
.text$mn:000013FE                 push    0
.text$mn:00001400                 sub     esp, 1Ch
.text$mn:00001403                 mov     ecx, esp
.text$mn:00001405                 mov     [ebp+var_24C], esp
.text$mn:0000140B                 push    offset _currentExt
.text$mn:00001410                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00001415                 mov     [ebp+var_23C], eax
.text$mn:0000141B                 mov     ecx, [ebp+var_23C]
.text$mn:00001421                 mov     [ebp+var_254], ecx
.text$mn:00001427                 mov     [ebp+var_4], 0
.text$mn:0000142E                 sub     esp, 1Ch
.text$mn:00001431                 mov     ecx, esp
.text$mn:00001433                 mov     [ebp+var_25C], esp
.text$mn:00001439                 lea     edx, [ebp+String]
.text$mn:0000143F                 push    edx             ; Str
.text$mn:00001440                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001445                 mov     [ebp+var_244], eax
.text$mn:0000144B                 mov     eax, [ebp+var_244]
.text$mn:00001451                 mov     [ebp+var_258], eax
.text$mn:00001457                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000145B                 lea     ecx, [ebp+var_234]
.text$mn:00001461                 push    ecx
.text$mn:00001462                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001469                 call    ?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z ; changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)
.text$mn:0000146E                 add     esp, 40h
.text$mn:00001471                 mov     [ebp+var_250], eax
.text$mn:00001477                 mov     [ebp+var_4], 2
.text$mn:0000147E                 lea     ecx, [ebp+var_234]
.text$mn:00001484                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001489                 push    eax             ; lpString
.text$mn:0000148A                 mov     edx, [ebp+hWnd]
.text$mn:00001490                 push    edx             ; hWnd
.text$mn:00001491                 call    dword ptr ds:__imp__SetWindowTextW@8 ; SetWindowTextW(x,x)
.text$mn:00001497                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000149E                 lea     ecx, [ebp+var_234]
.text$mn:000014A4                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000014A9
.text$mn:000014A9 loc_14A9:                               ; CODE XREF: fileDlgProc(HWND__ *,uint,uint,long)+100j
.text$mn:000014A9                 mov     eax, [ebp+arg_C]
.text$mn:000014AC                 push    eax
.text$mn:000014AD                 mov     ecx, [ebp+arg_8]
.text$mn:000014B0                 push    ecx
.text$mn:000014B1                 mov     edx, [ebp+arg_4]
.text$mn:000014B4                 push    edx
.text$mn:000014B5                 mov     eax, [ebp+hDlg]
.text$mn:000014B8                 push    eax
.text$mn:000014B9                 call    ds:_oldProc
.text$mn:000014BF                 jmp     short loc_14D7
.text$mn:000014C1 ; ---------------------------------------------------------------------------
.text$mn:000014C1
.text$mn:000014C1 loc_14C1:                               ; CODE XREF: fileDlgProc(HWND__ *,uint,uint,long)+40j
.text$mn:000014C1                                         ; fileDlgProc(HWND__ *,uint,uint,long)+57j
.text$mn:000014C1                 mov     ecx, [ebp+arg_C]
.text$mn:000014C4                 push    ecx
.text$mn:000014C5                 mov     edx, [ebp+arg_8]
.text$mn:000014C8                 push    edx
.text$mn:000014C9                 mov     eax, [ebp+arg_4]
.text$mn:000014CC                 push    eax
.text$mn:000014CD                 mov     ecx, [ebp+hDlg]
.text$mn:000014D0                 push    ecx
.text$mn:000014D1                 call    ds:_oldProc
.text$mn:000014D7
.text$mn:000014D7 loc_14D7:                               ; CODE XREF: fileDlgProc(HWND__ *,uint,uint,long)+B6j
.text$mn:000014D7                                         ; fileDlgProc(HWND__ *,uint,uint,long)+E4j ...
.text$mn:000014D7                 mov     ecx, [ebp+var_C]
.text$mn:000014DA                 mov     large fs:0, ecx
.text$mn:000014E1                 pop     ecx
.text$mn:000014E2                 mov     ecx, [ebp+var_10]
.text$mn:000014E5                 xor     ecx, ebp
.text$mn:000014E7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000014EC                 mov     esp, ebp
.text$mn:000014EE                 pop     ebp
.text$mn:000014EF                 retn    10h
.text$mn:000014EF ?fileDlgProc@@YGJPAUHWND__@@IIJ@Z endp
.text$mn:000014EF
.text$mn:000014EF ; ---------------------------------------------------------------------------
.text$mn:000014F2                 align 8
.text$mn:000014F8
.text$mn:000014F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000014F8
.text$mn:000014F8 ; Attributes: bp-based frame
.text$mn:000014F8
.text$mn:000014F8 ; wchar_t * __cdecl get1stExt(wchar_t *)
.text$mn:000014F8 ?get1stExt@@YAPA_WPA_W@Z proc near      ; CODE XREF: addExt(HWND__ *,HWND__ *)+DAp
.text$mn:000014F8
.text$mn:000014F8 var_8           = dword ptr -8
.text$mn:000014F8 var_4           = dword ptr -4
.text$mn:000014F8 arg_0           = dword ptr  8
.text$mn:000014F8
.text$mn:000014F8                 push    ebp
.text$mn:000014F9                 mov     ebp, esp
.text$mn:000014FB                 sub     esp, 8
.text$mn:000014FE                 mov     eax, [ebp+arg_0]
.text$mn:00001501                 mov     [ebp+var_4], eax
.text$mn:00001504                 jmp     short loc_150F
.text$mn:00001506 ; ---------------------------------------------------------------------------
.text$mn:00001506
.text$mn:00001506 loc_1506:                               ; CODE XREF: get1stExt(wchar_t *)+22j
.text$mn:00001506                 mov     ecx, [ebp+var_4]
.text$mn:00001509                 add     ecx, 2
.text$mn:0000150C                 mov     [ebp+var_4], ecx
.text$mn:0000150F
.text$mn:0000150F loc_150F:                               ; CODE XREF: get1stExt(wchar_t *)+Cj
.text$mn:0000150F                 mov     edx, [ebp+var_4]
.text$mn:00001512                 movzx   eax, word ptr [edx]
.text$mn:00001515                 cmp     eax, 2Eh ; '.'
.text$mn:00001518                 jz      short loc_151C
.text$mn:0000151A                 jmp     short loc_1506
.text$mn:0000151C ; ---------------------------------------------------------------------------
.text$mn:0000151C
.text$mn:0000151C loc_151C:                               ; CODE XREF: get1stExt(wchar_t *)+20j
.text$mn:0000151C                 mov     ecx, [ebp+var_4]
.text$mn:0000151F                 add     ecx, 2
.text$mn:00001522                 mov     [ebp+var_4], ecx
.text$mn:00001525                 mov     edx, [ebp+var_4]
.text$mn:00001528                 mov     [ebp+var_8], edx
.text$mn:0000152B                 jmp     short loc_1536
.text$mn:0000152D ; ---------------------------------------------------------------------------
.text$mn:0000152D
.text$mn:0000152D loc_152D:                               ; CODE XREF: get1stExt(wchar_t *)+54j
.text$mn:0000152D                 mov     eax, [ebp+var_8]
.text$mn:00001530                 add     eax, 2
.text$mn:00001533                 mov     [ebp+var_8], eax
.text$mn:00001536
.text$mn:00001536 loc_1536:                               ; CODE XREF: get1stExt(wchar_t *)+33j
.text$mn:00001536                 mov     ecx, [ebp+var_8]
.text$mn:00001539                 movzx   edx, word ptr [ecx]
.text$mn:0000153C                 cmp     edx, 3Bh ; ';'
.text$mn:0000153F                 jz      short loc_154E
.text$mn:00001541                 mov     eax, [ebp+var_8]
.text$mn:00001544                 movzx   ecx, word ptr [eax]
.text$mn:00001547                 cmp     ecx, 29h ; ')'
.text$mn:0000154A                 jz      short loc_154E
.text$mn:0000154C                 jmp     short loc_152D
.text$mn:0000154E ; ---------------------------------------------------------------------------
.text$mn:0000154E
.text$mn:0000154E loc_154E:                               ; CODE XREF: get1stExt(wchar_t *)+47j
.text$mn:0000154E                                         ; get1stExt(wchar_t *)+52j
.text$mn:0000154E                 xor     edx, edx
.text$mn:00001550                 mov     eax, [ebp+var_8]
.text$mn:00001553                 mov     [eax], dx
.text$mn:00001556                 mov     ecx, [ebp+var_4]
.text$mn:00001559                 movzx   edx, word ptr [ecx]
.text$mn:0000155C                 cmp     edx, 2Ah ; '*'
.text$mn:0000155F                 jnz     short loc_1569
.text$mn:00001561                 xor     eax, eax
.text$mn:00001563                 mov     ecx, [ebp+var_4]
.text$mn:00001566                 mov     [ecx], ax
.text$mn:00001569
.text$mn:00001569 loc_1569:                               ; CODE XREF: get1stExt(wchar_t *)+67j
.text$mn:00001569                 mov     eax, [ebp+var_4]
.text$mn:0000156C                 mov     esp, ebp
.text$mn:0000156E                 pop     ebp
.text$mn:0000156F                 retn
.text$mn:0000156F ?get1stExt@@YAPA_WPA_W@Z endp
.text$mn:0000156F
.text$mn:0000156F ; ---------------------------------------------------------------------------
.text$mn:00001570                 db 8 dup(0CCh)
.text$mn:00001578
.text$mn:00001578 ; =============== S U B R O U T I N E =======================================
.text$mn:00001578
.text$mn:00001578 ; Attributes: bp-based frame
.text$mn:00001578
.text$mn:00001578 ; int __cdecl addExt(int, HWND hWnd, HWND)
.text$mn:00001578 ?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z proc near
.text$mn:00001578                                         ; CODE XREF: FileDialog::run(HWND__ *,uint,uint,long)+E1p
.text$mn:00001578                                         ; FileDialog::run(HWND__ *,uint,uint,long)+160p
.text$mn:00001578
.text$mn:00001578 var_288         = dword ptr -288h
.text$mn:00001578 var_284         = dword ptr -284h
.text$mn:00001578 var_280         = dword ptr -280h
.text$mn:00001578 var_27C         = dword ptr -27Ch
.text$mn:00001578 var_278         = dword ptr -278h
.text$mn:00001578 var_274         = dword ptr -274h
.text$mn:00001578 var_270         = dword ptr -270h
.text$mn:00001578 var_26C         = dword ptr -26Ch
.text$mn:00001578 var_268         = dword ptr -268h
.text$mn:00001578 var_264         = dword ptr -264h
.text$mn:00001578 Str             = dword ptr -260h
.text$mn:00001578 wParam          = dword ptr -25Ch
.text$mn:00001578 var_258         = dword ptr -258h
.text$mn:00001578 lParam          = dword ptr -254h
.text$mn:00001578 var_250         = byte ptr -250h
.text$mn:00001578 var_234         = byte ptr -234h
.text$mn:00001578 String          = word ptr -218h
.text$mn:00001578 var_10          = dword ptr -10h
.text$mn:00001578 var_C           = dword ptr -0Ch
.text$mn:00001578 var_4           = dword ptr -4
.text$mn:00001578 arg_0           = dword ptr  8
.text$mn:00001578 hWnd            = dword ptr  0Ch
.text$mn:00001578 arg_8           = dword ptr  10h
.text$mn:00001578
.text$mn:00001578                 push    ebp
.text$mn:00001579                 mov     ebp, esp
.text$mn:0000157B                 push    0FFFFFFFFh
.text$mn:0000157D                 push    offset __ehhandler$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z
.text$mn:00001582                 mov     eax, large fs:0
.text$mn:00001588                 push    eax
.text$mn:00001589                 sub     esp, 27Ch
.text$mn:0000158F                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001594                 xor     eax, ebp
.text$mn:00001596                 mov     [ebp+var_10], eax
.text$mn:00001599                 push    eax
.text$mn:0000159A                 lea     eax, [ebp+var_C]
.text$mn:0000159D                 mov     large fs:0, eax
.text$mn:000015A3                 mov     [ebp+var_258], 0
.text$mn:000015AD                 push    104h            ; nMaxCount
.text$mn:000015B2                 lea     eax, [ebp+String]
.text$mn:000015B8                 push    eax             ; lpString
.text$mn:000015B9                 mov     ecx, [ebp+hWnd]
.text$mn:000015BC                 push    ecx             ; hWnd
.text$mn:000015BD                 call    dword ptr ds:__imp__GetWindowTextW@12 ; GetWindowTextW(x,x,x)
.text$mn:000015C3                 push    0               ; lParam
.text$mn:000015C5                 push    0               ; wParam
.text$mn:000015C7                 push    147h            ; Msg
.text$mn:000015CC                 mov     edx, [ebp+arg_8]
.text$mn:000015CF                 push    edx             ; hWnd
.text$mn:000015D0                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000015D6                 mov     [ebp+wParam], eax
.text$mn:000015DC                 push    0               ; lParam
.text$mn:000015DE                 mov     eax, [ebp+wParam]
.text$mn:000015E4                 push    eax             ; wParam
.text$mn:000015E5                 push    149h            ; Msg
.text$mn:000015EA                 mov     ecx, [ebp+arg_8]
.text$mn:000015ED                 push    ecx             ; hWnd
.text$mn:000015EE                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000015F4                 mov     [ebp+var_268], eax
.text$mn:000015FA                 mov     eax, [ebp+var_268]
.text$mn:00001600                 add     eax, 1
.text$mn:00001603                 xor     ecx, ecx
.text$mn:00001605                 mov     edx, 2
.text$mn:0000160A                 mul     edx
.text$mn:0000160C                 seto    cl
.text$mn:0000160F                 neg     ecx
.text$mn:00001611                 or      ecx, eax
.text$mn:00001613                 push    ecx             ; unsigned int
.text$mn:00001614                 call    ??_U@YAPAXI@Z   ; operator new[](uint)
.text$mn:00001619                 add     esp, 4
.text$mn:0000161C                 mov     [ebp+var_26C], eax
.text$mn:00001622                 mov     eax, [ebp+var_26C]
.text$mn:00001628                 mov     [ebp+lParam], eax
.text$mn:0000162E                 mov     ecx, [ebp+lParam]
.text$mn:00001634                 push    ecx             ; lParam
.text$mn:00001635                 mov     edx, [ebp+wParam]
.text$mn:0000163B                 push    edx             ; wParam
.text$mn:0000163C                 push    148h            ; Msg
.text$mn:00001641                 mov     eax, [ebp+arg_8]
.text$mn:00001644                 push    eax             ; hWnd
.text$mn:00001645                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000164B                 mov     ecx, [ebp+lParam]
.text$mn:00001651                 push    ecx
.text$mn:00001652                 call    ?get1stExt@@YAPA_WPA_W@Z ; get1stExt(wchar_t *)
.text$mn:00001657                 add     esp, 4
.text$mn:0000165A                 mov     [ebp+Str], eax
.text$mn:00001660                 mov     edx, 2
.text$mn:00001665                 imul    eax, edx, 0
.text$mn:00001668                 movzx   ecx, [ebp+eax+String]
.text$mn:00001670                 test    ecx, ecx
.text$mn:00001672                 jz      loc_171C
.text$mn:00001678                 push    1
.text$mn:0000167A                 sub     esp, 1Ch
.text$mn:0000167D                 mov     ecx, esp
.text$mn:0000167F                 mov     [ebp+var_288], esp
.text$mn:00001685                 mov     edx, [ebp+Str]
.text$mn:0000168B                 push    edx             ; Str
.text$mn:0000168C                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001691                 mov     [ebp+var_274], eax
.text$mn:00001697                 mov     eax, [ebp+var_274]
.text$mn:0000169D                 mov     [ebp+var_27C], eax
.text$mn:000016A3                 mov     [ebp+var_4], 1
.text$mn:000016AA                 sub     esp, 1Ch
.text$mn:000016AD                 mov     ecx, esp
.text$mn:000016AF                 mov     [ebp+var_280], esp
.text$mn:000016B5                 lea     edx, [ebp+String]
.text$mn:000016BB                 push    edx             ; Str
.text$mn:000016BC                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000016C1                 mov     [ebp+var_270], eax
.text$mn:000016C7                 mov     eax, [ebp+var_270]
.text$mn:000016CD                 mov     [ebp+var_278], eax
.text$mn:000016D3                 mov     byte ptr [ebp+var_4], 2
.text$mn:000016D7                 lea     ecx, [ebp+var_234]
.text$mn:000016DD                 push    ecx
.text$mn:000016DE                 mov     byte ptr [ebp+var_4], 0
.text$mn:000016E2                 call    ?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z ; changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)
.text$mn:000016E7                 add     esp, 40h
.text$mn:000016EA                 mov     [ebp+var_284], eax
.text$mn:000016F0                 mov     [ebp+var_4], 3
.text$mn:000016F7                 lea     ecx, [ebp+var_234]
.text$mn:000016FD                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001702                 push    eax             ; lpString
.text$mn:00001703                 mov     edx, [ebp+hWnd]
.text$mn:00001706                 push    edx             ; hWnd
.text$mn:00001707                 call    dword ptr ds:__imp__SetWindowTextW@8 ; SetWindowTextW(x,x)
.text$mn:0000170D                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001711                 lea     ecx, [ebp+var_234]
.text$mn:00001717                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000171C
.text$mn:0000171C loc_171C:                               ; CODE XREF: addExt(HWND__ *,HWND__ *)+FAj
.text$mn:0000171C                 mov     eax, [ebp+Str]
.text$mn:00001722                 push    eax             ; Str
.text$mn:00001723                 lea     ecx, [ebp+var_250]
.text$mn:00001729                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:0000172E                 mov     [ebp+var_4], 4
.text$mn:00001735                 mov     ecx, [ebp+lParam]
.text$mn:0000173B                 mov     [ebp+var_264], ecx
.text$mn:00001741                 mov     edx, [ebp+var_264]
.text$mn:00001747                 push    edx             ; void *
.text$mn:00001748                 call    ??_V@YAXPAX@Z   ; operator delete[](void *)
.text$mn:0000174D                 add     esp, 4
.text$mn:00001750                 lea     eax, [ebp+var_250]
.text$mn:00001756                 push    eax
.text$mn:00001757                 mov     ecx, [ebp+arg_0]
.text$mn:0000175A                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000175F                 mov     ecx, [ebp+var_258]
.text$mn:00001765                 or      ecx, 1
.text$mn:00001768                 mov     [ebp+var_258], ecx
.text$mn:0000176E                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001772                 lea     ecx, [ebp+var_250]
.text$mn:00001778                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000177D                 mov     eax, [ebp+arg_0]
.text$mn:00001780                 mov     ecx, [ebp+var_C]
.text$mn:00001783                 mov     large fs:0, ecx
.text$mn:0000178A                 pop     ecx
.text$mn:0000178B                 mov     ecx, [ebp+var_10]
.text$mn:0000178E                 xor     ecx, ebp
.text$mn:00001790                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00001795                 mov     esp, ebp
.text$mn:00001797                 pop     ebp
.text$mn:00001798                 retn
.text$mn:00001798 ?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z endp
.text$mn:00001798
.text$mn:00001798 ; ---------------------------------------------------------------------------
.text$mn:00001799                 align 4
.text$mn:00001799 _text$mn        ends
.text$mn:00001799
.text$x:0000179C ; ===========================================================================
.text$x:0000179C
.text$x:0000179C ; Segment type: Pure code
.text$x:0000179C ; Segment permissions: Read/Execute
.text$x:0000179C _text$x         segment para public 'CODE' use32
.text$x:0000179C                 assume cs:_text$x
.text$x:0000179C                 ;org 179Ch
.text$x:0000179C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000179C
.text$x:0000179C ; =============== S U B R O U T I N E =======================================
.text$x:0000179C
.text$x:0000179C
.text$x:0000179C __unwindfunclet$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z$0 proc near
.text$x:0000179C                                         ; DATA XREF: .xdata$x:00007D34o
.text$x:0000179C                 lea     ecx, [ebp+28h]
.text$x:0000179F                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000179F __unwindfunclet$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z$0 endp
.text$x:0000179F
.text$x:000017A4
.text$x:000017A4 ; =============== S U B R O U T I N E =======================================
.text$x:000017A4
.text$x:000017A4
.text$x:000017A4 __unwindfunclet$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z$1 proc near
.text$x:000017A4                                         ; DATA XREF: .xdata$x:00007D3Co
.text$x:000017A4                 lea     ecx, [ebp+0Ch]
.text$x:000017A7                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000017A7 __unwindfunclet$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z$1 endp
.text$x:000017A7
.text$x:000017AC
.text$x:000017AC ; =============== S U B R O U T I N E =======================================
.text$x:000017AC
.text$x:000017AC
.text$x:000017AC __unwindfunclet$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z$2 proc near
.text$x:000017AC                                         ; DATA XREF: .xdata$x:00007D2Co
.text$x:000017AC                 mov     eax, [ebp-4Ch]
.text$x:000017AF                 and     eax, 1
.text$x:000017B2                 jz      locret_17C4
.text$x:000017B8                 and     dword ptr [ebp-4Ch], 0FFFFFFFEh
.text$x:000017BC                 mov     ecx, [ebp+8]
.text$x:000017BF                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000017C4 ; ---------------------------------------------------------------------------
.text$x:000017C4
.text$x:000017C4 locret_17C4:                            ; CODE XREF: __unwindfunclet$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z$2+6j
.text$x:000017C4                 retn
.text$x:000017C4 __unwindfunclet$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z$2 endp
.text$x:000017C4
.text$x:000017C5
.text$x:000017C5 ; =============== S U B R O U T I N E =======================================
.text$x:000017C5
.text$x:000017C5
.text$x:000017C5 __unwindfunclet$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z$3 proc near
.text$x:000017C5                                         ; DATA XREF: .xdata$x:00007D44o
.text$x:000017C5                 lea     ecx, [ebp-2Ch]
.text$x:000017C8                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000017C8 __unwindfunclet$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z$3 endp
.text$x:000017C8
.text$x:000017CD
.text$x:000017CD ; =============== S U B R O U T I N E =======================================
.text$x:000017CD
.text$x:000017CD
.text$x:000017CD __unwindfunclet$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z$4 proc near
.text$x:000017CD                                         ; DATA XREF: .xdata$x:00007D4Co
.text$x:000017CD                 lea     ecx, [ebp-48h]
.text$x:000017D0                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000017D0 __unwindfunclet$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z$4 endp
.text$x:000017D0
.text$x:000017D5
.text$x:000017D5 ; =============== S U B R O U T I N E =======================================
.text$x:000017D5
.text$x:000017D5
.text$x:000017D5 __ehhandler$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z proc near
.text$x:000017D5                                         ; DATA XREF: changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+5o
.text$x:000017D5
.text$x:000017D5 arg_4           = dword ptr  8
.text$x:000017D5
.text$x:000017D5                 mov     edx, [esp+arg_4]
.text$x:000017D9                 lea     eax, [edx+0Ch]
.text$x:000017DC                 mov     ecx, [edx-54h]
.text$x:000017DF                 xor     ecx, eax
.text$x:000017E1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000017E6                 mov     ecx, [edx-4]
.text$x:000017E9                 xor     ecx, eax
.text$x:000017EB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000017F0                 mov     eax, offset __ehfuncinfo$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z
.text$x:000017F5                 jmp     ___CxxFrameHandler3
.text$x:000017F5 __ehhandler$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z endp
.text$x:000017F5
.text$x:000017FA
.text$x:000017FA ; =============== S U B R O U T I N E =======================================
.text$x:000017FA
.text$x:000017FA
.text$x:000017FA __unwindfunclet$??0FileDialog@@QAE@PAUHWND__@@PAUHINSTANCE__@@@Z$0 proc near
.text$x:000017FA                                         ; DATA XREF: .xdata$x:00007A90o
.text$x:000017FA                 mov     ecx, [ebp-10h]
.text$x:000017FD                 add     ecx, 1048h
.text$x:00001803                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00001803 __unwindfunclet$??0FileDialog@@QAE@PAUHWND__@@PAUHINSTANCE__@@@Z$0 endp
.text$x:00001803
.text$x:00001808
.text$x:00001808 ; =============== S U B R O U T I N E =======================================
.text$x:00001808
.text$x:00001808
.text$x:00001808 __ehhandler$??0FileDialog@@QAE@PAUHWND__@@PAUHINSTANCE__@@@Z proc near
.text$x:00001808                                         ; DATA XREF: FileDialog::FileDialog(HWND__ *,HINSTANCE__ *)+5o
.text$x:00001808
.text$x:00001808 arg_4           = dword ptr  8
.text$x:00001808
.text$x:00001808                 mov     edx, [esp+arg_4]
.text$x:0000180C                 lea     eax, [edx+0Ch]
.text$x:0000180F                 mov     ecx, [edx-8]
.text$x:00001812                 xor     ecx, eax
.text$x:00001814                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001819                 mov     eax, offset __ehfuncinfo$??0FileDialog@@QAE@PAUHWND__@@PAUHINSTANCE__@@@Z
.text$x:0000181E                 jmp     ___CxxFrameHandler3
.text$x:0000181E __ehhandler$??0FileDialog@@QAE@PAUHWND__@@PAUHINSTANCE__@@@Z endp
.text$x:0000181E
.text$x:00001823
.text$x:00001823 ; =============== S U B R O U T I N E =======================================
.text$x:00001823
.text$x:00001823
.text$x:00001823 __unwindfunclet$??1FileDialog@@QAE@XZ$0 proc near
.text$x:00001823                                         ; DATA XREF: .xdata$x:00007A88o
.text$x:00001823                 mov     ecx, [ebp-10h]
.text$x:00001826                 add     ecx, 1048h
.text$x:0000182C                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:0000182C __unwindfunclet$??1FileDialog@@QAE@XZ$0 endp
.text$x:0000182C
.text$x:00001831
.text$x:00001831 ; =============== S U B R O U T I N E =======================================
.text$x:00001831
.text$x:00001831
.text$x:00001831 __ehhandler$??1FileDialog@@QAE@XZ proc near
.text$x:00001831                                         ; DATA XREF: FileDialog::~FileDialog(void)+5o
.text$x:00001831
.text$x:00001831 arg_4           = dword ptr  8
.text$x:00001831
.text$x:00001831                 mov     edx, [esp+arg_4]
.text$x:00001835                 lea     eax, [edx+0Ch]
.text$x:00001838                 mov     ecx, [edx-0Ch]
.text$x:0000183B                 xor     ecx, eax
.text$x:0000183D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001842                 mov     eax, offset __ehfuncinfo$??1FileDialog@@QAE@XZ
.text$x:00001847                 jmp     ___CxxFrameHandler3
.text$x:00001847 __ehhandler$??1FileDialog@@QAE@XZ endp
.text$x:00001847
.text$x:0000184C
.text$x:0000184C ; =============== S U B R O U T I N E =======================================
.text$x:0000184C
.text$x:0000184C
.text$x:0000184C __unwindfunclet$?setExtFilter@FileDialog@@QAAXPB_W0ZZ$0 proc near
.text$x:0000184C                                         ; DATA XREF: .xdata$x:00007AB8o
.text$x:0000184C                 lea     ecx, [ebp-2Ch]
.text$x:0000184F                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000184F __unwindfunclet$?setExtFilter@FileDialog@@QAAXPB_W0ZZ$0 endp
.text$x:0000184F
.text$x:00001854
.text$x:00001854 ; =============== S U B R O U T I N E =======================================
.text$x:00001854
.text$x:00001854
.text$x:00001854 __unwindfunclet$?setExtFilter@FileDialog@@QAAXPB_W0ZZ$1 proc near
.text$x:00001854                                         ; DATA XREF: .xdata$x:00007AC0o
.text$x:00001854                 lea     ecx, [ebp-48h]
.text$x:00001857                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00001857 __unwindfunclet$?setExtFilter@FileDialog@@QAAXPB_W0ZZ$1 endp
.text$x:00001857
.text$x:0000185C
.text$x:0000185C ; =============== S U B R O U T I N E =======================================
.text$x:0000185C
.text$x:0000185C
.text$x:0000185C __ehhandler$?setExtFilter@FileDialog@@QAAXPB_W0ZZ proc near
.text$x:0000185C                                         ; DATA XREF: FileDialog::setExtFilter(wchar_t const *,wchar_t const *,...)+5o
.text$x:0000185C
.text$x:0000185C arg_4           = dword ptr  8
.text$x:0000185C
.text$x:0000185C                 mov     edx, [esp+arg_4]
.text$x:00001860                 lea     eax, [edx+0Ch]
.text$x:00001863                 mov     ecx, [edx-50h]
.text$x:00001866                 xor     ecx, eax
.text$x:00001868                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000186D                 mov     ecx, [edx-4]
.text$x:00001870                 xor     ecx, eax
.text$x:00001872                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001877                 mov     eax, offset __ehfuncinfo$?setExtFilter@FileDialog@@QAAXPB_W0ZZ
.text$x:0000187C                 jmp     ___CxxFrameHandler3
.text$x:0000187C __ehhandler$?setExtFilter@FileDialog@@QAAXPB_W0ZZ endp
.text$x:0000187C
.text$x:00001881
.text$x:00001881 ; =============== S U B R O U T I N E =======================================
.text$x:00001881
.text$x:00001881
.text$x:00001881 __unwindfunclet$?setExtsFilter@FileDialog@@QAEHPB_W0@Z$0 proc near
.text$x:00001881                                         ; DATA XREF: .xdata$x:00007A80o
.text$x:00001881                 lea     ecx, [ebp-2Ch]
.text$x:00001884                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00001884 __unwindfunclet$?setExtsFilter@FileDialog@@QAEHPB_W0@Z$0 endp
.text$x:00001884
.text$x:00001889
.text$x:00001889 ; =============== S U B R O U T I N E =======================================
.text$x:00001889
.text$x:00001889
.text$x:00001889 __ehhandler$?setExtsFilter@FileDialog@@QAEHPB_W0@Z proc near
.text$x:00001889                                         ; DATA XREF: FileDialog::setExtsFilter(wchar_t const *,wchar_t const *)+5o
.text$x:00001889
.text$x:00001889 arg_4           = dword ptr  8
.text$x:00001889
.text$x:00001889                 mov     edx, [esp+arg_4]
.text$x:0000188D                 lea     eax, [edx+0Ch]
.text$x:00001890                 mov     ecx, [edx-50h]
.text$x:00001893                 xor     ecx, eax
.text$x:00001895                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000189A                 mov     ecx, [edx-4]
.text$x:0000189D                 xor     ecx, eax
.text$x:0000189F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000018A4                 mov     eax, offset __ehfuncinfo$?setExtsFilter@FileDialog@@QAEHPB_W0@Z
.text$x:000018A9                 jmp     ___CxxFrameHandler3
.text$x:000018A9 __ehhandler$?setExtsFilter@FileDialog@@QAEHPB_W0@Z endp
.text$x:000018A9
.text$x:000018AE
.text$x:000018AE ; =============== S U B R O U T I N E =======================================
.text$x:000018AE
.text$x:000018AE
.text$x:000018AE __unwindfunclet$?doSaveDlg@FileDialog@@QAEPA_WXZ$3 proc near
.text$x:000018AE                                         ; DATA XREF: .xdata$x:00007B30o
.text$x:000018AE                 lea     ecx, [ebp-238h] ; this
.text$x:000018B4                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:000018B4 __unwindfunclet$?doSaveDlg@FileDialog@@QAEPA_WXZ$3 endp
.text$x:000018B4
.text$x:000018B9
.text$x:000018B9 ; =============== S U B R O U T I N E =======================================
.text$x:000018B9
.text$x:000018B9
.text$x:000018B9 __ehhandler$?doSaveDlg@FileDialog@@QAEPA_WXZ proc near
.text$x:000018B9                                         ; DATA XREF: FileDialog::doSaveDlg(void)+5o
.text$x:000018B9
.text$x:000018B9 arg_4           = dword ptr  8
.text$x:000018B9
.text$x:000018B9                 mov     edx, [esp+arg_4]
.text$x:000018BD                 lea     eax, [edx+0Ch]
.text$x:000018C0                 mov     ecx, [edx-23Ch]
.text$x:000018C6                 xor     ecx, eax
.text$x:000018C8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000018CD                 mov     ecx, [edx-8]
.text$x:000018D0                 xor     ecx, eax
.text$x:000018D2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000018D7                 mov     eax, offset __ehfuncinfo$?doSaveDlg@FileDialog@@QAEPA_WXZ
.text$x:000018DC                 jmp     ___CxxFrameHandler3
.text$x:000018DC __ehhandler$?doSaveDlg@FileDialog@@QAEPA_WXZ endp
.text$x:000018DC
.text$x:000018E1
.text$x:000018E1 ; =============== S U B R O U T I N E =======================================
.text$x:000018E1
.text$x:000018E1
.text$x:000018E1 __unwindfunclet$?doOpenMultiFilesDlg@FileDialog@@QAEPAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ$0 proc near
.text$x:000018E1                                         ; DATA XREF: .xdata$x:00007AA8o
.text$x:000018E1                 lea     ecx, [ebp-458h]
.text$x:000018E7                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000018E7 __unwindfunclet$?doOpenMultiFilesDlg@FileDialog@@QAEPAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ$0 endp
.text$x:000018E7
.text$x:000018EC
.text$x:000018EC ; =============== S U B R O U T I N E =======================================
.text$x:000018EC
.text$x:000018EC
.text$x:000018EC __unwindfunclet$?doOpenMultiFilesDlg@FileDialog@@QAEPAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ$1 proc near
.text$x:000018EC                                         ; DATA XREF: .xdata$x:00007AB0o
.text$x:000018EC                 lea     ecx, [ebp-43Ch]
.text$x:000018F2                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000018F2 __unwindfunclet$?doOpenMultiFilesDlg@FileDialog@@QAEPAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ$1 endp
.text$x:000018F2
.text$x:000018F7
.text$x:000018F7 ; =============== S U B R O U T I N E =======================================
.text$x:000018F7
.text$x:000018F7
.text$x:000018F7 __ehhandler$?doOpenMultiFilesDlg@FileDialog@@QAEPAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ proc near
.text$x:000018F7                                         ; DATA XREF: FileDialog::doOpenMultiFilesDlg(void)+5o
.text$x:000018F7
.text$x:000018F7 arg_4           = dword ptr  8
.text$x:000018F7
.text$x:000018F7                 mov     edx, [esp+arg_4]
.text$x:000018FB                 lea     eax, [edx+0Ch]
.text$x:000018FE                 mov     ecx, [edx-478h]
.text$x:00001904                 xor     ecx, eax
.text$x:00001906                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000190B                 mov     ecx, [edx-4]
.text$x:0000190E                 xor     ecx, eax
.text$x:00001910                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001915                 mov     eax, offset __ehfuncinfo$?doOpenMultiFilesDlg@FileDialog@@QAEPAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ
.text$x:0000191A                 jmp     ___CxxFrameHandler3
.text$x:0000191A __ehhandler$?doOpenMultiFilesDlg@FileDialog@@QAEPAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ endp
.text$x:0000191A
.text$x:0000191F
.text$x:0000191F ; =============== S U B R O U T I N E =======================================
.text$x:0000191F
.text$x:0000191F
.text$x:0000191F __unwindfunclet$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ$3 proc near
.text$x:0000191F                                         ; DATA XREF: .xdata$x:00007B18o
.text$x:0000191F                 lea     ecx, [ebp-238h] ; this
.text$x:00001925                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:00001925 __unwindfunclet$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ$3 endp
.text$x:00001925
.text$x:0000192A
.text$x:0000192A ; =============== S U B R O U T I N E =======================================
.text$x:0000192A
.text$x:0000192A
.text$x:0000192A __ehhandler$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ proc near
.text$x:0000192A                                         ; DATA XREF: FileDialog::doOpenSingleFileDlg(void)+5o
.text$x:0000192A
.text$x:0000192A arg_4           = dword ptr  8
.text$x:0000192A
.text$x:0000192A                 mov     edx, [esp+arg_4]
.text$x:0000192E                 lea     eax, [edx+0Ch]
.text$x:00001931                 mov     ecx, [edx-23Ch]
.text$x:00001937                 xor     ecx, eax
.text$x:00001939                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000193E                 mov     ecx, [edx-8]
.text$x:00001941                 xor     ecx, eax
.text$x:00001943                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001948                 mov     eax, offset __ehfuncinfo$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ
.text$x:0000194D                 jmp     ___CxxFrameHandler3
.text$x:0000194D __ehhandler$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ endp
.text$x:0000194D
.text$x:00001952
.text$x:00001952 ; =============== S U B R O U T I N E =======================================
.text$x:00001952
.text$x:00001952
.text$x:00001952 __unwindfunclet$?run@FileDialog@@IAGHPAUHWND__@@IIJ@Z$0 proc near
.text$x:00001952                                         ; DATA XREF: .xdata$x:00007A98o
.text$x:00001952                 lea     ecx, [ebp-48h]
.text$x:00001955                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00001955 __unwindfunclet$?run@FileDialog@@IAGHPAUHWND__@@IIJ@Z$0 endp
.text$x:00001955
.text$x:0000195A
.text$x:0000195A ; =============== S U B R O U T I N E =======================================
.text$x:0000195A
.text$x:0000195A
.text$x:0000195A __unwindfunclet$?run@FileDialog@@IAGHPAUHWND__@@IIJ@Z$1 proc near
.text$x:0000195A                                         ; DATA XREF: .xdata$x:00007AA0o
.text$x:0000195A                 lea     ecx, [ebp-2Ch]
.text$x:0000195D                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000195D __unwindfunclet$?run@FileDialog@@IAGHPAUHWND__@@IIJ@Z$1 endp
.text$x:0000195D
.text$x:00001962
.text$x:00001962 ; =============== S U B R O U T I N E =======================================
.text$x:00001962
.text$x:00001962
.text$x:00001962 __ehhandler$?run@FileDialog@@IAGHPAUHWND__@@IIJ@Z proc near
.text$x:00001962                                         ; DATA XREF: FileDialog::run(HWND__ *,uint,uint,long)+5o
.text$x:00001962
.text$x:00001962 arg_4           = dword ptr  8
.text$x:00001962
.text$x:00001962                 mov     edx, [esp+arg_4]
.text$x:00001966                 lea     eax, [edx+0Ch]
.text$x:00001969                 mov     ecx, [edx-78h]
.text$x:0000196C                 xor     ecx, eax
.text$x:0000196E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001973                 mov     ecx, [edx-4]
.text$x:00001976                 xor     ecx, eax
.text$x:00001978                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000197D                 mov     eax, offset __ehfuncinfo$?run@FileDialog@@IAGHPAUHWND__@@IIJ@Z
.text$x:00001982                 jmp     ___CxxFrameHandler3
.text$x:00001982 __ehhandler$?run@FileDialog@@IAGHPAUHWND__@@IIJ@Z endp
.text$x:00001982
.text$x:00001987
.text$x:00001987 ; =============== S U B R O U T I N E =======================================
.text$x:00001987
.text$x:00001987
.text$x:00001987 __unwindfunclet$?fileDlgProc@@YGJPAUHWND__@@IIJ@Z$0 proc near
.text$x:00001987                                         ; DATA XREF: .xdata$x:00007AF0o
.text$x:00001987                 mov     ecx, [ebp-24Ch]
.text$x:0000198D                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000198D __unwindfunclet$?fileDlgProc@@YGJPAUHWND__@@IIJ@Z$0 endp
.text$x:0000198D
.text$x:00001992
.text$x:00001992 ; =============== S U B R O U T I N E =======================================
.text$x:00001992
.text$x:00001992
.text$x:00001992 __unwindfunclet$?fileDlgProc@@YGJPAUHWND__@@IIJ@Z$1 proc near
.text$x:00001992                                         ; DATA XREF: .xdata$x:00007AF8o
.text$x:00001992                 mov     ecx, [ebp-25Ch]
.text$x:00001998                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00001998 __unwindfunclet$?fileDlgProc@@YGJPAUHWND__@@IIJ@Z$1 endp
.text$x:00001998
.text$x:0000199D
.text$x:0000199D ; =============== S U B R O U T I N E =======================================
.text$x:0000199D
.text$x:0000199D
.text$x:0000199D __unwindfunclet$?fileDlgProc@@YGJPAUHWND__@@IIJ@Z$2 proc near
.text$x:0000199D                                         ; DATA XREF: .xdata$x:00007B00o
.text$x:0000199D                 lea     ecx, [ebp-234h]
.text$x:000019A3                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000019A3 __unwindfunclet$?fileDlgProc@@YGJPAUHWND__@@IIJ@Z$2 endp
.text$x:000019A3
.text$x:000019A8
.text$x:000019A8 ; =============== S U B R O U T I N E =======================================
.text$x:000019A8
.text$x:000019A8
.text$x:000019A8 __ehhandler$?fileDlgProc@@YGJPAUHWND__@@IIJ@Z proc near
.text$x:000019A8                                         ; DATA XREF: fileDlgProc(HWND__ *,uint,uint,long)+5o
.text$x:000019A8
.text$x:000019A8 arg_4           = dword ptr  8
.text$x:000019A8
.text$x:000019A8                 mov     edx, [esp+arg_4]
.text$x:000019AC                 lea     eax, [edx+0Ch]
.text$x:000019AF                 mov     ecx, [edx-254h]
.text$x:000019B5                 xor     ecx, eax
.text$x:000019B7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000019BC                 mov     ecx, [edx-4]
.text$x:000019BF                 xor     ecx, eax
.text$x:000019C1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000019C6                 mov     eax, offset __ehfuncinfo$?fileDlgProc@@YGJPAUHWND__@@IIJ@Z
.text$x:000019CB                 jmp     ___CxxFrameHandler3
.text$x:000019CB __ehhandler$?fileDlgProc@@YGJPAUHWND__@@IIJ@Z endp
.text$x:000019CB
.text$x:000019D0
.text$x:000019D0 ; =============== S U B R O U T I N E =======================================
.text$x:000019D0
.text$x:000019D0
.text$x:000019D0 __unwindfunclet$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z$0 proc near
.text$x:000019D0                                         ; DATA XREF: .xdata$x:00007D0Co
.text$x:000019D0                 mov     ecx, [ebp-288h]
.text$x:000019D6                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000019D6 __unwindfunclet$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z$0 endp
.text$x:000019D6
.text$x:000019DB
.text$x:000019DB ; =============== S U B R O U T I N E =======================================
.text$x:000019DB
.text$x:000019DB
.text$x:000019DB __unwindfunclet$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z$1 proc near
.text$x:000019DB                                         ; DATA XREF: .xdata$x:00007D14o
.text$x:000019DB                 mov     ecx, [ebp-280h]
.text$x:000019E1                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000019E1 __unwindfunclet$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z$1 endp
.text$x:000019E1
.text$x:000019E6
.text$x:000019E6 ; =============== S U B R O U T I N E =======================================
.text$x:000019E6
.text$x:000019E6
.text$x:000019E6 __unwindfunclet$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z$2 proc near
.text$x:000019E6                                         ; DATA XREF: .xdata$x:00007D1Co
.text$x:000019E6                 lea     ecx, [ebp-234h]
.text$x:000019EC                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000019EC __unwindfunclet$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z$2 endp
.text$x:000019EC
.text$x:000019F1
.text$x:000019F1 ; =============== S U B R O U T I N E =======================================
.text$x:000019F1
.text$x:000019F1
.text$x:000019F1 __unwindfunclet$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z$3 proc near
.text$x:000019F1                                         ; DATA XREF: .xdata$x:00007D24o
.text$x:000019F1                 lea     ecx, [ebp-250h]
.text$x:000019F7                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000019F7 __unwindfunclet$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z$3 endp
.text$x:000019F7
.text$x:000019FC
.text$x:000019FC ; =============== S U B R O U T I N E =======================================
.text$x:000019FC
.text$x:000019FC
.text$x:000019FC __unwindfunclet$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z$4 proc near
.text$x:000019FC                                         ; DATA XREF: .xdata$x:00007D04o
.text$x:000019FC                 mov     eax, [ebp-258h]
.text$x:00001A02                 and     eax, 1
.text$x:00001A05                 jz      locret_1A1A
.text$x:00001A0B                 and     dword ptr [ebp-258h], 0FFFFFFFEh
.text$x:00001A12                 mov     ecx, [ebp+8]
.text$x:00001A15                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00001A1A ; ---------------------------------------------------------------------------
.text$x:00001A1A
.text$x:00001A1A locret_1A1A:                            ; CODE XREF: __unwindfunclet$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z$4+9j
.text$x:00001A1A                 retn
.text$x:00001A1A __unwindfunclet$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z$4 endp
.text$x:00001A1A
.text$x:00001A1B
.text$x:00001A1B ; =============== S U B R O U T I N E =======================================
.text$x:00001A1B
.text$x:00001A1B
.text$x:00001A1B __ehhandler$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z proc near
.text$x:00001A1B                                         ; DATA XREF: addExt(HWND__ *,HWND__ *)+5o
.text$x:00001A1B
.text$x:00001A1B arg_4           = dword ptr  8
.text$x:00001A1B
.text$x:00001A1B                 mov     edx, [esp+arg_4]
.text$x:00001A1F                 lea     eax, [edx+0Ch]
.text$x:00001A22                 mov     ecx, [edx-280h]
.text$x:00001A28                 xor     ecx, eax
.text$x:00001A2A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001A2F                 mov     ecx, [edx-4]
.text$x:00001A32                 xor     ecx, eax
.text$x:00001A34                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001A39                 mov     eax, offset __ehfuncinfo$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z
.text$x:00001A3E                 jmp     ___CxxFrameHandler3
.text$x:00001A3E __ehhandler$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z endp
.text$x:00001A3E
.text$x:00001A3E ; ---------------------------------------------------------------------------
.text$x:00001A43                 align 4
.text$x:00001A43 _text$x         ends
.text$x:00001A43
.text$mn:00001A44 ; ===========================================================================
.text$mn:00001A44
.text$mn:00001A44 ; Segment type: Pure code
.text$mn:00001A44 ; Segment permissions: Read/Execute
.text$mn:00001A44 _text$mn        segment para public 'CODE' use32
.text$mn:00001A44                 assume cs:_text$mn
.text$mn:00001A44                 ;org 1A44h
.text$mn:00001A44 ; COMDAT (pick any)
.text$mn:00001A44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001A44
.text$mn:00001A44 ; =============== S U B R O U T I N E =======================================
.text$mn:00001A44
.text$mn:00001A44 ; Attributes: bp-based frame
.text$mn:00001A44
.text$mn:00001A44 ; bool __cdecl std::operator==<class std::allocator<wchar_t>, class std::allocator<wchar_t>>(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &, struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:00001A44                 public ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z
.text$mn:00001A44 ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z proc near
.text$mn:00001A44                                         ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+Cp
.text$mn:00001A44
.text$mn:00001A44 var_2           = byte ptr -2
.text$mn:00001A44 var_1           = byte ptr -1
.text$mn:00001A44 arg_0           = dword ptr  8
.text$mn:00001A44 arg_4           = dword ptr  0Ch
.text$mn:00001A44
.text$mn:00001A44                 push    ebp
.text$mn:00001A45                 mov     ebp, esp
.text$mn:00001A47                 push    ecx
.text$mn:00001A48                 mov     eax, [ebp+arg_4]
.text$mn:00001A4B                 push    eax
.text$mn:00001A4C                 lea     ecx, [ebp+var_1]
.text$mn:00001A4F                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:00001A54                 push    eax
.text$mn:00001A55                 mov     ecx, [ebp+arg_0]
.text$mn:00001A58                 push    ecx
.text$mn:00001A59                 lea     ecx, [ebp+var_2]
.text$mn:00001A5C                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:00001A61                 push    eax
.text$mn:00001A62                 call    ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z ; std::operator==<wchar_t,wchar_t>(std::allocator<wchar_t> const &,std::allocator<wchar_t> const &)
.text$mn:00001A67                 add     esp, 8
.text$mn:00001A6A                 mov     esp, ebp
.text$mn:00001A6C                 pop     ebp
.text$mn:00001A6D                 retn
.text$mn:00001A6D ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z endp
.text$mn:00001A6D
.text$mn:00001A6D ; ---------------------------------------------------------------------------
.text$mn:00001A6E                 align 10h
.text$mn:00001A6E _text$mn        ends
.text$mn:00001A6E
.text$mn:00001A70 ; ===========================================================================
.text$mn:00001A70
.text$mn:00001A70 ; Segment type: Pure code
.text$mn:00001A70 ; Segment permissions: Read/Execute
.text$mn:00001A70 _text$mn        segment para public 'CODE' use32
.text$mn:00001A70                 assume cs:_text$mn
.text$mn:00001A70                 ;org 1A70h
.text$mn:00001A70 ; COMDAT (pick any)
.text$mn:00001A70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001A70
.text$mn:00001A70 ; =============== S U B R O U T I N E =======================================
.text$mn:00001A70
.text$mn:00001A70 ; Attributes: bp-based frame
.text$mn:00001A70
.text$mn:00001A70 ; int __cdecl std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int, wchar_t *Str)
.text$mn:00001A70                 public ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z
.text$mn:00001A70 ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z proc near
.text$mn:00001A70                                         ; CODE XREF: changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+40p
.text$mn:00001A70                                         ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+Cp
.text$mn:00001A70
.text$mn:00001A70 var_4           = dword ptr -4
.text$mn:00001A70 arg_0           = dword ptr  8
.text$mn:00001A70 Str             = dword ptr  0Ch
.text$mn:00001A70
.text$mn:00001A70                 push    ebp
.text$mn:00001A71                 mov     ebp, esp
.text$mn:00001A73                 push    ecx
.text$mn:00001A74                 mov     eax, [ebp+Str]
.text$mn:00001A77                 push    eax             ; Str
.text$mn:00001A78                 mov     ecx, [ebp+arg_0]
.text$mn:00001A7B                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t const *)
.text$mn:00001A80                 test    eax, eax
.text$mn:00001A82                 jnz     short loc_1A8D
.text$mn:00001A84                 mov     [ebp+var_4], 1
.text$mn:00001A8B                 jmp     short loc_1A94
.text$mn:00001A8D ; ---------------------------------------------------------------------------
.text$mn:00001A8D
.text$mn:00001A8D loc_1A8D:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+12j
.text$mn:00001A8D                 mov     [ebp+var_4], 0
.text$mn:00001A94
.text$mn:00001A94 loc_1A94:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+1Bj
.text$mn:00001A94                 mov     al, byte ptr [ebp+var_4]
.text$mn:00001A97                 mov     esp, ebp
.text$mn:00001A99                 pop     ebp
.text$mn:00001A9A                 retn
.text$mn:00001A9A ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z endp
.text$mn:00001A9A
.text$mn:00001A9A ; ---------------------------------------------------------------------------
.text$mn:00001A9B                 align 4
.text$mn:00001A9B _text$mn        ends
.text$mn:00001A9B
.text$mn:00001A9C ; ===========================================================================
.text$mn:00001A9C
.text$mn:00001A9C ; Segment type: Pure code
.text$mn:00001A9C ; Segment permissions: Read/Execute
.text$mn:00001A9C _text$mn        segment para public 'CODE' use32
.text$mn:00001A9C                 assume cs:_text$mn
.text$mn:00001A9C                 ;org 1A9Ch
.text$mn:00001A9C ; COMDAT (pick any)
.text$mn:00001A9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001A9C
.text$mn:00001A9C ; =============== S U B R O U T I N E =======================================
.text$mn:00001A9C
.text$mn:00001A9C ; Attributes: bp-based frame
.text$mn:00001A9C
.text$mn:00001A9C ; bool __cdecl std::operator==<wchar_t, wchar_t>(class std::allocator<wchar_t> const &, class std::allocator<wchar_t> const &)
.text$mn:00001A9C                 public ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z
.text$mn:00001A9C ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z proc near
.text$mn:00001A9C                                         ; CODE XREF: std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+1Ep
.text$mn:00001A9C                 push    ebp
.text$mn:00001A9D                 mov     ebp, esp
.text$mn:00001A9F                 mov     al, 1
.text$mn:00001AA1                 pop     ebp
.text$mn:00001AA2                 retn
.text$mn:00001AA2 ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z endp
.text$mn:00001AA2
.text$mn:00001AA2 ; ---------------------------------------------------------------------------
.text$mn:00001AA3                 align 4
.text$mn:00001AA3 _text$mn        ends
.text$mn:00001AA3
.text$mn:00001AA4 ; ===========================================================================
.text$mn:00001AA4
.text$mn:00001AA4 ; Segment type: Pure code
.text$mn:00001AA4 ; Segment permissions: Read/Execute
.text$mn:00001AA4 _text$mn        segment para public 'CODE' use32
.text$mn:00001AA4                 assume cs:_text$mn
.text$mn:00001AA4                 ;org 1AA4h
.text$mn:00001AA4 ; COMDAT (pick any)
.text$mn:00001AA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001AA4
.text$mn:00001AA4 ; =============== S U B R O U T I N E =======================================
.text$mn:00001AA4
.text$mn:00001AA4 ; Attributes: bp-based frame
.text$mn:00001AA4
.text$mn:00001AA4 ; bool __cdecl std::operator!=<class std::allocator<wchar_t>, class std::allocator<wchar_t>>(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &, struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:00001AA4                 public ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z
.text$mn:00001AA4 ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z proc near
.text$mn:00001AA4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+73p
.text$mn:00001AA4
.text$mn:00001AA4 var_4           = dword ptr -4
.text$mn:00001AA4 arg_0           = dword ptr  8
.text$mn:00001AA4 arg_4           = dword ptr  0Ch
.text$mn:00001AA4
.text$mn:00001AA4                 push    ebp
.text$mn:00001AA5                 mov     ebp, esp
.text$mn:00001AA7                 push    ecx
.text$mn:00001AA8                 mov     eax, [ebp+arg_4]
.text$mn:00001AAB                 push    eax
.text$mn:00001AAC                 mov     ecx, [ebp+arg_0]
.text$mn:00001AAF                 push    ecx
.text$mn:00001AB0                 call    ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00001AB5                 add     esp, 8
.text$mn:00001AB8                 movzx   edx, al
.text$mn:00001ABB                 test    edx, edx
.text$mn:00001ABD                 jnz     short loc_1AC8
.text$mn:00001ABF                 mov     [ebp+var_4], 1
.text$mn:00001AC6                 jmp     short loc_1ACF
.text$mn:00001AC8 ; ---------------------------------------------------------------------------
.text$mn:00001AC8
.text$mn:00001AC8 loc_1AC8:                               ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+19j
.text$mn:00001AC8                 mov     [ebp+var_4], 0
.text$mn:00001ACF
.text$mn:00001ACF loc_1ACF:                               ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+22j
.text$mn:00001ACF                 mov     al, byte ptr [ebp+var_4]
.text$mn:00001AD2                 mov     esp, ebp
.text$mn:00001AD4                 pop     ebp
.text$mn:00001AD5                 retn
.text$mn:00001AD5 ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z endp
.text$mn:00001AD5
.text$mn:00001AD5 ; ---------------------------------------------------------------------------
.text$mn:00001AD6                 align 4
.text$mn:00001AD6 _text$mn        ends
.text$mn:00001AD6
.text$mn:00001AD8 ; ===========================================================================
.text$mn:00001AD8
.text$mn:00001AD8 ; Segment type: Pure code
.text$mn:00001AD8 ; Segment permissions: Read/Execute
.text$mn:00001AD8 _text$mn        segment para public 'CODE' use32
.text$mn:00001AD8                 assume cs:_text$mn
.text$mn:00001AD8                 ;org 1AD8h
.text$mn:00001AD8 ; COMDAT (pick any)
.text$mn:00001AD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001AD8
.text$mn:00001AD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00001AD8
.text$mn:00001AD8 ; Attributes: bp-based frame
.text$mn:00001AD8
.text$mn:00001AD8 ; int __cdecl std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int, wchar_t *Str)
.text$mn:00001AD8                 public ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z
.text$mn:00001AD8 ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z proc near
.text$mn:00001AD8                                         ; CODE XREF: fileDlgProc(HWND__ *,uint,uint,long)+F3p
.text$mn:00001AD8
.text$mn:00001AD8 var_4           = dword ptr -4
.text$mn:00001AD8 arg_0           = dword ptr  8
.text$mn:00001AD8 Str             = dword ptr  0Ch
.text$mn:00001AD8
.text$mn:00001AD8                 push    ebp
.text$mn:00001AD9                 mov     ebp, esp
.text$mn:00001ADB                 push    ecx
.text$mn:00001ADC                 mov     eax, [ebp+Str]
.text$mn:00001ADF                 push    eax             ; Str
.text$mn:00001AE0                 mov     ecx, [ebp+arg_0]
.text$mn:00001AE3                 push    ecx             ; int
.text$mn:00001AE4                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00001AE9                 add     esp, 8
.text$mn:00001AEC                 movzx   edx, al
.text$mn:00001AEF                 test    edx, edx
.text$mn:00001AF1                 jnz     short loc_1AFC
.text$mn:00001AF3                 mov     [ebp+var_4], 1
.text$mn:00001AFA                 jmp     short loc_1B03
.text$mn:00001AFC ; ---------------------------------------------------------------------------
.text$mn:00001AFC
.text$mn:00001AFC loc_1AFC:                               ; CODE XREF: std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+19j
.text$mn:00001AFC                 mov     [ebp+var_4], 0
.text$mn:00001B03
.text$mn:00001B03 loc_1B03:                               ; CODE XREF: std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+22j
.text$mn:00001B03                 mov     al, byte ptr [ebp+var_4]
.text$mn:00001B06                 mov     esp, ebp
.text$mn:00001B08                 pop     ebp
.text$mn:00001B09                 retn
.text$mn:00001B09 ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z endp
.text$mn:00001B09
.text$mn:00001B09 ; ---------------------------------------------------------------------------
.text$mn:00001B0A                 align 4
.text$mn:00001B0A _text$mn        ends
.text$mn:00001B0A
.text$mn:00001B0C ; ===========================================================================
.text$mn:00001B0C
.text$mn:00001B0C ; Segment type: Pure code
.text$mn:00001B0C ; Segment permissions: Read/Execute
.text$mn:00001B0C _text$mn        segment para public 'CODE' use32
.text$mn:00001B0C                 assume cs:_text$mn
.text$mn:00001B0C                 ;org 1B0Ch
.text$mn:00001B0C ; COMDAT (pick any)
.text$mn:00001B0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001B0C
.text$mn:00001B0C ; =============== S U B R O U T I N E =======================================
.text$mn:00001B0C
.text$mn:00001B0C ; Attributes: bp-based frame
.text$mn:00001B0C
.text$mn:00001B0C ; char * __cdecl std::_Allocate<char>(unsigned int, char *)
.text$mn:00001B0C                 public ??$_Allocate@D@std@@YAPADIPAD@Z
.text$mn:00001B0C ??$_Allocate@D@std@@YAPADIPAD@Z proc near
.text$mn:00001B0C                                         ; CODE XREF: std::allocator<char>::allocate(uint)+Dp
.text$mn:00001B0C
.text$mn:00001B0C var_4           = dword ptr -4
.text$mn:00001B0C arg_0           = dword ptr  8
.text$mn:00001B0C
.text$mn:00001B0C                 push    ebp
.text$mn:00001B0D                 mov     ebp, esp
.text$mn:00001B0F                 push    ecx
.text$mn:00001B10                 mov     [ebp+var_4], 0
.text$mn:00001B17                 cmp     [ebp+arg_0], 0
.text$mn:00001B1B                 jnz     short loc_1B1F
.text$mn:00001B1D                 jmp     short loc_1B3F
.text$mn:00001B1F ; ---------------------------------------------------------------------------
.text$mn:00001B1F
.text$mn:00001B1F loc_1B1F:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+Fj
.text$mn:00001B1F                 cmp     [ebp+arg_0], 0FFFFFFFFh
.text$mn:00001B23                 ja      short loc_1B3A
.text$mn:00001B25                 mov     eax, [ebp+arg_0]
.text$mn:00001B28                 push    eax             ; unsigned int
.text$mn:00001B29                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00001B2E                 add     esp, 4
.text$mn:00001B31                 mov     [ebp+var_4], eax
.text$mn:00001B34                 cmp     [ebp+var_4], 0
.text$mn:00001B38                 jnz     short loc_1B3F
.text$mn:00001B3A
.text$mn:00001B3A loc_1B3A:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+17j
.text$mn:00001B3A                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00001B3F
.text$mn:00001B3F loc_1B3F:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+11j
.text$mn:00001B3F                                         ; std::_Allocate<char>(uint,char *)+2Cj
.text$mn:00001B3F                 mov     eax, [ebp+var_4]
.text$mn:00001B42                 mov     esp, ebp
.text$mn:00001B44                 pop     ebp
.text$mn:00001B45                 retn
.text$mn:00001B45 ??$_Allocate@D@std@@YAPADIPAD@Z endp
.text$mn:00001B45
.text$mn:00001B45 ; ---------------------------------------------------------------------------
.text$mn:00001B46                 align 4
.text$mn:00001B46 _text$mn        ends
.text$mn:00001B46
.text$mn:00001B48 ; ===========================================================================
.text$mn:00001B48
.text$mn:00001B48 ; Segment type: Pure code
.text$mn:00001B48 ; Segment permissions: Read/Execute
.text$mn:00001B48 _text$mn        segment para public 'CODE' use32
.text$mn:00001B48                 assume cs:_text$mn
.text$mn:00001B48                 ;org 1B48h
.text$mn:00001B48 ; COMDAT (pick any)
.text$mn:00001B48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001B48
.text$mn:00001B48 ; =============== S U B R O U T I N E =======================================
.text$mn:00001B48
.text$mn:00001B48 ; Attributes: bp-based frame
.text$mn:00001B48
.text$mn:00001B48 ; struct std::_Container_proxy * __cdecl std::_Allocate<struct std::_Container_proxy>(unsigned int, struct std::_Container_proxy *)
.text$mn:00001B48                 public ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
.text$mn:00001B48 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
.text$mn:00001B48                                         ; CODE XREF: std::allocator<std::_Container_proxy>::allocate(uint)+Dp
.text$mn:00001B48
.text$mn:00001B48 var_4           = dword ptr -4
.text$mn:00001B48 arg_0           = dword ptr  8
.text$mn:00001B48
.text$mn:00001B48                 push    ebp
.text$mn:00001B49                 mov     ebp, esp
.text$mn:00001B4B                 push    ecx
.text$mn:00001B4C                 mov     [ebp+var_4], 0
.text$mn:00001B53                 cmp     [ebp+arg_0], 0
.text$mn:00001B57                 jnz     short loc_1B5B
.text$mn:00001B59                 jmp     short loc_1B81
.text$mn:00001B5B ; ---------------------------------------------------------------------------
.text$mn:00001B5B
.text$mn:00001B5B loc_1B5B:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+Fj
.text$mn:00001B5B                 cmp     [ebp+arg_0], 1FFFFFFFh
.text$mn:00001B62                 ja      short loc_1B7C
.text$mn:00001B64                 mov     eax, [ebp+arg_0]
.text$mn:00001B67                 shl     eax, 3
.text$mn:00001B6A                 push    eax             ; unsigned int
.text$mn:00001B6B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00001B70                 add     esp, 4
.text$mn:00001B73                 mov     [ebp+var_4], eax
.text$mn:00001B76                 cmp     [ebp+var_4], 0
.text$mn:00001B7A                 jnz     short loc_1B81
.text$mn:00001B7C
.text$mn:00001B7C loc_1B7C:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+1Aj
.text$mn:00001B7C                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00001B81
.text$mn:00001B81 loc_1B81:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+11j
.text$mn:00001B81                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+32j
.text$mn:00001B81                 mov     eax, [ebp+var_4]
.text$mn:00001B84                 mov     esp, ebp
.text$mn:00001B86                 pop     ebp
.text$mn:00001B87                 retn
.text$mn:00001B87 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z endp
.text$mn:00001B87
.text$mn:00001B87 _text$mn        ends
.text$mn:00001B87
.text$mn:00001B88 ; ===========================================================================
.text$mn:00001B88
.text$mn:00001B88 ; Segment type: Pure code
.text$mn:00001B88 ; Segment permissions: Read/Execute
.text$mn:00001B88 _text$mn        segment para public 'CODE' use32
.text$mn:00001B88                 assume cs:_text$mn
.text$mn:00001B88                 ;org 1B88h
.text$mn:00001B88 ; COMDAT (pick any)
.text$mn:00001B88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001B88
.text$mn:00001B88 ; =============== S U B R O U T I N E =======================================
.text$mn:00001B88
.text$mn:00001B88 ; Attributes: bp-based frame
.text$mn:00001B88
.text$mn:00001B88 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Allocate<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(unsigned int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00001B88                 public ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z
.text$mn:00001B88 ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z proc near
.text$mn:00001B88                                         ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocate(uint)+Dp
.text$mn:00001B88
.text$mn:00001B88 var_4           = dword ptr -4
.text$mn:00001B88 arg_0           = dword ptr  8
.text$mn:00001B88
.text$mn:00001B88                 push    ebp
.text$mn:00001B89                 mov     ebp, esp
.text$mn:00001B8B                 push    ecx
.text$mn:00001B8C                 mov     [ebp+var_4], 0
.text$mn:00001B93                 cmp     [ebp+arg_0], 0
.text$mn:00001B97                 jnz     short loc_1B9B
.text$mn:00001B99                 jmp     short loc_1BBF
.text$mn:00001B9B ; ---------------------------------------------------------------------------
.text$mn:00001B9B
.text$mn:00001B9B loc_1B9B:                               ; CODE XREF: std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Fj
.text$mn:00001B9B                 cmp     [ebp+arg_0], 9249249h
.text$mn:00001BA2                 ja      short loc_1BBA
.text$mn:00001BA4                 imul    eax, [ebp+arg_0], 1Ch
.text$mn:00001BA8                 push    eax             ; unsigned int
.text$mn:00001BA9                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00001BAE                 add     esp, 4
.text$mn:00001BB1                 mov     [ebp+var_4], eax
.text$mn:00001BB4                 cmp     [ebp+var_4], 0
.text$mn:00001BB8                 jnz     short loc_1BBF
.text$mn:00001BBA
.text$mn:00001BBA loc_1BBA:                               ; CODE XREF: std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+1Aj
.text$mn:00001BBA                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00001BBF
.text$mn:00001BBF loc_1BBF:                               ; CODE XREF: std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+11j
.text$mn:00001BBF                                         ; std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+30j
.text$mn:00001BBF                 mov     eax, [ebp+var_4]
.text$mn:00001BC2                 mov     esp, ebp
.text$mn:00001BC4                 pop     ebp
.text$mn:00001BC5                 retn
.text$mn:00001BC5 ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z endp
.text$mn:00001BC5
.text$mn:00001BC5 ; ---------------------------------------------------------------------------
.text$mn:00001BC6                 align 4
.text$mn:00001BC6 _text$mn        ends
.text$mn:00001BC6
.text$mn:00001BC8 ; ===========================================================================
.text$mn:00001BC8
.text$mn:00001BC8 ; Segment type: Pure code
.text$mn:00001BC8 ; Segment permissions: Read/Execute
.text$mn:00001BC8 _text$mn        segment para public 'CODE' use32
.text$mn:00001BC8                 assume cs:_text$mn
.text$mn:00001BC8                 ;org 1BC8h
.text$mn:00001BC8 ; COMDAT (pick any)
.text$mn:00001BC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001BC8
.text$mn:00001BC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00001BC8
.text$mn:00001BC8 ; Attributes: bp-based frame
.text$mn:00001BC8
.text$mn:00001BC8 ; wchar_t * __cdecl std::_Allocate<wchar_t>(unsigned int, wchar_t *)
.text$mn:00001BC8                 public ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
.text$mn:00001BC8 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z proc near
.text$mn:00001BC8                                         ; CODE XREF: std::allocator<wchar_t>::allocate(uint)+Dp
.text$mn:00001BC8
.text$mn:00001BC8 var_4           = dword ptr -4
.text$mn:00001BC8 arg_0           = dword ptr  8
.text$mn:00001BC8
.text$mn:00001BC8                 push    ebp
.text$mn:00001BC9                 mov     ebp, esp
.text$mn:00001BCB                 push    ecx
.text$mn:00001BCC                 mov     [ebp+var_4], 0
.text$mn:00001BD3                 cmp     [ebp+arg_0], 0
.text$mn:00001BD7                 jnz     short loc_1BDB
.text$mn:00001BD9                 jmp     short loc_1C00
.text$mn:00001BDB ; ---------------------------------------------------------------------------
.text$mn:00001BDB
.text$mn:00001BDB loc_1BDB:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+Fj
.text$mn:00001BDB                 cmp     [ebp+arg_0], 7FFFFFFFh
.text$mn:00001BE2                 ja      short loc_1BFB
.text$mn:00001BE4                 mov     eax, [ebp+arg_0]
.text$mn:00001BE7                 shl     eax, 1
.text$mn:00001BE9                 push    eax             ; unsigned int
.text$mn:00001BEA                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00001BEF                 add     esp, 4
.text$mn:00001BF2                 mov     [ebp+var_4], eax
.text$mn:00001BF5                 cmp     [ebp+var_4], 0
.text$mn:00001BF9                 jnz     short loc_1C00
.text$mn:00001BFB
.text$mn:00001BFB loc_1BFB:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+1Aj
.text$mn:00001BFB                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00001C00
.text$mn:00001C00 loc_1C00:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+11j
.text$mn:00001C00                                         ; std::_Allocate<wchar_t>(uint,wchar_t *)+31j
.text$mn:00001C00                 mov     eax, [ebp+var_4]
.text$mn:00001C03                 mov     esp, ebp
.text$mn:00001C05                 pop     ebp
.text$mn:00001C06                 retn
.text$mn:00001C06 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z endp
.text$mn:00001C06
.text$mn:00001C06 ; ---------------------------------------------------------------------------
.text$mn:00001C07                 align 4
.text$mn:00001C07 _text$mn        ends
.text$mn:00001C07
.text$mn:00001C08 ; ===========================================================================
.text$mn:00001C08
.text$mn:00001C08 ; Segment type: Pure code
.text$mn:00001C08 ; Segment permissions: Read/Execute
.text$mn:00001C08 _text$mn        segment para public 'CODE' use32
.text$mn:00001C08                 assume cs:_text$mn
.text$mn:00001C08                 ;org 1C08h
.text$mn:00001C08 ; COMDAT (pick any)
.text$mn:00001C08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001C08
.text$mn:00001C08 ; =============== S U B R O U T I N E =======================================
.text$mn:00001C08
.text$mn:00001C08 ; Attributes: bp-based frame
.text$mn:00001C08
.text$mn:00001C08 ; int __cdecl std::_Debug_pointer<char>(int, wchar_t *, unsigned int)
.text$mn:00001C08                 public ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
.text$mn:00001C08 ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
.text$mn:00001C08                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+15p
.text$mn:00001C08                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+1Bp
.text$mn:00001C08
.text$mn:00001C08 arg_0           = dword ptr  8
.text$mn:00001C08 arg_4           = dword ptr  0Ch
.text$mn:00001C08 arg_8           = dword ptr  10h
.text$mn:00001C08
.text$mn:00001C08                 push    ebp
.text$mn:00001C09                 mov     ebp, esp
.text$mn:00001C0B                 cmp     [ebp+arg_0], 0
.text$mn:00001C0F                 jnz     short loc_1C26
.text$mn:00001C11                 mov     eax, [ebp+arg_8]
.text$mn:00001C14                 push    eax             ; unsigned int
.text$mn:00001C15                 mov     ecx, [ebp+arg_4]
.text$mn:00001C18                 push    ecx             ; wchar_t *
.text$mn:00001C19                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00001C1E                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00001C23                 add     esp, 0Ch
.text$mn:00001C26
.text$mn:00001C26 loc_1C26:                               ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+7j
.text$mn:00001C26                 pop     ebp
.text$mn:00001C27                 retn
.text$mn:00001C27 ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z endp
.text$mn:00001C27
.text$mn:00001C27 _text$mn        ends
.text$mn:00001C27
.text$mn:00001C28 ; ===========================================================================
.text$mn:00001C28
.text$mn:00001C28 ; Segment type: Pure code
.text$mn:00001C28 ; Segment permissions: Read/Execute
.text$mn:00001C28 _text$mn        segment para public 'CODE' use32
.text$mn:00001C28                 assume cs:_text$mn
.text$mn:00001C28                 ;org 1C28h
.text$mn:00001C28 ; COMDAT (pick any)
.text$mn:00001C28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001C28
.text$mn:00001C28 ; =============== S U B R O U T I N E =======================================
.text$mn:00001C28
.text$mn:00001C28 ; Attributes: bp-based frame
.text$mn:00001C28
.text$mn:00001C28 ; int __cdecl std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(int, wchar_t *, unsigned int)
.text$mn:00001C28                 public ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z
.text$mn:00001C28 ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z proc near
.text$mn:00001C28                                         ; CODE XREF: std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:00001C28                                         ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:00001C28
.text$mn:00001C28 arg_0           = dword ptr  8
.text$mn:00001C28 arg_4           = dword ptr  0Ch
.text$mn:00001C28 arg_8           = dword ptr  10h
.text$mn:00001C28
.text$mn:00001C28                 push    ebp
.text$mn:00001C29                 mov     ebp, esp
.text$mn:00001C2B                 cmp     [ebp+arg_0], 0
.text$mn:00001C2F                 jnz     short loc_1C46
.text$mn:00001C31                 mov     eax, [ebp+arg_8]
.text$mn:00001C34                 push    eax             ; unsigned int
.text$mn:00001C35                 mov     ecx, [ebp+arg_4]
.text$mn:00001C38                 push    ecx             ; wchar_t *
.text$mn:00001C39                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00001C3E                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00001C43                 add     esp, 0Ch
.text$mn:00001C46
.text$mn:00001C46 loc_1C46:                               ; CODE XREF: std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)+7j
.text$mn:00001C46                 pop     ebp
.text$mn:00001C47                 retn
.text$mn:00001C47 ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z endp
.text$mn:00001C47
.text$mn:00001C47 _text$mn        ends
.text$mn:00001C47
.text$mn:00001C48 ; ===========================================================================
.text$mn:00001C48
.text$mn:00001C48 ; Segment type: Pure code
.text$mn:00001C48 ; Segment permissions: Read/Execute
.text$mn:00001C48 _text$mn        segment para public 'CODE' use32
.text$mn:00001C48                 assume cs:_text$mn
.text$mn:00001C48                 ;org 1C48h
.text$mn:00001C48 ; COMDAT (pick any)
.text$mn:00001C48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001C48
.text$mn:00001C48 ; =============== S U B R O U T I N E =======================================
.text$mn:00001C48
.text$mn:00001C48 ; Attributes: bp-based frame
.text$mn:00001C48
.text$mn:00001C48 ; int __cdecl std::_Debug_pointer<wchar_t>(int, wchar_t *, unsigned int)
.text$mn:00001C48                 public ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z
.text$mn:00001C48 ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z proc near
.text$mn:00001C48                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+15p
.text$mn:00001C48                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+1Dp ...
.text$mn:00001C48
.text$mn:00001C48 arg_0           = dword ptr  8
.text$mn:00001C48 arg_4           = dword ptr  0Ch
.text$mn:00001C48 arg_8           = dword ptr  10h
.text$mn:00001C48
.text$mn:00001C48                 push    ebp
.text$mn:00001C49                 mov     ebp, esp
.text$mn:00001C4B                 cmp     [ebp+arg_0], 0
.text$mn:00001C4F                 jnz     short loc_1C66
.text$mn:00001C51                 mov     eax, [ebp+arg_8]
.text$mn:00001C54                 push    eax             ; unsigned int
.text$mn:00001C55                 mov     ecx, [ebp+arg_4]
.text$mn:00001C58                 push    ecx             ; wchar_t *
.text$mn:00001C59                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00001C5E                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00001C63                 add     esp, 0Ch
.text$mn:00001C66
.text$mn:00001C66 loc_1C66:                               ; CODE XREF: std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)+7j
.text$mn:00001C66                 pop     ebp
.text$mn:00001C67                 retn
.text$mn:00001C67 ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z endp
.text$mn:00001C67
.text$mn:00001C67 _text$mn        ends
.text$mn:00001C67
.text$mn:00001C68 ; ===========================================================================
.text$mn:00001C68
.text$mn:00001C68 ; Segment type: Pure code
.text$mn:00001C68 ; Segment permissions: Read/Execute
.text$mn:00001C68 _text$mn        segment para public 'CODE' use32
.text$mn:00001C68                 assume cs:_text$mn
.text$mn:00001C68                 ;org 1C68h
.text$mn:00001C68 ; COMDAT (pick any)
.text$mn:00001C68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001C68
.text$mn:00001C68 ; =============== S U B R O U T I N E =======================================
.text$mn:00001C68
.text$mn:00001C68 ; Attributes: bp-based frame
.text$mn:00001C68
.text$mn:00001C68 ; int __cdecl std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(int, int, wchar_t *, unsigned int)
.text$mn:00001C68                 public ??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:00001C68 ??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:00001C68                                         ; CODE XREF: std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)+2Ap
.text$mn:00001C68
.text$mn:00001C68 arg_0           = dword ptr  8
.text$mn:00001C68 arg_4           = dword ptr  0Ch
.text$mn:00001C68 arg_8           = dword ptr  10h
.text$mn:00001C68 arg_C           = dword ptr  14h
.text$mn:00001C68
.text$mn:00001C68                 push    ebp
.text$mn:00001C69                 mov     ebp, esp
.text$mn:00001C6B                 mov     eax, [ebp+arg_0]
.text$mn:00001C6E                 cmp     eax, [ebp+arg_4]
.text$mn:00001C71                 jz      short loc_1CB8
.text$mn:00001C73                 mov     ecx, [ebp+arg_C]
.text$mn:00001C76                 push    ecx             ; unsigned int
.text$mn:00001C77                 mov     edx, [ebp+arg_8]
.text$mn:00001C7A                 push    edx             ; wchar_t *
.text$mn:00001C7B                 mov     eax, [ebp+arg_0]
.text$mn:00001C7E                 push    eax             ; int
.text$mn:00001C7F                 call    ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:00001C84                 add     esp, 0Ch
.text$mn:00001C87                 mov     ecx, [ebp+arg_C]
.text$mn:00001C8A                 push    ecx             ; unsigned int
.text$mn:00001C8B                 mov     edx, [ebp+arg_8]
.text$mn:00001C8E                 push    edx             ; wchar_t *
.text$mn:00001C8F                 mov     eax, [ebp+arg_4]
.text$mn:00001C92                 push    eax             ; int
.text$mn:00001C93                 call    ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:00001C98                 add     esp, 0Ch
.text$mn:00001C9B                 mov     ecx, [ebp+arg_4]
.text$mn:00001C9E                 cmp     ecx, [ebp+arg_0]
.text$mn:00001CA1                 jnb     short loc_1CB8
.text$mn:00001CA3                 mov     edx, [ebp+arg_C]
.text$mn:00001CA6                 push    edx             ; unsigned int
.text$mn:00001CA7                 mov     eax, [ebp+arg_8]
.text$mn:00001CAA                 push    eax             ; wchar_t *
.text$mn:00001CAB                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:00001CB0                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00001CB5                 add     esp, 0Ch
.text$mn:00001CB8
.text$mn:00001CB8 loc_1CB8:                               ; CODE XREF: std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:00001CB8                                         ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:00001CB8                 pop     ebp
.text$mn:00001CB9                 retn
.text$mn:00001CB9 ??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:00001CB9
.text$mn:00001CB9 ; ---------------------------------------------------------------------------
.text$mn:00001CBA                 align 4
.text$mn:00001CBA _text$mn        ends
.text$mn:00001CBA
.text$mn:00001CBC ; ===========================================================================
.text$mn:00001CBC
.text$mn:00001CBC ; Segment type: Pure code
.text$mn:00001CBC ; Segment permissions: Read/Execute
.text$mn:00001CBC _text$mn        segment para public 'CODE' use32
.text$mn:00001CBC                 assume cs:_text$mn
.text$mn:00001CBC                 ;org 1CBCh
.text$mn:00001CBC ; COMDAT (pick any)
.text$mn:00001CBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001CBC
.text$mn:00001CBC ; =============== S U B R O U T I N E =======================================
.text$mn:00001CBC
.text$mn:00001CBC ; Attributes: bp-based frame
.text$mn:00001CBC
.text$mn:00001CBC ; int __cdecl std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(int, int, wchar_t *, unsigned int)
.text$mn:00001CBC                 public ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z
.text$mn:00001CBC ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z proc near
.text$mn:00001CBC                                         ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+3Cp
.text$mn:00001CBC
.text$mn:00001CBC var_1           = byte ptr -1
.text$mn:00001CBC arg_0           = dword ptr  8
.text$mn:00001CBC arg_4           = dword ptr  0Ch
.text$mn:00001CBC arg_8           = dword ptr  10h
.text$mn:00001CBC arg_C           = dword ptr  14h
.text$mn:00001CBC
.text$mn:00001CBC                 push    ebp
.text$mn:00001CBD                 mov     ebp, esp
.text$mn:00001CBF                 push    ecx
.text$mn:00001CC0                 lea     eax, [ebp+arg_0]
.text$mn:00001CC3                 push    eax
.text$mn:00001CC4                 lea     ecx, [ebp+var_1]
.text$mn:00001CC7                 push    ecx
.text$mn:00001CC8                 call    ??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::_Iter_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> * const &)
.text$mn:00001CCD                 add     esp, 8
.text$mn:00001CD0                 mov     dl, [eax]
.text$mn:00001CD2                 movzx   eax, dl
.text$mn:00001CD5                 push    eax
.text$mn:00001CD6                 mov     ecx, [ebp+arg_C]
.text$mn:00001CD9                 push    ecx             ; unsigned int
.text$mn:00001CDA                 mov     edx, [ebp+arg_8]
.text$mn:00001CDD                 push    edx             ; wchar_t *
.text$mn:00001CDE                 mov     eax, [ebp+arg_4]
.text$mn:00001CE1                 push    eax             ; int
.text$mn:00001CE2                 mov     ecx, [ebp+arg_0]
.text$mn:00001CE5                 push    ecx             ; int
.text$mn:00001CE6                 call    ??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:00001CEB                 add     esp, 14h
.text$mn:00001CEE                 mov     esp, ebp
.text$mn:00001CF0                 pop     ebp
.text$mn:00001CF1                 retn
.text$mn:00001CF1 ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z endp
.text$mn:00001CF1
.text$mn:00001CF1 ; ---------------------------------------------------------------------------
.text$mn:00001CF2                 align 4
.text$mn:00001CF2 _text$mn        ends
.text$mn:00001CF2
.text$mn:00001CF4 ; ===========================================================================
.text$mn:00001CF4
.text$mn:00001CF4 ; Segment type: Pure code
.text$mn:00001CF4 ; Segment permissions: Read/Execute
.text$mn:00001CF4 _text$mn        segment para public 'CODE' use32
.text$mn:00001CF4                 assume cs:_text$mn
.text$mn:00001CF4                 ;org 1CF4h
.text$mn:00001CF4 ; COMDAT (pick any)
.text$mn:00001CF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001CF4
.text$mn:00001CF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00001CF4
.text$mn:00001CF4 ; Attributes: bp-based frame
.text$mn:00001CF4
.text$mn:00001CF4 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> &)
.text$mn:00001CF4                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$mn:00001CF4 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z proc near
.text$mn:00001CF4                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+21p
.text$mn:00001CF4
.text$mn:00001CF4 var_1           = byte ptr -1
.text$mn:00001CF4 arg_0           = dword ptr  8
.text$mn:00001CF4 arg_4           = dword ptr  0Ch
.text$mn:00001CF4 arg_8           = dword ptr  10h
.text$mn:00001CF4
.text$mn:00001CF4                 push    ebp
.text$mn:00001CF5                 mov     ebp, esp
.text$mn:00001CF7                 push    ecx
.text$mn:00001CF8                 mov     eax, [ebp+arg_4]
.text$mn:00001CFB                 push    eax
.text$mn:00001CFC                 mov     ecx, [ebp+arg_0]
.text$mn:00001CFF                 push    ecx
.text$mn:00001D00                 call    ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00001D05                 add     esp, 8
.text$mn:00001D08                 mov     [ebp+var_1], al
.text$mn:00001D0B                 movzx   edx, [ebp+var_1]
.text$mn:00001D0F                 push    edx
.text$mn:00001D10                 mov     eax, [ebp+arg_8]
.text$mn:00001D13                 push    eax
.text$mn:00001D14                 mov     ecx, [ebp+arg_4]
.text$mn:00001D17                 push    ecx
.text$mn:00001D18                 mov     edx, [ebp+arg_0]
.text$mn:00001D1B                 push    edx
.text$mn:00001D1C                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)
.text$mn:00001D21                 add     esp, 10h
.text$mn:00001D24                 mov     esp, ebp
.text$mn:00001D26                 pop     ebp
.text$mn:00001D27                 retn
.text$mn:00001D27 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z endp
.text$mn:00001D27
.text$mn:00001D27 _text$mn        ends
.text$mn:00001D27
.text$mn:00001D28 ; ===========================================================================
.text$mn:00001D28
.text$mn:00001D28 ; Segment type: Pure code
.text$mn:00001D28 ; Segment permissions: Read/Execute
.text$mn:00001D28 _text$mn        segment para public 'CODE' use32
.text$mn:00001D28                 assume cs:_text$mn
.text$mn:00001D28                 ;org 1D28h
.text$mn:00001D28 ; COMDAT (pick any)
.text$mn:00001D28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001D28
.text$mn:00001D28 ; =============== S U B R O U T I N E =======================================
.text$mn:00001D28
.text$mn:00001D28 ; Attributes: bp-based frame
.text$mn:00001D28
.text$mn:00001D28 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> &, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:00001D28                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00001D28 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00001D28                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+28p
.text$mn:00001D28
.text$mn:00001D28 arg_0           = dword ptr  8
.text$mn:00001D28 arg_4           = dword ptr  0Ch
.text$mn:00001D28 arg_8           = dword ptr  10h
.text$mn:00001D28
.text$mn:00001D28                 push    ebp
.text$mn:00001D29                 mov     ebp, esp
.text$mn:00001D2B                 jmp     short loc_1D36
.text$mn:00001D2D ; ---------------------------------------------------------------------------
.text$mn:00001D2D
.text$mn:00001D2D loc_1D2D:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+22j
.text$mn:00001D2D                 mov     eax, [ebp+arg_0]
.text$mn:00001D30                 add     eax, 1Ch
.text$mn:00001D33                 mov     [ebp+arg_0], eax
.text$mn:00001D36
.text$mn:00001D36 loc_1D36:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+3j
.text$mn:00001D36                 mov     ecx, [ebp+arg_0]
.text$mn:00001D39                 cmp     ecx, [ebp+arg_4]
.text$mn:00001D3C                 jz      short loc_1D4C
.text$mn:00001D3E                 mov     edx, [ebp+arg_0]
.text$mn:00001D41                 push    edx
.text$mn:00001D42                 mov     ecx, [ebp+arg_8]
.text$mn:00001D45                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00001D4A                 jmp     short loc_1D2D
.text$mn:00001D4C ; ---------------------------------------------------------------------------
.text$mn:00001D4C
.text$mn:00001D4C loc_1D4C:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+14j
.text$mn:00001D4C                 pop     ebp
.text$mn:00001D4D                 retn
.text$mn:00001D4D ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00001D4D
.text$mn:00001D4D ; ---------------------------------------------------------------------------
.text$mn:00001D4E                 align 10h
.text$mn:00001D4E _text$mn        ends
.text$mn:00001D4E
.text$mn:00001D50 ; ===========================================================================
.text$mn:00001D50
.text$mn:00001D50 ; Segment type: Pure code
.text$mn:00001D50 ; Segment permissions: Read/Execute
.text$mn:00001D50 _text$mn        segment para public 'CODE' use32
.text$mn:00001D50                 assume cs:_text$mn
.text$mn:00001D50                 ;org 1D50h
.text$mn:00001D50 ; COMDAT (pick any)
.text$mn:00001D50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001D50
.text$mn:00001D50 ; =============== S U B R O U T I N E =======================================
.text$mn:00001D50
.text$mn:00001D50 ; Attributes: bp-based frame
.text$mn:00001D50
.text$mn:00001D50 ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * const &)
.text$mn:00001D50                 public ??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
.text$mn:00001D50 ??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z proc near
.text$mn:00001D50                                         ; CODE XREF: std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)+Cp
.text$mn:00001D50
.text$mn:00001D50 var_1           = byte ptr -1
.text$mn:00001D50 arg_0           = dword ptr  8
.text$mn:00001D50
.text$mn:00001D50                 push    ebp
.text$mn:00001D51                 mov     ebp, esp
.text$mn:00001D53                 push    ecx
.text$mn:00001D54                 mov     eax, [ebp+arg_0]
.text$mn:00001D57                 mov     cl, [ebp+var_1]
.text$mn:00001D5A                 mov     [eax], cl
.text$mn:00001D5C                 mov     eax, [ebp+arg_0]
.text$mn:00001D5F                 mov     esp, ebp
.text$mn:00001D61                 pop     ebp
.text$mn:00001D62                 retn
.text$mn:00001D62 ??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z endp
.text$mn:00001D62
.text$mn:00001D62 ; ---------------------------------------------------------------------------
.text$mn:00001D63                 align 4
.text$mn:00001D63 _text$mn        ends
.text$mn:00001D63
.text$mn:00001D64 ; ===========================================================================
.text$mn:00001D64
.text$mn:00001D64 ; Segment type: Pure code
.text$mn:00001D64 ; Segment permissions: Read/Execute
.text$mn:00001D64 _text$mn        segment para public 'CODE' use32
.text$mn:00001D64                 assume cs:_text$mn
.text$mn:00001D64                 ;org 1D64h
.text$mn:00001D64 ; COMDAT (pick any)
.text$mn:00001D64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001D64
.text$mn:00001D64 ; =============== S U B R O U T I N E =======================================
.text$mn:00001D64
.text$mn:00001D64 ; Attributes: bp-based frame
.text$mn:00001D64
.text$mn:00001D64 ; struct std::_Nonscalar_ptr_iterator_tag __cdecl std::_Ptr_cat<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00001D64                 public ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z
.text$mn:00001D64 ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z proc near
.text$mn:00001D64                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+Cp
.text$mn:00001D64                                         ; std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+Cp
.text$mn:00001D64
.text$mn:00001D64 var_1           = byte ptr -1
.text$mn:00001D64
.text$mn:00001D64                 push    ebp
.text$mn:00001D65                 mov     ebp, esp
.text$mn:00001D67                 push    ecx
.text$mn:00001D68                 mov     al, [ebp+var_1]
.text$mn:00001D6B                 mov     esp, ebp
.text$mn:00001D6D                 pop     ebp
.text$mn:00001D6E                 retn
.text$mn:00001D6E ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z endp
.text$mn:00001D6E
.text$mn:00001D6E ; ---------------------------------------------------------------------------
.text$mn:00001D6F                 align 10h
.text$mn:00001D6F _text$mn        ends
.text$mn:00001D6F
.text$mn:00001D70 ; ===========================================================================
.text$mn:00001D70
.text$mn:00001D70 ; Segment type: Pure code
.text$mn:00001D70 ; Segment permissions: Read/Execute
.text$mn:00001D70 _text$mn        segment para public 'CODE' use32
.text$mn:00001D70                 assume cs:_text$mn
.text$mn:00001D70                 ;org 1D70h
.text$mn:00001D70 ; COMDAT (pick any)
.text$mn:00001D70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001D70
.text$mn:00001D70 ; =============== S U B R O U T I N E =======================================
.text$mn:00001D70
.text$mn:00001D70 ; Attributes: bp-based frame
.text$mn:00001D70
.text$mn:00001D70 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * & __cdecl std::_Rechecked<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00001D70                 public ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z
.text$mn:00001D70 ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z proc near
.text$mn:00001D70                                         ; CODE XREF: std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+3Bp
.text$mn:00001D70
.text$mn:00001D70 arg_0           = dword ptr  8
.text$mn:00001D70 arg_4           = dword ptr  0Ch
.text$mn:00001D70
.text$mn:00001D70                 push    ebp
.text$mn:00001D71                 mov     ebp, esp
.text$mn:00001D73                 mov     eax, [ebp+arg_0]
.text$mn:00001D76                 mov     ecx, [ebp+arg_4]
.text$mn:00001D79                 mov     [eax], ecx
.text$mn:00001D7B                 mov     eax, [ebp+arg_0]
.text$mn:00001D7E                 pop     ebp
.text$mn:00001D7F                 retn
.text$mn:00001D7F ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z endp
.text$mn:00001D7F
.text$mn:00001D7F _text$mn        ends
.text$mn:00001D7F
.text$mn:00001D80 ; ===========================================================================
.text$mn:00001D80
.text$mn:00001D80 ; Segment type: Pure code
.text$mn:00001D80 ; Segment permissions: Read/Execute
.text$mn:00001D80 _text$mn        segment para public 'CODE' use32
.text$mn:00001D80                 assume cs:_text$mn
.text$mn:00001D80                 ;org 1D80h
.text$mn:00001D80 ; COMDAT (pick any)
.text$mn:00001D80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001D80
.text$mn:00001D80 ; =============== S U B R O U T I N E =======================================
.text$mn:00001D80
.text$mn:00001D80 ; Attributes: bp-based frame
.text$mn:00001D80
.text$mn:00001D80 ; protected: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Umove<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00001D80                 public ??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PAV21@00@Z
.text$mn:00001D80 ??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PAV21@00@Z proc near
.text$mn:00001D80                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+65p
.text$mn:00001D80
.text$mn:00001D80 var_8           = dword ptr -8
.text$mn:00001D80 var_1           = byte ptr -1
.text$mn:00001D80 arg_0           = dword ptr  8
.text$mn:00001D80 arg_4           = dword ptr  0Ch
.text$mn:00001D80 arg_8           = dword ptr  10h
.text$mn:00001D80
.text$mn:00001D80                 push    ebp
.text$mn:00001D81                 mov     ebp, esp
.text$mn:00001D83                 sub     esp, 8
.text$mn:00001D86                 mov     [ebp+var_8], ecx
.text$mn:00001D89                 lea     eax, [ebp+var_1]
.text$mn:00001D8C                 push    eax
.text$mn:00001D8D                 mov     ecx, [ebp+var_8]
.text$mn:00001D90                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:00001D95                 lea     ecx, [ebp+var_1]
.text$mn:00001D98                 push    ecx
.text$mn:00001D99                 mov     edx, [ebp+arg_8]
.text$mn:00001D9C                 push    edx
.text$mn:00001D9D                 mov     eax, [ebp+arg_4]
.text$mn:00001DA0                 push    eax
.text$mn:00001DA1                 mov     ecx, [ebp+arg_0]
.text$mn:00001DA4                 push    ecx
.text$mn:00001DA5                 call    ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:00001DAA                 add     esp, 10h
.text$mn:00001DAD                 mov     esp, ebp
.text$mn:00001DAF                 pop     ebp
.text$mn:00001DB0                 retn    0Ch
.text$mn:00001DB0 ??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PAV21@00@Z endp
.text$mn:00001DB0
.text$mn:00001DB0 ; ---------------------------------------------------------------------------
.text$mn:00001DB3                 align 4
.text$mn:00001DB3 _text$mn        ends
.text$mn:00001DB3
.text$mn:00001DB4 ; ===========================================================================
.text$mn:00001DB4
.text$mn:00001DB4 ; Segment type: Pure code
.text$mn:00001DB4 ; Segment permissions: Read/Execute
.text$mn:00001DB4 _text$mn        segment para public 'CODE' use32
.text$mn:00001DB4                 assume cs:_text$mn
.text$mn:00001DB4                 ;org 1DB4h
.text$mn:00001DB4 ; COMDAT (pick any)
.text$mn:00001DB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001DB4
.text$mn:00001DB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00001DB4
.text$mn:00001DB4 ; Attributes: bp-based frame
.text$mn:00001DB4
.text$mn:00001DB4 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Unchecked<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00001DB4                 public ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z
.text$mn:00001DB4 ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z proc near
.text$mn:00001DB4                                         ; CODE XREF: std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+Bp
.text$mn:00001DB4                                         ; std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+18p ...
.text$mn:00001DB4
.text$mn:00001DB4 arg_0           = dword ptr  8
.text$mn:00001DB4
.text$mn:00001DB4                 push    ebp
.text$mn:00001DB5                 mov     ebp, esp
.text$mn:00001DB7                 mov     eax, [ebp+arg_0]
.text$mn:00001DBA                 pop     ebp
.text$mn:00001DBB                 retn
.text$mn:00001DBB ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z endp
.text$mn:00001DBB
.text$mn:00001DBB _text$mn        ends
.text$mn:00001DBB
.text$mn:00001DBC ; ===========================================================================
.text$mn:00001DBC
.text$mn:00001DBC ; Segment type: Pure code
.text$mn:00001DBC ; Segment permissions: Read/Execute
.text$mn:00001DBC _text$mn        segment para public 'CODE' use32
.text$mn:00001DBC                 assume cs:_text$mn
.text$mn:00001DBC                 ;org 1DBCh
.text$mn:00001DBC ; COMDAT (pick any)
.text$mn:00001DBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001DBC
.text$mn:00001DBC ; =============== S U B R O U T I N E =======================================
.text$mn:00001DBC
.text$mn:00001DBC ; Attributes: bp-based frame
.text$mn:00001DBC
.text$mn:00001DBC ; int __cdecl std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(int, int, void *, int)
.text$mn:00001DBC                 public ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$mn:00001DBC ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z proc near
.text$mn:00001DBC                                         ; CODE XREF: std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+2Ep
.text$mn:00001DBC
.text$mn:00001DBC var_1           = byte ptr -1
.text$mn:00001DBC arg_0           = dword ptr  8
.text$mn:00001DBC arg_4           = dword ptr  0Ch
.text$mn:00001DBC arg_8           = dword ptr  10h
.text$mn:00001DBC arg_C           = dword ptr  14h
.text$mn:00001DBC
.text$mn:00001DBC                 push    ebp
.text$mn:00001DBD                 mov     ebp, esp
.text$mn:00001DBF                 push    ecx
.text$mn:00001DC0                 mov     eax, [ebp+arg_8]
.text$mn:00001DC3                 push    eax
.text$mn:00001DC4                 mov     ecx, [ebp+arg_0]
.text$mn:00001DC7                 push    ecx
.text$mn:00001DC8                 call    ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00001DCD                 add     esp, 8
.text$mn:00001DD0                 mov     [ebp+var_1], al
.text$mn:00001DD3                 movzx   edx, [ebp+var_1]
.text$mn:00001DD7                 push    edx
.text$mn:00001DD8                 mov     eax, [ebp+arg_0]
.text$mn:00001DDB                 push    eax
.text$mn:00001DDC                 call    ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Val_type<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00001DE1                 add     esp, 4
.text$mn:00001DE4                 push    eax
.text$mn:00001DE5                 mov     ecx, [ebp+arg_C]
.text$mn:00001DE8                 push    ecx             ; int
.text$mn:00001DE9                 mov     edx, [ebp+arg_8]
.text$mn:00001DEC                 push    edx             ; void *
.text$mn:00001DED                 mov     eax, [ebp+arg_4]
.text$mn:00001DF0                 push    eax             ; int
.text$mn:00001DF1                 mov     ecx, [ebp+arg_0]
.text$mn:00001DF4                 push    ecx             ; int
.text$mn:00001DF5                 call    ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)
.text$mn:00001DFA                 add     esp, 18h
.text$mn:00001DFD                 mov     esp, ebp
.text$mn:00001DFF                 pop     ebp
.text$mn:00001E00                 retn
.text$mn:00001E00 ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z endp
.text$mn:00001E00
.text$mn:00001E00 ; ---------------------------------------------------------------------------
.text$mn:00001E01                 align 4
.text$mn:00001E01 _text$mn        ends
.text$mn:00001E01
.text$mn:00001E04 ; ===========================================================================
.text$mn:00001E04
.text$mn:00001E04 ; Segment type: Pure code
.text$mn:00001E04 ; Segment permissions: Read/Execute
.text$mn:00001E04 _text$mn        segment para public 'CODE' use32
.text$mn:00001E04                 assume cs:_text$mn
.text$mn:00001E04                 ;org 1E04h
.text$mn:00001E04 ; COMDAT (pick any)
.text$mn:00001E04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001E04
.text$mn:00001E04 ; =============== S U B R O U T I N E =======================================
.text$mn:00001E04
.text$mn:00001E04 ; Attributes: bp-based frame
.text$mn:00001E04
.text$mn:00001E04 ; int __cdecl std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(int, int, void *, int)
.text$mn:00001E04                 public ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00001E04 ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00001E04                                         ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+39p
.text$mn:00001E04
.text$mn:00001E04 var_14          = dword ptr -14h
.text$mn:00001E04 var_10          = dword ptr -10h
.text$mn:00001E04 var_C           = dword ptr -0Ch
.text$mn:00001E04 var_4           = dword ptr -4
.text$mn:00001E04 arg_0           = dword ptr  8
.text$mn:00001E04 arg_4           = dword ptr  0Ch
.text$mn:00001E04 arg_8           = dword ptr  10h
.text$mn:00001E04 arg_C           = dword ptr  14h
.text$mn:00001E04
.text$mn:00001E04 ; FUNCTION CHUNK AT .text$mn:00001ECB SIZE 00000009 BYTES
.text$mn:00001E04 ; FUNCTION CHUNK AT .text$mn:00001EDB SIZE 00000015 BYTES
.text$mn:00001E04
.text$mn:00001E04                 push    ebp
.text$mn:00001E05                 mov     ebp, esp
.text$mn:00001E07                 push    0FFFFFFFFh
.text$mn:00001E09                 push    offset __ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00001E0E                 mov     eax, large fs:0
.text$mn:00001E14                 push    eax
.text$mn:00001E15                 push    ecx
.text$mn:00001E16                 push    ecx
.text$mn:00001E17                 push    ebx
.text$mn:00001E18                 push    esi
.text$mn:00001E19                 push    edi
.text$mn:00001E1A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001E1F                 xor     eax, ebp
.text$mn:00001E21                 push    eax
.text$mn:00001E22                 lea     eax, [ebp+var_C]
.text$mn:00001E25                 mov     large fs:0, eax
.text$mn:00001E2B                 mov     [ebp+var_10], esp
.text$mn:00001E2E                 push    1B6h            ; unsigned int
.text$mn:00001E33                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00001E38                 mov     eax, [ebp+arg_4]
.text$mn:00001E3B                 push    eax             ; int
.text$mn:00001E3C                 mov     ecx, [ebp+arg_0]
.text$mn:00001E3F                 push    ecx             ; int
.text$mn:00001E40                 call    ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z ; std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:00001E45                 add     esp, 10h
.text$mn:00001E48                 push    1B7h            ; unsigned int
.text$mn:00001E4D                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00001E52                 mov     edx, [ebp+arg_8]
.text$mn:00001E55                 push    edx             ; int
.text$mn:00001E56                 call    ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:00001E5B                 add     esp, 0Ch
.text$mn:00001E5E                 mov     eax, [ebp+arg_8]
.text$mn:00001E61                 mov     [ebp+var_14], eax
.text$mn:00001E64                 mov     [ebp+var_4], 0
.text$mn:00001E6B                 jmp     short loc_1E7F
.text$mn:00001E6D ; ---------------------------------------------------------------------------
.text$mn:00001E6D
.text$mn:00001E6D loc_1E6D:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+93j
.text$mn:00001E6D                 mov     ecx, [ebp+arg_8]
.text$mn:00001E70                 add     ecx, 1Ch
.text$mn:00001E73                 mov     [ebp+arg_8], ecx
.text$mn:00001E76                 mov     edx, [ebp+arg_0]
.text$mn:00001E79                 add     edx, 1Ch
.text$mn:00001E7C                 mov     [ebp+arg_0], edx
.text$mn:00001E7F
.text$mn:00001E7F loc_1E7F:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+67j
.text$mn:00001E7F                 mov     eax, [ebp+arg_0]
.text$mn:00001E82                 cmp     eax, [ebp+arg_4]
.text$mn:00001E85                 jz      short loc_1E99
.text$mn:00001E87                 mov     ecx, [ebp+arg_0]
.text$mn:00001E8A                 push    ecx             ; int
.text$mn:00001E8B                 mov     edx, [ebp+arg_8]
.text$mn:00001E8E                 push    edx             ; void *
.text$mn:00001E8F                 mov     ecx, [ebp+arg_C]
.text$mn:00001E92                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00001E97                 jmp     short loc_1E6D
.text$mn:00001E99 ; ---------------------------------------------------------------------------
.text$mn:00001E99
.text$mn:00001E99 loc_1E99:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+81j
.text$mn:00001E99                 jmp     short loc_1ECB
.text$mn:00001E99 ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00001E99
.text$mn:00001E9B
.text$mn:00001E9B ; =============== S U B R O U T I N E =======================================
.text$mn:00001E9B
.text$mn:00001E9B ; Attributes: noreturn
.text$mn:00001E9B
.text$mn:00001E9B __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
.text$mn:00001E9B                                         ; DATA XREF: .xdata$x:000081C4o
.text$mn:00001E9B                 jmp     short loc_1EA6
.text$mn:00001E9D ; ---------------------------------------------------------------------------
.text$mn:00001E9D
.text$mn:00001E9D loc_1E9D:                               ; CODE XREF: __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Fj
.text$mn:00001E9D                 mov     eax, [ebp-14h]
.text$mn:00001EA0                 add     eax, 1Ch
.text$mn:00001EA3                 mov     [ebp-14h], eax
.text$mn:00001EA6
.text$mn:00001EA6 loc_1EA6:                               ; CODE XREF: __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0j
.text$mn:00001EA6                 mov     ecx, [ebp-14h]
.text$mn:00001EA9                 cmp     ecx, [ebp+10h]
.text$mn:00001EAC                 jz      short loc_1EBC
.text$mn:00001EAE                 mov     edx, [ebp-14h]
.text$mn:00001EB1                 push    edx
.text$mn:00001EB2                 mov     ecx, [ebp+14h]
.text$mn:00001EB5                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00001EBA                 jmp     short loc_1E9D
.text$mn:00001EBC ; ---------------------------------------------------------------------------
.text$mn:00001EBC
.text$mn:00001EBC loc_1EBC:                               ; CODE XREF: __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+11j
.text$mn:00001EBC                 push    0
.text$mn:00001EBE                 push    0
.text$mn:00001EC0                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00001EC0 __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 endp
.text$mn:00001EC0
.text$mn:00001EC5 ; ---------------------------------------------------------------------------
.text$mn:00001EC5                 mov     eax, offset $LN13
.text$mn:00001ECA                 retn
.text$mn:00001ECB ; ---------------------------------------------------------------------------
.text$mn:00001ECB ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00001ECB
.text$mn:00001ECB loc_1ECB:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag):loc_1E99j
.text$mn:00001ECB                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001ED2                 jmp     short loc_1EDB
.text$mn:00001ED2 ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00001ED4
.text$mn:00001ED4 ; =============== S U B R O U T I N E =======================================
.text$mn:00001ED4
.text$mn:00001ED4
.text$mn:00001ED4 $LN13           proc near               ; DATA XREF: .text$mn:00001EC5o
.text$mn:00001ED4                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00001ED4 $LN13           endp ; sp-analysis failed
.text$mn:00001ED4
.text$mn:00001EDB ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00001EDB
.text$mn:00001EDB loc_1EDB:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+CEj
.text$mn:00001EDB                 mov     eax, [ebp+arg_8]
.text$mn:00001EDE                 mov     ecx, [ebp+var_C]
.text$mn:00001EE1                 mov     large fs:0, ecx
.text$mn:00001EE8                 pop     ecx
.text$mn:00001EE9                 pop     edi
.text$mn:00001EEA                 pop     esi
.text$mn:00001EEB                 pop     ebx
.text$mn:00001EEC                 mov     esp, ebp
.text$mn:00001EEE                 pop     ebp
.text$mn:00001EEF                 retn
.text$mn:00001EEF ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00001EEF _text$mn        ends
.text$mn:00001EEF
.text$x:00001EF0 ; ===========================================================================
.text$x:00001EF0
.text$x:00001EF0 ; Segment type: Pure code
.text$x:00001EF0 ; Segment permissions: Read/Execute
.text$x:00001EF0 _text$x         segment para public 'CODE' use32
.text$x:00001EF0                 assume cs:_text$x
.text$x:00001EF0                 ;org 1EF0h
.text$x:00001EF0 ; COMDAT (pick associative to section at 1E04)
.text$x:00001EF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001EF0
.text$x:00001EF0 ; =============== S U B R O U T I N E =======================================
.text$x:00001EF0
.text$x:00001EF0
.text$x:00001EF0 __ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$x:00001EF0                                         ; DATA XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+5o
.text$x:00001EF0
.text$x:00001EF0 arg_4           = dword ptr  8
.text$x:00001EF0
.text$x:00001EF0                 mov     edx, [esp+arg_4]
.text$x:00001EF4                 lea     eax, [edx+0Ch]
.text$x:00001EF7                 mov     ecx, [edx-18h]
.text$x:00001EFA                 xor     ecx, eax
.text$x:00001EFC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001F01                 mov     eax, offset __ehfuncinfo$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$x:00001F06                 jmp     ___CxxFrameHandler3
.text$x:00001F06 __ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$x:00001F06
.text$x:00001F06 ; ---------------------------------------------------------------------------
.text$x:00001F0B                 align 4
.text$x:00001F0B _text$x         ends
.text$x:00001F0B
.text$mn:00001F0C ; ===========================================================================
.text$mn:00001F0C
.text$mn:00001F0C ; Segment type: Pure code
.text$mn:00001F0C ; Segment permissions: Read/Execute
.text$mn:00001F0C _text$mn        segment para public 'CODE' use32
.text$mn:00001F0C                 assume cs:_text$mn
.text$mn:00001F0C                 ;org 1F0Ch
.text$mn:00001F0C ; COMDAT (pick any)
.text$mn:00001F0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001F0C
.text$mn:00001F0C ; =============== S U B R O U T I N E =======================================
.text$mn:00001F0C
.text$mn:00001F0C ; Attributes: bp-based frame
.text$mn:00001F0C
.text$mn:00001F0C ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Uninitialized_move<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> &)
.text$mn:00001F0C                 public ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$mn:00001F0C ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z proc near
.text$mn:00001F0C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+25p
.text$mn:00001F0C
.text$mn:00001F0C arg_0           = dword ptr  8
.text$mn:00001F0C arg_4           = dword ptr  0Ch
.text$mn:00001F0C arg_8           = dword ptr  10h
.text$mn:00001F0C arg_C           = dword ptr  14h
.text$mn:00001F0C
.text$mn:00001F0C                 push    ebp
.text$mn:00001F0D                 mov     ebp, esp
.text$mn:00001F0F                 mov     eax, [ebp+arg_C]
.text$mn:00001F12                 push    eax             ; int
.text$mn:00001F13                 mov     ecx, [ebp+arg_8]
.text$mn:00001F16                 push    ecx
.text$mn:00001F17                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00001F1C                 add     esp, 4
.text$mn:00001F1F                 push    eax             ; void *
.text$mn:00001F20                 mov     edx, [ebp+arg_4]
.text$mn:00001F23                 push    edx
.text$mn:00001F24                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00001F29                 add     esp, 4
.text$mn:00001F2C                 push    eax             ; int
.text$mn:00001F2D                 mov     eax, [ebp+arg_0]
.text$mn:00001F30                 push    eax
.text$mn:00001F31                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00001F36                 add     esp, 4
.text$mn:00001F39                 push    eax             ; int
.text$mn:00001F3A                 call    ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z ; std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:00001F3F                 add     esp, 10h
.text$mn:00001F42                 push    eax
.text$mn:00001F43                 lea     ecx, [ebp+arg_8]
.text$mn:00001F46                 push    ecx
.text$mn:00001F47                 call    ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z ; std::_Rechecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> * &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00001F4C                 add     esp, 8
.text$mn:00001F4F                 mov     eax, [eax]
.text$mn:00001F51                 pop     ebp
.text$mn:00001F52                 retn
.text$mn:00001F52 ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z endp
.text$mn:00001F52
.text$mn:00001F52 ; ---------------------------------------------------------------------------
.text$mn:00001F53                 align 4
.text$mn:00001F53 _text$mn        ends
.text$mn:00001F53
.text$mn:00001F54 ; ===========================================================================
.text$mn:00001F54
.text$mn:00001F54 ; Segment type: Pure code
.text$mn:00001F54 ; Segment permissions: Read/Execute
.text$mn:00001F54 _text$mn        segment para public 'CODE' use32
.text$mn:00001F54                 assume cs:_text$mn
.text$mn:00001F54                 ;org 1F54h
.text$mn:00001F54 ; COMDAT (pick any)
.text$mn:00001F54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001F54
.text$mn:00001F54 ; =============== S U B R O U T I N E =======================================
.text$mn:00001F54
.text$mn:00001F54 ; Attributes: bp-based frame
.text$mn:00001F54
.text$mn:00001F54 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Val_type<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00001F54                 public ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z
.text$mn:00001F54 ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z proc near
.text$mn:00001F54                                         ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+20p
.text$mn:00001F54                 push    ebp
.text$mn:00001F55                 mov     ebp, esp
.text$mn:00001F57                 xor     eax, eax
.text$mn:00001F59                 pop     ebp
.text$mn:00001F5A                 retn
.text$mn:00001F5A ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z endp
.text$mn:00001F5A
.text$mn:00001F5A ; ---------------------------------------------------------------------------
.text$mn:00001F5B                 align 4
.text$mn:00001F5B _text$mn        ends
.text$mn:00001F5B
.text$mn:00001F5C ; ===========================================================================
.text$mn:00001F5C
.text$mn:00001F5C ; Segment type: Pure code
.text$mn:00001F5C ; Segment permissions: Read/Execute
.text$mn:00001F5C _text$mn        segment para public 'CODE' use32
.text$mn:00001F5C                 assume cs:_text$mn
.text$mn:00001F5C                 ;org 1F5Ch
.text$mn:00001F5C ; COMDAT (pick any)
.text$mn:00001F5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001F5C
.text$mn:00001F5C ; =============== S U B R O U T I N E =======================================
.text$mn:00001F5C
.text$mn:00001F5C ; Attributes: bp-based frame
.text$mn:00001F5C
.text$mn:00001F5C ; char * __cdecl std::addressof<char>(char &)
.text$mn:00001F5C                 public ??$addressof@D@std@@YAPADAAD@Z
.text$mn:00001F5C ??$addressof@D@std@@YAPADAAD@Z proc near
.text$mn:00001F5C                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p
.text$mn:00001F5C                                         ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p ...
.text$mn:00001F5C
.text$mn:00001F5C arg_0           = dword ptr  8
.text$mn:00001F5C
.text$mn:00001F5C                 push    ebp
.text$mn:00001F5D                 mov     ebp, esp
.text$mn:00001F5F                 mov     eax, [ebp+arg_0]
.text$mn:00001F62                 pop     ebp
.text$mn:00001F63                 retn
.text$mn:00001F63 ??$addressof@D@std@@YAPADAAD@Z endp
.text$mn:00001F63
.text$mn:00001F63 _text$mn        ends
.text$mn:00001F63
.text$mn:00001F64 ; ===========================================================================
.text$mn:00001F64
.text$mn:00001F64 ; Segment type: Pure code
.text$mn:00001F64 ; Segment permissions: Read/Execute
.text$mn:00001F64 _text$mn        segment para public 'CODE' use32
.text$mn:00001F64                 assume cs:_text$mn
.text$mn:00001F64                 ;org 1F64h
.text$mn:00001F64 ; COMDAT (pick any)
.text$mn:00001F64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001F64
.text$mn:00001F64 ; =============== S U B R O U T I N E =======================================
.text$mn:00001F64
.text$mn:00001F64 ; Attributes: bp-based frame
.text$mn:00001F64
.text$mn:00001F64 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::addressof<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:00001F64                 public ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
.text$mn:00001F64 ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z proc near
.text$mn:00001F64                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+Dp
.text$mn:00001F64                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Dp
.text$mn:00001F64
.text$mn:00001F64 arg_0           = dword ptr  8
.text$mn:00001F64
.text$mn:00001F64                 push    ebp
.text$mn:00001F65                 mov     ebp, esp
.text$mn:00001F67                 mov     eax, [ebp+arg_0]
.text$mn:00001F6A                 pop     ebp
.text$mn:00001F6B                 retn
.text$mn:00001F6B ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z endp
.text$mn:00001F6B
.text$mn:00001F6B _text$mn        ends
.text$mn:00001F6B
.text$mn:00001F6C ; ===========================================================================
.text$mn:00001F6C
.text$mn:00001F6C ; Segment type: Pure code
.text$mn:00001F6C ; Segment permissions: Read/Execute
.text$mn:00001F6C _text$mn        segment para public 'CODE' use32
.text$mn:00001F6C                 assume cs:_text$mn
.text$mn:00001F6C                 ;org 1F6Ch
.text$mn:00001F6C ; COMDAT (pick any)
.text$mn:00001F6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001F6C
.text$mn:00001F6C ; =============== S U B R O U T I N E =======================================
.text$mn:00001F6C
.text$mn:00001F6C ; Attributes: bp-based frame
.text$mn:00001F6C
.text$mn:00001F6C ; wchar_t * __cdecl std::addressof<wchar_t>(wchar_t &)
.text$mn:00001F6C                 public ??$addressof@_W@std@@YAPA_WAA_W@Z
.text$mn:00001F6C ??$addressof@_W@std@@YAPA_WAA_W@Z proc near
.text$mn:00001F6C                                         ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p
.text$mn:00001F6C                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p ...
.text$mn:00001F6C
.text$mn:00001F6C arg_0           = dword ptr  8
.text$mn:00001F6C
.text$mn:00001F6C                 push    ebp
.text$mn:00001F6D                 mov     ebp, esp
.text$mn:00001F6F                 mov     eax, [ebp+arg_0]
.text$mn:00001F72                 pop     ebp
.text$mn:00001F73                 retn
.text$mn:00001F73 ??$addressof@_W@std@@YAPA_WAA_W@Z endp
.text$mn:00001F73
.text$mn:00001F73 _text$mn        ends
.text$mn:00001F73
.text$mn:00001F74 ; ===========================================================================
.text$mn:00001F74
.text$mn:00001F74 ; Segment type: Pure code
.text$mn:00001F74 ; Segment permissions: Read/Execute
.text$mn:00001F74 _text$mn        segment para public 'CODE' use32
.text$mn:00001F74                 assume cs:_text$mn
.text$mn:00001F74                 ;org 1F74h
.text$mn:00001F74 ; COMDAT (pick any)
.text$mn:00001F74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001F74
.text$mn:00001F74 ; =============== S U B R O U T I N E =======================================
.text$mn:00001F74
.text$mn:00001F74 ; Attributes: bp-based frame
.text$mn:00001F74
.text$mn:00001F74 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign<class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>>(class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>)
.text$mn:00001F74                 public ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.text$mn:00001F74 ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z proc near
.text$mn:00001F74                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+CBp
.text$mn:00001F74
.text$mn:00001F74 var_70          = byte ptr -70h
.text$mn:00001F74 var_64          = byte ptr -64h
.text$mn:00001F74 var_58          = dword ptr -58h
.text$mn:00001F74 var_54          = dword ptr -54h
.text$mn:00001F74 var_50          = dword ptr -50h
.text$mn:00001F74 var_4C          = dword ptr -4Ch
.text$mn:00001F74 var_48          = dword ptr -48h
.text$mn:00001F74 var_44          = dword ptr -44h
.text$mn:00001F74 var_40          = dword ptr -40h
.text$mn:00001F74 var_3C          = dword ptr -3Ch
.text$mn:00001F74 var_38          = dword ptr -38h
.text$mn:00001F74 var_34          = dword ptr -34h
.text$mn:00001F74 var_30          = dword ptr -30h
.text$mn:00001F74 var_2C          = dword ptr -2Ch
.text$mn:00001F74 var_28          = dword ptr -28h
.text$mn:00001F74 var_24          = dword ptr -24h
.text$mn:00001F74 var_20          = dword ptr -20h
.text$mn:00001F74 var_1C          = dword ptr -1Ch
.text$mn:00001F74 var_18          = dword ptr -18h
.text$mn:00001F74 var_14          = dword ptr -14h
.text$mn:00001F74 var_10          = dword ptr -10h
.text$mn:00001F74 var_C           = dword ptr -0Ch
.text$mn:00001F74 var_4           = dword ptr -4
.text$mn:00001F74 arg_0           = byte ptr  8
.text$mn:00001F74 arg_C           = byte ptr  14h
.text$mn:00001F74
.text$mn:00001F74                 push    ebp
.text$mn:00001F75                 mov     ebp, esp
.text$mn:00001F77                 push    0FFFFFFFFh
.text$mn:00001F79                 push    offset __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.text$mn:00001F7E                 mov     eax, large fs:0
.text$mn:00001F84                 push    eax
.text$mn:00001F85                 sub     esp, 64h
.text$mn:00001F88                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001F8D                 xor     eax, ebp
.text$mn:00001F8F                 push    eax
.text$mn:00001F90                 lea     eax, [ebp+var_C]
.text$mn:00001F93                 mov     large fs:0, eax
.text$mn:00001F99                 mov     [ebp+var_10], ecx
.text$mn:00001F9C                 mov     [ebp+var_4], 1
.text$mn:00001FA3                 sub     esp, 0Ch
.text$mn:00001FA6                 mov     ecx, esp
.text$mn:00001FA8                 mov     [ebp+var_3C], esp
.text$mn:00001FAB                 lea     eax, [ebp+arg_C]
.text$mn:00001FAE                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00001FAF                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00001FB4                 mov     [ebp+var_14], eax
.text$mn:00001FB7                 mov     ecx, [ebp+var_14]
.text$mn:00001FBA                 mov     [ebp+var_40], ecx
.text$mn:00001FBD                 mov     byte ptr [ebp+var_4], 2
.text$mn:00001FC1                 sub     esp, 0Ch
.text$mn:00001FC4                 mov     ecx, esp
.text$mn:00001FC6                 mov     [ebp+var_44], esp
.text$mn:00001FC9                 lea     edx, [ebp+arg_0]
.text$mn:00001FCC                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00001FCD                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00001FD2                 mov     [ebp+var_18], eax
.text$mn:00001FD5                 mov     eax, [ebp+var_18]
.text$mn:00001FD8                 mov     [ebp+var_48], eax
.text$mn:00001FDB                 mov     byte ptr [ebp+var_4], 3
.text$mn:00001FDF                 lea     ecx, [ebp+var_70]
.text$mn:00001FE2                 push    ecx
.text$mn:00001FE3                 mov     ecx, [ebp+var_10]
.text$mn:00001FE6                 call    ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)
.text$mn:00001FEB                 mov     [ebp+var_1C], eax
.text$mn:00001FEE                 mov     edx, [ebp+var_1C]
.text$mn:00001FF1                 mov     [ebp+var_20], edx
.text$mn:00001FF4                 mov     byte ptr [ebp+var_4], 4
.text$mn:00001FF8                 sub     esp, 0Ch
.text$mn:00001FFB                 mov     ecx, esp
.text$mn:00001FFD                 mov     [ebp+var_4C], esp
.text$mn:00002000                 mov     eax, [ebp+var_20]
.text$mn:00002003                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00002004                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00002009                 mov     [ebp+var_24], eax
.text$mn:0000200C                 mov     ecx, [ebp+var_24]
.text$mn:0000200F                 mov     [ebp+var_50], ecx
.text$mn:00002012                 mov     byte ptr [ebp+var_4], 5
.text$mn:00002016                 lea     edx, [ebp+var_64]
.text$mn:00002019                 push    edx
.text$mn:0000201A                 mov     ecx, [ebp+var_10]
.text$mn:0000201D                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:00002022                 mov     [ebp+var_28], eax
.text$mn:00002025                 mov     eax, [ebp+var_28]
.text$mn:00002028                 mov     [ebp+var_2C], eax
.text$mn:0000202B                 mov     byte ptr [ebp+var_4], 6
.text$mn:0000202F                 sub     esp, 0Ch
.text$mn:00002032                 mov     ecx, esp
.text$mn:00002034                 mov     [ebp+var_54], esp
.text$mn:00002037                 mov     edx, [ebp+var_2C]
.text$mn:0000203A                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000203B                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00002040                 mov     [ebp+var_30], eax
.text$mn:00002043                 mov     eax, [ebp+var_30]
.text$mn:00002046                 mov     [ebp+var_58], eax
.text$mn:00002049                 mov     byte ptr [ebp+var_4], 7
.text$mn:0000204D                 mov     byte ptr [ebp+var_4], 9
.text$mn:00002051                 mov     ecx, [ebp+var_10]
.text$mn:00002054                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:00002059                 mov     [ebp+var_34], eax
.text$mn:0000205C                 mov     ecx, [ebp+var_34]
.text$mn:0000205F                 mov     [ebp+var_38], ecx
.text$mn:00002062                 mov     byte ptr [ebp+var_4], 8
.text$mn:00002066                 lea     ecx, [ebp+var_64]
.text$mn:00002069                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000206E                 mov     byte ptr [ebp+var_4], 1
.text$mn:00002072                 lea     ecx, [ebp+var_70]
.text$mn:00002075                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000207A                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000207E                 lea     ecx, [ebp+arg_0]
.text$mn:00002081                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00002086                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000208D                 lea     ecx, [ebp+arg_C]
.text$mn:00002090                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00002095                 mov     eax, [ebp+var_38]
.text$mn:00002098                 mov     ecx, [ebp+var_C]
.text$mn:0000209B                 mov     large fs:0, ecx
.text$mn:000020A2                 pop     ecx
.text$mn:000020A3                 mov     esp, ebp
.text$mn:000020A5                 pop     ebp
.text$mn:000020A6                 retn    18h
.text$mn:000020A6 ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z endp
.text$mn:000020A6
.text$mn:000020A6 ; ---------------------------------------------------------------------------
.text$mn:000020A9                 align 4
.text$mn:000020A9 _text$mn        ends
.text$mn:000020A9
.text$x:000020AC ; ===========================================================================
.text$x:000020AC
.text$x:000020AC ; Segment type: Pure code
.text$x:000020AC ; Segment permissions: Read/Execute
.text$x:000020AC _text$x         segment para public 'CODE' use32
.text$x:000020AC                 assume cs:_text$x
.text$x:000020AC                 ;org 20ACh
.text$x:000020AC ; COMDAT (pick associative to section at 1F74)
.text$x:000020AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000020AC
.text$x:000020AC ; =============== S U B R O U T I N E =======================================
.text$x:000020AC
.text$x:000020AC
.text$x:000020AC __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0 proc near
.text$x:000020AC                                         ; DATA XREF: .xdata$x:000080BCo
.text$x:000020AC                 lea     ecx, [ebp+14h]
.text$x:000020AF                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000020AF __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0 endp
.text$x:000020AF
.text$x:000020B4
.text$x:000020B4 ; =============== S U B R O U T I N E =======================================
.text$x:000020B4
.text$x:000020B4
.text$x:000020B4 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1 proc near
.text$x:000020B4                                         ; DATA XREF: .xdata$x:000080C4o
.text$x:000020B4                 lea     ecx, [ebp+8]
.text$x:000020B7                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000020B7 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1 endp
.text$x:000020B7
.text$x:000020BC
.text$x:000020BC ; =============== S U B R O U T I N E =======================================
.text$x:000020BC
.text$x:000020BC
.text$x:000020BC __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2 proc near
.text$x:000020BC                                         ; DATA XREF: .xdata$x:000080CCo
.text$x:000020BC                 mov     ecx, [ebp-3Ch]
.text$x:000020BF                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000020BF __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2 endp
.text$x:000020BF
.text$x:000020C4
.text$x:000020C4 ; =============== S U B R O U T I N E =======================================
.text$x:000020C4
.text$x:000020C4
.text$x:000020C4 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3 proc near
.text$x:000020C4                                         ; DATA XREF: .xdata$x:000080D4o
.text$x:000020C4                 mov     ecx, [ebp-44h]
.text$x:000020C7                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000020C7 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3 endp
.text$x:000020C7
.text$x:000020CC
.text$x:000020CC ; =============== S U B R O U T I N E =======================================
.text$x:000020CC
.text$x:000020CC
.text$x:000020CC __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4 proc near
.text$x:000020CC                                         ; DATA XREF: .xdata$x:000080DCo
.text$x:000020CC                                         ; .xdata$x:000080FCo
.text$x:000020CC                 lea     ecx, [ebp-70h]
.text$x:000020CF                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000020CF __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4 endp
.text$x:000020CF
.text$x:000020D4
.text$x:000020D4 ; =============== S U B R O U T I N E =======================================
.text$x:000020D4
.text$x:000020D4
.text$x:000020D4 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5 proc near
.text$x:000020D4                                         ; DATA XREF: .xdata$x:000080E4o
.text$x:000020D4                 mov     ecx, [ebp-4Ch]
.text$x:000020D7                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000020D7 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5 endp
.text$x:000020D7
.text$x:000020DC
.text$x:000020DC ; =============== S U B R O U T I N E =======================================
.text$x:000020DC
.text$x:000020DC
.text$x:000020DC __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6 proc near
.text$x:000020DC                                         ; DATA XREF: .xdata$x:000080ECo
.text$x:000020DC                                         ; .xdata$x:00008104o
.text$x:000020DC                 lea     ecx, [ebp-64h]
.text$x:000020DF                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000020DF __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6 endp
.text$x:000020DF
.text$x:000020E4
.text$x:000020E4 ; =============== S U B R O U T I N E =======================================
.text$x:000020E4
.text$x:000020E4
.text$x:000020E4 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7 proc near
.text$x:000020E4                                         ; DATA XREF: .xdata$x:000080F4o
.text$x:000020E4                 mov     ecx, [ebp-54h]
.text$x:000020E7                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000020E7 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7 endp
.text$x:000020E7
.text$x:000020EC
.text$x:000020EC ; =============== S U B R O U T I N E =======================================
.text$x:000020EC
.text$x:000020EC
.text$x:000020EC __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z proc near
.text$x:000020EC                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+5o
.text$x:000020EC
.text$x:000020EC arg_4           = dword ptr  8
.text$x:000020EC
.text$x:000020EC                 mov     edx, [esp+arg_4]
.text$x:000020F0                 lea     eax, [edx+0Ch]
.text$x:000020F3                 mov     ecx, [edx-68h]
.text$x:000020F6                 xor     ecx, eax
.text$x:000020F8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000020FD                 mov     eax, offset __ehfuncinfo$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.text$x:00002102                 jmp     ___CxxFrameHandler3
.text$x:00002102 __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z endp
.text$x:00002102
.text$x:00002102 ; ---------------------------------------------------------------------------
.text$x:00002107                 align 4
.text$x:00002107 _text$x         ends
.text$x:00002107
.text$mn:00002108 ; ===========================================================================
.text$mn:00002108
.text$mn:00002108 ; Segment type: Pure code
.text$mn:00002108 ; Segment permissions: Read/Execute
.text$mn:00002108 _text$mn        segment para public 'CODE' use32
.text$mn:00002108                 assume cs:_text$mn
.text$mn:00002108                 ;org 2108h
.text$mn:00002108 ; COMDAT (pick any)
.text$mn:00002108                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002108
.text$mn:00002108 ; =============== S U B R O U T I N E =======================================
.text$mn:00002108
.text$mn:00002108 ; Attributes: bp-based frame
.text$mn:00002108
.text$mn:00002108 ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(void *, int)
.text$mn:00002108                 public ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
.text$mn:00002108 ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:00002108                                         ; CODE XREF: $LN19+4Bp
.text$mn:00002108
.text$mn:00002108 var_4           = dword ptr -4
.text$mn:00002108 arg_0           = dword ptr  8
.text$mn:00002108 arg_4           = dword ptr  0Ch
.text$mn:00002108
.text$mn:00002108                 push    ebp
.text$mn:00002109                 mov     ebp, esp
.text$mn:0000210B                 push    ecx
.text$mn:0000210C                 mov     [ebp+var_4], ecx
.text$mn:0000210F                 mov     eax, [ebp+arg_4]
.text$mn:00002112                 push    eax
.text$mn:00002113                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00002118                 add     esp, 4
.text$mn:0000211B                 push    eax             ; int
.text$mn:0000211C                 mov     ecx, [ebp+arg_0]
.text$mn:0000211F                 push    ecx             ; void *
.text$mn:00002120                 mov     edx, [ebp+var_4]
.text$mn:00002123                 push    edx             ; int
.text$mn:00002124                 call    ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)
.text$mn:00002129                 add     esp, 0Ch
.text$mn:0000212C                 mov     esp, ebp
.text$mn:0000212E                 pop     ebp
.text$mn:0000212F                 retn    8
.text$mn:0000212F ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z endp
.text$mn:0000212F
.text$mn:0000212F ; ---------------------------------------------------------------------------
.text$mn:00002132                 align 4
.text$mn:00002132 _text$mn        ends
.text$mn:00002132
.text$mn:00002134 ; ===========================================================================
.text$mn:00002134
.text$mn:00002134 ; Segment type: Pure code
.text$mn:00002134 ; Segment permissions: Read/Execute
.text$mn:00002134 _text$mn        segment para public 'CODE' use32
.text$mn:00002134                 assume cs:_text$mn
.text$mn:00002134                 ;org 2134h
.text$mn:00002134 ; COMDAT (pick any)
.text$mn:00002134                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002134
.text$mn:00002134 ; =============== S U B R O U T I N E =======================================
.text$mn:00002134
.text$mn:00002134 ; Attributes: bp-based frame
.text$mn:00002134
.text$mn:00002134 ; int __stdcall std::allocator<char>::construct<char *,char * &>(void *, int)
.text$mn:00002134                 public ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:00002134 ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:00002134                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)+17p
.text$mn:00002134
.text$mn:00002134 var_1C          = dword ptr -1Ch
.text$mn:00002134 var_18          = dword ptr -18h
.text$mn:00002134 var_14          = dword ptr -14h
.text$mn:00002134 var_10          = dword ptr -10h
.text$mn:00002134 var_C           = dword ptr -0Ch
.text$mn:00002134 var_4           = dword ptr -4
.text$mn:00002134 arg_0           = dword ptr  8
.text$mn:00002134 arg_4           = dword ptr  0Ch
.text$mn:00002134
.text$mn:00002134                 push    ebp
.text$mn:00002135                 mov     ebp, esp
.text$mn:00002137                 push    0FFFFFFFFh
.text$mn:00002139                 push    offset __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:0000213E                 mov     eax, large fs:0
.text$mn:00002144                 push    eax
.text$mn:00002145                 sub     esp, 10h
.text$mn:00002148                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000214D                 xor     eax, ebp
.text$mn:0000214F                 push    eax
.text$mn:00002150                 lea     eax, [ebp+var_C]
.text$mn:00002153                 mov     large fs:0, eax
.text$mn:00002159                 mov     [ebp+var_18], ecx
.text$mn:0000215C                 mov     eax, [ebp+arg_0]
.text$mn:0000215F                 push    eax             ; void *
.text$mn:00002160                 push    4               ; unsigned int
.text$mn:00002162                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00002167                 add     esp, 8
.text$mn:0000216A                 mov     [ebp+var_10], eax
.text$mn:0000216D                 mov     [ebp+var_4], 0
.text$mn:00002174                 cmp     [ebp+var_10], 0
.text$mn:00002178                 jz      short loc_2195
.text$mn:0000217A                 mov     ecx, [ebp+arg_4]
.text$mn:0000217D                 push    ecx
.text$mn:0000217E                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00002183                 add     esp, 4
.text$mn:00002186                 mov     edx, [ebp+var_10]
.text$mn:00002189                 mov     eax, [eax]
.text$mn:0000218B                 mov     [edx], eax
.text$mn:0000218D                 mov     ecx, [ebp+var_10]
.text$mn:00002190                 mov     [ebp+var_14], ecx
.text$mn:00002193                 jmp     short loc_219C
.text$mn:00002195 ; ---------------------------------------------------------------------------
.text$mn:00002195
.text$mn:00002195 loc_2195:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+44j
.text$mn:00002195                 mov     [ebp+var_14], 0
.text$mn:0000219C
.text$mn:0000219C loc_219C:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5Fj
.text$mn:0000219C                 mov     edx, [ebp+var_14]
.text$mn:0000219F                 mov     [ebp+var_1C], edx
.text$mn:000021A2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000021A9                 mov     ecx, [ebp+var_C]
.text$mn:000021AC                 mov     large fs:0, ecx
.text$mn:000021B3                 pop     ecx
.text$mn:000021B4                 mov     esp, ebp
.text$mn:000021B6                 pop     ebp
.text$mn:000021B7                 retn    8
.text$mn:000021B7 ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$mn:000021B7
.text$mn:000021B7 ; ---------------------------------------------------------------------------
.text$mn:000021BA                 align 4
.text$mn:000021BA _text$mn        ends
.text$mn:000021BA
.text$x:000021BC ; ===========================================================================
.text$x:000021BC
.text$x:000021BC ; Segment type: Pure code
.text$x:000021BC ; Segment permissions: Read/Execute
.text$x:000021BC _text$x         segment para public 'CODE' use32
.text$x:000021BC                 assume cs:_text$x
.text$x:000021BC                 ;org 21BCh
.text$x:000021BC ; COMDAT (pick associative to section at 2134)
.text$x:000021BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000021BC
.text$x:000021BC ; =============== S U B R O U T I N E =======================================
.text$x:000021BC
.text$x:000021BC
.text$x:000021BC __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
.text$x:000021BC                                         ; DATA XREF: .xdata$x:00008164o
.text$x:000021BC                 mov     eax, [ebp+8]
.text$x:000021BF                 push    eax
.text$x:000021C0                 mov     eax, [ebp-10h]
.text$x:000021C3                 push    eax             ; void *
.text$x:000021C4                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:000021C9                 add     esp, 8
.text$x:000021CC                 retn
.text$x:000021CC __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 endp
.text$x:000021CC
.text$x:000021CD
.text$x:000021CD ; =============== S U B R O U T I N E =======================================
.text$x:000021CD
.text$x:000021CD
.text$x:000021CD __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$x:000021CD                                         ; DATA XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5o
.text$x:000021CD
.text$x:000021CD arg_4           = dword ptr  8
.text$x:000021CD
.text$x:000021CD                 mov     edx, [esp+arg_4]
.text$x:000021D1                 lea     eax, [edx+0Ch]
.text$x:000021D4                 mov     ecx, [edx-14h]
.text$x:000021D7                 xor     ecx, eax
.text$x:000021D9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000021DE                 mov     eax, offset __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$x:000021E3                 jmp     ___CxxFrameHandler3
.text$x:000021E3 __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$x:000021E3
.text$x:000021E3 _text$x         ends
.text$x:000021E3
.text$mn:000021E8 ; ===========================================================================
.text$mn:000021E8
.text$mn:000021E8 ; Segment type: Pure code
.text$mn:000021E8 ; Segment permissions: Read/Execute
.text$mn:000021E8 _text$mn        segment para public 'CODE' use32
.text$mn:000021E8                 assume cs:_text$mn
.text$mn:000021E8                 ;org 21E8h
.text$mn:000021E8 ; COMDAT (pick any)
.text$mn:000021E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000021E8
.text$mn:000021E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000021E8
.text$mn:000021E8 ; Attributes: bp-based frame
.text$mn:000021E8
.text$mn:000021E8 ; int __cdecl std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(int, void *, int)
.text$mn:000021E8                 public ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
.text$mn:000021E8 ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
.text$mn:000021E8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+1Cp
.text$mn:000021E8
.text$mn:000021E8 arg_0           = dword ptr  8
.text$mn:000021E8 arg_4           = dword ptr  0Ch
.text$mn:000021E8 arg_8           = dword ptr  10h
.text$mn:000021E8
.text$mn:000021E8                 push    ebp
.text$mn:000021E9                 mov     ebp, esp
.text$mn:000021EB                 mov     eax, [ebp+arg_8]
.text$mn:000021EE                 push    eax
.text$mn:000021EF                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:000021F4                 add     esp, 4
.text$mn:000021F7                 push    eax             ; int
.text$mn:000021F8                 mov     ecx, [ebp+arg_4]
.text$mn:000021FB                 push    ecx             ; void *
.text$mn:000021FC                 mov     ecx, [ebp+arg_0]
.text$mn:000021FF                 call    ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)
.text$mn:00002204                 pop     ebp
.text$mn:00002205                 retn
.text$mn:00002205 ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z endp
.text$mn:00002205
.text$mn:00002205 ; ---------------------------------------------------------------------------
.text$mn:00002206                 align 4
.text$mn:00002206 _text$mn        ends
.text$mn:00002206
.text$mn:00002208 ; ===========================================================================
.text$mn:00002208
.text$mn:00002208 ; Segment type: Pure code
.text$mn:00002208 ; Segment permissions: Read/Execute
.text$mn:00002208 _text$mn        segment para public 'CODE' use32
.text$mn:00002208                 assume cs:_text$mn
.text$mn:00002208                 ;org 2208h
.text$mn:00002208 ; COMDAT (pick any)
.text$mn:00002208                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002208
.text$mn:00002208 ; =============== S U B R O U T I N E =======================================
.text$mn:00002208
.text$mn:00002208 ; Attributes: bp-based frame
.text$mn:00002208
.text$mn:00002208 ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:00002208                 public ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00002208 ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:00002208                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+50p
.text$mn:00002208                                         ; $LN19_0+4Bp
.text$mn:00002208
.text$mn:00002208 var_4           = dword ptr -4
.text$mn:00002208 arg_0           = dword ptr  8
.text$mn:00002208 arg_4           = dword ptr  0Ch
.text$mn:00002208
.text$mn:00002208                 push    ebp
.text$mn:00002209                 mov     ebp, esp
.text$mn:0000220B                 push    ecx
.text$mn:0000220C                 mov     [ebp+var_4], ecx
.text$mn:0000220F                 mov     eax, [ebp+arg_4]
.text$mn:00002212                 push    eax
.text$mn:00002213                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00002218                 add     esp, 4
.text$mn:0000221B                 push    eax             ; int
.text$mn:0000221C                 mov     ecx, [ebp+arg_0]
.text$mn:0000221F                 push    ecx             ; void *
.text$mn:00002220                 mov     edx, [ebp+var_4]
.text$mn:00002223                 push    edx             ; int
.text$mn:00002224                 call    ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)
.text$mn:00002229                 add     esp, 0Ch
.text$mn:0000222C                 mov     esp, ebp
.text$mn:0000222E                 pop     ebp
.text$mn:0000222F                 retn    8
.text$mn:0000222F ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:0000222F
.text$mn:0000222F ; ---------------------------------------------------------------------------
.text$mn:00002232                 align 4
.text$mn:00002232 _text$mn        ends
.text$mn:00002232
.text$mn:00002234 ; ===========================================================================
.text$mn:00002234
.text$mn:00002234 ; Segment type: Pure code
.text$mn:00002234 ; Segment permissions: Read/Execute
.text$mn:00002234 _text$mn        segment para public 'CODE' use32
.text$mn:00002234                 assume cs:_text$mn
.text$mn:00002234                 ;org 2234h
.text$mn:00002234 ; COMDAT (pick any)
.text$mn:00002234                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002234
.text$mn:00002234 ; =============== S U B R O U T I N E =======================================
.text$mn:00002234
.text$mn:00002234 ; Attributes: bp-based frame
.text$mn:00002234
.text$mn:00002234 ; int __stdcall std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:00002234                 public ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00002234 ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:00002234                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)+17p
.text$mn:00002234
.text$mn:00002234 var_1C          = dword ptr -1Ch
.text$mn:00002234 var_18          = dword ptr -18h
.text$mn:00002234 var_14          = dword ptr -14h
.text$mn:00002234 var_10          = dword ptr -10h
.text$mn:00002234 var_C           = dword ptr -0Ch
.text$mn:00002234 var_4           = dword ptr -4
.text$mn:00002234 arg_0           = dword ptr  8
.text$mn:00002234 arg_4           = dword ptr  0Ch
.text$mn:00002234
.text$mn:00002234                 push    ebp
.text$mn:00002235                 mov     ebp, esp
.text$mn:00002237                 push    0FFFFFFFFh
.text$mn:00002239                 push    offset __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:0000223E                 mov     eax, large fs:0
.text$mn:00002244                 push    eax
.text$mn:00002245                 sub     esp, 10h
.text$mn:00002248                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000224D                 xor     eax, ebp
.text$mn:0000224F                 push    eax
.text$mn:00002250                 lea     eax, [ebp+var_C]
.text$mn:00002253                 mov     large fs:0, eax
.text$mn:00002259                 mov     [ebp+var_18], ecx
.text$mn:0000225C                 mov     eax, [ebp+arg_0]
.text$mn:0000225F                 push    eax             ; void *
.text$mn:00002260                 push    4               ; unsigned int
.text$mn:00002262                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00002267                 add     esp, 8
.text$mn:0000226A                 mov     [ebp+var_10], eax
.text$mn:0000226D                 mov     [ebp+var_4], 0
.text$mn:00002274                 cmp     [ebp+var_10], 0
.text$mn:00002278                 jz      short loc_2295
.text$mn:0000227A                 mov     ecx, [ebp+arg_4]
.text$mn:0000227D                 push    ecx
.text$mn:0000227E                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00002283                 add     esp, 4
.text$mn:00002286                 mov     edx, [ebp+var_10]
.text$mn:00002289                 mov     eax, [eax]
.text$mn:0000228B                 mov     [edx], eax
.text$mn:0000228D                 mov     ecx, [ebp+var_10]
.text$mn:00002290                 mov     [ebp+var_14], ecx
.text$mn:00002293                 jmp     short loc_229C
.text$mn:00002295 ; ---------------------------------------------------------------------------
.text$mn:00002295
.text$mn:00002295 loc_2295:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+44j
.text$mn:00002295                 mov     [ebp+var_14], 0
.text$mn:0000229C
.text$mn:0000229C loc_229C:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5Fj
.text$mn:0000229C                 mov     edx, [ebp+var_14]
.text$mn:0000229F                 mov     [ebp+var_1C], edx
.text$mn:000022A2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000022A9                 mov     ecx, [ebp+var_C]
.text$mn:000022AC                 mov     large fs:0, ecx
.text$mn:000022B3                 pop     ecx
.text$mn:000022B4                 mov     esp, ebp
.text$mn:000022B6                 pop     ebp
.text$mn:000022B7                 retn    8
.text$mn:000022B7 ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:000022B7
.text$mn:000022B7 ; ---------------------------------------------------------------------------
.text$mn:000022BA                 align 4
.text$mn:000022BA _text$mn        ends
.text$mn:000022BA
.text$x:000022BC ; ===========================================================================
.text$x:000022BC
.text$x:000022BC ; Segment type: Pure code
.text$x:000022BC ; Segment permissions: Read/Execute
.text$x:000022BC _text$x         segment para public 'CODE' use32
.text$x:000022BC                 assume cs:_text$x
.text$x:000022BC                 ;org 22BCh
.text$x:000022BC ; COMDAT (pick associative to section at 2234)
.text$x:000022BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000022BC
.text$x:000022BC ; =============== S U B R O U T I N E =======================================
.text$x:000022BC
.text$x:000022BC
.text$x:000022BC __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 proc near
.text$x:000022BC                                         ; DATA XREF: .xdata$x:00008190o
.text$x:000022BC                 mov     eax, [ebp+8]
.text$x:000022BF                 push    eax
.text$x:000022C0                 mov     eax, [ebp-10h]
.text$x:000022C3                 push    eax             ; void *
.text$x:000022C4                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:000022C9                 add     esp, 8
.text$x:000022CC                 retn
.text$x:000022CC __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 endp
.text$x:000022CC
.text$x:000022CD
.text$x:000022CD ; =============== S U B R O U T I N E =======================================
.text$x:000022CD
.text$x:000022CD
.text$x:000022CD __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$x:000022CD                                         ; DATA XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5o
.text$x:000022CD
.text$x:000022CD arg_4           = dword ptr  8
.text$x:000022CD
.text$x:000022CD                 mov     edx, [esp+arg_4]
.text$x:000022D1                 lea     eax, [edx+0Ch]
.text$x:000022D4                 mov     ecx, [edx-14h]
.text$x:000022D7                 xor     ecx, eax
.text$x:000022D9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000022DE                 mov     eax, offset __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$x:000022E3                 jmp     ___CxxFrameHandler3
.text$x:000022E3 __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$x:000022E3
.text$x:000022E3 _text$x         ends
.text$x:000022E3
.text$mn:000022E8 ; ===========================================================================
.text$mn:000022E8
.text$mn:000022E8 ; Segment type: Pure code
.text$mn:000022E8 ; Segment permissions: Read/Execute
.text$mn:000022E8 _text$mn        segment para public 'CODE' use32
.text$mn:000022E8                 assume cs:_text$mn
.text$mn:000022E8                 ;org 22E8h
.text$mn:000022E8 ; COMDAT (pick any)
.text$mn:000022E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000022E8
.text$mn:000022E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000022E8
.text$mn:000022E8 ; Attributes: bp-based frame
.text$mn:000022E8
.text$mn:000022E8 ; int __cdecl std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(int, void *, int)
.text$mn:000022E8                 public ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z
.text$mn:000022E8 ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z proc near
.text$mn:000022E8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+1Cp
.text$mn:000022E8
.text$mn:000022E8 arg_0           = dword ptr  8
.text$mn:000022E8 arg_4           = dword ptr  0Ch
.text$mn:000022E8 arg_8           = dword ptr  10h
.text$mn:000022E8
.text$mn:000022E8                 push    ebp
.text$mn:000022E9                 mov     ebp, esp
.text$mn:000022EB                 mov     eax, [ebp+arg_8]
.text$mn:000022EE                 push    eax
.text$mn:000022EF                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:000022F4                 add     esp, 4
.text$mn:000022F7                 push    eax             ; int
.text$mn:000022F8                 mov     ecx, [ebp+arg_4]
.text$mn:000022FB                 push    ecx             ; void *
.text$mn:000022FC                 mov     ecx, [ebp+arg_0]
.text$mn:000022FF                 call    ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00002304                 pop     ebp
.text$mn:00002305                 retn
.text$mn:00002305 ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z endp
.text$mn:00002305
.text$mn:00002305 ; ---------------------------------------------------------------------------
.text$mn:00002306                 align 4
.text$mn:00002306 _text$mn        ends
.text$mn:00002306
.text$mn:00002308 ; ===========================================================================
.text$mn:00002308
.text$mn:00002308 ; Segment type: Pure code
.text$mn:00002308 ; Segment permissions: Read/Execute
.text$mn:00002308 _text$mn        segment para public 'CODE' use32
.text$mn:00002308                 assume cs:_text$mn
.text$mn:00002308                 ;org 2308h
.text$mn:00002308 ; COMDAT (pick any)
.text$mn:00002308                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002308
.text$mn:00002308 ; =============== S U B R O U T I N E =======================================
.text$mn:00002308
.text$mn:00002308 ; Attributes: bp-based frame
.text$mn:00002308
.text$mn:00002308 ; int __stdcall std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:00002308                 public ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00002308 ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:00002308                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Alloc_proxy(void)+32p
.text$mn:00002308
.text$mn:00002308 var_4           = dword ptr -4
.text$mn:00002308 arg_0           = dword ptr  8
.text$mn:00002308 arg_4           = dword ptr  0Ch
.text$mn:00002308
.text$mn:00002308                 push    ebp
.text$mn:00002309                 mov     ebp, esp
.text$mn:0000230B                 push    ecx
.text$mn:0000230C                 mov     [ebp+var_4], ecx
.text$mn:0000230F                 mov     eax, [ebp+arg_4]
.text$mn:00002312                 push    eax
.text$mn:00002313                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:00002318                 add     esp, 4
.text$mn:0000231B                 push    eax             ; int
.text$mn:0000231C                 mov     ecx, [ebp+arg_0]
.text$mn:0000231F                 push    ecx             ; void *
.text$mn:00002320                 mov     edx, [ebp+var_4]
.text$mn:00002323                 push    edx             ; int
.text$mn:00002324                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00002329                 add     esp, 0Ch
.text$mn:0000232C                 mov     esp, ebp
.text$mn:0000232E                 pop     ebp
.text$mn:0000232F                 retn    8
.text$mn:0000232F ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:0000232F
.text$mn:0000232F ; ---------------------------------------------------------------------------
.text$mn:00002332                 align 4
.text$mn:00002332 _text$mn        ends
.text$mn:00002332
.text$mn:00002334 ; ===========================================================================
.text$mn:00002334
.text$mn:00002334 ; Segment type: Pure code
.text$mn:00002334 ; Segment permissions: Read/Execute
.text$mn:00002334 _text$mn        segment para public 'CODE' use32
.text$mn:00002334                 assume cs:_text$mn
.text$mn:00002334                 ;org 2334h
.text$mn:00002334 ; COMDAT (pick any)
.text$mn:00002334                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002334
.text$mn:00002334 ; =============== S U B R O U T I N E =======================================
.text$mn:00002334
.text$mn:00002334 ; Attributes: bp-based frame
.text$mn:00002334
.text$mn:00002334 ; int __stdcall std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:00002334                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00002334 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:00002334                                         ; CODE XREF: std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *,std::_Container_proxy &&)+17p
.text$mn:00002334                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+32p ...
.text$mn:00002334
.text$mn:00002334 var_1C          = dword ptr -1Ch
.text$mn:00002334 var_18          = dword ptr -18h
.text$mn:00002334 var_14          = dword ptr -14h
.text$mn:00002334 var_10          = dword ptr -10h
.text$mn:00002334 var_C           = dword ptr -0Ch
.text$mn:00002334 var_4           = dword ptr -4
.text$mn:00002334 arg_0           = dword ptr  8
.text$mn:00002334 arg_4           = dword ptr  0Ch
.text$mn:00002334
.text$mn:00002334                 push    ebp
.text$mn:00002335                 mov     ebp, esp
.text$mn:00002337                 push    0FFFFFFFFh
.text$mn:00002339                 push    offset __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:0000233E                 mov     eax, large fs:0
.text$mn:00002344                 push    eax
.text$mn:00002345                 sub     esp, 10h
.text$mn:00002348                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000234D                 xor     eax, ebp
.text$mn:0000234F                 push    eax
.text$mn:00002350                 lea     eax, [ebp+var_C]
.text$mn:00002353                 mov     large fs:0, eax
.text$mn:00002359                 mov     [ebp+var_18], ecx
.text$mn:0000235C                 mov     eax, [ebp+arg_0]
.text$mn:0000235F                 push    eax             ; void *
.text$mn:00002360                 push    8               ; unsigned int
.text$mn:00002362                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00002367                 add     esp, 8
.text$mn:0000236A                 mov     [ebp+var_10], eax
.text$mn:0000236D                 mov     [ebp+var_4], 0
.text$mn:00002374                 cmp     [ebp+var_10], 0
.text$mn:00002378                 jz      short loc_239B
.text$mn:0000237A                 mov     ecx, [ebp+arg_4]
.text$mn:0000237D                 push    ecx
.text$mn:0000237E                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:00002383                 add     esp, 4
.text$mn:00002386                 mov     edx, [eax]
.text$mn:00002388                 mov     eax, [eax+4]
.text$mn:0000238B                 mov     ecx, [ebp+var_10]
.text$mn:0000238E                 mov     [ecx], edx
.text$mn:00002390                 mov     [ecx+4], eax
.text$mn:00002393                 mov     edx, [ebp+var_10]
.text$mn:00002396                 mov     [ebp+var_14], edx
.text$mn:00002399                 jmp     short loc_23A2
.text$mn:0000239B ; ---------------------------------------------------------------------------
.text$mn:0000239B
.text$mn:0000239B loc_239B:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+44j
.text$mn:0000239B                 mov     [ebp+var_14], 0
.text$mn:000023A2
.text$mn:000023A2 loc_23A2:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+65j
.text$mn:000023A2                 mov     eax, [ebp+var_14]
.text$mn:000023A5                 mov     [ebp+var_1C], eax
.text$mn:000023A8                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000023AF                 mov     ecx, [ebp+var_C]
.text$mn:000023B2                 mov     large fs:0, ecx
.text$mn:000023B9                 pop     ecx
.text$mn:000023BA                 mov     esp, ebp
.text$mn:000023BC                 pop     ebp
.text$mn:000023BD                 retn    8
.text$mn:000023BD ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:000023BD
.text$mn:000023BD _text$mn        ends
.text$mn:000023BD
.text$x:000023C0 ; ===========================================================================
.text$x:000023C0
.text$x:000023C0 ; Segment type: Pure code
.text$x:000023C0 ; Segment permissions: Read/Execute
.text$x:000023C0 _text$x         segment para public 'CODE' use32
.text$x:000023C0                 assume cs:_text$x
.text$x:000023C0                 ;org 23C0h
.text$x:000023C0 ; COMDAT (pick associative to section at 2334)
.text$x:000023C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000023C0
.text$x:000023C0 ; =============== S U B R O U T I N E =======================================
.text$x:000023C0
.text$x:000023C0
.text$x:000023C0 __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
.text$x:000023C0                                         ; DATA XREF: .xdata$x:0000810Co
.text$x:000023C0                 mov     eax, [ebp+8]
.text$x:000023C3                 push    eax
.text$x:000023C4                 mov     eax, [ebp-10h]
.text$x:000023C7                 push    eax             ; void *
.text$x:000023C8                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:000023CD                 add     esp, 8
.text$x:000023D0                 retn
.text$x:000023D0 __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 endp
.text$x:000023D0
.text$x:000023D1
.text$x:000023D1 ; =============== S U B R O U T I N E =======================================
.text$x:000023D1
.text$x:000023D1
.text$x:000023D1 __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$x:000023D1                                         ; DATA XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+5o
.text$x:000023D1
.text$x:000023D1 arg_4           = dword ptr  8
.text$x:000023D1
.text$x:000023D1                 mov     edx, [esp+arg_4]
.text$x:000023D5                 lea     eax, [edx+0Ch]
.text$x:000023D8                 mov     ecx, [edx-14h]
.text$x:000023DB                 xor     ecx, eax
.text$x:000023DD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000023E2                 mov     eax, offset __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$x:000023E7                 jmp     ___CxxFrameHandler3
.text$x:000023E7 __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$x:000023E7
.text$x:000023E7 _text$x         ends
.text$x:000023E7
.text$mn:000023EC ; ===========================================================================
.text$mn:000023EC
.text$mn:000023EC ; Segment type: Pure code
.text$mn:000023EC ; Segment permissions: Read/Execute
.text$mn:000023EC _text$mn        segment para public 'CODE' use32
.text$mn:000023EC                 assume cs:_text$mn
.text$mn:000023EC                 ;org 23ECh
.text$mn:000023EC ; COMDAT (pick any)
.text$mn:000023EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000023EC
.text$mn:000023EC ; =============== S U B R O U T I N E =======================================
.text$mn:000023EC
.text$mn:000023EC ; Attributes: bp-based frame
.text$mn:000023EC
.text$mn:000023EC ; int __cdecl std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(int, void *, int)
.text$mn:000023EC                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z
.text$mn:000023EC ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z proc near
.text$mn:000023EC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+1Cp
.text$mn:000023EC
.text$mn:000023EC arg_0           = dword ptr  8
.text$mn:000023EC arg_4           = dword ptr  0Ch
.text$mn:000023EC arg_8           = dword ptr  10h
.text$mn:000023EC
.text$mn:000023EC                 push    ebp
.text$mn:000023ED                 mov     ebp, esp
.text$mn:000023EF                 mov     eax, [ebp+arg_8]
.text$mn:000023F2                 push    eax
.text$mn:000023F3                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:000023F8                 add     esp, 4
.text$mn:000023FB                 push    eax             ; int
.text$mn:000023FC                 mov     ecx, [ebp+arg_4]
.text$mn:000023FF                 push    ecx             ; void *
.text$mn:00002400                 mov     ecx, [ebp+arg_0]
.text$mn:00002403                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00002408                 pop     ebp
.text$mn:00002409                 retn
.text$mn:00002409 ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z endp
.text$mn:00002409
.text$mn:00002409 ; ---------------------------------------------------------------------------
.text$mn:0000240A                 align 4
.text$mn:0000240A _text$mn        ends
.text$mn:0000240A
.text$mn:0000240C ; ===========================================================================
.text$mn:0000240C
.text$mn:0000240C ; Segment type: Pure code
.text$mn:0000240C ; Segment permissions: Read/Execute
.text$mn:0000240C _text$mn        segment para public 'CODE' use32
.text$mn:0000240C                 assume cs:_text$mn
.text$mn:0000240C                 ;org 240Ch
.text$mn:0000240C ; COMDAT (pick any)
.text$mn:0000240C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000240C
.text$mn:0000240C ; =============== S U B R O U T I N E =======================================
.text$mn:0000240C
.text$mn:0000240C ; Attributes: bp-based frame
.text$mn:0000240C
.text$mn:0000240C ; int __stdcall std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void *, int)
.text$mn:0000240C                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.text$mn:0000240C ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z proc near
.text$mn:0000240C                                         ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+8Ep
.text$mn:0000240C                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+9Dp ...
.text$mn:0000240C
.text$mn:0000240C var_4           = dword ptr -4
.text$mn:0000240C arg_0           = dword ptr  8
.text$mn:0000240C arg_4           = dword ptr  0Ch
.text$mn:0000240C
.text$mn:0000240C                 push    ebp
.text$mn:0000240D                 mov     ebp, esp
.text$mn:0000240F                 push    ecx
.text$mn:00002410                 mov     [ebp+var_4], ecx
.text$mn:00002413                 mov     eax, [ebp+arg_4]
.text$mn:00002416                 push    eax
.text$mn:00002417                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000241C                 add     esp, 4
.text$mn:0000241F                 push    eax             ; int
.text$mn:00002420                 mov     ecx, [ebp+arg_0]
.text$mn:00002423                 push    ecx             ; void *
.text$mn:00002424                 mov     edx, [ebp+var_4]
.text$mn:00002427                 push    edx             ; int
.text$mn:00002428                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000242D                 add     esp, 0Ch
.text$mn:00002430                 mov     esp, ebp
.text$mn:00002432                 pop     ebp
.text$mn:00002433                 retn    8
.text$mn:00002433 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z endp
.text$mn:00002433
.text$mn:00002433 ; ---------------------------------------------------------------------------
.text$mn:00002436                 align 4
.text$mn:00002436 _text$mn        ends
.text$mn:00002436
.text$mn:00002438 ; ===========================================================================
.text$mn:00002438
.text$mn:00002438 ; Segment type: Pure code
.text$mn:00002438 ; Segment permissions: Read/Execute
.text$mn:00002438 _text$mn        segment para public 'CODE' use32
.text$mn:00002438                 assume cs:_text$mn
.text$mn:00002438                 ;org 2438h
.text$mn:00002438 ; COMDAT (pick any)
.text$mn:00002438                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002438
.text$mn:00002438 ; =============== S U B R O U T I N E =======================================
.text$mn:00002438
.text$mn:00002438 ; Attributes: bp-based frame
.text$mn:00002438
.text$mn:00002438 ; int __stdcall std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void *, int)
.text$mn:00002438                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.text$mn:00002438 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z proc near
.text$mn:00002438                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+17p
.text$mn:00002438
.text$mn:00002438 var_1C          = dword ptr -1Ch
.text$mn:00002438 var_18          = dword ptr -18h
.text$mn:00002438 var_14          = dword ptr -14h
.text$mn:00002438 var_10          = dword ptr -10h
.text$mn:00002438 var_C           = dword ptr -0Ch
.text$mn:00002438 var_4           = dword ptr -4
.text$mn:00002438 arg_0           = dword ptr  8
.text$mn:00002438 arg_4           = dword ptr  0Ch
.text$mn:00002438
.text$mn:00002438                 push    ebp
.text$mn:00002439                 mov     ebp, esp
.text$mn:0000243B                 push    0FFFFFFFFh
.text$mn:0000243D                 push    offset __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.text$mn:00002442                 mov     eax, large fs:0
.text$mn:00002448                 push    eax
.text$mn:00002449                 sub     esp, 10h
.text$mn:0000244C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002451                 xor     eax, ebp
.text$mn:00002453                 push    eax
.text$mn:00002454                 lea     eax, [ebp+var_C]
.text$mn:00002457                 mov     large fs:0, eax
.text$mn:0000245D                 mov     [ebp+var_18], ecx
.text$mn:00002460                 mov     eax, [ebp+arg_0]
.text$mn:00002463                 push    eax             ; void *
.text$mn:00002464                 push    1Ch             ; unsigned int
.text$mn:00002466                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:0000246B                 add     esp, 8
.text$mn:0000246E                 mov     [ebp+var_10], eax
.text$mn:00002471                 mov     [ebp+var_4], 0
.text$mn:00002478                 cmp     [ebp+var_10], 0
.text$mn:0000247C                 jz      short loc_2498
.text$mn:0000247E                 mov     ecx, [ebp+arg_4]
.text$mn:00002481                 push    ecx
.text$mn:00002482                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00002487                 add     esp, 4
.text$mn:0000248A                 push    eax
.text$mn:0000248B                 mov     ecx, [ebp+var_10]
.text$mn:0000248E                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00002493                 mov     [ebp+var_14], eax
.text$mn:00002496                 jmp     short loc_249F
.text$mn:00002498 ; ---------------------------------------------------------------------------
.text$mn:00002498
.text$mn:00002498 loc_2498:                               ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+44j
.text$mn:00002498                 mov     [ebp+var_14], 0
.text$mn:0000249F
.text$mn:0000249F loc_249F:                               ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5Ej
.text$mn:0000249F                 mov     edx, [ebp+var_14]
.text$mn:000024A2                 mov     [ebp+var_1C], edx
.text$mn:000024A5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000024AC                 mov     ecx, [ebp+var_C]
.text$mn:000024AF                 mov     large fs:0, ecx
.text$mn:000024B6                 pop     ecx
.text$mn:000024B7                 mov     esp, ebp
.text$mn:000024B9                 pop     ebp
.text$mn:000024BA                 retn    8
.text$mn:000024BA ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z endp
.text$mn:000024BA
.text$mn:000024BA ; ---------------------------------------------------------------------------
.text$mn:000024BD                 align 10h
.text$mn:000024BD _text$mn        ends
.text$mn:000024BD
.text$x:000024C0 ; ===========================================================================
.text$x:000024C0
.text$x:000024C0 ; Segment type: Pure code
.text$x:000024C0 ; Segment permissions: Read/Execute
.text$x:000024C0 _text$x         segment para public 'CODE' use32
.text$x:000024C0                 assume cs:_text$x
.text$x:000024C0                 ;org 24C0h
.text$x:000024C0 ; COMDAT (pick associative to section at 2438)
.text$x:000024C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000024C0
.text$x:000024C0 ; =============== S U B R O U T I N E =======================================
.text$x:000024C0
.text$x:000024C0
.text$x:000024C0 __unwindfunclet$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z$0 proc near
.text$x:000024C0                                         ; DATA XREF: .xdata$x:00008138o
.text$x:000024C0                 mov     eax, [ebp+8]
.text$x:000024C3                 push    eax
.text$x:000024C4                 mov     eax, [ebp-10h]
.text$x:000024C7                 push    eax             ; void *
.text$x:000024C8                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:000024CD                 add     esp, 8
.text$x:000024D0                 retn
.text$x:000024D0 __unwindfunclet$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z$0 endp
.text$x:000024D0
.text$x:000024D1
.text$x:000024D1 ; =============== S U B R O U T I N E =======================================
.text$x:000024D1
.text$x:000024D1
.text$x:000024D1 __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z proc near
.text$x:000024D1                                         ; DATA XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5o
.text$x:000024D1
.text$x:000024D1 arg_4           = dword ptr  8
.text$x:000024D1
.text$x:000024D1                 mov     edx, [esp+arg_4]
.text$x:000024D5                 lea     eax, [edx+0Ch]
.text$x:000024D8                 mov     ecx, [edx-14h]
.text$x:000024DB                 xor     ecx, eax
.text$x:000024DD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000024E2                 mov     eax, offset __ehfuncinfo$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.text$x:000024E7                 jmp     ___CxxFrameHandler3
.text$x:000024E7 __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z endp
.text$x:000024E7
.text$x:000024E7 _text$x         ends
.text$x:000024E7
.text$mn:000024EC ; ===========================================================================
.text$mn:000024EC
.text$mn:000024EC ; Segment type: Pure code
.text$mn:000024EC ; Segment permissions: Read/Execute
.text$mn:000024EC _text$mn        segment para public 'CODE' use32
.text$mn:000024EC                 assume cs:_text$mn
.text$mn:000024EC                 ;org 24ECh
.text$mn:000024EC ; COMDAT (pick any)
.text$mn:000024EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000024EC
.text$mn:000024EC ; =============== S U B R O U T I N E =======================================
.text$mn:000024EC
.text$mn:000024EC ; Attributes: bp-based frame
.text$mn:000024EC
.text$mn:000024EC ; int __cdecl std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(int, void *, int)
.text$mn:000024EC                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z
.text$mn:000024EC ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z proc near
.text$mn:000024EC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+1Cp
.text$mn:000024EC
.text$mn:000024EC arg_0           = dword ptr  8
.text$mn:000024EC arg_4           = dword ptr  0Ch
.text$mn:000024EC arg_8           = dword ptr  10h
.text$mn:000024EC
.text$mn:000024EC                 push    ebp
.text$mn:000024ED                 mov     ebp, esp
.text$mn:000024EF                 mov     eax, [ebp+arg_8]
.text$mn:000024F2                 push    eax
.text$mn:000024F3                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000024F8                 add     esp, 4
.text$mn:000024FB                 push    eax             ; int
.text$mn:000024FC                 mov     ecx, [ebp+arg_4]
.text$mn:000024FF                 push    ecx             ; void *
.text$mn:00002500                 mov     ecx, [ebp+arg_0]
.text$mn:00002503                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00002508                 pop     ebp
.text$mn:00002509                 retn
.text$mn:00002509 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z endp
.text$mn:00002509
.text$mn:00002509 ; ---------------------------------------------------------------------------
.text$mn:0000250A                 align 4
.text$mn:0000250A _text$mn        ends
.text$mn:0000250A
.text$mn:0000250C ; ===========================================================================
.text$mn:0000250C
.text$mn:0000250C ; Segment type: Pure code
.text$mn:0000250C ; Segment permissions: Read/Execute
.text$mn:0000250C _text$mn        segment para public 'CODE' use32
.text$mn:0000250C                 assume cs:_text$mn
.text$mn:0000250C                 ;org 250Ch
.text$mn:0000250C ; COMDAT (pick any)
.text$mn:0000250C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000250C
.text$mn:0000250C ; =============== S U B R O U T I N E =======================================
.text$mn:0000250C
.text$mn:0000250C ; Attributes: bp-based frame
.text$mn:0000250C
.text$mn:0000250C ; public: void __thiscall std::_Wrap_alloc<class std::allocator<char>>::destroy<char *>(char * *)
.text$mn:0000250C                 public ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
.text$mn:0000250C ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc near
.text$mn:0000250C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+3Ap
.text$mn:0000250C
.text$mn:0000250C var_4           = dword ptr -4
.text$mn:0000250C arg_0           = dword ptr  8
.text$mn:0000250C
.text$mn:0000250C                 push    ebp
.text$mn:0000250D                 mov     ebp, esp
.text$mn:0000250F                 push    ecx
.text$mn:00002510                 mov     [ebp+var_4], ecx
.text$mn:00002513                 mov     eax, [ebp+arg_0]
.text$mn:00002516                 push    eax
.text$mn:00002517                 mov     ecx, [ebp+var_4]
.text$mn:0000251A                 push    ecx
.text$mn:0000251B                 call    ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)
.text$mn:00002520                 add     esp, 8
.text$mn:00002523                 mov     esp, ebp
.text$mn:00002525                 pop     ebp
.text$mn:00002526                 retn    4
.text$mn:00002526 ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z endp
.text$mn:00002526
.text$mn:00002526 ; ---------------------------------------------------------------------------
.text$mn:00002529                 align 4
.text$mn:00002529 _text$mn        ends
.text$mn:00002529
.text$mn:0000252C ; ===========================================================================
.text$mn:0000252C
.text$mn:0000252C ; Segment type: Pure code
.text$mn:0000252C ; Segment permissions: Read/Execute
.text$mn:0000252C _text$mn        segment para public 'CODE' use32
.text$mn:0000252C                 assume cs:_text$mn
.text$mn:0000252C                 ;org 252Ch
.text$mn:0000252C ; COMDAT (pick any)
.text$mn:0000252C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000252C
.text$mn:0000252C ; =============== S U B R O U T I N E =======================================
.text$mn:0000252C
.text$mn:0000252C ; Attributes: bp-based frame
.text$mn:0000252C
.text$mn:0000252C ; public: void __thiscall std::allocator<char>::destroy<char *>(char * *)
.text$mn:0000252C                 public ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
.text$mn:0000252C ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
.text$mn:0000252C                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)+Ap
.text$mn:0000252C
.text$mn:0000252C var_4           = dword ptr -4
.text$mn:0000252C
.text$mn:0000252C                 push    ebp
.text$mn:0000252D                 mov     ebp, esp
.text$mn:0000252F                 push    ecx
.text$mn:00002530                 mov     [ebp+var_4], ecx
.text$mn:00002533                 mov     esp, ebp
.text$mn:00002535                 pop     ebp
.text$mn:00002536                 retn    4
.text$mn:00002536 ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z endp
.text$mn:00002536
.text$mn:00002536 ; ---------------------------------------------------------------------------
.text$mn:00002539                 align 4
.text$mn:00002539 _text$mn        ends
.text$mn:00002539
.text$mn:0000253C ; ===========================================================================
.text$mn:0000253C
.text$mn:0000253C ; Segment type: Pure code
.text$mn:0000253C ; Segment permissions: Read/Execute
.text$mn:0000253C _text$mn        segment para public 'CODE' use32
.text$mn:0000253C                 assume cs:_text$mn
.text$mn:0000253C                 ;org 253Ch
.text$mn:0000253C ; COMDAT (pick any)
.text$mn:0000253C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000253C
.text$mn:0000253C ; =============== S U B R O U T I N E =======================================
.text$mn:0000253C
.text$mn:0000253C ; Attributes: bp-based frame
.text$mn:0000253C
.text$mn:0000253C ; public: static void __cdecl std::allocator_traits<class std::allocator<char>>::destroy<char *>(class std::allocator<char> &, char * *)
.text$mn:0000253C                 public ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
.text$mn:0000253C ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
.text$mn:0000253C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)+Fp
.text$mn:0000253C
.text$mn:0000253C arg_0           = dword ptr  8
.text$mn:0000253C arg_4           = dword ptr  0Ch
.text$mn:0000253C
.text$mn:0000253C                 push    ebp
.text$mn:0000253D                 mov     ebp, esp
.text$mn:0000253F                 mov     eax, [ebp+arg_4]
.text$mn:00002542                 push    eax
.text$mn:00002543                 mov     ecx, [ebp+arg_0]
.text$mn:00002546                 call    ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>(char * *)
.text$mn:0000254B                 pop     ebp
.text$mn:0000254C                 retn
.text$mn:0000254C ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z endp
.text$mn:0000254C
.text$mn:0000254C ; ---------------------------------------------------------------------------
.text$mn:0000254D                 align 10h
.text$mn:0000254D _text$mn        ends
.text$mn:0000254D
.text$mn:00002550 ; ===========================================================================
.text$mn:00002550
.text$mn:00002550 ; Segment type: Pure code
.text$mn:00002550 ; Segment permissions: Read/Execute
.text$mn:00002550 _text$mn        segment para public 'CODE' use32
.text$mn:00002550                 assume cs:_text$mn
.text$mn:00002550                 ;org 2550h
.text$mn:00002550 ; COMDAT (pick any)
.text$mn:00002550                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002550
.text$mn:00002550 ; =============== S U B R O U T I N E =======================================
.text$mn:00002550
.text$mn:00002550 ; Attributes: bp-based frame
.text$mn:00002550
.text$mn:00002550 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00002550                 public ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z
.text$mn:00002550 ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z proc near
.text$mn:00002550                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+3Ap
.text$mn:00002550
.text$mn:00002550 var_4           = dword ptr -4
.text$mn:00002550 arg_0           = dword ptr  8
.text$mn:00002550
.text$mn:00002550                 push    ebp
.text$mn:00002551                 mov     ebp, esp
.text$mn:00002553                 push    ecx
.text$mn:00002554                 mov     [ebp+var_4], ecx
.text$mn:00002557                 mov     eax, [ebp+arg_0]
.text$mn:0000255A                 push    eax
.text$mn:0000255B                 mov     ecx, [ebp+var_4]
.text$mn:0000255E                 push    ecx
.text$mn:0000255F                 call    ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)
.text$mn:00002564                 add     esp, 8
.text$mn:00002567                 mov     esp, ebp
.text$mn:00002569                 pop     ebp
.text$mn:0000256A                 retn    4
.text$mn:0000256A ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z endp
.text$mn:0000256A
.text$mn:0000256A ; ---------------------------------------------------------------------------
.text$mn:0000256D                 align 10h
.text$mn:0000256D _text$mn        ends
.text$mn:0000256D
.text$mn:00002570 ; ===========================================================================
.text$mn:00002570
.text$mn:00002570 ; Segment type: Pure code
.text$mn:00002570 ; Segment permissions: Read/Execute
.text$mn:00002570 _text$mn        segment para public 'CODE' use32
.text$mn:00002570                 assume cs:_text$mn
.text$mn:00002570                 ;org 2570h
.text$mn:00002570 ; COMDAT (pick any)
.text$mn:00002570                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002570
.text$mn:00002570 ; =============== S U B R O U T I N E =======================================
.text$mn:00002570
.text$mn:00002570 ; Attributes: bp-based frame
.text$mn:00002570
.text$mn:00002570 ; public: void __thiscall std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00002570                 public ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z
.text$mn:00002570 ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z proc near
.text$mn:00002570                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)+Ap
.text$mn:00002570
.text$mn:00002570 var_4           = dword ptr -4
.text$mn:00002570
.text$mn:00002570                 push    ebp
.text$mn:00002571                 mov     ebp, esp
.text$mn:00002573                 push    ecx
.text$mn:00002574                 mov     [ebp+var_4], ecx
.text$mn:00002577                 mov     esp, ebp
.text$mn:00002579                 pop     ebp
.text$mn:0000257A                 retn    4
.text$mn:0000257A ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z endp
.text$mn:0000257A
.text$mn:0000257A ; ---------------------------------------------------------------------------
.text$mn:0000257D                 align 10h
.text$mn:0000257D _text$mn        ends
.text$mn:0000257D
.text$mn:00002580 ; ===========================================================================
.text$mn:00002580
.text$mn:00002580 ; Segment type: Pure code
.text$mn:00002580 ; Segment permissions: Read/Execute
.text$mn:00002580 _text$mn        segment para public 'CODE' use32
.text$mn:00002580                 assume cs:_text$mn
.text$mn:00002580                 ;org 2580h
.text$mn:00002580 ; COMDAT (pick any)
.text$mn:00002580                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002580
.text$mn:00002580 ; =============== S U B R O U T I N E =======================================
.text$mn:00002580
.text$mn:00002580 ; Attributes: bp-based frame
.text$mn:00002580
.text$mn:00002580 ; public: static void __cdecl std::allocator_traits<class std::allocator<wchar_t>>::destroy<wchar_t *>(class std::allocator<wchar_t> &, wchar_t * *)
.text$mn:00002580                 public ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z
.text$mn:00002580 ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z proc near
.text$mn:00002580                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)+Fp
.text$mn:00002580
.text$mn:00002580 arg_0           = dword ptr  8
.text$mn:00002580 arg_4           = dword ptr  0Ch
.text$mn:00002580
.text$mn:00002580                 push    ebp
.text$mn:00002581                 mov     ebp, esp
.text$mn:00002583                 mov     eax, [ebp+arg_4]
.text$mn:00002586                 push    eax
.text$mn:00002587                 mov     ecx, [ebp+arg_0]
.text$mn:0000258A                 call    ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:0000258F                 pop     ebp
.text$mn:00002590                 retn
.text$mn:00002590 ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z endp
.text$mn:00002590
.text$mn:00002590 ; ---------------------------------------------------------------------------
.text$mn:00002591                 align 4
.text$mn:00002591 _text$mn        ends
.text$mn:00002591
.text$mn:00002594 ; ===========================================================================
.text$mn:00002594
.text$mn:00002594 ; Segment type: Pure code
.text$mn:00002594 ; Segment permissions: Read/Execute
.text$mn:00002594 _text$mn        segment para public 'CODE' use32
.text$mn:00002594                 assume cs:_text$mn
.text$mn:00002594                 ;org 2594h
.text$mn:00002594 ; COMDAT (pick any)
.text$mn:00002594                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002594
.text$mn:00002594 ; =============== S U B R O U T I N E =======================================
.text$mn:00002594
.text$mn:00002594 ; Attributes: bp-based frame
.text$mn:00002594
.text$mn:00002594 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:00002594                 public ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:00002594 ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:00002594                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Free_proxy(void)+22p
.text$mn:00002594
.text$mn:00002594 var_4           = dword ptr -4
.text$mn:00002594 arg_0           = dword ptr  8
.text$mn:00002594
.text$mn:00002594                 push    ebp
.text$mn:00002595                 mov     ebp, esp
.text$mn:00002597                 push    ecx
.text$mn:00002598                 mov     [ebp+var_4], ecx
.text$mn:0000259B                 mov     eax, [ebp+arg_0]
.text$mn:0000259E                 push    eax
.text$mn:0000259F                 mov     ecx, [ebp+var_4]
.text$mn:000025A2                 push    ecx
.text$mn:000025A3                 call    ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *)
.text$mn:000025A8                 add     esp, 8
.text$mn:000025AB                 mov     esp, ebp
.text$mn:000025AD                 pop     ebp
.text$mn:000025AE                 retn    4
.text$mn:000025AE ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:000025AE
.text$mn:000025AE ; ---------------------------------------------------------------------------
.text$mn:000025B1                 align 4
.text$mn:000025B1 _text$mn        ends
.text$mn:000025B1
.text$mn:000025B4 ; ===========================================================================
.text$mn:000025B4
.text$mn:000025B4 ; Segment type: Pure code
.text$mn:000025B4 ; Segment permissions: Read/Execute
.text$mn:000025B4 _text$mn        segment para public 'CODE' use32
.text$mn:000025B4                 assume cs:_text$mn
.text$mn:000025B4                 ;org 25B4h
.text$mn:000025B4 ; COMDAT (pick any)
.text$mn:000025B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000025B4
.text$mn:000025B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000025B4
.text$mn:000025B4 ; Attributes: bp-based frame
.text$mn:000025B4
.text$mn:000025B4 ; public: void __thiscall std::allocator<struct std::_Container_proxy>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:000025B4                 public ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:000025B4 ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:000025B4                                         ; CODE XREF: std::allocator_traits<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *)+Ap
.text$mn:000025B4                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+22p ...
.text$mn:000025B4
.text$mn:000025B4 var_4           = dword ptr -4
.text$mn:000025B4
.text$mn:000025B4                 push    ebp
.text$mn:000025B5                 mov     ebp, esp
.text$mn:000025B7                 push    ecx
.text$mn:000025B8                 mov     [ebp+var_4], ecx
.text$mn:000025BB                 mov     esp, ebp
.text$mn:000025BD                 pop     ebp
.text$mn:000025BE                 retn    4
.text$mn:000025BE ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:000025BE
.text$mn:000025BE ; ---------------------------------------------------------------------------
.text$mn:000025C1                 align 4
.text$mn:000025C1 _text$mn        ends
.text$mn:000025C1
.text$mn:000025C4 ; ===========================================================================
.text$mn:000025C4
.text$mn:000025C4 ; Segment type: Pure code
.text$mn:000025C4 ; Segment permissions: Read/Execute
.text$mn:000025C4 _text$mn        segment para public 'CODE' use32
.text$mn:000025C4                 assume cs:_text$mn
.text$mn:000025C4                 ;org 25C4h
.text$mn:000025C4 ; COMDAT (pick any)
.text$mn:000025C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000025C4
.text$mn:000025C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000025C4
.text$mn:000025C4 ; Attributes: bp-based frame
.text$mn:000025C4
.text$mn:000025C4 ; public: static void __cdecl std::allocator_traits<class std::allocator<struct std::_Container_proxy>>::destroy<struct std::_Container_proxy>(class std::allocator<struct std::_Container_proxy> &, struct std::_Container_proxy *)
.text$mn:000025C4                 public ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z
.text$mn:000025C4 ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z proc near
.text$mn:000025C4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::_Container_proxy *)+Fp
.text$mn:000025C4
.text$mn:000025C4 arg_0           = dword ptr  8
.text$mn:000025C4 arg_4           = dword ptr  0Ch
.text$mn:000025C4
.text$mn:000025C4                 push    ebp
.text$mn:000025C5                 mov     ebp, esp
.text$mn:000025C7                 mov     eax, [ebp+arg_4]
.text$mn:000025CA                 push    eax
.text$mn:000025CB                 mov     ecx, [ebp+arg_0]
.text$mn:000025CE                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:000025D3                 pop     ebp
.text$mn:000025D4                 retn
.text$mn:000025D4 ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z endp
.text$mn:000025D4
.text$mn:000025D4 ; ---------------------------------------------------------------------------
.text$mn:000025D5                 align 4
.text$mn:000025D5 _text$mn        ends
.text$mn:000025D5
.text$mn:000025D8 ; ===========================================================================
.text$mn:000025D8
.text$mn:000025D8 ; Segment type: Pure code
.text$mn:000025D8 ; Segment permissions: Read/Execute
.text$mn:000025D8 _text$mn        segment para public 'CODE' use32
.text$mn:000025D8                 assume cs:_text$mn
.text$mn:000025D8                 ;org 25D8h
.text$mn:000025D8 ; COMDAT (pick any)
.text$mn:000025D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000025D8
.text$mn:000025D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000025D8
.text$mn:000025D8 ; Attributes: bp-based frame
.text$mn:000025D8
.text$mn:000025D8 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::destroy<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:000025D8                 public ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
.text$mn:000025D8 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z proc near
.text$mn:000025D8                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+1Dp
.text$mn:000025D8                                         ; __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Ap
.text$mn:000025D8
.text$mn:000025D8 var_4           = dword ptr -4
.text$mn:000025D8 arg_0           = dword ptr  8
.text$mn:000025D8
.text$mn:000025D8                 push    ebp
.text$mn:000025D9                 mov     ebp, esp
.text$mn:000025DB                 push    ecx
.text$mn:000025DC                 mov     [ebp+var_4], ecx
.text$mn:000025DF                 mov     eax, [ebp+arg_0]
.text$mn:000025E2                 push    eax
.text$mn:000025E3                 mov     ecx, [ebp+var_4]
.text$mn:000025E6                 push    ecx
.text$mn:000025E7                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000025EC                 add     esp, 8
.text$mn:000025EF                 mov     esp, ebp
.text$mn:000025F1                 pop     ebp
.text$mn:000025F2                 retn    4
.text$mn:000025F2 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z endp
.text$mn:000025F2
.text$mn:000025F2 ; ---------------------------------------------------------------------------
.text$mn:000025F5                 align 4
.text$mn:000025F5 _text$mn        ends
.text$mn:000025F5
.text$mn:000025F8 ; ===========================================================================
.text$mn:000025F8
.text$mn:000025F8 ; Segment type: Pure code
.text$mn:000025F8 ; Segment permissions: Read/Execute
.text$mn:000025F8 _text$mn        segment para public 'CODE' use32
.text$mn:000025F8                 assume cs:_text$mn
.text$mn:000025F8                 ;org 25F8h
.text$mn:000025F8 ; COMDAT (pick any)
.text$mn:000025F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000025F8
.text$mn:000025F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000025F8
.text$mn:000025F8 ; Attributes: bp-based frame
.text$mn:000025F8
.text$mn:000025F8 ; public: void __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::destroy<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:000025F8                 public ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
.text$mn:000025F8 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z proc near
.text$mn:000025F8                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Ap
.text$mn:000025F8
.text$mn:000025F8 var_4           = dword ptr -4
.text$mn:000025F8 arg_0           = dword ptr  8
.text$mn:000025F8
.text$mn:000025F8                 push    ebp
.text$mn:000025F9                 mov     ebp, esp
.text$mn:000025FB                 push    ecx
.text$mn:000025FC                 mov     [ebp+var_4], ecx
.text$mn:000025FF                 push    0
.text$mn:00002601                 mov     ecx, [ebp+arg_0]
.text$mn:00002604                 call    ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`scalar deleting destructor'(uint)
.text$mn:00002609                 mov     esp, ebp
.text$mn:0000260B                 pop     ebp
.text$mn:0000260C                 retn    4
.text$mn:0000260C ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z endp
.text$mn:0000260C
.text$mn:0000260C ; ---------------------------------------------------------------------------
.text$mn:0000260F                 align 10h
.text$mn:0000260F _text$mn        ends
.text$mn:0000260F
.text$mn:00002610 ; ===========================================================================
.text$mn:00002610
.text$mn:00002610 ; Segment type: Pure code
.text$mn:00002610 ; Segment permissions: Read/Execute
.text$mn:00002610 _text$mn        segment para public 'CODE' use32
.text$mn:00002610                 assume cs:_text$mn
.text$mn:00002610                 ;org 2610h
.text$mn:00002610 ; COMDAT (pick any)
.text$mn:00002610                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002610
.text$mn:00002610 ; =============== S U B R O U T I N E =======================================
.text$mn:00002610
.text$mn:00002610 ; Attributes: bp-based frame
.text$mn:00002610
.text$mn:00002610 ; public: static void __cdecl std::allocator_traits<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::destroy<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00002610                 public ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
.text$mn:00002610 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z proc near
.text$mn:00002610                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Fp
.text$mn:00002610
.text$mn:00002610 arg_0           = dword ptr  8
.text$mn:00002610 arg_4           = dword ptr  0Ch
.text$mn:00002610
.text$mn:00002610                 push    ebp
.text$mn:00002611                 mov     ebp, esp
.text$mn:00002613                 mov     eax, [ebp+arg_4]
.text$mn:00002616                 push    eax
.text$mn:00002617                 mov     ecx, [ebp+arg_0]
.text$mn:0000261A                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000261F                 pop     ebp
.text$mn:00002620                 retn
.text$mn:00002620 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z endp
.text$mn:00002620
.text$mn:00002620 ; ---------------------------------------------------------------------------
.text$mn:00002621                 align 4
.text$mn:00002621 _text$mn        ends
.text$mn:00002621
.text$mn:00002624 ; ===========================================================================
.text$mn:00002624
.text$mn:00002624 ; Segment type: Pure code
.text$mn:00002624 ; Segment permissions: Read/Execute
.text$mn:00002624 _text$mn        segment para public 'CODE' use32
.text$mn:00002624                 assume cs:_text$mn
.text$mn:00002624                 ;org 2624h
.text$mn:00002624 ; COMDAT (pick any)
.text$mn:00002624                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002624
.text$mn:00002624 ; =============== S U B R O U T I N E =======================================
.text$mn:00002624
.text$mn:00002624 ; Attributes: bp-based frame
.text$mn:00002624
.text$mn:00002624 ; char * & __cdecl std::forward<char * &>(char * &)
.text$mn:00002624                 public ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
.text$mn:00002624 ??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
.text$mn:00002624                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+Bp
.text$mn:00002624                                         ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)+4Ap ...
.text$mn:00002624
.text$mn:00002624 arg_0           = dword ptr  8
.text$mn:00002624
.text$mn:00002624                 push    ebp
.text$mn:00002625                 mov     ebp, esp
.text$mn:00002627                 mov     eax, [ebp+arg_0]
.text$mn:0000262A                 pop     ebp
.text$mn:0000262B                 retn
.text$mn:0000262B ??$forward@AAPAD@std@@YAAAPADAAPAD@Z endp
.text$mn:0000262B
.text$mn:0000262B _text$mn        ends
.text$mn:0000262B
.text$mn:0000262C ; ===========================================================================
.text$mn:0000262C
.text$mn:0000262C ; Segment type: Pure code
.text$mn:0000262C ; Segment permissions: Read/Execute
.text$mn:0000262C _text$mn        segment para public 'CODE' use32
.text$mn:0000262C                 assume cs:_text$mn
.text$mn:0000262C                 ;org 262Ch
.text$mn:0000262C ; COMDAT (pick any)
.text$mn:0000262C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000262C
.text$mn:0000262C ; =============== S U B R O U T I N E =======================================
.text$mn:0000262C
.text$mn:0000262C ; Attributes: bp-based frame
.text$mn:0000262C
.text$mn:0000262C ; wchar_t * & __cdecl std::forward<wchar_t * &>(wchar_t * &)
.text$mn:0000262C                 public ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z
.text$mn:0000262C ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z proc near
.text$mn:0000262C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+Bp
.text$mn:0000262C                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+4Ap ...
.text$mn:0000262C
.text$mn:0000262C arg_0           = dword ptr  8
.text$mn:0000262C
.text$mn:0000262C                 push    ebp
.text$mn:0000262D                 mov     ebp, esp
.text$mn:0000262F                 mov     eax, [ebp+arg_0]
.text$mn:00002632                 pop     ebp
.text$mn:00002633                 retn
.text$mn:00002633 ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z endp
.text$mn:00002633
.text$mn:00002633 _text$mn        ends
.text$mn:00002633
.text$mn:00002634 ; ===========================================================================
.text$mn:00002634
.text$mn:00002634 ; Segment type: Pure code
.text$mn:00002634 ; Segment permissions: Read/Execute
.text$mn:00002634 _text$mn        segment para public 'CODE' use32
.text$mn:00002634                 assume cs:_text$mn
.text$mn:00002634                 ;org 2634h
.text$mn:00002634 ; COMDAT (pick any)
.text$mn:00002634                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002634
.text$mn:00002634 ; =============== S U B R O U T I N E =======================================
.text$mn:00002634
.text$mn:00002634 ; Attributes: bp-based frame
.text$mn:00002634
.text$mn:00002634 ; struct std::_Container_proxy && __cdecl std::forward<struct std::_Container_proxy>(struct std::_Container_proxy &)
.text$mn:00002634                 public ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
.text$mn:00002634 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc near
.text$mn:00002634                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+Bp
.text$mn:00002634                                         ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+4Ap ...
.text$mn:00002634
.text$mn:00002634 arg_0           = dword ptr  8
.text$mn:00002634
.text$mn:00002634                 push    ebp
.text$mn:00002635                 mov     ebp, esp
.text$mn:00002637                 mov     eax, [ebp+arg_0]
.text$mn:0000263A                 pop     ebp
.text$mn:0000263B                 retn
.text$mn:0000263B ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z endp
.text$mn:0000263B
.text$mn:0000263B _text$mn        ends
.text$mn:0000263B
.text$mn:0000263C ; ===========================================================================
.text$mn:0000263C
.text$mn:0000263C ; Segment type: Pure code
.text$mn:0000263C ; Segment permissions: Read/Execute
.text$mn:0000263C _text$mn        segment para public 'CODE' use32
.text$mn:0000263C                 assume cs:_text$mn
.text$mn:0000263C                 ;org 263Ch
.text$mn:0000263C ; COMDAT (pick any)
.text$mn:0000263C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000263C
.text$mn:0000263C ; =============== S U B R O U T I N E =======================================
.text$mn:0000263C
.text$mn:0000263C ; Attributes: bp-based frame
.text$mn:0000263C
.text$mn:0000263C ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> && __cdecl std::forward<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:0000263C                 public ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
.text$mn:0000263C ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z proc near
.text$mn:0000263C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+Bp
.text$mn:0000263C                                         ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+4Ap ...
.text$mn:0000263C
.text$mn:0000263C arg_0           = dword ptr  8
.text$mn:0000263C
.text$mn:0000263C                 push    ebp
.text$mn:0000263D                 mov     ebp, esp
.text$mn:0000263F                 mov     eax, [ebp+arg_0]
.text$mn:00002642                 pop     ebp
.text$mn:00002643                 retn
.text$mn:00002643 ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z endp
.text$mn:00002643
.text$mn:00002643 _text$mn        ends
.text$mn:00002643
.text$mn:00002644 ; ===========================================================================
.text$mn:00002644
.text$mn:00002644 ; Segment type: Pure code
.text$mn:00002644 ; Segment permissions: Read/Execute
.text$mn:00002644 _text$mn        segment para public 'CODE' use32
.text$mn:00002644                 assume cs:_text$mn
.text$mn:00002644                 ;org 2644h
.text$mn:00002644 ; COMDAT (pick any)
.text$mn:00002644                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002644
.text$mn:00002644 ; =============== S U B R O U T I N E =======================================
.text$mn:00002644
.text$mn:00002644 ; Attributes: bp-based frame
.text$mn:00002644
.text$mn:00002644 ; int __stdcall std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(struct std::_Iterator_base12 *)
.text$mn:00002644                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:00002644 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$mn:00002644                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+2Dp
.text$mn:00002644
.text$mn:00002644 var_10          = dword ptr -10h
.text$mn:00002644 var_C           = dword ptr -0Ch
.text$mn:00002644 var_4           = dword ptr -4
.text$mn:00002644 arg_0           = dword ptr  8
.text$mn:00002644
.text$mn:00002644                 push    ebp
.text$mn:00002645                 mov     ebp, esp
.text$mn:00002647                 push    0FFFFFFFFh
.text$mn:00002649                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:0000264E                 mov     eax, large fs:0
.text$mn:00002654                 push    eax
.text$mn:00002655                 push    ecx
.text$mn:00002656                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000265B                 xor     eax, ebp
.text$mn:0000265D                 push    eax
.text$mn:0000265E                 lea     eax, [ebp+var_C]
.text$mn:00002661                 mov     large fs:0, eax
.text$mn:00002667                 mov     [ebp+var_10], ecx
.text$mn:0000266A                 mov     eax, [ebp+arg_0]
.text$mn:0000266D                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:0000266E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002671                 call    ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)
.text$mn:00002676                 mov     [ebp+var_4], 0
.text$mn:0000267D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002684                 mov     eax, [ebp+var_10]
.text$mn:00002687                 mov     ecx, [ebp+var_C]
.text$mn:0000268A                 mov     large fs:0, ecx
.text$mn:00002691                 pop     ecx
.text$mn:00002692                 mov     esp, ebp
.text$mn:00002694                 pop     ebp
.text$mn:00002695                 retn    4
.text$mn:00002695 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$mn:00002695
.text$mn:00002695 _text$mn        ends
.text$mn:00002695
.text$x:00002698 ; ===========================================================================
.text$x:00002698
.text$x:00002698 ; Segment type: Pure code
.text$x:00002698 ; Segment permissions: Read/Execute
.text$x:00002698 _text$x         segment para public 'CODE' use32
.text$x:00002698                 assume cs:_text$x
.text$x:00002698                 ;org 2698h
.text$x:00002698 ; COMDAT (pick associative to section at 2644)
.text$x:00002698                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002698
.text$x:00002698 ; =============== S U B R O U T I N E =======================================
.text$x:00002698
.text$x:00002698
.text$x:00002698 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 proc near
.text$x:00002698                                         ; DATA XREF: .xdata$x:00007F38o
.text$x:00002698                 mov     ecx, [ebp-10h]  ; this
.text$x:0000269B                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:0000269B __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 endp
.text$x:0000269B
.text$x:000026A0
.text$x:000026A0 ; =============== S U B R O U T I N E =======================================
.text$x:000026A0
.text$x:000026A0
.text$x:000026A0 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$x:000026A0                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12> const &)+5o
.text$x:000026A0
.text$x:000026A0 arg_4           = dword ptr  8
.text$x:000026A0
.text$x:000026A0                 mov     edx, [esp+arg_4]
.text$x:000026A4                 lea     eax, [edx+0Ch]
.text$x:000026A7                 mov     ecx, [edx-8]
.text$x:000026AA                 xor     ecx, eax
.text$x:000026AC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000026B1                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$x:000026B6                 jmp     ___CxxFrameHandler3
.text$x:000026B6 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$x:000026B6
.text$x:000026B6 ; ---------------------------------------------------------------------------
.text$x:000026BB                 align 4
.text$x:000026BB _text$x         ends
.text$x:000026BB
.text$mn:000026BC ; ===========================================================================
.text$mn:000026BC
.text$mn:000026BC ; Segment type: Pure code
.text$mn:000026BC ; Segment permissions: Read/Execute
.text$mn:000026BC _text$mn        segment para public 'CODE' use32
.text$mn:000026BC                 assume cs:_text$mn
.text$mn:000026BC                 ;org 26BCh
.text$mn:000026BC ; COMDAT (pick any)
.text$mn:000026BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000026BC
.text$mn:000026BC ; =============== S U B R O U T I N E =======================================
.text$mn:000026BC
.text$mn:000026BC ; Attributes: bp-based frame
.text$mn:000026BC
.text$mn:000026BC ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>::_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>(void)
.text$mn:000026BC                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:000026BC ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:000026BC                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)+29p
.text$mn:000026BC
.text$mn:000026BC var_10          = dword ptr -10h
.text$mn:000026BC var_C           = dword ptr -0Ch
.text$mn:000026BC var_4           = dword ptr -4
.text$mn:000026BC
.text$mn:000026BC                 push    ebp
.text$mn:000026BD                 mov     ebp, esp
.text$mn:000026BF                 push    0FFFFFFFFh
.text$mn:000026C1                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:000026C6                 mov     eax, large fs:0
.text$mn:000026CC                 push    eax
.text$mn:000026CD                 push    ecx
.text$mn:000026CE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000026D3                 xor     eax, ebp
.text$mn:000026D5                 push    eax
.text$mn:000026D6                 lea     eax, [ebp+var_C]
.text$mn:000026D9                 mov     large fs:0, eax
.text$mn:000026DF                 mov     [ebp+var_10], ecx
.text$mn:000026E2                 mov     ecx, [ebp+var_10] ; this
.text$mn:000026E5                 call    ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12(void)
.text$mn:000026EA                 mov     [ebp+var_4], 0
.text$mn:000026F1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000026F8                 mov     eax, [ebp+var_10]
.text$mn:000026FB                 mov     ecx, [ebp+var_C]
.text$mn:000026FE                 mov     large fs:0, ecx
.text$mn:00002705                 pop     ecx
.text$mn:00002706                 mov     esp, ebp
.text$mn:00002708                 pop     ebp
.text$mn:00002709                 retn
.text$mn:00002709 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00002709
.text$mn:00002709 ; ---------------------------------------------------------------------------
.text$mn:0000270A                 align 4
.text$mn:0000270A _text$mn        ends
.text$mn:0000270A
.text$x:0000270C ; ===========================================================================
.text$x:0000270C
.text$x:0000270C ; Segment type: Pure code
.text$x:0000270C ; Segment permissions: Read/Execute
.text$x:0000270C _text$x         segment para public 'CODE' use32
.text$x:0000270C                 assume cs:_text$x
.text$x:0000270C                 ;org 270Ch
.text$x:0000270C ; COMDAT (pick associative to section at 26BC)
.text$x:0000270C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000270C
.text$x:0000270C ; =============== S U B R O U T I N E =======================================
.text$x:0000270C
.text$x:0000270C
.text$x:0000270C __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:0000270C                                         ; DATA XREF: .xdata$x:00007EE0o
.text$x:0000270C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000270F                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:0000270F __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:0000270F
.text$x:00002714
.text$x:00002714 ; =============== S U B R O U T I N E =======================================
.text$x:00002714
.text$x:00002714
.text$x:00002714 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00002714                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)+5o
.text$x:00002714
.text$x:00002714 arg_4           = dword ptr  8
.text$x:00002714
.text$x:00002714                 mov     edx, [esp+arg_4]
.text$x:00002718                 lea     eax, [edx+0Ch]
.text$x:0000271B                 mov     ecx, [edx-8]
.text$x:0000271E                 xor     ecx, eax
.text$x:00002720                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002725                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$x:0000272A                 jmp     ___CxxFrameHandler3
.text$x:0000272A __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:0000272A
.text$x:0000272A ; ---------------------------------------------------------------------------
.text$x:0000272F                 align 10h
.text$x:0000272F _text$x         ends
.text$x:0000272F
.text$mn:00002730 ; ===========================================================================
.text$mn:00002730
.text$mn:00002730 ; Segment type: Pure code
.text$mn:00002730 ; Segment permissions: Read/Execute
.text$mn:00002730 _text$mn        segment para public 'CODE' use32
.text$mn:00002730                 assume cs:_text$mn
.text$mn:00002730                 ;org 2730h
.text$mn:00002730 ; COMDAT (pick any)
.text$mn:00002730                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002730
.text$mn:00002730 ; =============== S U B R O U T I N E =======================================
.text$mn:00002730
.text$mn:00002730 ; Attributes: bp-based frame
.text$mn:00002730
.text$mn:00002730 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(class std::allocator<char> const &)
.text$mn:00002730                 public ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:00002730 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$mn:00002730                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+34p
.text$mn:00002730
.text$mn:00002730 var_10          = dword ptr -10h
.text$mn:00002730 var_C           = dword ptr -0Ch
.text$mn:00002730 var_4           = dword ptr -4
.text$mn:00002730
.text$mn:00002730                 push    ebp
.text$mn:00002731                 mov     ebp, esp
.text$mn:00002733                 push    0FFFFFFFFh
.text$mn:00002735                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:0000273A                 mov     eax, large fs:0
.text$mn:00002740                 push    eax
.text$mn:00002741                 push    ecx
.text$mn:00002742                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002747                 xor     eax, ebp
.text$mn:00002749                 push    eax
.text$mn:0000274A                 lea     eax, [ebp+var_C]
.text$mn:0000274D                 mov     large fs:0, eax
.text$mn:00002753                 mov     [ebp+var_10], ecx
.text$mn:00002756                 mov     ecx, [ebp+var_10]
.text$mn:00002759                 call    ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)
.text$mn:0000275E                 mov     [ebp+var_4], 0
.text$mn:00002765                 mov     ecx, [ebp+var_10]
.text$mn:00002768                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:0000276D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002774                 mov     eax, [ebp+var_10]
.text$mn:00002777                 mov     ecx, [ebp+var_C]
.text$mn:0000277A                 mov     large fs:0, ecx
.text$mn:00002781                 pop     ecx
.text$mn:00002782                 mov     esp, ebp
.text$mn:00002784                 pop     ebp
.text$mn:00002785                 retn    4
.text$mn:00002785 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$mn:00002785
.text$mn:00002785 _text$mn        ends
.text$mn:00002785
.text$x:00002788 ; ===========================================================================
.text$x:00002788
.text$x:00002788 ; Segment type: Pure code
.text$x:00002788 ; Segment permissions: Read/Execute
.text$x:00002788 _text$x         segment para public 'CODE' use32
.text$x:00002788                 assume cs:_text$x
.text$x:00002788                 ;org 2788h
.text$x:00002788 ; COMDAT (pick associative to section at 2730)
.text$x:00002788                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002788
.text$x:00002788 ; =============== S U B R O U T I N E =======================================
.text$x:00002788
.text$x:00002788
.text$x:00002788 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
.text$x:00002788                                         ; DATA XREF: .xdata$x:000073F4o
.text$x:00002788                 mov     ecx, [ebp-10h]
.text$x:0000278B                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:0000278B __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 endp
.text$x:0000278B
.text$x:00002790
.text$x:00002790 ; =============== S U B R O U T I N E =======================================
.text$x:00002790
.text$x:00002790
.text$x:00002790 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$x:00002790                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+5o
.text$x:00002790
.text$x:00002790 arg_4           = dword ptr  8
.text$x:00002790
.text$x:00002790                 mov     edx, [esp+arg_4]
.text$x:00002794                 lea     eax, [edx+0Ch]
.text$x:00002797                 mov     ecx, [edx-8]
.text$x:0000279A                 xor     ecx, eax
.text$x:0000279C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000027A1                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$x:000027A6                 jmp     ___CxxFrameHandler3
.text$x:000027A6 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$x:000027A6
.text$x:000027A6 ; ---------------------------------------------------------------------------
.text$x:000027AB                 align 4
.text$x:000027AB _text$x         ends
.text$x:000027AB
.text$mn:000027AC ; ===========================================================================
.text$mn:000027AC
.text$mn:000027AC ; Segment type: Pure code
.text$mn:000027AC ; Segment permissions: Read/Execute
.text$mn:000027AC _text$mn        segment para public 'CODE' use32
.text$mn:000027AC                 assume cs:_text$mn
.text$mn:000027AC                 ;org 27ACh
.text$mn:000027AC ; COMDAT (pick any)
.text$mn:000027AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000027AC
.text$mn:000027AC ; =============== S U B R O U T I N E =======================================
.text$mn:000027AC
.text$mn:000027AC ; Attributes: bp-based frame
.text$mn:000027AC
.text$mn:000027AC ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(class std::allocator<wchar_t> const &)
.text$mn:000027AC                 public ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:000027AC ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:000027AC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+38p
.text$mn:000027AC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+43p ...
.text$mn:000027AC
.text$mn:000027AC var_10          = dword ptr -10h
.text$mn:000027AC var_C           = dword ptr -0Ch
.text$mn:000027AC var_4           = dword ptr -4
.text$mn:000027AC
.text$mn:000027AC                 push    ebp
.text$mn:000027AD                 mov     ebp, esp
.text$mn:000027AF                 push    0FFFFFFFFh
.text$mn:000027B1                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:000027B6                 mov     eax, large fs:0
.text$mn:000027BC                 push    eax
.text$mn:000027BD                 push    ecx
.text$mn:000027BE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000027C3                 xor     eax, ebp
.text$mn:000027C5                 push    eax
.text$mn:000027C6                 lea     eax, [ebp+var_C]
.text$mn:000027C9                 mov     large fs:0, eax
.text$mn:000027CF                 mov     [ebp+var_10], ecx
.text$mn:000027D2                 mov     ecx, [ebp+var_10]
.text$mn:000027D5                 call    ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:000027DA                 mov     [ebp+var_4], 0
.text$mn:000027E1                 mov     ecx, [ebp+var_10]
.text$mn:000027E4                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:000027E9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000027F0                 mov     eax, [ebp+var_10]
.text$mn:000027F3                 mov     ecx, [ebp+var_C]
.text$mn:000027F6                 mov     large fs:0, ecx
.text$mn:000027FD                 pop     ecx
.text$mn:000027FE                 mov     esp, ebp
.text$mn:00002800                 pop     ebp
.text$mn:00002801                 retn    4
.text$mn:00002801 ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:00002801
.text$mn:00002801 _text$mn        ends
.text$mn:00002801
.text$x:00002804 ; ===========================================================================
.text$x:00002804
.text$x:00002804 ; Segment type: Pure code
.text$x:00002804 ; Segment permissions: Read/Execute
.text$x:00002804 _text$x         segment para public 'CODE' use32
.text$x:00002804                 assume cs:_text$x
.text$x:00002804                 ;org 2804h
.text$x:00002804 ; COMDAT (pick associative to section at 27AC)
.text$x:00002804                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002804
.text$x:00002804 ; =============== S U B R O U T I N E =======================================
.text$x:00002804
.text$x:00002804
.text$x:00002804 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 proc near
.text$x:00002804                                         ; DATA XREF: .xdata$x:00007714o
.text$x:00002804                 mov     ecx, [ebp-10h]
.text$x:00002807                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:00002807 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 endp
.text$x:00002807
.text$x:0000280C
.text$x:0000280C ; =============== S U B R O U T I N E =======================================
.text$x:0000280C
.text$x:0000280C
.text$x:0000280C __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$x:0000280C                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+5o
.text$x:0000280C
.text$x:0000280C arg_4           = dword ptr  8
.text$x:0000280C
.text$x:0000280C                 mov     edx, [esp+arg_4]
.text$x:00002810                 lea     eax, [edx+0Ch]
.text$x:00002813                 mov     ecx, [edx-8]
.text$x:00002816                 xor     ecx, eax
.text$x:00002818                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000281D                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$x:00002822                 jmp     ___CxxFrameHandler3
.text$x:00002822 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$x:00002822
.text$x:00002822 ; ---------------------------------------------------------------------------
.text$x:00002827                 align 4
.text$x:00002827 _text$x         ends
.text$x:00002827
.text$mn:00002828 ; ===========================================================================
.text$mn:00002828
.text$mn:00002828 ; Segment type: Pure code
.text$mn:00002828 ; Segment permissions: Read/Execute
.text$mn:00002828 _text$mn        segment para public 'CODE' use32
.text$mn:00002828                 assume cs:_text$mn
.text$mn:00002828                 ;org 2828h
.text$mn:00002828 ; COMDAT (pick any)
.text$mn:00002828                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002828
.text$mn:00002828 ; =============== S U B R O U T I N E =======================================
.text$mn:00002828
.text$mn:00002828 ; Attributes: bp-based frame
.text$mn:00002828
.text$mn:00002828 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(struct std::_Iterator_base12 *)
.text$mn:00002828                 public ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00002828 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:00002828                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+90p
.text$mn:00002828                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+C7p ...
.text$mn:00002828
.text$mn:00002828 var_10          = dword ptr -10h
.text$mn:00002828 var_C           = dword ptr -0Ch
.text$mn:00002828 var_4           = dword ptr -4
.text$mn:00002828 arg_0           = dword ptr  8
.text$mn:00002828
.text$mn:00002828                 push    ebp
.text$mn:00002829                 mov     ebp, esp
.text$mn:0000282B                 push    0FFFFFFFFh
.text$mn:0000282D                 push    offset __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00002832                 mov     eax, large fs:0
.text$mn:00002838                 push    eax
.text$mn:00002839                 push    ecx
.text$mn:0000283A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000283F                 xor     eax, ebp
.text$mn:00002841                 push    eax
.text$mn:00002842                 lea     eax, [ebp+var_C]
.text$mn:00002845                 mov     large fs:0, eax
.text$mn:0000284B                 mov     [ebp+var_10], ecx
.text$mn:0000284E                 mov     eax, [ebp+arg_0]
.text$mn:00002851                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00002852                 mov     ecx, [ebp+var_10]
.text$mn:00002855                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12> const &)
.text$mn:0000285A                 mov     [ebp+var_4], 0
.text$mn:00002861                 mov     ecx, [ebp+var_10]
.text$mn:00002864                 mov     edx, [ebp+arg_0]
.text$mn:00002867                 mov     eax, [edx+8]
.text$mn:0000286A                 mov     [ecx+8], eax
.text$mn:0000286D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002874                 mov     eax, [ebp+var_10]
.text$mn:00002877                 mov     ecx, [ebp+var_C]
.text$mn:0000287A                 mov     large fs:0, ecx
.text$mn:00002881                 pop     ecx
.text$mn:00002882                 mov     esp, ebp
.text$mn:00002884                 pop     ebp
.text$mn:00002885                 retn    4
.text$mn:00002885 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:00002885
.text$mn:00002885 _text$mn        ends
.text$mn:00002885
.text$x:00002888 ; ===========================================================================
.text$x:00002888
.text$x:00002888 ; Segment type: Pure code
.text$x:00002888 ; Segment permissions: Read/Execute
.text$x:00002888 _text$x         segment para public 'CODE' use32
.text$x:00002888                 assume cs:_text$x
.text$x:00002888                 ;org 2888h
.text$x:00002888 ; COMDAT (pick associative to section at 2828)
.text$x:00002888                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002888
.text$x:00002888 ; =============== S U B R O U T I N E =======================================
.text$x:00002888
.text$x:00002888
.text$x:00002888 __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00002888                                         ; DATA XREF: .xdata$x:00007FBCo
.text$x:00002888                 mov     ecx, [ebp-10h]
.text$x:0000288B                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$x:0000288B __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:0000288B
.text$x:00002890
.text$x:00002890 ; =============== S U B R O U T I N E =======================================
.text$x:00002890
.text$x:00002890
.text$x:00002890 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:00002890                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+5o
.text$x:00002890
.text$x:00002890 arg_4           = dword ptr  8
.text$x:00002890
.text$x:00002890                 mov     edx, [esp+arg_4]
.text$x:00002894                 lea     eax, [edx+0Ch]
.text$x:00002897                 mov     ecx, [edx-8]
.text$x:0000289A                 xor     ecx, eax
.text$x:0000289C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000028A1                 mov     eax, offset __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:000028A6                 jmp     ___CxxFrameHandler3
.text$x:000028A6 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:000028A6
.text$x:000028A6 ; ---------------------------------------------------------------------------
.text$x:000028AB                 align 4
.text$x:000028AB _text$x         ends
.text$x:000028AB
.text$mn:000028AC ; ===========================================================================
.text$mn:000028AC
.text$mn:000028AC ; Segment type: Pure code
.text$mn:000028AC ; Segment permissions: Read/Execute
.text$mn:000028AC _text$mn        segment para public 'CODE' use32
.text$mn:000028AC                 assume cs:_text$mn
.text$mn:000028AC                 ;org 28ACh
.text$mn:000028AC ; COMDAT (pick any)
.text$mn:000028AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000028AC
.text$mn:000028AC ; =============== S U B R O U T I N E =======================================
.text$mn:000028AC
.text$mn:000028AC ; Attributes: bp-based frame
.text$mn:000028AC
.text$mn:000028AC ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(int, struct std::_Container_base12 *)
.text$mn:000028AC                 public ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.text$mn:000028AC ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z proc near
.text$mn:000028AC                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)+31p
.text$mn:000028AC
.text$mn:000028AC var_10          = dword ptr -10h
.text$mn:000028AC var_C           = dword ptr -0Ch
.text$mn:000028AC var_4           = dword ptr -4
.text$mn:000028AC arg_0           = dword ptr  8
.text$mn:000028AC arg_4           = dword ptr  0Ch
.text$mn:000028AC
.text$mn:000028AC                 push    ebp
.text$mn:000028AD                 mov     ebp, esp
.text$mn:000028AF                 push    0FFFFFFFFh
.text$mn:000028B1                 push    offset __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.text$mn:000028B6                 mov     eax, large fs:0
.text$mn:000028BC                 push    eax
.text$mn:000028BD                 push    ecx
.text$mn:000028BE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000028C3                 xor     eax, ebp
.text$mn:000028C5                 push    eax
.text$mn:000028C6                 lea     eax, [ebp+var_C]
.text$mn:000028C9                 mov     large fs:0, eax
.text$mn:000028CF                 mov     [ebp+var_10], ecx
.text$mn:000028D2                 mov     ecx, [ebp+var_10]
.text$mn:000028D5                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$mn:000028DA                 mov     [ebp+var_4], 0
.text$mn:000028E1                 mov     eax, [ebp+arg_4]
.text$mn:000028E4                 push    eax             ; struct std::_Container_base12 *
.text$mn:000028E5                 mov     ecx, [ebp+var_10] ; this
.text$mn:000028E8                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:000028ED                 mov     ecx, [ebp+var_10]
.text$mn:000028F0                 mov     edx, [ebp+arg_0]
.text$mn:000028F3                 mov     [ecx+8], edx
.text$mn:000028F6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000028FD                 mov     eax, [ebp+var_10]
.text$mn:00002900                 mov     ecx, [ebp+var_C]
.text$mn:00002903                 mov     large fs:0, ecx
.text$mn:0000290A                 pop     ecx
.text$mn:0000290B                 mov     esp, ebp
.text$mn:0000290D                 pop     ebp
.text$mn:0000290E                 retn    8
.text$mn:0000290E ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z endp
.text$mn:0000290E
.text$mn:0000290E ; ---------------------------------------------------------------------------
.text$mn:00002911                 align 4
.text$mn:00002911 _text$mn        ends
.text$mn:00002911
.text$x:00002914 ; ===========================================================================
.text$x:00002914
.text$x:00002914 ; Segment type: Pure code
.text$x:00002914 ; Segment permissions: Read/Execute
.text$x:00002914 _text$x         segment para public 'CODE' use32
.text$x:00002914                 assume cs:_text$x
.text$x:00002914                 ;org 2914h
.text$x:00002914 ; COMDAT (pick associative to section at 28AC)
.text$x:00002914                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002914
.text$x:00002914 ; =============== S U B R O U T I N E =======================================
.text$x:00002914
.text$x:00002914
.text$x:00002914 __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0 proc near
.text$x:00002914                                         ; DATA XREF: .xdata$x:00007F64o
.text$x:00002914                 mov     ecx, [ebp-10h]
.text$x:00002917                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$x:00002917 __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0 endp
.text$x:00002917
.text$x:0000291C
.text$x:0000291C ; =============== S U B R O U T I N E =======================================
.text$x:0000291C
.text$x:0000291C
.text$x:0000291C __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z proc near
.text$x:0000291C                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)+5o
.text$x:0000291C
.text$x:0000291C arg_4           = dword ptr  8
.text$x:0000291C
.text$x:0000291C                 mov     edx, [esp+arg_4]
.text$x:00002920                 lea     eax, [edx+0Ch]
.text$x:00002923                 mov     ecx, [edx-8]
.text$x:00002926                 xor     ecx, eax
.text$x:00002928                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000292D                 mov     eax, offset __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.text$x:00002932                 jmp     ___CxxFrameHandler3
.text$x:00002932 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z endp
.text$x:00002932
.text$x:00002932 ; ---------------------------------------------------------------------------
.text$x:00002937                 align 4
.text$x:00002937 _text$x         ends
.text$x:00002937
.text$mn:00002938 ; ===========================================================================
.text$mn:00002938
.text$mn:00002938 ; Segment type: Pure code
.text$mn:00002938 ; Segment permissions: Read/Execute
.text$mn:00002938 _text$mn        segment para public 'CODE' use32
.text$mn:00002938                 assume cs:_text$mn
.text$mn:00002938                 ;org 2938h
.text$mn:00002938 ; COMDAT (pick any)
.text$mn:00002938                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002938
.text$mn:00002938 ; =============== S U B R O U T I N E =======================================
.text$mn:00002938
.text$mn:00002938 ; Attributes: bp-based frame
.text$mn:00002938
.text$mn:00002938 ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(struct std::_Iterator_base12 *)
.text$mn:00002938                 public ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00002938 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:00002938                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+3Bp
.text$mn:00002938                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+59p
.text$mn:00002938
.text$mn:00002938 var_10          = dword ptr -10h
.text$mn:00002938 var_C           = dword ptr -0Ch
.text$mn:00002938 var_4           = dword ptr -4
.text$mn:00002938 arg_0           = dword ptr  8
.text$mn:00002938
.text$mn:00002938                 push    ebp
.text$mn:00002939                 mov     ebp, esp
.text$mn:0000293B                 push    0FFFFFFFFh
.text$mn:0000293D                 push    offset __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00002942                 mov     eax, large fs:0
.text$mn:00002948                 push    eax
.text$mn:00002949                 push    ecx
.text$mn:0000294A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000294F                 xor     eax, ebp
.text$mn:00002951                 push    eax
.text$mn:00002952                 lea     eax, [ebp+var_C]
.text$mn:00002955                 mov     large fs:0, eax
.text$mn:0000295B                 mov     [ebp+var_10], ecx
.text$mn:0000295E                 mov     eax, [ebp+arg_0]
.text$mn:00002961                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00002962                 mov     ecx, [ebp+var_10]
.text$mn:00002965                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000296A                 mov     [ebp+var_4], 0
.text$mn:00002971                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002978                 mov     eax, [ebp+var_10]
.text$mn:0000297B                 mov     ecx, [ebp+var_C]
.text$mn:0000297E                 mov     large fs:0, ecx
.text$mn:00002985                 pop     ecx
.text$mn:00002986                 mov     esp, ebp
.text$mn:00002988                 pop     ebp
.text$mn:00002989                 retn    4
.text$mn:00002989 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:00002989
.text$mn:00002989 _text$mn        ends
.text$mn:00002989
.text$x:0000298C ; ===========================================================================
.text$x:0000298C
.text$x:0000298C ; Segment type: Pure code
.text$x:0000298C ; Segment permissions: Read/Execute
.text$x:0000298C _text$x         segment para public 'CODE' use32
.text$x:0000298C                 assume cs:_text$x
.text$x:0000298C                 ;org 298Ch
.text$x:0000298C ; COMDAT (pick associative to section at 2938)
.text$x:0000298C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000298C
.text$x:0000298C ; =============== S U B R O U T I N E =======================================
.text$x:0000298C
.text$x:0000298C
.text$x:0000298C __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:0000298C                                         ; DATA XREF: .xdata$x:0000806Co
.text$x:0000298C                 mov     ecx, [ebp-10h]
.text$x:0000298F                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000298F __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:0000298F
.text$x:00002994
.text$x:00002994 ; =============== S U B R O U T I N E =======================================
.text$x:00002994
.text$x:00002994
.text$x:00002994 __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:00002994                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+5o
.text$x:00002994
.text$x:00002994 arg_4           = dword ptr  8
.text$x:00002994
.text$x:00002994                 mov     edx, [esp+arg_4]
.text$x:00002998                 lea     eax, [edx+0Ch]
.text$x:0000299B                 mov     ecx, [edx-8]
.text$x:0000299E                 xor     ecx, eax
.text$x:000029A0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000029A5                 mov     eax, offset __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:000029AA                 jmp     ___CxxFrameHandler3
.text$x:000029AA __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:000029AA
.text$x:000029AA ; ---------------------------------------------------------------------------
.text$x:000029AF                 align 10h
.text$x:000029AF _text$x         ends
.text$x:000029AF
.text$mn:000029B0 ; ===========================================================================
.text$mn:000029B0
.text$mn:000029B0 ; Segment type: Pure code
.text$mn:000029B0 ; Segment permissions: Read/Execute
.text$mn:000029B0 _text$mn        segment para public 'CODE' use32
.text$mn:000029B0                 assume cs:_text$mn
.text$mn:000029B0                 ;org 29B0h
.text$mn:000029B0 ; COMDAT (pick any)
.text$mn:000029B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000029B0
.text$mn:000029B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000029B0
.text$mn:000029B0 ; Attributes: bp-based frame
.text$mn:000029B0
.text$mn:000029B0 ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(int, struct std::_Container_base12 *)
.text$mn:000029B0                 public ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.text$mn:000029B0 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z proc near
.text$mn:000029B0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)+3Fp
.text$mn:000029B0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)+48p
.text$mn:000029B0
.text$mn:000029B0 var_10          = dword ptr -10h
.text$mn:000029B0 var_C           = dword ptr -0Ch
.text$mn:000029B0 var_4           = dword ptr -4
.text$mn:000029B0 arg_0           = dword ptr  8
.text$mn:000029B0 arg_4           = dword ptr  0Ch
.text$mn:000029B0
.text$mn:000029B0                 push    ebp
.text$mn:000029B1                 mov     ebp, esp
.text$mn:000029B3                 push    0FFFFFFFFh
.text$mn:000029B5                 push    offset __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.text$mn:000029BA                 mov     eax, large fs:0
.text$mn:000029C0                 push    eax
.text$mn:000029C1                 push    ecx
.text$mn:000029C2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000029C7                 xor     eax, ebp
.text$mn:000029C9                 push    eax
.text$mn:000029CA                 lea     eax, [ebp+var_C]
.text$mn:000029CD                 mov     large fs:0, eax
.text$mn:000029D3                 mov     [ebp+var_10], ecx
.text$mn:000029D6                 mov     eax, [ebp+arg_4]
.text$mn:000029D9                 push    eax             ; struct std::_Container_base12 *
.text$mn:000029DA                 mov     ecx, [ebp+arg_0]
.text$mn:000029DD                 push    ecx             ; int
.text$mn:000029DE                 mov     ecx, [ebp+var_10]
.text$mn:000029E1                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)
.text$mn:000029E6                 mov     [ebp+var_4], 0
.text$mn:000029ED                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000029F4                 mov     eax, [ebp+var_10]
.text$mn:000029F7                 mov     ecx, [ebp+var_C]
.text$mn:000029FA                 mov     large fs:0, ecx
.text$mn:00002A01                 pop     ecx
.text$mn:00002A02                 mov     esp, ebp
.text$mn:00002A04                 pop     ebp
.text$mn:00002A05                 retn    8
.text$mn:00002A05 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z endp
.text$mn:00002A05
.text$mn:00002A05 _text$mn        ends
.text$mn:00002A05
.text$x:00002A08 ; ===========================================================================
.text$x:00002A08
.text$x:00002A08 ; Segment type: Pure code
.text$x:00002A08 ; Segment permissions: Read/Execute
.text$x:00002A08 _text$x         segment para public 'CODE' use32
.text$x:00002A08                 assume cs:_text$x
.text$x:00002A08                 ;org 2A08h
.text$x:00002A08 ; COMDAT (pick associative to section at 29B0)
.text$x:00002A08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002A08
.text$x:00002A08 ; =============== S U B R O U T I N E =======================================
.text$x:00002A08
.text$x:00002A08
.text$x:00002A08 __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0 proc near
.text$x:00002A08                                         ; DATA XREF: .xdata$x:00007FE8o
.text$x:00002A08                 mov     ecx, [ebp-10h]
.text$x:00002A0B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00002A0B __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0 endp
.text$x:00002A0B
.text$x:00002A10
.text$x:00002A10 ; =============== S U B R O U T I N E =======================================
.text$x:00002A10
.text$x:00002A10
.text$x:00002A10 __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z proc near
.text$x:00002A10                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)+5o
.text$x:00002A10
.text$x:00002A10 arg_4           = dword ptr  8
.text$x:00002A10
.text$x:00002A10                 mov     edx, [esp+arg_4]
.text$x:00002A14                 lea     eax, [edx+0Ch]
.text$x:00002A17                 mov     ecx, [edx-8]
.text$x:00002A1A                 xor     ecx, eax
.text$x:00002A1C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002A21                 mov     eax, offset __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.text$x:00002A26                 jmp     ___CxxFrameHandler3
.text$x:00002A26 __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z endp
.text$x:00002A26
.text$x:00002A26 ; ---------------------------------------------------------------------------
.text$x:00002A2B                 align 4
.text$x:00002A2B _text$x         ends
.text$x:00002A2B
.text$mn:00002A2C ; ===========================================================================
.text$mn:00002A2C
.text$mn:00002A2C ; Segment type: Pure code
.text$mn:00002A2C ; Segment permissions: Read/Execute
.text$mn:00002A2C _text$mn        segment para public 'CODE' use32
.text$mn:00002A2C                 assume cs:_text$mn
.text$mn:00002A2C                 ;org 2A2Ch
.text$mn:00002A2C ; COMDAT (pick any)
.text$mn:00002A2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002A2C
.text$mn:00002A2C ; =============== S U B R O U T I N E =======================================
.text$mn:00002A2C
.text$mn:00002A2C ; Attributes: bp-based frame
.text$mn:00002A2C
.text$mn:00002A2C ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::_String_val<struct std::_Simple_types<char>>(void)
.text$mn:00002A2C                 public ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00002A2C ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:00002A2C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+29p
.text$mn:00002A2C
.text$mn:00002A2C var_10          = dword ptr -10h
.text$mn:00002A2C var_C           = dword ptr -0Ch
.text$mn:00002A2C var_4           = dword ptr -4
.text$mn:00002A2C
.text$mn:00002A2C                 push    ebp
.text$mn:00002A2D                 mov     ebp, esp
.text$mn:00002A2F                 push    0FFFFFFFFh
.text$mn:00002A31                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00002A36                 mov     eax, large fs:0
.text$mn:00002A3C                 push    eax
.text$mn:00002A3D                 push    ecx
.text$mn:00002A3E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002A43                 xor     eax, ebp
.text$mn:00002A45                 push    eax
.text$mn:00002A46                 lea     eax, [ebp+var_C]
.text$mn:00002A49                 mov     large fs:0, eax
.text$mn:00002A4F                 mov     [ebp+var_10], ecx
.text$mn:00002A52                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002A55                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00002A5A                 mov     [ebp+var_4], 0
.text$mn:00002A61                 mov     eax, [ebp+var_10]
.text$mn:00002A64                 mov     dword ptr [eax+14h], 0
.text$mn:00002A6B                 mov     ecx, [ebp+var_10]
.text$mn:00002A6E                 mov     dword ptr [ecx+18h], 0
.text$mn:00002A75                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002A7C                 mov     eax, [ebp+var_10]
.text$mn:00002A7F                 mov     ecx, [ebp+var_C]
.text$mn:00002A82                 mov     large fs:0, ecx
.text$mn:00002A89                 pop     ecx
.text$mn:00002A8A                 mov     esp, ebp
.text$mn:00002A8C                 pop     ebp
.text$mn:00002A8D                 retn
.text$mn:00002A8D ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:00002A8D
.text$mn:00002A8D ; ---------------------------------------------------------------------------
.text$mn:00002A8E                 align 10h
.text$mn:00002A8E _text$mn        ends
.text$mn:00002A8E
.text$x:00002A90 ; ===========================================================================
.text$x:00002A90
.text$x:00002A90 ; Segment type: Pure code
.text$x:00002A90 ; Segment permissions: Read/Execute
.text$x:00002A90 _text$x         segment para public 'CODE' use32
.text$x:00002A90                 assume cs:_text$x
.text$x:00002A90                 ;org 2A90h
.text$x:00002A90 ; COMDAT (pick associative to section at 2A2C)
.text$x:00002A90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002A90
.text$x:00002A90 ; =============== S U B R O U T I N E =======================================
.text$x:00002A90
.text$x:00002A90
.text$x:00002A90 __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:00002A90                                         ; DATA XREF: .xdata$x:0000739Co
.text$x:00002A90                 mov     ecx, [ebp-10h]  ; this
.text$x:00002A93                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00002A93 __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:00002A93
.text$x:00002A98
.text$x:00002A98 ; =============== S U B R O U T I N E =======================================
.text$x:00002A98
.text$x:00002A98
.text$x:00002A98 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:00002A98                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+5o
.text$x:00002A98
.text$x:00002A98 arg_4           = dword ptr  8
.text$x:00002A98
.text$x:00002A98                 mov     edx, [esp+arg_4]
.text$x:00002A9C                 lea     eax, [edx+0Ch]
.text$x:00002A9F                 mov     ecx, [edx-8]
.text$x:00002AA2                 xor     ecx, eax
.text$x:00002AA4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002AA9                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:00002AAE                 jmp     ___CxxFrameHandler3
.text$x:00002AAE __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:00002AAE
.text$x:00002AAE ; ---------------------------------------------------------------------------
.text$x:00002AB3                 align 4
.text$x:00002AB3 _text$x         ends
.text$x:00002AB3
.text$mn:00002AB4 ; ===========================================================================
.text$mn:00002AB4
.text$mn:00002AB4 ; Segment type: Pure code
.text$mn:00002AB4 ; Segment permissions: Read/Execute
.text$mn:00002AB4 _text$mn        segment para public 'CODE' use32
.text$mn:00002AB4                 assume cs:_text$mn
.text$mn:00002AB4                 ;org 2AB4h
.text$mn:00002AB4 ; COMDAT (pick any)
.text$mn:00002AB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002AB4
.text$mn:00002AB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00002AB4
.text$mn:00002AB4 ; Attributes: bp-based frame
.text$mn:00002AB4
.text$mn:00002AB4 ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:00002AB4                 public ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00002AB4 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:00002AB4                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+29p
.text$mn:00002AB4
.text$mn:00002AB4 var_10          = dword ptr -10h
.text$mn:00002AB4 var_C           = dword ptr -0Ch
.text$mn:00002AB4 var_4           = dword ptr -4
.text$mn:00002AB4
.text$mn:00002AB4                 push    ebp
.text$mn:00002AB5                 mov     ebp, esp
.text$mn:00002AB7                 push    0FFFFFFFFh
.text$mn:00002AB9                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00002ABE                 mov     eax, large fs:0
.text$mn:00002AC4                 push    eax
.text$mn:00002AC5                 push    ecx
.text$mn:00002AC6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002ACB                 xor     eax, ebp
.text$mn:00002ACD                 push    eax
.text$mn:00002ACE                 lea     eax, [ebp+var_C]
.text$mn:00002AD1                 mov     large fs:0, eax
.text$mn:00002AD7                 mov     [ebp+var_10], ecx
.text$mn:00002ADA                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002ADD                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00002AE2                 mov     [ebp+var_4], 0
.text$mn:00002AE9                 mov     eax, [ebp+var_10]
.text$mn:00002AEC                 mov     dword ptr [eax+14h], 0
.text$mn:00002AF3                 mov     ecx, [ebp+var_10]
.text$mn:00002AF6                 mov     dword ptr [ecx+18h], 0
.text$mn:00002AFD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002B04                 mov     eax, [ebp+var_10]
.text$mn:00002B07                 mov     ecx, [ebp+var_C]
.text$mn:00002B0A                 mov     large fs:0, ecx
.text$mn:00002B11                 pop     ecx
.text$mn:00002B12                 mov     esp, ebp
.text$mn:00002B14                 pop     ebp
.text$mn:00002B15                 retn
.text$mn:00002B15 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:00002B15
.text$mn:00002B15 ; ---------------------------------------------------------------------------
.text$mn:00002B16                 align 4
.text$mn:00002B16 _text$mn        ends
.text$mn:00002B16
.text$x:00002B18 ; ===========================================================================
.text$x:00002B18
.text$x:00002B18 ; Segment type: Pure code
.text$x:00002B18 ; Segment permissions: Read/Execute
.text$x:00002B18 _text$x         segment para public 'CODE' use32
.text$x:00002B18                 assume cs:_text$x
.text$x:00002B18                 ;org 2B18h
.text$x:00002B18 ; COMDAT (pick associative to section at 2AB4)
.text$x:00002B18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002B18
.text$x:00002B18 ; =============== S U B R O U T I N E =======================================
.text$x:00002B18
.text$x:00002B18
.text$x:00002B18 __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00002B18                                         ; DATA XREF: .xdata$x:000076BCo
.text$x:00002B18                 mov     ecx, [ebp-10h]  ; this
.text$x:00002B1B                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00002B1B __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:00002B1B
.text$x:00002B20
.text$x:00002B20 ; =============== S U B R O U T I N E =======================================
.text$x:00002B20
.text$x:00002B20
.text$x:00002B20 __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:00002B20                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:00002B20
.text$x:00002B20 arg_4           = dword ptr  8
.text$x:00002B20
.text$x:00002B20                 mov     edx, [esp+arg_4]
.text$x:00002B24                 lea     eax, [edx+0Ch]
.text$x:00002B27                 mov     ecx, [edx-8]
.text$x:00002B2A                 xor     ecx, eax
.text$x:00002B2C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002B31                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:00002B36                 jmp     ___CxxFrameHandler3
.text$x:00002B36 __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:00002B36
.text$x:00002B36 ; ---------------------------------------------------------------------------
.text$x:00002B3B                 align 4
.text$x:00002B3B _text$x         ends
.text$x:00002B3B
.text$mn:00002B3C ; ===========================================================================
.text$mn:00002B3C
.text$mn:00002B3C ; Segment type: Pure code
.text$mn:00002B3C ; Segment permissions: Read/Execute
.text$mn:00002B3C _text$mn        segment para public 'CODE' use32
.text$mn:00002B3C                 assume cs:_text$mn
.text$mn:00002B3C                 ;org 2B3Ch
.text$mn:00002B3C ; COMDAT (pick any)
.text$mn:00002B3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002B3C
.text$mn:00002B3C ; =============== S U B R O U T I N E =======================================
.text$mn:00002B3C
.text$mn:00002B3C ; Attributes: bp-based frame
.text$mn:00002B3C
.text$mn:00002B3C ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> const &)
.text$mn:00002B3C                 public ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.text$mn:00002B3C ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z proc near
.text$mn:00002B3C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+34p
.text$mn:00002B3C
.text$mn:00002B3C var_10          = dword ptr -10h
.text$mn:00002B3C var_C           = dword ptr -0Ch
.text$mn:00002B3C var_4           = dword ptr -4
.text$mn:00002B3C
.text$mn:00002B3C                 push    ebp
.text$mn:00002B3D                 mov     ebp, esp
.text$mn:00002B3F                 push    0FFFFFFFFh
.text$mn:00002B41                 push    offset __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.text$mn:00002B46                 mov     eax, large fs:0
.text$mn:00002B4C                 push    eax
.text$mn:00002B4D                 push    ecx
.text$mn:00002B4E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002B53                 xor     eax, ebp
.text$mn:00002B55                 push    eax
.text$mn:00002B56                 lea     eax, [ebp+var_C]
.text$mn:00002B59                 mov     large fs:0, eax
.text$mn:00002B5F                 mov     [ebp+var_10], ecx
.text$mn:00002B62                 mov     ecx, [ebp+var_10]
.text$mn:00002B65                 call    ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00002B6A                 mov     [ebp+var_4], 0
.text$mn:00002B71                 mov     ecx, [ebp+var_10]
.text$mn:00002B74                 call    ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Alloc_proxy(void)
.text$mn:00002B79                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002B80                 mov     eax, [ebp+var_10]
.text$mn:00002B83                 mov     ecx, [ebp+var_C]
.text$mn:00002B86                 mov     large fs:0, ecx
.text$mn:00002B8D                 pop     ecx
.text$mn:00002B8E                 mov     esp, ebp
.text$mn:00002B90                 pop     ebp
.text$mn:00002B91                 retn    4
.text$mn:00002B91 ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z endp
.text$mn:00002B91
.text$mn:00002B91 _text$mn        ends
.text$mn:00002B91
.text$x:00002B94 ; ===========================================================================
.text$x:00002B94
.text$x:00002B94 ; Segment type: Pure code
.text$x:00002B94 ; Segment permissions: Read/Execute
.text$x:00002B94 _text$x         segment para public 'CODE' use32
.text$x:00002B94                 assume cs:_text$x
.text$x:00002B94                 ;org 2B94h
.text$x:00002B94 ; COMDAT (pick associative to section at 2B3C)
.text$x:00002B94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002B94
.text$x:00002B94 ; =============== S U B R O U T I N E =======================================
.text$x:00002B94
.text$x:00002B94
.text$x:00002B94 __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0 proc near
.text$x:00002B94                                         ; DATA XREF: .xdata$x:00007DACo
.text$x:00002B94                 mov     ecx, [ebp-10h]
.text$x:00002B97                 jmp     ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00002B97 __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0 endp
.text$x:00002B97
.text$x:00002B9C
.text$x:00002B9C ; =============== S U B R O U T I N E =======================================
.text$x:00002B9C
.text$x:00002B9C
.text$x:00002B9C __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z proc near
.text$x:00002B9C                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+5o
.text$x:00002B9C
.text$x:00002B9C arg_4           = dword ptr  8
.text$x:00002B9C
.text$x:00002B9C                 mov     edx, [esp+arg_4]
.text$x:00002BA0                 lea     eax, [edx+0Ch]
.text$x:00002BA3                 mov     ecx, [edx-8]
.text$x:00002BA6                 xor     ecx, eax
.text$x:00002BA8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002BAD                 mov     eax, offset __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.text$x:00002BB2                 jmp     ___CxxFrameHandler3
.text$x:00002BB2 __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z endp
.text$x:00002BB2
.text$x:00002BB2 ; ---------------------------------------------------------------------------
.text$x:00002BB7                 align 4
.text$x:00002BB7 _text$x         ends
.text$x:00002BB7
.text$mn:00002BB8 ; ===========================================================================
.text$mn:00002BB8
.text$mn:00002BB8 ; Segment type: Pure code
.text$mn:00002BB8 ; Segment permissions: Read/Execute
.text$mn:00002BB8 _text$mn        segment para public 'CODE' use32
.text$mn:00002BB8                 assume cs:_text$mn
.text$mn:00002BB8                 ;org 2BB8h
.text$mn:00002BB8 ; COMDAT (pick any)
.text$mn:00002BB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002BB8
.text$mn:00002BB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00002BB8
.text$mn:00002BB8 ; Attributes: bp-based frame
.text$mn:00002BB8
.text$mn:00002BB8 ; public: __thiscall std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:00002BB8                 public ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:00002BB8 ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00002BB8                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+29p
.text$mn:00002BB8
.text$mn:00002BB8 var_10          = dword ptr -10h
.text$mn:00002BB8 var_C           = dword ptr -0Ch
.text$mn:00002BB8 var_4           = dword ptr -4
.text$mn:00002BB8
.text$mn:00002BB8                 push    ebp
.text$mn:00002BB9                 mov     ebp, esp
.text$mn:00002BBB                 push    0FFFFFFFFh
.text$mn:00002BBD                 push    offset __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:00002BC2                 mov     eax, large fs:0
.text$mn:00002BC8                 push    eax
.text$mn:00002BC9                 push    ecx
.text$mn:00002BCA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002BCF                 xor     eax, ebp
.text$mn:00002BD1                 push    eax
.text$mn:00002BD2                 lea     eax, [ebp+var_C]
.text$mn:00002BD5                 mov     large fs:0, eax
.text$mn:00002BDB                 mov     [ebp+var_10], ecx
.text$mn:00002BDE                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002BE1                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00002BE6                 mov     [ebp+var_4], 0
.text$mn:00002BED                 mov     eax, [ebp+var_10]
.text$mn:00002BF0                 mov     dword ptr [eax+4], 0
.text$mn:00002BF7                 mov     ecx, [ebp+var_10]
.text$mn:00002BFA                 mov     dword ptr [ecx+8], 0
.text$mn:00002C01                 mov     edx, [ebp+var_10]
.text$mn:00002C04                 mov     dword ptr [edx+0Ch], 0
.text$mn:00002C0B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002C12                 mov     eax, [ebp+var_10]
.text$mn:00002C15                 mov     ecx, [ebp+var_C]
.text$mn:00002C18                 mov     large fs:0, ecx
.text$mn:00002C1F                 pop     ecx
.text$mn:00002C20                 mov     esp, ebp
.text$mn:00002C22                 pop     ebp
.text$mn:00002C23                 retn
.text$mn:00002C23 ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00002C23
.text$mn:00002C23 _text$mn        ends
.text$mn:00002C23
.text$x:00002C24 ; ===========================================================================
.text$x:00002C24
.text$x:00002C24 ; Segment type: Pure code
.text$x:00002C24 ; Segment permissions: Read/Execute
.text$x:00002C24 _text$x         segment para public 'CODE' use32
.text$x:00002C24                 assume cs:_text$x
.text$x:00002C24                 ;org 2C24h
.text$x:00002C24 ; COMDAT (pick associative to section at 2BB8)
.text$x:00002C24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002C24
.text$x:00002C24 ; =============== S U B R O U T I N E =======================================
.text$x:00002C24
.text$x:00002C24
.text$x:00002C24 __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00002C24                                         ; DATA XREF: .xdata$x:00007D54o
.text$x:00002C24                 mov     ecx, [ebp-10h]  ; this
.text$x:00002C27                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00002C27 __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00002C27
.text$x:00002C2C
.text$x:00002C2C ; =============== S U B R O U T I N E =======================================
.text$x:00002C2C
.text$x:00002C2C
.text$x:00002C2C __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$x:00002C2C                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:00002C2C
.text$x:00002C2C arg_4           = dword ptr  8
.text$x:00002C2C
.text$x:00002C2C                 mov     edx, [esp+arg_4]
.text$x:00002C30                 lea     eax, [edx+0Ch]
.text$x:00002C33                 mov     ecx, [edx-8]
.text$x:00002C36                 xor     ecx, eax
.text$x:00002C38                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002C3D                 mov     eax, offset __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$x:00002C42                 jmp     ___CxxFrameHandler3
.text$x:00002C42 __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$x:00002C42
.text$x:00002C42 ; ---------------------------------------------------------------------------
.text$x:00002C47                 align 4
.text$x:00002C47 _text$x         ends
.text$x:00002C47
.text$mn:00002C48 ; ===========================================================================
.text$mn:00002C48
.text$mn:00002C48 ; Segment type: Pure code
.text$mn:00002C48 ; Segment permissions: Read/Execute
.text$mn:00002C48 _text$mn        segment para public 'CODE' use32
.text$mn:00002C48                 assume cs:_text$mn
.text$mn:00002C48                 ;org 2C48h
.text$mn:00002C48 ; COMDAT (pick any)
.text$mn:00002C48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002C48
.text$mn:00002C48 ; =============== S U B R O U T I N E =======================================
.text$mn:00002C48
.text$mn:00002C48 ; Attributes: bp-based frame
.text$mn:00002C48
.text$mn:00002C48 ; public: __thiscall std::_Wrap_alloc<class std::allocator<char>>::_Wrap_alloc<class std::allocator<char>>(void)
.text$mn:00002C48                 public ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
.text$mn:00002C48 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
.text$mn:00002C48                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)+Ap
.text$mn:00002C48
.text$mn:00002C48 var_4           = dword ptr -4
.text$mn:00002C48
.text$mn:00002C48                 push    ebp
.text$mn:00002C49                 mov     ebp, esp
.text$mn:00002C4B                 push    ecx
.text$mn:00002C4C                 mov     [ebp+var_4], ecx
.text$mn:00002C4F                 mov     ecx, [ebp+var_4]
.text$mn:00002C52                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:00002C57                 mov     eax, [ebp+var_4]
.text$mn:00002C5A                 mov     esp, ebp
.text$mn:00002C5C                 pop     ebp
.text$mn:00002C5D                 retn
.text$mn:00002C5D ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ endp
.text$mn:00002C5D
.text$mn:00002C5D ; ---------------------------------------------------------------------------
.text$mn:00002C5E                 align 10h
.text$mn:00002C5E _text$mn        ends
.text$mn:00002C5E
.text$mn:00002C60 ; ===========================================================================
.text$mn:00002C60
.text$mn:00002C60 ; Segment type: Pure code
.text$mn:00002C60 ; Segment permissions: Read/Execute
.text$mn:00002C60 _text$mn        segment para public 'CODE' use32
.text$mn:00002C60                 assume cs:_text$mn
.text$mn:00002C60                 ;org 2C60h
.text$mn:00002C60 ; COMDAT (pick any)
.text$mn:00002C60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002C60
.text$mn:00002C60 ; =============== S U B R O U T I N E =======================================
.text$mn:00002C60
.text$mn:00002C60 ; Attributes: bp-based frame
.text$mn:00002C60
.text$mn:00002C60 ; public: __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>(void)
.text$mn:00002C60                 public ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
.text$mn:00002C60 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00002C60                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Alloc_proxy(void)+Cp
.text$mn:00002C60                                         ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Free_proxy(void)+Cp
.text$mn:00002C60
.text$mn:00002C60 var_4           = dword ptr -4
.text$mn:00002C60
.text$mn:00002C60                 push    ebp
.text$mn:00002C61                 mov     ebp, esp
.text$mn:00002C63                 push    ecx
.text$mn:00002C64                 mov     [ebp+var_4], ecx
.text$mn:00002C67                 mov     ecx, [ebp+var_4]
.text$mn:00002C6A                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00002C6F                 mov     eax, [ebp+var_4]
.text$mn:00002C72                 mov     esp, ebp
.text$mn:00002C74                 pop     ebp
.text$mn:00002C75                 retn
.text$mn:00002C75 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ endp
.text$mn:00002C75
.text$mn:00002C75 ; ---------------------------------------------------------------------------
.text$mn:00002C76                 align 4
.text$mn:00002C76 _text$mn        ends
.text$mn:00002C76
.text$mn:00002C78 ; ===========================================================================
.text$mn:00002C78
.text$mn:00002C78 ; Segment type: Pure code
.text$mn:00002C78 ; Segment permissions: Read/Execute
.text$mn:00002C78 _text$mn        segment para public 'CODE' use32
.text$mn:00002C78                 assume cs:_text$mn
.text$mn:00002C78                 ;org 2C78h
.text$mn:00002C78 ; COMDAT (pick any)
.text$mn:00002C78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002C78
.text$mn:00002C78 ; =============== S U B R O U T I N E =======================================
.text$mn:00002C78
.text$mn:00002C78 ; Attributes: bp-based frame
.text$mn:00002C78
.text$mn:00002C78 ; public: __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:00002C78                 public ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:00002C78 ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00002C78                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)+Ap
.text$mn:00002C78
.text$mn:00002C78 var_4           = dword ptr -4
.text$mn:00002C78
.text$mn:00002C78                 push    ebp
.text$mn:00002C79                 mov     ebp, esp
.text$mn:00002C7B                 push    ecx
.text$mn:00002C7C                 mov     [ebp+var_4], ecx
.text$mn:00002C7F                 mov     ecx, [ebp+var_4]
.text$mn:00002C82                 call    ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void)
.text$mn:00002C87                 mov     eax, [ebp+var_4]
.text$mn:00002C8A                 mov     esp, ebp
.text$mn:00002C8C                 pop     ebp
.text$mn:00002C8D                 retn
.text$mn:00002C8D ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00002C8D
.text$mn:00002C8D ; ---------------------------------------------------------------------------
.text$mn:00002C8E                 align 10h
.text$mn:00002C8E _text$mn        ends
.text$mn:00002C8E
.text$mn:00002C90 ; ===========================================================================
.text$mn:00002C90
.text$mn:00002C90 ; Segment type: Pure code
.text$mn:00002C90 ; Segment permissions: Read/Execute
.text$mn:00002C90 _text$mn        segment para public 'CODE' use32
.text$mn:00002C90                 assume cs:_text$mn
.text$mn:00002C90                 ;org 2C90h
.text$mn:00002C90 ; COMDAT (pick any)
.text$mn:00002C90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002C90
.text$mn:00002C90 ; =============== S U B R O U T I N E =======================================
.text$mn:00002C90
.text$mn:00002C90 ; Attributes: bp-based frame
.text$mn:00002C90
.text$mn:00002C90 ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(class std::allocator<wchar_t> const &)
.text$mn:00002C90                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:00002C90 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:00002C90                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)+1Dp
.text$mn:00002C90
.text$mn:00002C90 var_4           = dword ptr -4
.text$mn:00002C90 arg_0           = dword ptr  8
.text$mn:00002C90
.text$mn:00002C90                 push    ebp
.text$mn:00002C91                 mov     ebp, esp
.text$mn:00002C93                 push    ecx
.text$mn:00002C94                 mov     [ebp+var_4], ecx
.text$mn:00002C97                 mov     eax, [ebp+arg_0]
.text$mn:00002C9A                 push    eax
.text$mn:00002C9B                 mov     ecx, [ebp+var_4]
.text$mn:00002C9E                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:00002CA3                 mov     eax, [ebp+var_4]
.text$mn:00002CA6                 mov     esp, ebp
.text$mn:00002CA8                 pop     ebp
.text$mn:00002CA9                 retn    4
.text$mn:00002CA9 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:00002CA9
.text$mn:00002CA9 _text$mn        ends
.text$mn:00002CA9
.text$mn:00002CAC ; ===========================================================================
.text$mn:00002CAC
.text$mn:00002CAC ; Segment type: Pure code
.text$mn:00002CAC ; Segment permissions: Read/Execute
.text$mn:00002CAC _text$mn        segment para public 'CODE' use32
.text$mn:00002CAC                 assume cs:_text$mn
.text$mn:00002CAC                 ;org 2CACh
.text$mn:00002CAC ; COMDAT (pick any)
.text$mn:00002CAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002CAC
.text$mn:00002CAC ; =============== S U B R O U T I N E =======================================
.text$mn:00002CAC
.text$mn:00002CAC ; Attributes: bp-based frame
.text$mn:00002CAC
.text$mn:00002CAC ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(void)
.text$mn:00002CAC                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ
.text$mn:00002CAC ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ proc near
.text$mn:00002CAC                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)+Ap
.text$mn:00002CAC
.text$mn:00002CAC var_4           = dword ptr -4
.text$mn:00002CAC
.text$mn:00002CAC                 push    ebp
.text$mn:00002CAD                 mov     ebp, esp
.text$mn:00002CAF                 push    ecx
.text$mn:00002CB0                 mov     [ebp+var_4], ecx
.text$mn:00002CB3                 mov     ecx, [ebp+var_4]
.text$mn:00002CB6                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00002CBB                 mov     eax, [ebp+var_4]
.text$mn:00002CBE                 mov     esp, ebp
.text$mn:00002CC0                 pop     ebp
.text$mn:00002CC1                 retn
.text$mn:00002CC1 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ endp
.text$mn:00002CC1
.text$mn:00002CC1 ; ---------------------------------------------------------------------------
.text$mn:00002CC2                 align 4
.text$mn:00002CC2 _text$mn        ends
.text$mn:00002CC2
.text$mn:00002CC4 ; ===========================================================================
.text$mn:00002CC4
.text$mn:00002CC4 ; Segment type: Pure code
.text$mn:00002CC4 ; Segment permissions: Read/Execute
.text$mn:00002CC4 _text$mn        segment para public 'CODE' use32
.text$mn:00002CC4                 assume cs:_text$mn
.text$mn:00002CC4                 ;org 2CC4h
.text$mn:00002CC4 ; COMDAT (pick any)
.text$mn:00002CC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002CC4
.text$mn:00002CC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00002CC4
.text$mn:00002CC4 ; Attributes: bp-based frame
.text$mn:00002CC4
.text$mn:00002CC4 ; public: __thiscall std::allocator<char>::allocator<char>(void)
.text$mn:00002CC4                 public ??0?$allocator@D@std@@QAE@XZ
.text$mn:00002CC4 ??0?$allocator@D@std@@QAE@XZ proc near  ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)+Ap
.text$mn:00002CC4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+2Bp
.text$mn:00002CC4
.text$mn:00002CC4 var_4           = dword ptr -4
.text$mn:00002CC4
.text$mn:00002CC4                 push    ebp
.text$mn:00002CC5                 mov     ebp, esp
.text$mn:00002CC7                 push    ecx
.text$mn:00002CC8                 mov     [ebp+var_4], ecx
.text$mn:00002CCB                 mov     eax, [ebp+var_4]
.text$mn:00002CCE                 mov     esp, ebp
.text$mn:00002CD0                 pop     ebp
.text$mn:00002CD1                 retn
.text$mn:00002CD1 ??0?$allocator@D@std@@QAE@XZ endp
.text$mn:00002CD1
.text$mn:00002CD1 ; ---------------------------------------------------------------------------
.text$mn:00002CD2                 align 4
.text$mn:00002CD2 _text$mn        ends
.text$mn:00002CD2
.text$mn:00002CD4 ; ===========================================================================
.text$mn:00002CD4
.text$mn:00002CD4 ; Segment type: Pure code
.text$mn:00002CD4 ; Segment permissions: Read/Execute
.text$mn:00002CD4 _text$mn        segment para public 'CODE' use32
.text$mn:00002CD4                 assume cs:_text$mn
.text$mn:00002CD4                 ;org 2CD4h
.text$mn:00002CD4 ; COMDAT (pick any)
.text$mn:00002CD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002CD4
.text$mn:00002CD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00002CD4
.text$mn:00002CD4 ; Attributes: bp-based frame
.text$mn:00002CD4
.text$mn:00002CD4 ; public: __thiscall std::allocator<struct std::_Container_proxy>::allocator<struct std::_Container_proxy>(void)
.text$mn:00002CD4                 public ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
.text$mn:00002CD4 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc near
.text$mn:00002CD4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)+Ap
.text$mn:00002CD4                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+Cp ...
.text$mn:00002CD4
.text$mn:00002CD4 var_4           = dword ptr -4
.text$mn:00002CD4
.text$mn:00002CD4                 push    ebp
.text$mn:00002CD5                 mov     ebp, esp
.text$mn:00002CD7                 push    ecx
.text$mn:00002CD8                 mov     [ebp+var_4], ecx
.text$mn:00002CDB                 mov     eax, [ebp+var_4]
.text$mn:00002CDE                 mov     esp, ebp
.text$mn:00002CE0                 pop     ebp
.text$mn:00002CE1                 retn
.text$mn:00002CE1 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ endp
.text$mn:00002CE1
.text$mn:00002CE1 ; ---------------------------------------------------------------------------
.text$mn:00002CE2                 align 4
.text$mn:00002CE2 _text$mn        ends
.text$mn:00002CE2
.text$mn:00002CE4 ; ===========================================================================
.text$mn:00002CE4
.text$mn:00002CE4 ; Segment type: Pure code
.text$mn:00002CE4 ; Segment permissions: Read/Execute
.text$mn:00002CE4 _text$mn        segment para public 'CODE' use32
.text$mn:00002CE4                 assume cs:_text$mn
.text$mn:00002CE4                 ;org 2CE4h
.text$mn:00002CE4 ; COMDAT (pick any)
.text$mn:00002CE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002CE4
.text$mn:00002CE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00002CE4
.text$mn:00002CE4 ; Attributes: bp-based frame
.text$mn:00002CE4
.text$mn:00002CE4 ; public: __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(void)
.text$mn:00002CE4                 public ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
.text$mn:00002CE4 ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ proc near
.text$mn:00002CE4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+Ap
.text$mn:00002CE4                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+2Bp
.text$mn:00002CE4
.text$mn:00002CE4 var_4           = dword ptr -4
.text$mn:00002CE4
.text$mn:00002CE4                 push    ebp
.text$mn:00002CE5                 mov     ebp, esp
.text$mn:00002CE7                 push    ecx
.text$mn:00002CE8                 mov     [ebp+var_4], ecx
.text$mn:00002CEB                 mov     eax, [ebp+var_4]
.text$mn:00002CEE                 mov     esp, ebp
.text$mn:00002CF0                 pop     ebp
.text$mn:00002CF1                 retn
.text$mn:00002CF1 ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ endp
.text$mn:00002CF1
.text$mn:00002CF1 ; ---------------------------------------------------------------------------
.text$mn:00002CF2                 align 4
.text$mn:00002CF2 _text$mn        ends
.text$mn:00002CF2
.text$mn:00002CF4 ; ===========================================================================
.text$mn:00002CF4
.text$mn:00002CF4 ; Segment type: Pure code
.text$mn:00002CF4 ; Segment permissions: Read/Execute
.text$mn:00002CF4 _text$mn        segment para public 'CODE' use32
.text$mn:00002CF4                 assume cs:_text$mn
.text$mn:00002CF4                 ;org 2CF4h
.text$mn:00002CF4 ; COMDAT (pick any)
.text$mn:00002CF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002CF4
.text$mn:00002CF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00002CF4
.text$mn:00002CF4 ; Attributes: bp-based frame
.text$mn:00002CF4
.text$mn:00002CF4 ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(class std::allocator<wchar_t> const &)
.text$mn:00002CF4                 public ??0?$allocator@_W@std@@QAE@ABV01@@Z
.text$mn:00002CF4 ??0?$allocator@_W@std@@QAE@ABV01@@Z proc near
.text$mn:00002CF4                                         ; CODE XREF: std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+Bp
.text$mn:00002CF4                                         ; std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+18p ...
.text$mn:00002CF4
.text$mn:00002CF4 var_4           = dword ptr -4
.text$mn:00002CF4
.text$mn:00002CF4                 push    ebp
.text$mn:00002CF5                 mov     ebp, esp
.text$mn:00002CF7                 push    ecx
.text$mn:00002CF8                 mov     [ebp+var_4], ecx
.text$mn:00002CFB                 mov     eax, [ebp+var_4]
.text$mn:00002CFE                 mov     esp, ebp
.text$mn:00002D00                 pop     ebp
.text$mn:00002D01                 retn    4
.text$mn:00002D01 ??0?$allocator@_W@std@@QAE@ABV01@@Z endp
.text$mn:00002D01
.text$mn:00002D01 _text$mn        ends
.text$mn:00002D01
.text$mn:00002D04 ; ===========================================================================
.text$mn:00002D04
.text$mn:00002D04 ; Segment type: Pure code
.text$mn:00002D04 ; Segment permissions: Read/Execute
.text$mn:00002D04 _text$mn        segment para public 'CODE' use32
.text$mn:00002D04                 assume cs:_text$mn
.text$mn:00002D04                 ;org 2D04h
.text$mn:00002D04 ; COMDAT (pick any)
.text$mn:00002D04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002D04
.text$mn:00002D04 ; =============== S U B R O U T I N E =======================================
.text$mn:00002D04
.text$mn:00002D04 ; Attributes: bp-based frame
.text$mn:00002D04
.text$mn:00002D04 ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00002D04                 public ??0?$allocator@_W@std@@QAE@XZ
.text$mn:00002D04 ??0?$allocator@_W@std@@QAE@XZ proc near ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)+Ap
.text$mn:00002D04                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+2Bp ...
.text$mn:00002D04
.text$mn:00002D04 var_4           = dword ptr -4
.text$mn:00002D04
.text$mn:00002D04                 push    ebp
.text$mn:00002D05                 mov     ebp, esp
.text$mn:00002D07                 push    ecx
.text$mn:00002D08                 mov     [ebp+var_4], ecx
.text$mn:00002D0B                 mov     eax, [ebp+var_4]
.text$mn:00002D0E                 mov     esp, ebp
.text$mn:00002D10                 pop     ebp
.text$mn:00002D11                 retn
.text$mn:00002D11 ??0?$allocator@_W@std@@QAE@XZ endp
.text$mn:00002D11
.text$mn:00002D11 ; ---------------------------------------------------------------------------
.text$mn:00002D12                 align 4
.text$mn:00002D12 _text$mn        ends
.text$mn:00002D12
.text$mn:00002D14 ; ===========================================================================
.text$mn:00002D14
.text$mn:00002D14 ; Segment type: Pure code
.text$mn:00002D14 ; Segment permissions: Read/Execute
.text$mn:00002D14 _text$mn        segment para public 'CODE' use32
.text$mn:00002D14                 assume cs:_text$mn
.text$mn:00002D14                 ;org 2D14h
.text$mn:00002D14 ; COMDAT (pick any)
.text$mn:00002D14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002D14
.text$mn:00002D14 ; =============== S U B R O U T I N E =======================================
.text$mn:00002D14
.text$mn:00002D14 ; Attributes: bp-based frame
.text$mn:00002D14
.text$mn:00002D14 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char *Str)
.text$mn:00002D14                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:00002D14 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$mn:00002D14                                         ; CODE XREF: std::_Generic_error_category::message(int)+5Ap
.text$mn:00002D14                                         ; std::_Iostream_error_category::message(int)+3Dp ...
.text$mn:00002D14
.text$mn:00002D14 var_14          = dword ptr -14h
.text$mn:00002D14 var_D           = byte ptr -0Dh
.text$mn:00002D14 var_C           = dword ptr -0Ch
.text$mn:00002D14 var_4           = dword ptr -4
.text$mn:00002D14 Str             = dword ptr  8
.text$mn:00002D14
.text$mn:00002D14                 push    ebp
.text$mn:00002D15                 mov     ebp, esp
.text$mn:00002D17                 push    0FFFFFFFFh
.text$mn:00002D19                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:00002D1E                 mov     eax, large fs:0
.text$mn:00002D24                 push    eax
.text$mn:00002D25                 sub     esp, 8
.text$mn:00002D28                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002D2D                 xor     eax, ebp
.text$mn:00002D2F                 push    eax
.text$mn:00002D30                 lea     eax, [ebp+var_C]
.text$mn:00002D33                 mov     large fs:0, eax
.text$mn:00002D39                 mov     [ebp+var_14], ecx
.text$mn:00002D3C                 lea     ecx, [ebp+var_D]
.text$mn:00002D3F                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:00002D44                 push    eax
.text$mn:00002D45                 mov     ecx, [ebp+var_14]
.text$mn:00002D48                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:00002D4D                 mov     [ebp+var_4], 0
.text$mn:00002D54                 push    0               ; Size
.text$mn:00002D56                 push    0               ; char
.text$mn:00002D58                 mov     ecx, [ebp+var_14]
.text$mn:00002D5B                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00002D60                 mov     eax, [ebp+Str]
.text$mn:00002D63                 push    eax             ; Str
.text$mn:00002D64                 mov     ecx, [ebp+var_14]
.text$mn:00002D67                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)
.text$mn:00002D6C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002D73                 mov     eax, [ebp+var_14]
.text$mn:00002D76                 mov     ecx, [ebp+var_C]
.text$mn:00002D79                 mov     large fs:0, ecx
.text$mn:00002D80                 pop     ecx
.text$mn:00002D81                 mov     esp, ebp
.text$mn:00002D83                 pop     ebp
.text$mn:00002D84                 retn    4
.text$mn:00002D84 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$mn:00002D84
.text$mn:00002D84 ; ---------------------------------------------------------------------------
.text$mn:00002D87                 align 4
.text$mn:00002D87 _text$mn        ends
.text$mn:00002D87
.text$x:00002D88 ; ===========================================================================
.text$x:00002D88
.text$x:00002D88 ; Segment type: Pure code
.text$x:00002D88 ; Segment permissions: Read/Execute
.text$x:00002D88 _text$x         segment para public 'CODE' use32
.text$x:00002D88                 assume cs:_text$x
.text$x:00002D88                 ;org 2D88h
.text$x:00002D88 ; COMDAT (pick associative to section at 2D14)
.text$x:00002D88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002D88
.text$x:00002D88 ; =============== S U B R O U T I N E =======================================
.text$x:00002D88
.text$x:00002D88
.text$x:00002D88 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
.text$x:00002D88                                         ; DATA XREF: .xdata$x:0000744Co
.text$x:00002D88                 mov     ecx, [ebp-14h]
.text$x:00002D8B                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:00002D8B __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 endp
.text$x:00002D8B
.text$x:00002D90
.text$x:00002D90 ; =============== S U B R O U T I N E =======================================
.text$x:00002D90
.text$x:00002D90
.text$x:00002D90 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$x:00002D90                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+5o
.text$x:00002D90
.text$x:00002D90 arg_4           = dword ptr  8
.text$x:00002D90
.text$x:00002D90                 mov     edx, [esp+arg_4]
.text$x:00002D94                 lea     eax, [edx+0Ch]
.text$x:00002D97                 mov     ecx, [edx-0Ch]
.text$x:00002D9A                 xor     ecx, eax
.text$x:00002D9C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002DA1                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$x:00002DA6                 jmp     ___CxxFrameHandler3
.text$x:00002DA6 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$x:00002DA6
.text$x:00002DA6 ; ---------------------------------------------------------------------------
.text$x:00002DAB                 align 4
.text$x:00002DAB _text$x         ends
.text$x:00002DAB
.text$mn:00002DAC ; ===========================================================================
.text$mn:00002DAC
.text$mn:00002DAC ; Segment type: Pure code
.text$mn:00002DAC ; Segment permissions: Read/Execute
.text$mn:00002DAC _text$mn        segment para public 'CODE' use32
.text$mn:00002DAC                 assume cs:_text$mn
.text$mn:00002DAC                 ;org 2DACh
.text$mn:00002DAC ; COMDAT (pick any)
.text$mn:00002DAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002DAC
.text$mn:00002DAC ; =============== S U B R O U T I N E =======================================
.text$mn:00002DAC
.text$mn:00002DAC ; Attributes: bp-based frame
.text$mn:00002DAC
.text$mn:00002DAC ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:00002DAC                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.text$mn:00002DAC ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z proc near
.text$mn:00002DAC                                         ; CODE XREF: changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+56p
.text$mn:00002DAC                                         ; changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+144p ...
.text$mn:00002DAC
.text$mn:00002DAC var_14          = dword ptr -14h
.text$mn:00002DAC var_D           = byte ptr -0Dh
.text$mn:00002DAC var_C           = dword ptr -0Ch
.text$mn:00002DAC var_4           = dword ptr -4
.text$mn:00002DAC arg_0           = dword ptr  8
.text$mn:00002DAC
.text$mn:00002DAC                 push    ebp
.text$mn:00002DAD                 mov     ebp, esp
.text$mn:00002DAF                 push    0FFFFFFFFh
.text$mn:00002DB1                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.text$mn:00002DB6                 mov     eax, large fs:0
.text$mn:00002DBC                 push    eax
.text$mn:00002DBD                 sub     esp, 8
.text$mn:00002DC0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002DC5                 xor     eax, ebp
.text$mn:00002DC7                 push    eax
.text$mn:00002DC8                 lea     eax, [ebp+var_C]
.text$mn:00002DCB                 mov     large fs:0, eax
.text$mn:00002DD1                 mov     [ebp+var_14], ecx
.text$mn:00002DD4                 lea     eax, [ebp+var_D]
.text$mn:00002DD7                 push    eax
.text$mn:00002DD8                 mov     ecx, [ebp+arg_0]
.text$mn:00002DDB                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00002DE0                 push    eax
.text$mn:00002DE1                 mov     ecx, [ebp+var_14]
.text$mn:00002DE4                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00002DE9                 mov     [ebp+var_4], 0
.text$mn:00002DF0                 push    0
.text$mn:00002DF2                 push    0
.text$mn:00002DF4                 mov     ecx, [ebp+var_14]
.text$mn:00002DF7                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00002DFC                 mov     ecx, [ebp+arg_0]
.text$mn:00002DFF                 push    ecx
.text$mn:00002E00                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00002E05                 add     esp, 4
.text$mn:00002E08                 push    eax
.text$mn:00002E09                 mov     ecx, [ebp+var_14]
.text$mn:00002E0C                 call    ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00002E11                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002E18                 mov     eax, [ebp+var_14]
.text$mn:00002E1B                 mov     ecx, [ebp+var_C]
.text$mn:00002E1E                 mov     large fs:0, ecx
.text$mn:00002E25                 pop     ecx
.text$mn:00002E26                 mov     esp, ebp
.text$mn:00002E28                 pop     ebp
.text$mn:00002E29                 retn    4
.text$mn:00002E29 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z endp
.text$mn:00002E29
.text$mn:00002E29 _text$mn        ends
.text$mn:00002E29
.text$x:00002E2C ; ===========================================================================
.text$x:00002E2C
.text$x:00002E2C ; Segment type: Pure code
.text$x:00002E2C ; Segment permissions: Read/Execute
.text$x:00002E2C _text$x         segment para public 'CODE' use32
.text$x:00002E2C                 assume cs:_text$x
.text$x:00002E2C                 ;org 2E2Ch
.text$x:00002E2C ; COMDAT (pick associative to section at 2DAC)
.text$x:00002E2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002E2C
.text$x:00002E2C ; =============== S U B R O U T I N E =======================================
.text$x:00002E2C
.text$x:00002E2C
.text$x:00002E2C __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0 proc near
.text$x:00002E2C                                         ; DATA XREF: .xdata$x:0000781Co
.text$x:00002E2C                 mov     ecx, [ebp-14h]
.text$x:00002E2F                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00002E2F __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0 endp
.text$x:00002E2F
.text$x:00002E34
.text$x:00002E34 ; =============== S U B R O U T I N E =======================================
.text$x:00002E34
.text$x:00002E34
.text$x:00002E34 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z proc near
.text$x:00002E34                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5o
.text$x:00002E34
.text$x:00002E34 arg_4           = dword ptr  8
.text$x:00002E34
.text$x:00002E34                 mov     edx, [esp+arg_4]
.text$x:00002E38                 lea     eax, [edx+0Ch]
.text$x:00002E3B                 mov     ecx, [edx-0Ch]
.text$x:00002E3E                 xor     ecx, eax
.text$x:00002E40                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002E45                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.text$x:00002E4A                 jmp     ___CxxFrameHandler3
.text$x:00002E4A __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z endp
.text$x:00002E4A
.text$x:00002E4A ; ---------------------------------------------------------------------------
.text$x:00002E4F                 align 10h
.text$x:00002E4F _text$x         ends
.text$x:00002E4F
.text$mn:00002E50 ; ===========================================================================
.text$mn:00002E50
.text$mn:00002E50 ; Segment type: Pure code
.text$mn:00002E50 ; Segment permissions: Read/Execute
.text$mn:00002E50 _text$mn        segment para public 'CODE' use32
.text$mn:00002E50                 assume cs:_text$mn
.text$mn:00002E50                 ;org 2E50h
.text$mn:00002E50 ; COMDAT (pick any)
.text$mn:00002E50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002E50
.text$mn:00002E50 ; =============== S U B R O U T I N E =======================================
.text$mn:00002E50
.text$mn:00002E50 ; Attributes: bp-based frame
.text$mn:00002E50
.text$mn:00002E50 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00002E50                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$mn:00002E50 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z proc near
.text$mn:00002E50                                         ; CODE XREF: changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+8Bp
.text$mn:00002E50                                         ; fileDlgProc(HWND__ *,uint,uint,long)+118p
.text$mn:00002E50
.text$mn:00002E50 var_14          = dword ptr -14h
.text$mn:00002E50 var_E           = byte ptr -0Eh
.text$mn:00002E50 var_D           = byte ptr -0Dh
.text$mn:00002E50 var_C           = dword ptr -0Ch
.text$mn:00002E50 var_4           = dword ptr -4
.text$mn:00002E50 arg_0           = dword ptr  8
.text$mn:00002E50
.text$mn:00002E50                 push    ebp
.text$mn:00002E51                 mov     ebp, esp
.text$mn:00002E53                 push    0FFFFFFFFh
.text$mn:00002E55                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$mn:00002E5A                 mov     eax, large fs:0
.text$mn:00002E60                 push    eax
.text$mn:00002E61                 sub     esp, 8
.text$mn:00002E64                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002E69                 xor     eax, ebp
.text$mn:00002E6B                 push    eax
.text$mn:00002E6C                 lea     eax, [ebp+var_C]
.text$mn:00002E6F                 mov     large fs:0, eax
.text$mn:00002E75                 mov     [ebp+var_14], ecx
.text$mn:00002E78                 lea     eax, [ebp+var_D]
.text$mn:00002E7B                 push    eax
.text$mn:00002E7C                 lea     ecx, [ebp+var_E]
.text$mn:00002E7F                 push    ecx
.text$mn:00002E80                 mov     ecx, [ebp+arg_0]
.text$mn:00002E83                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00002E88                 mov     ecx, eax
.text$mn:00002E8A                 call    ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)
.text$mn:00002E8F                 push    eax
.text$mn:00002E90                 mov     ecx, [ebp+var_14]
.text$mn:00002E93                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00002E98                 mov     [ebp+var_4], 0
.text$mn:00002E9F                 push    0
.text$mn:00002EA1                 push    0
.text$mn:00002EA3                 mov     ecx, [ebp+var_14]
.text$mn:00002EA6                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00002EAB                 mov     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00002EB1                 push    edx
.text$mn:00002EB2                 push    0
.text$mn:00002EB4                 mov     eax, [ebp+arg_0]
.text$mn:00002EB7                 push    eax
.text$mn:00002EB8                 mov     ecx, [ebp+var_14]
.text$mn:00002EBB                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00002EC0                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002EC7                 mov     eax, [ebp+var_14]
.text$mn:00002ECA                 mov     ecx, [ebp+var_C]
.text$mn:00002ECD                 mov     large fs:0, ecx
.text$mn:00002ED4                 pop     ecx
.text$mn:00002ED5                 mov     esp, ebp
.text$mn:00002ED7                 pop     ebp
.text$mn:00002ED8                 retn    4
.text$mn:00002ED8 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z endp
.text$mn:00002ED8
.text$mn:00002ED8 ; ---------------------------------------------------------------------------
.text$mn:00002EDB                 align 4
.text$mn:00002EDB _text$mn        ends
.text$mn:00002EDB
.text$x:00002EDC ; ===========================================================================
.text$x:00002EDC
.text$x:00002EDC ; Segment type: Pure code
.text$x:00002EDC ; Segment permissions: Read/Execute
.text$x:00002EDC _text$x         segment para public 'CODE' use32
.text$x:00002EDC                 assume cs:_text$x
.text$x:00002EDC                 ;org 2EDCh
.text$x:00002EDC ; COMDAT (pick associative to section at 2E50)
.text$x:00002EDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002EDC
.text$x:00002EDC ; =============== S U B R O U T I N E =======================================
.text$x:00002EDC
.text$x:00002EDC
.text$x:00002EDC __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00002EDC                                         ; DATA XREF: .xdata$x:0000776Co
.text$x:00002EDC                 mov     ecx, [ebp-14h]
.text$x:00002EDF                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00002EDF __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 endp
.text$x:00002EDF
.text$x:00002EE4
.text$x:00002EE4 ; =============== S U B R O U T I N E =======================================
.text$x:00002EE4
.text$x:00002EE4
.text$x:00002EE4 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z proc near
.text$x:00002EE4                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5o
.text$x:00002EE4
.text$x:00002EE4 arg_4           = dword ptr  8
.text$x:00002EE4
.text$x:00002EE4                 mov     edx, [esp+arg_4]
.text$x:00002EE8                 lea     eax, [edx+0Ch]
.text$x:00002EEB                 mov     ecx, [edx-0Ch]
.text$x:00002EEE                 xor     ecx, eax
.text$x:00002EF0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002EF5                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$x:00002EFA                 jmp     ___CxxFrameHandler3
.text$x:00002EFA __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z endp
.text$x:00002EFA
.text$x:00002EFA ; ---------------------------------------------------------------------------
.text$x:00002EFF                 align 10h
.text$x:00002EFF _text$x         ends
.text$x:00002EFF
.text$mn:00002F00 ; ===========================================================================
.text$mn:00002F00
.text$mn:00002F00 ; Segment type: Pure code
.text$mn:00002F00 ; Segment permissions: Read/Execute
.text$mn:00002F00 _text$mn        segment para public 'CODE' use32
.text$mn:00002F00                 assume cs:_text$mn
.text$mn:00002F00                 ;org 2F00h
.text$mn:00002F00 ; COMDAT (pick any)
.text$mn:00002F00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002F00
.text$mn:00002F00 ; =============== S U B R O U T I N E =======================================
.text$mn:00002F00
.text$mn:00002F00 ; Attributes: bp-based frame
.text$mn:00002F00
.text$mn:00002F00 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int, class std::allocator<wchar_t> const &)
.text$mn:00002F00                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z
.text$mn:00002F00 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z proc near
.text$mn:00002F00                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::substr(uint,uint)+4Bp
.text$mn:00002F00
.text$mn:00002F00 var_10          = dword ptr -10h
.text$mn:00002F00 var_C           = dword ptr -0Ch
.text$mn:00002F00 var_4           = dword ptr -4
.text$mn:00002F00 arg_0           = dword ptr  8
.text$mn:00002F00 arg_4           = dword ptr  0Ch
.text$mn:00002F00 arg_8           = dword ptr  10h
.text$mn:00002F00 arg_C           = dword ptr  14h
.text$mn:00002F00
.text$mn:00002F00                 push    ebp
.text$mn:00002F01                 mov     ebp, esp
.text$mn:00002F03                 push    0FFFFFFFFh
.text$mn:00002F05                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z
.text$mn:00002F0A                 mov     eax, large fs:0
.text$mn:00002F10                 push    eax
.text$mn:00002F11                 push    ecx
.text$mn:00002F12                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002F17                 xor     eax, ebp
.text$mn:00002F19                 push    eax
.text$mn:00002F1A                 lea     eax, [ebp+var_C]
.text$mn:00002F1D                 mov     large fs:0, eax
.text$mn:00002F23                 mov     [ebp+var_10], ecx
.text$mn:00002F26                 mov     eax, [ebp+arg_C]
.text$mn:00002F29                 push    eax
.text$mn:00002F2A                 mov     ecx, [ebp+var_10]
.text$mn:00002F2D                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00002F32                 mov     [ebp+var_4], 0
.text$mn:00002F39                 push    0
.text$mn:00002F3B                 push    0
.text$mn:00002F3D                 mov     ecx, [ebp+var_10]
.text$mn:00002F40                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00002F45                 mov     ecx, [ebp+arg_8]
.text$mn:00002F48                 push    ecx
.text$mn:00002F49                 mov     edx, [ebp+arg_4]
.text$mn:00002F4C                 push    edx
.text$mn:00002F4D                 mov     eax, [ebp+arg_0]
.text$mn:00002F50                 push    eax
.text$mn:00002F51                 mov     ecx, [ebp+var_10]
.text$mn:00002F54                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00002F59                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002F60                 mov     eax, [ebp+var_10]
.text$mn:00002F63                 mov     ecx, [ebp+var_C]
.text$mn:00002F66                 mov     large fs:0, ecx
.text$mn:00002F6D                 pop     ecx
.text$mn:00002F6E                 mov     esp, ebp
.text$mn:00002F70                 pop     ebp
.text$mn:00002F71                 retn    10h
.text$mn:00002F71 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z endp
.text$mn:00002F71
.text$mn:00002F71 _text$mn        ends
.text$mn:00002F71
.text$x:00002F74 ; ===========================================================================
.text$x:00002F74
.text$x:00002F74 ; Segment type: Pure code
.text$x:00002F74 ; Segment permissions: Read/Execute
.text$x:00002F74 _text$x         segment para public 'CODE' use32
.text$x:00002F74                 assume cs:_text$x
.text$x:00002F74                 ;org 2F74h
.text$x:00002F74 ; COMDAT (pick associative to section at 2F00)
.text$x:00002F74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002F74
.text$x:00002F74 ; =============== S U B R O U T I N E =======================================
.text$x:00002F74
.text$x:00002F74
.text$x:00002F74 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z$0 proc near
.text$x:00002F74                                         ; DATA XREF: .xdata$x:000077C4o
.text$x:00002F74                 mov     ecx, [ebp-10h]
.text$x:00002F77                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00002F77 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z$0 endp
.text$x:00002F77
.text$x:00002F7C
.text$x:00002F7C ; =============== S U B R O U T I N E =======================================
.text$x:00002F7C
.text$x:00002F7C
.text$x:00002F7C __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z proc near
.text$x:00002F7C                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint,std::allocator<wchar_t> const &)+5o
.text$x:00002F7C
.text$x:00002F7C arg_4           = dword ptr  8
.text$x:00002F7C
.text$x:00002F7C                 mov     edx, [esp+arg_4]
.text$x:00002F80                 lea     eax, [edx+0Ch]
.text$x:00002F83                 mov     ecx, [edx-8]
.text$x:00002F86                 xor     ecx, eax
.text$x:00002F88                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002F8D                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z
.text$x:00002F92                 jmp     ___CxxFrameHandler3
.text$x:00002F92 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z endp
.text$x:00002F92
.text$x:00002F92 ; ---------------------------------------------------------------------------
.text$x:00002F97                 align 4
.text$x:00002F97 _text$x         ends
.text$x:00002F97
.text$mn:00002F98 ; ===========================================================================
.text$mn:00002F98
.text$mn:00002F98 ; Segment type: Pure code
.text$mn:00002F98 ; Segment permissions: Read/Execute
.text$mn:00002F98 _text$mn        segment para public 'CODE' use32
.text$mn:00002F98                 assume cs:_text$mn
.text$mn:00002F98                 ;org 2F98h
.text$mn:00002F98 ; COMDAT (pick any)
.text$mn:00002F98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002F98
.text$mn:00002F98 ; =============== S U B R O U T I N E =======================================
.text$mn:00002F98
.text$mn:00002F98 ; Attributes: bp-based frame
.text$mn:00002F98
.text$mn:00002F98 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t *Str)
.text$mn:00002F98                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:00002F98 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$mn:00002F98                                         ; CODE XREF: changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+B3p
.text$mn:00002F98                                         ; FileDialog::setExtsFilter(wchar_t const *,wchar_t const *)+33p ...
.text$mn:00002F98
.text$mn:00002F98 var_14          = dword ptr -14h
.text$mn:00002F98 var_D           = byte ptr -0Dh
.text$mn:00002F98 var_C           = dword ptr -0Ch
.text$mn:00002F98 var_4           = dword ptr -4
.text$mn:00002F98 Str             = dword ptr  8
.text$mn:00002F98
.text$mn:00002F98                 push    ebp
.text$mn:00002F99                 mov     ebp, esp
.text$mn:00002F9B                 push    0FFFFFFFFh
.text$mn:00002F9D                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:00002FA2                 mov     eax, large fs:0
.text$mn:00002FA8                 push    eax
.text$mn:00002FA9                 sub     esp, 8
.text$mn:00002FAC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002FB1                 xor     eax, ebp
.text$mn:00002FB3                 push    eax
.text$mn:00002FB4                 lea     eax, [ebp+var_C]
.text$mn:00002FB7                 mov     large fs:0, eax
.text$mn:00002FBD                 mov     [ebp+var_14], ecx
.text$mn:00002FC0                 lea     ecx, [ebp+var_D]
.text$mn:00002FC3                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00002FC8                 push    eax
.text$mn:00002FC9                 mov     ecx, [ebp+var_14]
.text$mn:00002FCC                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00002FD1                 mov     [ebp+var_4], 0
.text$mn:00002FD8                 push    0
.text$mn:00002FDA                 push    0
.text$mn:00002FDC                 mov     ecx, [ebp+var_14]
.text$mn:00002FDF                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00002FE4                 mov     eax, [ebp+Str]
.text$mn:00002FE7                 push    eax             ; Str
.text$mn:00002FE8                 mov     ecx, [ebp+var_14]
.text$mn:00002FEB                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:00002FF0                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002FF7                 mov     eax, [ebp+var_14]
.text$mn:00002FFA                 mov     ecx, [ebp+var_C]
.text$mn:00002FFD                 mov     large fs:0, ecx
.text$mn:00003004                 pop     ecx
.text$mn:00003005                 mov     esp, ebp
.text$mn:00003007                 pop     ebp
.text$mn:00003008                 retn    4
.text$mn:00003008 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$mn:00003008
.text$mn:00003008 ; ---------------------------------------------------------------------------
.text$mn:0000300B                 align 4
.text$mn:0000300B _text$mn        ends
.text$mn:0000300B
.text$x:0000300C ; ===========================================================================
.text$x:0000300C
.text$x:0000300C ; Segment type: Pure code
.text$x:0000300C ; Segment permissions: Read/Execute
.text$x:0000300C _text$x         segment para public 'CODE' use32
.text$x:0000300C                 assume cs:_text$x
.text$x:0000300C                 ;org 300Ch
.text$x:0000300C ; COMDAT (pick associative to section at 2F98)
.text$x:0000300C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000300C
.text$x:0000300C ; =============== S U B R O U T I N E =======================================
.text$x:0000300C
.text$x:0000300C
.text$x:0000300C __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 proc near
.text$x:0000300C                                         ; DATA XREF: .xdata$x:000077F0o
.text$x:0000300C                 mov     ecx, [ebp-14h]
.text$x:0000300F                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:0000300F __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 endp
.text$x:0000300F
.text$x:00003014
.text$x:00003014 ; =============== S U B R O U T I N E =======================================
.text$x:00003014
.text$x:00003014
.text$x:00003014 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$x:00003014                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+5o
.text$x:00003014
.text$x:00003014 arg_4           = dword ptr  8
.text$x:00003014
.text$x:00003014                 mov     edx, [esp+arg_4]
.text$x:00003018                 lea     eax, [edx+0Ch]
.text$x:0000301B                 mov     ecx, [edx-0Ch]
.text$x:0000301E                 xor     ecx, eax
.text$x:00003020                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003025                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$x:0000302A                 jmp     ___CxxFrameHandler3
.text$x:0000302A __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$x:0000302A
.text$x:0000302A ; ---------------------------------------------------------------------------
.text$x:0000302F                 align 10h
.text$x:0000302F _text$x         ends
.text$x:0000302F
.text$mn:00003030 ; ===========================================================================
.text$mn:00003030
.text$mn:00003030 ; Segment type: Pure code
.text$mn:00003030 ; Segment permissions: Read/Execute
.text$mn:00003030 _text$mn        segment para public 'CODE' use32
.text$mn:00003030                 assume cs:_text$mn
.text$mn:00003030                 ;org 3030h
.text$mn:00003030 ; COMDAT (pick any)
.text$mn:00003030                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003030
.text$mn:00003030 ; =============== S U B R O U T I N E =======================================
.text$mn:00003030
.text$mn:00003030 ; Attributes: bp-based frame
.text$mn:00003030
.text$mn:00003030 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:00003030                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00003030 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:00003030                                         ; CODE XREF: FileDialog::setExtFilter(wchar_t const *,wchar_t const *,...)+2Bp
.text$mn:00003030
.text$mn:00003030 var_14          = dword ptr -14h
.text$mn:00003030 var_D           = byte ptr -0Dh
.text$mn:00003030 var_C           = dword ptr -0Ch
.text$mn:00003030 var_4           = dword ptr -4
.text$mn:00003030
.text$mn:00003030                 push    ebp
.text$mn:00003031                 mov     ebp, esp
.text$mn:00003033                 push    0FFFFFFFFh
.text$mn:00003035                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:0000303A                 mov     eax, large fs:0
.text$mn:00003040                 push    eax
.text$mn:00003041                 sub     esp, 8
.text$mn:00003044                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003049                 xor     eax, ebp
.text$mn:0000304B                 push    eax
.text$mn:0000304C                 lea     eax, [ebp+var_C]
.text$mn:0000304F                 mov     large fs:0, eax
.text$mn:00003055                 mov     [ebp+var_14], ecx
.text$mn:00003058                 lea     ecx, [ebp+var_D]
.text$mn:0000305B                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00003060                 push    eax
.text$mn:00003061                 mov     ecx, [ebp+var_14]
.text$mn:00003064                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00003069                 mov     [ebp+var_4], 0
.text$mn:00003070                 push    0
.text$mn:00003072                 push    0
.text$mn:00003074                 mov     ecx, [ebp+var_14]
.text$mn:00003077                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000307C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003083                 mov     eax, [ebp+var_14]
.text$mn:00003086                 mov     ecx, [ebp+var_C]
.text$mn:00003089                 mov     large fs:0, ecx
.text$mn:00003090                 pop     ecx
.text$mn:00003091                 mov     esp, ebp
.text$mn:00003093                 pop     ebp
.text$mn:00003094                 retn
.text$mn:00003094 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:00003094
.text$mn:00003094 ; ---------------------------------------------------------------------------
.text$mn:00003095                 align 4
.text$mn:00003095 _text$mn        ends
.text$mn:00003095
.text$x:00003098 ; ===========================================================================
.text$x:00003098
.text$x:00003098 ; Segment type: Pure code
.text$x:00003098 ; Segment permissions: Read/Execute
.text$x:00003098 _text$x         segment para public 'CODE' use32
.text$x:00003098                 assume cs:_text$x
.text$x:00003098                 ;org 3098h
.text$x:00003098 ; COMDAT (pick associative to section at 3030)
.text$x:00003098                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003098
.text$x:00003098 ; =============== S U B R O U T I N E =======================================
.text$x:00003098
.text$x:00003098
.text$x:00003098 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:00003098                                         ; DATA XREF: .xdata$x:00007798o
.text$x:00003098                 mov     ecx, [ebp-14h]
.text$x:0000309B                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:0000309B __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:0000309B
.text$x:000030A0
.text$x:000030A0 ; =============== S U B R O U T I N E =======================================
.text$x:000030A0
.text$x:000030A0
.text$x:000030A0 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:000030A0                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:000030A0
.text$x:000030A0 arg_4           = dword ptr  8
.text$x:000030A0
.text$x:000030A0                 mov     edx, [esp+arg_4]
.text$x:000030A4                 lea     eax, [edx+0Ch]
.text$x:000030A7                 mov     ecx, [edx-0Ch]
.text$x:000030AA                 xor     ecx, eax
.text$x:000030AC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000030B1                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:000030B6                 jmp     ___CxxFrameHandler3
.text$x:000030B6 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:000030B6
.text$x:000030B6 ; ---------------------------------------------------------------------------
.text$x:000030BB                 align 4
.text$x:000030BB _text$x         ends
.text$x:000030BB
.text$mn:000030BC ; ===========================================================================
.text$mn:000030BC
.text$mn:000030BC ; Segment type: Pure code
.text$mn:000030BC ; Segment permissions: Read/Execute
.text$mn:000030BC _text$mn        segment para public 'CODE' use32
.text$mn:000030BC                 assume cs:_text$mn
.text$mn:000030BC                 ;org 30BCh
.text$mn:000030BC ; COMDAT (pick any)
.text$mn:000030BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000030BC
.text$mn:000030BC ; =============== S U B R O U T I N E =======================================
.text$mn:000030BC
.text$mn:000030BC ; Attributes: bp-based frame
.text$mn:000030BC
.text$mn:000030BC ; public: __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:000030BC                 public ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$mn:000030BC ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ proc near
.text$mn:000030BC                                         ; CODE XREF: FileDialog::FileDialog(HWND__ *,HINSTANCE__ *)+49p
.text$mn:000030BC
.text$mn:000030BC var_14          = dword ptr -14h
.text$mn:000030BC var_D           = byte ptr -0Dh
.text$mn:000030BC var_C           = dword ptr -0Ch
.text$mn:000030BC var_4           = dword ptr -4
.text$mn:000030BC
.text$mn:000030BC                 push    ebp
.text$mn:000030BD                 mov     ebp, esp
.text$mn:000030BF                 push    0FFFFFFFFh
.text$mn:000030C1                 push    offset __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$mn:000030C6                 mov     eax, large fs:0
.text$mn:000030CC                 push    eax
.text$mn:000030CD                 sub     esp, 8
.text$mn:000030D0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000030D5                 xor     eax, ebp
.text$mn:000030D7                 push    eax
.text$mn:000030D8                 lea     eax, [ebp+var_C]
.text$mn:000030DB                 mov     large fs:0, eax
.text$mn:000030E1                 mov     [ebp+var_14], ecx
.text$mn:000030E4                 lea     ecx, [ebp+var_D]
.text$mn:000030E7                 call    ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void)
.text$mn:000030EC                 push    eax
.text$mn:000030ED                 mov     ecx, [ebp+var_14]
.text$mn:000030F0                 call    ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)
.text$mn:000030F5                 mov     [ebp+var_4], 0
.text$mn:000030FC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003103                 mov     eax, [ebp+var_14]
.text$mn:00003106                 mov     ecx, [ebp+var_C]
.text$mn:00003109                 mov     large fs:0, ecx
.text$mn:00003110                 pop     ecx
.text$mn:00003111                 mov     esp, ebp
.text$mn:00003113                 pop     ebp
.text$mn:00003114                 retn
.text$mn:00003114 ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ endp
.text$mn:00003114
.text$mn:00003114 ; ---------------------------------------------------------------------------
.text$mn:00003115                 align 4
.text$mn:00003115 _text$mn        ends
.text$mn:00003115
.text$x:00003118 ; ===========================================================================
.text$x:00003118
.text$x:00003118 ; Segment type: Pure code
.text$x:00003118 ; Segment permissions: Read/Execute
.text$x:00003118 _text$x         segment para public 'CODE' use32
.text$x:00003118                 assume cs:_text$x
.text$x:00003118                 ;org 3118h
.text$x:00003118 ; COMDAT (pick associative to section at 30BC)
.text$x:00003118                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003118
.text$x:00003118 ; =============== S U B R O U T I N E =======================================
.text$x:00003118
.text$x:00003118
.text$x:00003118 __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 proc near
.text$x:00003118                                         ; DATA XREF: .xdata$x:00007E04o
.text$x:00003118                 mov     ecx, [ebp-14h]
.text$x:0000311B                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000311B __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 endp
.text$x:0000311B
.text$x:00003120
.text$x:00003120 ; =============== S U B R O U T I N E =======================================
.text$x:00003120
.text$x:00003120
.text$x:00003120 __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ proc near
.text$x:00003120                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:00003120
.text$x:00003120 arg_4           = dword ptr  8
.text$x:00003120
.text$x:00003120                 mov     edx, [esp+arg_4]
.text$x:00003124                 lea     eax, [edx+0Ch]
.text$x:00003127                 mov     ecx, [edx-0Ch]
.text$x:0000312A                 xor     ecx, eax
.text$x:0000312C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003131                 mov     eax, offset __ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$x:00003136                 jmp     ___CxxFrameHandler3
.text$x:00003136 __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ endp
.text$x:00003136
.text$x:00003136 ; ---------------------------------------------------------------------------
.text$x:0000313B                 align 4
.text$x:0000313B _text$x         ends
.text$x:0000313B
.text$mn:0000313C ; ===========================================================================
.text$mn:0000313C
.text$mn:0000313C ; Segment type: Pure code
.text$mn:0000313C ; Segment permissions: Read/Execute
.text$mn:0000313C _text$mn        segment para public 'CODE' use32
.text$mn:0000313C                 assume cs:_text$mn
.text$mn:0000313C                 ;org 313Ch
.text$mn:0000313C ; COMDAT (pick any)
.text$mn:0000313C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000313C
.text$mn:0000313C ; =============== S U B R O U T I N E =======================================
.text$mn:0000313C
.text$mn:0000313C ; Attributes: bp-based frame
.text$mn:0000313C
.text$mn:0000313C ; _DWORD __thiscall std::_Container_base12::_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:0000313C                 public ??0_Container_base12@std@@QAE@XZ
.text$mn:0000313C ??0_Container_base12@std@@QAE@XZ proc near
.text$mn:0000313C                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+29p
.text$mn:0000313C                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+29p ...
.text$mn:0000313C
.text$mn:0000313C var_4           = dword ptr -4
.text$mn:0000313C
.text$mn:0000313C                 push    ebp
.text$mn:0000313D                 mov     ebp, esp
.text$mn:0000313F                 push    ecx
.text$mn:00003140                 mov     [ebp+var_4], ecx
.text$mn:00003143                 mov     eax, [ebp+var_4]
.text$mn:00003146                 mov     dword ptr [eax], 0
.text$mn:0000314C                 mov     eax, [ebp+var_4]
.text$mn:0000314F                 mov     esp, ebp
.text$mn:00003151                 pop     ebp
.text$mn:00003152                 retn
.text$mn:00003152 ??0_Container_base12@std@@QAE@XZ endp
.text$mn:00003152
.text$mn:00003152 ; ---------------------------------------------------------------------------
.text$mn:00003153                 align 4
.text$mn:00003153 _text$mn        ends
.text$mn:00003153
.text$mn:00003154 ; ===========================================================================
.text$mn:00003154
.text$mn:00003154 ; Segment type: Pure code
.text$mn:00003154 ; Segment permissions: Read/Execute
.text$mn:00003154 _text$mn        segment para public 'CODE' use32
.text$mn:00003154                 assume cs:_text$mn
.text$mn:00003154                 ;org 3154h
.text$mn:00003154 ; COMDAT (pick any)
.text$mn:00003154                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003154
.text$mn:00003154 ; =============== S U B R O U T I N E =======================================
.text$mn:00003154
.text$mn:00003154 ; Attributes: bp-based frame
.text$mn:00003154
.text$mn:00003154 ; _DWORD __thiscall std::_Container_proxy::_Container_proxy(std::_Container_proxy *__hidden this)
.text$mn:00003154                 public ??0_Container_proxy@std@@QAE@XZ
.text$mn:00003154 ??0_Container_proxy@std@@QAE@XZ proc near
.text$mn:00003154                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+23p
.text$mn:00003154                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+23p ...
.text$mn:00003154
.text$mn:00003154 var_4           = dword ptr -4
.text$mn:00003154
.text$mn:00003154                 push    ebp
.text$mn:00003155                 mov     ebp, esp
.text$mn:00003157                 push    ecx
.text$mn:00003158                 mov     [ebp+var_4], ecx
.text$mn:0000315B                 mov     eax, [ebp+var_4]
.text$mn:0000315E                 mov     dword ptr [eax], 0
.text$mn:00003164                 mov     ecx, [ebp+var_4]
.text$mn:00003167                 mov     dword ptr [ecx+4], 0
.text$mn:0000316E                 mov     eax, [ebp+var_4]
.text$mn:00003171                 mov     esp, ebp
.text$mn:00003173                 pop     ebp
.text$mn:00003174                 retn
.text$mn:00003174 ??0_Container_proxy@std@@QAE@XZ endp
.text$mn:00003174
.text$mn:00003174 ; ---------------------------------------------------------------------------
.text$mn:00003175                 align 4
.text$mn:00003175 _text$mn        ends
.text$mn:00003175
.text$mn:00003178 ; ===========================================================================
.text$mn:00003178
.text$mn:00003178 ; Segment type: Pure code
.text$mn:00003178 ; Segment permissions: Read/Execute
.text$mn:00003178 _text$mn        segment para public 'CODE' use32
.text$mn:00003178                 assume cs:_text$mn
.text$mn:00003178                 ;org 3178h
.text$mn:00003178 ; COMDAT (pick any)
.text$mn:00003178                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003178
.text$mn:00003178 ; =============== S U B R O U T I N E =======================================
.text$mn:00003178
.text$mn:00003178 ; Attributes: bp-based frame
.text$mn:00003178
.text$mn:00003178 ; _DWORD __thiscall std::_Generic_error_category::_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:00003178                 public ??0_Generic_error_category@std@@QAE@XZ
.text$mn:00003178 ??0_Generic_error_category@std@@QAE@XZ proc near
.text$mn:00003178                                         ; CODE XREF: std::_Iostream_error_category::_Iostream_error_category(void)+29p
.text$mn:00003178                                         ; std::_System_error_category::_System_error_category(void)+29p ...
.text$mn:00003178
.text$mn:00003178 var_10          = dword ptr -10h
.text$mn:00003178 var_C           = dword ptr -0Ch
.text$mn:00003178 var_4           = dword ptr -4
.text$mn:00003178
.text$mn:00003178                 push    ebp
.text$mn:00003179                 mov     ebp, esp
.text$mn:0000317B                 push    0FFFFFFFFh
.text$mn:0000317D                 push    offset __ehhandler$??0_Generic_error_category@std@@QAE@XZ
.text$mn:00003182                 mov     eax, large fs:0
.text$mn:00003188                 push    eax
.text$mn:00003189                 push    ecx
.text$mn:0000318A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000318F                 xor     eax, ebp
.text$mn:00003191                 push    eax
.text$mn:00003192                 lea     eax, [ebp+var_C]
.text$mn:00003195                 mov     large fs:0, eax
.text$mn:0000319B                 mov     [ebp+var_10], ecx
.text$mn:0000319E                 mov     ecx, [ebp+var_10] ; this
.text$mn:000031A1                 call    ??0error_category@std@@QAE@XZ ; std::error_category::error_category(void)
.text$mn:000031A6                 mov     [ebp+var_4], 0
.text$mn:000031AD                 mov     eax, [ebp+var_10]
.text$mn:000031B0                 mov     dword ptr [eax], offset ??_7_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`vftable'
.text$mn:000031B6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000031BD                 mov     eax, [ebp+var_10]
.text$mn:000031C0                 mov     ecx, [ebp+var_C]
.text$mn:000031C3                 mov     large fs:0, ecx
.text$mn:000031CA                 pop     ecx
.text$mn:000031CB                 mov     esp, ebp
.text$mn:000031CD                 pop     ebp
.text$mn:000031CE                 retn
.text$mn:000031CE ??0_Generic_error_category@std@@QAE@XZ endp
.text$mn:000031CE
.text$mn:000031CE ; ---------------------------------------------------------------------------
.text$mn:000031CF                 align 10h
.text$mn:000031CF _text$mn        ends
.text$mn:000031CF
.text$x:000031D0 ; ===========================================================================
.text$x:000031D0
.text$x:000031D0 ; Segment type: Pure code
.text$x:000031D0 ; Segment permissions: Read/Execute
.text$x:000031D0 _text$x         segment para public 'CODE' use32
.text$x:000031D0                 assume cs:_text$x
.text$x:000031D0                 ;org 31D0h
.text$x:000031D0 ; COMDAT (pick associative to section at 3178)
.text$x:000031D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000031D0
.text$x:000031D0 ; =============== S U B R O U T I N E =======================================
.text$x:000031D0
.text$x:000031D0
.text$x:000031D0 __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 proc near
.text$x:000031D0                                         ; DATA XREF: .xdata$x:00007530o
.text$x:000031D0                 mov     ecx, [ebp-10h]  ; this
.text$x:000031D3                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:000031D3 __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 endp
.text$x:000031D3
.text$x:000031D8
.text$x:000031D8 ; =============== S U B R O U T I N E =======================================
.text$x:000031D8
.text$x:000031D8
.text$x:000031D8 __ehhandler$??0_Generic_error_category@std@@QAE@XZ proc near
.text$x:000031D8                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+5o
.text$x:000031D8
.text$x:000031D8 arg_4           = dword ptr  8
.text$x:000031D8
.text$x:000031D8                 mov     edx, [esp+arg_4]
.text$x:000031DC                 lea     eax, [edx+0Ch]
.text$x:000031DF                 mov     ecx, [edx-8]
.text$x:000031E2                 xor     ecx, eax
.text$x:000031E4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000031E9                 mov     eax, offset __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ
.text$x:000031EE                 jmp     ___CxxFrameHandler3
.text$x:000031EE __ehhandler$??0_Generic_error_category@std@@QAE@XZ endp
.text$x:000031EE
.text$x:000031EE ; ---------------------------------------------------------------------------
.text$x:000031F3                 align 4
.text$x:000031F3 _text$x         ends
.text$x:000031F3
.text$mn:000031F4 ; ===========================================================================
.text$mn:000031F4
.text$mn:000031F4 ; Segment type: Pure code
.text$mn:000031F4 ; Segment permissions: Read/Execute
.text$mn:000031F4 _text$mn        segment para public 'CODE' use32
.text$mn:000031F4                 assume cs:_text$mn
.text$mn:000031F4                 ;org 31F4h
.text$mn:000031F4 ; COMDAT (pick any)
.text$mn:000031F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000031F4
.text$mn:000031F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000031F4
.text$mn:000031F4 ; Attributes: bp-based frame
.text$mn:000031F4
.text$mn:000031F4 ; _DWORD __thiscall std::_Iostream_error_category::_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:000031F4                 public ??0_Iostream_error_category@std@@QAE@XZ
.text$mn:000031F4 ??0_Iostream_error_category@std@@QAE@XZ proc near
.text$mn:000031F4                                         ; CODE XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:000031F4
.text$mn:000031F4 var_10          = dword ptr -10h
.text$mn:000031F4 var_C           = dword ptr -0Ch
.text$mn:000031F4 var_4           = dword ptr -4
.text$mn:000031F4
.text$mn:000031F4                 push    ebp
.text$mn:000031F5                 mov     ebp, esp
.text$mn:000031F7                 push    0FFFFFFFFh
.text$mn:000031F9                 push    offset __ehhandler$??0_Iostream_error_category@std@@QAE@XZ
.text$mn:000031FE                 mov     eax, large fs:0
.text$mn:00003204                 push    eax
.text$mn:00003205                 push    ecx
.text$mn:00003206                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000320B                 xor     eax, ebp
.text$mn:0000320D                 push    eax
.text$mn:0000320E                 lea     eax, [ebp+var_C]
.text$mn:00003211                 mov     large fs:0, eax
.text$mn:00003217                 mov     [ebp+var_10], ecx
.text$mn:0000321A                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000321D                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:00003222                 mov     [ebp+var_4], 0
.text$mn:00003229                 mov     eax, [ebp+var_10]
.text$mn:0000322C                 mov     dword ptr [eax], offset ??_7_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`vftable'
.text$mn:00003232                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003239                 mov     eax, [ebp+var_10]
.text$mn:0000323C                 mov     ecx, [ebp+var_C]
.text$mn:0000323F                 mov     large fs:0, ecx
.text$mn:00003246                 pop     ecx
.text$mn:00003247                 mov     esp, ebp
.text$mn:00003249                 pop     ebp
.text$mn:0000324A                 retn
.text$mn:0000324A ??0_Iostream_error_category@std@@QAE@XZ endp
.text$mn:0000324A
.text$mn:0000324A ; ---------------------------------------------------------------------------
.text$mn:0000324B                 align 4
.text$mn:0000324B _text$mn        ends
.text$mn:0000324B
.text$x:0000324C ; ===========================================================================
.text$x:0000324C
.text$x:0000324C ; Segment type: Pure code
.text$x:0000324C ; Segment permissions: Read/Execute
.text$x:0000324C _text$x         segment para public 'CODE' use32
.text$x:0000324C                 assume cs:_text$x
.text$x:0000324C                 ;org 324Ch
.text$x:0000324C ; COMDAT (pick associative to section at 31F4)
.text$x:0000324C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000324C
.text$x:0000324C ; =============== S U B R O U T I N E =======================================
.text$x:0000324C
.text$x:0000324C
.text$x:0000324C __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 proc near
.text$x:0000324C                                         ; DATA XREF: .xdata$x:000075B4o
.text$x:0000324C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000324F                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:0000324F __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 endp
.text$x:0000324F
.text$x:00003254
.text$x:00003254 ; =============== S U B R O U T I N E =======================================
.text$x:00003254
.text$x:00003254
.text$x:00003254 __ehhandler$??0_Iostream_error_category@std@@QAE@XZ proc near
.text$x:00003254                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+5o
.text$x:00003254
.text$x:00003254 arg_4           = dword ptr  8
.text$x:00003254
.text$x:00003254                 mov     edx, [esp+arg_4]
.text$x:00003258                 lea     eax, [edx+0Ch]
.text$x:0000325B                 mov     ecx, [edx-8]
.text$x:0000325E                 xor     ecx, eax
.text$x:00003260                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003265                 mov     eax, offset __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ
.text$x:0000326A                 jmp     ___CxxFrameHandler3
.text$x:0000326A __ehhandler$??0_Iostream_error_category@std@@QAE@XZ endp
.text$x:0000326A
.text$x:0000326A ; ---------------------------------------------------------------------------
.text$x:0000326F                 align 10h
.text$x:0000326F _text$x         ends
.text$x:0000326F
.text$mn:00003270 ; ===========================================================================
.text$mn:00003270
.text$mn:00003270 ; Segment type: Pure code
.text$mn:00003270 ; Segment permissions: Read/Execute
.text$mn:00003270 _text$mn        segment para public 'CODE' use32
.text$mn:00003270                 assume cs:_text$mn
.text$mn:00003270                 ;org 3270h
.text$mn:00003270 ; COMDAT (pick any)
.text$mn:00003270                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003270
.text$mn:00003270 ; =============== S U B R O U T I N E =======================================
.text$mn:00003270
.text$mn:00003270 ; Attributes: bp-based frame
.text$mn:00003270
.text$mn:00003270 ; _DWORD __thiscall std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 *this, const struct std::_Iterator_base12 *)
.text$mn:00003270                 public ??0_Iterator_base12@std@@QAE@ABU01@@Z
.text$mn:00003270 ??0_Iterator_base12@std@@QAE@ABU01@@Z proc near
.text$mn:00003270                                         ; CODE XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12> const &)+2Dp
.text$mn:00003270
.text$mn:00003270 var_4           = dword ptr -4
.text$mn:00003270 arg_0           = dword ptr  8
.text$mn:00003270
.text$mn:00003270                 push    ebp
.text$mn:00003271                 mov     ebp, esp
.text$mn:00003273                 push    ecx
.text$mn:00003274                 mov     [ebp+var_4], ecx
.text$mn:00003277                 mov     eax, [ebp+var_4]
.text$mn:0000327A                 mov     dword ptr [eax], 0
.text$mn:00003280                 mov     ecx, [ebp+var_4]
.text$mn:00003283                 mov     dword ptr [ecx+4], 0
.text$mn:0000328A                 mov     edx, [ebp+arg_0]
.text$mn:0000328D                 push    edx
.text$mn:0000328E                 mov     ecx, [ebp+var_4]
.text$mn:00003291                 call    ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)
.text$mn:00003296                 mov     eax, [ebp+var_4]
.text$mn:00003299                 mov     esp, ebp
.text$mn:0000329B                 pop     ebp
.text$mn:0000329C                 retn    4
.text$mn:0000329C ??0_Iterator_base12@std@@QAE@ABU01@@Z endp
.text$mn:0000329C
.text$mn:0000329C ; ---------------------------------------------------------------------------
.text$mn:0000329F                 align 10h
.text$mn:0000329F _text$mn        ends
.text$mn:0000329F
.text$mn:000032A0 ; ===========================================================================
.text$mn:000032A0
.text$mn:000032A0 ; Segment type: Pure code
.text$mn:000032A0 ; Segment permissions: Read/Execute
.text$mn:000032A0 _text$mn        segment para public 'CODE' use32
.text$mn:000032A0                 assume cs:_text$mn
.text$mn:000032A0                 ;org 32A0h
.text$mn:000032A0 ; COMDAT (pick any)
.text$mn:000032A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000032A0
.text$mn:000032A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000032A0
.text$mn:000032A0 ; Attributes: bp-based frame
.text$mn:000032A0
.text$mn:000032A0 ; _DWORD __thiscall std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 *__hidden this)
.text$mn:000032A0                 public ??0_Iterator_base12@std@@QAE@XZ
.text$mn:000032A0 ??0_Iterator_base12@std@@QAE@XZ proc near
.text$mn:000032A0                                         ; CODE XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)+29p
.text$mn:000032A0
.text$mn:000032A0 var_4           = dword ptr -4
.text$mn:000032A0
.text$mn:000032A0                 push    ebp
.text$mn:000032A1                 mov     ebp, esp
.text$mn:000032A3                 push    ecx
.text$mn:000032A4                 mov     [ebp+var_4], ecx
.text$mn:000032A7                 mov     eax, [ebp+var_4]
.text$mn:000032AA                 mov     dword ptr [eax], 0
.text$mn:000032B0                 mov     ecx, [ebp+var_4]
.text$mn:000032B3                 mov     dword ptr [ecx+4], 0
.text$mn:000032BA                 mov     eax, [ebp+var_4]
.text$mn:000032BD                 mov     esp, ebp
.text$mn:000032BF                 pop     ebp
.text$mn:000032C0                 retn
.text$mn:000032C0 ??0_Iterator_base12@std@@QAE@XZ endp
.text$mn:000032C0
.text$mn:000032C0 ; ---------------------------------------------------------------------------
.text$mn:000032C1                 align 4
.text$mn:000032C1 _text$mn        ends
.text$mn:000032C1
.text$mn:000032C4 ; ===========================================================================
.text$mn:000032C4
.text$mn:000032C4 ; Segment type: Pure code
.text$mn:000032C4 ; Segment permissions: Read/Execute
.text$mn:000032C4 _text$mn        segment para public 'CODE' use32
.text$mn:000032C4                 assume cs:_text$mn
.text$mn:000032C4                 ;org 32C4h
.text$mn:000032C4 ; COMDAT (pick any)
.text$mn:000032C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000032C4
.text$mn:000032C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000032C4
.text$mn:000032C4 ; Attributes: bp-based frame
.text$mn:000032C4
.text$mn:000032C4 ; _DWORD __thiscall std::_System_error_category::_System_error_category(std::_System_error_category *__hidden this)
.text$mn:000032C4                 public ??0_System_error_category@std@@QAE@XZ
.text$mn:000032C4 ??0_System_error_category@std@@QAE@XZ proc near
.text$mn:000032C4                                         ; CODE XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:000032C4
.text$mn:000032C4 var_10          = dword ptr -10h
.text$mn:000032C4 var_C           = dword ptr -0Ch
.text$mn:000032C4 var_4           = dword ptr -4
.text$mn:000032C4
.text$mn:000032C4                 push    ebp
.text$mn:000032C5                 mov     ebp, esp
.text$mn:000032C7                 push    0FFFFFFFFh
.text$mn:000032C9                 push    offset __ehhandler$??0_System_error_category@std@@QAE@XZ
.text$mn:000032CE                 mov     eax, large fs:0
.text$mn:000032D4                 push    eax
.text$mn:000032D5                 push    ecx
.text$mn:000032D6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000032DB                 xor     eax, ebp
.text$mn:000032DD                 push    eax
.text$mn:000032DE                 lea     eax, [ebp+var_C]
.text$mn:000032E1                 mov     large fs:0, eax
.text$mn:000032E7                 mov     [ebp+var_10], ecx
.text$mn:000032EA                 mov     ecx, [ebp+var_10] ; this
.text$mn:000032ED                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:000032F2                 mov     [ebp+var_4], 0
.text$mn:000032F9                 mov     eax, [ebp+var_10]
.text$mn:000032FC                 mov     dword ptr [eax], offset ??_7_System_error_category@std@@6B@ ; const std::_System_error_category::`vftable'
.text$mn:00003302                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003309                 mov     eax, [ebp+var_10]
.text$mn:0000330C                 mov     ecx, [ebp+var_C]
.text$mn:0000330F                 mov     large fs:0, ecx
.text$mn:00003316                 pop     ecx
.text$mn:00003317                 mov     esp, ebp
.text$mn:00003319                 pop     ebp
.text$mn:0000331A                 retn
.text$mn:0000331A ??0_System_error_category@std@@QAE@XZ endp
.text$mn:0000331A
.text$mn:0000331A ; ---------------------------------------------------------------------------
.text$mn:0000331B                 align 4
.text$mn:0000331B _text$mn        ends
.text$mn:0000331B
.text$x:0000331C ; ===========================================================================
.text$x:0000331C
.text$x:0000331C ; Segment type: Pure code
.text$x:0000331C ; Segment permissions: Read/Execute
.text$x:0000331C _text$x         segment para public 'CODE' use32
.text$x:0000331C                 assume cs:_text$x
.text$x:0000331C                 ;org 331Ch
.text$x:0000331C ; COMDAT (pick associative to section at 32C4)
.text$x:0000331C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000331C
.text$x:0000331C ; =============== S U B R O U T I N E =======================================
.text$x:0000331C
.text$x:0000331C
.text$x:0000331C __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 proc near
.text$x:0000331C                                         ; DATA XREF: .xdata$x:00007638o
.text$x:0000331C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000331F                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:0000331F __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 endp
.text$x:0000331F
.text$x:00003324
.text$x:00003324 ; =============== S U B R O U T I N E =======================================
.text$x:00003324
.text$x:00003324
.text$x:00003324 __ehhandler$??0_System_error_category@std@@QAE@XZ proc near
.text$x:00003324                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+5o
.text$x:00003324
.text$x:00003324 arg_4           = dword ptr  8
.text$x:00003324
.text$x:00003324                 mov     edx, [esp+arg_4]
.text$x:00003328                 lea     eax, [edx+0Ch]
.text$x:0000332B                 mov     ecx, [edx-8]
.text$x:0000332E                 xor     ecx, eax
.text$x:00003330                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003335                 mov     eax, offset __ehfuncinfo$??0_System_error_category@std@@QAE@XZ
.text$x:0000333A                 jmp     ___CxxFrameHandler3
.text$x:0000333A __ehhandler$??0_System_error_category@std@@QAE@XZ endp
.text$x:0000333A
.text$x:0000333A ; ---------------------------------------------------------------------------
.text$x:0000333F                 align 10h
.text$x:0000333F _text$x         ends
.text$x:0000333F
.text$mn:00003340 ; ===========================================================================
.text$mn:00003340
.text$mn:00003340 ; Segment type: Pure code
.text$mn:00003340 ; Segment permissions: Read/Execute
.text$mn:00003340 _text$mn        segment para public 'CODE' use32
.text$mn:00003340                 assume cs:_text$mn
.text$mn:00003340                 ;org 3340h
.text$mn:00003340 ; COMDAT (pick any)
.text$mn:00003340                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003340
.text$mn:00003340 ; =============== S U B R O U T I N E =======================================
.text$mn:00003340
.text$mn:00003340 ; Attributes: bp-based frame
.text$mn:00003340
.text$mn:00003340 ; _DWORD __thiscall std::error_category::error_category(std::error_category *__hidden this)
.text$mn:00003340                 public ??0error_category@std@@QAE@XZ
.text$mn:00003340 ??0error_category@std@@QAE@XZ proc near ; CODE XREF: std::_Generic_error_category::_Generic_error_category(void)+29p
.text$mn:00003340
.text$mn:00003340 var_4           = dword ptr -4
.text$mn:00003340
.text$mn:00003340                 push    ebp
.text$mn:00003341                 mov     ebp, esp
.text$mn:00003343                 push    ecx
.text$mn:00003344                 mov     [ebp+var_4], ecx
.text$mn:00003347                 mov     eax, [ebp+var_4]
.text$mn:0000334A                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:00003350                 mov     eax, [ebp+var_4]
.text$mn:00003353                 mov     esp, ebp
.text$mn:00003355                 pop     ebp
.text$mn:00003356                 retn
.text$mn:00003356 ??0error_category@std@@QAE@XZ endp
.text$mn:00003356
.text$mn:00003356 ; ---------------------------------------------------------------------------
.text$mn:00003357                 align 4
.text$mn:00003357 _text$mn        ends
.text$mn:00003357
.text$mn:00003358 ; ===========================================================================
.text$mn:00003358
.text$mn:00003358 ; Segment type: Pure code
.text$mn:00003358 ; Segment permissions: Read/Execute
.text$mn:00003358 _text$mn        segment para public 'CODE' use32
.text$mn:00003358                 assume cs:_text$mn
.text$mn:00003358                 ;org 3358h
.text$mn:00003358 ; COMDAT (pick any)
.text$mn:00003358                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003358
.text$mn:00003358 ; =============== S U B R O U T I N E =======================================
.text$mn:00003358
.text$mn:00003358 ; Attributes: bp-based frame
.text$mn:00003358
.text$mn:00003358 ; _DWORD __thiscall std::error_condition::error_condition(std::error_condition *this, int, const struct std::error_category *)
.text$mn:00003358                 public ??0error_condition@std@@QAE@HABVerror_category@1@@Z
.text$mn:00003358 ??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
.text$mn:00003358                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+24p
.text$mn:00003358                                         ; std::_System_error_category::default_error_condition(int)+3Dp ...
.text$mn:00003358
.text$mn:00003358 var_4           = dword ptr -4
.text$mn:00003358 arg_0           = dword ptr  8
.text$mn:00003358 arg_4           = dword ptr  0Ch
.text$mn:00003358
.text$mn:00003358                 push    ebp
.text$mn:00003359                 mov     ebp, esp
.text$mn:0000335B                 push    ecx
.text$mn:0000335C                 mov     [ebp+var_4], ecx
.text$mn:0000335F                 mov     eax, [ebp+var_4]
.text$mn:00003362                 mov     ecx, [ebp+arg_0]
.text$mn:00003365                 mov     [eax], ecx
.text$mn:00003367                 mov     edx, [ebp+var_4]
.text$mn:0000336A                 mov     eax, [ebp+arg_4]
.text$mn:0000336D                 mov     [edx+4], eax
.text$mn:00003370                 mov     eax, [ebp+var_4]
.text$mn:00003373                 mov     esp, ebp
.text$mn:00003375                 pop     ebp
.text$mn:00003376                 retn    8
.text$mn:00003376 ??0error_condition@std@@QAE@HABVerror_category@1@@Z endp
.text$mn:00003376
.text$mn:00003376 ; ---------------------------------------------------------------------------
.text$mn:00003379                 align 4
.text$mn:00003379 _text$mn        ends
.text$mn:00003379
.text$mn:0000337C ; ===========================================================================
.text$mn:0000337C
.text$mn:0000337C ; Segment type: Pure code
.text$mn:0000337C ; Segment permissions: Read/Execute
.text$mn:0000337C _text$mn        segment para public 'CODE' use32
.text$mn:0000337C                 assume cs:_text$mn
.text$mn:0000337C                 ;org 337Ch
.text$mn:0000337C ; COMDAT (pick any)
.text$mn:0000337C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000337C
.text$mn:0000337C ; =============== S U B R O U T I N E =======================================
.text$mn:0000337C
.text$mn:0000337C ; Attributes: bp-based frame
.text$mn:0000337C
.text$mn:0000337C ; _DWORD __thiscall std::locale::id::id(std::locale::id *this, unsigned int)
.text$mn:0000337C                 public ??0id@locale@std@@QAE@I@Z
.text$mn:0000337C ??0id@locale@std@@QAE@I@Z proc near     ; CODE XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+Ap
.text$mn:0000337C                                         ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+Ap ...
.text$mn:0000337C
.text$mn:0000337C var_4           = dword ptr -4
.text$mn:0000337C arg_0           = dword ptr  8
.text$mn:0000337C
.text$mn:0000337C                 push    ebp
.text$mn:0000337D                 mov     ebp, esp
.text$mn:0000337F                 push    ecx
.text$mn:00003380                 mov     [ebp+var_4], ecx
.text$mn:00003383                 mov     eax, [ebp+var_4]
.text$mn:00003386                 mov     ecx, [ebp+arg_0]
.text$mn:00003389                 mov     [eax], ecx
.text$mn:0000338B                 mov     eax, [ebp+var_4]
.text$mn:0000338E                 mov     esp, ebp
.text$mn:00003390                 pop     ebp
.text$mn:00003391                 retn    4
.text$mn:00003391 ??0id@locale@std@@QAE@I@Z endp
.text$mn:00003391
.text$mn:00003391 _text$mn        ends
.text$mn:00003391
.text$mn:00003394 ; ===========================================================================
.text$mn:00003394
.text$mn:00003394 ; Segment type: Pure code
.text$mn:00003394 ; Segment permissions: Read/Execute
.text$mn:00003394 _text$mn        segment para public 'CODE' use32
.text$mn:00003394                 assume cs:_text$mn
.text$mn:00003394                 ;org 3394h
.text$mn:00003394 ; COMDAT (pick any)
.text$mn:00003394                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003394
.text$mn:00003394 ; =============== S U B R O U T I N E =======================================
.text$mn:00003394
.text$mn:00003394 ; Attributes: bp-based frame
.text$mn:00003394
.text$mn:00003394 ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>::~_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>(void)
.text$mn:00003394                 public ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00003394 ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:00003394                                         ; CODE XREF: __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0+3j
.text$mn:00003394                                         ; __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0+3j ...
.text$mn:00003394
.text$mn:00003394 var_10          = dword ptr -10h
.text$mn:00003394 var_C           = dword ptr -0Ch
.text$mn:00003394 var_4           = dword ptr -4
.text$mn:00003394
.text$mn:00003394                 push    ebp
.text$mn:00003395                 mov     ebp, esp
.text$mn:00003397                 push    0FFFFFFFFh
.text$mn:00003399                 push    offset __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:0000339E                 mov     eax, large fs:0
.text$mn:000033A4                 push    eax
.text$mn:000033A5                 push    ecx
.text$mn:000033A6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000033AB                 xor     eax, ebp
.text$mn:000033AD                 push    eax
.text$mn:000033AE                 lea     eax, [ebp+var_C]
.text$mn:000033B1                 mov     large fs:0, eax
.text$mn:000033B7                 mov     [ebp+var_10], ecx
.text$mn:000033BA                 mov     [ebp+var_4], 0
.text$mn:000033C1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000033C8                 mov     ecx, [ebp+var_10] ; this
.text$mn:000033CB                 call    ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$mn:000033D0                 mov     ecx, [ebp+var_C]
.text$mn:000033D3                 mov     large fs:0, ecx
.text$mn:000033DA                 pop     ecx
.text$mn:000033DB                 mov     esp, ebp
.text$mn:000033DD                 pop     ebp
.text$mn:000033DE                 retn
.text$mn:000033DE ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:000033DE
.text$mn:000033DE ; ---------------------------------------------------------------------------
.text$mn:000033DF                 align 10h
.text$mn:000033DF _text$mn        ends
.text$mn:000033DF
.text$x:000033E0 ; ===========================================================================
.text$x:000033E0
.text$x:000033E0 ; Segment type: Pure code
.text$x:000033E0 ; Segment permissions: Read/Execute
.text$x:000033E0 _text$x         segment para public 'CODE' use32
.text$x:000033E0                 assume cs:_text$x
.text$x:000033E0                 ;org 33E0h
.text$x:000033E0 ; COMDAT (pick associative to section at 3394)
.text$x:000033E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000033E0
.text$x:000033E0 ; =============== S U B R O U T I N E =======================================
.text$x:000033E0
.text$x:000033E0
.text$x:000033E0 __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:000033E0                                         ; DATA XREF: .xdata$x:00007F0Co
.text$x:000033E0                 mov     ecx, [ebp-10h]  ; this
.text$x:000033E3                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:000033E3 __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:000033E3
.text$x:000033E8
.text$x:000033E8 ; =============== S U B R O U T I N E =======================================
.text$x:000033E8
.text$x:000033E8
.text$x:000033E8 __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:000033E8                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)+5o
.text$x:000033E8
.text$x:000033E8 arg_4           = dword ptr  8
.text$x:000033E8
.text$x:000033E8                 mov     edx, [esp+arg_4]
.text$x:000033EC                 lea     eax, [edx+0Ch]
.text$x:000033EF                 mov     ecx, [edx-8]
.text$x:000033F2                 xor     ecx, eax
.text$x:000033F4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000033F9                 mov     eax, offset __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$x:000033FE                 jmp     ___CxxFrameHandler3
.text$x:000033FE __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:000033FE
.text$x:000033FE ; ---------------------------------------------------------------------------
.text$x:00003403                 align 4
.text$x:00003403 _text$x         ends
.text$x:00003403
.text$mn:00003404 ; ===========================================================================
.text$mn:00003404
.text$mn:00003404 ; Segment type: Pure code
.text$mn:00003404 ; Segment permissions: Read/Execute
.text$mn:00003404 _text$mn        segment para public 'CODE' use32
.text$mn:00003404                 assume cs:_text$mn
.text$mn:00003404                 ;org 3404h
.text$mn:00003404 ; COMDAT (pick any)
.text$mn:00003404                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003404
.text$mn:00003404 ; =============== S U B R O U T I N E =======================================
.text$mn:00003404
.text$mn:00003404 ; Attributes: bp-based frame
.text$mn:00003404
.text$mn:00003404 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::~_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(void)
.text$mn:00003404                 public ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:00003404 ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00003404                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0+3j
.text$mn:00003404                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+43p ...
.text$mn:00003404
.text$mn:00003404 var_10          = dword ptr -10h
.text$mn:00003404 var_C           = dword ptr -0Ch
.text$mn:00003404 var_4           = dword ptr -4
.text$mn:00003404
.text$mn:00003404                 push    ebp
.text$mn:00003405                 mov     ebp, esp
.text$mn:00003407                 push    0FFFFFFFFh
.text$mn:00003409                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:0000340E                 mov     eax, large fs:0
.text$mn:00003414                 push    eax
.text$mn:00003415                 push    ecx
.text$mn:00003416                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000341B                 xor     eax, ebp
.text$mn:0000341D                 push    eax
.text$mn:0000341E                 lea     eax, [ebp+var_C]
.text$mn:00003421                 mov     large fs:0, eax
.text$mn:00003427                 mov     [ebp+var_10], ecx
.text$mn:0000342A                 mov     [ebp+var_4], 0
.text$mn:00003431                 mov     ecx, [ebp+var_10]
.text$mn:00003434                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)
.text$mn:00003439                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003440                 mov     ecx, [ebp+var_10]
.text$mn:00003443                 call    ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$mn:00003448                 mov     ecx, [ebp+var_C]
.text$mn:0000344B                 mov     large fs:0, ecx
.text$mn:00003452                 pop     ecx
.text$mn:00003453                 mov     esp, ebp
.text$mn:00003455                 pop     ebp
.text$mn:00003456                 retn
.text$mn:00003456 ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$mn:00003456
.text$mn:00003456 ; ---------------------------------------------------------------------------
.text$mn:00003457                 align 4
.text$mn:00003457 _text$mn        ends
.text$mn:00003457
.text$x:00003458 ; ===========================================================================
.text$x:00003458
.text$x:00003458 ; Segment type: Pure code
.text$x:00003458 ; Segment permissions: Read/Execute
.text$x:00003458 _text$x         segment para public 'CODE' use32
.text$x:00003458                 assume cs:_text$x
.text$x:00003458                 ;org 3458h
.text$x:00003458 ; COMDAT (pick associative to section at 3404)
.text$x:00003458                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003458
.text$x:00003458 ; =============== S U B R O U T I N E =======================================
.text$x:00003458
.text$x:00003458
.text$x:00003458 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00003458                                         ; DATA XREF: .xdata$x:00007420o
.text$x:00003458                 mov     ecx, [ebp-10h]
.text$x:0000345B                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:0000345B __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:0000345B
.text$x:00003460
.text$x:00003460 ; =============== S U B R O U T I N E =======================================
.text$x:00003460
.text$x:00003460
.text$x:00003460 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$x:00003460                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+5o
.text$x:00003460
.text$x:00003460 arg_4           = dword ptr  8
.text$x:00003460
.text$x:00003460                 mov     edx, [esp+arg_4]
.text$x:00003464                 lea     eax, [edx+0Ch]
.text$x:00003467                 mov     ecx, [edx-8]
.text$x:0000346A                 xor     ecx, eax
.text$x:0000346C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003471                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$x:00003476                 jmp     ___CxxFrameHandler3
.text$x:00003476 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$x:00003476
.text$x:00003476 ; ---------------------------------------------------------------------------
.text$x:0000347B                 align 4
.text$x:0000347B _text$x         ends
.text$x:0000347B
.text$mn:0000347C ; ===========================================================================
.text$mn:0000347C
.text$mn:0000347C ; Segment type: Pure code
.text$mn:0000347C ; Segment permissions: Read/Execute
.text$mn:0000347C _text$mn        segment para public 'CODE' use32
.text$mn:0000347C                 assume cs:_text$mn
.text$mn:0000347C                 ;org 347Ch
.text$mn:0000347C ; COMDAT (pick any)
.text$mn:0000347C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000347C
.text$mn:0000347C ; =============== S U B R O U T I N E =======================================
.text$mn:0000347C
.text$mn:0000347C ; Attributes: bp-based frame
.text$mn:0000347C
.text$mn:0000347C ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::~_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(void)
.text$mn:0000347C                 public ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:0000347C ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:0000347C                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0+3j
.text$mn:0000347C                                         ; __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0+3j ...
.text$mn:0000347C
.text$mn:0000347C var_10          = dword ptr -10h
.text$mn:0000347C var_C           = dword ptr -0Ch
.text$mn:0000347C var_4           = dword ptr -4
.text$mn:0000347C
.text$mn:0000347C                 push    ebp
.text$mn:0000347D                 mov     ebp, esp
.text$mn:0000347F                 push    0FFFFFFFFh
.text$mn:00003481                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00003486                 mov     eax, large fs:0
.text$mn:0000348C                 push    eax
.text$mn:0000348D                 push    ecx
.text$mn:0000348E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003493                 xor     eax, ebp
.text$mn:00003495                 push    eax
.text$mn:00003496                 lea     eax, [ebp+var_C]
.text$mn:00003499                 mov     large fs:0, eax
.text$mn:0000349F                 mov     [ebp+var_10], ecx
.text$mn:000034A2                 mov     [ebp+var_4], 0
.text$mn:000034A9                 mov     ecx, [ebp+var_10]
.text$mn:000034AC                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:000034B1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000034B8                 mov     ecx, [ebp+var_10]
.text$mn:000034BB                 call    ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:000034C0                 mov     ecx, [ebp+var_C]
.text$mn:000034C3                 mov     large fs:0, ecx
.text$mn:000034CA                 pop     ecx
.text$mn:000034CB                 mov     esp, ebp
.text$mn:000034CD                 pop     ebp
.text$mn:000034CE                 retn
.text$mn:000034CE ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:000034CE
.text$mn:000034CE ; ---------------------------------------------------------------------------
.text$mn:000034CF                 align 10h
.text$mn:000034CF _text$mn        ends
.text$mn:000034CF
.text$x:000034D0 ; ===========================================================================
.text$x:000034D0
.text$x:000034D0 ; Segment type: Pure code
.text$x:000034D0 ; Segment permissions: Read/Execute
.text$x:000034D0 _text$x         segment para public 'CODE' use32
.text$x:000034D0                 assume cs:_text$x
.text$x:000034D0                 ;org 34D0h
.text$x:000034D0 ; COMDAT (pick associative to section at 347C)
.text$x:000034D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000034D0
.text$x:000034D0 ; =============== S U B R O U T I N E =======================================
.text$x:000034D0
.text$x:000034D0
.text$x:000034D0 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:000034D0                                         ; DATA XREF: .xdata$x:00007740o
.text$x:000034D0                 mov     ecx, [ebp-10h]
.text$x:000034D3                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:000034D3 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:000034D3
.text$x:000034D8
.text$x:000034D8 ; =============== S U B R O U T I N E =======================================
.text$x:000034D8
.text$x:000034D8
.text$x:000034D8 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:000034D8                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+5o
.text$x:000034D8
.text$x:000034D8 arg_4           = dword ptr  8
.text$x:000034D8
.text$x:000034D8                 mov     edx, [esp+arg_4]
.text$x:000034DC                 lea     eax, [edx+0Ch]
.text$x:000034DF                 mov     ecx, [edx-8]
.text$x:000034E2                 xor     ecx, eax
.text$x:000034E4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000034E9                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$x:000034EE                 jmp     ___CxxFrameHandler3
.text$x:000034EE __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:000034EE
.text$x:000034EE ; ---------------------------------------------------------------------------
.text$x:000034F3                 align 4
.text$x:000034F3 _text$x         ends
.text$x:000034F3
.text$mn:000034F4 ; ===========================================================================
.text$mn:000034F4
.text$mn:000034F4 ; Segment type: Pure code
.text$mn:000034F4 ; Segment permissions: Read/Execute
.text$mn:000034F4 _text$mn        segment para public 'CODE' use32
.text$mn:000034F4                 assume cs:_text$mn
.text$mn:000034F4                 ;org 34F4h
.text$mn:000034F4 ; COMDAT (pick any)
.text$mn:000034F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000034F4
.text$mn:000034F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000034F4
.text$mn:000034F4 ; Attributes: bp-based frame
.text$mn:000034F4
.text$mn:000034F4 ; public: __thiscall std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::~_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>(void)
.text$mn:000034F4                 public ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:000034F4 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:000034F4                                         ; CODE XREF: __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5+3j
.text$mn:000034F4                                         ; __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7+3j ...
.text$mn:000034F4
.text$mn:000034F4 var_10          = dword ptr -10h
.text$mn:000034F4 var_C           = dword ptr -0Ch
.text$mn:000034F4 var_4           = dword ptr -4
.text$mn:000034F4
.text$mn:000034F4                 push    ebp
.text$mn:000034F5                 mov     ebp, esp
.text$mn:000034F7                 push    0FFFFFFFFh
.text$mn:000034F9                 push    offset __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:000034FE                 mov     eax, large fs:0
.text$mn:00003504                 push    eax
.text$mn:00003505                 push    ecx
.text$mn:00003506                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000350B                 xor     eax, ebp
.text$mn:0000350D                 push    eax
.text$mn:0000350E                 lea     eax, [ebp+var_C]
.text$mn:00003511                 mov     large fs:0, eax
.text$mn:00003517                 mov     [ebp+var_10], ecx
.text$mn:0000351A                 mov     [ebp+var_4], 0
.text$mn:00003521                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003528                 mov     ecx, [ebp+var_10]
.text$mn:0000352B                 call    ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$mn:00003530                 mov     ecx, [ebp+var_C]
.text$mn:00003533                 mov     large fs:0, ecx
.text$mn:0000353A                 pop     ecx
.text$mn:0000353B                 mov     esp, ebp
.text$mn:0000353D                 pop     ebp
.text$mn:0000353E                 retn
.text$mn:0000353E ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:0000353E
.text$mn:0000353E ; ---------------------------------------------------------------------------
.text$mn:0000353F                 align 10h
.text$mn:0000353F _text$mn        ends
.text$mn:0000353F
.text$x:00003540 ; ===========================================================================
.text$x:00003540
.text$x:00003540 ; Segment type: Pure code
.text$x:00003540 ; Segment permissions: Read/Execute
.text$x:00003540 _text$x         segment para public 'CODE' use32
.text$x:00003540                 assume cs:_text$x
.text$x:00003540                 ;org 3540h
.text$x:00003540 ; COMDAT (pick associative to section at 34F4)
.text$x:00003540                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003540
.text$x:00003540 ; =============== S U B R O U T I N E =======================================
.text$x:00003540
.text$x:00003540
.text$x:00003540 __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00003540                                         ; DATA XREF: .xdata$x:00007F90o
.text$x:00003540                 mov     ecx, [ebp-10h]
.text$x:00003543                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$x:00003543 __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00003543
.text$x:00003548
.text$x:00003548 ; =============== S U B R O U T I N E =======================================
.text$x:00003548
.text$x:00003548
.text$x:00003548 __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:00003548                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)+5o
.text$x:00003548
.text$x:00003548 arg_4           = dword ptr  8
.text$x:00003548
.text$x:00003548                 mov     edx, [esp+arg_4]
.text$x:0000354C                 lea     eax, [edx+0Ch]
.text$x:0000354F                 mov     ecx, [edx-8]
.text$x:00003552                 xor     ecx, eax
.text$x:00003554                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003559                 mov     eax, offset __ehfuncinfo$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$x:0000355E                 jmp     ___CxxFrameHandler3
.text$x:0000355E __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:0000355E
.text$x:0000355E ; ---------------------------------------------------------------------------
.text$x:00003563                 align 4
.text$x:00003563 _text$x         ends
.text$x:00003563
.text$mn:00003564 ; ===========================================================================
.text$mn:00003564
.text$mn:00003564 ; Segment type: Pure code
.text$mn:00003564 ; Segment permissions: Read/Execute
.text$mn:00003564 _text$mn        segment para public 'CODE' use32
.text$mn:00003564                 assume cs:_text$mn
.text$mn:00003564                 ;org 3564h
.text$mn:00003564 ; COMDAT (pick any)
.text$mn:00003564                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003564
.text$mn:00003564 ; =============== S U B R O U T I N E =======================================
.text$mn:00003564
.text$mn:00003564 ; Attributes: bp-based frame
.text$mn:00003564
.text$mn:00003564 ; public: __thiscall std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::~_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>(void)
.text$mn:00003564                 public ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00003564 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00003564                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+F5p
.text$mn:00003564                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+101p ...
.text$mn:00003564
.text$mn:00003564 var_10          = dword ptr -10h
.text$mn:00003564 var_C           = dword ptr -0Ch
.text$mn:00003564 var_4           = dword ptr -4
.text$mn:00003564
.text$mn:00003564                 push    ebp
.text$mn:00003565                 mov     ebp, esp
.text$mn:00003567                 push    0FFFFFFFFh
.text$mn:00003569                 push    offset __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:0000356E                 mov     eax, large fs:0
.text$mn:00003574                 push    eax
.text$mn:00003575                 push    ecx
.text$mn:00003576                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000357B                 xor     eax, ebp
.text$mn:0000357D                 push    eax
.text$mn:0000357E                 lea     eax, [ebp+var_C]
.text$mn:00003581                 mov     large fs:0, eax
.text$mn:00003587                 mov     [ebp+var_10], ecx
.text$mn:0000358A                 mov     [ebp+var_4], 0
.text$mn:00003591                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003598                 mov     ecx, [ebp+var_10]
.text$mn:0000359B                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:000035A0                 mov     ecx, [ebp+var_C]
.text$mn:000035A3                 mov     large fs:0, ecx
.text$mn:000035AA                 pop     ecx
.text$mn:000035AB                 mov     esp, ebp
.text$mn:000035AD                 pop     ebp
.text$mn:000035AE                 retn
.text$mn:000035AE ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:000035AE
.text$mn:000035AE ; ---------------------------------------------------------------------------
.text$mn:000035AF                 align 10h
.text$mn:000035AF _text$mn        ends
.text$mn:000035AF
.text$x:000035B0 ; ===========================================================================
.text$x:000035B0
.text$x:000035B0 ; Segment type: Pure code
.text$x:000035B0 ; Segment permissions: Read/Execute
.text$x:000035B0 _text$x         segment para public 'CODE' use32
.text$x:000035B0                 assume cs:_text$x
.text$x:000035B0                 ;org 35B0h
.text$x:000035B0 ; COMDAT (pick associative to section at 3564)
.text$x:000035B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000035B0
.text$x:000035B0 ; =============== S U B R O U T I N E =======================================
.text$x:000035B0
.text$x:000035B0
.text$x:000035B0 __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:000035B0                                         ; DATA XREF: .xdata$x:00008040o
.text$x:000035B0                 mov     ecx, [ebp-10h]
.text$x:000035B3                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000035B3 __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:000035B3
.text$x:000035B8
.text$x:000035B8 ; =============== S U B R O U T I N E =======================================
.text$x:000035B8
.text$x:000035B8
.text$x:000035B8 __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:000035B8                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)+5o
.text$x:000035B8
.text$x:000035B8 arg_4           = dword ptr  8
.text$x:000035B8
.text$x:000035B8                 mov     edx, [esp+arg_4]
.text$x:000035BC                 lea     eax, [edx+0Ch]
.text$x:000035BF                 mov     ecx, [edx-8]
.text$x:000035C2                 xor     ecx, eax
.text$x:000035C4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000035C9                 mov     eax, offset __ehfuncinfo$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$x:000035CE                 jmp     ___CxxFrameHandler3
.text$x:000035CE __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:000035CE
.text$x:000035CE ; ---------------------------------------------------------------------------
.text$x:000035D3                 align 4
.text$x:000035D3 _text$x         ends
.text$x:000035D3
.text$mn:000035D4 ; ===========================================================================
.text$mn:000035D4
.text$mn:000035D4 ; Segment type: Pure code
.text$mn:000035D4 ; Segment permissions: Read/Execute
.text$mn:000035D4 _text$mn        segment para public 'CODE' use32
.text$mn:000035D4                 assume cs:_text$mn
.text$mn:000035D4                 ;org 35D4h
.text$mn:000035D4 ; COMDAT (pick any)
.text$mn:000035D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000035D4
.text$mn:000035D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000035D4
.text$mn:000035D4 ; Attributes: bp-based frame
.text$mn:000035D4
.text$mn:000035D4 ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::~_String_val<struct std::_Simple_types<char>>(void)
.text$mn:000035D4                 public ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:000035D4 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:000035D4                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0+3j
.text$mn:000035D4                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+3Fp ...
.text$mn:000035D4
.text$mn:000035D4 var_10          = dword ptr -10h
.text$mn:000035D4 var_C           = dword ptr -0Ch
.text$mn:000035D4 var_4           = dword ptr -4
.text$mn:000035D4
.text$mn:000035D4                 push    ebp
.text$mn:000035D5                 mov     ebp, esp
.text$mn:000035D7                 push    0FFFFFFFFh
.text$mn:000035D9                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:000035DE                 mov     eax, large fs:0
.text$mn:000035E4                 push    eax
.text$mn:000035E5                 push    ecx
.text$mn:000035E6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000035EB                 xor     eax, ebp
.text$mn:000035ED                 push    eax
.text$mn:000035EE                 lea     eax, [ebp+var_C]
.text$mn:000035F1                 mov     large fs:0, eax
.text$mn:000035F7                 mov     [ebp+var_10], ecx
.text$mn:000035FA                 mov     [ebp+var_4], 0
.text$mn:00003601                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003608                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000360B                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00003610                 mov     ecx, [ebp+var_C]
.text$mn:00003613                 mov     large fs:0, ecx
.text$mn:0000361A                 pop     ecx
.text$mn:0000361B                 mov     esp, ebp
.text$mn:0000361D                 pop     ebp
.text$mn:0000361E                 retn
.text$mn:0000361E ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:0000361E
.text$mn:0000361E ; ---------------------------------------------------------------------------
.text$mn:0000361F                 align 10h
.text$mn:0000361F _text$mn        ends
.text$mn:0000361F
.text$x:00003620 ; ===========================================================================
.text$x:00003620
.text$x:00003620 ; Segment type: Pure code
.text$x:00003620 ; Segment permissions: Read/Execute
.text$x:00003620 _text$x         segment para public 'CODE' use32
.text$x:00003620                 assume cs:_text$x
.text$x:00003620                 ;org 3620h
.text$x:00003620 ; COMDAT (pick associative to section at 35D4)
.text$x:00003620                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003620
.text$x:00003620 ; =============== S U B R O U T I N E =======================================
.text$x:00003620
.text$x:00003620
.text$x:00003620 __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:00003620                                         ; DATA XREF: .xdata$x:000073C8o
.text$x:00003620                 mov     ecx, [ebp-10h]  ; this
.text$x:00003623                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00003623 __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:00003623
.text$x:00003628
.text$x:00003628 ; =============== S U B R O U T I N E =======================================
.text$x:00003628
.text$x:00003628
.text$x:00003628 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:00003628                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)+5o
.text$x:00003628
.text$x:00003628 arg_4           = dword ptr  8
.text$x:00003628
.text$x:00003628                 mov     edx, [esp+arg_4]
.text$x:0000362C                 lea     eax, [edx+0Ch]
.text$x:0000362F                 mov     ecx, [edx-8]
.text$x:00003632                 xor     ecx, eax
.text$x:00003634                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003639                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:0000363E                 jmp     ___CxxFrameHandler3
.text$x:0000363E __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:0000363E
.text$x:0000363E ; ---------------------------------------------------------------------------
.text$x:00003643                 align 4
.text$x:00003643 _text$x         ends
.text$x:00003643
.text$mn:00003644 ; ===========================================================================
.text$mn:00003644
.text$mn:00003644 ; Segment type: Pure code
.text$mn:00003644 ; Segment permissions: Read/Execute
.text$mn:00003644 _text$mn        segment para public 'CODE' use32
.text$mn:00003644                 assume cs:_text$mn
.text$mn:00003644                 ;org 3644h
.text$mn:00003644 ; COMDAT (pick any)
.text$mn:00003644                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003644
.text$mn:00003644 ; =============== S U B R O U T I N E =======================================
.text$mn:00003644
.text$mn:00003644 ; Attributes: bp-based frame
.text$mn:00003644
.text$mn:00003644 ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::~_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:00003644                 public ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00003644 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:00003644                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0+3j
.text$mn:00003644                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+3Fp ...
.text$mn:00003644
.text$mn:00003644 var_10          = dword ptr -10h
.text$mn:00003644 var_C           = dword ptr -0Ch
.text$mn:00003644 var_4           = dword ptr -4
.text$mn:00003644
.text$mn:00003644                 push    ebp
.text$mn:00003645                 mov     ebp, esp
.text$mn:00003647                 push    0FFFFFFFFh
.text$mn:00003649                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:0000364E                 mov     eax, large fs:0
.text$mn:00003654                 push    eax
.text$mn:00003655                 push    ecx
.text$mn:00003656                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000365B                 xor     eax, ebp
.text$mn:0000365D                 push    eax
.text$mn:0000365E                 lea     eax, [ebp+var_C]
.text$mn:00003661                 mov     large fs:0, eax
.text$mn:00003667                 mov     [ebp+var_10], ecx
.text$mn:0000366A                 mov     [ebp+var_4], 0
.text$mn:00003671                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003678                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000367B                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00003680                 mov     ecx, [ebp+var_C]
.text$mn:00003683                 mov     large fs:0, ecx
.text$mn:0000368A                 pop     ecx
.text$mn:0000368B                 mov     esp, ebp
.text$mn:0000368D                 pop     ebp
.text$mn:0000368E                 retn
.text$mn:0000368E ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:0000368E
.text$mn:0000368E ; ---------------------------------------------------------------------------
.text$mn:0000368F                 align 10h
.text$mn:0000368F _text$mn        ends
.text$mn:0000368F
.text$x:00003690 ; ===========================================================================
.text$x:00003690
.text$x:00003690 ; Segment type: Pure code
.text$x:00003690 ; Segment permissions: Read/Execute
.text$x:00003690 _text$x         segment para public 'CODE' use32
.text$x:00003690                 assume cs:_text$x
.text$x:00003690                 ;org 3690h
.text$x:00003690 ; COMDAT (pick associative to section at 3644)
.text$x:00003690                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003690
.text$x:00003690 ; =============== S U B R O U T I N E =======================================
.text$x:00003690
.text$x:00003690
.text$x:00003690 __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00003690                                         ; DATA XREF: .xdata$x:000076E8o
.text$x:00003690                 mov     ecx, [ebp-10h]  ; this
.text$x:00003693                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00003693 __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:00003693
.text$x:00003698
.text$x:00003698 ; =============== S U B R O U T I N E =======================================
.text$x:00003698
.text$x:00003698
.text$x:00003698 __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:00003698                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:00003698
.text$x:00003698 arg_4           = dword ptr  8
.text$x:00003698
.text$x:00003698                 mov     edx, [esp+arg_4]
.text$x:0000369C                 lea     eax, [edx+0Ch]
.text$x:0000369F                 mov     ecx, [edx-8]
.text$x:000036A2                 xor     ecx, eax
.text$x:000036A4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000036A9                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:000036AE                 jmp     ___CxxFrameHandler3
.text$x:000036AE __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:000036AE
.text$x:000036AE ; ---------------------------------------------------------------------------
.text$x:000036B3                 align 4
.text$x:000036B3 _text$x         ends
.text$x:000036B3
.text$mn:000036B4 ; ===========================================================================
.text$mn:000036B4
.text$mn:000036B4 ; Segment type: Pure code
.text$mn:000036B4 ; Segment permissions: Read/Execute
.text$mn:000036B4 _text$mn        segment para public 'CODE' use32
.text$mn:000036B4                 assume cs:_text$mn
.text$mn:000036B4                 ;org 36B4h
.text$mn:000036B4 ; COMDAT (pick any)
.text$mn:000036B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000036B4
.text$mn:000036B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000036B4
.text$mn:000036B4 ; Attributes: bp-based frame
.text$mn:000036B4
.text$mn:000036B4 ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::~_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(void)
.text$mn:000036B4                 public ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.text$mn:000036B4 ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ proc near
.text$mn:000036B4                                         ; CODE XREF: __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0+3j
.text$mn:000036B4                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+3Fp ...
.text$mn:000036B4
.text$mn:000036B4 var_10          = dword ptr -10h
.text$mn:000036B4 var_C           = dword ptr -0Ch
.text$mn:000036B4 var_4           = dword ptr -4
.text$mn:000036B4
.text$mn:000036B4                 push    ebp
.text$mn:000036B5                 mov     ebp, esp
.text$mn:000036B7                 push    0FFFFFFFFh
.text$mn:000036B9                 push    offset __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.text$mn:000036BE                 mov     eax, large fs:0
.text$mn:000036C4                 push    eax
.text$mn:000036C5                 push    ecx
.text$mn:000036C6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000036CB                 xor     eax, ebp
.text$mn:000036CD                 push    eax
.text$mn:000036CE                 lea     eax, [ebp+var_C]
.text$mn:000036D1                 mov     large fs:0, eax
.text$mn:000036D7                 mov     [ebp+var_10], ecx
.text$mn:000036DA                 mov     [ebp+var_4], 0
.text$mn:000036E1                 mov     ecx, [ebp+var_10]
.text$mn:000036E4                 call    ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Free_proxy(void)
.text$mn:000036E9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000036F0                 mov     ecx, [ebp+var_10]
.text$mn:000036F3                 call    ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:000036F8                 mov     ecx, [ebp+var_C]
.text$mn:000036FB                 mov     large fs:0, ecx
.text$mn:00003702                 pop     ecx
.text$mn:00003703                 mov     esp, ebp
.text$mn:00003705                 pop     ebp
.text$mn:00003706                 retn
.text$mn:00003706 ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ endp
.text$mn:00003706
.text$mn:00003706 ; ---------------------------------------------------------------------------
.text$mn:00003707                 align 4
.text$mn:00003707 _text$mn        ends
.text$mn:00003707
.text$x:00003708 ; ===========================================================================
.text$x:00003708
.text$x:00003708 ; Segment type: Pure code
.text$x:00003708 ; Segment permissions: Read/Execute
.text$x:00003708 _text$x         segment para public 'CODE' use32
.text$x:00003708                 assume cs:_text$x
.text$x:00003708                 ;org 3708h
.text$x:00003708 ; COMDAT (pick associative to section at 36B4)
.text$x:00003708                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003708
.text$x:00003708 ; =============== S U B R O U T I N E =======================================
.text$x:00003708
.text$x:00003708
.text$x:00003708 __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ$0 proc near
.text$x:00003708                                         ; DATA XREF: .xdata$x:00007DD8o
.text$x:00003708                 mov     ecx, [ebp-10h]
.text$x:0000370B                 jmp     ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:0000370B __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ$0 endp
.text$x:0000370B
.text$x:00003710
.text$x:00003710 ; =============== S U B R O U T I N E =======================================
.text$x:00003710
.text$x:00003710
.text$x:00003710 __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ proc near
.text$x:00003710                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+5o
.text$x:00003710
.text$x:00003710 arg_4           = dword ptr  8
.text$x:00003710
.text$x:00003710                 mov     edx, [esp+arg_4]
.text$x:00003714                 lea     eax, [edx+0Ch]
.text$x:00003717                 mov     ecx, [edx-8]
.text$x:0000371A                 xor     ecx, eax
.text$x:0000371C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003721                 mov     eax, offset __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.text$x:00003726                 jmp     ___CxxFrameHandler3
.text$x:00003726 __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ endp
.text$x:00003726
.text$x:00003726 ; ---------------------------------------------------------------------------
.text$x:0000372B                 align 4
.text$x:0000372B _text$x         ends
.text$x:0000372B
.text$mn:0000372C ; ===========================================================================
.text$mn:0000372C
.text$mn:0000372C ; Segment type: Pure code
.text$mn:0000372C ; Segment permissions: Read/Execute
.text$mn:0000372C _text$mn        segment para public 'CODE' use32
.text$mn:0000372C                 assume cs:_text$mn
.text$mn:0000372C                 ;org 372Ch
.text$mn:0000372C ; COMDAT (pick any)
.text$mn:0000372C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000372C
.text$mn:0000372C ; =============== S U B R O U T I N E =======================================
.text$mn:0000372C
.text$mn:0000372C ; Attributes: bp-based frame
.text$mn:0000372C
.text$mn:0000372C ; public: __thiscall std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::~_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:0000372C                 public ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:0000372C ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:0000372C                                         ; CODE XREF: __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0+3j
.text$mn:0000372C                                         ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+3Fp ...
.text$mn:0000372C
.text$mn:0000372C var_10          = dword ptr -10h
.text$mn:0000372C var_C           = dword ptr -0Ch
.text$mn:0000372C var_4           = dword ptr -4
.text$mn:0000372C
.text$mn:0000372C                 push    ebp
.text$mn:0000372D                 mov     ebp, esp
.text$mn:0000372F                 push    0FFFFFFFFh
.text$mn:00003731                 push    offset __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:00003736                 mov     eax, large fs:0
.text$mn:0000373C                 push    eax
.text$mn:0000373D                 push    ecx
.text$mn:0000373E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003743                 xor     eax, ebp
.text$mn:00003745                 push    eax
.text$mn:00003746                 lea     eax, [ebp+var_C]
.text$mn:00003749                 mov     large fs:0, eax
.text$mn:0000374F                 mov     [ebp+var_10], ecx
.text$mn:00003752                 mov     [ebp+var_4], 0
.text$mn:00003759                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003760                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003763                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00003768                 mov     ecx, [ebp+var_C]
.text$mn:0000376B                 mov     large fs:0, ecx
.text$mn:00003772                 pop     ecx
.text$mn:00003773                 mov     esp, ebp
.text$mn:00003775                 pop     ebp
.text$mn:00003776                 retn
.text$mn:00003776 ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00003776
.text$mn:00003776 ; ---------------------------------------------------------------------------
.text$mn:00003777                 align 4
.text$mn:00003777 _text$mn        ends
.text$mn:00003777
.text$x:00003778 ; ===========================================================================
.text$x:00003778
.text$x:00003778 ; Segment type: Pure code
.text$x:00003778 ; Segment permissions: Read/Execute
.text$x:00003778 _text$x         segment para public 'CODE' use32
.text$x:00003778                 assume cs:_text$x
.text$x:00003778                 ;org 3778h
.text$x:00003778 ; COMDAT (pick associative to section at 372C)
.text$x:00003778                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003778
.text$x:00003778 ; =============== S U B R O U T I N E =======================================
.text$x:00003778
.text$x:00003778
.text$x:00003778 __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00003778                                         ; DATA XREF: .xdata$x:00007D80o
.text$x:00003778                 mov     ecx, [ebp-10h]  ; this
.text$x:0000377B                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:0000377B __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:0000377B
.text$x:00003780
.text$x:00003780 ; =============== S U B R O U T I N E =======================================
.text$x:00003780
.text$x:00003780
.text$x:00003780 __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$x:00003780                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:00003780
.text$x:00003780 arg_4           = dword ptr  8
.text$x:00003780
.text$x:00003780                 mov     edx, [esp+arg_4]
.text$x:00003784                 lea     eax, [edx+0Ch]
.text$x:00003787                 mov     ecx, [edx-8]
.text$x:0000378A                 xor     ecx, eax
.text$x:0000378C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003791                 mov     eax, offset __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$x:00003796                 jmp     ___CxxFrameHandler3
.text$x:00003796 __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$x:00003796
.text$x:00003796 ; ---------------------------------------------------------------------------
.text$x:0000379B                 align 4
.text$x:0000379B _text$x         ends
.text$x:0000379B
.text$mn:0000379C ; ===========================================================================
.text$mn:0000379C
.text$mn:0000379C ; Segment type: Pure code
.text$mn:0000379C ; Segment permissions: Read/Execute
.text$mn:0000379C _text$mn        segment para public 'CODE' use32
.text$mn:0000379C                 assume cs:_text$mn
.text$mn:0000379C                 ;org 379Ch
.text$mn:0000379C ; COMDAT (pick any)
.text$mn:0000379C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000379C
.text$mn:0000379C ; =============== S U B R O U T I N E =======================================
.text$mn:0000379C
.text$mn:0000379C ; Attributes: bp-based frame
.text$mn:0000379C
.text$mn:0000379C ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::~basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
.text$mn:0000379C                 public ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:0000379C ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$mn:0000379C                                         ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+13j
.text$mn:0000379C                                         ; __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+13j ...
.text$mn:0000379C
.text$mn:0000379C var_10          = dword ptr -10h
.text$mn:0000379C var_C           = dword ptr -0Ch
.text$mn:0000379C var_4           = dword ptr -4
.text$mn:0000379C
.text$mn:0000379C                 push    ebp
.text$mn:0000379D                 mov     ebp, esp
.text$mn:0000379F                 push    0FFFFFFFFh
.text$mn:000037A1                 push    offset __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:000037A6                 mov     eax, large fs:0
.text$mn:000037AC                 push    eax
.text$mn:000037AD                 push    ecx
.text$mn:000037AE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000037B3                 xor     eax, ebp
.text$mn:000037B5                 push    eax
.text$mn:000037B6                 lea     eax, [ebp+var_C]
.text$mn:000037B9                 mov     large fs:0, eax
.text$mn:000037BF                 mov     [ebp+var_10], ecx
.text$mn:000037C2                 mov     [ebp+var_4], 0
.text$mn:000037C9                 push    0               ; Size
.text$mn:000037CB                 push    1               ; char
.text$mn:000037CD                 mov     ecx, [ebp+var_10]
.text$mn:000037D0                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:000037D5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000037DC                 mov     ecx, [ebp+var_10]
.text$mn:000037DF                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$mn:000037E4                 mov     ecx, [ebp+var_C]
.text$mn:000037E7                 mov     large fs:0, ecx
.text$mn:000037EE                 pop     ecx
.text$mn:000037EF                 mov     esp, ebp
.text$mn:000037F1                 pop     ebp
.text$mn:000037F2                 retn
.text$mn:000037F2 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$mn:000037F2
.text$mn:000037F2 ; ---------------------------------------------------------------------------
.text$mn:000037F3                 align 4
.text$mn:000037F3 _text$mn        ends
.text$mn:000037F3
.text$x:000037F4 ; ===========================================================================
.text$x:000037F4
.text$x:000037F4 ; Segment type: Pure code
.text$x:000037F4 ; Segment permissions: Read/Execute
.text$x:000037F4 _text$x         segment para public 'CODE' use32
.text$x:000037F4                 assume cs:_text$x
.text$x:000037F4                 ;org 37F4h
.text$x:000037F4 ; COMDAT (pick associative to section at 379C)
.text$x:000037F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000037F4
.text$x:000037F4 ; =============== S U B R O U T I N E =======================================
.text$x:000037F4
.text$x:000037F4
.text$x:000037F4 __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
.text$x:000037F4                                         ; DATA XREF: .xdata$x:00007478o
.text$x:000037F4                 mov     ecx, [ebp-10h]
.text$x:000037F7                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:000037F7 __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 endp
.text$x:000037F7
.text$x:000037FC
.text$x:000037FC ; =============== S U B R O U T I N E =======================================
.text$x:000037FC
.text$x:000037FC
.text$x:000037FC __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$x:000037FC                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+5o
.text$x:000037FC
.text$x:000037FC arg_4           = dword ptr  8
.text$x:000037FC
.text$x:000037FC                 mov     edx, [esp+arg_4]
.text$x:00003800                 lea     eax, [edx+0Ch]
.text$x:00003803                 mov     ecx, [edx-8]
.text$x:00003806                 xor     ecx, eax
.text$x:00003808                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000380D                 mov     eax, offset __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$x:00003812                 jmp     ___CxxFrameHandler3
.text$x:00003812 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$x:00003812
.text$x:00003812 ; ---------------------------------------------------------------------------
.text$x:00003817                 align 4
.text$x:00003817 _text$x         ends
.text$x:00003817
.text$mn:00003818 ; ===========================================================================
.text$mn:00003818
.text$mn:00003818 ; Segment type: Pure code
.text$mn:00003818 ; Segment permissions: Read/Execute
.text$mn:00003818 _text$mn        segment para public 'CODE' use32
.text$mn:00003818                 assume cs:_text$mn
.text$mn:00003818                 ;org 3818h
.text$mn:00003818 ; COMDAT (pick any)
.text$mn:00003818                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003818
.text$mn:00003818 ; =============== S U B R O U T I N E =======================================
.text$mn:00003818
.text$mn:00003818 ; Attributes: bp-based frame
.text$mn:00003818
.text$mn:00003818 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::~basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:00003818                 public ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00003818 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:00003818                                         ; CODE XREF: changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+6Bp
.text$mn:00003818                                         ; changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+77p ...
.text$mn:00003818
.text$mn:00003818 var_10          = dword ptr -10h
.text$mn:00003818 var_C           = dword ptr -0Ch
.text$mn:00003818 var_4           = dword ptr -4
.text$mn:00003818
.text$mn:00003818                 push    ebp
.text$mn:00003819                 mov     ebp, esp
.text$mn:0000381B                 push    0FFFFFFFFh
.text$mn:0000381D                 push    offset __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00003822                 mov     eax, large fs:0
.text$mn:00003828                 push    eax
.text$mn:00003829                 push    ecx
.text$mn:0000382A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000382F                 xor     eax, ebp
.text$mn:00003831                 push    eax
.text$mn:00003832                 lea     eax, [ebp+var_C]
.text$mn:00003835                 mov     large fs:0, eax
.text$mn:0000383B                 mov     [ebp+var_10], ecx
.text$mn:0000383E                 mov     [ebp+var_4], 0
.text$mn:00003845                 push    0
.text$mn:00003847                 push    1
.text$mn:00003849                 mov     ecx, [ebp+var_10]
.text$mn:0000384C                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00003851                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003858                 mov     ecx, [ebp+var_10]
.text$mn:0000385B                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$mn:00003860                 mov     ecx, [ebp+var_C]
.text$mn:00003863                 mov     large fs:0, ecx
.text$mn:0000386A                 pop     ecx
.text$mn:0000386B                 mov     esp, ebp
.text$mn:0000386D                 pop     ebp
.text$mn:0000386E                 retn
.text$mn:0000386E ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:0000386E
.text$mn:0000386E ; ---------------------------------------------------------------------------
.text$mn:0000386F                 align 10h
.text$mn:0000386F _text$mn        ends
.text$mn:0000386F
.text$x:00003870 ; ===========================================================================
.text$x:00003870
.text$x:00003870 ; Segment type: Pure code
.text$x:00003870 ; Segment permissions: Read/Execute
.text$x:00003870 _text$x         segment para public 'CODE' use32
.text$x:00003870                 assume cs:_text$x
.text$x:00003870                 ;org 3870h
.text$x:00003870 ; COMDAT (pick associative to section at 3818)
.text$x:00003870                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003870
.text$x:00003870 ; =============== S U B R O U T I N E =======================================
.text$x:00003870
.text$x:00003870
.text$x:00003870 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:00003870                                         ; DATA XREF: .xdata$x:0000787Co
.text$x:00003870                 mov     ecx, [ebp-10h]
.text$x:00003873                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00003873 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:00003873
.text$x:00003878
.text$x:00003878 ; =============== S U B R O U T I N E =======================================
.text$x:00003878
.text$x:00003878
.text$x:00003878 __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:00003878                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:00003878
.text$x:00003878 arg_4           = dword ptr  8
.text$x:00003878
.text$x:00003878                 mov     edx, [esp+arg_4]
.text$x:0000387C                 lea     eax, [edx+0Ch]
.text$x:0000387F                 mov     ecx, [edx-8]
.text$x:00003882                 xor     ecx, eax
.text$x:00003884                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003889                 mov     eax, offset __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:0000388E                 jmp     ___CxxFrameHandler3
.text$x:0000388E __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:0000388E
.text$x:0000388E ; ---------------------------------------------------------------------------
.text$x:00003893                 align 4
.text$x:00003893 _text$x         ends
.text$x:00003893
.text$mn:00003894 ; ===========================================================================
.text$mn:00003894
.text$mn:00003894 ; Segment type: Pure code
.text$mn:00003894 ; Segment permissions: Read/Execute
.text$mn:00003894 _text$mn        segment para public 'CODE' use32
.text$mn:00003894                 assume cs:_text$mn
.text$mn:00003894                 ;org 3894h
.text$mn:00003894 ; COMDAT (pick any)
.text$mn:00003894                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003894
.text$mn:00003894 ; =============== S U B R O U T I N E =======================================
.text$mn:00003894
.text$mn:00003894 ; Attributes: bp-based frame
.text$mn:00003894
.text$mn:00003894 ; public: __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::~vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:00003894                 public ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$mn:00003894 ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ proc near
.text$mn:00003894                                         ; CODE XREF: FileDialog::~FileDialog(void)+70p
.text$mn:00003894                                         ; __unwindfunclet$??0FileDialog@@QAE@PAUHWND__@@PAUHINSTANCE__@@@Z$0+9j ...
.text$mn:00003894
.text$mn:00003894 var_10          = dword ptr -10h
.text$mn:00003894 var_C           = dword ptr -0Ch
.text$mn:00003894 var_4           = dword ptr -4
.text$mn:00003894
.text$mn:00003894                 push    ebp
.text$mn:00003895                 mov     ebp, esp
.text$mn:00003897                 push    0FFFFFFFFh
.text$mn:00003899                 push    offset __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$mn:0000389E                 mov     eax, large fs:0
.text$mn:000038A4                 push    eax
.text$mn:000038A5                 push    ecx
.text$mn:000038A6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000038AB                 xor     eax, ebp
.text$mn:000038AD                 push    eax
.text$mn:000038AE                 lea     eax, [ebp+var_C]
.text$mn:000038B1                 mov     large fs:0, eax
.text$mn:000038B7                 mov     [ebp+var_10], ecx
.text$mn:000038BA                 mov     [ebp+var_4], 0
.text$mn:000038C1                 mov     ecx, [ebp+var_10]
.text$mn:000038C4                 call    ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Tidy(void)
.text$mn:000038C9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000038D0                 mov     ecx, [ebp+var_10]
.text$mn:000038D3                 call    ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:000038D8                 mov     ecx, [ebp+var_C]
.text$mn:000038DB                 mov     large fs:0, ecx
.text$mn:000038E2                 pop     ecx
.text$mn:000038E3                 mov     esp, ebp
.text$mn:000038E5                 pop     ebp
.text$mn:000038E6                 retn
.text$mn:000038E6 ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ endp
.text$mn:000038E6
.text$mn:000038E6 ; ---------------------------------------------------------------------------
.text$mn:000038E7                 align 4
.text$mn:000038E7 _text$mn        ends
.text$mn:000038E7
.text$x:000038E8 ; ===========================================================================
.text$x:000038E8
.text$x:000038E8 ; Segment type: Pure code
.text$x:000038E8 ; Segment permissions: Read/Execute
.text$x:000038E8 _text$x         segment para public 'CODE' use32
.text$x:000038E8                 assume cs:_text$x
.text$x:000038E8                 ;org 38E8h
.text$x:000038E8 ; COMDAT (pick associative to section at 3894)
.text$x:000038E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000038E8
.text$x:000038E8 ; =============== S U B R O U T I N E =======================================
.text$x:000038E8
.text$x:000038E8
.text$x:000038E8 __unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 proc near
.text$x:000038E8                                         ; DATA XREF: .xdata$x:00007E30o
.text$x:000038E8                 mov     ecx, [ebp-10h]
.text$x:000038EB                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:000038EB __unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 endp
.text$x:000038EB
.text$x:000038F0
.text$x:000038F0 ; =============== S U B R O U T I N E =======================================
.text$x:000038F0
.text$x:000038F0
.text$x:000038F0 __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ proc near
.text$x:000038F0                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:000038F0
.text$x:000038F0 arg_4           = dword ptr  8
.text$x:000038F0
.text$x:000038F0                 mov     edx, [esp+arg_4]
.text$x:000038F4                 lea     eax, [edx+0Ch]
.text$x:000038F7                 mov     ecx, [edx-8]
.text$x:000038FA                 xor     ecx, eax
.text$x:000038FC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003901                 mov     eax, offset __ehfuncinfo$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$x:00003906                 jmp     ___CxxFrameHandler3
.text$x:00003906 __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ endp
.text$x:00003906
.text$x:00003906 ; ---------------------------------------------------------------------------
.text$x:0000390B                 align 4
.text$x:0000390B _text$x         ends
.text$x:0000390B
.text$mn:0000390C ; ===========================================================================
.text$mn:0000390C
.text$mn:0000390C ; Segment type: Pure code
.text$mn:0000390C ; Segment permissions: Read/Execute
.text$mn:0000390C _text$mn        segment para public 'CODE' use32
.text$mn:0000390C                 assume cs:_text$mn
.text$mn:0000390C                 ;org 390Ch
.text$mn:0000390C ; COMDAT (pick any)
.text$mn:0000390C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000390C
.text$mn:0000390C ; =============== S U B R O U T I N E =======================================
.text$mn:0000390C
.text$mn:0000390C ; Attributes: bp-based frame
.text$mn:0000390C
.text$mn:0000390C ; _DWORD __thiscall std::_Container_base12::~_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:0000390C                 public ??1_Container_base12@std@@QAE@XZ
.text$mn:0000390C ??1_Container_base12@std@@QAE@XZ proc near
.text$mn:0000390C                                         ; CODE XREF: __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0+3j
.text$mn:0000390C                                         ; __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0+3j ...
.text$mn:0000390C
.text$mn:0000390C var_4           = dword ptr -4
.text$mn:0000390C
.text$mn:0000390C                 push    ebp
.text$mn:0000390D                 mov     ebp, esp
.text$mn:0000390F                 push    ecx
.text$mn:00003910                 mov     [ebp+var_4], ecx
.text$mn:00003913                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003916                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000391B                 mov     esp, ebp
.text$mn:0000391D                 pop     ebp
.text$mn:0000391E                 retn
.text$mn:0000391E ??1_Container_base12@std@@QAE@XZ endp
.text$mn:0000391E
.text$mn:0000391E ; ---------------------------------------------------------------------------
.text$mn:0000391F                 align 10h
.text$mn:0000391F _text$mn        ends
.text$mn:0000391F
.text$mn:00003920 ; ===========================================================================
.text$mn:00003920
.text$mn:00003920 ; Segment type: Pure code
.text$mn:00003920 ; Segment permissions: Read/Execute
.text$mn:00003920 _text$mn        segment para public 'CODE' use32
.text$mn:00003920                 assume cs:_text$mn
.text$mn:00003920                 ;org 3920h
.text$mn:00003920 ; COMDAT (pick any)
.text$mn:00003920                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003920
.text$mn:00003920 ; =============== S U B R O U T I N E =======================================
.text$mn:00003920
.text$mn:00003920 ; Attributes: bp-based frame
.text$mn:00003920
.text$mn:00003920 ; _DWORD __thiscall std::_Generic_error_category::~_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:00003920                 public ??1_Generic_error_category@std@@UAE@XZ
.text$mn:00003920 ??1_Generic_error_category@std@@UAE@XZ proc near
.text$mn:00003920                                         ; CODE XREF: __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0+3j
.text$mn:00003920                                         ; __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0+3j ...
.text$mn:00003920
.text$mn:00003920 var_10          = dword ptr -10h
.text$mn:00003920 var_C           = dword ptr -0Ch
.text$mn:00003920 var_4           = dword ptr -4
.text$mn:00003920
.text$mn:00003920                 push    ebp
.text$mn:00003921                 mov     ebp, esp
.text$mn:00003923                 push    0FFFFFFFFh
.text$mn:00003925                 push    offset __ehhandler$??1_Generic_error_category@std@@UAE@XZ
.text$mn:0000392A                 mov     eax, large fs:0
.text$mn:00003930                 push    eax
.text$mn:00003931                 push    ecx
.text$mn:00003932                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003937                 xor     eax, ebp
.text$mn:00003939                 push    eax
.text$mn:0000393A                 lea     eax, [ebp+var_C]
.text$mn:0000393D                 mov     large fs:0, eax
.text$mn:00003943                 mov     [ebp+var_10], ecx
.text$mn:00003946                 mov     [ebp+var_4], 0
.text$mn:0000394D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003954                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003957                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:0000395C                 mov     ecx, [ebp+var_C]
.text$mn:0000395F                 mov     large fs:0, ecx
.text$mn:00003966                 pop     ecx
.text$mn:00003967                 mov     esp, ebp
.text$mn:00003969                 pop     ebp
.text$mn:0000396A                 retn
.text$mn:0000396A ??1_Generic_error_category@std@@UAE@XZ endp
.text$mn:0000396A
.text$mn:0000396A ; ---------------------------------------------------------------------------
.text$mn:0000396B                 align 4
.text$mn:0000396B _text$mn        ends
.text$mn:0000396B
.text$x:0000396C ; ===========================================================================
.text$x:0000396C
.text$x:0000396C ; Segment type: Pure code
.text$x:0000396C ; Segment permissions: Read/Execute
.text$x:0000396C _text$x         segment para public 'CODE' use32
.text$x:0000396C                 assume cs:_text$x
.text$x:0000396C                 ;org 396Ch
.text$x:0000396C ; COMDAT (pick associative to section at 3920)
.text$x:0000396C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000396C
.text$x:0000396C ; =============== S U B R O U T I N E =======================================
.text$x:0000396C
.text$x:0000396C
.text$x:0000396C __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 proc near
.text$x:0000396C                                         ; DATA XREF: .xdata$x:00007588o
.text$x:0000396C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000396F                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:0000396F __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 endp
.text$x:0000396F
.text$x:00003974
.text$x:00003974 ; =============== S U B R O U T I N E =======================================
.text$x:00003974
.text$x:00003974
.text$x:00003974 __ehhandler$??1_Generic_error_category@std@@UAE@XZ proc near
.text$x:00003974                                         ; DATA XREF: std::_Generic_error_category::~_Generic_error_category(void)+5o
.text$x:00003974
.text$x:00003974 arg_4           = dword ptr  8
.text$x:00003974
.text$x:00003974                 mov     edx, [esp+arg_4]
.text$x:00003978                 lea     eax, [edx+0Ch]
.text$x:0000397B                 mov     ecx, [edx-8]
.text$x:0000397E                 xor     ecx, eax
.text$x:00003980                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003985                 mov     eax, offset __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ
.text$x:0000398A                 jmp     ___CxxFrameHandler3
.text$x:0000398A __ehhandler$??1_Generic_error_category@std@@UAE@XZ endp
.text$x:0000398A
.text$x:0000398A ; ---------------------------------------------------------------------------
.text$x:0000398F                 align 10h
.text$x:0000398F _text$x         ends
.text$x:0000398F
.text$mn:00003990 ; ===========================================================================
.text$mn:00003990
.text$mn:00003990 ; Segment type: Pure code
.text$mn:00003990 ; Segment permissions: Read/Execute
.text$mn:00003990 _text$mn        segment para public 'CODE' use32
.text$mn:00003990                 assume cs:_text$mn
.text$mn:00003990                 ;org 3990h
.text$mn:00003990 ; COMDAT (pick any)
.text$mn:00003990                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003990
.text$mn:00003990 ; =============== S U B R O U T I N E =======================================
.text$mn:00003990
.text$mn:00003990 ; Attributes: bp-based frame
.text$mn:00003990
.text$mn:00003990 ; _DWORD __thiscall std::_Iostream_error_category::~_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:00003990                 public ??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00003990 ??1_Iostream_error_category@std@@UAE@XZ proc near
.text$mn:00003990                                         ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:00003990                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:00003990
.text$mn:00003990 var_10          = dword ptr -10h
.text$mn:00003990 var_C           = dword ptr -0Ch
.text$mn:00003990 var_4           = dword ptr -4
.text$mn:00003990
.text$mn:00003990                 push    ebp
.text$mn:00003991                 mov     ebp, esp
.text$mn:00003993                 push    0FFFFFFFFh
.text$mn:00003995                 push    offset __ehhandler$??1_Iostream_error_category@std@@UAE@XZ
.text$mn:0000399A                 mov     eax, large fs:0
.text$mn:000039A0                 push    eax
.text$mn:000039A1                 push    ecx
.text$mn:000039A2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000039A7                 xor     eax, ebp
.text$mn:000039A9                 push    eax
.text$mn:000039AA                 lea     eax, [ebp+var_C]
.text$mn:000039AD                 mov     large fs:0, eax
.text$mn:000039B3                 mov     [ebp+var_10], ecx
.text$mn:000039B6                 mov     [ebp+var_4], 0
.text$mn:000039BD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000039C4                 mov     ecx, [ebp+var_10] ; this
.text$mn:000039C7                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:000039CC                 mov     ecx, [ebp+var_C]
.text$mn:000039CF                 mov     large fs:0, ecx
.text$mn:000039D6                 pop     ecx
.text$mn:000039D7                 mov     esp, ebp
.text$mn:000039D9                 pop     ebp
.text$mn:000039DA                 retn
.text$mn:000039DA ??1_Iostream_error_category@std@@UAE@XZ endp
.text$mn:000039DA
.text$mn:000039DA ; ---------------------------------------------------------------------------
.text$mn:000039DB                 align 4
.text$mn:000039DB _text$mn        ends
.text$mn:000039DB
.text$x:000039DC ; ===========================================================================
.text$x:000039DC
.text$x:000039DC ; Segment type: Pure code
.text$x:000039DC ; Segment permissions: Read/Execute
.text$x:000039DC _text$x         segment para public 'CODE' use32
.text$x:000039DC                 assume cs:_text$x
.text$x:000039DC                 ;org 39DCh
.text$x:000039DC ; COMDAT (pick associative to section at 3990)
.text$x:000039DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000039DC
.text$x:000039DC ; =============== S U B R O U T I N E =======================================
.text$x:000039DC
.text$x:000039DC
.text$x:000039DC __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 proc near
.text$x:000039DC                                         ; DATA XREF: .xdata$x:0000760Co
.text$x:000039DC                 mov     ecx, [ebp-10h]  ; this
.text$x:000039DF                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:000039DF __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 endp
.text$x:000039DF
.text$x:000039E4
.text$x:000039E4 ; =============== S U B R O U T I N E =======================================
.text$x:000039E4
.text$x:000039E4
.text$x:000039E4 __ehhandler$??1_Iostream_error_category@std@@UAE@XZ proc near
.text$x:000039E4                                         ; DATA XREF: std::_Iostream_error_category::~_Iostream_error_category(void)+5o
.text$x:000039E4
.text$x:000039E4 arg_4           = dword ptr  8
.text$x:000039E4
.text$x:000039E4                 mov     edx, [esp+arg_4]
.text$x:000039E8                 lea     eax, [edx+0Ch]
.text$x:000039EB                 mov     ecx, [edx-8]
.text$x:000039EE                 xor     ecx, eax
.text$x:000039F0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000039F5                 mov     eax, offset __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ
.text$x:000039FA                 jmp     ___CxxFrameHandler3
.text$x:000039FA __ehhandler$??1_Iostream_error_category@std@@UAE@XZ endp
.text$x:000039FA
.text$x:000039FA ; ---------------------------------------------------------------------------
.text$x:000039FF                 align 10h
.text$x:000039FF _text$x         ends
.text$x:000039FF
.text$mn:00003A00 ; ===========================================================================
.text$mn:00003A00
.text$mn:00003A00 ; Segment type: Pure code
.text$mn:00003A00 ; Segment permissions: Read/Execute
.text$mn:00003A00 _text$mn        segment para public 'CODE' use32
.text$mn:00003A00                 assume cs:_text$mn
.text$mn:00003A00                 ;org 3A00h
.text$mn:00003A00 ; COMDAT (pick any)
.text$mn:00003A00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003A00
.text$mn:00003A00 ; =============== S U B R O U T I N E =======================================
.text$mn:00003A00
.text$mn:00003A00 ; Attributes: bp-based frame
.text$mn:00003A00
.text$mn:00003A00 ; _DWORD __thiscall std::_Iterator_base12::~_Iterator_base12(std::_Iterator_base12 *__hidden this)
.text$mn:00003A00                 public ??1_Iterator_base12@std@@QAE@XZ
.text$mn:00003A00 ??1_Iterator_base12@std@@QAE@XZ proc near
.text$mn:00003A00                                         ; CODE XREF: __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0+3j
.text$mn:00003A00                                         ; __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0+3j ...
.text$mn:00003A00
.text$mn:00003A00 var_14          = byte ptr -14h
.text$mn:00003A00 var_10          = dword ptr -10h
.text$mn:00003A00 var_C           = dword ptr -0Ch
.text$mn:00003A00 var_4           = dword ptr -4
.text$mn:00003A00
.text$mn:00003A00                 push    ebp
.text$mn:00003A01                 mov     ebp, esp
.text$mn:00003A03                 push    0FFFFFFFFh
.text$mn:00003A05                 push    offset __ehhandler$??1_Iterator_base12@std@@QAE@XZ
.text$mn:00003A0A                 mov     eax, large fs:0
.text$mn:00003A10                 push    eax
.text$mn:00003A11                 sub     esp, 8
.text$mn:00003A14                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003A19                 xor     eax, ebp
.text$mn:00003A1B                 push    eax
.text$mn:00003A1C                 lea     eax, [ebp+var_C]
.text$mn:00003A1F                 mov     large fs:0, eax
.text$mn:00003A25                 mov     [ebp+var_10], ecx
.text$mn:00003A28                 push    3               ; int
.text$mn:00003A2A                 lea     ecx, [ebp+var_14] ; this
.text$mn:00003A2D                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00003A32                 mov     [ebp+var_4], 0
.text$mn:00003A39                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003A3C                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00003A41                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003A48                 lea     ecx, [ebp+var_14] ; this
.text$mn:00003A4B                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00003A50                 mov     ecx, [ebp+var_C]
.text$mn:00003A53                 mov     large fs:0, ecx
.text$mn:00003A5A                 pop     ecx
.text$mn:00003A5B                 mov     esp, ebp
.text$mn:00003A5D                 pop     ebp
.text$mn:00003A5E                 retn
.text$mn:00003A5E ??1_Iterator_base12@std@@QAE@XZ endp
.text$mn:00003A5E
.text$mn:00003A5E ; ---------------------------------------------------------------------------
.text$mn:00003A5F                 align 10h
.text$mn:00003A5F _text$mn        ends
.text$mn:00003A5F
.text$x:00003A60 ; ===========================================================================
.text$x:00003A60
.text$x:00003A60 ; Segment type: Pure code
.text$x:00003A60 ; Segment permissions: Read/Execute
.text$x:00003A60 _text$x         segment para public 'CODE' use32
.text$x:00003A60                 assume cs:_text$x
.text$x:00003A60                 ;org 3A60h
.text$x:00003A60 ; COMDAT (pick associative to section at 3A00)
.text$x:00003A60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003A60
.text$x:00003A60 ; =============== S U B R O U T I N E =======================================
.text$x:00003A60
.text$x:00003A60
.text$x:00003A60 __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0 proc near
.text$x:00003A60                                         ; DATA XREF: .xdata$x:0000733Co
.text$x:00003A60                 lea     ecx, [ebp-14h]  ; this
.text$x:00003A63                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00003A63 __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0 endp
.text$x:00003A63
.text$x:00003A68
.text$x:00003A68 ; =============== S U B R O U T I N E =======================================
.text$x:00003A68
.text$x:00003A68
.text$x:00003A68 __ehhandler$??1_Iterator_base12@std@@QAE@XZ proc near
.text$x:00003A68                                         ; DATA XREF: std::_Iterator_base12::~_Iterator_base12(void)+5o
.text$x:00003A68
.text$x:00003A68 arg_4           = dword ptr  8
.text$x:00003A68
.text$x:00003A68                 mov     edx, [esp+arg_4]
.text$x:00003A6C                 lea     eax, [edx+0Ch]
.text$x:00003A6F                 mov     ecx, [edx-0Ch]
.text$x:00003A72                 xor     ecx, eax
.text$x:00003A74                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003A79                 mov     eax, offset __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
.text$x:00003A7E                 jmp     ___CxxFrameHandler3
.text$x:00003A7E __ehhandler$??1_Iterator_base12@std@@QAE@XZ endp
.text$x:00003A7E
.text$x:00003A7E ; ---------------------------------------------------------------------------
.text$x:00003A83                 align 4
.text$x:00003A83 _text$x         ends
.text$x:00003A83
.text$mn:00003A84 ; ===========================================================================
.text$mn:00003A84
.text$mn:00003A84 ; Segment type: Pure code
.text$mn:00003A84 ; Segment permissions: Read/Execute
.text$mn:00003A84 _text$mn        segment para public 'CODE' use32
.text$mn:00003A84                 assume cs:_text$mn
.text$mn:00003A84                 ;org 3A84h
.text$mn:00003A84 ; COMDAT (pick any)
.text$mn:00003A84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003A84
.text$mn:00003A84 ; =============== S U B R O U T I N E =======================================
.text$mn:00003A84
.text$mn:00003A84 ; Attributes: bp-based frame
.text$mn:00003A84
.text$mn:00003A84 ; _DWORD __thiscall std::_System_error_category::~_System_error_category(std::_System_error_category *__hidden this)
.text$mn:00003A84                 public ??1_System_error_category@std@@UAE@XZ
.text$mn:00003A84 ??1_System_error_category@std@@UAE@XZ proc near
.text$mn:00003A84                                         ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:00003A84                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:00003A84
.text$mn:00003A84 var_10          = dword ptr -10h
.text$mn:00003A84 var_C           = dword ptr -0Ch
.text$mn:00003A84 var_4           = dword ptr -4
.text$mn:00003A84
.text$mn:00003A84                 push    ebp
.text$mn:00003A85                 mov     ebp, esp
.text$mn:00003A87                 push    0FFFFFFFFh
.text$mn:00003A89                 push    offset __ehhandler$??1_System_error_category@std@@UAE@XZ
.text$mn:00003A8E                 mov     eax, large fs:0
.text$mn:00003A94                 push    eax
.text$mn:00003A95                 push    ecx
.text$mn:00003A96                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003A9B                 xor     eax, ebp
.text$mn:00003A9D                 push    eax
.text$mn:00003A9E                 lea     eax, [ebp+var_C]
.text$mn:00003AA1                 mov     large fs:0, eax
.text$mn:00003AA7                 mov     [ebp+var_10], ecx
.text$mn:00003AAA                 mov     [ebp+var_4], 0
.text$mn:00003AB1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003AB8                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003ABB                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00003AC0                 mov     ecx, [ebp+var_C]
.text$mn:00003AC3                 mov     large fs:0, ecx
.text$mn:00003ACA                 pop     ecx
.text$mn:00003ACB                 mov     esp, ebp
.text$mn:00003ACD                 pop     ebp
.text$mn:00003ACE                 retn
.text$mn:00003ACE ??1_System_error_category@std@@UAE@XZ endp
.text$mn:00003ACE
.text$mn:00003ACE ; ---------------------------------------------------------------------------
.text$mn:00003ACF                 align 10h
.text$mn:00003ACF _text$mn        ends
.text$mn:00003ACF
.text$x:00003AD0 ; ===========================================================================
.text$x:00003AD0
.text$x:00003AD0 ; Segment type: Pure code
.text$x:00003AD0 ; Segment permissions: Read/Execute
.text$x:00003AD0 _text$x         segment para public 'CODE' use32
.text$x:00003AD0                 assume cs:_text$x
.text$x:00003AD0                 ;org 3AD0h
.text$x:00003AD0 ; COMDAT (pick associative to section at 3A84)
.text$x:00003AD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003AD0
.text$x:00003AD0 ; =============== S U B R O U T I N E =======================================
.text$x:00003AD0
.text$x:00003AD0
.text$x:00003AD0 __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 proc near
.text$x:00003AD0                                         ; DATA XREF: .xdata$x:00007690o
.text$x:00003AD0                 mov     ecx, [ebp-10h]  ; this
.text$x:00003AD3                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00003AD3 __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 endp
.text$x:00003AD3
.text$x:00003AD8
.text$x:00003AD8 ; =============== S U B R O U T I N E =======================================
.text$x:00003AD8
.text$x:00003AD8
.text$x:00003AD8 __ehhandler$??1_System_error_category@std@@UAE@XZ proc near
.text$x:00003AD8                                         ; DATA XREF: std::_System_error_category::~_System_error_category(void)+5o
.text$x:00003AD8
.text$x:00003AD8 arg_4           = dword ptr  8
.text$x:00003AD8
.text$x:00003AD8                 mov     edx, [esp+arg_4]
.text$x:00003ADC                 lea     eax, [edx+0Ch]
.text$x:00003ADF                 mov     ecx, [edx-8]
.text$x:00003AE2                 xor     ecx, eax
.text$x:00003AE4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003AE9                 mov     eax, offset __ehfuncinfo$??1_System_error_category@std@@UAE@XZ
.text$x:00003AEE                 jmp     ___CxxFrameHandler3
.text$x:00003AEE __ehhandler$??1_System_error_category@std@@UAE@XZ endp
.text$x:00003AEE
.text$x:00003AEE ; ---------------------------------------------------------------------------
.text$x:00003AF3                 align 4
.text$x:00003AF3 _text$x         ends
.text$x:00003AF3
.text$mn:00003AF4 ; ===========================================================================
.text$mn:00003AF4
.text$mn:00003AF4 ; Segment type: Pure code
.text$mn:00003AF4 ; Segment permissions: Read/Execute
.text$mn:00003AF4 _text$mn        segment para public 'CODE' use32
.text$mn:00003AF4                 assume cs:_text$mn
.text$mn:00003AF4                 ;org 3AF4h
.text$mn:00003AF4 ; COMDAT (pick any)
.text$mn:00003AF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003AF4
.text$mn:00003AF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00003AF4
.text$mn:00003AF4 ; Attributes: bp-based frame
.text$mn:00003AF4
.text$mn:00003AF4 ; _DWORD __thiscall std::error_category::~error_category(std::error_category *__hidden this)
.text$mn:00003AF4                 public ??1error_category@std@@UAE@XZ
.text$mn:00003AF4 ??1error_category@std@@UAE@XZ proc near ; CODE XREF: __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0+3j
.text$mn:00003AF4                                         ; std::_Generic_error_category::~_Generic_error_category(void)+37p ...
.text$mn:00003AF4
.text$mn:00003AF4 var_4           = dword ptr -4
.text$mn:00003AF4
.text$mn:00003AF4                 push    ebp
.text$mn:00003AF5                 mov     ebp, esp
.text$mn:00003AF7                 push    ecx
.text$mn:00003AF8                 mov     [ebp+var_4], ecx
.text$mn:00003AFB                 mov     eax, [ebp+var_4]
.text$mn:00003AFE                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:00003B04                 mov     esp, ebp
.text$mn:00003B06                 pop     ebp
.text$mn:00003B07                 retn
.text$mn:00003B07 ??1error_category@std@@UAE@XZ endp
.text$mn:00003B07
.text$mn:00003B07 _text$mn        ends
.text$mn:00003B07
.text$mn:00003B08 ; ===========================================================================
.text$mn:00003B08
.text$mn:00003B08 ; Segment type: Pure code
.text$mn:00003B08 ; Segment permissions: Read/Execute
.text$mn:00003B08 _text$mn        segment para public 'CODE' use32
.text$mn:00003B08                 assume cs:_text$mn
.text$mn:00003B08                 ;org 3B08h
.text$mn:00003B08 ; COMDAT (pick any)
.text$mn:00003B08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003B08
.text$mn:00003B08 ; =============== S U B R O U T I N E =======================================
.text$mn:00003B08
.text$mn:00003B08 ; Attributes: bp-based frame
.text$mn:00003B08
.text$mn:00003B08 ; void *__cdecl operator new(unsigned int, void *)
.text$mn:00003B08                 public ??2@YAPAXIPAX@Z
.text$mn:00003B08 ??2@YAPAXIPAX@Z proc near               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+2Ep
.text$mn:00003B08                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+2Ep ...
.text$mn:00003B08
.text$mn:00003B08 arg_4           = dword ptr  0Ch
.text$mn:00003B08
.text$mn:00003B08                 push    ebp
.text$mn:00003B09                 mov     ebp, esp
.text$mn:00003B0B                 mov     eax, [ebp+arg_4]
.text$mn:00003B0E                 pop     ebp
.text$mn:00003B0F                 retn
.text$mn:00003B0F ??2@YAPAXIPAX@Z endp
.text$mn:00003B0F
.text$mn:00003B0F _text$mn        ends
.text$mn:00003B0F
.text$mn:00003B10 ; ===========================================================================
.text$mn:00003B10
.text$mn:00003B10 ; Segment type: Pure code
.text$mn:00003B10 ; Segment permissions: Read/Execute
.text$mn:00003B10 _text$mn        segment para public 'CODE' use32
.text$mn:00003B10                 assume cs:_text$mn
.text$mn:00003B10                 ;org 3B10h
.text$mn:00003B10 ; COMDAT (pick any)
.text$mn:00003B10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003B10
.text$mn:00003B10 ; =============== S U B R O U T I N E =======================================
.text$mn:00003B10
.text$mn:00003B10 ; Attributes: bp-based frame
.text$mn:00003B10
.text$mn:00003B10 ; void __cdecl operator delete(void *)
.text$mn:00003B10                 public ??3@YAXPAX0@Z
.text$mn:00003B10 ??3@YAXPAX0@Z   proc near               ; CODE XREF: __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0+8p
.text$mn:00003B10                                         ; __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0+8p ...
.text$mn:00003B10                 push    ebp
.text$mn:00003B11                 mov     ebp, esp
.text$mn:00003B13                 pop     ebp
.text$mn:00003B14                 retn
.text$mn:00003B14 ??3@YAXPAX0@Z   endp
.text$mn:00003B14
.text$mn:00003B14 ; ---------------------------------------------------------------------------
.text$mn:00003B15                 align 4
.text$mn:00003B15 _text$mn        ends
.text$mn:00003B15
.text$mn:00003B18 ; ===========================================================================
.text$mn:00003B18
.text$mn:00003B18 ; Segment type: Pure code
.text$mn:00003B18 ; Segment permissions: Read/Execute
.text$mn:00003B18 _text$mn        segment para public 'CODE' use32
.text$mn:00003B18                 assume cs:_text$mn
.text$mn:00003B18                 ;org 3B18h
.text$mn:00003B18 ; COMDAT (pick any)
.text$mn:00003B18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003B18
.text$mn:00003B18 ; =============== S U B R O U T I N E =======================================
.text$mn:00003B18
.text$mn:00003B18 ; Attributes: bp-based frame
.text$mn:00003B18
.text$mn:00003B18 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator=(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:00003B18                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.text$mn:00003B18 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z proc near
.text$mn:00003B18                                         ; CODE XREF: FileDialog::setExtFilter(wchar_t const *,wchar_t const *,...)+CAp
.text$mn:00003B18                                         ; FileDialog::run(HWND__ *,uint,uint,long)+102p ...
.text$mn:00003B18
.text$mn:00003B18 var_2C          = dword ptr -2Ch
.text$mn:00003B18 var_28          = dword ptr -28h
.text$mn:00003B18 var_24          = dword ptr -24h
.text$mn:00003B18 var_20          = dword ptr -20h
.text$mn:00003B18 var_1C          = dword ptr -1Ch
.text$mn:00003B18 var_18          = dword ptr -18h
.text$mn:00003B18 var_14          = dword ptr -14h
.text$mn:00003B18 var_F           = byte ptr -0Fh
.text$mn:00003B18 var_E           = byte ptr -0Eh
.text$mn:00003B18 var_D           = byte ptr -0Dh
.text$mn:00003B18 var_C           = dword ptr -0Ch
.text$mn:00003B18 var_4           = dword ptr -4
.text$mn:00003B18 arg_0           = dword ptr  8
.text$mn:00003B18
.text$mn:00003B18                 push    ebp
.text$mn:00003B19                 mov     ebp, esp
.text$mn:00003B1B                 push    0FFFFFFFFh
.text$mn:00003B1D                 push    offset __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.text$mn:00003B22                 mov     eax, large fs:0
.text$mn:00003B28                 push    eax
.text$mn:00003B29                 sub     esp, 20h
.text$mn:00003B2C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003B31                 xor     eax, ebp
.text$mn:00003B33                 push    eax
.text$mn:00003B34                 lea     eax, [ebp+var_C]
.text$mn:00003B37                 mov     large fs:0, eax
.text$mn:00003B3D                 mov     [ebp+var_14], ecx
.text$mn:00003B40                 mov     eax, [ebp+var_14]
.text$mn:00003B43                 cmp     eax, [ebp+arg_0]
.text$mn:00003B46                 jz      loc_3BFF
.text$mn:00003B4C                 push    0
.text$mn:00003B4E                 push    1
.text$mn:00003B50                 mov     ecx, [ebp+var_14]
.text$mn:00003B53                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00003B58                 xor     ecx, ecx
.text$mn:00003B5A                 jz      short loc_3B71
.text$mn:00003B5C                 lea     edx, [ebp+var_D]
.text$mn:00003B5F                 push    edx
.text$mn:00003B60                 mov     ecx, [ebp+arg_0]
.text$mn:00003B63                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00003B68                 push    eax
.text$mn:00003B69                 mov     ecx, [ebp+var_14]
.text$mn:00003B6C                 call    ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Change_alloc(std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00003B71
.text$mn:00003B71 loc_3B71:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+42j
.text$mn:00003B71                 lea     eax, [ebp+var_E]
.text$mn:00003B74                 push    eax
.text$mn:00003B75                 mov     ecx, [ebp+arg_0]
.text$mn:00003B78                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00003B7D                 push    eax
.text$mn:00003B7E                 lea     ecx, [ebp+var_F]
.text$mn:00003B81                 push    ecx
.text$mn:00003B82                 mov     ecx, [ebp+var_14]
.text$mn:00003B85                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00003B8A                 push    eax
.text$mn:00003B8B                 call    ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00003B90                 add     esp, 8
.text$mn:00003B93                 movzx   edx, al
.text$mn:00003B96                 test    edx, edx
.text$mn:00003B98                 jz      short loc_3BEA
.text$mn:00003B9A                 sub     esp, 0Ch
.text$mn:00003B9D                 mov     eax, esp
.text$mn:00003B9F                 mov     [ebp+var_20], esp
.text$mn:00003BA2                 push    eax
.text$mn:00003BA3                 mov     ecx, [ebp+arg_0]
.text$mn:00003BA6                 call    ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)
.text$mn:00003BAB                 mov     [ebp+var_18], eax
.text$mn:00003BAE                 mov     ecx, [ebp+var_18]
.text$mn:00003BB1                 mov     [ebp+var_24], ecx
.text$mn:00003BB4                 mov     [ebp+var_4], 0
.text$mn:00003BBB                 sub     esp, 0Ch
.text$mn:00003BBE                 mov     edx, esp
.text$mn:00003BC0                 mov     [ebp+var_28], esp
.text$mn:00003BC3                 push    edx
.text$mn:00003BC4                 mov     ecx, [ebp+arg_0]
.text$mn:00003BC7                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:00003BCC                 mov     [ebp+var_1C], eax
.text$mn:00003BCF                 mov     eax, [ebp+var_1C]
.text$mn:00003BD2                 mov     [ebp+var_2C], eax
.text$mn:00003BD5                 mov     byte ptr [ebp+var_4], 1
.text$mn:00003BD9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003BE0                 mov     ecx, [ebp+var_14]
.text$mn:00003BE3                 call    ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:00003BE8                 jmp     short loc_3BFF
.text$mn:00003BEA ; ---------------------------------------------------------------------------
.text$mn:00003BEA
.text$mn:00003BEA loc_3BEA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+80j
.text$mn:00003BEA                 mov     ecx, [ebp+arg_0]
.text$mn:00003BED                 push    ecx
.text$mn:00003BEE                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00003BF3                 add     esp, 4
.text$mn:00003BF6                 push    eax
.text$mn:00003BF7                 mov     ecx, [ebp+var_14]
.text$mn:00003BFA                 call    ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00003BFF
.text$mn:00003BFF loc_3BFF:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Ej
.text$mn:00003BFF                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+D0j
.text$mn:00003BFF                 mov     eax, [ebp+var_14]
.text$mn:00003C02                 mov     ecx, [ebp+var_C]
.text$mn:00003C05                 mov     large fs:0, ecx
.text$mn:00003C0C                 pop     ecx
.text$mn:00003C0D                 mov     esp, ebp
.text$mn:00003C0F                 pop     ebp
.text$mn:00003C10                 retn    4
.text$mn:00003C10 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z endp
.text$mn:00003C10
.text$mn:00003C10 ; ---------------------------------------------------------------------------
.text$mn:00003C13                 align 4
.text$mn:00003C13 _text$mn        ends
.text$mn:00003C13
.text$x:00003C14 ; ===========================================================================
.text$x:00003C14
.text$x:00003C14 ; Segment type: Pure code
.text$x:00003C14 ; Segment permissions: Read/Execute
.text$x:00003C14 _text$x         segment para public 'CODE' use32
.text$x:00003C14                 assume cs:_text$x
.text$x:00003C14                 ;org 3C14h
.text$x:00003C14 ; COMDAT (pick associative to section at 3B18)
.text$x:00003C14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003C14
.text$x:00003C14 ; =============== S U B R O U T I N E =======================================
.text$x:00003C14
.text$x:00003C14
.text$x:00003C14 __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$0 proc near
.text$x:00003C14                                         ; DATA XREF: .xdata$x:00007848o
.text$x:00003C14                 mov     ecx, [ebp-20h]
.text$x:00003C17                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00003C17 __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$0 endp
.text$x:00003C17
.text$x:00003C1C
.text$x:00003C1C ; =============== S U B R O U T I N E =======================================
.text$x:00003C1C
.text$x:00003C1C
.text$x:00003C1C __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$1 proc near
.text$x:00003C1C                                         ; DATA XREF: .xdata$x:00007850o
.text$x:00003C1C                 mov     ecx, [ebp-28h]
.text$x:00003C1F                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00003C1F __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$1 endp
.text$x:00003C1F
.text$x:00003C24
.text$x:00003C24 ; =============== S U B R O U T I N E =======================================
.text$x:00003C24
.text$x:00003C24
.text$x:00003C24 __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z proc near
.text$x:00003C24                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5o
.text$x:00003C24
.text$x:00003C24 arg_4           = dword ptr  8
.text$x:00003C24
.text$x:00003C24                 mov     edx, [esp+arg_4]
.text$x:00003C28                 lea     eax, [edx+0Ch]
.text$x:00003C2B                 mov     ecx, [edx-24h]
.text$x:00003C2E                 xor     ecx, eax
.text$x:00003C30                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C35                 mov     eax, offset __ehfuncinfo$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.text$x:00003C3A                 jmp     ___CxxFrameHandler3
.text$x:00003C3A __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z endp
.text$x:00003C3A
.text$x:00003C3A ; ---------------------------------------------------------------------------
.text$x:00003C3F                 align 10h
.text$x:00003C3F _text$x         ends
.text$x:00003C3F
.text$mn:00003C40 ; ===========================================================================
.text$mn:00003C40
.text$mn:00003C40 ; Segment type: Pure code
.text$mn:00003C40 ; Segment permissions: Read/Execute
.text$mn:00003C40 _text$mn        segment para public 'CODE' use32
.text$mn:00003C40                 assume cs:_text$mn
.text$mn:00003C40                 ;org 3C40h
.text$mn:00003C40 ; COMDAT (pick any)
.text$mn:00003C40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003C40
.text$mn:00003C40 ; =============== S U B R O U T I N E =======================================
.text$mn:00003C40
.text$mn:00003C40 ; Attributes: bp-based frame
.text$mn:00003C40
.text$mn:00003C40 ; public: struct std::_Iterator_base12 & __thiscall std::_Iterator_base12::operator=(struct std::_Iterator_base12 const &)
.text$mn:00003C40                 public ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$mn:00003C40 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
.text$mn:00003C40                                         ; CODE XREF: std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)+21p
.text$mn:00003C40
.text$mn:00003C40 var_14          = byte ptr -14h
.text$mn:00003C40 var_10          = dword ptr -10h
.text$mn:00003C40 var_C           = dword ptr -0Ch
.text$mn:00003C40 var_4           = dword ptr -4
.text$mn:00003C40 arg_0           = dword ptr  8
.text$mn:00003C40
.text$mn:00003C40                 push    ebp
.text$mn:00003C41                 mov     ebp, esp
.text$mn:00003C43                 push    0FFFFFFFFh
.text$mn:00003C45                 push    offset __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$mn:00003C4A                 mov     eax, large fs:0
.text$mn:00003C50                 push    eax
.text$mn:00003C51                 sub     esp, 8
.text$mn:00003C54                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003C59                 xor     eax, ebp
.text$mn:00003C5B                 push    eax
.text$mn:00003C5C                 lea     eax, [ebp+var_C]
.text$mn:00003C5F                 mov     large fs:0, eax
.text$mn:00003C65                 mov     [ebp+var_10], ecx
.text$mn:00003C68                 mov     eax, [ebp+var_10]
.text$mn:00003C6B                 mov     ecx, [ebp+arg_0]
.text$mn:00003C6E                 mov     edx, [eax]
.text$mn:00003C70                 cmp     edx, [ecx]
.text$mn:00003C72                 jnz     short loc_3C76
.text$mn:00003C74                 jmp     short loc_3CB8
.text$mn:00003C76 ; ---------------------------------------------------------------------------
.text$mn:00003C76
.text$mn:00003C76 loc_3C76:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+32j
.text$mn:00003C76                 mov     eax, [ebp+arg_0]
.text$mn:00003C79                 cmp     dword ptr [eax], 0
.text$mn:00003C7C                 jz      short loc_3C90
.text$mn:00003C7E                 mov     ecx, [ebp+arg_0]
.text$mn:00003C81                 mov     edx, [ecx]
.text$mn:00003C83                 mov     eax, [edx]
.text$mn:00003C85                 push    eax             ; struct std::_Container_base12 *
.text$mn:00003C86                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003C89                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:00003C8E                 jmp     short loc_3CB8
.text$mn:00003C90 ; ---------------------------------------------------------------------------
.text$mn:00003C90
.text$mn:00003C90 loc_3C90:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+3Cj
.text$mn:00003C90                 push    3               ; int
.text$mn:00003C92                 lea     ecx, [ebp+var_14] ; this
.text$mn:00003C95                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00003C9A                 mov     [ebp+var_4], 0
.text$mn:00003CA1                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003CA4                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00003CA9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003CB0                 lea     ecx, [ebp+var_14] ; this
.text$mn:00003CB3                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00003CB8
.text$mn:00003CB8 loc_3CB8:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+34j
.text$mn:00003CB8                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+4Ej
.text$mn:00003CB8                 mov     eax, [ebp+var_10]
.text$mn:00003CBB                 mov     ecx, [ebp+var_C]
.text$mn:00003CBE                 mov     large fs:0, ecx
.text$mn:00003CC5                 pop     ecx
.text$mn:00003CC6                 mov     esp, ebp
.text$mn:00003CC8                 pop     ebp
.text$mn:00003CC9                 retn    4
.text$mn:00003CC9 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z endp
.text$mn:00003CC9
.text$mn:00003CC9 _text$mn        ends
.text$mn:00003CC9
.text$x:00003CCC ; ===========================================================================
.text$x:00003CCC
.text$x:00003CCC ; Segment type: Pure code
.text$x:00003CCC ; Segment permissions: Read/Execute
.text$x:00003CCC _text$x         segment para public 'CODE' use32
.text$x:00003CCC                 assume cs:_text$x
.text$x:00003CCC                 ;org 3CCCh
.text$x:00003CCC ; COMDAT (pick associative to section at 3C40)
.text$x:00003CCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003CCC
.text$x:00003CCC ; =============== S U B R O U T I N E =======================================
.text$x:00003CCC
.text$x:00003CCC
.text$x:00003CCC __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 proc near
.text$x:00003CCC                                         ; DATA XREF: .xdata$x:00007310o
.text$x:00003CCC                 lea     ecx, [ebp-14h]  ; this
.text$x:00003CCF                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00003CCF __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 endp
.text$x:00003CCF
.text$x:00003CD4
.text$x:00003CD4 ; =============== S U B R O U T I N E =======================================
.text$x:00003CD4
.text$x:00003CD4
.text$x:00003CD4 __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
.text$x:00003CD4                                         ; DATA XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+5o
.text$x:00003CD4
.text$x:00003CD4 arg_4           = dword ptr  8
.text$x:00003CD4
.text$x:00003CD4                 mov     edx, [esp+arg_4]
.text$x:00003CD8                 lea     eax, [edx+0Ch]
.text$x:00003CDB                 mov     ecx, [edx-0Ch]
.text$x:00003CDE                 xor     ecx, eax
.text$x:00003CE0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003CE5                 mov     eax, offset __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$x:00003CEA                 jmp     ___CxxFrameHandler3
.text$x:00003CEA __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z endp
.text$x:00003CEA
.text$x:00003CEA ; ---------------------------------------------------------------------------
.text$x:00003CEF                 align 10h
.text$x:00003CEF _text$x         ends
.text$x:00003CEF
.text$mn:00003CF0 ; ===========================================================================
.text$mn:00003CF0
.text$mn:00003CF0 ; Segment type: Pure code
.text$mn:00003CF0 ; Segment permissions: Read/Execute
.text$mn:00003CF0 _text$mn        segment para public 'CODE' use32
.text$mn:00003CF0                 assume cs:_text$mn
.text$mn:00003CF0                 ;org 3CF0h
.text$mn:00003CF0 ; COMDAT (pick any)
.text$mn:00003CF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003CF0
.text$mn:00003CF0 ; =============== S U B R O U T I N E =======================================
.text$mn:00003CF0
.text$mn:00003CF0 ; Attributes: bp-based frame
.text$mn:00003CF0
.text$mn:00003CF0 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_Iterator_base12 *)
.text$mn:00003CF0                 public ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z
.text$mn:00003CF0 ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z proc near
.text$mn:00003CF0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+39p
.text$mn:00003CF0
.text$mn:00003CF0 var_8           = dword ptr -8
.text$mn:00003CF0 var_4           = dword ptr -4
.text$mn:00003CF0 arg_0           = dword ptr  8
.text$mn:00003CF0
.text$mn:00003CF0                 push    ebp
.text$mn:00003CF1                 mov     ebp, esp
.text$mn:00003CF3                 sub     esp, 8
.text$mn:00003CF6                 mov     [ebp+var_4], ecx
.text$mn:00003CF9                 mov     eax, [ebp+arg_0]
.text$mn:00003CFC                 push    eax             ; std::_Iterator_base12 *
.text$mn:00003CFD                 mov     ecx, [ebp+var_4]
.text$mn:00003D00                 call    ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00003D05                 mov     ecx, [ebp+var_4]
.text$mn:00003D08                 mov     edx, [ebp+arg_0]
.text$mn:00003D0B                 mov     eax, [ecx+8]
.text$mn:00003D0E                 cmp     eax, [edx+8]
.text$mn:00003D11                 jnz     short loc_3D1C
.text$mn:00003D13                 mov     [ebp+var_8], 1
.text$mn:00003D1A                 jmp     short loc_3D23
.text$mn:00003D1C ; ---------------------------------------------------------------------------
.text$mn:00003D1C
.text$mn:00003D1C loc_3D1C:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+21j
.text$mn:00003D1C                 mov     [ebp+var_8], 0
.text$mn:00003D23
.text$mn:00003D23 loc_3D23:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+2Aj
.text$mn:00003D23                 mov     al, byte ptr [ebp+var_8]
.text$mn:00003D26                 mov     esp, ebp
.text$mn:00003D28                 pop     ebp
.text$mn:00003D29                 retn    4
.text$mn:00003D29 ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z endp
.text$mn:00003D29
.text$mn:00003D29 _text$mn        ends
.text$mn:00003D29
.text$mn:00003D2C ; ===========================================================================
.text$mn:00003D2C
.text$mn:00003D2C ; Segment type: Pure code
.text$mn:00003D2C ; Segment permissions: Read/Execute
.text$mn:00003D2C _text$mn        segment para public 'CODE' use32
.text$mn:00003D2C                 assume cs:_text$mn
.text$mn:00003D2C                 ;org 3D2Ch
.text$mn:00003D2C ; COMDAT (pick any)
.text$mn:00003D2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003D2C
.text$mn:00003D2C ; =============== S U B R O U T I N E =======================================
.text$mn:00003D2C
.text$mn:00003D2C ; Attributes: bp-based frame
.text$mn:00003D2C
.text$mn:00003D2C ; public: bool __thiscall std::error_category::operator==(class std::error_category const &)const
.text$mn:00003D2C                 public ??8error_category@std@@QBE_NABV01@@Z
.text$mn:00003D2C ??8error_category@std@@QBE_NABV01@@Z proc near
.text$mn:00003D2C                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+1Dp
.text$mn:00003D2C                                         ; std::error_category::equivalent(std::error_code const &,int)+15p
.text$mn:00003D2C
.text$mn:00003D2C var_8           = dword ptr -8
.text$mn:00003D2C var_4           = dword ptr -4
.text$mn:00003D2C arg_0           = dword ptr  8
.text$mn:00003D2C
.text$mn:00003D2C                 push    ebp
.text$mn:00003D2D                 mov     ebp, esp
.text$mn:00003D2F                 sub     esp, 8
.text$mn:00003D32                 mov     [ebp+var_8], ecx
.text$mn:00003D35                 mov     eax, [ebp+var_8]
.text$mn:00003D38                 cmp     eax, [ebp+arg_0]
.text$mn:00003D3B                 jnz     short loc_3D46
.text$mn:00003D3D                 mov     [ebp+var_4], 1
.text$mn:00003D44                 jmp     short loc_3D4D
.text$mn:00003D46 ; ---------------------------------------------------------------------------
.text$mn:00003D46
.text$mn:00003D46 loc_3D46:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+Fj
.text$mn:00003D46                 mov     [ebp+var_4], 0
.text$mn:00003D4D
.text$mn:00003D4D loc_3D4D:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+18j
.text$mn:00003D4D                 mov     al, byte ptr [ebp+var_4]
.text$mn:00003D50                 mov     esp, ebp
.text$mn:00003D52                 pop     ebp
.text$mn:00003D53                 retn    4
.text$mn:00003D53 ??8error_category@std@@QBE_NABV01@@Z endp
.text$mn:00003D53
.text$mn:00003D53 ; ---------------------------------------------------------------------------
.text$mn:00003D56                 align 4
.text$mn:00003D56 _text$mn        ends
.text$mn:00003D56
.text$mn:00003D58 ; ===========================================================================
.text$mn:00003D58
.text$mn:00003D58 ; Segment type: Pure code
.text$mn:00003D58 ; Segment permissions: Read/Execute
.text$mn:00003D58 _text$mn        segment para public 'CODE' use32
.text$mn:00003D58                 assume cs:_text$mn
.text$mn:00003D58                 ;org 3D58h
.text$mn:00003D58 ; COMDAT (pick any)
.text$mn:00003D58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003D58
.text$mn:00003D58 ; =============== S U B R O U T I N E =======================================
.text$mn:00003D58
.text$mn:00003D58 ; Attributes: bp-based frame
.text$mn:00003D58
.text$mn:00003D58 ; int __stdcall std::error_condition::operator==(std::error_condition *)
.text$mn:00003D58                 public ??8error_condition@std@@QBE_NABV01@@Z
.text$mn:00003D58 ??8error_condition@std@@QBE_NABV01@@Z proc near
.text$mn:00003D58                                         ; CODE XREF: std::error_category::equivalent(int,std::error_condition const &)+24p
.text$mn:00003D58
.text$mn:00003D58 var_8           = dword ptr -8
.text$mn:00003D58 var_4           = dword ptr -4
.text$mn:00003D58 arg_0           = dword ptr  8
.text$mn:00003D58
.text$mn:00003D58                 push    ebp
.text$mn:00003D59                 mov     ebp, esp
.text$mn:00003D5B                 sub     esp, 8
.text$mn:00003D5E                 push    esi
.text$mn:00003D5F                 mov     [ebp+var_4], ecx
.text$mn:00003D62                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003D65                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:00003D6A                 push    eax
.text$mn:00003D6B                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003D6E                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:00003D73                 mov     ecx, eax
.text$mn:00003D75                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:00003D7A                 movzx   eax, al
.text$mn:00003D7D                 test    eax, eax
.text$mn:00003D7F                 jz      short loc_3DA0
.text$mn:00003D81                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003D84                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:00003D89                 mov     esi, eax
.text$mn:00003D8B                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003D8E                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:00003D93                 cmp     esi, eax
.text$mn:00003D95                 jnz     short loc_3DA0
.text$mn:00003D97                 mov     [ebp+var_8], 1
.text$mn:00003D9E                 jmp     short loc_3DA7
.text$mn:00003DA0 ; ---------------------------------------------------------------------------
.text$mn:00003DA0
.text$mn:00003DA0 loc_3DA0:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+27j
.text$mn:00003DA0                                         ; std::error_condition::operator==(std::error_condition const &)+3Dj
.text$mn:00003DA0                 mov     [ebp+var_8], 0
.text$mn:00003DA7
.text$mn:00003DA7 loc_3DA7:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+46j
.text$mn:00003DA7                 mov     al, byte ptr [ebp+var_8]
.text$mn:00003DAA                 pop     esi
.text$mn:00003DAB                 mov     esp, ebp
.text$mn:00003DAD                 pop     ebp
.text$mn:00003DAE                 retn    4
.text$mn:00003DAE ??8error_condition@std@@QBE_NABV01@@Z endp
.text$mn:00003DAE
.text$mn:00003DAE ; ---------------------------------------------------------------------------
.text$mn:00003DB1                 align 4
.text$mn:00003DB1 _text$mn        ends
.text$mn:00003DB1
.text$mn:00003DB4 ; ===========================================================================
.text$mn:00003DB4
.text$mn:00003DB4 ; Segment type: Pure code
.text$mn:00003DB4 ; Segment permissions: Read/Execute
.text$mn:00003DB4 _text$mn        segment para public 'CODE' use32
.text$mn:00003DB4                 assume cs:_text$mn
.text$mn:00003DB4                 ;org 3DB4h
.text$mn:00003DB4 ; COMDAT (pick any)
.text$mn:00003DB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003DB4
.text$mn:00003DB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00003DB4
.text$mn:00003DB4 ; Attributes: bp-based frame
.text$mn:00003DB4
.text$mn:00003DB4 ; public: wchar_t const & __thiscall std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::operator*(void)const
.text$mn:00003DB4                 public ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ
.text$mn:00003DB4 ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ proc near
.text$mn:00003DB4                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+Ap
.text$mn:00003DB4
.text$mn:00003DB4 var_4           = dword ptr -4
.text$mn:00003DB4
.text$mn:00003DB4                 push    ebp
.text$mn:00003DB5                 mov     ebp, esp
.text$mn:00003DB7                 push    ecx
.text$mn:00003DB8                 push    esi
.text$mn:00003DB9                 mov     [ebp+var_4], ecx
.text$mn:00003DBC                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003DBF                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00003DC4                 test    eax, eax
.text$mn:00003DC6                 jz      short loc_3E0F
.text$mn:00003DC8                 mov     eax, [ebp+var_4]
.text$mn:00003DCB                 cmp     dword ptr [eax+8], 0
.text$mn:00003DCF                 jz      short loc_3E0F
.text$mn:00003DD1                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003DD4                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00003DD9                 mov     ecx, eax
.text$mn:00003DDB                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00003DE0                 mov     ecx, [ebp+var_4]
.text$mn:00003DE3                 cmp     [ecx+8], eax
.text$mn:00003DE6                 jb      short loc_3E0F
.text$mn:00003DE8                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003DEB                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00003DF0                 mov     ecx, eax
.text$mn:00003DF2                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00003DF7                 mov     esi, eax
.text$mn:00003DF9                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003DFC                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00003E01                 mov     edx, [eax+14h]
.text$mn:00003E04                 lea     eax, [esi+edx*2]
.text$mn:00003E07                 mov     ecx, [ebp+var_4]
.text$mn:00003E0A                 cmp     eax, [ecx+8]
.text$mn:00003E0D                 ja      short loc_3E6E
.text$mn:00003E0F
.text$mn:00003E0F loc_3E0F:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+12j
.text$mn:00003E0F                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+1Bj ...
.text$mn:00003E0F                 push    4Fh ; 'O'       ; unsigned int
.text$mn:00003E11                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00003E16                 push    offset ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ ; "string iterator not dereferencable"
.text$mn:00003E1B                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00003E20                 add     esp, 0Ch
.text$mn:00003E23                 mov     edx, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:00003E28                 test    edx, edx
.text$mn:00003E2A                 jz      short loc_3E30
.text$mn:00003E2C                 xor     eax, eax
.text$mn:00003E2E                 jnz     short loc_3E53
.text$mn:00003E30
.text$mn:00003E30 loc_3E30:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+76j
.text$mn:00003E30                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00003E35                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:00003E3A                 push    0
.text$mn:00003E3C                 push    50h ; 'P'
.text$mn:00003E3E                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00003E43                 push    2
.text$mn:00003E45                 call    __CrtDbgReportW
.text$mn:00003E4A                 add     esp, 18h
.text$mn:00003E4D                 cmp     eax, 1
.text$mn:00003E50                 jnz     short loc_3E53
.text$mn:00003E52                 int     3               ; Trap to Debugger
.text$mn:00003E53
.text$mn:00003E53 loc_3E53:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+7Aj
.text$mn:00003E53                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+9Cj
.text$mn:00003E53                 push    0
.text$mn:00003E55                 push    50h ; 'P'
.text$mn:00003E57                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00003E5C                 push    offset ??_C@_1MM@BFHGHMKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; "std::_String_const_iterator<class std::"...
.text$mn:00003E61                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:00003E66                 call    __invalid_parameter
.text$mn:00003E6B                 add     esp, 14h
.text$mn:00003E6E
.text$mn:00003E6E loc_3E6E:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+59j
.text$mn:00003E6E                 mov     edx, [ebp+var_4]
.text$mn:00003E71                 mov     eax, [edx+8]
.text$mn:00003E74                 pop     esi
.text$mn:00003E75                 mov     esp, ebp
.text$mn:00003E77                 pop     ebp
.text$mn:00003E78                 retn
.text$mn:00003E78 ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ endp
.text$mn:00003E78
.text$mn:00003E78 ; ---------------------------------------------------------------------------
.text$mn:00003E79                 align 4
.text$mn:00003E79 _text$mn        ends
.text$mn:00003E79
.text$mn:00003E7C ; ===========================================================================
.text$mn:00003E7C
.text$mn:00003E7C ; Segment type: Pure code
.text$mn:00003E7C ; Segment permissions: Read/Execute
.text$mn:00003E7C _text$mn        segment para public 'CODE' use32
.text$mn:00003E7C                 assume cs:_text$mn
.text$mn:00003E7C                 ;org 3E7Ch
.text$mn:00003E7C ; COMDAT (pick any)
.text$mn:00003E7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E7C
.text$mn:00003E7C ; =============== S U B R O U T I N E =======================================
.text$mn:00003E7C
.text$mn:00003E7C ; Attributes: bp-based frame
.text$mn:00003E7C
.text$mn:00003E7C ; public: wchar_t & __thiscall std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::operator*(void)const
.text$mn:00003E7C                 public ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ
.text$mn:00003E7C ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ proc near
.text$mn:00003E7C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+135p
.text$mn:00003E7C
.text$mn:00003E7C var_4           = dword ptr -4
.text$mn:00003E7C
.text$mn:00003E7C                 push    ebp
.text$mn:00003E7D                 mov     ebp, esp
.text$mn:00003E7F                 push    ecx
.text$mn:00003E80                 mov     [ebp+var_4], ecx
.text$mn:00003E83                 mov     ecx, [ebp+var_4]
.text$mn:00003E86                 call    ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)
.text$mn:00003E8B                 mov     esp, ebp
.text$mn:00003E8D                 pop     ebp
.text$mn:00003E8E                 retn
.text$mn:00003E8E ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ endp
.text$mn:00003E8E
.text$mn:00003E8E ; ---------------------------------------------------------------------------
.text$mn:00003E8F                 align 10h
.text$mn:00003E8F _text$mn        ends
.text$mn:00003E8F
.text$mn:00003E90 ; ===========================================================================
.text$mn:00003E90
.text$mn:00003E90 ; Segment type: Pure code
.text$mn:00003E90 ; Segment permissions: Read/Execute
.text$mn:00003E90 _text$mn        segment para public 'CODE' use32
.text$mn:00003E90                 assume cs:_text$mn
.text$mn:00003E90                 ;org 3E90h
.text$mn:00003E90 ; COMDAT (pick any)
.text$mn:00003E90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E90
.text$mn:00003E90 ; =============== S U B R O U T I N E =======================================
.text$mn:00003E90
.text$mn:00003E90 ; Attributes: bp-based frame
.text$mn:00003E90
.text$mn:00003E90 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_Iterator_base12 *)
.text$mn:00003E90                 public ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z
.text$mn:00003E90 ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z proc near
.text$mn:00003E90                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+4Bp
.text$mn:00003E90                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+42p
.text$mn:00003E90
.text$mn:00003E90 var_4           = dword ptr -4
.text$mn:00003E90 arg_0           = dword ptr  8
.text$mn:00003E90
.text$mn:00003E90                 push    ebp
.text$mn:00003E91                 mov     ebp, esp
.text$mn:00003E93                 push    ecx
.text$mn:00003E94                 mov     [ebp+var_4], ecx
.text$mn:00003E97                 mov     eax, [ebp+arg_0]
.text$mn:00003E9A                 push    eax             ; std::_Iterator_base12 *
.text$mn:00003E9B                 mov     ecx, [ebp+var_4]
.text$mn:00003E9E                 call    ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00003EA3                 mov     ecx, [ebp+var_4]
.text$mn:00003EA6                 mov     edx, [ebp+arg_0]
.text$mn:00003EA9                 mov     eax, [ecx+8]
.text$mn:00003EAC                 sub     eax, [edx+8]
.text$mn:00003EAF                 sar     eax, 1
.text$mn:00003EB1                 mov     esp, ebp
.text$mn:00003EB3                 pop     ebp
.text$mn:00003EB4                 retn    4
.text$mn:00003EB4 ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z endp
.text$mn:00003EB4
.text$mn:00003EB4 ; ---------------------------------------------------------------------------
.text$mn:00003EB7                 align 4
.text$mn:00003EB7 _text$mn        ends
.text$mn:00003EB7
.text$mn:00003EB8 ; ===========================================================================
.text$mn:00003EB8
.text$mn:00003EB8 ; Segment type: Pure code
.text$mn:00003EB8 ; Segment permissions: Read/Execute
.text$mn:00003EB8 _text$mn        segment para public 'CODE' use32
.text$mn:00003EB8                 assume cs:_text$mn
.text$mn:00003EB8                 ;org 3EB8h
.text$mn:00003EB8 ; COMDAT (pick any)
.text$mn:00003EB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003EB8
.text$mn:00003EB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003EB8
.text$mn:00003EB8 ; Attributes: bp-based frame
.text$mn:00003EB8
.text$mn:00003EB8 ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_Iterator_base12 *)
.text$mn:00003EB8                 public ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.text$mn:00003EB8 ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z proc near
.text$mn:00003EB8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+12Cp
.text$mn:00003EB8
.text$mn:00003EB8 var_28          = byte ptr -28h
.text$mn:00003EB8 var_1C          = dword ptr -1Ch
.text$mn:00003EB8 var_18          = dword ptr -18h
.text$mn:00003EB8 var_14          = dword ptr -14h
.text$mn:00003EB8 var_10          = dword ptr -10h
.text$mn:00003EB8 var_C           = dword ptr -0Ch
.text$mn:00003EB8 var_4           = dword ptr -4
.text$mn:00003EB8 arg_0           = dword ptr  8
.text$mn:00003EB8
.text$mn:00003EB8                 push    ebp
.text$mn:00003EB9                 mov     ebp, esp
.text$mn:00003EBB                 push    0FFFFFFFFh
.text$mn:00003EBD                 push    offset __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.text$mn:00003EC2                 mov     eax, large fs:0
.text$mn:00003EC8                 push    eax
.text$mn:00003EC9                 sub     esp, 1Ch
.text$mn:00003ECC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003ED1                 xor     eax, ebp
.text$mn:00003ED3                 push    eax
.text$mn:00003ED4                 lea     eax, [ebp+var_C]
.text$mn:00003ED7                 mov     large fs:0, eax
.text$mn:00003EDD                 mov     [ebp+var_10], ecx
.text$mn:00003EE0                 mov     eax, [ebp+arg_0]
.text$mn:00003EE3                 push    eax             ; std::_Iterator_base12 *
.text$mn:00003EE4                 mov     ecx, [ebp+var_10]
.text$mn:00003EE7                 push    ecx             ; struct std::_Iterator_base12 *
.text$mn:00003EE8                 lea     ecx, [ebp+var_28]
.text$mn:00003EEB                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00003EF0                 mov     [ebp+var_14], eax
.text$mn:00003EF3                 mov     edx, [ebp+var_14]
.text$mn:00003EF6                 mov     [ebp+var_18], edx
.text$mn:00003EF9                 mov     [ebp+var_4], 0
.text$mn:00003F00                 mov     ecx, [ebp+var_18]
.text$mn:00003F03                 call    ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00003F08                 mov     [ebp+var_1C], eax
.text$mn:00003F0B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003F12                 lea     ecx, [ebp+var_28]
.text$mn:00003F15                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00003F1A                 mov     eax, [ebp+var_1C]
.text$mn:00003F1D                 mov     ecx, [ebp+var_C]
.text$mn:00003F20                 mov     large fs:0, ecx
.text$mn:00003F27                 pop     ecx
.text$mn:00003F28                 mov     esp, ebp
.text$mn:00003F2A                 pop     ebp
.text$mn:00003F2B                 retn    4
.text$mn:00003F2B ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z endp
.text$mn:00003F2B
.text$mn:00003F2B ; ---------------------------------------------------------------------------
.text$mn:00003F2E                 align 10h
.text$mn:00003F2E _text$mn        ends
.text$mn:00003F2E
.text$x:00003F30 ; ===========================================================================
.text$x:00003F30
.text$x:00003F30 ; Segment type: Pure code
.text$x:00003F30 ; Segment permissions: Read/Execute
.text$x:00003F30 _text$x         segment para public 'CODE' use32
.text$x:00003F30                 assume cs:_text$x
.text$x:00003F30                 ;org 3F30h
.text$x:00003F30 ; COMDAT (pick associative to section at 3EB8)
.text$x:00003F30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003F30
.text$x:00003F30 ; =============== S U B R O U T I N E =======================================
.text$x:00003F30
.text$x:00003F30
.text$x:00003F30 __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0 proc near
.text$x:00003F30                                         ; DATA XREF: .xdata$x:00008014o
.text$x:00003F30                 lea     ecx, [ebp-28h]
.text$x:00003F33                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00003F33 __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0 endp
.text$x:00003F33
.text$x:00003F38
.text$x:00003F38 ; =============== S U B R O U T I N E =======================================
.text$x:00003F38
.text$x:00003F38
.text$x:00003F38 __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z proc near
.text$x:00003F38                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+5o
.text$x:00003F38
.text$x:00003F38 arg_4           = dword ptr  8
.text$x:00003F38
.text$x:00003F38                 mov     edx, [esp+arg_4]
.text$x:00003F3C                 lea     eax, [edx+0Ch]
.text$x:00003F3F                 mov     ecx, [edx-20h]
.text$x:00003F42                 xor     ecx, eax
.text$x:00003F44                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003F49                 mov     eax, offset __ehfuncinfo$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.text$x:00003F4E                 jmp     ___CxxFrameHandler3
.text$x:00003F4E __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z endp
.text$x:00003F4E
.text$x:00003F4E ; ---------------------------------------------------------------------------
.text$x:00003F53                 align 4
.text$x:00003F53 _text$x         ends
.text$x:00003F53
.text$mn:00003F54 ; ===========================================================================
.text$mn:00003F54
.text$mn:00003F54 ; Segment type: Pure code
.text$mn:00003F54 ; Segment permissions: Read/Execute
.text$mn:00003F54 _text$mn        segment para public 'CODE' use32
.text$mn:00003F54                 assume cs:_text$mn
.text$mn:00003F54                 ;org 3F54h
.text$mn:00003F54 ; COMDAT (pick any)
.text$mn:00003F54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003F54
.text$mn:00003F54 ; =============== S U B R O U T I N E =======================================
.text$mn:00003F54
.text$mn:00003F54 ; Attributes: bp-based frame
.text$mn:00003F54
.text$mn:00003F54 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator+=(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00003F54                 public ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
.text$mn:00003F54 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z proc near
.text$mn:00003F54                                         ; CODE XREF: changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+C3p
.text$mn:00003F54                                         ; changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+DAp
.text$mn:00003F54
.text$mn:00003F54 var_4           = dword ptr -4
.text$mn:00003F54 arg_0           = dword ptr  8
.text$mn:00003F54
.text$mn:00003F54                 push    ebp
.text$mn:00003F55                 mov     ebp, esp
.text$mn:00003F57                 push    ecx
.text$mn:00003F58                 mov     [ebp+var_4], ecx
.text$mn:00003F5B                 mov     eax, [ebp+arg_0]
.text$mn:00003F5E                 push    eax
.text$mn:00003F5F                 mov     ecx, [ebp+var_4]
.text$mn:00003F62                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00003F67                 mov     esp, ebp
.text$mn:00003F69                 pop     ebp
.text$mn:00003F6A                 retn    4
.text$mn:00003F6A ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z endp
.text$mn:00003F6A
.text$mn:00003F6A ; ---------------------------------------------------------------------------
.text$mn:00003F6D                 align 10h
.text$mn:00003F6D _text$mn        ends
.text$mn:00003F6D
.text$mn:00003F70 ; ===========================================================================
.text$mn:00003F70
.text$mn:00003F70 ; Segment type: Pure code
.text$mn:00003F70 ; Segment permissions: Read/Execute
.text$mn:00003F70 _text$mn        segment para public 'CODE' use32
.text$mn:00003F70                 assume cs:_text$mn
.text$mn:00003F70                 ;org 3F70h
.text$mn:00003F70 ; COMDAT (pick any)
.text$mn:00003F70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003F70
.text$mn:00003F70 ; =============== S U B R O U T I N E =======================================
.text$mn:00003F70
.text$mn:00003F70 ; Attributes: bp-based frame
.text$mn:00003F70
.text$mn:00003F70 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t *Str)
.text$mn:00003F70                 public ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:00003F70 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:00003F70                                         ; CODE XREF: FileDialog::setExtFilter(wchar_t const *,wchar_t const *,...)+5Fp
.text$mn:00003F70                                         ; FileDialog::setExtFilter(wchar_t const *,wchar_t const *,...)+6Bp ...
.text$mn:00003F70
.text$mn:00003F70 var_4           = dword ptr -4
.text$mn:00003F70 Str             = dword ptr  8
.text$mn:00003F70
.text$mn:00003F70                 push    ebp
.text$mn:00003F71                 mov     ebp, esp
.text$mn:00003F73                 push    ecx
.text$mn:00003F74                 mov     [ebp+var_4], ecx
.text$mn:00003F77                 mov     eax, [ebp+Str]
.text$mn:00003F7A                 push    eax             ; Str
.text$mn:00003F7B                 mov     ecx, [ebp+var_4]
.text$mn:00003F7E                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)
.text$mn:00003F83                 mov     esp, ebp
.text$mn:00003F85                 pop     ebp
.text$mn:00003F86                 retn    4
.text$mn:00003F86 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:00003F86
.text$mn:00003F86 ; ---------------------------------------------------------------------------
.text$mn:00003F89                 align 4
.text$mn:00003F89 _text$mn        ends
.text$mn:00003F89
.text$mn:00003F8C ; ===========================================================================
.text$mn:00003F8C
.text$mn:00003F8C ; Segment type: Pure code
.text$mn:00003F8C ; Segment permissions: Read/Execute
.text$mn:00003F8C _text$mn        segment para public 'CODE' use32
.text$mn:00003F8C                 assume cs:_text$mn
.text$mn:00003F8C                 ;org 3F8Ch
.text$mn:00003F8C ; COMDAT (pick any)
.text$mn:00003F8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003F8C
.text$mn:00003F8C ; =============== S U B R O U T I N E =======================================
.text$mn:00003F8C
.text$mn:00003F8C ; Attributes: bp-based frame
.text$mn:00003F8C
.text$mn:00003F8C ; public: void * __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`scalar deleting destructor'(unsigned int)
.text$mn:00003F8C                 public ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z
.text$mn:00003F8C ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z proc near
.text$mn:00003F8C                                         ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Cp
.text$mn:00003F8C
.text$mn:00003F8C var_4           = dword ptr -4
.text$mn:00003F8C arg_0           = dword ptr  8
.text$mn:00003F8C
.text$mn:00003F8C                 push    ebp
.text$mn:00003F8D                 mov     ebp, esp
.text$mn:00003F8F                 push    ecx
.text$mn:00003F90                 mov     [ebp+var_4], ecx
.text$mn:00003F93                 mov     ecx, [ebp+var_4]
.text$mn:00003F96                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003F9B                 mov     eax, [ebp+arg_0]
.text$mn:00003F9E                 and     eax, 1
.text$mn:00003FA1                 jz      short loc_3FAF
.text$mn:00003FA3                 mov     ecx, [ebp+var_4]
.text$mn:00003FA6                 push    ecx             ; void *
.text$mn:00003FA7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00003FAC                 add     esp, 4
.text$mn:00003FAF
.text$mn:00003FAF loc_3FAF:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`scalar deleting destructor'(uint)+15j
.text$mn:00003FAF                 mov     eax, [ebp+var_4]
.text$mn:00003FB2                 mov     esp, ebp
.text$mn:00003FB4                 pop     ebp
.text$mn:00003FB5                 retn    4
.text$mn:00003FB5 ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z endp
.text$mn:00003FB5
.text$mn:00003FB5 _text$mn        ends
.text$mn:00003FB5
.text$mn:00003FB8 ; ===========================================================================
.text$mn:00003FB8
.text$mn:00003FB8 ; Segment type: Pure code
.text$mn:00003FB8 ; Segment permissions: Read/Execute
.text$mn:00003FB8 _text$mn        segment para public 'CODE' use32
.text$mn:00003FB8                 assume cs:_text$mn
.text$mn:00003FB8                 ;org 3FB8h
.text$mn:00003FB8 ; COMDAT (pick any)
.text$mn:00003FB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003FB8
.text$mn:00003FB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003FB8
.text$mn:00003FB8 ; Attributes: bp-based frame
.text$mn:00003FB8
.text$mn:00003FB8 ; public: virtual void * __thiscall std::_Generic_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00003FB8                 public ??_G_Generic_error_category@std@@UAEPAXI@Z
.text$mn:00003FB8 ??_G_Generic_error_category@std@@UAEPAXI@Z proc near
.text$mn:00003FB8
.text$mn:00003FB8 var_4           = dword ptr -4
.text$mn:00003FB8 arg_0           = dword ptr  8
.text$mn:00003FB8
.text$mn:00003FB8                 push    ebp
.text$mn:00003FB9                 mov     ebp, esp
.text$mn:00003FBB                 push    ecx
.text$mn:00003FBC                 mov     [ebp+var_4], ecx
.text$mn:00003FBF                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003FC2                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00003FC7                 mov     eax, [ebp+arg_0]
.text$mn:00003FCA                 and     eax, 1
.text$mn:00003FCD                 jz      short loc_3FDB
.text$mn:00003FCF                 mov     ecx, [ebp+var_4]
.text$mn:00003FD2                 push    ecx             ; void *
.text$mn:00003FD3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00003FD8                 add     esp, 4
.text$mn:00003FDB
.text$mn:00003FDB loc_3FDB:                               ; CODE XREF: std::_Generic_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00003FDB                 mov     eax, [ebp+var_4]
.text$mn:00003FDE                 mov     esp, ebp
.text$mn:00003FE0                 pop     ebp
.text$mn:00003FE1                 retn    4
.text$mn:00003FE1 ??_G_Generic_error_category@std@@UAEPAXI@Z endp
.text$mn:00003FE1
.text$mn:00003FE1 _text$mn        ends
.text$mn:00003FE1
.text$mn:00003FE4 ; ===========================================================================
.text$mn:00003FE4
.text$mn:00003FE4 ; Segment type: Pure code
.text$mn:00003FE4 ; Segment permissions: Read/Execute
.text$mn:00003FE4 _text$mn        segment para public 'CODE' use32
.text$mn:00003FE4                 assume cs:_text$mn
.text$mn:00003FE4                 ;org 3FE4h
.text$mn:00003FE4 ; COMDAT (pick any)
.text$mn:00003FE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003FE4
.text$mn:00003FE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00003FE4
.text$mn:00003FE4 ; Attributes: bp-based frame
.text$mn:00003FE4
.text$mn:00003FE4 ; public: virtual void * __thiscall std::_Iostream_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00003FE4                 public ??_G_Iostream_error_category@std@@UAEPAXI@Z
.text$mn:00003FE4 ??_G_Iostream_error_category@std@@UAEPAXI@Z proc near
.text$mn:00003FE4
.text$mn:00003FE4 var_4           = dword ptr -4
.text$mn:00003FE4 arg_0           = dword ptr  8
.text$mn:00003FE4
.text$mn:00003FE4                 push    ebp
.text$mn:00003FE5                 mov     ebp, esp
.text$mn:00003FE7                 push    ecx
.text$mn:00003FE8                 mov     [ebp+var_4], ecx
.text$mn:00003FEB                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003FEE                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$mn:00003FF3                 mov     eax, [ebp+arg_0]
.text$mn:00003FF6                 and     eax, 1
.text$mn:00003FF9                 jz      short loc_4007
.text$mn:00003FFB                 mov     ecx, [ebp+var_4]
.text$mn:00003FFE                 push    ecx             ; void *
.text$mn:00003FFF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00004004                 add     esp, 4
.text$mn:00004007
.text$mn:00004007 loc_4007:                               ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00004007                 mov     eax, [ebp+var_4]
.text$mn:0000400A                 mov     esp, ebp
.text$mn:0000400C                 pop     ebp
.text$mn:0000400D                 retn    4
.text$mn:0000400D ??_G_Iostream_error_category@std@@UAEPAXI@Z endp
.text$mn:0000400D
.text$mn:0000400D _text$mn        ends
.text$mn:0000400D
.text$mn:00004010 ; ===========================================================================
.text$mn:00004010
.text$mn:00004010 ; Segment type: Pure code
.text$mn:00004010 ; Segment permissions: Read/Execute
.text$mn:00004010 _text$mn        segment para public 'CODE' use32
.text$mn:00004010                 assume cs:_text$mn
.text$mn:00004010                 ;org 4010h
.text$mn:00004010 ; COMDAT (pick any)
.text$mn:00004010                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004010
.text$mn:00004010 ; =============== S U B R O U T I N E =======================================
.text$mn:00004010
.text$mn:00004010 ; Attributes: bp-based frame
.text$mn:00004010
.text$mn:00004010 ; public: virtual void * __thiscall std::_System_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00004010                 public ??_G_System_error_category@std@@UAEPAXI@Z
.text$mn:00004010 ??_G_System_error_category@std@@UAEPAXI@Z proc near
.text$mn:00004010
.text$mn:00004010 var_4           = dword ptr -4
.text$mn:00004010 arg_0           = dword ptr  8
.text$mn:00004010
.text$mn:00004010                 push    ebp
.text$mn:00004011                 mov     ebp, esp
.text$mn:00004013                 push    ecx
.text$mn:00004014                 mov     [ebp+var_4], ecx
.text$mn:00004017                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000401A                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$mn:0000401F                 mov     eax, [ebp+arg_0]
.text$mn:00004022                 and     eax, 1
.text$mn:00004025                 jz      short loc_4033
.text$mn:00004027                 mov     ecx, [ebp+var_4]
.text$mn:0000402A                 push    ecx             ; void *
.text$mn:0000402B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00004030                 add     esp, 4
.text$mn:00004033
.text$mn:00004033 loc_4033:                               ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00004033                 mov     eax, [ebp+var_4]
.text$mn:00004036                 mov     esp, ebp
.text$mn:00004038                 pop     ebp
.text$mn:00004039                 retn    4
.text$mn:00004039 ??_G_System_error_category@std@@UAEPAXI@Z endp
.text$mn:00004039
.text$mn:00004039 _text$mn        ends
.text$mn:00004039
.text$mn:0000403C ; ===========================================================================
.text$mn:0000403C
.text$mn:0000403C ; Segment type: Pure code
.text$mn:0000403C ; Segment permissions: Read/Execute
.text$mn:0000403C _text$mn        segment para public 'CODE' use32
.text$mn:0000403C                 assume cs:_text$mn
.text$mn:0000403C                 ;org 403Ch
.text$mn:0000403C ; COMDAT (pick any)
.text$mn:0000403C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000403C
.text$mn:0000403C ; =============== S U B R O U T I N E =======================================
.text$mn:0000403C
.text$mn:0000403C ; Attributes: bp-based frame
.text$mn:0000403C
.text$mn:0000403C ; public: virtual void * __thiscall std::error_category::`scalar deleting destructor'(unsigned int)
.text$mn:0000403C                 public ??_Gerror_category@std@@UAEPAXI@Z
.text$mn:0000403C ??_Gerror_category@std@@UAEPAXI@Z proc near
.text$mn:0000403C
.text$mn:0000403C var_4           = dword ptr -4
.text$mn:0000403C arg_0           = dword ptr  8
.text$mn:0000403C
.text$mn:0000403C                 push    ebp
.text$mn:0000403D                 mov     ebp, esp
.text$mn:0000403F                 push    ecx
.text$mn:00004040                 mov     [ebp+var_4], ecx
.text$mn:00004043                 mov     ecx, [ebp+var_4] ; this
.text$mn:00004046                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:0000404B                 mov     eax, [ebp+arg_0]
.text$mn:0000404E                 and     eax, 1
.text$mn:00004051                 jz      short loc_405F
.text$mn:00004053                 mov     ecx, [ebp+var_4]
.text$mn:00004056                 push    ecx             ; void *
.text$mn:00004057                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000405C                 add     esp, 4
.text$mn:0000405F
.text$mn:0000405F loc_405F:                               ; CODE XREF: std::error_category::`scalar deleting destructor'(uint)+15j
.text$mn:0000405F                 mov     eax, [ebp+var_4]
.text$mn:00004062                 mov     esp, ebp
.text$mn:00004064                 pop     ebp
.text$mn:00004065                 retn    4
.text$mn:00004065 ??_Gerror_category@std@@UAEPAXI@Z endp
.text$mn:00004065
.text$mn:00004065 _text$mn        ends
.text$mn:00004065
.text$di:00004068 ; ===========================================================================
.text$di:00004068
.text$di:00004068 ; Segment type: Pure code
.text$di:00004068 ; Segment permissions: Read/Execute
.text$di:00004068 _text$di        segment para public 'CODE' use32
.text$di:00004068                 assume cs:_text$di
.text$di:00004068                 ;org 4068h
.text$di:00004068 ; COMDAT (pick any)
.text$di:00004068                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00004068
.text$di:00004068 ; =============== S U B R O U T I N E =======================================
.text$di:00004068
.text$di:00004068 ; Attributes: bp-based frame
.text$di:00004068
.text$di:00004068 ; void __cdecl `dynamic initializer for 'public: static class std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.text$di:00004068 ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$di:00004068                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Generic_object$initializer$)(void)o
.text$di:00004068                 push    ebp
.text$di:00004069                 mov     ebp, esp
.text$di:0000406B                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$di:00004070                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$di:00004075                 push    offset ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:0000407A                 call    _atexit
.text$di:0000407F                 add     esp, 4
.text$di:00004082                 pop     ebp
.text$di:00004083                 retn
.text$di:00004083 ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$di:00004083
.text$di:00004083 _text$di        ends
.text$di:00004083
.text$di:00004084 ; ===========================================================================
.text$di:00004084
.text$di:00004084 ; Segment type: Pure code
.text$di:00004084 ; Segment permissions: Read/Execute
.text$di:00004084 _text$di        segment para public 'CODE' use32
.text$di:00004084                 assume cs:_text$di
.text$di:00004084                 ;org 4084h
.text$di:00004084 ; COMDAT (pick any)
.text$di:00004084                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00004084
.text$di:00004084 ; =============== S U B R O U T I N E =======================================
.text$di:00004084
.text$di:00004084 ; Attributes: bp-based frame
.text$di:00004084
.text$di:00004084 ; void __cdecl `dynamic initializer for 'public: static class std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.text$di:00004084 ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$di:00004084                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Iostream_object$initializer$)(void)o
.text$di:00004084                 push    ebp
.text$di:00004085                 mov     ebp, esp
.text$di:00004087                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$di:0000408C                 call    ??0_Iostream_error_category@std@@QAE@XZ ; std::_Iostream_error_category::_Iostream_error_category(void)
.text$di:00004091                 push    offset ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:00004096                 call    _atexit
.text$di:0000409B                 add     esp, 4
.text$di:0000409E                 pop     ebp
.text$di:0000409F                 retn
.text$di:0000409F ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$di:0000409F
.text$di:0000409F _text$di        ends
.text$di:0000409F
.text$di:000040A0 ; ===========================================================================
.text$di:000040A0
.text$di:000040A0 ; Segment type: Pure code
.text$di:000040A0 ; Segment permissions: Read/Execute
.text$di:000040A0 _text$di        segment para public 'CODE' use32
.text$di:000040A0                 assume cs:_text$di
.text$di:000040A0                 ;org 40A0h
.text$di:000040A0 ; COMDAT (pick any)
.text$di:000040A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000040A0
.text$di:000040A0 ; =============== S U B R O U T I N E =======================================
.text$di:000040A0
.text$di:000040A0 ; Attributes: bp-based frame
.text$di:000040A0
.text$di:000040A0 ; void __cdecl `dynamic initializer for 'public: static class std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.text$di:000040A0 ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$di:000040A0                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_System_object$initializer$)(void)o
.text$di:000040A0                 push    ebp
.text$di:000040A1                 mov     ebp, esp
.text$di:000040A3                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$di:000040A8                 call    ??0_System_error_category@std@@QAE@XZ ; std::_System_error_category::_System_error_category(void)
.text$di:000040AD                 push    offset ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:000040B2                 call    _atexit
.text$di:000040B7                 add     esp, 4
.text$di:000040BA                 pop     ebp
.text$di:000040BB                 retn
.text$di:000040BB ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$di:000040BB
.text$di:000040BB _text$di        ends
.text$di:000040BB
.text$di:000040BC ; ===========================================================================
.text$di:000040BC
.text$di:000040BC ; Segment type: Pure code
.text$di:000040BC ; Segment permissions: Read/Execute
.text$di:000040BC _text$di        segment para public 'CODE' use32
.text$di:000040BC                 assume cs:_text$di
.text$di:000040BC                 ;org 40BCh
.text$di:000040BC ; COMDAT (pick any)
.text$di:000040BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000040BC
.text$di:000040BC ; =============== S U B R O U T I N E =======================================
.text$di:000040BC
.text$di:000040BC ; Attributes: bp-based frame
.text$di:000040BC
.text$di:000040BC ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id''(void)
.text$di:000040BC ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:000040BC                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id$initializer$)(void)o
.text$di:000040BC                 push    ebp
.text$di:000040BD                 mov     ebp, esp
.text$di:000040BF                 push    0               ; unsigned int
.text$di:000040C1                 mov     ecx, offset ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:000040C6                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:000040CB                 pop     ebp
.text$di:000040CC                 retn
.text$di:000040CC ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:000040CC
.text$di:000040CC ; ---------------------------------------------------------------------------
.text$di:000040CD                 align 10h
.text$di:000040CD _text$di        ends
.text$di:000040CD
.text$di:000040D0 ; ===========================================================================
.text$di:000040D0
.text$di:000040D0 ; Segment type: Pure code
.text$di:000040D0 ; Segment permissions: Read/Execute
.text$di:000040D0 _text$di        segment para public 'CODE' use32
.text$di:000040D0                 assume cs:_text$di
.text$di:000040D0                 ;org 40D0h
.text$di:000040D0 ; COMDAT (pick any)
.text$di:000040D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000040D0
.text$di:000040D0 ; =============== S U B R O U T I N E =======================================
.text$di:000040D0
.text$di:000040D0 ; Attributes: bp-based frame
.text$di:000040D0
.text$di:000040D0 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id''(void)
.text$di:000040D0 ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:000040D0                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id$initializer$)(void)o
.text$di:000040D0                 push    ebp
.text$di:000040D1                 mov     ebp, esp
.text$di:000040D3                 push    0               ; unsigned int
.text$di:000040D5                 mov     ecx, offset ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:000040DA                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:000040DF                 pop     ebp
.text$di:000040E0                 retn
.text$di:000040E0 ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:000040E0
.text$di:000040E0 ; ---------------------------------------------------------------------------
.text$di:000040E1                 align 4
.text$di:000040E1 _text$di        ends
.text$di:000040E1
.text$di:000040E4 ; ===========================================================================
.text$di:000040E4
.text$di:000040E4 ; Segment type: Pure code
.text$di:000040E4 ; Segment permissions: Read/Execute
.text$di:000040E4 _text$di        segment para public 'CODE' use32
.text$di:000040E4                 assume cs:_text$di
.text$di:000040E4                 ;org 40E4h
.text$di:000040E4 ; COMDAT (pick any)
.text$di:000040E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000040E4
.text$di:000040E4 ; =============== S U B R O U T I N E =======================================
.text$di:000040E4
.text$di:000040E4 ; Attributes: bp-based frame
.text$di:000040E4
.text$di:000040E4 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<char>::id''(void)
.text$di:000040E4 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:000040E4                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<char>::id$initializer$)(void)o
.text$di:000040E4                 push    ebp
.text$di:000040E5                 mov     ebp, esp
.text$di:000040E7                 push    0               ; unsigned int
.text$di:000040E9                 mov     ecx, offset ?id@?$numpunct@D@std@@2V0locale@2@A ; this
.text$di:000040EE                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:000040F3                 pop     ebp
.text$di:000040F4                 retn
.text$di:000040F4 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ endp
.text$di:000040F4
.text$di:000040F4 ; ---------------------------------------------------------------------------
.text$di:000040F5                 align 4
.text$di:000040F5 _text$di        ends
.text$di:000040F5
.text$di:000040F8 ; ===========================================================================
.text$di:000040F8
.text$di:000040F8 ; Segment type: Pure code
.text$di:000040F8 ; Segment permissions: Read/Execute
.text$di:000040F8 _text$di        segment para public 'CODE' use32
.text$di:000040F8                 assume cs:_text$di
.text$di:000040F8                 ;org 40F8h
.text$di:000040F8 ; COMDAT (pick any)
.text$di:000040F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000040F8
.text$di:000040F8 ; =============== S U B R O U T I N E =======================================
.text$di:000040F8
.text$di:000040F8 ; Attributes: bp-based frame
.text$di:000040F8
.text$di:000040F8 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<wchar_t>::id''(void)
.text$di:000040F8 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:000040F8                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<wchar_t>::id$initializer$)(void)o
.text$di:000040F8                 push    ebp
.text$di:000040F9                 mov     ebp, esp
.text$di:000040FB                 push    0               ; unsigned int
.text$di:000040FD                 mov     ecx, offset ?id@?$numpunct@_W@std@@2V0locale@2@A ; this
.text$di:00004102                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00004107                 pop     ebp
.text$di:00004108                 retn
.text$di:00004108 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00004108
.text$di:00004108 ; ---------------------------------------------------------------------------
.text$di:00004109                 align 4
.text$di:00004109 _text$di        ends
.text$di:00004109
.text$di:0000410C ; ===========================================================================
.text$di:0000410C
.text$di:0000410C ; Segment type: Pure code
.text$di:0000410C ; Segment permissions: Read/Execute
.text$di:0000410C _text$di        segment para public 'CODE' use32
.text$di:0000410C                 assume cs:_text$di
.text$di:0000410C                 ;org 410Ch
.text$di:0000410C ; COMDAT (pick any)
.text$di:0000410C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000410C
.text$di:0000410C ; =============== S U B R O U T I N E =======================================
.text$di:0000410C
.text$di:0000410C ; Attributes: bp-based frame
.text$di:0000410C
.text$di:0000410C ; void __cdecl std::`dynamic initializer for 'allocator_arg''(void)
.text$di:0000410C ??__Eallocator_arg@std@@YAXXZ proc near ; DATA XREF: .CRT$XCU:_allocator_arg$initializer$o
.text$di:0000410C
.text$di:0000410C var_1           = byte ptr -1
.text$di:0000410C
.text$di:0000410C                 push    ebp
.text$di:0000410D                 mov     ebp, esp
.text$di:0000410F                 push    ecx
.text$di:00004110                 xor     eax, eax
.text$di:00004112                 mov     [ebp+var_1], al
.text$di:00004115                 mov     esp, ebp
.text$di:00004117                 pop     ebp
.text$di:00004118                 retn
.text$di:00004118 ??__Eallocator_arg@std@@YAXXZ endp
.text$di:00004118
.text$di:00004118 ; ---------------------------------------------------------------------------
.text$di:00004119                 align 4
.text$di:00004119 _text$di        ends
.text$di:00004119
.text$di:0000411C ; ===========================================================================
.text$di:0000411C
.text$di:0000411C ; Segment type: Pure code
.text$di:0000411C ; Segment permissions: Read/Execute
.text$di:0000411C _text$di        segment para public 'CODE' use32
.text$di:0000411C                 assume cs:_text$di
.text$di:0000411C                 ;org 411Ch
.text$di:0000411C ; COMDAT (pick any)
.text$di:0000411C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000411C
.text$di:0000411C ; =============== S U B R O U T I N E =======================================
.text$di:0000411C
.text$di:0000411C ; Attributes: bp-based frame
.text$di:0000411C
.text$di:0000411C ; void __cdecl `dynamic initializer for 'currentExt''(void)
.text$di:0000411C ??__EcurrentExt@@YAXXZ proc near        ; DATA XREF: .CRT$XCU:_currentExt$initializer$o
.text$di:0000411C                 push    ebp
.text$di:0000411D                 mov     ebp, esp
.text$di:0000411F                 push    offset $SG124970 ; Str
.text$di:00004124                 mov     ecx, offset _currentExt
.text$di:00004129                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$di:0000412E                 push    offset ??__FcurrentExt@@YAXXZ ; void (__cdecl *)()
.text$di:00004133                 call    _atexit
.text$di:00004138                 add     esp, 4
.text$di:0000413B                 pop     ebp
.text$di:0000413C                 retn
.text$di:0000413C ??__EcurrentExt@@YAXXZ endp
.text$di:0000413C
.text$di:0000413C ; ---------------------------------------------------------------------------
.text$di:0000413D                 align 10h
.text$di:0000413D _text$di        ends
.text$di:0000413D
.text$di:00004140 ; ===========================================================================
.text$di:00004140
.text$di:00004140 ; Segment type: Pure code
.text$di:00004140 ; Segment permissions: Read/Execute
.text$di:00004140 _text$di        segment para public 'CODE' use32
.text$di:00004140                 assume cs:_text$di
.text$di:00004140                 ;org 4140h
.text$di:00004140 ; COMDAT (pick any)
.text$di:00004140                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00004140
.text$di:00004140 ; =============== S U B R O U T I N E =======================================
.text$di:00004140
.text$di:00004140 ; Attributes: bp-based frame
.text$di:00004140
.text$di:00004140 ; void __cdecl std::`dynamic initializer for 'piecewise_construct''(void)
.text$di:00004140 ??__Epiecewise_construct@std@@YAXXZ proc near
.text$di:00004140                                         ; DATA XREF: .CRT$XCU:_piecewise_construct$initializer$o
.text$di:00004140
.text$di:00004140 var_1           = byte ptr -1
.text$di:00004140
.text$di:00004140                 push    ebp
.text$di:00004141                 mov     ebp, esp
.text$di:00004143                 push    ecx
.text$di:00004144                 xor     eax, eax
.text$di:00004146                 mov     [ebp+var_1], al
.text$di:00004149                 mov     esp, ebp
.text$di:0000414B                 pop     ebp
.text$di:0000414C                 retn
.text$di:0000414C ??__Epiecewise_construct@std@@YAXXZ endp
.text$di:0000414C
.text$di:0000414C ; ---------------------------------------------------------------------------
.text$di:0000414D                 align 10h
.text$di:0000414D _text$di        ends
.text$di:0000414D
.text$yd:00004150 ; ===========================================================================
.text$yd:00004150
.text$yd:00004150 ; Segment type: Pure code
.text$yd:00004150 ; Segment permissions: Read/Execute
.text$yd:00004150 _text$yd        segment para public 'CODE' use32
.text$yd:00004150                 assume cs:_text$yd
.text$yd:00004150                 ;org 4150h
.text$yd:00004150 ; COMDAT (pick any)
.text$yd:00004150                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00004150
.text$yd:00004150 ; =============== S U B R O U T I N E =======================================
.text$yd:00004150
.text$yd:00004150 ; Attributes: bp-based frame
.text$yd:00004150
.text$yd:00004150 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Generic_error_category std::_Error_objects<int>::_Generic_object''()
.text$yd:00004150 ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$yd:00004150                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+Do
.text$yd:00004150                 push    ebp
.text$yd:00004151                 mov     ebp, esp
.text$yd:00004153                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$yd:00004158                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$yd:0000415D                 pop     ebp
.text$yd:0000415E                 retn
.text$yd:0000415E ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$yd:0000415E
.text$yd:0000415E ; ---------------------------------------------------------------------------
.text$yd:0000415F                 align 10h
.text$yd:0000415F _text$yd        ends
.text$yd:0000415F
.text$yd:00004160 ; ===========================================================================
.text$yd:00004160
.text$yd:00004160 ; Segment type: Pure code
.text$yd:00004160 ; Segment permissions: Read/Execute
.text$yd:00004160 _text$yd        segment para public 'CODE' use32
.text$yd:00004160                 assume cs:_text$yd
.text$yd:00004160                 ;org 4160h
.text$yd:00004160 ; COMDAT (pick any)
.text$yd:00004160                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00004160
.text$yd:00004160 ; =============== S U B R O U T I N E =======================================
.text$yd:00004160
.text$yd:00004160 ; Attributes: bp-based frame
.text$yd:00004160
.text$yd:00004160 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''()
.text$yd:00004160 ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$yd:00004160                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+Do
.text$yd:00004160                 push    ebp
.text$yd:00004161                 mov     ebp, esp
.text$yd:00004163                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$yd:00004168                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$yd:0000416D                 pop     ebp
.text$yd:0000416E                 retn
.text$yd:0000416E ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$yd:0000416E
.text$yd:0000416E ; ---------------------------------------------------------------------------
.text$yd:0000416F                 align 10h
.text$yd:0000416F _text$yd        ends
.text$yd:0000416F
.text$yd:00004170 ; ===========================================================================
.text$yd:00004170
.text$yd:00004170 ; Segment type: Pure code
.text$yd:00004170 ; Segment permissions: Read/Execute
.text$yd:00004170 _text$yd        segment para public 'CODE' use32
.text$yd:00004170                 assume cs:_text$yd
.text$yd:00004170                 ;org 4170h
.text$yd:00004170 ; COMDAT (pick any)
.text$yd:00004170                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00004170
.text$yd:00004170 ; =============== S U B R O U T I N E =======================================
.text$yd:00004170
.text$yd:00004170 ; Attributes: bp-based frame
.text$yd:00004170
.text$yd:00004170 ; void __cdecl `dynamic atexit destructor for 'public: static std::_System_error_category std::_Error_objects<int>::_System_object''()
.text$yd:00004170 ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$yd:00004170                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+Do
.text$yd:00004170                 push    ebp
.text$yd:00004171                 mov     ebp, esp
.text$yd:00004173                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$yd:00004178                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$yd:0000417D                 pop     ebp
.text$yd:0000417E                 retn
.text$yd:0000417E ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$yd:0000417E
.text$yd:0000417E ; ---------------------------------------------------------------------------
.text$yd:0000417F                 align 10h
.text$yd:0000417F _text$yd        ends
.text$yd:0000417F
.text$yd:00004180 ; ===========================================================================
.text$yd:00004180
.text$yd:00004180 ; Segment type: Pure code
.text$yd:00004180 ; Segment permissions: Read/Execute
.text$yd:00004180 _text$yd        segment para public 'CODE' use32
.text$yd:00004180                 assume cs:_text$yd
.text$yd:00004180                 ;org 4180h
.text$yd:00004180 ; COMDAT (pick any)
.text$yd:00004180                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00004180
.text$yd:00004180 ; =============== S U B R O U T I N E =======================================
.text$yd:00004180
.text$yd:00004180 ; Attributes: bp-based frame
.text$yd:00004180
.text$yd:00004180 ; void __cdecl `dynamic atexit destructor for 'currentExt''()
.text$yd:00004180 ??__FcurrentExt@@YAXXZ proc near        ; DATA XREF: `dynamic initializer for 'currentExt''(void)+12o
.text$yd:00004180                 push    ebp
.text$yd:00004181                 mov     ebp, esp
.text$yd:00004183                 mov     ecx, offset _currentExt
.text$yd:00004188                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$yd:0000418D                 pop     ebp
.text$yd:0000418E                 retn
.text$yd:0000418E ??__FcurrentExt@@YAXXZ endp
.text$yd:0000418E
.text$yd:0000418E ; ---------------------------------------------------------------------------
.text$yd:0000418F                 align 10h
.text$yd:0000418F _text$yd        ends
.text$yd:0000418F
.text$mn:00004190 ; ===========================================================================
.text$mn:00004190
.text$mn:00004190 ; Segment type: Pure code
.text$mn:00004190 ; Segment permissions: Read/Execute
.text$mn:00004190 _text$mn        segment para public 'CODE' use32
.text$mn:00004190                 assume cs:_text$mn
.text$mn:00004190                 ;org 4190h
.text$mn:00004190 ; COMDAT (pick any)
.text$mn:00004190                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004190
.text$mn:00004190 ; =============== S U B R O U T I N E =======================================
.text$mn:00004190
.text$mn:00004190 ; Attributes: bp-based frame
.text$mn:00004190
.text$mn:00004190 ; void __thiscall std::_Iterator_base12::_Adopt(std::_Iterator_base12 *this, const struct std::_Container_base12 *)
.text$mn:00004190                 public ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$mn:00004190 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
.text$mn:00004190                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)+3Cp
.text$mn:00004190                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+49p
.text$mn:00004190
.text$mn:00004190 var_1C          = byte ptr -1Ch
.text$mn:00004190 var_18          = byte ptr -18h
.text$mn:00004190 var_14          = dword ptr -14h
.text$mn:00004190 var_10          = dword ptr -10h
.text$mn:00004190 var_C           = dword ptr -0Ch
.text$mn:00004190 var_4           = dword ptr -4
.text$mn:00004190 arg_0           = dword ptr  8
.text$mn:00004190
.text$mn:00004190                 push    ebp
.text$mn:00004191                 mov     ebp, esp
.text$mn:00004193                 push    0FFFFFFFFh
.text$mn:00004195                 push    offset __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$mn:0000419A                 mov     eax, large fs:0
.text$mn:000041A0                 push    eax
.text$mn:000041A1                 sub     esp, 10h
.text$mn:000041A4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000041A9                 xor     eax, ebp
.text$mn:000041AB                 push    eax
.text$mn:000041AC                 lea     eax, [ebp+var_C]
.text$mn:000041AF                 mov     large fs:0, eax
.text$mn:000041B5                 mov     [ebp+var_10], ecx
.text$mn:000041B8                 cmp     [ebp+arg_0], 0
.text$mn:000041BC                 jnz     short loc_41E8
.text$mn:000041BE                 push    3               ; int
.text$mn:000041C0                 lea     ecx, [ebp+var_18] ; this
.text$mn:000041C3                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:000041C8                 mov     [ebp+var_4], 0
.text$mn:000041CF                 mov     ecx, [ebp+var_10] ; this
.text$mn:000041D2                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:000041D7                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000041DE                 lea     ecx, [ebp+var_18] ; this
.text$mn:000041E1                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:000041E6                 jmp     short loc_423F
.text$mn:000041E8 ; ---------------------------------------------------------------------------
.text$mn:000041E8
.text$mn:000041E8 loc_41E8:                               ; CODE XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+2Cj
.text$mn:000041E8                 mov     eax, [ebp+arg_0]
.text$mn:000041EB                 mov     ecx, [eax]
.text$mn:000041ED                 mov     [ebp+var_14], ecx
.text$mn:000041F0                 mov     edx, [ebp+var_10]
.text$mn:000041F3                 mov     eax, [edx]
.text$mn:000041F5                 cmp     eax, [ebp+var_14]
.text$mn:000041F8                 jz      short loc_423F
.text$mn:000041FA                 push    3               ; int
.text$mn:000041FC                 lea     ecx, [ebp+var_1C] ; this
.text$mn:000041FF                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00004204                 mov     [ebp+var_4], 1
.text$mn:0000420B                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000420E                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00004213                 mov     ecx, [ebp+var_10]
.text$mn:00004216                 mov     edx, [ebp+var_14]
.text$mn:00004219                 mov     eax, [edx+4]
.text$mn:0000421C                 mov     [ecx+4], eax
.text$mn:0000421F                 mov     ecx, [ebp+var_14]
.text$mn:00004222                 mov     edx, [ebp+var_10]
.text$mn:00004225                 mov     [ecx+4], edx
.text$mn:00004228                 mov     eax, [ebp+var_10]
.text$mn:0000422B                 mov     ecx, [ebp+var_14]
.text$mn:0000422E                 mov     [eax], ecx
.text$mn:00004230                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004237                 lea     ecx, [ebp+var_1C] ; this
.text$mn:0000423A                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000423F
.text$mn:0000423F loc_423F:                               ; CODE XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+56j
.text$mn:0000423F                                         ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+68j
.text$mn:0000423F                 mov     ecx, [ebp+var_C]
.text$mn:00004242                 mov     large fs:0, ecx
.text$mn:00004249                 pop     ecx
.text$mn:0000424A                 mov     esp, ebp
.text$mn:0000424C                 pop     ebp
.text$mn:0000424D                 retn    4
.text$mn:0000424D ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z endp
.text$mn:0000424D
.text$mn:0000424D _text$mn        ends
.text$mn:0000424D
.text$x:00004250 ; ===========================================================================
.text$x:00004250
.text$x:00004250 ; Segment type: Pure code
.text$x:00004250 ; Segment permissions: Read/Execute
.text$x:00004250 _text$x         segment para public 'CODE' use32
.text$x:00004250                 assume cs:_text$x
.text$x:00004250                 ;org 4250h
.text$x:00004250 ; COMDAT (pick associative to section at 4190)
.text$x:00004250                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004250
.text$x:00004250 ; =============== S U B R O U T I N E =======================================
.text$x:00004250
.text$x:00004250
.text$x:00004250 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 proc near
.text$x:00004250                                         ; DATA XREF: .xdata$x:00007368o
.text$x:00004250                 lea     ecx, [ebp-18h]  ; this
.text$x:00004253                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00004253 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 endp
.text$x:00004253
.text$x:00004258
.text$x:00004258 ; =============== S U B R O U T I N E =======================================
.text$x:00004258
.text$x:00004258
.text$x:00004258 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 proc near
.text$x:00004258                                         ; DATA XREF: .xdata$x:00007370o
.text$x:00004258                 lea     ecx, [ebp-1Ch]  ; this
.text$x:0000425B                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000425B __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 endp
.text$x:0000425B
.text$x:00004260
.text$x:00004260 ; =============== S U B R O U T I N E =======================================
.text$x:00004260
.text$x:00004260
.text$x:00004260 __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
.text$x:00004260                                         ; DATA XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+5o
.text$x:00004260
.text$x:00004260 arg_4           = dword ptr  8
.text$x:00004260
.text$x:00004260                 mov     edx, [esp+arg_4]
.text$x:00004264                 lea     eax, [edx+0Ch]
.text$x:00004267                 mov     ecx, [edx-14h]
.text$x:0000426A                 xor     ecx, eax
.text$x:0000426C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004271                 mov     eax, offset __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$x:00004276                 jmp     ___CxxFrameHandler3
.text$x:00004276 __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z endp
.text$x:00004276
.text$x:00004276 ; ---------------------------------------------------------------------------
.text$x:0000427B                 align 4
.text$x:0000427B _text$x         ends
.text$x:0000427B
.text$mn:0000427C ; ===========================================================================
.text$mn:0000427C
.text$mn:0000427C ; Segment type: Pure code
.text$mn:0000427C ; Segment permissions: Read/Execute
.text$mn:0000427C _text$mn        segment para public 'CODE' use32
.text$mn:0000427C                 assume cs:_text$mn
.text$mn:0000427C                 ;org 427Ch
.text$mn:0000427C ; COMDAT (pick any)
.text$mn:0000427C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000427C
.text$mn:0000427C ; =============== S U B R O U T I N E =======================================
.text$mn:0000427C
.text$mn:0000427C ; Attributes: bp-based frame
.text$mn:0000427C
.text$mn:0000427C ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:0000427C                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:0000427C ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:0000427C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+38p
.text$mn:0000427C
.text$mn:0000427C var_10          = byte ptr -10h
.text$mn:0000427C var_8           = dword ptr -8
.text$mn:0000427C var_1           = byte ptr -1
.text$mn:0000427C
.text$mn:0000427C                 push    ebp
.text$mn:0000427D                 mov     ebp, esp
.text$mn:0000427F                 sub     esp, 10h
.text$mn:00004282                 mov     [ebp+var_8], ecx
.text$mn:00004285                 lea     ecx, [ebp+var_1]
.text$mn:00004288                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:0000428D                 push    1
.text$mn:0000428F                 lea     ecx, [ebp+var_1]
.text$mn:00004292                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:00004297                 mov     ecx, [ebp+var_8]
.text$mn:0000429A                 mov     [ecx], eax
.text$mn:0000429C                 lea     ecx, [ebp+var_10] ; this
.text$mn:0000429F                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:000042A4                 push    eax             ; int
.text$mn:000042A5                 mov     edx, [ebp+var_8]
.text$mn:000042A8                 mov     eax, [edx]
.text$mn:000042AA                 push    eax             ; void *
.text$mn:000042AB                 lea     ecx, [ebp+var_1]
.text$mn:000042AE                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:000042B3                 mov     ecx, [ebp+var_8]
.text$mn:000042B6                 mov     edx, [ecx]
.text$mn:000042B8                 mov     eax, [ebp+var_8]
.text$mn:000042BB                 mov     [edx], eax
.text$mn:000042BD                 mov     esp, ebp
.text$mn:000042BF                 pop     ebp
.text$mn:000042C0                 retn
.text$mn:000042C0 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:000042C0
.text$mn:000042C0 ; ---------------------------------------------------------------------------
.text$mn:000042C1                 align 4
.text$mn:000042C1 _text$mn        ends
.text$mn:000042C1
.text$mn:000042C4 ; ===========================================================================
.text$mn:000042C4
.text$mn:000042C4 ; Segment type: Pure code
.text$mn:000042C4 ; Segment permissions: Read/Execute
.text$mn:000042C4 _text$mn        segment para public 'CODE' use32
.text$mn:000042C4                 assume cs:_text$mn
.text$mn:000042C4                 ;org 42C4h
.text$mn:000042C4 ; COMDAT (pick any)
.text$mn:000042C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042C4
.text$mn:000042C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000042C4
.text$mn:000042C4 ; Attributes: bp-based frame
.text$mn:000042C4
.text$mn:000042C4 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:000042C4                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:000042C4 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:000042C4                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+38p
.text$mn:000042C4
.text$mn:000042C4 var_10          = byte ptr -10h
.text$mn:000042C4 var_8           = dword ptr -8
.text$mn:000042C4 var_1           = byte ptr -1
.text$mn:000042C4
.text$mn:000042C4                 push    ebp
.text$mn:000042C5                 mov     ebp, esp
.text$mn:000042C7                 sub     esp, 10h
.text$mn:000042CA                 mov     [ebp+var_8], ecx
.text$mn:000042CD                 lea     ecx, [ebp+var_1]
.text$mn:000042D0                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:000042D5                 push    1
.text$mn:000042D7                 lea     ecx, [ebp+var_1]
.text$mn:000042DA                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:000042DF                 mov     ecx, [ebp+var_8]
.text$mn:000042E2                 mov     [ecx], eax
.text$mn:000042E4                 lea     ecx, [ebp+var_10] ; this
.text$mn:000042E7                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:000042EC                 push    eax             ; int
.text$mn:000042ED                 mov     edx, [ebp+var_8]
.text$mn:000042F0                 mov     eax, [edx]
.text$mn:000042F2                 push    eax             ; void *
.text$mn:000042F3                 lea     ecx, [ebp+var_1]
.text$mn:000042F6                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:000042FB                 mov     ecx, [ebp+var_8]
.text$mn:000042FE                 mov     edx, [ecx]
.text$mn:00004300                 mov     eax, [ebp+var_8]
.text$mn:00004303                 mov     [edx], eax
.text$mn:00004305                 mov     esp, ebp
.text$mn:00004307                 pop     ebp
.text$mn:00004308                 retn
.text$mn:00004308 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:00004308
.text$mn:00004308 ; ---------------------------------------------------------------------------
.text$mn:00004309                 align 4
.text$mn:00004309 _text$mn        ends
.text$mn:00004309
.text$mn:0000430C ; ===========================================================================
.text$mn:0000430C
.text$mn:0000430C ; Segment type: Pure code
.text$mn:0000430C ; Segment permissions: Read/Execute
.text$mn:0000430C _text$mn        segment para public 'CODE' use32
.text$mn:0000430C                 assume cs:_text$mn
.text$mn:0000430C                 ;org 430Ch
.text$mn:0000430C ; COMDAT (pick any)
.text$mn:0000430C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000430C
.text$mn:0000430C ; =============== S U B R O U T I N E =======================================
.text$mn:0000430C
.text$mn:0000430C ; Attributes: bp-based frame
.text$mn:0000430C
.text$mn:0000430C ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Alloc_proxy(void)
.text$mn:0000430C                 public ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ
.text$mn:0000430C ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ proc near
.text$mn:0000430C                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+38p
.text$mn:0000430C
.text$mn:0000430C var_10          = byte ptr -10h
.text$mn:0000430C var_8           = dword ptr -8
.text$mn:0000430C var_1           = byte ptr -1
.text$mn:0000430C
.text$mn:0000430C                 push    ebp
.text$mn:0000430D                 mov     ebp, esp
.text$mn:0000430F                 sub     esp, 10h
.text$mn:00004312                 mov     [ebp+var_8], ecx
.text$mn:00004315                 lea     ecx, [ebp+var_1]
.text$mn:00004318                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:0000431D                 push    1
.text$mn:0000431F                 lea     ecx, [ebp+var_1]
.text$mn:00004322                 call    ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::allocate(uint)
.text$mn:00004327                 mov     ecx, [ebp+var_8]
.text$mn:0000432A                 mov     [ecx], eax
.text$mn:0000432C                 lea     ecx, [ebp+var_10] ; this
.text$mn:0000432F                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:00004334                 push    eax             ; int
.text$mn:00004335                 mov     edx, [ebp+var_8]
.text$mn:00004338                 mov     eax, [edx]
.text$mn:0000433A                 push    eax             ; void *
.text$mn:0000433B                 lea     ecx, [ebp+var_1]
.text$mn:0000433E                 call    ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00004343                 mov     ecx, [ebp+var_8]
.text$mn:00004346                 mov     edx, [ecx]
.text$mn:00004348                 mov     eax, [ebp+var_8]
.text$mn:0000434B                 mov     [edx], eax
.text$mn:0000434D                 mov     esp, ebp
.text$mn:0000434F                 pop     ebp
.text$mn:00004350                 retn
.text$mn:00004350 ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ endp
.text$mn:00004350
.text$mn:00004350 ; ---------------------------------------------------------------------------
.text$mn:00004351                 align 4
.text$mn:00004351 _text$mn        ends
.text$mn:00004351
.text$mn:00004354 ; ===========================================================================
.text$mn:00004354
.text$mn:00004354 ; Segment type: Pure code
.text$mn:00004354 ; Segment permissions: Read/Execute
.text$mn:00004354 _text$mn        segment para public 'CODE' use32
.text$mn:00004354                 assume cs:_text$mn
.text$mn:00004354                 ;org 4354h
.text$mn:00004354 ; COMDAT (pick any)
.text$mn:00004354                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004354
.text$mn:00004354 ; =============== S U B R O U T I N E =======================================
.text$mn:00004354
.text$mn:00004354 ; Attributes: bp-based frame
.text$mn:00004354
.text$mn:00004354 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Assign_rv(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:00004354                 public ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z
.text$mn:00004354 ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z proc near
.text$mn:00004354                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+60p
.text$mn:00004354                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+E2p
.text$mn:00004354
.text$mn:00004354 var_8           = dword ptr -8
.text$mn:00004354 var_1           = byte ptr -1
.text$mn:00004354 arg_0           = dword ptr  8
.text$mn:00004354
.text$mn:00004354                 push    ebp
.text$mn:00004355                 mov     ebp, esp
.text$mn:00004357                 sub     esp, 8
.text$mn:0000435A                 mov     [ebp+var_8], ecx
.text$mn:0000435D                 mov     eax, [ebp+arg_0]
.text$mn:00004360                 cmp     dword ptr [eax+18h], 8
.text$mn:00004364                 jnb     short loc_4388
.text$mn:00004366                 mov     ecx, [ebp+arg_0]
.text$mn:00004369                 mov     edx, [ecx+14h]
.text$mn:0000436C                 add     edx, 1
.text$mn:0000436F                 push    edx             ; int
.text$mn:00004370                 mov     eax, [ebp+arg_0]
.text$mn:00004373                 add     eax, 4
.text$mn:00004376                 push    eax             ; Src
.text$mn:00004377                 mov     ecx, [ebp+var_8]
.text$mn:0000437A                 add     ecx, 4
.text$mn:0000437D                 push    ecx             ; Dst
.text$mn:0000437E                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00004383                 add     esp, 0Ch
.text$mn:00004386                 jmp     short loc_43B3
.text$mn:00004388 ; ---------------------------------------------------------------------------
.text$mn:00004388
.text$mn:00004388 loc_4388:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+10j
.text$mn:00004388                 mov     edx, [ebp+arg_0]
.text$mn:0000438B                 add     edx, 4
.text$mn:0000438E                 push    edx             ; int
.text$mn:0000438F                 mov     eax, [ebp+var_8]
.text$mn:00004392                 add     eax, 4
.text$mn:00004395                 push    eax             ; void *
.text$mn:00004396                 lea     ecx, [ebp+var_1]
.text$mn:00004399                 push    ecx
.text$mn:0000439A                 mov     ecx, [ebp+var_8]
.text$mn:0000439D                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000043A2                 mov     ecx, eax
.text$mn:000043A4                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:000043A9                 mov     edx, [ebp+arg_0]
.text$mn:000043AC                 mov     dword ptr [edx+4], 0
.text$mn:000043B3
.text$mn:000043B3 loc_43B3:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+32j
.text$mn:000043B3                 mov     eax, [ebp+var_8]
.text$mn:000043B6                 mov     ecx, [ebp+arg_0]
.text$mn:000043B9                 mov     edx, [ecx+14h]
.text$mn:000043BC                 mov     [eax+14h], edx
.text$mn:000043BF                 mov     eax, [ebp+var_8]
.text$mn:000043C2                 mov     ecx, [ebp+arg_0]
.text$mn:000043C5                 mov     edx, [ecx+18h]
.text$mn:000043C8                 mov     [eax+18h], edx
.text$mn:000043CB                 push    0
.text$mn:000043CD                 push    0
.text$mn:000043CF                 mov     ecx, [ebp+arg_0]
.text$mn:000043D2                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000043D7                 mov     esp, ebp
.text$mn:000043D9                 pop     ebp
.text$mn:000043DA                 retn    4
.text$mn:000043DA ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z endp
.text$mn:000043DA
.text$mn:000043DA ; ---------------------------------------------------------------------------
.text$mn:000043DD                 align 10h
.text$mn:000043DD _text$mn        ends
.text$mn:000043DD
.text$mn:000043E0 ; ===========================================================================
.text$mn:000043E0
.text$mn:000043E0 ; Segment type: Pure code
.text$mn:000043E0 ; Segment permissions: Read/Execute
.text$mn:000043E0 _text$mn        segment para public 'CODE' use32
.text$mn:000043E0                 assume cs:_text$mn
.text$mn:000043E0                 ;org 43E0h
.text$mn:000043E0 ; COMDAT (pick any)
.text$mn:000043E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000043E0
.text$mn:000043E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000043E0
.text$mn:000043E0 ; Attributes: bp-based frame
.text$mn:000043E0
.text$mn:000043E0 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Change_alloc(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:000043E0                 public ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z
.text$mn:000043E0 ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z proc near
.text$mn:000043E0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+54p
.text$mn:000043E0
.text$mn:000043E0 var_4           = dword ptr -4
.text$mn:000043E0
.text$mn:000043E0                 push    ebp
.text$mn:000043E1                 mov     ebp, esp
.text$mn:000043E3                 push    ecx
.text$mn:000043E4                 mov     [ebp+var_4], ecx
.text$mn:000043E7                 mov     esp, ebp
.text$mn:000043E9                 pop     ebp
.text$mn:000043EA                 retn    4
.text$mn:000043EA ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z endp
.text$mn:000043EA
.text$mn:000043EA ; ---------------------------------------------------------------------------
.text$mn:000043ED                 align 10h
.text$mn:000043ED _text$mn        ends
.text$mn:000043ED
.text$mn:000043F0 ; ===========================================================================
.text$mn:000043F0
.text$mn:000043F0 ; Segment type: Pure code
.text$mn:000043F0 ; Segment permissions: Read/Execute
.text$mn:000043F0 _text$mn        segment para public 'CODE' use32
.text$mn:000043F0                 assume cs:_text$mn
.text$mn:000043F0                 ;org 43F0h
.text$mn:000043F0 ; COMDAT (pick any)
.text$mn:000043F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000043F0
.text$mn:000043F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000043F0
.text$mn:000043F0 ; Attributes: bp-based frame
.text$mn:000043F0
.text$mn:000043F0 ; void __thiscall std::_Iterator_base12::_Clrcont(std::_Iterator_base12 *__hidden this)
.text$mn:000043F0                 public ?_Clrcont@_Iterator_base12@std@@QAEXXZ
.text$mn:000043F0 ?_Clrcont@_Iterator_base12@std@@QAEXXZ proc near
.text$mn:000043F0                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+80p
.text$mn:000043F0
.text$mn:000043F0 var_4           = dword ptr -4
.text$mn:000043F0
.text$mn:000043F0                 push    ebp
.text$mn:000043F1                 mov     ebp, esp
.text$mn:000043F3                 push    ecx
.text$mn:000043F4                 mov     [ebp+var_4], ecx
.text$mn:000043F7                 mov     eax, [ebp+var_4]
.text$mn:000043FA                 mov     dword ptr [eax], 0
.text$mn:00004400                 mov     esp, ebp
.text$mn:00004402                 pop     ebp
.text$mn:00004403                 retn
.text$mn:00004403 ?_Clrcont@_Iterator_base12@std@@QAEXXZ endp
.text$mn:00004403
.text$mn:00004403 _text$mn        ends
.text$mn:00004403
.text$mn:00004404 ; ===========================================================================
.text$mn:00004404
.text$mn:00004404 ; Segment type: Pure code
.text$mn:00004404 ; Segment permissions: Read/Execute
.text$mn:00004404 _text$mn        segment para public 'CODE' use32
.text$mn:00004404                 assume cs:_text$mn
.text$mn:00004404                 ;org 4404h
.text$mn:00004404 ; COMDAT (pick any)
.text$mn:00004404                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004404
.text$mn:00004404 ; =============== S U B R O U T I N E =======================================
.text$mn:00004404
.text$mn:00004404 ; Attributes: bp-based frame
.text$mn:00004404
.text$mn:00004404 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_Iterator_base12 *)
.text$mn:00004404                 public ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z
.text$mn:00004404 ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z proc near
.text$mn:00004404                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+10p
.text$mn:00004404                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+Ep
.text$mn:00004404
.text$mn:00004404 var_4           = dword ptr -4
.text$mn:00004404 arg_0           = dword ptr  8
.text$mn:00004404
.text$mn:00004404                 push    ebp
.text$mn:00004405                 mov     ebp, esp
.text$mn:00004407                 push    ecx
.text$mn:00004408                 push    esi
.text$mn:00004409                 mov     [ebp+var_4], ecx
.text$mn:0000440C                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000440F                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00004414                 test    eax, eax
.text$mn:00004416                 jz      short loc_442E
.text$mn:00004418                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000441B                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00004420                 mov     esi, eax
.text$mn:00004422                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00004425                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000442A                 cmp     esi, eax
.text$mn:0000442C                 jz      short loc_4496
.text$mn:0000442E
.text$mn:0000442E loc_442E:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+12j
.text$mn:0000442E                 push    0FAh ; '·'      ; unsigned int
.text$mn:00004433                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00004438                 push    offset ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; "string iterators incompatible"
.text$mn:0000443D                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004442                 add     esp, 0Ch
.text$mn:00004445                 mov     eax, offset ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ ; "Standard C++ Libraries Invalid Argument"
.text$mn:0000444A                 test    eax, eax
.text$mn:0000444C                 jz      short loc_4452
.text$mn:0000444E                 xor     ecx, ecx
.text$mn:00004450                 jnz     short loc_4478
.text$mn:00004452
.text$mn:00004452 loc_4452:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+48j
.text$mn:00004452                 push    offset ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ ; "\"Standard C++ Libraries Invalid Argume"...
.text$mn:00004457                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:0000445C                 push    0
.text$mn:0000445E                 push    0FBh ; 'v'
.text$mn:00004463                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00004468                 push    2
.text$mn:0000446A                 call    __CrtDbgReportW
.text$mn:0000446F                 add     esp, 18h
.text$mn:00004472                 cmp     eax, 1
.text$mn:00004475                 jnz     short loc_4478
.text$mn:00004477                 int     3               ; Trap to Debugger
.text$mn:00004478
.text$mn:00004478 loc_4478:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+4Cj
.text$mn:00004478                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+71j
.text$mn:00004478                 push    0
.text$mn:0000447A                 push    0FBh ; 'v'
.text$mn:0000447F                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00004484                 push    offset ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; "std::_String_const_iterator<class std::"...
.text$mn:00004489                 push    offset ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; "\"invalid argument\""
.text$mn:0000448E                 call    __invalid_parameter
.text$mn:00004493                 add     esp, 14h
.text$mn:00004496
.text$mn:00004496 loc_4496:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+28j
.text$mn:00004496                 pop     esi
.text$mn:00004497                 mov     esp, ebp
.text$mn:00004499                 pop     ebp
.text$mn:0000449A                 retn    4
.text$mn:0000449A ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z endp
.text$mn:0000449A
.text$mn:0000449A ; ---------------------------------------------------------------------------
.text$mn:0000449D                 align 10h
.text$mn:0000449D _text$mn        ends
.text$mn:0000449D
.text$mn:000044A0 ; ===========================================================================
.text$mn:000044A0
.text$mn:000044A0 ; Segment type: Pure code
.text$mn:000044A0 ; Segment permissions: Read/Execute
.text$mn:000044A0 _text$mn        segment para public 'CODE' use32
.text$mn:000044A0                 assume cs:_text$mn
.text$mn:000044A0                 ;org 44A0h
.text$mn:000044A0 ; COMDAT (pick any)
.text$mn:000044A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000044A0
.text$mn:000044A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000044A0
.text$mn:000044A0 ; Attributes: bp-based frame
.text$mn:000044A0
.text$mn:000044A0 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Copy(unsigned int, unsigned int)
.text$mn:000044A0                 public ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:000044A0 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$mn:000044A0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+37p
.text$mn:000044A0
.text$mn:000044A0 var_20          = dword ptr -20h
.text$mn:000044A0 var_1C          = dword ptr -1Ch
.text$mn:000044A0 var_18          = dword ptr -18h
.text$mn:000044A0 var_11          = byte ptr -11h
.text$mn:000044A0 var_10          = dword ptr -10h
.text$mn:000044A0 var_C           = byte ptr -0Ch
.text$mn:000044A0 var_4           = dword ptr -4
.text$mn:000044A0 arg_0           = dword ptr  8
.text$mn:000044A0
.text$mn:000044A0 ; FUNCTION CHUNK AT .text$mn:000045C2 SIZE 00000009 BYTES
.text$mn:000044A0
.text$mn:000044A0                 push    ebp
.text$mn:000044A1                 mov     ebp, esp
.text$mn:000044A3                 push    0FFFFFFFFh
.text$mn:000044A5                 push    offset __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:000044AA                 mov     eax, large fs:0
.text$mn:000044B0                 push    eax
.text$mn:000044B1                 push    ecx
.text$mn:000044B2                 sub     esp, 10h
.text$mn:000044B5                 push    ebx
.text$mn:000044B6                 push    esi
.text$mn:000044B7                 push    edi
.text$mn:000044B8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000044BD                 xor     eax, ebp
.text$mn:000044BF                 push    eax
.text$mn:000044C0                 lea     eax, [ebp+var_C]
.text$mn:000044C3                 mov     large fs:0, eax
.text$mn:000044C9                 mov     [ebp+var_10], esp
.text$mn:000044CC                 mov     [ebp+var_18], ecx
.text$mn:000044CF                 mov     eax, [ebp+arg_0]
.text$mn:000044D2                 or      eax, 0Fh
.text$mn:000044D5                 mov     [ebp+var_1C], eax
.text$mn:000044D8                 mov     ecx, [ebp+var_18]
.text$mn:000044DB                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:000044E0                 cmp     eax, [ebp+var_1C]
.text$mn:000044E3                 jnb     short loc_44ED
.text$mn:000044E5                 mov     ecx, [ebp+arg_0]
.text$mn:000044E8                 mov     [ebp+var_1C], ecx
.text$mn:000044EB                 jmp     short loc_453F
.text$mn:000044ED ; ---------------------------------------------------------------------------
.text$mn:000044ED
.text$mn:000044ED loc_44ED:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+43j
.text$mn:000044ED                 mov     edx, [ebp+var_18]
.text$mn:000044F0                 mov     ecx, [edx+18h]
.text$mn:000044F3                 shr     ecx, 1
.text$mn:000044F5                 mov     eax, [ebp+var_1C]
.text$mn:000044F8                 xor     edx, edx
.text$mn:000044FA                 mov     esi, 3
.text$mn:000044FF                 div     esi
.text$mn:00004501                 cmp     ecx, eax
.text$mn:00004503                 ja      short loc_4507
.text$mn:00004505                 jmp     short loc_453F
.text$mn:00004507 ; ---------------------------------------------------------------------------
.text$mn:00004507
.text$mn:00004507 loc_4507:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+63j
.text$mn:00004507                 mov     ecx, [ebp+var_18]
.text$mn:0000450A                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:0000450F                 mov     edx, [ebp+var_18]
.text$mn:00004512                 mov     ecx, [edx+18h]
.text$mn:00004515                 shr     ecx, 1
.text$mn:00004517                 sub     eax, ecx
.text$mn:00004519                 mov     edx, [ebp+var_18]
.text$mn:0000451C                 cmp     [edx+18h], eax
.text$mn:0000451F                 ja      short loc_4534
.text$mn:00004521                 mov     eax, [ebp+var_18]
.text$mn:00004524                 mov     ecx, [eax+18h]
.text$mn:00004527                 shr     ecx, 1
.text$mn:00004529                 mov     edx, [ebp+var_18]
.text$mn:0000452C                 add     ecx, [edx+18h]
.text$mn:0000452F                 mov     [ebp+var_1C], ecx
.text$mn:00004532                 jmp     short loc_453F
.text$mn:00004534 ; ---------------------------------------------------------------------------
.text$mn:00004534
.text$mn:00004534 loc_4534:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+7Fj
.text$mn:00004534                 mov     ecx, [ebp+var_18]
.text$mn:00004537                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:0000453C                 mov     [ebp+var_1C], eax
.text$mn:0000453F
.text$mn:0000453F loc_453F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+4Bj
.text$mn:0000453F                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+65j ...
.text$mn:0000453F                 mov     [ebp+var_4], 0
.text$mn:00004546                 mov     eax, [ebp+var_1C]
.text$mn:00004549                 add     eax, 1
.text$mn:0000454C                 push    eax
.text$mn:0000454D                 lea     ecx, [ebp+var_11]
.text$mn:00004550                 push    ecx
.text$mn:00004551                 mov     ecx, [ebp+var_18]
.text$mn:00004554                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00004559                 mov     ecx, eax
.text$mn:0000455B                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:00004560                 mov     [ebp+var_20], eax
.text$mn:00004563                 jmp     short loc_45C2
.text$mn:00004563 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$mn:00004563
.text$mn:00004565
.text$mn:00004565 ; =============== S U B R O U T I N E =======================================
.text$mn:00004565
.text$mn:00004565
.text$mn:00004565 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
.text$mn:00004565                                         ; DATA XREF: .xdata$x:000074ACo
.text$mn:00004565
.text$mn:00004565 ; FUNCTION CHUNK AT .text$mn:000045AC SIZE 00000009 BYTES
.text$mn:00004565 ; FUNCTION CHUNK AT .text$mn:000045BC SIZE 00000006 BYTES
.text$mn:00004565
.text$mn:00004565                 mov     [ebp-10h], esp
.text$mn:00004568                 mov     edx, [ebp+8]
.text$mn:0000456B                 mov     [ebp-1Ch], edx
.text$mn:0000456E                 mov     byte ptr [ebp-4], 2
.text$mn:00004572                 mov     eax, [ebp-1Ch]
.text$mn:00004575                 add     eax, 1
.text$mn:00004578                 push    eax
.text$mn:00004579                 lea     ecx, [ebp-12h]
.text$mn:0000457C                 push    ecx
.text$mn:0000457D                 mov     ecx, [ebp-18h]
.text$mn:00004580                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00004585                 mov     ecx, eax
.text$mn:00004587                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:0000458C                 mov     [ebp-20h], eax
.text$mn:0000458F                 jmp     short loc_45AC
.text$mn:0000458F __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 endp
.text$mn:0000458F
.text$mn:00004591
.text$mn:00004591 ; =============== S U B R O U T I N E =======================================
.text$mn:00004591
.text$mn:00004591 ; Attributes: noreturn
.text$mn:00004591
.text$mn:00004591 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
.text$mn:00004591                                         ; DATA XREF: .xdata$x:000074BCo
.text$mn:00004591                 push    0               ; Size
.text$mn:00004593                 push    1               ; char
.text$mn:00004595                 mov     ecx, [ebp-18h]
.text$mn:00004598                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:0000459D                 push    0
.text$mn:0000459F                 push    0
.text$mn:000045A1                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:000045A1 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 endp
.text$mn:000045A1
.text$mn:000045A6 ; ---------------------------------------------------------------------------
.text$mn:000045A6                 mov     eax, offset $LN17
.text$mn:000045AB                 retn
.text$mn:000045AC ; ---------------------------------------------------------------------------
.text$mn:000045AC ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:000045AC
.text$mn:000045AC loc_45AC:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+2Aj
.text$mn:000045AC                 mov     dword ptr [ebp-4], 1
.text$mn:000045B3                 jmp     short loc_45BC
.text$mn:000045B3 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:000045B5
.text$mn:000045B5 ; =============== S U B R O U T I N E =======================================
.text$mn:000045B5
.text$mn:000045B5
.text$mn:000045B5 $LN17           proc near               ; DATA XREF: .text$mn:000045A6o
.text$mn:000045B5                 mov     dword ptr [ebp-4], 1
.text$mn:000045B5 $LN17           endp ; sp-analysis failed
.text$mn:000045B5
.text$mn:000045BC ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:000045BC
.text$mn:000045BC loc_45BC:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+4Ej
.text$mn:000045BC                 mov     eax, offset $LN19
.text$mn:000045C1                 retn
.text$mn:000045C1 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:000045C2 ; ---------------------------------------------------------------------------
.text$mn:000045C2 ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:000045C2
.text$mn:000045C2 loc_45C2:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+C3j
.text$mn:000045C2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000045C9                 jmp     short loc_45D2
.text$mn:000045C9 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:000045CB
.text$mn:000045CB ; =============== S U B R O U T I N E =======================================
.text$mn:000045CB
.text$mn:000045CB
.text$mn:000045CB $LN19           proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:loc_45BCo
.text$mn:000045CB                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:000045D2
.text$mn:000045D2 loc_45D2:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+129j
.text$mn:000045D2                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:000045D6                 jbe     short loc_45F1
.text$mn:000045D8                 mov     edx, [ebp+0Ch]
.text$mn:000045DB                 push    edx             ; Size
.text$mn:000045DC                 mov     ecx, [ebp-18h]
.text$mn:000045DF                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000045E4                 push    eax             ; Src
.text$mn:000045E5                 mov     eax, [ebp-20h]
.text$mn:000045E8                 push    eax             ; Dst
.text$mn:000045E9                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:000045EE                 add     esp, 0Ch
.text$mn:000045F1
.text$mn:000045F1 loc_45F1:                               ; CODE XREF: $LN19+Bj
.text$mn:000045F1                 push    0               ; Size
.text$mn:000045F3                 push    1               ; char
.text$mn:000045F5                 mov     ecx, [ebp-18h]
.text$mn:000045F8                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:000045FD                 lea     ecx, [ebp-20h]
.text$mn:00004600                 push    ecx             ; int
.text$mn:00004601                 mov     edx, [ebp-18h]
.text$mn:00004604                 add     edx, 4
.text$mn:00004607                 push    edx             ; void *
.text$mn:00004608                 lea     eax, [ebp-13h]
.text$mn:0000460B                 push    eax
.text$mn:0000460C                 mov     ecx, [ebp-18h]
.text$mn:0000460F                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00004614                 mov     ecx, eax
.text$mn:00004616                 call    ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)
.text$mn:0000461B                 mov     ecx, [ebp-18h]
.text$mn:0000461E                 mov     edx, [ebp-1Ch]
.text$mn:00004621                 mov     [ecx+18h], edx
.text$mn:00004624                 mov     eax, [ebp+0Ch]
.text$mn:00004627                 push    eax
.text$mn:00004628                 mov     ecx, [ebp-18h]
.text$mn:0000462B                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00004630                 mov     ecx, [ebp-0Ch]
.text$mn:00004633                 mov     large fs:0, ecx
.text$mn:0000463A                 pop     ecx
.text$mn:0000463B                 pop     edi
.text$mn:0000463C                 pop     esi
.text$mn:0000463D                 pop     ebx
.text$mn:0000463E                 mov     esp, ebp
.text$mn:00004640                 pop     ebp
.text$mn:00004641                 retn    8
.text$mn:00004641 $LN19           endp ; sp-analysis failed
.text$mn:00004641
.text$mn:00004641 _text$mn        ends
.text$mn:00004641
.text$x:00004644 ; ===========================================================================
.text$x:00004644
.text$x:00004644 ; Segment type: Pure code
.text$x:00004644 ; Segment permissions: Read/Execute
.text$x:00004644 _text$x         segment para public 'CODE' use32
.text$x:00004644                 assume cs:_text$x
.text$x:00004644                 ;org 4644h
.text$x:00004644 ; COMDAT (pick associative to section at 44A0)
.text$x:00004644                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004644
.text$x:00004644 ; =============== S U B R O U T I N E =======================================
.text$x:00004644
.text$x:00004644
.text$x:00004644 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$x:00004644                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+5o
.text$x:00004644
.text$x:00004644 arg_4           = dword ptr  8
.text$x:00004644
.text$x:00004644                 mov     edx, [esp+arg_4]
.text$x:00004648                 lea     eax, [edx+0Ch]
.text$x:0000464B                 mov     ecx, [edx-24h]
.text$x:0000464E                 xor     ecx, eax
.text$x:00004650                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004655                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$x:0000465A                 jmp     ___CxxFrameHandler3
.text$x:0000465A __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$x:0000465A
.text$x:0000465A ; ---------------------------------------------------------------------------
.text$x:0000465F                 align 10h
.text$x:0000465F _text$x         ends
.text$x:0000465F
.text$mn:00004660 ; ===========================================================================
.text$mn:00004660
.text$mn:00004660 ; Segment type: Pure code
.text$mn:00004660 ; Segment permissions: Read/Execute
.text$mn:00004660 _text$mn        segment para public 'CODE' use32
.text$mn:00004660                 assume cs:_text$mn
.text$mn:00004660                 ;org 4660h
.text$mn:00004660 ; COMDAT (pick any)
.text$mn:00004660                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004660
.text$mn:00004660 ; =============== S U B R O U T I N E =======================================
.text$mn:00004660
.text$mn:00004660 ; Attributes: bp-based frame
.text$mn:00004660
.text$mn:00004660 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Copy(unsigned int, unsigned int)
.text$mn:00004660                 public ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00004660 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$mn:00004660                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+37p
.text$mn:00004660
.text$mn:00004660 var_20          = dword ptr -20h
.text$mn:00004660 var_1C          = dword ptr -1Ch
.text$mn:00004660 var_18          = dword ptr -18h
.text$mn:00004660 var_11          = byte ptr -11h
.text$mn:00004660 var_10          = dword ptr -10h
.text$mn:00004660 var_C           = byte ptr -0Ch
.text$mn:00004660 var_4           = dword ptr -4
.text$mn:00004660 arg_0           = dword ptr  8
.text$mn:00004660
.text$mn:00004660 ; FUNCTION CHUNK AT .text$mn:00004782 SIZE 00000009 BYTES
.text$mn:00004660
.text$mn:00004660                 push    ebp
.text$mn:00004661                 mov     ebp, esp
.text$mn:00004663                 push    0FFFFFFFFh
.text$mn:00004665                 push    offset __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:0000466A                 mov     eax, large fs:0
.text$mn:00004670                 push    eax
.text$mn:00004671                 push    ecx
.text$mn:00004672                 sub     esp, 10h
.text$mn:00004675                 push    ebx
.text$mn:00004676                 push    esi
.text$mn:00004677                 push    edi
.text$mn:00004678                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000467D                 xor     eax, ebp
.text$mn:0000467F                 push    eax
.text$mn:00004680                 lea     eax, [ebp+var_C]
.text$mn:00004683                 mov     large fs:0, eax
.text$mn:00004689                 mov     [ebp+var_10], esp
.text$mn:0000468C                 mov     [ebp+var_18], ecx
.text$mn:0000468F                 mov     eax, [ebp+arg_0]
.text$mn:00004692                 or      eax, 7
.text$mn:00004695                 mov     [ebp+var_1C], eax
.text$mn:00004698                 mov     ecx, [ebp+var_18]
.text$mn:0000469B                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:000046A0                 cmp     eax, [ebp+var_1C]
.text$mn:000046A3                 jnb     short loc_46AD
.text$mn:000046A5                 mov     ecx, [ebp+arg_0]
.text$mn:000046A8                 mov     [ebp+var_1C], ecx
.text$mn:000046AB                 jmp     short loc_46FF
.text$mn:000046AD ; ---------------------------------------------------------------------------
.text$mn:000046AD
.text$mn:000046AD loc_46AD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+43j
.text$mn:000046AD                 mov     edx, [ebp+var_18]
.text$mn:000046B0                 mov     ecx, [edx+18h]
.text$mn:000046B3                 shr     ecx, 1
.text$mn:000046B5                 mov     eax, [ebp+var_1C]
.text$mn:000046B8                 xor     edx, edx
.text$mn:000046BA                 mov     esi, 3
.text$mn:000046BF                 div     esi
.text$mn:000046C1                 cmp     ecx, eax
.text$mn:000046C3                 ja      short loc_46C7
.text$mn:000046C5                 jmp     short loc_46FF
.text$mn:000046C7 ; ---------------------------------------------------------------------------
.text$mn:000046C7
.text$mn:000046C7 loc_46C7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+63j
.text$mn:000046C7                 mov     ecx, [ebp+var_18]
.text$mn:000046CA                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:000046CF                 mov     edx, [ebp+var_18]
.text$mn:000046D2                 mov     ecx, [edx+18h]
.text$mn:000046D5                 shr     ecx, 1
.text$mn:000046D7                 sub     eax, ecx
.text$mn:000046D9                 mov     edx, [ebp+var_18]
.text$mn:000046DC                 cmp     [edx+18h], eax
.text$mn:000046DF                 ja      short loc_46F4
.text$mn:000046E1                 mov     eax, [ebp+var_18]
.text$mn:000046E4                 mov     ecx, [eax+18h]
.text$mn:000046E7                 shr     ecx, 1
.text$mn:000046E9                 mov     edx, [ebp+var_18]
.text$mn:000046EC                 add     ecx, [edx+18h]
.text$mn:000046EF                 mov     [ebp+var_1C], ecx
.text$mn:000046F2                 jmp     short loc_46FF
.text$mn:000046F4 ; ---------------------------------------------------------------------------
.text$mn:000046F4
.text$mn:000046F4 loc_46F4:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+7Fj
.text$mn:000046F4                 mov     ecx, [ebp+var_18]
.text$mn:000046F7                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:000046FC                 mov     [ebp+var_1C], eax
.text$mn:000046FF
.text$mn:000046FF loc_46FF:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+4Bj
.text$mn:000046FF                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+65j ...
.text$mn:000046FF                 mov     [ebp+var_4], 0
.text$mn:00004706                 mov     eax, [ebp+var_1C]
.text$mn:00004709                 add     eax, 1
.text$mn:0000470C                 push    eax
.text$mn:0000470D                 lea     ecx, [ebp+var_11]
.text$mn:00004710                 push    ecx
.text$mn:00004711                 mov     ecx, [ebp+var_18]
.text$mn:00004714                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00004719                 mov     ecx, eax
.text$mn:0000471B                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:00004720                 mov     [ebp+var_20], eax
.text$mn:00004723                 jmp     short loc_4782
.text$mn:00004723 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$mn:00004723
.text$mn:00004725
.text$mn:00004725 ; =============== S U B R O U T I N E =======================================
.text$mn:00004725
.text$mn:00004725
.text$mn:00004725 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 proc near
.text$mn:00004725                                         ; DATA XREF: .xdata$x:000079C8o
.text$mn:00004725
.text$mn:00004725 ; FUNCTION CHUNK AT .text$mn:0000476C SIZE 00000009 BYTES
.text$mn:00004725 ; FUNCTION CHUNK AT .text$mn:0000477C SIZE 00000006 BYTES
.text$mn:00004725
.text$mn:00004725                 mov     [ebp-10h], esp
.text$mn:00004728                 mov     edx, [ebp+8]
.text$mn:0000472B                 mov     [ebp-1Ch], edx
.text$mn:0000472E                 mov     byte ptr [ebp-4], 2
.text$mn:00004732                 mov     eax, [ebp-1Ch]
.text$mn:00004735                 add     eax, 1
.text$mn:00004738                 push    eax
.text$mn:00004739                 lea     ecx, [ebp-12h]
.text$mn:0000473C                 push    ecx
.text$mn:0000473D                 mov     ecx, [ebp-18h]
.text$mn:00004740                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00004745                 mov     ecx, eax
.text$mn:00004747                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:0000474C                 mov     [ebp-20h], eax
.text$mn:0000474F                 jmp     short loc_476C
.text$mn:0000474F __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 endp
.text$mn:0000474F
.text$mn:00004751
.text$mn:00004751 ; =============== S U B R O U T I N E =======================================
.text$mn:00004751
.text$mn:00004751 ; Attributes: noreturn
.text$mn:00004751
.text$mn:00004751 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 proc near
.text$mn:00004751                                         ; DATA XREF: .xdata$x:000079D8o
.text$mn:00004751                 push    0
.text$mn:00004753                 push    1
.text$mn:00004755                 mov     ecx, [ebp-18h]
.text$mn:00004758                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000475D                 push    0
.text$mn:0000475F                 push    0
.text$mn:00004761                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00004761 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 endp
.text$mn:00004761
.text$mn:00004766 ; ---------------------------------------------------------------------------
.text$mn:00004766                 mov     eax, offset $LN17_0
.text$mn:0000476B                 retn
.text$mn:0000476C ; ---------------------------------------------------------------------------
.text$mn:0000476C ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:0000476C
.text$mn:0000476C loc_476C:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+2Aj
.text$mn:0000476C                 mov     dword ptr [ebp-4], 1
.text$mn:00004773                 jmp     short loc_477C
.text$mn:00004773 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:00004775
.text$mn:00004775 ; =============== S U B R O U T I N E =======================================
.text$mn:00004775
.text$mn:00004775
.text$mn:00004775 $LN17_0         proc near               ; DATA XREF: .text$mn:00004766o
.text$mn:00004775                 mov     dword ptr [ebp-4], 1
.text$mn:00004775 $LN17_0         endp ; sp-analysis failed
.text$mn:00004775
.text$mn:0000477C ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:0000477C
.text$mn:0000477C loc_477C:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+4Ej
.text$mn:0000477C                 mov     eax, offset $LN19_0
.text$mn:00004781                 retn
.text$mn:00004781 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:00004782 ; ---------------------------------------------------------------------------
.text$mn:00004782 ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00004782
.text$mn:00004782 loc_4782:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+C3j
.text$mn:00004782                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004789                 jmp     short loc_4792
.text$mn:00004789 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:0000478B
.text$mn:0000478B ; =============== S U B R O U T I N E =======================================
.text$mn:0000478B
.text$mn:0000478B
.text$mn:0000478B $LN19_0         proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0:loc_477Co
.text$mn:0000478B                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00004792
.text$mn:00004792 loc_4792:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+129j
.text$mn:00004792                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:00004796                 jbe     short loc_47B1
.text$mn:00004798                 mov     edx, [ebp+0Ch]
.text$mn:0000479B                 push    edx             ; int
.text$mn:0000479C                 mov     ecx, [ebp-18h]
.text$mn:0000479F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000047A4                 push    eax             ; Src
.text$mn:000047A5                 mov     eax, [ebp-20h]
.text$mn:000047A8                 push    eax             ; Dst
.text$mn:000047A9                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:000047AE                 add     esp, 0Ch
.text$mn:000047B1
.text$mn:000047B1 loc_47B1:                               ; CODE XREF: $LN19_0+Bj
.text$mn:000047B1                 push    0
.text$mn:000047B3                 push    1
.text$mn:000047B5                 mov     ecx, [ebp-18h]
.text$mn:000047B8                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000047BD                 lea     ecx, [ebp-20h]
.text$mn:000047C0                 push    ecx             ; int
.text$mn:000047C1                 mov     edx, [ebp-18h]
.text$mn:000047C4                 add     edx, 4
.text$mn:000047C7                 push    edx             ; void *
.text$mn:000047C8                 lea     eax, [ebp-13h]
.text$mn:000047CB                 push    eax
.text$mn:000047CC                 mov     ecx, [ebp-18h]
.text$mn:000047CF                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000047D4                 mov     ecx, eax
.text$mn:000047D6                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:000047DB                 mov     ecx, [ebp-18h]
.text$mn:000047DE                 mov     edx, [ebp-1Ch]
.text$mn:000047E1                 mov     [ecx+18h], edx
.text$mn:000047E4                 mov     eax, [ebp+0Ch]
.text$mn:000047E7                 push    eax
.text$mn:000047E8                 mov     ecx, [ebp-18h]
.text$mn:000047EB                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000047F0                 mov     ecx, [ebp-0Ch]
.text$mn:000047F3                 mov     large fs:0, ecx
.text$mn:000047FA                 pop     ecx
.text$mn:000047FB                 pop     edi
.text$mn:000047FC                 pop     esi
.text$mn:000047FD                 pop     ebx
.text$mn:000047FE                 mov     esp, ebp
.text$mn:00004800                 pop     ebp
.text$mn:00004801                 retn    8
.text$mn:00004801 $LN19_0         endp ; sp-analysis failed
.text$mn:00004801
.text$mn:00004801 _text$mn        ends
.text$mn:00004801
.text$x:00004804 ; ===========================================================================
.text$x:00004804
.text$x:00004804 ; Segment type: Pure code
.text$x:00004804 ; Segment permissions: Read/Execute
.text$x:00004804 _text$x         segment para public 'CODE' use32
.text$x:00004804                 assume cs:_text$x
.text$x:00004804                 ;org 4804h
.text$x:00004804 ; COMDAT (pick associative to section at 4660)
.text$x:00004804                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004804
.text$x:00004804 ; =============== S U B R O U T I N E =======================================
.text$x:00004804
.text$x:00004804
.text$x:00004804 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$x:00004804                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+5o
.text$x:00004804
.text$x:00004804 arg_4           = dword ptr  8
.text$x:00004804
.text$x:00004804                 mov     edx, [esp+arg_4]
.text$x:00004808                 lea     eax, [edx+0Ch]
.text$x:0000480B                 mov     ecx, [edx-24h]
.text$x:0000480E                 xor     ecx, eax
.text$x:00004810                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004815                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$x:0000481A                 jmp     ___CxxFrameHandler3
.text$x:0000481A __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$x:0000481A
.text$x:0000481A ; ---------------------------------------------------------------------------
.text$x:0000481F                 align 10h
.text$x:0000481F _text$x         ends
.text$x:0000481F
.text$mn:00004820 ; ===========================================================================
.text$mn:00004820
.text$mn:00004820 ; Segment type: Pure code
.text$mn:00004820 ; Segment permissions: Read/Execute
.text$mn:00004820 _text$mn        segment para public 'CODE' use32
.text$mn:00004820                 assume cs:_text$mn
.text$mn:00004820                 ;org 4820h
.text$mn:00004820 ; COMDAT (pick any)
.text$mn:00004820                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004820
.text$mn:00004820 ; =============== S U B R O U T I N E =======================================
.text$mn:00004820
.text$mn:00004820 ; Attributes: bp-based frame
.text$mn:00004820
.text$mn:00004820 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Destroy(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00004820                 public ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$mn:00004820 ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z proc near
.text$mn:00004820                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+CBp
.text$mn:00004820                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Tidy(void)+2Bp
.text$mn:00004820
.text$mn:00004820 var_8           = dword ptr -8
.text$mn:00004820 var_1           = byte ptr -1
.text$mn:00004820 arg_0           = dword ptr  8
.text$mn:00004820 arg_4           = dword ptr  0Ch
.text$mn:00004820
.text$mn:00004820                 push    ebp
.text$mn:00004821                 mov     ebp, esp
.text$mn:00004823                 sub     esp, 8
.text$mn:00004826                 mov     [ebp+var_8], ecx
.text$mn:00004829                 lea     eax, [ebp+var_1]
.text$mn:0000482C                 push    eax
.text$mn:0000482D                 mov     ecx, [ebp+var_8]
.text$mn:00004830                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:00004835                 lea     ecx, [ebp+var_1]
.text$mn:00004838                 push    ecx
.text$mn:00004839                 mov     edx, [ebp+arg_4]
.text$mn:0000483C                 push    edx
.text$mn:0000483D                 mov     eax, [ebp+arg_0]
.text$mn:00004840                 push    eax
.text$mn:00004841                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:00004846                 add     esp, 0Ch
.text$mn:00004849                 mov     esp, ebp
.text$mn:0000484B                 pop     ebp
.text$mn:0000484C                 retn    8
.text$mn:0000484C ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z endp
.text$mn:0000484C
.text$mn:0000484C ; ---------------------------------------------------------------------------
.text$mn:0000484F                 align 10h
.text$mn:0000484F _text$mn        ends
.text$mn:0000484F
.text$mn:00004850 ; ===========================================================================
.text$mn:00004850
.text$mn:00004850 ; Segment type: Pure code
.text$mn:00004850 ; Segment permissions: Read/Execute
.text$mn:00004850 _text$mn        segment para public 'CODE' use32
.text$mn:00004850                 assume cs:_text$mn
.text$mn:00004850                 ;org 4850h
.text$mn:00004850 ; COMDAT (pick any)
.text$mn:00004850                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004850
.text$mn:00004850 ; =============== S U B R O U T I N E =======================================
.text$mn:00004850
.text$mn:00004850 ; Attributes: bp-based frame
.text$mn:00004850
.text$mn:00004850 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Eos(unsigned int)
.text$mn:00004850                 public ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
.text$mn:00004850 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc near
.text$mn:00004850                                         ; CODE XREF: $LN19+60p
.text$mn:00004850                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+83p ...
.text$mn:00004850
.text$mn:00004850 var_8           = dword ptr -8
.text$mn:00004850 var_1           = byte ptr -1
.text$mn:00004850 arg_0           = dword ptr  8
.text$mn:00004850
.text$mn:00004850                 push    ebp
.text$mn:00004851                 mov     ebp, esp
.text$mn:00004853                 sub     esp, 8
.text$mn:00004856                 mov     [ebp+var_8], ecx
.text$mn:00004859                 mov     [ebp+var_1], 0
.text$mn:0000485D                 mov     eax, [ebp+var_8]
.text$mn:00004860                 mov     ecx, [ebp+arg_0]
.text$mn:00004863                 mov     [eax+14h], ecx
.text$mn:00004866                 lea     edx, [ebp+var_1]
.text$mn:00004869                 push    edx
.text$mn:0000486A                 mov     ecx, [ebp+var_8]
.text$mn:0000486D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00004872                 add     eax, [ebp+arg_0]
.text$mn:00004875                 push    eax
.text$mn:00004876                 call    ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign(char &,char const &)
.text$mn:0000487B                 add     esp, 8
.text$mn:0000487E                 mov     esp, ebp
.text$mn:00004880                 pop     ebp
.text$mn:00004881                 retn    4
.text$mn:00004881 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z endp
.text$mn:00004881
.text$mn:00004881 _text$mn        ends
.text$mn:00004881
.text$mn:00004884 ; ===========================================================================
.text$mn:00004884
.text$mn:00004884 ; Segment type: Pure code
.text$mn:00004884 ; Segment permissions: Read/Execute
.text$mn:00004884 _text$mn        segment para public 'CODE' use32
.text$mn:00004884                 assume cs:_text$mn
.text$mn:00004884                 ;org 4884h
.text$mn:00004884 ; COMDAT (pick any)
.text$mn:00004884                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004884
.text$mn:00004884 ; =============== S U B R O U T I N E =======================================
.text$mn:00004884
.text$mn:00004884 ; Attributes: bp-based frame
.text$mn:00004884
.text$mn:00004884 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Eos(unsigned int)
.text$mn:00004884                 public ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
.text$mn:00004884 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z proc near
.text$mn:00004884                                         ; CODE XREF: $LN19_0+60p
.text$mn:00004884                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+83p ...
.text$mn:00004884
.text$mn:00004884 var_8           = dword ptr -8
.text$mn:00004884 var_2           = word ptr -2
.text$mn:00004884 arg_0           = dword ptr  8
.text$mn:00004884
.text$mn:00004884                 push    ebp
.text$mn:00004885                 mov     ebp, esp
.text$mn:00004887                 sub     esp, 8
.text$mn:0000488A                 mov     [ebp+var_8], ecx
.text$mn:0000488D                 xor     eax, eax
.text$mn:0000488F                 mov     [ebp+var_2], ax
.text$mn:00004893                 mov     ecx, [ebp+var_8]
.text$mn:00004896                 mov     edx, [ebp+arg_0]
.text$mn:00004899                 mov     [ecx+14h], edx
.text$mn:0000489C                 lea     eax, [ebp+var_2]
.text$mn:0000489F                 push    eax
.text$mn:000048A0                 mov     ecx, [ebp+var_8]
.text$mn:000048A3                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000048A8                 mov     ecx, [ebp+arg_0]
.text$mn:000048AB                 lea     edx, [eax+ecx*2]
.text$mn:000048AE                 push    edx
.text$mn:000048AF                 call    ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ; std::char_traits<wchar_t>::assign(wchar_t &,wchar_t const &)
.text$mn:000048B4                 add     esp, 8
.text$mn:000048B7                 mov     esp, ebp
.text$mn:000048B9                 pop     ebp
.text$mn:000048BA                 retn    4
.text$mn:000048BA ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z endp
.text$mn:000048BA
.text$mn:000048BA ; ---------------------------------------------------------------------------
.text$mn:000048BD                 align 10h
.text$mn:000048BD _text$mn        ends
.text$mn:000048BD
.text$mn:000048C0 ; ===========================================================================
.text$mn:000048C0
.text$mn:000048C0 ; Segment type: Pure code
.text$mn:000048C0 ; Segment permissions: Read/Execute
.text$mn:000048C0 _text$mn        segment para public 'CODE' use32
.text$mn:000048C0                 assume cs:_text$mn
.text$mn:000048C0                 ;org 48C0h
.text$mn:000048C0 ; COMDAT (pick any)
.text$mn:000048C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000048C0
.text$mn:000048C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000048C0
.text$mn:000048C0 ; Attributes: bp-based frame
.text$mn:000048C0
.text$mn:000048C0 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Free_proxy(void)
.text$mn:000048C0                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:000048C0 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:000048C0                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+30p
.text$mn:000048C0
.text$mn:000048C0 var_8           = dword ptr -8
.text$mn:000048C0 var_1           = byte ptr -1
.text$mn:000048C0
.text$mn:000048C0                 push    ebp
.text$mn:000048C1                 mov     ebp, esp
.text$mn:000048C3                 sub     esp, 8
.text$mn:000048C6                 mov     [ebp+var_8], ecx
.text$mn:000048C9                 lea     ecx, [ebp+var_1]
.text$mn:000048CC                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:000048D1                 mov     ecx, [ebp+var_8] ; this
.text$mn:000048D4                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:000048D9                 mov     eax, [ebp+var_8]
.text$mn:000048DC                 mov     ecx, [eax]
.text$mn:000048DE                 push    ecx
.text$mn:000048DF                 lea     ecx, [ebp+var_1]
.text$mn:000048E2                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:000048E7                 push    1               ; int
.text$mn:000048E9                 mov     edx, [ebp+var_8]
.text$mn:000048EC                 mov     eax, [edx]
.text$mn:000048EE                 push    eax             ; void *
.text$mn:000048EF                 lea     ecx, [ebp+var_1]
.text$mn:000048F2                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:000048F7                 mov     ecx, [ebp+var_8]
.text$mn:000048FA                 mov     dword ptr [ecx], 0
.text$mn:00004900                 mov     esp, ebp
.text$mn:00004902                 pop     ebp
.text$mn:00004903                 retn
.text$mn:00004903 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:00004903
.text$mn:00004903 _text$mn        ends
.text$mn:00004903
.text$mn:00004904 ; ===========================================================================
.text$mn:00004904
.text$mn:00004904 ; Segment type: Pure code
.text$mn:00004904 ; Segment permissions: Read/Execute
.text$mn:00004904 _text$mn        segment para public 'CODE' use32
.text$mn:00004904                 assume cs:_text$mn
.text$mn:00004904                 ;org 4904h
.text$mn:00004904 ; COMDAT (pick any)
.text$mn:00004904                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004904
.text$mn:00004904 ; =============== S U B R O U T I N E =======================================
.text$mn:00004904
.text$mn:00004904 ; Attributes: bp-based frame
.text$mn:00004904
.text$mn:00004904 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:00004904                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:00004904 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00004904                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+30p
.text$mn:00004904
.text$mn:00004904 var_8           = dword ptr -8
.text$mn:00004904 var_1           = byte ptr -1
.text$mn:00004904
.text$mn:00004904                 push    ebp
.text$mn:00004905                 mov     ebp, esp
.text$mn:00004907                 sub     esp, 8
.text$mn:0000490A                 mov     [ebp+var_8], ecx
.text$mn:0000490D                 lea     ecx, [ebp+var_1]
.text$mn:00004910                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00004915                 mov     ecx, [ebp+var_8] ; this
.text$mn:00004918                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000491D                 mov     eax, [ebp+var_8]
.text$mn:00004920                 mov     ecx, [eax]
.text$mn:00004922                 push    ecx
.text$mn:00004923                 lea     ecx, [ebp+var_1]
.text$mn:00004926                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:0000492B                 push    1               ; int
.text$mn:0000492D                 mov     edx, [ebp+var_8]
.text$mn:00004930                 mov     eax, [edx]
.text$mn:00004932                 push    eax             ; void *
.text$mn:00004933                 lea     ecx, [ebp+var_1]
.text$mn:00004936                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000493B                 mov     ecx, [ebp+var_8]
.text$mn:0000493E                 mov     dword ptr [ecx], 0
.text$mn:00004944                 mov     esp, ebp
.text$mn:00004946                 pop     ebp
.text$mn:00004947                 retn
.text$mn:00004947 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:00004947
.text$mn:00004947 _text$mn        ends
.text$mn:00004947
.text$mn:00004948 ; ===========================================================================
.text$mn:00004948
.text$mn:00004948 ; Segment type: Pure code
.text$mn:00004948 ; Segment permissions: Read/Execute
.text$mn:00004948 _text$mn        segment para public 'CODE' use32
.text$mn:00004948                 assume cs:_text$mn
.text$mn:00004948                 ;org 4948h
.text$mn:00004948 ; COMDAT (pick any)
.text$mn:00004948                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004948
.text$mn:00004948 ; =============== S U B R O U T I N E =======================================
.text$mn:00004948
.text$mn:00004948 ; Attributes: bp-based frame
.text$mn:00004948
.text$mn:00004948 ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Free_proxy(void)
.text$mn:00004948                 public ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ
.text$mn:00004948 ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ proc near
.text$mn:00004948                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+30p
.text$mn:00004948
.text$mn:00004948 var_8           = dword ptr -8
.text$mn:00004948 var_1           = byte ptr -1
.text$mn:00004948
.text$mn:00004948                 push    ebp
.text$mn:00004949                 mov     ebp, esp
.text$mn:0000494B                 sub     esp, 8
.text$mn:0000494E                 mov     [ebp+var_8], ecx
.text$mn:00004951                 lea     ecx, [ebp+var_1]
.text$mn:00004954                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:00004959                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000495C                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00004961                 mov     eax, [ebp+var_8]
.text$mn:00004964                 mov     ecx, [eax]
.text$mn:00004966                 push    ecx
.text$mn:00004967                 lea     ecx, [ebp+var_1]
.text$mn:0000496A                 call    ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:0000496F                 push    1               ; int
.text$mn:00004971                 mov     edx, [ebp+var_8]
.text$mn:00004974                 mov     eax, [edx]
.text$mn:00004976                 push    eax             ; void *
.text$mn:00004977                 lea     ecx, [ebp+var_1]
.text$mn:0000497A                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000497F                 mov     ecx, [ebp+var_8]
.text$mn:00004982                 mov     dword ptr [ecx], 0
.text$mn:00004988                 mov     esp, ebp
.text$mn:0000498A                 pop     ebp
.text$mn:0000498B                 retn
.text$mn:0000498B ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ endp
.text$mn:0000498B
.text$mn:0000498B _text$mn        ends
.text$mn:0000498B
.text$mn:0000498C ; ===========================================================================
.text$mn:0000498C
.text$mn:0000498C ; Segment type: Pure code
.text$mn:0000498C ; Segment permissions: Read/Execute
.text$mn:0000498C _text$mn        segment para public 'CODE' use32
.text$mn:0000498C                 assume cs:_text$mn
.text$mn:0000498C                 ;org 498Ch
.text$mn:0000498C ; COMDAT (pick any)
.text$mn:0000498C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000498C
.text$mn:0000498C ; =============== S U B R O U T I N E =======================================
.text$mn:0000498C
.text$mn:0000498C ; Attributes: bp-based frame
.text$mn:0000498C
.text$mn:0000498C ; public: struct std::_Wrap_alloc<class std::allocator<char>> __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Getal(void)const
.text$mn:0000498C                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
.text$mn:0000498C ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
.text$mn:0000498C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+B4p
.text$mn:0000498C                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+1Bp ...
.text$mn:0000498C
.text$mn:0000498C var_4           = dword ptr -4
.text$mn:0000498C arg_0           = dword ptr  8
.text$mn:0000498C
.text$mn:0000498C                 push    ebp
.text$mn:0000498D                 mov     ebp, esp
.text$mn:0000498F                 push    ecx
.text$mn:00004990                 mov     [ebp+var_4], ecx
.text$mn:00004993                 mov     ecx, [ebp+arg_0]
.text$mn:00004996                 call    ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)
.text$mn:0000499B                 mov     eax, [ebp+arg_0]
.text$mn:0000499E                 mov     esp, ebp
.text$mn:000049A0                 pop     ebp
.text$mn:000049A1                 retn    4
.text$mn:000049A1 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ endp
.text$mn:000049A1
.text$mn:000049A1 _text$mn        ends
.text$mn:000049A1
.text$mn:000049A4 ; ===========================================================================
.text$mn:000049A4
.text$mn:000049A4 ; Segment type: Pure code
.text$mn:000049A4 ; Segment permissions: Read/Execute
.text$mn:000049A4 _text$mn        segment para public 'CODE' use32
.text$mn:000049A4                 assume cs:_text$mn
.text$mn:000049A4                 ;org 49A4h
.text$mn:000049A4 ; COMDAT (pick any)
.text$mn:000049A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000049A4
.text$mn:000049A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000049A4
.text$mn:000049A4 ; Attributes: bp-based frame
.text$mn:000049A4
.text$mn:000049A4 ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Getal(void)const
.text$mn:000049A4                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
.text$mn:000049A4 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ proc near
.text$mn:000049A4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Fp
.text$mn:000049A4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+33p ...
.text$mn:000049A4
.text$mn:000049A4 var_4           = dword ptr -4
.text$mn:000049A4 arg_0           = dword ptr  8
.text$mn:000049A4
.text$mn:000049A4                 push    ebp
.text$mn:000049A5                 mov     ebp, esp
.text$mn:000049A7                 push    ecx
.text$mn:000049A8                 mov     [ebp+var_4], ecx
.text$mn:000049AB                 mov     ecx, [ebp+arg_0]
.text$mn:000049AE                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)
.text$mn:000049B3                 mov     eax, [ebp+arg_0]
.text$mn:000049B6                 mov     esp, ebp
.text$mn:000049B8                 pop     ebp
.text$mn:000049B9                 retn    4
.text$mn:000049B9 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ endp
.text$mn:000049B9
.text$mn:000049B9 _text$mn        ends
.text$mn:000049B9
.text$mn:000049BC ; ===========================================================================
.text$mn:000049BC
.text$mn:000049BC ; Segment type: Pure code
.text$mn:000049BC ; Segment permissions: Read/Execute
.text$mn:000049BC _text$mn        segment para public 'CODE' use32
.text$mn:000049BC                 assume cs:_text$mn
.text$mn:000049BC                 ;org 49BCh
.text$mn:000049BC ; COMDAT (pick any)
.text$mn:000049BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000049BC
.text$mn:000049BC ; =============== S U B R O U T I N E =======================================
.text$mn:000049BC
.text$mn:000049BC ; Attributes: bp-based frame
.text$mn:000049BC
.text$mn:000049BC ; public: struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Getal(void)const
.text$mn:000049BC                 public ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ
.text$mn:000049BC ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ proc near
.text$mn:000049BC                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+10p
.text$mn:000049BC                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+10p ...
.text$mn:000049BC
.text$mn:000049BC var_4           = dword ptr -4
.text$mn:000049BC arg_0           = dword ptr  8
.text$mn:000049BC
.text$mn:000049BC                 push    ebp
.text$mn:000049BD                 mov     ebp, esp
.text$mn:000049BF                 push    ecx
.text$mn:000049C0                 mov     [ebp+var_4], ecx
.text$mn:000049C3                 mov     ecx, [ebp+arg_0]
.text$mn:000049C6                 call    ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:000049CB                 mov     eax, [ebp+arg_0]
.text$mn:000049CE                 mov     esp, ebp
.text$mn:000049D0                 pop     ebp
.text$mn:000049D1                 retn    4
.text$mn:000049D1 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ endp
.text$mn:000049D1
.text$mn:000049D1 _text$mn        ends
.text$mn:000049D1
.text$mn:000049D4 ; ===========================================================================
.text$mn:000049D4
.text$mn:000049D4 ; Segment type: Pure code
.text$mn:000049D4 ; Segment permissions: Read/Execute
.text$mn:000049D4 _text$mn        segment para public 'CODE' use32
.text$mn:000049D4                 assume cs:_text$mn
.text$mn:000049D4                 ;org 49D4h
.text$mn:000049D4 ; COMDAT (pick any)
.text$mn:000049D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000049D4
.text$mn:000049D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000049D4
.text$mn:000049D4 ; Attributes: bp-based frame
.text$mn:000049D4
.text$mn:000049D4 ; const struct std::_Container_base12 *__thiscall std::_Iterator_base12::_Getcont(std::_Iterator_base12 *__hidden this)
.text$mn:000049D4                 public ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
.text$mn:000049D4 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ proc near
.text$mn:000049D4                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+Bp
.text$mn:000049D4                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+20p ...
.text$mn:000049D4
.text$mn:000049D4 var_8           = dword ptr -8
.text$mn:000049D4 var_4           = dword ptr -4
.text$mn:000049D4
.text$mn:000049D4                 push    ebp
.text$mn:000049D5                 mov     ebp, esp
.text$mn:000049D7                 sub     esp, 8
.text$mn:000049DA                 mov     [ebp+var_4], ecx
.text$mn:000049DD                 mov     eax, [ebp+var_4]
.text$mn:000049E0                 cmp     dword ptr [eax], 0
.text$mn:000049E3                 jnz     short loc_49EE
.text$mn:000049E5                 mov     [ebp+var_8], 0
.text$mn:000049EC                 jmp     short loc_49F8
.text$mn:000049EE ; ---------------------------------------------------------------------------
.text$mn:000049EE
.text$mn:000049EE loc_49EE:                               ; CODE XREF: std::_Iterator_base12::_Getcont(void)+Fj
.text$mn:000049EE                 mov     ecx, [ebp+var_4]
.text$mn:000049F1                 mov     edx, [ecx]
.text$mn:000049F3                 mov     eax, [edx]
.text$mn:000049F5                 mov     [ebp+var_8], eax
.text$mn:000049F8
.text$mn:000049F8 loc_49F8:                               ; CODE XREF: std::_Iterator_base12::_Getcont(void)+18j
.text$mn:000049F8                 mov     eax, [ebp+var_8]
.text$mn:000049FB                 mov     esp, ebp
.text$mn:000049FD                 pop     ebp
.text$mn:000049FE                 retn
.text$mn:000049FE ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ endp
.text$mn:000049FE
.text$mn:000049FE ; ---------------------------------------------------------------------------
.text$mn:000049FF                 align 10h
.text$mn:000049FF _text$mn        ends
.text$mn:000049FF
.text$mn:00004A00 ; ===========================================================================
.text$mn:00004A00
.text$mn:00004A00 ; Segment type: Pure code
.text$mn:00004A00 ; Segment permissions: Read/Execute
.text$mn:00004A00 _text$mn        segment para public 'CODE' use32
.text$mn:00004A00                 assume cs:_text$mn
.text$mn:00004A00                 ;org 4A00h
.text$mn:00004A00 ; COMDAT (pick any)
.text$mn:00004A00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A00
.text$mn:00004A00 ; =============== S U B R O U T I N E =======================================
.text$mn:00004A00
.text$mn:00004A00 ; Attributes: bp-based frame
.text$mn:00004A00
.text$mn:00004A00 ; struct std::_Iterator_base12 **__thiscall std::_Container_base12::_Getpfirst(std::_Container_base12 *__hidden this)
.text$mn:00004A00                 public ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
.text$mn:00004A00 ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ proc near
.text$mn:00004A00                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+3Cp
.text$mn:00004A00
.text$mn:00004A00 var_8           = dword ptr -8
.text$mn:00004A00 var_4           = dword ptr -4
.text$mn:00004A00
.text$mn:00004A00                 push    ebp
.text$mn:00004A01                 mov     ebp, esp
.text$mn:00004A03                 sub     esp, 8
.text$mn:00004A06                 mov     [ebp+var_4], ecx
.text$mn:00004A09                 mov     eax, [ebp+var_4]
.text$mn:00004A0C                 cmp     dword ptr [eax], 0
.text$mn:00004A0F                 jnz     short loc_4A1A
.text$mn:00004A11                 mov     [ebp+var_8], 0
.text$mn:00004A18                 jmp     short loc_4A25
.text$mn:00004A1A ; ---------------------------------------------------------------------------
.text$mn:00004A1A
.text$mn:00004A1A loc_4A1A:                               ; CODE XREF: std::_Container_base12::_Getpfirst(void)+Fj
.text$mn:00004A1A                 mov     ecx, [ebp+var_4]
.text$mn:00004A1D                 mov     edx, [ecx]
.text$mn:00004A1F                 add     edx, 4
.text$mn:00004A22                 mov     [ebp+var_8], edx
.text$mn:00004A25
.text$mn:00004A25 loc_4A25:                               ; CODE XREF: std::_Container_base12::_Getpfirst(void)+18j
.text$mn:00004A25                 mov     eax, [ebp+var_8]
.text$mn:00004A28                 mov     esp, ebp
.text$mn:00004A2A                 pop     ebp
.text$mn:00004A2B                 retn
.text$mn:00004A2B ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ endp
.text$mn:00004A2B
.text$mn:00004A2B _text$mn        ends
.text$mn:00004A2B
.text$mn:00004A2C ; ===========================================================================
.text$mn:00004A2C
.text$mn:00004A2C ; Segment type: Pure code
.text$mn:00004A2C ; Segment permissions: Read/Execute
.text$mn:00004A2C _text$mn        segment para public 'CODE' use32
.text$mn:00004A2C                 assume cs:_text$mn
.text$mn:00004A2C                 ;org 4A2Ch
.text$mn:00004A2C ; COMDAT (pick any)
.text$mn:00004A2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A2C
.text$mn:00004A2C ; =============== S U B R O U T I N E =======================================
.text$mn:00004A2C
.text$mn:00004A2C ; Attributes: bp-based frame
.text$mn:00004A2C
.text$mn:00004A2C ; struct std::_Iterator_base12 **__thiscall std::_Iterator_base12::_Getpnext(std::_Iterator_base12 *__hidden this)
.text$mn:00004A2C                 public ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
.text$mn:00004A2C ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ proc near
.text$mn:00004A2C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+71p
.text$mn:00004A2C                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+8Ap
.text$mn:00004A2C
.text$mn:00004A2C var_4           = dword ptr -4
.text$mn:00004A2C
.text$mn:00004A2C                 push    ebp
.text$mn:00004A2D                 mov     ebp, esp
.text$mn:00004A2F                 push    ecx
.text$mn:00004A30                 mov     [ebp+var_4], ecx
.text$mn:00004A33                 mov     eax, [ebp+var_4]
.text$mn:00004A36                 add     eax, 4
.text$mn:00004A39                 mov     esp, ebp
.text$mn:00004A3B                 pop     ebp
.text$mn:00004A3C                 retn
.text$mn:00004A3C ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ endp
.text$mn:00004A3C
.text$mn:00004A3C ; ---------------------------------------------------------------------------
.text$mn:00004A3D                 align 10h
.text$mn:00004A3D _text$mn        ends
.text$mn:00004A3D
.text$mn:00004A40 ; ===========================================================================
.text$mn:00004A40
.text$mn:00004A40 ; Segment type: Pure code
.text$mn:00004A40 ; Segment permissions: Read/Execute
.text$mn:00004A40 _text$mn        segment para public 'CODE' use32
.text$mn:00004A40                 assume cs:_text$mn
.text$mn:00004A40                 ;org 4A40h
.text$mn:00004A40 ; COMDAT (pick any)
.text$mn:00004A40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A40
.text$mn:00004A40 ; =============== S U B R O U T I N E =======================================
.text$mn:00004A40
.text$mn:00004A40 ; Attributes: bp-based frame
.text$mn:00004A40
.text$mn:00004A40 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Grow(unsigned int, bool)
.text$mn:00004A40                 public ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
.text$mn:00004A40 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
.text$mn:00004A40                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+6Ap
.text$mn:00004A40                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+5Fp
.text$mn:00004A40
.text$mn:00004A40 var_C           = dword ptr -0Ch
.text$mn:00004A40 Size            = dword ptr -8
.text$mn:00004A40 var_4           = dword ptr -4
.text$mn:00004A40 arg_0           = dword ptr  8
.text$mn:00004A40 arg_4           = byte ptr  0Ch
.text$mn:00004A40
.text$mn:00004A40                 push    ebp
.text$mn:00004A41                 mov     ebp, esp
.text$mn:00004A43                 sub     esp, 0Ch
.text$mn:00004A46                 mov     [ebp+var_4], ecx
.text$mn:00004A49                 mov     ecx, [ebp+var_4]
.text$mn:00004A4C                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00004A51                 cmp     eax, [ebp+arg_0]
.text$mn:00004A54                 jnb     short loc_4A5E
.text$mn:00004A56                 mov     ecx, [ebp+var_4]
.text$mn:00004A59                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:00004A5E
.text$mn:00004A5E loc_4A5E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+14j
.text$mn:00004A5E                 mov     eax, [ebp+var_4]
.text$mn:00004A61                 mov     ecx, [eax+18h]
.text$mn:00004A64                 cmp     ecx, [ebp+arg_0]
.text$mn:00004A67                 jnb     short loc_4A7E
.text$mn:00004A69                 mov     edx, [ebp+var_4]
.text$mn:00004A6C                 mov     eax, [edx+14h]
.text$mn:00004A6F                 push    eax
.text$mn:00004A70                 mov     ecx, [ebp+arg_0]
.text$mn:00004A73                 push    ecx
.text$mn:00004A74                 mov     ecx, [ebp+var_4]
.text$mn:00004A77                 call    ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)
.text$mn:00004A7C                 jmp     short loc_4AC8
.text$mn:00004A7E ; ---------------------------------------------------------------------------
.text$mn:00004A7E
.text$mn:00004A7E loc_4A7E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+27j
.text$mn:00004A7E                 movzx   edx, [ebp+arg_4]
.text$mn:00004A82                 test    edx, edx
.text$mn:00004A84                 jz      short loc_4AB8
.text$mn:00004A86                 cmp     [ebp+arg_0], 10h
.text$mn:00004A8A                 jnb     short loc_4AB8
.text$mn:00004A8C                 mov     eax, [ebp+var_4]
.text$mn:00004A8F                 mov     ecx, [ebp+arg_0]
.text$mn:00004A92                 cmp     ecx, [eax+14h]
.text$mn:00004A95                 jnb     short loc_4A9F
.text$mn:00004A97                 mov     edx, [ebp+arg_0]
.text$mn:00004A9A                 mov     [ebp+Size], edx
.text$mn:00004A9D                 jmp     short loc_4AA8
.text$mn:00004A9F ; ---------------------------------------------------------------------------
.text$mn:00004A9F
.text$mn:00004A9F loc_4A9F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+55j
.text$mn:00004A9F                 mov     eax, [ebp+var_4]
.text$mn:00004AA2                 mov     ecx, [eax+14h]
.text$mn:00004AA5                 mov     [ebp+Size], ecx
.text$mn:00004AA8
.text$mn:00004AA8 loc_4AA8:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+5Dj
.text$mn:00004AA8                 mov     edx, [ebp+Size]
.text$mn:00004AAB                 push    edx             ; Size
.text$mn:00004AAC                 push    1               ; char
.text$mn:00004AAE                 mov     ecx, [ebp+var_4]
.text$mn:00004AB1                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00004AB6                 jmp     short loc_4AC8
.text$mn:00004AB8 ; ---------------------------------------------------------------------------
.text$mn:00004AB8
.text$mn:00004AB8 loc_4AB8:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+44j
.text$mn:00004AB8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+4Aj
.text$mn:00004AB8                 cmp     [ebp+arg_0], 0
.text$mn:00004ABC                 jnz     short loc_4AC8
.text$mn:00004ABE                 push    0
.text$mn:00004AC0                 mov     ecx, [ebp+var_4]
.text$mn:00004AC3                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00004AC8
.text$mn:00004AC8 loc_4AC8:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+3Cj
.text$mn:00004AC8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+76j ...
.text$mn:00004AC8                 cmp     [ebp+arg_0], 0
.text$mn:00004ACC                 jbe     short loc_4AD7
.text$mn:00004ACE                 mov     [ebp+var_C], 1
.text$mn:00004AD5                 jmp     short loc_4ADE
.text$mn:00004AD7 ; ---------------------------------------------------------------------------
.text$mn:00004AD7
.text$mn:00004AD7 loc_4AD7:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+8Cj
.text$mn:00004AD7                 mov     [ebp+var_C], 0
.text$mn:00004ADE
.text$mn:00004ADE loc_4ADE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+95j
.text$mn:00004ADE                 mov     al, byte ptr [ebp+var_C]
.text$mn:00004AE1                 mov     esp, ebp
.text$mn:00004AE3                 pop     ebp
.text$mn:00004AE4                 retn    8
.text$mn:00004AE4 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z endp
.text$mn:00004AE4
.text$mn:00004AE4 ; ---------------------------------------------------------------------------
.text$mn:00004AE7                 align 4
.text$mn:00004AE7 _text$mn        ends
.text$mn:00004AE7
.text$mn:00004AE8 ; ===========================================================================
.text$mn:00004AE8
.text$mn:00004AE8 ; Segment type: Pure code
.text$mn:00004AE8 ; Segment permissions: Read/Execute
.text$mn:00004AE8 _text$mn        segment para public 'CODE' use32
.text$mn:00004AE8                 assume cs:_text$mn
.text$mn:00004AE8                 ;org 4AE8h
.text$mn:00004AE8 ; COMDAT (pick any)
.text$mn:00004AE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004AE8
.text$mn:00004AE8 ; =============== S U B R O U T I N E =======================================
.text$mn:00004AE8
.text$mn:00004AE8 ; Attributes: bp-based frame
.text$mn:00004AE8
.text$mn:00004AE8 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Grow(unsigned int, bool)
.text$mn:00004AE8                 public ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z
.text$mn:00004AE8 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z proc near
.text$mn:00004AE8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+6Dp
.text$mn:00004AE8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+8Ep ...
.text$mn:00004AE8
.text$mn:00004AE8 var_C           = dword ptr -0Ch
.text$mn:00004AE8 var_8           = dword ptr -8
.text$mn:00004AE8 var_4           = dword ptr -4
.text$mn:00004AE8 arg_0           = dword ptr  8
.text$mn:00004AE8 arg_4           = byte ptr  0Ch
.text$mn:00004AE8
.text$mn:00004AE8                 push    ebp
.text$mn:00004AE9                 mov     ebp, esp
.text$mn:00004AEB                 sub     esp, 0Ch
.text$mn:00004AEE                 mov     [ebp+var_4], ecx
.text$mn:00004AF1                 mov     ecx, [ebp+var_4]
.text$mn:00004AF4                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00004AF9                 cmp     eax, [ebp+arg_0]
.text$mn:00004AFC                 jnb     short loc_4B06
.text$mn:00004AFE                 mov     ecx, [ebp+var_4]
.text$mn:00004B01                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:00004B06
.text$mn:00004B06 loc_4B06:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+14j
.text$mn:00004B06                 mov     eax, [ebp+var_4]
.text$mn:00004B09                 mov     ecx, [eax+18h]
.text$mn:00004B0C                 cmp     ecx, [ebp+arg_0]
.text$mn:00004B0F                 jnb     short loc_4B26
.text$mn:00004B11                 mov     edx, [ebp+var_4]
.text$mn:00004B14                 mov     eax, [edx+14h]
.text$mn:00004B17                 push    eax
.text$mn:00004B18                 mov     ecx, [ebp+arg_0]
.text$mn:00004B1B                 push    ecx
.text$mn:00004B1C                 mov     ecx, [ebp+var_4]
.text$mn:00004B1F                 call    ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)
.text$mn:00004B24                 jmp     short loc_4B70
.text$mn:00004B26 ; ---------------------------------------------------------------------------
.text$mn:00004B26
.text$mn:00004B26 loc_4B26:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+27j
.text$mn:00004B26                 movzx   edx, [ebp+arg_4]
.text$mn:00004B2A                 test    edx, edx
.text$mn:00004B2C                 jz      short loc_4B60
.text$mn:00004B2E                 cmp     [ebp+arg_0], 8
.text$mn:00004B32                 jnb     short loc_4B60
.text$mn:00004B34                 mov     eax, [ebp+var_4]
.text$mn:00004B37                 mov     ecx, [ebp+arg_0]
.text$mn:00004B3A                 cmp     ecx, [eax+14h]
.text$mn:00004B3D                 jnb     short loc_4B47
.text$mn:00004B3F                 mov     edx, [ebp+arg_0]
.text$mn:00004B42                 mov     [ebp+var_8], edx
.text$mn:00004B45                 jmp     short loc_4B50
.text$mn:00004B47 ; ---------------------------------------------------------------------------
.text$mn:00004B47
.text$mn:00004B47 loc_4B47:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+55j
.text$mn:00004B47                 mov     eax, [ebp+var_4]
.text$mn:00004B4A                 mov     ecx, [eax+14h]
.text$mn:00004B4D                 mov     [ebp+var_8], ecx
.text$mn:00004B50
.text$mn:00004B50 loc_4B50:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+5Dj
.text$mn:00004B50                 mov     edx, [ebp+var_8]
.text$mn:00004B53                 push    edx
.text$mn:00004B54                 push    1
.text$mn:00004B56                 mov     ecx, [ebp+var_4]
.text$mn:00004B59                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00004B5E                 jmp     short loc_4B70
.text$mn:00004B60 ; ---------------------------------------------------------------------------
.text$mn:00004B60
.text$mn:00004B60 loc_4B60:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+44j
.text$mn:00004B60                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+4Aj
.text$mn:00004B60                 cmp     [ebp+arg_0], 0
.text$mn:00004B64                 jnz     short loc_4B70
.text$mn:00004B66                 push    0
.text$mn:00004B68                 mov     ecx, [ebp+var_4]
.text$mn:00004B6B                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00004B70
.text$mn:00004B70 loc_4B70:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+3Cj
.text$mn:00004B70                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+76j ...
.text$mn:00004B70                 cmp     [ebp+arg_0], 0
.text$mn:00004B74                 jbe     short loc_4B7F
.text$mn:00004B76                 mov     [ebp+var_C], 1
.text$mn:00004B7D                 jmp     short loc_4B86
.text$mn:00004B7F ; ---------------------------------------------------------------------------
.text$mn:00004B7F
.text$mn:00004B7F loc_4B7F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+8Cj
.text$mn:00004B7F                 mov     [ebp+var_C], 0
.text$mn:00004B86
.text$mn:00004B86 loc_4B86:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+95j
.text$mn:00004B86                 mov     al, byte ptr [ebp+var_C]
.text$mn:00004B89                 mov     esp, ebp
.text$mn:00004B8B                 pop     ebp
.text$mn:00004B8C                 retn    8
.text$mn:00004B8C ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z endp
.text$mn:00004B8C
.text$mn:00004B8C ; ---------------------------------------------------------------------------
.text$mn:00004B8F                 align 10h
.text$mn:00004B8F _text$mn        ends
.text$mn:00004B8F
.text$mn:00004B90 ; ===========================================================================
.text$mn:00004B90
.text$mn:00004B90 ; Segment type: Pure code
.text$mn:00004B90 ; Segment permissions: Read/Execute
.text$mn:00004B90 _text$mn        segment para public 'CODE' use32
.text$mn:00004B90                 assume cs:_text$mn
.text$mn:00004B90                 ;org 4B90h
.text$mn:00004B90 ; COMDAT (pick any)
.text$mn:00004B90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B90
.text$mn:00004B90 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B90
.text$mn:00004B90 ; Attributes: bp-based frame
.text$mn:00004B90
.text$mn:00004B90 ; protected: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Grow_to(unsigned int)const
.text$mn:00004B90                 public ?_Grow_to@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEII@Z
.text$mn:00004B90 ?_Grow_to@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEII@Z proc near
.text$mn:00004B90                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+45p
.text$mn:00004B90
.text$mn:00004B90 var_C           = dword ptr -0Ch
.text$mn:00004B90 var_8           = dword ptr -8
.text$mn:00004B90 var_4           = dword ptr -4
.text$mn:00004B90 arg_0           = dword ptr  8
.text$mn:00004B90
.text$mn:00004B90                 push    ebp
.text$mn:00004B91                 mov     ebp, esp
.text$mn:00004B93                 sub     esp, 0Ch
.text$mn:00004B96                 mov     [ebp+var_8], ecx
.text$mn:00004B99                 mov     ecx, [ebp+var_8]
.text$mn:00004B9C                 call    ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::capacity(void)
.text$mn:00004BA1                 mov     [ebp+var_4], eax
.text$mn:00004BA4                 mov     ecx, [ebp+var_8]
.text$mn:00004BA7                 call    ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)
.text$mn:00004BAC                 mov     ecx, [ebp+var_4]
.text$mn:00004BAF                 shr     ecx, 1
.text$mn:00004BB1                 sub     eax, ecx
.text$mn:00004BB3                 cmp     eax, [ebp+var_4]
.text$mn:00004BB6                 jnb     short loc_4BC1
.text$mn:00004BB8                 mov     [ebp+var_C], 0
.text$mn:00004BBF                 jmp     short loc_4BCC
.text$mn:00004BC1 ; ---------------------------------------------------------------------------
.text$mn:00004BC1
.text$mn:00004BC1 loc_4BC1:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+26j
.text$mn:00004BC1                 mov     edx, [ebp+var_4]
.text$mn:00004BC4                 shr     edx, 1
.text$mn:00004BC6                 add     edx, [ebp+var_4]
.text$mn:00004BC9                 mov     [ebp+var_C], edx
.text$mn:00004BCC
.text$mn:00004BCC loc_4BCC:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+2Fj
.text$mn:00004BCC                 mov     eax, [ebp+var_C]
.text$mn:00004BCF                 mov     [ebp+var_4], eax
.text$mn:00004BD2                 mov     ecx, [ebp+var_4]
.text$mn:00004BD5                 cmp     ecx, [ebp+arg_0]
.text$mn:00004BD8                 jnb     short loc_4BE0
.text$mn:00004BDA                 mov     edx, [ebp+arg_0]
.text$mn:00004BDD                 mov     [ebp+var_4], edx
.text$mn:00004BE0
.text$mn:00004BE0 loc_4BE0:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+48j
.text$mn:00004BE0                 mov     eax, [ebp+var_4]
.text$mn:00004BE3                 mov     esp, ebp
.text$mn:00004BE5                 pop     ebp
.text$mn:00004BE6                 retn    4
.text$mn:00004BE6 ?_Grow_to@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEII@Z endp
.text$mn:00004BE6
.text$mn:00004BE6 ; ---------------------------------------------------------------------------
.text$mn:00004BE9                 align 4
.text$mn:00004BE9 _text$mn        ends
.text$mn:00004BE9
.text$mn:00004BEC ; ===========================================================================
.text$mn:00004BEC
.text$mn:00004BEC ; Segment type: Pure code
.text$mn:00004BEC ; Segment permissions: Read/Execute
.text$mn:00004BEC _text$mn        segment para public 'CODE' use32
.text$mn:00004BEC                 assume cs:_text$mn
.text$mn:00004BEC                 ;org 4BECh
.text$mn:00004BEC ; COMDAT (pick any)
.text$mn:00004BEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004BEC
.text$mn:00004BEC ; =============== S U B R O U T I N E =======================================
.text$mn:00004BEC
.text$mn:00004BEC ; Attributes: bp-based frame
.text$mn:00004BEC
.text$mn:00004BEC ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Inside(char const *)
.text$mn:00004BEC                 public ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
.text$mn:00004BEC ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
.text$mn:00004BEC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+2Ap
.text$mn:00004BEC
.text$mn:00004BEC var_4           = dword ptr -4
.text$mn:00004BEC arg_0           = dword ptr  8
.text$mn:00004BEC
.text$mn:00004BEC                 push    ebp
.text$mn:00004BED                 mov     ebp, esp
.text$mn:00004BEF                 push    ecx
.text$mn:00004BF0                 mov     [ebp+var_4], ecx
.text$mn:00004BF3                 cmp     [ebp+arg_0], 0
.text$mn:00004BF7                 jz      short loc_4C19
.text$mn:00004BF9                 mov     ecx, [ebp+var_4]
.text$mn:00004BFC                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00004C01                 cmp     [ebp+arg_0], eax
.text$mn:00004C04                 jb      short loc_4C19
.text$mn:00004C06                 mov     ecx, [ebp+var_4]
.text$mn:00004C09                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00004C0E                 mov     ecx, [ebp+var_4]
.text$mn:00004C11                 add     eax, [ecx+14h]
.text$mn:00004C14                 cmp     eax, [ebp+arg_0]
.text$mn:00004C17                 ja      short loc_4C1F
.text$mn:00004C19
.text$mn:00004C19 loc_4C19:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+Bj
.text$mn:00004C19                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+18j
.text$mn:00004C19                 xor     al, al
.text$mn:00004C1B                 jmp     short loc_4C21
.text$mn:00004C1D ; ---------------------------------------------------------------------------
.text$mn:00004C1D                 jmp     short loc_4C21
.text$mn:00004C1F ; ---------------------------------------------------------------------------
.text$mn:00004C1F
.text$mn:00004C1F loc_4C1F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Bj
.text$mn:00004C1F                 mov     al, 1
.text$mn:00004C21
.text$mn:00004C21 loc_4C21:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Fj
.text$mn:00004C21                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+31j
.text$mn:00004C21                 mov     esp, ebp
.text$mn:00004C23                 pop     ebp
.text$mn:00004C24                 retn    4
.text$mn:00004C24 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z endp
.text$mn:00004C24
.text$mn:00004C24 ; ---------------------------------------------------------------------------
.text$mn:00004C27                 align 4
.text$mn:00004C27 _text$mn        ends
.text$mn:00004C27
.text$mn:00004C28 ; ===========================================================================
.text$mn:00004C28
.text$mn:00004C28 ; Segment type: Pure code
.text$mn:00004C28 ; Segment permissions: Read/Execute
.text$mn:00004C28 _text$mn        segment para public 'CODE' use32
.text$mn:00004C28                 assume cs:_text$mn
.text$mn:00004C28                 ;org 4C28h
.text$mn:00004C28 ; COMDAT (pick any)
.text$mn:00004C28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C28
.text$mn:00004C28 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C28
.text$mn:00004C28 ; Attributes: bp-based frame
.text$mn:00004C28
.text$mn:00004C28 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:00004C28                 public ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z
.text$mn:00004C28 ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z proc near
.text$mn:00004C28                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+2Cp
.text$mn:00004C28                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+2Ap ...
.text$mn:00004C28
.text$mn:00004C28 var_4           = dword ptr -4
.text$mn:00004C28 arg_0           = dword ptr  8
.text$mn:00004C28
.text$mn:00004C28                 push    ebp
.text$mn:00004C29                 mov     ebp, esp
.text$mn:00004C2B                 push    ecx
.text$mn:00004C2C                 mov     [ebp+var_4], ecx
.text$mn:00004C2F                 cmp     [ebp+arg_0], 0
.text$mn:00004C33                 jz      short loc_4C58
.text$mn:00004C35                 mov     ecx, [ebp+var_4]
.text$mn:00004C38                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00004C3D                 cmp     [ebp+arg_0], eax
.text$mn:00004C40                 jb      short loc_4C58
.text$mn:00004C42                 mov     ecx, [ebp+var_4]
.text$mn:00004C45                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00004C4A                 mov     ecx, [ebp+var_4]
.text$mn:00004C4D                 mov     edx, [ecx+14h]
.text$mn:00004C50                 lea     eax, [eax+edx*2]
.text$mn:00004C53                 cmp     eax, [ebp+arg_0]
.text$mn:00004C56                 ja      short loc_4C5E
.text$mn:00004C58
.text$mn:00004C58 loc_4C58:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+Bj
.text$mn:00004C58                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+18j
.text$mn:00004C58                 xor     al, al
.text$mn:00004C5A                 jmp     short loc_4C60
.text$mn:00004C5C ; ---------------------------------------------------------------------------
.text$mn:00004C5C                 jmp     short loc_4C60
.text$mn:00004C5E ; ---------------------------------------------------------------------------
.text$mn:00004C5E
.text$mn:00004C5E loc_4C5E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+2Ej
.text$mn:00004C5E                 mov     al, 1
.text$mn:00004C60
.text$mn:00004C60 loc_4C60:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+32j
.text$mn:00004C60                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+34j
.text$mn:00004C60                 mov     esp, ebp
.text$mn:00004C62                 pop     ebp
.text$mn:00004C63                 retn    4
.text$mn:00004C63 ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z endp
.text$mn:00004C63
.text$mn:00004C63 ; ---------------------------------------------------------------------------
.text$mn:00004C66                 align 4
.text$mn:00004C66 _text$mn        ends
.text$mn:00004C66
.text$mn:00004C68 ; ===========================================================================
.text$mn:00004C68
.text$mn:00004C68 ; Segment type: Pure code
.text$mn:00004C68 ; Segment permissions: Read/Execute
.text$mn:00004C68 _text$mn        segment para public 'CODE' use32
.text$mn:00004C68                 assume cs:_text$mn
.text$mn:00004C68                 ;org 4C68h
.text$mn:00004C68 ; COMDAT (pick any)
.text$mn:00004C68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C68
.text$mn:00004C68 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C68
.text$mn:00004C68 ; Attributes: bp-based frame
.text$mn:00004C68
.text$mn:00004C68 ; protected: bool __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Inside(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const *)const
.text$mn:00004C68                 public ?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
.text$mn:00004C68 ?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z proc near
.text$mn:00004C68                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+19p
.text$mn:00004C68
.text$mn:00004C68 var_8           = dword ptr -8
.text$mn:00004C68 var_4           = dword ptr -4
.text$mn:00004C68 arg_0           = dword ptr  8
.text$mn:00004C68
.text$mn:00004C68                 push    ebp
.text$mn:00004C69                 mov     ebp, esp
.text$mn:00004C6B                 sub     esp, 8
.text$mn:00004C6E                 mov     [ebp+var_4], ecx
.text$mn:00004C71                 mov     eax, [ebp+var_4]
.text$mn:00004C74                 mov     ecx, [ebp+arg_0]
.text$mn:00004C77                 cmp     ecx, [eax+8]
.text$mn:00004C7A                 jnb     short loc_4C90
.text$mn:00004C7C                 mov     edx, [ebp+var_4]
.text$mn:00004C7F                 mov     eax, [edx+4]
.text$mn:00004C82                 cmp     eax, [ebp+arg_0]
.text$mn:00004C85                 ja      short loc_4C90
.text$mn:00004C87                 mov     [ebp+var_8], 1
.text$mn:00004C8E                 jmp     short loc_4C97
.text$mn:00004C90 ; ---------------------------------------------------------------------------
.text$mn:00004C90
.text$mn:00004C90 loc_4C90:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Inside(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *)+12j
.text$mn:00004C90                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Inside(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *)+1Dj
.text$mn:00004C90                 mov     [ebp+var_8], 0
.text$mn:00004C97
.text$mn:00004C97 loc_4C97:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Inside(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *)+26j
.text$mn:00004C97                 mov     al, byte ptr [ebp+var_8]
.text$mn:00004C9A                 mov     esp, ebp
.text$mn:00004C9C                 pop     ebp
.text$mn:00004C9D                 retn    4
.text$mn:00004C9D ?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z endp
.text$mn:00004C9D
.text$mn:00004C9D _text$mn        ends
.text$mn:00004C9D
.text$mn:00004CA0 ; ===========================================================================
.text$mn:00004CA0
.text$mn:00004CA0 ; Segment type: Pure code
.text$mn:00004CA0 ; Segment permissions: Read/Execute
.text$mn:00004CA0 _text$mn        segment para public 'CODE' use32
.text$mn:00004CA0                 assume cs:_text$mn
.text$mn:00004CA0                 ;org 4CA0h
.text$mn:00004CA0 ; COMDAT (pick any)
.text$mn:00004CA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004CA0
.text$mn:00004CA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004CA0
.text$mn:00004CA0 ; Attributes: bp-based frame
.text$mn:00004CA0
.text$mn:00004CA0 ; public: char * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)
.text$mn:00004CA0                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
.text$mn:00004CA0 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
.text$mn:00004CA0                                         ; CODE XREF: $LN19+14p
.text$mn:00004CA0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+1Dp ...
.text$mn:00004CA0
.text$mn:00004CA0 var_8           = dword ptr -8
.text$mn:00004CA0 var_4           = dword ptr -4
.text$mn:00004CA0
.text$mn:00004CA0                 push    ebp
.text$mn:00004CA1                 mov     ebp, esp
.text$mn:00004CA3                 sub     esp, 8
.text$mn:00004CA6                 mov     [ebp+var_4], ecx
.text$mn:00004CA9                 mov     eax, [ebp+var_4]
.text$mn:00004CAC                 cmp     dword ptr [eax+18h], 10h
.text$mn:00004CB0                 jb      short loc_4CC6
.text$mn:00004CB2                 mov     ecx, [ebp+var_4]
.text$mn:00004CB5                 mov     edx, [ecx+4]
.text$mn:00004CB8                 push    edx
.text$mn:00004CB9                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00004CBE                 add     esp, 4
.text$mn:00004CC1                 mov     [ebp+var_8], eax
.text$mn:00004CC4                 jmp     short loc_4CCF
.text$mn:00004CC6 ; ---------------------------------------------------------------------------
.text$mn:00004CC6
.text$mn:00004CC6 loc_4CC6:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:00004CC6                 mov     eax, [ebp+var_4]
.text$mn:00004CC9                 add     eax, 4
.text$mn:00004CCC                 mov     [ebp+var_8], eax
.text$mn:00004CCF
.text$mn:00004CCF loc_4CCF:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:00004CCF                 mov     eax, [ebp+var_8]
.text$mn:00004CD2                 mov     esp, ebp
.text$mn:00004CD4                 pop     ebp
.text$mn:00004CD5                 retn
.text$mn:00004CD5 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ endp
.text$mn:00004CD5
.text$mn:00004CD5 ; ---------------------------------------------------------------------------
.text$mn:00004CD6                 align 4
.text$mn:00004CD6 _text$mn        ends
.text$mn:00004CD6
.text$mn:00004CD8 ; ===========================================================================
.text$mn:00004CD8
.text$mn:00004CD8 ; Segment type: Pure code
.text$mn:00004CD8 ; Segment permissions: Read/Execute
.text$mn:00004CD8 _text$mn        segment para public 'CODE' use32
.text$mn:00004CD8                 assume cs:_text$mn
.text$mn:00004CD8                 ;org 4CD8h
.text$mn:00004CD8 ; COMDAT (pick any)
.text$mn:00004CD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004CD8
.text$mn:00004CD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00004CD8
.text$mn:00004CD8 ; Attributes: bp-based frame
.text$mn:00004CD8
.text$mn:00004CD8 ; public: char const * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)const
.text$mn:00004CD8                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
.text$mn:00004CD8 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
.text$mn:00004CD8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+7Dp
.text$mn:00004CD8
.text$mn:00004CD8 var_8           = dword ptr -8
.text$mn:00004CD8 var_4           = dword ptr -4
.text$mn:00004CD8
.text$mn:00004CD8                 push    ebp
.text$mn:00004CD9                 mov     ebp, esp
.text$mn:00004CDB                 sub     esp, 8
.text$mn:00004CDE                 mov     [ebp+var_4], ecx
.text$mn:00004CE1                 mov     eax, [ebp+var_4]
.text$mn:00004CE4                 cmp     dword ptr [eax+18h], 10h
.text$mn:00004CE8                 jb      short loc_4CFE
.text$mn:00004CEA                 mov     ecx, [ebp+var_4]
.text$mn:00004CED                 mov     edx, [ecx+4]
.text$mn:00004CF0                 push    edx
.text$mn:00004CF1                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00004CF6                 add     esp, 4
.text$mn:00004CF9                 mov     [ebp+var_8], eax
.text$mn:00004CFC                 jmp     short loc_4D07
.text$mn:00004CFE ; ---------------------------------------------------------------------------
.text$mn:00004CFE
.text$mn:00004CFE loc_4CFE:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:00004CFE                 mov     eax, [ebp+var_4]
.text$mn:00004D01                 add     eax, 4
.text$mn:00004D04                 mov     [ebp+var_8], eax
.text$mn:00004D07
.text$mn:00004D07 loc_4D07:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:00004D07                 mov     eax, [ebp+var_8]
.text$mn:00004D0A                 mov     esp, ebp
.text$mn:00004D0C                 pop     ebp
.text$mn:00004D0D                 retn
.text$mn:00004D0D ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ endp
.text$mn:00004D0D
.text$mn:00004D0D ; ---------------------------------------------------------------------------
.text$mn:00004D0E                 align 10h
.text$mn:00004D0E _text$mn        ends
.text$mn:00004D0E
.text$mn:00004D10 ; ===========================================================================
.text$mn:00004D10
.text$mn:00004D10 ; Segment type: Pure code
.text$mn:00004D10 ; Segment permissions: Read/Execute
.text$mn:00004D10 _text$mn        segment para public 'CODE' use32
.text$mn:00004D10                 assume cs:_text$mn
.text$mn:00004D10                 ;org 4D10h
.text$mn:00004D10 ; COMDAT (pick any)
.text$mn:00004D10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004D10
.text$mn:00004D10 ; =============== S U B R O U T I N E =======================================
.text$mn:00004D10
.text$mn:00004D10 ; Attributes: bp-based frame
.text$mn:00004D10
.text$mn:00004D10 ; public: wchar_t * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00004D10                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
.text$mn:00004D10 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ proc near
.text$mn:00004D10                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+27p
.text$mn:00004D10                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+3Ep ...
.text$mn:00004D10
.text$mn:00004D10 var_8           = dword ptr -8
.text$mn:00004D10 var_4           = dword ptr -4
.text$mn:00004D10
.text$mn:00004D10                 push    ebp
.text$mn:00004D11                 mov     ebp, esp
.text$mn:00004D13                 sub     esp, 8
.text$mn:00004D16                 mov     [ebp+var_4], ecx
.text$mn:00004D19                 mov     eax, [ebp+var_4]
.text$mn:00004D1C                 cmp     dword ptr [eax+18h], 8
.text$mn:00004D20                 jb      short loc_4D36
.text$mn:00004D22                 mov     ecx, [ebp+var_4]
.text$mn:00004D25                 mov     edx, [ecx+4]
.text$mn:00004D28                 push    edx
.text$mn:00004D29                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00004D2E                 add     esp, 4
.text$mn:00004D31                 mov     [ebp+var_8], eax
.text$mn:00004D34                 jmp     short loc_4D3F
.text$mn:00004D36 ; ---------------------------------------------------------------------------
.text$mn:00004D36
.text$mn:00004D36 loc_4D36:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:00004D36                 mov     eax, [ebp+var_4]
.text$mn:00004D39                 add     eax, 4
.text$mn:00004D3C                 mov     [ebp+var_8], eax
.text$mn:00004D3F
.text$mn:00004D3F loc_4D3F:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:00004D3F                 mov     eax, [ebp+var_8]
.text$mn:00004D42                 mov     esp, ebp
.text$mn:00004D44                 pop     ebp
.text$mn:00004D45                 retn
.text$mn:00004D45 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ endp
.text$mn:00004D45
.text$mn:00004D45 ; ---------------------------------------------------------------------------
.text$mn:00004D46                 align 4
.text$mn:00004D46 _text$mn        ends
.text$mn:00004D46
.text$mn:00004D48 ; ===========================================================================
.text$mn:00004D48
.text$mn:00004D48 ; Segment type: Pure code
.text$mn:00004D48 ; Segment permissions: Read/Execute
.text$mn:00004D48 _text$mn        segment para public 'CODE' use32
.text$mn:00004D48                 assume cs:_text$mn
.text$mn:00004D48                 ;org 4D48h
.text$mn:00004D48 ; COMDAT (pick any)
.text$mn:00004D48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004D48
.text$mn:00004D48 ; =============== S U B R O U T I N E =======================================
.text$mn:00004D48
.text$mn:00004D48 ; Attributes: bp-based frame
.text$mn:00004D48
.text$mn:00004D48 ; public: wchar_t const * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)const
.text$mn:00004D48                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
.text$mn:00004D48 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ proc near
.text$mn:00004D48                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+80p
.text$mn:00004D48                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+7Dp ...
.text$mn:00004D48
.text$mn:00004D48 var_8           = dword ptr -8
.text$mn:00004D48 var_4           = dword ptr -4
.text$mn:00004D48
.text$mn:00004D48                 push    ebp
.text$mn:00004D49                 mov     ebp, esp
.text$mn:00004D4B                 sub     esp, 8
.text$mn:00004D4E                 mov     [ebp+var_4], ecx
.text$mn:00004D51                 mov     eax, [ebp+var_4]
.text$mn:00004D54                 cmp     dword ptr [eax+18h], 8
.text$mn:00004D58                 jb      short loc_4D6E
.text$mn:00004D5A                 mov     ecx, [ebp+var_4]
.text$mn:00004D5D                 mov     edx, [ecx+4]
.text$mn:00004D60                 push    edx
.text$mn:00004D61                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00004D66                 add     esp, 4
.text$mn:00004D69                 mov     [ebp+var_8], eax
.text$mn:00004D6C                 jmp     short loc_4D77
.text$mn:00004D6E ; ---------------------------------------------------------------------------
.text$mn:00004D6E
.text$mn:00004D6E loc_4D6E:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:00004D6E                 mov     eax, [ebp+var_4]
.text$mn:00004D71                 add     eax, 4
.text$mn:00004D74                 mov     [ebp+var_8], eax
.text$mn:00004D77
.text$mn:00004D77 loc_4D77:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:00004D77                 mov     eax, [ebp+var_8]
.text$mn:00004D7A                 mov     esp, ebp
.text$mn:00004D7C                 pop     ebp
.text$mn:00004D7D                 retn
.text$mn:00004D7D ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ endp
.text$mn:00004D7D
.text$mn:00004D7D ; ---------------------------------------------------------------------------
.text$mn:00004D7E                 align 10h
.text$mn:00004D7E _text$mn        ends
.text$mn:00004D7E
.text$mn:00004D80 ; ===========================================================================
.text$mn:00004D80
.text$mn:00004D80 ; Segment type: Pure code
.text$mn:00004D80 ; Segment permissions: Read/Execute
.text$mn:00004D80 _text$mn        segment para public 'CODE' use32
.text$mn:00004D80                 assume cs:_text$mn
.text$mn:00004D80                 ;org 4D80h
.text$mn:00004D80 ; COMDAT (pick any)
.text$mn:00004D80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004D80
.text$mn:00004D80 ; =============== S U B R O U T I N E =======================================
.text$mn:00004D80
.text$mn:00004D80 ; Attributes: bp-based frame
.text$mn:00004D80
.text$mn:00004D80 ; void __thiscall std::_Container_base12::_Orphan_all(std::_Container_base12 *__hidden this)
.text$mn:00004D80                 public ?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:00004D80 ?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$mn:00004D80                                         ; CODE XREF: std::_Container_base12::~_Container_base12(void)+Ap
.text$mn:00004D80                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+14p ...
.text$mn:00004D80
.text$mn:00004D80 var_18          = byte ptr -18h
.text$mn:00004D80 var_14          = dword ptr -14h
.text$mn:00004D80 var_10          = dword ptr -10h
.text$mn:00004D80 var_C           = dword ptr -0Ch
.text$mn:00004D80 var_4           = dword ptr -4
.text$mn:00004D80
.text$mn:00004D80                 push    ebp
.text$mn:00004D81                 mov     ebp, esp
.text$mn:00004D83                 push    0FFFFFFFFh
.text$mn:00004D85                 push    offset __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:00004D8A                 mov     eax, large fs:0
.text$mn:00004D90                 push    eax
.text$mn:00004D91                 sub     esp, 0Ch
.text$mn:00004D94                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004D99                 xor     eax, ebp
.text$mn:00004D9B                 push    eax
.text$mn:00004D9C                 lea     eax, [ebp+var_C]
.text$mn:00004D9F                 mov     large fs:0, eax
.text$mn:00004DA5                 mov     [ebp+var_14], ecx
.text$mn:00004DA8                 mov     eax, [ebp+var_14]
.text$mn:00004DAB                 cmp     dword ptr [eax], 0
.text$mn:00004DAE                 jz      short loc_4E0B
.text$mn:00004DB0                 push    3               ; int
.text$mn:00004DB2                 lea     ecx, [ebp+var_18] ; this
.text$mn:00004DB5                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00004DBA                 mov     [ebp+var_4], 0
.text$mn:00004DC1                 mov     ecx, [ebp+var_14]
.text$mn:00004DC4                 mov     edx, [ecx]
.text$mn:00004DC6                 add     edx, 4
.text$mn:00004DC9                 mov     [ebp+var_10], edx
.text$mn:00004DCC                 jmp     short loc_4DDB
.text$mn:00004DCE ; ---------------------------------------------------------------------------
.text$mn:00004DCE
.text$mn:00004DCE loc_4DCE:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+6Ej
.text$mn:00004DCE                 mov     eax, [ebp+var_10]
.text$mn:00004DD1                 mov     ecx, [eax]
.text$mn:00004DD3                 mov     edx, [ebp+var_10]
.text$mn:00004DD6                 mov     eax, [ecx+4]
.text$mn:00004DD9                 mov     [edx], eax
.text$mn:00004DDB
.text$mn:00004DDB loc_4DDB:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+4Cj
.text$mn:00004DDB                 mov     ecx, [ebp+var_10]
.text$mn:00004DDE                 cmp     dword ptr [ecx], 0
.text$mn:00004DE1                 jz      short loc_4DF0
.text$mn:00004DE3                 mov     edx, [ebp+var_10]
.text$mn:00004DE6                 mov     eax, [edx]
.text$mn:00004DE8                 mov     dword ptr [eax], 0
.text$mn:00004DEE                 jmp     short loc_4DCE
.text$mn:00004DF0 ; ---------------------------------------------------------------------------
.text$mn:00004DF0
.text$mn:00004DF0 loc_4DF0:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+61j
.text$mn:00004DF0                 mov     ecx, [ebp+var_14]
.text$mn:00004DF3                 mov     edx, [ecx]
.text$mn:00004DF5                 mov     dword ptr [edx+4], 0
.text$mn:00004DFC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004E03                 lea     ecx, [ebp+var_18] ; this
.text$mn:00004E06                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00004E0B
.text$mn:00004E0B loc_4E0B:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+2Ej
.text$mn:00004E0B                 mov     ecx, [ebp+var_C]
.text$mn:00004E0E                 mov     large fs:0, ecx
.text$mn:00004E15                 pop     ecx
.text$mn:00004E16                 mov     esp, ebp
.text$mn:00004E18                 pop     ebp
.text$mn:00004E19                 retn
.text$mn:00004E19 ?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$mn:00004E19
.text$mn:00004E19 ; ---------------------------------------------------------------------------
.text$mn:00004E1A                 align 4
.text$mn:00004E1A _text$mn        ends
.text$mn:00004E1A
.text$x:00004E1C ; ===========================================================================
.text$x:00004E1C
.text$x:00004E1C ; Segment type: Pure code
.text$x:00004E1C ; Segment permissions: Read/Execute
.text$x:00004E1C _text$x         segment para public 'CODE' use32
.text$x:00004E1C                 assume cs:_text$x
.text$x:00004E1C                 ;org 4E1Ch
.text$x:00004E1C ; COMDAT (pick associative to section at 4D80)
.text$x:00004E1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004E1C
.text$x:00004E1C ; =============== S U B R O U T I N E =======================================
.text$x:00004E1C
.text$x:00004E1C
.text$x:00004E1C __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 proc near
.text$x:00004E1C                                         ; DATA XREF: .xdata$x:000072E4o
.text$x:00004E1C                 lea     ecx, [ebp-18h]  ; this
.text$x:00004E1F                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00004E1F __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 endp
.text$x:00004E1F
.text$x:00004E24
.text$x:00004E24 ; =============== S U B R O U T I N E =======================================
.text$x:00004E24
.text$x:00004E24
.text$x:00004E24 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$x:00004E24                                         ; DATA XREF: std::_Container_base12::_Orphan_all(void)+5o
.text$x:00004E24
.text$x:00004E24 arg_4           = dword ptr  8
.text$x:00004E24
.text$x:00004E24                 mov     edx, [esp+arg_4]
.text$x:00004E28                 lea     eax, [edx+0Ch]
.text$x:00004E2B                 mov     ecx, [edx-10h]
.text$x:00004E2E                 xor     ecx, eax
.text$x:00004E30                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004E35                 mov     eax, offset __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$x:00004E3A                 jmp     ___CxxFrameHandler3
.text$x:00004E3A __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$x:00004E3A
.text$x:00004E3A ; ---------------------------------------------------------------------------
.text$x:00004E3F                 align 10h
.text$x:00004E3F _text$x         ends
.text$x:00004E3F
.text$mn:00004E40 ; ===========================================================================
.text$mn:00004E40
.text$mn:00004E40 ; Segment type: Pure code
.text$mn:00004E40 ; Segment permissions: Read/Execute
.text$mn:00004E40 _text$mn        segment para public 'CODE' use32
.text$mn:00004E40                 assume cs:_text$mn
.text$mn:00004E40                 ;org 4E40h
.text$mn:00004E40 ; COMDAT (pick any)
.text$mn:00004E40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004E40
.text$mn:00004E40 ; =============== S U B R O U T I N E =======================================
.text$mn:00004E40
.text$mn:00004E40 ; Attributes: bp-based frame
.text$mn:00004E40
.text$mn:00004E40 ; void __thiscall std::_Iterator_base12::_Orphan_me(std::_Iterator_base12 *__hidden this)
.text$mn:00004E40                 public ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
.text$mn:00004E40 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ proc near
.text$mn:00004E40                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+3Cp
.text$mn:00004E40                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+64p ...
.text$mn:00004E40
.text$mn:00004E40 var_8           = dword ptr -8
.text$mn:00004E40 var_4           = dword ptr -4
.text$mn:00004E40
.text$mn:00004E40                 push    ebp
.text$mn:00004E41                 mov     ebp, esp
.text$mn:00004E43                 sub     esp, 8
.text$mn:00004E46                 mov     [ebp+var_8], ecx
.text$mn:00004E49                 mov     eax, [ebp+var_8]
.text$mn:00004E4C                 cmp     dword ptr [eax], 0
.text$mn:00004E4F                 jz      short loc_4EAE
.text$mn:00004E51                 mov     ecx, [ebp+var_8]
.text$mn:00004E54                 mov     edx, [ecx]
.text$mn:00004E56                 add     edx, 4
.text$mn:00004E59                 mov     [ebp+var_4], edx
.text$mn:00004E5C
.text$mn:00004E5C loc_4E5C:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+39j
.text$mn:00004E5C                 mov     eax, [ebp+var_4]
.text$mn:00004E5F                 cmp     dword ptr [eax], 0
.text$mn:00004E62                 jz      short loc_4E7B
.text$mn:00004E64                 mov     ecx, [ebp+var_4]
.text$mn:00004E67                 mov     edx, [ecx]
.text$mn:00004E69                 cmp     edx, [ebp+var_8]
.text$mn:00004E6C                 jz      short loc_4E7B
.text$mn:00004E6E                 mov     eax, [ebp+var_4]
.text$mn:00004E71                 mov     ecx, [eax]
.text$mn:00004E73                 add     ecx, 4
.text$mn:00004E76                 mov     [ebp+var_4], ecx
.text$mn:00004E79                 jmp     short loc_4E5C
.text$mn:00004E7B ; ---------------------------------------------------------------------------
.text$mn:00004E7B
.text$mn:00004E7B loc_4E7B:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+22j
.text$mn:00004E7B                                         ; std::_Iterator_base12::_Orphan_me(void)+2Cj
.text$mn:00004E7B                 mov     edx, [ebp+var_4]
.text$mn:00004E7E                 cmp     dword ptr [edx], 0
.text$mn:00004E81                 jnz     short loc_4E9A
.text$mn:00004E83                 push    0C9h ; '+'      ; unsigned int
.text$mn:00004E88                 push    offset ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00004E8D                 push    offset ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; "ITERATOR LIST CORRUPTED!"
.text$mn:00004E92                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004E97                 add     esp, 0Ch
.text$mn:00004E9A
.text$mn:00004E9A loc_4E9A:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+41j
.text$mn:00004E9A                 mov     eax, [ebp+var_4]
.text$mn:00004E9D                 mov     ecx, [ebp+var_8]
.text$mn:00004EA0                 mov     edx, [ecx+4]
.text$mn:00004EA3                 mov     [eax], edx
.text$mn:00004EA5                 mov     eax, [ebp+var_8]
.text$mn:00004EA8                 mov     dword ptr [eax], 0
.text$mn:00004EAE
.text$mn:00004EAE loc_4EAE:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+Fj
.text$mn:00004EAE                 mov     esp, ebp
.text$mn:00004EB0                 pop     ebp
.text$mn:00004EB1                 retn
.text$mn:00004EB1 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ endp
.text$mn:00004EB1
.text$mn:00004EB1 ; ---------------------------------------------------------------------------
.text$mn:00004EB2                 align 4
.text$mn:00004EB2 _text$mn        ends
.text$mn:00004EB2
.text$mn:00004EB4 ; ===========================================================================
.text$mn:00004EB4
.text$mn:00004EB4 ; Segment type: Pure code
.text$mn:00004EB4 ; Segment permissions: Read/Execute
.text$mn:00004EB4 _text$mn        segment para public 'CODE' use32
.text$mn:00004EB4                 assume cs:_text$mn
.text$mn:00004EB4                 ;org 4EB4h
.text$mn:00004EB4 ; COMDAT (pick any)
.text$mn:00004EB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004EB4
.text$mn:00004EB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00004EB4
.text$mn:00004EB4 ; Attributes: bp-based frame
.text$mn:00004EB4
.text$mn:00004EB4 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Orphan_range(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)const
.text$mn:00004EB4                 public ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$mn:00004EB4 ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z proc near
.text$mn:00004EB4                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+6Fp
.text$mn:00004EB4                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+DCp
.text$mn:00004EB4
.text$mn:00004EB4 var_18          = byte ptr -18h
.text$mn:00004EB4 var_14          = dword ptr -14h
.text$mn:00004EB4 var_10          = dword ptr -10h
.text$mn:00004EB4 var_C           = dword ptr -0Ch
.text$mn:00004EB4 var_4           = dword ptr -4
.text$mn:00004EB4 arg_0           = dword ptr  8
.text$mn:00004EB4 arg_4           = dword ptr  0Ch
.text$mn:00004EB4
.text$mn:00004EB4                 push    ebp
.text$mn:00004EB5                 mov     ebp, esp
.text$mn:00004EB7                 push    0FFFFFFFFh
.text$mn:00004EB9                 push    offset __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$mn:00004EBE                 mov     eax, large fs:0
.text$mn:00004EC4                 push    eax
.text$mn:00004EC5                 sub     esp, 0Ch
.text$mn:00004EC8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004ECD                 xor     eax, ebp
.text$mn:00004ECF                 push    eax
.text$mn:00004ED0                 lea     eax, [ebp+var_C]
.text$mn:00004ED3                 mov     large fs:0, eax
.text$mn:00004ED9                 mov     [ebp+var_14], ecx
.text$mn:00004EDC                 push    3               ; int
.text$mn:00004EDE                 lea     ecx, [ebp+var_18] ; this
.text$mn:00004EE1                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00004EE6                 mov     [ebp+var_4], 0
.text$mn:00004EED                 mov     ecx, [ebp+var_14] ; this
.text$mn:00004EF0                 call    ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst(void)
.text$mn:00004EF5                 mov     [ebp+var_10], eax
.text$mn:00004EF8                 cmp     [ebp+var_10], 0
.text$mn:00004EFC                 jz      short loc_4F4C
.text$mn:00004EFE
.text$mn:00004EFE loc_4EFE:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *):loc_4F4Aj
.text$mn:00004EFE                 mov     eax, [ebp+var_10]
.text$mn:00004F01                 cmp     dword ptr [eax], 0
.text$mn:00004F04                 jz      short loc_4F4C
.text$mn:00004F06                 mov     ecx, [ebp+var_10]
.text$mn:00004F09                 mov     edx, [ecx]
.text$mn:00004F0B                 mov     eax, [edx+8]
.text$mn:00004F0E                 cmp     eax, [ebp+arg_0]
.text$mn:00004F11                 jb      short loc_4F20
.text$mn:00004F13                 mov     ecx, [ebp+var_10]
.text$mn:00004F16                 mov     edx, [ecx]
.text$mn:00004F18                 mov     eax, [ebp+arg_4]
.text$mn:00004F1B                 cmp     eax, [edx+8]
.text$mn:00004F1E                 jnb     short loc_4F2F
.text$mn:00004F20
.text$mn:00004F20 loc_4F20:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+5Dj
.text$mn:00004F20                 mov     ecx, [ebp+var_10]
.text$mn:00004F23                 mov     ecx, [ecx]      ; this
.text$mn:00004F25                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:00004F2A                 mov     [ebp+var_10], eax
.text$mn:00004F2D                 jmp     short loc_4F4A
.text$mn:00004F2F ; ---------------------------------------------------------------------------
.text$mn:00004F2F
.text$mn:00004F2F loc_4F2F:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+6Aj
.text$mn:00004F2F                 mov     edx, [ebp+var_10]
.text$mn:00004F32                 mov     ecx, [edx]      ; this
.text$mn:00004F34                 call    ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont(void)
.text$mn:00004F39                 mov     eax, [ebp+var_10]
.text$mn:00004F3C                 mov     ecx, [eax]      ; this
.text$mn:00004F3E                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:00004F43                 mov     ecx, [ebp+var_10]
.text$mn:00004F46                 mov     edx, [eax]
.text$mn:00004F48                 mov     [ecx], edx
.text$mn:00004F4A
.text$mn:00004F4A loc_4F4A:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+79j
.text$mn:00004F4A                 jmp     short loc_4EFE
.text$mn:00004F4C ; ---------------------------------------------------------------------------
.text$mn:00004F4C
.text$mn:00004F4C loc_4F4C:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+48j
.text$mn:00004F4C                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+50j
.text$mn:00004F4C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004F53                 lea     ecx, [ebp+var_18] ; this
.text$mn:00004F56                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00004F5B                 mov     ecx, [ebp+var_C]
.text$mn:00004F5E                 mov     large fs:0, ecx
.text$mn:00004F65                 pop     ecx
.text$mn:00004F66                 mov     esp, ebp
.text$mn:00004F68                 pop     ebp
.text$mn:00004F69                 retn    8
.text$mn:00004F69 ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z endp
.text$mn:00004F69
.text$mn:00004F69 _text$mn        ends
.text$mn:00004F69
.text$x:00004F6C ; ===========================================================================
.text$x:00004F6C
.text$x:00004F6C ; Segment type: Pure code
.text$x:00004F6C ; Segment permissions: Read/Execute
.text$x:00004F6C _text$x         segment para public 'CODE' use32
.text$x:00004F6C                 assume cs:_text$x
.text$x:00004F6C                 ;org 4F6Ch
.text$x:00004F6C ; COMDAT (pick associative to section at 4EB4)
.text$x:00004F6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004F6C
.text$x:00004F6C ; =============== S U B R O U T I N E =======================================
.text$x:00004F6C
.text$x:00004F6C
.text$x:00004F6C __unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z$0 proc near
.text$x:00004F6C                                         ; DATA XREF: .xdata$x:00007EB4o
.text$x:00004F6C                 lea     ecx, [ebp-18h]  ; this
.text$x:00004F6F                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00004F6F __unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z$0 endp
.text$x:00004F6F
.text$x:00004F74
.text$x:00004F74 ; =============== S U B R O U T I N E =======================================
.text$x:00004F74
.text$x:00004F74
.text$x:00004F74 __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z proc near
.text$x:00004F74                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+5o
.text$x:00004F74
.text$x:00004F74 arg_4           = dword ptr  8
.text$x:00004F74
.text$x:00004F74                 mov     edx, [esp+arg_4]
.text$x:00004F78                 lea     eax, [edx+0Ch]
.text$x:00004F7B                 mov     ecx, [edx-10h]
.text$x:00004F7E                 xor     ecx, eax
.text$x:00004F80                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004F85                 mov     eax, offset __ehfuncinfo$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$x:00004F8A                 jmp     ___CxxFrameHandler3
.text$x:00004F8A __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z endp
.text$x:00004F8A
.text$x:00004F8A ; ---------------------------------------------------------------------------
.text$x:00004F8F                 align 10h
.text$x:00004F8F _text$x         ends
.text$x:00004F8F
.text$mn:00004F90 ; ===========================================================================
.text$mn:00004F90
.text$mn:00004F90 ; Segment type: Pure code
.text$mn:00004F90 ; Segment permissions: Read/Execute
.text$mn:00004F90 _text$mn        segment para public 'CODE' use32
.text$mn:00004F90                 assume cs:_text$mn
.text$mn:00004F90                 ;org 4F90h
.text$mn:00004F90 ; COMDAT (pick any)
.text$mn:00004F90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004F90
.text$mn:00004F90 ; =============== S U B R O U T I N E =======================================
.text$mn:00004F90
.text$mn:00004F90 ; Attributes: bp-based frame
.text$mn:00004F90
.text$mn:00004F90 ; public: static unsigned int __cdecl std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Pdif(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>)
.text$mn:00004F90                 public ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.text$mn:00004F90 ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z proc near
.text$mn:00004F90                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+89p
.text$mn:00004F90                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+FAp ...
.text$mn:00004F90
.text$mn:00004F90 var_14          = dword ptr -14h
.text$mn:00004F90 var_10          = dword ptr -10h
.text$mn:00004F90 var_C           = dword ptr -0Ch
.text$mn:00004F90 var_4           = dword ptr -4
.text$mn:00004F90 arg_0           = byte ptr  8
.text$mn:00004F90 arg_8           = dword ptr  10h
.text$mn:00004F90 arg_C           = byte ptr  14h
.text$mn:00004F90
.text$mn:00004F90                 push    ebp
.text$mn:00004F91                 mov     ebp, esp
.text$mn:00004F93                 push    0FFFFFFFFh
.text$mn:00004F95                 push    offset __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.text$mn:00004F9A                 mov     eax, large fs:0
.text$mn:00004FA0                 push    eax
.text$mn:00004FA1                 sub     esp, 8
.text$mn:00004FA4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004FA9                 xor     eax, ebp
.text$mn:00004FAB                 push    eax
.text$mn:00004FAC                 lea     eax, [ebp+var_C]
.text$mn:00004FAF                 mov     large fs:0, eax
.text$mn:00004FB5                 mov     [ebp+var_4], 1
.text$mn:00004FBC                 cmp     [ebp+arg_8], 0
.text$mn:00004FC0                 jnz     short loc_4FCB
.text$mn:00004FC2                 mov     [ebp+var_10], 0
.text$mn:00004FC9                 jmp     short loc_4FDA
.text$mn:00004FCB ; ---------------------------------------------------------------------------
.text$mn:00004FCB
.text$mn:00004FCB loc_4FCB:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+30j
.text$mn:00004FCB                 lea     eax, [ebp+arg_C]
.text$mn:00004FCE                 push    eax             ; std::_Iterator_base12 *
.text$mn:00004FCF                 lea     ecx, [ebp+arg_0]
.text$mn:00004FD2                 call    ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00004FD7                 mov     [ebp+var_10], eax
.text$mn:00004FDA
.text$mn:00004FDA loc_4FDA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+39j
.text$mn:00004FDA                 mov     ecx, [ebp+var_10]
.text$mn:00004FDD                 mov     [ebp+var_14], ecx
.text$mn:00004FE0                 mov     byte ptr [ebp+var_4], 0
.text$mn:00004FE4                 lea     ecx, [ebp+arg_0]
.text$mn:00004FE7                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00004FEC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004FF3                 lea     ecx, [ebp+arg_C]
.text$mn:00004FF6                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00004FFB                 mov     eax, [ebp+var_14]
.text$mn:00004FFE                 mov     ecx, [ebp+var_C]
.text$mn:00005001                 mov     large fs:0, ecx
.text$mn:00005008                 pop     ecx
.text$mn:00005009                 mov     esp, ebp
.text$mn:0000500B                 pop     ebp
.text$mn:0000500C                 retn
.text$mn:0000500C ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z endp
.text$mn:0000500C
.text$mn:0000500C ; ---------------------------------------------------------------------------
.text$mn:0000500D                 align 10h
.text$mn:0000500D _text$mn        ends
.text$mn:0000500D
.text$x:00005010 ; ===========================================================================
.text$x:00005010
.text$x:00005010 ; Segment type: Pure code
.text$x:00005010 ; Segment permissions: Read/Execute
.text$x:00005010 _text$x         segment para public 'CODE' use32
.text$x:00005010                 assume cs:_text$x
.text$x:00005010                 ;org 5010h
.text$x:00005010 ; COMDAT (pick associative to section at 4F90)
.text$x:00005010                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005010
.text$x:00005010 ; =============== S U B R O U T I N E =======================================
.text$x:00005010
.text$x:00005010
.text$x:00005010 __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$0 proc near
.text$x:00005010                                         ; DATA XREF: .xdata$x:00007A4Co
.text$x:00005010                 lea     ecx, [ebp+14h]
.text$x:00005013                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00005013 __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$0 endp
.text$x:00005013
.text$x:00005018
.text$x:00005018 ; =============== S U B R O U T I N E =======================================
.text$x:00005018
.text$x:00005018
.text$x:00005018 __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$1 proc near
.text$x:00005018                                         ; DATA XREF: .xdata$x:00007A54o
.text$x:00005018                 lea     ecx, [ebp+8]
.text$x:0000501B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000501B __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$1 endp
.text$x:0000501B
.text$x:00005020
.text$x:00005020 ; =============== S U B R O U T I N E =======================================
.text$x:00005020
.text$x:00005020
.text$x:00005020 __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z proc near
.text$x:00005020                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+5o
.text$x:00005020
.text$x:00005020 arg_4           = dword ptr  8
.text$x:00005020
.text$x:00005020                 mov     edx, [esp+arg_4]
.text$x:00005024                 lea     eax, [edx+0Ch]
.text$x:00005027                 mov     ecx, [edx-0Ch]
.text$x:0000502A                 xor     ecx, eax
.text$x:0000502C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005031                 mov     eax, offset __ehfuncinfo$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.text$x:00005036                 jmp     ___CxxFrameHandler3
.text$x:00005036 __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z endp
.text$x:00005036
.text$x:00005036 ; ---------------------------------------------------------------------------
.text$x:0000503B                 align 4
.text$x:0000503B _text$x         ends
.text$x:0000503B
.text$mn:0000503C ; ===========================================================================
.text$mn:0000503C
.text$mn:0000503C ; Segment type: Pure code
.text$mn:0000503C ; Segment permissions: Read/Execute
.text$mn:0000503C _text$mn        segment para public 'CODE' use32
.text$mn:0000503C                 assume cs:_text$mn
.text$mn:0000503C                 ;org 503Ch
.text$mn:0000503C ; COMDAT (pick any)
.text$mn:0000503C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000503C
.text$mn:0000503C ; =============== S U B R O U T I N E =======================================
.text$mn:0000503C
.text$mn:0000503C ; Attributes: bp-based frame
.text$mn:0000503C
.text$mn:0000503C ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Reallocate(unsigned int)
.text$mn:0000503C                 public ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:0000503C ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z proc near
.text$mn:0000503C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+4Ep
.text$mn:0000503C
.text$mn:0000503C var_20          = dword ptr -20h
.text$mn:0000503C var_1C          = dword ptr -1Ch
.text$mn:0000503C var_18          = dword ptr -18h
.text$mn:0000503C var_13          = byte ptr -13h
.text$mn:0000503C var_11          = byte ptr -11h
.text$mn:0000503C var_10          = dword ptr -10h
.text$mn:0000503C var_C           = dword ptr -0Ch
.text$mn:0000503C var_4           = dword ptr -4
.text$mn:0000503C arg_0           = dword ptr  8
.text$mn:0000503C
.text$mn:0000503C ; FUNCTION CHUNK AT .text$mn:000050D2 SIZE 00000009 BYTES
.text$mn:0000503C ; FUNCTION CHUNK AT .text$mn:000050E2 SIZE 00000098 BYTES
.text$mn:0000503C
.text$mn:0000503C                 push    ebp
.text$mn:0000503D                 mov     ebp, esp
.text$mn:0000503F                 push    0FFFFFFFFh
.text$mn:00005041                 push    offset __ehhandler$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:00005046                 mov     eax, large fs:0
.text$mn:0000504C                 push    eax
.text$mn:0000504D                 push    ecx
.text$mn:0000504E                 sub     esp, 10h
.text$mn:00005051                 push    ebx
.text$mn:00005052                 push    esi
.text$mn:00005053                 push    edi
.text$mn:00005054                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005059                 xor     eax, ebp
.text$mn:0000505B                 push    eax
.text$mn:0000505C                 lea     eax, [ebp+var_C]
.text$mn:0000505F                 mov     large fs:0, eax
.text$mn:00005065                 mov     [ebp+var_10], esp
.text$mn:00005068                 mov     [ebp+var_18], ecx
.text$mn:0000506B                 mov     eax, [ebp+arg_0]
.text$mn:0000506E                 push    eax
.text$mn:0000506F                 lea     ecx, [ebp+var_11]
.text$mn:00005072                 push    ecx
.text$mn:00005073                 mov     ecx, [ebp+var_18]
.text$mn:00005076                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000507B                 mov     ecx, eax
.text$mn:0000507D                 call    ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::allocate(uint)
.text$mn:00005082                 mov     [ebp+var_1C], eax
.text$mn:00005085                 mov     [ebp+var_4], 0
.text$mn:0000508C                 mov     edx, [ebp+var_1C]
.text$mn:0000508F                 push    edx
.text$mn:00005090                 mov     eax, [ebp+var_18]
.text$mn:00005093                 mov     ecx, [eax+8]
.text$mn:00005096                 push    ecx
.text$mn:00005097                 mov     edx, [ebp+var_18]
.text$mn:0000509A                 mov     eax, [edx+4]
.text$mn:0000509D                 push    eax
.text$mn:0000509E                 mov     ecx, [ebp+var_18]
.text$mn:000050A1                 call    ??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PAV21@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000050A6                 jmp     short loc_50D2
.text$mn:000050A6 ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z endp
.text$mn:000050A6
.text$mn:000050A8
.text$mn:000050A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000050A8
.text$mn:000050A8 ; Attributes: noreturn
.text$mn:000050A8
.text$mn:000050A8 __catch$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$0 proc near
.text$mn:000050A8                                         ; DATA XREF: .xdata$x:00007E64o
.text$mn:000050A8                 mov     ecx, [ebp+8]
.text$mn:000050AB                 push    ecx             ; int
.text$mn:000050AC                 mov     edx, [ebp-1Ch]
.text$mn:000050AF                 push    edx             ; void *
.text$mn:000050B0                 lea     eax, [ebp-12h]
.text$mn:000050B3                 push    eax
.text$mn:000050B4                 mov     ecx, [ebp-18h]
.text$mn:000050B7                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:000050BC                 mov     ecx, eax
.text$mn:000050BE                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)
.text$mn:000050C3                 push    0
.text$mn:000050C5                 push    0
.text$mn:000050C7                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:000050C7 __catch$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$0 endp
.text$mn:000050C7
.text$mn:000050CC ; ---------------------------------------------------------------------------
.text$mn:000050CC                 mov     eax, offset $LN8
.text$mn:000050D1                 retn
.text$mn:000050D2 ; ---------------------------------------------------------------------------
.text$mn:000050D2 ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:000050D2
.text$mn:000050D2 loc_50D2:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+6Aj
.text$mn:000050D2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000050D9                 jmp     short loc_50E2
.text$mn:000050D9 ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:000050DB
.text$mn:000050DB ; =============== S U B R O U T I N E =======================================
.text$mn:000050DB
.text$mn:000050DB
.text$mn:000050DB $LN8            proc near               ; DATA XREF: .text$mn:000050CCo
.text$mn:000050DB                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:000050DB $LN8            endp ; sp-analysis failed
.text$mn:000050DB
.text$mn:000050E2 ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:000050E2
.text$mn:000050E2 loc_50E2:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+9Dj
.text$mn:000050E2                 mov     ecx, [ebp+var_18]
.text$mn:000050E5                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:000050EA                 mov     [ebp+var_20], eax
.text$mn:000050ED                 mov     ecx, [ebp+var_18]
.text$mn:000050F0                 cmp     dword ptr [ecx+4], 0
.text$mn:000050F4                 jz      short loc_513B
.text$mn:000050F6                 mov     edx, [ebp+var_18]
.text$mn:000050F9                 mov     eax, [edx+8]
.text$mn:000050FC                 push    eax
.text$mn:000050FD                 mov     ecx, [ebp+var_18]
.text$mn:00005100                 mov     edx, [ecx+4]
.text$mn:00005103                 push    edx
.text$mn:00005104                 mov     ecx, [ebp+var_18]
.text$mn:00005107                 call    ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000510C                 mov     eax, [ebp+var_18]
.text$mn:0000510F                 mov     ecx, [ebp+var_18]
.text$mn:00005112                 mov     eax, [eax+0Ch]
.text$mn:00005115                 sub     eax, [ecx+4]
.text$mn:00005118                 cdq
.text$mn:00005119                 mov     ecx, 1Ch
.text$mn:0000511E                 idiv    ecx
.text$mn:00005120                 push    eax             ; int
.text$mn:00005121                 mov     edx, [ebp+var_18]
.text$mn:00005124                 mov     eax, [edx+4]
.text$mn:00005127                 push    eax             ; void *
.text$mn:00005128                 lea     ecx, [ebp+var_13]
.text$mn:0000512B                 push    ecx
.text$mn:0000512C                 mov     ecx, [ebp+var_18]
.text$mn:0000512F                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:00005134                 mov     ecx, eax
.text$mn:00005136                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)
.text$mn:0000513B
.text$mn:0000513B loc_513B:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+B8j
.text$mn:0000513B                 mov     ecx, [ebp+var_18] ; this
.text$mn:0000513E                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00005143                 imul    edx, [ebp+arg_0], 1Ch
.text$mn:00005147                 add     edx, [ebp+var_1C]
.text$mn:0000514A                 mov     eax, [ebp+var_18]
.text$mn:0000514D                 mov     [eax+0Ch], edx
.text$mn:00005150                 imul    ecx, [ebp+var_20], 1Ch
.text$mn:00005154                 add     ecx, [ebp+var_1C]
.text$mn:00005157                 mov     edx, [ebp+var_18]
.text$mn:0000515A                 mov     [edx+8], ecx
.text$mn:0000515D                 mov     eax, [ebp+var_18]
.text$mn:00005160                 mov     ecx, [ebp+var_1C]
.text$mn:00005163                 mov     [eax+4], ecx
.text$mn:00005166                 mov     ecx, [ebp+var_C]
.text$mn:00005169                 mov     large fs:0, ecx
.text$mn:00005170                 pop     ecx
.text$mn:00005171                 pop     edi
.text$mn:00005172                 pop     esi
.text$mn:00005173                 pop     ebx
.text$mn:00005174                 mov     esp, ebp
.text$mn:00005176                 pop     ebp
.text$mn:00005177                 retn    4
.text$mn:00005177 ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:00005177 ; ---------------------------------------------------------------------------
.text$mn:0000517A                 align 4
.text$mn:0000517A _text$mn        ends
.text$mn:0000517A
.text$x:0000517C ; ===========================================================================
.text$x:0000517C
.text$x:0000517C ; Segment type: Pure code
.text$x:0000517C ; Segment permissions: Read/Execute
.text$x:0000517C _text$x         segment para public 'CODE' use32
.text$x:0000517C                 assume cs:_text$x
.text$x:0000517C                 ;org 517Ch
.text$x:0000517C ; COMDAT (pick associative to section at 503C)
.text$x:0000517C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000517C
.text$x:0000517C ; =============== S U B R O U T I N E =======================================
.text$x:0000517C
.text$x:0000517C
.text$x:0000517C __ehhandler$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z proc near
.text$x:0000517C                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+5o
.text$x:0000517C
.text$x:0000517C arg_4           = dword ptr  8
.text$x:0000517C
.text$x:0000517C                 mov     edx, [esp+arg_4]
.text$x:00005180                 lea     eax, [edx+0Ch]
.text$x:00005183                 mov     ecx, [edx-24h]
.text$x:00005186                 xor     ecx, eax
.text$x:00005188                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000518D                 mov     eax, offset __ehfuncinfo$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$x:00005192                 jmp     ___CxxFrameHandler3
.text$x:00005192 __ehhandler$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z endp
.text$x:00005192
.text$x:00005192 ; ---------------------------------------------------------------------------
.text$x:00005197                 align 4
.text$x:00005197 _text$x         ends
.text$x:00005197
.text$mn:00005198 ; ===========================================================================
.text$mn:00005198
.text$mn:00005198 ; Segment type: Pure code
.text$mn:00005198 ; Segment permissions: Read/Execute
.text$mn:00005198 _text$mn        segment para public 'CODE' use32
.text$mn:00005198                 assume cs:_text$mn
.text$mn:00005198                 ;org 5198h
.text$mn:00005198 ; COMDAT (pick any)
.text$mn:00005198                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005198
.text$mn:00005198 ; =============== S U B R O U T I N E =======================================
.text$mn:00005198
.text$mn:00005198 ; Attributes: bp-based frame
.text$mn:00005198
.text$mn:00005198 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Reserve(unsigned int)
.text$mn:00005198                 public ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:00005198 ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z proc near
.text$mn:00005198                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+59p
.text$mn:00005198                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+C6p
.text$mn:00005198
.text$mn:00005198 var_4           = dword ptr -4
.text$mn:00005198 arg_0           = dword ptr  8
.text$mn:00005198
.text$mn:00005198                 push    ebp
.text$mn:00005199                 mov     ebp, esp
.text$mn:0000519B                 push    ecx
.text$mn:0000519C                 push    esi
.text$mn:0000519D                 mov     [ebp+var_4], ecx
.text$mn:000051A0                 mov     ecx, [ebp+var_4]
.text$mn:000051A3                 call    ?_Unused_capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Unused_capacity(void)
.text$mn:000051A8                 cmp     eax, [ebp+arg_0]
.text$mn:000051AB                 jnb     short loc_51EB
.text$mn:000051AD                 mov     ecx, [ebp+var_4]
.text$mn:000051B0                 call    ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)
.text$mn:000051B5                 mov     esi, eax
.text$mn:000051B7                 mov     ecx, [ebp+var_4]
.text$mn:000051BA                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:000051BF                 sub     esi, eax
.text$mn:000051C1                 cmp     esi, [ebp+arg_0]
.text$mn:000051C4                 jnb     short loc_51CE
.text$mn:000051C6                 mov     ecx, [ebp+var_4]
.text$mn:000051C9                 call    ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Xlen(void)
.text$mn:000051CE
.text$mn:000051CE loc_51CE:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+2Cj
.text$mn:000051CE                 mov     ecx, [ebp+var_4]
.text$mn:000051D1                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:000051D6                 add     eax, [ebp+arg_0]
.text$mn:000051D9                 push    eax
.text$mn:000051DA                 mov     ecx, [ebp+var_4]
.text$mn:000051DD                 call    ?_Grow_to@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEII@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)
.text$mn:000051E2                 push    eax
.text$mn:000051E3                 mov     ecx, [ebp+var_4]
.text$mn:000051E6                 call    ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)
.text$mn:000051EB
.text$mn:000051EB loc_51EB:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+13j
.text$mn:000051EB                 pop     esi
.text$mn:000051EC                 mov     esp, ebp
.text$mn:000051EE                 pop     ebp
.text$mn:000051EF                 retn    4
.text$mn:000051EF ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z endp
.text$mn:000051EF
.text$mn:000051EF ; ---------------------------------------------------------------------------
.text$mn:000051F2                 align 4
.text$mn:000051F2 _text$mn        ends
.text$mn:000051F2
.text$mn:000051F4 ; ===========================================================================
.text$mn:000051F4
.text$mn:000051F4 ; Segment type: Pure code
.text$mn:000051F4 ; Segment permissions: Read/Execute
.text$mn:000051F4 _text$mn        segment para public 'CODE' use32
.text$mn:000051F4                 assume cs:_text$mn
.text$mn:000051F4                 ;org 51F4h
.text$mn:000051F4 ; COMDAT (pick any)
.text$mn:000051F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000051F4
.text$mn:000051F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000051F4
.text$mn:000051F4 ; Attributes: bp-based frame
.text$mn:000051F4
.text$mn:000051F4 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(char, size_t Size)
.text$mn:000051F4                 public ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
.text$mn:000051F4 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
.text$mn:000051F4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+47p
.text$mn:000051F4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+34p ...
.text$mn:000051F4
.text$mn:000051F4 var_C           = dword ptr -0Ch
.text$mn:000051F4 var_8           = dword ptr -8
.text$mn:000051F4 var_2           = byte ptr -2
.text$mn:000051F4 var_1           = byte ptr -1
.text$mn:000051F4 arg_0           = byte ptr  8
.text$mn:000051F4 Size            = dword ptr  0Ch
.text$mn:000051F4
.text$mn:000051F4                 push    ebp
.text$mn:000051F5                 mov     ebp, esp
.text$mn:000051F7                 sub     esp, 0Ch
.text$mn:000051FA                 mov     [ebp+var_8], ecx
.text$mn:000051FD                 movzx   eax, [ebp+arg_0]
.text$mn:00005201                 test    eax, eax
.text$mn:00005203                 jnz     short loc_5207
.text$mn:00005205                 jmp     short loc_527A
.text$mn:00005207 ; ---------------------------------------------------------------------------
.text$mn:00005207
.text$mn:00005207 loc_5207:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+Fj
.text$mn:00005207                 mov     ecx, [ebp+var_8]
.text$mn:0000520A                 cmp     dword ptr [ecx+18h], 10h
.text$mn:0000520E                 jb      short loc_527A
.text$mn:00005210                 mov     edx, [ebp+var_8]
.text$mn:00005213                 mov     eax, [edx+4]
.text$mn:00005216                 mov     [ebp+var_C], eax
.text$mn:00005219                 mov     ecx, [ebp+var_8]
.text$mn:0000521C                 add     ecx, 4
.text$mn:0000521F                 push    ecx
.text$mn:00005220                 lea     edx, [ebp+var_1]
.text$mn:00005223                 push    edx
.text$mn:00005224                 mov     ecx, [ebp+var_8]
.text$mn:00005227                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:0000522C                 mov     ecx, eax
.text$mn:0000522E                 call    ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)
.text$mn:00005233                 cmp     [ebp+Size], 0
.text$mn:00005237                 jbe     short loc_5259
.text$mn:00005239                 mov     eax, [ebp+Size]
.text$mn:0000523C                 push    eax             ; Size
.text$mn:0000523D                 mov     ecx, [ebp+var_C]
.text$mn:00005240                 push    ecx
.text$mn:00005241                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00005246                 add     esp, 4
.text$mn:00005249                 push    eax             ; Src
.text$mn:0000524A                 mov     edx, [ebp+var_8]
.text$mn:0000524D                 add     edx, 4
.text$mn:00005250                 push    edx             ; Dst
.text$mn:00005251                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00005256                 add     esp, 0Ch
.text$mn:00005259
.text$mn:00005259 loc_5259:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+43j
.text$mn:00005259                 mov     eax, [ebp+var_8]
.text$mn:0000525C                 mov     ecx, [eax+18h]
.text$mn:0000525F                 add     ecx, 1
.text$mn:00005262                 push    ecx             ; int
.text$mn:00005263                 mov     edx, [ebp+var_C]
.text$mn:00005266                 push    edx             ; void *
.text$mn:00005267                 lea     eax, [ebp+var_2]
.text$mn:0000526A                 push    eax
.text$mn:0000526B                 mov     ecx, [ebp+var_8]
.text$mn:0000526E                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00005273                 mov     ecx, eax
.text$mn:00005275                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)
.text$mn:0000527A
.text$mn:0000527A loc_527A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+11j
.text$mn:0000527A                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+1Aj
.text$mn:0000527A                 mov     ecx, [ebp+var_8]
.text$mn:0000527D                 mov     dword ptr [ecx+18h], 0Fh
.text$mn:00005284                 mov     edx, [ebp+Size]
.text$mn:00005287                 push    edx
.text$mn:00005288                 mov     ecx, [ebp+var_8]
.text$mn:0000528B                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00005290                 mov     esp, ebp
.text$mn:00005292                 pop     ebp
.text$mn:00005293                 retn    8
.text$mn:00005293 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z endp
.text$mn:00005293
.text$mn:00005293 ; ---------------------------------------------------------------------------
.text$mn:00005296                 align 4
.text$mn:00005296 _text$mn        ends
.text$mn:00005296
.text$mn:00005298 ; ===========================================================================
.text$mn:00005298
.text$mn:00005298 ; Segment type: Pure code
.text$mn:00005298 ; Segment permissions: Read/Execute
.text$mn:00005298 _text$mn        segment para public 'CODE' use32
.text$mn:00005298                 assume cs:_text$mn
.text$mn:00005298                 ;org 5298h
.text$mn:00005298 ; COMDAT (pick any)
.text$mn:00005298                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005298
.text$mn:00005298 ; =============== S U B R O U T I N E =======================================
.text$mn:00005298
.text$mn:00005298 ; Attributes: bp-based frame
.text$mn:00005298
.text$mn:00005298 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Tidy(bool, unsigned int)
.text$mn:00005298                 public ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z
.text$mn:00005298 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z proc near
.text$mn:00005298                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+4Bp
.text$mn:00005298                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+56p ...
.text$mn:00005298
.text$mn:00005298 var_C           = dword ptr -0Ch
.text$mn:00005298 var_8           = dword ptr -8
.text$mn:00005298 var_2           = byte ptr -2
.text$mn:00005298 var_1           = byte ptr -1
.text$mn:00005298 arg_0           = byte ptr  8
.text$mn:00005298 arg_4           = dword ptr  0Ch
.text$mn:00005298
.text$mn:00005298                 push    ebp
.text$mn:00005299                 mov     ebp, esp
.text$mn:0000529B                 sub     esp, 0Ch
.text$mn:0000529E                 mov     [ebp+var_8], ecx
.text$mn:000052A1                 movzx   eax, [ebp+arg_0]
.text$mn:000052A5                 test    eax, eax
.text$mn:000052A7                 jnz     short loc_52AB
.text$mn:000052A9                 jmp     short loc_531E
.text$mn:000052AB ; ---------------------------------------------------------------------------
.text$mn:000052AB
.text$mn:000052AB loc_52AB:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+Fj
.text$mn:000052AB                 mov     ecx, [ebp+var_8]
.text$mn:000052AE                 cmp     dword ptr [ecx+18h], 8
.text$mn:000052B2                 jb      short loc_531E
.text$mn:000052B4                 mov     edx, [ebp+var_8]
.text$mn:000052B7                 mov     eax, [edx+4]
.text$mn:000052BA                 mov     [ebp+var_C], eax
.text$mn:000052BD                 mov     ecx, [ebp+var_8]
.text$mn:000052C0                 add     ecx, 4
.text$mn:000052C3                 push    ecx
.text$mn:000052C4                 lea     edx, [ebp+var_1]
.text$mn:000052C7                 push    edx
.text$mn:000052C8                 mov     ecx, [ebp+var_8]
.text$mn:000052CB                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000052D0                 mov     ecx, eax
.text$mn:000052D2                 call    ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:000052D7                 cmp     [ebp+arg_4], 0
.text$mn:000052DB                 jbe     short loc_52FD
.text$mn:000052DD                 mov     eax, [ebp+arg_4]
.text$mn:000052E0                 push    eax             ; int
.text$mn:000052E1                 mov     ecx, [ebp+var_C]
.text$mn:000052E4                 push    ecx
.text$mn:000052E5                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:000052EA                 add     esp, 4
.text$mn:000052ED                 push    eax             ; Src
.text$mn:000052EE                 mov     edx, [ebp+var_8]
.text$mn:000052F1                 add     edx, 4
.text$mn:000052F4                 push    edx             ; Dst
.text$mn:000052F5                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:000052FA                 add     esp, 0Ch
.text$mn:000052FD
.text$mn:000052FD loc_52FD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+43j
.text$mn:000052FD                 mov     eax, [ebp+var_8]
.text$mn:00005300                 mov     ecx, [eax+18h]
.text$mn:00005303                 add     ecx, 1
.text$mn:00005306                 push    ecx             ; int
.text$mn:00005307                 mov     edx, [ebp+var_C]
.text$mn:0000530A                 push    edx             ; void *
.text$mn:0000530B                 lea     eax, [ebp+var_2]
.text$mn:0000530E                 push    eax
.text$mn:0000530F                 mov     ecx, [ebp+var_8]
.text$mn:00005312                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00005317                 mov     ecx, eax
.text$mn:00005319                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)
.text$mn:0000531E
.text$mn:0000531E loc_531E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+11j
.text$mn:0000531E                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+1Aj
.text$mn:0000531E                 mov     ecx, [ebp+var_8]
.text$mn:00005321                 mov     dword ptr [ecx+18h], 7
.text$mn:00005328                 mov     edx, [ebp+arg_4]
.text$mn:0000532B                 push    edx
.text$mn:0000532C                 mov     ecx, [ebp+var_8]
.text$mn:0000532F                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00005334                 mov     esp, ebp
.text$mn:00005336                 pop     ebp
.text$mn:00005337                 retn    8
.text$mn:00005337 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z endp
.text$mn:00005337
.text$mn:00005337 ; ---------------------------------------------------------------------------
.text$mn:0000533A                 align 4
.text$mn:0000533A _text$mn        ends
.text$mn:0000533A
.text$mn:0000533C ; ===========================================================================
.text$mn:0000533C
.text$mn:0000533C ; Segment type: Pure code
.text$mn:0000533C ; Segment permissions: Read/Execute
.text$mn:0000533C _text$mn        segment para public 'CODE' use32
.text$mn:0000533C                 assume cs:_text$mn
.text$mn:0000533C                 ;org 533Ch
.text$mn:0000533C ; COMDAT (pick any)
.text$mn:0000533C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000533C
.text$mn:0000533C ; =============== S U B R O U T I N E =======================================
.text$mn:0000533C
.text$mn:0000533C ; Attributes: bp-based frame
.text$mn:0000533C
.text$mn:0000533C ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Tidy(void)
.text$mn:0000533C                 public ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ
.text$mn:0000533C ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ proc near
.text$mn:0000533C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+30p
.text$mn:0000533C
.text$mn:0000533C var_8           = dword ptr -8
.text$mn:0000533C var_1           = byte ptr -1
.text$mn:0000533C
.text$mn:0000533C                 push    ebp
.text$mn:0000533D                 mov     ebp, esp
.text$mn:0000533F                 sub     esp, 8
.text$mn:00005342                 mov     [ebp+var_8], ecx
.text$mn:00005345                 mov     eax, [ebp+var_8]
.text$mn:00005348                 cmp     dword ptr [eax+4], 0
.text$mn:0000534C                 jz      short loc_53BB
.text$mn:0000534E                 mov     ecx, [ebp+var_8] ; this
.text$mn:00005351                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00005356                 mov     ecx, [ebp+var_8]
.text$mn:00005359                 mov     edx, [ecx+8]
.text$mn:0000535C                 push    edx
.text$mn:0000535D                 mov     eax, [ebp+var_8]
.text$mn:00005360                 mov     ecx, [eax+4]
.text$mn:00005363                 push    ecx
.text$mn:00005364                 mov     ecx, [ebp+var_8]
.text$mn:00005367                 call    ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000536C                 mov     edx, [ebp+var_8]
.text$mn:0000536F                 mov     eax, [ebp+var_8]
.text$mn:00005372                 mov     ecx, [edx+0Ch]
.text$mn:00005375                 sub     ecx, [eax+4]
.text$mn:00005378                 mov     eax, ecx
.text$mn:0000537A                 cdq
.text$mn:0000537B                 mov     ecx, 1Ch
.text$mn:00005380                 idiv    ecx
.text$mn:00005382                 push    eax             ; int
.text$mn:00005383                 mov     edx, [ebp+var_8]
.text$mn:00005386                 mov     eax, [edx+4]
.text$mn:00005389                 push    eax             ; void *
.text$mn:0000538A                 lea     ecx, [ebp+var_1]
.text$mn:0000538D                 push    ecx
.text$mn:0000538E                 mov     ecx, [ebp+var_8]
.text$mn:00005391                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:00005396                 mov     ecx, eax
.text$mn:00005398                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)
.text$mn:0000539D                 mov     edx, [ebp+var_8]
.text$mn:000053A0                 mov     dword ptr [edx+4], 0
.text$mn:000053A7                 mov     eax, [ebp+var_8]
.text$mn:000053AA                 mov     dword ptr [eax+8], 0
.text$mn:000053B1                 mov     ecx, [ebp+var_8]
.text$mn:000053B4                 mov     dword ptr [ecx+0Ch], 0
.text$mn:000053BB
.text$mn:000053BB loc_53BB:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Tidy(void)+10j
.text$mn:000053BB                 mov     esp, ebp
.text$mn:000053BD                 pop     ebp
.text$mn:000053BE                 retn
.text$mn:000053BE ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ endp
.text$mn:000053BE
.text$mn:000053BE ; ---------------------------------------------------------------------------
.text$mn:000053BF                 align 10h
.text$mn:000053BF _text$mn        ends
.text$mn:000053BF
.text$mn:000053C0 ; ===========================================================================
.text$mn:000053C0
.text$mn:000053C0 ; Segment type: Pure code
.text$mn:000053C0 ; Segment permissions: Read/Execute
.text$mn:000053C0 _text$mn        segment para public 'CODE' use32
.text$mn:000053C0                 assume cs:_text$mn
.text$mn:000053C0                 ;org 53C0h
.text$mn:000053C0 ; COMDAT (pick any)
.text$mn:000053C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000053C0
.text$mn:000053C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000053C0
.text$mn:000053C0 ; Attributes: bp-based frame
.text$mn:000053C0
.text$mn:000053C0 ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Unused_capacity(void)const
.text$mn:000053C0                 public ?_Unused_capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:000053C0 ?_Unused_capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:000053C0                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+Bp
.text$mn:000053C0
.text$mn:000053C0 var_4           = dword ptr -4
.text$mn:000053C0
.text$mn:000053C0                 push    ebp
.text$mn:000053C1                 mov     ebp, esp
.text$mn:000053C3                 push    ecx
.text$mn:000053C4                 mov     [ebp+var_4], ecx
.text$mn:000053C7                 mov     eax, [ebp+var_4]
.text$mn:000053CA                 mov     ecx, [ebp+var_4]
.text$mn:000053CD                 mov     eax, [eax+0Ch]
.text$mn:000053D0                 sub     eax, [ecx+8]
.text$mn:000053D3                 cdq
.text$mn:000053D4                 mov     ecx, 1Ch
.text$mn:000053D9                 idiv    ecx
.text$mn:000053DB                 mov     esp, ebp
.text$mn:000053DD                 pop     ebp
.text$mn:000053DE                 retn
.text$mn:000053DE ?_Unused_capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:000053DE
.text$mn:000053DE ; ---------------------------------------------------------------------------
.text$mn:000053DF                 align 10h
.text$mn:000053DF _text$mn        ends
.text$mn:000053DF
.text$mn:000053E0 ; ===========================================================================
.text$mn:000053E0
.text$mn:000053E0 ; Segment type: Pure code
.text$mn:000053E0 ; Segment permissions: Read/Execute
.text$mn:000053E0 _text$mn        segment para public 'CODE' use32
.text$mn:000053E0                 assume cs:_text$mn
.text$mn:000053E0                 ;org 53E0h
.text$mn:000053E0 ; COMDAT (pick any)
.text$mn:000053E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000053E0
.text$mn:000053E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000053E0
.text$mn:000053E0 ; Attributes: bp-based frame
.text$mn:000053E0
.text$mn:000053E0 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xlen(void)const
.text$mn:000053E0                 public ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:000053E0 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:000053E0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+19p
.text$mn:000053E0
.text$mn:000053E0 var_4           = dword ptr -4
.text$mn:000053E0
.text$mn:000053E0                 push    ebp
.text$mn:000053E1                 mov     ebp, esp
.text$mn:000053E3                 push    ecx
.text$mn:000053E4                 mov     [ebp+var_4], ecx
.text$mn:000053E7                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:000053EC                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:000053F1                 mov     esp, ebp
.text$mn:000053F3                 pop     ebp
.text$mn:000053F4                 retn
.text$mn:000053F4 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:000053F4
.text$mn:000053F4 ; ---------------------------------------------------------------------------
.text$mn:000053F5                 align 4
.text$mn:000053F5 _text$mn        ends
.text$mn:000053F5
.text$mn:000053F8 ; ===========================================================================
.text$mn:000053F8
.text$mn:000053F8 ; Segment type: Pure code
.text$mn:000053F8 ; Segment permissions: Read/Execute
.text$mn:000053F8 _text$mn        segment para public 'CODE' use32
.text$mn:000053F8                 assume cs:_text$mn
.text$mn:000053F8                 ;org 53F8h
.text$mn:000053F8 ; COMDAT (pick any)
.text$mn:000053F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000053F8
.text$mn:000053F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000053F8
.text$mn:000053F8 ; Attributes: bp-based frame
.text$mn:000053F8
.text$mn:000053F8 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xlen(void)const
.text$mn:000053F8                 public ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:000053F8 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:000053F8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+19p
.text$mn:000053F8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Dp ...
.text$mn:000053F8
.text$mn:000053F8 var_4           = dword ptr -4
.text$mn:000053F8
.text$mn:000053F8                 push    ebp
.text$mn:000053F9                 mov     ebp, esp
.text$mn:000053FB                 push    ecx
.text$mn:000053FC                 mov     [ebp+var_4], ecx
.text$mn:000053FF                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:00005404                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:00005409                 mov     esp, ebp
.text$mn:0000540B                 pop     ebp
.text$mn:0000540C                 retn
.text$mn:0000540C ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:0000540C
.text$mn:0000540C ; ---------------------------------------------------------------------------
.text$mn:0000540D                 align 10h
.text$mn:0000540D _text$mn        ends
.text$mn:0000540D
.text$mn:00005410 ; ===========================================================================
.text$mn:00005410
.text$mn:00005410 ; Segment type: Pure code
.text$mn:00005410 ; Segment permissions: Read/Execute
.text$mn:00005410 _text$mn        segment para public 'CODE' use32
.text$mn:00005410                 assume cs:_text$mn
.text$mn:00005410                 ;org 5410h
.text$mn:00005410 ; COMDAT (pick any)
.text$mn:00005410                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005410
.text$mn:00005410 ; =============== S U B R O U T I N E =======================================
.text$mn:00005410
.text$mn:00005410 ; Attributes: bp-based frame
.text$mn:00005410
.text$mn:00005410 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Xlen(void)const
.text$mn:00005410                 public ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ
.text$mn:00005410 ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ proc near
.text$mn:00005410                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+31p
.text$mn:00005410
.text$mn:00005410 var_4           = dword ptr -4
.text$mn:00005410
.text$mn:00005410                 push    ebp
.text$mn:00005411                 mov     ebp, esp
.text$mn:00005413                 push    ecx
.text$mn:00005414                 mov     [ebp+var_4], ecx
.text$mn:00005417                 push    offset ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; "vector<T> too long"
.text$mn:0000541C                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:00005421                 mov     esp, ebp
.text$mn:00005423                 pop     ebp
.text$mn:00005424                 retn
.text$mn:00005424 ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ endp
.text$mn:00005424
.text$mn:00005424 ; ---------------------------------------------------------------------------
.text$mn:00005425                 align 4
.text$mn:00005425 _text$mn        ends
.text$mn:00005425
.text$mn:00005428 ; ===========================================================================
.text$mn:00005428
.text$mn:00005428 ; Segment type: Pure code
.text$mn:00005428 ; Segment permissions: Read/Execute
.text$mn:00005428 _text$mn        segment para public 'CODE' use32
.text$mn:00005428                 assume cs:_text$mn
.text$mn:00005428                 ;org 5428h
.text$mn:00005428 ; COMDAT (pick any)
.text$mn:00005428                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005428
.text$mn:00005428 ; =============== S U B R O U T I N E =======================================
.text$mn:00005428
.text$mn:00005428 ; Attributes: bp-based frame
.text$mn:00005428
.text$mn:00005428 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xran(void)const
.text$mn:00005428                 public ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:00005428 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:00005428                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+19p
.text$mn:00005428                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+15p ...
.text$mn:00005428
.text$mn:00005428 var_4           = dword ptr -4
.text$mn:00005428
.text$mn:00005428                 push    ebp
.text$mn:00005429                 mov     ebp, esp
.text$mn:0000542B                 push    ecx
.text$mn:0000542C                 mov     [ebp+var_4], ecx
.text$mn:0000542F                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:00005434                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:00005439                 mov     esp, ebp
.text$mn:0000543B                 pop     ebp
.text$mn:0000543C                 retn
.text$mn:0000543C ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:0000543C
.text$mn:0000543C ; ---------------------------------------------------------------------------
.text$mn:0000543D                 align 10h
.text$mn:0000543D _text$mn        ends
.text$mn:0000543D
.text$mn:00005440 ; ===========================================================================
.text$mn:00005440
.text$mn:00005440 ; Segment type: Pure code
.text$mn:00005440 ; Segment permissions: Read/Execute
.text$mn:00005440 _text$mn        segment para public 'CODE' use32
.text$mn:00005440                 assume cs:_text$mn
.text$mn:00005440                 ;org 5440h
.text$mn:00005440 ; COMDAT (pick any)
.text$mn:00005440                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005440
.text$mn:00005440 ; =============== S U B R O U T I N E =======================================
.text$mn:00005440
.text$mn:00005440 ; Attributes: bp-based frame
.text$mn:00005440
.text$mn:00005440 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xran(void)const
.text$mn:00005440                 public ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:00005440 ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:00005440                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p
.text$mn:00005440                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p ...
.text$mn:00005440
.text$mn:00005440 var_4           = dword ptr -4
.text$mn:00005440
.text$mn:00005440                 push    ebp
.text$mn:00005441                 mov     ebp, esp
.text$mn:00005443                 push    ecx
.text$mn:00005444                 mov     [ebp+var_4], ecx
.text$mn:00005447                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:0000544C                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:00005451                 mov     esp, ebp
.text$mn:00005453                 pop     ebp
.text$mn:00005454                 retn
.text$mn:00005454 ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:00005454
.text$mn:00005454 ; ---------------------------------------------------------------------------
.text$mn:00005455                 align 4
.text$mn:00005455 _text$mn        ends
.text$mn:00005455
.text$mn:00005458 ; ===========================================================================
.text$mn:00005458
.text$mn:00005458 ; Segment type: Pure code
.text$mn:00005458 ; Segment permissions: Read/Execute
.text$mn:00005458 _text$mn        segment para public 'CODE' use32
.text$mn:00005458                 assume cs:_text$mn
.text$mn:00005458                 ;org 5458h
.text$mn:00005458 ; COMDAT (pick any)
.text$mn:00005458                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005458
.text$mn:00005458 ; =============== S U B R O U T I N E =======================================
.text$mn:00005458
.text$mn:00005458 ; Attributes: bp-based frame
.text$mn:00005458
.text$mn:00005458 ; public: char * __thiscall std::_Wrap_alloc<class std::allocator<char>>::allocate(unsigned int)
.text$mn:00005458                 public ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
.text$mn:00005458 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
.text$mn:00005458                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+BBp
.text$mn:00005458                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+22p
.text$mn:00005458
.text$mn:00005458 var_4           = dword ptr -4
.text$mn:00005458 arg_0           = dword ptr  8
.text$mn:00005458
.text$mn:00005458                 push    ebp
.text$mn:00005459                 mov     ebp, esp
.text$mn:0000545B                 push    ecx
.text$mn:0000545C                 mov     [ebp+var_4], ecx
.text$mn:0000545F                 mov     eax, [ebp+arg_0]
.text$mn:00005462                 push    eax
.text$mn:00005463                 mov     ecx, [ebp+var_4]
.text$mn:00005466                 call    ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate(uint)
.text$mn:0000546B                 mov     esp, ebp
.text$mn:0000546D                 pop     ebp
.text$mn:0000546E                 retn    4
.text$mn:0000546E ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z endp
.text$mn:0000546E
.text$mn:0000546E ; ---------------------------------------------------------------------------
.text$mn:00005471                 align 4
.text$mn:00005471 _text$mn        ends
.text$mn:00005471
.text$mn:00005474 ; ===========================================================================
.text$mn:00005474
.text$mn:00005474 ; Segment type: Pure code
.text$mn:00005474 ; Segment permissions: Read/Execute
.text$mn:00005474 _text$mn        segment para public 'CODE' use32
.text$mn:00005474                 assume cs:_text$mn
.text$mn:00005474                 ;org 5474h
.text$mn:00005474 ; COMDAT (pick any)
.text$mn:00005474                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005474
.text$mn:00005474 ; =============== S U B R O U T I N E =======================================
.text$mn:00005474
.text$mn:00005474 ; Attributes: bp-based frame
.text$mn:00005474
.text$mn:00005474 ; public: struct std::_Container_proxy * __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::allocate(unsigned int)
.text$mn:00005474                 public ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:00005474 ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:00005474                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Alloc_proxy(void)+16p
.text$mn:00005474
.text$mn:00005474 var_4           = dword ptr -4
.text$mn:00005474 arg_0           = dword ptr  8
.text$mn:00005474
.text$mn:00005474                 push    ebp
.text$mn:00005475                 mov     ebp, esp
.text$mn:00005477                 push    ecx
.text$mn:00005478                 mov     [ebp+var_4], ecx
.text$mn:0000547B                 mov     eax, [ebp+arg_0]
.text$mn:0000547E                 push    eax
.text$mn:0000547F                 mov     ecx, [ebp+var_4]
.text$mn:00005482                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:00005487                 mov     esp, ebp
.text$mn:00005489                 pop     ebp
.text$mn:0000548A                 retn    4
.text$mn:0000548A ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:0000548A
.text$mn:0000548A ; ---------------------------------------------------------------------------
.text$mn:0000548D                 align 10h
.text$mn:0000548D _text$mn        ends
.text$mn:0000548D
.text$mn:00005490 ; ===========================================================================
.text$mn:00005490
.text$mn:00005490 ; Segment type: Pure code
.text$mn:00005490 ; Segment permissions: Read/Execute
.text$mn:00005490 _text$mn        segment para public 'CODE' use32
.text$mn:00005490                 assume cs:_text$mn
.text$mn:00005490                 ;org 5490h
.text$mn:00005490 ; COMDAT (pick any)
.text$mn:00005490                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005490
.text$mn:00005490 ; =============== S U B R O U T I N E =======================================
.text$mn:00005490
.text$mn:00005490 ; Attributes: bp-based frame
.text$mn:00005490
.text$mn:00005490 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::allocate(unsigned int)
.text$mn:00005490                 public ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:00005490 ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:00005490                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+41p
.text$mn:00005490
.text$mn:00005490 var_4           = dword ptr -4
.text$mn:00005490 arg_0           = dword ptr  8
.text$mn:00005490
.text$mn:00005490                 push    ebp
.text$mn:00005491                 mov     ebp, esp
.text$mn:00005493                 push    ecx
.text$mn:00005494                 mov     [ebp+var_4], ecx
.text$mn:00005497                 mov     eax, [ebp+arg_0]
.text$mn:0000549A                 push    eax
.text$mn:0000549B                 mov     ecx, [ebp+var_4]
.text$mn:0000549E                 call    ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocate(uint)
.text$mn:000054A3                 mov     esp, ebp
.text$mn:000054A5                 pop     ebp
.text$mn:000054A6                 retn    4
.text$mn:000054A6 ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:000054A6
.text$mn:000054A6 ; ---------------------------------------------------------------------------
.text$mn:000054A9                 align 4
.text$mn:000054A9 _text$mn        ends
.text$mn:000054A9
.text$mn:000054AC ; ===========================================================================
.text$mn:000054AC
.text$mn:000054AC ; Segment type: Pure code
.text$mn:000054AC ; Segment permissions: Read/Execute
.text$mn:000054AC _text$mn        segment para public 'CODE' use32
.text$mn:000054AC                 assume cs:_text$mn
.text$mn:000054AC                 ;org 54ACh
.text$mn:000054AC ; COMDAT (pick any)
.text$mn:000054AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000054AC
.text$mn:000054AC ; =============== S U B R O U T I N E =======================================
.text$mn:000054AC
.text$mn:000054AC ; Attributes: bp-based frame
.text$mn:000054AC
.text$mn:000054AC ; public: wchar_t * __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::allocate(unsigned int)
.text$mn:000054AC                 public ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z
.text$mn:000054AC ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z proc near
.text$mn:000054AC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+BBp
.text$mn:000054AC                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+22p
.text$mn:000054AC
.text$mn:000054AC var_4           = dword ptr -4
.text$mn:000054AC arg_0           = dword ptr  8
.text$mn:000054AC
.text$mn:000054AC                 push    ebp
.text$mn:000054AD                 mov     ebp, esp
.text$mn:000054AF                 push    ecx
.text$mn:000054B0                 mov     [ebp+var_4], ecx
.text$mn:000054B3                 mov     eax, [ebp+arg_0]
.text$mn:000054B6                 push    eax
.text$mn:000054B7                 mov     ecx, [ebp+var_4]
.text$mn:000054BA                 call    ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate(uint)
.text$mn:000054BF                 mov     esp, ebp
.text$mn:000054C1                 pop     ebp
.text$mn:000054C2                 retn    4
.text$mn:000054C2 ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z endp
.text$mn:000054C2
.text$mn:000054C2 ; ---------------------------------------------------------------------------
.text$mn:000054C5                 align 4
.text$mn:000054C5 _text$mn        ends
.text$mn:000054C5
.text$mn:000054C8 ; ===========================================================================
.text$mn:000054C8
.text$mn:000054C8 ; Segment type: Pure code
.text$mn:000054C8 ; Segment permissions: Read/Execute
.text$mn:000054C8 _text$mn        segment para public 'CODE' use32
.text$mn:000054C8                 assume cs:_text$mn
.text$mn:000054C8                 ;org 54C8h
.text$mn:000054C8 ; COMDAT (pick any)
.text$mn:000054C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000054C8
.text$mn:000054C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000054C8
.text$mn:000054C8 ; Attributes: bp-based frame
.text$mn:000054C8
.text$mn:000054C8 ; public: char * __thiscall std::allocator<char>::allocate(unsigned int)
.text$mn:000054C8                 public ?allocate@?$allocator@D@std@@QAEPADI@Z
.text$mn:000054C8 ?allocate@?$allocator@D@std@@QAEPADI@Z proc near
.text$mn:000054C8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::allocate(uint)+Ep
.text$mn:000054C8
.text$mn:000054C8 var_4           = dword ptr -4
.text$mn:000054C8 arg_0           = dword ptr  8
.text$mn:000054C8
.text$mn:000054C8                 push    ebp
.text$mn:000054C9                 mov     ebp, esp
.text$mn:000054CB                 push    ecx
.text$mn:000054CC                 mov     [ebp+var_4], ecx
.text$mn:000054CF                 push    0
.text$mn:000054D1                 mov     eax, [ebp+arg_0]
.text$mn:000054D4                 push    eax
.text$mn:000054D5                 call    ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>(uint,char *)
.text$mn:000054DA                 add     esp, 8
.text$mn:000054DD                 mov     esp, ebp
.text$mn:000054DF                 pop     ebp
.text$mn:000054E0                 retn    4
.text$mn:000054E0 ?allocate@?$allocator@D@std@@QAEPADI@Z endp
.text$mn:000054E0
.text$mn:000054E0 ; ---------------------------------------------------------------------------
.text$mn:000054E3                 align 4
.text$mn:000054E3 _text$mn        ends
.text$mn:000054E3
.text$mn:000054E4 ; ===========================================================================
.text$mn:000054E4
.text$mn:000054E4 ; Segment type: Pure code
.text$mn:000054E4 ; Segment permissions: Read/Execute
.text$mn:000054E4 _text$mn        segment para public 'CODE' use32
.text$mn:000054E4                 assume cs:_text$mn
.text$mn:000054E4                 ;org 54E4h
.text$mn:000054E4 ; COMDAT (pick any)
.text$mn:000054E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000054E4
.text$mn:000054E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000054E4
.text$mn:000054E4 ; Attributes: bp-based frame
.text$mn:000054E4
.text$mn:000054E4 ; public: struct std::_Container_proxy * __thiscall std::allocator<struct std::_Container_proxy>::allocate(unsigned int)
.text$mn:000054E4                 public ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:000054E4 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:000054E4                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+16p
.text$mn:000054E4                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+16p ...
.text$mn:000054E4
.text$mn:000054E4 var_4           = dword ptr -4
.text$mn:000054E4 arg_0           = dword ptr  8
.text$mn:000054E4
.text$mn:000054E4                 push    ebp
.text$mn:000054E5                 mov     ebp, esp
.text$mn:000054E7                 push    ecx
.text$mn:000054E8                 mov     [ebp+var_4], ecx
.text$mn:000054EB                 push    0
.text$mn:000054ED                 mov     eax, [ebp+arg_0]
.text$mn:000054F0                 push    eax
.text$mn:000054F1                 call    ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)
.text$mn:000054F6                 add     esp, 8
.text$mn:000054F9                 mov     esp, ebp
.text$mn:000054FB                 pop     ebp
.text$mn:000054FC                 retn    4
.text$mn:000054FC ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:000054FC
.text$mn:000054FC ; ---------------------------------------------------------------------------
.text$mn:000054FF                 align 10h
.text$mn:000054FF _text$mn        ends
.text$mn:000054FF
.text$mn:00005500 ; ===========================================================================
.text$mn:00005500
.text$mn:00005500 ; Segment type: Pure code
.text$mn:00005500 ; Segment permissions: Read/Execute
.text$mn:00005500 _text$mn        segment para public 'CODE' use32
.text$mn:00005500                 assume cs:_text$mn
.text$mn:00005500                 ;org 5500h
.text$mn:00005500 ; COMDAT (pick any)
.text$mn:00005500                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005500
.text$mn:00005500 ; =============== S U B R O U T I N E =======================================
.text$mn:00005500
.text$mn:00005500 ; Attributes: bp-based frame
.text$mn:00005500
.text$mn:00005500 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::allocate(unsigned int)
.text$mn:00005500                 public ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:00005500 ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:00005500                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::allocate(uint)+Ep
.text$mn:00005500
.text$mn:00005500 var_4           = dword ptr -4
.text$mn:00005500 arg_0           = dword ptr  8
.text$mn:00005500
.text$mn:00005500                 push    ebp
.text$mn:00005501                 mov     ebp, esp
.text$mn:00005503                 push    ecx
.text$mn:00005504                 mov     [ebp+var_4], ecx
.text$mn:00005507                 push    0
.text$mn:00005509                 mov     eax, [ebp+arg_0]
.text$mn:0000550C                 push    eax
.text$mn:0000550D                 call    ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z ; std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005512                 add     esp, 8
.text$mn:00005515                 mov     esp, ebp
.text$mn:00005517                 pop     ebp
.text$mn:00005518                 retn    4
.text$mn:00005518 ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:00005518
.text$mn:00005518 ; ---------------------------------------------------------------------------
.text$mn:0000551B                 align 4
.text$mn:0000551B _text$mn        ends
.text$mn:0000551B
.text$mn:0000551C ; ===========================================================================
.text$mn:0000551C
.text$mn:0000551C ; Segment type: Pure code
.text$mn:0000551C ; Segment permissions: Read/Execute
.text$mn:0000551C _text$mn        segment para public 'CODE' use32
.text$mn:0000551C                 assume cs:_text$mn
.text$mn:0000551C                 ;org 551Ch
.text$mn:0000551C ; COMDAT (pick any)
.text$mn:0000551C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000551C
.text$mn:0000551C ; =============== S U B R O U T I N E =======================================
.text$mn:0000551C
.text$mn:0000551C ; Attributes: bp-based frame
.text$mn:0000551C
.text$mn:0000551C ; public: wchar_t * __thiscall std::allocator<wchar_t>::allocate(unsigned int)
.text$mn:0000551C                 public ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
.text$mn:0000551C ?allocate@?$allocator@_W@std@@QAEPA_WI@Z proc near
.text$mn:0000551C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)+Ep
.text$mn:0000551C
.text$mn:0000551C var_4           = dword ptr -4
.text$mn:0000551C arg_0           = dword ptr  8
.text$mn:0000551C
.text$mn:0000551C                 push    ebp
.text$mn:0000551D                 mov     ebp, esp
.text$mn:0000551F                 push    ecx
.text$mn:00005520                 mov     [ebp+var_4], ecx
.text$mn:00005523                 push    0
.text$mn:00005525                 mov     eax, [ebp+arg_0]
.text$mn:00005528                 push    eax
.text$mn:00005529                 call    ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>(uint,wchar_t *)
.text$mn:0000552E                 add     esp, 8
.text$mn:00005531                 mov     esp, ebp
.text$mn:00005533                 pop     ebp
.text$mn:00005534                 retn    4
.text$mn:00005534 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z endp
.text$mn:00005534
.text$mn:00005534 ; ---------------------------------------------------------------------------
.text$mn:00005537                 align 4
.text$mn:00005537 _text$mn        ends
.text$mn:00005537
.text$mn:00005538 ; ===========================================================================
.text$mn:00005538
.text$mn:00005538 ; Segment type: Pure code
.text$mn:00005538 ; Segment permissions: Read/Execute
.text$mn:00005538 _text$mn        segment para public 'CODE' use32
.text$mn:00005538                 assume cs:_text$mn
.text$mn:00005538                 ;org 5538h
.text$mn:00005538 ; COMDAT (pick any)
.text$mn:00005538                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005538
.text$mn:00005538 ; =============== S U B R O U T I N E =======================================
.text$mn:00005538
.text$mn:00005538 ; Attributes: bp-based frame
.text$mn:00005538
.text$mn:00005538 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::append(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00005538                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
.text$mn:00005538 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z proc near
.text$mn:00005538                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Ep
.text$mn:00005538
.text$mn:00005538 var_4           = dword ptr -4
.text$mn:00005538 arg_0           = dword ptr  8
.text$mn:00005538
.text$mn:00005538                 push    ebp
.text$mn:00005539                 mov     ebp, esp
.text$mn:0000553B                 push    ecx
.text$mn:0000553C                 mov     [ebp+var_4], ecx
.text$mn:0000553F                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00005544                 push    eax
.text$mn:00005545                 push    0
.text$mn:00005547                 mov     ecx, [ebp+arg_0]
.text$mn:0000554A                 push    ecx
.text$mn:0000554B                 mov     ecx, [ebp+var_4]
.text$mn:0000554E                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00005553                 mov     esp, ebp
.text$mn:00005555                 pop     ebp
.text$mn:00005556                 retn    4
.text$mn:00005556 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z endp
.text$mn:00005556
.text$mn:00005556 ; ---------------------------------------------------------------------------
.text$mn:00005559                 align 4
.text$mn:00005559 _text$mn        ends
.text$mn:00005559
.text$mn:0000555C ; ===========================================================================
.text$mn:0000555C
.text$mn:0000555C ; Segment type: Pure code
.text$mn:0000555C ; Segment permissions: Read/Execute
.text$mn:0000555C _text$mn        segment para public 'CODE' use32
.text$mn:0000555C                 assume cs:_text$mn
.text$mn:0000555C                 ;org 555Ch
.text$mn:0000555C ; COMDAT (pick any)
.text$mn:0000555C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000555C
.text$mn:0000555C ; =============== S U B R O U T I N E =======================================
.text$mn:0000555C
.text$mn:0000555C ; Attributes: bp-based frame
.text$mn:0000555C
.text$mn:0000555C ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::append(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:0000555C                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:0000555C ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:0000555C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+16p
.text$mn:0000555C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+53p
.text$mn:0000555C
.text$mn:0000555C var_8           = dword ptr -8
.text$mn:0000555C var_4           = dword ptr -4
.text$mn:0000555C arg_0           = dword ptr  8
.text$mn:0000555C arg_4           = dword ptr  0Ch
.text$mn:0000555C arg_8           = dword ptr  10h
.text$mn:0000555C
.text$mn:0000555C                 push    ebp
.text$mn:0000555D                 mov     ebp, esp
.text$mn:0000555F                 sub     esp, 8
.text$mn:00005562                 mov     [ebp+var_4], ecx
.text$mn:00005565                 mov     ecx, [ebp+arg_0]
.text$mn:00005568                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000556D                 cmp     eax, [ebp+arg_4]
.text$mn:00005570                 jnb     short loc_557A
.text$mn:00005572                 mov     ecx, [ebp+var_4]
.text$mn:00005575                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000557A
.text$mn:0000557A loc_557A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:0000557A                 mov     ecx, [ebp+arg_0]
.text$mn:0000557D                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00005582                 sub     eax, [ebp+arg_4]
.text$mn:00005585                 mov     [ebp+var_8], eax
.text$mn:00005588                 mov     eax, [ebp+var_8]
.text$mn:0000558B                 cmp     eax, [ebp+arg_8]
.text$mn:0000558E                 jnb     short loc_5596
.text$mn:00005590                 mov     ecx, [ebp+var_8]
.text$mn:00005593                 mov     [ebp+arg_8], ecx
.text$mn:00005596
.text$mn:00005596 loc_5596:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:00005596                 mov     edx, [ebp+var_4]
.text$mn:00005599                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000559E                 sub     eax, [edx+14h]
.text$mn:000055A1                 cmp     eax, [ebp+arg_8]
.text$mn:000055A4                 ja      short loc_55AE
.text$mn:000055A6                 mov     ecx, [ebp+var_4]
.text$mn:000055A9                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:000055AE
.text$mn:000055AE loc_55AE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+48j
.text$mn:000055AE                 cmp     [ebp+arg_8], 0
.text$mn:000055B2                 jbe     short loc_560E
.text$mn:000055B4                 mov     ecx, [ebp+var_4]
.text$mn:000055B7                 mov     edx, [ecx+14h]
.text$mn:000055BA                 add     edx, [ebp+arg_8]
.text$mn:000055BD                 mov     [ebp+var_8], edx
.text$mn:000055C0                 push    0
.text$mn:000055C2                 mov     eax, [ebp+var_8]
.text$mn:000055C5                 push    eax
.text$mn:000055C6                 mov     ecx, [ebp+var_4]
.text$mn:000055C9                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:000055CE                 movzx   ecx, al
.text$mn:000055D1                 test    ecx, ecx
.text$mn:000055D3                 jz      short loc_560E
.text$mn:000055D5                 mov     edx, [ebp+arg_8]
.text$mn:000055D8                 push    edx             ; int
.text$mn:000055D9                 mov     ecx, [ebp+arg_0]
.text$mn:000055DC                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000055E1                 mov     ecx, [ebp+arg_4]
.text$mn:000055E4                 lea     edx, [eax+ecx*2]
.text$mn:000055E7                 push    edx             ; Src
.text$mn:000055E8                 mov     ecx, [ebp+var_4]
.text$mn:000055EB                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000055F0                 mov     ecx, [ebp+var_4]
.text$mn:000055F3                 mov     edx, [ecx+14h]
.text$mn:000055F6                 lea     eax, [eax+edx*2]
.text$mn:000055F9                 push    eax             ; Dst
.text$mn:000055FA                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:000055FF                 add     esp, 0Ch
.text$mn:00005602                 mov     ecx, [ebp+var_8]
.text$mn:00005605                 push    ecx
.text$mn:00005606                 mov     ecx, [ebp+var_4]
.text$mn:00005609                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000560E
.text$mn:0000560E loc_560E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+56j
.text$mn:0000560E                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+77j
.text$mn:0000560E                 mov     eax, [ebp+var_4]
.text$mn:00005611                 mov     esp, ebp
.text$mn:00005613                 pop     ebp
.text$mn:00005614                 retn    0Ch
.text$mn:00005614 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:00005614
.text$mn:00005614 ; ---------------------------------------------------------------------------
.text$mn:00005617                 align 4
.text$mn:00005617 _text$mn        ends
.text$mn:00005617
.text$mn:00005618 ; ===========================================================================
.text$mn:00005618
.text$mn:00005618 ; Segment type: Pure code
.text$mn:00005618 ; Segment permissions: Read/Execute
.text$mn:00005618 _text$mn        segment para public 'CODE' use32
.text$mn:00005618                 assume cs:_text$mn
.text$mn:00005618                 ;org 5618h
.text$mn:00005618 ; COMDAT (pick any)
.text$mn:00005618                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005618
.text$mn:00005618 ; =============== S U B R O U T I N E =======================================
.text$mn:00005618
.text$mn:00005618 ; Attributes: bp-based frame
.text$mn:00005618
.text$mn:00005618 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t *Str)
.text$mn:00005618                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:00005618 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:00005618                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)+Ep
.text$mn:00005618
.text$mn:00005618 var_4           = dword ptr -4
.text$mn:00005618 Str             = dword ptr  8
.text$mn:00005618
.text$mn:00005618                 push    ebp
.text$mn:00005619                 mov     ebp, esp
.text$mn:0000561B                 push    ecx
.text$mn:0000561C                 mov     [ebp+var_4], ecx
.text$mn:0000561F                 push    43Eh            ; unsigned int
.text$mn:00005624                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005629                 mov     eax, [ebp+Str]
.text$mn:0000562C                 push    eax             ; int
.text$mn:0000562D                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00005632                 add     esp, 0Ch
.text$mn:00005635                 mov     ecx, [ebp+Str]
.text$mn:00005638                 push    ecx             ; Str
.text$mn:00005639                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:0000563E                 add     esp, 4
.text$mn:00005641                 push    eax             ; int
.text$mn:00005642                 mov     edx, [ebp+Str]
.text$mn:00005645                 push    edx             ; Src
.text$mn:00005646                 mov     ecx, [ebp+var_4]
.text$mn:00005649                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)
.text$mn:0000564E                 mov     esp, ebp
.text$mn:00005650                 pop     ebp
.text$mn:00005651                 retn    4
.text$mn:00005651 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:00005651
.text$mn:00005651 _text$mn        ends
.text$mn:00005651
.text$mn:00005654 ; ===========================================================================
.text$mn:00005654
.text$mn:00005654 ; Segment type: Pure code
.text$mn:00005654 ; Segment permissions: Read/Execute
.text$mn:00005654 _text$mn        segment para public 'CODE' use32
.text$mn:00005654                 assume cs:_text$mn
.text$mn:00005654                 ;org 5654h
.text$mn:00005654 ; COMDAT (pick any)
.text$mn:00005654                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005654
.text$mn:00005654 ; =============== S U B R O U T I N E =======================================
.text$mn:00005654
.text$mn:00005654 ; Attributes: bp-based frame
.text$mn:00005654
.text$mn:00005654 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(void *Src, int)
.text$mn:00005654                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:00005654 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:00005654                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+31p
.text$mn:00005654
.text$mn:00005654 var_8           = dword ptr -8
.text$mn:00005654 var_4           = dword ptr -4
.text$mn:00005654 Src             = dword ptr  8
.text$mn:00005654 arg_4           = dword ptr  0Ch
.text$mn:00005654
.text$mn:00005654                 push    ebp
.text$mn:00005655                 mov     ebp, esp
.text$mn:00005657                 sub     esp, 8
.text$mn:0000565A                 mov     [ebp+var_4], ecx
.text$mn:0000565D                 cmp     [ebp+arg_4], 0
.text$mn:00005661                 jz      short loc_5679
.text$mn:00005663                 push    42Ah            ; unsigned int
.text$mn:00005668                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000566D                 mov     eax, [ebp+Src]
.text$mn:00005670                 push    eax             ; int
.text$mn:00005671                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00005676                 add     esp, 0Ch
.text$mn:00005679
.text$mn:00005679 loc_5679:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+Dj
.text$mn:00005679                 mov     ecx, [ebp+Src]
.text$mn:0000567C                 push    ecx
.text$mn:0000567D                 mov     ecx, [ebp+var_4]
.text$mn:00005680                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:00005685                 movzx   edx, al
.text$mn:00005688                 test    edx, edx
.text$mn:0000568A                 jz      short loc_56AE
.text$mn:0000568C                 mov     eax, [ebp+arg_4]
.text$mn:0000568F                 push    eax
.text$mn:00005690                 mov     ecx, [ebp+var_4]
.text$mn:00005693                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00005698                 mov     ecx, [ebp+Src]
.text$mn:0000569B                 sub     ecx, eax
.text$mn:0000569D                 sar     ecx, 1
.text$mn:0000569F                 push    ecx
.text$mn:000056A0                 mov     edx, [ebp+var_4]
.text$mn:000056A3                 push    edx
.text$mn:000056A4                 mov     ecx, [ebp+var_4]
.text$mn:000056A7                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:000056AC                 jmp     short loc_571F
.text$mn:000056AE ; ---------------------------------------------------------------------------
.text$mn:000056AE
.text$mn:000056AE loc_56AE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+36j
.text$mn:000056AE                 mov     eax, [ebp+var_4]
.text$mn:000056B1                 mov     ecx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:000056B7                 sub     ecx, [eax+14h]
.text$mn:000056BA                 cmp     ecx, [ebp+arg_4]
.text$mn:000056BD                 ja      short loc_56C7
.text$mn:000056BF                 mov     ecx, [ebp+var_4]
.text$mn:000056C2                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:000056C7
.text$mn:000056C7 loc_56C7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+69j
.text$mn:000056C7                 cmp     [ebp+arg_4], 0
.text$mn:000056CB                 jbe     short loc_571C
.text$mn:000056CD                 mov     edx, [ebp+var_4]
.text$mn:000056D0                 mov     eax, [edx+14h]
.text$mn:000056D3                 add     eax, [ebp+arg_4]
.text$mn:000056D6                 mov     [ebp+var_8], eax
.text$mn:000056D9                 push    0
.text$mn:000056DB                 mov     ecx, [ebp+var_8]
.text$mn:000056DE                 push    ecx
.text$mn:000056DF                 mov     ecx, [ebp+var_4]
.text$mn:000056E2                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:000056E7                 movzx   edx, al
.text$mn:000056EA                 test    edx, edx
.text$mn:000056EC                 jz      short loc_571C
.text$mn:000056EE                 mov     eax, [ebp+arg_4]
.text$mn:000056F1                 push    eax             ; int
.text$mn:000056F2                 mov     ecx, [ebp+Src]
.text$mn:000056F5                 push    ecx             ; Src
.text$mn:000056F6                 mov     ecx, [ebp+var_4]
.text$mn:000056F9                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000056FE                 mov     edx, [ebp+var_4]
.text$mn:00005701                 mov     ecx, [edx+14h]
.text$mn:00005704                 lea     edx, [eax+ecx*2]
.text$mn:00005707                 push    edx             ; Dst
.text$mn:00005708                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000570D                 add     esp, 0Ch
.text$mn:00005710                 mov     eax, [ebp+var_8]
.text$mn:00005713                 push    eax
.text$mn:00005714                 mov     ecx, [ebp+var_4]
.text$mn:00005717                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000571C
.text$mn:0000571C loc_571C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+77j
.text$mn:0000571C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+98j
.text$mn:0000571C                 mov     eax, [ebp+var_4]
.text$mn:0000571F
.text$mn:0000571F loc_571F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+58j
.text$mn:0000571F                 mov     esp, ebp
.text$mn:00005721                 pop     ebp
.text$mn:00005722                 retn    8
.text$mn:00005722 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:00005722
.text$mn:00005722 ; ---------------------------------------------------------------------------
.text$mn:00005725                 align 4
.text$mn:00005725 _text$mn        ends
.text$mn:00005725
.text$mn:00005728 ; ===========================================================================
.text$mn:00005728
.text$mn:00005728 ; Segment type: Pure code
.text$mn:00005728 ; Segment permissions: Read/Execute
.text$mn:00005728 _text$mn        segment para public 'CODE' use32
.text$mn:00005728                 assume cs:_text$mn
.text$mn:00005728                 ;org 5728h
.text$mn:00005728 ; COMDAT (pick any)
.text$mn:00005728                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005728
.text$mn:00005728 ; =============== S U B R O U T I N E =======================================
.text$mn:00005728
.text$mn:00005728 ; Attributes: bp-based frame
.text$mn:00005728
.text$mn:00005728 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::assign(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, unsigned int, unsigned int)
.text$mn:00005728                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00005728 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00005728                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+4Fp
.text$mn:00005728
.text$mn:00005728 Size            = dword ptr -8
.text$mn:00005728 var_4           = dword ptr -4
.text$mn:00005728 arg_0           = dword ptr  8
.text$mn:00005728 arg_4           = dword ptr  0Ch
.text$mn:00005728 arg_8           = dword ptr  10h
.text$mn:00005728
.text$mn:00005728                 push    ebp
.text$mn:00005729                 mov     ebp, esp
.text$mn:0000572B                 sub     esp, 8
.text$mn:0000572E                 mov     [ebp+var_4], ecx
.text$mn:00005731                 mov     ecx, [ebp+arg_0]
.text$mn:00005734                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:00005739                 cmp     eax, [ebp+arg_4]
.text$mn:0000573C                 jnb     short loc_5746
.text$mn:0000573E                 mov     ecx, [ebp+var_4]
.text$mn:00005741                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:00005746
.text$mn:00005746 loc_5746:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+14j
.text$mn:00005746                 mov     ecx, [ebp+arg_0]
.text$mn:00005749                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:0000574E                 sub     eax, [ebp+arg_4]
.text$mn:00005751                 mov     [ebp+Size], eax
.text$mn:00005754                 mov     eax, [ebp+arg_8]
.text$mn:00005757                 cmp     eax, [ebp+Size]
.text$mn:0000575A                 jnb     short loc_5762
.text$mn:0000575C                 mov     ecx, [ebp+arg_8]
.text$mn:0000575F                 mov     [ebp+Size], ecx
.text$mn:00005762
.text$mn:00005762 loc_5762:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+32j
.text$mn:00005762                 mov     edx, [ebp+var_4]
.text$mn:00005765                 cmp     edx, [ebp+arg_0]
.text$mn:00005768                 jnz     short loc_5789
.text$mn:0000576A                 mov     eax, [ebp+arg_4]
.text$mn:0000576D                 add     eax, [ebp+Size]
.text$mn:00005770                 push    eax
.text$mn:00005771                 mov     ecx, [ebp+var_4]
.text$mn:00005774                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)
.text$mn:00005779                 mov     ecx, [ebp+arg_4]
.text$mn:0000577C                 push    ecx
.text$mn:0000577D                 push    0
.text$mn:0000577F                 mov     ecx, [ebp+var_4]
.text$mn:00005782                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)
.text$mn:00005787                 jmp     short loc_57CB
.text$mn:00005789 ; ---------------------------------------------------------------------------
.text$mn:00005789
.text$mn:00005789 loc_5789:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+40j
.text$mn:00005789                 push    0
.text$mn:0000578B                 mov     edx, [ebp+Size]
.text$mn:0000578E                 push    edx
.text$mn:0000578F                 mov     ecx, [ebp+var_4]
.text$mn:00005792                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:00005797                 movzx   eax, al
.text$mn:0000579A                 test    eax, eax
.text$mn:0000579C                 jz      short loc_57CB
.text$mn:0000579E                 mov     ecx, [ebp+Size]
.text$mn:000057A1                 push    ecx             ; Size
.text$mn:000057A2                 mov     ecx, [ebp+arg_0]
.text$mn:000057A5                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000057AA                 add     eax, [ebp+arg_4]
.text$mn:000057AD                 push    eax             ; Src
.text$mn:000057AE                 mov     ecx, [ebp+var_4]
.text$mn:000057B1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000057B6                 push    eax             ; Dst
.text$mn:000057B7                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:000057BC                 add     esp, 0Ch
.text$mn:000057BF                 mov     edx, [ebp+Size]
.text$mn:000057C2                 push    edx
.text$mn:000057C3                 mov     ecx, [ebp+var_4]
.text$mn:000057C6                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:000057CB
.text$mn:000057CB loc_57CB:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Fj
.text$mn:000057CB                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+74j
.text$mn:000057CB                 mov     eax, [ebp+var_4]
.text$mn:000057CE                 mov     esp, ebp
.text$mn:000057D0                 pop     ebp
.text$mn:000057D1                 retn    0Ch
.text$mn:000057D1 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:000057D1
.text$mn:000057D1 _text$mn        ends
.text$mn:000057D1
.text$mn:000057D4 ; ===========================================================================
.text$mn:000057D4
.text$mn:000057D4 ; Segment type: Pure code
.text$mn:000057D4 ; Segment permissions: Read/Execute
.text$mn:000057D4 _text$mn        segment para public 'CODE' use32
.text$mn:000057D4                 assume cs:_text$mn
.text$mn:000057D4                 ;org 57D4h
.text$mn:000057D4 ; COMDAT (pick any)
.text$mn:000057D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000057D4
.text$mn:000057D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000057D4
.text$mn:000057D4 ; Attributes: bp-based frame
.text$mn:000057D4
.text$mn:000057D4 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char *Str)
.text$mn:000057D4                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
.text$mn:000057D4 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
.text$mn:000057D4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+53p
.text$mn:000057D4
.text$mn:000057D4 var_4           = dword ptr -4
.text$mn:000057D4 Str             = dword ptr  8
.text$mn:000057D4
.text$mn:000057D4                 push    ebp
.text$mn:000057D5                 mov     ebp, esp
.text$mn:000057D7                 push    ecx
.text$mn:000057D8                 mov     [ebp+var_4], ecx
.text$mn:000057DB                 push    490h            ; unsigned int
.text$mn:000057E0                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000057E5                 mov     eax, [ebp+Str]
.text$mn:000057E8                 push    eax             ; int
.text$mn:000057E9                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:000057EE                 add     esp, 0Ch
.text$mn:000057F1                 mov     ecx, [ebp+Str]
.text$mn:000057F4                 push    ecx             ; Str
.text$mn:000057F5                 call    ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length(char const *)
.text$mn:000057FA                 add     esp, 4
.text$mn:000057FD                 push    eax             ; Size
.text$mn:000057FE                 mov     edx, [ebp+Str]
.text$mn:00005801                 push    edx             ; Src
.text$mn:00005802                 mov     ecx, [ebp+var_4]
.text$mn:00005805                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)
.text$mn:0000580A                 mov     esp, ebp
.text$mn:0000580C                 pop     ebp
.text$mn:0000580D                 retn    4
.text$mn:0000580D ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z endp
.text$mn:0000580D
.text$mn:0000580D _text$mn        ends
.text$mn:0000580D
.text$mn:00005810 ; ===========================================================================
.text$mn:00005810
.text$mn:00005810 ; Segment type: Pure code
.text$mn:00005810 ; Segment permissions: Read/Execute
.text$mn:00005810 _text$mn        segment para public 'CODE' use32
.text$mn:00005810                 assume cs:_text$mn
.text$mn:00005810                 ;org 5810h
.text$mn:00005810 ; COMDAT (pick any)
.text$mn:00005810                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005810
.text$mn:00005810 ; =============== S U B R O U T I N E =======================================
.text$mn:00005810
.text$mn:00005810 ; Attributes: bp-based frame
.text$mn:00005810
.text$mn:00005810 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(void *Src, size_t Size)
.text$mn:00005810                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
.text$mn:00005810 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
.text$mn:00005810                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+31p
.text$mn:00005810
.text$mn:00005810 var_4           = dword ptr -4
.text$mn:00005810 Src             = dword ptr  8
.text$mn:00005810 Size            = dword ptr  0Ch
.text$mn:00005810
.text$mn:00005810                 push    ebp
.text$mn:00005811                 mov     ebp, esp
.text$mn:00005813                 push    ecx
.text$mn:00005814                 mov     [ebp+var_4], ecx
.text$mn:00005817                 cmp     [ebp+Size], 0
.text$mn:0000581B                 jz      short loc_5833
.text$mn:0000581D                 push    47Fh            ; unsigned int
.text$mn:00005822                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005827                 mov     eax, [ebp+Src]
.text$mn:0000582A                 push    eax             ; int
.text$mn:0000582B                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00005830                 add     esp, 0Ch
.text$mn:00005833
.text$mn:00005833 loc_5833:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+Bj
.text$mn:00005833                 mov     ecx, [ebp+Src]
.text$mn:00005836                 push    ecx
.text$mn:00005837                 mov     ecx, [ebp+var_4]
.text$mn:0000583A                 call    ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)
.text$mn:0000583F                 movzx   edx, al
.text$mn:00005842                 test    edx, edx
.text$mn:00005844                 jz      short loc_5866
.text$mn:00005846                 mov     eax, [ebp+Size]
.text$mn:00005849                 push    eax
.text$mn:0000584A                 mov     ecx, [ebp+var_4]
.text$mn:0000584D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00005852                 mov     ecx, [ebp+Src]
.text$mn:00005855                 sub     ecx, eax
.text$mn:00005857                 push    ecx
.text$mn:00005858                 mov     edx, [ebp+var_4]
.text$mn:0000585B                 push    edx
.text$mn:0000585C                 mov     ecx, [ebp+var_4]
.text$mn:0000585F                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:00005864                 jmp     short loc_58A3
.text$mn:00005866 ; ---------------------------------------------------------------------------
.text$mn:00005866
.text$mn:00005866 loc_5866:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+34j
.text$mn:00005866                 push    0
.text$mn:00005868                 mov     eax, [ebp+Size]
.text$mn:0000586B                 push    eax
.text$mn:0000586C                 mov     ecx, [ebp+var_4]
.text$mn:0000586F                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:00005874                 movzx   ecx, al
.text$mn:00005877                 test    ecx, ecx
.text$mn:00005879                 jz      short loc_58A0
.text$mn:0000587B                 mov     edx, [ebp+Size]
.text$mn:0000587E                 push    edx             ; Size
.text$mn:0000587F                 mov     eax, [ebp+Src]
.text$mn:00005882                 push    eax             ; Src
.text$mn:00005883                 mov     ecx, [ebp+var_4]
.text$mn:00005886                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000588B                 push    eax             ; Dst
.text$mn:0000588C                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00005891                 add     esp, 0Ch
.text$mn:00005894                 mov     ecx, [ebp+Size]
.text$mn:00005897                 push    ecx
.text$mn:00005898                 mov     ecx, [ebp+var_4]
.text$mn:0000589B                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:000058A0
.text$mn:000058A0 loc_58A0:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+69j
.text$mn:000058A0                 mov     eax, [ebp+var_4]
.text$mn:000058A3
.text$mn:000058A3 loc_58A3:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+54j
.text$mn:000058A3                 mov     esp, ebp
.text$mn:000058A5                 pop     ebp
.text$mn:000058A6                 retn    8
.text$mn:000058A6 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z endp
.text$mn:000058A6
.text$mn:000058A6 ; ---------------------------------------------------------------------------
.text$mn:000058A9                 align 4
.text$mn:000058A9 _text$mn        ends
.text$mn:000058A9
.text$mn:000058AC ; ===========================================================================
.text$mn:000058AC
.text$mn:000058AC ; Segment type: Pure code
.text$mn:000058AC ; Segment permissions: Read/Execute
.text$mn:000058AC _text$mn        segment para public 'CODE' use32
.text$mn:000058AC                 assume cs:_text$mn
.text$mn:000058AC                 ;org 58ACh
.text$mn:000058AC ; COMDAT (pick any)
.text$mn:000058AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000058AC
.text$mn:000058AC ; =============== S U B R O U T I N E =======================================
.text$mn:000058AC
.text$mn:000058AC ; Attributes: bp-based frame
.text$mn:000058AC
.text$mn:000058AC ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:000058AC                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:000058AC ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:000058AC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+6Bp
.text$mn:000058AC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint,std::allocator<wchar_t> const &)+54p ...
.text$mn:000058AC
.text$mn:000058AC var_8           = dword ptr -8
.text$mn:000058AC var_4           = dword ptr -4
.text$mn:000058AC arg_0           = dword ptr  8
.text$mn:000058AC arg_4           = dword ptr  0Ch
.text$mn:000058AC arg_8           = dword ptr  10h
.text$mn:000058AC
.text$mn:000058AC                 push    ebp
.text$mn:000058AD                 mov     ebp, esp
.text$mn:000058AF                 sub     esp, 8
.text$mn:000058B2                 mov     [ebp+var_4], ecx
.text$mn:000058B5                 mov     ecx, [ebp+arg_0]
.text$mn:000058B8                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:000058BD                 cmp     eax, [ebp+arg_4]
.text$mn:000058C0                 jnb     short loc_58CA
.text$mn:000058C2                 mov     ecx, [ebp+var_4]
.text$mn:000058C5                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:000058CA
.text$mn:000058CA loc_58CA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:000058CA                 mov     ecx, [ebp+arg_0]
.text$mn:000058CD                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:000058D2                 sub     eax, [ebp+arg_4]
.text$mn:000058D5                 mov     [ebp+var_8], eax
.text$mn:000058D8                 mov     eax, [ebp+arg_8]
.text$mn:000058DB                 cmp     eax, [ebp+var_8]
.text$mn:000058DE                 jnb     short loc_58E6
.text$mn:000058E0                 mov     ecx, [ebp+arg_8]
.text$mn:000058E3                 mov     [ebp+var_8], ecx
.text$mn:000058E6
.text$mn:000058E6 loc_58E6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:000058E6                 mov     edx, [ebp+var_4]
.text$mn:000058E9                 cmp     edx, [ebp+arg_0]
.text$mn:000058EC                 jnz     short loc_590D
.text$mn:000058EE                 mov     eax, [ebp+arg_4]
.text$mn:000058F1                 add     eax, [ebp+var_8]
.text$mn:000058F4                 push    eax
.text$mn:000058F5                 mov     ecx, [ebp+var_4]
.text$mn:000058F8                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)
.text$mn:000058FD                 mov     ecx, [ebp+arg_4]
.text$mn:00005900                 push    ecx
.text$mn:00005901                 push    0
.text$mn:00005903                 mov     ecx, [ebp+var_4]
.text$mn:00005906                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)
.text$mn:0000590B                 jmp     short loc_5952
.text$mn:0000590D ; ---------------------------------------------------------------------------
.text$mn:0000590D
.text$mn:0000590D loc_590D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+40j
.text$mn:0000590D                 push    0
.text$mn:0000590F                 mov     edx, [ebp+var_8]
.text$mn:00005912                 push    edx
.text$mn:00005913                 mov     ecx, [ebp+var_4]
.text$mn:00005916                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000591B                 movzx   eax, al
.text$mn:0000591E                 test    eax, eax
.text$mn:00005920                 jz      short loc_5952
.text$mn:00005922                 mov     ecx, [ebp+var_8]
.text$mn:00005925                 push    ecx             ; int
.text$mn:00005926                 mov     ecx, [ebp+arg_0]
.text$mn:00005929                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000592E                 mov     edx, [ebp+arg_4]
.text$mn:00005931                 lea     eax, [eax+edx*2]
.text$mn:00005934                 push    eax             ; Src
.text$mn:00005935                 mov     ecx, [ebp+var_4]
.text$mn:00005938                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000593D                 push    eax             ; Dst
.text$mn:0000593E                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00005943                 add     esp, 0Ch
.text$mn:00005946                 mov     ecx, [ebp+var_8]
.text$mn:00005949                 push    ecx
.text$mn:0000594A                 mov     ecx, [ebp+var_4]
.text$mn:0000594D                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00005952
.text$mn:00005952 loc_5952:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Fj
.text$mn:00005952                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+74j
.text$mn:00005952                 mov     eax, [ebp+var_4]
.text$mn:00005955                 mov     esp, ebp
.text$mn:00005957                 pop     ebp
.text$mn:00005958                 retn    0Ch
.text$mn:00005958 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:00005958
.text$mn:00005958 ; ---------------------------------------------------------------------------
.text$mn:0000595B                 align 4
.text$mn:0000595B _text$mn        ends
.text$mn:0000595B
.text$mn:0000595C ; ===========================================================================
.text$mn:0000595C
.text$mn:0000595C ; Segment type: Pure code
.text$mn:0000595C ; Segment permissions: Read/Execute
.text$mn:0000595C _text$mn        segment para public 'CODE' use32
.text$mn:0000595C                 assume cs:_text$mn
.text$mn:0000595C                 ;org 595Ch
.text$mn:0000595C ; COMDAT (pick any)
.text$mn:0000595C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000595C
.text$mn:0000595C ; =============== S U B R O U T I N E =======================================
.text$mn:0000595C
.text$mn:0000595C ; Attributes: bp-based frame
.text$mn:0000595C
.text$mn:0000595C ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t *Str)
.text$mn:0000595C                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:0000595C ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:0000595C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+53p
.text$mn:0000595C
.text$mn:0000595C var_4           = dword ptr -4
.text$mn:0000595C Str             = dword ptr  8
.text$mn:0000595C
.text$mn:0000595C                 push    ebp
.text$mn:0000595D                 mov     ebp, esp
.text$mn:0000595F                 push    ecx
.text$mn:00005960                 mov     [ebp+var_4], ecx
.text$mn:00005963                 push    490h            ; unsigned int
.text$mn:00005968                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000596D                 mov     eax, [ebp+Str]
.text$mn:00005970                 push    eax             ; int
.text$mn:00005971                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00005976                 add     esp, 0Ch
.text$mn:00005979                 mov     ecx, [ebp+Str]
.text$mn:0000597C                 push    ecx             ; Str
.text$mn:0000597D                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:00005982                 add     esp, 4
.text$mn:00005985                 push    eax             ; int
.text$mn:00005986                 mov     edx, [ebp+Str]
.text$mn:00005989                 push    edx             ; Src
.text$mn:0000598A                 mov     ecx, [ebp+var_4]
.text$mn:0000598D                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)
.text$mn:00005992                 mov     esp, ebp
.text$mn:00005994                 pop     ebp
.text$mn:00005995                 retn    4
.text$mn:00005995 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:00005995
.text$mn:00005995 _text$mn        ends
.text$mn:00005995
.text$mn:00005998 ; ===========================================================================
.text$mn:00005998
.text$mn:00005998 ; Segment type: Pure code
.text$mn:00005998 ; Segment permissions: Read/Execute
.text$mn:00005998 _text$mn        segment para public 'CODE' use32
.text$mn:00005998                 assume cs:_text$mn
.text$mn:00005998                 ;org 5998h
.text$mn:00005998 ; COMDAT (pick any)
.text$mn:00005998                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005998
.text$mn:00005998 ; =============== S U B R O U T I N E =======================================
.text$mn:00005998
.text$mn:00005998 ; Attributes: bp-based frame
.text$mn:00005998
.text$mn:00005998 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(void *Src, int)
.text$mn:00005998                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:00005998 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:00005998                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+31p
.text$mn:00005998
.text$mn:00005998 var_4           = dword ptr -4
.text$mn:00005998 Src             = dword ptr  8
.text$mn:00005998 arg_4           = dword ptr  0Ch
.text$mn:00005998
.text$mn:00005998                 push    ebp
.text$mn:00005999                 mov     ebp, esp
.text$mn:0000599B                 push    ecx
.text$mn:0000599C                 mov     [ebp+var_4], ecx
.text$mn:0000599F                 cmp     [ebp+arg_4], 0
.text$mn:000059A3                 jz      short loc_59BB
.text$mn:000059A5                 push    47Fh            ; unsigned int
.text$mn:000059AA                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000059AF                 mov     eax, [ebp+Src]
.text$mn:000059B2                 push    eax             ; int
.text$mn:000059B3                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:000059B8                 add     esp, 0Ch
.text$mn:000059BB
.text$mn:000059BB loc_59BB:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+Bj
.text$mn:000059BB                 mov     ecx, [ebp+Src]
.text$mn:000059BE                 push    ecx
.text$mn:000059BF                 mov     ecx, [ebp+var_4]
.text$mn:000059C2                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:000059C7                 movzx   edx, al
.text$mn:000059CA                 test    edx, edx
.text$mn:000059CC                 jz      short loc_59F0
.text$mn:000059CE                 mov     eax, [ebp+arg_4]
.text$mn:000059D1                 push    eax
.text$mn:000059D2                 mov     ecx, [ebp+var_4]
.text$mn:000059D5                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000059DA                 mov     ecx, [ebp+Src]
.text$mn:000059DD                 sub     ecx, eax
.text$mn:000059DF                 sar     ecx, 1
.text$mn:000059E1                 push    ecx
.text$mn:000059E2                 mov     edx, [ebp+var_4]
.text$mn:000059E5                 push    edx
.text$mn:000059E6                 mov     ecx, [ebp+var_4]
.text$mn:000059E9                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:000059EE                 jmp     short loc_5A2D
.text$mn:000059F0 ; ---------------------------------------------------------------------------
.text$mn:000059F0
.text$mn:000059F0 loc_59F0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+34j
.text$mn:000059F0                 push    0
.text$mn:000059F2                 mov     eax, [ebp+arg_4]
.text$mn:000059F5                 push    eax
.text$mn:000059F6                 mov     ecx, [ebp+var_4]
.text$mn:000059F9                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:000059FE                 movzx   ecx, al
.text$mn:00005A01                 test    ecx, ecx
.text$mn:00005A03                 jz      short loc_5A2A
.text$mn:00005A05                 mov     edx, [ebp+arg_4]
.text$mn:00005A08                 push    edx             ; int
.text$mn:00005A09                 mov     eax, [ebp+Src]
.text$mn:00005A0C                 push    eax             ; Src
.text$mn:00005A0D                 mov     ecx, [ebp+var_4]
.text$mn:00005A10                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00005A15                 push    eax             ; Dst
.text$mn:00005A16                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00005A1B                 add     esp, 0Ch
.text$mn:00005A1E                 mov     ecx, [ebp+arg_4]
.text$mn:00005A21                 push    ecx
.text$mn:00005A22                 mov     ecx, [ebp+var_4]
.text$mn:00005A25                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00005A2A
.text$mn:00005A2A loc_5A2A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+6Bj
.text$mn:00005A2A                 mov     eax, [ebp+var_4]
.text$mn:00005A2D
.text$mn:00005A2D loc_5A2D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+56j
.text$mn:00005A2D                 mov     esp, ebp
.text$mn:00005A2F                 pop     ebp
.text$mn:00005A30                 retn    8
.text$mn:00005A30 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:00005A30
.text$mn:00005A30 ; ---------------------------------------------------------------------------
.text$mn:00005A33                 align 4
.text$mn:00005A33 _text$mn        ends
.text$mn:00005A33
.text$mn:00005A34 ; ===========================================================================
.text$mn:00005A34
.text$mn:00005A34 ; Segment type: Pure code
.text$mn:00005A34 ; Segment permissions: Read/Execute
.text$mn:00005A34 _text$mn        segment para public 'CODE' use32
.text$mn:00005A34                 assume cs:_text$mn
.text$mn:00005A34                 ;org 5A34h
.text$mn:00005A34 ; COMDAT (pick any)
.text$mn:00005A34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005A34
.text$mn:00005A34 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A34
.text$mn:00005A34 ; Attributes: bp-based frame
.text$mn:00005A34
.text$mn:00005A34 ; public: static void __cdecl std::char_traits<char>::assign(char &, char const &)
.text$mn:00005A34                 public ?assign@?$char_traits@D@std@@SAXAADABD@Z
.text$mn:00005A34 ?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
.text$mn:00005A34                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+26p
.text$mn:00005A34
.text$mn:00005A34 arg_0           = dword ptr  8
.text$mn:00005A34 arg_4           = dword ptr  0Ch
.text$mn:00005A34
.text$mn:00005A34                 push    ebp
.text$mn:00005A35                 mov     ebp, esp
.text$mn:00005A37                 mov     eax, [ebp+arg_0]
.text$mn:00005A3A                 mov     ecx, [ebp+arg_4]
.text$mn:00005A3D                 mov     dl, [ecx]
.text$mn:00005A3F                 mov     [eax], dl
.text$mn:00005A41                 pop     ebp
.text$mn:00005A42                 retn
.text$mn:00005A42 ?assign@?$char_traits@D@std@@SAXAADABD@Z endp
.text$mn:00005A42
.text$mn:00005A42 ; ---------------------------------------------------------------------------
.text$mn:00005A43                 align 4
.text$mn:00005A43 _text$mn        ends
.text$mn:00005A43
.text$mn:00005A44 ; ===========================================================================
.text$mn:00005A44
.text$mn:00005A44 ; Segment type: Pure code
.text$mn:00005A44 ; Segment permissions: Read/Execute
.text$mn:00005A44 _text$mn        segment para public 'CODE' use32
.text$mn:00005A44                 assume cs:_text$mn
.text$mn:00005A44                 ;org 5A44h
.text$mn:00005A44 ; COMDAT (pick any)
.text$mn:00005A44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005A44
.text$mn:00005A44 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A44
.text$mn:00005A44 ; Attributes: bp-based frame
.text$mn:00005A44
.text$mn:00005A44 ; public: static void __cdecl std::char_traits<wchar_t>::assign(wchar_t &, wchar_t const &)
.text$mn:00005A44                 public ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
.text$mn:00005A44 ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z proc near
.text$mn:00005A44                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)+2Bp
.text$mn:00005A44
.text$mn:00005A44 arg_0           = dword ptr  8
.text$mn:00005A44 arg_4           = dword ptr  0Ch
.text$mn:00005A44
.text$mn:00005A44                 push    ebp
.text$mn:00005A45                 mov     ebp, esp
.text$mn:00005A47                 mov     eax, [ebp+arg_0]
.text$mn:00005A4A                 mov     ecx, [ebp+arg_4]
.text$mn:00005A4D                 mov     dx, [ecx]
.text$mn:00005A50                 mov     [eax], dx
.text$mn:00005A53                 pop     ebp
.text$mn:00005A54                 retn
.text$mn:00005A54 ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z endp
.text$mn:00005A54
.text$mn:00005A54 ; ---------------------------------------------------------------------------
.text$mn:00005A55                 align 4
.text$mn:00005A55 _text$mn        ends
.text$mn:00005A55
.text$mn:00005A58 ; ===========================================================================
.text$mn:00005A58
.text$mn:00005A58 ; Segment type: Pure code
.text$mn:00005A58 ; Segment permissions: Read/Execute
.text$mn:00005A58 _text$mn        segment para public 'CODE' use32
.text$mn:00005A58                 assume cs:_text$mn
.text$mn:00005A58                 ;org 5A58h
.text$mn:00005A58 ; COMDAT (pick any)
.text$mn:00005A58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005A58
.text$mn:00005A58 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A58
.text$mn:00005A58 ; Attributes: bp-based frame
.text$mn:00005A58
.text$mn:00005A58 ; public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>> __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::begin(void)
.text$mn:00005A58                 public ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:00005A58 ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$mn:00005A58                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+A9p
.text$mn:00005A58                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+AFp ...
.text$mn:00005A58
.text$mn:00005A58 var_14          = dword ptr -14h
.text$mn:00005A58 var_10          = dword ptr -10h
.text$mn:00005A58 var_C           = dword ptr -0Ch
.text$mn:00005A58 var_4           = dword ptr -4
.text$mn:00005A58 arg_0           = dword ptr  8
.text$mn:00005A58
.text$mn:00005A58                 push    ebp
.text$mn:00005A59                 mov     ebp, esp
.text$mn:00005A5B                 push    0FFFFFFFFh
.text$mn:00005A5D                 push    offset __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:00005A62                 mov     eax, large fs:0
.text$mn:00005A68                 push    eax
.text$mn:00005A69                 sub     esp, 8
.text$mn:00005A6C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005A71                 xor     eax, ebp
.text$mn:00005A73                 push    eax
.text$mn:00005A74                 lea     eax, [ebp+var_C]
.text$mn:00005A77                 mov     large fs:0, eax
.text$mn:00005A7D                 mov     [ebp+var_10], ecx
.text$mn:00005A80                 mov     [ebp+var_14], 0
.text$mn:00005A87                 mov     eax, [ebp+var_10]
.text$mn:00005A8A                 push    eax             ; struct std::_Container_base12 *
.text$mn:00005A8B                 mov     ecx, [ebp+var_10]
.text$mn:00005A8E                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00005A93                 push    eax             ; int
.text$mn:00005A94                 mov     ecx, [ebp+arg_0]
.text$mn:00005A97                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)
.text$mn:00005A9C                 mov     [ebp+var_4], 0
.text$mn:00005AA3                 mov     ecx, [ebp+var_14]
.text$mn:00005AA6                 or      ecx, 1
.text$mn:00005AA9                 mov     [ebp+var_14], ecx
.text$mn:00005AAC                 mov     eax, [ebp+arg_0]
.text$mn:00005AAF                 mov     ecx, [ebp+var_C]
.text$mn:00005AB2                 mov     large fs:0, ecx
.text$mn:00005AB9                 pop     ecx
.text$mn:00005ABA                 mov     esp, ebp
.text$mn:00005ABC                 pop     ebp
.text$mn:00005ABD                 retn    4
.text$mn:00005ABD ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$mn:00005ABD
.text$mn:00005ABD _text$mn        ends
.text$mn:00005ABD
.text$x:00005AC0 ; ===========================================================================
.text$x:00005AC0
.text$x:00005AC0 ; Segment type: Pure code
.text$x:00005AC0 ; Segment permissions: Read/Execute
.text$x:00005AC0 _text$x         segment para public 'CODE' use32
.text$x:00005AC0                 assume cs:_text$x
.text$x:00005AC0                 ;org 5AC0h
.text$x:00005AC0 ; COMDAT (pick associative to section at 5A58)
.text$x:00005AC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005AC0
.text$x:00005AC0 ; =============== S U B R O U T I N E =======================================
.text$x:00005AC0
.text$x:00005AC0
.text$x:00005AC0 __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 proc near
.text$x:00005AC0                                         ; DATA XREF: .xdata$x:0000793Co
.text$x:00005AC0                 mov     eax, [ebp-14h]
.text$x:00005AC3                 and     eax, 1
.text$x:00005AC6                 jz      $LN4
.text$x:00005ACC                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:00005AD0                 mov     ecx, [ebp+8]
.text$x:00005AD3                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00005AD8 ; ---------------------------------------------------------------------------
.text$x:00005AD8
.text$x:00005AD8 $LN4:                                   ; CODE XREF: __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0+6j
.text$x:00005AD8                 retn
.text$x:00005AD8 __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 endp
.text$x:00005AD8
.text$x:00005AD9
.text$x:00005AD9 ; =============== S U B R O U T I N E =======================================
.text$x:00005AD9
.text$x:00005AD9
.text$x:00005AD9 __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$x:00005AD9                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)+5o
.text$x:00005AD9
.text$x:00005AD9 arg_4           = dword ptr  8
.text$x:00005AD9
.text$x:00005AD9                 mov     edx, [esp+arg_4]
.text$x:00005ADD                 lea     eax, [edx+0Ch]
.text$x:00005AE0                 mov     ecx, [edx-0Ch]
.text$x:00005AE3                 xor     ecx, eax
.text$x:00005AE5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005AEA                 mov     eax, offset __ehfuncinfo$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$x:00005AEF                 jmp     ___CxxFrameHandler3
.text$x:00005AEF __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$x:00005AEF
.text$x:00005AEF _text$x         ends
.text$x:00005AEF
.text$mn:00005AF4 ; ===========================================================================
.text$mn:00005AF4
.text$mn:00005AF4 ; Segment type: Pure code
.text$mn:00005AF4 ; Segment permissions: Read/Execute
.text$mn:00005AF4 _text$mn        segment para public 'CODE' use32
.text$mn:00005AF4                 assume cs:_text$mn
.text$mn:00005AF4                 ;org 5AF4h
.text$mn:00005AF4 ; COMDAT (pick any)
.text$mn:00005AF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005AF4
.text$mn:00005AF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005AF4
.text$mn:00005AF4 ; Attributes: bp-based frame
.text$mn:00005AF4
.text$mn:00005AF4 ; public: wchar_t const * __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::c_str(void)const
.text$mn:00005AF4                 public ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
.text$mn:00005AF4 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ proc near
.text$mn:00005AF4                                         ; CODE XREF: FileDialog::setExtFilter(wchar_t const *,wchar_t const *,...)+DEp
.text$mn:00005AF4                                         ; FileDialog::setExtsFilter(wchar_t const *,wchar_t const *)+1B5p ...
.text$mn:00005AF4
.text$mn:00005AF4 var_4           = dword ptr -4
.text$mn:00005AF4
.text$mn:00005AF4                 push    ebp
.text$mn:00005AF5                 mov     ebp, esp
.text$mn:00005AF7                 push    ecx
.text$mn:00005AF8                 mov     [ebp+var_4], ecx
.text$mn:00005AFB                 mov     ecx, [ebp+var_4]
.text$mn:00005AFE                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00005B03                 mov     esp, ebp
.text$mn:00005B05                 pop     ebp
.text$mn:00005B06                 retn
.text$mn:00005B06 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ endp
.text$mn:00005B06
.text$mn:00005B06 ; ---------------------------------------------------------------------------
.text$mn:00005B07                 align 4
.text$mn:00005B07 _text$mn        ends
.text$mn:00005B07
.text$mn:00005B08 ; ===========================================================================
.text$mn:00005B08
.text$mn:00005B08 ; Segment type: Pure code
.text$mn:00005B08 ; Segment permissions: Read/Execute
.text$mn:00005B08 _text$mn        segment para public 'CODE' use32
.text$mn:00005B08                 assume cs:_text$mn
.text$mn:00005B08                 ;org 5B08h
.text$mn:00005B08 ; COMDAT (pick any)
.text$mn:00005B08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005B08
.text$mn:00005B08 ; =============== S U B R O U T I N E =======================================
.text$mn:00005B08
.text$mn:00005B08 ; Attributes: bp-based frame
.text$mn:00005B08
.text$mn:00005B08 ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::capacity(void)const
.text$mn:00005B08                 public ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:00005B08 ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:00005B08                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+Cp
.text$mn:00005B08
.text$mn:00005B08 var_4           = dword ptr -4
.text$mn:00005B08
.text$mn:00005B08                 push    ebp
.text$mn:00005B09                 mov     ebp, esp
.text$mn:00005B0B                 push    ecx
.text$mn:00005B0C                 mov     [ebp+var_4], ecx
.text$mn:00005B0F                 mov     eax, [ebp+var_4]
.text$mn:00005B12                 mov     ecx, [ebp+var_4]
.text$mn:00005B15                 mov     eax, [eax+0Ch]
.text$mn:00005B18                 sub     eax, [ecx+4]
.text$mn:00005B1B                 cdq
.text$mn:00005B1C                 mov     ecx, 1Ch
.text$mn:00005B21                 idiv    ecx
.text$mn:00005B23                 mov     esp, ebp
.text$mn:00005B25                 pop     ebp
.text$mn:00005B26                 retn
.text$mn:00005B26 ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:00005B26
.text$mn:00005B26 ; ---------------------------------------------------------------------------
.text$mn:00005B27                 align 4
.text$mn:00005B27 _text$mn        ends
.text$mn:00005B27
.text$mn:00005B28 ; ===========================================================================
.text$mn:00005B28
.text$mn:00005B28 ; Segment type: Pure code
.text$mn:00005B28 ; Segment permissions: Read/Execute
.text$mn:00005B28 _text$mn        segment para public 'CODE' use32
.text$mn:00005B28                 assume cs:_text$mn
.text$mn:00005B28                 ;org 5B28h
.text$mn:00005B28 ; COMDAT (pick any)
.text$mn:00005B28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005B28
.text$mn:00005B28 ; =============== S U B R O U T I N E =======================================
.text$mn:00005B28
.text$mn:00005B28 ; Attributes: bp-based frame
.text$mn:00005B28
.text$mn:00005B28 ; const struct std::error_category *__thiscall std::error_code::category(std::error_code *__hidden this)
.text$mn:00005B28                 public ?category@error_code@std@@QBEABVerror_category@2@XZ
.text$mn:00005B28 ?category@error_code@std@@QBEABVerror_category@2@XZ proc near
.text$mn:00005B28                                         ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+Cp
.text$mn:00005B28
.text$mn:00005B28 var_4           = dword ptr -4
.text$mn:00005B28
.text$mn:00005B28                 push    ebp
.text$mn:00005B29                 mov     ebp, esp
.text$mn:00005B2B                 push    ecx
.text$mn:00005B2C                 mov     [ebp+var_4], ecx
.text$mn:00005B2F                 mov     eax, [ebp+var_4]
.text$mn:00005B32                 mov     eax, [eax+4]
.text$mn:00005B35                 mov     esp, ebp
.text$mn:00005B37                 pop     ebp
.text$mn:00005B38                 retn
.text$mn:00005B38 ?category@error_code@std@@QBEABVerror_category@2@XZ endp
.text$mn:00005B38
.text$mn:00005B38 ; ---------------------------------------------------------------------------
.text$mn:00005B39                 align 4
.text$mn:00005B39 _text$mn        ends
.text$mn:00005B39
.text$mn:00005B3C ; ===========================================================================
.text$mn:00005B3C
.text$mn:00005B3C ; Segment type: Pure code
.text$mn:00005B3C ; Segment permissions: Read/Execute
.text$mn:00005B3C _text$mn        segment para public 'CODE' use32
.text$mn:00005B3C                 assume cs:_text$mn
.text$mn:00005B3C                 ;org 5B3Ch
.text$mn:00005B3C ; COMDAT (pick any)
.text$mn:00005B3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005B3C
.text$mn:00005B3C ; =============== S U B R O U T I N E =======================================
.text$mn:00005B3C
.text$mn:00005B3C ; Attributes: bp-based frame
.text$mn:00005B3C
.text$mn:00005B3C ; const struct std::error_category *__thiscall std::error_condition::category(std::error_condition *__hidden this)
.text$mn:00005B3C                 public ?category@error_condition@std@@QBEABVerror_category@2@XZ
.text$mn:00005B3C ?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
.text$mn:00005B3C                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+Dp
.text$mn:00005B3C                                         ; std::error_condition::operator==(std::error_condition const &)+16p
.text$mn:00005B3C
.text$mn:00005B3C var_4           = dword ptr -4
.text$mn:00005B3C
.text$mn:00005B3C                 push    ebp
.text$mn:00005B3D                 mov     ebp, esp
.text$mn:00005B3F                 push    ecx
.text$mn:00005B40                 mov     [ebp+var_4], ecx
.text$mn:00005B43                 mov     eax, [ebp+var_4]
.text$mn:00005B46                 mov     eax, [eax+4]
.text$mn:00005B49                 mov     esp, ebp
.text$mn:00005B4B                 pop     ebp
.text$mn:00005B4C                 retn
.text$mn:00005B4C ?category@error_condition@std@@QBEABVerror_category@2@XZ endp
.text$mn:00005B4C
.text$mn:00005B4C ; ---------------------------------------------------------------------------
.text$mn:00005B4D                 align 10h
.text$mn:00005B4D _text$mn        ends
.text$mn:00005B4D
.text$mn:00005B50 ; ===========================================================================
.text$mn:00005B50
.text$mn:00005B50 ; Segment type: Pure code
.text$mn:00005B50 ; Segment permissions: Read/Execute
.text$mn:00005B50 _text$mn        segment para public 'CODE' use32
.text$mn:00005B50                 assume cs:_text$mn
.text$mn:00005B50                 ;org 5B50h
.text$mn:00005B50 ; COMDAT (pick any)
.text$mn:00005B50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005B50
.text$mn:00005B50 ; =============== S U B R O U T I N E =======================================
.text$mn:00005B50
.text$mn:00005B50 ; Attributes: bp-based frame
.text$mn:00005B50
.text$mn:00005B50 ; public: int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::compare(unsigned int, unsigned int, wchar_t const *, unsigned int)const
.text$mn:00005B50                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z
.text$mn:00005B50 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z proc near
.text$mn:00005B50                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t const *)+3Ap
.text$mn:00005B50
.text$mn:00005B50 var_18          = dword ptr -18h
.text$mn:00005B50 var_14          = dword ptr -14h
.text$mn:00005B50 var_10          = dword ptr -10h
.text$mn:00005B50 var_C           = dword ptr -0Ch
.text$mn:00005B50 var_8           = dword ptr -8
.text$mn:00005B50 var_4           = dword ptr -4
.text$mn:00005B50 arg_0           = dword ptr  8
.text$mn:00005B50 arg_4           = dword ptr  0Ch
.text$mn:00005B50 arg_8           = dword ptr  10h
.text$mn:00005B50 arg_C           = dword ptr  14h
.text$mn:00005B50
.text$mn:00005B50                 push    ebp
.text$mn:00005B51                 mov     ebp, esp
.text$mn:00005B53                 sub     esp, 18h
.text$mn:00005B56                 mov     [ebp+var_4], ecx
.text$mn:00005B59                 cmp     [ebp+arg_C], 0
.text$mn:00005B5D                 jz      short loc_5B75
.text$mn:00005B5F                 push    87Dh            ; unsigned int
.text$mn:00005B64                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005B69                 mov     eax, [ebp+arg_8]
.text$mn:00005B6C                 push    eax             ; int
.text$mn:00005B6D                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00005B72                 add     esp, 0Ch
.text$mn:00005B75
.text$mn:00005B75 loc_5B75:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+Dj
.text$mn:00005B75                 mov     ecx, [ebp+var_4]
.text$mn:00005B78                 mov     edx, [ecx+14h]
.text$mn:00005B7B                 cmp     edx, [ebp+arg_0]
.text$mn:00005B7E                 jnb     short loc_5B88
.text$mn:00005B80                 mov     ecx, [ebp+var_4]
.text$mn:00005B83                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00005B88
.text$mn:00005B88 loc_5B88:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+2Ej
.text$mn:00005B88                 mov     eax, [ebp+var_4]
.text$mn:00005B8B                 mov     ecx, [eax+14h]
.text$mn:00005B8E                 sub     ecx, [ebp+arg_0]
.text$mn:00005B91                 cmp     ecx, [ebp+arg_4]
.text$mn:00005B94                 jnb     short loc_5BA2
.text$mn:00005B96                 mov     edx, [ebp+var_4]
.text$mn:00005B99                 mov     eax, [edx+14h]
.text$mn:00005B9C                 sub     eax, [ebp+arg_0]
.text$mn:00005B9F                 mov     [ebp+arg_4], eax
.text$mn:00005BA2
.text$mn:00005BA2 loc_5BA2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+44j
.text$mn:00005BA2                 mov     ecx, [ebp+arg_4]
.text$mn:00005BA5                 cmp     ecx, [ebp+arg_C]
.text$mn:00005BA8                 jnb     short loc_5BB2
.text$mn:00005BAA                 mov     edx, [ebp+arg_4]
.text$mn:00005BAD                 mov     [ebp+var_8], edx
.text$mn:00005BB0                 jmp     short loc_5BB8
.text$mn:00005BB2 ; ---------------------------------------------------------------------------
.text$mn:00005BB2
.text$mn:00005BB2 loc_5BB2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+58j
.text$mn:00005BB2                 mov     eax, [ebp+arg_C]
.text$mn:00005BB5                 mov     [ebp+var_8], eax
.text$mn:00005BB8
.text$mn:00005BB8 loc_5BB8:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+60j
.text$mn:00005BB8                 mov     ecx, [ebp+var_8]
.text$mn:00005BBB                 push    ecx
.text$mn:00005BBC                 mov     edx, [ebp+arg_8]
.text$mn:00005BBF                 push    edx
.text$mn:00005BC0                 mov     ecx, [ebp+var_4]
.text$mn:00005BC3                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00005BC8                 mov     ecx, [ebp+arg_0]
.text$mn:00005BCB                 lea     edx, [eax+ecx*2]
.text$mn:00005BCE                 push    edx
.text$mn:00005BCF                 call    ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z ; std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)
.text$mn:00005BD4                 add     esp, 0Ch
.text$mn:00005BD7                 mov     [ebp+var_C], eax
.text$mn:00005BDA                 cmp     [ebp+var_C], 0
.text$mn:00005BDE                 jz      short loc_5BE8
.text$mn:00005BE0                 mov     eax, [ebp+var_C]
.text$mn:00005BE3                 mov     [ebp+var_18], eax
.text$mn:00005BE6                 jmp     short loc_5C1D
.text$mn:00005BE8 ; ---------------------------------------------------------------------------
.text$mn:00005BE8
.text$mn:00005BE8 loc_5BE8:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+8Ej
.text$mn:00005BE8                 mov     ecx, [ebp+arg_4]
.text$mn:00005BEB                 cmp     ecx, [ebp+arg_C]
.text$mn:00005BEE                 jnb     short loc_5BF9
.text$mn:00005BF0                 mov     [ebp+var_14], 0FFFFFFFFh
.text$mn:00005BF7                 jmp     short loc_5C17
.text$mn:00005BF9 ; ---------------------------------------------------------------------------
.text$mn:00005BF9
.text$mn:00005BF9 loc_5BF9:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+9Ej
.text$mn:00005BF9                 mov     edx, [ebp+arg_4]
.text$mn:00005BFC                 cmp     edx, [ebp+arg_C]
.text$mn:00005BFF                 jnz     short loc_5C0A
.text$mn:00005C01                 mov     [ebp+var_10], 0
.text$mn:00005C08                 jmp     short loc_5C11
.text$mn:00005C0A ; ---------------------------------------------------------------------------
.text$mn:00005C0A
.text$mn:00005C0A loc_5C0A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+AFj
.text$mn:00005C0A                 mov     [ebp+var_10], 1
.text$mn:00005C11
.text$mn:00005C11 loc_5C11:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+B8j
.text$mn:00005C11                 mov     eax, [ebp+var_10]
.text$mn:00005C14                 mov     [ebp+var_14], eax
.text$mn:00005C17
.text$mn:00005C17 loc_5C17:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+A7j
.text$mn:00005C17                 mov     ecx, [ebp+var_14]
.text$mn:00005C1A                 mov     [ebp+var_18], ecx
.text$mn:00005C1D
.text$mn:00005C1D loc_5C1D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+96j
.text$mn:00005C1D                 mov     eax, [ebp+var_18]
.text$mn:00005C20                 mov     esp, ebp
.text$mn:00005C22                 pop     ebp
.text$mn:00005C23                 retn    10h
.text$mn:00005C23 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z endp
.text$mn:00005C23
.text$mn:00005C23 ; ---------------------------------------------------------------------------
.text$mn:00005C26                 align 4
.text$mn:00005C26 _text$mn        ends
.text$mn:00005C26
.text$mn:00005C28 ; ===========================================================================
.text$mn:00005C28
.text$mn:00005C28 ; Segment type: Pure code
.text$mn:00005C28 ; Segment permissions: Read/Execute
.text$mn:00005C28 _text$mn        segment para public 'CODE' use32
.text$mn:00005C28                 assume cs:_text$mn
.text$mn:00005C28                 ;org 5C28h
.text$mn:00005C28 ; COMDAT (pick any)
.text$mn:00005C28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C28
.text$mn:00005C28 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C28
.text$mn:00005C28 ; Attributes: bp-based frame
.text$mn:00005C28
.text$mn:00005C28 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t *Str)
.text$mn:00005C28                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z
.text$mn:00005C28 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z proc near
.text$mn:00005C28                                         ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+Bp
.text$mn:00005C28
.text$mn:00005C28 var_4           = dword ptr -4
.text$mn:00005C28 Str             = dword ptr  8
.text$mn:00005C28
.text$mn:00005C28                 push    ebp
.text$mn:00005C29                 mov     ebp, esp
.text$mn:00005C2B                 push    ecx
.text$mn:00005C2C                 mov     [ebp+var_4], ecx
.text$mn:00005C2F                 push    86Eh            ; unsigned int
.text$mn:00005C34                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005C39                 mov     eax, [ebp+Str]
.text$mn:00005C3C                 push    eax             ; int
.text$mn:00005C3D                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00005C42                 add     esp, 0Ch
.text$mn:00005C45                 mov     ecx, [ebp+Str]
.text$mn:00005C48                 push    ecx             ; Str
.text$mn:00005C49                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:00005C4E                 add     esp, 4
.text$mn:00005C51                 push    eax
.text$mn:00005C52                 mov     edx, [ebp+Str]
.text$mn:00005C55                 push    edx
.text$mn:00005C56                 mov     eax, [ebp+var_4]
.text$mn:00005C59                 mov     ecx, [eax+14h]
.text$mn:00005C5C                 push    ecx
.text$mn:00005C5D                 push    0
.text$mn:00005C5F                 mov     ecx, [ebp+var_4]
.text$mn:00005C62                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)
.text$mn:00005C67                 mov     esp, ebp
.text$mn:00005C69                 pop     ebp
.text$mn:00005C6A                 retn    4
.text$mn:00005C6A ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z endp
.text$mn:00005C6A
.text$mn:00005C6A ; ---------------------------------------------------------------------------
.text$mn:00005C6D                 align 10h
.text$mn:00005C6D _text$mn        ends
.text$mn:00005C6D
.text$mn:00005C70 ; ===========================================================================
.text$mn:00005C70
.text$mn:00005C70 ; Segment type: Pure code
.text$mn:00005C70 ; Segment permissions: Read/Execute
.text$mn:00005C70 _text$mn        segment para public 'CODE' use32
.text$mn:00005C70                 assume cs:_text$mn
.text$mn:00005C70                 ;org 5C70h
.text$mn:00005C70 ; COMDAT (pick any)
.text$mn:00005C70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C70
.text$mn:00005C70 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C70
.text$mn:00005C70 ; Attributes: bp-based frame
.text$mn:00005C70
.text$mn:00005C70 ; public: static int __cdecl std::char_traits<wchar_t>::compare(wchar_t const *, wchar_t const *, unsigned int)
.text$mn:00005C70                 public ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z
.text$mn:00005C70 ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z proc near
.text$mn:00005C70                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+7Fp
.text$mn:00005C70
.text$mn:00005C70 var_4           = dword ptr -4
.text$mn:00005C70 arg_0           = dword ptr  8
.text$mn:00005C70 arg_4           = dword ptr  0Ch
.text$mn:00005C70 arg_8           = dword ptr  10h
.text$mn:00005C70
.text$mn:00005C70                 push    ebp
.text$mn:00005C71                 mov     ebp, esp
.text$mn:00005C73                 push    ecx
.text$mn:00005C74                 cmp     [ebp+arg_8], 0
.text$mn:00005C78                 jnz     short loc_5C83
.text$mn:00005C7A                 mov     [ebp+var_4], 0
.text$mn:00005C81                 jmp     short loc_5C9A
.text$mn:00005C83 ; ---------------------------------------------------------------------------
.text$mn:00005C83
.text$mn:00005C83 loc_5C83:                               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+8j
.text$mn:00005C83                 mov     eax, [ebp+arg_8]
.text$mn:00005C86                 push    eax
.text$mn:00005C87                 mov     ecx, [ebp+arg_4]
.text$mn:00005C8A                 push    ecx
.text$mn:00005C8B                 mov     edx, [ebp+arg_0]
.text$mn:00005C8E                 push    edx
.text$mn:00005C8F                 call    _wmemcmp
.text$mn:00005C94                 add     esp, 0Ch
.text$mn:00005C97                 mov     [ebp+var_4], eax
.text$mn:00005C9A
.text$mn:00005C9A loc_5C9A:                               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+11j
.text$mn:00005C9A                 mov     eax, [ebp+var_4]
.text$mn:00005C9D                 mov     esp, ebp
.text$mn:00005C9F                 pop     ebp
.text$mn:00005CA0                 retn
.text$mn:00005CA0 ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z endp
.text$mn:00005CA0
.text$mn:00005CA0 ; ---------------------------------------------------------------------------
.text$mn:00005CA1                 align 4
.text$mn:00005CA1 _text$mn        ends
.text$mn:00005CA1
.text$mn:00005CA4 ; ===========================================================================
.text$mn:00005CA4
.text$mn:00005CA4 ; Segment type: Pure code
.text$mn:00005CA4 ; Segment permissions: Read/Execute
.text$mn:00005CA4 _text$mn        segment para public 'CODE' use32
.text$mn:00005CA4                 assume cs:_text$mn
.text$mn:00005CA4                 ;org 5CA4h
.text$mn:00005CA4 ; COMDAT (pick any)
.text$mn:00005CA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005CA4
.text$mn:00005CA4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005CA4
.text$mn:00005CA4 ; Attributes: bp-based frame
.text$mn:00005CA4
.text$mn:00005CA4 ; int __cdecl std::char_traits<char>::copy(void *Dst, void *Src, size_t Size)
.text$mn:00005CA4                 public ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:00005CA4 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near ; CODE XREF: $LN19+1Ep
.text$mn:00005CA4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+5Dp ...
.text$mn:00005CA4
.text$mn:00005CA4 var_4           = dword ptr -4
.text$mn:00005CA4 Dst             = dword ptr  8
.text$mn:00005CA4 Src             = dword ptr  0Ch
.text$mn:00005CA4 Size            = dword ptr  10h
.text$mn:00005CA4
.text$mn:00005CA4                 push    ebp
.text$mn:00005CA5                 mov     ebp, esp
.text$mn:00005CA7                 push    ecx
.text$mn:00005CA8                 cmp     [ebp+Size], 0
.text$mn:00005CAC                 jnz     short loc_5CB6
.text$mn:00005CAE                 mov     eax, [ebp+Dst]
.text$mn:00005CB1                 mov     [ebp+var_4], eax
.text$mn:00005CB4                 jmp     short loc_5CCD
.text$mn:00005CB6 ; ---------------------------------------------------------------------------
.text$mn:00005CB6
.text$mn:00005CB6 loc_5CB6:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+8j
.text$mn:00005CB6                 mov     ecx, [ebp+Size]
.text$mn:00005CB9                 push    ecx             ; Size
.text$mn:00005CBA                 mov     edx, [ebp+Src]
.text$mn:00005CBD                 push    edx             ; Src
.text$mn:00005CBE                 mov     eax, [ebp+Dst]
.text$mn:00005CC1                 push    eax             ; Dst
.text$mn:00005CC2                 call    _memcpy
.text$mn:00005CC7                 add     esp, 0Ch
.text$mn:00005CCA                 mov     [ebp+var_4], eax
.text$mn:00005CCD
.text$mn:00005CCD loc_5CCD:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+10j
.text$mn:00005CCD                 mov     eax, [ebp+var_4]
.text$mn:00005CD0                 mov     esp, ebp
.text$mn:00005CD2                 pop     ebp
.text$mn:00005CD3                 retn
.text$mn:00005CD3 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:00005CD3
.text$mn:00005CD3 _text$mn        ends
.text$mn:00005CD3
.text$mn:00005CD4 ; ===========================================================================
.text$mn:00005CD4
.text$mn:00005CD4 ; Segment type: Pure code
.text$mn:00005CD4 ; Segment permissions: Read/Execute
.text$mn:00005CD4 _text$mn        segment para public 'CODE' use32
.text$mn:00005CD4                 assume cs:_text$mn
.text$mn:00005CD4                 ;org 5CD4h
.text$mn:00005CD4 ; COMDAT (pick any)
.text$mn:00005CD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005CD4
.text$mn:00005CD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005CD4
.text$mn:00005CD4 ; Attributes: bp-based frame
.text$mn:00005CD4
.text$mn:00005CD4 ; int __cdecl std::char_traits<wchar_t>::copy(void *Dst, void *Src, int)
.text$mn:00005CD4                 public ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:00005CD4 ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:00005CD4                                         ; CODE XREF: $LN19_0+1Ep
.text$mn:00005CD4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+5Dp ...
.text$mn:00005CD4
.text$mn:00005CD4 var_4           = dword ptr -4
.text$mn:00005CD4 Dst             = dword ptr  8
.text$mn:00005CD4 Src             = dword ptr  0Ch
.text$mn:00005CD4 arg_8           = dword ptr  10h
.text$mn:00005CD4
.text$mn:00005CD4                 push    ebp
.text$mn:00005CD5                 mov     ebp, esp
.text$mn:00005CD7                 push    ecx
.text$mn:00005CD8                 cmp     [ebp+arg_8], 0
.text$mn:00005CDC                 jnz     short loc_5CE6
.text$mn:00005CDE                 mov     eax, [ebp+Dst]
.text$mn:00005CE1                 mov     [ebp+var_4], eax
.text$mn:00005CE4                 jmp     short loc_5CFD
.text$mn:00005CE6 ; ---------------------------------------------------------------------------
.text$mn:00005CE6
.text$mn:00005CE6 loc_5CE6:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+8j
.text$mn:00005CE6                 mov     ecx, [ebp+arg_8]
.text$mn:00005CE9                 push    ecx             ; int
.text$mn:00005CEA                 mov     edx, [ebp+Src]
.text$mn:00005CED                 push    edx             ; Src
.text$mn:00005CEE                 mov     eax, [ebp+Dst]
.text$mn:00005CF1                 push    eax             ; Dst
.text$mn:00005CF2                 call    _wmemcpy
.text$mn:00005CF7                 add     esp, 0Ch
.text$mn:00005CFA                 mov     [ebp+var_4], eax
.text$mn:00005CFD
.text$mn:00005CFD loc_5CFD:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+10j
.text$mn:00005CFD                 mov     eax, [ebp+var_4]
.text$mn:00005D00                 mov     esp, ebp
.text$mn:00005D02                 pop     ebp
.text$mn:00005D03                 retn
.text$mn:00005D03 ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:00005D03
.text$mn:00005D03 _text$mn        ends
.text$mn:00005D03
.text$mn:00005D04 ; ===========================================================================
.text$mn:00005D04
.text$mn:00005D04 ; Segment type: Pure code
.text$mn:00005D04 ; Segment permissions: Read/Execute
.text$mn:00005D04 _text$mn        segment para public 'CODE' use32
.text$mn:00005D04                 assume cs:_text$mn
.text$mn:00005D04                 ;org 5D04h
.text$mn:00005D04 ; COMDAT (pick any)
.text$mn:00005D04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005D04
.text$mn:00005D04 ; =============== S U B R O U T I N E =======================================
.text$mn:00005D04
.text$mn:00005D04 ; Attributes: bp-based frame
.text$mn:00005D04
.text$mn:00005D04 ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::deallocate(void *, int)
.text$mn:00005D04                 public ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
.text$mn:00005D04 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
.text$mn:00005D04                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+81p
.text$mn:00005D04
.text$mn:00005D04 var_4           = dword ptr -4
.text$mn:00005D04 arg_0           = dword ptr  8
.text$mn:00005D04 arg_4           = dword ptr  0Ch
.text$mn:00005D04
.text$mn:00005D04                 push    ebp
.text$mn:00005D05                 mov     ebp, esp
.text$mn:00005D07                 push    ecx
.text$mn:00005D08                 mov     [ebp+var_4], ecx
.text$mn:00005D0B                 mov     eax, [ebp+arg_4]
.text$mn:00005D0E                 push    eax             ; int
.text$mn:00005D0F                 mov     ecx, [ebp+arg_0]
.text$mn:00005D12                 push    ecx             ; void *
.text$mn:00005D13                 mov     ecx, [ebp+var_4]
.text$mn:00005D16                 call    ?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate(char *,uint)
.text$mn:00005D1B                 mov     esp, ebp
.text$mn:00005D1D                 pop     ebp
.text$mn:00005D1E                 retn    8
.text$mn:00005D1E ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z endp
.text$mn:00005D1E
.text$mn:00005D1E ; ---------------------------------------------------------------------------
.text$mn:00005D21                 align 4
.text$mn:00005D21 _text$mn        ends
.text$mn:00005D21
.text$mn:00005D24 ; ===========================================================================
.text$mn:00005D24
.text$mn:00005D24 ; Segment type: Pure code
.text$mn:00005D24 ; Segment permissions: Read/Execute
.text$mn:00005D24 _text$mn        segment para public 'CODE' use32
.text$mn:00005D24                 assume cs:_text$mn
.text$mn:00005D24                 ;org 5D24h
.text$mn:00005D24 ; COMDAT (pick any)
.text$mn:00005D24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005D24
.text$mn:00005D24 ; =============== S U B R O U T I N E =======================================
.text$mn:00005D24
.text$mn:00005D24 ; Attributes: bp-based frame
.text$mn:00005D24
.text$mn:00005D24 ; int __stdcall std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::deallocate(void *, int)
.text$mn:00005D24                 public ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:00005D24 ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:00005D24                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Free_proxy(void)+32p
.text$mn:00005D24
.text$mn:00005D24 var_4           = dword ptr -4
.text$mn:00005D24 arg_0           = dword ptr  8
.text$mn:00005D24 arg_4           = dword ptr  0Ch
.text$mn:00005D24
.text$mn:00005D24                 push    ebp
.text$mn:00005D25                 mov     ebp, esp
.text$mn:00005D27                 push    ecx
.text$mn:00005D28                 mov     [ebp+var_4], ecx
.text$mn:00005D2B                 mov     eax, [ebp+arg_4]
.text$mn:00005D2E                 push    eax             ; int
.text$mn:00005D2F                 mov     ecx, [ebp+arg_0]
.text$mn:00005D32                 push    ecx             ; void *
.text$mn:00005D33                 mov     ecx, [ebp+var_4]
.text$mn:00005D36                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:00005D3B                 mov     esp, ebp
.text$mn:00005D3D                 pop     ebp
.text$mn:00005D3E                 retn    8
.text$mn:00005D3E ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:00005D3E
.text$mn:00005D3E ; ---------------------------------------------------------------------------
.text$mn:00005D41                 align 4
.text$mn:00005D41 _text$mn        ends
.text$mn:00005D41
.text$mn:00005D44 ; ===========================================================================
.text$mn:00005D44
.text$mn:00005D44 ; Segment type: Pure code
.text$mn:00005D44 ; Segment permissions: Read/Execute
.text$mn:00005D44 _text$mn        segment para public 'CODE' use32
.text$mn:00005D44                 assume cs:_text$mn
.text$mn:00005D44                 ;org 5D44h
.text$mn:00005D44 ; COMDAT (pick any)
.text$mn:00005D44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005D44
.text$mn:00005D44 ; =============== S U B R O U T I N E =======================================
.text$mn:00005D44
.text$mn:00005D44 ; Attributes: bp-based frame
.text$mn:00005D44
.text$mn:00005D44 ; int __stdcall std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(void *, int)
.text$mn:00005D44                 public ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:00005D44 ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:00005D44                                         ; CODE XREF: __catch$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$0+16p
.text$mn:00005D44                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+FAp ...
.text$mn:00005D44
.text$mn:00005D44 var_4           = dword ptr -4
.text$mn:00005D44 arg_0           = dword ptr  8
.text$mn:00005D44 arg_4           = dword ptr  0Ch
.text$mn:00005D44
.text$mn:00005D44                 push    ebp
.text$mn:00005D45                 mov     ebp, esp
.text$mn:00005D47                 push    ecx
.text$mn:00005D48                 mov     [ebp+var_4], ecx
.text$mn:00005D4B                 mov     eax, [ebp+arg_4]
.text$mn:00005D4E                 push    eax             ; int
.text$mn:00005D4F                 mov     ecx, [ebp+arg_0]
.text$mn:00005D52                 push    ecx             ; void *
.text$mn:00005D53                 mov     ecx, [ebp+var_4]
.text$mn:00005D56                 call    ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)
.text$mn:00005D5B                 mov     esp, ebp
.text$mn:00005D5D                 pop     ebp
.text$mn:00005D5E                 retn    8
.text$mn:00005D5E ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:00005D5E
.text$mn:00005D5E ; ---------------------------------------------------------------------------
.text$mn:00005D61                 align 4
.text$mn:00005D61 _text$mn        ends
.text$mn:00005D61
.text$mn:00005D64 ; ===========================================================================
.text$mn:00005D64
.text$mn:00005D64 ; Segment type: Pure code
.text$mn:00005D64 ; Segment permissions: Read/Execute
.text$mn:00005D64 _text$mn        segment para public 'CODE' use32
.text$mn:00005D64                 assume cs:_text$mn
.text$mn:00005D64                 ;org 5D64h
.text$mn:00005D64 ; COMDAT (pick any)
.text$mn:00005D64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005D64
.text$mn:00005D64 ; =============== S U B R O U T I N E =======================================
.text$mn:00005D64
.text$mn:00005D64 ; Attributes: bp-based frame
.text$mn:00005D64
.text$mn:00005D64 ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(void *, int)
.text$mn:00005D64                 public ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z
.text$mn:00005D64 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z proc near
.text$mn:00005D64                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+81p
.text$mn:00005D64
.text$mn:00005D64 var_4           = dword ptr -4
.text$mn:00005D64 arg_0           = dword ptr  8
.text$mn:00005D64 arg_4           = dword ptr  0Ch
.text$mn:00005D64
.text$mn:00005D64                 push    ebp
.text$mn:00005D65                 mov     ebp, esp
.text$mn:00005D67                 push    ecx
.text$mn:00005D68                 mov     [ebp+var_4], ecx
.text$mn:00005D6B                 mov     eax, [ebp+arg_4]
.text$mn:00005D6E                 push    eax             ; int
.text$mn:00005D6F                 mov     ecx, [ebp+arg_0]
.text$mn:00005D72                 push    ecx             ; void *
.text$mn:00005D73                 mov     ecx, [ebp+var_4]
.text$mn:00005D76                 call    ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ; std::allocator<wchar_t>::deallocate(wchar_t *,uint)
.text$mn:00005D7B                 mov     esp, ebp
.text$mn:00005D7D                 pop     ebp
.text$mn:00005D7E                 retn    8
.text$mn:00005D7E ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z endp
.text$mn:00005D7E
.text$mn:00005D7E ; ---------------------------------------------------------------------------
.text$mn:00005D81                 align 4
.text$mn:00005D81 _text$mn        ends
.text$mn:00005D81
.text$mn:00005D84 ; ===========================================================================
.text$mn:00005D84
.text$mn:00005D84 ; Segment type: Pure code
.text$mn:00005D84 ; Segment permissions: Read/Execute
.text$mn:00005D84 _text$mn        segment para public 'CODE' use32
.text$mn:00005D84                 assume cs:_text$mn
.text$mn:00005D84                 ;org 5D84h
.text$mn:00005D84 ; COMDAT (pick any)
.text$mn:00005D84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005D84
.text$mn:00005D84 ; =============== S U B R O U T I N E =======================================
.text$mn:00005D84
.text$mn:00005D84 ; Attributes: bp-based frame
.text$mn:00005D84
.text$mn:00005D84 ; int __stdcall std::allocator<char>::deallocate(void *, int)
.text$mn:00005D84                 public ?deallocate@?$allocator@D@std@@QAEXPADI@Z
.text$mn:00005D84 ?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
.text$mn:00005D84                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)+12p
.text$mn:00005D84
.text$mn:00005D84 var_4           = dword ptr -4
.text$mn:00005D84 arg_0           = dword ptr  8
.text$mn:00005D84
.text$mn:00005D84                 push    ebp
.text$mn:00005D85                 mov     ebp, esp
.text$mn:00005D87                 push    ecx
.text$mn:00005D88                 mov     [ebp+var_4], ecx
.text$mn:00005D8B                 mov     eax, [ebp+arg_0]
.text$mn:00005D8E                 push    eax             ; void *
.text$mn:00005D8F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00005D94                 add     esp, 4
.text$mn:00005D97                 mov     esp, ebp
.text$mn:00005D99                 pop     ebp
.text$mn:00005D9A                 retn    8
.text$mn:00005D9A ?deallocate@?$allocator@D@std@@QAEXPADI@Z endp
.text$mn:00005D9A
.text$mn:00005D9A ; ---------------------------------------------------------------------------
.text$mn:00005D9D                 align 10h
.text$mn:00005D9D _text$mn        ends
.text$mn:00005D9D
.text$mn:00005DA0 ; ===========================================================================
.text$mn:00005DA0
.text$mn:00005DA0 ; Segment type: Pure code
.text$mn:00005DA0 ; Segment permissions: Read/Execute
.text$mn:00005DA0 _text$mn        segment para public 'CODE' use32
.text$mn:00005DA0                 assume cs:_text$mn
.text$mn:00005DA0                 ;org 5DA0h
.text$mn:00005DA0 ; COMDAT (pick any)
.text$mn:00005DA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005DA0
.text$mn:00005DA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00005DA0
.text$mn:00005DA0 ; Attributes: bp-based frame
.text$mn:00005DA0
.text$mn:00005DA0 ; int __stdcall std::allocator<std::_Container_proxy>::deallocate(void *, int)
.text$mn:00005DA0                 public ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:00005DA0 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:00005DA0                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+32p
.text$mn:00005DA0                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)+32p ...
.text$mn:00005DA0
.text$mn:00005DA0 var_4           = dword ptr -4
.text$mn:00005DA0 arg_0           = dword ptr  8
.text$mn:00005DA0
.text$mn:00005DA0                 push    ebp
.text$mn:00005DA1                 mov     ebp, esp
.text$mn:00005DA3                 push    ecx
.text$mn:00005DA4                 mov     [ebp+var_4], ecx
.text$mn:00005DA7                 mov     eax, [ebp+arg_0]
.text$mn:00005DAA                 push    eax             ; void *
.text$mn:00005DAB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00005DB0                 add     esp, 4
.text$mn:00005DB3                 mov     esp, ebp
.text$mn:00005DB5                 pop     ebp
.text$mn:00005DB6                 retn    8
.text$mn:00005DB6 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:00005DB6
.text$mn:00005DB6 ; ---------------------------------------------------------------------------
.text$mn:00005DB9                 align 4
.text$mn:00005DB9 _text$mn        ends
.text$mn:00005DB9
.text$mn:00005DBC ; ===========================================================================
.text$mn:00005DBC
.text$mn:00005DBC ; Segment type: Pure code
.text$mn:00005DBC ; Segment permissions: Read/Execute
.text$mn:00005DBC _text$mn        segment para public 'CODE' use32
.text$mn:00005DBC                 assume cs:_text$mn
.text$mn:00005DBC                 ;org 5DBCh
.text$mn:00005DBC ; COMDAT (pick any)
.text$mn:00005DBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005DBC
.text$mn:00005DBC ; =============== S U B R O U T I N E =======================================
.text$mn:00005DBC
.text$mn:00005DBC ; Attributes: bp-based frame
.text$mn:00005DBC
.text$mn:00005DBC ; int __stdcall std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::deallocate(void *, int)
.text$mn:00005DBC                 public ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:00005DBC ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:00005DBC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)+12p
.text$mn:00005DBC
.text$mn:00005DBC var_4           = dword ptr -4
.text$mn:00005DBC arg_0           = dword ptr  8
.text$mn:00005DBC
.text$mn:00005DBC                 push    ebp
.text$mn:00005DBD                 mov     ebp, esp
.text$mn:00005DBF                 push    ecx
.text$mn:00005DC0                 mov     [ebp+var_4], ecx
.text$mn:00005DC3                 mov     eax, [ebp+arg_0]
.text$mn:00005DC6                 push    eax             ; void *
.text$mn:00005DC7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00005DCC                 add     esp, 4
.text$mn:00005DCF                 mov     esp, ebp
.text$mn:00005DD1                 pop     ebp
.text$mn:00005DD2                 retn    8
.text$mn:00005DD2 ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:00005DD2
.text$mn:00005DD2 ; ---------------------------------------------------------------------------
.text$mn:00005DD5                 align 4
.text$mn:00005DD5 _text$mn        ends
.text$mn:00005DD5
.text$mn:00005DD8 ; ===========================================================================
.text$mn:00005DD8
.text$mn:00005DD8 ; Segment type: Pure code
.text$mn:00005DD8 ; Segment permissions: Read/Execute
.text$mn:00005DD8 _text$mn        segment para public 'CODE' use32
.text$mn:00005DD8                 assume cs:_text$mn
.text$mn:00005DD8                 ;org 5DD8h
.text$mn:00005DD8 ; COMDAT (pick any)
.text$mn:00005DD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005DD8
.text$mn:00005DD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00005DD8
.text$mn:00005DD8 ; Attributes: bp-based frame
.text$mn:00005DD8
.text$mn:00005DD8 ; int __stdcall std::allocator<wchar_t>::deallocate(void *, int)
.text$mn:00005DD8                 public ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
.text$mn:00005DD8 ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z proc near
.text$mn:00005DD8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)+12p
.text$mn:00005DD8
.text$mn:00005DD8 var_4           = dword ptr -4
.text$mn:00005DD8 arg_0           = dword ptr  8
.text$mn:00005DD8
.text$mn:00005DD8                 push    ebp
.text$mn:00005DD9                 mov     ebp, esp
.text$mn:00005DDB                 push    ecx
.text$mn:00005DDC                 mov     [ebp+var_4], ecx
.text$mn:00005DDF                 mov     eax, [ebp+arg_0]
.text$mn:00005DE2                 push    eax             ; void *
.text$mn:00005DE3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00005DE8                 add     esp, 4
.text$mn:00005DEB                 mov     esp, ebp
.text$mn:00005DED                 pop     ebp
.text$mn:00005DEE                 retn    8
.text$mn:00005DEE ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z endp
.text$mn:00005DEE
.text$mn:00005DEE ; ---------------------------------------------------------------------------
.text$mn:00005DF1                 align 4
.text$mn:00005DF1 _text$mn        ends
.text$mn:00005DF1
.text$mn:00005DF4 ; ===========================================================================
.text$mn:00005DF4
.text$mn:00005DF4 ; Segment type: Pure code
.text$mn:00005DF4 ; Segment permissions: Read/Execute
.text$mn:00005DF4 _text$mn        segment para public 'CODE' use32
.text$mn:00005DF4                 assume cs:_text$mn
.text$mn:00005DF4                 ;org 5DF4h
.text$mn:00005DF4 ; COMDAT (pick any)
.text$mn:00005DF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005DF4
.text$mn:00005DF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005DF4
.text$mn:00005DF4 ; Attributes: bp-based frame
.text$mn:00005DF4
.text$mn:00005DF4 ; public: virtual class std::error_condition __thiscall std::_System_error_category::default_error_condition(int)const
.text$mn:00005DF4                 public ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:00005DF4 ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:00005DF4                                         ; DATA XREF: .rdata:00008390o
.text$mn:00005DF4
.text$mn:00005DF4 var_4           = dword ptr -4
.text$mn:00005DF4 arg_0           = dword ptr  8
.text$mn:00005DF4 arg_4           = dword ptr  0Ch
.text$mn:00005DF4
.text$mn:00005DF4                 push    ebp
.text$mn:00005DF5                 mov     ebp, esp
.text$mn:00005DF7                 push    ecx
.text$mn:00005DF8                 mov     [ebp+var_4], ecx
.text$mn:00005DFB                 mov     eax, [ebp+arg_4]
.text$mn:00005DFE                 push    eax             ; int
.text$mn:00005DFF                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:00005E04                 add     esp, 4
.text$mn:00005E07                 test    eax, eax
.text$mn:00005E09                 jz      short loc_5E24
.text$mn:00005E0B                 call    ?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category(void)
.text$mn:00005E10                 push    eax             ; struct std::error_category *
.text$mn:00005E11                 mov     ecx, [ebp+arg_4]
.text$mn:00005E14                 push    ecx             ; int
.text$mn:00005E15                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00005E18                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:00005E1D                 mov     eax, [ebp+arg_0]
.text$mn:00005E20                 jmp     short loc_5E39
.text$mn:00005E22 ; ---------------------------------------------------------------------------
.text$mn:00005E22                 jmp     short loc_5E39
.text$mn:00005E24 ; ---------------------------------------------------------------------------
.text$mn:00005E24
.text$mn:00005E24 loc_5E24:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+15j
.text$mn:00005E24                 call    ?system_category@std@@YAABVerror_category@1@XZ ; std::system_category(void)
.text$mn:00005E29                 push    eax             ; struct std::error_category *
.text$mn:00005E2A                 mov     edx, [ebp+arg_4]
.text$mn:00005E2D                 push    edx             ; int
.text$mn:00005E2E                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00005E31                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:00005E36                 mov     eax, [ebp+arg_0]
.text$mn:00005E39
.text$mn:00005E39 loc_5E39:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+2Cj
.text$mn:00005E39                                         ; std::_System_error_category::default_error_condition(int)+2Ej
.text$mn:00005E39                 mov     esp, ebp
.text$mn:00005E3B                 pop     ebp
.text$mn:00005E3C                 retn    8
.text$mn:00005E3C ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:00005E3C
.text$mn:00005E3C ; ---------------------------------------------------------------------------
.text$mn:00005E3F                 align 10h
.text$mn:00005E3F _text$mn        ends
.text$mn:00005E3F
.text$mn:00005E40 ; ===========================================================================
.text$mn:00005E40
.text$mn:00005E40 ; Segment type: Pure code
.text$mn:00005E40 ; Segment permissions: Read/Execute
.text$mn:00005E40 _text$mn        segment para public 'CODE' use32
.text$mn:00005E40                 assume cs:_text$mn
.text$mn:00005E40                 ;org 5E40h
.text$mn:00005E40 ; COMDAT (pick any)
.text$mn:00005E40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005E40
.text$mn:00005E40 ; =============== S U B R O U T I N E =======================================
.text$mn:00005E40
.text$mn:00005E40 ; Attributes: bp-based frame
.text$mn:00005E40
.text$mn:00005E40 ; public: virtual class std::error_condition __thiscall std::error_category::default_error_condition(int)const
.text$mn:00005E40                 public ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:00005E40 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:00005E40                                         ; DATA XREF: .rdata:00008300o
.text$mn:00005E40                                         ; .rdata:0000831Co ...
.text$mn:00005E40
.text$mn:00005E40 var_4           = dword ptr -4
.text$mn:00005E40 arg_0           = dword ptr  8
.text$mn:00005E40 arg_4           = dword ptr  0Ch
.text$mn:00005E40
.text$mn:00005E40                 push    ebp
.text$mn:00005E41                 mov     ebp, esp
.text$mn:00005E43                 push    ecx
.text$mn:00005E44                 mov     [ebp+var_4], ecx
.text$mn:00005E47                 mov     eax, [ebp+var_4]
.text$mn:00005E4A                 push    eax             ; struct std::error_category *
.text$mn:00005E4B                 mov     ecx, [ebp+arg_4]
.text$mn:00005E4E                 push    ecx             ; int
.text$mn:00005E4F                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00005E52                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:00005E57                 mov     eax, [ebp+arg_0]
.text$mn:00005E5A                 mov     esp, ebp
.text$mn:00005E5C                 pop     ebp
.text$mn:00005E5D                 retn    8
.text$mn:00005E5D ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:00005E5D
.text$mn:00005E5D _text$mn        ends
.text$mn:00005E5D
.text$mn:00005E60 ; ===========================================================================
.text$mn:00005E60
.text$mn:00005E60 ; Segment type: Pure code
.text$mn:00005E60 ; Segment permissions: Read/Execute
.text$mn:00005E60 _text$mn        segment para public 'CODE' use32
.text$mn:00005E60                 assume cs:_text$mn
.text$mn:00005E60                 ;org 5E60h
.text$mn:00005E60 ; COMDAT (pick any)
.text$mn:00005E60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005E60
.text$mn:00005E60 ; =============== S U B R O U T I N E =======================================
.text$mn:00005E60
.text$mn:00005E60 ; Attributes: bp-based frame
.text$mn:00005E60
.text$mn:00005E60 ; public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>> __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::end(void)
.text$mn:00005E60                 public ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:00005E60 ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$mn:00005E60                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+72p
.text$mn:00005E60                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+8Ep
.text$mn:00005E60
.text$mn:00005E60 var_14          = dword ptr -14h
.text$mn:00005E60 var_10          = dword ptr -10h
.text$mn:00005E60 var_C           = dword ptr -0Ch
.text$mn:00005E60 var_4           = dword ptr -4
.text$mn:00005E60 arg_0           = dword ptr  8
.text$mn:00005E60
.text$mn:00005E60                 push    ebp
.text$mn:00005E61                 mov     ebp, esp
.text$mn:00005E63                 push    0FFFFFFFFh
.text$mn:00005E65                 push    offset __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:00005E6A                 mov     eax, large fs:0
.text$mn:00005E70                 push    eax
.text$mn:00005E71                 sub     esp, 8
.text$mn:00005E74                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005E79                 xor     eax, ebp
.text$mn:00005E7B                 push    eax
.text$mn:00005E7C                 lea     eax, [ebp+var_C]
.text$mn:00005E7F                 mov     large fs:0, eax
.text$mn:00005E85                 mov     [ebp+var_10], ecx
.text$mn:00005E88                 mov     [ebp+var_14], 0
.text$mn:00005E8F                 mov     eax, [ebp+var_10]
.text$mn:00005E92                 push    eax             ; struct std::_Container_base12 *
.text$mn:00005E93                 mov     ecx, [ebp+var_10]
.text$mn:00005E96                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00005E9B                 mov     ecx, [ebp+var_10]
.text$mn:00005E9E                 mov     edx, [ecx+14h]
.text$mn:00005EA1                 lea     eax, [eax+edx*2]
.text$mn:00005EA4                 push    eax             ; int
.text$mn:00005EA5                 mov     ecx, [ebp+arg_0]
.text$mn:00005EA8                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)
.text$mn:00005EAD                 mov     [ebp+var_4], 0
.text$mn:00005EB4                 mov     ecx, [ebp+var_14]
.text$mn:00005EB7                 or      ecx, 1
.text$mn:00005EBA                 mov     [ebp+var_14], ecx
.text$mn:00005EBD                 mov     eax, [ebp+arg_0]
.text$mn:00005EC0                 mov     ecx, [ebp+var_C]
.text$mn:00005EC3                 mov     large fs:0, ecx
.text$mn:00005ECA                 pop     ecx
.text$mn:00005ECB                 mov     esp, ebp
.text$mn:00005ECD                 pop     ebp
.text$mn:00005ECE                 retn    4
.text$mn:00005ECE ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$mn:00005ECE
.text$mn:00005ECE ; ---------------------------------------------------------------------------
.text$mn:00005ED1                 align 4
.text$mn:00005ED1 _text$mn        ends
.text$mn:00005ED1
.text$x:00005ED4 ; ===========================================================================
.text$x:00005ED4
.text$x:00005ED4 ; Segment type: Pure code
.text$x:00005ED4 ; Segment permissions: Read/Execute
.text$x:00005ED4 _text$x         segment para public 'CODE' use32
.text$x:00005ED4                 assume cs:_text$x
.text$x:00005ED4                 ;org 5ED4h
.text$x:00005ED4 ; COMDAT (pick associative to section at 5E60)
.text$x:00005ED4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005ED4
.text$x:00005ED4 ; =============== S U B R O U T I N E =======================================
.text$x:00005ED4
.text$x:00005ED4
.text$x:00005ED4 __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 proc near
.text$x:00005ED4                                         ; DATA XREF: .xdata$x:00007968o
.text$x:00005ED4                 mov     eax, [ebp-14h]
.text$x:00005ED7                 and     eax, 1
.text$x:00005EDA                 jz      $LN4_0
.text$x:00005EE0                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:00005EE4                 mov     ecx, [ebp+8]
.text$x:00005EE7                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00005EEC ; ---------------------------------------------------------------------------
.text$x:00005EEC
.text$x:00005EEC $LN4_0:                                 ; CODE XREF: __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0+6j
.text$x:00005EEC                 retn
.text$x:00005EEC __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 endp
.text$x:00005EEC
.text$x:00005EED
.text$x:00005EED ; =============== S U B R O U T I N E =======================================
.text$x:00005EED
.text$x:00005EED
.text$x:00005EED __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$x:00005EED                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)+5o
.text$x:00005EED
.text$x:00005EED arg_4           = dword ptr  8
.text$x:00005EED
.text$x:00005EED                 mov     edx, [esp+arg_4]
.text$x:00005EF1                 lea     eax, [edx+0Ch]
.text$x:00005EF4                 mov     ecx, [edx-0Ch]
.text$x:00005EF7                 xor     ecx, eax
.text$x:00005EF9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005EFE                 mov     eax, offset __ehfuncinfo$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$x:00005F03                 jmp     ___CxxFrameHandler3
.text$x:00005F03 __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$x:00005F03
.text$x:00005F03 _text$x         ends
.text$x:00005F03
.text$mn:00005F08 ; ===========================================================================
.text$mn:00005F08
.text$mn:00005F08 ; Segment type: Pure code
.text$mn:00005F08 ; Segment permissions: Read/Execute
.text$mn:00005F08 _text$mn        segment para public 'CODE' use32
.text$mn:00005F08                 assume cs:_text$mn
.text$mn:00005F08                 ;org 5F08h
.text$mn:00005F08 ; COMDAT (pick any)
.text$mn:00005F08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F08
.text$mn:00005F08 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F08
.text$mn:00005F08 ; Attributes: bp-based frame
.text$mn:00005F08
.text$mn:00005F08 ; bool __thiscall std::error_category::equivalent(std::error_category *this, const struct std::error_code *, int)
.text$mn:00005F08                 public ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
.text$mn:00005F08 ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
.text$mn:00005F08                                         ; DATA XREF: .rdata:00008304o
.text$mn:00005F08                                         ; .rdata:00008320o ...
.text$mn:00005F08
.text$mn:00005F08 var_8           = dword ptr -8
.text$mn:00005F08 var_4           = dword ptr -4
.text$mn:00005F08 arg_0           = dword ptr  8
.text$mn:00005F08 arg_4           = dword ptr  0Ch
.text$mn:00005F08
.text$mn:00005F08                 push    ebp
.text$mn:00005F09                 mov     ebp, esp
.text$mn:00005F0B                 sub     esp, 8
.text$mn:00005F0E                 mov     [ebp+var_8], ecx
.text$mn:00005F11                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00005F14                 call    ?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category(void)
.text$mn:00005F19                 push    eax
.text$mn:00005F1A                 mov     ecx, [ebp+var_8]
.text$mn:00005F1D                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:00005F22                 movzx   eax, al
.text$mn:00005F25                 test    eax, eax
.text$mn:00005F27                 jz      short loc_5F3F
.text$mn:00005F29                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00005F2C                 call    ?value@error_code@std@@QBEHXZ ; std::error_code::value(void)
.text$mn:00005F31                 cmp     eax, [ebp+arg_4]
.text$mn:00005F34                 jnz     short loc_5F3F
.text$mn:00005F36                 mov     [ebp+var_4], 1
.text$mn:00005F3D                 jmp     short loc_5F46
.text$mn:00005F3F ; ---------------------------------------------------------------------------
.text$mn:00005F3F
.text$mn:00005F3F loc_5F3F:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+1Fj
.text$mn:00005F3F                                         ; std::error_category::equivalent(std::error_code const &,int)+2Cj
.text$mn:00005F3F                 mov     [ebp+var_4], 0
.text$mn:00005F46
.text$mn:00005F46 loc_5F46:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+35j
.text$mn:00005F46                 mov     al, byte ptr [ebp+var_4]
.text$mn:00005F49                 mov     esp, ebp
.text$mn:00005F4B                 pop     ebp
.text$mn:00005F4C                 retn    8
.text$mn:00005F4C ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z endp
.text$mn:00005F4C
.text$mn:00005F4C ; ---------------------------------------------------------------------------
.text$mn:00005F4F                 align 10h
.text$mn:00005F4F _text$mn        ends
.text$mn:00005F4F
.text$mn:00005F50 ; ===========================================================================
.text$mn:00005F50
.text$mn:00005F50 ; Segment type: Pure code
.text$mn:00005F50 ; Segment permissions: Read/Execute
.text$mn:00005F50 _text$mn        segment para public 'CODE' use32
.text$mn:00005F50                 assume cs:_text$mn
.text$mn:00005F50                 ;org 5F50h
.text$mn:00005F50 ; COMDAT (pick any)
.text$mn:00005F50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F50
.text$mn:00005F50 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F50
.text$mn:00005F50 ; Attributes: bp-based frame
.text$mn:00005F50
.text$mn:00005F50 ; bool __thiscall std::error_category::equivalent(std::error_category *this, int, const struct std::error_condition *)
.text$mn:00005F50                 public ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
.text$mn:00005F50 ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
.text$mn:00005F50                                         ; DATA XREF: .rdata:00008308o
.text$mn:00005F50                                         ; .rdata:00008324o ...
.text$mn:00005F50
.text$mn:00005F50 var_C           = byte ptr -0Ch
.text$mn:00005F50 var_4           = dword ptr -4
.text$mn:00005F50 arg_0           = dword ptr  8
.text$mn:00005F50 arg_4           = dword ptr  0Ch
.text$mn:00005F50
.text$mn:00005F50                 push    ebp
.text$mn:00005F51                 mov     ebp, esp
.text$mn:00005F53                 sub     esp, 0Ch
.text$mn:00005F56                 mov     [ebp+var_4], ecx
.text$mn:00005F59                 mov     eax, [ebp+arg_4]
.text$mn:00005F5C                 push    eax             ; std::error_condition *
.text$mn:00005F5D                 mov     ecx, [ebp+arg_0]
.text$mn:00005F60                 push    ecx
.text$mn:00005F61                 lea     edx, [ebp+var_C]
.text$mn:00005F64                 push    edx
.text$mn:00005F65                 mov     eax, [ebp+var_4]
.text$mn:00005F68                 mov     edx, [eax]
.text$mn:00005F6A                 mov     ecx, [ebp+var_4]
.text$mn:00005F6D                 mov     eax, [edx+0Ch]
.text$mn:00005F70                 call    eax
.text$mn:00005F72                 mov     ecx, eax
.text$mn:00005F74                 call    ??8error_condition@std@@QBE_NABV01@@Z ; std::error_condition::operator==(std::error_condition const &)
.text$mn:00005F79                 mov     esp, ebp
.text$mn:00005F7B                 pop     ebp
.text$mn:00005F7C                 retn    8
.text$mn:00005F7C ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z endp
.text$mn:00005F7C
.text$mn:00005F7C ; ---------------------------------------------------------------------------
.text$mn:00005F7F                 align 10h
.text$mn:00005F7F _text$mn        ends
.text$mn:00005F7F
.text$mn:00005F80 ; ===========================================================================
.text$mn:00005F80
.text$mn:00005F80 ; Segment type: Pure code
.text$mn:00005F80 ; Segment permissions: Read/Execute
.text$mn:00005F80 _text$mn        segment para public 'CODE' use32
.text$mn:00005F80                 assume cs:_text$mn
.text$mn:00005F80                 ;org 5F80h
.text$mn:00005F80 ; COMDAT (pick any)
.text$mn:00005F80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F80
.text$mn:00005F80 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F80
.text$mn:00005F80 ; Attributes: bp-based frame
.text$mn:00005F80
.text$mn:00005F80 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int)
.text$mn:00005F80                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
.text$mn:00005F80 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
.text$mn:00005F80                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+4Cp
.text$mn:00005F80
.text$mn:00005F80 var_4           = dword ptr -4
.text$mn:00005F80 arg_0           = dword ptr  8
.text$mn:00005F80
.text$mn:00005F80                 push    ebp
.text$mn:00005F81                 mov     ebp, esp
.text$mn:00005F83                 push    ecx
.text$mn:00005F84                 mov     [ebp+var_4], ecx
.text$mn:00005F87                 mov     eax, [ebp+var_4]
.text$mn:00005F8A                 mov     ecx, [eax+14h]
.text$mn:00005F8D                 cmp     ecx, [ebp+arg_0]
.text$mn:00005F90                 jnb     short loc_5F9A
.text$mn:00005F92                 mov     ecx, [ebp+var_4]
.text$mn:00005F95                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:00005F9A
.text$mn:00005F9A loc_5F9A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+10j
.text$mn:00005F9A                 mov     edx, [ebp+arg_0]
.text$mn:00005F9D                 push    edx
.text$mn:00005F9E                 mov     ecx, [ebp+var_4]
.text$mn:00005FA1                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00005FA6                 mov     eax, [ebp+var_4]
.text$mn:00005FA9                 mov     esp, ebp
.text$mn:00005FAB                 pop     ebp
.text$mn:00005FAC                 retn    4
.text$mn:00005FAC ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z endp
.text$mn:00005FAC
.text$mn:00005FAC ; ---------------------------------------------------------------------------
.text$mn:00005FAF                 align 10h
.text$mn:00005FAF _text$mn        ends
.text$mn:00005FAF
.text$mn:00005FB0 ; ===========================================================================
.text$mn:00005FB0
.text$mn:00005FB0 ; Segment type: Pure code
.text$mn:00005FB0 ; Segment permissions: Read/Execute
.text$mn:00005FB0 _text$mn        segment para public 'CODE' use32
.text$mn:00005FB0                 assume cs:_text$mn
.text$mn:00005FB0                 ;org 5FB0h
.text$mn:00005FB0 ; COMDAT (pick any)
.text$mn:00005FB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005FB0
.text$mn:00005FB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00005FB0
.text$mn:00005FB0 ; Attributes: bp-based frame
.text$mn:00005FB0
.text$mn:00005FB0 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int, unsigned int)
.text$mn:00005FB0                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
.text$mn:00005FB0 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
.text$mn:00005FB0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Ap
.text$mn:00005FB0
.text$mn:00005FB0 var_C           = dword ptr -0Ch
.text$mn:00005FB0 Dst             = dword ptr -8
.text$mn:00005FB0 var_4           = dword ptr -4
.text$mn:00005FB0 arg_0           = dword ptr  8
.text$mn:00005FB0 arg_4           = dword ptr  0Ch
.text$mn:00005FB0
.text$mn:00005FB0                 push    ebp
.text$mn:00005FB1                 mov     ebp, esp
.text$mn:00005FB3                 sub     esp, 0Ch
.text$mn:00005FB6                 mov     [ebp+var_4], ecx
.text$mn:00005FB9                 mov     eax, [ebp+var_4]
.text$mn:00005FBC                 mov     ecx, [eax+14h]
.text$mn:00005FBF                 cmp     ecx, [ebp+arg_0]
.text$mn:00005FC2                 jnb     short loc_5FCC
.text$mn:00005FC4                 mov     ecx, [ebp+var_4]
.text$mn:00005FC7                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:00005FCC
.text$mn:00005FCC loc_5FCC:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+12j
.text$mn:00005FCC                 mov     edx, [ebp+var_4]
.text$mn:00005FCF                 mov     eax, [edx+14h]
.text$mn:00005FD2                 sub     eax, [ebp+arg_0]
.text$mn:00005FD5                 cmp     eax, [ebp+arg_4]
.text$mn:00005FD8                 ja      short loc_5FE8
.text$mn:00005FDA                 mov     ecx, [ebp+arg_0]
.text$mn:00005FDD                 push    ecx
.text$mn:00005FDE                 mov     ecx, [ebp+var_4]
.text$mn:00005FE1                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00005FE6                 jmp     short loc_602E
.text$mn:00005FE8 ; ---------------------------------------------------------------------------
.text$mn:00005FE8
.text$mn:00005FE8 loc_5FE8:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+28j
.text$mn:00005FE8                 cmp     [ebp+arg_4], 0
.text$mn:00005FEC                 jbe     short loc_602E
.text$mn:00005FEE                 mov     ecx, [ebp+var_4]
.text$mn:00005FF1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00005FF6                 add     eax, [ebp+arg_0]
.text$mn:00005FF9                 mov     [ebp+Dst], eax
.text$mn:00005FFC                 mov     edx, [ebp+var_4]
.text$mn:00005FFF                 mov     eax, [edx+14h]
.text$mn:00006002                 sub     eax, [ebp+arg_4]
.text$mn:00006005                 mov     [ebp+var_C], eax
.text$mn:00006008                 mov     ecx, [ebp+var_C]
.text$mn:0000600B                 sub     ecx, [ebp+arg_0]
.text$mn:0000600E                 push    ecx             ; Size
.text$mn:0000600F                 mov     edx, [ebp+Dst]
.text$mn:00006012                 add     edx, [ebp+arg_4]
.text$mn:00006015                 push    edx             ; Src
.text$mn:00006016                 mov     eax, [ebp+Dst]
.text$mn:00006019                 push    eax             ; Dst
.text$mn:0000601A                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:0000601F                 add     esp, 0Ch
.text$mn:00006022                 mov     ecx, [ebp+var_C]
.text$mn:00006025                 push    ecx
.text$mn:00006026                 mov     ecx, [ebp+var_4]
.text$mn:00006029                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000602E
.text$mn:0000602E loc_602E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+36j
.text$mn:0000602E                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+3Cj
.text$mn:0000602E                 mov     eax, [ebp+var_4]
.text$mn:00006031                 mov     esp, ebp
.text$mn:00006033                 pop     ebp
.text$mn:00006034                 retn    8
.text$mn:00006034 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z endp
.text$mn:00006034
.text$mn:00006034 ; ---------------------------------------------------------------------------
.text$mn:00006037                 align 4
.text$mn:00006037 _text$mn        ends
.text$mn:00006037
.text$mn:00006038 ; ===========================================================================
.text$mn:00006038
.text$mn:00006038 ; Segment type: Pure code
.text$mn:00006038 ; Segment permissions: Read/Execute
.text$mn:00006038 _text$mn        segment para public 'CODE' use32
.text$mn:00006038                 assume cs:_text$mn
.text$mn:00006038                 ;org 6038h
.text$mn:00006038 ; COMDAT (pick any)
.text$mn:00006038                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006038
.text$mn:00006038 ; =============== S U B R O U T I N E =======================================
.text$mn:00006038
.text$mn:00006038 ; Attributes: bp-based frame
.text$mn:00006038
.text$mn:00006038 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int)
.text$mn:00006038                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z
.text$mn:00006038 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z proc near
.text$mn:00006038                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Cp
.text$mn:00006038
.text$mn:00006038 var_4           = dword ptr -4
.text$mn:00006038 arg_0           = dword ptr  8
.text$mn:00006038
.text$mn:00006038                 push    ebp
.text$mn:00006039                 mov     ebp, esp
.text$mn:0000603B                 push    ecx
.text$mn:0000603C                 mov     [ebp+var_4], ecx
.text$mn:0000603F                 mov     eax, [ebp+var_4]
.text$mn:00006042                 mov     ecx, [eax+14h]
.text$mn:00006045                 cmp     ecx, [ebp+arg_0]
.text$mn:00006048                 jnb     short loc_6052
.text$mn:0000604A                 mov     ecx, [ebp+var_4]
.text$mn:0000604D                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00006052
.text$mn:00006052 loc_6052:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)+10j
.text$mn:00006052                 mov     edx, [ebp+arg_0]
.text$mn:00006055                 push    edx
.text$mn:00006056                 mov     ecx, [ebp+var_4]
.text$mn:00006059                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000605E                 mov     eax, [ebp+var_4]
.text$mn:00006061                 mov     esp, ebp
.text$mn:00006063                 pop     ebp
.text$mn:00006064                 retn    4
.text$mn:00006064 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z endp
.text$mn:00006064
.text$mn:00006064 ; ---------------------------------------------------------------------------
.text$mn:00006067                 align 4
.text$mn:00006067 _text$mn        ends
.text$mn:00006067
.text$mn:00006068 ; ===========================================================================
.text$mn:00006068
.text$mn:00006068 ; Segment type: Pure code
.text$mn:00006068 ; Segment permissions: Read/Execute
.text$mn:00006068 _text$mn        segment para public 'CODE' use32
.text$mn:00006068                 assume cs:_text$mn
.text$mn:00006068                 ;org 6068h
.text$mn:00006068 ; COMDAT (pick any)
.text$mn:00006068                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006068
.text$mn:00006068 ; =============== S U B R O U T I N E =======================================
.text$mn:00006068
.text$mn:00006068 ; Attributes: bp-based frame
.text$mn:00006068
.text$mn:00006068 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int, unsigned int)
.text$mn:00006068                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
.text$mn:00006068 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z proc near
.text$mn:00006068                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Ap
.text$mn:00006068                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+10Cp
.text$mn:00006068
.text$mn:00006068 var_C           = dword ptr -0Ch
.text$mn:00006068 Dst             = dword ptr -8
.text$mn:00006068 var_4           = dword ptr -4
.text$mn:00006068 arg_0           = dword ptr  8
.text$mn:00006068 arg_4           = dword ptr  0Ch
.text$mn:00006068
.text$mn:00006068                 push    ebp
.text$mn:00006069                 mov     ebp, esp
.text$mn:0000606B                 sub     esp, 0Ch
.text$mn:0000606E                 mov     [ebp+var_4], ecx
.text$mn:00006071                 mov     eax, [ebp+var_4]
.text$mn:00006074                 mov     ecx, [eax+14h]
.text$mn:00006077                 cmp     ecx, [ebp+arg_0]
.text$mn:0000607A                 jnb     short loc_6084
.text$mn:0000607C                 mov     ecx, [ebp+var_4]
.text$mn:0000607F                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00006084
.text$mn:00006084 loc_6084:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+12j
.text$mn:00006084                 mov     edx, [ebp+var_4]
.text$mn:00006087                 mov     eax, [edx+14h]
.text$mn:0000608A                 sub     eax, [ebp+arg_0]
.text$mn:0000608D                 cmp     eax, [ebp+arg_4]
.text$mn:00006090                 ja      short loc_60A0
.text$mn:00006092                 mov     ecx, [ebp+arg_0]
.text$mn:00006095                 push    ecx
.text$mn:00006096                 mov     ecx, [ebp+var_4]
.text$mn:00006099                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000609E                 jmp     short loc_60EC
.text$mn:000060A0 ; ---------------------------------------------------------------------------
.text$mn:000060A0
.text$mn:000060A0 loc_60A0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+28j
.text$mn:000060A0                 cmp     [ebp+arg_4], 0
.text$mn:000060A4                 jbe     short loc_60EC
.text$mn:000060A6                 mov     ecx, [ebp+var_4]
.text$mn:000060A9                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000060AE                 mov     edx, [ebp+arg_0]
.text$mn:000060B1                 lea     eax, [eax+edx*2]
.text$mn:000060B4                 mov     [ebp+Dst], eax
.text$mn:000060B7                 mov     ecx, [ebp+var_4]
.text$mn:000060BA                 mov     edx, [ecx+14h]
.text$mn:000060BD                 sub     edx, [ebp+arg_4]
.text$mn:000060C0                 mov     [ebp+var_C], edx
.text$mn:000060C3                 mov     eax, [ebp+var_C]
.text$mn:000060C6                 sub     eax, [ebp+arg_0]
.text$mn:000060C9                 push    eax             ; int
.text$mn:000060CA                 mov     ecx, [ebp+arg_4]
.text$mn:000060CD                 mov     edx, [ebp+Dst]
.text$mn:000060D0                 lea     eax, [edx+ecx*2]
.text$mn:000060D3                 push    eax             ; Src
.text$mn:000060D4                 mov     ecx, [ebp+Dst]
.text$mn:000060D7                 push    ecx             ; Dst
.text$mn:000060D8                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:000060DD                 add     esp, 0Ch
.text$mn:000060E0                 mov     edx, [ebp+var_C]
.text$mn:000060E3                 push    edx
.text$mn:000060E4                 mov     ecx, [ebp+var_4]
.text$mn:000060E7                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000060EC
.text$mn:000060EC loc_60EC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+36j
.text$mn:000060EC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+3Cj
.text$mn:000060EC                 mov     eax, [ebp+var_4]
.text$mn:000060EF                 mov     esp, ebp
.text$mn:000060F1                 pop     ebp
.text$mn:000060F2                 retn    8
.text$mn:000060F2 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z endp
.text$mn:000060F2
.text$mn:000060F2 ; ---------------------------------------------------------------------------
.text$mn:000060F5                 align 4
.text$mn:000060F5 _text$mn        ends
.text$mn:000060F5
.text$mn:000060F8 ; ===========================================================================
.text$mn:000060F8
.text$mn:000060F8 ; Segment type: Pure code
.text$mn:000060F8 ; Segment permissions: Read/Execute
.text$mn:000060F8 _text$mn        segment para public 'CODE' use32
.text$mn:000060F8                 assume cs:_text$mn
.text$mn:000060F8                 ;org 60F8h
.text$mn:000060F8 ; COMDAT (pick any)
.text$mn:000060F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000060F8
.text$mn:000060F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000060F8
.text$mn:000060F8 ; Attributes: bp-based frame
.text$mn:000060F8
.text$mn:000060F8 ; public: static wchar_t const * __cdecl std::char_traits<wchar_t>::find(wchar_t const *, unsigned int, wchar_t const &)
.text$mn:000060F8                 public ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z
.text$mn:000060F8 ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z proc near
.text$mn:000060F8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find_last_of(wchar_t const *,uint,uint)+7Fp
.text$mn:000060F8
.text$mn:000060F8 var_4           = dword ptr -4
.text$mn:000060F8 arg_0           = dword ptr  8
.text$mn:000060F8 arg_4           = dword ptr  0Ch
.text$mn:000060F8 arg_8           = dword ptr  10h
.text$mn:000060F8
.text$mn:000060F8                 push    ebp
.text$mn:000060F9                 mov     ebp, esp
.text$mn:000060FB                 push    ecx
.text$mn:000060FC                 cmp     [ebp+arg_4], 0
.text$mn:00006100                 jnz     short loc_610B
.text$mn:00006102                 mov     [ebp+var_4], 0
.text$mn:00006109                 jmp     short loc_6125
.text$mn:0000610B ; ---------------------------------------------------------------------------
.text$mn:0000610B
.text$mn:0000610B loc_610B:                               ; CODE XREF: std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)+8j
.text$mn:0000610B                 mov     eax, [ebp+arg_4]
.text$mn:0000610E                 push    eax
.text$mn:0000610F                 mov     ecx, [ebp+arg_8]
.text$mn:00006112                 movzx   edx, word ptr [ecx]
.text$mn:00006115                 push    edx
.text$mn:00006116                 mov     eax, [ebp+arg_0]
.text$mn:00006119                 push    eax
.text$mn:0000611A                 call    _wmemchr
.text$mn:0000611F                 add     esp, 0Ch
.text$mn:00006122                 mov     [ebp+var_4], eax
.text$mn:00006125
.text$mn:00006125 loc_6125:                               ; CODE XREF: std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)+11j
.text$mn:00006125                 mov     eax, [ebp+var_4]
.text$mn:00006128                 mov     esp, ebp
.text$mn:0000612A                 pop     ebp
.text$mn:0000612B                 retn
.text$mn:0000612B ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z endp
.text$mn:0000612B
.text$mn:0000612B _text$mn        ends
.text$mn:0000612B
.text$mn:0000612C ; ===========================================================================
.text$mn:0000612C
.text$mn:0000612C ; Segment type: Pure code
.text$mn:0000612C ; Segment permissions: Read/Execute
.text$mn:0000612C _text$mn        segment para public 'CODE' use32
.text$mn:0000612C                 assume cs:_text$mn
.text$mn:0000612C                 ;org 612Ch
.text$mn:0000612C ; COMDAT (pick any)
.text$mn:0000612C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000612C
.text$mn:0000612C ; =============== S U B R O U T I N E =======================================
.text$mn:0000612C
.text$mn:0000612C ; Attributes: bp-based frame
.text$mn:0000612C
.text$mn:0000612C ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find_last_of(wchar_t *Str, int)
.text$mn:0000612C                 public ?find_last_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z
.text$mn:0000612C ?find_last_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z proc near
.text$mn:0000612C                                         ; CODE XREF: changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+A3p
.text$mn:0000612C
.text$mn:0000612C var_4           = dword ptr -4
.text$mn:0000612C Str             = dword ptr  8
.text$mn:0000612C arg_4           = dword ptr  0Ch
.text$mn:0000612C
.text$mn:0000612C                 push    ebp
.text$mn:0000612D                 mov     ebp, esp
.text$mn:0000612F                 push    ecx
.text$mn:00006130                 mov     [ebp+var_4], ecx
.text$mn:00006133                 push    7F8h            ; unsigned int
.text$mn:00006138                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000613D                 mov     eax, [ebp+Str]
.text$mn:00006140                 push    eax             ; int
.text$mn:00006141                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00006146                 add     esp, 0Ch
.text$mn:00006149                 mov     ecx, [ebp+Str]
.text$mn:0000614C                 push    ecx             ; Str
.text$mn:0000614D                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:00006152                 add     esp, 4
.text$mn:00006155                 push    eax
.text$mn:00006156                 mov     edx, [ebp+arg_4]
.text$mn:00006159                 push    edx
.text$mn:0000615A                 mov     eax, [ebp+Str]
.text$mn:0000615D                 push    eax
.text$mn:0000615E                 mov     ecx, [ebp+var_4]
.text$mn:00006161                 call    ?find_last_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find_last_of(wchar_t const *,uint,uint)
.text$mn:00006166                 mov     esp, ebp
.text$mn:00006168                 pop     ebp
.text$mn:00006169                 retn    8
.text$mn:00006169 ?find_last_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z endp
.text$mn:00006169
.text$mn:00006169 _text$mn        ends
.text$mn:00006169
.text$mn:0000616C ; ===========================================================================
.text$mn:0000616C
.text$mn:0000616C ; Segment type: Pure code
.text$mn:0000616C ; Segment permissions: Read/Execute
.text$mn:0000616C _text$mn        segment para public 'CODE' use32
.text$mn:0000616C                 assume cs:_text$mn
.text$mn:0000616C                 ;org 616Ch
.text$mn:0000616C ; COMDAT (pick any)
.text$mn:0000616C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000616C
.text$mn:0000616C ; =============== S U B R O U T I N E =======================================
.text$mn:0000616C
.text$mn:0000616C ; Attributes: bp-based frame
.text$mn:0000616C
.text$mn:0000616C ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::find_last_of(wchar_t const *, unsigned int, unsigned int)const
.text$mn:0000616C                 public ?find_last_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z
.text$mn:0000616C ?find_last_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z proc near
.text$mn:0000616C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find_last_of(wchar_t const *,uint)+35p
.text$mn:0000616C
.text$mn:0000616C var_C           = dword ptr -0Ch
.text$mn:0000616C var_8           = dword ptr -8
.text$mn:0000616C var_4           = dword ptr -4
.text$mn:0000616C arg_0           = dword ptr  8
.text$mn:0000616C arg_4           = dword ptr  0Ch
.text$mn:0000616C arg_8           = dword ptr  10h
.text$mn:0000616C
.text$mn:0000616C                 push    ebp
.text$mn:0000616D                 mov     ebp, esp
.text$mn:0000616F                 sub     esp, 0Ch
.text$mn:00006172                 mov     [ebp+var_4], ecx
.text$mn:00006175                 cmp     [ebp+arg_8], 0
.text$mn:00006179                 jz      short loc_6191
.text$mn:0000617B                 push    7E4h            ; unsigned int
.text$mn:00006180                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00006185                 mov     eax, [ebp+arg_0]
.text$mn:00006188                 push    eax             ; int
.text$mn:00006189                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000618E                 add     esp, 0Ch
.text$mn:00006191
.text$mn:00006191 loc_6191:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find_last_of(wchar_t const *,uint,uint)+Dj
.text$mn:00006191                 cmp     [ebp+arg_8], 0
.text$mn:00006195                 jbe     loc_621D
.text$mn:0000619B                 mov     ecx, [ebp+var_4]
.text$mn:0000619E                 cmp     dword ptr [ecx+14h], 0
.text$mn:000061A2                 jbe     short loc_621D
.text$mn:000061A4                 mov     edx, [ebp+var_4]
.text$mn:000061A7                 mov     eax, [ebp+arg_4]
.text$mn:000061AA                 cmp     eax, [edx+14h]
.text$mn:000061AD                 jnb     short loc_61B7
.text$mn:000061AF                 mov     ecx, [ebp+arg_4]
.text$mn:000061B2                 mov     [ebp+var_C], ecx
.text$mn:000061B5                 jmp     short loc_61C3
.text$mn:000061B7 ; ---------------------------------------------------------------------------
.text$mn:000061B7
.text$mn:000061B7 loc_61B7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find_last_of(wchar_t const *,uint,uint)+41j
.text$mn:000061B7                 mov     edx, [ebp+var_4]
.text$mn:000061BA                 mov     eax, [edx+14h]
.text$mn:000061BD                 sub     eax, 1
.text$mn:000061C0                 mov     [ebp+var_C], eax
.text$mn:000061C3
.text$mn:000061C3 loc_61C3:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find_last_of(wchar_t const *,uint,uint)+49j
.text$mn:000061C3                 mov     ecx, [ebp+var_4]
.text$mn:000061C6                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000061CB                 mov     ecx, [ebp+var_C]
.text$mn:000061CE                 lea     edx, [eax+ecx*2]
.text$mn:000061D1                 mov     [ebp+var_8], edx
.text$mn:000061D4                 jmp     short loc_61DF
.text$mn:000061D6 ; ---------------------------------------------------------------------------
.text$mn:000061D6
.text$mn:000061D6 loc_61D6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find_last_of(wchar_t const *,uint,uint):loc_621Bj
.text$mn:000061D6                 mov     eax, [ebp+var_8]
.text$mn:000061D9                 sub     eax, 2
.text$mn:000061DC                 mov     [ebp+var_8], eax
.text$mn:000061DF
.text$mn:000061DF loc_61DF:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find_last_of(wchar_t const *,uint,uint)+68j
.text$mn:000061DF                 mov     ecx, [ebp+var_8]
.text$mn:000061E2                 push    ecx
.text$mn:000061E3                 mov     edx, [ebp+arg_8]
.text$mn:000061E6                 push    edx
.text$mn:000061E7                 mov     eax, [ebp+arg_0]
.text$mn:000061EA                 push    eax
.text$mn:000061EB                 call    ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z ; std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)
.text$mn:000061F0                 add     esp, 0Ch
.text$mn:000061F3                 test    eax, eax
.text$mn:000061F5                 jz      short loc_620C
.text$mn:000061F7                 mov     ecx, [ebp+var_4]
.text$mn:000061FA                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000061FF                 mov     ecx, [ebp+var_8]
.text$mn:00006202                 sub     ecx, eax
.text$mn:00006204                 sar     ecx, 1
.text$mn:00006206                 mov     eax, ecx
.text$mn:00006208                 jmp     short loc_6222
.text$mn:0000620A ; ---------------------------------------------------------------------------
.text$mn:0000620A                 jmp     short loc_621B
.text$mn:0000620C ; ---------------------------------------------------------------------------
.text$mn:0000620C
.text$mn:0000620C loc_620C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find_last_of(wchar_t const *,uint,uint)+89j
.text$mn:0000620C                 mov     ecx, [ebp+var_4]
.text$mn:0000620F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006214                 cmp     [ebp+var_8], eax
.text$mn:00006217                 jnz     short loc_621B
.text$mn:00006219                 jmp     short loc_621D
.text$mn:0000621B ; ---------------------------------------------------------------------------
.text$mn:0000621B
.text$mn:0000621B loc_621B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find_last_of(wchar_t const *,uint,uint)+9Ej
.text$mn:0000621B                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find_last_of(wchar_t const *,uint,uint)+ABj
.text$mn:0000621B                 jmp     short loc_61D6
.text$mn:0000621D ; ---------------------------------------------------------------------------
.text$mn:0000621D
.text$mn:0000621D loc_621D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find_last_of(wchar_t const *,uint,uint)+29j
.text$mn:0000621D                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find_last_of(wchar_t const *,uint,uint)+36j ...
.text$mn:0000621D                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00006222
.text$mn:00006222 loc_6222:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find_last_of(wchar_t const *,uint,uint)+9Cj
.text$mn:00006222                 mov     esp, ebp
.text$mn:00006224                 pop     ebp
.text$mn:00006225                 retn    0Ch
.text$mn:00006225 ?find_last_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z endp
.text$mn:00006225
.text$mn:00006225 _text$mn        ends
.text$mn:00006225
.text$mn:00006228 ; ===========================================================================
.text$mn:00006228
.text$mn:00006228 ; Segment type: Pure code
.text$mn:00006228 ; Segment permissions: Read/Execute
.text$mn:00006228 _text$mn        segment para public 'CODE' use32
.text$mn:00006228                 assume cs:_text$mn
.text$mn:00006228                 ;org 6228h
.text$mn:00006228 ; COMDAT (pick any)
.text$mn:00006228                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006228
.text$mn:00006228 ; =============== S U B R O U T I N E =======================================
.text$mn:00006228
.text$mn:00006228 ; Attributes: bp-based frame
.text$mn:00006228
.text$mn:00006228 ; const struct std::error_category *__cdecl std::generic_category()
.text$mn:00006228                 public ?generic_category@std@@YAABVerror_category@1@XZ
.text$mn:00006228 ?generic_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:00006228                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+17p
.text$mn:00006228                 push    ebp
.text$mn:00006229                 mov     ebp, esp
.text$mn:0000622B                 mov     eax, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.text$mn:00006230                 pop     ebp
.text$mn:00006231                 retn
.text$mn:00006231 ?generic_category@std@@YAABVerror_category@1@XZ endp
.text$mn:00006231
.text$mn:00006231 ; ---------------------------------------------------------------------------
.text$mn:00006232                 align 4
.text$mn:00006232 _text$mn        ends
.text$mn:00006232
.text$mn:00006234 ; ===========================================================================
.text$mn:00006234
.text$mn:00006234 ; Segment type: Pure code
.text$mn:00006234 ; Segment permissions: Read/Execute
.text$mn:00006234 _text$mn        segment para public 'CODE' use32
.text$mn:00006234                 assume cs:_text$mn
.text$mn:00006234                 ;org 6234h
.text$mn:00006234 ; COMDAT (pick any)
.text$mn:00006234                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006234
.text$mn:00006234 ; =============== S U B R O U T I N E =======================================
.text$mn:00006234
.text$mn:00006234 ; Attributes: bp-based frame
.text$mn:00006234
.text$mn:00006234 ; int __thiscall NppParameters::getFileSaveDlgFilterIndex(NppParameters *__hidden this)
.text$mn:00006234                 public ?getFileSaveDlgFilterIndex@NppParameters@@QBEHXZ
.text$mn:00006234 ?getFileSaveDlgFilterIndex@NppParameters@@QBEHXZ proc near
.text$mn:00006234                                         ; CODE XREF: FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+25p
.text$mn:00006234
.text$mn:00006234 var_4           = dword ptr -4
.text$mn:00006234
.text$mn:00006234                 push    ebp
.text$mn:00006235                 mov     ebp, esp
.text$mn:00006237                 push    ecx
.text$mn:00006238                 mov     [ebp+var_4], ecx
.text$mn:0000623B                 mov     eax, [ebp+var_4]
.text$mn:0000623E                 mov     eax, [eax+0B90h]
.text$mn:00006244                 mov     esp, ebp
.text$mn:00006246                 pop     ebp
.text$mn:00006247                 retn
.text$mn:00006247 ?getFileSaveDlgFilterIndex@NppParameters@@QBEHXZ endp
.text$mn:00006247
.text$mn:00006247 _text$mn        ends
.text$mn:00006247
.text$mn:00006248 ; ===========================================================================
.text$mn:00006248
.text$mn:00006248 ; Segment type: Pure code
.text$mn:00006248 ; Segment permissions: Read/Execute
.text$mn:00006248 _text$mn        segment para public 'CODE' use32
.text$mn:00006248                 assume cs:_text$mn
.text$mn:00006248                 ;org 6248h
.text$mn:00006248 ; COMDAT (pick any)
.text$mn:00006248                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006248
.text$mn:00006248 ; =============== S U B R O U T I N E =======================================
.text$mn:00006248
.text$mn:00006248 ; Attributes: bp-based frame
.text$mn:00006248
.text$mn:00006248 ; struct NppParameters *__cdecl NppParameters::getInstance()
.text$mn:00006248                 public ?getInstance@NppParameters@@SAPAV1@XZ
.text$mn:00006248 ?getInstance@NppParameters@@SAPAV1@XZ proc near
.text$mn:00006248                                         ; CODE XREF: FileDialog::FileDialog(HWND__ *,HINSTANCE__ *)+89p
.text$mn:00006248                                         ; FileDialog::doSaveDlg(void)+4Ap ...
.text$mn:00006248                 push    ebp
.text$mn:00006249                 mov     ebp, esp
.text$mn:0000624B                 mov     eax, dword ptr ds:?_pSelf@NppParameters@@0PAV1@A ; NppParameters * NppParameters::_pSelf
.text$mn:00006250                 pop     ebp
.text$mn:00006251                 retn
.text$mn:00006251 ?getInstance@NppParameters@@SAPAV1@XZ endp
.text$mn:00006251
.text$mn:00006251 ; ---------------------------------------------------------------------------
.text$mn:00006252                 align 4
.text$mn:00006252 _text$mn        ends
.text$mn:00006252
.text$mn:00006254 ; ===========================================================================
.text$mn:00006254
.text$mn:00006254 ; Segment type: Pure code
.text$mn:00006254 ; Segment permissions: Read/Execute
.text$mn:00006254 _text$mn        segment para public 'CODE' use32
.text$mn:00006254                 assume cs:_text$mn
.text$mn:00006254                 ;org 6254h
.text$mn:00006254 ; COMDAT (pick any)
.text$mn:00006254                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006254
.text$mn:00006254 ; =============== S U B R O U T I N E =======================================
.text$mn:00006254
.text$mn:00006254 ; Attributes: bp-based frame
.text$mn:00006254
.text$mn:00006254 ; const struct NppGUI *__thiscall NppParameters::getNppGUI(NppParameters *__hidden this)
.text$mn:00006254                 public ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ
.text$mn:00006254 ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ proc near
.text$mn:00006254                                         ; CODE XREF: FileDialog::doSaveDlg(void)+105p
.text$mn:00006254                                         ; FileDialog::doOpenMultiFilesDlg(void)+A1p ...
.text$mn:00006254
.text$mn:00006254 var_4           = dword ptr -4
.text$mn:00006254
.text$mn:00006254                 push    ebp
.text$mn:00006255                 mov     ebp, esp
.text$mn:00006257                 push    ecx
.text$mn:00006258                 mov     [ebp+var_4], ecx
.text$mn:0000625B                 mov     eax, [ebp+var_4]
.text$mn:0000625E                 add     eax, 118h
.text$mn:00006263                 mov     esp, ebp
.text$mn:00006265                 pop     ebp
.text$mn:00006266                 retn
.text$mn:00006266 ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ endp
.text$mn:00006266
.text$mn:00006266 ; ---------------------------------------------------------------------------
.text$mn:00006267                 align 4
.text$mn:00006267 _text$mn        ends
.text$mn:00006267
.text$mn:00006268 ; ===========================================================================
.text$mn:00006268
.text$mn:00006268 ; Segment type: Pure code
.text$mn:00006268 ; Segment permissions: Read/Execute
.text$mn:00006268 _text$mn        segment para public 'CODE' use32
.text$mn:00006268                 assume cs:_text$mn
.text$mn:00006268                 ;org 6268h
.text$mn:00006268 ; COMDAT (pick any)
.text$mn:00006268                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006268
.text$mn:00006268 ; =============== S U B R O U T I N E =======================================
.text$mn:00006268
.text$mn:00006268 ; Attributes: bp-based frame
.text$mn:00006268
.text$mn:00006268 ; public: enum  winVer __thiscall NppParameters::getWinVersion(void)
.text$mn:00006268                 public ?getWinVersion@NppParameters@@QAE?AW4winVer@@XZ
.text$mn:00006268 ?getWinVersion@NppParameters@@QAE?AW4winVer@@XZ proc near
.text$mn:00006268                                         ; CODE XREF: FileDialog::FileDialog(HWND__ *,HINSTANCE__ *)+90p
.text$mn:00006268
.text$mn:00006268 var_4           = dword ptr -4
.text$mn:00006268
.text$mn:00006268                 push    ebp
.text$mn:00006269                 mov     ebp, esp
.text$mn:0000626B                 push    ecx
.text$mn:0000626C                 mov     [ebp+var_4], ecx
.text$mn:0000626F                 mov     eax, [ebp+var_4]
.text$mn:00006272                 mov     eax, [eax+1CC1Ch]
.text$mn:00006278                 mov     esp, ebp
.text$mn:0000627A                 pop     ebp
.text$mn:0000627B                 retn
.text$mn:0000627B ?getWinVersion@NppParameters@@QAE?AW4winVer@@XZ endp
.text$mn:0000627B
.text$mn:0000627B _text$mn        ends
.text$mn:0000627B
.text$mn:0000627C ; ===========================================================================
.text$mn:0000627C
.text$mn:0000627C ; Segment type: Pure code
.text$mn:0000627C ; Segment permissions: Read/Execute
.text$mn:0000627C _text$mn        segment para public 'CODE' use32
.text$mn:0000627C                 assume cs:_text$mn
.text$mn:0000627C                 ;org 627Ch
.text$mn:0000627C ; COMDAT (pick any)
.text$mn:0000627C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000627C
.text$mn:0000627C ; =============== S U B R O U T I N E =======================================
.text$mn:0000627C
.text$mn:0000627C ; Attributes: bp-based frame
.text$mn:0000627C
.text$mn:0000627C ; const wchar_t *__thiscall NppParameters::getWorkingDir(NppParameters *__hidden this)
.text$mn:0000627C                 public ?getWorkingDir@NppParameters@@QBEPB_WXZ
.text$mn:0000627C ?getWorkingDir@NppParameters@@QBEPB_WXZ proc near
.text$mn:0000627C                                         ; CODE XREF: FileDialog::doSaveDlg(void)+5Bp
.text$mn:0000627C                                         ; FileDialog::doOpenMultiFilesDlg(void)+54p ...
.text$mn:0000627C
.text$mn:0000627C var_4           = dword ptr -4
.text$mn:0000627C
.text$mn:0000627C                 push    ebp
.text$mn:0000627D                 mov     ebp, esp
.text$mn:0000627F                 push    ecx
.text$mn:00006280                 mov     [ebp+var_4], ecx
.text$mn:00006283                 mov     ecx, [ebp+var_4]
.text$mn:00006286                 add     ecx, 1CB30h
.text$mn:0000628C                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00006291                 mov     esp, ebp
.text$mn:00006293                 pop     ebp
.text$mn:00006294                 retn
.text$mn:00006294 ?getWorkingDir@NppParameters@@QBEPB_WXZ endp
.text$mn:00006294
.text$mn:00006294 ; ---------------------------------------------------------------------------
.text$mn:00006295                 align 4
.text$mn:00006295 _text$mn        ends
.text$mn:00006295
.text$mn:00006298 ; ===========================================================================
.text$mn:00006298
.text$mn:00006298 ; Segment type: Pure code
.text$mn:00006298 ; Segment permissions: Read/Execute
.text$mn:00006298 _text$mn        segment para public 'CODE' use32
.text$mn:00006298                 assume cs:_text$mn
.text$mn:00006298                 ;org 6298h
.text$mn:00006298 ; COMDAT (pick any)
.text$mn:00006298                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006298
.text$mn:00006298 ; =============== S U B R O U T I N E =======================================
.text$mn:00006298
.text$mn:00006298 ; Attributes: bp-based frame
.text$mn:00006298
.text$mn:00006298 ; public: class std::allocator<wchar_t> __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::get_allocator(void)const
.text$mn:00006298                 public ?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ
.text$mn:00006298 ?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ proc near
.text$mn:00006298                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::substr(uint,uint)+36p
.text$mn:00006298
.text$mn:00006298 var_8           = dword ptr -8
.text$mn:00006298 var_1           = byte ptr -1
.text$mn:00006298 arg_0           = dword ptr  8
.text$mn:00006298
.text$mn:00006298                 push    ebp
.text$mn:00006299                 mov     ebp, esp
.text$mn:0000629B                 sub     esp, 8
.text$mn:0000629E                 mov     [ebp+var_8], ecx
.text$mn:000062A1                 lea     eax, [ebp+var_1]
.text$mn:000062A4                 push    eax
.text$mn:000062A5                 mov     ecx, [ebp+var_8]
.text$mn:000062A8                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000062AD                 push    eax
.text$mn:000062AE                 mov     ecx, [ebp+arg_0]
.text$mn:000062B1                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:000062B6                 mov     eax, [ebp+arg_0]
.text$mn:000062B9                 mov     esp, ebp
.text$mn:000062BB                 pop     ebp
.text$mn:000062BC                 retn    4
.text$mn:000062BC ?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ endp
.text$mn:000062BC
.text$mn:000062BC ; ---------------------------------------------------------------------------
.text$mn:000062BF                 align 10h
.text$mn:000062BF _text$mn        ends
.text$mn:000062BF
.text$mn:000062C0 ; ===========================================================================
.text$mn:000062C0
.text$mn:000062C0 ; Segment type: Pure code
.text$mn:000062C0 ; Segment permissions: Read/Execute
.text$mn:000062C0 _text$mn        segment para public 'CODE' use32
.text$mn:000062C0                 assume cs:_text$mn
.text$mn:000062C0                 ;org 62C0h
.text$mn:000062C0 ; COMDAT (pick any)
.text$mn:000062C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000062C0
.text$mn:000062C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000062C0
.text$mn:000062C0 ; Attributes: bp-based frame
.text$mn:000062C0
.text$mn:000062C0 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::length(void)const
.text$mn:000062C0                 public ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:000062C0 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:000062C0                                         ; CODE XREF: changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+ECp
.text$mn:000062C0                                         ; changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+F6p ...
.text$mn:000062C0
.text$mn:000062C0 var_4           = dword ptr -4
.text$mn:000062C0
.text$mn:000062C0                 push    ebp
.text$mn:000062C1                 mov     ebp, esp
.text$mn:000062C3                 push    ecx
.text$mn:000062C4                 mov     [ebp+var_4], ecx
.text$mn:000062C7                 mov     eax, [ebp+var_4]
.text$mn:000062CA                 mov     eax, [eax+14h]
.text$mn:000062CD                 mov     esp, ebp
.text$mn:000062CF                 pop     ebp
.text$mn:000062D0                 retn
.text$mn:000062D0 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:000062D0
.text$mn:000062D0 ; ---------------------------------------------------------------------------
.text$mn:000062D1                 align 4
.text$mn:000062D1 _text$mn        ends
.text$mn:000062D1
.text$mn:000062D4 ; ===========================================================================
.text$mn:000062D4
.text$mn:000062D4 ; Segment type: Pure code
.text$mn:000062D4 ; Segment permissions: Read/Execute
.text$mn:000062D4 _text$mn        segment para public 'CODE' use32
.text$mn:000062D4                 assume cs:_text$mn
.text$mn:000062D4                 ;org 62D4h
.text$mn:000062D4 ; COMDAT (pick any)
.text$mn:000062D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000062D4
.text$mn:000062D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000062D4
.text$mn:000062D4 ; Attributes: bp-based frame
.text$mn:000062D4
.text$mn:000062D4 ; int __cdecl std::char_traits<char>::length(char *Str)
.text$mn:000062D4                 public ?length@?$char_traits@D@std@@SAIPBD@Z
.text$mn:000062D4 ?length@?$char_traits@D@std@@SAIPBD@Z proc near
.text$mn:000062D4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+21p
.text$mn:000062D4
.text$mn:000062D4 var_4           = dword ptr -4
.text$mn:000062D4 Str             = dword ptr  8
.text$mn:000062D4
.text$mn:000062D4                 push    ebp
.text$mn:000062D5                 mov     ebp, esp
.text$mn:000062D7                 push    ecx
.text$mn:000062D8                 mov     eax, [ebp+Str]
.text$mn:000062DB                 movsx   ecx, byte ptr [eax]
.text$mn:000062DE                 test    ecx, ecx
.text$mn:000062E0                 jnz     short loc_62EB
.text$mn:000062E2                 mov     [ebp+var_4], 0
.text$mn:000062E9                 jmp     short loc_62FA
.text$mn:000062EB ; ---------------------------------------------------------------------------
.text$mn:000062EB
.text$mn:000062EB loc_62EB:                               ; CODE XREF: std::char_traits<char>::length(char const *)+Cj
.text$mn:000062EB                 mov     edx, [ebp+Str]
.text$mn:000062EE                 push    edx             ; Str
.text$mn:000062EF                 call    _strlen
.text$mn:000062F4                 add     esp, 4
.text$mn:000062F7                 mov     [ebp+var_4], eax
.text$mn:000062FA
.text$mn:000062FA loc_62FA:                               ; CODE XREF: std::char_traits<char>::length(char const *)+15j
.text$mn:000062FA                 mov     eax, [ebp+var_4]
.text$mn:000062FD                 mov     esp, ebp
.text$mn:000062FF                 pop     ebp
.text$mn:00006300                 retn
.text$mn:00006300 ?length@?$char_traits@D@std@@SAIPBD@Z endp
.text$mn:00006300
.text$mn:00006300 ; ---------------------------------------------------------------------------
.text$mn:00006301                 align 4
.text$mn:00006301 _text$mn        ends
.text$mn:00006301
.text$mn:00006304 ; ===========================================================================
.text$mn:00006304
.text$mn:00006304 ; Segment type: Pure code
.text$mn:00006304 ; Segment permissions: Read/Execute
.text$mn:00006304 _text$mn        segment para public 'CODE' use32
.text$mn:00006304                 assume cs:_text$mn
.text$mn:00006304                 ;org 6304h
.text$mn:00006304 ; COMDAT (pick any)
.text$mn:00006304                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006304
.text$mn:00006304 ; =============== S U B R O U T I N E =======================================
.text$mn:00006304
.text$mn:00006304 ; Attributes: bp-based frame
.text$mn:00006304
.text$mn:00006304 ; int __cdecl std::char_traits<wchar_t>::length(wchar_t *Str)
.text$mn:00006304                 public ?length@?$char_traits@_W@std@@SAIPB_W@Z
.text$mn:00006304 ?length@?$char_traits@_W@std@@SAIPB_W@Z proc near
.text$mn:00006304                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+21p
.text$mn:00006304                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+21p ...
.text$mn:00006304
.text$mn:00006304 var_4           = dword ptr -4
.text$mn:00006304 Str             = dword ptr  8
.text$mn:00006304
.text$mn:00006304                 push    ebp
.text$mn:00006305                 mov     ebp, esp
.text$mn:00006307                 push    ecx
.text$mn:00006308                 mov     eax, [ebp+Str]
.text$mn:0000630B                 movzx   ecx, word ptr [eax]
.text$mn:0000630E                 test    ecx, ecx
.text$mn:00006310                 jnz     short loc_631B
.text$mn:00006312                 mov     [ebp+var_4], 0
.text$mn:00006319                 jmp     short loc_632A
.text$mn:0000631B ; ---------------------------------------------------------------------------
.text$mn:0000631B
.text$mn:0000631B loc_631B:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+Cj
.text$mn:0000631B                 mov     edx, [ebp+Str]
.text$mn:0000631E                 push    edx             ; Str
.text$mn:0000631F                 call    _wcslen
.text$mn:00006324                 add     esp, 4
.text$mn:00006327                 mov     [ebp+var_4], eax
.text$mn:0000632A
.text$mn:0000632A loc_632A:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+15j
.text$mn:0000632A                 mov     eax, [ebp+var_4]
.text$mn:0000632D                 mov     esp, ebp
.text$mn:0000632F                 pop     ebp
.text$mn:00006330                 retn
.text$mn:00006330 ?length@?$char_traits@_W@std@@SAIPB_W@Z endp
.text$mn:00006330
.text$mn:00006330 ; ---------------------------------------------------------------------------
.text$mn:00006331                 align 4
.text$mn:00006331 _text$mn        ends
.text$mn:00006331
.text$mn:00006334 ; ===========================================================================
.text$mn:00006334
.text$mn:00006334 ; Segment type: Pure code
.text$mn:00006334 ; Segment permissions: Read/Execute
.text$mn:00006334 _text$mn        segment para public 'CODE' use32
.text$mn:00006334                 assume cs:_text$mn
.text$mn:00006334                 ;org 6334h
.text$mn:00006334 ; COMDAT (pick any)
.text$mn:00006334                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006334
.text$mn:00006334 ; =============== S U B R O U T I N E =======================================
.text$mn:00006334
.text$mn:00006334 ; Attributes: bp-based frame
.text$mn:00006334
.text$mn:00006334 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<char>>::max_size(void)const
.text$mn:00006334                 public ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
.text$mn:00006334 ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
.text$mn:00006334                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+17p
.text$mn:00006334
.text$mn:00006334 var_4           = dword ptr -4
.text$mn:00006334
.text$mn:00006334                 push    ebp
.text$mn:00006335                 mov     ebp, esp
.text$mn:00006337                 push    ecx
.text$mn:00006338                 mov     [ebp+var_4], ecx
.text$mn:0000633B                 mov     eax, [ebp+var_4]
.text$mn:0000633E                 push    eax
.text$mn:0000633F                 call    ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)
.text$mn:00006344                 add     esp, 4
.text$mn:00006347                 mov     esp, ebp
.text$mn:00006349                 pop     ebp
.text$mn:0000634A                 retn
.text$mn:0000634A ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ endp
.text$mn:0000634A
.text$mn:0000634A ; ---------------------------------------------------------------------------
.text$mn:0000634B                 align 4
.text$mn:0000634B _text$mn        ends
.text$mn:0000634B
.text$mn:0000634C ; ===========================================================================
.text$mn:0000634C
.text$mn:0000634C ; Segment type: Pure code
.text$mn:0000634C ; Segment permissions: Read/Execute
.text$mn:0000634C _text$mn        segment para public 'CODE' use32
.text$mn:0000634C                 assume cs:_text$mn
.text$mn:0000634C                 ;org 634Ch
.text$mn:0000634C ; COMDAT (pick any)
.text$mn:0000634C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000634C
.text$mn:0000634C ; =============== S U B R O U T I N E =======================================
.text$mn:0000634C
.text$mn:0000634C ; Attributes: bp-based frame
.text$mn:0000634C
.text$mn:0000634C ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::max_size(void)const
.text$mn:0000634C                 public ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ
.text$mn:0000634C ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ proc near
.text$mn:0000634C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)+17p
.text$mn:0000634C
.text$mn:0000634C var_4           = dword ptr -4
.text$mn:0000634C
.text$mn:0000634C                 push    ebp
.text$mn:0000634D                 mov     ebp, esp
.text$mn:0000634F                 push    ecx
.text$mn:00006350                 mov     [ebp+var_4], ecx
.text$mn:00006353                 mov     eax, [ebp+var_4]
.text$mn:00006356                 push    eax
.text$mn:00006357                 call    ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)
.text$mn:0000635C                 add     esp, 4
.text$mn:0000635F                 mov     esp, ebp
.text$mn:00006361                 pop     ebp
.text$mn:00006362                 retn
.text$mn:00006362 ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ endp
.text$mn:00006362
.text$mn:00006362 ; ---------------------------------------------------------------------------
.text$mn:00006363                 align 4
.text$mn:00006363 _text$mn        ends
.text$mn:00006363
.text$mn:00006364 ; ===========================================================================
.text$mn:00006364
.text$mn:00006364 ; Segment type: Pure code
.text$mn:00006364 ; Segment permissions: Read/Execute
.text$mn:00006364 _text$mn        segment para public 'CODE' use32
.text$mn:00006364                 assume cs:_text$mn
.text$mn:00006364                 ;org 6364h
.text$mn:00006364 ; COMDAT (pick any)
.text$mn:00006364                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006364
.text$mn:00006364 ; =============== S U B R O U T I N E =======================================
.text$mn:00006364
.text$mn:00006364 ; Attributes: bp-based frame
.text$mn:00006364
.text$mn:00006364 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::max_size(void)const
.text$mn:00006364                 public ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ
.text$mn:00006364 ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ proc near
.text$mn:00006364                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+17p
.text$mn:00006364
.text$mn:00006364 var_4           = dword ptr -4
.text$mn:00006364
.text$mn:00006364                 push    ebp
.text$mn:00006365                 mov     ebp, esp
.text$mn:00006367                 push    ecx
.text$mn:00006368                 mov     [ebp+var_4], ecx
.text$mn:0000636B                 mov     eax, [ebp+var_4]
.text$mn:0000636E                 push    eax
.text$mn:0000636F                 call    ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)
.text$mn:00006374                 add     esp, 4
.text$mn:00006377                 mov     esp, ebp
.text$mn:00006379                 pop     ebp
.text$mn:0000637A                 retn
.text$mn:0000637A ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ endp
.text$mn:0000637A
.text$mn:0000637A ; ---------------------------------------------------------------------------
.text$mn:0000637B                 align 4
.text$mn:0000637B _text$mn        ends
.text$mn:0000637B
.text$mn:0000637C ; ===========================================================================
.text$mn:0000637C
.text$mn:0000637C ; Segment type: Pure code
.text$mn:0000637C ; Segment permissions: Read/Execute
.text$mn:0000637C _text$mn        segment para public 'CODE' use32
.text$mn:0000637C                 assume cs:_text$mn
.text$mn:0000637C                 ;org 637Ch
.text$mn:0000637C ; COMDAT (pick any)
.text$mn:0000637C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000637C
.text$mn:0000637C ; =============== S U B R O U T I N E =======================================
.text$mn:0000637C
.text$mn:0000637C ; Attributes: bp-based frame
.text$mn:0000637C
.text$mn:0000637C ; public: unsigned int __thiscall std::allocator<char>::max_size(void)const
.text$mn:0000637C                 public ?max_size@?$allocator@D@std@@QBEIXZ
.text$mn:0000637C ?max_size@?$allocator@D@std@@QBEIXZ proc near
.text$mn:0000637C                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)+6p
.text$mn:0000637C
.text$mn:0000637C var_4           = dword ptr -4
.text$mn:0000637C
.text$mn:0000637C                 push    ebp
.text$mn:0000637D                 mov     ebp, esp
.text$mn:0000637F                 push    ecx
.text$mn:00006380                 mov     [ebp+var_4], ecx
.text$mn:00006383                 or      eax, 0FFFFFFFFh
.text$mn:00006386                 mov     esp, ebp
.text$mn:00006388                 pop     ebp
.text$mn:00006389                 retn
.text$mn:00006389 ?max_size@?$allocator@D@std@@QBEIXZ endp
.text$mn:00006389
.text$mn:00006389 ; ---------------------------------------------------------------------------
.text$mn:0000638A                 align 4
.text$mn:0000638A _text$mn        ends
.text$mn:0000638A
.text$mn:0000638C ; ===========================================================================
.text$mn:0000638C
.text$mn:0000638C ; Segment type: Pure code
.text$mn:0000638C ; Segment permissions: Read/Execute
.text$mn:0000638C _text$mn        segment para public 'CODE' use32
.text$mn:0000638C                 assume cs:_text$mn
.text$mn:0000638C                 ;org 638Ch
.text$mn:0000638C ; COMDAT (pick any)
.text$mn:0000638C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000638C
.text$mn:0000638C ; =============== S U B R O U T I N E =======================================
.text$mn:0000638C
.text$mn:0000638C ; Attributes: bp-based frame
.text$mn:0000638C
.text$mn:0000638C ; public: unsigned int __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::max_size(void)const
.text$mn:0000638C                 public ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ
.text$mn:0000638C ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ proc near
.text$mn:0000638C                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+6p
.text$mn:0000638C
.text$mn:0000638C var_4           = dword ptr -4
.text$mn:0000638C
.text$mn:0000638C                 push    ebp
.text$mn:0000638D                 mov     ebp, esp
.text$mn:0000638F                 push    ecx
.text$mn:00006390                 mov     [ebp+var_4], ecx
.text$mn:00006393                 mov     eax, 9249249h
.text$mn:00006398                 mov     esp, ebp
.text$mn:0000639A                 pop     ebp
.text$mn:0000639B                 retn
.text$mn:0000639B ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ endp
.text$mn:0000639B
.text$mn:0000639B _text$mn        ends
.text$mn:0000639B
.text$mn:0000639C ; ===========================================================================
.text$mn:0000639C
.text$mn:0000639C ; Segment type: Pure code
.text$mn:0000639C ; Segment permissions: Read/Execute
.text$mn:0000639C _text$mn        segment para public 'CODE' use32
.text$mn:0000639C                 assume cs:_text$mn
.text$mn:0000639C                 ;org 639Ch
.text$mn:0000639C ; COMDAT (pick any)
.text$mn:0000639C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000639C
.text$mn:0000639C ; =============== S U B R O U T I N E =======================================
.text$mn:0000639C
.text$mn:0000639C ; Attributes: bp-based frame
.text$mn:0000639C
.text$mn:0000639C ; public: unsigned int __thiscall std::allocator<wchar_t>::max_size(void)const
.text$mn:0000639C                 public ?max_size@?$allocator@_W@std@@QBEIXZ
.text$mn:0000639C ?max_size@?$allocator@_W@std@@QBEIXZ proc near
.text$mn:0000639C                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)+6p
.text$mn:0000639C
.text$mn:0000639C var_4           = dword ptr -4
.text$mn:0000639C
.text$mn:0000639C                 push    ebp
.text$mn:0000639D                 mov     ebp, esp
.text$mn:0000639F                 push    ecx
.text$mn:000063A0                 mov     [ebp+var_4], ecx
.text$mn:000063A3                 mov     eax, 7FFFFFFFh
.text$mn:000063A8                 mov     esp, ebp
.text$mn:000063AA                 pop     ebp
.text$mn:000063AB                 retn
.text$mn:000063AB ?max_size@?$allocator@_W@std@@QBEIXZ endp
.text$mn:000063AB
.text$mn:000063AB _text$mn        ends
.text$mn:000063AB
.text$mn:000063AC ; ===========================================================================
.text$mn:000063AC
.text$mn:000063AC ; Segment type: Pure code
.text$mn:000063AC ; Segment permissions: Read/Execute
.text$mn:000063AC _text$mn        segment para public 'CODE' use32
.text$mn:000063AC                 assume cs:_text$mn
.text$mn:000063AC                 ;org 63ACh
.text$mn:000063AC ; COMDAT (pick any)
.text$mn:000063AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000063AC
.text$mn:000063AC ; =============== S U B R O U T I N E =======================================
.text$mn:000063AC
.text$mn:000063AC ; Attributes: bp-based frame
.text$mn:000063AC
.text$mn:000063AC ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<char>>::max_size(class std::allocator<char> const &)
.text$mn:000063AC                 public ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
.text$mn:000063AC ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z proc near
.text$mn:000063AC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::max_size(void)+Bp
.text$mn:000063AC
.text$mn:000063AC arg_0           = dword ptr  8
.text$mn:000063AC
.text$mn:000063AC                 push    ebp
.text$mn:000063AD                 mov     ebp, esp
.text$mn:000063AF                 mov     ecx, [ebp+arg_0]
.text$mn:000063B2                 call    ?max_size@?$allocator@D@std@@QBEIXZ ; std::allocator<char>::max_size(void)
.text$mn:000063B7                 pop     ebp
.text$mn:000063B8                 retn
.text$mn:000063B8 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z endp
.text$mn:000063B8
.text$mn:000063B8 ; ---------------------------------------------------------------------------
.text$mn:000063B9                 align 4
.text$mn:000063B9 _text$mn        ends
.text$mn:000063B9
.text$mn:000063BC ; ===========================================================================
.text$mn:000063BC
.text$mn:000063BC ; Segment type: Pure code
.text$mn:000063BC ; Segment permissions: Read/Execute
.text$mn:000063BC _text$mn        segment para public 'CODE' use32
.text$mn:000063BC                 assume cs:_text$mn
.text$mn:000063BC                 ;org 63BCh
.text$mn:000063BC ; COMDAT (pick any)
.text$mn:000063BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000063BC
.text$mn:000063BC ; =============== S U B R O U T I N E =======================================
.text$mn:000063BC
.text$mn:000063BC ; Attributes: bp-based frame
.text$mn:000063BC
.text$mn:000063BC ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::max_size(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> const &)
.text$mn:000063BC                 public ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z
.text$mn:000063BC ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z proc near
.text$mn:000063BC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)+Bp
.text$mn:000063BC
.text$mn:000063BC arg_0           = dword ptr  8
.text$mn:000063BC
.text$mn:000063BC                 push    ebp
.text$mn:000063BD                 mov     ebp, esp
.text$mn:000063BF                 mov     ecx, [ebp+arg_0]
.text$mn:000063C2                 call    ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::max_size(void)
.text$mn:000063C7                 pop     ebp
.text$mn:000063C8                 retn
.text$mn:000063C8 ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z endp
.text$mn:000063C8
.text$mn:000063C8 ; ---------------------------------------------------------------------------
.text$mn:000063C9                 align 4
.text$mn:000063C9 _text$mn        ends
.text$mn:000063C9
.text$mn:000063CC ; ===========================================================================
.text$mn:000063CC
.text$mn:000063CC ; Segment type: Pure code
.text$mn:000063CC ; Segment permissions: Read/Execute
.text$mn:000063CC _text$mn        segment para public 'CODE' use32
.text$mn:000063CC                 assume cs:_text$mn
.text$mn:000063CC                 ;org 63CCh
.text$mn:000063CC ; COMDAT (pick any)
.text$mn:000063CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000063CC
.text$mn:000063CC ; =============== S U B R O U T I N E =======================================
.text$mn:000063CC
.text$mn:000063CC ; Attributes: bp-based frame
.text$mn:000063CC
.text$mn:000063CC ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<wchar_t>>::max_size(class std::allocator<wchar_t> const &)
.text$mn:000063CC                 public ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
.text$mn:000063CC ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z proc near
.text$mn:000063CC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)+Bp
.text$mn:000063CC
.text$mn:000063CC arg_0           = dword ptr  8
.text$mn:000063CC
.text$mn:000063CC                 push    ebp
.text$mn:000063CD                 mov     ebp, esp
.text$mn:000063CF                 mov     ecx, [ebp+arg_0]
.text$mn:000063D2                 call    ?max_size@?$allocator@_W@std@@QBEIXZ ; std::allocator<wchar_t>::max_size(void)
.text$mn:000063D7                 pop     ebp
.text$mn:000063D8                 retn
.text$mn:000063D8 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z endp
.text$mn:000063D8
.text$mn:000063D8 ; ---------------------------------------------------------------------------
.text$mn:000063D9                 align 4
.text$mn:000063D9 _text$mn        ends
.text$mn:000063D9
.text$mn:000063DC ; ===========================================================================
.text$mn:000063DC
.text$mn:000063DC ; Segment type: Pure code
.text$mn:000063DC ; Segment permissions: Read/Execute
.text$mn:000063DC _text$mn        segment para public 'CODE' use32
.text$mn:000063DC                 assume cs:_text$mn
.text$mn:000063DC                 ;org 63DCh
.text$mn:000063DC ; COMDAT (pick any)
.text$mn:000063DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000063DC
.text$mn:000063DC ; =============== S U B R O U T I N E =======================================
.text$mn:000063DC
.text$mn:000063DC ; Attributes: bp-based frame
.text$mn:000063DC
.text$mn:000063DC ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::max_size(void)const
.text$mn:000063DC                 public ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:000063DC ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:000063DC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+3Bp
.text$mn:000063DC                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+6Ap ...
.text$mn:000063DC
.text$mn:000063DC var_10          = dword ptr -10h
.text$mn:000063DC var_C           = dword ptr -0Ch
.text$mn:000063DC var_8           = dword ptr -8
.text$mn:000063DC var_1           = byte ptr -1
.text$mn:000063DC
.text$mn:000063DC                 push    ebp
.text$mn:000063DD                 mov     ebp, esp
.text$mn:000063DF                 sub     esp, 10h
.text$mn:000063E2                 mov     [ebp+var_10], ecx
.text$mn:000063E5                 lea     eax, [ebp+var_1]
.text$mn:000063E8                 push    eax
.text$mn:000063E9                 mov     ecx, [ebp+var_10]
.text$mn:000063EC                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000063F1                 mov     ecx, eax
.text$mn:000063F3                 call    ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char>>::max_size(void)
.text$mn:000063F8                 mov     [ebp+var_8], eax
.text$mn:000063FB                 cmp     [ebp+var_8], 1
.text$mn:000063FF                 ja      short loc_640A
.text$mn:00006401                 mov     [ebp+var_C], 1
.text$mn:00006408                 jmp     short loc_6413
.text$mn:0000640A ; ---------------------------------------------------------------------------
.text$mn:0000640A
.text$mn:0000640A loc_640A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+23j
.text$mn:0000640A                 mov     ecx, [ebp+var_8]
.text$mn:0000640D                 sub     ecx, 1
.text$mn:00006410                 mov     [ebp+var_C], ecx
.text$mn:00006413
.text$mn:00006413 loc_6413:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+2Cj
.text$mn:00006413                 mov     eax, [ebp+var_C]
.text$mn:00006416                 mov     esp, ebp
.text$mn:00006418                 pop     ebp
.text$mn:00006419                 retn
.text$mn:00006419 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:00006419
.text$mn:00006419 ; ---------------------------------------------------------------------------
.text$mn:0000641A                 align 4
.text$mn:0000641A _text$mn        ends
.text$mn:0000641A
.text$mn:0000641C ; ===========================================================================
.text$mn:0000641C
.text$mn:0000641C ; Segment type: Pure code
.text$mn:0000641C ; Segment permissions: Read/Execute
.text$mn:0000641C _text$mn        segment para public 'CODE' use32
.text$mn:0000641C                 assume cs:_text$mn
.text$mn:0000641C                 ;org 641Ch
.text$mn:0000641C ; COMDAT (pick any)
.text$mn:0000641C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000641C
.text$mn:0000641C ; =============== S U B R O U T I N E =======================================
.text$mn:0000641C
.text$mn:0000641C ; Attributes: bp-based frame
.text$mn:0000641C
.text$mn:0000641C ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::max_size(void)const
.text$mn:0000641C                 public ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:0000641C ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:0000641C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+3Bp
.text$mn:0000641C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+6Ap ...
.text$mn:0000641C
.text$mn:0000641C var_10          = dword ptr -10h
.text$mn:0000641C var_C           = dword ptr -0Ch
.text$mn:0000641C var_8           = dword ptr -8
.text$mn:0000641C var_1           = byte ptr -1
.text$mn:0000641C
.text$mn:0000641C                 push    ebp
.text$mn:0000641D                 mov     ebp, esp
.text$mn:0000641F                 sub     esp, 10h
.text$mn:00006422                 mov     [ebp+var_10], ecx
.text$mn:00006425                 lea     eax, [ebp+var_1]
.text$mn:00006428                 push    eax
.text$mn:00006429                 mov     ecx, [ebp+var_10]
.text$mn:0000642C                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00006431                 mov     ecx, eax
.text$mn:00006433                 call    ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)
.text$mn:00006438                 mov     [ebp+var_8], eax
.text$mn:0000643B                 cmp     [ebp+var_8], 1
.text$mn:0000643F                 ja      short loc_644A
.text$mn:00006441                 mov     [ebp+var_C], 1
.text$mn:00006448                 jmp     short loc_6453
.text$mn:0000644A ; ---------------------------------------------------------------------------
.text$mn:0000644A
.text$mn:0000644A loc_644A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+23j
.text$mn:0000644A                 mov     ecx, [ebp+var_8]
.text$mn:0000644D                 sub     ecx, 1
.text$mn:00006450                 mov     [ebp+var_C], ecx
.text$mn:00006453
.text$mn:00006453 loc_6453:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+2Cj
.text$mn:00006453                 mov     eax, [ebp+var_C]
.text$mn:00006456                 mov     esp, ebp
.text$mn:00006458                 pop     ebp
.text$mn:00006459                 retn
.text$mn:00006459 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:00006459
.text$mn:00006459 ; ---------------------------------------------------------------------------
.text$mn:0000645A                 align 4
.text$mn:0000645A _text$mn        ends
.text$mn:0000645A
.text$mn:0000645C ; ===========================================================================
.text$mn:0000645C
.text$mn:0000645C ; Segment type: Pure code
.text$mn:0000645C ; Segment permissions: Read/Execute
.text$mn:0000645C _text$mn        segment para public 'CODE' use32
.text$mn:0000645C                 assume cs:_text$mn
.text$mn:0000645C                 ;org 645Ch
.text$mn:0000645C ; COMDAT (pick any)
.text$mn:0000645C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000645C
.text$mn:0000645C ; =============== S U B R O U T I N E =======================================
.text$mn:0000645C
.text$mn:0000645C ; Attributes: bp-based frame
.text$mn:0000645C
.text$mn:0000645C ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::max_size(void)const
.text$mn:0000645C                 public ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:0000645C ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:0000645C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+17p
.text$mn:0000645C                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+18p
.text$mn:0000645C
.text$mn:0000645C var_8           = dword ptr -8
.text$mn:0000645C var_1           = byte ptr -1
.text$mn:0000645C
.text$mn:0000645C                 push    ebp
.text$mn:0000645D                 mov     ebp, esp
.text$mn:0000645F                 sub     esp, 8
.text$mn:00006462                 mov     [ebp+var_8], ecx
.text$mn:00006465                 lea     eax, [ebp+var_1]
.text$mn:00006468                 push    eax
.text$mn:00006469                 mov     ecx, [ebp+var_8]
.text$mn:0000646C                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:00006471                 mov     ecx, eax
.text$mn:00006473                 call    ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)
.text$mn:00006478                 mov     esp, ebp
.text$mn:0000647A                 pop     ebp
.text$mn:0000647B                 retn
.text$mn:0000647B ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:0000647B
.text$mn:0000647B _text$mn        ends
.text$mn:0000647B
.text$mn:0000647C ; ===========================================================================
.text$mn:0000647C
.text$mn:0000647C ; Segment type: Pure code
.text$mn:0000647C ; Segment permissions: Read/Execute
.text$mn:0000647C _text$mn        segment para public 'CODE' use32
.text$mn:0000647C                 assume cs:_text$mn
.text$mn:0000647C                 ;org 647Ch
.text$mn:0000647C ; COMDAT (pick any)
.text$mn:0000647C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000647C
.text$mn:0000647C ; =============== S U B R O U T I N E =======================================
.text$mn:0000647C
.text$mn:0000647C ; Attributes: bp-based frame
.text$mn:0000647C
.text$mn:0000647C ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Generic_error_category::message(int)const
.text$mn:0000647C                 public ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000647C ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:0000647C                                         ; CODE XREF: std::_Iostream_error_category::message(int)+64p
.text$mn:0000647C                                         ; DATA XREF: .rdata:00008318o
.text$mn:0000647C
.text$mn:0000647C var_1C          = dword ptr -1Ch
.text$mn:0000647C var_18          = dword ptr -18h
.text$mn:0000647C Str             = dword ptr -14h
.text$mn:0000647C var_10          = dword ptr -10h
.text$mn:0000647C var_C           = dword ptr -0Ch
.text$mn:0000647C var_4           = dword ptr -4
.text$mn:0000647C arg_0           = dword ptr  8
.text$mn:0000647C arg_4           = dword ptr  0Ch
.text$mn:0000647C
.text$mn:0000647C                 push    ebp
.text$mn:0000647D                 mov     ebp, esp
.text$mn:0000647F                 push    0FFFFFFFFh
.text$mn:00006481                 push    offset __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00006486                 mov     eax, large fs:0
.text$mn:0000648C                 push    eax
.text$mn:0000648D                 sub     esp, 10h
.text$mn:00006490                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006495                 xor     eax, ebp
.text$mn:00006497                 push    eax
.text$mn:00006498                 lea     eax, [ebp+var_C]
.text$mn:0000649B                 mov     large fs:0, eax
.text$mn:000064A1                 mov     [ebp+var_1C], ecx
.text$mn:000064A4                 mov     [ebp+var_18], 0
.text$mn:000064AB                 mov     eax, [ebp+arg_4]
.text$mn:000064AE                 push    eax             ; int
.text$mn:000064AF                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:000064B4                 add     esp, 4
.text$mn:000064B7                 mov     [ebp+var_10], eax
.text$mn:000064BA                 cmp     [ebp+var_10], 0
.text$mn:000064BE                 jz      short loc_64C8
.text$mn:000064C0                 mov     ecx, [ebp+var_10]
.text$mn:000064C3                 mov     [ebp+Str], ecx
.text$mn:000064C6                 jmp     short loc_64CF
.text$mn:000064C8 ; ---------------------------------------------------------------------------
.text$mn:000064C8
.text$mn:000064C8 loc_64C8:                               ; CODE XREF: std::_Generic_error_category::message(int)+42j
.text$mn:000064C8                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:000064CF
.text$mn:000064CF loc_64CF:                               ; CODE XREF: std::_Generic_error_category::message(int)+4Aj
.text$mn:000064CF                 mov     edx, [ebp+Str]
.text$mn:000064D2                 push    edx             ; Str
.text$mn:000064D3                 mov     ecx, [ebp+arg_0]
.text$mn:000064D6                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:000064DB                 mov     [ebp+var_4], 0
.text$mn:000064E2                 mov     eax, [ebp+var_18]
.text$mn:000064E5                 or      eax, 1
.text$mn:000064E8                 mov     [ebp+var_18], eax
.text$mn:000064EB                 mov     eax, [ebp+arg_0]
.text$mn:000064EE                 mov     ecx, [ebp+var_C]
.text$mn:000064F1                 mov     large fs:0, ecx
.text$mn:000064F8                 pop     ecx
.text$mn:000064F9                 mov     esp, ebp
.text$mn:000064FB                 pop     ebp
.text$mn:000064FC                 retn    8
.text$mn:000064FC ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:000064FC
.text$mn:000064FC ; ---------------------------------------------------------------------------
.text$mn:000064FF                 align 10h
.text$mn:000064FF _text$mn        ends
.text$mn:000064FF
.text$x:00006500 ; ===========================================================================
.text$x:00006500
.text$x:00006500 ; Segment type: Pure code
.text$x:00006500 ; Segment permissions: Read/Execute
.text$x:00006500 _text$x         segment para public 'CODE' use32
.text$x:00006500                 assume cs:_text$x
.text$x:00006500                 ;org 6500h
.text$x:00006500 ; COMDAT (pick associative to section at 647C)
.text$x:00006500                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006500
.text$x:00006500 ; =============== S U B R O U T I N E =======================================
.text$x:00006500
.text$x:00006500
.text$x:00006500 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:00006500                                         ; DATA XREF: .xdata$x:0000755Co
.text$x:00006500                 mov     eax, [ebp-18h]
.text$x:00006503                 and     eax, 1
.text$x:00006506                 jz      $LN6
.text$x:0000650C                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:00006510                 mov     ecx, [ebp+8]
.text$x:00006513                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00006518 ; ---------------------------------------------------------------------------
.text$x:00006518
.text$x:00006518 $LN6:                                   ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:00006518                 retn
.text$x:00006518 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:00006518
.text$x:00006519
.text$x:00006519 ; =============== S U B R O U T I N E =======================================
.text$x:00006519
.text$x:00006519
.text$x:00006519 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:00006519                                         ; DATA XREF: std::_Generic_error_category::message(int)+5o
.text$x:00006519
.text$x:00006519 arg_4           = dword ptr  8
.text$x:00006519
.text$x:00006519                 mov     edx, [esp+arg_4]
.text$x:0000651D                 lea     eax, [edx+0Ch]
.text$x:00006520                 mov     ecx, [edx-14h]
.text$x:00006523                 xor     ecx, eax
.text$x:00006525                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000652A                 mov     eax, offset __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:0000652F                 jmp     ___CxxFrameHandler3
.text$x:0000652F __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:0000652F
.text$x:0000652F _text$x         ends
.text$x:0000652F
.text$mn:00006534 ; ===========================================================================
.text$mn:00006534
.text$mn:00006534 ; Segment type: Pure code
.text$mn:00006534 ; Segment permissions: Read/Execute
.text$mn:00006534 _text$mn        segment para public 'CODE' use32
.text$mn:00006534                 assume cs:_text$mn
.text$mn:00006534                 ;org 6534h
.text$mn:00006534 ; COMDAT (pick any)
.text$mn:00006534                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006534
.text$mn:00006534 ; =============== S U B R O U T I N E =======================================
.text$mn:00006534
.text$mn:00006534 ; Attributes: bp-based frame
.text$mn:00006534
.text$mn:00006534 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Iostream_error_category::message(int)const
.text$mn:00006534                 public ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00006534 ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:00006534                                         ; DATA XREF: .rdata:0000834Co
.text$mn:00006534
.text$mn:00006534 var_14          = dword ptr -14h
.text$mn:00006534 var_10          = dword ptr -10h
.text$mn:00006534 var_C           = dword ptr -0Ch
.text$mn:00006534 var_4           = dword ptr -4
.text$mn:00006534 arg_0           = dword ptr  8
.text$mn:00006534 arg_4           = dword ptr  0Ch
.text$mn:00006534
.text$mn:00006534                 push    ebp
.text$mn:00006535                 mov     ebp, esp
.text$mn:00006537                 push    0FFFFFFFFh
.text$mn:00006539                 push    offset __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000653E                 mov     eax, large fs:0
.text$mn:00006544                 push    eax
.text$mn:00006545                 sub     esp, 8
.text$mn:00006548                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000654D                 xor     eax, ebp
.text$mn:0000654F                 push    eax
.text$mn:00006550                 lea     eax, [ebp+var_C]
.text$mn:00006553                 mov     large fs:0, eax
.text$mn:00006559                 mov     [ebp+var_14], ecx
.text$mn:0000655C                 mov     [ebp+var_10], 0
.text$mn:00006563                 cmp     [ebp+arg_4], 1
.text$mn:00006567                 jnz     short loc_658D
.text$mn:00006569                 push    offset ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ ; "iostream stream error"
.text$mn:0000656E                 mov     ecx, [ebp+arg_0]
.text$mn:00006571                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00006576                 mov     [ebp+var_4], 0
.text$mn:0000657D                 mov     eax, [ebp+var_10]
.text$mn:00006580                 or      eax, 1
.text$mn:00006583                 mov     [ebp+var_10], eax
.text$mn:00006586                 mov     eax, [ebp+arg_0]
.text$mn:00006589                 jmp     short loc_65B0
.text$mn:0000658B ; ---------------------------------------------------------------------------
.text$mn:0000658B                 jmp     short loc_65B0
.text$mn:0000658D ; ---------------------------------------------------------------------------
.text$mn:0000658D
.text$mn:0000658D loc_658D:                               ; CODE XREF: std::_Iostream_error_category::message(int)+33j
.text$mn:0000658D                 mov     ecx, [ebp+arg_4]
.text$mn:00006590                 push    ecx
.text$mn:00006591                 mov     edx, [ebp+arg_0]
.text$mn:00006594                 push    edx
.text$mn:00006595                 mov     ecx, [ebp+var_14]
.text$mn:00006598                 call    ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.text$mn:0000659D                 mov     [ebp+var_4], 0
.text$mn:000065A4                 mov     eax, [ebp+var_10]
.text$mn:000065A7                 or      eax, 1
.text$mn:000065AA                 mov     [ebp+var_10], eax
.text$mn:000065AD                 mov     eax, [ebp+arg_0]
.text$mn:000065B0
.text$mn:000065B0 loc_65B0:                               ; CODE XREF: std::_Iostream_error_category::message(int)+55j
.text$mn:000065B0                                         ; std::_Iostream_error_category::message(int)+57j
.text$mn:000065B0                 mov     ecx, [ebp+var_C]
.text$mn:000065B3                 mov     large fs:0, ecx
.text$mn:000065BA                 pop     ecx
.text$mn:000065BB                 mov     esp, ebp
.text$mn:000065BD                 pop     ebp
.text$mn:000065BE                 retn    8
.text$mn:000065BE ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:000065BE
.text$mn:000065BE ; ---------------------------------------------------------------------------
.text$mn:000065C1                 align 4
.text$mn:000065C1 _text$mn        ends
.text$mn:000065C1
.text$x:000065C4 ; ===========================================================================
.text$x:000065C4
.text$x:000065C4 ; Segment type: Pure code
.text$x:000065C4 ; Segment permissions: Read/Execute
.text$x:000065C4 _text$x         segment para public 'CODE' use32
.text$x:000065C4                 assume cs:_text$x
.text$x:000065C4                 ;org 65C4h
.text$x:000065C4 ; COMDAT (pick associative to section at 6534)
.text$x:000065C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000065C4
.text$x:000065C4 ; =============== S U B R O U T I N E =======================================
.text$x:000065C4
.text$x:000065C4
.text$x:000065C4 __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:000065C4                                         ; DATA XREF: .xdata$x:000075E0o
.text$x:000065C4                 mov     eax, [ebp-10h]
.text$x:000065C7                 and     eax, 1
.text$x:000065CA                 jz      $LN6_0
.text$x:000065D0                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:000065D4                 mov     ecx, [ebp+8]
.text$x:000065D7                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000065DC ; ---------------------------------------------------------------------------
.text$x:000065DC
.text$x:000065DC $LN6_0:                                 ; CODE XREF: __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:000065DC                 retn
.text$x:000065DC __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:000065DC
.text$x:000065DD
.text$x:000065DD ; =============== S U B R O U T I N E =======================================
.text$x:000065DD
.text$x:000065DD
.text$x:000065DD __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:000065DD                                         ; DATA XREF: std::_Iostream_error_category::message(int)+5o
.text$x:000065DD
.text$x:000065DD arg_4           = dword ptr  8
.text$x:000065DD
.text$x:000065DD                 mov     edx, [esp+arg_4]
.text$x:000065E1                 lea     eax, [edx+0Ch]
.text$x:000065E4                 mov     ecx, [edx-0Ch]
.text$x:000065E7                 xor     ecx, eax
.text$x:000065E9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000065EE                 mov     eax, offset __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:000065F3                 jmp     ___CxxFrameHandler3
.text$x:000065F3 __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:000065F3
.text$x:000065F3 _text$x         ends
.text$x:000065F3
.text$mn:000065F8 ; ===========================================================================
.text$mn:000065F8
.text$mn:000065F8 ; Segment type: Pure code
.text$mn:000065F8 ; Segment permissions: Read/Execute
.text$mn:000065F8 _text$mn        segment para public 'CODE' use32
.text$mn:000065F8                 assume cs:_text$mn
.text$mn:000065F8                 ;org 65F8h
.text$mn:000065F8 ; COMDAT (pick any)
.text$mn:000065F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000065F8
.text$mn:000065F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000065F8
.text$mn:000065F8 ; Attributes: bp-based frame
.text$mn:000065F8
.text$mn:000065F8 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_System_error_category::message(int)const
.text$mn:000065F8                 public ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:000065F8 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:000065F8                                         ; DATA XREF: .rdata:0000838Co
.text$mn:000065F8
.text$mn:000065F8 var_1C          = dword ptr -1Ch
.text$mn:000065F8 var_18          = dword ptr -18h
.text$mn:000065F8 Str             = dword ptr -14h
.text$mn:000065F8 var_10          = dword ptr -10h
.text$mn:000065F8 var_C           = dword ptr -0Ch
.text$mn:000065F8 var_4           = dword ptr -4
.text$mn:000065F8 arg_0           = dword ptr  8
.text$mn:000065F8 arg_4           = dword ptr  0Ch
.text$mn:000065F8
.text$mn:000065F8                 push    ebp
.text$mn:000065F9                 mov     ebp, esp
.text$mn:000065FB                 push    0FFFFFFFFh
.text$mn:000065FD                 push    offset __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00006602                 mov     eax, large fs:0
.text$mn:00006608                 push    eax
.text$mn:00006609                 sub     esp, 10h
.text$mn:0000660C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006611                 xor     eax, ebp
.text$mn:00006613                 push    eax
.text$mn:00006614                 lea     eax, [ebp+var_C]
.text$mn:00006617                 mov     large fs:0, eax
.text$mn:0000661D                 mov     [ebp+var_1C], ecx
.text$mn:00006620                 mov     [ebp+var_18], 0
.text$mn:00006627                 mov     eax, [ebp+arg_4]
.text$mn:0000662A                 push    eax             ; int
.text$mn:0000662B                 call    ?_Winerror_map@std@@YAPBDH@Z ; std::_Winerror_map(int)
.text$mn:00006630                 add     esp, 4
.text$mn:00006633                 mov     [ebp+var_10], eax
.text$mn:00006636                 cmp     [ebp+var_10], 0
.text$mn:0000663A                 jz      short loc_6644
.text$mn:0000663C                 mov     ecx, [ebp+var_10]
.text$mn:0000663F                 mov     [ebp+Str], ecx
.text$mn:00006642                 jmp     short loc_664B
.text$mn:00006644 ; ---------------------------------------------------------------------------
.text$mn:00006644
.text$mn:00006644 loc_6644:                               ; CODE XREF: std::_System_error_category::message(int)+42j
.text$mn:00006644                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:0000664B
.text$mn:0000664B loc_664B:                               ; CODE XREF: std::_System_error_category::message(int)+4Aj
.text$mn:0000664B                 mov     edx, [ebp+Str]
.text$mn:0000664E                 push    edx             ; Str
.text$mn:0000664F                 mov     ecx, [ebp+arg_0]
.text$mn:00006652                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00006657                 mov     [ebp+var_4], 0
.text$mn:0000665E                 mov     eax, [ebp+var_18]
.text$mn:00006661                 or      eax, 1
.text$mn:00006664                 mov     [ebp+var_18], eax
.text$mn:00006667                 mov     eax, [ebp+arg_0]
.text$mn:0000666A                 mov     ecx, [ebp+var_C]
.text$mn:0000666D                 mov     large fs:0, ecx
.text$mn:00006674                 pop     ecx
.text$mn:00006675                 mov     esp, ebp
.text$mn:00006677                 pop     ebp
.text$mn:00006678                 retn    8
.text$mn:00006678 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:00006678
.text$mn:00006678 ; ---------------------------------------------------------------------------
.text$mn:0000667B                 align 4
.text$mn:0000667B _text$mn        ends
.text$mn:0000667B
.text$x:0000667C ; ===========================================================================
.text$x:0000667C
.text$x:0000667C ; Segment type: Pure code
.text$x:0000667C ; Segment permissions: Read/Execute
.text$x:0000667C _text$x         segment para public 'CODE' use32
.text$x:0000667C                 assume cs:_text$x
.text$x:0000667C                 ;org 667Ch
.text$x:0000667C ; COMDAT (pick associative to section at 65F8)
.text$x:0000667C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000667C
.text$x:0000667C ; =============== S U B R O U T I N E =======================================
.text$x:0000667C
.text$x:0000667C
.text$x:0000667C __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:0000667C                                         ; DATA XREF: .xdata$x:00007664o
.text$x:0000667C                 mov     eax, [ebp-18h]
.text$x:0000667F                 and     eax, 1
.text$x:00006682                 jz      $LN6_1
.text$x:00006688                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:0000668C                 mov     ecx, [ebp+8]
.text$x:0000668F                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00006694 ; ---------------------------------------------------------------------------
.text$x:00006694
.text$x:00006694 $LN6_1:                                 ; CODE XREF: __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:00006694                 retn
.text$x:00006694 __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:00006694
.text$x:00006695
.text$x:00006695 ; =============== S U B R O U T I N E =======================================
.text$x:00006695
.text$x:00006695
.text$x:00006695 __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:00006695                                         ; DATA XREF: std::_System_error_category::message(int)+5o
.text$x:00006695
.text$x:00006695 arg_4           = dword ptr  8
.text$x:00006695
.text$x:00006695                 mov     edx, [esp+arg_4]
.text$x:00006699                 lea     eax, [edx+0Ch]
.text$x:0000669C                 mov     ecx, [edx-14h]
.text$x:0000669F                 xor     ecx, eax
.text$x:000066A1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000066A6                 mov     eax, offset __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:000066AB                 jmp     ___CxxFrameHandler3
.text$x:000066AB __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:000066AB
.text$x:000066AB _text$x         ends
.text$x:000066AB
.text$mn:000066B0 ; ===========================================================================
.text$mn:000066B0
.text$mn:000066B0 ; Segment type: Pure code
.text$mn:000066B0 ; Segment permissions: Read/Execute
.text$mn:000066B0 _text$mn        segment para public 'CODE' use32
.text$mn:000066B0                 assume cs:_text$mn
.text$mn:000066B0                 ;org 66B0h
.text$mn:000066B0 ; COMDAT (pick any)
.text$mn:000066B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066B0
.text$mn:000066B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000066B0
.text$mn:000066B0 ; Attributes: bp-based frame
.text$mn:000066B0
.text$mn:000066B0 ; int __cdecl std::char_traits<char>::move(void *Dst, void *Src, size_t Size)
.text$mn:000066B0                 public ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:000066B0 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
.text$mn:000066B0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+6Ap
.text$mn:000066B0
.text$mn:000066B0 var_4           = dword ptr -4
.text$mn:000066B0 Dst             = dword ptr  8
.text$mn:000066B0 Src             = dword ptr  0Ch
.text$mn:000066B0 Size            = dword ptr  10h
.text$mn:000066B0
.text$mn:000066B0                 push    ebp
.text$mn:000066B1                 mov     ebp, esp
.text$mn:000066B3                 push    ecx
.text$mn:000066B4                 cmp     [ebp+Size], 0
.text$mn:000066B8                 jnz     short loc_66C2
.text$mn:000066BA                 mov     eax, [ebp+Dst]
.text$mn:000066BD                 mov     [ebp+var_4], eax
.text$mn:000066C0                 jmp     short loc_66D9
.text$mn:000066C2 ; ---------------------------------------------------------------------------
.text$mn:000066C2
.text$mn:000066C2 loc_66C2:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+8j
.text$mn:000066C2                 mov     ecx, [ebp+Size]
.text$mn:000066C5                 push    ecx             ; Size
.text$mn:000066C6                 mov     edx, [ebp+Src]
.text$mn:000066C9                 push    edx             ; Src
.text$mn:000066CA                 mov     eax, [ebp+Dst]
.text$mn:000066CD                 push    eax             ; Dst
.text$mn:000066CE                 call    _memmove
.text$mn:000066D3                 add     esp, 0Ch
.text$mn:000066D6                 mov     [ebp+var_4], eax
.text$mn:000066D9
.text$mn:000066D9 loc_66D9:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+10j
.text$mn:000066D9                 mov     eax, [ebp+var_4]
.text$mn:000066DC                 mov     esp, ebp
.text$mn:000066DE                 pop     ebp
.text$mn:000066DF                 retn
.text$mn:000066DF ?move@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:000066DF
.text$mn:000066DF _text$mn        ends
.text$mn:000066DF
.text$mn:000066E0 ; ===========================================================================
.text$mn:000066E0
.text$mn:000066E0 ; Segment type: Pure code
.text$mn:000066E0 ; Segment permissions: Read/Execute
.text$mn:000066E0 _text$mn        segment para public 'CODE' use32
.text$mn:000066E0                 assume cs:_text$mn
.text$mn:000066E0                 ;org 66E0h
.text$mn:000066E0 ; COMDAT (pick any)
.text$mn:000066E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066E0
.text$mn:000066E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000066E0
.text$mn:000066E0 ; Attributes: bp-based frame
.text$mn:000066E0
.text$mn:000066E0 ; int __cdecl std::char_traits<wchar_t>::move(void *Dst, void *Src, int)
.text$mn:000066E0                 public ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:000066E0 ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:000066E0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Ap
.text$mn:000066E0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+70p ...
.text$mn:000066E0
.text$mn:000066E0 var_4           = dword ptr -4
.text$mn:000066E0 Dst             = dword ptr  8
.text$mn:000066E0 Src             = dword ptr  0Ch
.text$mn:000066E0 arg_8           = dword ptr  10h
.text$mn:000066E0
.text$mn:000066E0                 push    ebp
.text$mn:000066E1                 mov     ebp, esp
.text$mn:000066E3                 push    ecx
.text$mn:000066E4                 cmp     [ebp+arg_8], 0
.text$mn:000066E8                 jnz     short loc_66F2
.text$mn:000066EA                 mov     eax, [ebp+Dst]
.text$mn:000066ED                 mov     [ebp+var_4], eax
.text$mn:000066F0                 jmp     short loc_6709
.text$mn:000066F2 ; ---------------------------------------------------------------------------
.text$mn:000066F2
.text$mn:000066F2 loc_66F2:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+8j
.text$mn:000066F2                 mov     ecx, [ebp+arg_8]
.text$mn:000066F5                 push    ecx             ; int
.text$mn:000066F6                 mov     edx, [ebp+Src]
.text$mn:000066F9                 push    edx             ; Src
.text$mn:000066FA                 mov     eax, [ebp+Dst]
.text$mn:000066FD                 push    eax             ; Dst
.text$mn:000066FE                 call    _wmemmove
.text$mn:00006703                 add     esp, 0Ch
.text$mn:00006706                 mov     [ebp+var_4], eax
.text$mn:00006709
.text$mn:00006709 loc_6709:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+10j
.text$mn:00006709                 mov     eax, [ebp+var_4]
.text$mn:0000670C                 mov     esp, ebp
.text$mn:0000670E                 pop     ebp
.text$mn:0000670F                 retn
.text$mn:0000670F ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:0000670F
.text$mn:0000670F _text$mn        ends
.text$mn:0000670F
.text$mn:00006710 ; ===========================================================================
.text$mn:00006710
.text$mn:00006710 ; Segment type: Pure code
.text$mn:00006710 ; Segment permissions: Read/Execute
.text$mn:00006710 _text$mn        segment para public 'CODE' use32
.text$mn:00006710                 assume cs:_text$mn
.text$mn:00006710                 ;org 6710h
.text$mn:00006710 ; COMDAT (pick any)
.text$mn:00006710                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006710
.text$mn:00006710 ; =============== S U B R O U T I N E =======================================
.text$mn:00006710
.text$mn:00006710 ; Attributes: bp-based frame
.text$mn:00006710
.text$mn:00006710 ; const char *__thiscall std::_Generic_error_category::name(std::_Generic_error_category *__hidden this)
.text$mn:00006710                 public ?name@_Generic_error_category@std@@UBEPBDXZ
.text$mn:00006710 ?name@_Generic_error_category@std@@UBEPBDXZ proc near
.text$mn:00006710                                         ; DATA XREF: .rdata:00008314o
.text$mn:00006710
.text$mn:00006710 var_4           = dword ptr -4
.text$mn:00006710
.text$mn:00006710                 push    ebp
.text$mn:00006711                 mov     ebp, esp
.text$mn:00006713                 push    ecx
.text$mn:00006714                 mov     [ebp+var_4], ecx
.text$mn:00006717                 mov     eax, offset ??_C@_07DCLBNMLN@generic?$AA@ ; "generic"
.text$mn:0000671C                 mov     esp, ebp
.text$mn:0000671E                 pop     ebp
.text$mn:0000671F                 retn
.text$mn:0000671F ?name@_Generic_error_category@std@@UBEPBDXZ endp
.text$mn:0000671F
.text$mn:0000671F _text$mn        ends
.text$mn:0000671F
.text$mn:00006720 ; ===========================================================================
.text$mn:00006720
.text$mn:00006720 ; Segment type: Pure code
.text$mn:00006720 ; Segment permissions: Read/Execute
.text$mn:00006720 _text$mn        segment para public 'CODE' use32
.text$mn:00006720                 assume cs:_text$mn
.text$mn:00006720                 ;org 6720h
.text$mn:00006720 ; COMDAT (pick any)
.text$mn:00006720                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006720
.text$mn:00006720 ; =============== S U B R O U T I N E =======================================
.text$mn:00006720
.text$mn:00006720 ; Attributes: bp-based frame
.text$mn:00006720
.text$mn:00006720 ; const char *__thiscall std::_Iostream_error_category::name(std::_Iostream_error_category *__hidden this)
.text$mn:00006720                 public ?name@_Iostream_error_category@std@@UBEPBDXZ
.text$mn:00006720 ?name@_Iostream_error_category@std@@UBEPBDXZ proc near
.text$mn:00006720                                         ; DATA XREF: .rdata:00008348o
.text$mn:00006720
.text$mn:00006720 var_4           = dword ptr -4
.text$mn:00006720
.text$mn:00006720                 push    ebp
.text$mn:00006721                 mov     ebp, esp
.text$mn:00006723                 push    ecx
.text$mn:00006724                 mov     [ebp+var_4], ecx
.text$mn:00006727                 mov     eax, offset ??_C@_08LLGCOLLL@iostream?$AA@ ; "iostream"
.text$mn:0000672C                 mov     esp, ebp
.text$mn:0000672E                 pop     ebp
.text$mn:0000672F                 retn
.text$mn:0000672F ?name@_Iostream_error_category@std@@UBEPBDXZ endp
.text$mn:0000672F
.text$mn:0000672F _text$mn        ends
.text$mn:0000672F
.text$mn:00006730 ; ===========================================================================
.text$mn:00006730
.text$mn:00006730 ; Segment type: Pure code
.text$mn:00006730 ; Segment permissions: Read/Execute
.text$mn:00006730 _text$mn        segment para public 'CODE' use32
.text$mn:00006730                 assume cs:_text$mn
.text$mn:00006730                 ;org 6730h
.text$mn:00006730 ; COMDAT (pick any)
.text$mn:00006730                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006730
.text$mn:00006730 ; =============== S U B R O U T I N E =======================================
.text$mn:00006730
.text$mn:00006730 ; Attributes: bp-based frame
.text$mn:00006730
.text$mn:00006730 ; const char *__thiscall std::_System_error_category::name(std::_System_error_category *__hidden this)
.text$mn:00006730                 public ?name@_System_error_category@std@@UBEPBDXZ
.text$mn:00006730 ?name@_System_error_category@std@@UBEPBDXZ proc near
.text$mn:00006730                                         ; DATA XREF: .rdata:00008388o
.text$mn:00006730
.text$mn:00006730 var_4           = dword ptr -4
.text$mn:00006730
.text$mn:00006730                 push    ebp
.text$mn:00006731                 mov     ebp, esp
.text$mn:00006733                 push    ecx
.text$mn:00006734                 mov     [ebp+var_4], ecx
.text$mn:00006737                 mov     eax, offset ??_C@_06FHFOAHML@system?$AA@ ; "system"
.text$mn:0000673C                 mov     esp, ebp
.text$mn:0000673E                 pop     ebp
.text$mn:0000673F                 retn
.text$mn:0000673F ?name@_System_error_category@std@@UBEPBDXZ endp
.text$mn:0000673F
.text$mn:0000673F _text$mn        ends
.text$mn:0000673F
.text$mn:00006740 ; ===========================================================================
.text$mn:00006740
.text$mn:00006740 ; Segment type: Pure code
.text$mn:00006740 ; Segment permissions: Read/Execute
.text$mn:00006740 _text$mn        segment para public 'CODE' use32
.text$mn:00006740                 assume cs:_text$mn
.text$mn:00006740                 ;org 6740h
.text$mn:00006740 ; COMDAT (pick any)
.text$mn:00006740                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006740
.text$mn:00006740 ; =============== S U B R O U T I N E =======================================
.text$mn:00006740
.text$mn:00006740 ; Attributes: bp-based frame
.text$mn:00006740
.text$mn:00006740 ; public: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::push_back(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:00006740                 public ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
.text$mn:00006740 ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z proc near
.text$mn:00006740                                         ; CODE XREF: FileDialog::doOpenMultiFilesDlg(void)+155p
.text$mn:00006740                                         ; FileDialog::doOpenMultiFilesDlg(void)+255p
.text$mn:00006740
.text$mn:00006740 var_C           = dword ptr -0Ch
.text$mn:00006740 var_8           = dword ptr -8
.text$mn:00006740 var_2           = byte ptr -2
.text$mn:00006740 var_1           = byte ptr -1
.text$mn:00006740 arg_0           = dword ptr  8
.text$mn:00006740
.text$mn:00006740                 push    ebp
.text$mn:00006741                 mov     ebp, esp
.text$mn:00006743                 sub     esp, 0Ch
.text$mn:00006746                 mov     [ebp+var_8], ecx
.text$mn:00006749                 mov     eax, [ebp+arg_0]
.text$mn:0000674C                 push    eax
.text$mn:0000674D                 call    ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00006752                 add     esp, 4
.text$mn:00006755                 push    eax
.text$mn:00006756                 mov     ecx, [ebp+var_8]
.text$mn:00006759                 call    ?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Inside(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *)
.text$mn:0000675E                 movzx   ecx, al
.text$mn:00006761                 test    ecx, ecx
.text$mn:00006763                 jz      loc_67F3
.text$mn:00006769                 mov     edx, [ebp+arg_0]
.text$mn:0000676C                 push    edx
.text$mn:0000676D                 call    ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00006772                 add     esp, 4
.text$mn:00006775                 mov     ecx, [ebp+var_8]
.text$mn:00006778                 sub     eax, [ecx+4]
.text$mn:0000677B                 cdq
.text$mn:0000677C                 mov     ecx, 1Ch
.text$mn:00006781                 idiv    ecx
.text$mn:00006783                 mov     [ebp+var_C], eax
.text$mn:00006786                 mov     edx, [ebp+var_8]
.text$mn:00006789                 mov     eax, [ebp+var_8]
.text$mn:0000678C                 mov     ecx, [edx+8]
.text$mn:0000678F                 cmp     ecx, [eax+0Ch]
.text$mn:00006792                 jnz     short loc_679E
.text$mn:00006794                 push    1
.text$mn:00006796                 mov     ecx, [ebp+var_8]
.text$mn:00006799                 call    ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)
.text$mn:0000679E
.text$mn:0000679E loc_679E:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+52j
.text$mn:0000679E                 mov     edx, [ebp+var_8]
.text$mn:000067A1                 mov     eax, [edx+8]
.text$mn:000067A4                 push    eax
.text$mn:000067A5                 mov     ecx, [ebp+var_8]
.text$mn:000067A8                 mov     edx, [ecx+8]
.text$mn:000067AB                 push    edx
.text$mn:000067AC                 mov     ecx, [ebp+var_8]
.text$mn:000067AF                 call    ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000067B4                 imul    eax, [ebp+var_C], 1Ch
.text$mn:000067B8                 mov     ecx, [ebp+var_8]
.text$mn:000067BB                 add     eax, [ecx+4]
.text$mn:000067BE                 push    eax
.text$mn:000067BF                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000067C4                 add     esp, 4
.text$mn:000067C7                 push    eax             ; int
.text$mn:000067C8                 mov     edx, [ebp+var_8]
.text$mn:000067CB                 mov     eax, [edx+8]
.text$mn:000067CE                 push    eax             ; void *
.text$mn:000067CF                 lea     ecx, [ebp+var_1]
.text$mn:000067D2                 push    ecx
.text$mn:000067D3                 mov     ecx, [ebp+var_8]
.text$mn:000067D6                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:000067DB                 mov     ecx, eax
.text$mn:000067DD                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:000067E2                 mov     edx, [ebp+var_8]
.text$mn:000067E5                 mov     eax, [edx+8]
.text$mn:000067E8                 add     eax, 1Ch
.text$mn:000067EB                 mov     ecx, [ebp+var_8]
.text$mn:000067EE                 mov     [ecx+8], eax
.text$mn:000067F1                 jmp     short loc_6857
.text$mn:000067F3 ; ---------------------------------------------------------------------------
.text$mn:000067F3
.text$mn:000067F3 loc_67F3:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+23j
.text$mn:000067F3                 mov     edx, [ebp+var_8]
.text$mn:000067F6                 mov     eax, [ebp+var_8]
.text$mn:000067F9                 mov     ecx, [edx+8]
.text$mn:000067FC                 cmp     ecx, [eax+0Ch]
.text$mn:000067FF                 jnz     short loc_680B
.text$mn:00006801                 push    1
.text$mn:00006803                 mov     ecx, [ebp+var_8]
.text$mn:00006806                 call    ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)
.text$mn:0000680B
.text$mn:0000680B loc_680B:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+BFj
.text$mn:0000680B                 mov     edx, [ebp+var_8]
.text$mn:0000680E                 mov     eax, [edx+8]
.text$mn:00006811                 push    eax
.text$mn:00006812                 mov     ecx, [ebp+var_8]
.text$mn:00006815                 mov     edx, [ecx+8]
.text$mn:00006818                 push    edx
.text$mn:00006819                 mov     ecx, [ebp+var_8]
.text$mn:0000681C                 call    ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00006821                 mov     eax, [ebp+arg_0]
.text$mn:00006824                 push    eax
.text$mn:00006825                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000682A                 add     esp, 4
.text$mn:0000682D                 push    eax             ; int
.text$mn:0000682E                 mov     ecx, [ebp+var_8]
.text$mn:00006831                 mov     edx, [ecx+8]
.text$mn:00006834                 push    edx             ; void *
.text$mn:00006835                 lea     eax, [ebp+var_2]
.text$mn:00006838                 push    eax
.text$mn:00006839                 mov     ecx, [ebp+var_8]
.text$mn:0000683C                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:00006841                 mov     ecx, eax
.text$mn:00006843                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00006848                 mov     ecx, [ebp+var_8]
.text$mn:0000684B                 mov     edx, [ecx+8]
.text$mn:0000684E                 add     edx, 1Ch
.text$mn:00006851                 mov     eax, [ebp+var_8]
.text$mn:00006854                 mov     [eax+8], edx
.text$mn:00006857
.text$mn:00006857 loc_6857:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+B1j
.text$mn:00006857                 mov     esp, ebp
.text$mn:00006859                 pop     ebp
.text$mn:0000685A                 retn    4
.text$mn:0000685A ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z endp
.text$mn:0000685A
.text$mn:0000685A ; ---------------------------------------------------------------------------
.text$mn:0000685D                 align 10h
.text$mn:0000685D _text$mn        ends
.text$mn:0000685D
.text$mn:00006860 ; ===========================================================================
.text$mn:00006860
.text$mn:00006860 ; Segment type: Pure code
.text$mn:00006860 ; Segment permissions: Read/Execute
.text$mn:00006860 _text$mn        segment para public 'CODE' use32
.text$mn:00006860                 assume cs:_text$mn
.text$mn:00006860                 ;org 6860h
.text$mn:00006860 ; COMDAT (pick any)
.text$mn:00006860                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006860
.text$mn:00006860 ; =============== S U B R O U T I N E =======================================
.text$mn:00006860
.text$mn:00006860 ; Attributes: bp-based frame
.text$mn:00006860
.text$mn:00006860 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::replace(unsigned int, unsigned int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00006860                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@@Z
.text$mn:00006860 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@@Z proc near
.text$mn:00006860                                         ; CODE XREF: changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+138p
.text$mn:00006860
.text$mn:00006860 var_4           = dword ptr -4
.text$mn:00006860 arg_0           = dword ptr  8
.text$mn:00006860 arg_4           = dword ptr  0Ch
.text$mn:00006860 arg_8           = dword ptr  10h
.text$mn:00006860
.text$mn:00006860                 push    ebp
.text$mn:00006861                 mov     ebp, esp
.text$mn:00006863                 push    ecx
.text$mn:00006864                 mov     [ebp+var_4], ecx
.text$mn:00006867                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000686C                 push    eax
.text$mn:0000686D                 push    0
.text$mn:0000686F                 mov     ecx, [ebp+arg_8]
.text$mn:00006872                 push    ecx
.text$mn:00006873                 mov     edx, [ebp+arg_4]
.text$mn:00006876                 push    edx
.text$mn:00006877                 mov     eax, [ebp+arg_0]
.text$mn:0000687A                 push    eax
.text$mn:0000687B                 mov     ecx, [ebp+var_4]
.text$mn:0000687E                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00006883                 mov     esp, ebp
.text$mn:00006885                 pop     ebp
.text$mn:00006886                 retn    0Ch
.text$mn:00006886 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@@Z endp
.text$mn:00006886
.text$mn:00006886 ; ---------------------------------------------------------------------------
.text$mn:00006889                 align 4
.text$mn:00006889 _text$mn        ends
.text$mn:00006889
.text$mn:0000688C ; ===========================================================================
.text$mn:0000688C
.text$mn:0000688C ; Segment type: Pure code
.text$mn:0000688C ; Segment permissions: Read/Execute
.text$mn:0000688C _text$mn        segment para public 'CODE' use32
.text$mn:0000688C                 assume cs:_text$mn
.text$mn:0000688C                 ;org 688Ch
.text$mn:0000688C ; COMDAT (pick any)
.text$mn:0000688C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000688C
.text$mn:0000688C ; =============== S U B R O U T I N E =======================================
.text$mn:0000688C
.text$mn:0000688C ; Attributes: bp-based frame
.text$mn:0000688C
.text$mn:0000688C ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::replace(unsigned int, unsigned int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:0000688C                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z
.text$mn:0000688C ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z proc near
.text$mn:0000688C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+1Ep
.text$mn:0000688C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+5Bp
.text$mn:0000688C
.text$mn:0000688C var_10          = dword ptr -10h
.text$mn:0000688C var_C           = dword ptr -0Ch
.text$mn:0000688C var_8           = dword ptr -8
.text$mn:0000688C var_4           = dword ptr -4
.text$mn:0000688C arg_0           = dword ptr  8
.text$mn:0000688C arg_4           = dword ptr  0Ch
.text$mn:0000688C arg_8           = dword ptr  10h
.text$mn:0000688C arg_C           = dword ptr  14h
.text$mn:0000688C arg_10          = dword ptr  18h
.text$mn:0000688C
.text$mn:0000688C                 push    ebp
.text$mn:0000688D                 mov     ebp, esp
.text$mn:0000688F                 sub     esp, 10h
.text$mn:00006892                 mov     [ebp+var_4], ecx
.text$mn:00006895                 mov     eax, [ebp+var_4]
.text$mn:00006898                 mov     ecx, [eax+14h]
.text$mn:0000689B                 cmp     ecx, [ebp+arg_0]
.text$mn:0000689E                 jb      short loc_68AD
.text$mn:000068A0                 mov     ecx, [ebp+arg_8]
.text$mn:000068A3                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:000068A8                 cmp     eax, [ebp+arg_C]
.text$mn:000068AB                 jnb     short loc_68B5
.text$mn:000068AD
.text$mn:000068AD loc_68AD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+12j
.text$mn:000068AD                 mov     ecx, [ebp+var_4]
.text$mn:000068B0                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:000068B5
.text$mn:000068B5 loc_68B5:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+1Fj
.text$mn:000068B5                 mov     edx, [ebp+var_4]
.text$mn:000068B8                 mov     eax, [edx+14h]
.text$mn:000068BB                 sub     eax, [ebp+arg_0]
.text$mn:000068BE                 cmp     eax, [ebp+arg_4]
.text$mn:000068C1                 jnb     short loc_68CF
.text$mn:000068C3                 mov     ecx, [ebp+var_4]
.text$mn:000068C6                 mov     edx, [ecx+14h]
.text$mn:000068C9                 sub     edx, [ebp+arg_0]
.text$mn:000068CC                 mov     [ebp+arg_4], edx
.text$mn:000068CF
.text$mn:000068CF loc_68CF:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+35j
.text$mn:000068CF                 mov     ecx, [ebp+arg_8]
.text$mn:000068D2                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:000068D7                 sub     eax, [ebp+arg_C]
.text$mn:000068DA                 mov     [ebp+var_10], eax
.text$mn:000068DD                 mov     eax, [ebp+var_10]
.text$mn:000068E0                 cmp     eax, [ebp+arg_10]
.text$mn:000068E3                 jnb     short loc_68EB
.text$mn:000068E5                 mov     ecx, [ebp+var_10]
.text$mn:000068E8                 mov     [ebp+arg_10], ecx
.text$mn:000068EB
.text$mn:000068EB loc_68EB:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+57j
.text$mn:000068EB                 mov     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:000068F1                 sub     edx, [ebp+arg_10]
.text$mn:000068F4                 mov     eax, [ebp+var_4]
.text$mn:000068F7                 mov     ecx, [eax+14h]
.text$mn:000068FA                 sub     ecx, [ebp+arg_4]
.text$mn:000068FD                 cmp     edx, ecx
.text$mn:000068FF                 ja      short loc_6909
.text$mn:00006901                 mov     ecx, [ebp+var_4]
.text$mn:00006904                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:00006909
.text$mn:00006909 loc_6909:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+73j
.text$mn:00006909                 mov     edx, [ebp+var_4]
.text$mn:0000690C                 mov     eax, [edx+14h]
.text$mn:0000690F                 sub     eax, [ebp+arg_4]
.text$mn:00006912                 sub     eax, [ebp+arg_0]
.text$mn:00006915                 mov     [ebp+var_8], eax
.text$mn:00006918                 mov     ecx, [ebp+var_4]
.text$mn:0000691B                 mov     edx, [ecx+14h]
.text$mn:0000691E                 add     edx, [ebp+arg_10]
.text$mn:00006921                 sub     edx, [ebp+arg_4]
.text$mn:00006924                 mov     [ebp+var_C], edx
.text$mn:00006927                 mov     eax, [ebp+var_4]
.text$mn:0000692A                 mov     ecx, [eax+14h]
.text$mn:0000692D                 cmp     ecx, [ebp+var_C]
.text$mn:00006930                 jnb     short loc_6940
.text$mn:00006932                 push    0
.text$mn:00006934                 mov     edx, [ebp+var_C]
.text$mn:00006937                 push    edx
.text$mn:00006938                 mov     ecx, [ebp+var_4]
.text$mn:0000693B                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00006940
.text$mn:00006940 loc_6940:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+A4j
.text$mn:00006940                 mov     eax, [ebp+var_4]
.text$mn:00006943                 cmp     eax, [ebp+arg_8]
.text$mn:00006946                 jz      short loc_69AD
.text$mn:00006948                 mov     ecx, [ebp+var_8]
.text$mn:0000694B                 push    ecx             ; int
.text$mn:0000694C                 mov     ecx, [ebp+var_4]
.text$mn:0000694F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006954                 mov     edx, [ebp+arg_0]
.text$mn:00006957                 lea     eax, [eax+edx*2]
.text$mn:0000695A                 mov     ecx, [ebp+arg_4]
.text$mn:0000695D                 lea     edx, [eax+ecx*2]
.text$mn:00006960                 push    edx             ; Src
.text$mn:00006961                 mov     ecx, [ebp+var_4]
.text$mn:00006964                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006969                 mov     ecx, [ebp+arg_0]
.text$mn:0000696C                 lea     edx, [eax+ecx*2]
.text$mn:0000696F                 mov     eax, [ebp+arg_10]
.text$mn:00006972                 lea     ecx, [edx+eax*2]
.text$mn:00006975                 push    ecx             ; Dst
.text$mn:00006976                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000697B                 add     esp, 0Ch
.text$mn:0000697E                 mov     edx, [ebp+arg_10]
.text$mn:00006981                 push    edx             ; int
.text$mn:00006982                 mov     ecx, [ebp+arg_8]
.text$mn:00006985                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000698A                 mov     ecx, [ebp+arg_C]
.text$mn:0000698D                 lea     edx, [eax+ecx*2]
.text$mn:00006990                 push    edx             ; Src
.text$mn:00006991                 mov     ecx, [ebp+var_4]
.text$mn:00006994                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006999                 mov     ecx, [ebp+arg_0]
.text$mn:0000699C                 lea     edx, [eax+ecx*2]
.text$mn:0000699F                 push    edx             ; Dst
.text$mn:000069A0                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:000069A5                 add     esp, 0Ch
.text$mn:000069A8                 jmp     loc_6B96
.text$mn:000069AD ; ---------------------------------------------------------------------------
.text$mn:000069AD
.text$mn:000069AD loc_69AD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+BAj
.text$mn:000069AD                 mov     eax, [ebp+arg_10]
.text$mn:000069B0                 cmp     eax, [ebp+arg_4]
.text$mn:000069B3                 ja      short loc_6A1A
.text$mn:000069B5                 mov     ecx, [ebp+arg_10]
.text$mn:000069B8                 push    ecx             ; int
.text$mn:000069B9                 mov     ecx, [ebp+var_4]
.text$mn:000069BC                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000069C1                 mov     edx, [ebp+arg_C]
.text$mn:000069C4                 lea     eax, [eax+edx*2]
.text$mn:000069C7                 push    eax             ; Src
.text$mn:000069C8                 mov     ecx, [ebp+var_4]
.text$mn:000069CB                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000069D0                 mov     ecx, [ebp+arg_0]
.text$mn:000069D3                 lea     edx, [eax+ecx*2]
.text$mn:000069D6                 push    edx             ; Dst
.text$mn:000069D7                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:000069DC                 add     esp, 0Ch
.text$mn:000069DF                 mov     eax, [ebp+var_8]
.text$mn:000069E2                 push    eax             ; int
.text$mn:000069E3                 mov     ecx, [ebp+var_4]
.text$mn:000069E6                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000069EB                 mov     ecx, [ebp+arg_0]
.text$mn:000069EE                 lea     edx, [eax+ecx*2]
.text$mn:000069F1                 mov     eax, [ebp+arg_4]
.text$mn:000069F4                 lea     ecx, [edx+eax*2]
.text$mn:000069F7                 push    ecx             ; Src
.text$mn:000069F8                 mov     ecx, [ebp+var_4]
.text$mn:000069FB                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006A00                 mov     edx, [ebp+arg_0]
.text$mn:00006A03                 lea     eax, [eax+edx*2]
.text$mn:00006A06                 mov     ecx, [ebp+arg_10]
.text$mn:00006A09                 lea     edx, [eax+ecx*2]
.text$mn:00006A0C                 push    edx             ; Dst
.text$mn:00006A0D                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00006A12                 add     esp, 0Ch
.text$mn:00006A15                 jmp     loc_6B96
.text$mn:00006A1A ; ---------------------------------------------------------------------------
.text$mn:00006A1A
.text$mn:00006A1A loc_6A1A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+127j
.text$mn:00006A1A                 mov     eax, [ebp+arg_C]
.text$mn:00006A1D                 cmp     eax, [ebp+arg_0]
.text$mn:00006A20                 ja      short loc_6A87
.text$mn:00006A22                 mov     ecx, [ebp+var_8]
.text$mn:00006A25                 push    ecx             ; int
.text$mn:00006A26                 mov     ecx, [ebp+var_4]
.text$mn:00006A29                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006A2E                 mov     edx, [ebp+arg_0]
.text$mn:00006A31                 lea     eax, [eax+edx*2]
.text$mn:00006A34                 mov     ecx, [ebp+arg_4]
.text$mn:00006A37                 lea     edx, [eax+ecx*2]
.text$mn:00006A3A                 push    edx             ; Src
.text$mn:00006A3B                 mov     ecx, [ebp+var_4]
.text$mn:00006A3E                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006A43                 mov     ecx, [ebp+arg_0]
.text$mn:00006A46                 lea     edx, [eax+ecx*2]
.text$mn:00006A49                 mov     eax, [ebp+arg_10]
.text$mn:00006A4C                 lea     ecx, [edx+eax*2]
.text$mn:00006A4F                 push    ecx             ; Dst
.text$mn:00006A50                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00006A55                 add     esp, 0Ch
.text$mn:00006A58                 mov     edx, [ebp+arg_10]
.text$mn:00006A5B                 push    edx             ; int
.text$mn:00006A5C                 mov     ecx, [ebp+var_4]
.text$mn:00006A5F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006A64                 mov     ecx, [ebp+arg_C]
.text$mn:00006A67                 lea     edx, [eax+ecx*2]
.text$mn:00006A6A                 push    edx             ; Src
.text$mn:00006A6B                 mov     ecx, [ebp+var_4]
.text$mn:00006A6E                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006A73                 mov     ecx, [ebp+arg_0]
.text$mn:00006A76                 lea     edx, [eax+ecx*2]
.text$mn:00006A79                 push    edx             ; Dst
.text$mn:00006A7A                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00006A7F                 add     esp, 0Ch
.text$mn:00006A82                 jmp     loc_6B96
.text$mn:00006A87 ; ---------------------------------------------------------------------------
.text$mn:00006A87
.text$mn:00006A87 loc_6A87:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+194j
.text$mn:00006A87                 mov     eax, [ebp+arg_0]
.text$mn:00006A8A                 add     eax, [ebp+arg_4]
.text$mn:00006A8D                 cmp     eax, [ebp+arg_C]
.text$mn:00006A90                 ja      short loc_6AFD
.text$mn:00006A92                 mov     ecx, [ebp+var_8]
.text$mn:00006A95                 push    ecx             ; int
.text$mn:00006A96                 mov     ecx, [ebp+var_4]
.text$mn:00006A99                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006A9E                 mov     edx, [ebp+arg_0]
.text$mn:00006AA1                 lea     eax, [eax+edx*2]
.text$mn:00006AA4                 mov     ecx, [ebp+arg_4]
.text$mn:00006AA7                 lea     edx, [eax+ecx*2]
.text$mn:00006AAA                 push    edx             ; Src
.text$mn:00006AAB                 mov     ecx, [ebp+var_4]
.text$mn:00006AAE                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006AB3                 mov     ecx, [ebp+arg_0]
.text$mn:00006AB6                 lea     edx, [eax+ecx*2]
.text$mn:00006AB9                 mov     eax, [ebp+arg_10]
.text$mn:00006ABC                 lea     ecx, [edx+eax*2]
.text$mn:00006ABF                 push    ecx             ; Dst
.text$mn:00006AC0                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00006AC5                 add     esp, 0Ch
.text$mn:00006AC8                 mov     edx, [ebp+arg_10]
.text$mn:00006ACB                 push    edx             ; int
.text$mn:00006ACC                 mov     ecx, [ebp+var_4]
.text$mn:00006ACF                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006AD4                 mov     ecx, [ebp+arg_C]
.text$mn:00006AD7                 add     ecx, [ebp+arg_10]
.text$mn:00006ADA                 sub     ecx, [ebp+arg_4]
.text$mn:00006ADD                 lea     edx, [eax+ecx*2]
.text$mn:00006AE0                 push    edx             ; Src
.text$mn:00006AE1                 mov     ecx, [ebp+var_4]
.text$mn:00006AE4                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006AE9                 mov     ecx, [ebp+arg_0]
.text$mn:00006AEC                 lea     edx, [eax+ecx*2]
.text$mn:00006AEF                 push    edx             ; Dst
.text$mn:00006AF0                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00006AF5                 add     esp, 0Ch
.text$mn:00006AF8                 jmp     loc_6B96
.text$mn:00006AFD ; ---------------------------------------------------------------------------
.text$mn:00006AFD
.text$mn:00006AFD loc_6AFD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+204j
.text$mn:00006AFD                 mov     eax, [ebp+arg_4]
.text$mn:00006B00                 push    eax             ; int
.text$mn:00006B01                 mov     ecx, [ebp+var_4]
.text$mn:00006B04                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006B09                 mov     ecx, [ebp+arg_C]
.text$mn:00006B0C                 lea     edx, [eax+ecx*2]
.text$mn:00006B0F                 push    edx             ; Src
.text$mn:00006B10                 mov     ecx, [ebp+var_4]
.text$mn:00006B13                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006B18                 mov     ecx, [ebp+arg_0]
.text$mn:00006B1B                 lea     edx, [eax+ecx*2]
.text$mn:00006B1E                 push    edx             ; Dst
.text$mn:00006B1F                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00006B24                 add     esp, 0Ch
.text$mn:00006B27                 mov     eax, [ebp+var_8]
.text$mn:00006B2A                 push    eax             ; int
.text$mn:00006B2B                 mov     ecx, [ebp+var_4]
.text$mn:00006B2E                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006B33                 mov     ecx, [ebp+arg_0]
.text$mn:00006B36                 lea     edx, [eax+ecx*2]
.text$mn:00006B39                 mov     eax, [ebp+arg_4]
.text$mn:00006B3C                 lea     ecx, [edx+eax*2]
.text$mn:00006B3F                 push    ecx             ; Src
.text$mn:00006B40                 mov     ecx, [ebp+var_4]
.text$mn:00006B43                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006B48                 mov     edx, [ebp+arg_0]
.text$mn:00006B4B                 lea     eax, [eax+edx*2]
.text$mn:00006B4E                 mov     ecx, [ebp+arg_10]
.text$mn:00006B51                 lea     edx, [eax+ecx*2]
.text$mn:00006B54                 push    edx             ; Dst
.text$mn:00006B55                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00006B5A                 add     esp, 0Ch
.text$mn:00006B5D                 mov     eax, [ebp+arg_10]
.text$mn:00006B60                 sub     eax, [ebp+arg_4]
.text$mn:00006B63                 push    eax             ; int
.text$mn:00006B64                 mov     ecx, [ebp+var_4]
.text$mn:00006B67                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006B6C                 mov     ecx, [ebp+arg_C]
.text$mn:00006B6F                 lea     edx, [eax+ecx*2]
.text$mn:00006B72                 mov     eax, [ebp+arg_10]
.text$mn:00006B75                 lea     ecx, [edx+eax*2]
.text$mn:00006B78                 push    ecx             ; Src
.text$mn:00006B79                 mov     ecx, [ebp+var_4]
.text$mn:00006B7C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006B81                 mov     edx, [ebp+arg_0]
.text$mn:00006B84                 lea     eax, [eax+edx*2]
.text$mn:00006B87                 mov     ecx, [ebp+arg_4]
.text$mn:00006B8A                 lea     edx, [eax+ecx*2]
.text$mn:00006B8D                 push    edx             ; Dst
.text$mn:00006B8E                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00006B93                 add     esp, 0Ch
.text$mn:00006B96
.text$mn:00006B96 loc_6B96:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+11Cj
.text$mn:00006B96                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+189j ...
.text$mn:00006B96                 mov     eax, [ebp+var_C]
.text$mn:00006B99                 push    eax
.text$mn:00006B9A                 mov     ecx, [ebp+var_4]
.text$mn:00006B9D                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00006BA2                 mov     eax, [ebp+var_4]
.text$mn:00006BA5                 mov     esp, ebp
.text$mn:00006BA7                 pop     ebp
.text$mn:00006BA8                 retn    14h
.text$mn:00006BA8 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z endp
.text$mn:00006BA8
.text$mn:00006BA8 ; ---------------------------------------------------------------------------
.text$mn:00006BAB                 align 4
.text$mn:00006BAB _text$mn        ends
.text$mn:00006BAB
.text$mn:00006BAC ; ===========================================================================
.text$mn:00006BAC
.text$mn:00006BAC ; Segment type: Pure code
.text$mn:00006BAC ; Segment permissions: Read/Execute
.text$mn:00006BAC _text$mn        segment para public 'CODE' use32
.text$mn:00006BAC                 assume cs:_text$mn
.text$mn:00006BAC                 ;org 6BACh
.text$mn:00006BAC ; COMDAT (pick any)
.text$mn:00006BAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006BAC
.text$mn:00006BAC ; =============== S U B R O U T I N E =======================================
.text$mn:00006BAC
.text$mn:00006BAC ; Attributes: bp-based frame
.text$mn:00006BAC
.text$mn:00006BAC ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(int, int, void *Src, int)
.text$mn:00006BAC                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z
.text$mn:00006BAC ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z proc near
.text$mn:00006BAC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+201p
.text$mn:00006BAC
.text$mn:00006BAC var_C           = dword ptr -0Ch
.text$mn:00006BAC var_8           = dword ptr -8
.text$mn:00006BAC var_4           = dword ptr -4
.text$mn:00006BAC arg_0           = dword ptr  8
.text$mn:00006BAC arg_4           = dword ptr  0Ch
.text$mn:00006BAC Src             = dword ptr  10h
.text$mn:00006BAC arg_C           = dword ptr  14h
.text$mn:00006BAC
.text$mn:00006BAC                 push    ebp
.text$mn:00006BAD                 mov     ebp, esp
.text$mn:00006BAF                 sub     esp, 0Ch
.text$mn:00006BB2                 mov     [ebp+var_4], ecx
.text$mn:00006BB5                 cmp     [ebp+arg_C], 0
.text$mn:00006BB9                 jz      short loc_6BD1
.text$mn:00006BBB                 push    5A9h            ; unsigned int
.text$mn:00006BC0                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00006BC5                 mov     eax, [ebp+Src]
.text$mn:00006BC8                 push    eax             ; int
.text$mn:00006BC9                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00006BCE                 add     esp, 0Ch
.text$mn:00006BD1
.text$mn:00006BD1 loc_6BD1:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+Dj
.text$mn:00006BD1                 mov     ecx, [ebp+Src]
.text$mn:00006BD4                 push    ecx
.text$mn:00006BD5                 mov     ecx, [ebp+var_4]
.text$mn:00006BD8                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:00006BDD                 movzx   edx, al
.text$mn:00006BE0                 test    edx, edx
.text$mn:00006BE2                 jz      short loc_6C11
.text$mn:00006BE4                 mov     eax, [ebp+arg_C]
.text$mn:00006BE7                 push    eax
.text$mn:00006BE8                 mov     ecx, [ebp+var_4]
.text$mn:00006BEB                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006BF0                 mov     ecx, [ebp+Src]
.text$mn:00006BF3                 sub     ecx, eax
.text$mn:00006BF5                 sar     ecx, 1
.text$mn:00006BF7                 push    ecx
.text$mn:00006BF8                 mov     edx, [ebp+var_4]
.text$mn:00006BFB                 push    edx
.text$mn:00006BFC                 mov     eax, [ebp+arg_4]
.text$mn:00006BFF                 push    eax
.text$mn:00006C00                 mov     ecx, [ebp+arg_0]
.text$mn:00006C03                 push    ecx
.text$mn:00006C04                 mov     ecx, [ebp+var_4]
.text$mn:00006C07                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00006C0C                 jmp     loc_6D46
.text$mn:00006C11 ; ---------------------------------------------------------------------------
.text$mn:00006C11
.text$mn:00006C11 loc_6C11:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+36j
.text$mn:00006C11                 mov     edx, [ebp+var_4]
.text$mn:00006C14                 mov     eax, [edx+14h]
.text$mn:00006C17                 cmp     eax, [ebp+arg_0]
.text$mn:00006C1A                 jnb     short loc_6C24
.text$mn:00006C1C                 mov     ecx, [ebp+var_4]
.text$mn:00006C1F                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00006C24
.text$mn:00006C24 loc_6C24:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+6Ej
.text$mn:00006C24                 mov     ecx, [ebp+var_4]
.text$mn:00006C27                 mov     edx, [ecx+14h]
.text$mn:00006C2A                 sub     edx, [ebp+arg_0]
.text$mn:00006C2D                 cmp     edx, [ebp+arg_4]
.text$mn:00006C30                 jnb     short loc_6C3E
.text$mn:00006C32                 mov     eax, [ebp+var_4]
.text$mn:00006C35                 mov     ecx, [eax+14h]
.text$mn:00006C38                 sub     ecx, [ebp+arg_0]
.text$mn:00006C3B                 mov     [ebp+arg_4], ecx
.text$mn:00006C3E
.text$mn:00006C3E loc_6C3E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+84j
.text$mn:00006C3E                 or      edx, 0FFFFFFFFh
.text$mn:00006C41                 sub     edx, [ebp+arg_C]
.text$mn:00006C44                 mov     eax, [ebp+var_4]
.text$mn:00006C47                 mov     ecx, [eax+14h]
.text$mn:00006C4A                 sub     ecx, [ebp+arg_4]
.text$mn:00006C4D                 cmp     edx, ecx
.text$mn:00006C4F                 ja      short loc_6C59
.text$mn:00006C51                 mov     ecx, [ebp+var_4]
.text$mn:00006C54                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:00006C59
.text$mn:00006C59 loc_6C59:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+A3j
.text$mn:00006C59                 mov     edx, [ebp+var_4]
.text$mn:00006C5C                 mov     eax, [edx+14h]
.text$mn:00006C5F                 sub     eax, [ebp+arg_4]
.text$mn:00006C62                 sub     eax, [ebp+arg_0]
.text$mn:00006C65                 mov     [ebp+var_8], eax
.text$mn:00006C68                 mov     ecx, [ebp+arg_C]
.text$mn:00006C6B                 cmp     ecx, [ebp+arg_4]
.text$mn:00006C6E                 jnb     short loc_6CA6
.text$mn:00006C70                 mov     edx, [ebp+var_8]
.text$mn:00006C73                 push    edx             ; int
.text$mn:00006C74                 mov     ecx, [ebp+var_4]
.text$mn:00006C77                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006C7C                 mov     ecx, [ebp+arg_0]
.text$mn:00006C7F                 lea     edx, [eax+ecx*2]
.text$mn:00006C82                 mov     eax, [ebp+arg_4]
.text$mn:00006C85                 lea     ecx, [edx+eax*2]
.text$mn:00006C88                 push    ecx             ; Src
.text$mn:00006C89                 mov     ecx, [ebp+var_4]
.text$mn:00006C8C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006C91                 mov     edx, [ebp+arg_0]
.text$mn:00006C94                 lea     eax, [eax+edx*2]
.text$mn:00006C97                 mov     ecx, [ebp+arg_C]
.text$mn:00006C9A                 lea     edx, [eax+ecx*2]
.text$mn:00006C9D                 push    edx             ; Dst
.text$mn:00006C9E                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00006CA3                 add     esp, 0Ch
.text$mn:00006CA6
.text$mn:00006CA6 loc_6CA6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+C2j
.text$mn:00006CA6                 cmp     [ebp+arg_C], 0
.text$mn:00006CAA                 ja      short loc_6CB6
.text$mn:00006CAC                 cmp     [ebp+arg_4], 0
.text$mn:00006CB0                 jbe     loc_6D43
.text$mn:00006CB6
.text$mn:00006CB6 loc_6CB6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+FEj
.text$mn:00006CB6                 mov     eax, [ebp+var_4]
.text$mn:00006CB9                 mov     ecx, [eax+14h]
.text$mn:00006CBC                 add     ecx, [ebp+arg_C]
.text$mn:00006CBF                 sub     ecx, [ebp+arg_4]
.text$mn:00006CC2                 mov     [ebp+var_C], ecx
.text$mn:00006CC5                 push    0
.text$mn:00006CC7                 mov     edx, [ebp+var_C]
.text$mn:00006CCA                 push    edx
.text$mn:00006CCB                 mov     ecx, [ebp+var_4]
.text$mn:00006CCE                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00006CD3                 movzx   eax, al
.text$mn:00006CD6                 test    eax, eax
.text$mn:00006CD8                 jz      short loc_6D43
.text$mn:00006CDA                 mov     ecx, [ebp+arg_4]
.text$mn:00006CDD                 cmp     ecx, [ebp+arg_C]
.text$mn:00006CE0                 jnb     short loc_6D18
.text$mn:00006CE2                 mov     edx, [ebp+var_8]
.text$mn:00006CE5                 push    edx             ; int
.text$mn:00006CE6                 mov     ecx, [ebp+var_4]
.text$mn:00006CE9                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006CEE                 mov     ecx, [ebp+arg_0]
.text$mn:00006CF1                 lea     edx, [eax+ecx*2]
.text$mn:00006CF4                 mov     eax, [ebp+arg_4]
.text$mn:00006CF7                 lea     ecx, [edx+eax*2]
.text$mn:00006CFA                 push    ecx             ; Src
.text$mn:00006CFB                 mov     ecx, [ebp+var_4]
.text$mn:00006CFE                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006D03                 mov     edx, [ebp+arg_0]
.text$mn:00006D06                 lea     eax, [eax+edx*2]
.text$mn:00006D09                 mov     ecx, [ebp+arg_C]
.text$mn:00006D0C                 lea     edx, [eax+ecx*2]
.text$mn:00006D0F                 push    edx             ; Dst
.text$mn:00006D10                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00006D15                 add     esp, 0Ch
.text$mn:00006D18
.text$mn:00006D18 loc_6D18:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+134j
.text$mn:00006D18                 mov     eax, [ebp+arg_C]
.text$mn:00006D1B                 push    eax             ; int
.text$mn:00006D1C                 mov     ecx, [ebp+Src]
.text$mn:00006D1F                 push    ecx             ; Src
.text$mn:00006D20                 mov     ecx, [ebp+var_4]
.text$mn:00006D23                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006D28                 mov     edx, [ebp+arg_0]
.text$mn:00006D2B                 lea     eax, [eax+edx*2]
.text$mn:00006D2E                 push    eax             ; Dst
.text$mn:00006D2F                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00006D34                 add     esp, 0Ch
.text$mn:00006D37                 mov     ecx, [ebp+var_C]
.text$mn:00006D3A                 push    ecx
.text$mn:00006D3B                 mov     ecx, [ebp+var_4]
.text$mn:00006D3E                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00006D43
.text$mn:00006D43 loc_6D43:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+104j
.text$mn:00006D43                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+12Cj
.text$mn:00006D43                 mov     eax, [ebp+var_4]
.text$mn:00006D46
.text$mn:00006D46 loc_6D46:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+60j
.text$mn:00006D46                 mov     esp, ebp
.text$mn:00006D48                 pop     ebp
.text$mn:00006D49                 retn    10h
.text$mn:00006D49 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z endp
.text$mn:00006D49
.text$mn:00006D49 _text$mn        ends
.text$mn:00006D49
.text$mn:00006D4C ; ===========================================================================
.text$mn:00006D4C
.text$mn:00006D4C ; Segment type: Pure code
.text$mn:00006D4C ; Segment permissions: Read/Execute
.text$mn:00006D4C _text$mn        segment para public 'CODE' use32
.text$mn:00006D4C                 assume cs:_text$mn
.text$mn:00006D4C                 ;org 6D4Ch
.text$mn:00006D4C ; COMDAT (pick any)
.text$mn:00006D4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D4C
.text$mn:00006D4C ; =============== S U B R O U T I N E =======================================
.text$mn:00006D4C
.text$mn:00006D4C ; Attributes: bp-based frame
.text$mn:00006D4C
.text$mn:00006D4C ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::replace(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>)
.text$mn:00006D4C                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.text$mn:00006D4C ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z proc near
.text$mn:00006D4C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+E0p
.text$mn:00006D4C
.text$mn:00006D4C var_AC          = byte ptr -0ACh
.text$mn:00006D4C var_A0          = byte ptr -0A0h
.text$mn:00006D4C var_94          = dword ptr -94h
.text$mn:00006D4C var_90          = dword ptr -90h
.text$mn:00006D4C var_8C          = dword ptr -8Ch
.text$mn:00006D4C var_88          = dword ptr -88h
.text$mn:00006D4C var_84          = dword ptr -84h
.text$mn:00006D4C var_80          = dword ptr -80h
.text$mn:00006D4C var_7C          = dword ptr -7Ch
.text$mn:00006D4C var_78          = dword ptr -78h
.text$mn:00006D4C var_74          = dword ptr -74h
.text$mn:00006D4C var_70          = dword ptr -70h
.text$mn:00006D4C var_6C          = dword ptr -6Ch
.text$mn:00006D4C var_68          = dword ptr -68h
.text$mn:00006D4C var_64          = dword ptr -64h
.text$mn:00006D4C var_60          = dword ptr -60h
.text$mn:00006D4C var_5C          = dword ptr -5Ch
.text$mn:00006D4C var_58          = dword ptr -58h
.text$mn:00006D4C var_54          = dword ptr -54h
.text$mn:00006D4C var_50          = dword ptr -50h
.text$mn:00006D4C var_4C          = dword ptr -4Ch
.text$mn:00006D4C var_48          = dword ptr -48h
.text$mn:00006D4C var_44          = dword ptr -44h
.text$mn:00006D4C var_40          = dword ptr -40h
.text$mn:00006D4C var_3C          = dword ptr -3Ch
.text$mn:00006D4C var_38          = dword ptr -38h
.text$mn:00006D4C var_34          = dword ptr -34h
.text$mn:00006D4C var_30          = dword ptr -30h
.text$mn:00006D4C var_2C          = dword ptr -2Ch
.text$mn:00006D4C var_28          = dword ptr -28h
.text$mn:00006D4C var_24          = dword ptr -24h
.text$mn:00006D4C var_20          = dword ptr -20h
.text$mn:00006D4C var_1C          = dword ptr -1Ch
.text$mn:00006D4C var_18          = dword ptr -18h
.text$mn:00006D4C var_14          = dword ptr -14h
.text$mn:00006D4C var_10          = dword ptr -10h
.text$mn:00006D4C var_C           = dword ptr -0Ch
.text$mn:00006D4C var_4           = dword ptr -4
.text$mn:00006D4C arg_0           = byte ptr  8
.text$mn:00006D4C arg_C           = byte ptr  14h
.text$mn:00006D4C arg_18          = byte ptr  20h
.text$mn:00006D4C arg_24          = byte ptr  2Ch
.text$mn:00006D4C
.text$mn:00006D4C                 push    ebp
.text$mn:00006D4D                 mov     ebp, esp
.text$mn:00006D4F                 push    0FFFFFFFFh
.text$mn:00006D51                 push    offset __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.text$mn:00006D56                 mov     eax, large fs:0
.text$mn:00006D5C                 push    eax
.text$mn:00006D5D                 sub     esp, 0A0h
.text$mn:00006D63                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006D68                 xor     eax, ebp
.text$mn:00006D6A                 push    eax
.text$mn:00006D6B                 lea     eax, [ebp+var_C]
.text$mn:00006D6E                 mov     large fs:0, eax
.text$mn:00006D74                 mov     [ebp+var_10], ecx
.text$mn:00006D77                 mov     [ebp+var_4], 3
.text$mn:00006D7E                 lea     eax, [ebp+arg_24]
.text$mn:00006D81                 push    eax             ; std::_Iterator_base12 *
.text$mn:00006D82                 lea     ecx, [ebp+arg_18]
.text$mn:00006D85                 call    ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00006D8A                 movzx   ecx, al
.text$mn:00006D8D                 test    ecx, ecx
.text$mn:00006D8F                 jz      loc_6E71
.text$mn:00006D95                 sub     esp, 0Ch
.text$mn:00006D98                 mov     ecx, esp
.text$mn:00006D9A                 mov     [ebp+var_58], esp
.text$mn:00006D9D                 lea     edx, [ebp+arg_0]
.text$mn:00006DA0                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00006DA1                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00006DA6                 mov     [ebp+var_54], eax
.text$mn:00006DA9                 mov     eax, [ebp+var_54]
.text$mn:00006DAC                 mov     [ebp+var_60], eax
.text$mn:00006DAF                 mov     byte ptr [ebp+var_4], 4
.text$mn:00006DB3                 sub     esp, 0Ch
.text$mn:00006DB6                 mov     ecx, esp
.text$mn:00006DB8                 mov     [ebp+var_80], esp
.text$mn:00006DBB                 lea     edx, [ebp+arg_C]
.text$mn:00006DBE                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00006DBF                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00006DC4                 mov     [ebp+var_38], eax
.text$mn:00006DC7                 mov     eax, [ebp+var_38]
.text$mn:00006DCA                 mov     [ebp+var_68], eax
.text$mn:00006DCD                 mov     byte ptr [ebp+var_4], 5
.text$mn:00006DD1                 mov     byte ptr [ebp+var_4], 3
.text$mn:00006DD5                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:00006DDA                 add     esp, 18h
.text$mn:00006DDD                 mov     [ebp+var_20], eax
.text$mn:00006DE0                 mov     ecx, [ebp+var_20]
.text$mn:00006DE3                 push    ecx
.text$mn:00006DE4                 lea     edx, [ebp+var_A0]
.text$mn:00006DEA                 push    edx
.text$mn:00006DEB                 mov     ecx, [ebp+var_10]
.text$mn:00006DEE                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:00006DF3                 mov     [ebp+var_48], eax
.text$mn:00006DF6                 mov     eax, [ebp+var_48]
.text$mn:00006DF9                 mov     [ebp+var_28], eax
.text$mn:00006DFC                 mov     byte ptr [ebp+var_4], 6
.text$mn:00006E00                 sub     esp, 0Ch
.text$mn:00006E03                 mov     ecx, esp
.text$mn:00006E05                 mov     [ebp+var_90], esp
.text$mn:00006E0B                 mov     edx, [ebp+var_28]
.text$mn:00006E0E                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00006E0F                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00006E14                 mov     [ebp+var_40], eax
.text$mn:00006E17                 mov     eax, [ebp+var_40]
.text$mn:00006E1A                 mov     [ebp+var_70], eax
.text$mn:00006E1D                 mov     byte ptr [ebp+var_4], 7
.text$mn:00006E21                 sub     esp, 0Ch
.text$mn:00006E24                 mov     ecx, esp
.text$mn:00006E26                 mov     [ebp+var_88], esp
.text$mn:00006E2C                 lea     edx, [ebp+arg_0]
.text$mn:00006E2F                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00006E30                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00006E35                 mov     [ebp+var_30], eax
.text$mn:00006E38                 mov     eax, [ebp+var_30]
.text$mn:00006E3B                 mov     [ebp+var_78], eax
.text$mn:00006E3E                 mov     byte ptr [ebp+var_4], 8
.text$mn:00006E42                 mov     byte ptr [ebp+var_4], 6
.text$mn:00006E46                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:00006E4B                 add     esp, 18h
.text$mn:00006E4E                 mov     [ebp+var_50], eax
.text$mn:00006E51                 mov     ecx, [ebp+var_50]
.text$mn:00006E54                 push    ecx
.text$mn:00006E55                 mov     ecx, [ebp+var_10]
.text$mn:00006E58                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)
.text$mn:00006E5D                 mov     byte ptr [ebp+var_4], 3
.text$mn:00006E61                 lea     ecx, [ebp+var_A0]
.text$mn:00006E67                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00006E6C                 jmp     loc_6F61
.text$mn:00006E71 ; ---------------------------------------------------------------------------
.text$mn:00006E71
.text$mn:00006E71 loc_6E71:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+43j
.text$mn:00006E71                 lea     edx, [ebp+arg_18]
.text$mn:00006E74                 push    edx             ; std::_Iterator_base12 *
.text$mn:00006E75                 lea     ecx, [ebp+arg_24]
.text$mn:00006E78                 call    ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00006E7D                 push    eax             ; int
.text$mn:00006E7E                 lea     ecx, [ebp+arg_18]
.text$mn:00006E81                 call    ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)
.text$mn:00006E86                 push    eax             ; Src
.text$mn:00006E87                 sub     esp, 0Ch
.text$mn:00006E8A                 mov     ecx, esp
.text$mn:00006E8C                 mov     [ebp+var_94], esp
.text$mn:00006E92                 lea     eax, [ebp+arg_0]
.text$mn:00006E95                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00006E96                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00006E9B                 mov     [ebp+var_18], eax
.text$mn:00006E9E                 mov     ecx, [ebp+var_18]
.text$mn:00006EA1                 mov     [ebp+var_5C], ecx
.text$mn:00006EA4                 mov     byte ptr [ebp+var_4], 9
.text$mn:00006EA8                 sub     esp, 0Ch
.text$mn:00006EAB                 mov     ecx, esp
.text$mn:00006EAD                 mov     [ebp+var_64], esp
.text$mn:00006EB0                 lea     edx, [ebp+arg_C]
.text$mn:00006EB3                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00006EB4                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00006EB9                 mov     [ebp+var_1C], eax
.text$mn:00006EBC                 mov     eax, [ebp+var_1C]
.text$mn:00006EBF                 mov     [ebp+var_6C], eax
.text$mn:00006EC2                 mov     byte ptr [ebp+var_4], 0Ah
.text$mn:00006EC6                 mov     byte ptr [ebp+var_4], 3
.text$mn:00006ECA                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:00006ECF                 add     esp, 18h
.text$mn:00006ED2                 mov     [ebp+var_24], eax
.text$mn:00006ED5                 mov     ecx, [ebp+var_24]
.text$mn:00006ED8                 push    ecx             ; int
.text$mn:00006ED9                 lea     edx, [ebp+var_AC]
.text$mn:00006EDF                 push    edx
.text$mn:00006EE0                 mov     ecx, [ebp+var_10]
.text$mn:00006EE3                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:00006EE8                 mov     [ebp+var_2C], eax
.text$mn:00006EEB                 mov     eax, [ebp+var_2C]
.text$mn:00006EEE                 mov     [ebp+var_34], eax
.text$mn:00006EF1                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:00006EF5                 sub     esp, 0Ch
.text$mn:00006EF8                 mov     ecx, esp
.text$mn:00006EFA                 mov     [ebp+var_74], esp
.text$mn:00006EFD                 mov     edx, [ebp+var_34]
.text$mn:00006F00                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00006F01                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00006F06                 mov     [ebp+var_3C], eax
.text$mn:00006F09                 mov     eax, [ebp+var_3C]
.text$mn:00006F0C                 mov     [ebp+var_7C], eax
.text$mn:00006F0F                 mov     byte ptr [ebp+var_4], 0Ch
.text$mn:00006F13                 sub     esp, 0Ch
.text$mn:00006F16                 mov     ecx, esp
.text$mn:00006F18                 mov     [ebp+var_84], esp
.text$mn:00006F1E                 lea     edx, [ebp+arg_0]
.text$mn:00006F21                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00006F22                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00006F27                 mov     [ebp+var_44], eax
.text$mn:00006F2A                 mov     eax, [ebp+var_44]
.text$mn:00006F2D                 mov     [ebp+var_8C], eax
.text$mn:00006F33                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:00006F37                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:00006F3B                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:00006F40                 add     esp, 18h
.text$mn:00006F43                 mov     [ebp+var_4C], eax
.text$mn:00006F46                 mov     ecx, [ebp+var_4C]
.text$mn:00006F49                 push    ecx             ; int
.text$mn:00006F4A                 mov     ecx, [ebp+var_10]
.text$mn:00006F4D                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)
.text$mn:00006F52                 mov     byte ptr [ebp+var_4], 3
.text$mn:00006F56                 lea     ecx, [ebp+var_AC]
.text$mn:00006F5C                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00006F61
.text$mn:00006F61 loc_6F61:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+120j
.text$mn:00006F61                 mov     edx, [ebp+var_10]
.text$mn:00006F64                 mov     [ebp+var_14], edx
.text$mn:00006F67                 mov     byte ptr [ebp+var_4], 2
.text$mn:00006F6B                 lea     ecx, [ebp+arg_0]
.text$mn:00006F6E                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00006F73                 mov     byte ptr [ebp+var_4], 1
.text$mn:00006F77                 lea     ecx, [ebp+arg_C]
.text$mn:00006F7A                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00006F7F                 mov     byte ptr [ebp+var_4], 0
.text$mn:00006F83                 lea     ecx, [ebp+arg_18]
.text$mn:00006F86                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00006F8B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006F92                 lea     ecx, [ebp+arg_24]
.text$mn:00006F95                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00006F9A                 mov     eax, [ebp+var_14]
.text$mn:00006F9D                 mov     ecx, [ebp+var_C]
.text$mn:00006FA0                 mov     large fs:0, ecx
.text$mn:00006FA7                 pop     ecx
.text$mn:00006FA8                 mov     esp, ebp
.text$mn:00006FAA                 pop     ebp
.text$mn:00006FAB                 retn    30h
.text$mn:00006FAB ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z endp
.text$mn:00006FAB
.text$mn:00006FAB ; ---------------------------------------------------------------------------
.text$mn:00006FAE                 align 10h
.text$mn:00006FAE _text$mn        ends
.text$mn:00006FAE
.text$x:00006FB0 ; ===========================================================================
.text$x:00006FB0
.text$x:00006FB0 ; Segment type: Pure code
.text$x:00006FB0 ; Segment permissions: Read/Execute
.text$x:00006FB0 _text$x         segment para public 'CODE' use32
.text$x:00006FB0                 assume cs:_text$x
.text$x:00006FB0                 ;org 6FB0h
.text$x:00006FB0 ; COMDAT (pick associative to section at 6D4C)
.text$x:00006FB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006FB0
.text$x:00006FB0 ; =============== S U B R O U T I N E =======================================
.text$x:00006FB0
.text$x:00006FB0
.text$x:00006FB0 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$0 proc near
.text$x:00006FB0                                         ; DATA XREF: .xdata$x:000078CCo
.text$x:00006FB0                 lea     ecx, [ebp+2Ch]
.text$x:00006FB3                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00006FB3 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$0 endp
.text$x:00006FB3
.text$x:00006FB8
.text$x:00006FB8 ; =============== S U B R O U T I N E =======================================
.text$x:00006FB8
.text$x:00006FB8
.text$x:00006FB8 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$1 proc near
.text$x:00006FB8                                         ; DATA XREF: .xdata$x:000078D4o
.text$x:00006FB8                 lea     ecx, [ebp+20h]
.text$x:00006FBB                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00006FBB __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$1 endp
.text$x:00006FBB
.text$x:00006FC0
.text$x:00006FC0 ; =============== S U B R O U T I N E =======================================
.text$x:00006FC0
.text$x:00006FC0
.text$x:00006FC0 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$2 proc near
.text$x:00006FC0                                         ; DATA XREF: .xdata$x:000078DCo
.text$x:00006FC0                 lea     ecx, [ebp+14h]
.text$x:00006FC3                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00006FC3 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$2 endp
.text$x:00006FC3
.text$x:00006FC8
.text$x:00006FC8 ; =============== S U B R O U T I N E =======================================
.text$x:00006FC8
.text$x:00006FC8
.text$x:00006FC8 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$3 proc near
.text$x:00006FC8                                         ; DATA XREF: .xdata$x:000078E4o
.text$x:00006FC8                 lea     ecx, [ebp+8]
.text$x:00006FCB                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00006FCB __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$3 endp
.text$x:00006FCB
.text$x:00006FD0
.text$x:00006FD0 ; =============== S U B R O U T I N E =======================================
.text$x:00006FD0
.text$x:00006FD0
.text$x:00006FD0 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$4 proc near
.text$x:00006FD0                                         ; DATA XREF: .xdata$x:000078ECo
.text$x:00006FD0                 mov     ecx, [ebp-58h]
.text$x:00006FD3                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00006FD3 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$4 endp
.text$x:00006FD3
.text$x:00006FD8
.text$x:00006FD8 ; =============== S U B R O U T I N E =======================================
.text$x:00006FD8
.text$x:00006FD8
.text$x:00006FD8 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$5 proc near
.text$x:00006FD8                                         ; DATA XREF: .xdata$x:000078F4o
.text$x:00006FD8                 mov     ecx, [ebp-80h]
.text$x:00006FDB                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00006FDB __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$5 endp
.text$x:00006FDB
.text$x:00006FE0
.text$x:00006FE0 ; =============== S U B R O U T I N E =======================================
.text$x:00006FE0
.text$x:00006FE0
.text$x:00006FE0 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$6 proc near
.text$x:00006FE0                                         ; DATA XREF: .xdata$x:000078FCo
.text$x:00006FE0                 lea     ecx, [ebp-0A0h]
.text$x:00006FE6                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00006FE6 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$6 endp
.text$x:00006FE6
.text$x:00006FEB
.text$x:00006FEB ; =============== S U B R O U T I N E =======================================
.text$x:00006FEB
.text$x:00006FEB
.text$x:00006FEB __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$7 proc near
.text$x:00006FEB                                         ; DATA XREF: .xdata$x:00007904o
.text$x:00006FEB                 mov     ecx, [ebp-90h]
.text$x:00006FF1                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00006FF1 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$7 endp
.text$x:00006FF1
.text$x:00006FF6
.text$x:00006FF6 ; =============== S U B R O U T I N E =======================================
.text$x:00006FF6
.text$x:00006FF6
.text$x:00006FF6 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$8 proc near
.text$x:00006FF6                                         ; DATA XREF: .xdata$x:0000790Co
.text$x:00006FF6                 mov     ecx, [ebp-88h]
.text$x:00006FFC                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00006FFC __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$8 endp
.text$x:00006FFC
.text$x:00007001
.text$x:00007001 ; =============== S U B R O U T I N E =======================================
.text$x:00007001
.text$x:00007001
.text$x:00007001 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$9 proc near
.text$x:00007001                                         ; DATA XREF: .xdata$x:00007914o
.text$x:00007001                 mov     ecx, [ebp-94h]
.text$x:00007007                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00007007 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$9 endp
.text$x:00007007
.text$x:0000700C
.text$x:0000700C ; =============== S U B R O U T I N E =======================================
.text$x:0000700C
.text$x:0000700C
.text$x:0000700C __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$10 proc near
.text$x:0000700C                                         ; DATA XREF: .xdata$x:0000791Co
.text$x:0000700C                 mov     ecx, [ebp-64h]
.text$x:0000700F                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000700F __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$10 endp
.text$x:0000700F
.text$x:00007014
.text$x:00007014 ; =============== S U B R O U T I N E =======================================
.text$x:00007014
.text$x:00007014
.text$x:00007014 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$11 proc near
.text$x:00007014                                         ; DATA XREF: .xdata$x:00007924o
.text$x:00007014                 lea     ecx, [ebp-0ACh]
.text$x:0000701A                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000701A __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$11 endp
.text$x:0000701A
.text$x:0000701F
.text$x:0000701F ; =============== S U B R O U T I N E =======================================
.text$x:0000701F
.text$x:0000701F
.text$x:0000701F __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$12 proc near
.text$x:0000701F                                         ; DATA XREF: .xdata$x:0000792Co
.text$x:0000701F                 mov     ecx, [ebp-74h]
.text$x:00007022                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00007022 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$12 endp
.text$x:00007022
.text$x:00007027
.text$x:00007027 ; =============== S U B R O U T I N E =======================================
.text$x:00007027
.text$x:00007027
.text$x:00007027 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$13 proc near
.text$x:00007027                                         ; DATA XREF: .xdata$x:00007934o
.text$x:00007027                 mov     ecx, [ebp-84h]
.text$x:0000702D                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000702D __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$13 endp
.text$x:0000702D
.text$x:00007032
.text$x:00007032 ; =============== S U B R O U T I N E =======================================
.text$x:00007032
.text$x:00007032
.text$x:00007032 __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z proc near
.text$x:00007032                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+5o
.text$x:00007032
.text$x:00007032 arg_4           = dword ptr  8
.text$x:00007032
.text$x:00007032                 mov     edx, [esp+arg_4]
.text$x:00007036                 lea     eax, [edx+0Ch]
.text$x:00007039                 mov     ecx, [edx-0A4h]
.text$x:0000703F                 xor     ecx, eax
.text$x:00007041                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007046                 mov     eax, offset __ehfuncinfo$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.text$x:0000704B                 jmp     ___CxxFrameHandler3
.text$x:0000704B __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z endp
.text$x:0000704B
.text$x:0000704B _text$x         ends
.text$x:0000704B
.text$mn:00007050 ; ===========================================================================
.text$mn:00007050
.text$mn:00007050 ; Segment type: Pure code
.text$mn:00007050 ; Segment permissions: Read/Execute
.text$mn:00007050 _text$mn        segment para public 'CODE' use32
.text$mn:00007050                 assume cs:_text$mn
.text$mn:00007050                 ;org 7050h
.text$mn:00007050 ; COMDAT (pick any)
.text$mn:00007050                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007050
.text$mn:00007050 ; =============== S U B R O U T I N E =======================================
.text$mn:00007050
.text$mn:00007050 ; Attributes: bp-based frame
.text$mn:00007050
.text$mn:00007050 ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::select_on_container_copy_construction(void)const
.text$mn:00007050                 public ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ
.text$mn:00007050 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ proc near
.text$mn:00007050                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+3Ap
.text$mn:00007050
.text$mn:00007050 var_8           = dword ptr -8
.text$mn:00007050 var_1           = byte ptr -1
.text$mn:00007050 arg_0           = dword ptr  8
.text$mn:00007050
.text$mn:00007050                 push    ebp
.text$mn:00007051                 mov     ebp, esp
.text$mn:00007053                 sub     esp, 8
.text$mn:00007056                 mov     [ebp+var_8], ecx
.text$mn:00007059                 mov     eax, [ebp+var_8]
.text$mn:0000705C                 push    eax
.text$mn:0000705D                 lea     ecx, [ebp+var_1]
.text$mn:00007060                 push    ecx
.text$mn:00007061                 call    ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ; std::allocator_traits<std::allocator<wchar_t>>::select_on_container_copy_construction(std::allocator<wchar_t> const &)
.text$mn:00007066                 add     esp, 8
.text$mn:00007069                 push    eax
.text$mn:0000706A                 mov     ecx, [ebp+arg_0]
.text$mn:0000706D                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(std::allocator<wchar_t> const &)
.text$mn:00007072                 mov     eax, [ebp+arg_0]
.text$mn:00007075                 mov     esp, ebp
.text$mn:00007077                 pop     ebp
.text$mn:00007078                 retn    4
.text$mn:00007078 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ endp
.text$mn:00007078
.text$mn:00007078 ; ---------------------------------------------------------------------------
.text$mn:0000707B                 align 4
.text$mn:0000707B _text$mn        ends
.text$mn:0000707B
.text$mn:0000707C ; ===========================================================================
.text$mn:0000707C
.text$mn:0000707C ; Segment type: Pure code
.text$mn:0000707C ; Segment permissions: Read/Execute
.text$mn:0000707C _text$mn        segment para public 'CODE' use32
.text$mn:0000707C                 assume cs:_text$mn
.text$mn:0000707C                 ;org 707Ch
.text$mn:0000707C ; COMDAT (pick any)
.text$mn:0000707C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000707C
.text$mn:0000707C ; =============== S U B R O U T I N E =======================================
.text$mn:0000707C
.text$mn:0000707C ; Attributes: bp-based frame
.text$mn:0000707C
.text$mn:0000707C ; public: class std::allocator<wchar_t> __thiscall std::allocator<wchar_t>::select_on_container_copy_construction(void)const
.text$mn:0000707C                 public ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ
.text$mn:0000707C ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ proc near
.text$mn:0000707C                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::select_on_container_copy_construction(std::allocator<wchar_t> const &)+Ap
.text$mn:0000707C
.text$mn:0000707C var_4           = dword ptr -4
.text$mn:0000707C arg_0           = dword ptr  8
.text$mn:0000707C
.text$mn:0000707C                 push    ebp
.text$mn:0000707D                 mov     ebp, esp
.text$mn:0000707F                 push    ecx
.text$mn:00007080                 mov     [ebp+var_4], ecx
.text$mn:00007083                 mov     eax, [ebp+var_4]
.text$mn:00007086                 push    eax
.text$mn:00007087                 mov     ecx, [ebp+arg_0]
.text$mn:0000708A                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:0000708F                 mov     eax, [ebp+arg_0]
.text$mn:00007092                 mov     esp, ebp
.text$mn:00007094                 pop     ebp
.text$mn:00007095                 retn    4
.text$mn:00007095 ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ endp
.text$mn:00007095
.text$mn:00007095 _text$mn        ends
.text$mn:00007095
.text$mn:00007098 ; ===========================================================================
.text$mn:00007098
.text$mn:00007098 ; Segment type: Pure code
.text$mn:00007098 ; Segment permissions: Read/Execute
.text$mn:00007098 _text$mn        segment para public 'CODE' use32
.text$mn:00007098                 assume cs:_text$mn
.text$mn:00007098                 ;org 7098h
.text$mn:00007098 ; COMDAT (pick any)
.text$mn:00007098                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007098
.text$mn:00007098 ; =============== S U B R O U T I N E =======================================
.text$mn:00007098
.text$mn:00007098 ; Attributes: bp-based frame
.text$mn:00007098
.text$mn:00007098 ; public: static class std::allocator<wchar_t> __cdecl std::allocator_traits<class std::allocator<wchar_t>>::select_on_container_copy_construction(class std::allocator<wchar_t> const &)
.text$mn:00007098                 public ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z
.text$mn:00007098 ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z proc near
.text$mn:00007098                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)+11p
.text$mn:00007098
.text$mn:00007098 arg_0           = dword ptr  8
.text$mn:00007098 arg_4           = dword ptr  0Ch
.text$mn:00007098
.text$mn:00007098                 push    ebp
.text$mn:00007099                 mov     ebp, esp
.text$mn:0000709B                 mov     eax, [ebp+arg_0]
.text$mn:0000709E                 push    eax
.text$mn:0000709F                 mov     ecx, [ebp+arg_4]
.text$mn:000070A2                 call    ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ ; std::allocator<wchar_t>::select_on_container_copy_construction(void)
.text$mn:000070A7                 mov     eax, [ebp+arg_0]
.text$mn:000070AA                 pop     ebp
.text$mn:000070AB                 retn
.text$mn:000070AB ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z endp
.text$mn:000070AB
.text$mn:000070AB _text$mn        ends
.text$mn:000070AB
.text$mn:000070AC ; ===========================================================================
.text$mn:000070AC
.text$mn:000070AC ; Segment type: Pure code
.text$mn:000070AC ; Segment permissions: Read/Execute
.text$mn:000070AC _text$mn        segment para public 'CODE' use32
.text$mn:000070AC                 assume cs:_text$mn
.text$mn:000070AC                 ;org 70ACh
.text$mn:000070AC ; COMDAT (pick any)
.text$mn:000070AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000070AC
.text$mn:000070AC ; =============== S U B R O U T I N E =======================================
.text$mn:000070AC
.text$mn:000070AC ; Attributes: bp-based frame
.text$mn:000070AC
.text$mn:000070AC ; void __thiscall NppParameters::setFileSaveDlgFilterIndex(NppParameters *this, int)
.text$mn:000070AC                 public ?setFileSaveDlgFilterIndex@NppParameters@@QAEXH@Z
.text$mn:000070AC ?setFileSaveDlgFilterIndex@NppParameters@@QAEXH@Z proc near
.text$mn:000070AC                                         ; CODE XREF: FileDialog::run(HWND__ *,uint,uint,long)+1DAp
.text$mn:000070AC
.text$mn:000070AC var_4           = dword ptr -4
.text$mn:000070AC arg_0           = dword ptr  8
.text$mn:000070AC
.text$mn:000070AC                 push    ebp
.text$mn:000070AD                 mov     ebp, esp
.text$mn:000070AF                 push    ecx
.text$mn:000070B0                 mov     [ebp+var_4], ecx
.text$mn:000070B3                 mov     eax, [ebp+var_4]
.text$mn:000070B6                 mov     ecx, [ebp+arg_0]
.text$mn:000070B9                 mov     [eax+0B90h], ecx
.text$mn:000070BF                 mov     esp, ebp
.text$mn:000070C1                 pop     ebp
.text$mn:000070C2                 retn    4
.text$mn:000070C2 ?setFileSaveDlgFilterIndex@NppParameters@@QAEXH@Z endp
.text$mn:000070C2
.text$mn:000070C2 ; ---------------------------------------------------------------------------
.text$mn:000070C5                 align 4
.text$mn:000070C5 _text$mn        ends
.text$mn:000070C5
.text$mn:000070C8 ; ===========================================================================
.text$mn:000070C8
.text$mn:000070C8 ; Segment type: Pure code
.text$mn:000070C8 ; Segment permissions: Read/Execute
.text$mn:000070C8 _text$mn        segment para public 'CODE' use32
.text$mn:000070C8                 assume cs:_text$mn
.text$mn:000070C8                 ;org 70C8h
.text$mn:000070C8 ; COMDAT (pick any)
.text$mn:000070C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000070C8
.text$mn:000070C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000070C8
.text$mn:000070C8 ; Attributes: bp-based frame
.text$mn:000070C8
.text$mn:000070C8 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::size(void)const
.text$mn:000070C8                 public ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:000070C8 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:000070C8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+Cp
.text$mn:000070C8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+21p
.text$mn:000070C8
.text$mn:000070C8 var_4           = dword ptr -4
.text$mn:000070C8
.text$mn:000070C8                 push    ebp
.text$mn:000070C9                 mov     ebp, esp
.text$mn:000070CB                 push    ecx
.text$mn:000070CC                 mov     [ebp+var_4], ecx
.text$mn:000070CF                 mov     eax, [ebp+var_4]
.text$mn:000070D2                 mov     eax, [eax+14h]
.text$mn:000070D5                 mov     esp, ebp
.text$mn:000070D7                 pop     ebp
.text$mn:000070D8                 retn
.text$mn:000070D8 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:000070D8
.text$mn:000070D8 ; ---------------------------------------------------------------------------
.text$mn:000070D9                 align 4
.text$mn:000070D9 _text$mn        ends
.text$mn:000070D9
.text$mn:000070DC ; ===========================================================================
.text$mn:000070DC
.text$mn:000070DC ; Segment type: Pure code
.text$mn:000070DC ; Segment permissions: Read/Execute
.text$mn:000070DC _text$mn        segment para public 'CODE' use32
.text$mn:000070DC                 assume cs:_text$mn
.text$mn:000070DC                 ;org 70DCh
.text$mn:000070DC ; COMDAT (pick any)
.text$mn:000070DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000070DC
.text$mn:000070DC ; =============== S U B R O U T I N E =======================================
.text$mn:000070DC
.text$mn:000070DC ; Attributes: bp-based frame
.text$mn:000070DC
.text$mn:000070DC ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::size(void)const
.text$mn:000070DC                 public ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:000070DC ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:000070DC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+Cp
.text$mn:000070DC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+21p ...
.text$mn:000070DC
.text$mn:000070DC var_4           = dword ptr -4
.text$mn:000070DC
.text$mn:000070DC                 push    ebp
.text$mn:000070DD                 mov     ebp, esp
.text$mn:000070DF                 push    ecx
.text$mn:000070E0                 mov     [ebp+var_4], ecx
.text$mn:000070E3                 mov     eax, [ebp+var_4]
.text$mn:000070E6                 mov     eax, [eax+14h]
.text$mn:000070E9                 mov     esp, ebp
.text$mn:000070EB                 pop     ebp
.text$mn:000070EC                 retn
.text$mn:000070EC ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:000070EC
.text$mn:000070EC ; ---------------------------------------------------------------------------
.text$mn:000070ED                 align 10h
.text$mn:000070ED _text$mn        ends
.text$mn:000070ED
.text$mn:000070F0 ; ===========================================================================
.text$mn:000070F0
.text$mn:000070F0 ; Segment type: Pure code
.text$mn:000070F0 ; Segment permissions: Read/Execute
.text$mn:000070F0 _text$mn        segment para public 'CODE' use32
.text$mn:000070F0                 assume cs:_text$mn
.text$mn:000070F0                 ;org 70F0h
.text$mn:000070F0 ; COMDAT (pick any)
.text$mn:000070F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000070F0
.text$mn:000070F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000070F0
.text$mn:000070F0 ; Attributes: bp-based frame
.text$mn:000070F0
.text$mn:000070F0 ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::size(void)const
.text$mn:000070F0                 public ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:000070F0 ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:000070F0                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+A9p
.text$mn:000070F0                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+22p ...
.text$mn:000070F0
.text$mn:000070F0 var_4           = dword ptr -4
.text$mn:000070F0
.text$mn:000070F0                 push    ebp
.text$mn:000070F1                 mov     ebp, esp
.text$mn:000070F3                 push    ecx
.text$mn:000070F4                 mov     [ebp+var_4], ecx
.text$mn:000070F7                 mov     eax, [ebp+var_4]
.text$mn:000070FA                 mov     ecx, [ebp+var_4]
.text$mn:000070FD                 mov     eax, [eax+8]
.text$mn:00007100                 sub     eax, [ecx+4]
.text$mn:00007103                 cdq
.text$mn:00007104                 mov     ecx, 1Ch
.text$mn:00007109                 idiv    ecx
.text$mn:0000710B                 mov     esp, ebp
.text$mn:0000710D                 pop     ebp
.text$mn:0000710E                 retn
.text$mn:0000710E ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:0000710E
.text$mn:0000710E ; ---------------------------------------------------------------------------
.text$mn:0000710F                 align 10h
.text$mn:0000710F _text$mn        ends
.text$mn:0000710F
.text$mn:00007110 ; ===========================================================================
.text$mn:00007110
.text$mn:00007110 ; Segment type: Pure code
.text$mn:00007110 ; Segment permissions: Read/Execute
.text$mn:00007110 _text$mn        segment para public 'CODE' use32
.text$mn:00007110                 assume cs:_text$mn
.text$mn:00007110                 ;org 7110h
.text$mn:00007110 ; COMDAT (pick any)
.text$mn:00007110                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007110
.text$mn:00007110 ; =============== S U B R O U T I N E =======================================
.text$mn:00007110
.text$mn:00007110 ; Attributes: bp-based frame
.text$mn:00007110
.text$mn:00007110 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::substr(unsigned int, unsigned int)const
.text$mn:00007110                 public ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z
.text$mn:00007110 ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z proc near
.text$mn:00007110                                         ; CODE XREF: FileDialog::setExtFilter(wchar_t const *,wchar_t const *,...)+B1p
.text$mn:00007110
.text$mn:00007110 var_18          = dword ptr -18h
.text$mn:00007110 var_14          = dword ptr -14h
.text$mn:00007110 var_D           = byte ptr -0Dh
.text$mn:00007110 var_C           = dword ptr -0Ch
.text$mn:00007110 var_4           = dword ptr -4
.text$mn:00007110 arg_0           = dword ptr  8
.text$mn:00007110 arg_4           = dword ptr  0Ch
.text$mn:00007110 arg_8           = dword ptr  10h
.text$mn:00007110
.text$mn:00007110                 push    ebp
.text$mn:00007111                 mov     ebp, esp
.text$mn:00007113                 push    0FFFFFFFFh
.text$mn:00007115                 push    offset __ehhandler$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z
.text$mn:0000711A                 mov     eax, large fs:0
.text$mn:00007120                 push    eax
.text$mn:00007121                 sub     esp, 0Ch
.text$mn:00007124                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007129                 xor     eax, ebp
.text$mn:0000712B                 push    eax
.text$mn:0000712C                 lea     eax, [ebp+var_C]
.text$mn:0000712F                 mov     large fs:0, eax
.text$mn:00007135                 mov     [ebp+var_14], ecx
.text$mn:00007138                 mov     [ebp+var_18], 0
.text$mn:0000713F                 lea     eax, [ebp+var_D]
.text$mn:00007142                 push    eax
.text$mn:00007143                 mov     ecx, [ebp+var_14]
.text$mn:00007146                 call    ?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::get_allocator(void)
.text$mn:0000714B                 push    eax
.text$mn:0000714C                 mov     ecx, [ebp+arg_8]
.text$mn:0000714F                 push    ecx
.text$mn:00007150                 mov     edx, [ebp+arg_4]
.text$mn:00007153                 push    edx
.text$mn:00007154                 mov     eax, [ebp+var_14]
.text$mn:00007157                 push    eax
.text$mn:00007158                 mov     ecx, [ebp+arg_0]
.text$mn:0000715B                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint,std::allocator<wchar_t> const &)
.text$mn:00007160                 mov     [ebp+var_4], 0
.text$mn:00007167                 mov     ecx, [ebp+var_18]
.text$mn:0000716A                 or      ecx, 1
.text$mn:0000716D                 mov     [ebp+var_18], ecx
.text$mn:00007170                 mov     eax, [ebp+arg_0]
.text$mn:00007173                 mov     ecx, [ebp+var_C]
.text$mn:00007176                 mov     large fs:0, ecx
.text$mn:0000717D                 pop     ecx
.text$mn:0000717E                 mov     esp, ebp
.text$mn:00007180                 pop     ebp
.text$mn:00007181                 retn    0Ch
.text$mn:00007181 ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z endp
.text$mn:00007181
.text$mn:00007181 _text$mn        ends
.text$mn:00007181
.text$x:00007184 ; ===========================================================================
.text$x:00007184
.text$x:00007184 ; Segment type: Pure code
.text$x:00007184 ; Segment permissions: Read/Execute
.text$x:00007184 _text$x         segment para public 'CODE' use32
.text$x:00007184                 assume cs:_text$x
.text$x:00007184                 ;org 7184h
.text$x:00007184 ; COMDAT (pick associative to section at 7110)
.text$x:00007184                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007184
.text$x:00007184 ; =============== S U B R O U T I N E =======================================
.text$x:00007184
.text$x:00007184
.text$x:00007184 __unwindfunclet$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z$0 proc near
.text$x:00007184                                         ; DATA XREF: .xdata$x:00007994o
.text$x:00007184                 mov     eax, [ebp-18h]
.text$x:00007187                 and     eax, 1
.text$x:0000718A                 jz      $LN4_1
.text$x:00007190                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:00007194                 mov     ecx, [ebp+8]
.text$x:00007197                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000719C ; ---------------------------------------------------------------------------
.text$x:0000719C
.text$x:0000719C $LN4_1:                                 ; CODE XREF: __unwindfunclet$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z$0+6j
.text$x:0000719C                 retn
.text$x:0000719C __unwindfunclet$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z$0 endp
.text$x:0000719C
.text$x:0000719D
.text$x:0000719D ; =============== S U B R O U T I N E =======================================
.text$x:0000719D
.text$x:0000719D
.text$x:0000719D __ehhandler$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z proc near
.text$x:0000719D                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::substr(uint,uint)+5o
.text$x:0000719D
.text$x:0000719D arg_4           = dword ptr  8
.text$x:0000719D
.text$x:0000719D                 mov     edx, [esp+arg_4]
.text$x:000071A1                 lea     eax, [edx+0Ch]
.text$x:000071A4                 mov     ecx, [edx-10h]
.text$x:000071A7                 xor     ecx, eax
.text$x:000071A9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000071AE                 mov     eax, offset __ehfuncinfo$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z
.text$x:000071B3                 jmp     ___CxxFrameHandler3
.text$x:000071B3 __ehhandler$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z endp
.text$x:000071B3
.text$x:000071B3 _text$x         ends
.text$x:000071B3
.text$mn:000071B8 ; ===========================================================================
.text$mn:000071B8
.text$mn:000071B8 ; Segment type: Pure code
.text$mn:000071B8 ; Segment permissions: Read/Execute
.text$mn:000071B8 _text$mn        segment para public 'CODE' use32
.text$mn:000071B8                 assume cs:_text$mn
.text$mn:000071B8                 ;org 71B8h
.text$mn:000071B8 ; COMDAT (pick any)
.text$mn:000071B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000071B8
.text$mn:000071B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000071B8
.text$mn:000071B8 ; Attributes: bp-based frame
.text$mn:000071B8
.text$mn:000071B8 ; const struct std::error_category *__cdecl std::system_category()
.text$mn:000071B8                 public ?system_category@std@@YAABVerror_category@1@XZ
.text$mn:000071B8 ?system_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:000071B8                                         ; CODE XREF: std::_System_error_category::default_error_condition(int):loc_5E24p
.text$mn:000071B8                 push    ebp
.text$mn:000071B9                 mov     ebp, esp
.text$mn:000071BB                 mov     eax, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_System_error_category std::_Error_objects<int>::_System_object
.text$mn:000071C0                 pop     ebp
.text$mn:000071C1                 retn
.text$mn:000071C1 ?system_category@std@@YAABVerror_category@1@XZ endp
.text$mn:000071C1
.text$mn:000071C1 ; ---------------------------------------------------------------------------
.text$mn:000071C2                 align 4
.text$mn:000071C2 _text$mn        ends
.text$mn:000071C2
.text$mn:000071C4 ; ===========================================================================
.text$mn:000071C4
.text$mn:000071C4 ; Segment type: Pure code
.text$mn:000071C4 ; Segment permissions: Read/Execute
.text$mn:000071C4 _text$mn        segment para public 'CODE' use32
.text$mn:000071C4                 assume cs:_text$mn
.text$mn:000071C4                 ;org 71C4h
.text$mn:000071C4 ; COMDAT (pick any)
.text$mn:000071C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000071C4
.text$mn:000071C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000071C4
.text$mn:000071C4 ; Attributes: bp-based frame
.text$mn:000071C4
.text$mn:000071C4 ; int __thiscall std::error_code::value(std::error_code *__hidden this)
.text$mn:000071C4                 public ?value@error_code@std@@QBEHXZ
.text$mn:000071C4 ?value@error_code@std@@QBEHXZ proc near ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+24p
.text$mn:000071C4
.text$mn:000071C4 var_4           = dword ptr -4
.text$mn:000071C4
.text$mn:000071C4                 push    ebp
.text$mn:000071C5                 mov     ebp, esp
.text$mn:000071C7                 push    ecx
.text$mn:000071C8                 mov     [ebp+var_4], ecx
.text$mn:000071CB                 mov     eax, [ebp+var_4]
.text$mn:000071CE                 mov     eax, [eax]
.text$mn:000071D0                 mov     esp, ebp
.text$mn:000071D2                 pop     ebp
.text$mn:000071D3                 retn
.text$mn:000071D3 ?value@error_code@std@@QBEHXZ endp
.text$mn:000071D3
.text$mn:000071D3 _text$mn        ends
.text$mn:000071D3
.text$mn:000071D4 ; ===========================================================================
.text$mn:000071D4
.text$mn:000071D4 ; Segment type: Pure code
.text$mn:000071D4 ; Segment permissions: Read/Execute
.text$mn:000071D4 _text$mn        segment para public 'CODE' use32
.text$mn:000071D4                 assume cs:_text$mn
.text$mn:000071D4                 ;org 71D4h
.text$mn:000071D4 ; COMDAT (pick any)
.text$mn:000071D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000071D4
.text$mn:000071D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000071D4
.text$mn:000071D4 ; Attributes: bp-based frame
.text$mn:000071D4
.text$mn:000071D4 ; int __thiscall std::error_condition::value(std::error_condition *__hidden this)
.text$mn:000071D4                 public ?value@error_condition@std@@QBEHXZ
.text$mn:000071D4 ?value@error_condition@std@@QBEHXZ proc near
.text$mn:000071D4                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+2Cp
.text$mn:000071D4                                         ; std::error_condition::operator==(std::error_condition const &)+36p
.text$mn:000071D4
.text$mn:000071D4 var_4           = dword ptr -4
.text$mn:000071D4
.text$mn:000071D4                 push    ebp
.text$mn:000071D5                 mov     ebp, esp
.text$mn:000071D7                 push    ecx
.text$mn:000071D8                 mov     [ebp+var_4], ecx
.text$mn:000071DB                 mov     eax, [ebp+var_4]
.text$mn:000071DE                 mov     eax, [eax]
.text$mn:000071E0                 mov     esp, ebp
.text$mn:000071E2                 pop     ebp
.text$mn:000071E3                 retn
.text$mn:000071E3 ?value@error_condition@std@@QBEHXZ endp
.text$mn:000071E3
.text$mn:000071E3 _text$mn        ends
.text$mn:000071E3
.text$mn:000071E4 ; ===========================================================================
.text$mn:000071E4
.text$mn:000071E4 ; Segment type: Pure code
.text$mn:000071E4 ; Segment permissions: Read/Execute
.text$mn:000071E4 _text$mn        segment para public 'CODE' use32
.text$mn:000071E4                 assume cs:_text$mn
.text$mn:000071E4                 ;org 71E4h
.text$mn:000071E4 ; COMDAT (pick any)
.text$mn:000071E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000071E4
.text$mn:000071E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000071E4
.text$mn:000071E4 ; Attributes: bp-based frame
.text$mn:000071E4
.text$mn:000071E4                 public _hypot
.text$mn:000071E4 _hypot          proc near
.text$mn:000071E4
.text$mn:000071E4 var_10          = qword ptr -10h
.text$mn:000071E4 var_8           = qword ptr -8
.text$mn:000071E4 arg_0           = qword ptr  8
.text$mn:000071E4 arg_8           = qword ptr  10h
.text$mn:000071E4
.text$mn:000071E4                 push    ebp
.text$mn:000071E5                 mov     ebp, esp
.text$mn:000071E7                 sub     esp, 8
.text$mn:000071EA                 movsd   xmm0, [ebp+arg_8]
.text$mn:000071EF                 movsd   [esp+8+var_8], xmm0
.text$mn:000071F4                 sub     esp, 8
.text$mn:000071F7                 movsd   xmm0, [ebp+arg_0]
.text$mn:000071FC                 movsd   [esp+10h+var_10], xmm0
.text$mn:00007201                 call    __hypot
.text$mn:00007206                 add     esp, 10h
.text$mn:00007209                 pop     ebp
.text$mn:0000720A                 retn
.text$mn:0000720A _hypot          endp
.text$mn:0000720A
.text$mn:0000720A ; ---------------------------------------------------------------------------
.text$mn:0000720B                 align 4
.text$mn:0000720B _text$mn        ends
.text$mn:0000720B
.text$mn:0000720C ; ===========================================================================
.text$mn:0000720C
.text$mn:0000720C ; Segment type: Pure code
.text$mn:0000720C ; Segment permissions: Read/Execute
.text$mn:0000720C _text$mn        segment para public 'CODE' use32
.text$mn:0000720C                 assume cs:_text$mn
.text$mn:0000720C                 ;org 720Ch
.text$mn:0000720C ; COMDAT (pick any)
.text$mn:0000720C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000720C
.text$mn:0000720C ; =============== S U B R O U T I N E =======================================
.text$mn:0000720C
.text$mn:0000720C ; Attributes: bp-based frame
.text$mn:0000720C
.text$mn:0000720C                 public _wmemchr
.text$mn:0000720C _wmemchr        proc near               ; CODE XREF: std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)+22p
.text$mn:0000720C
.text$mn:0000720C arg_0           = dword ptr  8
.text$mn:0000720C arg_4           = word ptr  0Ch
.text$mn:0000720C arg_8           = dword ptr  10h
.text$mn:0000720C
.text$mn:0000720C                 push    ebp
.text$mn:0000720D                 mov     ebp, esp
.text$mn:0000720F                 jmp     short loc_7223
.text$mn:00007211 ; ---------------------------------------------------------------------------
.text$mn:00007211
.text$mn:00007211 loc_7211:                               ; CODE XREF: _wmemchr:loc_723Cj
.text$mn:00007211                 mov     eax, [ebp+arg_0]
.text$mn:00007214                 add     eax, 2
.text$mn:00007217                 mov     [ebp+arg_0], eax
.text$mn:0000721A                 mov     ecx, [ebp+arg_8]
.text$mn:0000721D                 sub     ecx, 1
.text$mn:00007220                 mov     [ebp+arg_8], ecx
.text$mn:00007223
.text$mn:00007223 loc_7223:                               ; CODE XREF: _wmemchr+3j
.text$mn:00007223                 cmp     [ebp+arg_8], 0
.text$mn:00007227                 jbe     short loc_723E
.text$mn:00007229                 mov     edx, [ebp+arg_0]
.text$mn:0000722C                 movzx   eax, word ptr [edx]
.text$mn:0000722F                 movzx   ecx, [ebp+arg_4]
.text$mn:00007233                 cmp     eax, ecx
.text$mn:00007235                 jnz     short loc_723C
.text$mn:00007237                 mov     eax, [ebp+arg_0]
.text$mn:0000723A                 jmp     short loc_7240
.text$mn:0000723C ; ---------------------------------------------------------------------------
.text$mn:0000723C
.text$mn:0000723C loc_723C:                               ; CODE XREF: _wmemchr+29j
.text$mn:0000723C                 jmp     short loc_7211
.text$mn:0000723E ; ---------------------------------------------------------------------------
.text$mn:0000723E
.text$mn:0000723E loc_723E:                               ; CODE XREF: _wmemchr+1Bj
.text$mn:0000723E                 xor     eax, eax
.text$mn:00007240
.text$mn:00007240 loc_7240:                               ; CODE XREF: _wmemchr+2Ej
.text$mn:00007240                 pop     ebp
.text$mn:00007241                 retn
.text$mn:00007241 _wmemchr        endp
.text$mn:00007241
.text$mn:00007241 ; ---------------------------------------------------------------------------
.text$mn:00007242                 align 4
.text$mn:00007242 _text$mn        ends
.text$mn:00007242
.text$mn:00007244 ; ===========================================================================
.text$mn:00007244
.text$mn:00007244 ; Segment type: Pure code
.text$mn:00007244 ; Segment permissions: Read/Execute
.text$mn:00007244 _text$mn        segment para public 'CODE' use32
.text$mn:00007244                 assume cs:_text$mn
.text$mn:00007244                 ;org 7244h
.text$mn:00007244 ; COMDAT (pick any)
.text$mn:00007244                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007244
.text$mn:00007244 ; =============== S U B R O U T I N E =======================================
.text$mn:00007244
.text$mn:00007244 ; Attributes: bp-based frame
.text$mn:00007244
.text$mn:00007244                 public _wmemcmp
.text$mn:00007244 _wmemcmp        proc near               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+1Fp
.text$mn:00007244
.text$mn:00007244 var_4           = dword ptr -4
.text$mn:00007244 arg_0           = dword ptr  8
.text$mn:00007244 arg_4           = dword ptr  0Ch
.text$mn:00007244 arg_8           = dword ptr  10h
.text$mn:00007244
.text$mn:00007244                 push    ebp
.text$mn:00007245                 mov     ebp, esp
.text$mn:00007247                 push    ecx
.text$mn:00007248                 jmp     short loc_7265
.text$mn:0000724A ; ---------------------------------------------------------------------------
.text$mn:0000724A
.text$mn:0000724A loc_724A:                               ; CODE XREF: _wmemcmp:loc_72A0j
.text$mn:0000724A                 mov     eax, [ebp+arg_0]
.text$mn:0000724D                 add     eax, 2
.text$mn:00007250                 mov     [ebp+arg_0], eax
.text$mn:00007253                 mov     ecx, [ebp+arg_4]
.text$mn:00007256                 add     ecx, 2
.text$mn:00007259                 mov     [ebp+arg_4], ecx
.text$mn:0000725C                 mov     edx, [ebp+arg_8]
.text$mn:0000725F                 sub     edx, 1
.text$mn:00007262                 mov     [ebp+arg_8], edx
.text$mn:00007265
.text$mn:00007265 loc_7265:                               ; CODE XREF: _wmemcmp+4j
.text$mn:00007265                 cmp     [ebp+arg_8], 0
.text$mn:00007269                 jbe     short loc_72A2
.text$mn:0000726B                 mov     eax, [ebp+arg_0]
.text$mn:0000726E                 movzx   ecx, word ptr [eax]
.text$mn:00007271                 mov     edx, [ebp+arg_4]
.text$mn:00007274                 movzx   eax, word ptr [edx]
.text$mn:00007277                 cmp     ecx, eax
.text$mn:00007279                 jz      short loc_72A0
.text$mn:0000727B                 mov     ecx, [ebp+arg_0]
.text$mn:0000727E                 movzx   edx, word ptr [ecx]
.text$mn:00007281                 mov     eax, [ebp+arg_4]
.text$mn:00007284                 movzx   ecx, word ptr [eax]
.text$mn:00007287                 cmp     edx, ecx
.text$mn:00007289                 jge     short loc_7294
.text$mn:0000728B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007292                 jmp     short loc_729B
.text$mn:00007294 ; ---------------------------------------------------------------------------
.text$mn:00007294
.text$mn:00007294 loc_7294:                               ; CODE XREF: _wmemcmp+45j
.text$mn:00007294                 mov     [ebp+var_4], 1
.text$mn:0000729B
.text$mn:0000729B loc_729B:                               ; CODE XREF: _wmemcmp+4Ej
.text$mn:0000729B                 mov     eax, [ebp+var_4]
.text$mn:0000729E                 jmp     short loc_72A4
.text$mn:000072A0 ; ---------------------------------------------------------------------------
.text$mn:000072A0
.text$mn:000072A0 loc_72A0:                               ; CODE XREF: _wmemcmp+35j
.text$mn:000072A0                 jmp     short loc_724A
.text$mn:000072A2 ; ---------------------------------------------------------------------------
.text$mn:000072A2
.text$mn:000072A2 loc_72A2:                               ; CODE XREF: _wmemcmp+25j
.text$mn:000072A2                 xor     eax, eax
.text$mn:000072A4
.text$mn:000072A4 loc_72A4:                               ; CODE XREF: _wmemcmp+5Aj
.text$mn:000072A4                 mov     esp, ebp
.text$mn:000072A6                 pop     ebp
.text$mn:000072A7                 retn
.text$mn:000072A7 _wmemcmp        endp
.text$mn:000072A7
.text$mn:000072A7 _text$mn        ends
.text$mn:000072A7
.text$mn:000072A8 ; ===========================================================================
.text$mn:000072A8
.text$mn:000072A8 ; Segment type: Pure code
.text$mn:000072A8 ; Segment permissions: Read/Execute
.text$mn:000072A8 _text$mn        segment para public 'CODE' use32
.text$mn:000072A8                 assume cs:_text$mn
.text$mn:000072A8                 ;org 72A8h
.text$mn:000072A8 ; COMDAT (pick any)
.text$mn:000072A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000072A8
.text$mn:000072A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000072A8
.text$mn:000072A8 ; Attributes: bp-based frame
.text$mn:000072A8
.text$mn:000072A8 ; int __cdecl wmemcpy(void *Dst, void *Src, int)
.text$mn:000072A8                 public _wmemcpy
.text$mn:000072A8 _wmemcpy        proc near               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:000072A8
.text$mn:000072A8 Dst             = dword ptr  8
.text$mn:000072A8 Src             = dword ptr  0Ch
.text$mn:000072A8 arg_8           = dword ptr  10h
.text$mn:000072A8
.text$mn:000072A8                 push    ebp
.text$mn:000072A9                 mov     ebp, esp
.text$mn:000072AB                 mov     eax, [ebp+arg_8]
.text$mn:000072AE                 shl     eax, 1
.text$mn:000072B0                 push    eax             ; Size
.text$mn:000072B1                 mov     ecx, [ebp+Src]
.text$mn:000072B4                 push    ecx             ; Src
.text$mn:000072B5                 mov     edx, [ebp+Dst]
.text$mn:000072B8                 push    edx             ; Dst
.text$mn:000072B9                 call    _memcpy
.text$mn:000072BE                 add     esp, 0Ch
.text$mn:000072C1                 pop     ebp
.text$mn:000072C2                 retn
.text$mn:000072C2 _wmemcpy        endp
.text$mn:000072C2
.text$mn:000072C2 ; ---------------------------------------------------------------------------
.text$mn:000072C3                 align 4
.text$mn:000072C3 _text$mn        ends
.text$mn:000072C3
.text$mn:000072C4 ; ===========================================================================
.text$mn:000072C4
.text$mn:000072C4 ; Segment type: Pure code
.text$mn:000072C4 ; Segment permissions: Read/Execute
.text$mn:000072C4 _text$mn        segment para public 'CODE' use32
.text$mn:000072C4                 assume cs:_text$mn
.text$mn:000072C4                 ;org 72C4h
.text$mn:000072C4 ; COMDAT (pick any)
.text$mn:000072C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000072C4
.text$mn:000072C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000072C4
.text$mn:000072C4 ; Attributes: bp-based frame
.text$mn:000072C4
.text$mn:000072C4 ; int __cdecl wmemmove(void *Dst, void *Src, int)
.text$mn:000072C4                 public _wmemmove
.text$mn:000072C4 _wmemmove       proc near               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:000072C4
.text$mn:000072C4 Dst             = dword ptr  8
.text$mn:000072C4 Src             = dword ptr  0Ch
.text$mn:000072C4 arg_8           = dword ptr  10h
.text$mn:000072C4
.text$mn:000072C4                 push    ebp
.text$mn:000072C5                 mov     ebp, esp
.text$mn:000072C7                 mov     eax, [ebp+arg_8]
.text$mn:000072CA                 shl     eax, 1
.text$mn:000072CC                 push    eax             ; Size
.text$mn:000072CD                 mov     ecx, [ebp+Src]
.text$mn:000072D0                 push    ecx             ; Src
.text$mn:000072D1                 mov     edx, [ebp+Dst]
.text$mn:000072D4                 push    edx             ; Dst
.text$mn:000072D5                 call    _memmove
.text$mn:000072DA                 add     esp, 0Ch
.text$mn:000072DD                 pop     ebp
.text$mn:000072DE                 retn
.text$mn:000072DE _wmemmove       endp
.text$mn:000072DE
.text$mn:000072DE ; ---------------------------------------------------------------------------
.text$mn:000072DF                 align 10h
.text$mn:000072DF _text$mn        ends
.text$mn:000072DF
.xdata$x:000072E0 ; ===========================================================================
.xdata$x:000072E0
.xdata$x:000072E0 ; Segment type: Pure data
.xdata$x:000072E0 ; Segment permissions: Read
.xdata$x:000072E0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000072E0                 assume cs:_xdata$x
.xdata$x:000072E0                 ;org 72E0h
.xdata$x:000072E0 ; COMDAT (pick associative to section at 4D80)
.xdata$x:000072E0 __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ db 0FFh
.xdata$x:000072E0                                         ; DATA XREF: .xdata$x:000072F0o
.xdata$x:000072E1                 db 0FFh
.xdata$x:000072E2                 db 0FFh
.xdata$x:000072E3                 db 0FFh
.xdata$x:000072E4                 dd offset __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
.xdata$x:000072E8 __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ db  22h ; "
.xdata$x:000072E8                                         ; DATA XREF: __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ+11o
.xdata$x:000072E9                 db    5
.xdata$x:000072EA                 db  93h ; ô
.xdata$x:000072EB                 db  19h
.xdata$x:000072EC                 db    1
.xdata$x:000072ED                 db    0
.xdata$x:000072EE                 db    0
.xdata$x:000072EF                 db    0
.xdata$x:000072F0                 dd offset __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
.xdata$x:000072F4                 db    0
.xdata$x:000072F5                 db    0
.xdata$x:000072F6                 db    0
.xdata$x:000072F7                 db    0
.xdata$x:000072F8                 db    0
.xdata$x:000072F9                 db    0
.xdata$x:000072FA                 db    0
.xdata$x:000072FB                 db    0
.xdata$x:000072FC                 db    0
.xdata$x:000072FD                 db    0
.xdata$x:000072FE                 db    0
.xdata$x:000072FF                 db    0
.xdata$x:00007300                 db    0
.xdata$x:00007301                 db    0
.xdata$x:00007302                 db    0
.xdata$x:00007303                 db    0
.xdata$x:00007304                 db    0
.xdata$x:00007305                 db    0
.xdata$x:00007306                 db    0
.xdata$x:00007307                 db    0
.xdata$x:00007308                 db    0
.xdata$x:00007309                 db    0
.xdata$x:0000730A                 db    0
.xdata$x:0000730B                 db    0
.xdata$x:0000730B _xdata$x        ends
.xdata$x:0000730B
.xdata$x:0000730C ; ===========================================================================
.xdata$x:0000730C
.xdata$x:0000730C ; Segment type: Pure data
.xdata$x:0000730C ; Segment permissions: Read
.xdata$x:0000730C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000730C                 assume cs:_xdata$x
.xdata$x:0000730C                 ;org 730Ch
.xdata$x:0000730C ; COMDAT (pick associative to section at 3C40)
.xdata$x:0000730C __unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z db 0FFh
.xdata$x:0000730C                                         ; DATA XREF: .xdata$x:0000731Co
.xdata$x:0000730D                 db 0FFh
.xdata$x:0000730E                 db 0FFh
.xdata$x:0000730F                 db 0FFh
.xdata$x:00007310                 dd offset __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0
.xdata$x:00007314 __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z db  22h ; "
.xdata$x:00007314                                         ; DATA XREF: __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z+11o
.xdata$x:00007315                 db    5
.xdata$x:00007316                 db  93h ; ô
.xdata$x:00007317                 db  19h
.xdata$x:00007318                 db    1
.xdata$x:00007319                 db    0
.xdata$x:0000731A                 db    0
.xdata$x:0000731B                 db    0
.xdata$x:0000731C                 dd offset __unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.xdata$x:00007320                 db    0
.xdata$x:00007321                 db    0
.xdata$x:00007322                 db    0
.xdata$x:00007323                 db    0
.xdata$x:00007324                 db    0
.xdata$x:00007325                 db    0
.xdata$x:00007326                 db    0
.xdata$x:00007327                 db    0
.xdata$x:00007328                 db    0
.xdata$x:00007329                 db    0
.xdata$x:0000732A                 db    0
.xdata$x:0000732B                 db    0
.xdata$x:0000732C                 db    0
.xdata$x:0000732D                 db    0
.xdata$x:0000732E                 db    0
.xdata$x:0000732F                 db    0
.xdata$x:00007330                 db    0
.xdata$x:00007331                 db    0
.xdata$x:00007332                 db    0
.xdata$x:00007333                 db    0
.xdata$x:00007334                 db    0
.xdata$x:00007335                 db    0
.xdata$x:00007336                 db    0
.xdata$x:00007337                 db    0
.xdata$x:00007337 _xdata$x        ends
.xdata$x:00007337
.xdata$x:00007338 ; ===========================================================================
.xdata$x:00007338
.xdata$x:00007338 ; Segment type: Pure data
.xdata$x:00007338 ; Segment permissions: Read
.xdata$x:00007338 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007338                 assume cs:_xdata$x
.xdata$x:00007338                 ;org 7338h
.xdata$x:00007338 ; COMDAT (pick associative to section at 3A00)
.xdata$x:00007338 __unwindtable$??1_Iterator_base12@std@@QAE@XZ db 0FFh
.xdata$x:00007338                                         ; DATA XREF: .xdata$x:00007348o
.xdata$x:00007339                 db 0FFh
.xdata$x:0000733A                 db 0FFh
.xdata$x:0000733B                 db 0FFh
.xdata$x:0000733C                 dd offset __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0
.xdata$x:00007340 __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ db  22h ; "
.xdata$x:00007340                                         ; DATA XREF: __ehhandler$??1_Iterator_base12@std@@QAE@XZ+11o
.xdata$x:00007341                 db    5
.xdata$x:00007342                 db  93h ; ô
.xdata$x:00007343                 db  19h
.xdata$x:00007344                 db    1
.xdata$x:00007345                 db    0
.xdata$x:00007346                 db    0
.xdata$x:00007347                 db    0
.xdata$x:00007348                 dd offset __unwindtable$??1_Iterator_base12@std@@QAE@XZ
.xdata$x:0000734C                 db    0
.xdata$x:0000734D                 db    0
.xdata$x:0000734E                 db    0
.xdata$x:0000734F                 db    0
.xdata$x:00007350                 db    0
.xdata$x:00007351                 db    0
.xdata$x:00007352                 db    0
.xdata$x:00007353                 db    0
.xdata$x:00007354                 db    0
.xdata$x:00007355                 db    0
.xdata$x:00007356                 db    0
.xdata$x:00007357                 db    0
.xdata$x:00007358                 db    0
.xdata$x:00007359                 db    0
.xdata$x:0000735A                 db    0
.xdata$x:0000735B                 db    0
.xdata$x:0000735C                 db    0
.xdata$x:0000735D                 db    0
.xdata$x:0000735E                 db    0
.xdata$x:0000735F                 db    0
.xdata$x:00007360                 db    0
.xdata$x:00007361                 db    0
.xdata$x:00007362                 db    0
.xdata$x:00007363                 db    0
.xdata$x:00007363 _xdata$x        ends
.xdata$x:00007363
.xdata$x:00007364 ; ===========================================================================
.xdata$x:00007364
.xdata$x:00007364 ; Segment type: Pure data
.xdata$x:00007364 ; Segment permissions: Read
.xdata$x:00007364 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007364                 assume cs:_xdata$x
.xdata$x:00007364                 ;org 7364h
.xdata$x:00007364 ; COMDAT (pick associative to section at 4190)
.xdata$x:00007364 __unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z db 0FFh
.xdata$x:00007364                                         ; DATA XREF: .xdata$x:0000737Co
.xdata$x:00007365                 db 0FFh
.xdata$x:00007366                 db 0FFh
.xdata$x:00007367                 db 0FFh
.xdata$x:00007368                 dd offset __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0
.xdata$x:0000736C                 db 0FFh
.xdata$x:0000736D                 db 0FFh
.xdata$x:0000736E                 db 0FFh
.xdata$x:0000736F                 db 0FFh
.xdata$x:00007370                 dd offset __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1
.xdata$x:00007374 __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z db  22h ; "
.xdata$x:00007374                                         ; DATA XREF: __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z+11o
.xdata$x:00007375                 db    5
.xdata$x:00007376                 db  93h ; ô
.xdata$x:00007377                 db  19h
.xdata$x:00007378                 db    2
.xdata$x:00007379                 db    0
.xdata$x:0000737A                 db    0
.xdata$x:0000737B                 db    0
.xdata$x:0000737C                 dd offset __unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.xdata$x:00007380                 db    0
.xdata$x:00007381                 db    0
.xdata$x:00007382                 db    0
.xdata$x:00007383                 db    0
.xdata$x:00007384                 db    0
.xdata$x:00007385                 db    0
.xdata$x:00007386                 db    0
.xdata$x:00007387                 db    0
.xdata$x:00007388                 db    0
.xdata$x:00007389                 db    0
.xdata$x:0000738A                 db    0
.xdata$x:0000738B                 db    0
.xdata$x:0000738C                 db    0
.xdata$x:0000738D                 db    0
.xdata$x:0000738E                 db    0
.xdata$x:0000738F                 db    0
.xdata$x:00007390                 db    0
.xdata$x:00007391                 db    0
.xdata$x:00007392                 db    0
.xdata$x:00007393                 db    0
.xdata$x:00007394                 db    0
.xdata$x:00007395                 db    0
.xdata$x:00007396                 db    0
.xdata$x:00007397                 db    0
.xdata$x:00007397 _xdata$x        ends
.xdata$x:00007397
.xdata$x:00007398 ; ===========================================================================
.xdata$x:00007398
.xdata$x:00007398 ; Segment type: Pure data
.xdata$x:00007398 ; Segment permissions: Read
.xdata$x:00007398 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007398                 assume cs:_xdata$x
.xdata$x:00007398                 ;org 7398h
.xdata$x:00007398 ; COMDAT (pick associative to section at 2A2C)
.xdata$x:00007398 __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00007398                                         ; DATA XREF: .xdata$x:000073A8o
.xdata$x:00007399                 db 0FFh
.xdata$x:0000739A                 db 0FFh
.xdata$x:0000739B                 db 0FFh
.xdata$x:0000739C                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:000073A0 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:000073A0                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:000073A1                 db    5
.xdata$x:000073A2                 db  93h ; ô
.xdata$x:000073A3                 db  19h
.xdata$x:000073A4                 db    1
.xdata$x:000073A5                 db    0
.xdata$x:000073A6                 db    0
.xdata$x:000073A7                 db    0
.xdata$x:000073A8                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:000073AC                 db    0
.xdata$x:000073AD                 db    0
.xdata$x:000073AE                 db    0
.xdata$x:000073AF                 db    0
.xdata$x:000073B0                 db    0
.xdata$x:000073B1                 db    0
.xdata$x:000073B2                 db    0
.xdata$x:000073B3                 db    0
.xdata$x:000073B4                 db    0
.xdata$x:000073B5                 db    0
.xdata$x:000073B6                 db    0
.xdata$x:000073B7                 db    0
.xdata$x:000073B8                 db    0
.xdata$x:000073B9                 db    0
.xdata$x:000073BA                 db    0
.xdata$x:000073BB                 db    0
.xdata$x:000073BC                 db    0
.xdata$x:000073BD                 db    0
.xdata$x:000073BE                 db    0
.xdata$x:000073BF                 db    0
.xdata$x:000073C0                 db    0
.xdata$x:000073C1                 db    0
.xdata$x:000073C2                 db    0
.xdata$x:000073C3                 db    0
.xdata$x:000073C3 _xdata$x        ends
.xdata$x:000073C3
.xdata$x:000073C4 ; ===========================================================================
.xdata$x:000073C4
.xdata$x:000073C4 ; Segment type: Pure data
.xdata$x:000073C4 ; Segment permissions: Read
.xdata$x:000073C4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000073C4                 assume cs:_xdata$x
.xdata$x:000073C4                 ;org 73C4h
.xdata$x:000073C4 ; COMDAT (pick associative to section at 35D4)
.xdata$x:000073C4 __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:000073C4                                         ; DATA XREF: .xdata$x:000073D4o
.xdata$x:000073C5                 db 0FFh
.xdata$x:000073C6                 db 0FFh
.xdata$x:000073C7                 db 0FFh
.xdata$x:000073C8                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:000073CC __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:000073CC                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:000073CD                 db    5
.xdata$x:000073CE                 db  93h ; ô
.xdata$x:000073CF                 db  19h
.xdata$x:000073D0                 db    1
.xdata$x:000073D1                 db    0
.xdata$x:000073D2                 db    0
.xdata$x:000073D3                 db    0
.xdata$x:000073D4                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:000073D8                 db    0
.xdata$x:000073D9                 db    0
.xdata$x:000073DA                 db    0
.xdata$x:000073DB                 db    0
.xdata$x:000073DC                 db    0
.xdata$x:000073DD                 db    0
.xdata$x:000073DE                 db    0
.xdata$x:000073DF                 db    0
.xdata$x:000073E0                 db    0
.xdata$x:000073E1                 db    0
.xdata$x:000073E2                 db    0
.xdata$x:000073E3                 db    0
.xdata$x:000073E4                 db    0
.xdata$x:000073E5                 db    0
.xdata$x:000073E6                 db    0
.xdata$x:000073E7                 db    0
.xdata$x:000073E8                 db    0
.xdata$x:000073E9                 db    0
.xdata$x:000073EA                 db    0
.xdata$x:000073EB                 db    0
.xdata$x:000073EC                 db    0
.xdata$x:000073ED                 db    0
.xdata$x:000073EE                 db    0
.xdata$x:000073EF                 db    0
.xdata$x:000073EF _xdata$x        ends
.xdata$x:000073EF
.xdata$x:000073F0 ; ===========================================================================
.xdata$x:000073F0
.xdata$x:000073F0 ; Segment type: Pure data
.xdata$x:000073F0 ; Segment permissions: Read
.xdata$x:000073F0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000073F0                 assume cs:_xdata$x
.xdata$x:000073F0                 ;org 73F0h
.xdata$x:000073F0 ; COMDAT (pick associative to section at 2730)
.xdata$x:000073F0 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db 0FFh
.xdata$x:000073F0                                         ; DATA XREF: .xdata$x:00007400o
.xdata$x:000073F1                 db 0FFh
.xdata$x:000073F2                 db 0FFh
.xdata$x:000073F3                 db 0FFh
.xdata$x:000073F4                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
.xdata$x:000073F8 __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db  22h ; "
.xdata$x:000073F8                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z+11o
.xdata$x:000073F9                 db    5
.xdata$x:000073FA                 db  93h ; ô
.xdata$x:000073FB                 db  19h
.xdata$x:000073FC                 db    1
.xdata$x:000073FD                 db    0
.xdata$x:000073FE                 db    0
.xdata$x:000073FF                 db    0
.xdata$x:00007400                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.xdata$x:00007404                 db    0
.xdata$x:00007405                 db    0
.xdata$x:00007406                 db    0
.xdata$x:00007407                 db    0
.xdata$x:00007408                 db    0
.xdata$x:00007409                 db    0
.xdata$x:0000740A                 db    0
.xdata$x:0000740B                 db    0
.xdata$x:0000740C                 db    0
.xdata$x:0000740D                 db    0
.xdata$x:0000740E                 db    0
.xdata$x:0000740F                 db    0
.xdata$x:00007410                 db    0
.xdata$x:00007411                 db    0
.xdata$x:00007412                 db    0
.xdata$x:00007413                 db    0
.xdata$x:00007414                 db    0
.xdata$x:00007415                 db    0
.xdata$x:00007416                 db    0
.xdata$x:00007417                 db    0
.xdata$x:00007418                 db    0
.xdata$x:00007419                 db    0
.xdata$x:0000741A                 db    0
.xdata$x:0000741B                 db    0
.xdata$x:0000741B _xdata$x        ends
.xdata$x:0000741B
.xdata$x:0000741C ; ===========================================================================
.xdata$x:0000741C
.xdata$x:0000741C ; Segment type: Pure data
.xdata$x:0000741C ; Segment permissions: Read
.xdata$x:0000741C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000741C                 assume cs:_xdata$x
.xdata$x:0000741C                 ;org 741Ch
.xdata$x:0000741C ; COMDAT (pick associative to section at 3404)
.xdata$x:0000741C __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000741C                                         ; DATA XREF: .xdata$x:0000742Co
.xdata$x:0000741D                 db 0FFh
.xdata$x:0000741E                 db 0FFh
.xdata$x:0000741F                 db 0FFh
.xdata$x:00007420                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00007424 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00007424                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00007425                 db    5
.xdata$x:00007426                 db  93h ; ô
.xdata$x:00007427                 db  19h
.xdata$x:00007428                 db    1
.xdata$x:00007429                 db    0
.xdata$x:0000742A                 db    0
.xdata$x:0000742B                 db    0
.xdata$x:0000742C                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.xdata$x:00007430                 db    0
.xdata$x:00007431                 db    0
.xdata$x:00007432                 db    0
.xdata$x:00007433                 db    0
.xdata$x:00007434                 db    0
.xdata$x:00007435                 db    0
.xdata$x:00007436                 db    0
.xdata$x:00007437                 db    0
.xdata$x:00007438                 db    0
.xdata$x:00007439                 db    0
.xdata$x:0000743A                 db    0
.xdata$x:0000743B                 db    0
.xdata$x:0000743C                 db    0
.xdata$x:0000743D                 db    0
.xdata$x:0000743E                 db    0
.xdata$x:0000743F                 db    0
.xdata$x:00007440                 db    0
.xdata$x:00007441                 db    0
.xdata$x:00007442                 db    0
.xdata$x:00007443                 db    0
.xdata$x:00007444                 db    0
.xdata$x:00007445                 db    0
.xdata$x:00007446                 db    0
.xdata$x:00007447                 db    0
.xdata$x:00007447 _xdata$x        ends
.xdata$x:00007447
.xdata$x:00007448 ; ===========================================================================
.xdata$x:00007448
.xdata$x:00007448 ; Segment type: Pure data
.xdata$x:00007448 ; Segment permissions: Read
.xdata$x:00007448 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007448                 assume cs:_xdata$x
.xdata$x:00007448                 ;org 7448h
.xdata$x:00007448 ; COMDAT (pick associative to section at 2D14)
.xdata$x:00007448 __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db 0FFh
.xdata$x:00007448                                         ; DATA XREF: .xdata$x:00007458o
.xdata$x:00007449                 db 0FFh
.xdata$x:0000744A                 db 0FFh
.xdata$x:0000744B                 db 0FFh
.xdata$x:0000744C                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
.xdata$x:00007450 __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db  22h ; "
.xdata$x:00007450                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z+11o
.xdata$x:00007451                 db    5
.xdata$x:00007452                 db  93h ; ô
.xdata$x:00007453                 db  19h
.xdata$x:00007454                 db    1
.xdata$x:00007455                 db    0
.xdata$x:00007456                 db    0
.xdata$x:00007457                 db    0
.xdata$x:00007458                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.xdata$x:0000745C                 db    0
.xdata$x:0000745D                 db    0
.xdata$x:0000745E                 db    0
.xdata$x:0000745F                 db    0
.xdata$x:00007460                 db    0
.xdata$x:00007461                 db    0
.xdata$x:00007462                 db    0
.xdata$x:00007463                 db    0
.xdata$x:00007464                 db    0
.xdata$x:00007465                 db    0
.xdata$x:00007466                 db    0
.xdata$x:00007467                 db    0
.xdata$x:00007468                 db    0
.xdata$x:00007469                 db    0
.xdata$x:0000746A                 db    0
.xdata$x:0000746B                 db    0
.xdata$x:0000746C                 db    0
.xdata$x:0000746D                 db    0
.xdata$x:0000746E                 db    0
.xdata$x:0000746F                 db    0
.xdata$x:00007470                 db    0
.xdata$x:00007471                 db    0
.xdata$x:00007472                 db    0
.xdata$x:00007473                 db    0
.xdata$x:00007473 _xdata$x        ends
.xdata$x:00007473
.xdata$x:00007474 ; ===========================================================================
.xdata$x:00007474
.xdata$x:00007474 ; Segment type: Pure data
.xdata$x:00007474 ; Segment permissions: Read
.xdata$x:00007474 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007474                 assume cs:_xdata$x
.xdata$x:00007474                 ;org 7474h
.xdata$x:00007474 ; COMDAT (pick associative to section at 379C)
.xdata$x:00007474 __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db 0FFh
.xdata$x:00007474                                         ; DATA XREF: .xdata$x:00007484o
.xdata$x:00007475                 db 0FFh
.xdata$x:00007476                 db 0FFh
.xdata$x:00007477                 db 0FFh
.xdata$x:00007478                 dd offset __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
.xdata$x:0000747C __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000747C                                         ; DATA XREF: __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ+11o
.xdata$x:0000747D                 db    5
.xdata$x:0000747E                 db  93h ; ô
.xdata$x:0000747F                 db  19h
.xdata$x:00007480                 db    1
.xdata$x:00007481                 db    0
.xdata$x:00007482                 db    0
.xdata$x:00007483                 db    0
.xdata$x:00007484                 dd offset __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.xdata$x:00007488                 align 20h
.xdata$x:00007488 _xdata$x        ends
.xdata$x:00007488
.xdata$x:000074A0 ; ===========================================================================
.xdata$x:000074A0
.xdata$x:000074A0 ; Segment type: Pure data
.xdata$x:000074A0 ; Segment permissions: Read
.xdata$x:000074A0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000074A0                 assume cs:_xdata$x
.xdata$x:000074A0                 ;org 74A0h
.xdata$x:000074A0 ; COMDAT (pick associative to section at 44A0)
.xdata$x:000074A0 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 db    0
.xdata$x:000074A0                                         ; DATA XREF: .xdata$x:00007528o
.xdata$x:000074A1                 db    0
.xdata$x:000074A2                 db    0
.xdata$x:000074A3                 db    0
.xdata$x:000074A4                 db    0
.xdata$x:000074A5                 db    0
.xdata$x:000074A6                 db    0
.xdata$x:000074A7                 db    0
.xdata$x:000074A8                 db    0
.xdata$x:000074A9                 db    0
.xdata$x:000074AA                 db    0
.xdata$x:000074AB                 db    0
.xdata$x:000074AC                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.xdata$x:000074B0 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 db    0
.xdata$x:000074B0                                         ; DATA XREF: .xdata$x:00007514o
.xdata$x:000074B1                 db    0
.xdata$x:000074B2                 db    0
.xdata$x:000074B3                 db    0
.xdata$x:000074B4                 db    0
.xdata$x:000074B5                 db    0
.xdata$x:000074B6                 db    0
.xdata$x:000074B7                 db    0
.xdata$x:000074B8                 db    0
.xdata$x:000074B9                 db    0
.xdata$x:000074BA                 db    0
.xdata$x:000074BB                 db    0
.xdata$x:000074BC                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
.xdata$x:000074C0 __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db 0FFh
.xdata$x:000074C0                                         ; DATA XREF: .xdata$x:000074E8o
.xdata$x:000074C1                 db 0FFh
.xdata$x:000074C2                 db 0FFh
.xdata$x:000074C3                 db 0FFh
.xdata$x:000074C4                 db    0
.xdata$x:000074C5                 db    0
.xdata$x:000074C6                 db    0
.xdata$x:000074C7                 db    0
.xdata$x:000074C8                 db 0FFh
.xdata$x:000074C9                 db 0FFh
.xdata$x:000074CA                 db 0FFh
.xdata$x:000074CB                 db 0FFh
.xdata$x:000074CC                 db    0
.xdata$x:000074CD                 db    0
.xdata$x:000074CE                 db    0
.xdata$x:000074CF                 db    0
.xdata$x:000074D0                 db    1
.xdata$x:000074D1                 db    0
.xdata$x:000074D2                 db    0
.xdata$x:000074D3                 db    0
.xdata$x:000074D4                 db    0
.xdata$x:000074D5                 db    0
.xdata$x:000074D6                 db    0
.xdata$x:000074D7                 db    0
.xdata$x:000074D8                 db    1
.xdata$x:000074D9                 db    0
.xdata$x:000074DA                 db    0
.xdata$x:000074DB                 db    0
.xdata$x:000074DC                 db    0
.xdata$x:000074DD                 db    0
.xdata$x:000074DE                 db    0
.xdata$x:000074DF                 db    0
.xdata$x:000074E0 __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:000074E0                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z+11o
.xdata$x:000074E1                 db    5
.xdata$x:000074E2                 db  93h ; ô
.xdata$x:000074E3                 db  19h
.xdata$x:000074E4                 db    4
.xdata$x:000074E5                 db    0
.xdata$x:000074E6                 db    0
.xdata$x:000074E7                 db    0
.xdata$x:000074E8                 dd offset __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:000074EC                 db    2
.xdata$x:000074ED                 db    0
.xdata$x:000074EE                 db    0
.xdata$x:000074EF                 db    0
.xdata$x:000074F0                 dd offset __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:000074F4                 db    0
.xdata$x:000074F5                 db    0
.xdata$x:000074F6                 db    0
.xdata$x:000074F7                 db    0
.xdata$x:000074F8                 db    0
.xdata$x:000074F9                 db    0
.xdata$x:000074FA                 db    0
.xdata$x:000074FB                 db    0
.xdata$x:000074FC                 db    0
.xdata$x:000074FD                 db    0
.xdata$x:000074FE                 db    0
.xdata$x:000074FF                 db    0
.xdata$x:00007500                 db    0
.xdata$x:00007501                 db    0
.xdata$x:00007502                 db    0
.xdata$x:00007503                 db    0
.xdata$x:00007504 __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db    2
.xdata$x:00007504                                         ; DATA XREF: .xdata$x:000074F0o
.xdata$x:00007505                 db    0
.xdata$x:00007506                 db    0
.xdata$x:00007507                 db    0
.xdata$x:00007508                 db    2
.xdata$x:00007509                 db    0
.xdata$x:0000750A                 db    0
.xdata$x:0000750B                 db    0
.xdata$x:0000750C                 db    3
.xdata$x:0000750D                 db    0
.xdata$x:0000750E                 db    0
.xdata$x:0000750F                 db    0
.xdata$x:00007510                 db    1
.xdata$x:00007511                 db    0
.xdata$x:00007512                 db    0
.xdata$x:00007513                 db    0
.xdata$x:00007514                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
.xdata$x:00007518                 align 10h
.xdata$x:00007520                 db    3
.xdata$x:00007521                 db    0
.xdata$x:00007522                 db    0
.xdata$x:00007523                 db    0
.xdata$x:00007524                 db    1
.xdata$x:00007525                 db    0
.xdata$x:00007526                 db    0
.xdata$x:00007527                 db    0
.xdata$x:00007528                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
.xdata$x:00007528 _xdata$x        ends
.xdata$x:00007528
.xdata$x:0000752C ; ===========================================================================
.xdata$x:0000752C
.xdata$x:0000752C ; Segment type: Pure data
.xdata$x:0000752C ; Segment permissions: Read
.xdata$x:0000752C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000752C                 assume cs:_xdata$x
.xdata$x:0000752C                 ;org 752Ch
.xdata$x:0000752C ; COMDAT (pick associative to section at 3178)
.xdata$x:0000752C __unwindtable$??0_Generic_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000752C                                         ; DATA XREF: .xdata$x:0000753Co
.xdata$x:0000752D                 db 0FFh
.xdata$x:0000752E                 db 0FFh
.xdata$x:0000752F                 db 0FFh
.xdata$x:00007530                 dd offset __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0
.xdata$x:00007534 __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:00007534                                         ; DATA XREF: __ehhandler$??0_Generic_error_category@std@@QAE@XZ+11o
.xdata$x:00007535                 db    5
.xdata$x:00007536                 db  93h ; ô
.xdata$x:00007537                 db  19h
.xdata$x:00007538                 db    1
.xdata$x:00007539                 db    0
.xdata$x:0000753A                 db    0
.xdata$x:0000753B                 db    0
.xdata$x:0000753C                 dd offset __unwindtable$??0_Generic_error_category@std@@QAE@XZ
.xdata$x:00007540                 db    0
.xdata$x:00007541                 db    0
.xdata$x:00007542                 db    0
.xdata$x:00007543                 db    0
.xdata$x:00007544                 db    0
.xdata$x:00007545                 db    0
.xdata$x:00007546                 db    0
.xdata$x:00007547                 db    0
.xdata$x:00007548                 db    0
.xdata$x:00007549                 db    0
.xdata$x:0000754A                 db    0
.xdata$x:0000754B                 db    0
.xdata$x:0000754C                 db    0
.xdata$x:0000754D                 db    0
.xdata$x:0000754E                 db    0
.xdata$x:0000754F                 db    0
.xdata$x:00007550                 db    0
.xdata$x:00007551                 db    0
.xdata$x:00007552                 db    0
.xdata$x:00007553                 db    0
.xdata$x:00007554                 db    0
.xdata$x:00007555                 db    0
.xdata$x:00007556                 db    0
.xdata$x:00007557                 db    0
.xdata$x:00007557 _xdata$x        ends
.xdata$x:00007557
.xdata$x:00007558 ; ===========================================================================
.xdata$x:00007558
.xdata$x:00007558 ; Segment type: Pure data
.xdata$x:00007558 ; Segment permissions: Read
.xdata$x:00007558 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007558                 assume cs:_xdata$x
.xdata$x:00007558                 ;org 7558h
.xdata$x:00007558 ; COMDAT (pick associative to section at 647C)
.xdata$x:00007558 __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:00007558                                         ; DATA XREF: .xdata$x:00007568o
.xdata$x:00007559                 db 0FFh
.xdata$x:0000755A                 db 0FFh
.xdata$x:0000755B                 db 0FFh
.xdata$x:0000755C                 dd offset __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:00007560 __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:00007560                                         ; DATA XREF: __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:00007561                 db    5
.xdata$x:00007562                 db  93h ; ô
.xdata$x:00007563                 db  19h
.xdata$x:00007564                 db    1
.xdata$x:00007565                 db    0
.xdata$x:00007566                 db    0
.xdata$x:00007567                 db    0
.xdata$x:00007568                 dd offset __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000756C                 db    0
.xdata$x:0000756D                 db    0
.xdata$x:0000756E                 db    0
.xdata$x:0000756F                 db    0
.xdata$x:00007570                 db    0
.xdata$x:00007571                 db    0
.xdata$x:00007572                 db    0
.xdata$x:00007573                 db    0
.xdata$x:00007574                 db    0
.xdata$x:00007575                 db    0
.xdata$x:00007576                 db    0
.xdata$x:00007577                 db    0
.xdata$x:00007578                 db    0
.xdata$x:00007579                 db    0
.xdata$x:0000757A                 db    0
.xdata$x:0000757B                 db    0
.xdata$x:0000757C                 db    0
.xdata$x:0000757D                 db    0
.xdata$x:0000757E                 db    0
.xdata$x:0000757F                 db    0
.xdata$x:00007580                 db    0
.xdata$x:00007581                 db    0
.xdata$x:00007582                 db    0
.xdata$x:00007583                 db    0
.xdata$x:00007583 _xdata$x        ends
.xdata$x:00007583
.xdata$x:00007584 ; ===========================================================================
.xdata$x:00007584
.xdata$x:00007584 ; Segment type: Pure data
.xdata$x:00007584 ; Segment permissions: Read
.xdata$x:00007584 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007584                 assume cs:_xdata$x
.xdata$x:00007584                 ;org 7584h
.xdata$x:00007584 ; COMDAT (pick associative to section at 3920)
.xdata$x:00007584 __unwindtable$??1_Generic_error_category@std@@UAE@XZ db 0FFh
.xdata$x:00007584                                         ; DATA XREF: .xdata$x:00007594o
.xdata$x:00007585                 db 0FFh
.xdata$x:00007586                 db 0FFh
.xdata$x:00007587                 db 0FFh
.xdata$x:00007588                 dd offset __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0
.xdata$x:0000758C __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000758C                                         ; DATA XREF: __ehhandler$??1_Generic_error_category@std@@UAE@XZ+11o
.xdata$x:0000758D                 db    5
.xdata$x:0000758E                 db  93h ; ô
.xdata$x:0000758F                 db  19h
.xdata$x:00007590                 db    1
.xdata$x:00007591                 db    0
.xdata$x:00007592                 db    0
.xdata$x:00007593                 db    0
.xdata$x:00007594                 dd offset __unwindtable$??1_Generic_error_category@std@@UAE@XZ
.xdata$x:00007598                 db    0
.xdata$x:00007599                 db    0
.xdata$x:0000759A                 db    0
.xdata$x:0000759B                 db    0
.xdata$x:0000759C                 db    0
.xdata$x:0000759D                 db    0
.xdata$x:0000759E                 db    0
.xdata$x:0000759F                 db    0
.xdata$x:000075A0                 db    0
.xdata$x:000075A1                 db    0
.xdata$x:000075A2                 db    0
.xdata$x:000075A3                 db    0
.xdata$x:000075A4                 db    0
.xdata$x:000075A5                 db    0
.xdata$x:000075A6                 db    0
.xdata$x:000075A7                 db    0
.xdata$x:000075A8                 db    0
.xdata$x:000075A9                 db    0
.xdata$x:000075AA                 db    0
.xdata$x:000075AB                 db    0
.xdata$x:000075AC                 db    0
.xdata$x:000075AD                 db    0
.xdata$x:000075AE                 db    0
.xdata$x:000075AF                 db    0
.xdata$x:000075AF _xdata$x        ends
.xdata$x:000075AF
.xdata$x:000075B0 ; ===========================================================================
.xdata$x:000075B0
.xdata$x:000075B0 ; Segment type: Pure data
.xdata$x:000075B0 ; Segment permissions: Read
.xdata$x:000075B0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000075B0                 assume cs:_xdata$x
.xdata$x:000075B0                 ;org 75B0h
.xdata$x:000075B0 ; COMDAT (pick associative to section at 31F4)
.xdata$x:000075B0 __unwindtable$??0_Iostream_error_category@std@@QAE@XZ db 0FFh
.xdata$x:000075B0                                         ; DATA XREF: .xdata$x:000075C0o
.xdata$x:000075B1                 db 0FFh
.xdata$x:000075B2                 db 0FFh
.xdata$x:000075B3                 db 0FFh
.xdata$x:000075B4                 dd offset __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0
.xdata$x:000075B8 __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:000075B8                                         ; DATA XREF: __ehhandler$??0_Iostream_error_category@std@@QAE@XZ+11o
.xdata$x:000075B9                 db    5
.xdata$x:000075BA                 db  93h ; ô
.xdata$x:000075BB                 db  19h
.xdata$x:000075BC                 db    1
.xdata$x:000075BD                 db    0
.xdata$x:000075BE                 db    0
.xdata$x:000075BF                 db    0
.xdata$x:000075C0                 dd offset __unwindtable$??0_Iostream_error_category@std@@QAE@XZ
.xdata$x:000075C4                 db    0
.xdata$x:000075C5                 db    0
.xdata$x:000075C6                 db    0
.xdata$x:000075C7                 db    0
.xdata$x:000075C8                 db    0
.xdata$x:000075C9                 db    0
.xdata$x:000075CA                 db    0
.xdata$x:000075CB                 db    0
.xdata$x:000075CC                 db    0
.xdata$x:000075CD                 db    0
.xdata$x:000075CE                 db    0
.xdata$x:000075CF                 db    0
.xdata$x:000075D0                 db    0
.xdata$x:000075D1                 db    0
.xdata$x:000075D2                 db    0
.xdata$x:000075D3                 db    0
.xdata$x:000075D4                 db    0
.xdata$x:000075D5                 db    0
.xdata$x:000075D6                 db    0
.xdata$x:000075D7                 db    0
.xdata$x:000075D8                 db    0
.xdata$x:000075D9                 db    0
.xdata$x:000075DA                 db    0
.xdata$x:000075DB                 db    0
.xdata$x:000075DB _xdata$x        ends
.xdata$x:000075DB
.xdata$x:000075DC ; ===========================================================================
.xdata$x:000075DC
.xdata$x:000075DC ; Segment type: Pure data
.xdata$x:000075DC ; Segment permissions: Read
.xdata$x:000075DC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000075DC                 assume cs:_xdata$x
.xdata$x:000075DC                 ;org 75DCh
.xdata$x:000075DC ; COMDAT (pick associative to section at 6534)
.xdata$x:000075DC __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:000075DC                                         ; DATA XREF: .xdata$x:000075ECo
.xdata$x:000075DD                 db 0FFh
.xdata$x:000075DE                 db 0FFh
.xdata$x:000075DF                 db 0FFh
.xdata$x:000075E0                 dd offset __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:000075E4 __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:000075E4                                         ; DATA XREF: __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:000075E5                 db    5
.xdata$x:000075E6                 db  93h ; ô
.xdata$x:000075E7                 db  19h
.xdata$x:000075E8                 db    1
.xdata$x:000075E9                 db    0
.xdata$x:000075EA                 db    0
.xdata$x:000075EB                 db    0
.xdata$x:000075EC                 dd offset __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:000075F0                 db    0
.xdata$x:000075F1                 db    0
.xdata$x:000075F2                 db    0
.xdata$x:000075F3                 db    0
.xdata$x:000075F4                 db    0
.xdata$x:000075F5                 db    0
.xdata$x:000075F6                 db    0
.xdata$x:000075F7                 db    0
.xdata$x:000075F8                 db    0
.xdata$x:000075F9                 db    0
.xdata$x:000075FA                 db    0
.xdata$x:000075FB                 db    0
.xdata$x:000075FC                 db    0
.xdata$x:000075FD                 db    0
.xdata$x:000075FE                 db    0
.xdata$x:000075FF                 db    0
.xdata$x:00007600                 db    0
.xdata$x:00007601                 db    0
.xdata$x:00007602                 db    0
.xdata$x:00007603                 db    0
.xdata$x:00007604                 db    0
.xdata$x:00007605                 db    0
.xdata$x:00007606                 db    0
.xdata$x:00007607                 db    0
.xdata$x:00007607 _xdata$x        ends
.xdata$x:00007607
.xdata$x:00007608 ; ===========================================================================
.xdata$x:00007608
.xdata$x:00007608 ; Segment type: Pure data
.xdata$x:00007608 ; Segment permissions: Read
.xdata$x:00007608 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007608                 assume cs:_xdata$x
.xdata$x:00007608                 ;org 7608h
.xdata$x:00007608 ; COMDAT (pick associative to section at 3990)
.xdata$x:00007608 __unwindtable$??1_Iostream_error_category@std@@UAE@XZ db 0FFh
.xdata$x:00007608                                         ; DATA XREF: .xdata$x:00007618o
.xdata$x:00007609                 db 0FFh
.xdata$x:0000760A                 db 0FFh
.xdata$x:0000760B                 db 0FFh
.xdata$x:0000760C                 dd offset __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0
.xdata$x:00007610 __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:00007610                                         ; DATA XREF: __ehhandler$??1_Iostream_error_category@std@@UAE@XZ+11o
.xdata$x:00007611                 db    5
.xdata$x:00007612                 db  93h ; ô
.xdata$x:00007613                 db  19h
.xdata$x:00007614                 db    1
.xdata$x:00007615                 db    0
.xdata$x:00007616                 db    0
.xdata$x:00007617                 db    0
.xdata$x:00007618                 dd offset __unwindtable$??1_Iostream_error_category@std@@UAE@XZ
.xdata$x:0000761C                 db    0
.xdata$x:0000761D                 db    0
.xdata$x:0000761E                 db    0
.xdata$x:0000761F                 db    0
.xdata$x:00007620                 db    0
.xdata$x:00007621                 db    0
.xdata$x:00007622                 db    0
.xdata$x:00007623                 db    0
.xdata$x:00007624                 db    0
.xdata$x:00007625                 db    0
.xdata$x:00007626                 db    0
.xdata$x:00007627                 db    0
.xdata$x:00007628                 db    0
.xdata$x:00007629                 db    0
.xdata$x:0000762A                 db    0
.xdata$x:0000762B                 db    0
.xdata$x:0000762C                 db    0
.xdata$x:0000762D                 db    0
.xdata$x:0000762E                 db    0
.xdata$x:0000762F                 db    0
.xdata$x:00007630                 db    0
.xdata$x:00007631                 db    0
.xdata$x:00007632                 db    0
.xdata$x:00007633                 db    0
.xdata$x:00007633 _xdata$x        ends
.xdata$x:00007633
.xdata$x:00007634 ; ===========================================================================
.xdata$x:00007634
.xdata$x:00007634 ; Segment type: Pure data
.xdata$x:00007634 ; Segment permissions: Read
.xdata$x:00007634 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007634                 assume cs:_xdata$x
.xdata$x:00007634                 ;org 7634h
.xdata$x:00007634 ; COMDAT (pick associative to section at 32C4)
.xdata$x:00007634 __unwindtable$??0_System_error_category@std@@QAE@XZ db 0FFh
.xdata$x:00007634                                         ; DATA XREF: .xdata$x:00007644o
.xdata$x:00007635                 db 0FFh
.xdata$x:00007636                 db 0FFh
.xdata$x:00007637                 db 0FFh
.xdata$x:00007638                 dd offset __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0
.xdata$x:0000763C __ehfuncinfo$??0_System_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000763C                                         ; DATA XREF: __ehhandler$??0_System_error_category@std@@QAE@XZ+11o
.xdata$x:0000763D                 db    5
.xdata$x:0000763E                 db  93h ; ô
.xdata$x:0000763F                 db  19h
.xdata$x:00007640                 db    1
.xdata$x:00007641                 db    0
.xdata$x:00007642                 db    0
.xdata$x:00007643                 db    0
.xdata$x:00007644                 dd offset __unwindtable$??0_System_error_category@std@@QAE@XZ
.xdata$x:00007648                 align 20h
.xdata$x:00007648 _xdata$x        ends
.xdata$x:00007648
.xdata$x:00007660 ; ===========================================================================
.xdata$x:00007660
.xdata$x:00007660 ; Segment type: Pure data
.xdata$x:00007660 ; Segment permissions: Read
.xdata$x:00007660 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007660                 assume cs:_xdata$x
.xdata$x:00007660                 ;org 7660h
.xdata$x:00007660 ; COMDAT (pick associative to section at 65F8)
.xdata$x:00007660 __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:00007660                                         ; DATA XREF: .xdata$x:00007670o
.xdata$x:00007661                 db 0FFh
.xdata$x:00007662                 db 0FFh
.xdata$x:00007663                 db 0FFh
.xdata$x:00007664                 dd offset __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:00007668 __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:00007668                                         ; DATA XREF: __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:00007669                 db    5
.xdata$x:0000766A                 db  93h ; ô
.xdata$x:0000766B                 db  19h
.xdata$x:0000766C                 db    1
.xdata$x:0000766D                 db    0
.xdata$x:0000766E                 db    0
.xdata$x:0000766F                 db    0
.xdata$x:00007670                 dd offset __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:00007674                 db    0
.xdata$x:00007675                 db    0
.xdata$x:00007676                 db    0
.xdata$x:00007677                 db    0
.xdata$x:00007678                 db    0
.xdata$x:00007679                 db    0
.xdata$x:0000767A                 db    0
.xdata$x:0000767B                 db    0
.xdata$x:0000767C                 db    0
.xdata$x:0000767D                 db    0
.xdata$x:0000767E                 db    0
.xdata$x:0000767F                 db    0
.xdata$x:00007680                 db    0
.xdata$x:00007681                 db    0
.xdata$x:00007682                 db    0
.xdata$x:00007683                 db    0
.xdata$x:00007684                 db    0
.xdata$x:00007685                 db    0
.xdata$x:00007686                 db    0
.xdata$x:00007687                 db    0
.xdata$x:00007688                 db    0
.xdata$x:00007689                 db    0
.xdata$x:0000768A                 db    0
.xdata$x:0000768B                 db    0
.xdata$x:0000768B _xdata$x        ends
.xdata$x:0000768B
.xdata$x:0000768C ; ===========================================================================
.xdata$x:0000768C
.xdata$x:0000768C ; Segment type: Pure data
.xdata$x:0000768C ; Segment permissions: Read
.xdata$x:0000768C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000768C                 assume cs:_xdata$x
.xdata$x:0000768C                 ;org 768Ch
.xdata$x:0000768C ; COMDAT (pick associative to section at 3A84)
.xdata$x:0000768C __unwindtable$??1_System_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000768C                                         ; DATA XREF: .xdata$x:0000769Co
.xdata$x:0000768D                 db 0FFh
.xdata$x:0000768E                 db 0FFh
.xdata$x:0000768F                 db 0FFh
.xdata$x:00007690                 dd offset __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0
.xdata$x:00007694 __ehfuncinfo$??1_System_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:00007694                                         ; DATA XREF: __ehhandler$??1_System_error_category@std@@UAE@XZ+11o
.xdata$x:00007695                 db    5
.xdata$x:00007696                 db  93h ; ô
.xdata$x:00007697                 db  19h
.xdata$x:00007698                 db    1
.xdata$x:00007699                 db    0
.xdata$x:0000769A                 db    0
.xdata$x:0000769B                 db    0
.xdata$x:0000769C                 dd offset __unwindtable$??1_System_error_category@std@@UAE@XZ
.xdata$x:000076A0                 db    0
.xdata$x:000076A1                 db    0
.xdata$x:000076A2                 db    0
.xdata$x:000076A3                 db    0
.xdata$x:000076A4                 db    0
.xdata$x:000076A5                 db    0
.xdata$x:000076A6                 db    0
.xdata$x:000076A7                 db    0
.xdata$x:000076A8                 db    0
.xdata$x:000076A9                 db    0
.xdata$x:000076AA                 db    0
.xdata$x:000076AB                 db    0
.xdata$x:000076AC                 db    0
.xdata$x:000076AD                 db    0
.xdata$x:000076AE                 db    0
.xdata$x:000076AF                 db    0
.xdata$x:000076B0                 db    0
.xdata$x:000076B1                 db    0
.xdata$x:000076B2                 db    0
.xdata$x:000076B3                 db    0
.xdata$x:000076B4                 db    0
.xdata$x:000076B5                 db    0
.xdata$x:000076B6                 db    0
.xdata$x:000076B7                 db    0
.xdata$x:000076B7 _xdata$x        ends
.xdata$x:000076B7
.xdata$x:000076B8 ; ===========================================================================
.xdata$x:000076B8
.xdata$x:000076B8 ; Segment type: Pure data
.xdata$x:000076B8 ; Segment permissions: Read
.xdata$x:000076B8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000076B8                 assume cs:_xdata$x
.xdata$x:000076B8                 ;org 76B8h
.xdata$x:000076B8 ; COMDAT (pick associative to section at 2AB4)
.xdata$x:000076B8 __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:000076B8                                         ; DATA XREF: .xdata$x:000076C8o
.xdata$x:000076B9                 db 0FFh
.xdata$x:000076BA                 db 0FFh
.xdata$x:000076BB                 db 0FFh
.xdata$x:000076BC                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:000076C0 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:000076C0                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:000076C1                 db    5
.xdata$x:000076C2                 db  93h ; ô
.xdata$x:000076C3                 db  19h
.xdata$x:000076C4                 db    1
.xdata$x:000076C5                 db    0
.xdata$x:000076C6                 db    0
.xdata$x:000076C7                 db    0
.xdata$x:000076C8                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:000076CC                 db    0
.xdata$x:000076CD                 db    0
.xdata$x:000076CE                 db    0
.xdata$x:000076CF                 db    0
.xdata$x:000076D0                 db    0
.xdata$x:000076D1                 db    0
.xdata$x:000076D2                 db    0
.xdata$x:000076D3                 db    0
.xdata$x:000076D4                 db    0
.xdata$x:000076D5                 db    0
.xdata$x:000076D6                 db    0
.xdata$x:000076D7                 db    0
.xdata$x:000076D8                 db    0
.xdata$x:000076D9                 db    0
.xdata$x:000076DA                 db    0
.xdata$x:000076DB                 db    0
.xdata$x:000076DC                 db    0
.xdata$x:000076DD                 db    0
.xdata$x:000076DE                 db    0
.xdata$x:000076DF                 db    0
.xdata$x:000076E0                 db    0
.xdata$x:000076E1                 db    0
.xdata$x:000076E2                 db    0
.xdata$x:000076E3                 db    0
.xdata$x:000076E3 _xdata$x        ends
.xdata$x:000076E3
.xdata$x:000076E4 ; ===========================================================================
.xdata$x:000076E4
.xdata$x:000076E4 ; Segment type: Pure data
.xdata$x:000076E4 ; Segment permissions: Read
.xdata$x:000076E4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000076E4                 assume cs:_xdata$x
.xdata$x:000076E4                 ;org 76E4h
.xdata$x:000076E4 ; COMDAT (pick associative to section at 3644)
.xdata$x:000076E4 __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:000076E4                                         ; DATA XREF: .xdata$x:000076F4o
.xdata$x:000076E5                 db 0FFh
.xdata$x:000076E6                 db 0FFh
.xdata$x:000076E7                 db 0FFh
.xdata$x:000076E8                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:000076EC __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:000076EC                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:000076ED                 db    5
.xdata$x:000076EE                 db  93h ; ô
.xdata$x:000076EF                 db  19h
.xdata$x:000076F0                 db    1
.xdata$x:000076F1                 db    0
.xdata$x:000076F2                 db    0
.xdata$x:000076F3                 db    0
.xdata$x:000076F4                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:000076F8                 db    0
.xdata$x:000076F9                 db    0
.xdata$x:000076FA                 db    0
.xdata$x:000076FB                 db    0
.xdata$x:000076FC                 db    0
.xdata$x:000076FD                 db    0
.xdata$x:000076FE                 db    0
.xdata$x:000076FF                 db    0
.xdata$x:00007700                 db    0
.xdata$x:00007701                 db    0
.xdata$x:00007702                 db    0
.xdata$x:00007703                 db    0
.xdata$x:00007704                 db    0
.xdata$x:00007705                 db    0
.xdata$x:00007706                 db    0
.xdata$x:00007707                 db    0
.xdata$x:00007708                 db    0
.xdata$x:00007709                 db    0
.xdata$x:0000770A                 db    0
.xdata$x:0000770B                 db    0
.xdata$x:0000770C                 db    0
.xdata$x:0000770D                 db    0
.xdata$x:0000770E                 db    0
.xdata$x:0000770F                 db    0
.xdata$x:0000770F _xdata$x        ends
.xdata$x:0000770F
.xdata$x:00007710 ; ===========================================================================
.xdata$x:00007710
.xdata$x:00007710 ; Segment type: Pure data
.xdata$x:00007710 ; Segment permissions: Read
.xdata$x:00007710 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007710                 assume cs:_xdata$x
.xdata$x:00007710                 ;org 7710h
.xdata$x:00007710 ; COMDAT (pick associative to section at 27AC)
.xdata$x:00007710 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db 0FFh
.xdata$x:00007710                                         ; DATA XREF: .xdata$x:00007720o
.xdata$x:00007711                 db 0FFh
.xdata$x:00007712                 db 0FFh
.xdata$x:00007713                 db 0FFh
.xdata$x:00007714                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0
.xdata$x:00007718 __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db  22h ; "
.xdata$x:00007718                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z+11o
.xdata$x:00007719                 db    5
.xdata$x:0000771A                 db  93h ; ô
.xdata$x:0000771B                 db  19h
.xdata$x:0000771C                 db    1
.xdata$x:0000771D                 db    0
.xdata$x:0000771E                 db    0
.xdata$x:0000771F                 db    0
.xdata$x:00007720                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.xdata$x:00007724                 db    0
.xdata$x:00007725                 db    0
.xdata$x:00007726                 db    0
.xdata$x:00007727                 db    0
.xdata$x:00007728                 db    0
.xdata$x:00007729                 db    0
.xdata$x:0000772A                 db    0
.xdata$x:0000772B                 db    0
.xdata$x:0000772C                 db    0
.xdata$x:0000772D                 db    0
.xdata$x:0000772E                 db    0
.xdata$x:0000772F                 db    0
.xdata$x:00007730                 db    0
.xdata$x:00007731                 db    0
.xdata$x:00007732                 db    0
.xdata$x:00007733                 db    0
.xdata$x:00007734                 db    0
.xdata$x:00007735                 db    0
.xdata$x:00007736                 db    0
.xdata$x:00007737                 db    0
.xdata$x:00007738                 db    0
.xdata$x:00007739                 db    0
.xdata$x:0000773A                 db    0
.xdata$x:0000773B                 db    0
.xdata$x:0000773B _xdata$x        ends
.xdata$x:0000773B
.xdata$x:0000773C ; ===========================================================================
.xdata$x:0000773C
.xdata$x:0000773C ; Segment type: Pure data
.xdata$x:0000773C ; Segment permissions: Read
.xdata$x:0000773C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000773C                 assume cs:_xdata$x
.xdata$x:0000773C                 ;org 773Ch
.xdata$x:0000773C ; COMDAT (pick associative to section at 347C)
.xdata$x:0000773C __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000773C                                         ; DATA XREF: .xdata$x:0000774Co
.xdata$x:0000773D                 db 0FFh
.xdata$x:0000773E                 db 0FFh
.xdata$x:0000773F                 db 0FFh
.xdata$x:00007740                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00007744 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00007744                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00007745                 db    5
.xdata$x:00007746                 db  93h ; ô
.xdata$x:00007747                 db  19h
.xdata$x:00007748                 db    1
.xdata$x:00007749                 db    0
.xdata$x:0000774A                 db    0
.xdata$x:0000774B                 db    0
.xdata$x:0000774C                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:00007750                 db    0
.xdata$x:00007751                 db    0
.xdata$x:00007752                 db    0
.xdata$x:00007753                 db    0
.xdata$x:00007754                 db    0
.xdata$x:00007755                 db    0
.xdata$x:00007756                 db    0
.xdata$x:00007757                 db    0
.xdata$x:00007758                 db    0
.xdata$x:00007759                 db    0
.xdata$x:0000775A                 db    0
.xdata$x:0000775B                 db    0
.xdata$x:0000775C                 db    0
.xdata$x:0000775D                 db    0
.xdata$x:0000775E                 db    0
.xdata$x:0000775F                 db    0
.xdata$x:00007760                 db    0
.xdata$x:00007761                 db    0
.xdata$x:00007762                 db    0
.xdata$x:00007763                 db    0
.xdata$x:00007764                 db    0
.xdata$x:00007765                 db    0
.xdata$x:00007766                 db    0
.xdata$x:00007767                 db    0
.xdata$x:00007767 _xdata$x        ends
.xdata$x:00007767
.xdata$x:00007768 ; ===========================================================================
.xdata$x:00007768
.xdata$x:00007768 ; Segment type: Pure data
.xdata$x:00007768 ; Segment permissions: Read
.xdata$x:00007768 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007768                 assume cs:_xdata$x
.xdata$x:00007768                 ;org 7768h
.xdata$x:00007768 ; COMDAT (pick associative to section at 2E50)
.xdata$x:00007768 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:00007768                                         ; DATA XREF: .xdata$x:00007778o
.xdata$x:00007769                 db 0FFh
.xdata$x:0000776A                 db 0FFh
.xdata$x:0000776B                 db 0FFh
.xdata$x:0000776C                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0
.xdata$x:00007770 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:00007770                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z+11o
.xdata$x:00007771                 db    5
.xdata$x:00007772                 db  93h ; ô
.xdata$x:00007773                 db  19h
.xdata$x:00007774                 db    1
.xdata$x:00007775                 db    0
.xdata$x:00007776                 db    0
.xdata$x:00007777                 db    0
.xdata$x:00007778                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.xdata$x:0000777C                 db    0
.xdata$x:0000777D                 db    0
.xdata$x:0000777E                 db    0
.xdata$x:0000777F                 db    0
.xdata$x:00007780                 db    0
.xdata$x:00007781                 db    0
.xdata$x:00007782                 db    0
.xdata$x:00007783                 db    0
.xdata$x:00007784                 db    0
.xdata$x:00007785                 db    0
.xdata$x:00007786                 db    0
.xdata$x:00007787                 db    0
.xdata$x:00007788                 db    0
.xdata$x:00007789                 db    0
.xdata$x:0000778A                 db    0
.xdata$x:0000778B                 db    0
.xdata$x:0000778C                 db    0
.xdata$x:0000778D                 db    0
.xdata$x:0000778E                 db    0
.xdata$x:0000778F                 db    0
.xdata$x:00007790                 db    0
.xdata$x:00007791                 db    0
.xdata$x:00007792                 db    0
.xdata$x:00007793                 db    0
.xdata$x:00007793 _xdata$x        ends
.xdata$x:00007793
.xdata$x:00007794 ; ===========================================================================
.xdata$x:00007794
.xdata$x:00007794 ; Segment type: Pure data
.xdata$x:00007794 ; Segment permissions: Read
.xdata$x:00007794 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007794                 assume cs:_xdata$x
.xdata$x:00007794                 ;org 7794h
.xdata$x:00007794 ; COMDAT (pick associative to section at 3030)
.xdata$x:00007794 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:00007794                                         ; DATA XREF: .xdata$x:000077A4o
.xdata$x:00007795                 db 0FFh
.xdata$x:00007796                 db 0FFh
.xdata$x:00007797                 db 0FFh
.xdata$x:00007798                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:0000779C __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000779C                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:0000779D                 db    5
.xdata$x:0000779E                 db  93h ; ô
.xdata$x:0000779F                 db  19h
.xdata$x:000077A0                 db    1
.xdata$x:000077A1                 db    0
.xdata$x:000077A2                 db    0
.xdata$x:000077A3                 db    0
.xdata$x:000077A4                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:000077A8                 align 20h
.xdata$x:000077A8 _xdata$x        ends
.xdata$x:000077A8
.xdata$x:000077C0 ; ===========================================================================
.xdata$x:000077C0
.xdata$x:000077C0 ; Segment type: Pure data
.xdata$x:000077C0 ; Segment permissions: Read
.xdata$x:000077C0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000077C0                 assume cs:_xdata$x
.xdata$x:000077C0                 ;org 77C0h
.xdata$x:000077C0 ; COMDAT (pick associative to section at 2F00)
.xdata$x:000077C0 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z db 0FFh
.xdata$x:000077C0                                         ; DATA XREF: .xdata$x:000077D0o
.xdata$x:000077C1                 db 0FFh
.xdata$x:000077C2                 db 0FFh
.xdata$x:000077C3                 db 0FFh
.xdata$x:000077C4                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z$0
.xdata$x:000077C8 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z db  22h ; "
.xdata$x:000077C8                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z+11o
.xdata$x:000077C9                 db    5
.xdata$x:000077CA                 db  93h ; ô
.xdata$x:000077CB                 db  19h
.xdata$x:000077CC                 db    1
.xdata$x:000077CD                 db    0
.xdata$x:000077CE                 db    0
.xdata$x:000077CF                 db    0
.xdata$x:000077D0                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z
.xdata$x:000077D4                 db    0
.xdata$x:000077D5                 db    0
.xdata$x:000077D6                 db    0
.xdata$x:000077D7                 db    0
.xdata$x:000077D8                 db    0
.xdata$x:000077D9                 db    0
.xdata$x:000077DA                 db    0
.xdata$x:000077DB                 db    0
.xdata$x:000077DC                 db    0
.xdata$x:000077DD                 db    0
.xdata$x:000077DE                 db    0
.xdata$x:000077DF                 db    0
.xdata$x:000077E0                 db    0
.xdata$x:000077E1                 db    0
.xdata$x:000077E2                 db    0
.xdata$x:000077E3                 db    0
.xdata$x:000077E4                 db    0
.xdata$x:000077E5                 db    0
.xdata$x:000077E6                 db    0
.xdata$x:000077E7                 db    0
.xdata$x:000077E8                 db    0
.xdata$x:000077E9                 db    0
.xdata$x:000077EA                 db    0
.xdata$x:000077EB                 db    0
.xdata$x:000077EB _xdata$x        ends
.xdata$x:000077EB
.xdata$x:000077EC ; ===========================================================================
.xdata$x:000077EC
.xdata$x:000077EC ; Segment type: Pure data
.xdata$x:000077EC ; Segment permissions: Read
.xdata$x:000077EC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000077EC                 assume cs:_xdata$x
.xdata$x:000077EC                 ;org 77ECh
.xdata$x:000077EC ; COMDAT (pick associative to section at 2F98)
.xdata$x:000077EC __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db 0FFh
.xdata$x:000077EC                                         ; DATA XREF: .xdata$x:000077FCo
.xdata$x:000077ED                 db 0FFh
.xdata$x:000077EE                 db 0FFh
.xdata$x:000077EF                 db 0FFh
.xdata$x:000077F0                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0
.xdata$x:000077F4 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db  22h ; "
.xdata$x:000077F4                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z+11o
.xdata$x:000077F5                 db    5
.xdata$x:000077F6                 db  93h ; ô
.xdata$x:000077F7                 db  19h
.xdata$x:000077F8                 db    1
.xdata$x:000077F9                 db    0
.xdata$x:000077FA                 db    0
.xdata$x:000077FB                 db    0
.xdata$x:000077FC                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.xdata$x:00007800                 db    0
.xdata$x:00007801                 db    0
.xdata$x:00007802                 db    0
.xdata$x:00007803                 db    0
.xdata$x:00007804                 db    0
.xdata$x:00007805                 db    0
.xdata$x:00007806                 db    0
.xdata$x:00007807                 db    0
.xdata$x:00007808                 db    0
.xdata$x:00007809                 db    0
.xdata$x:0000780A                 db    0
.xdata$x:0000780B                 db    0
.xdata$x:0000780C                 db    0
.xdata$x:0000780D                 db    0
.xdata$x:0000780E                 db    0
.xdata$x:0000780F                 db    0
.xdata$x:00007810                 db    0
.xdata$x:00007811                 db    0
.xdata$x:00007812                 db    0
.xdata$x:00007813                 db    0
.xdata$x:00007814                 db    0
.xdata$x:00007815                 db    0
.xdata$x:00007816                 db    0
.xdata$x:00007817                 db    0
.xdata$x:00007817 _xdata$x        ends
.xdata$x:00007817
.xdata$x:00007818 ; ===========================================================================
.xdata$x:00007818
.xdata$x:00007818 ; Segment type: Pure data
.xdata$x:00007818 ; Segment permissions: Read
.xdata$x:00007818 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007818                 assume cs:_xdata$x
.xdata$x:00007818                 ;org 7818h
.xdata$x:00007818 ; COMDAT (pick associative to section at 2DAC)
.xdata$x:00007818 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z db 0FFh
.xdata$x:00007818                                         ; DATA XREF: .xdata$x:00007828o
.xdata$x:00007819                 db 0FFh
.xdata$x:0000781A                 db 0FFh
.xdata$x:0000781B                 db 0FFh
.xdata$x:0000781C                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0
.xdata$x:00007820 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z db  22h ; "
.xdata$x:00007820                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z+11o
.xdata$x:00007821                 db    5
.xdata$x:00007822                 db  93h ; ô
.xdata$x:00007823                 db  19h
.xdata$x:00007824                 db    1
.xdata$x:00007825                 db    0
.xdata$x:00007826                 db    0
.xdata$x:00007827                 db    0
.xdata$x:00007828                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.xdata$x:0000782C                 db    0
.xdata$x:0000782D                 db    0
.xdata$x:0000782E                 db    0
.xdata$x:0000782F                 db    0
.xdata$x:00007830                 db    0
.xdata$x:00007831                 db    0
.xdata$x:00007832                 db    0
.xdata$x:00007833                 db    0
.xdata$x:00007834                 db    0
.xdata$x:00007835                 db    0
.xdata$x:00007836                 db    0
.xdata$x:00007837                 db    0
.xdata$x:00007838                 db    0
.xdata$x:00007839                 db    0
.xdata$x:0000783A                 db    0
.xdata$x:0000783B                 db    0
.xdata$x:0000783C                 db    0
.xdata$x:0000783D                 db    0
.xdata$x:0000783E                 db    0
.xdata$x:0000783F                 db    0
.xdata$x:00007840                 db    0
.xdata$x:00007841                 db    0
.xdata$x:00007842                 db    0
.xdata$x:00007843                 db    0
.xdata$x:00007843 _xdata$x        ends
.xdata$x:00007843
.xdata$x:00007844 ; ===========================================================================
.xdata$x:00007844
.xdata$x:00007844 ; Segment type: Pure data
.xdata$x:00007844 ; Segment permissions: Read
.xdata$x:00007844 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007844                 assume cs:_xdata$x
.xdata$x:00007844                 ;org 7844h
.xdata$x:00007844 ; COMDAT (pick associative to section at 3B18)
.xdata$x:00007844 __unwindtable$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z db 0FFh
.xdata$x:00007844                                         ; DATA XREF: .xdata$x:0000785Co
.xdata$x:00007845                 db 0FFh
.xdata$x:00007846                 db 0FFh
.xdata$x:00007847                 db 0FFh
.xdata$x:00007848                 dd offset __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$0
.xdata$x:0000784C                 align 10h
.xdata$x:00007850                 dd offset __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$1
.xdata$x:00007854 __ehfuncinfo$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z db  22h ; "
.xdata$x:00007854                                         ; DATA XREF: __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z+11o
.xdata$x:00007855                 db    5
.xdata$x:00007856                 db  93h ; ô
.xdata$x:00007857                 db  19h
.xdata$x:00007858                 db    2
.xdata$x:00007859                 db    0
.xdata$x:0000785A                 db    0
.xdata$x:0000785B                 db    0
.xdata$x:0000785C                 dd offset __unwindtable$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.xdata$x:00007860                 db    0
.xdata$x:00007861                 db    0
.xdata$x:00007862                 db    0
.xdata$x:00007863                 db    0
.xdata$x:00007864                 db    0
.xdata$x:00007865                 db    0
.xdata$x:00007866                 db    0
.xdata$x:00007867                 db    0
.xdata$x:00007868                 db    0
.xdata$x:00007869                 db    0
.xdata$x:0000786A                 db    0
.xdata$x:0000786B                 db    0
.xdata$x:0000786C                 db    0
.xdata$x:0000786D                 db    0
.xdata$x:0000786E                 db    0
.xdata$x:0000786F                 db    0
.xdata$x:00007870                 db    0
.xdata$x:00007871                 db    0
.xdata$x:00007872                 db    0
.xdata$x:00007873                 db    0
.xdata$x:00007874                 db    0
.xdata$x:00007875                 db    0
.xdata$x:00007876                 db    0
.xdata$x:00007877                 db    0
.xdata$x:00007877 _xdata$x        ends
.xdata$x:00007877
.xdata$x:00007878 ; ===========================================================================
.xdata$x:00007878
.xdata$x:00007878 ; Segment type: Pure data
.xdata$x:00007878 ; Segment permissions: Read
.xdata$x:00007878 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007878                 assume cs:_xdata$x
.xdata$x:00007878                 ;org 7878h
.xdata$x:00007878 ; COMDAT (pick associative to section at 3818)
.xdata$x:00007878 __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:00007878                                         ; DATA XREF: .xdata$x:00007888o
.xdata$x:00007879                 db 0FFh
.xdata$x:0000787A                 db 0FFh
.xdata$x:0000787B                 db 0FFh
.xdata$x:0000787C                 dd offset __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:00007880 __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00007880                                         ; DATA XREF: __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:00007881                 db    5
.xdata$x:00007882                 db  93h ; ô
.xdata$x:00007883                 db  19h
.xdata$x:00007884                 db    1
.xdata$x:00007885                 db    0
.xdata$x:00007886                 db    0
.xdata$x:00007887                 db    0
.xdata$x:00007888                 dd offset __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:0000788C                 db    0
.xdata$x:0000788D                 db    0
.xdata$x:0000788E                 db    0
.xdata$x:0000788F                 db    0
.xdata$x:00007890                 db    0
.xdata$x:00007891                 db    0
.xdata$x:00007892                 db    0
.xdata$x:00007893                 db    0
.xdata$x:00007894                 db    0
.xdata$x:00007895                 db    0
.xdata$x:00007896                 db    0
.xdata$x:00007897                 db    0
.xdata$x:00007898                 db    0
.xdata$x:00007899                 db    0
.xdata$x:0000789A                 db    0
.xdata$x:0000789B                 db    0
.xdata$x:0000789C                 db    0
.xdata$x:0000789D                 db    0
.xdata$x:0000789E                 db    0
.xdata$x:0000789F                 db    0
.xdata$x:000078A0                 db    0
.xdata$x:000078A1                 db    0
.xdata$x:000078A2                 db    0
.xdata$x:000078A3                 db    0
.xdata$x:000078A3 _xdata$x        ends
.xdata$x:000078A3
.xdata$x:000078A4 ; ===========================================================================
.xdata$x:000078A4
.xdata$x:000078A4 ; Segment type: Pure data
.xdata$x:000078A4 ; Segment permissions: Read
.xdata$x:000078A4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000078A4                 assume cs:_xdata$x
.xdata$x:000078A4                 ;org 78A4h
.xdata$x:000078A4 ; COMDAT (pick associative to section at 6D4C)
.xdata$x:000078A4 __ehfuncinfo$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z db  22h ; "
.xdata$x:000078A4                                         ; DATA XREF: __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z+14o
.xdata$x:000078A5                 db    5
.xdata$x:000078A6                 db  93h ; ô
.xdata$x:000078A7                 db  19h
.xdata$x:000078A8                 db  0Eh
.xdata$x:000078A9                 db    0
.xdata$x:000078AA                 db    0
.xdata$x:000078AB                 db    0
.xdata$x:000078AC                 dd offset __unwindtable$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.xdata$x:000078B0                 db    0
.xdata$x:000078B1                 db    0
.xdata$x:000078B2                 db    0
.xdata$x:000078B3                 db    0
.xdata$x:000078B4                 db    0
.xdata$x:000078B5                 db    0
.xdata$x:000078B6                 db    0
.xdata$x:000078B7                 db    0
.xdata$x:000078B8                 db    0
.xdata$x:000078B9                 db    0
.xdata$x:000078BA                 db    0
.xdata$x:000078BB                 db    0
.xdata$x:000078BC                 db    0
.xdata$x:000078BD                 db    0
.xdata$x:000078BE                 db    0
.xdata$x:000078BF                 db    0
.xdata$x:000078C0                 db    0
.xdata$x:000078C1                 db    0
.xdata$x:000078C2                 db    0
.xdata$x:000078C3                 db    0
.xdata$x:000078C4                 db    0
.xdata$x:000078C5                 db    0
.xdata$x:000078C6                 db    0
.xdata$x:000078C7                 db    0
.xdata$x:000078C8 __unwindtable$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z db 0FFh
.xdata$x:000078C8                                         ; DATA XREF: .xdata$x:000078ACo
.xdata$x:000078C9                 db 0FFh
.xdata$x:000078CA                 db 0FFh
.xdata$x:000078CB                 db 0FFh
.xdata$x:000078CC                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$0
.xdata$x:000078D0                 db    0
.xdata$x:000078D1                 db    0
.xdata$x:000078D2                 db    0
.xdata$x:000078D3                 db    0
.xdata$x:000078D4                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$1
.xdata$x:000078D8                 db    1
.xdata$x:000078D9                 db    0
.xdata$x:000078DA                 db    0
.xdata$x:000078DB                 db    0
.xdata$x:000078DC                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$2
.xdata$x:000078E0                 db    2
.xdata$x:000078E1                 db    0
.xdata$x:000078E2                 db    0
.xdata$x:000078E3                 db    0
.xdata$x:000078E4                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$3
.xdata$x:000078E8                 db    3
.xdata$x:000078E9                 db    0
.xdata$x:000078EA                 db    0
.xdata$x:000078EB                 db    0
.xdata$x:000078EC                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$4
.xdata$x:000078F0                 db    4
.xdata$x:000078F1                 db    0
.xdata$x:000078F2                 db    0
.xdata$x:000078F3                 db    0
.xdata$x:000078F4                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$5
.xdata$x:000078F8                 db    3
.xdata$x:000078F9                 db    0
.xdata$x:000078FA                 db    0
.xdata$x:000078FB                 db    0
.xdata$x:000078FC                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$6
.xdata$x:00007900                 db    6
.xdata$x:00007901                 db    0
.xdata$x:00007902                 db    0
.xdata$x:00007903                 db    0
.xdata$x:00007904                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$7
.xdata$x:00007908                 db    7
.xdata$x:00007909                 db    0
.xdata$x:0000790A                 db    0
.xdata$x:0000790B                 db    0
.xdata$x:0000790C                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$8
.xdata$x:00007910                 db    3
.xdata$x:00007911                 db    0
.xdata$x:00007912                 db    0
.xdata$x:00007913                 db    0
.xdata$x:00007914                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$9
.xdata$x:00007918                 db    9
.xdata$x:00007919                 db    0
.xdata$x:0000791A                 db    0
.xdata$x:0000791B                 db    0
.xdata$x:0000791C                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$10
.xdata$x:00007920                 db    3
.xdata$x:00007921                 db    0
.xdata$x:00007922                 db    0
.xdata$x:00007923                 db    0
.xdata$x:00007924                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$11
.xdata$x:00007928                 db  0Bh
.xdata$x:00007929                 db    0
.xdata$x:0000792A                 db    0
.xdata$x:0000792B                 db    0
.xdata$x:0000792C                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$12
.xdata$x:00007930                 db  0Ch
.xdata$x:00007931                 db    0
.xdata$x:00007932                 db    0
.xdata$x:00007933                 db    0
.xdata$x:00007934                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$13
.xdata$x:00007934 _xdata$x        ends
.xdata$x:00007934
.xdata$x:00007938 ; ===========================================================================
.xdata$x:00007938
.xdata$x:00007938 ; Segment type: Pure data
.xdata$x:00007938 ; Segment permissions: Read
.xdata$x:00007938 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007938                 assume cs:_xdata$x
.xdata$x:00007938                 ;org 7938h
.xdata$x:00007938 ; COMDAT (pick associative to section at 5A58)
.xdata$x:00007938 __unwindtable$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db 0FFh
.xdata$x:00007938                                         ; DATA XREF: .xdata$x:00007948o
.xdata$x:00007939                 db 0FFh
.xdata$x:0000793A                 db 0FFh
.xdata$x:0000793B                 db 0FFh
.xdata$x:0000793C                 dd offset __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0
.xdata$x:00007940 __ehfuncinfo$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db  22h ; "
.xdata$x:00007940                                         ; DATA XREF: __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ+11o
.xdata$x:00007941                 db    5
.xdata$x:00007942                 db  93h ; ô
.xdata$x:00007943                 db  19h
.xdata$x:00007944                 db    1
.xdata$x:00007945                 db    0
.xdata$x:00007946                 db    0
.xdata$x:00007947                 db    0
.xdata$x:00007948                 dd offset __unwindtable$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.xdata$x:0000794C                 db    0
.xdata$x:0000794D                 db    0
.xdata$x:0000794E                 db    0
.xdata$x:0000794F                 db    0
.xdata$x:00007950                 db    0
.xdata$x:00007951                 db    0
.xdata$x:00007952                 db    0
.xdata$x:00007953                 db    0
.xdata$x:00007954                 db    0
.xdata$x:00007955                 db    0
.xdata$x:00007956                 db    0
.xdata$x:00007957                 db    0
.xdata$x:00007958                 db    0
.xdata$x:00007959                 db    0
.xdata$x:0000795A                 db    0
.xdata$x:0000795B                 db    0
.xdata$x:0000795C                 db    0
.xdata$x:0000795D                 db    0
.xdata$x:0000795E                 db    0
.xdata$x:0000795F                 db    0
.xdata$x:00007960                 db    0
.xdata$x:00007961                 db    0
.xdata$x:00007962                 db    0
.xdata$x:00007963                 db    0
.xdata$x:00007963 _xdata$x        ends
.xdata$x:00007963
.xdata$x:00007964 ; ===========================================================================
.xdata$x:00007964
.xdata$x:00007964 ; Segment type: Pure data
.xdata$x:00007964 ; Segment permissions: Read
.xdata$x:00007964 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007964                 assume cs:_xdata$x
.xdata$x:00007964                 ;org 7964h
.xdata$x:00007964 ; COMDAT (pick associative to section at 5E60)
.xdata$x:00007964 __unwindtable$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db 0FFh
.xdata$x:00007964                                         ; DATA XREF: .xdata$x:00007974o
.xdata$x:00007965                 db 0FFh
.xdata$x:00007966                 db 0FFh
.xdata$x:00007967                 db 0FFh
.xdata$x:00007968                 dd offset __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0
.xdata$x:0000796C __ehfuncinfo$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000796C                                         ; DATA XREF: __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ+11o
.xdata$x:0000796D                 db    5
.xdata$x:0000796E                 db  93h ; ô
.xdata$x:0000796F                 db  19h
.xdata$x:00007970                 db    1
.xdata$x:00007971                 db    0
.xdata$x:00007972                 db    0
.xdata$x:00007973                 db    0
.xdata$x:00007974                 dd offset __unwindtable$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.xdata$x:00007978                 db    0
.xdata$x:00007979                 db    0
.xdata$x:0000797A                 db    0
.xdata$x:0000797B                 db    0
.xdata$x:0000797C                 db    0
.xdata$x:0000797D                 db    0
.xdata$x:0000797E                 db    0
.xdata$x:0000797F                 db    0
.xdata$x:00007980                 db    0
.xdata$x:00007981                 db    0
.xdata$x:00007982                 db    0
.xdata$x:00007983                 db    0
.xdata$x:00007984                 db    0
.xdata$x:00007985                 db    0
.xdata$x:00007986                 db    0
.xdata$x:00007987                 db    0
.xdata$x:00007988                 db    0
.xdata$x:00007989                 db    0
.xdata$x:0000798A                 db    0
.xdata$x:0000798B                 db    0
.xdata$x:0000798C                 db    0
.xdata$x:0000798D                 db    0
.xdata$x:0000798E                 db    0
.xdata$x:0000798F                 db    0
.xdata$x:0000798F _xdata$x        ends
.xdata$x:0000798F
.xdata$x:00007990 ; ===========================================================================
.xdata$x:00007990
.xdata$x:00007990 ; Segment type: Pure data
.xdata$x:00007990 ; Segment permissions: Read
.xdata$x:00007990 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007990                 assume cs:_xdata$x
.xdata$x:00007990                 ;org 7990h
.xdata$x:00007990 ; COMDAT (pick associative to section at 7110)
.xdata$x:00007990 __unwindtable$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z db 0FFh
.xdata$x:00007990                                         ; DATA XREF: .xdata$x:000079A0o
.xdata$x:00007991                 db 0FFh
.xdata$x:00007992                 db 0FFh
.xdata$x:00007993                 db 0FFh
.xdata$x:00007994                 dd offset __unwindfunclet$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z$0
.xdata$x:00007998 __ehfuncinfo$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z db  22h ; "
.xdata$x:00007998                                         ; DATA XREF: __ehhandler$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z+11o
.xdata$x:00007999                 db    5
.xdata$x:0000799A                 db  93h ; ô
.xdata$x:0000799B                 db  19h
.xdata$x:0000799C                 db    1
.xdata$x:0000799D                 db    0
.xdata$x:0000799E                 db    0
.xdata$x:0000799F                 db    0
.xdata$x:000079A0                 dd offset __unwindtable$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z
.xdata$x:000079A4                 db    0
.xdata$x:000079A5                 db    0
.xdata$x:000079A6                 db    0
.xdata$x:000079A7                 db    0
.xdata$x:000079A8                 db    0
.xdata$x:000079A9                 db    0
.xdata$x:000079AA                 db    0
.xdata$x:000079AB                 db    0
.xdata$x:000079AC                 db    0
.xdata$x:000079AD                 db    0
.xdata$x:000079AE                 db    0
.xdata$x:000079AF                 db    0
.xdata$x:000079B0                 db    0
.xdata$x:000079B1                 db    0
.xdata$x:000079B2                 db    0
.xdata$x:000079B3                 db    0
.xdata$x:000079B4                 db    0
.xdata$x:000079B5                 db    0
.xdata$x:000079B6                 db    0
.xdata$x:000079B7                 db    0
.xdata$x:000079B8                 db    0
.xdata$x:000079B9                 db    0
.xdata$x:000079BA                 db    0
.xdata$x:000079BB                 db    0
.xdata$x:000079BB _xdata$x        ends
.xdata$x:000079BB
.xdata$x:000079BC ; ===========================================================================
.xdata$x:000079BC
.xdata$x:000079BC ; Segment type: Pure data
.xdata$x:000079BC ; Segment permissions: Read
.xdata$x:000079BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000079BC                 assume cs:_xdata$x
.xdata$x:000079BC                 ;org 79BCh
.xdata$x:000079BC ; COMDAT (pick associative to section at 4660)
.xdata$x:000079BC __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5 db    0
.xdata$x:000079BC                                         ; DATA XREF: .xdata$x:00007A44o
.xdata$x:000079BD                 db    0
.xdata$x:000079BE                 db    0
.xdata$x:000079BF                 db    0
.xdata$x:000079C0                 db    0
.xdata$x:000079C1                 db    0
.xdata$x:000079C2                 db    0
.xdata$x:000079C3                 db    0
.xdata$x:000079C4                 db    0
.xdata$x:000079C5                 db    0
.xdata$x:000079C6                 db    0
.xdata$x:000079C7                 db    0
.xdata$x:000079C8                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.xdata$x:000079CC __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4 db    0
.xdata$x:000079CC                                         ; DATA XREF: .xdata$x:00007A30o
.xdata$x:000079CD                 db    0
.xdata$x:000079CE                 db    0
.xdata$x:000079CF                 db    0
.xdata$x:000079D0                 db    0
.xdata$x:000079D1                 db    0
.xdata$x:000079D2                 db    0
.xdata$x:000079D3                 db    0
.xdata$x:000079D4                 db    0
.xdata$x:000079D5                 db    0
.xdata$x:000079D6                 db    0
.xdata$x:000079D7                 db    0
.xdata$x:000079D8                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1
.xdata$x:000079DC __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db 0FFh
.xdata$x:000079DC                                         ; DATA XREF: .xdata$x:00007A04o
.xdata$x:000079DD                 db 0FFh
.xdata$x:000079DE                 db 0FFh
.xdata$x:000079DF                 db 0FFh
.xdata$x:000079E0                 db    0
.xdata$x:000079E1                 db    0
.xdata$x:000079E2                 db    0
.xdata$x:000079E3                 db    0
.xdata$x:000079E4                 db 0FFh
.xdata$x:000079E5                 db 0FFh
.xdata$x:000079E6                 db 0FFh
.xdata$x:000079E7                 db 0FFh
.xdata$x:000079E8                 db    0
.xdata$x:000079E9                 db    0
.xdata$x:000079EA                 db    0
.xdata$x:000079EB                 db    0
.xdata$x:000079EC                 db    1
.xdata$x:000079ED                 db    0
.xdata$x:000079EE                 db    0
.xdata$x:000079EF                 db    0
.xdata$x:000079F0                 db    0
.xdata$x:000079F1                 db    0
.xdata$x:000079F2                 db    0
.xdata$x:000079F3                 db    0
.xdata$x:000079F4                 db    1
.xdata$x:000079F5                 db    0
.xdata$x:000079F6                 db    0
.xdata$x:000079F7                 db    0
.xdata$x:000079F8                 db    0
.xdata$x:000079F9                 db    0
.xdata$x:000079FA                 db    0
.xdata$x:000079FB                 db    0
.xdata$x:000079FC __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:000079FC                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z+11o
.xdata$x:000079FD                 db    5
.xdata$x:000079FE                 db  93h ; ô
.xdata$x:000079FF                 db  19h
.xdata$x:00007A00                 db    4
.xdata$x:00007A01                 db    0
.xdata$x:00007A02                 db    0
.xdata$x:00007A03                 db    0
.xdata$x:00007A04                 dd offset __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:00007A08                 db    2
.xdata$x:00007A09                 db    0
.xdata$x:00007A0A                 db    0
.xdata$x:00007A0B                 db    0
.xdata$x:00007A0C                 dd offset __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:00007A10                 align 20h
.xdata$x:00007A20 __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db    2
.xdata$x:00007A20                                         ; DATA XREF: .xdata$x:00007A0Co
.xdata$x:00007A21                 db    0
.xdata$x:00007A22                 db    0
.xdata$x:00007A23                 db    0
.xdata$x:00007A24                 db    2
.xdata$x:00007A25                 db    0
.xdata$x:00007A26                 db    0
.xdata$x:00007A27                 db    0
.xdata$x:00007A28                 db    3
.xdata$x:00007A29                 db    0
.xdata$x:00007A2A                 db    0
.xdata$x:00007A2B                 db    0
.xdata$x:00007A2C                 db    1
.xdata$x:00007A2D                 db    0
.xdata$x:00007A2E                 db    0
.xdata$x:00007A2F                 db    0
.xdata$x:00007A30                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4
.xdata$x:00007A34                 db    0
.xdata$x:00007A35                 db    0
.xdata$x:00007A36                 db    0
.xdata$x:00007A37                 db    0
.xdata$x:00007A38                 db    0
.xdata$x:00007A39                 db    0
.xdata$x:00007A3A                 db    0
.xdata$x:00007A3B                 db    0
.xdata$x:00007A3C                 db    3
.xdata$x:00007A3D                 db    0
.xdata$x:00007A3E                 db    0
.xdata$x:00007A3F                 db    0
.xdata$x:00007A40                 db    1
.xdata$x:00007A41                 db    0
.xdata$x:00007A42                 db    0
.xdata$x:00007A43                 db    0
.xdata$x:00007A44                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5
.xdata$x:00007A44 _xdata$x        ends
.xdata$x:00007A44
.xdata$x:00007A48 ; ===========================================================================
.xdata$x:00007A48
.xdata$x:00007A48 ; Segment type: Pure data
.xdata$x:00007A48 ; Segment permissions: Read
.xdata$x:00007A48 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007A48                 assume cs:_xdata$x
.xdata$x:00007A48                 ;org 7A48h
.xdata$x:00007A48 ; COMDAT (pick associative to section at 4F90)
.xdata$x:00007A48 __unwindtable$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z db 0FFh
.xdata$x:00007A48                                         ; DATA XREF: .xdata$x:00007A60o
.xdata$x:00007A49                 db 0FFh
.xdata$x:00007A4A                 db 0FFh
.xdata$x:00007A4B                 db 0FFh
.xdata$x:00007A4C                 dd offset __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$0
.xdata$x:00007A50                 db    0
.xdata$x:00007A51                 db    0
.xdata$x:00007A52                 db    0
.xdata$x:00007A53                 db    0
.xdata$x:00007A54                 dd offset __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$1
.xdata$x:00007A58 __ehfuncinfo$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z db  22h ; "
.xdata$x:00007A58                                         ; DATA XREF: __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z+11o
.xdata$x:00007A59                 db    5
.xdata$x:00007A5A                 db  93h ; ô
.xdata$x:00007A5B                 db  19h
.xdata$x:00007A5C                 db    2
.xdata$x:00007A5D                 db    0
.xdata$x:00007A5E                 db    0
.xdata$x:00007A5F                 db    0
.xdata$x:00007A60                 dd offset __unwindtable$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.xdata$x:00007A64                 db    0
.xdata$x:00007A65                 db    0
.xdata$x:00007A66                 db    0
.xdata$x:00007A67                 db    0
.xdata$x:00007A68                 db    0
.xdata$x:00007A69                 db    0
.xdata$x:00007A6A                 db    0
.xdata$x:00007A6B                 db    0
.xdata$x:00007A6C                 db    0
.xdata$x:00007A6D                 db    0
.xdata$x:00007A6E                 db    0
.xdata$x:00007A6F                 db    0
.xdata$x:00007A70                 db    0
.xdata$x:00007A71                 db    0
.xdata$x:00007A72                 db    0
.xdata$x:00007A73                 db    0
.xdata$x:00007A74                 db    0
.xdata$x:00007A75                 db    0
.xdata$x:00007A76                 db    0
.xdata$x:00007A77                 db    0
.xdata$x:00007A78                 db    0
.xdata$x:00007A79                 db    0
.xdata$x:00007A7A                 db    0
.xdata$x:00007A7B                 db    0
.xdata$x:00007A7B _xdata$x        ends
.xdata$x:00007A7B
.xdata$x:00007A7C ; ===========================================================================
.xdata$x:00007A7C
.xdata$x:00007A7C ; Segment type: Pure data
.xdata$x:00007A7C ; Segment permissions: Read
.xdata$x:00007A7C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007A7C                 assume cs:_xdata$x
.xdata$x:00007A7C                 ;org 7A7Ch
.xdata$x:00007A7C __unwindtable$?setExtsFilter@FileDialog@@QAEHPB_W0@Z db 0FFh
.xdata$x:00007A7C                                         ; DATA XREF: .xdata$x:00007C54o
.xdata$x:00007A7D                 db 0FFh
.xdata$x:00007A7E                 db 0FFh
.xdata$x:00007A7F                 db 0FFh
.xdata$x:00007A80                 dd offset __unwindfunclet$?setExtsFilter@FileDialog@@QAEHPB_W0@Z$0
.xdata$x:00007A84 __unwindtable$??1FileDialog@@QAE@XZ db 0FFh
.xdata$x:00007A84                                         ; DATA XREF: .xdata$x:00007C9Co
.xdata$x:00007A85                 db 0FFh
.xdata$x:00007A86                 db 0FFh
.xdata$x:00007A87                 db 0FFh
.xdata$x:00007A88                 dd offset __unwindfunclet$??1FileDialog@@QAE@XZ$0
.xdata$x:00007A8C __unwindtable$??0FileDialog@@QAE@PAUHWND__@@PAUHINSTANCE__@@@Z db 0FFh
.xdata$x:00007A8C                                         ; DATA XREF: .xdata$x:00007CC0o
.xdata$x:00007A8D                 db 0FFh
.xdata$x:00007A8E                 db 0FFh
.xdata$x:00007A8F                 db 0FFh
.xdata$x:00007A90                 dd offset __unwindfunclet$??0FileDialog@@QAE@PAUHWND__@@PAUHINSTANCE__@@@Z$0
.xdata$x:00007A94 __unwindtable$?run@FileDialog@@IAGHPAUHWND__@@IIJ@Z db 0FFh
.xdata$x:00007A94                                         ; DATA XREF: .xdata$x:00007BC4o
.xdata$x:00007A95                 db 0FFh
.xdata$x:00007A96                 db 0FFh
.xdata$x:00007A97                 db 0FFh
.xdata$x:00007A98                 dd offset __unwindfunclet$?run@FileDialog@@IAGHPAUHWND__@@IIJ@Z$0
.xdata$x:00007A9C                 db 0FFh
.xdata$x:00007A9D                 db 0FFh
.xdata$x:00007A9E                 db 0FFh
.xdata$x:00007A9F                 db 0FFh
.xdata$x:00007AA0                 dd offset __unwindfunclet$?run@FileDialog@@IAGHPAUHWND__@@IIJ@Z$1
.xdata$x:00007AA4 __unwindtable$?doOpenMultiFilesDlg@FileDialog@@QAEPAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ db 0FFh
.xdata$x:00007AA4                                         ; DATA XREF: .xdata$x:00007C0Co
.xdata$x:00007AA5                 db 0FFh
.xdata$x:00007AA6                 db 0FFh
.xdata$x:00007AA7                 db 0FFh
.xdata$x:00007AA8                 dd offset __unwindfunclet$?doOpenMultiFilesDlg@FileDialog@@QAEPAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ$0
.xdata$x:00007AAC                 db 0FFh
.xdata$x:00007AAD                 db 0FFh
.xdata$x:00007AAE                 db 0FFh
.xdata$x:00007AAF                 db 0FFh
.xdata$x:00007AB0                 dd offset __unwindfunclet$?doOpenMultiFilesDlg@FileDialog@@QAEPAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ$1
.xdata$x:00007AB4 __unwindtable$?setExtFilter@FileDialog@@QAAXPB_W0ZZ db 0FFh
.xdata$x:00007AB4                                         ; DATA XREF: .xdata$x:00007C78o
.xdata$x:00007AB5                 db 0FFh
.xdata$x:00007AB6                 db 0FFh
.xdata$x:00007AB7                 db 0FFh
.xdata$x:00007AB8                 dd offset __unwindfunclet$?setExtFilter@FileDialog@@QAAXPB_W0ZZ$0
.xdata$x:00007ABC                 align 10h
.xdata$x:00007AC0                 dd offset __unwindfunclet$?setExtFilter@FileDialog@@QAAXPB_W0ZZ$1
.xdata$x:00007AC4 __tryblocktable$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ db    0
.xdata$x:00007AC4                                         ; DATA XREF: .xdata$x:00007BF0o
.xdata$x:00007AC5                 db    0
.xdata$x:00007AC6                 db    0
.xdata$x:00007AC7                 db    0
.xdata$x:00007AC8                 db    0
.xdata$x:00007AC9                 db    0
.xdata$x:00007ACA                 db    0
.xdata$x:00007ACB                 db    0
.xdata$x:00007ACC                 db    2
.xdata$x:00007ACD                 db    0
.xdata$x:00007ACE                 db    0
.xdata$x:00007ACF                 db    0
.xdata$x:00007AD0                 db    2
.xdata$x:00007AD1                 db    0
.xdata$x:00007AD2                 db    0
.xdata$x:00007AD3                 db    0
.xdata$x:00007AD4                 dd offset __catchsym$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ$4
.xdata$x:00007AD8 __tryblocktable$?doSaveDlg@FileDialog@@QAEPA_WXZ db    0
.xdata$x:00007AD8                                         ; DATA XREF: .xdata$x:00007C38o
.xdata$x:00007AD9                 db    0
.xdata$x:00007ADA                 db    0
.xdata$x:00007ADB                 db    0
.xdata$x:00007ADC                 db    0
.xdata$x:00007ADD                 db    0
.xdata$x:00007ADE                 db    0
.xdata$x:00007ADF                 db    0
.xdata$x:00007AE0                 db    2
.xdata$x:00007AE1                 db    0
.xdata$x:00007AE2                 db    0
.xdata$x:00007AE3                 db    0
.xdata$x:00007AE4                 db    2
.xdata$x:00007AE5                 db    0
.xdata$x:00007AE6                 db    0
.xdata$x:00007AE7                 db    0
.xdata$x:00007AE8                 dd offset __catchsym$?doSaveDlg@FileDialog@@QAEPA_WXZ$4
.xdata$x:00007AEC __unwindtable$?fileDlgProc@@YGJPAUHWND__@@IIJ@Z db 0FFh
.xdata$x:00007AEC                                         ; DATA XREF: .xdata$x:00007BA0o
.xdata$x:00007AED                 db 0FFh
.xdata$x:00007AEE                 db 0FFh
.xdata$x:00007AEF                 db 0FFh
.xdata$x:00007AF0                 dd offset __unwindfunclet$?fileDlgProc@@YGJPAUHWND__@@IIJ@Z$0
.xdata$x:00007AF4                 align 8
.xdata$x:00007AF8                 dd offset __unwindfunclet$?fileDlgProc@@YGJPAUHWND__@@IIJ@Z$1
.xdata$x:00007AFC                 db 0FFh
.xdata$x:00007AFD                 db 0FFh
.xdata$x:00007AFE                 db 0FFh
.xdata$x:00007AFF                 db 0FFh
.xdata$x:00007B00                 dd offset __unwindfunclet$?fileDlgProc@@YGJPAUHWND__@@IIJ@Z$2
.xdata$x:00007B04 __unwindtable$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ db 0FFh
.xdata$x:00007B04                                         ; DATA XREF: .xdata$x:00007BE8o
.xdata$x:00007B05                 db 0FFh
.xdata$x:00007B06                 db 0FFh
.xdata$x:00007B07                 db 0FFh
.xdata$x:00007B08                 db    0
.xdata$x:00007B09                 db    0
.xdata$x:00007B0A                 db    0
.xdata$x:00007B0B                 db    0
.xdata$x:00007B0C                 db 0FFh
.xdata$x:00007B0D                 db 0FFh
.xdata$x:00007B0E                 db 0FFh
.xdata$x:00007B0F                 db 0FFh
.xdata$x:00007B10                 db    0
.xdata$x:00007B11                 db    0
.xdata$x:00007B12                 db    0
.xdata$x:00007B13                 db    0
.xdata$x:00007B14                 db    1
.xdata$x:00007B15                 db    0
.xdata$x:00007B16                 db    0
.xdata$x:00007B17                 db    0
.xdata$x:00007B18                 dd offset __unwindfunclet$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ$3
.xdata$x:00007B1C __unwindtable$?doSaveDlg@FileDialog@@QAEPA_WXZ db 0FFh
.xdata$x:00007B1C                                         ; DATA XREF: .xdata$x:00007C30o
.xdata$x:00007B1D                 db 0FFh
.xdata$x:00007B1E                 db 0FFh
.xdata$x:00007B1F                 db 0FFh
.xdata$x:00007B20                 db    0
.xdata$x:00007B21                 db    0
.xdata$x:00007B22                 db    0
.xdata$x:00007B23                 db    0
.xdata$x:00007B24                 db 0FFh
.xdata$x:00007B25                 db 0FFh
.xdata$x:00007B26                 db 0FFh
.xdata$x:00007B27                 db 0FFh
.xdata$x:00007B28                 db    0
.xdata$x:00007B29                 db    0
.xdata$x:00007B2A                 db    0
.xdata$x:00007B2B                 db    0
.xdata$x:00007B2C                 db    1
.xdata$x:00007B2D                 db    0
.xdata$x:00007B2E                 db    0
.xdata$x:00007B2F                 db    0
.xdata$x:00007B30                 dd offset __unwindfunclet$?doSaveDlg@FileDialog@@QAEPA_WXZ$3
.xdata$x:00007B34 __catchsym$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ$4 db    0
.xdata$x:00007B34                                         ; DATA XREF: .xdata$x:00007AD4o
.xdata$x:00007B35                 db    0
.xdata$x:00007B36                 db    0
.xdata$x:00007B37                 db    0
.xdata$x:00007B38                 dd offset ??_R0?AVexception@std@@@8 ; std::exception `RTTI Type Descriptor'
.xdata$x:00007B3C                 db 0C8h ; +
.xdata$x:00007B3D                 db 0FDh ; ²
.xdata$x:00007B3E                 db 0FFh
.xdata$x:00007B3F                 db 0FFh
.xdata$x:00007B40                 dd offset __catch$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ$0
.xdata$x:00007B44                 align 10h
.xdata$x:00007B50                 dd offset __catch$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ$1
.xdata$x:00007B54 __catchsym$?doSaveDlg@FileDialog@@QAEPA_WXZ$4 db    0
.xdata$x:00007B54                                         ; DATA XREF: .xdata$x:00007AE8o
.xdata$x:00007B55                 db    0
.xdata$x:00007B56                 db    0
.xdata$x:00007B57                 db    0
.xdata$x:00007B58                 dd offset ??_R0?AVexception@std@@@8 ; std::exception `RTTI Type Descriptor'
.xdata$x:00007B5C                 db 0C8h ; +
.xdata$x:00007B5D                 db 0FDh ; ²
.xdata$x:00007B5E                 db 0FFh
.xdata$x:00007B5F                 db 0FFh
.xdata$x:00007B60                 dd offset __catch$?doSaveDlg@FileDialog@@QAEPA_WXZ$0
.xdata$x:00007B64                 align 10h
.xdata$x:00007B70                 dd offset __catch$?doSaveDlg@FileDialog@@QAEPA_WXZ$1
.xdata$x:00007B74 __ehfuncinfo$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z db  22h ; "
.xdata$x:00007B74                                         ; DATA XREF: __ehhandler$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z+1Eo
.xdata$x:00007B75                 db    5
.xdata$x:00007B76                 db  93h ; ô
.xdata$x:00007B77                 db  19h
.xdata$x:00007B78                 db    5
.xdata$x:00007B79                 db    0
.xdata$x:00007B7A                 db    0
.xdata$x:00007B7B                 db    0
.xdata$x:00007B7C                 dd offset __unwindtable$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z
.xdata$x:00007B80                 db    0
.xdata$x:00007B81                 db    0
.xdata$x:00007B82                 db    0
.xdata$x:00007B83                 db    0
.xdata$x:00007B84                 db    0
.xdata$x:00007B85                 db    0
.xdata$x:00007B86                 db    0
.xdata$x:00007B87                 db    0
.xdata$x:00007B88                 db    0
.xdata$x:00007B89                 db    0
.xdata$x:00007B8A                 db    0
.xdata$x:00007B8B                 db    0
.xdata$x:00007B8C                 db    0
.xdata$x:00007B8D                 db    0
.xdata$x:00007B8E                 db    0
.xdata$x:00007B8F                 db    0
.xdata$x:00007B90                 db    0
.xdata$x:00007B91                 db    0
.xdata$x:00007B92                 db    0
.xdata$x:00007B93                 db    0
.xdata$x:00007B94                 db    0
.xdata$x:00007B95                 db    0
.xdata$x:00007B96                 db    0
.xdata$x:00007B97                 db    0
.xdata$x:00007B98 __ehfuncinfo$?fileDlgProc@@YGJPAUHWND__@@IIJ@Z db  22h ; "
.xdata$x:00007B98                                         ; DATA XREF: __ehhandler$?fileDlgProc@@YGJPAUHWND__@@IIJ@Z+1Eo
.xdata$x:00007B99                 db    5
.xdata$x:00007B9A                 db  93h ; ô
.xdata$x:00007B9B                 db  19h
.xdata$x:00007B9C                 db    3
.xdata$x:00007B9D                 db    0
.xdata$x:00007B9E                 db    0
.xdata$x:00007B9F                 db    0
.xdata$x:00007BA0                 dd offset __unwindtable$?fileDlgProc@@YGJPAUHWND__@@IIJ@Z
.xdata$x:00007BA4                 db    0
.xdata$x:00007BA5                 db    0
.xdata$x:00007BA6                 db    0
.xdata$x:00007BA7                 db    0
.xdata$x:00007BA8                 db    0
.xdata$x:00007BA9                 db    0
.xdata$x:00007BAA                 db    0
.xdata$x:00007BAB                 db    0
.xdata$x:00007BAC                 db    0
.xdata$x:00007BAD                 db    0
.xdata$x:00007BAE                 db    0
.xdata$x:00007BAF                 db    0
.xdata$x:00007BB0                 db    0
.xdata$x:00007BB1                 db    0
.xdata$x:00007BB2                 db    0
.xdata$x:00007BB3                 db    0
.xdata$x:00007BB4                 db    0
.xdata$x:00007BB5                 db    0
.xdata$x:00007BB6                 db    0
.xdata$x:00007BB7                 db    0
.xdata$x:00007BB8                 db    0
.xdata$x:00007BB9                 db    0
.xdata$x:00007BBA                 db    0
.xdata$x:00007BBB                 db    0
.xdata$x:00007BBC __ehfuncinfo$?run@FileDialog@@IAGHPAUHWND__@@IIJ@Z db  22h ; "
.xdata$x:00007BBC                                         ; DATA XREF: __ehhandler$?run@FileDialog@@IAGHPAUHWND__@@IIJ@Z+1Bo
.xdata$x:00007BBD                 db    5
.xdata$x:00007BBE                 db  93h ; ô
.xdata$x:00007BBF                 db  19h
.xdata$x:00007BC0                 db    2
.xdata$x:00007BC1                 db    0
.xdata$x:00007BC2                 db    0
.xdata$x:00007BC3                 db    0
.xdata$x:00007BC4                 dd offset __unwindtable$?run@FileDialog@@IAGHPAUHWND__@@IIJ@Z
.xdata$x:00007BC8                 align 20h
.xdata$x:00007BE0 __ehfuncinfo$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ db  22h ; "
.xdata$x:00007BE0                                         ; DATA XREF: __ehhandler$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ+1Eo
.xdata$x:00007BE1                 db    5
.xdata$x:00007BE2                 db  93h ; ô
.xdata$x:00007BE3                 db  19h
.xdata$x:00007BE4                 db    3
.xdata$x:00007BE5                 db    0
.xdata$x:00007BE6                 db    0
.xdata$x:00007BE7                 db    0
.xdata$x:00007BE8                 dd offset __unwindtable$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ
.xdata$x:00007BEC                 db    1
.xdata$x:00007BED                 db    0
.xdata$x:00007BEE                 db    0
.xdata$x:00007BEF                 db    0
.xdata$x:00007BF0                 dd offset __tryblocktable$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ
.xdata$x:00007BF4                 db    0
.xdata$x:00007BF5                 db    0
.xdata$x:00007BF6                 db    0
.xdata$x:00007BF7                 db    0
.xdata$x:00007BF8                 db    0
.xdata$x:00007BF9                 db    0
.xdata$x:00007BFA                 db    0
.xdata$x:00007BFB                 db    0
.xdata$x:00007BFC                 db    0
.xdata$x:00007BFD                 db    0
.xdata$x:00007BFE                 db    0
.xdata$x:00007BFF                 db    0
.xdata$x:00007C00                 db    0
.xdata$x:00007C01                 db    0
.xdata$x:00007C02                 db    0
.xdata$x:00007C03                 db    0
.xdata$x:00007C04 __ehfuncinfo$?doOpenMultiFilesDlg@FileDialog@@QAEPAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ db  22h ; "
.xdata$x:00007C04                                         ; DATA XREF: __ehhandler$?doOpenMultiFilesDlg@FileDialog@@QAEPAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ+1Eo
.xdata$x:00007C05                 db    5
.xdata$x:00007C06                 db  93h ; ô
.xdata$x:00007C07                 db  19h
.xdata$x:00007C08                 db    2
.xdata$x:00007C09                 db    0
.xdata$x:00007C0A                 db    0
.xdata$x:00007C0B                 db    0
.xdata$x:00007C0C                 dd offset __unwindtable$?doOpenMultiFilesDlg@FileDialog@@QAEPAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@XZ
.xdata$x:00007C10                 db    0
.xdata$x:00007C11                 db    0
.xdata$x:00007C12                 db    0
.xdata$x:00007C13                 db    0
.xdata$x:00007C14                 db    0
.xdata$x:00007C15                 db    0
.xdata$x:00007C16                 db    0
.xdata$x:00007C17                 db    0
.xdata$x:00007C18                 db    0
.xdata$x:00007C19                 db    0
.xdata$x:00007C1A                 db    0
.xdata$x:00007C1B                 db    0
.xdata$x:00007C1C                 db    0
.xdata$x:00007C1D                 db    0
.xdata$x:00007C1E                 db    0
.xdata$x:00007C1F                 db    0
.xdata$x:00007C20                 db    0
.xdata$x:00007C21                 db    0
.xdata$x:00007C22                 db    0
.xdata$x:00007C23                 db    0
.xdata$x:00007C24                 db    0
.xdata$x:00007C25                 db    0
.xdata$x:00007C26                 db    0
.xdata$x:00007C27                 db    0
.xdata$x:00007C28 __ehfuncinfo$?doSaveDlg@FileDialog@@QAEPA_WXZ db  22h ; "
.xdata$x:00007C28                                         ; DATA XREF: __ehhandler$?doSaveDlg@FileDialog@@QAEPA_WXZ+1Eo
.xdata$x:00007C29                 db    5
.xdata$x:00007C2A                 db  93h ; ô
.xdata$x:00007C2B                 db  19h
.xdata$x:00007C2C                 db    3
.xdata$x:00007C2D                 db    0
.xdata$x:00007C2E                 db    0
.xdata$x:00007C2F                 db    0
.xdata$x:00007C30                 dd offset __unwindtable$?doSaveDlg@FileDialog@@QAEPA_WXZ
.xdata$x:00007C34                 db    1
.xdata$x:00007C35                 db    0
.xdata$x:00007C36                 db    0
.xdata$x:00007C37                 db    0
.xdata$x:00007C38                 dd offset __tryblocktable$?doSaveDlg@FileDialog@@QAEPA_WXZ
.xdata$x:00007C3C                 db    0
.xdata$x:00007C3D                 db    0
.xdata$x:00007C3E                 db    0
.xdata$x:00007C3F                 db    0
.xdata$x:00007C40                 db    0
.xdata$x:00007C41                 db    0
.xdata$x:00007C42                 db    0
.xdata$x:00007C43                 db    0
.xdata$x:00007C44                 db    0
.xdata$x:00007C45                 db    0
.xdata$x:00007C46                 db    0
.xdata$x:00007C47                 db    0
.xdata$x:00007C48                 db    0
.xdata$x:00007C49                 db    0
.xdata$x:00007C4A                 db    0
.xdata$x:00007C4B                 db    0
.xdata$x:00007C4C __ehfuncinfo$?setExtsFilter@FileDialog@@QAEHPB_W0@Z db  22h ; "
.xdata$x:00007C4C                                         ; DATA XREF: __ehhandler$?setExtsFilter@FileDialog@@QAEHPB_W0@Z+1Bo
.xdata$x:00007C4D                 db    5
.xdata$x:00007C4E                 db  93h ; ô
.xdata$x:00007C4F                 db  19h
.xdata$x:00007C50                 db    1
.xdata$x:00007C51                 db    0
.xdata$x:00007C52                 db    0
.xdata$x:00007C53                 db    0
.xdata$x:00007C54                 dd offset __unwindtable$?setExtsFilter@FileDialog@@QAEHPB_W0@Z
.xdata$x:00007C58                 db    0
.xdata$x:00007C59                 db    0
.xdata$x:00007C5A                 db    0
.xdata$x:00007C5B                 db    0
.xdata$x:00007C5C                 db    0
.xdata$x:00007C5D                 db    0
.xdata$x:00007C5E                 db    0
.xdata$x:00007C5F                 db    0
.xdata$x:00007C60                 db    0
.xdata$x:00007C61                 db    0
.xdata$x:00007C62                 db    0
.xdata$x:00007C63                 db    0
.xdata$x:00007C64                 db    0
.xdata$x:00007C65                 db    0
.xdata$x:00007C66                 db    0
.xdata$x:00007C67                 db    0
.xdata$x:00007C68                 db    0
.xdata$x:00007C69                 db    0
.xdata$x:00007C6A                 db    0
.xdata$x:00007C6B                 db    0
.xdata$x:00007C6C                 db    0
.xdata$x:00007C6D                 db    0
.xdata$x:00007C6E                 db    0
.xdata$x:00007C6F                 db    0
.xdata$x:00007C70 __ehfuncinfo$?setExtFilter@FileDialog@@QAAXPB_W0ZZ db  22h ; "
.xdata$x:00007C70                                         ; DATA XREF: __ehhandler$?setExtFilter@FileDialog@@QAAXPB_W0ZZ+1Bo
.xdata$x:00007C71                 db    5
.xdata$x:00007C72                 db  93h ; ô
.xdata$x:00007C73                 db  19h
.xdata$x:00007C74                 db    2
.xdata$x:00007C75                 db    0
.xdata$x:00007C76                 db    0
.xdata$x:00007C77                 db    0
.xdata$x:00007C78                 dd offset __unwindtable$?setExtFilter@FileDialog@@QAAXPB_W0ZZ
.xdata$x:00007C7C                 db    0
.xdata$x:00007C7D                 db    0
.xdata$x:00007C7E                 db    0
.xdata$x:00007C7F                 db    0
.xdata$x:00007C80                 db    0
.xdata$x:00007C81                 db    0
.xdata$x:00007C82                 db    0
.xdata$x:00007C83                 db    0
.xdata$x:00007C84                 db    0
.xdata$x:00007C85                 db    0
.xdata$x:00007C86                 db    0
.xdata$x:00007C87                 db    0
.xdata$x:00007C88                 db    0
.xdata$x:00007C89                 db    0
.xdata$x:00007C8A                 db    0
.xdata$x:00007C8B                 db    0
.xdata$x:00007C8C                 db    0
.xdata$x:00007C8D                 db    0
.xdata$x:00007C8E                 db    0
.xdata$x:00007C8F                 db    0
.xdata$x:00007C90                 db    0
.xdata$x:00007C91                 db    0
.xdata$x:00007C92                 db    0
.xdata$x:00007C93                 db    0
.xdata$x:00007C94 __ehfuncinfo$??1FileDialog@@QAE@XZ db  22h ; "
.xdata$x:00007C94                                         ; DATA XREF: __ehhandler$??1FileDialog@@QAE@XZ+11o
.xdata$x:00007C95                 db    5
.xdata$x:00007C96                 db  93h ; ô
.xdata$x:00007C97                 db  19h
.xdata$x:00007C98                 db    1
.xdata$x:00007C99                 db    0
.xdata$x:00007C9A                 db    0
.xdata$x:00007C9B                 db    0
.xdata$x:00007C9C                 dd offset __unwindtable$??1FileDialog@@QAE@XZ
.xdata$x:00007CA0                 db    0
.xdata$x:00007CA1                 db    0
.xdata$x:00007CA2                 db    0
.xdata$x:00007CA3                 db    0
.xdata$x:00007CA4                 db    0
.xdata$x:00007CA5                 db    0
.xdata$x:00007CA6                 db    0
.xdata$x:00007CA7                 db    0
.xdata$x:00007CA8                 db    0
.xdata$x:00007CA9                 db    0
.xdata$x:00007CAA                 db    0
.xdata$x:00007CAB                 db    0
.xdata$x:00007CAC                 db    0
.xdata$x:00007CAD                 db    0
.xdata$x:00007CAE                 db    0
.xdata$x:00007CAF                 db    0
.xdata$x:00007CB0                 db    0
.xdata$x:00007CB1                 db    0
.xdata$x:00007CB2                 db    0
.xdata$x:00007CB3                 db    0
.xdata$x:00007CB4                 db    0
.xdata$x:00007CB5                 db    0
.xdata$x:00007CB6                 db    0
.xdata$x:00007CB7                 db    0
.xdata$x:00007CB8 __ehfuncinfo$??0FileDialog@@QAE@PAUHWND__@@PAUHINSTANCE__@@@Z db  22h ; "
.xdata$x:00007CB8                                         ; DATA XREF: __ehhandler$??0FileDialog@@QAE@PAUHWND__@@PAUHINSTANCE__@@@Z+11o
.xdata$x:00007CB9                 db    5
.xdata$x:00007CBA                 db  93h ; ô
.xdata$x:00007CBB                 db  19h
.xdata$x:00007CBC                 db    1
.xdata$x:00007CBD                 db    0
.xdata$x:00007CBE                 db    0
.xdata$x:00007CBF                 db    0
.xdata$x:00007CC0                 dd offset __unwindtable$??0FileDialog@@QAE@PAUHWND__@@PAUHINSTANCE__@@@Z
.xdata$x:00007CC4                 db    0
.xdata$x:00007CC5                 db    0
.xdata$x:00007CC6                 db    0
.xdata$x:00007CC7                 db    0
.xdata$x:00007CC8                 db    0
.xdata$x:00007CC9                 db    0
.xdata$x:00007CCA                 db    0
.xdata$x:00007CCB                 db    0
.xdata$x:00007CCC                 db    0
.xdata$x:00007CCD                 db    0
.xdata$x:00007CCE                 db    0
.xdata$x:00007CCF                 db    0
.xdata$x:00007CD0                 db    0
.xdata$x:00007CD1                 db    0
.xdata$x:00007CD2                 db    0
.xdata$x:00007CD3                 db    0
.xdata$x:00007CD4                 db    0
.xdata$x:00007CD5                 db    0
.xdata$x:00007CD6                 db    0
.xdata$x:00007CD7                 db    0
.xdata$x:00007CD8                 db    0
.xdata$x:00007CD9                 db    0
.xdata$x:00007CDA                 db    0
.xdata$x:00007CDB                 db    0
.xdata$x:00007CDC __ehfuncinfo$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z db  22h ; "
.xdata$x:00007CDC                                         ; DATA XREF: __ehhandler$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z+1Bo
.xdata$x:00007CDD                 db    5
.xdata$x:00007CDE                 db  93h ; ô
.xdata$x:00007CDF                 db  19h
.xdata$x:00007CE0                 db    5
.xdata$x:00007CE1                 db    0
.xdata$x:00007CE2                 db    0
.xdata$x:00007CE3                 db    0
.xdata$x:00007CE4                 dd offset __unwindtable$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z
.xdata$x:00007CE8                 align 20h
.xdata$x:00007D00 __unwindtable$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z db 0FFh
.xdata$x:00007D00                                         ; DATA XREF: .xdata$x:00007B7Co
.xdata$x:00007D01                 db 0FFh
.xdata$x:00007D02                 db 0FFh
.xdata$x:00007D03                 db 0FFh
.xdata$x:00007D04                 dd offset __unwindfunclet$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z$4
.xdata$x:00007D08                 db    0
.xdata$x:00007D09                 db    0
.xdata$x:00007D0A                 db    0
.xdata$x:00007D0B                 db    0
.xdata$x:00007D0C                 dd offset __unwindfunclet$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z$0
.xdata$x:00007D10                 db    1
.xdata$x:00007D11                 db    0
.xdata$x:00007D12                 db    0
.xdata$x:00007D13                 db    0
.xdata$x:00007D14                 dd offset __unwindfunclet$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z$1
.xdata$x:00007D18                 db    0
.xdata$x:00007D19                 db    0
.xdata$x:00007D1A                 db    0
.xdata$x:00007D1B                 db    0
.xdata$x:00007D1C                 dd offset __unwindfunclet$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z$2
.xdata$x:00007D20                 db    0
.xdata$x:00007D21                 db    0
.xdata$x:00007D22                 db    0
.xdata$x:00007D23                 db    0
.xdata$x:00007D24                 dd offset __unwindfunclet$?addExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@0@Z$3
.xdata$x:00007D28 __unwindtable$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z db 0FFh
.xdata$x:00007D28                                         ; DATA XREF: .xdata$x:00007CE4o
.xdata$x:00007D29                 db 0FFh
.xdata$x:00007D2A                 db 0FFh
.xdata$x:00007D2B                 db 0FFh
.xdata$x:00007D2C                 dd offset __unwindfunclet$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z$2
.xdata$x:00007D30                 db    0
.xdata$x:00007D31                 db    0
.xdata$x:00007D32                 db    0
.xdata$x:00007D33                 db    0
.xdata$x:00007D34                 dd offset __unwindfunclet$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z$0
.xdata$x:00007D38                 db    1
.xdata$x:00007D39                 db    0
.xdata$x:00007D3A                 db    0
.xdata$x:00007D3B                 db    0
.xdata$x:00007D3C                 dd offset __unwindfunclet$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z$1
.xdata$x:00007D40                 db    2
.xdata$x:00007D41                 db    0
.xdata$x:00007D42                 db    0
.xdata$x:00007D43                 db    0
.xdata$x:00007D44                 dd offset __unwindfunclet$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z$3
.xdata$x:00007D48                 db    3
.xdata$x:00007D49                 db    0
.xdata$x:00007D4A                 db    0
.xdata$x:00007D4B                 db    0
.xdata$x:00007D4C                 dd offset __unwindfunclet$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z$4
.xdata$x:00007D4C _xdata$x        ends
.xdata$x:00007D4C
.xdata$x:00007D50 ; ===========================================================================
.xdata$x:00007D50
.xdata$x:00007D50 ; Segment type: Pure data
.xdata$x:00007D50 ; Segment permissions: Read
.xdata$x:00007D50 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007D50                 assume cs:_xdata$x
.xdata$x:00007D50                 ;org 7D50h
.xdata$x:00007D50 ; COMDAT (pick associative to section at 2BB8)
.xdata$x:00007D50 __unwindtable$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00007D50                                         ; DATA XREF: .xdata$x:00007D60o
.xdata$x:00007D51                 db 0FFh
.xdata$x:00007D52                 db 0FFh
.xdata$x:00007D53                 db 0FFh
.xdata$x:00007D54                 dd offset __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00007D58 __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00007D58                                         ; DATA XREF: __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00007D59                 db    5
.xdata$x:00007D5A                 db  93h ; ô
.xdata$x:00007D5B                 db  19h
.xdata$x:00007D5C                 db    1
.xdata$x:00007D5D                 db    0
.xdata$x:00007D5E                 db    0
.xdata$x:00007D5F                 db    0
.xdata$x:00007D60                 dd offset __unwindtable$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.xdata$x:00007D64                 db    0
.xdata$x:00007D65                 db    0
.xdata$x:00007D66                 db    0
.xdata$x:00007D67                 db    0
.xdata$x:00007D68                 db    0
.xdata$x:00007D69                 db    0
.xdata$x:00007D6A                 db    0
.xdata$x:00007D6B                 db    0
.xdata$x:00007D6C                 db    0
.xdata$x:00007D6D                 db    0
.xdata$x:00007D6E                 db    0
.xdata$x:00007D6F                 db    0
.xdata$x:00007D70                 db    0
.xdata$x:00007D71                 db    0
.xdata$x:00007D72                 db    0
.xdata$x:00007D73                 db    0
.xdata$x:00007D74                 db    0
.xdata$x:00007D75                 db    0
.xdata$x:00007D76                 db    0
.xdata$x:00007D77                 db    0
.xdata$x:00007D78                 db    0
.xdata$x:00007D79                 db    0
.xdata$x:00007D7A                 db    0
.xdata$x:00007D7B                 db    0
.xdata$x:00007D7B _xdata$x        ends
.xdata$x:00007D7B
.xdata$x:00007D7C ; ===========================================================================
.xdata$x:00007D7C
.xdata$x:00007D7C ; Segment type: Pure data
.xdata$x:00007D7C ; Segment permissions: Read
.xdata$x:00007D7C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007D7C                 assume cs:_xdata$x
.xdata$x:00007D7C                 ;org 7D7Ch
.xdata$x:00007D7C ; COMDAT (pick associative to section at 372C)
.xdata$x:00007D7C __unwindtable$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00007D7C                                         ; DATA XREF: .xdata$x:00007D8Co
.xdata$x:00007D7D                 db 0FFh
.xdata$x:00007D7E                 db 0FFh
.xdata$x:00007D7F                 db 0FFh
.xdata$x:00007D80                 dd offset __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00007D84 __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00007D84                                         ; DATA XREF: __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00007D85                 db    5
.xdata$x:00007D86                 db  93h ; ô
.xdata$x:00007D87                 db  19h
.xdata$x:00007D88                 db    1
.xdata$x:00007D89                 db    0
.xdata$x:00007D8A                 db    0
.xdata$x:00007D8B                 db    0
.xdata$x:00007D8C                 dd offset __unwindtable$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.xdata$x:00007D90                 db    0
.xdata$x:00007D91                 db    0
.xdata$x:00007D92                 db    0
.xdata$x:00007D93                 db    0
.xdata$x:00007D94                 db    0
.xdata$x:00007D95                 db    0
.xdata$x:00007D96                 db    0
.xdata$x:00007D97                 db    0
.xdata$x:00007D98                 db    0
.xdata$x:00007D99                 db    0
.xdata$x:00007D9A                 db    0
.xdata$x:00007D9B                 db    0
.xdata$x:00007D9C                 db    0
.xdata$x:00007D9D                 db    0
.xdata$x:00007D9E                 db    0
.xdata$x:00007D9F                 db    0
.xdata$x:00007DA0                 db    0
.xdata$x:00007DA1                 db    0
.xdata$x:00007DA2                 db    0
.xdata$x:00007DA3                 db    0
.xdata$x:00007DA4                 db    0
.xdata$x:00007DA5                 db    0
.xdata$x:00007DA6                 db    0
.xdata$x:00007DA7                 db    0
.xdata$x:00007DA7 _xdata$x        ends
.xdata$x:00007DA7
.xdata$x:00007DA8 ; ===========================================================================
.xdata$x:00007DA8
.xdata$x:00007DA8 ; Segment type: Pure data
.xdata$x:00007DA8 ; Segment permissions: Read
.xdata$x:00007DA8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007DA8                 assume cs:_xdata$x
.xdata$x:00007DA8                 ;org 7DA8h
.xdata$x:00007DA8 ; COMDAT (pick associative to section at 2B3C)
.xdata$x:00007DA8 __unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z db 0FFh
.xdata$x:00007DA8                                         ; DATA XREF: .xdata$x:00007DB8o
.xdata$x:00007DA9                 db 0FFh
.xdata$x:00007DAA                 db 0FFh
.xdata$x:00007DAB                 db 0FFh
.xdata$x:00007DAC                 dd offset __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0
.xdata$x:00007DB0 __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z db  22h ; "
.xdata$x:00007DB0                                         ; DATA XREF: __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z+11o
.xdata$x:00007DB1                 db    5
.xdata$x:00007DB2                 db  93h ; ô
.xdata$x:00007DB3                 db  19h
.xdata$x:00007DB4                 db    1
.xdata$x:00007DB5                 db    0
.xdata$x:00007DB6                 db    0
.xdata$x:00007DB7                 db    0
.xdata$x:00007DB8                 dd offset __unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.xdata$x:00007DBC                 db    0
.xdata$x:00007DBD                 db    0
.xdata$x:00007DBE                 db    0
.xdata$x:00007DBF                 db    0
.xdata$x:00007DC0                 db    0
.xdata$x:00007DC1                 db    0
.xdata$x:00007DC2                 db    0
.xdata$x:00007DC3                 db    0
.xdata$x:00007DC4                 db    0
.xdata$x:00007DC5                 db    0
.xdata$x:00007DC6                 db    0
.xdata$x:00007DC7                 db    0
.xdata$x:00007DC8                 db    0
.xdata$x:00007DC9                 db    0
.xdata$x:00007DCA                 db    0
.xdata$x:00007DCB                 db    0
.xdata$x:00007DCC                 db    0
.xdata$x:00007DCD                 db    0
.xdata$x:00007DCE                 db    0
.xdata$x:00007DCF                 db    0
.xdata$x:00007DD0                 db    0
.xdata$x:00007DD1                 db    0
.xdata$x:00007DD2                 db    0
.xdata$x:00007DD3                 db    0
.xdata$x:00007DD3 _xdata$x        ends
.xdata$x:00007DD3
.xdata$x:00007DD4 ; ===========================================================================
.xdata$x:00007DD4
.xdata$x:00007DD4 ; Segment type: Pure data
.xdata$x:00007DD4 ; Segment permissions: Read
.xdata$x:00007DD4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007DD4                 assume cs:_xdata$x
.xdata$x:00007DD4                 ;org 7DD4h
.xdata$x:00007DD4 ; COMDAT (pick associative to section at 36B4)
.xdata$x:00007DD4 __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00007DD4                                         ; DATA XREF: .xdata$x:00007DE4o
.xdata$x:00007DD5                 db 0FFh
.xdata$x:00007DD6                 db 0FFh
.xdata$x:00007DD7                 db 0FFh
.xdata$x:00007DD8                 dd offset __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ$0
.xdata$x:00007DDC __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00007DDC                                         ; DATA XREF: __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ+11o
.xdata$x:00007DDD                 db    5
.xdata$x:00007DDE                 db  93h ; ô
.xdata$x:00007DDF                 db  19h
.xdata$x:00007DE0                 db    1
.xdata$x:00007DE1                 db    0
.xdata$x:00007DE2                 db    0
.xdata$x:00007DE3                 db    0
.xdata$x:00007DE4                 dd offset __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.xdata$x:00007DE8                 align 20h
.xdata$x:00007DE8 _xdata$x        ends
.xdata$x:00007DE8
.xdata$x:00007E00 ; ===========================================================================
.xdata$x:00007E00
.xdata$x:00007E00 ; Segment type: Pure data
.xdata$x:00007E00 ; Segment permissions: Read
.xdata$x:00007E00 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007E00                 assume cs:_xdata$x
.xdata$x:00007E00                 ;org 7E00h
.xdata$x:00007E00 ; COMDAT (pick associative to section at 30BC)
.xdata$x:00007E00 __unwindtable$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ db 0FFh
.xdata$x:00007E00                                         ; DATA XREF: .xdata$x:00007E10o
.xdata$x:00007E01                 db 0FFh
.xdata$x:00007E02                 db 0FFh
.xdata$x:00007E03                 db 0FFh
.xdata$x:00007E04                 dd offset __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0
.xdata$x:00007E08 __ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00007E08                                         ; DATA XREF: __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ+11o
.xdata$x:00007E09                 db    5
.xdata$x:00007E0A                 db  93h ; ô
.xdata$x:00007E0B                 db  19h
.xdata$x:00007E0C                 db    1
.xdata$x:00007E0D                 db    0
.xdata$x:00007E0E                 db    0
.xdata$x:00007E0F                 db    0
.xdata$x:00007E10                 dd offset __unwindtable$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.xdata$x:00007E14                 db    0
.xdata$x:00007E15                 db    0
.xdata$x:00007E16                 db    0
.xdata$x:00007E17                 db    0
.xdata$x:00007E18                 db    0
.xdata$x:00007E19                 db    0
.xdata$x:00007E1A                 db    0
.xdata$x:00007E1B                 db    0
.xdata$x:00007E1C                 db    0
.xdata$x:00007E1D                 db    0
.xdata$x:00007E1E                 db    0
.xdata$x:00007E1F                 db    0
.xdata$x:00007E20                 db    0
.xdata$x:00007E21                 db    0
.xdata$x:00007E22                 db    0
.xdata$x:00007E23                 db    0
.xdata$x:00007E24                 db    0
.xdata$x:00007E25                 db    0
.xdata$x:00007E26                 db    0
.xdata$x:00007E27                 db    0
.xdata$x:00007E28                 db    0
.xdata$x:00007E29                 db    0
.xdata$x:00007E2A                 db    0
.xdata$x:00007E2B                 db    0
.xdata$x:00007E2B _xdata$x        ends
.xdata$x:00007E2B
.xdata$x:00007E2C ; ===========================================================================
.xdata$x:00007E2C
.xdata$x:00007E2C ; Segment type: Pure data
.xdata$x:00007E2C ; Segment permissions: Read
.xdata$x:00007E2C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007E2C                 assume cs:_xdata$x
.xdata$x:00007E2C                 ;org 7E2Ch
.xdata$x:00007E2C ; COMDAT (pick associative to section at 3894)
.xdata$x:00007E2C __unwindtable$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ db 0FFh
.xdata$x:00007E2C                                         ; DATA XREF: .xdata$x:00007E3Co
.xdata$x:00007E2D                 db 0FFh
.xdata$x:00007E2E                 db 0FFh
.xdata$x:00007E2F                 db 0FFh
.xdata$x:00007E30                 dd offset __unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0
.xdata$x:00007E34 __ehfuncinfo$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00007E34                                         ; DATA XREF: __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ+11o
.xdata$x:00007E35                 db    5
.xdata$x:00007E36                 db  93h ; ô
.xdata$x:00007E37                 db  19h
.xdata$x:00007E38                 db    1
.xdata$x:00007E39                 db    0
.xdata$x:00007E3A                 db    0
.xdata$x:00007E3B                 db    0
.xdata$x:00007E3C                 dd offset __unwindtable$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.xdata$x:00007E40                 db    0
.xdata$x:00007E41                 db    0
.xdata$x:00007E42                 db    0
.xdata$x:00007E43                 db    0
.xdata$x:00007E44                 db    0
.xdata$x:00007E45                 db    0
.xdata$x:00007E46                 db    0
.xdata$x:00007E47                 db    0
.xdata$x:00007E48                 db    0
.xdata$x:00007E49                 db    0
.xdata$x:00007E4A                 db    0
.xdata$x:00007E4B                 db    0
.xdata$x:00007E4C                 db    0
.xdata$x:00007E4D                 db    0
.xdata$x:00007E4E                 db    0
.xdata$x:00007E4F                 db    0
.xdata$x:00007E50                 db    0
.xdata$x:00007E51                 db    0
.xdata$x:00007E52                 db    0
.xdata$x:00007E53                 db    0
.xdata$x:00007E54                 db    0
.xdata$x:00007E55                 db    0
.xdata$x:00007E56                 db    0
.xdata$x:00007E57                 db    0
.xdata$x:00007E57 _xdata$x        ends
.xdata$x:00007E57
.xdata$x:00007E58 ; ===========================================================================
.xdata$x:00007E58
.xdata$x:00007E58 ; Segment type: Pure data
.xdata$x:00007E58 ; Segment permissions: Read
.xdata$x:00007E58 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007E58                 assume cs:_xdata$x
.xdata$x:00007E58                 ;org 7E58h
.xdata$x:00007E58 ; COMDAT (pick associative to section at 503C)
.xdata$x:00007E58 __catchsym$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$2 db    0
.xdata$x:00007E58                                         ; DATA XREF: .xdata$x:00007E88o
.xdata$x:00007E59                 db    0
.xdata$x:00007E5A                 db    0
.xdata$x:00007E5B                 db    0
.xdata$x:00007E5C                 db    0
.xdata$x:00007E5D                 db    0
.xdata$x:00007E5E                 db    0
.xdata$x:00007E5F                 db    0
.xdata$x:00007E60                 db    0
.xdata$x:00007E61                 db    0
.xdata$x:00007E62                 db    0
.xdata$x:00007E63                 db    0
.xdata$x:00007E64                 dd offset __catch$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$0
.xdata$x:00007E68 __unwindtable$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z db 0FFh
.xdata$x:00007E68                                         ; DATA XREF: .xdata$x:00007E94o
.xdata$x:00007E69                 db 0FFh
.xdata$x:00007E6A                 db 0FFh
.xdata$x:00007E6B                 db 0FFh
.xdata$x:00007E6C                 db    0
.xdata$x:00007E6D                 db    0
.xdata$x:00007E6E                 db    0
.xdata$x:00007E6F                 db    0
.xdata$x:00007E70                 db 0FFh
.xdata$x:00007E71                 db 0FFh
.xdata$x:00007E72                 db 0FFh
.xdata$x:00007E73                 db 0FFh
.xdata$x:00007E74                 db    0
.xdata$x:00007E75                 db    0
.xdata$x:00007E76                 db    0
.xdata$x:00007E77                 db    0
.xdata$x:00007E78 __tryblocktable$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z db    0
.xdata$x:00007E78                                         ; DATA XREF: .xdata$x:00007E9Co
.xdata$x:00007E79                 db    0
.xdata$x:00007E7A                 db    0
.xdata$x:00007E7B                 db    0
.xdata$x:00007E7C                 db    0
.xdata$x:00007E7D                 db    0
.xdata$x:00007E7E                 db    0
.xdata$x:00007E7F                 db    0
.xdata$x:00007E80                 db    1
.xdata$x:00007E81                 db    0
.xdata$x:00007E82                 db    0
.xdata$x:00007E83                 db    0
.xdata$x:00007E84                 db    1
.xdata$x:00007E85                 db    0
.xdata$x:00007E86                 db    0
.xdata$x:00007E87                 db    0
.xdata$x:00007E88                 dd offset __catchsym$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$2
.xdata$x:00007E8C __ehfuncinfo$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z db  22h ; "
.xdata$x:00007E8C                                         ; DATA XREF: __ehhandler$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z+11o
.xdata$x:00007E8D                 db    5
.xdata$x:00007E8E                 db  93h ; ô
.xdata$x:00007E8F                 db  19h
.xdata$x:00007E90                 db    2
.xdata$x:00007E91                 db    0
.xdata$x:00007E92                 db    0
.xdata$x:00007E93                 db    0
.xdata$x:00007E94                 dd offset __unwindtable$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.xdata$x:00007E98                 db    1
.xdata$x:00007E99                 db    0
.xdata$x:00007E9A                 db    0
.xdata$x:00007E9B                 db    0
.xdata$x:00007E9C                 dd offset __tryblocktable$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.xdata$x:00007EA0                 db    0
.xdata$x:00007EA1                 db    0
.xdata$x:00007EA2                 db    0
.xdata$x:00007EA3                 db    0
.xdata$x:00007EA4                 db    0
.xdata$x:00007EA5                 db    0
.xdata$x:00007EA6                 db    0
.xdata$x:00007EA7                 db    0
.xdata$x:00007EA8                 db    0
.xdata$x:00007EA9                 db    0
.xdata$x:00007EAA                 db    0
.xdata$x:00007EAB                 db    0
.xdata$x:00007EAC                 db    0
.xdata$x:00007EAD                 db    0
.xdata$x:00007EAE                 db    0
.xdata$x:00007EAF                 db    0
.xdata$x:00007EAF _xdata$x        ends
.xdata$x:00007EAF
.xdata$x:00007EB0 ; ===========================================================================
.xdata$x:00007EB0
.xdata$x:00007EB0 ; Segment type: Pure data
.xdata$x:00007EB0 ; Segment permissions: Read
.xdata$x:00007EB0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007EB0                 assume cs:_xdata$x
.xdata$x:00007EB0                 ;org 7EB0h
.xdata$x:00007EB0 ; COMDAT (pick associative to section at 4EB4)
.xdata$x:00007EB0 __unwindtable$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z db 0FFh
.xdata$x:00007EB0                                         ; DATA XREF: .xdata$x:00007EC0o
.xdata$x:00007EB1                 db 0FFh
.xdata$x:00007EB2                 db 0FFh
.xdata$x:00007EB3                 db 0FFh
.xdata$x:00007EB4                 dd offset __unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z$0
.xdata$x:00007EB8 __ehfuncinfo$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z db  22h ; "
.xdata$x:00007EB8                                         ; DATA XREF: __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z+11o
.xdata$x:00007EB9                 db    5
.xdata$x:00007EBA                 db  93h ; ô
.xdata$x:00007EBB                 db  19h
.xdata$x:00007EBC                 db    1
.xdata$x:00007EBD                 db    0
.xdata$x:00007EBE                 db    0
.xdata$x:00007EBF                 db    0
.xdata$x:00007EC0                 dd offset __unwindtable$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.xdata$x:00007EC4                 db    0
.xdata$x:00007EC5                 db    0
.xdata$x:00007EC6                 db    0
.xdata$x:00007EC7                 db    0
.xdata$x:00007EC8                 db    0
.xdata$x:00007EC9                 db    0
.xdata$x:00007ECA                 db    0
.xdata$x:00007ECB                 db    0
.xdata$x:00007ECC                 db    0
.xdata$x:00007ECD                 db    0
.xdata$x:00007ECE                 db    0
.xdata$x:00007ECF                 db    0
.xdata$x:00007ED0                 db    0
.xdata$x:00007ED1                 db    0
.xdata$x:00007ED2                 db    0
.xdata$x:00007ED3                 db    0
.xdata$x:00007ED4                 db    0
.xdata$x:00007ED5                 db    0
.xdata$x:00007ED6                 db    0
.xdata$x:00007ED7                 db    0
.xdata$x:00007ED8                 db    0
.xdata$x:00007ED9                 db    0
.xdata$x:00007EDA                 db    0
.xdata$x:00007EDB                 db    0
.xdata$x:00007EDB _xdata$x        ends
.xdata$x:00007EDB
.xdata$x:00007EDC ; ===========================================================================
.xdata$x:00007EDC
.xdata$x:00007EDC ; Segment type: Pure data
.xdata$x:00007EDC ; Segment permissions: Read
.xdata$x:00007EDC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007EDC                 assume cs:_xdata$x
.xdata$x:00007EDC                 ;org 7EDCh
.xdata$x:00007EDC ; COMDAT (pick associative to section at 26BC)
.xdata$x:00007EDC __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:00007EDC                                         ; DATA XREF: .xdata$x:00007EECo
.xdata$x:00007EDD                 db 0FFh
.xdata$x:00007EDE                 db 0FFh
.xdata$x:00007EDF                 db 0FFh
.xdata$x:00007EE0                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:00007EE4 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00007EE4                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:00007EE5                 db    5
.xdata$x:00007EE6                 db  93h ; ô
.xdata$x:00007EE7                 db  19h
.xdata$x:00007EE8                 db    1
.xdata$x:00007EE9                 db    0
.xdata$x:00007EEA                 db    0
.xdata$x:00007EEB                 db    0
.xdata$x:00007EEC                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:00007EF0                 db    0
.xdata$x:00007EF1                 db    0
.xdata$x:00007EF2                 db    0
.xdata$x:00007EF3                 db    0
.xdata$x:00007EF4                 db    0
.xdata$x:00007EF5                 db    0
.xdata$x:00007EF6                 db    0
.xdata$x:00007EF7                 db    0
.xdata$x:00007EF8                 db    0
.xdata$x:00007EF9                 db    0
.xdata$x:00007EFA                 db    0
.xdata$x:00007EFB                 db    0
.xdata$x:00007EFC                 db    0
.xdata$x:00007EFD                 db    0
.xdata$x:00007EFE                 db    0
.xdata$x:00007EFF                 db    0
.xdata$x:00007F00                 db    0
.xdata$x:00007F01                 db    0
.xdata$x:00007F02                 db    0
.xdata$x:00007F03                 db    0
.xdata$x:00007F04                 db    0
.xdata$x:00007F05                 db    0
.xdata$x:00007F06                 db    0
.xdata$x:00007F07                 db    0
.xdata$x:00007F07 _xdata$x        ends
.xdata$x:00007F07
.xdata$x:00007F08 ; ===========================================================================
.xdata$x:00007F08
.xdata$x:00007F08 ; Segment type: Pure data
.xdata$x:00007F08 ; Segment permissions: Read
.xdata$x:00007F08 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007F08                 assume cs:_xdata$x
.xdata$x:00007F08                 ;org 7F08h
.xdata$x:00007F08 ; COMDAT (pick associative to section at 3394)
.xdata$x:00007F08 __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:00007F08                                         ; DATA XREF: .xdata$x:00007F18o
.xdata$x:00007F09                 db 0FFh
.xdata$x:00007F0A                 db 0FFh
.xdata$x:00007F0B                 db 0FFh
.xdata$x:00007F0C                 dd offset __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:00007F10 __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00007F10                                         ; DATA XREF: __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:00007F11                 db    5
.xdata$x:00007F12                 db  93h ; ô
.xdata$x:00007F13                 db  19h
.xdata$x:00007F14                 db    1
.xdata$x:00007F15                 db    0
.xdata$x:00007F16                 db    0
.xdata$x:00007F17                 db    0
.xdata$x:00007F18                 dd offset __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:00007F1C                 db    0
.xdata$x:00007F1D                 db    0
.xdata$x:00007F1E                 db    0
.xdata$x:00007F1F                 db    0
.xdata$x:00007F20                 db    0
.xdata$x:00007F21                 db    0
.xdata$x:00007F22                 db    0
.xdata$x:00007F23                 db    0
.xdata$x:00007F24                 db    0
.xdata$x:00007F25                 db    0
.xdata$x:00007F26                 db    0
.xdata$x:00007F27                 db    0
.xdata$x:00007F28                 db    0
.xdata$x:00007F29                 db    0
.xdata$x:00007F2A                 db    0
.xdata$x:00007F2B                 db    0
.xdata$x:00007F2C                 db    0
.xdata$x:00007F2D                 db    0
.xdata$x:00007F2E                 db    0
.xdata$x:00007F2F                 db    0
.xdata$x:00007F30                 db    0
.xdata$x:00007F31                 db    0
.xdata$x:00007F32                 db    0
.xdata$x:00007F33                 db    0
.xdata$x:00007F33 _xdata$x        ends
.xdata$x:00007F33
.xdata$x:00007F34 ; ===========================================================================
.xdata$x:00007F34
.xdata$x:00007F34 ; Segment type: Pure data
.xdata$x:00007F34 ; Segment permissions: Read
.xdata$x:00007F34 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007F34                 assume cs:_xdata$x
.xdata$x:00007F34                 ;org 7F34h
.xdata$x:00007F34 ; COMDAT (pick associative to section at 2644)
.xdata$x:00007F34 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z db 0FFh
.xdata$x:00007F34                                         ; DATA XREF: .xdata$x:00007F44o
.xdata$x:00007F35                 db 0FFh
.xdata$x:00007F36                 db 0FFh
.xdata$x:00007F37                 db 0FFh
.xdata$x:00007F38                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
.xdata$x:00007F3C __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z db  22h ; "
.xdata$x:00007F3C                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z+11o
.xdata$x:00007F3D                 db    5
.xdata$x:00007F3E                 db  93h ; ô
.xdata$x:00007F3F                 db  19h
.xdata$x:00007F40                 db    1
.xdata$x:00007F41                 db    0
.xdata$x:00007F42                 db    0
.xdata$x:00007F43                 db    0
.xdata$x:00007F44                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.xdata$x:00007F48                 align 20h
.xdata$x:00007F48 _xdata$x        ends
.xdata$x:00007F48
.xdata$x:00007F60 ; ===========================================================================
.xdata$x:00007F60
.xdata$x:00007F60 ; Segment type: Pure data
.xdata$x:00007F60 ; Segment permissions: Read
.xdata$x:00007F60 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007F60                 assume cs:_xdata$x
.xdata$x:00007F60                 ;org 7F60h
.xdata$x:00007F60 ; COMDAT (pick associative to section at 28AC)
.xdata$x:00007F60 __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z db 0FFh
.xdata$x:00007F60                                         ; DATA XREF: .xdata$x:00007F70o
.xdata$x:00007F61                 db 0FFh
.xdata$x:00007F62                 db 0FFh
.xdata$x:00007F63                 db 0FFh
.xdata$x:00007F64                 dd offset __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0
.xdata$x:00007F68 __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z db  22h ; "
.xdata$x:00007F68                                         ; DATA XREF: __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z+11o
.xdata$x:00007F69                 db    5
.xdata$x:00007F6A                 db  93h ; ô
.xdata$x:00007F6B                 db  19h
.xdata$x:00007F6C                 db    1
.xdata$x:00007F6D                 db    0
.xdata$x:00007F6E                 db    0
.xdata$x:00007F6F                 db    0
.xdata$x:00007F70                 dd offset __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.xdata$x:00007F74                 db    0
.xdata$x:00007F75                 db    0
.xdata$x:00007F76                 db    0
.xdata$x:00007F77                 db    0
.xdata$x:00007F78                 db    0
.xdata$x:00007F79                 db    0
.xdata$x:00007F7A                 db    0
.xdata$x:00007F7B                 db    0
.xdata$x:00007F7C                 db    0
.xdata$x:00007F7D                 db    0
.xdata$x:00007F7E                 db    0
.xdata$x:00007F7F                 db    0
.xdata$x:00007F80                 db    0
.xdata$x:00007F81                 db    0
.xdata$x:00007F82                 db    0
.xdata$x:00007F83                 db    0
.xdata$x:00007F84                 db    0
.xdata$x:00007F85                 db    0
.xdata$x:00007F86                 db    0
.xdata$x:00007F87                 db    0
.xdata$x:00007F88                 db    0
.xdata$x:00007F89                 db    0
.xdata$x:00007F8A                 db    0
.xdata$x:00007F8B                 db    0
.xdata$x:00007F8B _xdata$x        ends
.xdata$x:00007F8B
.xdata$x:00007F8C ; ===========================================================================
.xdata$x:00007F8C
.xdata$x:00007F8C ; Segment type: Pure data
.xdata$x:00007F8C ; Segment permissions: Read
.xdata$x:00007F8C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007F8C                 assume cs:_xdata$x
.xdata$x:00007F8C                 ;org 7F8Ch
.xdata$x:00007F8C ; COMDAT (pick associative to section at 34F4)
.xdata$x:00007F8C __unwindtable$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00007F8C                                         ; DATA XREF: .xdata$x:00007F9Co
.xdata$x:00007F8D                 db 0FFh
.xdata$x:00007F8E                 db 0FFh
.xdata$x:00007F8F                 db 0FFh
.xdata$x:00007F90                 dd offset __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00007F94 __ehfuncinfo$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00007F94                                         ; DATA XREF: __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00007F95                 db    5
.xdata$x:00007F96                 db  93h ; ô
.xdata$x:00007F97                 db  19h
.xdata$x:00007F98                 db    1
.xdata$x:00007F99                 db    0
.xdata$x:00007F9A                 db    0
.xdata$x:00007F9B                 db    0
.xdata$x:00007F9C                 dd offset __unwindtable$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:00007FA0                 db    0
.xdata$x:00007FA1                 db    0
.xdata$x:00007FA2                 db    0
.xdata$x:00007FA3                 db    0
.xdata$x:00007FA4                 db    0
.xdata$x:00007FA5                 db    0
.xdata$x:00007FA6                 db    0
.xdata$x:00007FA7                 db    0
.xdata$x:00007FA8                 db    0
.xdata$x:00007FA9                 db    0
.xdata$x:00007FAA                 db    0
.xdata$x:00007FAB                 db    0
.xdata$x:00007FAC                 db    0
.xdata$x:00007FAD                 db    0
.xdata$x:00007FAE                 db    0
.xdata$x:00007FAF                 db    0
.xdata$x:00007FB0                 db    0
.xdata$x:00007FB1                 db    0
.xdata$x:00007FB2                 db    0
.xdata$x:00007FB3                 db    0
.xdata$x:00007FB4                 db    0
.xdata$x:00007FB5                 db    0
.xdata$x:00007FB6                 db    0
.xdata$x:00007FB7                 db    0
.xdata$x:00007FB7 _xdata$x        ends
.xdata$x:00007FB7
.xdata$x:00007FB8 ; ===========================================================================
.xdata$x:00007FB8
.xdata$x:00007FB8 ; Segment type: Pure data
.xdata$x:00007FB8 ; Segment permissions: Read
.xdata$x:00007FB8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007FB8                 assume cs:_xdata$x
.xdata$x:00007FB8                 ;org 7FB8h
.xdata$x:00007FB8 ; COMDAT (pick associative to section at 2828)
.xdata$x:00007FB8 __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:00007FB8                                         ; DATA XREF: .xdata$x:00007FC8o
.xdata$x:00007FB9                 db 0FFh
.xdata$x:00007FBA                 db 0FFh
.xdata$x:00007FBB                 db 0FFh
.xdata$x:00007FBC                 dd offset __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:00007FC0 __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:00007FC0                                         ; DATA XREF: __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:00007FC1                 db    5
.xdata$x:00007FC2                 db  93h ; ô
.xdata$x:00007FC3                 db  19h
.xdata$x:00007FC4                 db    1
.xdata$x:00007FC5                 db    0
.xdata$x:00007FC6                 db    0
.xdata$x:00007FC7                 db    0
.xdata$x:00007FC8                 dd offset __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:00007FCC                 db    0
.xdata$x:00007FCD                 db    0
.xdata$x:00007FCE                 db    0
.xdata$x:00007FCF                 db    0
.xdata$x:00007FD0                 db    0
.xdata$x:00007FD1                 db    0
.xdata$x:00007FD2                 db    0
.xdata$x:00007FD3                 db    0
.xdata$x:00007FD4                 db    0
.xdata$x:00007FD5                 db    0
.xdata$x:00007FD6                 db    0
.xdata$x:00007FD7                 db    0
.xdata$x:00007FD8                 db    0
.xdata$x:00007FD9                 db    0
.xdata$x:00007FDA                 db    0
.xdata$x:00007FDB                 db    0
.xdata$x:00007FDC                 db    0
.xdata$x:00007FDD                 db    0
.xdata$x:00007FDE                 db    0
.xdata$x:00007FDF                 db    0
.xdata$x:00007FE0                 db    0
.xdata$x:00007FE1                 db    0
.xdata$x:00007FE2                 db    0
.xdata$x:00007FE3                 db    0
.xdata$x:00007FE3 _xdata$x        ends
.xdata$x:00007FE3
.xdata$x:00007FE4 ; ===========================================================================
.xdata$x:00007FE4
.xdata$x:00007FE4 ; Segment type: Pure data
.xdata$x:00007FE4 ; Segment permissions: Read
.xdata$x:00007FE4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00007FE4                 assume cs:_xdata$x
.xdata$x:00007FE4                 ;org 7FE4h
.xdata$x:00007FE4 ; COMDAT (pick associative to section at 29B0)
.xdata$x:00007FE4 __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z db 0FFh
.xdata$x:00007FE4                                         ; DATA XREF: .xdata$x:00007FF4o
.xdata$x:00007FE5                 db 0FFh
.xdata$x:00007FE6                 db 0FFh
.xdata$x:00007FE7                 db 0FFh
.xdata$x:00007FE8                 dd offset __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0
.xdata$x:00007FEC __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z db  22h ; "
.xdata$x:00007FEC                                         ; DATA XREF: __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z+11o
.xdata$x:00007FED                 db    5
.xdata$x:00007FEE                 db  93h ; ô
.xdata$x:00007FEF                 db  19h
.xdata$x:00007FF0                 db    1
.xdata$x:00007FF1                 db    0
.xdata$x:00007FF2                 db    0
.xdata$x:00007FF3                 db    0
.xdata$x:00007FF4                 dd offset __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.xdata$x:00007FF8                 db    0
.xdata$x:00007FF9                 db    0
.xdata$x:00007FFA                 db    0
.xdata$x:00007FFB                 db    0
.xdata$x:00007FFC                 db    0
.xdata$x:00007FFD                 db    0
.xdata$x:00007FFE                 db    0
.xdata$x:00007FFF                 db    0
.xdata$x:00008000                 db    0
.xdata$x:00008001                 db    0
.xdata$x:00008002                 db    0
.xdata$x:00008003                 db    0
.xdata$x:00008004                 db    0
.xdata$x:00008005                 db    0
.xdata$x:00008006                 db    0
.xdata$x:00008007                 db    0
.xdata$x:00008008                 db    0
.xdata$x:00008009                 db    0
.xdata$x:0000800A                 db    0
.xdata$x:0000800B                 db    0
.xdata$x:0000800C                 db    0
.xdata$x:0000800D                 db    0
.xdata$x:0000800E                 db    0
.xdata$x:0000800F                 db    0
.xdata$x:0000800F _xdata$x        ends
.xdata$x:0000800F
.xdata$x:00008010 ; ===========================================================================
.xdata$x:00008010
.xdata$x:00008010 ; Segment type: Pure data
.xdata$x:00008010 ; Segment permissions: Read
.xdata$x:00008010 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008010                 assume cs:_xdata$x
.xdata$x:00008010                 ;org 8010h
.xdata$x:00008010 ; COMDAT (pick associative to section at 3EB8)
.xdata$x:00008010 __unwindtable$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z db 0FFh
.xdata$x:00008010                                         ; DATA XREF: .xdata$x:00008020o
.xdata$x:00008011                 db 0FFh
.xdata$x:00008012                 db 0FFh
.xdata$x:00008013                 db 0FFh
.xdata$x:00008014                 dd offset __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0
.xdata$x:00008018 __ehfuncinfo$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z db  22h ; "
.xdata$x:00008018                                         ; DATA XREF: __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z+11o
.xdata$x:00008019                 db    5
.xdata$x:0000801A                 db  93h ; ô
.xdata$x:0000801B                 db  19h
.xdata$x:0000801C                 db    1
.xdata$x:0000801D                 db    0
.xdata$x:0000801E                 db    0
.xdata$x:0000801F                 db    0
.xdata$x:00008020                 dd offset __unwindtable$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.xdata$x:00008024                 db    0
.xdata$x:00008025                 db    0
.xdata$x:00008026                 db    0
.xdata$x:00008027                 db    0
.xdata$x:00008028                 db    0
.xdata$x:00008029                 db    0
.xdata$x:0000802A                 db    0
.xdata$x:0000802B                 db    0
.xdata$x:0000802C                 db    0
.xdata$x:0000802D                 db    0
.xdata$x:0000802E                 db    0
.xdata$x:0000802F                 db    0
.xdata$x:00008030                 db    0
.xdata$x:00008031                 db    0
.xdata$x:00008032                 db    0
.xdata$x:00008033                 db    0
.xdata$x:00008034                 db    0
.xdata$x:00008035                 db    0
.xdata$x:00008036                 db    0
.xdata$x:00008037                 db    0
.xdata$x:00008038                 db    0
.xdata$x:00008039                 db    0
.xdata$x:0000803A                 db    0
.xdata$x:0000803B                 db    0
.xdata$x:0000803B _xdata$x        ends
.xdata$x:0000803B
.xdata$x:0000803C ; ===========================================================================
.xdata$x:0000803C
.xdata$x:0000803C ; Segment type: Pure data
.xdata$x:0000803C ; Segment permissions: Read
.xdata$x:0000803C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000803C                 assume cs:_xdata$x
.xdata$x:0000803C                 ;org 803Ch
.xdata$x:0000803C ; COMDAT (pick associative to section at 3564)
.xdata$x:0000803C __unwindtable$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000803C                                         ; DATA XREF: .xdata$x:0000804Co
.xdata$x:0000803D                 db 0FFh
.xdata$x:0000803E                 db 0FFh
.xdata$x:0000803F                 db 0FFh
.xdata$x:00008040                 dd offset __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00008044 __ehfuncinfo$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00008044                                         ; DATA XREF: __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00008045                 db    5
.xdata$x:00008046                 db  93h ; ô
.xdata$x:00008047                 db  19h
.xdata$x:00008048                 db    1
.xdata$x:00008049                 db    0
.xdata$x:0000804A                 db    0
.xdata$x:0000804B                 db    0
.xdata$x:0000804C                 dd offset __unwindtable$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:00008050                 db    0
.xdata$x:00008051                 db    0
.xdata$x:00008052                 db    0
.xdata$x:00008053                 db    0
.xdata$x:00008054                 db    0
.xdata$x:00008055                 db    0
.xdata$x:00008056                 db    0
.xdata$x:00008057                 db    0
.xdata$x:00008058                 db    0
.xdata$x:00008059                 db    0
.xdata$x:0000805A                 db    0
.xdata$x:0000805B                 db    0
.xdata$x:0000805C                 db    0
.xdata$x:0000805D                 db    0
.xdata$x:0000805E                 db    0
.xdata$x:0000805F                 db    0
.xdata$x:00008060                 db    0
.xdata$x:00008061                 db    0
.xdata$x:00008062                 db    0
.xdata$x:00008063                 db    0
.xdata$x:00008064                 db    0
.xdata$x:00008065                 db    0
.xdata$x:00008066                 db    0
.xdata$x:00008067                 db    0
.xdata$x:00008067 _xdata$x        ends
.xdata$x:00008067
.xdata$x:00008068 ; ===========================================================================
.xdata$x:00008068
.xdata$x:00008068 ; Segment type: Pure data
.xdata$x:00008068 ; Segment permissions: Read
.xdata$x:00008068 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008068                 assume cs:_xdata$x
.xdata$x:00008068                 ;org 8068h
.xdata$x:00008068 ; COMDAT (pick associative to section at 2938)
.xdata$x:00008068 __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:00008068                                         ; DATA XREF: .xdata$x:00008078o
.xdata$x:00008069                 db 0FFh
.xdata$x:0000806A                 db 0FFh
.xdata$x:0000806B                 db 0FFh
.xdata$x:0000806C                 dd offset __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:00008070 __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:00008070                                         ; DATA XREF: __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:00008071                 db    5
.xdata$x:00008072                 db  93h ; ô
.xdata$x:00008073                 db  19h
.xdata$x:00008074                 db    1
.xdata$x:00008075                 db    0
.xdata$x:00008076                 db    0
.xdata$x:00008077                 db    0
.xdata$x:00008078                 dd offset __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:0000807C                 db    0
.xdata$x:0000807D                 db    0
.xdata$x:0000807E                 db    0
.xdata$x:0000807F                 db    0
.xdata$x:00008080                 db    0
.xdata$x:00008081                 db    0
.xdata$x:00008082                 db    0
.xdata$x:00008083                 db    0
.xdata$x:00008084                 db    0
.xdata$x:00008085                 db    0
.xdata$x:00008086                 db    0
.xdata$x:00008087                 db    0
.xdata$x:00008088                 db    0
.xdata$x:00008089                 db    0
.xdata$x:0000808A                 db    0
.xdata$x:0000808B                 db    0
.xdata$x:0000808C                 db    0
.xdata$x:0000808D                 db    0
.xdata$x:0000808E                 db    0
.xdata$x:0000808F                 db    0
.xdata$x:00008090                 db    0
.xdata$x:00008091                 db    0
.xdata$x:00008092                 db    0
.xdata$x:00008093                 db    0
.xdata$x:00008093 _xdata$x        ends
.xdata$x:00008093
.xdata$x:00008094 ; ===========================================================================
.xdata$x:00008094
.xdata$x:00008094 ; Segment type: Pure data
.xdata$x:00008094 ; Segment permissions: Read
.xdata$x:00008094 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008094                 assume cs:_xdata$x
.xdata$x:00008094                 ;org 8094h
.xdata$x:00008094 ; COMDAT (pick associative to section at 1F74)
.xdata$x:00008094 __ehfuncinfo$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z db  22h ; "
.xdata$x:00008094                                         ; DATA XREF: __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z+11o
.xdata$x:00008095                 db    5
.xdata$x:00008096                 db  93h ; ô
.xdata$x:00008097                 db  19h
.xdata$x:00008098                 db  0Ah
.xdata$x:00008099                 db    0
.xdata$x:0000809A                 db    0
.xdata$x:0000809B                 db    0
.xdata$x:0000809C                 dd offset __unwindtable$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.xdata$x:000080A0                 db    0
.xdata$x:000080A1                 db    0
.xdata$x:000080A2                 db    0
.xdata$x:000080A3                 db    0
.xdata$x:000080A4                 db    0
.xdata$x:000080A5                 db    0
.xdata$x:000080A6                 db    0
.xdata$x:000080A7                 db    0
.xdata$x:000080A8                 db    0
.xdata$x:000080A9                 db    0
.xdata$x:000080AA                 db    0
.xdata$x:000080AB                 db    0
.xdata$x:000080AC                 db    0
.xdata$x:000080AD                 db    0
.xdata$x:000080AE                 db    0
.xdata$x:000080AF                 db    0
.xdata$x:000080B0                 db    0
.xdata$x:000080B1                 db    0
.xdata$x:000080B2                 db    0
.xdata$x:000080B3                 db    0
.xdata$x:000080B4                 db    0
.xdata$x:000080B5                 db    0
.xdata$x:000080B6                 db    0
.xdata$x:000080B7                 db    0
.xdata$x:000080B8 __unwindtable$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z db 0FFh
.xdata$x:000080B8                                         ; DATA XREF: .xdata$x:0000809Co
.xdata$x:000080B9                 db 0FFh
.xdata$x:000080BA                 db 0FFh
.xdata$x:000080BB                 db 0FFh
.xdata$x:000080BC                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0
.xdata$x:000080C0                 db    0
.xdata$x:000080C1                 db    0
.xdata$x:000080C2                 db    0
.xdata$x:000080C3                 db    0
.xdata$x:000080C4                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1
.xdata$x:000080C8                 db    1
.xdata$x:000080C9                 db    0
.xdata$x:000080CA                 db    0
.xdata$x:000080CB                 db    0
.xdata$x:000080CC                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2
.xdata$x:000080D0                 db    2
.xdata$x:000080D1                 db    0
.xdata$x:000080D2                 db    0
.xdata$x:000080D3                 db    0
.xdata$x:000080D4                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3
.xdata$x:000080D8                 db    3
.xdata$x:000080D9                 db    0
.xdata$x:000080DA                 db    0
.xdata$x:000080DB                 db    0
.xdata$x:000080DC                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4
.xdata$x:000080E0                 db    4
.xdata$x:000080E1                 db    0
.xdata$x:000080E2                 db    0
.xdata$x:000080E3                 db    0
.xdata$x:000080E4                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5
.xdata$x:000080E8                 db    5
.xdata$x:000080E9                 db    0
.xdata$x:000080EA                 db    0
.xdata$x:000080EB                 db    0
.xdata$x:000080EC                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6
.xdata$x:000080F0                 db    6
.xdata$x:000080F1                 db    0
.xdata$x:000080F2                 db    0
.xdata$x:000080F3                 db    0
.xdata$x:000080F4                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7
.xdata$x:000080F8                 db    1
.xdata$x:000080F9                 db    0
.xdata$x:000080FA                 db    0
.xdata$x:000080FB                 db    0
.xdata$x:000080FC                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4
.xdata$x:00008100                 db    8
.xdata$x:00008101                 db    0
.xdata$x:00008102                 db    0
.xdata$x:00008103                 db    0
.xdata$x:00008104                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6
.xdata$x:00008104 _xdata$x        ends
.xdata$x:00008104
.xdata$x:00008108 ; ===========================================================================
.xdata$x:00008108
.xdata$x:00008108 ; Segment type: Pure data
.xdata$x:00008108 ; Segment permissions: Read
.xdata$x:00008108 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008108                 assume cs:_xdata$x
.xdata$x:00008108                 ;org 8108h
.xdata$x:00008108 ; COMDAT (pick associative to section at 2334)
.xdata$x:00008108 __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db 0FFh
.xdata$x:00008108                                         ; DATA XREF: .xdata$x:00008118o
.xdata$x:00008109                 db 0FFh
.xdata$x:0000810A                 db 0FFh
.xdata$x:0000810B                 db 0FFh
.xdata$x:0000810C                 dd offset __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
.xdata$x:00008110 __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db  22h ; "
.xdata$x:00008110                                         ; DATA XREF: __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z+11o
.xdata$x:00008111                 db    5
.xdata$x:00008112                 db  93h ; ô
.xdata$x:00008113                 db  19h
.xdata$x:00008114                 db    1
.xdata$x:00008115                 db    0
.xdata$x:00008116                 db    0
.xdata$x:00008117                 db    0
.xdata$x:00008118                 dd offset __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.xdata$x:0000811C                 db    0
.xdata$x:0000811D                 db    0
.xdata$x:0000811E                 db    0
.xdata$x:0000811F                 db    0
.xdata$x:00008120                 db    0
.xdata$x:00008121                 db    0
.xdata$x:00008122                 db    0
.xdata$x:00008123                 db    0
.xdata$x:00008124                 db    0
.xdata$x:00008125                 db    0
.xdata$x:00008126                 db    0
.xdata$x:00008127                 db    0
.xdata$x:00008128                 db    0
.xdata$x:00008129                 db    0
.xdata$x:0000812A                 db    0
.xdata$x:0000812B                 db    0
.xdata$x:0000812C                 db    0
.xdata$x:0000812D                 db    0
.xdata$x:0000812E                 db    0
.xdata$x:0000812F                 db    0
.xdata$x:00008130                 db    0
.xdata$x:00008131                 db    0
.xdata$x:00008132                 db    0
.xdata$x:00008133                 db    0
.xdata$x:00008133 _xdata$x        ends
.xdata$x:00008133
.xdata$x:00008134 ; ===========================================================================
.xdata$x:00008134
.xdata$x:00008134 ; Segment type: Pure data
.xdata$x:00008134 ; Segment permissions: Read
.xdata$x:00008134 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008134                 assume cs:_xdata$x
.xdata$x:00008134                 ;org 8134h
.xdata$x:00008134 ; COMDAT (pick associative to section at 2438)
.xdata$x:00008134 __unwindtable$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z db 0FFh
.xdata$x:00008134                                         ; DATA XREF: .xdata$x:00008144o
.xdata$x:00008135                 db 0FFh
.xdata$x:00008136                 db 0FFh
.xdata$x:00008137                 db 0FFh
.xdata$x:00008138                 dd offset __unwindfunclet$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z$0
.xdata$x:0000813C __ehfuncinfo$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z db  22h ; "
.xdata$x:0000813C                                         ; DATA XREF: __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z+11o
.xdata$x:0000813D                 db    5
.xdata$x:0000813E                 db  93h ; ô
.xdata$x:0000813F                 db  19h
.xdata$x:00008140                 db    1
.xdata$x:00008141                 db    0
.xdata$x:00008142                 db    0
.xdata$x:00008143                 db    0
.xdata$x:00008144                 dd offset __unwindtable$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.xdata$x:00008148                 align 20h
.xdata$x:00008148 _xdata$x        ends
.xdata$x:00008148
.xdata$x:00008160 ; ===========================================================================
.xdata$x:00008160
.xdata$x:00008160 ; Segment type: Pure data
.xdata$x:00008160 ; Segment permissions: Read
.xdata$x:00008160 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00008160                 assume cs:_xdata$x
.xdata$x:00008160                 ;org 8160h
.xdata$x:00008160 ; COMDAT (pick associative to section at 2134)
.xdata$x:00008160 __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db 0FFh
.xdata$x:00008160                                         ; DATA XREF: .xdata$x:00008170o
.xdata$x:00008161                 db 0FFh
.xdata$x:00008162                 db 0FFh
.xdata$x:00008163                 db 0FFh
.xdata$x:00008164                 dd offset __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
.xdata$x:00008168 __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db  22h ; "
.xdata$x:00008168                                         ; DATA XREF: __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z+11o
.xdata$x:00008169                 db    5
.xdata$x:0000816A                 db  93h ; ô
.xdata$x:0000816B                 db  19h
.xdata$x:0000816C                 db    1
.xdata$x:0000816D                 db    0
.xdata$x:0000816E                 db    0
.xdata$x:0000816F                 db    0
.xdata$x:00008170                 dd offset __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.xdata$x:00008174                 db    0
.xdata$x:00008175                 db    0
.xdata$x:00008176                 db    0
.xdata$x:00008177                 db    0
.xdata$x:00008178                 db    0
.xdata$x:00008179                 db    0
.xdata$x:0000817A                 db    0
.xdata$x:0000817B                 db    0
.xdata$x:0000817C                 db    0
.xdata$x:0000817D                 db    0
.xdata$x:0000817E                 db    0
.xdata$x:0000817F                 db    0
.xdata$x:00008180                 db    0
.xdata$x:00008181                 db    0
.xdata$x:00008182                 db    0
.xdata$x:00008183                 db    0
.xdata$x:00008184                 db    0
.xdata$x:00008185                 db    0
.xdata$x:00008186                 db    0
.xdata$x:00008187                 db    0
.xdata$x:00008188                 db    0
.xdata$x:00008189                 db    0
.xdata$x:0000818A                 db    0
.xdata$x:0000818B                 db    0
.xdata$x:0000818B _xdata$x        ends
.xdata$x:0000818B
.xdata$x:0000818C ; ===========================================================================
.xdata$x:0000818C
.xdata$x:0000818C ; Segment type: Pure data
.xdata$x:0000818C ; Segment permissions: Read
.xdata$x:0000818C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000818C                 assume cs:_xdata$x
.xdata$x:0000818C                 ;org 818Ch
.xdata$x:0000818C ; COMDAT (pick associative to section at 2234)
.xdata$x:0000818C __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db 0FFh
.xdata$x:0000818C                                         ; DATA XREF: .xdata$x:0000819Co
.xdata$x:0000818D                 db 0FFh
.xdata$x:0000818E                 db 0FFh
.xdata$x:0000818F                 db 0FFh
.xdata$x:00008190                 dd offset __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0
.xdata$x:00008194 __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db  22h ; "
.xdata$x:00008194                                         ; DATA XREF: __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z+11o
.xdata$x:00008195                 db    5
.xdata$x:00008196                 db  93h ; ô
.xdata$x:00008197                 db  19h
.xdata$x:00008198                 db    1
.xdata$x:00008199                 db    0
.xdata$x:0000819A                 db    0
.xdata$x:0000819B                 db    0
.xdata$x:0000819C                 dd offset __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.xdata$x:000081A0                 db    0
.xdata$x:000081A1                 db    0
.xdata$x:000081A2                 db    0
.xdata$x:000081A3                 db    0
.xdata$x:000081A4                 db    0
.xdata$x:000081A5                 db    0
.xdata$x:000081A6                 db    0
.xdata$x:000081A7                 db    0
.xdata$x:000081A8                 db    0
.xdata$x:000081A9                 db    0
.xdata$x:000081AA                 db    0
.xdata$x:000081AB                 db    0
.xdata$x:000081AC                 db    0
.xdata$x:000081AD                 db    0
.xdata$x:000081AE                 db    0
.xdata$x:000081AF                 db    0
.xdata$x:000081B0                 db    0
.xdata$x:000081B1                 db    0
.xdata$x:000081B2                 db    0
.xdata$x:000081B3                 db    0
.xdata$x:000081B4                 db    0
.xdata$x:000081B5                 db    0
.xdata$x:000081B6                 db    0
.xdata$x:000081B7                 db    0
.xdata$x:000081B7 _xdata$x        ends
.xdata$x:000081B7
.xdata$x:000081B8 ; ===========================================================================
.xdata$x:000081B8
.xdata$x:000081B8 ; Segment type: Pure data
.xdata$x:000081B8 ; Segment permissions: Read
.xdata$x:000081B8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000081B8                 assume cs:_xdata$x
.xdata$x:000081B8                 ;org 81B8h
.xdata$x:000081B8 ; COMDAT (pick associative to section at 1E04)
.xdata$x:000081B8 __catchsym$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 db    0
.xdata$x:000081B8                                         ; DATA XREF: .xdata$x:000081E8o
.xdata$x:000081B9                 db    0
.xdata$x:000081BA                 db    0
.xdata$x:000081BB                 db    0
.xdata$x:000081BC                 db    0
.xdata$x:000081BD                 db    0
.xdata$x:000081BE                 db    0
.xdata$x:000081BF                 db    0
.xdata$x:000081C0                 db    0
.xdata$x:000081C1                 db    0
.xdata$x:000081C2                 db    0
.xdata$x:000081C3                 db    0
.xdata$x:000081C4                 dd offset __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
.xdata$x:000081C8 __unwindtable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db 0FFh
.xdata$x:000081C8                                         ; DATA XREF: .xdata$x:000081F4o
.xdata$x:000081C9                 db 0FFh
.xdata$x:000081CA                 db 0FFh
.xdata$x:000081CB                 db 0FFh
.xdata$x:000081CC                 db    0
.xdata$x:000081CD                 db    0
.xdata$x:000081CE                 db    0
.xdata$x:000081CF                 db    0
.xdata$x:000081D0                 db 0FFh
.xdata$x:000081D1                 db 0FFh
.xdata$x:000081D2                 db 0FFh
.xdata$x:000081D3                 db 0FFh
.xdata$x:000081D4                 db    0
.xdata$x:000081D5                 db    0
.xdata$x:000081D6                 db    0
.xdata$x:000081D7                 db    0
.xdata$x:000081D8 __tryblocktable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db    0
.xdata$x:000081D8                                         ; DATA XREF: .xdata$x:000081FCo
.xdata$x:000081D9                 db    0
.xdata$x:000081DA                 db    0
.xdata$x:000081DB                 db    0
.xdata$x:000081DC                 db    0
.xdata$x:000081DD                 db    0
.xdata$x:000081DE                 db    0
.xdata$x:000081DF                 db    0
.xdata$x:000081E0                 db    1
.xdata$x:000081E1                 db    0
.xdata$x:000081E2                 db    0
.xdata$x:000081E3                 db    0
.xdata$x:000081E4                 db    1
.xdata$x:000081E5                 db    0
.xdata$x:000081E6                 db    0
.xdata$x:000081E7                 db    0
.xdata$x:000081E8                 dd offset __catchsym$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
.xdata$x:000081EC __ehfuncinfo$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db  22h ; "
.xdata$x:000081EC                                         ; DATA XREF: __ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z+11o
.xdata$x:000081ED                 db    5
.xdata$x:000081EE                 db  93h ; ô
.xdata$x:000081EF                 db  19h
.xdata$x:000081F0                 db    2
.xdata$x:000081F1                 db    0
.xdata$x:000081F2                 db    0
.xdata$x:000081F3                 db    0
.xdata$x:000081F4                 dd offset __unwindtable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:000081F8                 db    1
.xdata$x:000081F9                 db    0
.xdata$x:000081FA                 db    0
.xdata$x:000081FB                 db    0
.xdata$x:000081FC                 dd offset __tryblocktable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:00008200                 db    0
.xdata$x:00008201                 db    0
.xdata$x:00008202                 db    0
.xdata$x:00008203                 db    0
.xdata$x:00008204                 db    0
.xdata$x:00008205                 db    0
.xdata$x:00008206                 db    0
.xdata$x:00008207                 db    0
.xdata$x:00008208                 db    0
.xdata$x:00008209                 db    0
.xdata$x:0000820A                 db    0
.xdata$x:0000820B                 db    0
.xdata$x:0000820C                 db    0
.xdata$x:0000820D                 db    0
.xdata$x:0000820E                 db    0
.xdata$x:0000820F                 db    0
.xdata$x:0000820F _xdata$x        ends
.xdata$x:0000820F
.rdata:00008210 ; ===========================================================================
.rdata:00008210
.rdata:00008210 ; Segment type: Pure data
.rdata:00008210 ; Segment permissions: Read
.rdata:00008210 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00008210 _rdata          segment para public 'DATA' use32
.rdata:00008210                 assume cs:_rdata
.rdata:00008210                 ;org 8210h
.rdata:00008210 ; COMDAT (pick any)
.rdata:00008210                 public ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:00008210 ; wchar_t `string'
.rdata:00008210 ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:00008210                                         ; DATA XREF: std::_Iterator_base12::_Orphan_me(void)+48o
.rdata:00008210                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:00008210                 unicode 0, <clude\xutility>,0
.rdata:00008210 _rdata          ends
.rdata:00008210
.rdata:000082A0 ; ===========================================================================
.rdata:000082A0
.rdata:000082A0 ; Segment type: Pure data
.rdata:000082A0 ; Segment permissions: Read
.rdata:000082A0 _rdata          segment dword public 'DATA' use32
.rdata:000082A0                 assume cs:_rdata
.rdata:000082A0                 ;org 82A0h
.rdata:000082A0 ; COMDAT (pick any)
.rdata:000082A0                 public ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
.rdata:000082A0 ; wchar_t `string'
.rdata:000082A0 ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@:
.rdata:000082A0                                         ; DATA XREF: std::_Iterator_base12::_Orphan_me(void)+4Do
.rdata:000082A0                 unicode 0, <ITERATOR LIST CORRUPTED!>,0
.rdata:000082D2                 align 4
.rdata:000082D2 _rdata          ends
.rdata:000082D2
.data$r:000082D4 ; ===========================================================================
.data$r:000082D4
.data$r:000082D4 ; Segment type: Pure data
.data$r:000082D4 ; Segment permissions: Read/Write
.data$r:000082D4 _data$r         segment dword public 'DATA' use32
.data$r:000082D4                 assume cs:_data$r
.data$r:000082D4                 ;org 82D4h
.data$r:000082D4 ; COMDAT (pick any)
.data$r:000082D4                 public ??_R0?AVexception@std@@@8
.data$r:000082D4 ; class std::exception `RTTI Type Descriptor'
.data$r:000082D4 ??_R0?AVexception@std@@@8 dd offset ??_7type_info@@6B@
.data$r:000082D4                                         ; DATA XREF: .xdata$x:00007B38o
.data$r:000082D4                                         ; .xdata$x:00007B58o
.data$r:000082D4                                         ; const type_info::`vftable'
.data$r:000082D8                 db    0
.data$r:000082D9                 db    0
.data$r:000082DA                 db    0
.data$r:000082DB                 db    0
.data$r:000082DC                 db  2Eh ; .
.data$r:000082DD                 db  3Fh ; ?
.data$r:000082DE                 db  41h ; A
.data$r:000082DF                 db  56h ; V
.data$r:000082E0                 db  65h ; e
.data$r:000082E1                 db  78h ; x
.data$r:000082E2                 db  63h ; c
.data$r:000082E3                 db  65h ; e
.data$r:000082E4                 db  70h ; p
.data$r:000082E5                 db  74h ; t
.data$r:000082E6                 db  69h ; i
.data$r:000082E7                 db  6Fh ; o
.data$r:000082E8                 db  6Eh ; n
.data$r:000082E9                 db  40h ; @
.data$r:000082EA                 db  73h ; s
.data$r:000082EB                 db  74h ; t
.data$r:000082EC                 db  64h ; d
.data$r:000082ED                 db  40h ; @
.data$r:000082EE                 db  40h ; @
.data$r:000082EF                 db    0
.data$r:000082EF _data$r         ends
.data$r:000082EF
.rdata:000082F0 ; ===========================================================================
.rdata:000082F0
.rdata:000082F0 ; Segment type: Pure data
.rdata:000082F0 ; Segment permissions: Read
.rdata:000082F0 _rdata          segment dword public 'DATA' use32
.rdata:000082F0                 assume cs:_rdata
.rdata:000082F0                 ;org 82F0h
.rdata:000082F0 ; COMDAT (pick largest)
.rdata:000082F0                 dd offset ??_R4error_category@std@@6B@ ; const std::error_category::`RTTI Complete Object Locator'
.rdata:000082F4                 public ??_7error_category@std@@6B@
.rdata:000082F4 ; const std::error_category::`vftable'
.rdata:000082F4 ??_7error_category@std@@6B@ dd offset ??_Eerror_category@std@@UAEPAXI@Z
.rdata:000082F4                                         ; DATA XREF: std::error_category::error_category(void)+Ao
.rdata:000082F4                                         ; std::error_category::~error_category(void)+Ao
.rdata:000082F4                                         ; std::error_category::`vector deleting destructor'(uint)
.rdata:000082F8                 dd offset __purecall
.rdata:000082FC                 dd offset __purecall
.rdata:00008300                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:00008304                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00008308                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00008308 _rdata          ends
.rdata:00008308
.rdata:0000830C ; ===========================================================================
.rdata:0000830C
.rdata:0000830C ; Segment type: Pure data
.rdata:0000830C ; Segment permissions: Read
.rdata:0000830C _rdata          segment dword public 'DATA' use32
.rdata:0000830C                 assume cs:_rdata
.rdata:0000830C                 ;org 830Ch
.rdata:0000830C ; COMDAT (pick largest)
.rdata:0000830C                 dd offset ??_R4_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata:00008310                 public ??_7_Generic_error_category@std@@6B@
.rdata:00008310 ; const std::_Generic_error_category::`vftable'
.rdata:00008310 ??_7_Generic_error_category@std@@6B@ dd offset ??_E_Generic_error_category@std@@UAEPAXI@Z
.rdata:00008310                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+38o
.rdata:00008310                                         ; std::_Generic_error_category::`vector deleting destructor'(uint)
.rdata:00008314                 dd offset ?name@_Generic_error_category@std@@UBEPBDXZ ; std::_Generic_error_category::name(void)
.rdata:00008318                 dd offset ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.rdata:0000831C                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:00008320                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00008324                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00008324 _rdata          ends
.rdata:00008324
.rdata:00008328 ; ===========================================================================
.rdata:00008328
.rdata:00008328 ; Segment type: Pure data
.rdata:00008328 ; Segment permissions: Read
.rdata:00008328 _rdata          segment dword public 'DATA' use32
.rdata:00008328                 assume cs:_rdata
.rdata:00008328                 ;org 8328h
.rdata:00008328 ; COMDAT (pick any)
.rdata:00008328                 public ??_C@_07DCLBNMLN@generic?$AA@
.rdata:00008328 ; `string'
.rdata:00008328 ??_C@_07DCLBNMLN@generic?$AA@ db 'generic',0
.rdata:00008328                                         ; DATA XREF: std::_Generic_error_category::name(void)+7o
.rdata:00008328 _rdata          ends
.rdata:00008328
.rdata:00008330 ; ===========================================================================
.rdata:00008330
.rdata:00008330 ; Segment type: Pure data
.rdata:00008330 ; Segment permissions: Read
.rdata:00008330 _rdata          segment dword public 'DATA' use32
.rdata:00008330                 assume cs:_rdata
.rdata:00008330                 ;org 8330h
.rdata:00008330 ; COMDAT (pick any)
.rdata:00008330                 public ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
.rdata:00008330 ; `string'
.rdata:00008330 ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ db 'unknown error',0
.rdata:00008330                                         ; DATA XREF: std::_Generic_error_category::message(int):loc_64C8o
.rdata:00008330                                         ; std::_System_error_category::message(int):loc_6644o
.rdata:0000833E                 align 10h
.rdata:0000833E _rdata          ends
.rdata:0000833E
.rdata:00008340 ; ===========================================================================
.rdata:00008340
.rdata:00008340 ; Segment type: Pure data
.rdata:00008340 ; Segment permissions: Read
.rdata:00008340 _rdata          segment dword public 'DATA' use32
.rdata:00008340                 assume cs:_rdata
.rdata:00008340                 ;org 8340h
.rdata:00008340 ; COMDAT (pick largest)
.rdata:00008340                 dd offset ??_R4_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata:00008344                 public ??_7_Iostream_error_category@std@@6B@
.rdata:00008344 ; const std::_Iostream_error_category::`vftable'
.rdata:00008344 ??_7_Iostream_error_category@std@@6B@ dd offset ??_E_Iostream_error_category@std@@UAEPAXI@Z
.rdata:00008344                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+38o
.rdata:00008344                                         ; std::_Iostream_error_category::`vector deleting destructor'(uint)
.rdata:00008348                 dd offset ?name@_Iostream_error_category@std@@UBEPBDXZ ; std::_Iostream_error_category::name(void)
.rdata:0000834C                 dd offset ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message(int)
.rdata:00008350                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:00008354                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00008358                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00008358 _rdata          ends
.rdata:00008358
.rdata:0000835C ; ===========================================================================
.rdata:0000835C
.rdata:0000835C ; Segment type: Pure data
.rdata:0000835C ; Segment permissions: Read
.rdata:0000835C _rdata          segment dword public 'DATA' use32
.rdata:0000835C                 assume cs:_rdata
.rdata:0000835C                 ;org 835Ch
.rdata:0000835C ; COMDAT (pick any)
.rdata:0000835C                 public ??_C@_08LLGCOLLL@iostream?$AA@
.rdata:0000835C ; `string'
.rdata:0000835C ??_C@_08LLGCOLLL@iostream?$AA@ db 'iostream',0
.rdata:0000835C                                         ; DATA XREF: std::_Iostream_error_category::name(void)+7o
.rdata:00008365                 align 4
.rdata:00008365 _rdata          ends
.rdata:00008365
.rdata:00008368 ; ===========================================================================
.rdata:00008368
.rdata:00008368 ; Segment type: Pure data
.rdata:00008368 ; Segment permissions: Read
.rdata:00008368 _rdata          segment dword public 'DATA' use32
.rdata:00008368                 assume cs:_rdata
.rdata:00008368                 ;org 8368h
.rdata:00008368 ; COMDAT (pick any)
.rdata:00008368                 public ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
.rdata:00008368 ; char `string'[]
.rdata:00008368 ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ db 'iostream stream error',0
.rdata:00008368                                         ; DATA XREF: std::_Iostream_error_category::message(int)+35o
.rdata:0000837E                 align 10h
.rdata:0000837E _rdata          ends
.rdata:0000837E
.rdata:00008380 ; ===========================================================================
.rdata:00008380
.rdata:00008380 ; Segment type: Pure data
.rdata:00008380 ; Segment permissions: Read
.rdata:00008380 _rdata          segment dword public 'DATA' use32
.rdata:00008380                 assume cs:_rdata
.rdata:00008380                 ;org 8380h
.rdata:00008380 ; COMDAT (pick largest)
.rdata:00008380                 dd offset ??_R4_System_error_category@std@@6B@ ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata:00008384                 public ??_7_System_error_category@std@@6B@
.rdata:00008384 ; const std::_System_error_category::`vftable'
.rdata:00008384 ??_7_System_error_category@std@@6B@ dd offset ??_E_System_error_category@std@@UAEPAXI@Z
.rdata:00008384                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+38o
.rdata:00008384                                         ; std::_System_error_category::`vector deleting destructor'(uint)
.rdata:00008388                 dd offset ?name@_System_error_category@std@@UBEPBDXZ ; std::_System_error_category::name(void)
.rdata:0000838C                 dd offset ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message(int)
.rdata:00008390                 dd offset ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition(int)
.rdata:00008394                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00008398                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00008398 _rdata          ends
.rdata:00008398
.rdata:0000839C ; ===========================================================================
.rdata:0000839C
.rdata:0000839C ; Segment type: Pure data
.rdata:0000839C ; Segment permissions: Read
.rdata:0000839C _rdata          segment dword public 'DATA' use32
.rdata:0000839C                 assume cs:_rdata
.rdata:0000839C                 ;org 839Ch
.rdata:0000839C ; COMDAT (pick any)
.rdata:0000839C                 public ??_C@_06FHFOAHML@system?$AA@
.rdata:0000839C ; `string'
.rdata:0000839C ??_C@_06FHFOAHML@system?$AA@ db 'system',0
.rdata:0000839C                                         ; DATA XREF: std::_System_error_category::name(void)+7o
.rdata:000083A3                 align 4
.rdata:000083A3 _rdata          ends
.rdata:000083A3
.bss:000083A4 ; ===========================================================================
.bss:000083A4
.bss:000083A4 ; Segment type: Uninitialized
.bss:000083A4 ; Segment permissions: Read/Write
.bss:000083A4 _bss            segment dword public 'BSS' use32
.bss:000083A4                 assume cs:_bss
.bss:000083A4                 ;org 83A4h
.bss:000083A4 ; COMDAT (pick any)
.bss:000083A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000083A4                 public ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.bss:000083A4 ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.bss:000083A4 ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A db    ? ;
.bss:000083A4                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o
.bss:000083A4                                         ; `dynamic atexit destructor for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o ...
.bss:000083A5                 db    ? ;
.bss:000083A6                 db    ? ;
.bss:000083A7                 db    ? ;
.bss:000083A7 _bss            ends
.bss:000083A7
.bss:000083A8 ; ===========================================================================
.bss:000083A8
.bss:000083A8 ; Segment type: Uninitialized
.bss:000083A8 ; Segment permissions: Read/Write
.bss:000083A8 _bss            segment dword public 'BSS' use32
.bss:000083A8                 assume cs:_bss
.bss:000083A8                 ;org 83A8h
.bss:000083A8 ; COMDAT (pick any)
.bss:000083A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000083A8                 public ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.bss:000083A8 ; std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object
.bss:000083A8 ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A db    ? ;
.bss:000083A8                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:000083A8                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:000083A9                 db    ? ;
.bss:000083AA                 db    ? ;
.bss:000083AB                 db    ? ;
.bss:000083AB _bss            ends
.bss:000083AB
.bss:000083AC ; ===========================================================================
.bss:000083AC
.bss:000083AC ; Segment type: Uninitialized
.bss:000083AC ; Segment permissions: Read/Write
.bss:000083AC _bss            segment dword public 'BSS' use32
.bss:000083AC                 assume cs:_bss
.bss:000083AC                 ;org 83ACh
.bss:000083AC ; COMDAT (pick any)
.bss:000083AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000083AC                 public ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.bss:000083AC ; std::_System_error_category std::_Error_objects<int>::_System_object
.bss:000083AC ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A db    ? ;
.bss:000083AC                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o
.bss:000083AC                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o ...
.bss:000083AD                 db    ? ;
.bss:000083AE                 db    ? ;
.bss:000083AF                 db    ? ;
.bss:000083AF _bss            ends
.bss:000083AF
.rdata:000083B0 ; ===========================================================================
.rdata:000083B0
.rdata:000083B0 ; Segment type: Pure data
.rdata:000083B0 ; Segment permissions: Read
.rdata:000083B0 _rdata          segment dword public 'DATA' use32
.rdata:000083B0                 assume cs:_rdata
.rdata:000083B0                 ;org 83B0h
.rdata:000083B0 ; COMDAT (pick any)
.rdata:000083B0                 public ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
.rdata:000083B0 ; int std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.rdata:000083B0 ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB dd 0FFFFFFFFh
.rdata:000083B0                                         ; DATA XREF: changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+94r
.rdata:000083B0                                         ; changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+CBr ...
.rdata:000083B0 _rdata          ends
.rdata:000083B0
.bss:000083B4 ; ===========================================================================
.bss:000083B4
.bss:000083B4 ; Segment type: Uninitialized
.bss:000083B4 ; Segment permissions: Read/Write
.bss:000083B4 _bss            segment dword public 'BSS' use32
.bss:000083B4                 assume cs:_bss
.bss:000083B4                 ;org 83B4h
.bss:000083B4 ; COMDAT (pick any)
.bss:000083B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000083B4                 public ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.bss:000083B4 ; std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id
.bss:000083B4 ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:000083B4                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+5o
.bss:000083B5                 db    ? ;
.bss:000083B6                 db    ? ;
.bss:000083B7                 db    ? ;
.bss:000083B7 _bss            ends
.bss:000083B7
.bss:000083B8 ; ===========================================================================
.bss:000083B8
.bss:000083B8 ; Segment type: Uninitialized
.bss:000083B8 ; Segment permissions: Read/Write
.bss:000083B8 _bss            segment dword public 'BSS' use32
.bss:000083B8                 assume cs:_bss
.bss:000083B8                 ;org 83B8h
.bss:000083B8 ; COMDAT (pick any)
.bss:000083B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:000083B8                 public ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.bss:000083B8 ; std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id
.bss:000083B8 ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:000083B8                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+5o
.bss:000083B9                 db    ? ;
.bss:000083BA                 db    ? ;
.bss:000083BB                 db    ? ;
.bss:000083BB _bss            ends
.bss:000083BB
.rdata:000083BC ; ===========================================================================
.rdata:000083BC
.rdata:000083BC ; Segment type: Pure data
.rdata:000083BC ; Segment permissions: Read
.rdata:000083BC ; Segment alignment 'qword' can not be represented in assembly
.rdata:000083BC _rdata          segment para public 'DATA' use32
.rdata:000083BC                 assume cs:_rdata
.rdata:000083BC                 ;org 83BCh
.rdata:000083BC ; COMDAT (pick any)
.rdata:000083BC                 public ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:000083BC ; wchar_t `string'
.rdata:000083BC ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:000083BC                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+5Do
.rdata:000083BC                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+8Ao ...
.rdata:000083BC                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:000083BC                 unicode 0, <clude\xstring>,0
.rdata:0000844A                 align 4
.rdata:0000844A _rdata          ends
.rdata:0000844A
.bss:0000844C ; ===========================================================================
.bss:0000844C
.bss:0000844C ; Segment type: Uninitialized
.bss:0000844C ; Segment permissions: Read/Write
.bss:0000844C _bss            segment dword public 'BSS' use32
.bss:0000844C                 assume cs:_bss
.bss:0000844C                 ;org 844Ch
.bss:0000844C ; COMDAT (pick any)
.bss:0000844C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000844C                 public ?id@?$numpunct@D@std@@2V0locale@2@A
.bss:0000844C ; std::locale::id std::numpunct<char>::id
.bss:0000844C ?id@?$numpunct@D@std@@2V0locale@2@A db    ? ;
.bss:0000844C                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)+5o
.bss:0000844D                 db    ? ;
.bss:0000844E                 db    ? ;
.bss:0000844F                 db    ? ;
.bss:0000844F _bss            ends
.bss:0000844F
.bss:00008450 ; ===========================================================================
.bss:00008450
.bss:00008450 ; Segment type: Uninitialized
.bss:00008450 ; Segment permissions: Read/Write
.bss:00008450 _bss            segment dword public 'BSS' use32
.bss:00008450                 assume cs:_bss
.bss:00008450                 ;org 8450h
.bss:00008450 ; COMDAT (pick any)
.bss:00008450                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00008450                 public ?id@?$numpunct@_W@std@@2V0locale@2@A
.bss:00008450 ; std::locale::id std::numpunct<wchar_t>::id
.bss:00008450 ?id@?$numpunct@_W@std@@2V0locale@2@A db    ? ;
.bss:00008450                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)+5o
.bss:00008451                 db    ? ;
.bss:00008452                 db    ? ;
.bss:00008453                 db    ? ;
.bss:00008453 _bss            ends
.bss:00008453
.rdata:00008454 ; ===========================================================================
.rdata:00008454
.rdata:00008454 ; Segment type: Pure data
.rdata:00008454 ; Segment permissions: Read
.rdata:00008454 _rdata          segment dword public 'DATA' use32
.rdata:00008454                 assume cs:_rdata
.rdata:00008454                 ;org 8454h
.rdata:00008454 ; COMDAT (pick any)
.rdata:00008454                 public ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
.rdata:00008454 ; `string'
.rdata:00008454 ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ db 'Standard C++ Libraries Out of Range',0
.rdata:00008454                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+6Fo
.rdata:00008454 _rdata          ends
.rdata:00008454
.rdata:00008478 ; ===========================================================================
.rdata:00008478
.rdata:00008478 ; Segment type: Pure data
.rdata:00008478 ; Segment permissions: Read
.rdata:00008478 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00008478 _rdata          segment para public 'DATA' use32
.rdata:00008478                 assume cs:_rdata
.rdata:00008478                 ;org 8478h
.rdata:00008478 ; COMDAT (pick any)
.rdata:00008478                 public ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
.rdata:00008478 ; `string'
.rdata:00008478 ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@:
.rdata:00008478                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void):loc_3E30o
.rdata:00008478                 unicode 0, <"Standard C++ Libraries Out of Range" && 0>,0
.rdata:000084CE                 align 10h
.rdata:000084CE _rdata          ends
.rdata:000084CE
.rdata:000084D0 ; ===========================================================================
.rdata:000084D0
.rdata:000084D0 ; Segment type: Pure data
.rdata:000084D0 ; Segment permissions: Read
.rdata:000084D0 _rdata          segment dword public 'DATA' use32
.rdata:000084D0                 assume cs:_rdata
.rdata:000084D0                 ;org 84D0h
.rdata:000084D0 ; COMDAT (pick any)
.rdata:000084D0                 public ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
.rdata:000084D0 ; `string'
.rdata:000084D0 ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@:
.rdata:000084D0                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+81o
.rdata:000084D0                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+53o
.rdata:000084D0                 unicode 0, <%s>,0
.rdata:000084D6                 align 4
.rdata:000084D6 _rdata          ends
.rdata:000084D6
.rdata:000084D8 ; ===========================================================================
.rdata:000084D8
.rdata:000084D8 ; Segment type: Pure data
.rdata:000084D8 ; Segment permissions: Read
.rdata:000084D8 _rdata          segment dword public 'DATA' use32
.rdata:000084D8                 assume cs:_rdata
.rdata:000084D8                 ;org 84D8h
.rdata:000084D8 ; COMDAT (pick any)
.rdata:000084D8                 public ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
.rdata:000084D8 ; `string'
.rdata:000084D8 ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@:
.rdata:000084D8                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+ADo
.rdata:000084D8                 unicode 0, <"out of range">,0
.rdata:000084F6                 align 4
.rdata:000084F6 _rdata          ends
.rdata:000084F6
.rdata:000084F8 ; ===========================================================================
.rdata:000084F8
.rdata:000084F8 ; Segment type: Pure data
.rdata:000084F8 ; Segment permissions: Read
.rdata:000084F8 _rdata          segment dword public 'DATA' use32
.rdata:000084F8                 assume cs:_rdata
.rdata:000084F8                 ;org 84F8h
.rdata:000084F8 ; COMDAT (pick any)
.rdata:000084F8                 public ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
.rdata:000084F8 ; char `string'[]
.rdata:000084F8 ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ db 'string too long',0
.rdata:000084F8                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+7o
.rdata:000084F8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+7o
.rdata:000084F8 _rdata          ends
.rdata:000084F8
.rdata:00008508 ; ===========================================================================
.rdata:00008508
.rdata:00008508 ; Segment type: Pure data
.rdata:00008508 ; Segment permissions: Read
.rdata:00008508 _rdata          segment dword public 'DATA' use32
.rdata:00008508                 assume cs:_rdata
.rdata:00008508                 ;org 8508h
.rdata:00008508 ; COMDAT (pick any)
.rdata:00008508                 public ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
.rdata:00008508 ; char `string'[]
.rdata:00008508 ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ db 'invalid string position',0
.rdata:00008508                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+7o
.rdata:00008508                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+7o
.rdata:00008508 _rdata          ends
.rdata:00008508
.rdata:00008520 ; ===========================================================================
.rdata:00008520
.rdata:00008520 ; Segment type: Pure data
.rdata:00008520 ; Segment permissions: Read
.rdata:00008520 _rdata          segment dword public 'DATA' use32
.rdata:00008520                 assume cs:_rdata
.rdata:00008520                 ;org 8520h
.rdata:00008520 ; COMDAT (pick any)
.rdata:00008520                 public ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
.rdata:00008520 ; char `string'[]
.rdata:00008520 ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ db 'vector<T> too long',0
.rdata:00008520                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Xlen(void)+7o
.rdata:00008533                 align 4
.rdata:00008533 _rdata          ends
.rdata:00008533
.rdata:00008534 ; ===========================================================================
.rdata:00008534
.rdata:00008534 ; Segment type: Pure data
.rdata:00008534 ; Segment permissions: Read
.rdata:00008534 _rdata          segment dword public 'DATA' use32
.rdata:00008534                 assume cs:_rdata
.rdata:00008534                 ;org 8534h
.rdata:00008534 ; COMDAT (pick any)
.rdata:00008534                 public ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
.rdata:00008534 ; `string'
.rdata:00008534 ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ db 'Standard C++ Libraries Invalid Argument',0
.rdata:00008534                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+41o
.rdata:00008534 _rdata          ends
.rdata:00008534
.rdata:0000855C ; ===========================================================================
.rdata:0000855C
.rdata:0000855C ; Segment type: Pure data
.rdata:0000855C ; Segment permissions: Read
.rdata:0000855C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000855C _rdata          segment para public 'DATA' use32
.rdata:0000855C                 assume cs:_rdata
.rdata:0000855C                 ;org 855Ch
.rdata:0000855C ; COMDAT (pick any)
.rdata:0000855C                 public ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
.rdata:0000855C ; `string'
.rdata:0000855C ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@:
.rdata:0000855C                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &):loc_4452o
.rdata:0000855C                 unicode 0, <"Standard C++ Libraries Invalid Argument" && 0>,0
.rdata:000085BA                 align 4
.rdata:000085BA _rdata          ends
.rdata:000085BA
.rdata:000085BC ; ===========================================================================
.rdata:000085BC
.rdata:000085BC ; Segment type: Pure data
.rdata:000085BC ; Segment permissions: Read
.rdata:000085BC _rdata          segment dword public 'DATA' use32
.rdata:000085BC                 assume cs:_rdata
.rdata:000085BC                 ;org 85BCh
.rdata:000085BC ; COMDAT (pick any)
.rdata:000085BC                 public ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
.rdata:000085BC ; `string'
.rdata:000085BC ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@:
.rdata:000085BC                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+85o
.rdata:000085BC                 unicode 0, <"invalid argument">,0
.rdata:000085E2                 align 4
.rdata:000085E2 _rdata          ends
.rdata:000085E2
.rdata:000085E4 ; ===========================================================================
.rdata:000085E4
.rdata:000085E4 ; Segment type: Pure data
.rdata:000085E4 ; Segment permissions: Read
.rdata:000085E4 _rdata          segment dword public 'DATA' use32
.rdata:000085E4                 assume cs:_rdata
.rdata:000085E4                 ;org 85E4h
.rdata:000085E4 ; COMDAT (pick any)
.rdata:000085E4                 public ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
.rdata:000085E4 ; wchar_t `string'
.rdata:000085E4 ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@:
.rdata:000085E4                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+34o
.rdata:000085E4                 unicode 0, <string iterators incompatible>,0
.rdata:000085E4 _rdata          ends
.rdata:000085E4
.rdata:00008620 ; ===========================================================================
.rdata:00008620
.rdata:00008620 ; Segment type: Pure data
.rdata:00008620 ; Segment permissions: Read
.rdata:00008620 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00008620 _rdata          segment para public 'DATA' use32
.rdata:00008620                 assume cs:_rdata
.rdata:00008620                 ;org 8620h
.rdata:00008620 ; COMDAT (pick any)
.rdata:00008620                 public ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
.rdata:00008620 ; `string'
.rdata:00008620 ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@:
.rdata:00008620                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+80o
.rdata:00008620                 unicode 0, <std::_String_const_iterator>
.rdata:00008620                 dw 3Ch
.rdata:00008620                 unicode 0, <class std::_String_val>
.rdata:00008620                 dw 3Ch
.rdata:00008620                 unicode 0, <struct std::_Simple_types>
.rdata:00008620                 dw 3Ch
.rdata:00008620                 unicode 0, <wchar_t>
.rdata:00008620                 dw 3Eh
.rdata:00008620                 unicode 0, < >
.rdata:00008620                 dw 3Eh
.rdata:00008620                 unicode 0, < >
.rdata:00008620                 dw 3Eh
.rdata:00008620                 unicode 0, <::_Compat>,0
.rdata:000086E6                 align 4
.rdata:000086E6 _rdata          ends
.rdata:000086E6
.rdata:000086E8 ; ===========================================================================
.rdata:000086E8
.rdata:000086E8 ; Segment type: Pure data
.rdata:000086E8 ; Segment permissions: Read
.rdata:000086E8 _rdata          segment dword public 'DATA' use32
.rdata:000086E8                 assume cs:_rdata
.rdata:000086E8                 ;org 86E8h
.rdata:000086E8 ; COMDAT (pick any)
.rdata:000086E8                 public ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
.rdata:000086E8 ; wchar_t `string'
.rdata:000086E8 ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@:
.rdata:000086E8                                         ; DATA XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+11o
.rdata:000086E8                                         ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)+11o ...
.rdata:000086E8                 unicode 0, <invalid null pointer>,0
.rdata:00008712                 align 4
.rdata:00008712 _rdata          ends
.rdata:00008712
.rdata:00008714 ; ===========================================================================
.rdata:00008714
.rdata:00008714 ; Segment type: Pure data
.rdata:00008714 ; Segment permissions: Read
.rdata:00008714 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00008714 _rdata          segment para public 'DATA' use32
.rdata:00008714                 assume cs:_rdata
.rdata:00008714                 ;org 8714h
.rdata:00008714 ; COMDAT (pick any)
.rdata:00008714                 public ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
.rdata:00008714 ; wchar_t `string'
.rdata:00008714 ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@:
.rdata:00008714                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+62o
.rdata:00008714                 unicode 0, <string iterator not dereferencable>,0
.rdata:0000875A                 align 4
.rdata:0000875A _rdata          ends
.rdata:0000875A
.rdata:0000875C ; ===========================================================================
.rdata:0000875C
.rdata:0000875C ; Segment type: Pure data
.rdata:0000875C ; Segment permissions: Read
.rdata:0000875C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000875C _rdata          segment para public 'DATA' use32
.rdata:0000875C                 assume cs:_rdata
.rdata:0000875C                 ;org 875Ch
.rdata:0000875C ; COMDAT (pick any)
.rdata:0000875C                 public ??_C@_1MM@BFHGHMKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
.rdata:0000875C ; `string'
.rdata:0000875C ??_C@_1MM@BFHGHMKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@:
.rdata:0000875C                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+A8o
.rdata:0000875C                 unicode 0, <std::_String_const_iterator>
.rdata:0000875C                 dw 3Ch
.rdata:0000875C                 unicode 0, <class std::_String_val>
.rdata:0000875C                 dw 3Ch
.rdata:0000875C                 unicode 0, <struct std::_Simple_types>
.rdata:0000875C                 dw 3Ch
.rdata:0000875C                 unicode 0, <wchar_t>
.rdata:0000875C                 dw 3Eh
.rdata:0000875C                 unicode 0, < >
.rdata:0000875C                 dw 3Eh
.rdata:0000875C                 unicode 0, < >
.rdata:0000875C                 dw 3Eh
.rdata:0000875C                 unicode 0, <::operator *>,0
.rdata:0000875C _rdata          ends
.rdata:0000875C
.rdata:00008828 ; ===========================================================================
.rdata:00008828
.rdata:00008828 ; Segment type: Pure data
.rdata:00008828 ; Segment permissions: Read
.rdata:00008828 _rdata          segment dword public 'DATA' use32
.rdata:00008828                 assume cs:_rdata
.rdata:00008828                 ;org 8828h
.rdata:00008828 ; COMDAT (pick any)
.rdata:00008828                 public ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:00008828 ; wchar_t `string'
.rdata:00008828 ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:00008828                                         ; DATA XREF: std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+43o
.rdata:00008828                 unicode 0, <invalid iterator range>,0
.rdata:00008856                 align 4
.rdata:00008856 _rdata          ends
.rdata:00008856
.rdata:00008858 ; ===========================================================================
.rdata:00008858
.rdata:00008858 ; Segment type: Pure data
.rdata:00008858 ; Segment permissions: Read
.rdata:00008858 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00008858 _rdata          segment para public 'DATA' use32
.rdata:00008858                 assume cs:_rdata
.rdata:00008858                 ;org 8858h
.rdata:00008858 ; COMDAT (pick any)
.rdata:00008858                 public ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:00008858 ; wchar_t `string'
.rdata:00008858 ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:00008858                                         ; DATA XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+2Fo
.rdata:00008858                                         ; std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+49o
.rdata:00008858                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:00008858                 unicode 0, <clude\xmemory>,0
.rdata:000088E6                 align 4
.rdata:000088E6 _rdata          ends
.rdata:000088E6
.rdata$r:000088E8 ; ===========================================================================
.rdata$r:000088E8
.rdata$r:000088E8 ; Segment type: Pure data
.rdata$r:000088E8 ; Segment permissions: Read
.rdata$r:000088E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000088E8                 assume cs:_rdata$r
.rdata$r:000088E8                 ;org 88E8h
.rdata$r:000088E8 ; COMDAT (pick any)
.rdata$r:000088E8                 public ??_R4error_category@std@@6B@
.rdata$r:000088E8 ; const std::error_category::`RTTI Complete Object Locator'
.rdata$r:000088E8 ??_R4error_category@std@@6B@ db    0    ; DATA XREF: .rdata:000082F0o
.rdata$r:000088E9                 db    0
.rdata$r:000088EA                 db    0
.rdata$r:000088EB                 db    0
.rdata$r:000088EC                 db    0
.rdata$r:000088ED                 db    0
.rdata$r:000088EE                 db    0
.rdata$r:000088EF                 db    0
.rdata$r:000088F0                 db    0
.rdata$r:000088F1                 db    0
.rdata$r:000088F2                 db    0
.rdata$r:000088F3                 db    0
.rdata$r:000088F4                 dd offset ??_R0?AVerror_category@std@@@8 ; std::error_category `RTTI Type Descriptor'
.rdata$r:000088F8                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:000088F8 _rdata$r        ends
.rdata$r:000088F8
.data$r:000088FC ; ===========================================================================
.data$r:000088FC
.data$r:000088FC ; Segment type: Pure data
.data$r:000088FC ; Segment permissions: Read/Write
.data$r:000088FC _data$r         segment dword public 'DATA' use32
.data$r:000088FC                 assume cs:_data$r
.data$r:000088FC                 ;org 88FCh
.data$r:000088FC ; COMDAT (pick any)
.data$r:000088FC                 public ??_R0?AVerror_category@std@@@8
.data$r:000088FC ; class std::error_category `RTTI Type Descriptor'
.data$r:000088FC ??_R0?AVerror_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:000088FC                                         ; DATA XREF: .rdata$r:000088F4o
.data$r:000088FC                                         ; .rdata$r:std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:000088FC                                         ; const type_info::`vftable'
.data$r:00008900                 db    0
.data$r:00008901                 db    0
.data$r:00008902                 db    0
.data$r:00008903                 db    0
.data$r:00008904                 db  2Eh ; .
.data$r:00008905                 db  3Fh ; ?
.data$r:00008906                 db  41h ; A
.data$r:00008907                 db  56h ; V
.data$r:00008908                 db  65h ; e
.data$r:00008909                 db  72h ; r
.data$r:0000890A                 db  72h ; r
.data$r:0000890B                 db  6Fh ; o
.data$r:0000890C                 db  72h ; r
.data$r:0000890D                 db  5Fh ; _
.data$r:0000890E                 db  63h ; c
.data$r:0000890F                 db  61h ; a
.data$r:00008910                 db  74h ; t
.data$r:00008911                 db  65h ; e
.data$r:00008912                 db  67h ; g
.data$r:00008913                 db  6Fh ; o
.data$r:00008914                 db  72h ; r
.data$r:00008915                 db  79h ; y
.data$r:00008916                 db  40h ; @
.data$r:00008917                 db  73h ; s
.data$r:00008918                 db  74h ; t
.data$r:00008919                 db  64h ; d
.data$r:0000891A                 db  40h ; @
.data$r:0000891B                 db  40h ; @
.data$r:0000891C                 db    0
.data$r:0000891D                 align 10h
.data$r:0000891D _data$r         ends
.data$r:0000891D
.rdata$r:00008920 ; ===========================================================================
.rdata$r:00008920
.rdata$r:00008920 ; Segment type: Pure data
.rdata$r:00008920 ; Segment permissions: Read
.rdata$r:00008920 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008920                 assume cs:_rdata$r
.rdata$r:00008920                 ;org 8920h
.rdata$r:00008920 ; COMDAT (pick any)
.rdata$r:00008920                 public ??_R3error_category@std@@8
.rdata$r:00008920 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008920 ??_R3error_category@std@@8 db    0      ; DATA XREF: .rdata$r:000088F8o
.rdata$r:00008920                                         ; .rdata$r:00008950o
.rdata$r:00008921                 db    0
.rdata$r:00008922                 db    0
.rdata$r:00008923                 db    0
.rdata$r:00008924                 db    0
.rdata$r:00008925                 db    0
.rdata$r:00008926                 db    0
.rdata$r:00008927                 db    0
.rdata$r:00008928                 db    1
.rdata$r:00008929                 db    0
.rdata$r:0000892A                 db    0
.rdata$r:0000892B                 db    0
.rdata$r:0000892C                 dd offset ??_R2error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
.rdata$r:0000892C _rdata$r        ends
.rdata$r:0000892C
.rdata$r:00008930 ; ===========================================================================
.rdata$r:00008930
.rdata$r:00008930 ; Segment type: Pure data
.rdata$r:00008930 ; Segment permissions: Read
.rdata$r:00008930 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008930                 assume cs:_rdata$r
.rdata$r:00008930                 ;org 8930h
.rdata$r:00008930 ; COMDAT (pick any)
.rdata$r:00008930                 public ??_R2error_category@std@@8
.rdata$r:00008930 ; std::error_category::`RTTI Base Class Array'
.rdata$r:00008930 ??_R2error_category@std@@8 dd offset ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:00008930                                         ; DATA XREF: .rdata$r:0000892Co
.rdata$r:00008930                                         ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008934                 db    0
.rdata$r:00008935                 align 4
.rdata$r:00008935 _rdata$r        ends
.rdata$r:00008935
.rdata$r:00008938 ; ===========================================================================
.rdata$r:00008938
.rdata$r:00008938 ; Segment type: Pure data
.rdata$r:00008938 ; Segment permissions: Read
.rdata$r:00008938 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008938                 assume cs:_rdata$r
.rdata$r:00008938                 ;org 8938h
.rdata$r:00008938 ; COMDAT (pick any)
.rdata$r:00008938                 public ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:00008938 ; std::error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00008938 ??_R1A@?0A@EA@error_category@std@@8 dd offset ??_R0?AVerror_category@std@@@8
.rdata$r:00008938                                         ; DATA XREF: .rdata$r:std::error_category::`RTTI Base Class Array'o
.rdata$r:00008938                                         ; .rdata$r:000089A8o ...
.rdata$r:00008938                                         ; std::error_category `RTTI Type Descriptor'
.rdata$r:0000893C                 db    0
.rdata$r:0000893D                 db    0
.rdata$r:0000893E                 db    0
.rdata$r:0000893F                 db    0
.rdata$r:00008940                 db    0
.rdata$r:00008941                 db    0
.rdata$r:00008942                 db    0
.rdata$r:00008943                 db    0
.rdata$r:00008944                 db 0FFh
.rdata$r:00008945                 db 0FFh
.rdata$r:00008946                 db 0FFh
.rdata$r:00008947                 db 0FFh
.rdata$r:00008948                 db    0
.rdata$r:00008949                 db    0
.rdata$r:0000894A                 db    0
.rdata$r:0000894B                 db    0
.rdata$r:0000894C                 db  40h ; @
.rdata$r:0000894D                 db    0
.rdata$r:0000894E                 db    0
.rdata$r:0000894F                 db    0
.rdata$r:00008950                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008950 _rdata$r        ends
.rdata$r:00008950
.rdata$r:00008954 ; ===========================================================================
.rdata$r:00008954
.rdata$r:00008954 ; Segment type: Pure data
.rdata$r:00008954 ; Segment permissions: Read
.rdata$r:00008954 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008954                 assume cs:_rdata$r
.rdata$r:00008954                 ;org 8954h
.rdata$r:00008954 ; COMDAT (pick any)
.rdata$r:00008954                 public ??_R4_Generic_error_category@std@@6B@
.rdata$r:00008954 ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata$r:00008954 ??_R4_Generic_error_category@std@@6B@ db    0
.rdata$r:00008954                                         ; DATA XREF: .rdata:0000830Co
.rdata$r:00008955                 db    0
.rdata$r:00008956                 db    0
.rdata$r:00008957                 db    0
.rdata$r:00008958                 db    0
.rdata$r:00008959                 db    0
.rdata$r:0000895A                 db    0
.rdata$r:0000895B                 db    0
.rdata$r:0000895C                 db    0
.rdata$r:0000895D                 db    0
.rdata$r:0000895E                 db    0
.rdata$r:0000895F                 db    0
.rdata$r:00008960                 dd offset ??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:00008964                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008964 _rdata$r        ends
.rdata$r:00008964
.data$r:00008968 ; ===========================================================================
.data$r:00008968
.data$r:00008968 ; Segment type: Pure data
.data$r:00008968 ; Segment permissions: Read/Write
.data$r:00008968 _data$r         segment dword public 'DATA' use32
.data$r:00008968                 assume cs:_data$r
.data$r:00008968                 ;org 8968h
.data$r:00008968 ; COMDAT (pick any)
.data$r:00008968                 public ??_R0?AV_Generic_error_category@std@@@8
.data$r:00008968 ; class std::_Generic_error_category `RTTI Type Descriptor'
.data$r:00008968 ??_R0?AV_Generic_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00008968                                         ; DATA XREF: .rdata$r:00008960o
.data$r:00008968                                         ; .rdata$r:std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00008968                                         ; const type_info::`vftable'
.data$r:0000896C                 align 10h
.data$r:00008970 a_?av_generic_e db '.?AV_Generic_error_category@std@@',0
.data$r:00008992                 align 4
.data$r:00008992 _data$r         ends
.data$r:00008992
.rdata$r:00008994 ; ===========================================================================
.rdata$r:00008994
.rdata$r:00008994 ; Segment type: Pure data
.rdata$r:00008994 ; Segment permissions: Read
.rdata$r:00008994 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008994                 assume cs:_rdata$r
.rdata$r:00008994                 ;org 8994h
.rdata$r:00008994 ; COMDAT (pick any)
.rdata$r:00008994                 public ??_R3_Generic_error_category@std@@8
.rdata$r:00008994 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008994 ??_R3_Generic_error_category@std@@8 db    0
.rdata$r:00008994                                         ; DATA XREF: .rdata$r:00008964o
.rdata$r:00008994                                         ; .rdata$r:000089C8o
.rdata$r:00008995                 db    0
.rdata$r:00008996                 db    0
.rdata$r:00008997                 db    0
.rdata$r:00008998                 db    0
.rdata$r:00008999                 db    0
.rdata$r:0000899A                 db    0
.rdata$r:0000899B                 db    0
.rdata$r:0000899C                 db    2
.rdata$r:0000899D                 db    0
.rdata$r:0000899E                 db    0
.rdata$r:0000899F                 db    0
.rdata$r:000089A0                 dd offset ??_R2_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:000089A0 _rdata$r        ends
.rdata$r:000089A0
.rdata$r:000089A4 ; ===========================================================================
.rdata$r:000089A4
.rdata$r:000089A4 ; Segment type: Pure data
.rdata$r:000089A4 ; Segment permissions: Read
.rdata$r:000089A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000089A4                 assume cs:_rdata$r
.rdata$r:000089A4                 ;org 89A4h
.rdata$r:000089A4 ; COMDAT (pick any)
.rdata$r:000089A4                 public ??_R2_Generic_error_category@std@@8
.rdata$r:000089A4 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:000089A4 ??_R2_Generic_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:000089A4                                         ; DATA XREF: .rdata$r:000089A0o
.rdata$r:000089A4                                         ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000089A8                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000089AC                 db    0
.rdata$r:000089AD                 align 10h
.rdata$r:000089AD _rdata$r        ends
.rdata$r:000089AD
.rdata$r:000089B0 ; ===========================================================================
.rdata$r:000089B0
.rdata$r:000089B0 ; Segment type: Pure data
.rdata$r:000089B0 ; Segment permissions: Read
.rdata$r:000089B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000089B0                 assume cs:_rdata$r
.rdata$r:000089B0                 ;org 89B0h
.rdata$r:000089B0 ; COMDAT (pick any)
.rdata$r:000089B0                 public ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:000089B0 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000089B0 ??_R1A@?0A@EA@_Generic_error_category@std@@8 dd offset ??_R0?AV_Generic_error_category@std@@@8
.rdata$r:000089B0                                         ; DATA XREF: .rdata$r:std::_Generic_error_category::`RTTI Base Class Array'o
.rdata$r:000089B0                                         ; .rdata$r:00008A20o ...
.rdata$r:000089B0                                         ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:000089B4                 db    1
.rdata$r:000089B5                 db    0
.rdata$r:000089B6                 db    0
.rdata$r:000089B7                 db    0
.rdata$r:000089B8                 db    0
.rdata$r:000089B9                 db    0
.rdata$r:000089BA                 db    0
.rdata$r:000089BB                 db    0
.rdata$r:000089BC                 db 0FFh
.rdata$r:000089BD                 db 0FFh
.rdata$r:000089BE                 db 0FFh
.rdata$r:000089BF                 db 0FFh
.rdata$r:000089C0                 db    0
.rdata$r:000089C1                 db    0
.rdata$r:000089C2                 db    0
.rdata$r:000089C3                 db    0
.rdata$r:000089C4                 db  40h ; @
.rdata$r:000089C5                 db    0
.rdata$r:000089C6                 db    0
.rdata$r:000089C7                 db    0
.rdata$r:000089C8                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:000089C8 _rdata$r        ends
.rdata$r:000089C8
.rdata$r:000089CC ; ===========================================================================
.rdata$r:000089CC
.rdata$r:000089CC ; Segment type: Pure data
.rdata$r:000089CC ; Segment permissions: Read
.rdata$r:000089CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000089CC                 assume cs:_rdata$r
.rdata$r:000089CC                 ;org 89CCh
.rdata$r:000089CC ; COMDAT (pick any)
.rdata$r:000089CC                 public ??_R4_Iostream_error_category@std@@6B@
.rdata$r:000089CC ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata$r:000089CC ??_R4_Iostream_error_category@std@@6B@ db    0
.rdata$r:000089CC                                         ; DATA XREF: .rdata:00008340o
.rdata$r:000089CD                 db    0
.rdata$r:000089CE                 db    0
.rdata$r:000089CF                 db    0
.rdata$r:000089D0                 db    0
.rdata$r:000089D1                 db    0
.rdata$r:000089D2                 db    0
.rdata$r:000089D3                 db    0
.rdata$r:000089D4                 db    0
.rdata$r:000089D5                 db    0
.rdata$r:000089D6                 db    0
.rdata$r:000089D7                 db    0
.rdata$r:000089D8                 dd offset ??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:000089DC                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:000089DC _rdata$r        ends
.rdata$r:000089DC
.data$r:000089E0 ; ===========================================================================
.data$r:000089E0
.data$r:000089E0 ; Segment type: Pure data
.data$r:000089E0 ; Segment permissions: Read/Write
.data$r:000089E0 _data$r         segment dword public 'DATA' use32
.data$r:000089E0                 assume cs:_data$r
.data$r:000089E0                 ;org 89E0h
.data$r:000089E0 ; COMDAT (pick any)
.data$r:000089E0                 public ??_R0?AV_Iostream_error_category@std@@@8
.data$r:000089E0 ; class std::_Iostream_error_category `RTTI Type Descriptor'
.data$r:000089E0 ??_R0?AV_Iostream_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:000089E0                                         ; DATA XREF: .rdata$r:000089D8o
.data$r:000089E0                                         ; .rdata$r:std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:000089E0                                         ; const type_info::`vftable'
.data$r:000089E4                 align 8
.data$r:000089E8 a_?av_iostream_ db '.?AV_Iostream_error_category@std@@',0
.data$r:00008A0B                 align 4
.data$r:00008A0B _data$r         ends
.data$r:00008A0B
.rdata$r:00008A0C ; ===========================================================================
.rdata$r:00008A0C
.rdata$r:00008A0C ; Segment type: Pure data
.rdata$r:00008A0C ; Segment permissions: Read
.rdata$r:00008A0C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008A0C                 assume cs:_rdata$r
.rdata$r:00008A0C                 ;org 8A0Ch
.rdata$r:00008A0C ; COMDAT (pick any)
.rdata$r:00008A0C                 public ??_R3_Iostream_error_category@std@@8
.rdata$r:00008A0C ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008A0C ??_R3_Iostream_error_category@std@@8 db    0
.rdata$r:00008A0C                                         ; DATA XREF: .rdata$r:000089DCo
.rdata$r:00008A0C                                         ; .rdata$r:00008A44o
.rdata$r:00008A0D                 db    0
.rdata$r:00008A0E                 db    0
.rdata$r:00008A0F                 db    0
.rdata$r:00008A10                 db    0
.rdata$r:00008A11                 db    0
.rdata$r:00008A12                 db    0
.rdata$r:00008A13                 db    0
.rdata$r:00008A14                 db    3
.rdata$r:00008A15                 db    0
.rdata$r:00008A16                 db    0
.rdata$r:00008A17                 db    0
.rdata$r:00008A18                 dd offset ??_R2_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:00008A18 _rdata$r        ends
.rdata$r:00008A18
.rdata$r:00008A1C ; ===========================================================================
.rdata$r:00008A1C
.rdata$r:00008A1C ; Segment type: Pure data
.rdata$r:00008A1C ; Segment permissions: Read
.rdata$r:00008A1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008A1C                 assume cs:_rdata$r
.rdata$r:00008A1C                 ;org 8A1Ch
.rdata$r:00008A1C ; COMDAT (pick any)
.rdata$r:00008A1C                 public ??_R2_Iostream_error_category@std@@8
.rdata$r:00008A1C ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:00008A1C ??_R2_Iostream_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:00008A1C                                         ; DATA XREF: .rdata$r:00008A18o
.rdata$r:00008A1C                                         ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008A20                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008A24                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008A28                 db    0
.rdata$r:00008A29                 align 4
.rdata$r:00008A29 _rdata$r        ends
.rdata$r:00008A29
.rdata$r:00008A2C ; ===========================================================================
.rdata$r:00008A2C
.rdata$r:00008A2C ; Segment type: Pure data
.rdata$r:00008A2C ; Segment permissions: Read
.rdata$r:00008A2C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008A2C                 assume cs:_rdata$r
.rdata$r:00008A2C                 ;org 8A2Ch
.rdata$r:00008A2C ; COMDAT (pick any)
.rdata$r:00008A2C                 public ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:00008A2C ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00008A2C ??_R1A@?0A@EA@_Iostream_error_category@std@@8 dd offset ??_R0?AV_Iostream_error_category@std@@@8
.rdata$r:00008A2C                                         ; DATA XREF: .rdata$r:std::_Iostream_error_category::`RTTI Base Class Array'o
.rdata$r:00008A2C                                         ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:00008A30                 db    2
.rdata$r:00008A31                 db    0
.rdata$r:00008A32                 db    0
.rdata$r:00008A33                 db    0
.rdata$r:00008A34                 db    0
.rdata$r:00008A35                 db    0
.rdata$r:00008A36                 db    0
.rdata$r:00008A37                 db    0
.rdata$r:00008A38                 db 0FFh
.rdata$r:00008A39                 db 0FFh
.rdata$r:00008A3A                 db 0FFh
.rdata$r:00008A3B                 db 0FFh
.rdata$r:00008A3C                 db    0
.rdata$r:00008A3D                 db    0
.rdata$r:00008A3E                 db    0
.rdata$r:00008A3F                 db    0
.rdata$r:00008A40                 db  40h ; @
.rdata$r:00008A41                 db    0
.rdata$r:00008A42                 db    0
.rdata$r:00008A43                 db    0
.rdata$r:00008A44                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008A44 _rdata$r        ends
.rdata$r:00008A44
.rdata$r:00008A48 ; ===========================================================================
.rdata$r:00008A48
.rdata$r:00008A48 ; Segment type: Pure data
.rdata$r:00008A48 ; Segment permissions: Read
.rdata$r:00008A48 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008A48                 assume cs:_rdata$r
.rdata$r:00008A48                 ;org 8A48h
.rdata$r:00008A48 ; COMDAT (pick any)
.rdata$r:00008A48                 public ??_R4_System_error_category@std@@6B@
.rdata$r:00008A48 ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata$r:00008A48 ??_R4_System_error_category@std@@6B@ db    0 ; DATA XREF: .rdata:00008380o
.rdata$r:00008A49                 db    0
.rdata$r:00008A4A                 db    0
.rdata$r:00008A4B                 db    0
.rdata$r:00008A4C                 db    0
.rdata$r:00008A4D                 db    0
.rdata$r:00008A4E                 db    0
.rdata$r:00008A4F                 db    0
.rdata$r:00008A50                 db    0
.rdata$r:00008A51                 db    0
.rdata$r:00008A52                 db    0
.rdata$r:00008A53                 db    0
.rdata$r:00008A54                 dd offset ??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:00008A58                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008A58 _rdata$r        ends
.rdata$r:00008A58
.data$r:00008A5C ; ===========================================================================
.data$r:00008A5C
.data$r:00008A5C ; Segment type: Pure data
.data$r:00008A5C ; Segment permissions: Read/Write
.data$r:00008A5C _data$r         segment dword public 'DATA' use32
.data$r:00008A5C                 assume cs:_data$r
.data$r:00008A5C                 ;org 8A5Ch
.data$r:00008A5C ; COMDAT (pick any)
.data$r:00008A5C                 public ??_R0?AV_System_error_category@std@@@8
.data$r:00008A5C ; class std::_System_error_category `RTTI Type Descriptor'
.data$r:00008A5C ??_R0?AV_System_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00008A5C                                         ; DATA XREF: .rdata$r:00008A54o
.data$r:00008A5C                                         ; .rdata$r:std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00008A5C                                         ; const type_info::`vftable'
.data$r:00008A60                 db    0
.data$r:00008A61                 db    0
.data$r:00008A62                 db    0
.data$r:00008A63                 db    0
.data$r:00008A64                 db  2Eh ; .
.data$r:00008A65                 db  3Fh ; ?
.data$r:00008A66                 db  41h ; A
.data$r:00008A67                 db  56h ; V
.data$r:00008A68                 db  5Fh ; _
.data$r:00008A69                 db  53h ; S
.data$r:00008A6A                 db  79h ; y
.data$r:00008A6B                 db  73h ; s
.data$r:00008A6C                 db  74h ; t
.data$r:00008A6D                 db  65h ; e
.data$r:00008A6E                 db  6Dh ; m
.data$r:00008A6F                 db  5Fh ; _
.data$r:00008A70                 db  65h ; e
.data$r:00008A71                 db  72h ; r
.data$r:00008A72                 db  72h ; r
.data$r:00008A73                 db  6Fh ; o
.data$r:00008A74                 db  72h ; r
.data$r:00008A75                 db  5Fh ; _
.data$r:00008A76                 db  63h ; c
.data$r:00008A77                 db  61h ; a
.data$r:00008A78                 db  74h ; t
.data$r:00008A79                 db  65h ; e
.data$r:00008A7A                 db  67h ; g
.data$r:00008A7B                 db  6Fh ; o
.data$r:00008A7C                 db  72h ; r
.data$r:00008A7D                 db  79h ; y
.data$r:00008A7E                 db  40h ; @
.data$r:00008A7F                 db  73h ; s
.data$r:00008A80                 db  74h ; t
.data$r:00008A81                 db  64h ; d
.data$r:00008A82                 db  40h ; @
.data$r:00008A83                 db  40h ; @
.data$r:00008A84                 db    0
.data$r:00008A85                 align 4
.data$r:00008A85 _data$r         ends
.data$r:00008A85
.rdata$r:00008A88 ; ===========================================================================
.rdata$r:00008A88
.rdata$r:00008A88 ; Segment type: Pure data
.rdata$r:00008A88 ; Segment permissions: Read
.rdata$r:00008A88 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008A88                 assume cs:_rdata$r
.rdata$r:00008A88                 ;org 8A88h
.rdata$r:00008A88 ; COMDAT (pick any)
.rdata$r:00008A88                 public ??_R3_System_error_category@std@@8
.rdata$r:00008A88 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008A88 ??_R3_System_error_category@std@@8 db    0 ; DATA XREF: .rdata$r:00008A58o
.rdata$r:00008A88                                         ; .rdata$r:00008AC0o
.rdata$r:00008A89                 db    0
.rdata$r:00008A8A                 db    0
.rdata$r:00008A8B                 db    0
.rdata$r:00008A8C                 db    0
.rdata$r:00008A8D                 db    0
.rdata$r:00008A8E                 db    0
.rdata$r:00008A8F                 db    0
.rdata$r:00008A90                 db    3
.rdata$r:00008A91                 db    0
.rdata$r:00008A92                 db    0
.rdata$r:00008A93                 db    0
.rdata$r:00008A94                 dd offset ??_R2_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:00008A94 _rdata$r        ends
.rdata$r:00008A94
.rdata$r:00008A98 ; ===========================================================================
.rdata$r:00008A98
.rdata$r:00008A98 ; Segment type: Pure data
.rdata$r:00008A98 ; Segment permissions: Read
.rdata$r:00008A98 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008A98                 assume cs:_rdata$r
.rdata$r:00008A98                 ;org 8A98h
.rdata$r:00008A98 ; COMDAT (pick any)
.rdata$r:00008A98                 public ??_R2_System_error_category@std@@8
.rdata$r:00008A98 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:00008A98 ??_R2_System_error_category@std@@8 dd offset ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:00008A98                                         ; DATA XREF: .rdata$r:00008A94o
.rdata$r:00008A98                                         ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008A9C                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008AA0                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00008AA4                 db    0
.rdata$r:00008AA5                 align 4
.rdata$r:00008AA5 _rdata$r        ends
.rdata$r:00008AA5
.rdata$r:00008AA8 ; ===========================================================================
.rdata$r:00008AA8
.rdata$r:00008AA8 ; Segment type: Pure data
.rdata$r:00008AA8 ; Segment permissions: Read
.rdata$r:00008AA8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00008AA8                 assume cs:_rdata$r
.rdata$r:00008AA8                 ;org 8AA8h
.rdata$r:00008AA8 ; COMDAT (pick any)
.rdata$r:00008AA8                 public ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:00008AA8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00008AA8 ??_R1A@?0A@EA@_System_error_category@std@@8 dd offset ??_R0?AV_System_error_category@std@@@8
.rdata$r:00008AA8                                         ; DATA XREF: .rdata$r:std::_System_error_category::`RTTI Base Class Array'o
.rdata$r:00008AA8                                         ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:00008AAC                 db    2
.rdata$r:00008AAD                 db    0
.rdata$r:00008AAE                 db    0
.rdata$r:00008AAF                 db    0
.rdata$r:00008AB0                 db    0
.rdata$r:00008AB1                 db    0
.rdata$r:00008AB2                 db    0
.rdata$r:00008AB3                 db    0
.rdata$r:00008AB4                 db 0FFh
.rdata$r:00008AB5                 db 0FFh
.rdata$r:00008AB6                 db 0FFh
.rdata$r:00008AB7                 db 0FFh
.rdata$r:00008AB8                 db    0
.rdata$r:00008AB9                 db    0
.rdata$r:00008ABA                 db    0
.rdata$r:00008ABB                 db    0
.rdata$r:00008ABC                 db  40h ; @
.rdata$r:00008ABD                 db    0
.rdata$r:00008ABE                 db    0
.rdata$r:00008ABF                 db    0
.rdata$r:00008AC0                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00008AC0 _rdata$r        ends
.rdata$r:00008AC0
.CRT$XCU:00008AC4 ; ===========================================================================
.CRT$XCU:00008AC4
.CRT$XCU:00008AC4 ; Segment type: Pure data
.CRT$XCU:00008AC4 ; Segment permissions: Read
.CRT$XCU:00008AC4 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00008AC4                 assume cs:_CRT$XCU
.CRT$XCU:00008AC4                 ;org 8AC4h
.CRT$XCU:00008AC4 _piecewise_construct$initializer$ dd offset ??__Epiecewise_construct@std@@YAXXZ ; std::`dynamic initializer for 'piecewise_construct''(void)
.CRT$XCU:00008AC8 _allocator_arg$initializer$ dd offset ??__Eallocator_arg@std@@YAXXZ ; std::`dynamic initializer for 'allocator_arg''(void)
.CRT$XCU:00008ACC _currentExt$initializer$ dd offset ??__EcurrentExt@@YAXXZ ; `dynamic initializer for 'currentExt''(void)
.CRT$XCU:00008ACC _CRT$XCU        ends
.CRT$XCU:00008ACC
.CRT$XCU:00008AD0 ; ===========================================================================
.CRT$XCU:00008AD0
.CRT$XCU:00008AD0 ; Segment type: Pure data
.CRT$XCU:00008AD0 ; Segment permissions: Read
.CRT$XCU:00008AD0 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00008AD0                 assume cs:_CRT$XCU
.CRT$XCU:00008AD0                 ;org 8AD0h
.CRT$XCU:00008AD0 ; COMDAT (pick associative to section at 83A4)
.CRT$XCU:00008AD0 ; public: static void (__cdecl *std::_Error_objects<int>::_Generic_object$initializer$)(void)
.CRT$XCU:00008AD0 ?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.CRT$XCU:00008AD0 _CRT$XCU        ends
.CRT$XCU:00008AD0
.CRT$XCU:00008AD4 ; ===========================================================================
.CRT$XCU:00008AD4
.CRT$XCU:00008AD4 ; Segment type: Pure data
.CRT$XCU:00008AD4 ; Segment permissions: Read
.CRT$XCU:00008AD4 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00008AD4                 assume cs:_CRT$XCU
.CRT$XCU:00008AD4                 ;org 8AD4h
.CRT$XCU:00008AD4 ; COMDAT (pick associative to section at 83A8)
.CRT$XCU:00008AD4 ; public: static void (__cdecl *std::_Error_objects<int>::_Iostream_object$initializer$)(void)
.CRT$XCU:00008AD4 ?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.CRT$XCU:00008AD4 _CRT$XCU        ends
.CRT$XCU:00008AD4
.CRT$XCU:00008AD8 ; ===========================================================================
.CRT$XCU:00008AD8
.CRT$XCU:00008AD8 ; Segment type: Pure data
.CRT$XCU:00008AD8 ; Segment permissions: Read
.CRT$XCU:00008AD8 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00008AD8                 assume cs:_CRT$XCU
.CRT$XCU:00008AD8                 ;org 8AD8h
.CRT$XCU:00008AD8 ; COMDAT (pick associative to section at 83AC)
.CRT$XCU:00008AD8 ; public: static void (__cdecl *std::_Error_objects<int>::_System_object$initializer$)(void)
.CRT$XCU:00008AD8 ?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.CRT$XCU:00008AD8 _CRT$XCU        ends
.CRT$XCU:00008AD8
.CRT$XCU:00008ADC ; ===========================================================================
.CRT$XCU:00008ADC
.CRT$XCU:00008ADC ; Segment type: Pure data
.CRT$XCU:00008ADC ; Segment permissions: Read
.CRT$XCU:00008ADC _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00008ADC                 assume cs:_CRT$XCU
.CRT$XCU:00008ADC                 ;org 8ADCh
.CRT$XCU:00008ADC ; COMDAT (pick associative to section at 83B4)
.CRT$XCU:00008ADC ; public: static void (__cdecl *std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id$initializer$)(void)
.CRT$XCU:00008ADC ?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)
.CRT$XCU:00008ADC _CRT$XCU        ends
.CRT$XCU:00008ADC
.CRT$XCU:00008AE0 ; ===========================================================================
.CRT$XCU:00008AE0
.CRT$XCU:00008AE0 ; Segment type: Pure data
.CRT$XCU:00008AE0 ; Segment permissions: Read
.CRT$XCU:00008AE0 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00008AE0                 assume cs:_CRT$XCU
.CRT$XCU:00008AE0                 ;org 8AE0h
.CRT$XCU:00008AE0 ; COMDAT (pick associative to section at 83B8)
.CRT$XCU:00008AE0 ; public: static void (__cdecl *std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id$initializer$)(void)
.CRT$XCU:00008AE0 ?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)
.CRT$XCU:00008AE0 _CRT$XCU        ends
.CRT$XCU:00008AE0
.CRT$XCU:00008AE4 ; ===========================================================================
.CRT$XCU:00008AE4
.CRT$XCU:00008AE4 ; Segment type: Pure data
.CRT$XCU:00008AE4 ; Segment permissions: Read
.CRT$XCU:00008AE4 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00008AE4                 assume cs:_CRT$XCU
.CRT$XCU:00008AE4                 ;org 8AE4h
.CRT$XCU:00008AE4 ; COMDAT (pick associative to section at 844C)
.CRT$XCU:00008AE4 ; public: static void (__cdecl *std::numpunct<char>::id$initializer$)(void)
.CRT$XCU:00008AE4 ?id$initializer$@?$numpunct@D@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)
.CRT$XCU:00008AE4 _CRT$XCU        ends
.CRT$XCU:00008AE4
.CRT$XCU:00008AE8 ; ===========================================================================
.CRT$XCU:00008AE8
.CRT$XCU:00008AE8 ; Segment type: Pure data
.CRT$XCU:00008AE8 ; Segment permissions: Read
.CRT$XCU:00008AE8 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00008AE8                 assume cs:_CRT$XCU
.CRT$XCU:00008AE8                 ;org 8AE8h
.CRT$XCU:00008AE8 ; COMDAT (pick associative to section at 8450)
.CRT$XCU:00008AE8 ; public: static void (__cdecl *std::numpunct<wchar_t>::id$initializer$)(void)
.CRT$XCU:00008AE8 ?id$initializer$@?$numpunct@_W@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)
.CRT$XCU:00008AE8 _CRT$XCU        ends
.CRT$XCU:00008AE8
UNDEF:00008AF0 ; ===========================================================================
UNDEF:00008AF0
UNDEF:00008AF0 ; Segment type: Externs
UNDEF:00008AF0 ; UNDEF
UNDEF:00008AF0                 extrn __purecall:near   ; DATA XREF: .rdata:000082F8o
UNDEF:00008AF0                                         ; .rdata:000082FCo
UNDEF:00008AF4 ; void *__cdecl operator new(unsigned int)
UNDEF:00008AF4                 extrn ??2@YAPAXI@Z:near ; CODE XREF: std::_Allocate<char>(uint,char *)+1Dp
UNDEF:00008AF4                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+23p ...
UNDEF:00008AF8 ; void __cdecl operator delete(void *)
UNDEF:00008AF8                 extrn ??3@YAXPAX@Z:near ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`scalar deleting destructor'(uint)+1Bp
UNDEF:00008AF8                                         ; std::_Generic_error_category::`scalar deleting destructor'(uint)+1Bp ...
UNDEF:00008AFC ; int __cdecl atexit(void (__cdecl *)())
UNDEF:00008AFC                 extrn _atexit:near      ; CODE XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+12p
UNDEF:00008AFC                                         ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+12p ...
UNDEF:00008B00                 extrn ___report_rangecheckfailure:near
UNDEF:00008B00                                         ; CODE XREF: FileDialog::doOpenMultiFilesDlg(void):loc_D66p
UNDEF:00008B04                 extrn __invalid_parameter:near
UNDEF:00008B04                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+B2p
UNDEF:00008B04                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+8Ap
UNDEF:00008B08 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00008B08                 extrn _memcpy:near      ; CODE XREF: FileDialog::setExtsFilter(wchar_t const *,wchar_t const *)+D8p
UNDEF:00008B08                                         ; FileDialog::setExtsFilter(wchar_t const *,wchar_t const *)+179p ...
UNDEF:00008B0C ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:00008B0C                 extrn _memset:near      ; CODE XREF: FileDialog::setExtsFilter(wchar_t const *,wchar_t const *)+151p
UNDEF:00008B10 ; size_t __cdecl strlen(const char *Str)
UNDEF:00008B10                 extrn _strlen:near      ; CODE XREF: std::char_traits<char>::length(char const *)+1Bp
UNDEF:00008B14 ; void *__cdecl memmove(void *Dst, const void *Src, size_t Size)
UNDEF:00008B14                 extrn _memmove:near     ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+1Ep
UNDEF:00008B14                                         ; _wmemmove+11p
UNDEF:00008B18 ; size_t __cdecl wcslen(const wchar_t *Str)
UNDEF:00008B18                 extrn _wcslen:near      ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+1Bp
UNDEF:00008B1C ; BOOL __stdcall SetCurrentDirectoryW(LPCWSTR lpPathName)
UNDEF:00008B1C                 extrn __imp__SetCurrentDirectoryW@4:near
UNDEF:00008B1C                                         ; CODE XREF: $LN14+19p
UNDEF:00008B1C                                         ; FileDialog::doOpenMultiFilesDlg(void)+DAp ...
UNDEF:00008B20 ; DWORD __stdcall GetCurrentDirectoryW(DWORD nBufferLength, LPWSTR lpBuffer)
UNDEF:00008B20                 extrn __imp__GetCurrentDirectoryW@8:near
UNDEF:00008B20                                         ; CODE XREF: FileDialog::doSaveDlg(void)+44p
UNDEF:00008B20                                         ; FileDialog::doSaveDlg(void)+11Fp ...
UNDEF:00008B24 ; LPWSTR __stdcall lstrcpyW(LPWSTR lpString1, LPCWSTR lpString2)
UNDEF:00008B24                 extrn __imp__lstrcpyW@8:near
UNDEF:00008B24                                         ; CODE XREF: FileDialog::setExtsFilter(wchar_t const *,wchar_t const *)+1BFp
UNDEF:00008B24                                         ; FileDialog::setExtsFilter(wchar_t const *,wchar_t const *)+203p ...
UNDEF:00008B28 ; LPWSTR __stdcall lstrcatW(LPWSTR lpString1, LPCWSTR lpString2)
UNDEF:00008B28                 extrn __imp__lstrcatW@8:near
UNDEF:00008B28                                         ; CODE XREF: FileDialog::doOpenMultiFilesDlg(void)+1A8p
UNDEF:00008B28                                         ; FileDialog::doOpenMultiFilesDlg(void)+211p
UNDEF:00008B28                                         ; DATA XREF: ...
UNDEF:00008B2C ; int __stdcall lstrlenW(LPCWSTR lpString)
UNDEF:00008B2C                 extrn __imp__lstrlenW@4:near
UNDEF:00008B2C                                         ; CODE XREF: FileDialog::setExtsFilter(wchar_t const *,wchar_t const *)+7Ap
UNDEF:00008B2C                                         ; FileDialog::setExtsFilter(wchar_t const *,wchar_t const *)+20Dp ...
UNDEF:00008B30 ; LRESULT __stdcall SendMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:00008B30                 extrn __imp__SendMessageW@16:near
UNDEF:00008B30                                         ; CODE XREF: FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+88p
UNDEF:00008B30                                         ; FileDialog::run(HWND__ *,uint,uint,long)+CFp ...
UNDEF:00008B34 ; BOOL __stdcall ShowWindow(HWND hWnd, int nCmdShow)
UNDEF:00008B34                 extrn __imp__ShowWindow@8:near
UNDEF:00008B34                                         ; CODE XREF: goToCenter(HWND__ *)+49p
UNDEF:00008B34                                         ; DATA XREF: goToCenter(HWND__ *)+49r
UNDEF:00008B38 ; BOOL __stdcall SetWindowPos(HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags)
UNDEF:00008B38                 extrn __imp__SetWindowPos@28:near
UNDEF:00008B38                                         ; CODE XREF: goToCenter(HWND__ *)+DFp
UNDEF:00008B38                                         ; DATA XREF: goToCenter(HWND__ *)+DFr
UNDEF:00008B3C ; HWND __stdcall GetDlgItem(HWND hDlg, int nIDDlgItem)
UNDEF:00008B3C                 extrn __imp__GetDlgItem@8:near
UNDEF:00008B3C                                         ; CODE XREF: FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+70p
UNDEF:00008B3C                                         ; FileDialog::run(HWND__ *,uint,uint,long)+98p ...
UNDEF:00008B40 ; BOOL __stdcall SetWindowTextW(HWND hWnd, LPCWSTR lpString)
UNDEF:00008B40                 extrn __imp__SetWindowTextW@8:near
UNDEF:00008B40                                         ; CODE XREF: fileDlgProc(HWND__ *,uint,uint,long)+199p
UNDEF:00008B40                                         ; addExt(HWND__ *,HWND__ *)+18Fp
UNDEF:00008B40                                         ; DATA XREF: ...
UNDEF:00008B44 ; int __stdcall GetWindowTextW(HWND hWnd, LPWSTR lpString, int nMaxCount)
UNDEF:00008B44                 extrn __imp__GetWindowTextW@12:near
UNDEF:00008B44                                         ; CODE XREF: fileDlgProc(HWND__ *,uint,uint,long)+86p
UNDEF:00008B44                                         ; addExt(HWND__ *,HWND__ *)+45p
UNDEF:00008B44                                         ; DATA XREF: ...
UNDEF:00008B48 ; BOOL __stdcall GetClientRect(HWND hWnd, LPRECT lpRect)
UNDEF:00008B48                 extrn __imp__GetClientRect@8:near
UNDEF:00008B48                                         ; CODE XREF: goToCenter(HWND__ *)+25p
UNDEF:00008B48                                         ; goToCenter(HWND__ *)+57p
UNDEF:00008B48                                         ; DATA XREF: ...
UNDEF:00008B4C ; BOOL __stdcall GetWindowRect(HWND hWnd, LPRECT lpRect)
UNDEF:00008B4C                 extrn __imp__GetWindowRect@8:near
UNDEF:00008B4C                                         ; CODE XREF: goToCenter(HWND__ *)+95p
UNDEF:00008B4C                                         ; DATA XREF: goToCenter(HWND__ *)+95r
UNDEF:00008B50 ; int __stdcall MessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType)
UNDEF:00008B50                 extrn __imp__MessageBoxA@16:near
UNDEF:00008B50                                         ; CODE XREF: __catch$?doSaveDlg@FileDialog@@QAEPA_WXZ$0+19p
UNDEF:00008B50                                         ; __catch$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ$0+19p
UNDEF:00008B50                                         ; DATA XREF: ...
UNDEF:00008B54 ; int __stdcall MessageBoxW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType)
UNDEF:00008B54                 extrn __imp__MessageBoxW@16:near
UNDEF:00008B54                                         ; CODE XREF: __catch$?doSaveDlg@FileDialog@@QAEPA_WXZ$1+Ep
UNDEF:00008B54                                         ; __catch$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ$1+Ep
UNDEF:00008B54                                         ; DATA XREF: ...
UNDEF:00008B58 ; BOOL __stdcall ClientToScreen(HWND hWnd, LPPOINT lpPoint)
UNDEF:00008B58                 extrn __imp__ClientToScreen@8:near
UNDEF:00008B58                                         ; CODE XREF: goToCenter(HWND__ *)+87p
UNDEF:00008B58                                         ; DATA XREF: goToCenter(HWND__ *)+87r
UNDEF:00008B5C ; LONG __stdcall GetWindowLongW(HWND hWnd, int nIndex)
UNDEF:00008B5C                 extrn __imp__GetWindowLongW@8:near
UNDEF:00008B5C                                         ; CODE XREF: FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+97p
UNDEF:00008B5C                                         ; FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+C8p
UNDEF:00008B5C                                         ; DATA XREF: ...
UNDEF:00008B60 ; LONG __stdcall SetWindowLongW(HWND hWnd, int nIndex, LONG dwNewLong)
UNDEF:00008B60                 extrn __imp__SetWindowLongW@12:near
UNDEF:00008B60                                         ; CODE XREF: FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+3Ap
UNDEF:00008B60                                         ; FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+B8p
UNDEF:00008B60                                         ; DATA XREF: ...
UNDEF:00008B64 ; HWND __stdcall GetParent(HWND hWnd)
UNDEF:00008B64                 extrn __imp__GetParent@4:near
UNDEF:00008B64                                         ; CODE XREF: goToCenter(HWND__ *)+14p
UNDEF:00008B64                                         ; FileDialog::OFNHookProc(HWND__ *,uint,uint,long)+44p ...
UNDEF:00008B68 ; BOOL __stdcall GetOpenFileNameW(LPOPENFILENAMEW)
UNDEF:00008B68                 extrn __imp__GetOpenFileNameW@4:near
UNDEF:00008B68                                         ; CODE XREF: FileDialog::doOpenMultiFilesDlg(void)+8Fp
UNDEF:00008B68                                         ; FileDialog::doOpenSingleFileDlg(void)+A7p
UNDEF:00008B68                                         ; DATA XREF: ...
UNDEF:00008B6C ; BOOL __stdcall GetSaveFileNameW(LPOPENFILENAMEW)
UNDEF:00008B6C                 extrn __imp__GetSaveFileNameW@4:near
UNDEF:00008B6C                                         ; CODE XREF: FileDialog::doSaveDlg(void)+D1p
UNDEF:00008B6C                                         ; DATA XREF: FileDialog::doSaveDlg(void)+D1r
UNDEF:00008B70 ; BOOL __stdcall PathIsDirectoryW(LPCWSTR pszPath)
UNDEF:00008B70                 extrn __imp__PathIsDirectoryW@4:near
UNDEF:00008B70                                         ; CODE XREF: fileDlgProc(HWND__ *,uint,uint,long)+C4p
UNDEF:00008B70                                         ; DATA XREF: fileDlgProc(HWND__ *,uint,uint,long)+C4r
UNDEF:00008B74 ; _DWORD __thiscall std::_Lockit::_Lockit(std::_Lockit *__hidden this, int)
UNDEF:00008B74                 extrn ??0_Lockit@std@@QAE@H@Z:near
UNDEF:00008B74                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+2Dp
UNDEF:00008B74                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+55p ...
UNDEF:00008B78 ; _DWORD __thiscall std::_Lockit::~_Lockit(std::_Lockit *__hidden this)
UNDEF:00008B78                 extrn ??1_Lockit@std@@QAE@XZ:near
UNDEF:00008B78                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+4Bp
UNDEF:00008B78                                         ; __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0+3j ...
UNDEF:00008B7C                 extrn __hypot:near      ; CODE XREF: _hypot+1Dp
UNDEF:00008B80 ; _DWORD __thiscall std::exception::~exception(std::exception *__hidden this)
UNDEF:00008B80                 extrn ??1exception@std@@UAE@XZ:near
UNDEF:00008B80                                         ; CODE XREF: __catch$?doSaveDlg@FileDialog@@QAEPA_WXZ$0+29p
UNDEF:00008B80                                         ; __catch$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ$0+29p ...
UNDEF:00008B84 ; const char *__thiscall std::exception::what(std::exception *__hidden this)
UNDEF:00008B84                 extrn ?what@exception@std@@UBEPBDXZ:near
UNDEF:00008B84                                         ; CODE XREF: __catch$?doSaveDlg@FileDialog@@QAEPA_WXZ$0+11p
UNDEF:00008B84                                         ; __catch$?doOpenSingleFileDlg@FileDialog@@QAEPA_WXZ$0+11p
UNDEF:00008B88 ; void __cdecl operator delete[](void *)
UNDEF:00008B88                 extrn ??_V@YAXPAX@Z:near
UNDEF:00008B88                                         ; CODE XREF: FileDialog::~FileDialog(void)+4Bp
UNDEF:00008B88                                         ; FileDialog::setExtsFilter(wchar_t const *,wchar_t const *)+F0p ...
UNDEF:00008B8C ; void *__cdecl operator new[](unsigned int)
UNDEF:00008B8C                 extrn ??_U@YAPAXI@Z:near
UNDEF:00008B8C                                         ; CODE XREF: FileDialog::setExtsFilter(wchar_t const *,wchar_t const *)+ADp
UNDEF:00008B8C                                         ; FileDialog::setExtsFilter(wchar_t const *,wchar_t const *)+128p ...
UNDEF:00008B90                 extrn __CrtDbgReportW:near
UNDEF:00008B90                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+91p
UNDEF:00008B90                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+66p
UNDEF:00008B94 ; void __cdecl std::_Debug_message(const wchar_t *, const wchar_t *, unsigned int)
UNDEF:00008B94                 extrn ?_Debug_message@std@@YAXPB_W0I@Z:near
UNDEF:00008B94                                         ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+16p
UNDEF:00008B94                                         ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)+16p ...
UNDEF:00008B98 ; void __cdecl std::_Xbad_alloc()
UNDEF:00008B98                 extrn ?_Xbad_alloc@std@@YAXXZ:near
UNDEF:00008B98                                         ; CODE XREF: std::_Allocate<char>(uint,char *):loc_1B3Ap
UNDEF:00008B98                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *):loc_1B7Cp ...
UNDEF:00008B9C ; void __cdecl std::_Xlength_error(const char *)
UNDEF:00008B9C                 extrn ?_Xlength_error@std@@YAXPBD@Z:near
UNDEF:00008B9C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+Cp
UNDEF:00008B9C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+Cp ...
UNDEF:00008BA0 ; void __cdecl std::_Xout_of_range(const char *)
UNDEF:00008BA0                 extrn ?_Xout_of_range@std@@YAXPBD@Z:near
UNDEF:00008BA0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+Cp
UNDEF:00008BA0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+Cp
UNDEF:00008BA4 ; public: virtual void * __thiscall std::error_category::`vector deleting destructor'(unsigned int)
UNDEF:00008BA4                 extrn ??_Eerror_category@std@@UAEPAXI@Z:near ; weak
UNDEF:00008BA4                                         ; DATA XREF: .rdata:const std::error_category::`vftable'o
UNDEF:00008BA8 ; const char *__cdecl std::_Syserror_map(int)
UNDEF:00008BA8                 extrn ?_Syserror_map@std@@YAPBDH@Z:near
UNDEF:00008BA8                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+Bp
UNDEF:00008BA8                                         ; std::_Generic_error_category::message(int)+33p
UNDEF:00008BAC ; const char *__cdecl std::_Winerror_map(int)
UNDEF:00008BAC                 extrn ?_Winerror_map@std@@YAPBDH@Z:near
UNDEF:00008BAC                                         ; CODE XREF: std::_System_error_category::message(int)+33p
UNDEF:00008BB0 ; public: virtual void * __thiscall std::_Generic_error_category::`vector deleting destructor'(unsigned int)
UNDEF:00008BB0                 extrn ??_E_Generic_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:00008BB0                                         ; DATA XREF: .rdata:const std::_Generic_error_category::`vftable'o
UNDEF:00008BB4 ; public: virtual void * __thiscall std::_Iostream_error_category::`vector deleting destructor'(unsigned int)
UNDEF:00008BB4                 extrn ??_E_Iostream_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:00008BB4                                         ; DATA XREF: .rdata:const std::_Iostream_error_category::`vftable'o
UNDEF:00008BB8 ; public: virtual void * __thiscall std::_System_error_category::`vector deleting destructor'(unsigned int)
UNDEF:00008BB8                 extrn ??_E_System_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:00008BB8                                         ; DATA XREF: .rdata:const std::_System_error_category::`vftable'o
UNDEF:00008BBC ; void __thiscall NppParameters::setWorkingDir(NppParameters *__hidden this, const wchar_t *)
UNDEF:00008BBC                 extrn ?setWorkingDir@NppParameters@@QAEXPB_W@Z:near
UNDEF:00008BBC                                         ; CODE XREF: FileDialog::doSaveDlg(void)+132p
UNDEF:00008BBC                                         ; FileDialog::doOpenMultiFilesDlg(void)+CEp ...
UNDEF:00008BC0 ; __fastcall __security_check_cookie(x)
UNDEF:00008BC0                 extrn @__security_check_cookie@4:near
UNDEF:00008BC0                                         ; CODE XREF: changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+196p
UNDEF:00008BC0                                         ; goToCenter(HWND__ *)+EAp ...
UNDEF:00008BC4 ; __stdcall _CxxThrowException(x, x)
UNDEF:00008BC4                 extrn __CxxThrowException@8:near
UNDEF:00008BC4                                         ; CODE XREF: __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+25p
UNDEF:00008BC4                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1+10p ...
UNDEF:00008BC8                 extrn ___CxxFrameHandler3:near
UNDEF:00008BC8                                         ; CODE XREF: __ehhandler$?changeExt@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@0_N@Z+20j
UNDEF:00008BC8                                         ; __ehhandler$??0FileDialog@@QAE@PAUHWND__@@PAUHINSTANCE__@@@Z+16j ...
UNDEF:00008BCC ; const type_info::`vftable'
UNDEF:00008BCC                 extrn ??_7type_info@@6B@:near
UNDEF:00008BCC                                         ; DATA XREF: .data$r:std::exception `RTTI Type Descriptor'o
UNDEF:00008BCC                                         ; .data$r:std::error_category `RTTI Type Descriptor'o ...
UNDEF:00008BD0 ; int FileDialog::_dialogFileBoxId
UNDEF:00008BD0                 extrn ?_dialogFileBoxId@FileDialog@@2HA:near
UNDEF:00008BD0                                         ; DATA XREF: FileDialog::run(HWND__ *,uint,uint,long):loc_116Er
UNDEF:00008BD0                                         ; FileDialog::run(HWND__ *,uint,uint,long):loc_1208r ...
UNDEF:00008BD4 ; private: static class NppParameters * NppParameters::_pSelf
UNDEF:00008BD4                 extrn ?_pSelf@NppParameters@@0PAV1@A:near
UNDEF:00008BD4                                         ; DATA XREF: NppParameters::getInstance(void)+3r
UNDEF:00008BD8                 extrn ___security_cookie:near
UNDEF:00008BD8                                         ; DATA XREF: changeExt(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,bool)+14r
UNDEF:00008BD8                                         ; goToCenter(HWND__ *)+6r ...
UNDEF:00008BDC                 extrn __fltused:near
UNDEF:00008BDC
UNDEF:00008BDC
UNDEF:00008BDC                 end