.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 18084EE92B1210E36B9120E3C235EDE3
.data:00000000 ; Input CRC32 : 84AC4C24
.data:00000000
.data:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\Printer.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "uuid.lib"
.data:00000000 ; includelib "libcpmtd"
.data:00000000 ; must resolve: ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.data:00000000 ; must resolve: ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.data:00000000 ; must resolve: ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.data:00000000 ; must resolve: ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.data:00000000 ; must resolve: ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.data:00000000 ; must resolve: ?id@?$numpunct@D@std@@2V0locale@2@A
.data:00000000 ; must resolve: ?id@?$numpunct@_W@std@@2V0locale@2@A
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 ; Segment alignment 'qword' can not be represented in assembly
.data:00000000 _data           segment para public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000 _acTop_xpm      dd offset $SG143412     ; "12 12 56 1"
.data:00000004                 dd offset $SG143413     ; " \tc #FFFFFF"
.data:00000008                 dd offset $SG143414     ; ".\tc #8AB2E9"
.data:0000000C                 dd offset $SG143415     ; "+\tc #CCDCF6"
.data:00000010                 dd offset $SG143416     ; "@\tc #80ABEA"
.data:00000014                 dd offset $SG143417     ; "#\tc #7DA9E8"
.data:00000018                 dd offset $SG143418     ; "$\tc #C7DAF3"
.data:0000001C                 dd offset $SG143419     ; "%\tc #79A7E6"
.data:00000020 off_20          dd offset $SG143420     ; DATA XREF: .xdata$x:00006E54o
.data:00000020                                         ; .xdata$x:00006E64o ...
.data:00000020                                         ; "&\tc #ADC8EF"
.data:00000024 off_24          dd offset $SG143421     ; DATA XREF: .xdata$x:00006E6Co
.data:00000024                                         ; .xdata$x:00006E7Co
.data:00000024                                         ; "*\tc #87B0E8"
.data:00000028 off_28          dd offset $SG143422     ; DATA XREF: .xdata$x:00006E8Co
.data:00000028                                         ; .rdata:off_E2Co
.data:00000028                                         ; "=\tc #BBD2F0"
.data:0000002C                 dd offset $SG143423     ; "-\tc #6EA0E2"
.data:00000030                 dd offset $SG143424     ; ";\tc #A8C7EE"
.data:00000034                 dd offset $SG143425     ; ">\tc #A3C2ED"
.data:00000038                 dd offset $SG143426     ; ",\tc #75A4E3"
.data:0000003C                 dd offset $SG143427     ; "'\tc #A7C4EB"
.data:00000040                 dd offset $SG143428     ; ")\tc #6297E1"
.data:00000044                 dd offset $SG143429     ; "!\tc #A1C1EC"
.data:00000048                 dd offset $SG143430     ; "~\tc #92B7E8"
.data:0000004C                 dd offset $SG143431     ; "{\tc #99BBE9"
.data:00000050                 dd offset $SG143432     ; "]\tc #6197DD"
.data:00000054                 dd offset $SG143433     ; "^\tc #96B9E6"
.data:00000058                 dd offset $SG143434     ; "/\tc #538EDB"
.data:0000005C                 dd offset $SG143435     ; "(\tc #99BBEA"
.data:00000060                 dd offset $SG143436     ; "_\tc #80AAE3"
.data:00000064                 dd offset $SG143437     ; ":\tc #81ABE3"
.data:00000068                 dd offset $SG143438     ; "<\tc #8AB1E4"
.data:0000006C                 dd offset $SG143439     ; "[\tc #4B88D6"
.data:00000070                 dd offset $SG143440     ; "}\tc #4882D1"
.data:00000074                 dd offset $SG143441     ; "|\tc #4384D6"
.data:00000078                 dd offset $SG143442     ; "1\tc #90B5E7"
.data:0000007C                 dd offset $SG143443     ; "2\tc #74A3E0"
.data:00000080                 dd offset $SG143444     ; "3\tc #77A4E0"
.data:00000084                 dd offset $SG143445     ; "4\tc #81ABE2"
.data:00000088                 dd offset $SG143446     ; "5\tc #437FD3"
.data:0000008C                 dd offset $SG143447     ; "6\tc #7FA2DF"
.data:00000090                 dd offset $SG143448     ; "7\tc #3577D2"
.data:00000094                 dd offset $SG143449     ; "8\tc #87AFE4"
.data:00000098                 dd offset $SG143450     ; "9\tc #72A1DF"
.data:0000009C                 dd offset $SG143451     ; "0\tc #7CA9E1"
.data:000000A0                 dd offset $SG143452     ; "a\tc #3F7AD0"
.data:000000A4                 dd offset $SG143453     ; "b\tc #85A4DE"
.data:000000A8                 dd offset $SG143454     ; "c\tc #FBFCFE"
.data:000000AC                 dd offset $SG143455     ; "d\tc #236ECD"
.data:000000B0                 dd offset $SG143456     ; "e\tc #7EA8E1"
.data:000000B4                 dd offset $SG143457     ; "f\tc #79A6E0"
.data:000000B8                 dd offset $SG143458     ; "g\tc #3D77D0"
.data:000000BC                 dd offset $SG143459     ; "h\tc #87A4DC"
.data:000000C0                 dd offset $SG143460     ; "i\tc #1A62C9"
.data:000000C4                 dd offset $SG143461     ; "j\tc #75A3DF"
.data:000000C8                 dd offset $SG143462     ; "k\tc #3C74CF"
.data:000000CC                 dd offset $SG143463     ; "l\tc #8DA6DE"
.data:000000D0                 dd offset $SG143464     ; "m\tc #1859C4"
.data:000000D4                 dd offset $SG143465     ; "n\tc #3B71CC"
.data:000000D8                 dd offset $SG143466     ; "o\tc #8EA5DD"
.data:000000DC                 dd offset $SG143467     ; "p\tc #164EC0"
.data:000000E0                 dd offset $SG143468     ; "q\tc #92A7DD"
.data:000000E4                 dd offset $SG143469     ; "    .+      "
.data:000000E8                 dd offset $SG143470     ; "    @#$     "
.data:000000EC                 dd offset $SG143471     ; "    %&*=    "
.data:000000F0                 dd offset $SG143472     ; "    -;>,'   "
.data:000000F4                 dd offset $SG143473     ; "    )!~{]^  "
.data:000000F8                 dd offset $SG143474     ; "    /(_:<[} "
.data:000000FC                 dd offset $SG143475     ; "    |123456 "
.data:00000100                 dd offset $SG143476     ; "    7890abc "
.data:00000104                 dd offset $SG143477     ; "    defgh   "
.data:00000108                 dd offset $SG143478     ; "    ijkl    "
.data:0000010C                 dd offset $SG143479     ; "    mno     "
.data:00000110                 dd offset $SG143480     ; "    pq      "
.data:00000114                 align 8
.data:00000118 _acBottom_xpm   dd offset $SG143482     ; "12 12 54 1"
.data:0000011C                 dd offset $SG143483     ; " \tc #FFFFFF"
.data:00000120                 dd offset $SG143484     ; ".\tc #C4D7F3"
.data:00000124                 dd offset $SG143485     ; "+\tc #72A1E3"
.data:00000128                 dd offset $SG143486     ; "@\tc #C1D6F2"
.data:0000012C                 dd offset $SG143487     ; "#\tc #6397E1"
.data:00000130                 dd offset $SG143488     ; "$\tc #5990DD"
.data:00000134                 dd offset $SG143489     ; "%\tc #BBD2F0"
.data:00000138                 dd offset $SG143490     ; "&\tc #7AA6E5"
.data:0000013C                 dd offset $SG143491     ; "*\tc #9ABDEA"
.data:00000140                 dd offset $SG143492     ; "=\tc #4A87D9"
.data:00000144                 dd offset $SG143493     ; "-\tc #B1CAEE"
.data:00000148                 dd offset $SG143494     ; ";\tc #75A4E3"
.data:0000014C                 dd offset $SG143495     ; ">\tc #99BBE9"
.data:00000150                 dd offset $SG143496     ; ",\tc #95B9E8"
.data:00000154                 dd offset $SG143497     ; "'\tc #3A7CD4"
.data:00000158                 dd offset $SG143498     ; ")\tc #A9C6EC"
.data:0000015C                 dd offset $SG143499     ; "!\tc #71A0E0"
.data:00000160                 dd offset $SG143500     ; "~\tc #86AFE5"
.data:00000164                 dd offset $SG143501     ; "{\tc #8DB2E6"
.data:00000168                 dd offset $SG143502     ; "]\tc #2A72CF"
.data:0000016C                 dd offset $SG143503     ; "^\tc #73A0E0"
.data:00000170                 dd offset $SG143504     ; "/\tc #6B9DE0"
.data:00000174                 dd offset $SG143505     ; "(\tc #95B8E8"
.data:00000178                 dd offset $SG143506     ; "_\tc #81ABE3"
.data:0000017C                 dd offset $SG143507     ; ":\tc #72A1DF"
.data:00000180                 dd offset $SG143508     ; "<\tc #83ADE3"
.data:00000184                 dd offset $SG143509     ; "[\tc #1B65C9"
.data:00000188                 dd offset $SG143510     ; "}\tc #5F95DC"
.data:0000018C                 dd offset $SG143511     ; "|\tc #8BB3E5"
.data:00000190                 dd offset $SG143512     ; "1\tc #77A4E0"
.data:00000194                 dd offset $SG143513     ; "2\tc #679ADC"
.data:00000198                 dd offset $SG143514     ; "3\tc #7AA6E1"
.data:0000019C                 dd offset $SG143515     ; "4\tc #195CC6"
.data:000001A0                 dd offset $SG143516     ; "5\tc #FCFDFE"
.data:000001A4                 dd offset $SG143517     ; "6\tc #8DB2E4"
.data:000001A8                 dd offset $SG143518     ; "7\tc #4885D6"
.data:000001AC                 dd offset $SG143519     ; "8\tc #7CA9E1"
.data:000001B0                 dd offset $SG143520     ; "9\tc #6698DB"
.data:000001B4                 dd offset $SG143521     ; "0\tc #71A1DE"
.data:000001B8                 dd offset $SG143522     ; "a\tc #1752C0"
.data:000001BC                 dd offset $SG143523     ; "b\tc #88ABE0"
.data:000001C0                 dd offset $SG143524     ; "c\tc #3D77D0"
.data:000001C4                 dd offset $SG143525     ; "d\tc #6E9FDD"
.data:000001C8                 dd offset $SG143526     ; "e\tc #699BDC"
.data:000001CC                 dd offset $SG143527     ; "f\tc #1547BD"
.data:000001D0                 dd offset $SG143528     ; "g\tc #8DA6DE"
.data:000001D4                 dd offset $SG143529     ; "h\tc #376BC9"
.data:000001D8                 dd offset $SG143530     ; "i\tc #6295DA"
.data:000001DC                 dd offset $SG143531     ; "j\tc #1440B9"
.data:000001E0                 dd offset $SG143532     ; "k\tc #8DA0DB"
.data:000001E4                 dd offset $SG143533     ; "l\tc #315FC4"
.data:000001E8                 dd offset $SG143534     ; "m\tc #1339B7"
.data:000001EC                 dd offset $SG143535     ; "n\tc #909FDA"
.data:000001F0                 dd offset $SG143536     ; "o\tc #1233B4"
.data:000001F4                 dd offset $SG143537     ; "         .+ "
.data:000001F8                 dd offset $SG143538     ; "        @#$ "
.data:000001FC                 dd offset $SG143539     ; "       %&*= L"
.data:00000200                 dd offset $SG143540     ; "      -;>,' "
.data:00000204                 dd offset $SG143541     ; "     )!>~{] "
.data:00000208                 dd offset $SG143542     ; "    ^/(_:<[ "
.data:0000020C                 dd offset $SG143543     ; "    (}|1234 "
.data:00000210                 dd offset $SG143544     ; "    567890a "
.data:00000214                 dd offset $SG143545     ; "      bcdef "
.data:00000218                 dd offset $SG143546     ; "       ghij "
.data:0000021C                 dd offset $SG143547     ; "        klm "
.data:00000220                 dd offset $SG143548     ; "         no "
.data:00000224                 align 8
.data:00000228 _bookmark_xpm   dd offset $SG143550     ; "13 14 54 1"
.data:0000022C                 dd offset $SG143551     ; " \tc None"
.data:00000230                 dd offset $SG143552     ; ".\tc #545254"
.data:00000234                 dd offset $SG143553     ; "+\tc #3C3E3C"
.data:00000238                 dd offset $SG143554     ; "@\tc #646464"
.data:0000023C                 dd offset $SG143555     ; "#\tc #A4A4A4"
.data:00000240                 dd offset $SG143556     ; "$\tc #B7B8B7"
.data:00000244                 dd offset $SG143557     ; "%\tc #747284"
.data:00000248                 dd offset $SG143558     ; "&\tc #B4B2C4"
.data:0000024C                 dd offset $SG143559     ; "*\tc #DCD7E4"
.data:00000250                 dd offset $SG143560     ; "=\tc #1C1A1C"
.data:00000254                 dd offset $SG143561     ; "-\tc #403E58"
.data:00000258                 dd offset $SG143562     ; ";\tc #5C5A8C"
.data:0000025C                 dd offset $SG143563     ; ">\tc #7C7EAC"
.data:00000260                 dd offset $SG143564     ; ",\tc #7C8EBC"
.data:00000264                 dd offset $SG143565     ; "'\tc #242644"
.data:00000268                 dd offset $SG143566     ; ")\tc #282668"
.data:0000026C                 dd offset $SG143567     ; "!\tc #24367C"
.data:00000270                 dd offset $SG143568     ; "~\tc #244A84"
.data:00000274                 dd offset $SG143569     ; "{\tc #2C5098"
.data:00000278                 dd offset $SG143570     ; "]\tc #14162C"
.data:0000027C                 dd offset $SG143571     ; "^\tc #142E7C"
.data:00000280                 dd offset $SG143572     ; "/\tc #143789"
.data:00000284                 dd offset $SG143573     ; "(\tc #204990"
.data:00000288                 dd offset $SG143574     ; "_\tc #174091"
.data:0000028C                 dd offset $SG143575     ; ":\tc #0C0630"
.data:00000290                 dd offset $SG143576     ; "<\tc #24327C"
.data:00000294                 dd offset $SG143577     ; "[\tc #2450A0"
.data:00000298                 dd offset $SG143578     ; "}\tc #345DB4"
.data:0000029C                 dd offset $SG143579     ; "|\tc #3C68B8"
.data:000002A0                 dd offset $SG143580     ; "1\tc #141244"
.data:000002A4                 dd offset $SG143581     ; "2\tc #24428C"
.data:000002A8                 dd offset $SG143582     ; "3\tc #3462B9"
.data:000002AC                 dd offset $SG143583     ; "4\tc #4470C4"
.data:000002B0                 dd offset $SG143584     ; "5\tc #4C7FD6"
.data:000002B4                 dd offset $SG143585     ; "6\tc #4472CC"
.data:000002B8                 dd offset $SG143586     ; "7\tc #24224C"
.data:000002BC                 dd offset $SG143587     ; "8\tc #5C8DEC"
.data:000002C0                 dd offset $SG143588     ; "9\tc #5C94F6"
.data:000002C4                 dd offset $SG143589     ; "0\tc #5482DF"
.data:000002C8                 dd offset $SG143590     ; "a\tc #619DF7"
.data:000002CC                 dd offset $SG143591     ; "b\tc #6CA6FC"
.data:000002D0                 dd offset $SG143592     ; "c\tc #64A2FC"
.data:000002D4                 dd offset $SG143593     ; "d\tc #1C2E5C"
.data:000002D8                 dd offset $SG143594     ; "e\tc #6CA2FC"
.data:000002DC                 dd offset $SG143595     ; "f\tc #74B2FC"
.data:000002E0                 dd offset $SG143596     ; "g\tc #7CB8FC"
.data:000002E4                 dd offset $SG143597     ; "h\tc #1C3264"
.data:000002E8                 dd offset $SG143598     ; "i\tc #346AD4"
.data:000002EC                 dd offset $SG143599     ; "j\tc #7CBEFC"
.data:000002F0                 dd offset $SG143600     ; "k\tc #3C72DC"
.data:000002F4                 dd offset $SG143601     ; "l\tc #243250"
.data:000002F8                 dd offset $SG143602     ; "m\tc #346AB4"
.data:000002FC                 dd offset $SG143603     ; "n\tc #3C82DC"
.data:00000300                 dd offset $SG143604     ; "o\tc #6C6A6C"
.data:00000304                 dd offset $SG143605     ; "     .+.     "
.data:00000308                 dd offset $SG143606     ; "   @##$##@   "
.data:0000030C                 dd offset $SG143607     ; "  @%&***&%@  "
.data:00000310                 dd offset $SG143608     ; " =-;>,,,>;-= "
.data:00000314                 dd offset $SG143609     ; " ')!~{{{~!)' "
.data:00000318                 dd offset $SG143610     ; "])^/({{{(_^)]"
.data:0000031C                 dd offset $SG143611     ; ":<_[}|||}[_<:"
.data:00000320                 dd offset $SG143612     ; "12[3455563[21"
.data:00000324                 dd offset $SG143613     ; "7_365899063_7"
.data:00000328                 dd offset $SG143614     ; " /|09abc904/ "
.data:0000032C                 dd offset $SG143615     ; " d}8efgfb83d "
.data:00000330                 dd offset $SG143616     ; "  hiafjgakh  "
.data:00000334                 dd offset $SG143617     ; "   l~mnm~l   "
.data:00000338                 dd offset $SG143618     ; "     o@o     "
.data:00000338 _data           ends
.data:00000338
.rdata:0000033C ; ===========================================================================
.rdata:0000033C
.rdata:0000033C ; Segment type: Pure data
.rdata:0000033C ; Segment permissions: Read
.rdata:0000033C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000033C _rdata          segment para public 'DATA' use32
.rdata:0000033C                 assume cs:_rdata
.rdata:0000033C                 ;org 33Ch
.rdata:0000033C $SG143412       db '12 12 56 1',0       ; DATA XREF: .data:_acTop_xpmo
.rdata:00000347                 align 4
.rdata:00000348 $SG143413       db ' ',9,'c #FFFFFF',0  ; DATA XREF: .data:00000004o
.rdata:00000354 $SG143414       db '.',9,'c #8AB2E9',0  ; DATA XREF: .data:00000008o
.rdata:00000360 $SG143415       db '+',9,'c #CCDCF6',0  ; DATA XREF: .data:0000000Co
.rdata:0000036C $SG143416       db '@',9,'c #80ABEA',0  ; DATA XREF: .data:00000010o
.rdata:00000378 $SG143417       db '#',9,'c #7DA9E8',0  ; DATA XREF: .data:00000014o
.rdata:00000384 $SG143418       db '$',9,'c #C7DAF3',0  ; DATA XREF: .data:00000018o
.rdata:00000390 $SG143419       db '%',9,'c #79A7E6',0  ; DATA XREF: .data:0000001Co
.rdata:0000039C $SG143420       db '&',9,'c #ADC8EF',0  ; DATA XREF: .data:off_20o
.rdata:000003A8 $SG143421       db '*',9,'c #87B0E8',0  ; DATA XREF: .data:off_24o
.rdata:000003B4 $SG143422       db '=',9,'c #BBD2F0',0  ; DATA XREF: .data:off_28o
.rdata:000003C0 $SG143423       db '-',9,'c #6EA0E2',0  ; DATA XREF: .data:0000002Co
.rdata:000003CC $SG143424       db ';',9,'c #A8C7EE',0  ; DATA XREF: .data:00000030o
.rdata:000003D8 $SG143425       db '>',9,'c #A3C2ED',0  ; DATA XREF: .data:00000034o
.rdata:000003E4 $SG143426       db ',',9,'c #75A4E3',0  ; DATA XREF: .data:00000038o
.rdata:000003F0 $SG143427       db 27h,9,'c #A7C4EB',0  ; DATA XREF: .data:0000003Co
.rdata:000003FC $SG143428       db ')',9,'c #6297E1',0  ; DATA XREF: .data:00000040o
.rdata:00000408 $SG143429       db '!',9,'c #A1C1EC',0  ; DATA XREF: .data:00000044o
.rdata:00000414 $SG143430       db '~',9,'c #92B7E8',0  ; DATA XREF: .data:00000048o
.rdata:00000420 $SG143431       db '{',9,'c #99BBE9',0  ; DATA XREF: .data:0000004Co
.rdata:0000042C $SG143432       db ']',9,'c #6197DD',0  ; DATA XREF: .data:00000050o
.rdata:00000438 $SG143433       db '^',9,'c #96B9E6',0  ; DATA XREF: .data:00000054o
.rdata:00000444 $SG143434       db '/',9,'c #538EDB',0  ; DATA XREF: .data:00000058o
.rdata:00000450 $SG143435       db '(',9,'c #99BBEA',0  ; DATA XREF: .data:0000005Co
.rdata:0000045C $SG143436       db '_',9,'c #80AAE3',0  ; DATA XREF: .data:00000060o
.rdata:00000468 $SG143437       db ':',9,'c #81ABE3',0  ; DATA XREF: .data:00000064o
.rdata:00000474 $SG143438       db '<',9,'c #8AB1E4',0  ; DATA XREF: .data:00000068o
.rdata:00000480 $SG143439       db '[',9,'c #4B88D6',0  ; DATA XREF: .data:0000006Co
.rdata:0000048C $SG143440       db '}',9,'c #4882D1',0  ; DATA XREF: .data:00000070o
.rdata:00000498 $SG143441       db '|',9,'c #4384D6',0  ; DATA XREF: .data:00000074o
.rdata:000004A4 $SG143442       db '1',9,'c #90B5E7',0  ; DATA XREF: .data:00000078o
.rdata:000004B0 $SG143443       db '2',9,'c #74A3E0',0  ; DATA XREF: .data:0000007Co
.rdata:000004BC $SG143444       db '3',9,'c #77A4E0',0  ; DATA XREF: .data:00000080o
.rdata:000004C8 $SG143445       db '4',9,'c #81ABE2',0  ; DATA XREF: .data:00000084o
.rdata:000004D4 $SG143446       db '5',9,'c #437FD3',0  ; DATA XREF: .data:00000088o
.rdata:000004E0 $SG143447       db '6',9,'c #7FA2DF',0  ; DATA XREF: .data:0000008Co
.rdata:000004EC $SG143448       db '7',9,'c #3577D2',0  ; DATA XREF: .data:00000090o
.rdata:000004F8 $SG143449       db '8',9,'c #87AFE4',0  ; DATA XREF: .data:00000094o
.rdata:00000504 $SG143450       db '9',9,'c #72A1DF',0  ; DATA XREF: .data:00000098o
.rdata:00000510 $SG143451       db '0',9,'c #7CA9E1',0  ; DATA XREF: .data:0000009Co
.rdata:0000051C $SG143452       db 'a',9,'c #3F7AD0',0  ; DATA XREF: .data:000000A0o
.rdata:00000528 $SG143453       db 'b',9,'c #85A4DE',0  ; DATA XREF: .data:000000A4o
.rdata:00000534 $SG143454       db 'c',9,'c #FBFCFE',0  ; DATA XREF: .data:000000A8o
.rdata:00000540 $SG143455       db 'd',9,'c #236ECD',0  ; DATA XREF: .data:000000ACo
.rdata:0000054C $SG143456       db 'e',9,'c #7EA8E1',0  ; DATA XREF: .data:000000B0o
.rdata:00000558 $SG143457       db 'f',9,'c #79A6E0',0  ; DATA XREF: .data:000000B4o
.rdata:00000564 $SG143458       db 'g',9,'c #3D77D0',0  ; DATA XREF: .data:000000B8o
.rdata:00000570 $SG143459       db 'h',9,'c #87A4DC',0  ; DATA XREF: .data:000000BCo
.rdata:0000057C $SG143460       db 'i',9,'c #1A62C9',0  ; DATA XREF: .data:000000C0o
.rdata:00000588 $SG143461       db 'j',9,'c #75A3DF',0  ; DATA XREF: .data:000000C4o
.rdata:00000594 $SG143462       db 'k',9,'c #3C74CF',0  ; DATA XREF: .data:000000C8o
.rdata:000005A0 $SG143463       db 'l',9,'c #8DA6DE',0  ; DATA XREF: .data:000000CCo
.rdata:000005AC $SG143464       db 'm',9,'c #1859C4',0  ; DATA XREF: .data:000000D0o
.rdata:000005B8 $SG143465       db 'n',9,'c #3B71CC',0  ; DATA XREF: .data:000000D4o
.rdata:000005C4 $SG143466       db 'o',9,'c #8EA5DD',0  ; DATA XREF: .data:000000D8o
.rdata:000005D0 $SG143467       db 'p',9,'c #164EC0',0  ; DATA XREF: .data:000000DCo
.rdata:000005DC $SG143468       db 'q',9,'c #92A7DD',0  ; DATA XREF: .data:000000E0o
.rdata:000005E8 $SG143469       db '    .+      ',0     ; DATA XREF: .data:000000E4o
.rdata:000005F5                 align 4
.rdata:000005F8 $SG143470       db '    @#$     ',0     ; DATA XREF: .data:000000E8o
.rdata:00000605                 align 4
.rdata:00000608 $SG143471       db '    %&*=    ',0     ; DATA XREF: .data:000000ECo
.rdata:00000615                 align 4
.rdata:00000618 $SG143472       db '    -;>,',27h,'   ',0 ; DATA XREF: .data:000000F0o
.rdata:00000625                 align 4
.rdata:00000628 $SG143473       db '    )!~{]^  ',0     ; DATA XREF: .data:000000F4o
.rdata:00000635                 align 4
.rdata:00000638 $SG143474       db '    /(_:<[} ',0     ; DATA XREF: .data:000000F8o
.rdata:00000645                 align 4
.rdata:00000648 $SG143475       db '    |123456 ',0     ; DATA XREF: .data:000000FCo
.rdata:00000655                 align 4
.rdata:00000658 $SG143476       db '    7890abc ',0     ; DATA XREF: .data:00000100o
.rdata:00000665                 align 4
.rdata:00000668 $SG143477       db '    defgh   ',0     ; DATA XREF: .data:00000104o
.rdata:00000675                 align 4
.rdata:00000678 $SG143478       db '    ijkl    ',0     ; DATA XREF: .data:00000108o
.rdata:00000685                 align 4
.rdata:00000688 $SG143479       db '    mno     ',0     ; DATA XREF: .data:0000010Co
.rdata:00000695                 align 4
.rdata:00000698 $SG143480       db '    pq      ',0     ; DATA XREF: .data:00000110o
.rdata:000006A5                 align 4
.rdata:000006A8 $SG143482       db '12 12 54 1',0       ; DATA XREF: .data:_acBottom_xpmo
.rdata:000006B3                 align 4
.rdata:000006B4 $SG143483       db ' ',9,'c #FFFFFF',0  ; DATA XREF: .data:0000011Co
.rdata:000006C0 $SG143484       db '.',9,'c #C4D7F3',0  ; DATA XREF: .data:00000120o
.rdata:000006CC $SG143485       db '+',9,'c #72A1E3',0  ; DATA XREF: .data:00000124o
.rdata:000006D8 $SG143486       db '@',9,'c #C1D6F2',0  ; DATA XREF: .data:00000128o
.rdata:000006E4 $SG143487       db '#',9,'c #6397E1',0  ; DATA XREF: .data:0000012Co
.rdata:000006F0 $SG143488       db '$',9,'c #5990DD',0  ; DATA XREF: .data:00000130o
.rdata:000006FC $SG143489       db '%',9,'c #BBD2F0',0  ; DATA XREF: .data:00000134o
.rdata:00000708 $SG143490       db '&',9,'c #7AA6E5',0  ; DATA XREF: .data:00000138o
.rdata:00000714 $SG143491       db '*',9,'c #9ABDEA',0  ; DATA XREF: .data:0000013Co
.rdata:00000720 $SG143492       db '=',9,'c #4A87D9',0  ; DATA XREF: .data:00000140o
.rdata:0000072C $SG143493       db '-',9,'c #B1CAEE',0  ; DATA XREF: .data:00000144o
.rdata:00000738 $SG143494       db ';',9,'c #75A4E3',0  ; DATA XREF: .data:00000148o
.rdata:00000744 $SG143495       db '>',9,'c #99BBE9',0  ; DATA XREF: .data:0000014Co
.rdata:00000750 $SG143496       db ',',9,'c #95B9E8',0  ; DATA XREF: .data:00000150o
.rdata:0000075C $SG143497       db 27h,9,'c #3A7CD4',0  ; DATA XREF: .data:00000154o
.rdata:00000768 $SG143498       db ')',9,'c #A9C6EC',0  ; DATA XREF: .data:00000158o
.rdata:00000774 $SG143499       db '!',9,'c #71A0E0',0  ; DATA XREF: .data:0000015Co
.rdata:00000780 $SG143500       db '~',9,'c #86AFE5',0  ; DATA XREF: .data:00000160o
.rdata:0000078C $SG143501       db '{',9,'c #8DB2E6',0  ; DATA XREF: .data:00000164o
.rdata:00000798 $SG143502       db ']',9,'c #2A72CF',0  ; DATA XREF: .data:00000168o
.rdata:000007A4 $SG143503       db '^',9,'c #73A0E0',0  ; DATA XREF: .data:0000016Co
.rdata:000007B0 $SG143504       db '/',9,'c #6B9DE0',0  ; DATA XREF: .data:00000170o
.rdata:000007BC $SG143505       db '(',9,'c #95B8E8',0  ; DATA XREF: .data:00000174o
.rdata:000007C8 $SG143506       db '_',9,'c #81ABE3',0  ; DATA XREF: .data:00000178o
.rdata:000007D4 $SG143507       db ':',9,'c #72A1DF',0  ; DATA XREF: .data:0000017Co
.rdata:000007E0 $SG143508       db '<',9,'c #83ADE3',0  ; DATA XREF: .data:00000180o
.rdata:000007EC $SG143509       db '[',9,'c #1B65C9',0  ; DATA XREF: .data:00000184o
.rdata:000007F8 $SG143510       db '}',9,'c #5F95DC',0  ; DATA XREF: .data:00000188o
.rdata:00000804 $SG143511       db '|',9,'c #8BB3E5',0  ; DATA XREF: .data:0000018Co
.rdata:00000810 $SG143512       db '1',9,'c #77A4E0',0  ; DATA XREF: .data:00000190o
.rdata:0000081C $SG143513       db '2',9,'c #679ADC',0  ; DATA XREF: .data:00000194o
.rdata:00000828 $SG143514       db '3',9,'c #7AA6E1',0  ; DATA XREF: .data:00000198o
.rdata:00000834 $SG143515       db '4',9,'c #195CC6',0  ; DATA XREF: .data:0000019Co
.rdata:00000840 $SG143516       db '5',9,'c #FCFDFE',0  ; DATA XREF: .data:000001A0o
.rdata:0000084C $SG143517       db '6',9,'c #8DB2E4',0  ; DATA XREF: .data:000001A4o
.rdata:00000858 $SG143518       db '7',9,'c #4885D6',0  ; DATA XREF: .data:000001A8o
.rdata:00000864 $SG143519       db '8',9,'c #7CA9E1',0  ; DATA XREF: .data:000001ACo
.rdata:00000870 $SG143520       db '9',9,'c #6698DB',0  ; DATA XREF: .data:000001B0o
.rdata:0000087C $SG143521       db '0',9,'c #71A1DE',0  ; DATA XREF: .data:000001B4o
.rdata:00000888 $SG143522       db 'a',9,'c #1752C0',0  ; DATA XREF: .data:000001B8o
.rdata:00000894 $SG143523       db 'b',9,'c #88ABE0',0  ; DATA XREF: .data:000001BCo
.rdata:000008A0 $SG143524       db 'c',9,'c #3D77D0',0  ; DATA XREF: .data:000001C0o
.rdata:000008AC $SG143525       db 'd',9,'c #6E9FDD',0  ; DATA XREF: .data:000001C4o
.rdata:000008B8 $SG143526       db 'e',9,'c #699BDC',0  ; DATA XREF: .data:000001C8o
.rdata:000008C4 $SG143527       db 'f',9,'c #1547BD',0  ; DATA XREF: .data:000001CCo
.rdata:000008D0 $SG143528       db 'g',9,'c #8DA6DE',0  ; DATA XREF: .data:000001D0o
.rdata:000008DC $SG143529       db 'h',9,'c #376BC9',0  ; DATA XREF: .data:000001D4o
.rdata:000008E8 $SG143530       db 'i',9,'c #6295DA',0  ; DATA XREF: .data:000001D8o
.rdata:000008F4 $SG143531       db 'j',9,'c #1440B9',0  ; DATA XREF: .data:000001DCo
.rdata:00000900 $SG143532       db 'k',9,'c #8DA0DB',0  ; DATA XREF: .data:000001E0o
.rdata:0000090C $SG143533       db 'l',9,'c #315FC4',0  ; DATA XREF: .data:000001E4o
.rdata:00000918 $SG143534       db 'm',9,'c #1339B7',0  ; DATA XREF: .data:000001E8o
.rdata:00000924 $SG143535       db 'n',9,'c #909FDA',0  ; DATA XREF: .data:000001ECo
.rdata:00000930 $SG143536       db 'o',9,'c #1233B4',0  ; DATA XREF: .data:000001F0o
.rdata:0000093C $SG143537       db '         .+ ',0     ; DATA XREF: .data:000001F4o
.rdata:00000949                 align 4
.rdata:0000094C $SG143538       db '        @#$ ',0     ; DATA XREF: .data:000001F8o
.rdata:00000959                 align 4
.rdata:0000095C $SG143539       db '       %&*= L',0    ; DATA XREF: .data:000001FCo
.rdata:0000096A                 align 4
.rdata:0000096C $SG143540       db '      -;>,',27h,' ',0 ; DATA XREF: .data:00000200o
.rdata:00000979                 align 4
.rdata:0000097C $SG143541       db '     )!>~{] ',0     ; DATA XREF: .data:00000204o
.rdata:00000989                 align 4
.rdata:0000098C $SG143542       db '    ^/(_:<[ ',0     ; DATA XREF: .data:00000208o
.rdata:00000999                 align 4
.rdata:0000099C $SG143543       db '    (}|1234 ',0     ; DATA XREF: .data:0000020Co
.rdata:000009A9                 align 4
.rdata:000009AC $SG143544       db '    567890a ',0     ; DATA XREF: .data:00000210o
.rdata:000009B9                 align 4
.rdata:000009BC $SG143545       db '      bcdef ',0     ; DATA XREF: .data:00000214o
.rdata:000009C9                 align 4
.rdata:000009CC $SG143546       db '       ghij ',0     ; DATA XREF: .data:00000218o
.rdata:000009D9                 align 4
.rdata:000009DC $SG143547       db '        klm ',0     ; DATA XREF: .data:0000021Co
.rdata:000009E9                 align 4
.rdata:000009EC $SG143548       db '         no ',0     ; DATA XREF: .data:00000220o
.rdata:000009F9                 align 4
.rdata:000009FC $SG143550       db '13 14 54 1',0       ; DATA XREF: .data:_bookmark_xpmo
.rdata:00000A07                 align 4
.rdata:00000A08 $SG143551       db ' ',9,'c None',0     ; DATA XREF: .data:0000022Co
.rdata:00000A11                 align 4
.rdata:00000A14 $SG143552       db '.',9,'c #545254',0  ; DATA XREF: .data:00000230o
.rdata:00000A20 $SG143553       db '+',9,'c #3C3E3C',0  ; DATA XREF: .data:00000234o
.rdata:00000A2C $SG143554       db '@',9,'c #646464',0  ; DATA XREF: .data:00000238o
.rdata:00000A38 $SG143555       db '#',9,'c #A4A4A4',0  ; DATA XREF: .data:0000023Co
.rdata:00000A44 $SG143556       db '$',9,'c #B7B8B7',0  ; DATA XREF: .data:00000240o
.rdata:00000A50 $SG143557       db '%',9,'c #747284',0  ; DATA XREF: .data:00000244o
.rdata:00000A5C $SG143558       db '&',9,'c #B4B2C4',0  ; DATA XREF: .data:00000248o
.rdata:00000A68 $SG143559       db '*',9,'c #DCD7E4',0  ; DATA XREF: .data:0000024Co
.rdata:00000A74 $SG143560       db '=',9,'c #1C1A1C',0  ; DATA XREF: .data:00000250o
.rdata:00000A80 $SG143561       db '-',9,'c #403E58',0  ; DATA XREF: .data:00000254o
.rdata:00000A8C $SG143562       db ';',9,'c #5C5A8C',0  ; DATA XREF: .data:00000258o
.rdata:00000A98 $SG143563       db '>',9,'c #7C7EAC',0  ; DATA XREF: .data:0000025Co
.rdata:00000AA4 $SG143564       db ',',9,'c #7C8EBC',0  ; DATA XREF: .data:00000260o
.rdata:00000AB0 $SG143565       db 27h,9,'c #242644',0  ; DATA XREF: .data:00000264o
.rdata:00000ABC $SG143566       db ')',9,'c #282668',0  ; DATA XREF: .data:00000268o
.rdata:00000AC8 $SG143567       db '!',9,'c #24367C',0  ; DATA XREF: .data:0000026Co
.rdata:00000AD4 $SG143568       db '~',9,'c #244A84',0  ; DATA XREF: .data:00000270o
.rdata:00000AE0 $SG143569       db '{',9,'c #2C5098',0  ; DATA XREF: .data:00000274o
.rdata:00000AEC $SG143570       db ']',9,'c #14162C',0  ; DATA XREF: .data:00000278o
.rdata:00000AF8 $SG143571       db '^',9,'c #142E7C',0  ; DATA XREF: .data:0000027Co
.rdata:00000B04 $SG143572       db '/',9,'c #143789',0  ; DATA XREF: .data:00000280o
.rdata:00000B10 $SG143573       db '(',9,'c #204990',0  ; DATA XREF: .data:00000284o
.rdata:00000B1C $SG143574       db '_',9,'c #174091',0  ; DATA XREF: .data:00000288o
.rdata:00000B28 $SG143575       db ':',9,'c #0C0630',0  ; DATA XREF: .data:0000028Co
.rdata:00000B34 $SG143576       db '<',9,'c #24327C',0  ; DATA XREF: .data:00000290o
.rdata:00000B40 $SG143577       db '[',9,'c #2450A0',0  ; DATA XREF: .data:00000294o
.rdata:00000B4C $SG143578       db '}',9,'c #345DB4',0  ; DATA XREF: .data:00000298o
.rdata:00000B58 $SG143579       db '|',9,'c #3C68B8',0  ; DATA XREF: .data:0000029Co
.rdata:00000B64 $SG143580       db '1',9,'c #141244',0  ; DATA XREF: .data:000002A0o
.rdata:00000B70 $SG143581       db '2',9,'c #24428C',0  ; DATA XREF: .data:000002A4o
.rdata:00000B7C $SG143582       db '3',9,'c #3462B9',0  ; DATA XREF: .data:000002A8o
.rdata:00000B88 $SG143583       db '4',9,'c #4470C4',0  ; DATA XREF: .data:000002ACo
.rdata:00000B94 $SG143584       db '5',9,'c #4C7FD6',0  ; DATA XREF: .data:000002B0o
.rdata:00000BA0 $SG143585       db '6',9,'c #4472CC',0  ; DATA XREF: .data:000002B4o
.rdata:00000BAC $SG143586       db '7',9,'c #24224C',0  ; DATA XREF: .data:000002B8o
.rdata:00000BB8 $SG143587       db '8',9,'c #5C8DEC',0  ; DATA XREF: .data:000002BCo
.rdata:00000BC4 $SG143588       db '9',9,'c #5C94F6',0  ; DATA XREF: .data:000002C0o
.rdata:00000BD0 $SG143589       db '0',9,'c #5482DF',0  ; DATA XREF: .data:000002C4o
.rdata:00000BDC $SG143590       db 'a',9,'c #619DF7',0  ; DATA XREF: .data:000002C8o
.rdata:00000BE8 $SG143591       db 'b',9,'c #6CA6FC',0  ; DATA XREF: .data:000002CCo
.rdata:00000BF4 $SG143592       db 'c',9,'c #64A2FC',0  ; DATA XREF: .data:000002D0o
.rdata:00000C00 $SG143593       db 'd',9,'c #1C2E5C',0  ; DATA XREF: .data:000002D4o
.rdata:00000C0C $SG143594       db 'e',9,'c #6CA2FC',0  ; DATA XREF: .data:000002D8o
.rdata:00000C18 $SG143595       db 'f',9,'c #74B2FC',0  ; DATA XREF: .data:000002DCo
.rdata:00000C24 $SG143596       db 'g',9,'c #7CB8FC',0  ; DATA XREF: .data:000002E0o
.rdata:00000C30 $SG143597       db 'h',9,'c #1C3264',0  ; DATA XREF: .data:000002E4o
.rdata:00000C3C $SG143598       db 'i',9,'c #346AD4',0  ; DATA XREF: .data:000002E8o
.rdata:00000C48 $SG143599       db 'j',9,'c #7CBEFC',0  ; DATA XREF: .data:000002ECo
.rdata:00000C54 $SG143600       db 'k',9,'c #3C72DC',0  ; DATA XREF: .data:000002F0o
.rdata:00000C60 $SG143601       db 'l',9,'c #243250',0  ; DATA XREF: .data:000002F4o
.rdata:00000C6C $SG143602       db 'm',9,'c #346AB4',0  ; DATA XREF: .data:000002F8o
.rdata:00000C78 $SG143603       db 'n',9,'c #3C82DC',0  ; DATA XREF: .data:000002FCo
.rdata:00000C84 $SG143604       db 'o',9,'c #6C6A6C',0  ; DATA XREF: .data:00000300o
.rdata:00000C90 $SG143605       db '     .+.     ',0    ; DATA XREF: .data:00000304o
.rdata:00000C9E                 align 10h
.rdata:00000CA0 $SG143606       db '   @##$##@   ',0    ; DATA XREF: .data:00000308o
.rdata:00000CAE                 align 10h
.rdata:00000CB0 $SG143607       db '  @%&***&%@  ',0    ; DATA XREF: .data:0000030Co
.rdata:00000CBE                 align 10h
.rdata:00000CC0 $SG143608       db ' =-;>,,,>;-= ',0    ; DATA XREF: .data:00000310o
.rdata:00000CCE                 align 10h
.rdata:00000CD0 $SG143609       db ' ',27h,')!~{{{~!)',27h,' ',0
.rdata:00000CD0                                         ; DATA XREF: .data:00000314o
.rdata:00000CDE                 align 10h
.rdata:00000CE0 $SG143610       db '])^/({{{(_^)]',0    ; DATA XREF: .data:00000318o
.rdata:00000CEE                 align 10h
.rdata:00000CF0 $SG143611       db ':<_[}|||}[_<:',0    ; DATA XREF: .data:0000031Co
.rdata:00000CFE                 align 10h
.rdata:00000D00 $SG143612       db '12[3455563[21',0    ; DATA XREF: .data:00000320o
.rdata:00000D0E                 align 10h
.rdata:00000D10 $SG143613       db '7_365899063_7',0    ; DATA XREF: .data:00000324o
.rdata:00000D1E                 align 10h
.rdata:00000D20 $SG143614       db ' /|09abc904/ ',0    ; DATA XREF: .data:00000328o
.rdata:00000D2E                 align 10h
.rdata:00000D30 $SG143615       db ' d}8efgfb83d ',0    ; DATA XREF: .data:0000032Co
.rdata:00000D3E                 align 10h
.rdata:00000D40 $SG143616       db '  hiafjgakh  ',0    ; DATA XREF: .data:00000330o
.rdata:00000D4E                 align 10h
.rdata:00000D50 $SG143617       db '   l~mnm~l   ',0    ; DATA XREF: .data:00000334o
.rdata:00000D5E                 align 10h
.rdata:00000D60 $SG143618       db '     o@o     ',0    ; DATA XREF: .data:00000338o
.rdata:00000D6E                 align 10h
.rdata:00000D70 ; wchar_t _SG151862
.rdata:00000D70 $SG151862       dw 0                    ; DATA XREF: Printer::doPrint(bool)+3C2o
.rdata:00000D72                 db    0
.rdata:00000D73                 db    0
.rdata:00000D74 $SG151863:                              ; DATA XREF: Printer::doPrint(bool):loc_13C0o
.rdata:00000D74                 unicode 0, <Arial>,0
.rdata:00000D80 ; wchar_t _SG151882
.rdata:00000D80 $SG151882       dw 0                    ; DATA XREF: Printer::doPrint(bool)+549o
.rdata:00000D82                 db    0
.rdata:00000D83                 db    0
.rdata:00000D84 $SG151883:                              ; DATA XREF: Printer::doPrint(bool):loc_1546o
.rdata:00000D84                 unicode 0, <Arial>,0
.rdata:00000D90 $SG151902       dw 0                    ; DATA XREF: Printer::doPrint(bool)+8BFr
.rdata:00000D92                 align 4
.rdata:00000D94 ; const WCHAR _SG151890
.rdata:00000D94 $SG151890:                              ; DATA XREF: Printer::doPrint(bool)+6D2o
.rdata:00000D94                 unicode 0, <Can not start printer document.>,0
.rdata:00000DD4 $SG151904       dw 0                    ; DATA XREF: Printer::doPrint(bool)+8E2r
.rdata:00000DD6                 align 4
.rdata:00000DD8 $SG151906       dw 0                    ; DATA XREF: Printer::doPrint(bool)+906r
.rdata:00000DDA                 align 4
.rdata:00000DDC $SG151908       dw 0                    ; DATA XREF: Printer::doPrint(bool)+92Ar
.rdata:00000DDE                 align 10h
.rdata:00000DE0 $SG151910       dw 0                    ; DATA XREF: Printer::doPrint(bool)+94Dr
.rdata:00000DE2                 align 4
.rdata:00000DE4 $SG151912       dw 0                    ; DATA XREF: Printer::doPrint(bool)+971r
.rdata:00000DE6                 align 4
.rdata:00000DE8 $SG151914:                              ; DATA XREF: Printer::doPrint(bool)+99Ao
.rdata:00000DE8                 unicode 0, <$(SHORT_DATE)>,0
.rdata:00000E04 $SG151916:                              ; DATA XREF: Printer::doPrint(bool)+9ACo
.rdata:00000E04                 unicode 0, <$(LONG_DATE)>,0
.rdata:00000E1E                 align 10h
.rdata:00000E20 $SG151918       dd 280024h              ; DATA XREF: Printer::doPrint(bool)+9B8r
.rdata:00000E24 dword_E24       dd 490054h              ; DATA XREF: Printer::doPrint(bool)+9C0r
.rdata:00000E28 dword_E28       dd 45004Dh              ; DATA XREF: Printer::doPrint(bool)+9C9r
.rdata:00000E2C off_E2C         dd offset off_28+1      ; DATA XREF: Printer::doPrint(bool)+9D2r
.rdata:00000E30 ; wchar_t _SG151964
.rdata:00000E30 $SG151964       dw 0                    ; DATA XREF: Printer::doPrint(bool)+AA2o
.rdata:00000E32                 db    0
.rdata:00000E33                 db    0
.rdata:00000E34 ; wchar_t _SG151989
.rdata:00000E34 $SG151989       dw 0                    ; DATA XREF: Printer::doPrint(bool)+C48o
.rdata:00000E36                 db    0
.rdata:00000E37                 db    0
.rdata:00000E38 ; wchar_t _SG152014
.rdata:00000E38 $SG152014       dw 0                    ; DATA XREF: Printer::doPrint(bool)+DEEo
.rdata:00000E3A                 db    0
.rdata:00000E3B                 db    0
.rdata:00000E3C ; wchar_t _SG152040
.rdata:00000E3C $SG152040       dw 0                    ; DATA XREF: Printer::doPrint(bool)+FFFo
.rdata:00000E3E                 db    0
.rdata:00000E3F                 db    0
.rdata:00000E40 ; wchar_t _SG152065
.rdata:00000E40 $SG152065       dw 0                    ; DATA XREF: Printer::doPrint(bool)+11A5o
.rdata:00000E42                 db    0
.rdata:00000E43                 db    0
.rdata:00000E44 ; wchar_t _SG152090
.rdata:00000E44 $SG152090       dw 0                    ; DATA XREF: Printer::doPrint(bool)+134Bo
.rdata:00000E46                 db    0
.rdata:00000E47                 db    0
.rdata:00000E48 $SG152102:                              ; DATA XREF: Printer::doPrint(bool)+1553o
.rdata:00000E48                 unicode 0, <$(CURRENT_PRINTING_PAGE)>,0
.rdata:00000E7A                 align 4
.rdata:00000E7C ; const WCHAR _SG152108
.rdata:00000E7C $SG152108:                              ; DATA XREF: Printer::doPrint(bool)+15DBo
.rdata:00000E7C                 unicode 0, <%0d>,0
.rdata:00000E7C _rdata          ends
.rdata:00000E7C
.text$mn:00000E84 ; ===========================================================================
.text$mn:00000E84
.text$mn:00000E84 ; Segment type: Pure code
.text$mn:00000E84 ; Segment permissions: Read/Execute
.text$mn:00000E84 _text$mn        segment para public 'CODE' use32
.text$mn:00000E84                 assume cs:_text$mn
.text$mn:00000E84                 ;org 0E84h
.text$mn:00000E84                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00000E84
.text$mn:00000E84 ; =============== S U B R O U T I N E =======================================
.text$mn:00000E84
.text$mn:00000E84 ; Attributes: bp-based frame
.text$mn:00000E84
.text$mn:00000E84 ; void __thiscall Printer::init(Printer *this, HINSTANCE, HWND, struct ScintillaEditView *, bool, int, int)
.text$mn:00000E84                 public ?init@Printer@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAVScintillaEditView@@_NHH@Z
.text$mn:00000E84 ?init@Printer@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAVScintillaEditView@@_NHH@Z proc near
.text$mn:00000E84
.text$mn:00000E84 var_8           = dword ptr -8
.text$mn:00000E84 var_4           = dword ptr -4
.text$mn:00000E84 arg_0           = dword ptr  8
.text$mn:00000E84 arg_4           = dword ptr  0Ch
.text$mn:00000E84 arg_8           = dword ptr  10h
.text$mn:00000E84 arg_C           = byte ptr  14h
.text$mn:00000E84 arg_10          = dword ptr  18h
.text$mn:00000E84 arg_14          = dword ptr  1Ch
.text$mn:00000E84
.text$mn:00000E84                 push    ebp
.text$mn:00000E85                 mov     ebp, esp
.text$mn:00000E87                 sub     esp, 8
.text$mn:00000E8A                 mov     [ebp+var_4], ecx
.text$mn:00000E8D                 mov     eax, [ebp+var_4]
.text$mn:00000E90                 mov     ecx, [ebp+arg_8]
.text$mn:00000E93                 mov     [eax+44h], ecx
.text$mn:00000E96                 mov     edx, [ebp+var_4]
.text$mn:00000E99                 mov     eax, [ebp+arg_10]
.text$mn:00000E9C                 mov     [edx+48h], eax
.text$mn:00000E9F                 mov     ecx, [ebp+var_4]
.text$mn:00000EA2                 mov     edx, [ebp+arg_14]
.text$mn:00000EA5                 mov     [ecx+4Ch], edx
.text$mn:00000EA8                 mov     eax, [ebp+var_4]
.text$mn:00000EAB                 mov     dword ptr [eax], 42h ; 'B'
.text$mn:00000EB1                 mov     ecx, [ebp+var_4]
.text$mn:00000EB4                 mov     edx, [ebp+arg_4]
.text$mn:00000EB7                 mov     [ecx+4], edx
.text$mn:00000EBA                 mov     eax, [ebp+var_4]
.text$mn:00000EBD                 mov     ecx, [ebp+arg_0]
.text$mn:00000EC0                 mov     [eax+22h], ecx
.text$mn:00000EC3                 mov     edx, [ebp+var_4]
.text$mn:00000EC6                 mov     dword ptr [edx+14h], 40100h
.text$mn:00000ECD                 mov     eax, 1
.text$mn:00000ED2                 mov     ecx, [ebp+var_4]
.text$mn:00000ED5                 mov     [ecx+18h], ax
.text$mn:00000ED9                 mov     edx, 1
.text$mn:00000EDE                 mov     eax, [ebp+var_4]
.text$mn:00000EE1                 mov     [eax+1Ah], dx
.text$mn:00000EE5                 mov     ecx, 1
.text$mn:00000EEA                 mov     edx, [ebp+var_4]
.text$mn:00000EED                 mov     [edx+1Ch], cx
.text$mn:00000EF1                 mov     eax, 0FFFFh
.text$mn:00000EF6                 mov     ecx, [ebp+var_4]
.text$mn:00000EF9                 mov     [ecx+1Eh], ax
.text$mn:00000EFD                 mov     edx, 1
.text$mn:00000F02                 mov     eax, [ebp+var_4]
.text$mn:00000F05                 mov     [eax+20h], dx
.text$mn:00000F09                 mov     ecx, [ebp+var_4]
.text$mn:00000F0C                 mov     dword ptr [ecx+10h], 0
.text$mn:00000F13                 mov     edx, [ebp+var_4]
.text$mn:00000F16                 mov     dword ptr [edx+8], 0
.text$mn:00000F1D                 mov     eax, [ebp+var_4]
.text$mn:00000F20                 mov     dword ptr [eax+0Ch], 0
.text$mn:00000F27                 mov     ecx, [ebp+var_4]
.text$mn:00000F2A                 mov     dword ptr [ecx+26h], 0
.text$mn:00000F31                 mov     edx, [ebp+var_4]
.text$mn:00000F34                 mov     dword ptr [edx+2Ah], 0
.text$mn:00000F3B                 mov     eax, [ebp+var_4]
.text$mn:00000F3E                 mov     dword ptr [eax+2Eh], 0
.text$mn:00000F45                 mov     ecx, [ebp+var_4]
.text$mn:00000F48                 mov     dword ptr [ecx+32h], 0
.text$mn:00000F4F                 mov     edx, [ebp+var_4]
.text$mn:00000F52                 mov     dword ptr [edx+36h], 0
.text$mn:00000F59                 mov     eax, [ebp+var_4]
.text$mn:00000F5C                 mov     dword ptr [eax+3Ah], 0
.text$mn:00000F63                 mov     ecx, [ebp+var_4]
.text$mn:00000F66                 mov     dword ptr [ecx+3Eh], 0
.text$mn:00000F6D                 mov     edx, [ebp+var_4]
.text$mn:00000F70                 mov     eax, [ebp+var_4]
.text$mn:00000F73                 mov     ecx, [edx+48h]
.text$mn:00000F76                 cmp     ecx, [eax+4Ch]
.text$mn:00000F79                 jz      short loc_F84
.text$mn:00000F7B                 mov     [ebp+var_8], 1
.text$mn:00000F82                 jmp     short loc_F8B
.text$mn:00000F84 ; ---------------------------------------------------------------------------
.text$mn:00000F84
.text$mn:00000F84 loc_F84:                                ; CODE XREF: Printer::init(HINSTANCE__ *,HWND__ *,ScintillaEditView *,bool,int,int)+F5j
.text$mn:00000F84                 mov     [ebp+var_8], 4
.text$mn:00000F8B
.text$mn:00000F8B loc_F8B:                                ; CODE XREF: Printer::init(HINSTANCE__ *,HWND__ *,ScintillaEditView *,bool,int,int)+FEj
.text$mn:00000F8B                 mov     edx, [ebp+var_4]
.text$mn:00000F8E                 mov     eax, [edx+14h]
.text$mn:00000F91                 or      eax, [ebp+var_8]
.text$mn:00000F94                 mov     ecx, [ebp+var_4]
.text$mn:00000F97                 mov     [ecx+14h], eax
.text$mn:00000F9A                 movzx   edx, [ebp+arg_C]
.text$mn:00000F9E                 test    edx, edx
.text$mn:00000FA0                 jnz     short loc_FB4
.text$mn:00000FA2                 mov     eax, [ebp+var_4]
.text$mn:00000FA5                 mov     ecx, [eax+14h]
.text$mn:00000FA8                 or      ecx, 400h
.text$mn:00000FAE                 mov     edx, [ebp+var_4]
.text$mn:00000FB1                 mov     [edx+14h], ecx
.text$mn:00000FB4
.text$mn:00000FB4 loc_FB4:                                ; CODE XREF: Printer::init(HINSTANCE__ *,HWND__ *,ScintillaEditView *,bool,int,int)+11Cj
.text$mn:00000FB4                 mov     esp, ebp
.text$mn:00000FB6                 pop     ebp
.text$mn:00000FB7                 retn    18h
.text$mn:00000FB7 ?init@Printer@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAVScintillaEditView@@_NHH@Z endp
.text$mn:00000FB7
.text$mn:00000FB7 ; ---------------------------------------------------------------------------
.text$mn:00000FBA                 db 0Ah dup(0CCh)
.text$mn:00000FC4
.text$mn:00000FC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00000FC4
.text$mn:00000FC4 ; Attributes: bp-based frame
.text$mn:00000FC4
.text$mn:00000FC4 ; unsigned int __thiscall Printer::doPrint(Printer *this, bool)
.text$mn:00000FC4                 public ?doPrint@Printer@@QAEI_N@Z
.text$mn:00000FC4 ?doPrint@Printer@@QAEI_N@Z proc near
.text$mn:00000FC4
.text$mn:00000FC4 var_12FC        = dword ptr -12FCh
.text$mn:00000FC4 var_12F8        = dword ptr -12F8h
.text$mn:00000FC4 var_12F4        = dword ptr -12F4h
.text$mn:00000FC4 var_12F0        = dword ptr -12F0h
.text$mn:00000FC4 var_12EC        = dword ptr -12ECh
.text$mn:00000FC4 var_12E8        = dword ptr -12E8h
.text$mn:00000FC4 var_12E4        = dword ptr -12E4h
.text$mn:00000FC4 var_12E0        = dword ptr -12E0h
.text$mn:00000FC4 var_12DC        = dword ptr -12DCh
.text$mn:00000FC4 var_12D8        = dword ptr -12D8h
.text$mn:00000FC4 var_12D4        = dword ptr -12D4h
.text$mn:00000FC4 var_12D0        = dword ptr -12D0h
.text$mn:00000FC4 var_12CC        = dword ptr -12CCh
.text$mn:00000FC4 var_12C8        = dword ptr -12C8h
.text$mn:00000FC4 var_12C4        = dword ptr -12C4h
.text$mn:00000FC4 var_12C0        = dword ptr -12C0h
.text$mn:00000FC4 var_12BC        = dword ptr -12BCh
.text$mn:00000FC4 var_12B8        = dword ptr -12B8h
.text$mn:00000FC4 var_12B4        = dword ptr -12B4h
.text$mn:00000FC4 var_12B0        = dword ptr -12B0h
.text$mn:00000FC4 var_12AC        = dword ptr -12ACh
.text$mn:00000FC4 var_12A8        = dword ptr -12A8h
.text$mn:00000FC4 var_12A4        = dword ptr -12A4h
.text$mn:00000FC4 var_12A0        = dword ptr -12A0h
.text$mn:00000FC4 var_129C        = dword ptr -129Ch
.text$mn:00000FC4 var_1298        = dword ptr -1298h
.text$mn:00000FC4 var_1294        = dword ptr -1294h
.text$mn:00000FC4 var_1290        = dword ptr -1290h
.text$mn:00000FC4 var_128C        = dword ptr -128Ch
.text$mn:00000FC4 var_1288        = dword ptr -1288h
.text$mn:00000FC4 var_1284        = dword ptr -1284h
.text$mn:00000FC4 var_1280        = dword ptr -1280h
.text$mn:00000FC4 var_127C        = dword ptr -127Ch
.text$mn:00000FC4 var_1278        = dword ptr -1278h
.text$mn:00000FC4 var_1274        = dword ptr -1274h
.text$mn:00000FC4 var_1270        = dword ptr -1270h
.text$mn:00000FC4 var_126C        = dword ptr -126Ch
.text$mn:00000FC4 var_1268        = dword ptr -1268h
.text$mn:00000FC4 var_1264        = dword ptr -1264h
.text$mn:00000FC4 var_1260        = dword ptr -1260h
.text$mn:00000FC4 var_125C        = dword ptr -125Ch
.text$mn:00000FC4 var_1258        = dword ptr -1258h
.text$mn:00000FC4 var_1254        = dword ptr -1254h
.text$mn:00000FC4 var_1250        = dword ptr -1250h
.text$mn:00000FC4 var_124C        = dword ptr -124Ch
.text$mn:00000FC4 var_1248        = dword ptr -1248h
.text$mn:00000FC4 var_1244        = dword ptr -1244h
.text$mn:00000FC4 var_1240        = dword ptr -1240h
.text$mn:00000FC4 var_123C        = dword ptr -123Ch
.text$mn:00000FC4 var_1238        = dword ptr -1238h
.text$mn:00000FC4 var_1234        = dword ptr -1234h
.text$mn:00000FC4 var_1230        = dword ptr -1230h
.text$mn:00000FC4 var_122C        = dword ptr -122Ch
.text$mn:00000FC4 var_1228        = dword ptr -1228h
.text$mn:00000FC4 var_1224        = dword ptr -1224h
.text$mn:00000FC4 var_1220        = dword ptr -1220h
.text$mn:00000FC4 var_121C        = dword ptr -121Ch
.text$mn:00000FC4 var_1218        = dword ptr -1218h
.text$mn:00000FC4 var_1214        = dword ptr -1214h
.text$mn:00000FC4 var_1210        = dword ptr -1210h
.text$mn:00000FC4 var_120C        = dword ptr -120Ch
.text$mn:00000FC4 var_1208        = dword ptr -1208h
.text$mn:00000FC4 var_1204        = dword ptr -1204h
.text$mn:00000FC4 var_1200        = dword ptr -1200h
.text$mn:00000FC4 var_11FC        = dword ptr -11FCh
.text$mn:00000FC4 var_11F8        = dword ptr -11F8h
.text$mn:00000FC4 var_11F4        = dword ptr -11F4h
.text$mn:00000FC4 var_11F0        = dword ptr -11F0h
.text$mn:00000FC4 var_11EC        = dword ptr -11ECh
.text$mn:00000FC4 var_11E8        = dword ptr -11E8h
.text$mn:00000FC4 var_11E4        = dword ptr -11E4h
.text$mn:00000FC4 var_11E0        = dword ptr -11E0h
.text$mn:00000FC4 var_11DC        = dword ptr -11DCh
.text$mn:00000FC4 var_11D8        = dword ptr -11D8h
.text$mn:00000FC4 var_11D4        = DOCINFOW ptr -11D4h
.text$mn:00000FC4 var_11C0        = dword ptr -11C0h
.text$mn:00000FC4 psizl           = tagSIZE ptr -11BCh
.text$mn:00000FC4 var_11B4        = dword ptr -11B4h
.text$mn:00000FC4 var_11B0        = dword ptr -11B0h
.text$mn:00000FC4 var_11AC        = dword ptr -11ACh
.text$mn:00000FC4 var_11A8        = dword ptr -11A8h
.text$mn:00000FC4 var_11A4        = dword ptr -11A4h
.text$mn:00000FC4 var_11A0        = dword ptr -11A0h
.text$mn:00000FC4 var_119C        = dword ptr -119Ch
.text$mn:00000FC4 var_1198        = dword ptr -1198h
.text$mn:00000FC4 var_1194        = dword ptr -1194h
.text$mn:00000FC4 var_1190        = dword ptr -1190h
.text$mn:00000FC4 var_118C        = dword ptr -118Ch
.text$mn:00000FC4 var_1188        = dword ptr -1188h
.text$mn:00000FC4 var_1184        = dword ptr -1184h
.text$mn:00000FC4 var_1180        = dword ptr -1180h
.text$mn:00000FC4 var_117C        = dword ptr -117Ch
.text$mn:00000FC4 var_1178        = dword ptr -1178h
.text$mn:00000FC4 var_1174        = dword ptr -1174h
.text$mn:00000FC4 var_1170        = dword ptr -1170h
.text$mn:00000FC4 var_116C        = dword ptr -116Ch
.text$mn:00000FC4 var_1168        = dword ptr -1168h
.text$mn:00000FC4 var_1164        = dword ptr -1164h
.text$mn:00000FC4 align           = dword ptr -1160h
.text$mn:00000FC4 var_115C        = dword ptr -115Ch
.text$mn:00000FC4 var_1158        = dword ptr -1158h
.text$mn:00000FC4 var_1154        = dword ptr -1154h
.text$mn:00000FC4 var_1150        = dword ptr -1150h
.text$mn:00000FC4 var_114C        = dword ptr -114Ch
.text$mn:00000FC4 var_1148        = dword ptr -1148h
.text$mn:00000FC4 var_1144        = dword ptr -1144h
.text$mn:00000FC4 var_1140        = dword ptr -1140h
.text$mn:00000FC4 var_113C        = tagSIZE ptr -113Ch
.text$mn:00000FC4 var_1134        = dword ptr -1134h
.text$mn:00000FC4 var_1130        = dword ptr -1130h
.text$mn:00000FC4 var_112C        = dword ptr -112Ch
.text$mn:00000FC4 var_1128        = dword ptr -1128h
.text$mn:00000FC4 var_1124        = dword ptr -1124h
.text$mn:00000FC4 var_1120        = dword ptr -1120h
.text$mn:00000FC4 var_111C        = dword ptr -111Ch
.text$mn:00000FC4 var_1118        = dword ptr -1118h
.text$mn:00000FC4 var_1114        = dword ptr -1114h
.text$mn:00000FC4 var_1110        = dword ptr -1110h
.text$mn:00000FC4 var_110C        = dword ptr -110Ch
.text$mn:00000FC4 var_1108        = dword ptr -1108h
.text$mn:00000FC4 var_1104        = dword ptr -1104h
.text$mn:00000FC4 var_1100        = dword ptr -1100h
.text$mn:00000FC4 var_10FC        = dword ptr -10FCh
.text$mn:00000FC4 var_10F8        = dword ptr -10F8h
.text$mn:00000FC4 var_10F4        = dword ptr -10F4h
.text$mn:00000FC4 var_10F0        = dword ptr -10F0h
.text$mn:00000FC4 ho              = dword ptr -10ECh
.text$mn:00000FC4 var_10E8        = dword ptr -10E8h
.text$mn:00000FC4 var_10E4        = dword ptr -10E4h
.text$mn:00000FC4 var_10E0        = dword ptr -10E0h
.text$mn:00000FC4 var_10DC        = dword ptr -10DCh
.text$mn:00000FC4 var_10D8        = dword ptr -10D8h
.text$mn:00000FC4 var_10D4        = dword ptr -10D4h
.text$mn:00000FC4 var_10D0        = dword ptr -10D0h
.text$mn:00000FC4 var_10CC        = dword ptr -10CCh
.text$mn:00000FC4 var_10C8        = dword ptr -10C8h
.text$mn:00000FC4 var_10C4        = dword ptr -10C4h
.text$mn:00000FC4 var_10C0        = dword ptr -10C0h
.text$mn:00000FC4 var_10BC        = dword ptr -10BCh
.text$mn:00000FC4 pszFaceName     = dword ptr -10B8h
.text$mn:00000FC4 nNumerator      = dword ptr -10B4h
.text$mn:00000FC4 var_10B0        = dword ptr -10B0h
.text$mn:00000FC4 nNumber         = dword ptr -10ACh
.text$mn:00000FC4 cWeight         = dword ptr -10A8h
.text$mn:00000FC4 bItalic         = dword ptr -10A4h
.text$mn:00000FC4 var_10A0        = tagPOINT ptr -10A0h
.text$mn:00000FC4 h               = dword ptr -1098h
.text$mn:00000FC4 var_1094        = dword ptr -1094h
.text$mn:00000FC4 var_108D        = byte ptr -108Dh
.text$mn:00000FC4 var_108C        = dword ptr -108Ch
.text$mn:00000FC4 var_1088        = dword ptr -1088h
.text$mn:00000FC4 var_1084        = dword ptr -1084h
.text$mn:00000FC4 var_1080        = dword ptr -1080h
.text$mn:00000FC4 var_107C        = dword ptr -107Ch
.text$mn:00000FC4 cHeight         = dword ptr -1078h
.text$mn:00000FC4 var_1071        = byte ptr -1071h
.text$mn:00000FC4 var_1070        = dword ptr -1070h
.text$mn:00000FC4 var_106C        = dword ptr -106Ch
.text$mn:00000FC4 var_1068        = dword ptr -1068h
.text$mn:00000FC4 var_1064        = dword ptr -1064h
.text$mn:00000FC4 x               = dword ptr -1060h
.text$mn:00000FC4 var_105C        = dword ptr -105Ch
.text$mn:00000FC4 var_1058        = dword ptr -1058h
.text$mn:00000FC4 var_1054        = dword ptr -1054h
.text$mn:00000FC4 var_1050        = dword ptr -1050h
.text$mn:00000FC4 var_104C        = dword ptr -104Ch
.text$mn:00000FC4 var_1048        = dword ptr -1048h
.text$mn:00000FC4 var_1044        = dword ptr -1044h
.text$mn:00000FC4 var_1040        = dword ptr -1040h
.text$mn:00000FC4 var_103C        = dword ptr -103Ch
.text$mn:00000FC4 tm              = tagTEXTMETRICW ptr -1038h
.text$mn:00000FC4 var_FFC         = byte ptr -0FFCh
.text$mn:00000FC4 var_FE0         = byte ptr -0FE0h
.text$mn:00000FC4 var_FC4         = dword ptr -0FC4h
.text$mn:00000FC4 SystemTime      = _SYSTEMTIME ptr -0FA8h
.text$mn:00000FC4 var_F98         = dword ptr -0F98h
.text$mn:00000FC4 var_F7C         = dword ptr -0F7Ch
.text$mn:00000FC4 var_F60         = dword ptr -0F60h
.text$mn:00000FC4 var_F44         = dword ptr -0F44h
.text$mn:00000FC4 var_F28         = dword ptr -0F28h
.text$mn:00000FC4 var_F0C         = byte ptr -0F0Ch
.text$mn:00000FC4 var_EF0         = byte ptr -0EF0h
.text$mn:00000FC4 var_ED4         = byte ptr -0ED4h
.text$mn:00000FC4 var_EB8         = byte ptr -0EB8h
.text$mn:00000FC4 var_E9C         = RECT ptr -0E9Ch
.text$mn:00000FC4 rect            = RECT ptr -0E8Ch
.text$mn:00000FC4 var_E7C         = dword ptr -0E7Ch
.text$mn:00000FC4 var_E78         = dword ptr -0E78h
.text$mn:00000FC4 var_E74         = dword ptr -0E74h
.text$mn:00000FC4 var_E70         = dword ptr -0E70h
.text$mn:00000FC4 pt              = tagPOINT ptr -0E6Ch
.text$mn:00000FC4 var_E64         = dword ptr -0E64h
.text$mn:00000FC4 var_E60         = dword ptr -0E60h
.text$mn:00000FC4 var_E5C         = tagPOINT ptr -0E5Ch
.text$mn:00000FC4 var_E54         = dword ptr -0E54h
.text$mn:00000FC4 var_E50         = dword ptr -0E50h
.text$mn:00000FC4 var_E4C         = word ptr -0E4Ch
.text$mn:00000FC4 Dst             = byte ptr -0E4Ah
.text$mn:00000FC4 var_C4C         = word ptr -0C4Ch
.text$mn:00000FC4 var_C4A         = byte ptr -0C4Ah
.text$mn:00000FC4 var_A4C         = word ptr -0A4Ch
.text$mn:00000FC4 var_A4A         = byte ptr -0A4Ah
.text$mn:00000FC4 var_84C         = word ptr -84Ch
.text$mn:00000FC4 var_84A         = byte ptr -84Ah
.text$mn:00000FC4 var_64C         = word ptr -64Ch
.text$mn:00000FC4 var_64A         = byte ptr -64Ah
.text$mn:00000FC4 var_44C         = word ptr -44Ch
.text$mn:00000FC4 var_44A         = byte ptr -44Ah
.text$mn:00000FC4 var_24C         = word ptr -24Ch
.text$mn:00000FC4 TimeStr         = word ptr -1CCh
.text$mn:00000FC4 DateStr         = word ptr -14Ch
.text$mn:00000FC4 Str             = word ptr -0CCh
.text$mn:00000FC4 var_8C          = word ptr -8Ch
.text$mn:00000FC4 String          = word ptr -70h
.text$mn:00000FC4 var_3C          = word ptr -3Ch
.text$mn:00000FC4 var_20          = word ptr -20h
.text$mn:00000FC4 var_1C          = dword ptr -1Ch
.text$mn:00000FC4 var_18          = dword ptr -18h
.text$mn:00000FC4 var_14          = dword ptr -14h
.text$mn:00000FC4 var_10          = dword ptr -10h
.text$mn:00000FC4 var_C           = dword ptr -0Ch
.text$mn:00000FC4 var_4           = dword ptr -4
.text$mn:00000FC4 arg_0           = byte ptr  8
.text$mn:00000FC4
.text$mn:00000FC4                 push    ebp
.text$mn:00000FC5                 mov     ebp, esp
.text$mn:00000FC7                 push    0FFFFFFFFh
.text$mn:00000FC9                 push    offset __ehhandler$?doPrint@Printer@@QAEI_N@Z
.text$mn:00000FCE                 mov     eax, large fs:0
.text$mn:00000FD4                 push    eax
.text$mn:00000FD5                 mov     eax, 12F0h
.text$mn:00000FDA                 call    __chkstk
.text$mn:00000FDF                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000FE4                 xor     eax, ebp
.text$mn:00000FE6                 mov     [ebp+var_10], eax
.text$mn:00000FE9                 push    esi
.text$mn:00000FEA                 push    edi
.text$mn:00000FEB                 push    eax
.text$mn:00000FEC                 lea     eax, [ebp+var_C]
.text$mn:00000FEF                 mov     large fs:0, eax
.text$mn:00000FF5                 mov     [ebp+var_106C], ecx
.text$mn:00000FFB                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:00001000                 mov     ecx, eax        ; this
.text$mn:00001002                 call    ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ ; NppParameters::getNppGUI(void)
.text$mn:00001007                 mov     [ebp+var_1070], eax
.text$mn:0000100D                 push    58h ; 'X'       ; index
.text$mn:0000100F                 mov     eax, [ebp+var_106C]
.text$mn:00001015                 mov     ecx, [eax+10h]
.text$mn:00001018                 push    ecx             ; hdc
.text$mn:00001019                 call    dword ptr ds:__imp__GetDeviceCaps@8 ; GetDeviceCaps(x,x)
.text$mn:0000101F                 mov     [ebp+nNumerator], eax
.text$mn:00001025                 push    5Ah ; 'Z'       ; index
.text$mn:00001027                 mov     edx, [ebp+var_106C]
.text$mn:0000102D                 mov     eax, [edx+10h]
.text$mn:00001030                 push    eax             ; hdc
.text$mn:00001031                 call    dword ptr ds:__imp__GetDeviceCaps@8 ; GetDeviceCaps(x,x)
.text$mn:00001037                 mov     [ebp+var_10B0], eax
.text$mn:0000103D                 push    6Eh ; 'n'       ; index
.text$mn:0000103F                 mov     ecx, [ebp+var_106C]
.text$mn:00001045                 mov     edx, [ecx+10h]
.text$mn:00001048                 push    edx             ; hdc
.text$mn:00001049                 call    dword ptr ds:__imp__GetDeviceCaps@8 ; GetDeviceCaps(x,x)
.text$mn:0000104F                 mov     [ebp+var_10A0.x], eax
.text$mn:00001055                 push    6Fh ; 'o'       ; index
.text$mn:00001057                 mov     eax, [ebp+var_106C]
.text$mn:0000105D                 mov     ecx, [eax+10h]
.text$mn:00001060                 push    ecx             ; hdc
.text$mn:00001061                 call    dword ptr ds:__imp__GetDeviceCaps@8 ; GetDeviceCaps(x,x)
.text$mn:00001067                 mov     [ebp+var_10A0.y], eax
.text$mn:0000106D                 push    70h ; 'p'       ; index
.text$mn:0000106F                 mov     edx, [ebp+var_106C]
.text$mn:00001075                 mov     eax, [edx+10h]
.text$mn:00001078                 push    eax             ; hdc
.text$mn:00001079                 call    dword ptr ds:__imp__GetDeviceCaps@8 ; GetDeviceCaps(x,x)
.text$mn:0000107F                 mov     [ebp+var_E5C.x], eax
.text$mn:00001085                 push    71h ; 'q'       ; index
.text$mn:00001087                 mov     ecx, [ebp+var_106C]
.text$mn:0000108D                 mov     edx, [ecx+10h]
.text$mn:00001090                 push    edx             ; hdc
.text$mn:00001091                 call    dword ptr ds:__imp__GetDeviceCaps@8 ; GetDeviceCaps(x,x)
.text$mn:00001097                 mov     [ebp+var_E5C.y], eax
.text$mn:0000109D                 push    8               ; index
.text$mn:0000109F                 mov     eax, [ebp+var_106C]
.text$mn:000010A5                 mov     ecx, [eax+10h]
.text$mn:000010A8                 push    ecx             ; hdc
.text$mn:000010A9                 call    dword ptr ds:__imp__GetDeviceCaps@8 ; GetDeviceCaps(x,x)
.text$mn:000010AF                 mov     edx, [ebp+var_10A0.x]
.text$mn:000010B5                 sub     edx, eax
.text$mn:000010B7                 sub     edx, [ebp+var_E5C.x]
.text$mn:000010BD                 mov     [ebp+var_E54], edx
.text$mn:000010C3                 push    0Ah             ; index
.text$mn:000010C5                 mov     eax, [ebp+var_106C]
.text$mn:000010CB                 mov     ecx, [eax+10h]
.text$mn:000010CE                 push    ecx             ; hdc
.text$mn:000010CF                 call    dword ptr ds:__imp__GetDeviceCaps@8 ; GetDeviceCaps(x,x)
.text$mn:000010D5                 mov     edx, [ebp+var_10A0.y]
.text$mn:000010DB                 sub     edx, eax
.text$mn:000010DD                 sub     edx, [ebp+var_E5C.y]
.text$mn:000010E3                 mov     [ebp+var_E50], edx
.text$mn:000010E9                 mov     ecx, [ebp+var_1070]
.text$mn:000010EF                 add     ecx, 78h ; 'x'  ; this
.text$mn:000010F2                 call    ?isUserMargePresent@PrintSettings@@QBE_NXZ ; PrintSettings::isUserMargePresent(void)
.text$mn:000010F7                 movzx   eax, al
.text$mn:000010FA                 test    eax, eax
.text$mn:000010FC                 jz      loc_126C
.text$mn:00001102                 push    9ECh            ; nDenominator
.text$mn:00001107                 mov     ecx, [ebp+nNumerator]
.text$mn:0000110D                 push    ecx             ; nNumerator
.text$mn:0000110E                 mov     edx, [ebp+var_1070]
.text$mn:00001114                 imul    eax, [edx+170h], 64h ; 'd'
.text$mn:0000111B                 push    eax             ; nNumber
.text$mn:0000111C                 call    dword ptr ds:__imp__MulDiv@12 ; MulDiv(x,x,x)
.text$mn:00001122                 mov     [ebp+var_E7C], eax
.text$mn:00001128                 push    9ECh            ; nDenominator
.text$mn:0000112D                 mov     ecx, [ebp+var_10B0]
.text$mn:00001133                 push    ecx             ; nNumerator
.text$mn:00001134                 mov     edx, [ebp+var_1070]
.text$mn:0000113A                 imul    eax, [edx+174h], 64h ; 'd'
.text$mn:00001141                 push    eax             ; nNumber
.text$mn:00001142                 call    dword ptr ds:__imp__MulDiv@12 ; MulDiv(x,x,x)
.text$mn:00001148                 mov     [ebp+var_E78], eax
.text$mn:0000114E                 push    9ECh            ; nDenominator
.text$mn:00001153                 mov     ecx, [ebp+nNumerator]
.text$mn:00001159                 push    ecx             ; nNumerator
.text$mn:0000115A                 mov     edx, [ebp+var_1070]
.text$mn:00001160                 imul    eax, [edx+178h], 64h ; 'd'
.text$mn:00001167                 push    eax             ; nNumber
.text$mn:00001168                 call    dword ptr ds:__imp__MulDiv@12 ; MulDiv(x,x,x)
.text$mn:0000116E                 mov     [ebp+var_E74], eax
.text$mn:00001174                 push    9ECh            ; nDenominator
.text$mn:00001179                 mov     ecx, [ebp+var_10B0]
.text$mn:0000117F                 push    ecx             ; nNumerator
.text$mn:00001180                 mov     edx, [ebp+var_1070]
.text$mn:00001186                 imul    eax, [edx+17Ch], 64h ; 'd'
.text$mn:0000118D                 push    eax             ; nNumber
.text$mn:0000118E                 call    dword ptr ds:__imp__MulDiv@12 ; MulDiv(x,x,x)
.text$mn:00001194                 mov     [ebp+var_E70], eax
.text$mn:0000119A                 mov     ecx, [ebp+var_E5C.x]
.text$mn:000011A0                 cmp     ecx, [ebp+var_E7C]
.text$mn:000011A6                 jle     short loc_11B6
.text$mn:000011A8                 mov     edx, [ebp+var_E5C.x]
.text$mn:000011AE                 mov     [ebp+var_10D4], edx
.text$mn:000011B4                 jmp     short loc_11C2
.text$mn:000011B6 ; ---------------------------------------------------------------------------
.text$mn:000011B6
.text$mn:000011B6 loc_11B6:                               ; CODE XREF: Printer::doPrint(bool)+1E2j
.text$mn:000011B6                 mov     eax, [ebp+var_E7C]
.text$mn:000011BC                 mov     [ebp+var_10D4], eax
.text$mn:000011C2
.text$mn:000011C2 loc_11C2:                               ; CODE XREF: Printer::doPrint(bool)+1F0j
.text$mn:000011C2                 mov     ecx, [ebp+var_10D4]
.text$mn:000011C8                 mov     [ebp+pt.x], ecx
.text$mn:000011CE                 mov     edx, [ebp+var_E5C.y]
.text$mn:000011D4                 cmp     edx, [ebp+var_E78]
.text$mn:000011DA                 jle     short loc_11EA
.text$mn:000011DC                 mov     eax, [ebp+var_E5C.y]
.text$mn:000011E2                 mov     [ebp+var_10DC], eax
.text$mn:000011E8                 jmp     short loc_11F6
.text$mn:000011EA ; ---------------------------------------------------------------------------
.text$mn:000011EA
.text$mn:000011EA loc_11EA:                               ; CODE XREF: Printer::doPrint(bool)+216j
.text$mn:000011EA                 mov     ecx, [ebp+var_E78]
.text$mn:000011F0                 mov     [ebp+var_10DC], ecx
.text$mn:000011F6
.text$mn:000011F6 loc_11F6:                               ; CODE XREF: Printer::doPrint(bool)+224j
.text$mn:000011F6                 mov     edx, [ebp+var_10DC]
.text$mn:000011FC                 mov     [ebp+pt.y], edx
.text$mn:00001202                 mov     eax, [ebp+var_E54]
.text$mn:00001208                 cmp     eax, [ebp+var_E74]
.text$mn:0000120E                 jle     short loc_121E
.text$mn:00001210                 mov     ecx, [ebp+var_E54]
.text$mn:00001216                 mov     [ebp+var_1104], ecx
.text$mn:0000121C                 jmp     short loc_122A
.text$mn:0000121E ; ---------------------------------------------------------------------------
.text$mn:0000121E
.text$mn:0000121E loc_121E:                               ; CODE XREF: Printer::doPrint(bool)+24Aj
.text$mn:0000121E                 mov     edx, [ebp+var_E74]
.text$mn:00001224                 mov     [ebp+var_1104], edx
.text$mn:0000122A
.text$mn:0000122A loc_122A:                               ; CODE XREF: Printer::doPrint(bool)+258j
.text$mn:0000122A                 mov     eax, [ebp+var_1104]
.text$mn:00001230                 mov     [ebp+var_E64], eax
.text$mn:00001236                 mov     ecx, [ebp+var_E50]
.text$mn:0000123C                 cmp     ecx, [ebp+var_E70]
.text$mn:00001242                 jle     short loc_1252
.text$mn:00001244                 mov     edx, [ebp+var_E50]
.text$mn:0000124A                 mov     [ebp+var_10E4], edx
.text$mn:00001250                 jmp     short loc_125E
.text$mn:00001252 ; ---------------------------------------------------------------------------
.text$mn:00001252
.text$mn:00001252 loc_1252:                               ; CODE XREF: Printer::doPrint(bool)+27Ej
.text$mn:00001252                 mov     eax, [ebp+var_E70]
.text$mn:00001258                 mov     [ebp+var_10E4], eax
.text$mn:0000125E
.text$mn:0000125E loc_125E:                               ; CODE XREF: Printer::doPrint(bool)+28Cj
.text$mn:0000125E                 mov     ecx, [ebp+var_10E4]
.text$mn:00001264                 mov     [ebp+var_E60], ecx
.text$mn:0000126A                 jmp     short loc_129C
.text$mn:0000126C ; ---------------------------------------------------------------------------
.text$mn:0000126C
.text$mn:0000126C loc_126C:                               ; CODE XREF: Printer::doPrint(bool)+138j
.text$mn:0000126C                 mov     edx, [ebp+var_E5C.x]
.text$mn:00001272                 mov     [ebp+pt.x], edx
.text$mn:00001278                 mov     eax, [ebp+var_E5C.y]
.text$mn:0000127E                 mov     [ebp+pt.y], eax
.text$mn:00001284                 mov     ecx, [ebp+var_E54]
.text$mn:0000128A                 mov     [ebp+var_E64], ecx
.text$mn:00001290                 mov     edx, [ebp+var_E50]
.text$mn:00001296                 mov     [ebp+var_E60], edx
.text$mn:0000129C
.text$mn:0000129C loc_129C:                               ; CODE XREF: Printer::doPrint(bool)+2A6j
.text$mn:0000129C                 push    2               ; c
.text$mn:0000129E                 lea     eax, [ebp+pt]
.text$mn:000012A4                 push    eax             ; lppt
.text$mn:000012A5                 mov     ecx, [ebp+var_106C]
.text$mn:000012AB                 mov     edx, [ecx+10h]
.text$mn:000012AE                 push    edx             ; hdc
.text$mn:000012AF                 call    dword ptr ds:__imp__DPtoLP@12 ; DPtoLP(x,x,x)
.text$mn:000012B5                 push    2               ; c
.text$mn:000012B7                 lea     eax, [ebp+var_E5C]
.text$mn:000012BD                 push    eax             ; lppt
.text$mn:000012BE                 mov     ecx, [ebp+var_106C]
.text$mn:000012C4                 mov     edx, [ecx+10h]
.text$mn:000012C7                 push    edx             ; hdc
.text$mn:000012C8                 call    dword ptr ds:__imp__DPtoLP@12 ; DPtoLP(x,x,x)
.text$mn:000012CE                 push    1               ; c
.text$mn:000012D0                 lea     eax, [ebp+var_10A0]
.text$mn:000012D6                 push    eax             ; lppt
.text$mn:000012D7                 mov     ecx, [ebp+var_106C]
.text$mn:000012DD                 mov     edx, [ecx+10h]
.text$mn:000012E0                 push    edx             ; hdc
.text$mn:000012E1                 call    dword ptr ds:__imp__DPtoLP@12 ; DPtoLP(x,x,x)
.text$mn:000012E7                 mov     eax, [ebp+var_1070]
.text$mn:000012ED                 cmp     dword ptr [eax+0F4h], 0
.text$mn:000012F4                 jz      short loc_130A
.text$mn:000012F6                 mov     ecx, [ebp+var_1070]
.text$mn:000012FC                 mov     edx, [ecx+0F4h]
.text$mn:00001302                 mov     [ebp+var_10FC], edx
.text$mn:00001308                 jmp     short loc_1314
.text$mn:0000130A ; ---------------------------------------------------------------------------
.text$mn:0000130A
.text$mn:0000130A loc_130A:                               ; CODE XREF: Printer::doPrint(bool)+330j
.text$mn:0000130A                 mov     [ebp+var_10FC], 9
.text$mn:00001314
.text$mn:00001314 loc_1314:                               ; CODE XREF: Printer::doPrint(bool)+344j
.text$mn:00001314                 mov     eax, [ebp+var_10FC]
.text$mn:0000131A                 mov     [ebp+nNumber], eax
.text$mn:00001320                 mov     ecx, [ebp+var_1070]
.text$mn:00001326                 mov     edx, [ecx+0F0h]
.text$mn:0000132C                 and     edx, 1
.text$mn:0000132F                 jz      short loc_133D
.text$mn:00001331                 mov     [ebp+var_10C0], 2BCh
.text$mn:0000133B                 jmp     short loc_1347
.text$mn:0000133D ; ---------------------------------------------------------------------------
.text$mn:0000133D
.text$mn:0000133D loc_133D:                               ; CODE XREF: Printer::doPrint(bool)+36Bj
.text$mn:0000133D                 mov     [ebp+var_10C0], 190h
.text$mn:00001347
.text$mn:00001347 loc_1347:                               ; CODE XREF: Printer::doPrint(bool)+377j
.text$mn:00001347                 mov     eax, [ebp+var_10C0]
.text$mn:0000134D                 mov     [ebp+cWeight], eax
.text$mn:00001353                 mov     ecx, [ebp+var_1070]
.text$mn:00001359                 mov     edx, [ecx+0F0h]
.text$mn:0000135F                 and     edx, 2
.text$mn:00001362                 jz      short loc_1370
.text$mn:00001364                 mov     [ebp+var_10C8], 1
.text$mn:0000136E                 jmp     short loc_137A
.text$mn:00001370 ; ---------------------------------------------------------------------------
.text$mn:00001370
.text$mn:00001370 loc_1370:                               ; CODE XREF: Printer::doPrint(bool)+39Ej
.text$mn:00001370                 mov     [ebp+var_10C8], 0
.text$mn:0000137A
.text$mn:0000137A loc_137A:                               ; CODE XREF: Printer::doPrint(bool)+3AAj
.text$mn:0000137A                 mov     eax, [ebp+var_10C8]
.text$mn:00001380                 mov     [ebp+bItalic], eax
.text$mn:00001386                 push    offset $SG151862 ; Str
.text$mn:0000138B                 mov     ecx, [ebp+var_1070]
.text$mn:00001391                 add     ecx, 0D4h ; '+'
.text$mn:00001397                 push    ecx             ; int
.text$mn:00001398                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:0000139D                 add     esp, 8
.text$mn:000013A0                 movzx   edx, al
.text$mn:000013A3                 test    edx, edx
.text$mn:000013A5                 jz      short loc_13C0
.text$mn:000013A7                 mov     ecx, [ebp+var_1070]
.text$mn:000013AD                 add     ecx, 0D4h ; '+'
.text$mn:000013B3                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000013B8                 mov     [ebp+var_10D0], eax
.text$mn:000013BE                 jmp     short loc_13CA
.text$mn:000013C0 ; ---------------------------------------------------------------------------
.text$mn:000013C0
.text$mn:000013C0 loc_13C0:                               ; CODE XREF: Printer::doPrint(bool)+3E1j
.text$mn:000013C0                 mov     [ebp+var_10D0], offset $SG151863 ; "Arial"
.text$mn:000013CA
.text$mn:000013CA loc_13CA:                               ; CODE XREF: Printer::doPrint(bool)+3FAj
.text$mn:000013CA                 mov     eax, [ebp+var_10D0]
.text$mn:000013D0                 mov     [ebp+pszFaceName], eax
.text$mn:000013D6                 push    48h ; 'H'       ; nDenominator
.text$mn:000013D8                 mov     ecx, [ebp+var_10B0]
.text$mn:000013DE                 push    ecx             ; nNumerator
.text$mn:000013DF                 mov     edx, [ebp+nNumber]
.text$mn:000013E5                 push    edx             ; nNumber
.text$mn:000013E6                 call    dword ptr ds:__imp__MulDiv@12 ; MulDiv(x,x,x)
.text$mn:000013EC                 mov     [ebp+cHeight], eax
.text$mn:000013F2                 mov     eax, [ebp+pszFaceName]
.text$mn:000013F8                 push    eax             ; pszFaceName
.text$mn:000013F9                 push    0               ; iPitchAndFamily
.text$mn:000013FB                 push    0               ; iQuality
.text$mn:000013FD                 push    0               ; iClipPrecision
.text$mn:000013FF                 push    0               ; iOutPrecision
.text$mn:00001401                 push    0               ; iCharSet
.text$mn:00001403                 push    0               ; bStrikeOut
.text$mn:00001405                 push    0               ; bUnderline
.text$mn:00001407                 mov     ecx, [ebp+bItalic]
.text$mn:0000140D                 push    ecx             ; bItalic
.text$mn:0000140E                 mov     edx, [ebp+cWeight]
.text$mn:00001414                 push    edx             ; cWeight
.text$mn:00001415                 push    0               ; cOrientation
.text$mn:00001417                 push    0               ; cEscapement
.text$mn:00001419                 push    0               ; cWidth
.text$mn:0000141B                 mov     eax, [ebp+cHeight]
.text$mn:00001421                 push    eax             ; cHeight
.text$mn:00001422                 call    dword ptr ds:__imp__CreateFontW@56 ; CreateFontW(x,x,x,x,x,x,x,x,x,x,x,x,x,x)
.text$mn:00001428                 mov     [ebp+h], eax
.text$mn:0000142E                 mov     ecx, [ebp+h]
.text$mn:00001434                 push    ecx             ; h
.text$mn:00001435                 mov     edx, [ebp+var_106C]
.text$mn:0000143B                 mov     eax, [edx+10h]
.text$mn:0000143E                 push    eax             ; hdc
.text$mn:0000143F                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text$mn:00001445                 lea     ecx, [ebp+tm]
.text$mn:0000144B                 push    ecx             ; lptm
.text$mn:0000144C                 mov     edx, [ebp+var_106C]
.text$mn:00001452                 mov     eax, [edx+10h]
.text$mn:00001455                 push    eax             ; hdc
.text$mn:00001456                 call    dword ptr ds:__imp__GetTextMetricsW@8 ; GetTextMetricsW(x,x)
.text$mn:0000145C                 mov     ecx, [ebp+tm.tmHeight]
.text$mn:00001462                 add     ecx, [ebp+tm.tmExternalLeading]
.text$mn:00001468                 mov     [ebp+cHeight], ecx
.text$mn:0000146E                 mov     edx, [ebp+var_1070]
.text$mn:00001474                 cmp     dword ptr [edx+16Ch], 0
.text$mn:0000147B                 jz      short loc_1491
.text$mn:0000147D                 mov     eax, [ebp+var_1070]
.text$mn:00001483                 mov     ecx, [eax+16Ch]
.text$mn:00001489                 mov     [ebp+var_10D8], ecx
.text$mn:0000148F                 jmp     short loc_149B
.text$mn:00001491 ; ---------------------------------------------------------------------------
.text$mn:00001491
.text$mn:00001491 loc_1491:                               ; CODE XREF: Printer::doPrint(bool)+4B7j
.text$mn:00001491                 mov     [ebp+var_10D8], 9
.text$mn:0000149B
.text$mn:0000149B loc_149B:                               ; CODE XREF: Printer::doPrint(bool)+4CBj
.text$mn:0000149B                 mov     edx, [ebp+var_10D8]
.text$mn:000014A1                 mov     [ebp+nNumber], edx
.text$mn:000014A7                 mov     eax, [ebp+var_1070]
.text$mn:000014AD                 mov     ecx, [eax+168h]
.text$mn:000014B3                 and     ecx, 1
.text$mn:000014B6                 jz      short loc_14C4
.text$mn:000014B8                 mov     [ebp+var_10E0], 2BCh
.text$mn:000014C2                 jmp     short loc_14CE
.text$mn:000014C4 ; ---------------------------------------------------------------------------
.text$mn:000014C4
.text$mn:000014C4 loc_14C4:                               ; CODE XREF: Printer::doPrint(bool)+4F2j
.text$mn:000014C4                 mov     [ebp+var_10E0], 190h
.text$mn:000014CE
.text$mn:000014CE loc_14CE:                               ; CODE XREF: Printer::doPrint(bool)+4FEj
.text$mn:000014CE                 mov     edx, [ebp+var_10E0]
.text$mn:000014D4                 mov     [ebp+cWeight], edx
.text$mn:000014DA                 mov     eax, [ebp+var_1070]
.text$mn:000014E0                 mov     ecx, [eax+168h]
.text$mn:000014E6                 and     ecx, 2
.text$mn:000014E9                 jz      short loc_14F7
.text$mn:000014EB                 mov     [ebp+var_10E8], 1
.text$mn:000014F5                 jmp     short loc_1501
.text$mn:000014F7 ; ---------------------------------------------------------------------------
.text$mn:000014F7
.text$mn:000014F7 loc_14F7:                               ; CODE XREF: Printer::doPrint(bool)+525j
.text$mn:000014F7                 mov     [ebp+var_10E8], 0
.text$mn:00001501
.text$mn:00001501 loc_1501:                               ; CODE XREF: Printer::doPrint(bool)+531j
.text$mn:00001501                 mov     edx, [ebp+var_10E8]
.text$mn:00001507                 mov     [ebp+bItalic], edx
.text$mn:0000150D                 push    offset $SG151882 ; Str
.text$mn:00001512                 mov     eax, [ebp+var_1070]
.text$mn:00001518                 add     eax, 14Ch
.text$mn:0000151D                 push    eax             ; int
.text$mn:0000151E                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00001523                 add     esp, 8
.text$mn:00001526                 movzx   ecx, al
.text$mn:00001529                 test    ecx, ecx
.text$mn:0000152B                 jz      short loc_1546
.text$mn:0000152D                 mov     ecx, [ebp+var_1070]
.text$mn:00001533                 add     ecx, 14Ch
.text$mn:00001539                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000153E                 mov     [ebp+var_10F0], eax
.text$mn:00001544                 jmp     short loc_1550
.text$mn:00001546 ; ---------------------------------------------------------------------------
.text$mn:00001546
.text$mn:00001546 loc_1546:                               ; CODE XREF: Printer::doPrint(bool)+567j
.text$mn:00001546                 mov     [ebp+var_10F0], offset $SG151883 ; "Arial"
.text$mn:00001550
.text$mn:00001550 loc_1550:                               ; CODE XREF: Printer::doPrint(bool)+580j
.text$mn:00001550                 mov     edx, [ebp+var_10F0]
.text$mn:00001556                 mov     [ebp+pszFaceName], edx
.text$mn:0000155C                 push    48h ; 'H'       ; nDenominator
.text$mn:0000155E                 mov     eax, [ebp+var_10B0]
.text$mn:00001564                 push    eax             ; nNumerator
.text$mn:00001565                 mov     ecx, [ebp+nNumber]
.text$mn:0000156B                 push    ecx             ; nNumber
.text$mn:0000156C                 call    dword ptr ds:__imp__MulDiv@12 ; MulDiv(x,x,x)
.text$mn:00001572                 mov     [ebp+var_107C], eax
.text$mn:00001578                 mov     edx, [ebp+pszFaceName]
.text$mn:0000157E                 push    edx             ; pszFaceName
.text$mn:0000157F                 push    0               ; iPitchAndFamily
.text$mn:00001581                 push    0               ; iQuality
.text$mn:00001583                 push    0               ; iClipPrecision
.text$mn:00001585                 push    0               ; iOutPrecision
.text$mn:00001587                 push    0               ; iCharSet
.text$mn:00001589                 push    0               ; bStrikeOut
.text$mn:0000158B                 push    0               ; bUnderline
.text$mn:0000158D                 mov     eax, [ebp+bItalic]
.text$mn:00001593                 push    eax             ; bItalic
.text$mn:00001594                 mov     ecx, [ebp+cWeight]
.text$mn:0000159A                 push    ecx             ; cWeight
.text$mn:0000159B                 push    0               ; cOrientation
.text$mn:0000159D                 push    0               ; cEscapement
.text$mn:0000159F                 push    0               ; cWidth
.text$mn:000015A1                 mov     edx, [ebp+var_107C]
.text$mn:000015A7                 push    edx             ; cHeight
.text$mn:000015A8                 call    dword ptr ds:__imp__CreateFontW@56 ; CreateFontW(x,x,x,x,x,x,x,x,x,x,x,x,x,x)
.text$mn:000015AE                 mov     [ebp+var_1094], eax
.text$mn:000015B4                 mov     eax, [ebp+var_1094]
.text$mn:000015BA                 push    eax             ; h
.text$mn:000015BB                 mov     ecx, [ebp+var_106C]
.text$mn:000015C1                 mov     edx, [ecx+10h]
.text$mn:000015C4                 push    edx             ; hdc
.text$mn:000015C5                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text$mn:000015CB                 lea     eax, [ebp+tm]
.text$mn:000015D1                 push    eax             ; lptm
.text$mn:000015D2                 mov     ecx, [ebp+var_106C]
.text$mn:000015D8                 mov     edx, [ecx+10h]
.text$mn:000015DB                 push    edx             ; hdc
.text$mn:000015DC                 call    dword ptr ds:__imp__GetTextMetricsW@8 ; GetTextMetricsW(x,x)
.text$mn:000015E2                 mov     eax, [ebp+tm.tmHeight]
.text$mn:000015E8                 add     eax, [ebp+tm.tmExternalLeading]
.text$mn:000015EE                 mov     [ebp+var_107C], eax
.text$mn:000015F4                 lea     ecx, [ebp+tm]
.text$mn:000015FA                 push    ecx             ; lptm
.text$mn:000015FB                 mov     edx, [ebp+var_106C]
.text$mn:00001601                 mov     eax, [edx+10h]
.text$mn:00001604                 push    eax             ; hdc
.text$mn:00001605                 call    dword ptr ds:__imp__GetTextMetricsW@8 ; GetTextMetricsW(x,x)
.text$mn:0000160B                 mov     ecx, [ebp+tm.tmHeight]
.text$mn:00001611                 add     ecx, [ebp+tm.tmExternalLeading]
.text$mn:00001617                 mov     [ebp+var_1088], ecx
.text$mn:0000161D                 mov     eax, [ebp+var_1088]
.text$mn:00001623                 cdq
.text$mn:00001624                 sub     eax, edx
.text$mn:00001626                 sar     eax, 1
.text$mn:00001628                 add     eax, [ebp+var_1088]
.text$mn:0000162E                 mov     [ebp+var_1088], eax
.text$mn:00001634                 mov     [ebp+var_11D4.cbSize], 14h
.text$mn:0000163E                 mov     [ebp+var_11D4.fwType], 0
.text$mn:00001648                 mov     edx, [ebp+var_106C]
.text$mn:0000164E                 mov     ecx, [edx+44h]  ; this
.text$mn:00001651                 call    ?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ ; ScintillaEditView::getCurrentBuffer(void)
.text$mn:00001656                 mov     ecx, eax        ; this
.text$mn:00001658                 call    ?getFullPathName@Buffer@@QBEPB_WXZ ; Buffer::getFullPathName(void)
.text$mn:0000165D                 mov     [ebp+var_11D4.lpszDocName], eax
.text$mn:00001663                 mov     [ebp+var_11D4.lpszOutput], 0
.text$mn:0000166D                 mov     [ebp+var_11D4.lpszDatatype], 0
.text$mn:00001677                 lea     eax, [ebp+var_11D4]
.text$mn:0000167D                 push    eax             ; lpdi
.text$mn:0000167E                 mov     ecx, [ebp+var_106C]
.text$mn:00001684                 mov     edx, [ecx+10h]
.text$mn:00001687                 push    edx             ; hdc
.text$mn:00001688                 call    dword ptr ds:__imp__StartDocW@8 ; StartDocW(x,x)
.text$mn:0000168E                 test    eax, eax
.text$mn:00001690                 jge     short loc_16AA
.text$mn:00001692                 push    0               ; uType
.text$mn:00001694                 push    0               ; lpCaption
.text$mn:00001696                 push    offset $SG151890 ; "Can not start printer document."
.text$mn:0000169B                 push    0               ; hWnd
.text$mn:0000169D                 call    dword ptr ds:__imp__MessageBoxW@16 ; MessageBoxW(x,x,x,x)
.text$mn:000016A3                 xor     eax, eax
.text$mn:000016A5                 jmp     loc_3060
.text$mn:000016AA ; ---------------------------------------------------------------------------
.text$mn:000016AA
.text$mn:000016AA loc_16AA:                               ; CODE XREF: Printer::doPrint(bool)+6CCj
.text$mn:000016AA                 mov     [ebp+var_108C], 0
.text$mn:000016B4                 mov     eax, [ebp+var_106C]
.text$mn:000016BA                 mov     ecx, [eax+44h]  ; this
.text$mn:000016BD                 call    ?getCurrentDocLen@ScintillaEditView@@QBEHXZ ; ScintillaEditView::getCurrentDocLen(void)
.text$mn:000016C2                 mov     [ebp+var_1080], eax
.text$mn:000016C8                 mov     ecx, [ebp+var_1080]
.text$mn:000016CE                 mov     [ebp+var_10F8], ecx
.text$mn:000016D4                 mov     edx, [ebp+var_106C]
.text$mn:000016DA                 mov     eax, [edx+14h]
.text$mn:000016DD                 and     eax, 400h
.text$mn:000016E2                 jnz     loc_1775
.text$mn:000016E8                 mov     ecx, [ebp+var_106C]
.text$mn:000016EE                 mov     edx, [ecx+14h]
.text$mn:000016F1                 and     edx, 1
.text$mn:000016F4                 jz      short loc_1775
.text$mn:000016F6                 mov     eax, [ebp+var_106C]
.text$mn:000016FC                 mov     ecx, [ebp+var_106C]
.text$mn:00001702                 mov     edx, [eax+48h]
.text$mn:00001705                 cmp     edx, [ecx+4Ch]
.text$mn:00001708                 jbe     short loc_172A
.text$mn:0000170A                 mov     eax, [ebp+var_106C]
.text$mn:00001710                 mov     ecx, [eax+4Ch]
.text$mn:00001713                 mov     [ebp+var_108C], ecx
.text$mn:00001719                 mov     edx, [ebp+var_106C]
.text$mn:0000171F                 mov     eax, [edx+48h]
.text$mn:00001722                 mov     [ebp+var_1080], eax
.text$mn:00001728                 jmp     short loc_1748
.text$mn:0000172A ; ---------------------------------------------------------------------------
.text$mn:0000172A
.text$mn:0000172A loc_172A:                               ; CODE XREF: Printer::doPrint(bool)+744j
.text$mn:0000172A                 mov     ecx, [ebp+var_106C]
.text$mn:00001730                 mov     edx, [ecx+48h]
.text$mn:00001733                 mov     [ebp+var_108C], edx
.text$mn:00001739                 mov     eax, [ebp+var_106C]
.text$mn:0000173F                 mov     ecx, [eax+4Ch]
.text$mn:00001742                 mov     [ebp+var_1080], ecx
.text$mn:00001748
.text$mn:00001748 loc_1748:                               ; CODE XREF: Printer::doPrint(bool)+764j
.text$mn:00001748                 cmp     [ebp+var_108C], 0
.text$mn:0000174F                 jge     short loc_175B
.text$mn:00001751                 mov     [ebp+var_108C], 0
.text$mn:0000175B
.text$mn:0000175B loc_175B:                               ; CODE XREF: Printer::doPrint(bool)+78Bj
.text$mn:0000175B                 mov     edx, [ebp+var_1080]
.text$mn:00001761                 cmp     edx, [ebp+var_10F8]
.text$mn:00001767                 jle     short loc_1775
.text$mn:00001769                 mov     eax, [ebp+var_10F8]
.text$mn:0000176F                 mov     [ebp+var_1080], eax
.text$mn:00001775
.text$mn:00001775 loc_1775:                               ; CODE XREF: Printer::doPrint(bool)+71Ej
.text$mn:00001775                                         ; Printer::doPrint(bool)+730j ...
.text$mn:00001775                 mov     ecx, [ebp+var_106C]
.text$mn:0000177B                 mov     edx, [ecx+10h]
.text$mn:0000177E                 mov     [ebp+var_1068], edx
.text$mn:00001784                 mov     eax, [ebp+var_106C]
.text$mn:0000178A                 mov     ecx, [eax+10h]
.text$mn:0000178D                 mov     [ebp+var_1064], ecx
.text$mn:00001793                 mov     edx, [ebp+pt.x]
.text$mn:00001799                 sub     edx, [ebp+var_E5C.x]
.text$mn:0000179F                 mov     [ebp+x], edx
.text$mn:000017A5                 mov     eax, [ebp+pt.y]
.text$mn:000017AB                 sub     eax, [ebp+var_E5C.y]
.text$mn:000017B1                 mov     [ebp+var_105C], eax
.text$mn:000017B7                 mov     ecx, [ebp+var_10A0.x]
.text$mn:000017BD                 sub     ecx, [ebp+var_E64]
.text$mn:000017C3                 sub     ecx, [ebp+var_E5C.x]
.text$mn:000017C9                 mov     [ebp+var_1058], ecx
.text$mn:000017CF                 mov     edx, [ebp+var_10A0.y]
.text$mn:000017D5                 sub     edx, [ebp+var_E60]
.text$mn:000017DB                 sub     edx, [ebp+var_E5C.y]
.text$mn:000017E1                 mov     [ebp+var_1054], edx
.text$mn:000017E7                 mov     [ebp+var_1050], 0
.text$mn:000017F1                 mov     [ebp+var_104C], 0
.text$mn:000017FB                 mov     eax, [ebp+var_10A0.x]
.text$mn:00001801                 sub     eax, [ebp+var_E5C.x]
.text$mn:00001807                 sub     eax, [ebp+var_E54]
.text$mn:0000180D                 sub     eax, 1
.text$mn:00001810                 mov     [ebp+var_1048], eax
.text$mn:00001816                 mov     ecx, [ebp+var_10A0.y]
.text$mn:0000181C                 sub     ecx, [ebp+var_E5C.y]
.text$mn:00001822                 sub     ecx, [ebp+var_E50]
.text$mn:00001828                 sub     ecx, 1
.text$mn:0000182B                 mov     [ebp+var_1044], ecx
.text$mn:00001831                 mov     edx, [ebp+var_105C]
.text$mn:00001837                 add     edx, [ebp+var_1088]
.text$mn:0000183D                 mov     [ebp+var_105C], edx
.text$mn:00001843                 mov     eax, [ebp+var_1054]
.text$mn:00001849                 sub     eax, [ebp+var_1088]
.text$mn:0000184F                 mov     [ebp+var_1054], eax
.text$mn:00001855                 mov     ecx, [ebp+x]
.text$mn:0000185B                 add     ecx, [ebp+var_1088]
.text$mn:00001861                 mov     [ebp+x], ecx
.text$mn:00001867                 mov     edx, [ebp+var_1058]
.text$mn:0000186D                 sub     edx, [ebp+var_1088]
.text$mn:00001873                 mov     [ebp+var_1058], edx
.text$mn:00001879                 mov     [ebp+var_124C], 100h
.text$mn:00001883                 mov     ax, ds:$SG151902
.text$mn:00001889                 mov     [ebp+var_E4C], ax
.text$mn:00001890                 push    1FEh            ; Size
.text$mn:00001895                 push    0               ; Val
.text$mn:00001897                 lea     ecx, [ebp+Dst]
.text$mn:0000189D                 push    ecx             ; Dst
.text$mn:0000189E                 call    _memset
.text$mn:000018A3                 add     esp, 0Ch
.text$mn:000018A6                 mov     dx, ds:$SG151904
.text$mn:000018AD                 mov     [ebp+var_A4C], dx
.text$mn:000018B4                 push    1FEh            ; Size
.text$mn:000018B9                 push    0               ; Val
.text$mn:000018BB                 lea     eax, [ebp+var_A4A]
.text$mn:000018C1                 push    eax             ; Dst
.text$mn:000018C2                 call    _memset
.text$mn:000018C7                 add     esp, 0Ch
.text$mn:000018CA                 mov     cx, ds:$SG151906
.text$mn:000018D1                 mov     [ebp+var_64C], cx
.text$mn:000018D8                 push    1FEh            ; Size
.text$mn:000018DD                 push    0               ; Val
.text$mn:000018DF                 lea     edx, [ebp+var_64A]
.text$mn:000018E5                 push    edx             ; Dst
.text$mn:000018E6                 call    _memset
.text$mn:000018EB                 add     esp, 0Ch
.text$mn:000018EE                 mov     ax, ds:$SG151908
.text$mn:000018F4                 mov     [ebp+var_C4C], ax
.text$mn:000018FB                 push    1FEh            ; Size
.text$mn:00001900                 push    0               ; Val
.text$mn:00001902                 lea     ecx, [ebp+var_C4A]
.text$mn:00001908                 push    ecx             ; Dst
.text$mn:00001909                 call    _memset
.text$mn:0000190E                 add     esp, 0Ch
.text$mn:00001911                 mov     dx, ds:$SG151910
.text$mn:00001918                 mov     [ebp+var_84C], dx
.text$mn:0000191F                 push    1FEh            ; Size
.text$mn:00001924                 push    0               ; Val
.text$mn:00001926                 lea     eax, [ebp+var_84A]
.text$mn:0000192C                 push    eax             ; Dst
.text$mn:0000192D                 call    _memset
.text$mn:00001932                 add     esp, 0Ch
.text$mn:00001935                 mov     cx, ds:$SG151912
.text$mn:0000193C                 mov     [ebp+var_44C], cx
.text$mn:00001943                 push    1FEh            ; Size
.text$mn:00001948                 push    0               ; Val
.text$mn:0000194A                 lea     edx, [ebp+var_44A]
.text$mn:00001950                 push    edx             ; Dst
.text$mn:00001951                 call    _memset
.text$mn:00001956                 add     esp, 0Ch
.text$mn:00001959                 mov     ecx, 7
.text$mn:0000195E                 mov     esi, offset $SG151914 ; "$(SHORT_DATE)"
.text$mn:00001963                 lea     edi, [ebp+var_8C]
.text$mn:00001969                 rep movsd
.text$mn:0000196B                 mov     ecx, 6
.text$mn:00001970                 mov     esi, offset $SG151916 ; "$(LONG_DATE)"
.text$mn:00001975                 lea     edi, [ebp+var_3C]
.text$mn:00001978                 rep movsd
.text$mn:0000197A                 movsw
.text$mn:0000197C                 mov     eax, ds:$SG151918
.text$mn:00001981                 mov     dword ptr [ebp+var_20], eax
.text$mn:00001984                 mov     ecx, ds:dword_E24
.text$mn:0000198A                 mov     [ebp+var_1C], ecx
.text$mn:0000198D                 mov     edx, ds:dword_E28
.text$mn:00001993                 mov     [ebp+var_18], edx
.text$mn:00001996                 mov     eax, ds:off_E2C
.text$mn:0000199B                 mov     [ebp+var_14], eax
.text$mn:0000199E                 mov     [ebp+var_1268], 40h ; '@'
.text$mn:000019A8                 lea     ecx, [ebp+SystemTime]
.text$mn:000019AE                 push    ecx             ; lpSystemTime
.text$mn:000019AF                 call    dword ptr ds:__imp__GetLocalTime@4 ; GetLocalTime(x)
.text$mn:000019B5                 push    40h ; '@'       ; cchDate
.text$mn:000019B7                 lea     edx, [ebp+DateStr]
.text$mn:000019BD                 push    edx             ; lpDateStr
.text$mn:000019BE                 push    0               ; lpFormat
.text$mn:000019C0                 lea     eax, [ebp+SystemTime]
.text$mn:000019C6                 push    eax             ; lpDate
.text$mn:000019C7                 push    1               ; dwFlags
.text$mn:000019C9                 push    400h            ; Locale
.text$mn:000019CE                 call    dword ptr ds:__imp__GetDateFormatW@24 ; GetDateFormatW(x,x,x,x,x,x)
.text$mn:000019D4                 push    40h ; '@'       ; cchDate
.text$mn:000019D6                 lea     ecx, [ebp+var_24C]
.text$mn:000019DC                 push    ecx             ; lpDateStr
.text$mn:000019DD                 push    0               ; lpFormat
.text$mn:000019DF                 lea     edx, [ebp+SystemTime]
.text$mn:000019E5                 push    edx             ; lpDate
.text$mn:000019E6                 push    2               ; dwFlags
.text$mn:000019E8                 push    400h            ; Locale
.text$mn:000019ED                 call    dword ptr ds:__imp__GetDateFormatW@24 ; GetDateFormatW(x,x,x,x,x,x)
.text$mn:000019F3                 push    40h ; '@'       ; cchTime
.text$mn:000019F5                 lea     eax, [ebp+TimeStr]
.text$mn:000019FB                 push    eax             ; lpTimeStr
.text$mn:000019FC                 push    0               ; lpFormat
.text$mn:000019FE                 lea     ecx, [ebp+SystemTime]
.text$mn:00001A04                 push    ecx             ; lpTime
.text$mn:00001A05                 push    2               ; dwFlags
.text$mn:00001A07                 push    400h            ; Locale
.text$mn:00001A0C                 call    dword ptr ds:__imp__GetTimeFormatW@24 ; GetTimeFormatW(x,x,x,x,x,x)
.text$mn:00001A12                 mov     ecx, [ebp+var_1070]
.text$mn:00001A18                 add     ecx, 78h ; 'x'  ; this
.text$mn:00001A1B                 call    ?isHeaderPresent@PrintSettings@@QBE_NXZ ; PrintSettings::isHeaderPresent(void)
.text$mn:00001A20                 movzx   edx, al
.text$mn:00001A23                 test    edx, edx
.text$mn:00001A25                 jz      loc_1F6C
.text$mn:00001A2B                 mov     eax, [ebp+cHeight]
.text$mn:00001A31                 cdq
.text$mn:00001A32                 sub     eax, edx
.text$mn:00001A34                 sar     eax, 1
.text$mn:00001A36                 add     eax, [ebp+cHeight]
.text$mn:00001A3C                 add     eax, [ebp+var_105C]
.text$mn:00001A42                 mov     [ebp+var_105C], eax
.text$mn:00001A48                 mov     eax, [ebp+var_1070]
.text$mn:00001A4E                 add     eax, 80h ; 'Ç'
.text$mn:00001A53                 push    eax
.text$mn:00001A54                 lea     ecx, [ebp+var_F98]
.text$mn:00001A5A                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00001A5F                 mov     [ebp+var_4], 0
.text$mn:00001A66                 push    offset $SG151964 ; Str
.text$mn:00001A6B                 lea     ecx, [ebp+var_F98]
.text$mn:00001A71                 push    ecx             ; int
.text$mn:00001A72                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00001A77                 add     esp, 8
.text$mn:00001A7A                 movzx   edx, al
.text$mn:00001A7D                 test    edx, edx
.text$mn:00001A7F                 jz      loc_1BF0
.text$mn:00001A85                 sub     esp, 1Ch
.text$mn:00001A88                 mov     ecx, esp
.text$mn:00001A8A                 mov     [ebp+var_12D8], esp
.text$mn:00001A90                 lea     eax, [ebp+DateStr]
.text$mn:00001A96                 push    eax             ; Str
.text$mn:00001A97                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001A9C                 mov     [ebp+var_1140], eax
.text$mn:00001AA2                 mov     ecx, [ebp+var_1140]
.text$mn:00001AA8                 mov     [ebp+var_11DC], ecx
.text$mn:00001AAE                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001AB2                 sub     esp, 1Ch
.text$mn:00001AB5                 mov     ecx, esp
.text$mn:00001AB7                 mov     [ebp+var_11E4], esp
.text$mn:00001ABD                 lea     edx, [ebp+var_8C]
.text$mn:00001AC3                 push    edx             ; Str
.text$mn:00001AC4                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001AC9                 mov     [ebp+var_1128], eax
.text$mn:00001ACF                 mov     eax, [ebp+var_1128]
.text$mn:00001AD5                 mov     [ebp+var_11EC], eax
.text$mn:00001ADB                 mov     byte ptr [ebp+var_4], 2
.text$mn:00001ADF                 lea     ecx, [ebp+var_F98]
.text$mn:00001AE5                 push    ecx
.text$mn:00001AE6                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001AEA                 call    ?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z ; replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:00001AEF                 add     esp, 3Ch
.text$mn:00001AF2                 sub     esp, 1Ch
.text$mn:00001AF5                 mov     ecx, esp
.text$mn:00001AF7                 mov     [ebp+var_11F4], esp
.text$mn:00001AFD                 lea     edx, [ebp+var_24C]
.text$mn:00001B03                 push    edx             ; Str
.text$mn:00001B04                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001B09                 mov     [ebp+var_1178], eax
.text$mn:00001B0F                 mov     eax, [ebp+var_1178]
.text$mn:00001B15                 mov     [ebp+var_11FC], eax
.text$mn:00001B1B                 mov     byte ptr [ebp+var_4], 3
.text$mn:00001B1F                 sub     esp, 1Ch
.text$mn:00001B22                 mov     ecx, esp
.text$mn:00001B24                 mov     [ebp+var_1204], esp
.text$mn:00001B2A                 lea     edx, [ebp+var_3C]
.text$mn:00001B2D                 push    edx             ; Str
.text$mn:00001B2E                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001B33                 mov     [ebp+var_1130], eax
.text$mn:00001B39                 mov     eax, [ebp+var_1130]
.text$mn:00001B3F                 mov     [ebp+var_120C], eax
.text$mn:00001B45                 mov     byte ptr [ebp+var_4], 4
.text$mn:00001B49                 lea     ecx, [ebp+var_F98]
.text$mn:00001B4F                 push    ecx
.text$mn:00001B50                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001B54                 call    ?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z ; replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:00001B59                 add     esp, 3Ch
.text$mn:00001B5C                 sub     esp, 1Ch
.text$mn:00001B5F                 mov     ecx, esp
.text$mn:00001B61                 mov     [ebp+var_1214], esp
.text$mn:00001B67                 lea     edx, [ebp+TimeStr]
.text$mn:00001B6D                 push    edx             ; Str
.text$mn:00001B6E                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001B73                 mov     [ebp+var_1180], eax
.text$mn:00001B79                 mov     eax, [ebp+var_1180]
.text$mn:00001B7F                 mov     [ebp+var_121C], eax
.text$mn:00001B85                 mov     byte ptr [ebp+var_4], 5
.text$mn:00001B89                 sub     esp, 1Ch
.text$mn:00001B8C                 mov     ecx, esp
.text$mn:00001B8E                 mov     [ebp+var_1224], esp
.text$mn:00001B94                 lea     edx, [ebp+var_20]
.text$mn:00001B97                 push    edx             ; Str
.text$mn:00001B98                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001B9D                 mov     [ebp+var_1144], eax
.text$mn:00001BA3                 mov     eax, [ebp+var_1144]
.text$mn:00001BA9                 mov     [ebp+var_122C], eax
.text$mn:00001BAF                 mov     byte ptr [ebp+var_4], 6
.text$mn:00001BB3                 lea     ecx, [ebp+var_F98]
.text$mn:00001BB9                 push    ecx
.text$mn:00001BBA                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001BBE                 call    ?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z ; replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:00001BC3                 add     esp, 3Ch
.text$mn:00001BC6                 mov     edx, [ebp+var_106C]
.text$mn:00001BCC                 mov     eax, [edx+4]
.text$mn:00001BCF                 push    eax             ; HWND
.text$mn:00001BD0                 push    100h            ; unsigned int
.text$mn:00001BD5                 lea     ecx, [ebp+var_E4C]
.text$mn:00001BDB                 push    ecx             ; wchar_t *
.text$mn:00001BDC                 lea     ecx, [ebp+var_F98]
.text$mn:00001BE2                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001BE7                 push    eax             ; wchar_t *
.text$mn:00001BE8                 call    ?expandNppEnvironmentStrs@@YAXPB_WPA_WIPAUHWND__@@@Z ; expandNppEnvironmentStrs(wchar_t const *,wchar_t *,uint,HWND__ *)
.text$mn:00001BED                 add     esp, 10h
.text$mn:00001BF0
.text$mn:00001BF0 loc_1BF0:                               ; CODE XREF: Printer::doPrint(bool)+ABBj
.text$mn:00001BF0                 mov     edx, [ebp+var_1070]
.text$mn:00001BF6                 add     edx, 9Ch ; '£'
.text$mn:00001BFC                 push    edx
.text$mn:00001BFD                 lea     ecx, [ebp+var_F28]
.text$mn:00001C03                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00001C08                 mov     byte ptr [ebp+var_4], 7
.text$mn:00001C0C                 push    offset $SG151989 ; Str
.text$mn:00001C11                 lea     eax, [ebp+var_F28]
.text$mn:00001C17                 push    eax             ; int
.text$mn:00001C18                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00001C1D                 add     esp, 8
.text$mn:00001C20                 movzx   ecx, al
.text$mn:00001C23                 test    ecx, ecx
.text$mn:00001C25                 jz      loc_1D96
.text$mn:00001C2B                 sub     esp, 1Ch
.text$mn:00001C2E                 mov     ecx, esp
.text$mn:00001C30                 mov     [ebp+var_1234], esp
.text$mn:00001C36                 lea     edx, [ebp+DateStr]
.text$mn:00001C3C                 push    edx             ; Str
.text$mn:00001C3D                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001C42                 mov     [ebp+var_11A0], eax
.text$mn:00001C48                 mov     eax, [ebp+var_11A0]
.text$mn:00001C4E                 mov     [ebp+var_123C], eax
.text$mn:00001C54                 mov     byte ptr [ebp+var_4], 8
.text$mn:00001C58                 sub     esp, 1Ch
.text$mn:00001C5B                 mov     ecx, esp
.text$mn:00001C5D                 mov     [ebp+var_1244], esp
.text$mn:00001C63                 lea     edx, [ebp+var_8C]
.text$mn:00001C69                 push    edx             ; Str
.text$mn:00001C6A                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001C6F                 mov     [ebp+var_114C], eax
.text$mn:00001C75                 mov     eax, [ebp+var_114C]
.text$mn:00001C7B                 mov     [ebp+var_11D8], eax
.text$mn:00001C81                 mov     byte ptr [ebp+var_4], 9
.text$mn:00001C85                 lea     ecx, [ebp+var_F28]
.text$mn:00001C8B                 push    ecx
.text$mn:00001C8C                 mov     byte ptr [ebp+var_4], 7
.text$mn:00001C90                 call    ?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z ; replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:00001C95                 add     esp, 3Ch
.text$mn:00001C98                 sub     esp, 1Ch
.text$mn:00001C9B                 mov     ecx, esp
.text$mn:00001C9D                 mov     [ebp+var_1254], esp
.text$mn:00001CA3                 lea     edx, [ebp+var_24C]
.text$mn:00001CA9                 push    edx             ; Str
.text$mn:00001CAA                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001CAF                 mov     [ebp+var_1188], eax
.text$mn:00001CB5                 mov     eax, [ebp+var_1188]
.text$mn:00001CBB                 mov     [ebp+var_125C], eax
.text$mn:00001CC1                 mov     byte ptr [ebp+var_4], 0Ah
.text$mn:00001CC5                 sub     esp, 1Ch
.text$mn:00001CC8                 mov     ecx, esp
.text$mn:00001CCA                 mov     [ebp+var_1264], esp
.text$mn:00001CD0                 lea     edx, [ebp+var_3C]
.text$mn:00001CD3                 push    edx             ; Str
.text$mn:00001CD4                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001CD9                 mov     [ebp+var_1154], eax
.text$mn:00001CDF                 mov     eax, [ebp+var_1154]
.text$mn:00001CE5                 mov     [ebp+var_126C], eax
.text$mn:00001CEB                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:00001CEF                 lea     ecx, [ebp+var_F28]
.text$mn:00001CF5                 push    ecx
.text$mn:00001CF6                 mov     byte ptr [ebp+var_4], 7
.text$mn:00001CFA                 call    ?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z ; replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:00001CFF                 add     esp, 3Ch
.text$mn:00001D02                 sub     esp, 1Ch
.text$mn:00001D05                 mov     ecx, esp
.text$mn:00001D07                 mov     [ebp+var_1274], esp
.text$mn:00001D0D                 lea     edx, [ebp+TimeStr]
.text$mn:00001D13                 push    edx             ; Str
.text$mn:00001D14                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001D19                 mov     [ebp+var_11B0], eax
.text$mn:00001D1F                 mov     eax, [ebp+var_11B0]
.text$mn:00001D25                 mov     [ebp+var_127C], eax
.text$mn:00001D2B                 mov     byte ptr [ebp+var_4], 0Ch
.text$mn:00001D2F                 sub     esp, 1Ch
.text$mn:00001D32                 mov     ecx, esp
.text$mn:00001D34                 mov     [ebp+var_1284], esp
.text$mn:00001D3A                 lea     edx, [ebp+var_20]
.text$mn:00001D3D                 push    edx             ; Str
.text$mn:00001D3E                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001D43                 mov     [ebp+var_115C], eax
.text$mn:00001D49                 mov     eax, [ebp+var_115C]
.text$mn:00001D4F                 mov     [ebp+var_128C], eax
.text$mn:00001D55                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:00001D59                 lea     ecx, [ebp+var_F28]
.text$mn:00001D5F                 push    ecx
.text$mn:00001D60                 mov     byte ptr [ebp+var_4], 7
.text$mn:00001D64                 call    ?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z ; replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:00001D69                 add     esp, 3Ch
.text$mn:00001D6C                 mov     edx, [ebp+var_106C]
.text$mn:00001D72                 mov     eax, [edx+4]
.text$mn:00001D75                 push    eax             ; HWND
.text$mn:00001D76                 push    100h            ; unsigned int
.text$mn:00001D7B                 lea     ecx, [ebp+var_A4C]
.text$mn:00001D81                 push    ecx             ; wchar_t *
.text$mn:00001D82                 lea     ecx, [ebp+var_F28]
.text$mn:00001D88                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001D8D                 push    eax             ; wchar_t *
.text$mn:00001D8E                 call    ?expandNppEnvironmentStrs@@YAXPB_WPA_WIPAUHWND__@@@Z ; expandNppEnvironmentStrs(wchar_t const *,wchar_t *,uint,HWND__ *)
.text$mn:00001D93                 add     esp, 10h
.text$mn:00001D96
.text$mn:00001D96 loc_1D96:                               ; CODE XREF: Printer::doPrint(bool)+C61j
.text$mn:00001D96                 mov     edx, [ebp+var_1070]
.text$mn:00001D9C                 add     edx, 0B8h ; '+'
.text$mn:00001DA2                 push    edx
.text$mn:00001DA3                 lea     ecx, [ebp+var_F7C]
.text$mn:00001DA9                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00001DAE                 mov     byte ptr [ebp+var_4], 0Eh
.text$mn:00001DB2                 push    offset $SG152014 ; Str
.text$mn:00001DB7                 lea     eax, [ebp+var_F7C]
.text$mn:00001DBD                 push    eax             ; int
.text$mn:00001DBE                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00001DC3                 add     esp, 8
.text$mn:00001DC6                 movzx   ecx, al
.text$mn:00001DC9                 test    ecx, ecx
.text$mn:00001DCB                 jz      loc_1F3C
.text$mn:00001DD1                 sub     esp, 1Ch
.text$mn:00001DD4                 mov     ecx, esp
.text$mn:00001DD6                 mov     [ebp+var_1294], esp
.text$mn:00001DDC                 lea     edx, [ebp+DateStr]
.text$mn:00001DE2                 push    edx             ; Str
.text$mn:00001DE3                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001DE8                 mov     [ebp+var_1190], eax
.text$mn:00001DEE                 mov     eax, [ebp+var_1190]
.text$mn:00001DF4                 mov     [ebp+var_129C], eax
.text$mn:00001DFA                 mov     byte ptr [ebp+var_4], 0Fh
.text$mn:00001DFE                 sub     esp, 1Ch
.text$mn:00001E01                 mov     ecx, esp
.text$mn:00001E03                 mov     [ebp+var_12A4], esp
.text$mn:00001E09                 lea     edx, [ebp+var_8C]
.text$mn:00001E0F                 push    edx             ; Str
.text$mn:00001E10                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001E15                 mov     [ebp+var_1168], eax
.text$mn:00001E1B                 mov     eax, [ebp+var_1168]
.text$mn:00001E21                 mov     [ebp+var_12AC], eax
.text$mn:00001E27                 mov     byte ptr [ebp+var_4], 10h
.text$mn:00001E2B                 lea     ecx, [ebp+var_F7C]
.text$mn:00001E31                 push    ecx
.text$mn:00001E32                 mov     byte ptr [ebp+var_4], 0Eh
.text$mn:00001E36                 call    ?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z ; replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:00001E3B                 add     esp, 3Ch
.text$mn:00001E3E                 sub     esp, 1Ch
.text$mn:00001E41                 mov     ecx, esp
.text$mn:00001E43                 mov     [ebp+var_12B4], esp
.text$mn:00001E49                 lea     edx, [ebp+var_24C]
.text$mn:00001E4F                 push    edx             ; Str
.text$mn:00001E50                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001E55                 mov     [ebp+var_11A8], eax
.text$mn:00001E5B                 mov     eax, [ebp+var_11A8]
.text$mn:00001E61                 mov     [ebp+var_12BC], eax
.text$mn:00001E67                 mov     byte ptr [ebp+var_4], 11h
.text$mn:00001E6B                 sub     esp, 1Ch
.text$mn:00001E6E                 mov     ecx, esp
.text$mn:00001E70                 mov     [ebp+var_12C4], esp
.text$mn:00001E76                 lea     edx, [ebp+var_3C]
.text$mn:00001E79                 push    edx             ; Str
.text$mn:00001E7A                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001E7F                 mov     [ebp+var_1118], eax
.text$mn:00001E85                 mov     eax, [ebp+var_1118]
.text$mn:00001E8B                 mov     [ebp+var_12CC], eax
.text$mn:00001E91                 mov     byte ptr [ebp+var_4], 12h
.text$mn:00001E95                 lea     ecx, [ebp+var_F7C]
.text$mn:00001E9B                 push    ecx
.text$mn:00001E9C                 mov     byte ptr [ebp+var_4], 0Eh
.text$mn:00001EA0                 call    ?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z ; replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:00001EA5                 add     esp, 3Ch
.text$mn:00001EA8                 sub     esp, 1Ch
.text$mn:00001EAB                 mov     ecx, esp
.text$mn:00001EAD                 mov     [ebp+var_12D4], esp
.text$mn:00001EB3                 lea     edx, [ebp+TimeStr]
.text$mn:00001EB9                 push    edx             ; Str
.text$mn:00001EBA                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001EBF                 mov     [ebp+var_111C], eax
.text$mn:00001EC5                 mov     eax, [ebp+var_111C]
.text$mn:00001ECB                 mov     [ebp+var_12DC], eax
.text$mn:00001ED1                 mov     byte ptr [ebp+var_4], 13h
.text$mn:00001ED5                 sub     esp, 1Ch
.text$mn:00001ED8                 mov     ecx, esp
.text$mn:00001EDA                 mov     [ebp+var_12E4], esp
.text$mn:00001EE0                 lea     edx, [ebp+var_20]
.text$mn:00001EE3                 push    edx             ; Str
.text$mn:00001EE4                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001EE9                 mov     [ebp+var_1124], eax
.text$mn:00001EEF                 mov     eax, [ebp+var_1124]
.text$mn:00001EF5                 mov     [ebp+var_12EC], eax
.text$mn:00001EFB                 mov     byte ptr [ebp+var_4], 14h
.text$mn:00001EFF                 lea     ecx, [ebp+var_F7C]
.text$mn:00001F05                 push    ecx
.text$mn:00001F06                 mov     byte ptr [ebp+var_4], 0Eh
.text$mn:00001F0A                 call    ?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z ; replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:00001F0F                 add     esp, 3Ch
.text$mn:00001F12                 mov     edx, [ebp+var_106C]
.text$mn:00001F18                 mov     eax, [edx+4]
.text$mn:00001F1B                 push    eax             ; HWND
.text$mn:00001F1C                 push    100h            ; unsigned int
.text$mn:00001F21                 lea     ecx, [ebp+var_64C]
.text$mn:00001F27                 push    ecx             ; wchar_t *
.text$mn:00001F28                 lea     ecx, [ebp+var_F7C]
.text$mn:00001F2E                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001F33                 push    eax             ; wchar_t *
.text$mn:00001F34                 call    ?expandNppEnvironmentStrs@@YAXPB_WPA_WIPAUHWND__@@@Z ; expandNppEnvironmentStrs(wchar_t const *,wchar_t *,uint,HWND__ *)
.text$mn:00001F39                 add     esp, 10h
.text$mn:00001F3C
.text$mn:00001F3C loc_1F3C:                               ; CODE XREF: Printer::doPrint(bool)+E07j
.text$mn:00001F3C                 mov     byte ptr [ebp+var_4], 7
.text$mn:00001F40                 lea     ecx, [ebp+var_F7C]
.text$mn:00001F46                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001F4B                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001F4F                 lea     ecx, [ebp+var_F28]
.text$mn:00001F55                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001F5A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001F61                 lea     ecx, [ebp+var_F98]
.text$mn:00001F67                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001F6C
.text$mn:00001F6C loc_1F6C:                               ; CODE XREF: Printer::doPrint(bool)+A61j
.text$mn:00001F6C                 mov     ecx, [ebp+var_1070]
.text$mn:00001F72                 add     ecx, 78h ; 'x'  ; this
.text$mn:00001F75                 call    ?isFooterPresent@PrintSettings@@QBE_NXZ ; PrintSettings::isFooterPresent(void)
.text$mn:00001F7A                 movzx   edx, al
.text$mn:00001F7D                 test    edx, edx
.text$mn:00001F7F                 jz      loc_24C9
.text$mn:00001F85                 mov     eax, [ebp+var_107C]
.text$mn:00001F8B                 cdq
.text$mn:00001F8C                 sub     eax, edx
.text$mn:00001F8E                 sar     eax, 1
.text$mn:00001F90                 add     eax, [ebp+var_107C]
.text$mn:00001F96                 mov     ecx, [ebp+var_1054]
.text$mn:00001F9C                 sub     ecx, eax
.text$mn:00001F9E                 mov     [ebp+var_1054], ecx
.text$mn:00001FA4                 mov     edx, [ebp+var_1070]
.text$mn:00001FAA                 add     edx, 0F8h ; '°'
.text$mn:00001FB0                 push    edx
.text$mn:00001FB1                 lea     ecx, [ebp+var_FC4]
.text$mn:00001FB7                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00001FBC                 mov     [ebp+var_4], 15h
.text$mn:00001FC3                 push    offset $SG152040 ; Str
.text$mn:00001FC8                 lea     eax, [ebp+var_FC4]
.text$mn:00001FCE                 push    eax             ; int
.text$mn:00001FCF                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00001FD4                 add     esp, 8
.text$mn:00001FD7                 movzx   ecx, al
.text$mn:00001FDA                 test    ecx, ecx
.text$mn:00001FDC                 jz      loc_214D
.text$mn:00001FE2                 sub     esp, 1Ch
.text$mn:00001FE5                 mov     ecx, esp
.text$mn:00001FE7                 mov     [ebp+var_12F4], esp
.text$mn:00001FED                 lea     edx, [ebp+DateStr]
.text$mn:00001FF3                 push    edx             ; Str
.text$mn:00001FF4                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001FF9                 mov     [ebp+var_112C], eax
.text$mn:00001FFF                 mov     eax, [ebp+var_112C]
.text$mn:00002005                 mov     [ebp+var_12FC], eax
.text$mn:0000200B                 mov     byte ptr [ebp+var_4], 16h
.text$mn:0000200F                 sub     esp, 1Ch
.text$mn:00002012                 mov     ecx, esp
.text$mn:00002014                 mov     [ebp+var_11E0], esp
.text$mn:0000201A                 lea     edx, [ebp+var_8C]
.text$mn:00002020                 push    edx             ; Str
.text$mn:00002021                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002026                 mov     [ebp+var_1134], eax
.text$mn:0000202C                 mov     eax, [ebp+var_1134]
.text$mn:00002032                 mov     [ebp+var_1270], eax
.text$mn:00002038                 mov     byte ptr [ebp+var_4], 17h
.text$mn:0000203C                 lea     ecx, [ebp+var_FC4]
.text$mn:00002042                 push    ecx
.text$mn:00002043                 mov     byte ptr [ebp+var_4], 15h
.text$mn:00002047                 call    ?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z ; replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:0000204C                 add     esp, 3Ch
.text$mn:0000204F                 sub     esp, 1Ch
.text$mn:00002052                 mov     ecx, esp
.text$mn:00002054                 mov     [ebp+var_11E8], esp
.text$mn:0000205A                 lea     edx, [ebp+var_24C]
.text$mn:00002060                 push    edx             ; Str
.text$mn:00002061                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002066                 mov     [ebp+var_1114], eax
.text$mn:0000206C                 mov     eax, [ebp+var_1114]
.text$mn:00002072                 mov     [ebp+var_12B8], eax
.text$mn:00002078                 mov     byte ptr [ebp+var_4], 18h
.text$mn:0000207C                 sub     esp, 1Ch
.text$mn:0000207F                 mov     ecx, esp
.text$mn:00002081                 mov     [ebp+var_11F0], esp
.text$mn:00002087                 lea     edx, [ebp+var_3C]
.text$mn:0000208A                 push    edx             ; Str
.text$mn:0000208B                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002090                 mov     [ebp+var_1148], eax
.text$mn:00002096                 mov     eax, [ebp+var_1148]
.text$mn:0000209C                 mov     [ebp+var_1278], eax
.text$mn:000020A2                 mov     byte ptr [ebp+var_4], 19h
.text$mn:000020A6                 lea     ecx, [ebp+var_FC4]
.text$mn:000020AC                 push    ecx
.text$mn:000020AD                 mov     byte ptr [ebp+var_4], 15h
.text$mn:000020B1                 call    ?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z ; replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:000020B6                 add     esp, 3Ch
.text$mn:000020B9                 sub     esp, 1Ch
.text$mn:000020BC                 mov     ecx, esp
.text$mn:000020BE                 mov     [ebp+var_11F8], esp
.text$mn:000020C4                 lea     edx, [ebp+TimeStr]
.text$mn:000020CA                 push    edx             ; Str
.text$mn:000020CB                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000020D0                 mov     [ebp+var_1150], eax
.text$mn:000020D6                 mov     eax, [ebp+var_1150]
.text$mn:000020DC                 mov     [ebp+var_12F8], eax
.text$mn:000020E2                 mov     byte ptr [ebp+var_4], 1Ah
.text$mn:000020E6                 sub     esp, 1Ch
.text$mn:000020E9                 mov     ecx, esp
.text$mn:000020EB                 mov     [ebp+var_1200], esp
.text$mn:000020F1                 lea     edx, [ebp+var_20]
.text$mn:000020F4                 push    edx             ; Str
.text$mn:000020F5                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000020FA                 mov     [ebp+var_1158], eax
.text$mn:00002100                 mov     eax, [ebp+var_1158]
.text$mn:00002106                 mov     [ebp+var_1280], eax
.text$mn:0000210C                 mov     byte ptr [ebp+var_4], 1Bh
.text$mn:00002110                 lea     ecx, [ebp+var_FC4]
.text$mn:00002116                 push    ecx
.text$mn:00002117                 mov     byte ptr [ebp+var_4], 15h
.text$mn:0000211B                 call    ?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z ; replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:00002120                 add     esp, 3Ch
.text$mn:00002123                 mov     edx, [ebp+var_106C]
.text$mn:00002129                 mov     eax, [edx+4]
.text$mn:0000212C                 push    eax             ; HWND
.text$mn:0000212D                 push    100h            ; unsigned int
.text$mn:00002132                 lea     ecx, [ebp+var_C4C]
.text$mn:00002138                 push    ecx             ; wchar_t *
.text$mn:00002139                 lea     ecx, [ebp+var_FC4]
.text$mn:0000213F                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002144                 push    eax             ; wchar_t *
.text$mn:00002145                 call    ?expandNppEnvironmentStrs@@YAXPB_WPA_WIPAUHWND__@@@Z ; expandNppEnvironmentStrs(wchar_t const *,wchar_t *,uint,HWND__ *)
.text$mn:0000214A                 add     esp, 10h
.text$mn:0000214D
.text$mn:0000214D loc_214D:                               ; CODE XREF: Printer::doPrint(bool)+1018j
.text$mn:0000214D                 mov     edx, [ebp+var_1070]
.text$mn:00002153                 add     edx, 114h
.text$mn:00002159                 push    edx
.text$mn:0000215A                 lea     ecx, [ebp+var_F60]
.text$mn:00002160                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00002165                 mov     byte ptr [ebp+var_4], 1Ch
.text$mn:00002169                 push    offset $SG152065 ; Str
.text$mn:0000216E                 lea     eax, [ebp+var_F60]
.text$mn:00002174                 push    eax             ; int
.text$mn:00002175                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:0000217A                 add     esp, 8
.text$mn:0000217D                 movzx   ecx, al
.text$mn:00002180                 test    ecx, ecx
.text$mn:00002182                 jz      loc_22F3
.text$mn:00002188                 sub     esp, 1Ch
.text$mn:0000218B                 mov     ecx, esp
.text$mn:0000218D                 mov     [ebp+var_1208], esp
.text$mn:00002193                 lea     edx, [ebp+DateStr]
.text$mn:00002199                 push    edx             ; Str
.text$mn:0000219A                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:0000219F                 mov     [ebp+var_1164], eax
.text$mn:000021A5                 mov     eax, [ebp+var_1164]
.text$mn:000021AB                 mov     [ebp+var_12C0], eax
.text$mn:000021B1                 mov     byte ptr [ebp+var_4], 1Dh
.text$mn:000021B5                 sub     esp, 1Ch
.text$mn:000021B8                 mov     ecx, esp
.text$mn:000021BA                 mov     [ebp+var_1210], esp
.text$mn:000021C0                 lea     edx, [ebp+var_8C]
.text$mn:000021C6                 push    edx             ; Str
.text$mn:000021C7                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000021CC                 mov     [ebp+var_116C], eax
.text$mn:000021D2                 mov     eax, [ebp+var_116C]
.text$mn:000021D8                 mov     [ebp+var_1288], eax
.text$mn:000021DE                 mov     byte ptr [ebp+var_4], 1Eh
.text$mn:000021E2                 lea     ecx, [ebp+var_F60]
.text$mn:000021E8                 push    ecx
.text$mn:000021E9                 mov     byte ptr [ebp+var_4], 1Ch
.text$mn:000021ED                 call    ?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z ; replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:000021F2                 add     esp, 3Ch
.text$mn:000021F5                 sub     esp, 1Ch
.text$mn:000021F8                 mov     ecx, esp
.text$mn:000021FA                 mov     [ebp+var_1218], esp
.text$mn:00002200                 lea     edx, [ebp+var_24C]
.text$mn:00002206                 push    edx             ; Str
.text$mn:00002207                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:0000220C                 mov     [ebp+var_1174], eax
.text$mn:00002212                 mov     eax, [ebp+var_1174]
.text$mn:00002218                 mov     [ebp+var_12E0], eax
.text$mn:0000221E                 mov     byte ptr [ebp+var_4], 1Fh
.text$mn:00002222                 sub     esp, 1Ch
.text$mn:00002225                 mov     ecx, esp
.text$mn:00002227                 mov     [ebp+var_1220], esp
.text$mn:0000222D                 lea     edx, [ebp+var_3C]
.text$mn:00002230                 push    edx             ; Str
.text$mn:00002231                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002236                 mov     [ebp+var_117C], eax
.text$mn:0000223C                 mov     eax, [ebp+var_117C]
.text$mn:00002242                 mov     [ebp+var_1290], eax
.text$mn:00002248                 mov     byte ptr [ebp+var_4], 20h ; ' '
.text$mn:0000224C                 lea     ecx, [ebp+var_F60]
.text$mn:00002252                 push    ecx
.text$mn:00002253                 mov     byte ptr [ebp+var_4], 1Ch
.text$mn:00002257                 call    ?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z ; replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:0000225C                 add     esp, 3Ch
.text$mn:0000225F                 sub     esp, 1Ch
.text$mn:00002262                 mov     ecx, esp
.text$mn:00002264                 mov     [ebp+var_1228], esp
.text$mn:0000226A                 lea     edx, [ebp+TimeStr]
.text$mn:00002270                 push    edx             ; Str
.text$mn:00002271                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002276                 mov     [ebp+var_1184], eax
.text$mn:0000227C                 mov     eax, [ebp+var_1184]
.text$mn:00002282                 mov     [ebp+var_12C8], eax
.text$mn:00002288                 mov     byte ptr [ebp+var_4], 21h ; '!'
.text$mn:0000228C                 sub     esp, 1Ch
.text$mn:0000228F                 mov     ecx, esp
.text$mn:00002291                 mov     [ebp+var_1230], esp
.text$mn:00002297                 lea     edx, [ebp+var_20]
.text$mn:0000229A                 push    edx             ; Str
.text$mn:0000229B                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000022A0                 mov     [ebp+var_118C], eax
.text$mn:000022A6                 mov     eax, [ebp+var_118C]
.text$mn:000022AC                 mov     [ebp+var_1298], eax
.text$mn:000022B2                 mov     byte ptr [ebp+var_4], 22h ; '"'
.text$mn:000022B6                 lea     ecx, [ebp+var_F60]
.text$mn:000022BC                 push    ecx
.text$mn:000022BD                 mov     byte ptr [ebp+var_4], 1Ch
.text$mn:000022C1                 call    ?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z ; replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:000022C6                 add     esp, 3Ch
.text$mn:000022C9                 mov     edx, [ebp+var_106C]
.text$mn:000022CF                 mov     eax, [edx+4]
.text$mn:000022D2                 push    eax             ; HWND
.text$mn:000022D3                 push    100h            ; unsigned int
.text$mn:000022D8                 lea     ecx, [ebp+var_84C]
.text$mn:000022DE                 push    ecx             ; wchar_t *
.text$mn:000022DF                 lea     ecx, [ebp+var_F60]
.text$mn:000022E5                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000022EA                 push    eax             ; wchar_t *
.text$mn:000022EB                 call    ?expandNppEnvironmentStrs@@YAXPB_WPA_WIPAUHWND__@@@Z ; expandNppEnvironmentStrs(wchar_t const *,wchar_t *,uint,HWND__ *)
.text$mn:000022F0                 add     esp, 10h
.text$mn:000022F3
.text$mn:000022F3 loc_22F3:                               ; CODE XREF: Printer::doPrint(bool)+11BEj
.text$mn:000022F3                 mov     edx, [ebp+var_1070]
.text$mn:000022F9                 add     edx, 130h
.text$mn:000022FF                 push    edx
.text$mn:00002300                 lea     ecx, [ebp+var_F44]
.text$mn:00002306                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000230B                 mov     byte ptr [ebp+var_4], 23h ; '#'
.text$mn:0000230F                 push    offset $SG152090 ; Str
.text$mn:00002314                 lea     eax, [ebp+var_F44]
.text$mn:0000231A                 push    eax             ; int
.text$mn:0000231B                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00002320                 add     esp, 8
.text$mn:00002323                 movzx   ecx, al
.text$mn:00002326                 test    ecx, ecx
.text$mn:00002328                 jz      loc_2499
.text$mn:0000232E                 sub     esp, 1Ch
.text$mn:00002331                 mov     ecx, esp
.text$mn:00002333                 mov     [ebp+var_1238], esp
.text$mn:00002339                 lea     edx, [ebp+DateStr]
.text$mn:0000233F                 push    edx             ; Str
.text$mn:00002340                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002345                 mov     [ebp+var_1194], eax
.text$mn:0000234B                 mov     eax, [ebp+var_1194]
.text$mn:00002351                 mov     [ebp+var_12F0], eax
.text$mn:00002357                 mov     byte ptr [ebp+var_4], 24h ; '$'
.text$mn:0000235B                 sub     esp, 1Ch
.text$mn:0000235E                 mov     ecx, esp
.text$mn:00002360                 mov     [ebp+var_1240], esp
.text$mn:00002366                 lea     edx, [ebp+var_8C]
.text$mn:0000236C                 push    edx             ; Str
.text$mn:0000236D                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002372                 mov     [ebp+var_119C], eax
.text$mn:00002378                 mov     eax, [ebp+var_119C]
.text$mn:0000237E                 mov     [ebp+var_12A0], eax
.text$mn:00002384                 mov     byte ptr [ebp+var_4], 25h ; '%'
.text$mn:00002388                 lea     ecx, [ebp+var_F44]
.text$mn:0000238E                 push    ecx
.text$mn:0000238F                 mov     byte ptr [ebp+var_4], 23h ; '#'
.text$mn:00002393                 call    ?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z ; replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:00002398                 add     esp, 3Ch
.text$mn:0000239B                 sub     esp, 1Ch
.text$mn:0000239E                 mov     ecx, esp
.text$mn:000023A0                 mov     [ebp+var_1248], esp
.text$mn:000023A6                 lea     edx, [ebp+var_24C]
.text$mn:000023AC                 push    edx             ; Str
.text$mn:000023AD                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000023B2                 mov     [ebp+var_11A4], eax
.text$mn:000023B8                 mov     eax, [ebp+var_11A4]
.text$mn:000023BE                 mov     [ebp+var_12D0], eax
.text$mn:000023C4                 mov     byte ptr [ebp+var_4], 26h ; '&'
.text$mn:000023C8                 sub     esp, 1Ch
.text$mn:000023CB                 mov     ecx, esp
.text$mn:000023CD                 mov     [ebp+var_1250], esp
.text$mn:000023D3                 lea     edx, [ebp+var_3C]
.text$mn:000023D6                 push    edx             ; Str
.text$mn:000023D7                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000023DC                 mov     [ebp+var_11AC], eax
.text$mn:000023E2                 mov     eax, [ebp+var_11AC]
.text$mn:000023E8                 mov     [ebp+var_12A8], eax
.text$mn:000023EE                 mov     byte ptr [ebp+var_4], 27h ; '''
.text$mn:000023F2                 lea     ecx, [ebp+var_F44]
.text$mn:000023F8                 push    ecx
.text$mn:000023F9                 mov     byte ptr [ebp+var_4], 23h ; '#'
.text$mn:000023FD                 call    ?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z ; replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:00002402                 add     esp, 3Ch
.text$mn:00002405                 sub     esp, 1Ch
.text$mn:00002408                 mov     ecx, esp
.text$mn:0000240A                 mov     [ebp+var_1258], esp
.text$mn:00002410                 lea     edx, [ebp+TimeStr]
.text$mn:00002416                 push    edx             ; Str
.text$mn:00002417                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:0000241C                 mov     [ebp+var_11B4], eax
.text$mn:00002422                 mov     eax, [ebp+var_11B4]
.text$mn:00002428                 mov     [ebp+var_12E8], eax
.text$mn:0000242E                 mov     byte ptr [ebp+var_4], 28h ; '('
.text$mn:00002432                 sub     esp, 1Ch
.text$mn:00002435                 mov     ecx, esp
.text$mn:00002437                 mov     [ebp+var_1260], esp
.text$mn:0000243D                 lea     edx, [ebp+var_20]
.text$mn:00002440                 push    edx             ; Str
.text$mn:00002441                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002446                 mov     [ebp+var_11C0], eax
.text$mn:0000244C                 mov     eax, [ebp+var_11C0]
.text$mn:00002452                 mov     [ebp+var_12B0], eax
.text$mn:00002458                 mov     byte ptr [ebp+var_4], 29h ; ')'
.text$mn:0000245C                 lea     ecx, [ebp+var_F44]
.text$mn:00002462                 push    ecx
.text$mn:00002463                 mov     byte ptr [ebp+var_4], 23h ; '#'
.text$mn:00002467                 call    ?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z ; replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:0000246C                 add     esp, 3Ch
.text$mn:0000246F                 mov     edx, [ebp+var_106C]
.text$mn:00002475                 mov     eax, [edx+4]
.text$mn:00002478                 push    eax             ; HWND
.text$mn:00002479                 push    100h            ; unsigned int
.text$mn:0000247E                 lea     ecx, [ebp+var_44C]
.text$mn:00002484                 push    ecx             ; wchar_t *
.text$mn:00002485                 lea     ecx, [ebp+var_F44]
.text$mn:0000248B                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002490                 push    eax             ; wchar_t *
.text$mn:00002491                 call    ?expandNppEnvironmentStrs@@YAXPB_WPA_WIPAUHWND__@@@Z ; expandNppEnvironmentStrs(wchar_t const *,wchar_t *,uint,HWND__ *)
.text$mn:00002496                 add     esp, 10h
.text$mn:00002499
.text$mn:00002499 loc_2499:                               ; CODE XREF: Printer::doPrint(bool)+1364j
.text$mn:00002499                 mov     byte ptr [ebp+var_4], 1Ch
.text$mn:0000249D                 lea     ecx, [ebp+var_F44]
.text$mn:000024A3                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000024A8                 mov     byte ptr [ebp+var_4], 15h
.text$mn:000024AC                 lea     ecx, [ebp+var_F60]
.text$mn:000024B2                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000024B7                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000024BE                 lea     ecx, [ebp+var_FC4]
.text$mn:000024C4                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000024C9
.text$mn:000024C9 loc_24C9:                               ; CODE XREF: Printer::doPrint(bool)+FBBj
.text$mn:000024C9                 mov     edx, dword ptr ds:?_SC_MARGE_LINENUMBER@ScintillaEditView@@2HB ; int const ScintillaEditView::_SC_MARGE_LINENUMBER
.text$mn:000024CF                 push    edx             ; int
.text$mn:000024D0                 mov     eax, [ebp+var_106C]
.text$mn:000024D6                 mov     ecx, [eax+44h]  ; this
.text$mn:000024D9                 call    ?hasMarginShowed@ScintillaEditView@@QAE_NH@Z ; ScintillaEditView::hasMarginShowed(int)
.text$mn:000024DE                 mov     [ebp+var_108D], al
.text$mn:000024E4                 mov     ecx, [ebp+var_1070]
.text$mn:000024EA                 movzx   edx, byte ptr [ecx+78h]
.text$mn:000024EE                 test    edx, edx
.text$mn:000024F0                 jnz     short loc_2508
.text$mn:000024F2                 push    0               ; bool
.text$mn:000024F4                 mov     eax, dword ptr ds:?_SC_MARGE_LINENUMBER@ScintillaEditView@@2HB ; int const ScintillaEditView::_SC_MARGE_LINENUMBER
.text$mn:000024F9                 push    eax             ; unsigned int
.text$mn:000024FA                 mov     ecx, [ebp+var_106C]
.text$mn:00002500                 mov     ecx, [ecx+44h]  ; this
.text$mn:00002503                 call    ?showMargin@ScintillaEditView@@QAEXH_N@Z ; ScintillaEditView::showMargin(int,bool)
.text$mn:00002508
.text$mn:00002508 loc_2508:                               ; CODE XREF: Printer::doPrint(bool)+152Cj
.text$mn:00002508                 mov     [ebp+var_1084], 1
.text$mn:00002512                 mov     ecx, 0Ch
.text$mn:00002517                 mov     esi, offset $SG152102 ; "$(CURRENT_PRINTING_PAGE)"
.text$mn:0000251C                 lea     edi, [ebp+String]
.text$mn:0000251F                 rep movsd
.text$mn:00002521                 movsw
.text$mn:00002523
.text$mn:00002523 loc_2523:                               ; CODE XREF: Printer::doPrint(bool):loc_2FC4j
.text$mn:00002523                 mov     edx, [ebp+var_108C]
.text$mn:00002529                 cmp     edx, [ebp+var_1080]
.text$mn:0000252F                 jge     loc_2FC9
.text$mn:00002535                 mov     eax, [ebp+var_106C]
.text$mn:0000253B                 mov     ecx, [eax+14h]
.text$mn:0000253E                 and     ecx, 2
.text$mn:00002541                 jz      short loc_2573
.text$mn:00002543                 mov     edx, [ebp+var_106C]
.text$mn:00002549                 movzx   eax, word ptr [edx+18h]
.text$mn:0000254D                 cmp     [ebp+var_1084], eax
.text$mn:00002553                 jb      short loc_2567
.text$mn:00002555                 mov     ecx, [ebp+var_106C]
.text$mn:0000255B                 movzx   edx, word ptr [ecx+1Ah]
.text$mn:0000255F                 cmp     [ebp+var_1084], edx
.text$mn:00002565                 jbe     short loc_2573
.text$mn:00002567
.text$mn:00002567 loc_2567:                               ; CODE XREF: Printer::doPrint(bool)+158Fj
.text$mn:00002567                 mov     [ebp+var_1100], 0
.text$mn:00002571                 jmp     short loc_257D
.text$mn:00002573 ; ---------------------------------------------------------------------------
.text$mn:00002573
.text$mn:00002573 loc_2573:                               ; CODE XREF: Printer::doPrint(bool)+157Dj
.text$mn:00002573                                         ; Printer::doPrint(bool)+15A1j
.text$mn:00002573                 mov     [ebp+var_1100], 1
.text$mn:0000257D
.text$mn:0000257D loc_257D:                               ; CODE XREF: Printer::doPrint(bool)+15ADj
.text$mn:0000257D                 mov     al, byte ptr [ebp+var_1100]
.text$mn:00002583                 mov     [ebp+var_1071], al
.text$mn:00002589                 movzx   ecx, [ebp+arg_0]
.text$mn:0000258D                 test    ecx, ecx
.text$mn:0000258F                 jnz     short loc_2598
.text$mn:00002591                 mov     [ebp+var_1071], 0
.text$mn:00002598
.text$mn:00002598 loc_2598:                               ; CODE XREF: Printer::doPrint(bool)+15CBj
.text$mn:00002598                 mov     edx, [ebp+var_1084]
.text$mn:0000259E                 push    edx
.text$mn:0000259F                 push    offset $SG152108 ; "%0d"
.text$mn:000025A4                 lea     eax, [ebp+Str]
.text$mn:000025AA                 push    eax             ; LPWSTR
.text$mn:000025AB                 call    dword ptr ds:__imp__wsprintfW
.text$mn:000025B1                 add     esp, 0Ch
.text$mn:000025B4                 movzx   ecx, [ebp+var_1071]
.text$mn:000025BB                 test    ecx, ecx
.text$mn:000025BD                 jz      loc_2A83
.text$mn:000025C3                 mov     edx, [ebp+var_106C]
.text$mn:000025C9                 mov     eax, [edx+10h]
.text$mn:000025CC                 push    eax             ; hdc
.text$mn:000025CD                 call    dword ptr ds:__imp__StartPage@4 ; StartPage(x)
.text$mn:000025D3                 mov     ecx, [ebp+var_1070]
.text$mn:000025D9                 add     ecx, 78h ; 'x'  ; this
.text$mn:000025DC                 call    ?isHeaderPresent@PrintSettings@@QBE_NXZ ; PrintSettings::isHeaderPresent(void)
.text$mn:000025E1                 movzx   ecx, al
.text$mn:000025E4                 test    ecx, ecx
.text$mn:000025E6                 jz      loc_2A83
.text$mn:000025EC                 mov     edx, [ebp+h]
.text$mn:000025F2                 push    edx             ; h
.text$mn:000025F3                 mov     eax, [ebp+var_106C]
.text$mn:000025F9                 mov     ecx, [eax+10h]
.text$mn:000025FC                 push    ecx             ; hdc
.text$mn:000025FD                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text$mn:00002603                 push    0               ; color
.text$mn:00002605                 mov     edx, [ebp+var_106C]
.text$mn:0000260B                 mov     eax, [edx+10h]
.text$mn:0000260E                 push    eax             ; hdc
.text$mn:0000260F                 call    dword ptr ds:__imp__SetTextColor@8 ; SetTextColor(x,x)
.text$mn:00002615                 push    0FFFFFFh        ; color
.text$mn:0000261A                 mov     ecx, [ebp+var_106C]
.text$mn:00002620                 mov     edx, [ecx+10h]
.text$mn:00002623                 push    edx             ; hdc
.text$mn:00002624                 call    dword ptr ds:__imp__SetBkColor@8 ; SetBkColor(x,x)
.text$mn:0000262A                 push    8               ; align
.text$mn:0000262C                 mov     eax, [ebp+var_106C]
.text$mn:00002632                 mov     ecx, [eax+10h]
.text$mn:00002635                 push    ecx             ; hdc
.text$mn:00002636                 call    dword ptr ds:__imp__SetTextAlign@8 ; SetTextAlign(x,x)
.text$mn:0000263C                 mov     [ebp+align], eax
.text$mn:00002642                 mov     edx, [ebp+x]
.text$mn:00002648                 mov     [ebp+rect.left], edx
.text$mn:0000264E                 mov     ecx, [ebp+var_105C]
.text$mn:00002654                 sub     ecx, [ebp+cHeight]
.text$mn:0000265A                 mov     eax, [ebp+cHeight]
.text$mn:00002660                 cdq
.text$mn:00002661                 sub     eax, edx
.text$mn:00002663                 sar     eax, 1
.text$mn:00002665                 sub     ecx, eax
.text$mn:00002667                 mov     [ebp+rect.top], ecx
.text$mn:0000266D                 mov     edx, [ebp+var_1058]
.text$mn:00002673                 mov     [ebp+rect.right], edx
.text$mn:00002679                 mov     eax, [ebp+cHeight]
.text$mn:0000267F                 cdq
.text$mn:00002680                 sub     eax, edx
.text$mn:00002682                 sar     eax, 1
.text$mn:00002684                 mov     ecx, [ebp+var_105C]
.text$mn:0000268A                 sub     ecx, eax
.text$mn:0000268C                 mov     [ebp+rect.bottom], ecx
.text$mn:00002692                 mov     edx, [ebp+rect.top]
.text$mn:00002698                 add     edx, [ebp+cHeight]
.text$mn:0000269E                 mov     [ebp+rect.bottom], edx
.text$mn:000026A4                 mov     eax, 2
.text$mn:000026A9                 imul    ecx, eax, 0
.text$mn:000026AC                 movzx   edx, [ebp+ecx+var_E4C]
.text$mn:000026B4                 test    edx, edx
.text$mn:000026B6                 jz      loc_2781
.text$mn:000026BC                 lea     eax, [ebp+var_E4C]
.text$mn:000026C2                 push    eax             ; Str
.text$mn:000026C3                 lea     ecx, [ebp+var_FFC]
.text$mn:000026C9                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000026CE                 mov     [ebp+var_4], 2Ah ; '*'
.text$mn:000026D5                 push    0               ; int
.text$mn:000026D7                 lea     ecx, [ebp+String]
.text$mn:000026DA                 push    ecx             ; Str
.text$mn:000026DB                 lea     ecx, [ebp+var_FFC]
.text$mn:000026E1                 call    ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint)
.text$mn:000026E6                 mov     [ebp+var_1108], eax
.text$mn:000026EC                 mov     edx, [ebp+var_1108]
.text$mn:000026F2                 cmp     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:000026F8                 jz      short loc_271E
.text$mn:000026FA                 lea     eax, [ebp+Str]
.text$mn:00002700                 push    eax             ; Str
.text$mn:00002701                 lea     ecx, [ebp+String]
.text$mn:00002704                 push    ecx             ; lpString
.text$mn:00002705                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:0000270B                 push    eax             ; int
.text$mn:0000270C                 mov     edx, [ebp+var_1108]
.text$mn:00002712                 push    edx             ; int
.text$mn:00002713                 lea     ecx, [ebp+var_FFC]
.text$mn:00002719                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *)
.text$mn:0000271E
.text$mn:0000271E loc_271E:                               ; CODE XREF: Printer::doPrint(bool)+1734j
.text$mn:0000271E                 push    0               ; lpDx
.text$mn:00002720                 lea     ecx, [ebp+var_FFC]
.text$mn:00002726                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:0000272B                 push    eax             ; c
.text$mn:0000272C                 lea     ecx, [ebp+var_FFC]
.text$mn:00002732                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002737                 push    eax             ; lpString
.text$mn:00002738                 lea     eax, [ebp+rect]
.text$mn:0000273E                 push    eax             ; lprect
.text$mn:0000273F                 push    2               ; options
.text$mn:00002741                 mov     eax, [ebp+cHeight]
.text$mn:00002747                 cdq
.text$mn:00002748                 sub     eax, edx
.text$mn:0000274A                 sar     eax, 1
.text$mn:0000274C                 mov     ecx, [ebp+var_105C]
.text$mn:00002752                 sub     ecx, eax
.text$mn:00002754                 push    ecx             ; y
.text$mn:00002755                 mov     edx, [ebp+x]
.text$mn:0000275B                 add     edx, 5
.text$mn:0000275E                 push    edx             ; x
.text$mn:0000275F                 mov     eax, [ebp+var_106C]
.text$mn:00002765                 mov     ecx, [eax+10h]
.text$mn:00002768                 push    ecx             ; hdc
.text$mn:00002769                 call    dword ptr ds:__imp__ExtTextOutW@32 ; ExtTextOutW(x,x,x,x,x,x,x,x)
.text$mn:0000276F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002776                 lea     ecx, [ebp+var_FFC]
.text$mn:0000277C                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002781
.text$mn:00002781 loc_2781:                               ; CODE XREF: Printer::doPrint(bool)+16F2j
.text$mn:00002781                 mov     edx, 2
.text$mn:00002786                 imul    eax, edx, 0
.text$mn:00002789                 movzx   ecx, [ebp+eax+var_A4C]
.text$mn:00002791                 test    ecx, ecx
.text$mn:00002793                 jz      loc_28AA
.text$mn:00002799                 lea     edx, [ebp+var_A4C]
.text$mn:0000279F                 push    edx             ; Str
.text$mn:000027A0                 lea     ecx, [ebp+var_EB8]
.text$mn:000027A6                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000027AB                 mov     [ebp+var_4], 2Bh ; '+'
.text$mn:000027B2                 push    0               ; int
.text$mn:000027B4                 lea     eax, [ebp+String]
.text$mn:000027B7                 push    eax             ; Str
.text$mn:000027B8                 lea     ecx, [ebp+var_EB8]
.text$mn:000027BE                 call    ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint)
.text$mn:000027C3                 mov     [ebp+var_1110], eax
.text$mn:000027C9                 mov     ecx, [ebp+var_1110]
.text$mn:000027CF                 cmp     ecx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:000027D5                 jz      short loc_27FB
.text$mn:000027D7                 lea     edx, [ebp+Str]
.text$mn:000027DD                 push    edx             ; Str
.text$mn:000027DE                 lea     eax, [ebp+String]
.text$mn:000027E1                 push    eax             ; lpString
.text$mn:000027E2                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:000027E8                 push    eax             ; int
.text$mn:000027E9                 mov     ecx, [ebp+var_1110]
.text$mn:000027EF                 push    ecx             ; int
.text$mn:000027F0                 lea     ecx, [ebp+var_EB8]
.text$mn:000027F6                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *)
.text$mn:000027FB
.text$mn:000027FB loc_27FB:                               ; CODE XREF: Printer::doPrint(bool)+1811j
.text$mn:000027FB                 lea     edx, [ebp+psizl]
.text$mn:00002801                 push    edx             ; psizl
.text$mn:00002802                 lea     ecx, [ebp+var_EB8]
.text$mn:00002808                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:0000280D                 push    eax             ; c
.text$mn:0000280E                 lea     ecx, [ebp+var_EB8]
.text$mn:00002814                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002819                 push    eax             ; lpString
.text$mn:0000281A                 mov     eax, [ebp+var_106C]
.text$mn:00002820                 mov     ecx, [eax+10h]
.text$mn:00002823                 push    ecx             ; hdc
.text$mn:00002824                 call    dword ptr ds:__imp__GetTextExtentPoint32W@16 ; GetTextExtentPoint32W(x,x,x,x)
.text$mn:0000282A                 push    0               ; lpDx
.text$mn:0000282C                 lea     ecx, [ebp+var_EB8]
.text$mn:00002832                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00002837                 push    eax             ; c
.text$mn:00002838                 lea     ecx, [ebp+var_EB8]
.text$mn:0000283E                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002843                 push    eax             ; lpString
.text$mn:00002844                 lea     edx, [ebp+rect]
.text$mn:0000284A                 push    edx             ; lprect
.text$mn:0000284B                 push    4               ; options
.text$mn:0000284D                 mov     eax, [ebp+cHeight]
.text$mn:00002853                 cdq
.text$mn:00002854                 sub     eax, edx
.text$mn:00002856                 sar     eax, 1
.text$mn:00002858                 mov     ecx, [ebp+var_105C]
.text$mn:0000285E                 sub     ecx, eax
.text$mn:00002860                 push    ecx             ; y
.text$mn:00002861                 mov     eax, [ebp+var_1058]
.text$mn:00002867                 sub     eax, [ebp+x]
.text$mn:0000286D                 cdq
.text$mn:0000286E                 sub     eax, edx
.text$mn:00002870                 mov     ecx, eax
.text$mn:00002872                 sar     ecx, 1
.text$mn:00002874                 add     ecx, [ebp+x]
.text$mn:0000287A                 mov     eax, [ebp+psizl._cx]
.text$mn:00002880                 cdq
.text$mn:00002881                 sub     eax, edx
.text$mn:00002883                 sar     eax, 1
.text$mn:00002885                 sub     ecx, eax
.text$mn:00002887                 push    ecx             ; x
.text$mn:00002888                 mov     edx, [ebp+var_106C]
.text$mn:0000288E                 mov     eax, [edx+10h]
.text$mn:00002891                 push    eax             ; hdc
.text$mn:00002892                 call    dword ptr ds:__imp__ExtTextOutW@32 ; ExtTextOutW(x,x,x,x,x,x,x,x)
.text$mn:00002898                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000289F                 lea     ecx, [ebp+var_EB8]
.text$mn:000028A5                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000028AA
.text$mn:000028AA loc_28AA:                               ; CODE XREF: Printer::doPrint(bool)+17CFj
.text$mn:000028AA                 mov     ecx, 2
.text$mn:000028AF                 imul    edx, ecx, 0
.text$mn:000028B2                 movzx   eax, [ebp+edx+var_64C]
.text$mn:000028BA                 test    eax, eax
.text$mn:000028BC                 jz      loc_29B9
.text$mn:000028C2                 lea     ecx, [ebp+var_64C]
.text$mn:000028C8                 push    ecx             ; Str
.text$mn:000028C9                 lea     ecx, [ebp+var_ED4]
.text$mn:000028CF                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000028D4                 mov     [ebp+var_4], 2Ch ; ','
.text$mn:000028DB                 push    0               ; int
.text$mn:000028DD                 lea     edx, [ebp+String]
.text$mn:000028E0                 push    edx             ; Str
.text$mn:000028E1                 lea     ecx, [ebp+var_ED4]
.text$mn:000028E7                 call    ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint)
.text$mn:000028EC                 mov     [ebp+var_10C4], eax
.text$mn:000028F2                 mov     eax, [ebp+var_10C4]
.text$mn:000028F8                 cmp     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:000028FE                 jz      short loc_2924
.text$mn:00002900                 lea     ecx, [ebp+Str]
.text$mn:00002906                 push    ecx             ; Str
.text$mn:00002907                 lea     edx, [ebp+String]
.text$mn:0000290A                 push    edx             ; lpString
.text$mn:0000290B                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00002911                 push    eax             ; int
.text$mn:00002912                 mov     eax, [ebp+var_10C4]
.text$mn:00002918                 push    eax             ; int
.text$mn:00002919                 lea     ecx, [ebp+var_ED4]
.text$mn:0000291F                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *)
.text$mn:00002924
.text$mn:00002924 loc_2924:                               ; CODE XREF: Printer::doPrint(bool)+193Aj
.text$mn:00002924                 lea     ecx, [ebp+psizl]
.text$mn:0000292A                 push    ecx             ; psizl
.text$mn:0000292B                 lea     ecx, [ebp+var_ED4]
.text$mn:00002931                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00002936                 push    eax             ; c
.text$mn:00002937                 lea     ecx, [ebp+var_ED4]
.text$mn:0000293D                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002942                 push    eax             ; lpString
.text$mn:00002943                 mov     edx, [ebp+var_106C]
.text$mn:00002949                 mov     eax, [edx+10h]
.text$mn:0000294C                 push    eax             ; hdc
.text$mn:0000294D                 call    dword ptr ds:__imp__GetTextExtentPoint32W@16 ; GetTextExtentPoint32W(x,x,x,x)
.text$mn:00002953                 push    0               ; lpDx
.text$mn:00002955                 lea     ecx, [ebp+var_ED4]
.text$mn:0000295B                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00002960                 push    eax             ; c
.text$mn:00002961                 lea     ecx, [ebp+var_ED4]
.text$mn:00002967                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000296C                 push    eax             ; lpString
.text$mn:0000296D                 lea     ecx, [ebp+rect]
.text$mn:00002973                 push    ecx             ; lprect
.text$mn:00002974                 push    4               ; options
.text$mn:00002976                 mov     eax, [ebp+cHeight]
.text$mn:0000297C                 cdq
.text$mn:0000297D                 sub     eax, edx
.text$mn:0000297F                 sar     eax, 1
.text$mn:00002981                 mov     edx, [ebp+var_105C]
.text$mn:00002987                 sub     edx, eax
.text$mn:00002989                 push    edx             ; y
.text$mn:0000298A                 mov     eax, [ebp+var_1058]
.text$mn:00002990                 sub     eax, [ebp+psizl._cx]
.text$mn:00002996                 push    eax             ; x
.text$mn:00002997                 mov     ecx, [ebp+var_106C]
.text$mn:0000299D                 mov     edx, [ecx+10h]
.text$mn:000029A0                 push    edx             ; hdc
.text$mn:000029A1                 call    dword ptr ds:__imp__ExtTextOutW@32 ; ExtTextOutW(x,x,x,x,x,x,x,x)
.text$mn:000029A7                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000029AE                 lea     ecx, [ebp+var_ED4]
.text$mn:000029B4                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000029B9
.text$mn:000029B9 loc_29B9:                               ; CODE XREF: Printer::doPrint(bool)+18F8j
.text$mn:000029B9                 mov     eax, [ebp+align]
.text$mn:000029BF                 push    eax             ; align
.text$mn:000029C0                 mov     ecx, [ebp+var_106C]
.text$mn:000029C6                 mov     edx, [ecx+10h]
.text$mn:000029C9                 push    edx             ; hdc
.text$mn:000029CA                 call    dword ptr ds:__imp__SetTextAlign@8 ; SetTextAlign(x,x)
.text$mn:000029D0                 push    0               ; color
.text$mn:000029D2                 push    1               ; cWidth
.text$mn:000029D4                 push    0               ; iStyle
.text$mn:000029D6                 call    dword ptr ds:__imp__CreatePen@12 ; CreatePen(x,x,x)
.text$mn:000029DC                 mov     [ebp+ho], eax
.text$mn:000029E2                 mov     eax, [ebp+ho]
.text$mn:000029E8                 push    eax             ; h
.text$mn:000029E9                 mov     ecx, [ebp+var_106C]
.text$mn:000029EF                 mov     edx, [ecx+10h]
.text$mn:000029F2                 push    edx             ; hdc
.text$mn:000029F3                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text$mn:000029F9                 mov     [ebp+var_1170], eax
.text$mn:000029FF                 push    0               ; lppt
.text$mn:00002A01                 mov     eax, [ebp+cHeight]
.text$mn:00002A07                 cdq
.text$mn:00002A08                 and     edx, 3
.text$mn:00002A0B                 add     eax, edx
.text$mn:00002A0D                 sar     eax, 2
.text$mn:00002A10                 mov     ecx, [ebp+var_105C]
.text$mn:00002A16                 sub     ecx, eax
.text$mn:00002A18                 push    ecx             ; y
.text$mn:00002A19                 mov     edx, [ebp+x]
.text$mn:00002A1F                 push    edx             ; x
.text$mn:00002A20                 mov     eax, [ebp+var_106C]
.text$mn:00002A26                 mov     ecx, [eax+10h]
.text$mn:00002A29                 push    ecx             ; hdc
.text$mn:00002A2A                 call    dword ptr ds:__imp__MoveToEx@16 ; MoveToEx(x,x,x,x)
.text$mn:00002A30                 mov     eax, [ebp+cHeight]
.text$mn:00002A36                 cdq
.text$mn:00002A37                 and     edx, 3
.text$mn:00002A3A                 add     eax, edx
.text$mn:00002A3C                 sar     eax, 2
.text$mn:00002A3F                 mov     edx, [ebp+var_105C]
.text$mn:00002A45                 sub     edx, eax
.text$mn:00002A47                 push    edx             ; y
.text$mn:00002A48                 mov     eax, [ebp+var_1058]
.text$mn:00002A4E                 push    eax             ; x
.text$mn:00002A4F                 mov     ecx, [ebp+var_106C]
.text$mn:00002A55                 mov     edx, [ecx+10h]
.text$mn:00002A58                 push    edx             ; hdc
.text$mn:00002A59                 call    dword ptr ds:__imp__LineTo@12 ; LineTo(x,x,x)
.text$mn:00002A5F                 mov     eax, [ebp+var_1170]
.text$mn:00002A65                 push    eax             ; h
.text$mn:00002A66                 mov     ecx, [ebp+var_106C]
.text$mn:00002A6C                 mov     edx, [ecx+10h]
.text$mn:00002A6F                 push    edx             ; hdc
.text$mn:00002A70                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text$mn:00002A76                 mov     eax, [ebp+ho]
.text$mn:00002A7C                 push    eax             ; ho
.text$mn:00002A7D                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:00002A83
.text$mn:00002A83 loc_2A83:                               ; CODE XREF: Printer::doPrint(bool)+15F9j
.text$mn:00002A83                                         ; Printer::doPrint(bool)+1622j
.text$mn:00002A83                 mov     ecx, [ebp+var_108C]
.text$mn:00002A89                 mov     [ebp+var_1040], ecx
.text$mn:00002A8F                 mov     edx, [ebp+var_1080]
.text$mn:00002A95                 mov     [ebp+var_103C], edx
.text$mn:00002A9B                 push    0               ; __int32
.text$mn:00002A9D                 mov     eax, [ebp+var_1070]
.text$mn:00002AA3                 mov     ecx, [eax+7Ch]
.text$mn:00002AA6                 push    ecx             ; unsigned int
.text$mn:00002AA7                 push    864h            ; unsigned int
.text$mn:00002AAC                 mov     edx, [ebp+var_106C]
.text$mn:00002AB2                 mov     ecx, [edx+44h]  ; this
.text$mn:00002AB5                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00002ABA                 lea     eax, [ebp+var_1068]
.text$mn:00002AC0                 push    eax             ; __int32
.text$mn:00002AC1                 movzx   ecx, [ebp+var_1071]
.text$mn:00002AC8                 push    ecx             ; unsigned int
.text$mn:00002AC9                 push    867h            ; unsigned int
.text$mn:00002ACE                 mov     edx, [ebp+var_106C]
.text$mn:00002AD4                 mov     ecx, [edx+44h]  ; this
.text$mn:00002AD7                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00002ADC                 mov     [ebp+var_108C], eax
.text$mn:00002AE2                 movzx   eax, [ebp+var_1071]
.text$mn:00002AE9                 test    eax, eax
.text$mn:00002AEB                 jz      loc_2F93
.text$mn:00002AF1                 mov     ecx, [ebp+var_1070]
.text$mn:00002AF7                 add     ecx, 78h ; 'x'  ; this
.text$mn:00002AFA                 call    ?isFooterPresent@PrintSettings@@QBE_NXZ ; PrintSettings::isFooterPresent(void)
.text$mn:00002AFF                 movzx   ecx, al
.text$mn:00002B02                 test    ecx, ecx
.text$mn:00002B04                 jz      loc_2F83
.text$mn:00002B0A                 mov     edx, [ebp+var_1094]
.text$mn:00002B10                 push    edx             ; h
.text$mn:00002B11                 mov     eax, [ebp+var_106C]
.text$mn:00002B17                 mov     ecx, [eax+10h]
.text$mn:00002B1A                 push    ecx             ; hdc
.text$mn:00002B1B                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text$mn:00002B21                 push    0               ; color
.text$mn:00002B23                 mov     edx, [ebp+var_106C]
.text$mn:00002B29                 mov     eax, [edx+10h]
.text$mn:00002B2C                 push    eax             ; hdc
.text$mn:00002B2D                 call    dword ptr ds:__imp__SetTextColor@8 ; SetTextColor(x,x)
.text$mn:00002B33                 push    0FFFFFFh        ; color
.text$mn:00002B38                 mov     ecx, [ebp+var_106C]
.text$mn:00002B3E                 mov     edx, [ecx+10h]
.text$mn:00002B41                 push    edx             ; hdc
.text$mn:00002B42                 call    dword ptr ds:__imp__SetBkColor@8 ; SetBkColor(x,x)
.text$mn:00002B48                 push    0               ; align
.text$mn:00002B4A                 mov     eax, [ebp+var_106C]
.text$mn:00002B50                 mov     ecx, [eax+10h]
.text$mn:00002B53                 push    ecx             ; hdc
.text$mn:00002B54                 call    dword ptr ds:__imp__SetTextAlign@8 ; SetTextAlign(x,x)
.text$mn:00002B5A                 mov     [ebp+var_1120], eax
.text$mn:00002B60                 mov     edx, [ebp+x]
.text$mn:00002B66                 mov     [ebp+var_E9C.left], edx
.text$mn:00002B6C                 mov     eax, [ebp+var_107C]
.text$mn:00002B72                 cdq
.text$mn:00002B73                 sub     eax, edx
.text$mn:00002B75                 sar     eax, 1
.text$mn:00002B77                 add     eax, [ebp+var_1054]
.text$mn:00002B7D                 mov     [ebp+var_E9C.top], eax
.text$mn:00002B83                 mov     eax, [ebp+var_1058]
.text$mn:00002B89                 mov     [ebp+var_E9C.right], eax
.text$mn:00002B8F                 mov     ecx, [ebp+var_1054]
.text$mn:00002B95                 add     ecx, [ebp+var_107C]
.text$mn:00002B9B                 mov     eax, [ebp+var_107C]
.text$mn:00002BA1                 cdq
.text$mn:00002BA2                 sub     eax, edx
.text$mn:00002BA4                 sar     eax, 1
.text$mn:00002BA6                 add     ecx, eax
.text$mn:00002BA8                 mov     [ebp+var_E9C.bottom], ecx
.text$mn:00002BAE                 mov     edx, 2
.text$mn:00002BB3                 imul    eax, edx, 0
.text$mn:00002BB6                 movzx   ecx, [ebp+eax+var_C4C]
.text$mn:00002BBE                 test    ecx, ecx
.text$mn:00002BC0                 jz      loc_2C89
.text$mn:00002BC6                 lea     edx, [ebp+var_C4C]
.text$mn:00002BCC                 push    edx             ; Str
.text$mn:00002BCD                 lea     ecx, [ebp+var_FE0]
.text$mn:00002BD3                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002BD8                 mov     [ebp+var_4], 2Dh ; '-'
.text$mn:00002BDF                 push    0               ; int
.text$mn:00002BE1                 lea     eax, [ebp+String]
.text$mn:00002BE4                 push    eax             ; Str
.text$mn:00002BE5                 lea     ecx, [ebp+var_FE0]
.text$mn:00002BEB                 call    ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint)
.text$mn:00002BF0                 mov     [ebp+var_10CC], eax
.text$mn:00002BF6                 mov     ecx, [ebp+var_10CC]
.text$mn:00002BFC                 cmp     ecx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00002C02                 jz      short loc_2C28
.text$mn:00002C04                 lea     edx, [ebp+Str]
.text$mn:00002C0A                 push    edx             ; Str
.text$mn:00002C0B                 lea     eax, [ebp+String]
.text$mn:00002C0E                 push    eax             ; lpString
.text$mn:00002C0F                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00002C15                 push    eax             ; int
.text$mn:00002C16                 mov     ecx, [ebp+var_10CC]
.text$mn:00002C1C                 push    ecx             ; int
.text$mn:00002C1D                 lea     ecx, [ebp+var_FE0]
.text$mn:00002C23                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *)
.text$mn:00002C28
.text$mn:00002C28 loc_2C28:                               ; CODE XREF: Printer::doPrint(bool)+1C3Ej
.text$mn:00002C28                 push    0               ; lpDx
.text$mn:00002C2A                 lea     ecx, [ebp+var_FE0]
.text$mn:00002C30                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00002C35                 push    eax             ; c
.text$mn:00002C36                 lea     ecx, [ebp+var_FE0]
.text$mn:00002C3C                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002C41                 push    eax             ; lpString
.text$mn:00002C42                 lea     edx, [ebp+var_E9C]
.text$mn:00002C48                 push    edx             ; lprect
.text$mn:00002C49                 push    2               ; options
.text$mn:00002C4B                 mov     eax, [ebp+var_107C]
.text$mn:00002C51                 cdq
.text$mn:00002C52                 sub     eax, edx
.text$mn:00002C54                 sar     eax, 1
.text$mn:00002C56                 add     eax, [ebp+var_1054]
.text$mn:00002C5C                 push    eax             ; y
.text$mn:00002C5D                 mov     eax, [ebp+x]
.text$mn:00002C63                 add     eax, 5
.text$mn:00002C66                 push    eax             ; x
.text$mn:00002C67                 mov     ecx, [ebp+var_106C]
.text$mn:00002C6D                 mov     edx, [ecx+10h]
.text$mn:00002C70                 push    edx             ; hdc
.text$mn:00002C71                 call    dword ptr ds:__imp__ExtTextOutW@32 ; ExtTextOutW(x,x,x,x,x,x,x,x)
.text$mn:00002C77                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002C7E                 lea     ecx, [ebp+var_FE0]
.text$mn:00002C84                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002C89
.text$mn:00002C89 loc_2C89:                               ; CODE XREF: Printer::doPrint(bool)+1BFCj
.text$mn:00002C89                 mov     eax, 2
.text$mn:00002C8E                 imul    ecx, eax, 0
.text$mn:00002C91                 movzx   edx, [ebp+ecx+var_84C]
.text$mn:00002C99                 test    edx, edx
.text$mn:00002C9B                 jz      loc_2DB0
.text$mn:00002CA1                 lea     eax, [ebp+var_84C]
.text$mn:00002CA7                 push    eax             ; Str
.text$mn:00002CA8                 lea     ecx, [ebp+var_F0C]
.text$mn:00002CAE                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002CB3                 mov     [ebp+var_4], 2Eh ; '.'
.text$mn:00002CBA                 push    0               ; int
.text$mn:00002CBC                 lea     ecx, [ebp+String]
.text$mn:00002CBF                 push    ecx             ; Str
.text$mn:00002CC0                 lea     ecx, [ebp+var_F0C]
.text$mn:00002CC6                 call    ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint)
.text$mn:00002CCB                 mov     [ebp+var_110C], eax
.text$mn:00002CD1                 mov     edx, [ebp+var_110C]
.text$mn:00002CD7                 cmp     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00002CDD                 jz      short loc_2D03
.text$mn:00002CDF                 lea     eax, [ebp+Str]
.text$mn:00002CE5                 push    eax             ; Str
.text$mn:00002CE6                 lea     ecx, [ebp+String]
.text$mn:00002CE9                 push    ecx             ; lpString
.text$mn:00002CEA                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00002CF0                 push    eax             ; int
.text$mn:00002CF1                 mov     edx, [ebp+var_110C]
.text$mn:00002CF7                 push    edx             ; int
.text$mn:00002CF8                 lea     ecx, [ebp+var_F0C]
.text$mn:00002CFE                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *)
.text$mn:00002D03
.text$mn:00002D03 loc_2D03:                               ; CODE XREF: Printer::doPrint(bool)+1D19j
.text$mn:00002D03                 lea     eax, [ebp+var_113C]
.text$mn:00002D09                 push    eax             ; psizl
.text$mn:00002D0A                 lea     ecx, [ebp+var_F0C]
.text$mn:00002D10                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00002D15                 push    eax             ; c
.text$mn:00002D16                 lea     ecx, [ebp+var_F0C]
.text$mn:00002D1C                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002D21                 push    eax             ; lpString
.text$mn:00002D22                 mov     ecx, [ebp+var_106C]
.text$mn:00002D28                 mov     edx, [ecx+10h]
.text$mn:00002D2B                 push    edx             ; hdc
.text$mn:00002D2C                 call    dword ptr ds:__imp__GetTextExtentPoint32W@16 ; GetTextExtentPoint32W(x,x,x,x)
.text$mn:00002D32                 push    0               ; lpDx
.text$mn:00002D34                 lea     ecx, [ebp+var_F0C]
.text$mn:00002D3A                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00002D3F                 push    eax             ; c
.text$mn:00002D40                 lea     ecx, [ebp+var_F0C]
.text$mn:00002D46                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002D4B                 push    eax             ; lpString
.text$mn:00002D4C                 lea     eax, [ebp+var_E9C]
.text$mn:00002D52                 push    eax             ; lprect
.text$mn:00002D53                 push    4               ; options
.text$mn:00002D55                 mov     eax, [ebp+var_107C]
.text$mn:00002D5B                 cdq
.text$mn:00002D5C                 sub     eax, edx
.text$mn:00002D5E                 sar     eax, 1
.text$mn:00002D60                 add     eax, [ebp+var_1054]
.text$mn:00002D66                 push    eax             ; y
.text$mn:00002D67                 mov     eax, [ebp+var_1058]
.text$mn:00002D6D                 sub     eax, [ebp+x]
.text$mn:00002D73                 cdq
.text$mn:00002D74                 sub     eax, edx
.text$mn:00002D76                 mov     ecx, eax
.text$mn:00002D78                 sar     ecx, 1
.text$mn:00002D7A                 add     ecx, [ebp+x]
.text$mn:00002D80                 mov     eax, [ebp+var_113C._cx]
.text$mn:00002D86                 cdq
.text$mn:00002D87                 sub     eax, edx
.text$mn:00002D89                 sar     eax, 1
.text$mn:00002D8B                 sub     ecx, eax
.text$mn:00002D8D                 push    ecx             ; x
.text$mn:00002D8E                 mov     edx, [ebp+var_106C]
.text$mn:00002D94                 mov     eax, [edx+10h]
.text$mn:00002D97                 push    eax             ; hdc
.text$mn:00002D98                 call    dword ptr ds:__imp__ExtTextOutW@32 ; ExtTextOutW(x,x,x,x,x,x,x,x)
.text$mn:00002D9E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002DA5                 lea     ecx, [ebp+var_F0C]
.text$mn:00002DAB                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002DB0
.text$mn:00002DB0 loc_2DB0:                               ; CODE XREF: Printer::doPrint(bool)+1CD7j
.text$mn:00002DB0                 mov     ecx, 2
.text$mn:00002DB5                 imul    edx, ecx, 0
.text$mn:00002DB8                 movzx   eax, [ebp+edx+var_44C]
.text$mn:00002DC0                 test    eax, eax
.text$mn:00002DC2                 jz      loc_2EBD
.text$mn:00002DC8                 lea     ecx, [ebp+var_44C]
.text$mn:00002DCE                 push    ecx             ; Str
.text$mn:00002DCF                 lea     ecx, [ebp+var_EF0]
.text$mn:00002DD5                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002DDA                 mov     [ebp+var_4], 2Fh ; '/'
.text$mn:00002DE1                 push    0               ; int
.text$mn:00002DE3                 lea     edx, [ebp+String]
.text$mn:00002DE6                 push    edx             ; Str
.text$mn:00002DE7                 lea     ecx, [ebp+var_EF0]
.text$mn:00002DED                 call    ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint)
.text$mn:00002DF2                 mov     [ebp+var_10BC], eax
.text$mn:00002DF8                 mov     eax, [ebp+var_10BC]
.text$mn:00002DFE                 cmp     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00002E04                 jz      short loc_2E2A
.text$mn:00002E06                 lea     ecx, [ebp+Str]
.text$mn:00002E0C                 push    ecx             ; Str
.text$mn:00002E0D                 lea     edx, [ebp+String]
.text$mn:00002E10                 push    edx             ; lpString
.text$mn:00002E11                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00002E17                 push    eax             ; int
.text$mn:00002E18                 mov     eax, [ebp+var_10BC]
.text$mn:00002E1E                 push    eax             ; int
.text$mn:00002E1F                 lea     ecx, [ebp+var_EF0]
.text$mn:00002E25                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *)
.text$mn:00002E2A
.text$mn:00002E2A loc_2E2A:                               ; CODE XREF: Printer::doPrint(bool)+1E40j
.text$mn:00002E2A                 lea     ecx, [ebp+var_113C]
.text$mn:00002E30                 push    ecx             ; psizl
.text$mn:00002E31                 lea     ecx, [ebp+var_EF0]
.text$mn:00002E37                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00002E3C                 push    eax             ; c
.text$mn:00002E3D                 lea     ecx, [ebp+var_EF0]
.text$mn:00002E43                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002E48                 push    eax             ; lpString
.text$mn:00002E49                 mov     edx, [ebp+var_106C]
.text$mn:00002E4F                 mov     eax, [edx+10h]
.text$mn:00002E52                 push    eax             ; hdc
.text$mn:00002E53                 call    dword ptr ds:__imp__GetTextExtentPoint32W@16 ; GetTextExtentPoint32W(x,x,x,x)
.text$mn:00002E59                 push    0               ; lpDx
.text$mn:00002E5B                 lea     ecx, [ebp+var_EF0]
.text$mn:00002E61                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00002E66                 push    eax             ; c
.text$mn:00002E67                 lea     ecx, [ebp+var_EF0]
.text$mn:00002E6D                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002E72                 push    eax             ; lpString
.text$mn:00002E73                 lea     ecx, [ebp+var_E9C]
.text$mn:00002E79                 push    ecx             ; lprect
.text$mn:00002E7A                 push    4               ; options
.text$mn:00002E7C                 mov     eax, [ebp+var_107C]
.text$mn:00002E82                 cdq
.text$mn:00002E83                 sub     eax, edx
.text$mn:00002E85                 sar     eax, 1
.text$mn:00002E87                 add     eax, [ebp+var_1054]
.text$mn:00002E8D                 push    eax             ; y
.text$mn:00002E8E                 mov     edx, [ebp+var_1058]
.text$mn:00002E94                 sub     edx, [ebp+var_113C._cx]
.text$mn:00002E9A                 push    edx             ; x
.text$mn:00002E9B                 mov     eax, [ebp+var_106C]
.text$mn:00002EA1                 mov     ecx, [eax+10h]
.text$mn:00002EA4                 push    ecx             ; hdc
.text$mn:00002EA5                 call    dword ptr ds:__imp__ExtTextOutW@32 ; ExtTextOutW(x,x,x,x,x,x,x,x)
.text$mn:00002EAB                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002EB2                 lea     ecx, [ebp+var_EF0]
.text$mn:00002EB8                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002EBD
.text$mn:00002EBD loc_2EBD:                               ; CODE XREF: Printer::doPrint(bool)+1DFEj
.text$mn:00002EBD                 mov     edx, [ebp+var_1120]
.text$mn:00002EC3                 push    edx             ; align
.text$mn:00002EC4                 mov     eax, [ebp+var_106C]
.text$mn:00002ECA                 mov     ecx, [eax+10h]
.text$mn:00002ECD                 push    ecx             ; hdc
.text$mn:00002ECE                 call    dword ptr ds:__imp__SetTextAlign@8 ; SetTextAlign(x,x)
.text$mn:00002ED4                 push    0               ; color
.text$mn:00002ED6                 push    1               ; cWidth
.text$mn:00002ED8                 push    0               ; iStyle
.text$mn:00002EDA                 call    dword ptr ds:__imp__CreatePen@12 ; CreatePen(x,x,x)
.text$mn:00002EE0                 mov     [ebp+var_10F4], eax
.text$mn:00002EE6                 mov     edx, [ebp+var_10F4]
.text$mn:00002EEC                 push    edx             ; h
.text$mn:00002EED                 mov     eax, [ebp+var_106C]
.text$mn:00002EF3                 mov     ecx, [eax+10h]
.text$mn:00002EF6                 push    ecx             ; hdc
.text$mn:00002EF7                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text$mn:00002EFD                 mov     [ebp+var_1198], eax
.text$mn:00002F03                 push    0               ; lppt
.text$mn:00002F05                 mov     eax, [ebp+var_107C]
.text$mn:00002F0B                 cdq
.text$mn:00002F0C                 and     edx, 3
.text$mn:00002F0F                 add     eax, edx
.text$mn:00002F11                 sar     eax, 2
.text$mn:00002F14                 add     eax, [ebp+var_1054]
.text$mn:00002F1A                 push    eax             ; y
.text$mn:00002F1B                 mov     edx, [ebp+x]
.text$mn:00002F21                 push    edx             ; x
.text$mn:00002F22                 mov     eax, [ebp+var_106C]
.text$mn:00002F28                 mov     ecx, [eax+10h]
.text$mn:00002F2B                 push    ecx             ; hdc
.text$mn:00002F2C                 call    dword ptr ds:__imp__MoveToEx@16 ; MoveToEx(x,x,x,x)
.text$mn:00002F32                 mov     eax, [ebp+var_107C]
.text$mn:00002F38                 cdq
.text$mn:00002F39                 and     edx, 3
.text$mn:00002F3C                 add     eax, edx
.text$mn:00002F3E                 sar     eax, 2
.text$mn:00002F41                 add     eax, [ebp+var_1054]
.text$mn:00002F47                 push    eax             ; y
.text$mn:00002F48                 mov     edx, [ebp+var_1058]
.text$mn:00002F4E                 push    edx             ; x
.text$mn:00002F4F                 mov     eax, [ebp+var_106C]
.text$mn:00002F55                 mov     ecx, [eax+10h]
.text$mn:00002F58                 push    ecx             ; hdc
.text$mn:00002F59                 call    dword ptr ds:__imp__LineTo@12 ; LineTo(x,x,x)
.text$mn:00002F5F                 mov     edx, [ebp+var_1198]
.text$mn:00002F65                 push    edx             ; h
.text$mn:00002F66                 mov     eax, [ebp+var_106C]
.text$mn:00002F6C                 mov     ecx, [eax+10h]
.text$mn:00002F6F                 push    ecx             ; hdc
.text$mn:00002F70                 call    dword ptr ds:__imp__SelectObject@8 ; SelectObject(x,x)
.text$mn:00002F76                 mov     edx, [ebp+var_10F4]
.text$mn:00002F7C                 push    edx             ; ho
.text$mn:00002F7D                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:00002F83
.text$mn:00002F83 loc_2F83:                               ; CODE XREF: Printer::doPrint(bool)+1B40j
.text$mn:00002F83                 mov     eax, [ebp+var_106C]
.text$mn:00002F89                 mov     ecx, [eax+10h]
.text$mn:00002F8C                 push    ecx             ; hdc
.text$mn:00002F8D                 call    dword ptr ds:__imp__EndPage@4 ; EndPage(x)
.text$mn:00002F93
.text$mn:00002F93 loc_2F93:                               ; CODE XREF: Printer::doPrint(bool)+1B27j
.text$mn:00002F93                 mov     edx, [ebp+var_1084]
.text$mn:00002F99                 add     edx, 1
.text$mn:00002F9C                 mov     [ebp+var_1084], edx
.text$mn:00002FA2                 mov     eax, [ebp+var_106C]
.text$mn:00002FA8                 mov     ecx, [eax+14h]
.text$mn:00002FAB                 and     ecx, 2
.text$mn:00002FAE                 jz      short loc_2FC4
.text$mn:00002FB0                 mov     edx, [ebp+var_106C]
.text$mn:00002FB6                 movzx   eax, word ptr [edx+1Ah]
.text$mn:00002FBA                 cmp     [ebp+var_1084], eax
.text$mn:00002FC0                 jbe     short loc_2FC4
.text$mn:00002FC2                 jmp     short loc_2FC9
.text$mn:00002FC4 ; ---------------------------------------------------------------------------
.text$mn:00002FC4
.text$mn:00002FC4 loc_2FC4:                               ; CODE XREF: Printer::doPrint(bool)+1FEAj
.text$mn:00002FC4                                         ; Printer::doPrint(bool)+1FFCj
.text$mn:00002FC4                 jmp     loc_2523
.text$mn:00002FC9 ; ---------------------------------------------------------------------------
.text$mn:00002FC9
.text$mn:00002FC9 loc_2FC9:                               ; CODE XREF: Printer::doPrint(bool)+156Bj
.text$mn:00002FC9                                         ; Printer::doPrint(bool)+1FFEj
.text$mn:00002FC9                 mov     ecx, [ebp+var_1070]
.text$mn:00002FCF                 movzx   edx, byte ptr [ecx+78h]
.text$mn:00002FD3                 test    edx, edx
.text$mn:00002FD5                 jnz     short loc_2FF4
.text$mn:00002FD7                 movzx   eax, [ebp+var_108D]
.text$mn:00002FDE                 push    eax             ; bool
.text$mn:00002FDF                 mov     ecx, dword ptr ds:?_SC_MARGE_LINENUMBER@ScintillaEditView@@2HB ; int const ScintillaEditView::_SC_MARGE_LINENUMBER
.text$mn:00002FE5                 push    ecx             ; unsigned int
.text$mn:00002FE6                 mov     edx, [ebp+var_106C]
.text$mn:00002FEC                 mov     ecx, [edx+44h]  ; this
.text$mn:00002FEF                 call    ?showMargin@ScintillaEditView@@QAEXH_N@Z ; ScintillaEditView::showMargin(int,bool)
.text$mn:00002FF4
.text$mn:00002FF4 loc_2FF4:                               ; CODE XREF: Printer::doPrint(bool)+2011j
.text$mn:00002FF4                 push    0               ; __int32
.text$mn:00002FF6                 push    0               ; unsigned int
.text$mn:00002FF8                 push    867h            ; unsigned int
.text$mn:00002FFD                 mov     eax, [ebp+var_106C]
.text$mn:00003003                 mov     ecx, [eax+44h]  ; this
.text$mn:00003006                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:0000300B                 mov     ecx, [ebp+var_106C]
.text$mn:00003011                 mov     edx, [ecx+10h]
.text$mn:00003014                 push    edx             ; hdc
.text$mn:00003015                 call    dword ptr ds:__imp__EndDoc@4 ; EndDoc(x)
.text$mn:0000301B                 mov     eax, [ebp+var_106C]
.text$mn:00003021                 mov     ecx, [eax+10h]
.text$mn:00003024                 push    ecx             ; hdc
.text$mn:00003025                 call    dword ptr ds:__imp__DeleteDC@4 ; DeleteDC(x)
.text$mn:0000302B                 cmp     [ebp+h], 0
.text$mn:00003032                 jz      short loc_3041
.text$mn:00003034                 mov     edx, [ebp+h]
.text$mn:0000303A                 push    edx             ; ho
.text$mn:0000303B                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:00003041
.text$mn:00003041 loc_3041:                               ; CODE XREF: Printer::doPrint(bool)+206Ej
.text$mn:00003041                 cmp     [ebp+var_1094], 0
.text$mn:00003048                 jz      short loc_3057
.text$mn:0000304A                 mov     eax, [ebp+var_1094]
.text$mn:00003050                 push    eax             ; ho
.text$mn:00003051                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:00003057
.text$mn:00003057 loc_3057:                               ; CODE XREF: Printer::doPrint(bool)+2084j
.text$mn:00003057                 mov     eax, [ebp+var_1084]
.text$mn:0000305D                 sub     eax, 1
.text$mn:00003060
.text$mn:00003060 loc_3060:                               ; CODE XREF: Printer::doPrint(bool)+6E1j
.text$mn:00003060                 mov     ecx, [ebp+var_C]
.text$mn:00003063                 mov     large fs:0, ecx
.text$mn:0000306A                 pop     ecx
.text$mn:0000306B                 pop     edi
.text$mn:0000306C                 pop     esi
.text$mn:0000306D                 mov     ecx, [ebp+var_10]
.text$mn:00003070                 xor     ecx, ebp
.text$mn:00003072                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00003077                 mov     esp, ebp
.text$mn:00003079                 pop     ebp
.text$mn:0000307A                 retn    4
.text$mn:0000307A ?doPrint@Printer@@QAEI_N@Z endp
.text$mn:0000307A
.text$mn:0000307A ; ---------------------------------------------------------------------------
.text$mn:0000307D                 db 7 dup(0CCh)
.text$mn:00003084
.text$mn:00003084 ; =============== S U B R O U T I N E =======================================
.text$mn:00003084
.text$mn:00003084 ; Attributes: bp-based frame
.text$mn:00003084
.text$mn:00003084 ; void __cdecl replaceStr(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>)
.text$mn:00003084                 public ?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z
.text$mn:00003084 ?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z proc near
.text$mn:00003084                                         ; CODE XREF: Printer::doPrint(bool)+B26p
.text$mn:00003084                                         ; Printer::doPrint(bool)+B90p ...
.text$mn:00003084
.text$mn:00003084 var_10          = dword ptr -10h
.text$mn:00003084 var_C           = dword ptr -0Ch
.text$mn:00003084 var_4           = dword ptr -4
.text$mn:00003084 arg_0           = dword ptr  8
.text$mn:00003084 arg_4           = byte ptr  0Ch
.text$mn:00003084 arg_20          = byte ptr  28h
.text$mn:00003084
.text$mn:00003084                 push    ebp
.text$mn:00003085                 mov     ebp, esp
.text$mn:00003087                 push    0FFFFFFFFh
.text$mn:00003089                 push    offset __ehhandler$?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z
.text$mn:0000308E                 mov     eax, large fs:0
.text$mn:00003094                 push    eax
.text$mn:00003095                 push    ecx
.text$mn:00003096                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000309B                 xor     eax, ebp
.text$mn:0000309D                 push    eax
.text$mn:0000309E                 lea     eax, [ebp+var_C]
.text$mn:000030A1                 mov     large fs:0, eax
.text$mn:000030A7                 mov     [ebp+var_4], 1
.text$mn:000030AE                 push    0
.text$mn:000030B0                 lea     eax, [ebp+arg_4]
.text$mn:000030B3                 push    eax
.text$mn:000030B4                 mov     ecx, [ebp+arg_0]
.text$mn:000030B7                 call    ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIABV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint)
.text$mn:000030BC                 mov     [ebp+var_10], eax
.text$mn:000030BF                 mov     ecx, [ebp+var_10]
.text$mn:000030C2                 cmp     ecx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:000030C8                 jz      short loc_30E3
.text$mn:000030CA                 lea     edx, [ebp+arg_20]
.text$mn:000030CD                 push    edx
.text$mn:000030CE                 lea     ecx, [ebp+arg_4]
.text$mn:000030D1                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:000030D6                 push    eax
.text$mn:000030D7                 mov     eax, [ebp+var_10]
.text$mn:000030DA                 push    eax
.text$mn:000030DB                 mov     ecx, [ebp+arg_0]
.text$mn:000030DE                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000030E3
.text$mn:000030E3 loc_30E3:                               ; CODE XREF: replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+44j
.text$mn:000030E3                 mov     byte ptr [ebp+var_4], 0
.text$mn:000030E7                 lea     ecx, [ebp+arg_4]
.text$mn:000030EA                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000030EF                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000030F6                 lea     ecx, [ebp+arg_20]
.text$mn:000030F9                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000030FE                 mov     ecx, [ebp+var_C]
.text$mn:00003101                 mov     large fs:0, ecx
.text$mn:00003108                 pop     ecx
.text$mn:00003109                 mov     esp, ebp
.text$mn:0000310B                 pop     ebp
.text$mn:0000310C                 retn
.text$mn:0000310C ?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z endp
.text$mn:0000310C
.text$mn:0000310C ; ---------------------------------------------------------------------------
.text$mn:0000310D                 align 10h
.text$mn:0000310D _text$mn        ends
.text$mn:0000310D
.text$x:00003110 ; ===========================================================================
.text$x:00003110
.text$x:00003110 ; Segment type: Pure code
.text$x:00003110 ; Segment permissions: Read/Execute
.text$x:00003110 _text$x         segment para public 'CODE' use32
.text$x:00003110                 assume cs:_text$x
.text$x:00003110                 ;org 3110h
.text$x:00003110                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:00003110
.text$x:00003110 ; =============== S U B R O U T I N E =======================================
.text$x:00003110
.text$x:00003110
.text$x:00003110 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$0 proc near
.text$x:00003110                                         ; DATA XREF: .xdata$x:00006D48o
.text$x:00003110                 lea     ecx, [ebp-0F98h]
.text$x:00003116                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003116 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$0 endp
.text$x:00003116
.text$x:0000311B
.text$x:0000311B ; =============== S U B R O U T I N E =======================================
.text$x:0000311B
.text$x:0000311B
.text$x:0000311B __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$1 proc near
.text$x:0000311B                                         ; DATA XREF: .xdata$x:00006D50o
.text$x:0000311B                 mov     ecx, [ebp-12D8h]
.text$x:00003121                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003121 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$1 endp
.text$x:00003121
.text$x:00003126
.text$x:00003126 ; =============== S U B R O U T I N E =======================================
.text$x:00003126
.text$x:00003126
.text$x:00003126 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$2 proc near
.text$x:00003126                                         ; DATA XREF: .xdata$x:00006D58o
.text$x:00003126                 mov     ecx, [ebp-11E4h]
.text$x:0000312C                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000312C __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$2 endp
.text$x:0000312C
.text$x:00003131
.text$x:00003131 ; =============== S U B R O U T I N E =======================================
.text$x:00003131
.text$x:00003131
.text$x:00003131 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$3 proc near
.text$x:00003131                                         ; DATA XREF: .xdata$x:00006D60o
.text$x:00003131                 mov     ecx, [ebp-11F4h]
.text$x:00003137                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003137 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$3 endp
.text$x:00003137
.text$x:0000313C
.text$x:0000313C ; =============== S U B R O U T I N E =======================================
.text$x:0000313C
.text$x:0000313C
.text$x:0000313C __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$4 proc near
.text$x:0000313C                                         ; DATA XREF: .xdata$x:00006D68o
.text$x:0000313C                 mov     ecx, [ebp-1204h]
.text$x:00003142                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003142 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$4 endp
.text$x:00003142
.text$x:00003147
.text$x:00003147 ; =============== S U B R O U T I N E =======================================
.text$x:00003147
.text$x:00003147
.text$x:00003147 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$5 proc near
.text$x:00003147                                         ; DATA XREF: .xdata$x:00006D70o
.text$x:00003147                 mov     ecx, [ebp-1214h]
.text$x:0000314D                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000314D __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$5 endp
.text$x:0000314D
.text$x:00003152
.text$x:00003152 ; =============== S U B R O U T I N E =======================================
.text$x:00003152
.text$x:00003152
.text$x:00003152 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$6 proc near
.text$x:00003152                                         ; DATA XREF: .xdata$x:00006D78o
.text$x:00003152                 mov     ecx, [ebp-1224h]
.text$x:00003158                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003158 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$6 endp
.text$x:00003158
.text$x:0000315D
.text$x:0000315D ; =============== S U B R O U T I N E =======================================
.text$x:0000315D
.text$x:0000315D
.text$x:0000315D __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$7 proc near
.text$x:0000315D                                         ; DATA XREF: .xdata$x:00006D80o
.text$x:0000315D                 lea     ecx, [ebp-0F28h]
.text$x:00003163                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003163 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$7 endp
.text$x:00003163
.text$x:00003168
.text$x:00003168 ; =============== S U B R O U T I N E =======================================
.text$x:00003168
.text$x:00003168
.text$x:00003168 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$8 proc near
.text$x:00003168                                         ; DATA XREF: .xdata$x:00006D88o
.text$x:00003168                 mov     ecx, [ebp-1234h]
.text$x:0000316E                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000316E __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$8 endp
.text$x:0000316E
.text$x:00003173
.text$x:00003173 ; =============== S U B R O U T I N E =======================================
.text$x:00003173
.text$x:00003173
.text$x:00003173 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$9 proc near
.text$x:00003173                                         ; DATA XREF: .xdata$x:00006D90o
.text$x:00003173                 mov     ecx, [ebp-1244h]
.text$x:00003179                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003179 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$9 endp
.text$x:00003179
.text$x:0000317E
.text$x:0000317E ; =============== S U B R O U T I N E =======================================
.text$x:0000317E
.text$x:0000317E
.text$x:0000317E __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$10 proc near
.text$x:0000317E                                         ; DATA XREF: .xdata$x:00006D98o
.text$x:0000317E                 mov     ecx, [ebp-1254h]
.text$x:00003184                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003184 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$10 endp
.text$x:00003184
.text$x:00003189
.text$x:00003189 ; =============== S U B R O U T I N E =======================================
.text$x:00003189
.text$x:00003189
.text$x:00003189 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$11 proc near
.text$x:00003189                                         ; DATA XREF: .xdata$x:00006DA0o
.text$x:00003189                 mov     ecx, [ebp-1264h]
.text$x:0000318F                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000318F __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$11 endp
.text$x:0000318F
.text$x:00003194
.text$x:00003194 ; =============== S U B R O U T I N E =======================================
.text$x:00003194
.text$x:00003194
.text$x:00003194 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$12 proc near
.text$x:00003194                                         ; DATA XREF: .xdata$x:00006DA8o
.text$x:00003194                 mov     ecx, [ebp-1274h]
.text$x:0000319A                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000319A __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$12 endp
.text$x:0000319A
.text$x:0000319F
.text$x:0000319F ; =============== S U B R O U T I N E =======================================
.text$x:0000319F
.text$x:0000319F
.text$x:0000319F __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$13 proc near
.text$x:0000319F                                         ; DATA XREF: .xdata$x:00006DB0o
.text$x:0000319F                 mov     ecx, [ebp-1284h]
.text$x:000031A5                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000031A5 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$13 endp
.text$x:000031A5
.text$x:000031AA
.text$x:000031AA ; =============== S U B R O U T I N E =======================================
.text$x:000031AA
.text$x:000031AA
.text$x:000031AA __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$14 proc near
.text$x:000031AA                                         ; DATA XREF: .xdata$x:00006DB8o
.text$x:000031AA                 lea     ecx, [ebp-0F7Ch]
.text$x:000031B0                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000031B0 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$14 endp
.text$x:000031B0
.text$x:000031B5
.text$x:000031B5 ; =============== S U B R O U T I N E =======================================
.text$x:000031B5
.text$x:000031B5
.text$x:000031B5 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$15 proc near
.text$x:000031B5                                         ; DATA XREF: .xdata$x:00006DC0o
.text$x:000031B5                 mov     ecx, [ebp-1294h]
.text$x:000031BB                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000031BB __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$15 endp
.text$x:000031BB
.text$x:000031C0
.text$x:000031C0 ; =============== S U B R O U T I N E =======================================
.text$x:000031C0
.text$x:000031C0
.text$x:000031C0 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$16 proc near
.text$x:000031C0                                         ; DATA XREF: .xdata$x:00006DC8o
.text$x:000031C0                 mov     ecx, [ebp-12A4h]
.text$x:000031C6                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000031C6 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$16 endp
.text$x:000031C6
.text$x:000031CB
.text$x:000031CB ; =============== S U B R O U T I N E =======================================
.text$x:000031CB
.text$x:000031CB
.text$x:000031CB __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$17 proc near
.text$x:000031CB                                         ; DATA XREF: .xdata$x:00006DD0o
.text$x:000031CB                 mov     ecx, [ebp-12B4h]
.text$x:000031D1                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000031D1 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$17 endp
.text$x:000031D1
.text$x:000031D6
.text$x:000031D6 ; =============== S U B R O U T I N E =======================================
.text$x:000031D6
.text$x:000031D6
.text$x:000031D6 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$18 proc near
.text$x:000031D6                                         ; DATA XREF: .xdata$x:00006DD8o
.text$x:000031D6                 mov     ecx, [ebp-12C4h]
.text$x:000031DC                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000031DC __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$18 endp
.text$x:000031DC
.text$x:000031E1
.text$x:000031E1 ; =============== S U B R O U T I N E =======================================
.text$x:000031E1
.text$x:000031E1
.text$x:000031E1 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$19 proc near
.text$x:000031E1                                         ; DATA XREF: .xdata$x:00006DE0o
.text$x:000031E1                 mov     ecx, [ebp-12D4h]
.text$x:000031E7                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000031E7 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$19 endp
.text$x:000031E7
.text$x:000031EC
.text$x:000031EC ; =============== S U B R O U T I N E =======================================
.text$x:000031EC
.text$x:000031EC
.text$x:000031EC __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$20 proc near
.text$x:000031EC                                         ; DATA XREF: .xdata$x:00006DE8o
.text$x:000031EC                 mov     ecx, [ebp-12E4h]
.text$x:000031F2                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000031F2 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$20 endp
.text$x:000031F2
.text$x:000031F7
.text$x:000031F7 ; =============== S U B R O U T I N E =======================================
.text$x:000031F7
.text$x:000031F7
.text$x:000031F7 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$21 proc near
.text$x:000031F7                                         ; DATA XREF: .xdata$x:00006DF0o
.text$x:000031F7                 lea     ecx, [ebp-0FC4h]
.text$x:000031FD                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000031FD __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$21 endp
.text$x:000031FD
.text$x:00003202
.text$x:00003202 ; =============== S U B R O U T I N E =======================================
.text$x:00003202
.text$x:00003202
.text$x:00003202 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$22 proc near
.text$x:00003202                                         ; DATA XREF: .xdata$x:00006DF8o
.text$x:00003202                 mov     ecx, [ebp-12F4h]
.text$x:00003208                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003208 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$22 endp
.text$x:00003208
.text$x:0000320D
.text$x:0000320D ; =============== S U B R O U T I N E =======================================
.text$x:0000320D
.text$x:0000320D
.text$x:0000320D __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$23 proc near
.text$x:0000320D                                         ; DATA XREF: .xdata$x:00006E00o
.text$x:0000320D                 mov     ecx, [ebp-11E0h]
.text$x:00003213                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003213 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$23 endp
.text$x:00003213
.text$x:00003218
.text$x:00003218 ; =============== S U B R O U T I N E =======================================
.text$x:00003218
.text$x:00003218
.text$x:00003218 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$24 proc near
.text$x:00003218                                         ; DATA XREF: .xdata$x:00006E08o
.text$x:00003218                 mov     ecx, [ebp-11E8h]
.text$x:0000321E                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000321E __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$24 endp
.text$x:0000321E
.text$x:00003223
.text$x:00003223 ; =============== S U B R O U T I N E =======================================
.text$x:00003223
.text$x:00003223
.text$x:00003223 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$25 proc near
.text$x:00003223                                         ; DATA XREF: .xdata$x:00006E10o
.text$x:00003223                 mov     ecx, [ebp-11F0h]
.text$x:00003229                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003229 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$25 endp
.text$x:00003229
.text$x:0000322E
.text$x:0000322E ; =============== S U B R O U T I N E =======================================
.text$x:0000322E
.text$x:0000322E
.text$x:0000322E __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$26 proc near
.text$x:0000322E                                         ; DATA XREF: .xdata$x:00006E18o
.text$x:0000322E                 mov     ecx, [ebp-11F8h]
.text$x:00003234                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003234 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$26 endp
.text$x:00003234
.text$x:00003239
.text$x:00003239 ; =============== S U B R O U T I N E =======================================
.text$x:00003239
.text$x:00003239
.text$x:00003239 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$27 proc near
.text$x:00003239                                         ; DATA XREF: .xdata$x:00006E20o
.text$x:00003239                 mov     ecx, [ebp-1200h]
.text$x:0000323F                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000323F __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$27 endp
.text$x:0000323F
.text$x:00003244
.text$x:00003244 ; =============== S U B R O U T I N E =======================================
.text$x:00003244
.text$x:00003244
.text$x:00003244 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$28 proc near
.text$x:00003244                                         ; DATA XREF: .xdata$x:00006E28o
.text$x:00003244                 lea     ecx, [ebp-0F60h]
.text$x:0000324A                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000324A __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$28 endp
.text$x:0000324A
.text$x:0000324F
.text$x:0000324F ; =============== S U B R O U T I N E =======================================
.text$x:0000324F
.text$x:0000324F
.text$x:0000324F __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$29 proc near
.text$x:0000324F                                         ; DATA XREF: .xdata$x:00006E30o
.text$x:0000324F                 mov     ecx, [ebp-1208h]
.text$x:00003255                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003255 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$29 endp
.text$x:00003255
.text$x:0000325A
.text$x:0000325A ; =============== S U B R O U T I N E =======================================
.text$x:0000325A
.text$x:0000325A
.text$x:0000325A __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$30 proc near
.text$x:0000325A                                         ; DATA XREF: .xdata$x:00006E38o
.text$x:0000325A                 mov     ecx, [ebp-1210h]
.text$x:00003260                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003260 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$30 endp
.text$x:00003260
.text$x:00003265
.text$x:00003265 ; =============== S U B R O U T I N E =======================================
.text$x:00003265
.text$x:00003265
.text$x:00003265 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$31 proc near
.text$x:00003265                                         ; DATA XREF: .xdata$x:00006E40o
.text$x:00003265                 mov     ecx, [ebp-1218h]
.text$x:0000326B                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000326B __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$31 endp
.text$x:0000326B
.text$x:00003270
.text$x:00003270 ; =============== S U B R O U T I N E =======================================
.text$x:00003270
.text$x:00003270
.text$x:00003270 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$32 proc near
.text$x:00003270                                         ; DATA XREF: .xdata$x:00006E48o
.text$x:00003270                 mov     ecx, [ebp-1220h]
.text$x:00003276                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003276 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$32 endp
.text$x:00003276
.text$x:0000327B
.text$x:0000327B ; =============== S U B R O U T I N E =======================================
.text$x:0000327B
.text$x:0000327B
.text$x:0000327B __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$33 proc near
.text$x:0000327B                                         ; DATA XREF: .xdata$x:00006E50o
.text$x:0000327B                 mov     ecx, [ebp-1228h]
.text$x:00003281                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003281 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$33 endp
.text$x:00003281
.text$x:00003286
.text$x:00003286 ; =============== S U B R O U T I N E =======================================
.text$x:00003286
.text$x:00003286
.text$x:00003286 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$34 proc near
.text$x:00003286                                         ; DATA XREF: .xdata$x:00006E58o
.text$x:00003286                 mov     ecx, [ebp-1230h]
.text$x:0000328C                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000328C __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$34 endp
.text$x:0000328C
.text$x:00003291
.text$x:00003291 ; =============== S U B R O U T I N E =======================================
.text$x:00003291
.text$x:00003291
.text$x:00003291 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$35 proc near
.text$x:00003291                                         ; DATA XREF: .xdata$x:00006E60o
.text$x:00003291                 lea     ecx, [ebp-0F44h]
.text$x:00003297                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003297 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$35 endp
.text$x:00003297
.text$x:0000329C
.text$x:0000329C ; =============== S U B R O U T I N E =======================================
.text$x:0000329C
.text$x:0000329C
.text$x:0000329C __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$36 proc near
.text$x:0000329C                                         ; DATA XREF: .xdata$x:00006E68o
.text$x:0000329C                 mov     ecx, [ebp-1238h]
.text$x:000032A2                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000032A2 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$36 endp
.text$x:000032A2
.text$x:000032A7
.text$x:000032A7 ; =============== S U B R O U T I N E =======================================
.text$x:000032A7
.text$x:000032A7
.text$x:000032A7 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$37 proc near
.text$x:000032A7                                         ; DATA XREF: .xdata$x:00006E70o
.text$x:000032A7                 mov     ecx, [ebp-1240h]
.text$x:000032AD                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000032AD __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$37 endp
.text$x:000032AD
.text$x:000032B2
.text$x:000032B2 ; =============== S U B R O U T I N E =======================================
.text$x:000032B2
.text$x:000032B2
.text$x:000032B2 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$38 proc near
.text$x:000032B2                                         ; DATA XREF: .xdata$x:00006E78o
.text$x:000032B2                 mov     ecx, [ebp-1248h]
.text$x:000032B8                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000032B8 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$38 endp
.text$x:000032B8
.text$x:000032BD
.text$x:000032BD ; =============== S U B R O U T I N E =======================================
.text$x:000032BD
.text$x:000032BD
.text$x:000032BD __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$39 proc near
.text$x:000032BD                                         ; DATA XREF: .xdata$x:00006E80o
.text$x:000032BD                 mov     ecx, [ebp-1250h]
.text$x:000032C3                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000032C3 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$39 endp
.text$x:000032C3
.text$x:000032C8
.text$x:000032C8 ; =============== S U B R O U T I N E =======================================
.text$x:000032C8
.text$x:000032C8
.text$x:000032C8 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$40 proc near
.text$x:000032C8                                         ; DATA XREF: .xdata$x:00006E88o
.text$x:000032C8                 mov     ecx, [ebp-1258h]
.text$x:000032CE                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000032CE __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$40 endp
.text$x:000032CE
.text$x:000032D3
.text$x:000032D3 ; =============== S U B R O U T I N E =======================================
.text$x:000032D3
.text$x:000032D3
.text$x:000032D3 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$41 proc near
.text$x:000032D3                                         ; DATA XREF: .xdata$x:00006E90o
.text$x:000032D3                 mov     ecx, [ebp-1260h]
.text$x:000032D9                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000032D9 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$41 endp
.text$x:000032D9
.text$x:000032DE
.text$x:000032DE ; =============== S U B R O U T I N E =======================================
.text$x:000032DE
.text$x:000032DE
.text$x:000032DE __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$42 proc near
.text$x:000032DE                                         ; DATA XREF: .xdata$x:00006E98o
.text$x:000032DE                 lea     ecx, [ebp-0FFCh]
.text$x:000032E4                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000032E4 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$42 endp
.text$x:000032E4
.text$x:000032E9
.text$x:000032E9 ; =============== S U B R O U T I N E =======================================
.text$x:000032E9
.text$x:000032E9
.text$x:000032E9 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$43 proc near
.text$x:000032E9                                         ; DATA XREF: .xdata$x:00006EA0o
.text$x:000032E9                 lea     ecx, [ebp-0EB8h]
.text$x:000032EF                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000032EF __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$43 endp
.text$x:000032EF
.text$x:000032F4
.text$x:000032F4 ; =============== S U B R O U T I N E =======================================
.text$x:000032F4
.text$x:000032F4
.text$x:000032F4 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$44 proc near
.text$x:000032F4                                         ; DATA XREF: .xdata$x:00006EA8o
.text$x:000032F4                 lea     ecx, [ebp-0ED4h]
.text$x:000032FA                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000032FA __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$44 endp
.text$x:000032FA
.text$x:000032FF
.text$x:000032FF ; =============== S U B R O U T I N E =======================================
.text$x:000032FF
.text$x:000032FF
.text$x:000032FF __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$45 proc near
.text$x:000032FF                                         ; DATA XREF: .xdata$x:00006EB0o
.text$x:000032FF                 lea     ecx, [ebp-0FE0h]
.text$x:00003305                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003305 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$45 endp
.text$x:00003305
.text$x:0000330A
.text$x:0000330A ; =============== S U B R O U T I N E =======================================
.text$x:0000330A
.text$x:0000330A
.text$x:0000330A __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$46 proc near
.text$x:0000330A                                         ; DATA XREF: .xdata$x:00006EB8o
.text$x:0000330A                 lea     ecx, [ebp-0F0Ch]
.text$x:00003310                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003310 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$46 endp
.text$x:00003310
.text$x:00003315
.text$x:00003315 ; =============== S U B R O U T I N E =======================================
.text$x:00003315
.text$x:00003315
.text$x:00003315 __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$47 proc near
.text$x:00003315                                         ; DATA XREF: .xdata$x:00006EC0o
.text$x:00003315                 lea     ecx, [ebp-0EF0h]
.text$x:0000331B                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000331B __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$47 endp
.text$x:0000331B
.text$x:00003320
.text$x:00003320 ; =============== S U B R O U T I N E =======================================
.text$x:00003320
.text$x:00003320
.text$x:00003320 __ehhandler$?doPrint@Printer@@QAEI_N@Z proc near
.text$x:00003320                                         ; DATA XREF: Printer::doPrint(bool)+5o
.text$x:00003320
.text$x:00003320 arg_4           = dword ptr  8
.text$x:00003320
.text$x:00003320                 mov     edx, [esp+arg_4]
.text$x:00003324                 lea     eax, [edx+0Ch]
.text$x:00003327                 mov     ecx, [edx-12FCh]
.text$x:0000332D                 xor     ecx, eax
.text$x:0000332F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003334                 mov     ecx, [edx-4]
.text$x:00003337                 xor     ecx, eax
.text$x:00003339                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000333E                 mov     eax, offset __ehfuncinfo$?doPrint@Printer@@QAEI_N@Z
.text$x:00003343                 jmp     ___CxxFrameHandler3
.text$x:00003343 __ehhandler$?doPrint@Printer@@QAEI_N@Z endp
.text$x:00003343
.text$x:00003348
.text$x:00003348 ; =============== S U B R O U T I N E =======================================
.text$x:00003348
.text$x:00003348
.text$x:00003348 __unwindfunclet$?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z$0 proc near
.text$x:00003348                                         ; DATA XREF: .xdata$x:00006CF0o
.text$x:00003348                 lea     ecx, [ebp+28h]
.text$x:0000334B                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000334B __unwindfunclet$?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z$0 endp
.text$x:0000334B
.text$x:00003350
.text$x:00003350 ; =============== S U B R O U T I N E =======================================
.text$x:00003350
.text$x:00003350
.text$x:00003350 __unwindfunclet$?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z$1 proc near
.text$x:00003350                                         ; DATA XREF: .xdata$x:00006CF8o
.text$x:00003350                 lea     ecx, [ebp+0Ch]
.text$x:00003353                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003353 __unwindfunclet$?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z$1 endp
.text$x:00003353
.text$x:00003358
.text$x:00003358 ; =============== S U B R O U T I N E =======================================
.text$x:00003358
.text$x:00003358
.text$x:00003358 __ehhandler$?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z proc near
.text$x:00003358                                         ; DATA XREF: replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+5o
.text$x:00003358
.text$x:00003358 arg_4           = dword ptr  8
.text$x:00003358
.text$x:00003358                 mov     edx, [esp+arg_4]
.text$x:0000335C                 lea     eax, [edx+0Ch]
.text$x:0000335F                 mov     ecx, [edx-8]
.text$x:00003362                 xor     ecx, eax
.text$x:00003364                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003369                 mov     eax, offset __ehfuncinfo$?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z
.text$x:0000336E                 jmp     ___CxxFrameHandler3
.text$x:0000336E __ehhandler$?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z endp
.text$x:0000336E
.text$x:0000336E ; ---------------------------------------------------------------------------
.text$x:00003373                 align 4
.text$x:00003373 _text$x         ends
.text$x:00003373
.text$mn:00003374 ; ===========================================================================
.text$mn:00003374
.text$mn:00003374 ; Segment type: Pure code
.text$mn:00003374 ; Segment permissions: Read/Execute
.text$mn:00003374 _text$mn        segment para public 'CODE' use32
.text$mn:00003374                 assume cs:_text$mn
.text$mn:00003374                 ;org 3374h
.text$mn:00003374 ; COMDAT (pick any)
.text$mn:00003374                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003374
.text$mn:00003374 ; =============== S U B R O U T I N E =======================================
.text$mn:00003374
.text$mn:00003374 ; Attributes: bp-based frame
.text$mn:00003374
.text$mn:00003374 ; int __cdecl std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int, wchar_t *Str)
.text$mn:00003374                 public ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z
.text$mn:00003374 ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z proc near
.text$mn:00003374                                         ; CODE XREF: std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+Cp
.text$mn:00003374
.text$mn:00003374 var_4           = dword ptr -4
.text$mn:00003374 arg_0           = dword ptr  8
.text$mn:00003374 Str             = dword ptr  0Ch
.text$mn:00003374
.text$mn:00003374                 push    ebp
.text$mn:00003375                 mov     ebp, esp
.text$mn:00003377                 push    ecx
.text$mn:00003378                 mov     eax, [ebp+Str]
.text$mn:0000337B                 push    eax             ; Str
.text$mn:0000337C                 mov     ecx, [ebp+arg_0]
.text$mn:0000337F                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t const *)
.text$mn:00003384                 test    eax, eax
.text$mn:00003386                 jnz     short loc_3391
.text$mn:00003388                 mov     [ebp+var_4], 1
.text$mn:0000338F                 jmp     short loc_3398
.text$mn:00003391 ; ---------------------------------------------------------------------------
.text$mn:00003391
.text$mn:00003391 loc_3391:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+12j
.text$mn:00003391                 mov     [ebp+var_4], 0
.text$mn:00003398
.text$mn:00003398 loc_3398:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+1Bj
.text$mn:00003398                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000339B                 mov     esp, ebp
.text$mn:0000339D                 pop     ebp
.text$mn:0000339E                 retn
.text$mn:0000339E ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z endp
.text$mn:0000339E
.text$mn:0000339E ; ---------------------------------------------------------------------------
.text$mn:0000339F                 align 10h
.text$mn:0000339F _text$mn        ends
.text$mn:0000339F
.text$mn:000033A0 ; ===========================================================================
.text$mn:000033A0
.text$mn:000033A0 ; Segment type: Pure code
.text$mn:000033A0 ; Segment permissions: Read/Execute
.text$mn:000033A0 _text$mn        segment para public 'CODE' use32
.text$mn:000033A0                 assume cs:_text$mn
.text$mn:000033A0                 ;org 33A0h
.text$mn:000033A0 ; COMDAT (pick any)
.text$mn:000033A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000033A0
.text$mn:000033A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000033A0
.text$mn:000033A0 ; Attributes: bp-based frame
.text$mn:000033A0
.text$mn:000033A0 ; int __cdecl std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int, wchar_t *Str)
.text$mn:000033A0                 public ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z
.text$mn:000033A0 ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z proc near
.text$mn:000033A0                                         ; CODE XREF: Printer::doPrint(bool)+3D4p
.text$mn:000033A0                                         ; Printer::doPrint(bool)+55Ap ...
.text$mn:000033A0
.text$mn:000033A0 var_4           = dword ptr -4
.text$mn:000033A0 arg_0           = dword ptr  8
.text$mn:000033A0 Str             = dword ptr  0Ch
.text$mn:000033A0
.text$mn:000033A0                 push    ebp
.text$mn:000033A1                 mov     ebp, esp
.text$mn:000033A3                 push    ecx
.text$mn:000033A4                 mov     eax, [ebp+Str]
.text$mn:000033A7                 push    eax             ; Str
.text$mn:000033A8                 mov     ecx, [ebp+arg_0]
.text$mn:000033AB                 push    ecx             ; int
.text$mn:000033AC                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:000033B1                 add     esp, 8
.text$mn:000033B4                 movzx   edx, al
.text$mn:000033B7                 test    edx, edx
.text$mn:000033B9                 jnz     short loc_33C4
.text$mn:000033BB                 mov     [ebp+var_4], 1
.text$mn:000033C2                 jmp     short loc_33CB
.text$mn:000033C4 ; ---------------------------------------------------------------------------
.text$mn:000033C4
.text$mn:000033C4 loc_33C4:                               ; CODE XREF: std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+19j
.text$mn:000033C4                 mov     [ebp+var_4], 0
.text$mn:000033CB
.text$mn:000033CB loc_33CB:                               ; CODE XREF: std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+22j
.text$mn:000033CB                 mov     al, byte ptr [ebp+var_4]
.text$mn:000033CE                 mov     esp, ebp
.text$mn:000033D0                 pop     ebp
.text$mn:000033D1                 retn
.text$mn:000033D1 ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z endp
.text$mn:000033D1
.text$mn:000033D1 ; ---------------------------------------------------------------------------
.text$mn:000033D2                 align 4
.text$mn:000033D2 _text$mn        ends
.text$mn:000033D2
.text$mn:000033D4 ; ===========================================================================
.text$mn:000033D4
.text$mn:000033D4 ; Segment type: Pure code
.text$mn:000033D4 ; Segment permissions: Read/Execute
.text$mn:000033D4 _text$mn        segment para public 'CODE' use32
.text$mn:000033D4                 assume cs:_text$mn
.text$mn:000033D4                 ;org 33D4h
.text$mn:000033D4 ; COMDAT (pick any)
.text$mn:000033D4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000033D4
.text$mn:000033D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000033D4
.text$mn:000033D4 ; Attributes: bp-based frame
.text$mn:000033D4
.text$mn:000033D4 ; char * __cdecl std::_Allocate<char>(unsigned int, char *)
.text$mn:000033D4                 public ??$_Allocate@D@std@@YAPADIPAD@Z
.text$mn:000033D4 ??$_Allocate@D@std@@YAPADIPAD@Z proc near
.text$mn:000033D4                                         ; CODE XREF: std::allocator<char>::allocate(uint)+Dp
.text$mn:000033D4
.text$mn:000033D4 var_4           = dword ptr -4
.text$mn:000033D4 arg_0           = dword ptr  8
.text$mn:000033D4
.text$mn:000033D4                 push    ebp
.text$mn:000033D5                 mov     ebp, esp
.text$mn:000033D7                 push    ecx
.text$mn:000033D8                 mov     [ebp+var_4], 0
.text$mn:000033DF                 cmp     [ebp+arg_0], 0
.text$mn:000033E3                 jnz     short loc_33E7
.text$mn:000033E5                 jmp     short loc_3407
.text$mn:000033E7 ; ---------------------------------------------------------------------------
.text$mn:000033E7
.text$mn:000033E7 loc_33E7:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+Fj
.text$mn:000033E7                 cmp     [ebp+arg_0], 0FFFFFFFFh
.text$mn:000033EB                 ja      short loc_3402
.text$mn:000033ED                 mov     eax, [ebp+arg_0]
.text$mn:000033F0                 push    eax             ; unsigned int
.text$mn:000033F1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000033F6                 add     esp, 4
.text$mn:000033F9                 mov     [ebp+var_4], eax
.text$mn:000033FC                 cmp     [ebp+var_4], 0
.text$mn:00003400                 jnz     short loc_3407
.text$mn:00003402
.text$mn:00003402 loc_3402:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+17j
.text$mn:00003402                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00003407
.text$mn:00003407 loc_3407:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+11j
.text$mn:00003407                                         ; std::_Allocate<char>(uint,char *)+2Cj
.text$mn:00003407                 mov     eax, [ebp+var_4]
.text$mn:0000340A                 mov     esp, ebp
.text$mn:0000340C                 pop     ebp
.text$mn:0000340D                 retn
.text$mn:0000340D ??$_Allocate@D@std@@YAPADIPAD@Z endp
.text$mn:0000340D
.text$mn:0000340D ; ---------------------------------------------------------------------------
.text$mn:0000340E                 align 10h
.text$mn:0000340E _text$mn        ends
.text$mn:0000340E
.text$mn:00003410 ; ===========================================================================
.text$mn:00003410
.text$mn:00003410 ; Segment type: Pure code
.text$mn:00003410 ; Segment permissions: Read/Execute
.text$mn:00003410 _text$mn        segment para public 'CODE' use32
.text$mn:00003410                 assume cs:_text$mn
.text$mn:00003410                 ;org 3410h
.text$mn:00003410 ; COMDAT (pick any)
.text$mn:00003410                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003410
.text$mn:00003410 ; =============== S U B R O U T I N E =======================================
.text$mn:00003410
.text$mn:00003410 ; Attributes: bp-based frame
.text$mn:00003410
.text$mn:00003410 ; struct std::_Container_proxy * __cdecl std::_Allocate<struct std::_Container_proxy>(unsigned int, struct std::_Container_proxy *)
.text$mn:00003410                 public ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
.text$mn:00003410 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
.text$mn:00003410                                         ; CODE XREF: std::allocator<std::_Container_proxy>::allocate(uint)+Dp
.text$mn:00003410
.text$mn:00003410 var_4           = dword ptr -4
.text$mn:00003410 arg_0           = dword ptr  8
.text$mn:00003410
.text$mn:00003410                 push    ebp
.text$mn:00003411                 mov     ebp, esp
.text$mn:00003413                 push    ecx
.text$mn:00003414                 mov     [ebp+var_4], 0
.text$mn:0000341B                 cmp     [ebp+arg_0], 0
.text$mn:0000341F                 jnz     short loc_3423
.text$mn:00003421                 jmp     short loc_3449
.text$mn:00003423 ; ---------------------------------------------------------------------------
.text$mn:00003423
.text$mn:00003423 loc_3423:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+Fj
.text$mn:00003423                 cmp     [ebp+arg_0], 1FFFFFFFh
.text$mn:0000342A                 ja      short loc_3444
.text$mn:0000342C                 mov     eax, [ebp+arg_0]
.text$mn:0000342F                 shl     eax, 3
.text$mn:00003432                 push    eax             ; unsigned int
.text$mn:00003433                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00003438                 add     esp, 4
.text$mn:0000343B                 mov     [ebp+var_4], eax
.text$mn:0000343E                 cmp     [ebp+var_4], 0
.text$mn:00003442                 jnz     short loc_3449
.text$mn:00003444
.text$mn:00003444 loc_3444:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+1Aj
.text$mn:00003444                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00003449
.text$mn:00003449 loc_3449:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+11j
.text$mn:00003449                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+32j
.text$mn:00003449                 mov     eax, [ebp+var_4]
.text$mn:0000344C                 mov     esp, ebp
.text$mn:0000344E                 pop     ebp
.text$mn:0000344F                 retn
.text$mn:0000344F ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z endp
.text$mn:0000344F
.text$mn:0000344F _text$mn        ends
.text$mn:0000344F
.text$mn:00003450 ; ===========================================================================
.text$mn:00003450
.text$mn:00003450 ; Segment type: Pure code
.text$mn:00003450 ; Segment permissions: Read/Execute
.text$mn:00003450 _text$mn        segment para public 'CODE' use32
.text$mn:00003450                 assume cs:_text$mn
.text$mn:00003450                 ;org 3450h
.text$mn:00003450 ; COMDAT (pick any)
.text$mn:00003450                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003450
.text$mn:00003450 ; =============== S U B R O U T I N E =======================================
.text$mn:00003450
.text$mn:00003450 ; Attributes: bp-based frame
.text$mn:00003450
.text$mn:00003450 ; wchar_t * __cdecl std::_Allocate<wchar_t>(unsigned int, wchar_t *)
.text$mn:00003450                 public ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
.text$mn:00003450 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z proc near
.text$mn:00003450                                         ; CODE XREF: std::allocator<wchar_t>::allocate(uint)+Dp
.text$mn:00003450
.text$mn:00003450 var_4           = dword ptr -4
.text$mn:00003450 arg_0           = dword ptr  8
.text$mn:00003450
.text$mn:00003450                 push    ebp
.text$mn:00003451                 mov     ebp, esp
.text$mn:00003453                 push    ecx
.text$mn:00003454                 mov     [ebp+var_4], 0
.text$mn:0000345B                 cmp     [ebp+arg_0], 0
.text$mn:0000345F                 jnz     short loc_3463
.text$mn:00003461                 jmp     short loc_3488
.text$mn:00003463 ; ---------------------------------------------------------------------------
.text$mn:00003463
.text$mn:00003463 loc_3463:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+Fj
.text$mn:00003463                 cmp     [ebp+arg_0], 7FFFFFFFh
.text$mn:0000346A                 ja      short loc_3483
.text$mn:0000346C                 mov     eax, [ebp+arg_0]
.text$mn:0000346F                 shl     eax, 1
.text$mn:00003471                 push    eax             ; unsigned int
.text$mn:00003472                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00003477                 add     esp, 4
.text$mn:0000347A                 mov     [ebp+var_4], eax
.text$mn:0000347D                 cmp     [ebp+var_4], 0
.text$mn:00003481                 jnz     short loc_3488
.text$mn:00003483
.text$mn:00003483 loc_3483:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+1Aj
.text$mn:00003483                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00003488
.text$mn:00003488 loc_3488:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+11j
.text$mn:00003488                                         ; std::_Allocate<wchar_t>(uint,wchar_t *)+31j
.text$mn:00003488                 mov     eax, [ebp+var_4]
.text$mn:0000348B                 mov     esp, ebp
.text$mn:0000348D                 pop     ebp
.text$mn:0000348E                 retn
.text$mn:0000348E ??$_Allocate@_W@std@@YAPA_WIPA_W@Z endp
.text$mn:0000348E
.text$mn:0000348E ; ---------------------------------------------------------------------------
.text$mn:0000348F                 align 10h
.text$mn:0000348F _text$mn        ends
.text$mn:0000348F
.text$mn:00003490 ; ===========================================================================
.text$mn:00003490
.text$mn:00003490 ; Segment type: Pure code
.text$mn:00003490 ; Segment permissions: Read/Execute
.text$mn:00003490 _text$mn        segment para public 'CODE' use32
.text$mn:00003490                 assume cs:_text$mn
.text$mn:00003490                 ;org 3490h
.text$mn:00003490 ; COMDAT (pick any)
.text$mn:00003490                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003490
.text$mn:00003490 ; =============== S U B R O U T I N E =======================================
.text$mn:00003490
.text$mn:00003490 ; Attributes: bp-based frame
.text$mn:00003490
.text$mn:00003490 ; int __cdecl std::_Debug_pointer<char>(int, wchar_t *, unsigned int)
.text$mn:00003490                 public ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
.text$mn:00003490 ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
.text$mn:00003490                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+15p
.text$mn:00003490                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+1Bp
.text$mn:00003490
.text$mn:00003490 arg_0           = dword ptr  8
.text$mn:00003490 arg_4           = dword ptr  0Ch
.text$mn:00003490 arg_8           = dword ptr  10h
.text$mn:00003490
.text$mn:00003490                 push    ebp
.text$mn:00003491                 mov     ebp, esp
.text$mn:00003493                 cmp     [ebp+arg_0], 0
.text$mn:00003497                 jnz     short loc_34AE
.text$mn:00003499                 mov     eax, [ebp+arg_8]
.text$mn:0000349C                 push    eax             ; unsigned int
.text$mn:0000349D                 mov     ecx, [ebp+arg_4]
.text$mn:000034A0                 push    ecx             ; wchar_t *
.text$mn:000034A1                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000034A6                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000034AB                 add     esp, 0Ch
.text$mn:000034AE
.text$mn:000034AE loc_34AE:                               ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+7j
.text$mn:000034AE                 pop     ebp
.text$mn:000034AF                 retn
.text$mn:000034AF ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z endp
.text$mn:000034AF
.text$mn:000034AF _text$mn        ends
.text$mn:000034AF
.text$mn:000034B0 ; ===========================================================================
.text$mn:000034B0
.text$mn:000034B0 ; Segment type: Pure code
.text$mn:000034B0 ; Segment permissions: Read/Execute
.text$mn:000034B0 _text$mn        segment para public 'CODE' use32
.text$mn:000034B0                 assume cs:_text$mn
.text$mn:000034B0                 ;org 34B0h
.text$mn:000034B0 ; COMDAT (pick any)
.text$mn:000034B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000034B0
.text$mn:000034B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000034B0
.text$mn:000034B0 ; Attributes: bp-based frame
.text$mn:000034B0
.text$mn:000034B0 ; int __cdecl std::_Debug_pointer<wchar_t>(int, wchar_t *, unsigned int)
.text$mn:000034B0                 public ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z
.text$mn:000034B0 ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z proc near
.text$mn:000034B0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+15p
.text$mn:000034B0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+1Bp ...
.text$mn:000034B0
.text$mn:000034B0 arg_0           = dword ptr  8
.text$mn:000034B0 arg_4           = dword ptr  0Ch
.text$mn:000034B0 arg_8           = dword ptr  10h
.text$mn:000034B0
.text$mn:000034B0                 push    ebp
.text$mn:000034B1                 mov     ebp, esp
.text$mn:000034B3                 cmp     [ebp+arg_0], 0
.text$mn:000034B7                 jnz     short loc_34CE
.text$mn:000034B9                 mov     eax, [ebp+arg_8]
.text$mn:000034BC                 push    eax             ; unsigned int
.text$mn:000034BD                 mov     ecx, [ebp+arg_4]
.text$mn:000034C0                 push    ecx             ; wchar_t *
.text$mn:000034C1                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000034C6                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000034CB                 add     esp, 0Ch
.text$mn:000034CE
.text$mn:000034CE loc_34CE:                               ; CODE XREF: std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)+7j
.text$mn:000034CE                 pop     ebp
.text$mn:000034CF                 retn
.text$mn:000034CF ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z endp
.text$mn:000034CF
.text$mn:000034CF _text$mn        ends
.text$mn:000034CF
.text$mn:000034D0 ; ===========================================================================
.text$mn:000034D0
.text$mn:000034D0 ; Segment type: Pure code
.text$mn:000034D0 ; Segment permissions: Read/Execute
.text$mn:000034D0 _text$mn        segment para public 'CODE' use32
.text$mn:000034D0                 assume cs:_text$mn
.text$mn:000034D0                 ;org 34D0h
.text$mn:000034D0 ; COMDAT (pick any)
.text$mn:000034D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000034D0
.text$mn:000034D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000034D0
.text$mn:000034D0 ; Attributes: bp-based frame
.text$mn:000034D0
.text$mn:000034D0 ; char * __cdecl std::addressof<char>(char &)
.text$mn:000034D0                 public ??$addressof@D@std@@YAPADAAD@Z
.text$mn:000034D0 ??$addressof@D@std@@YAPADAAD@Z proc near
.text$mn:000034D0                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p
.text$mn:000034D0                                         ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p ...
.text$mn:000034D0
.text$mn:000034D0 arg_0           = dword ptr  8
.text$mn:000034D0
.text$mn:000034D0                 push    ebp
.text$mn:000034D1                 mov     ebp, esp
.text$mn:000034D3                 mov     eax, [ebp+arg_0]
.text$mn:000034D6                 pop     ebp
.text$mn:000034D7                 retn
.text$mn:000034D7 ??$addressof@D@std@@YAPADAAD@Z endp
.text$mn:000034D7
.text$mn:000034D7 _text$mn        ends
.text$mn:000034D7
.text$mn:000034D8 ; ===========================================================================
.text$mn:000034D8
.text$mn:000034D8 ; Segment type: Pure code
.text$mn:000034D8 ; Segment permissions: Read/Execute
.text$mn:000034D8 _text$mn        segment para public 'CODE' use32
.text$mn:000034D8                 assume cs:_text$mn
.text$mn:000034D8                 ;org 34D8h
.text$mn:000034D8 ; COMDAT (pick any)
.text$mn:000034D8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000034D8
.text$mn:000034D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000034D8
.text$mn:000034D8 ; Attributes: bp-based frame
.text$mn:000034D8
.text$mn:000034D8 ; wchar_t * __cdecl std::addressof<wchar_t>(wchar_t &)
.text$mn:000034D8                 public ??$addressof@_W@std@@YAPA_WAA_W@Z
.text$mn:000034D8 ??$addressof@_W@std@@YAPA_WAA_W@Z proc near
.text$mn:000034D8                                         ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p
.text$mn:000034D8                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p ...
.text$mn:000034D8
.text$mn:000034D8 arg_0           = dword ptr  8
.text$mn:000034D8
.text$mn:000034D8                 push    ebp
.text$mn:000034D9                 mov     ebp, esp
.text$mn:000034DB                 mov     eax, [ebp+arg_0]
.text$mn:000034DE                 pop     ebp
.text$mn:000034DF                 retn
.text$mn:000034DF ??$addressof@_W@std@@YAPA_WAA_W@Z endp
.text$mn:000034DF
.text$mn:000034DF _text$mn        ends
.text$mn:000034DF
.text$mn:000034E0 ; ===========================================================================
.text$mn:000034E0
.text$mn:000034E0 ; Segment type: Pure code
.text$mn:000034E0 ; Segment permissions: Read/Execute
.text$mn:000034E0 _text$mn        segment para public 'CODE' use32
.text$mn:000034E0                 assume cs:_text$mn
.text$mn:000034E0                 ;org 34E0h
.text$mn:000034E0 ; COMDAT (pick any)
.text$mn:000034E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000034E0
.text$mn:000034E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000034E0
.text$mn:000034E0 ; Attributes: bp-based frame
.text$mn:000034E0
.text$mn:000034E0 ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(void *, int)
.text$mn:000034E0                 public ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
.text$mn:000034E0 ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:000034E0                                         ; CODE XREF: $LN19+4Bp
.text$mn:000034E0
.text$mn:000034E0 var_4           = dword ptr -4
.text$mn:000034E0 arg_0           = dword ptr  8
.text$mn:000034E0 arg_4           = dword ptr  0Ch
.text$mn:000034E0
.text$mn:000034E0                 push    ebp
.text$mn:000034E1                 mov     ebp, esp
.text$mn:000034E3                 push    ecx
.text$mn:000034E4                 mov     [ebp+var_4], ecx
.text$mn:000034E7                 mov     eax, [ebp+arg_4]
.text$mn:000034EA                 push    eax
.text$mn:000034EB                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:000034F0                 add     esp, 4
.text$mn:000034F3                 push    eax             ; int
.text$mn:000034F4                 mov     ecx, [ebp+arg_0]
.text$mn:000034F7                 push    ecx             ; void *
.text$mn:000034F8                 mov     edx, [ebp+var_4]
.text$mn:000034FB                 push    edx             ; int
.text$mn:000034FC                 call    ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)
.text$mn:00003501                 add     esp, 0Ch
.text$mn:00003504                 mov     esp, ebp
.text$mn:00003506                 pop     ebp
.text$mn:00003507                 retn    8
.text$mn:00003507 ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z endp
.text$mn:00003507
.text$mn:00003507 ; ---------------------------------------------------------------------------
.text$mn:0000350A                 align 4
.text$mn:0000350A _text$mn        ends
.text$mn:0000350A
.text$mn:0000350C ; ===========================================================================
.text$mn:0000350C
.text$mn:0000350C ; Segment type: Pure code
.text$mn:0000350C ; Segment permissions: Read/Execute
.text$mn:0000350C _text$mn        segment para public 'CODE' use32
.text$mn:0000350C                 assume cs:_text$mn
.text$mn:0000350C                 ;org 350Ch
.text$mn:0000350C ; COMDAT (pick any)
.text$mn:0000350C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:0000350C
.text$mn:0000350C ; =============== S U B R O U T I N E =======================================
.text$mn:0000350C
.text$mn:0000350C ; Attributes: bp-based frame
.text$mn:0000350C
.text$mn:0000350C ; int __stdcall std::allocator<char>::construct<char *,char * &>(void *, int)
.text$mn:0000350C                 public ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:0000350C ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:0000350C                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)+17p
.text$mn:0000350C
.text$mn:0000350C var_1C          = dword ptr -1Ch
.text$mn:0000350C var_18          = dword ptr -18h
.text$mn:0000350C var_14          = dword ptr -14h
.text$mn:0000350C var_10          = dword ptr -10h
.text$mn:0000350C var_C           = dword ptr -0Ch
.text$mn:0000350C var_4           = dword ptr -4
.text$mn:0000350C arg_0           = dword ptr  8
.text$mn:0000350C arg_4           = dword ptr  0Ch
.text$mn:0000350C
.text$mn:0000350C                 push    ebp
.text$mn:0000350D                 mov     ebp, esp
.text$mn:0000350F                 push    0FFFFFFFFh
.text$mn:00003511                 push    offset __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:00003516                 mov     eax, large fs:0
.text$mn:0000351C                 push    eax
.text$mn:0000351D                 sub     esp, 10h
.text$mn:00003520                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003525                 xor     eax, ebp
.text$mn:00003527                 push    eax
.text$mn:00003528                 lea     eax, [ebp+var_C]
.text$mn:0000352B                 mov     large fs:0, eax
.text$mn:00003531                 mov     [ebp+var_18], ecx
.text$mn:00003534                 mov     eax, [ebp+arg_0]
.text$mn:00003537                 push    eax             ; void *
.text$mn:00003538                 push    4               ; unsigned int
.text$mn:0000353A                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:0000353F                 add     esp, 8
.text$mn:00003542                 mov     [ebp+var_10], eax
.text$mn:00003545                 mov     [ebp+var_4], 0
.text$mn:0000354C                 cmp     [ebp+var_10], 0
.text$mn:00003550                 jz      short loc_356D
.text$mn:00003552                 mov     ecx, [ebp+arg_4]
.text$mn:00003555                 push    ecx
.text$mn:00003556                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:0000355B                 add     esp, 4
.text$mn:0000355E                 mov     edx, [ebp+var_10]
.text$mn:00003561                 mov     eax, [eax]
.text$mn:00003563                 mov     [edx], eax
.text$mn:00003565                 mov     ecx, [ebp+var_10]
.text$mn:00003568                 mov     [ebp+var_14], ecx
.text$mn:0000356B                 jmp     short loc_3574
.text$mn:0000356D ; ---------------------------------------------------------------------------
.text$mn:0000356D
.text$mn:0000356D loc_356D:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+44j
.text$mn:0000356D                 mov     [ebp+var_14], 0
.text$mn:00003574
.text$mn:00003574 loc_3574:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5Fj
.text$mn:00003574                 mov     edx, [ebp+var_14]
.text$mn:00003577                 mov     [ebp+var_1C], edx
.text$mn:0000357A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003581                 mov     ecx, [ebp+var_C]
.text$mn:00003584                 mov     large fs:0, ecx
.text$mn:0000358B                 pop     ecx
.text$mn:0000358C                 mov     esp, ebp
.text$mn:0000358E                 pop     ebp
.text$mn:0000358F                 retn    8
.text$mn:0000358F ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$mn:0000358F
.text$mn:0000358F ; ---------------------------------------------------------------------------
.text$mn:00003592                 align 4
.text$mn:00003592 _text$mn        ends
.text$mn:00003592
.text$x:00003594 ; ===========================================================================
.text$x:00003594
.text$x:00003594 ; Segment type: Pure code
.text$x:00003594 ; Segment permissions: Read/Execute
.text$x:00003594 _text$x         segment para public 'CODE' use32
.text$x:00003594                 assume cs:_text$x
.text$x:00003594                 ;org 3594h
.text$x:00003594 ; COMDAT (pick associative to section at 350C)
.text$x:00003594                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:00003594
.text$x:00003594 ; =============== S U B R O U T I N E =======================================
.text$x:00003594
.text$x:00003594
.text$x:00003594 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
.text$x:00003594                                         ; DATA XREF: .xdata$x:00006EF4o
.text$x:00003594                 mov     eax, [ebp+8]
.text$x:00003597                 push    eax
.text$x:00003598                 mov     eax, [ebp-10h]
.text$x:0000359B                 push    eax             ; void *
.text$x:0000359C                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:000035A1                 add     esp, 8
.text$x:000035A4                 retn
.text$x:000035A4 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 endp
.text$x:000035A4
.text$x:000035A5
.text$x:000035A5 ; =============== S U B R O U T I N E =======================================
.text$x:000035A5
.text$x:000035A5
.text$x:000035A5 __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$x:000035A5                                         ; DATA XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5o
.text$x:000035A5
.text$x:000035A5 arg_4           = dword ptr  8
.text$x:000035A5
.text$x:000035A5                 mov     edx, [esp+arg_4]
.text$x:000035A9                 lea     eax, [edx+0Ch]
.text$x:000035AC                 mov     ecx, [edx-14h]
.text$x:000035AF                 xor     ecx, eax
.text$x:000035B1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000035B6                 mov     eax, offset __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$x:000035BB                 jmp     ___CxxFrameHandler3
.text$x:000035BB __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$x:000035BB
.text$x:000035BB _text$x         ends
.text$x:000035BB
.text$mn:000035C0 ; ===========================================================================
.text$mn:000035C0
.text$mn:000035C0 ; Segment type: Pure code
.text$mn:000035C0 ; Segment permissions: Read/Execute
.text$mn:000035C0 _text$mn        segment para public 'CODE' use32
.text$mn:000035C0                 assume cs:_text$mn
.text$mn:000035C0                 ;org 35C0h
.text$mn:000035C0 ; COMDAT (pick any)
.text$mn:000035C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000035C0
.text$mn:000035C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000035C0
.text$mn:000035C0 ; Attributes: bp-based frame
.text$mn:000035C0
.text$mn:000035C0 ; int __cdecl std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(int, void *, int)
.text$mn:000035C0                 public ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
.text$mn:000035C0 ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
.text$mn:000035C0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+1Cp
.text$mn:000035C0
.text$mn:000035C0 arg_0           = dword ptr  8
.text$mn:000035C0 arg_4           = dword ptr  0Ch
.text$mn:000035C0 arg_8           = dword ptr  10h
.text$mn:000035C0
.text$mn:000035C0                 push    ebp
.text$mn:000035C1                 mov     ebp, esp
.text$mn:000035C3                 mov     eax, [ebp+arg_8]
.text$mn:000035C6                 push    eax
.text$mn:000035C7                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:000035CC                 add     esp, 4
.text$mn:000035CF                 push    eax             ; int
.text$mn:000035D0                 mov     ecx, [ebp+arg_4]
.text$mn:000035D3                 push    ecx             ; void *
.text$mn:000035D4                 mov     ecx, [ebp+arg_0]
.text$mn:000035D7                 call    ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)
.text$mn:000035DC                 pop     ebp
.text$mn:000035DD                 retn
.text$mn:000035DD ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z endp
.text$mn:000035DD
.text$mn:000035DD ; ---------------------------------------------------------------------------
.text$mn:000035DE                 align 10h
.text$mn:000035DE _text$mn        ends
.text$mn:000035DE
.text$mn:000035E0 ; ===========================================================================
.text$mn:000035E0
.text$mn:000035E0 ; Segment type: Pure code
.text$mn:000035E0 ; Segment permissions: Read/Execute
.text$mn:000035E0 _text$mn        segment para public 'CODE' use32
.text$mn:000035E0                 assume cs:_text$mn
.text$mn:000035E0                 ;org 35E0h
.text$mn:000035E0 ; COMDAT (pick any)
.text$mn:000035E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000035E0
.text$mn:000035E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000035E0
.text$mn:000035E0 ; Attributes: bp-based frame
.text$mn:000035E0
.text$mn:000035E0 ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:000035E0                 public ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:000035E0 ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:000035E0                                         ; CODE XREF: $LN19_0+4Bp
.text$mn:000035E0
.text$mn:000035E0 var_4           = dword ptr -4
.text$mn:000035E0 arg_0           = dword ptr  8
.text$mn:000035E0 arg_4           = dword ptr  0Ch
.text$mn:000035E0
.text$mn:000035E0                 push    ebp
.text$mn:000035E1                 mov     ebp, esp
.text$mn:000035E3                 push    ecx
.text$mn:000035E4                 mov     [ebp+var_4], ecx
.text$mn:000035E7                 mov     eax, [ebp+arg_4]
.text$mn:000035EA                 push    eax
.text$mn:000035EB                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:000035F0                 add     esp, 4
.text$mn:000035F3                 push    eax             ; int
.text$mn:000035F4                 mov     ecx, [ebp+arg_0]
.text$mn:000035F7                 push    ecx             ; void *
.text$mn:000035F8                 mov     edx, [ebp+var_4]
.text$mn:000035FB                 push    edx             ; int
.text$mn:000035FC                 call    ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)
.text$mn:00003601                 add     esp, 0Ch
.text$mn:00003604                 mov     esp, ebp
.text$mn:00003606                 pop     ebp
.text$mn:00003607                 retn    8
.text$mn:00003607 ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:00003607
.text$mn:00003607 ; ---------------------------------------------------------------------------
.text$mn:0000360A                 align 4
.text$mn:0000360A _text$mn        ends
.text$mn:0000360A
.text$mn:0000360C ; ===========================================================================
.text$mn:0000360C
.text$mn:0000360C ; Segment type: Pure code
.text$mn:0000360C ; Segment permissions: Read/Execute
.text$mn:0000360C _text$mn        segment para public 'CODE' use32
.text$mn:0000360C                 assume cs:_text$mn
.text$mn:0000360C                 ;org 360Ch
.text$mn:0000360C ; COMDAT (pick any)
.text$mn:0000360C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:0000360C
.text$mn:0000360C ; =============== S U B R O U T I N E =======================================
.text$mn:0000360C
.text$mn:0000360C ; Attributes: bp-based frame
.text$mn:0000360C
.text$mn:0000360C ; int __stdcall std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:0000360C                 public ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:0000360C ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:0000360C                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)+17p
.text$mn:0000360C
.text$mn:0000360C var_1C          = dword ptr -1Ch
.text$mn:0000360C var_18          = dword ptr -18h
.text$mn:0000360C var_14          = dword ptr -14h
.text$mn:0000360C var_10          = dword ptr -10h
.text$mn:0000360C var_C           = dword ptr -0Ch
.text$mn:0000360C var_4           = dword ptr -4
.text$mn:0000360C arg_0           = dword ptr  8
.text$mn:0000360C arg_4           = dword ptr  0Ch
.text$mn:0000360C
.text$mn:0000360C                 push    ebp
.text$mn:0000360D                 mov     ebp, esp
.text$mn:0000360F                 push    0FFFFFFFFh
.text$mn:00003611                 push    offset __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00003616                 mov     eax, large fs:0
.text$mn:0000361C                 push    eax
.text$mn:0000361D                 sub     esp, 10h
.text$mn:00003620                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003625                 xor     eax, ebp
.text$mn:00003627                 push    eax
.text$mn:00003628                 lea     eax, [ebp+var_C]
.text$mn:0000362B                 mov     large fs:0, eax
.text$mn:00003631                 mov     [ebp+var_18], ecx
.text$mn:00003634                 mov     eax, [ebp+arg_0]
.text$mn:00003637                 push    eax             ; void *
.text$mn:00003638                 push    4               ; unsigned int
.text$mn:0000363A                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:0000363F                 add     esp, 8
.text$mn:00003642                 mov     [ebp+var_10], eax
.text$mn:00003645                 mov     [ebp+var_4], 0
.text$mn:0000364C                 cmp     [ebp+var_10], 0
.text$mn:00003650                 jz      short loc_366D
.text$mn:00003652                 mov     ecx, [ebp+arg_4]
.text$mn:00003655                 push    ecx
.text$mn:00003656                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:0000365B                 add     esp, 4
.text$mn:0000365E                 mov     edx, [ebp+var_10]
.text$mn:00003661                 mov     eax, [eax]
.text$mn:00003663                 mov     [edx], eax
.text$mn:00003665                 mov     ecx, [ebp+var_10]
.text$mn:00003668                 mov     [ebp+var_14], ecx
.text$mn:0000366B                 jmp     short loc_3674
.text$mn:0000366D ; ---------------------------------------------------------------------------
.text$mn:0000366D
.text$mn:0000366D loc_366D:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+44j
.text$mn:0000366D                 mov     [ebp+var_14], 0
.text$mn:00003674
.text$mn:00003674 loc_3674:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5Fj
.text$mn:00003674                 mov     edx, [ebp+var_14]
.text$mn:00003677                 mov     [ebp+var_1C], edx
.text$mn:0000367A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003681                 mov     ecx, [ebp+var_C]
.text$mn:00003684                 mov     large fs:0, ecx
.text$mn:0000368B                 pop     ecx
.text$mn:0000368C                 mov     esp, ebp
.text$mn:0000368E                 pop     ebp
.text$mn:0000368F                 retn    8
.text$mn:0000368F ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:0000368F
.text$mn:0000368F ; ---------------------------------------------------------------------------
.text$mn:00003692                 align 4
.text$mn:00003692 _text$mn        ends
.text$mn:00003692
.text$x:00003694 ; ===========================================================================
.text$x:00003694
.text$x:00003694 ; Segment type: Pure code
.text$x:00003694 ; Segment permissions: Read/Execute
.text$x:00003694 _text$x         segment para public 'CODE' use32
.text$x:00003694                 assume cs:_text$x
.text$x:00003694                 ;org 3694h
.text$x:00003694 ; COMDAT (pick associative to section at 360C)
.text$x:00003694                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:00003694
.text$x:00003694 ; =============== S U B R O U T I N E =======================================
.text$x:00003694
.text$x:00003694
.text$x:00003694 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 proc near
.text$x:00003694                                         ; DATA XREF: .xdata$x:00006F20o
.text$x:00003694                 mov     eax, [ebp+8]
.text$x:00003697                 push    eax
.text$x:00003698                 mov     eax, [ebp-10h]
.text$x:0000369B                 push    eax             ; void *
.text$x:0000369C                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:000036A1                 add     esp, 8
.text$x:000036A4                 retn
.text$x:000036A4 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 endp
.text$x:000036A4
.text$x:000036A5
.text$x:000036A5 ; =============== S U B R O U T I N E =======================================
.text$x:000036A5
.text$x:000036A5
.text$x:000036A5 __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$x:000036A5                                         ; DATA XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5o
.text$x:000036A5
.text$x:000036A5 arg_4           = dword ptr  8
.text$x:000036A5
.text$x:000036A5                 mov     edx, [esp+arg_4]
.text$x:000036A9                 lea     eax, [edx+0Ch]
.text$x:000036AC                 mov     ecx, [edx-14h]
.text$x:000036AF                 xor     ecx, eax
.text$x:000036B1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000036B6                 mov     eax, offset __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$x:000036BB                 jmp     ___CxxFrameHandler3
.text$x:000036BB __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$x:000036BB
.text$x:000036BB _text$x         ends
.text$x:000036BB
.text$mn:000036C0 ; ===========================================================================
.text$mn:000036C0
.text$mn:000036C0 ; Segment type: Pure code
.text$mn:000036C0 ; Segment permissions: Read/Execute
.text$mn:000036C0 _text$mn        segment para public 'CODE' use32
.text$mn:000036C0                 assume cs:_text$mn
.text$mn:000036C0                 ;org 36C0h
.text$mn:000036C0 ; COMDAT (pick any)
.text$mn:000036C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000036C0
.text$mn:000036C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000036C0
.text$mn:000036C0 ; Attributes: bp-based frame
.text$mn:000036C0
.text$mn:000036C0 ; int __cdecl std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(int, void *, int)
.text$mn:000036C0                 public ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z
.text$mn:000036C0 ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z proc near
.text$mn:000036C0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+1Cp
.text$mn:000036C0
.text$mn:000036C0 arg_0           = dword ptr  8
.text$mn:000036C0 arg_4           = dword ptr  0Ch
.text$mn:000036C0 arg_8           = dword ptr  10h
.text$mn:000036C0
.text$mn:000036C0                 push    ebp
.text$mn:000036C1                 mov     ebp, esp
.text$mn:000036C3                 mov     eax, [ebp+arg_8]
.text$mn:000036C6                 push    eax
.text$mn:000036C7                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:000036CC                 add     esp, 4
.text$mn:000036CF                 push    eax             ; int
.text$mn:000036D0                 mov     ecx, [ebp+arg_4]
.text$mn:000036D3                 push    ecx             ; void *
.text$mn:000036D4                 mov     ecx, [ebp+arg_0]
.text$mn:000036D7                 call    ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:000036DC                 pop     ebp
.text$mn:000036DD                 retn
.text$mn:000036DD ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z endp
.text$mn:000036DD
.text$mn:000036DD ; ---------------------------------------------------------------------------
.text$mn:000036DE                 align 10h
.text$mn:000036DE _text$mn        ends
.text$mn:000036DE
.text$mn:000036E0 ; ===========================================================================
.text$mn:000036E0
.text$mn:000036E0 ; Segment type: Pure code
.text$mn:000036E0 ; Segment permissions: Read/Execute
.text$mn:000036E0 _text$mn        segment para public 'CODE' use32
.text$mn:000036E0                 assume cs:_text$mn
.text$mn:000036E0                 ;org 36E0h
.text$mn:000036E0 ; COMDAT (pick any)
.text$mn:000036E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000036E0
.text$mn:000036E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000036E0
.text$mn:000036E0 ; Attributes: bp-based frame
.text$mn:000036E0
.text$mn:000036E0 ; int __stdcall std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:000036E0                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:000036E0 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:000036E0                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+32p
.text$mn:000036E0                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+32p
.text$mn:000036E0
.text$mn:000036E0 var_1C          = dword ptr -1Ch
.text$mn:000036E0 var_18          = dword ptr -18h
.text$mn:000036E0 var_14          = dword ptr -14h
.text$mn:000036E0 var_10          = dword ptr -10h
.text$mn:000036E0 var_C           = dword ptr -0Ch
.text$mn:000036E0 var_4           = dword ptr -4
.text$mn:000036E0 arg_0           = dword ptr  8
.text$mn:000036E0 arg_4           = dword ptr  0Ch
.text$mn:000036E0
.text$mn:000036E0                 push    ebp
.text$mn:000036E1                 mov     ebp, esp
.text$mn:000036E3                 push    0FFFFFFFFh
.text$mn:000036E5                 push    offset __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:000036EA                 mov     eax, large fs:0
.text$mn:000036F0                 push    eax
.text$mn:000036F1                 sub     esp, 10h
.text$mn:000036F4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000036F9                 xor     eax, ebp
.text$mn:000036FB                 push    eax
.text$mn:000036FC                 lea     eax, [ebp+var_C]
.text$mn:000036FF                 mov     large fs:0, eax
.text$mn:00003705                 mov     [ebp+var_18], ecx
.text$mn:00003708                 mov     eax, [ebp+arg_0]
.text$mn:0000370B                 push    eax             ; void *
.text$mn:0000370C                 push    8               ; unsigned int
.text$mn:0000370E                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00003713                 add     esp, 8
.text$mn:00003716                 mov     [ebp+var_10], eax
.text$mn:00003719                 mov     [ebp+var_4], 0
.text$mn:00003720                 cmp     [ebp+var_10], 0
.text$mn:00003724                 jz      short loc_3747
.text$mn:00003726                 mov     ecx, [ebp+arg_4]
.text$mn:00003729                 push    ecx
.text$mn:0000372A                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:0000372F                 add     esp, 4
.text$mn:00003732                 mov     edx, [eax]
.text$mn:00003734                 mov     eax, [eax+4]
.text$mn:00003737                 mov     ecx, [ebp+var_10]
.text$mn:0000373A                 mov     [ecx], edx
.text$mn:0000373C                 mov     [ecx+4], eax
.text$mn:0000373F                 mov     edx, [ebp+var_10]
.text$mn:00003742                 mov     [ebp+var_14], edx
.text$mn:00003745                 jmp     short loc_374E
.text$mn:00003747 ; ---------------------------------------------------------------------------
.text$mn:00003747
.text$mn:00003747 loc_3747:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+44j
.text$mn:00003747                 mov     [ebp+var_14], 0
.text$mn:0000374E
.text$mn:0000374E loc_374E:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+65j
.text$mn:0000374E                 mov     eax, [ebp+var_14]
.text$mn:00003751                 mov     [ebp+var_1C], eax
.text$mn:00003754                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000375B                 mov     ecx, [ebp+var_C]
.text$mn:0000375E                 mov     large fs:0, ecx
.text$mn:00003765                 pop     ecx
.text$mn:00003766                 mov     esp, ebp
.text$mn:00003768                 pop     ebp
.text$mn:00003769                 retn    8
.text$mn:00003769 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:00003769
.text$mn:00003769 _text$mn        ends
.text$mn:00003769
.text$x:0000376C ; ===========================================================================
.text$x:0000376C
.text$x:0000376C ; Segment type: Pure code
.text$x:0000376C ; Segment permissions: Read/Execute
.text$x:0000376C _text$x         segment para public 'CODE' use32
.text$x:0000376C                 assume cs:_text$x
.text$x:0000376C                 ;org 376Ch
.text$x:0000376C ; COMDAT (pick associative to section at 36E0)
.text$x:0000376C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:0000376C
.text$x:0000376C ; =============== S U B R O U T I N E =======================================
.text$x:0000376C
.text$x:0000376C
.text$x:0000376C __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
.text$x:0000376C                                         ; DATA XREF: .xdata$x:00006EC8o
.text$x:0000376C                 mov     eax, [ebp+8]
.text$x:0000376F                 push    eax
.text$x:00003770                 mov     eax, [ebp-10h]
.text$x:00003773                 push    eax             ; void *
.text$x:00003774                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00003779                 add     esp, 8
.text$x:0000377C                 retn
.text$x:0000377C __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 endp
.text$x:0000377C
.text$x:0000377D
.text$x:0000377D ; =============== S U B R O U T I N E =======================================
.text$x:0000377D
.text$x:0000377D
.text$x:0000377D __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$x:0000377D                                         ; DATA XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+5o
.text$x:0000377D
.text$x:0000377D arg_4           = dword ptr  8
.text$x:0000377D
.text$x:0000377D                 mov     edx, [esp+arg_4]
.text$x:00003781                 lea     eax, [edx+0Ch]
.text$x:00003784                 mov     ecx, [edx-14h]
.text$x:00003787                 xor     ecx, eax
.text$x:00003789                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000378E                 mov     eax, offset __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$x:00003793                 jmp     ___CxxFrameHandler3
.text$x:00003793 __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$x:00003793
.text$x:00003793 _text$x         ends
.text$x:00003793
.text$mn:00003798 ; ===========================================================================
.text$mn:00003798
.text$mn:00003798 ; Segment type: Pure code
.text$mn:00003798 ; Segment permissions: Read/Execute
.text$mn:00003798 _text$mn        segment para public 'CODE' use32
.text$mn:00003798                 assume cs:_text$mn
.text$mn:00003798                 ;org 3798h
.text$mn:00003798 ; COMDAT (pick any)
.text$mn:00003798                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003798
.text$mn:00003798 ; =============== S U B R O U T I N E =======================================
.text$mn:00003798
.text$mn:00003798 ; Attributes: bp-based frame
.text$mn:00003798
.text$mn:00003798 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<char>>::destroy<char *>(char * *)
.text$mn:00003798                 public ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
.text$mn:00003798 ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc near
.text$mn:00003798                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+3Ap
.text$mn:00003798
.text$mn:00003798 var_4           = dword ptr -4
.text$mn:00003798 arg_0           = dword ptr  8
.text$mn:00003798
.text$mn:00003798                 push    ebp
.text$mn:00003799                 mov     ebp, esp
.text$mn:0000379B                 push    ecx
.text$mn:0000379C                 mov     [ebp+var_4], ecx
.text$mn:0000379F                 mov     eax, [ebp+arg_0]
.text$mn:000037A2                 push    eax
.text$mn:000037A3                 mov     ecx, [ebp+var_4]
.text$mn:000037A6                 push    ecx
.text$mn:000037A7                 call    ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)
.text$mn:000037AC                 add     esp, 8
.text$mn:000037AF                 mov     esp, ebp
.text$mn:000037B1                 pop     ebp
.text$mn:000037B2                 retn    4
.text$mn:000037B2 ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z endp
.text$mn:000037B2
.text$mn:000037B2 ; ---------------------------------------------------------------------------
.text$mn:000037B5                 align 4
.text$mn:000037B5 _text$mn        ends
.text$mn:000037B5
.text$mn:000037B8 ; ===========================================================================
.text$mn:000037B8
.text$mn:000037B8 ; Segment type: Pure code
.text$mn:000037B8 ; Segment permissions: Read/Execute
.text$mn:000037B8 _text$mn        segment para public 'CODE' use32
.text$mn:000037B8                 assume cs:_text$mn
.text$mn:000037B8                 ;org 37B8h
.text$mn:000037B8 ; COMDAT (pick any)
.text$mn:000037B8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000037B8
.text$mn:000037B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000037B8
.text$mn:000037B8 ; Attributes: bp-based frame
.text$mn:000037B8
.text$mn:000037B8 ; public: void __thiscall std::allocator<char>::destroy<char *>(char * *)
.text$mn:000037B8                 public ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
.text$mn:000037B8 ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
.text$mn:000037B8                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)+Ap
.text$mn:000037B8
.text$mn:000037B8 var_4           = dword ptr -4
.text$mn:000037B8
.text$mn:000037B8                 push    ebp
.text$mn:000037B9                 mov     ebp, esp
.text$mn:000037BB                 push    ecx
.text$mn:000037BC                 mov     [ebp+var_4], ecx
.text$mn:000037BF                 mov     esp, ebp
.text$mn:000037C1                 pop     ebp
.text$mn:000037C2                 retn    4
.text$mn:000037C2 ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z endp
.text$mn:000037C2
.text$mn:000037C2 ; ---------------------------------------------------------------------------
.text$mn:000037C5                 align 4
.text$mn:000037C5 _text$mn        ends
.text$mn:000037C5
.text$mn:000037C8 ; ===========================================================================
.text$mn:000037C8
.text$mn:000037C8 ; Segment type: Pure code
.text$mn:000037C8 ; Segment permissions: Read/Execute
.text$mn:000037C8 _text$mn        segment para public 'CODE' use32
.text$mn:000037C8                 assume cs:_text$mn
.text$mn:000037C8                 ;org 37C8h
.text$mn:000037C8 ; COMDAT (pick any)
.text$mn:000037C8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000037C8
.text$mn:000037C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000037C8
.text$mn:000037C8 ; Attributes: bp-based frame
.text$mn:000037C8
.text$mn:000037C8 ; public: static void __cdecl std::allocator_traits<class std::allocator<char>>::destroy<char *>(class std::allocator<char> &, char * *)
.text$mn:000037C8                 public ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
.text$mn:000037C8 ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
.text$mn:000037C8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)+Fp
.text$mn:000037C8
.text$mn:000037C8 arg_0           = dword ptr  8
.text$mn:000037C8 arg_4           = dword ptr  0Ch
.text$mn:000037C8
.text$mn:000037C8                 push    ebp
.text$mn:000037C9                 mov     ebp, esp
.text$mn:000037CB                 mov     eax, [ebp+arg_4]
.text$mn:000037CE                 push    eax
.text$mn:000037CF                 mov     ecx, [ebp+arg_0]
.text$mn:000037D2                 call    ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>(char * *)
.text$mn:000037D7                 pop     ebp
.text$mn:000037D8                 retn
.text$mn:000037D8 ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z endp
.text$mn:000037D8
.text$mn:000037D8 ; ---------------------------------------------------------------------------
.text$mn:000037D9                 align 4
.text$mn:000037D9 _text$mn        ends
.text$mn:000037D9
.text$mn:000037DC ; ===========================================================================
.text$mn:000037DC
.text$mn:000037DC ; Segment type: Pure code
.text$mn:000037DC ; Segment permissions: Read/Execute
.text$mn:000037DC _text$mn        segment para public 'CODE' use32
.text$mn:000037DC                 assume cs:_text$mn
.text$mn:000037DC                 ;org 37DCh
.text$mn:000037DC ; COMDAT (pick any)
.text$mn:000037DC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000037DC
.text$mn:000037DC ; =============== S U B R O U T I N E =======================================
.text$mn:000037DC
.text$mn:000037DC ; Attributes: bp-based frame
.text$mn:000037DC
.text$mn:000037DC ; public: void __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:000037DC                 public ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z
.text$mn:000037DC ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z proc near
.text$mn:000037DC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+3Ap
.text$mn:000037DC
.text$mn:000037DC var_4           = dword ptr -4
.text$mn:000037DC arg_0           = dword ptr  8
.text$mn:000037DC
.text$mn:000037DC                 push    ebp
.text$mn:000037DD                 mov     ebp, esp
.text$mn:000037DF                 push    ecx
.text$mn:000037E0                 mov     [ebp+var_4], ecx
.text$mn:000037E3                 mov     eax, [ebp+arg_0]
.text$mn:000037E6                 push    eax
.text$mn:000037E7                 mov     ecx, [ebp+var_4]
.text$mn:000037EA                 push    ecx
.text$mn:000037EB                 call    ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)
.text$mn:000037F0                 add     esp, 8
.text$mn:000037F3                 mov     esp, ebp
.text$mn:000037F5                 pop     ebp
.text$mn:000037F6                 retn    4
.text$mn:000037F6 ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z endp
.text$mn:000037F6
.text$mn:000037F6 ; ---------------------------------------------------------------------------
.text$mn:000037F9                 align 4
.text$mn:000037F9 _text$mn        ends
.text$mn:000037F9
.text$mn:000037FC ; ===========================================================================
.text$mn:000037FC
.text$mn:000037FC ; Segment type: Pure code
.text$mn:000037FC ; Segment permissions: Read/Execute
.text$mn:000037FC _text$mn        segment para public 'CODE' use32
.text$mn:000037FC                 assume cs:_text$mn
.text$mn:000037FC                 ;org 37FCh
.text$mn:000037FC ; COMDAT (pick any)
.text$mn:000037FC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000037FC
.text$mn:000037FC ; =============== S U B R O U T I N E =======================================
.text$mn:000037FC
.text$mn:000037FC ; Attributes: bp-based frame
.text$mn:000037FC
.text$mn:000037FC ; public: void __thiscall std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:000037FC                 public ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z
.text$mn:000037FC ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z proc near
.text$mn:000037FC                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)+Ap
.text$mn:000037FC
.text$mn:000037FC var_4           = dword ptr -4
.text$mn:000037FC
.text$mn:000037FC                 push    ebp
.text$mn:000037FD                 mov     ebp, esp
.text$mn:000037FF                 push    ecx
.text$mn:00003800                 mov     [ebp+var_4], ecx
.text$mn:00003803                 mov     esp, ebp
.text$mn:00003805                 pop     ebp
.text$mn:00003806                 retn    4
.text$mn:00003806 ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z endp
.text$mn:00003806
.text$mn:00003806 ; ---------------------------------------------------------------------------
.text$mn:00003809                 align 4
.text$mn:00003809 _text$mn        ends
.text$mn:00003809
.text$mn:0000380C ; ===========================================================================
.text$mn:0000380C
.text$mn:0000380C ; Segment type: Pure code
.text$mn:0000380C ; Segment permissions: Read/Execute
.text$mn:0000380C _text$mn        segment para public 'CODE' use32
.text$mn:0000380C                 assume cs:_text$mn
.text$mn:0000380C                 ;org 380Ch
.text$mn:0000380C ; COMDAT (pick any)
.text$mn:0000380C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:0000380C
.text$mn:0000380C ; =============== S U B R O U T I N E =======================================
.text$mn:0000380C
.text$mn:0000380C ; Attributes: bp-based frame
.text$mn:0000380C
.text$mn:0000380C ; public: static void __cdecl std::allocator_traits<class std::allocator<wchar_t>>::destroy<wchar_t *>(class std::allocator<wchar_t> &, wchar_t * *)
.text$mn:0000380C                 public ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z
.text$mn:0000380C ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z proc near
.text$mn:0000380C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)+Fp
.text$mn:0000380C
.text$mn:0000380C arg_0           = dword ptr  8
.text$mn:0000380C arg_4           = dword ptr  0Ch
.text$mn:0000380C
.text$mn:0000380C                 push    ebp
.text$mn:0000380D                 mov     ebp, esp
.text$mn:0000380F                 mov     eax, [ebp+arg_4]
.text$mn:00003812                 push    eax
.text$mn:00003813                 mov     ecx, [ebp+arg_0]
.text$mn:00003816                 call    ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:0000381B                 pop     ebp
.text$mn:0000381C                 retn
.text$mn:0000381C ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z endp
.text$mn:0000381C
.text$mn:0000381C ; ---------------------------------------------------------------------------
.text$mn:0000381D                 align 10h
.text$mn:0000381D _text$mn        ends
.text$mn:0000381D
.text$mn:00003820 ; ===========================================================================
.text$mn:00003820
.text$mn:00003820 ; Segment type: Pure code
.text$mn:00003820 ; Segment permissions: Read/Execute
.text$mn:00003820 _text$mn        segment para public 'CODE' use32
.text$mn:00003820                 assume cs:_text$mn
.text$mn:00003820                 ;org 3820h
.text$mn:00003820 ; COMDAT (pick any)
.text$mn:00003820                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003820
.text$mn:00003820 ; =============== S U B R O U T I N E =======================================
.text$mn:00003820
.text$mn:00003820 ; Attributes: bp-based frame
.text$mn:00003820
.text$mn:00003820 ; public: void __thiscall std::allocator<struct std::_Container_proxy>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:00003820                 public ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:00003820 ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:00003820                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+22p
.text$mn:00003820                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)+22p
.text$mn:00003820
.text$mn:00003820 var_4           = dword ptr -4
.text$mn:00003820
.text$mn:00003820                 push    ebp
.text$mn:00003821                 mov     ebp, esp
.text$mn:00003823                 push    ecx
.text$mn:00003824                 mov     [ebp+var_4], ecx
.text$mn:00003827                 mov     esp, ebp
.text$mn:00003829                 pop     ebp
.text$mn:0000382A                 retn    4
.text$mn:0000382A ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:0000382A
.text$mn:0000382A ; ---------------------------------------------------------------------------
.text$mn:0000382D                 align 10h
.text$mn:0000382D _text$mn        ends
.text$mn:0000382D
.text$mn:00003830 ; ===========================================================================
.text$mn:00003830
.text$mn:00003830 ; Segment type: Pure code
.text$mn:00003830 ; Segment permissions: Read/Execute
.text$mn:00003830 _text$mn        segment para public 'CODE' use32
.text$mn:00003830                 assume cs:_text$mn
.text$mn:00003830                 ;org 3830h
.text$mn:00003830 ; COMDAT (pick any)
.text$mn:00003830                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003830
.text$mn:00003830 ; =============== S U B R O U T I N E =======================================
.text$mn:00003830
.text$mn:00003830 ; Attributes: bp-based frame
.text$mn:00003830
.text$mn:00003830 ; char * & __cdecl std::forward<char * &>(char * &)
.text$mn:00003830                 public ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
.text$mn:00003830 ??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
.text$mn:00003830                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+Bp
.text$mn:00003830                                         ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)+4Ap ...
.text$mn:00003830
.text$mn:00003830 arg_0           = dword ptr  8
.text$mn:00003830
.text$mn:00003830                 push    ebp
.text$mn:00003831                 mov     ebp, esp
.text$mn:00003833                 mov     eax, [ebp+arg_0]
.text$mn:00003836                 pop     ebp
.text$mn:00003837                 retn
.text$mn:00003837 ??$forward@AAPAD@std@@YAAAPADAAPAD@Z endp
.text$mn:00003837
.text$mn:00003837 _text$mn        ends
.text$mn:00003837
.text$mn:00003838 ; ===========================================================================
.text$mn:00003838
.text$mn:00003838 ; Segment type: Pure code
.text$mn:00003838 ; Segment permissions: Read/Execute
.text$mn:00003838 _text$mn        segment para public 'CODE' use32
.text$mn:00003838                 assume cs:_text$mn
.text$mn:00003838                 ;org 3838h
.text$mn:00003838 ; COMDAT (pick any)
.text$mn:00003838                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003838
.text$mn:00003838 ; =============== S U B R O U T I N E =======================================
.text$mn:00003838
.text$mn:00003838 ; Attributes: bp-based frame
.text$mn:00003838
.text$mn:00003838 ; wchar_t * & __cdecl std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00003838                 public ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z
.text$mn:00003838 ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z proc near
.text$mn:00003838                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+Bp
.text$mn:00003838                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+4Ap ...
.text$mn:00003838
.text$mn:00003838 arg_0           = dword ptr  8
.text$mn:00003838
.text$mn:00003838                 push    ebp
.text$mn:00003839                 mov     ebp, esp
.text$mn:0000383B                 mov     eax, [ebp+arg_0]
.text$mn:0000383E                 pop     ebp
.text$mn:0000383F                 retn
.text$mn:0000383F ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z endp
.text$mn:0000383F
.text$mn:0000383F _text$mn        ends
.text$mn:0000383F
.text$mn:00003840 ; ===========================================================================
.text$mn:00003840
.text$mn:00003840 ; Segment type: Pure code
.text$mn:00003840 ; Segment permissions: Read/Execute
.text$mn:00003840 _text$mn        segment para public 'CODE' use32
.text$mn:00003840                 assume cs:_text$mn
.text$mn:00003840                 ;org 3840h
.text$mn:00003840 ; COMDAT (pick any)
.text$mn:00003840                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003840
.text$mn:00003840 ; =============== S U B R O U T I N E =======================================
.text$mn:00003840
.text$mn:00003840 ; Attributes: bp-based frame
.text$mn:00003840
.text$mn:00003840 ; struct std::_Container_proxy && __cdecl std::forward<struct std::_Container_proxy>(struct std::_Container_proxy &)
.text$mn:00003840                 public ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
.text$mn:00003840 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc near
.text$mn:00003840                                         ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+4Ap
.text$mn:00003840
.text$mn:00003840 arg_0           = dword ptr  8
.text$mn:00003840
.text$mn:00003840                 push    ebp
.text$mn:00003841                 mov     ebp, esp
.text$mn:00003843                 mov     eax, [ebp+arg_0]
.text$mn:00003846                 pop     ebp
.text$mn:00003847                 retn
.text$mn:00003847 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z endp
.text$mn:00003847
.text$mn:00003847 _text$mn        ends
.text$mn:00003847
.text$mn:00003848 ; ===========================================================================
.text$mn:00003848
.text$mn:00003848 ; Segment type: Pure code
.text$mn:00003848 ; Segment permissions: Read/Execute
.text$mn:00003848 _text$mn        segment para public 'CODE' use32
.text$mn:00003848                 assume cs:_text$mn
.text$mn:00003848                 ;org 3848h
.text$mn:00003848 ; COMDAT (pick any)
.text$mn:00003848                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003848
.text$mn:00003848 ; =============== S U B R O U T I N E =======================================
.text$mn:00003848
.text$mn:00003848 ; Attributes: bp-based frame
.text$mn:00003848
.text$mn:00003848 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(class std::allocator<char> const &)
.text$mn:00003848                 public ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:00003848 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$mn:00003848                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+34p
.text$mn:00003848
.text$mn:00003848 var_10          = dword ptr -10h
.text$mn:00003848 var_C           = dword ptr -0Ch
.text$mn:00003848 var_4           = dword ptr -4
.text$mn:00003848
.text$mn:00003848                 push    ebp
.text$mn:00003849                 mov     ebp, esp
.text$mn:0000384B                 push    0FFFFFFFFh
.text$mn:0000384D                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:00003852                 mov     eax, large fs:0
.text$mn:00003858                 push    eax
.text$mn:00003859                 push    ecx
.text$mn:0000385A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000385F                 xor     eax, ebp
.text$mn:00003861                 push    eax
.text$mn:00003862                 lea     eax, [ebp+var_C]
.text$mn:00003865                 mov     large fs:0, eax
.text$mn:0000386B                 mov     [ebp+var_10], ecx
.text$mn:0000386E                 mov     ecx, [ebp+var_10]
.text$mn:00003871                 call    ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)
.text$mn:00003876                 mov     [ebp+var_4], 0
.text$mn:0000387D                 mov     ecx, [ebp+var_10]
.text$mn:00003880                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:00003885                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000388C                 mov     eax, [ebp+var_10]
.text$mn:0000388F                 mov     ecx, [ebp+var_C]
.text$mn:00003892                 mov     large fs:0, ecx
.text$mn:00003899                 pop     ecx
.text$mn:0000389A                 mov     esp, ebp
.text$mn:0000389C                 pop     ebp
.text$mn:0000389D                 retn    4
.text$mn:0000389D ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$mn:0000389D
.text$mn:0000389D _text$mn        ends
.text$mn:0000389D
.text$x:000038A0 ; ===========================================================================
.text$x:000038A0
.text$x:000038A0 ; Segment type: Pure code
.text$x:000038A0 ; Segment permissions: Read/Execute
.text$x:000038A0 _text$x         segment para public 'CODE' use32
.text$x:000038A0                 assume cs:_text$x
.text$x:000038A0                 ;org 38A0h
.text$x:000038A0 ; COMDAT (pick associative to section at 3848)
.text$x:000038A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:000038A0
.text$x:000038A0 ; =============== S U B R O U T I N E =======================================
.text$x:000038A0
.text$x:000038A0
.text$x:000038A0 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
.text$x:000038A0                                         ; DATA XREF: .xdata$x:00006868o
.text$x:000038A0                 mov     ecx, [ebp-10h]
.text$x:000038A3                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:000038A3 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 endp
.text$x:000038A3
.text$x:000038A8
.text$x:000038A8 ; =============== S U B R O U T I N E =======================================
.text$x:000038A8
.text$x:000038A8
.text$x:000038A8 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$x:000038A8                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+5o
.text$x:000038A8
.text$x:000038A8 arg_4           = dword ptr  8
.text$x:000038A8
.text$x:000038A8                 mov     edx, [esp+arg_4]
.text$x:000038AC                 lea     eax, [edx+0Ch]
.text$x:000038AF                 mov     ecx, [edx-8]
.text$x:000038B2                 xor     ecx, eax
.text$x:000038B4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000038B9                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$x:000038BE                 jmp     ___CxxFrameHandler3
.text$x:000038BE __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$x:000038BE
.text$x:000038BE ; ---------------------------------------------------------------------------
.text$x:000038C3                 align 4
.text$x:000038C3 _text$x         ends
.text$x:000038C3
.text$mn:000038C4 ; ===========================================================================
.text$mn:000038C4
.text$mn:000038C4 ; Segment type: Pure code
.text$mn:000038C4 ; Segment permissions: Read/Execute
.text$mn:000038C4 _text$mn        segment para public 'CODE' use32
.text$mn:000038C4                 assume cs:_text$mn
.text$mn:000038C4                 ;org 38C4h
.text$mn:000038C4 ; COMDAT (pick any)
.text$mn:000038C4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000038C4
.text$mn:000038C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000038C4
.text$mn:000038C4 ; Attributes: bp-based frame
.text$mn:000038C4
.text$mn:000038C4 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(class std::allocator<wchar_t> const &)
.text$mn:000038C4                 public ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:000038C4 ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:000038C4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+43p
.text$mn:000038C4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+34p
.text$mn:000038C4
.text$mn:000038C4 var_10          = dword ptr -10h
.text$mn:000038C4 var_C           = dword ptr -0Ch
.text$mn:000038C4 var_4           = dword ptr -4
.text$mn:000038C4
.text$mn:000038C4                 push    ebp
.text$mn:000038C5                 mov     ebp, esp
.text$mn:000038C7                 push    0FFFFFFFFh
.text$mn:000038C9                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:000038CE                 mov     eax, large fs:0
.text$mn:000038D4                 push    eax
.text$mn:000038D5                 push    ecx
.text$mn:000038D6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000038DB                 xor     eax, ebp
.text$mn:000038DD                 push    eax
.text$mn:000038DE                 lea     eax, [ebp+var_C]
.text$mn:000038E1                 mov     large fs:0, eax
.text$mn:000038E7                 mov     [ebp+var_10], ecx
.text$mn:000038EA                 mov     ecx, [ebp+var_10]
.text$mn:000038ED                 call    ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:000038F2                 mov     [ebp+var_4], 0
.text$mn:000038F9                 mov     ecx, [ebp+var_10]
.text$mn:000038FC                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:00003901                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003908                 mov     eax, [ebp+var_10]
.text$mn:0000390B                 mov     ecx, [ebp+var_C]
.text$mn:0000390E                 mov     large fs:0, ecx
.text$mn:00003915                 pop     ecx
.text$mn:00003916                 mov     esp, ebp
.text$mn:00003918                 pop     ebp
.text$mn:00003919                 retn    4
.text$mn:00003919 ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:00003919
.text$mn:00003919 _text$mn        ends
.text$mn:00003919
.text$x:0000391C ; ===========================================================================
.text$x:0000391C
.text$x:0000391C ; Segment type: Pure code
.text$x:0000391C ; Segment permissions: Read/Execute
.text$x:0000391C _text$x         segment para public 'CODE' use32
.text$x:0000391C                 assume cs:_text$x
.text$x:0000391C                 ;org 391Ch
.text$x:0000391C ; COMDAT (pick associative to section at 38C4)
.text$x:0000391C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:0000391C
.text$x:0000391C ; =============== S U B R O U T I N E =======================================
.text$x:0000391C
.text$x:0000391C
.text$x:0000391C __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 proc near
.text$x:0000391C                                         ; DATA XREF: .xdata$x:00006B88o
.text$x:0000391C                 mov     ecx, [ebp-10h]
.text$x:0000391F                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:0000391F __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 endp
.text$x:0000391F
.text$x:00003924
.text$x:00003924 ; =============== S U B R O U T I N E =======================================
.text$x:00003924
.text$x:00003924
.text$x:00003924 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$x:00003924                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+5o
.text$x:00003924
.text$x:00003924 arg_4           = dword ptr  8
.text$x:00003924
.text$x:00003924                 mov     edx, [esp+arg_4]
.text$x:00003928                 lea     eax, [edx+0Ch]
.text$x:0000392B                 mov     ecx, [edx-8]
.text$x:0000392E                 xor     ecx, eax
.text$x:00003930                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003935                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$x:0000393A                 jmp     ___CxxFrameHandler3
.text$x:0000393A __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$x:0000393A
.text$x:0000393A ; ---------------------------------------------------------------------------
.text$x:0000393F                 align 10h
.text$x:0000393F _text$x         ends
.text$x:0000393F
.text$mn:00003940 ; ===========================================================================
.text$mn:00003940
.text$mn:00003940 ; Segment type: Pure code
.text$mn:00003940 ; Segment permissions: Read/Execute
.text$mn:00003940 _text$mn        segment para public 'CODE' use32
.text$mn:00003940                 assume cs:_text$mn
.text$mn:00003940                 ;org 3940h
.text$mn:00003940 ; COMDAT (pick any)
.text$mn:00003940                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003940
.text$mn:00003940 ; =============== S U B R O U T I N E =======================================
.text$mn:00003940
.text$mn:00003940 ; Attributes: bp-based frame
.text$mn:00003940
.text$mn:00003940 ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::_String_val<struct std::_Simple_types<char>>(void)
.text$mn:00003940                 public ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00003940 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:00003940                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+29p
.text$mn:00003940
.text$mn:00003940 var_10          = dword ptr -10h
.text$mn:00003940 var_C           = dword ptr -0Ch
.text$mn:00003940 var_4           = dword ptr -4
.text$mn:00003940
.text$mn:00003940                 push    ebp
.text$mn:00003941                 mov     ebp, esp
.text$mn:00003943                 push    0FFFFFFFFh
.text$mn:00003945                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:0000394A                 mov     eax, large fs:0
.text$mn:00003950                 push    eax
.text$mn:00003951                 push    ecx
.text$mn:00003952                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003957                 xor     eax, ebp
.text$mn:00003959                 push    eax
.text$mn:0000395A                 lea     eax, [ebp+var_C]
.text$mn:0000395D                 mov     large fs:0, eax
.text$mn:00003963                 mov     [ebp+var_10], ecx
.text$mn:00003966                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003969                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:0000396E                 mov     [ebp+var_4], 0
.text$mn:00003975                 mov     eax, [ebp+var_10]
.text$mn:00003978                 mov     dword ptr [eax+14h], 0
.text$mn:0000397F                 mov     ecx, [ebp+var_10]
.text$mn:00003982                 mov     dword ptr [ecx+18h], 0
.text$mn:00003989                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003990                 mov     eax, [ebp+var_10]
.text$mn:00003993                 mov     ecx, [ebp+var_C]
.text$mn:00003996                 mov     large fs:0, ecx
.text$mn:0000399D                 pop     ecx
.text$mn:0000399E                 mov     esp, ebp
.text$mn:000039A0                 pop     ebp
.text$mn:000039A1                 retn
.text$mn:000039A1 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:000039A1
.text$mn:000039A1 ; ---------------------------------------------------------------------------
.text$mn:000039A2                 align 4
.text$mn:000039A2 _text$mn        ends
.text$mn:000039A2
.text$x:000039A4 ; ===========================================================================
.text$x:000039A4
.text$x:000039A4 ; Segment type: Pure code
.text$x:000039A4 ; Segment permissions: Read/Execute
.text$x:000039A4 _text$x         segment para public 'CODE' use32
.text$x:000039A4                 assume cs:_text$x
.text$x:000039A4                 ;org 39A4h
.text$x:000039A4 ; COMDAT (pick associative to section at 3940)
.text$x:000039A4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:000039A4
.text$x:000039A4 ; =============== S U B R O U T I N E =======================================
.text$x:000039A4
.text$x:000039A4
.text$x:000039A4 __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:000039A4                                         ; DATA XREF: .xdata$x:00006810o
.text$x:000039A4                 mov     ecx, [ebp-10h]  ; this
.text$x:000039A7                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:000039A7 __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:000039A7
.text$x:000039AC
.text$x:000039AC ; =============== S U B R O U T I N E =======================================
.text$x:000039AC
.text$x:000039AC
.text$x:000039AC __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:000039AC                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+5o
.text$x:000039AC
.text$x:000039AC arg_4           = dword ptr  8
.text$x:000039AC
.text$x:000039AC                 mov     edx, [esp+arg_4]
.text$x:000039B0                 lea     eax, [edx+0Ch]
.text$x:000039B3                 mov     ecx, [edx-8]
.text$x:000039B6                 xor     ecx, eax
.text$x:000039B8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000039BD                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:000039C2                 jmp     ___CxxFrameHandler3
.text$x:000039C2 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:000039C2
.text$x:000039C2 ; ---------------------------------------------------------------------------
.text$x:000039C7                 align 4
.text$x:000039C7 _text$x         ends
.text$x:000039C7
.text$mn:000039C8 ; ===========================================================================
.text$mn:000039C8
.text$mn:000039C8 ; Segment type: Pure code
.text$mn:000039C8 ; Segment permissions: Read/Execute
.text$mn:000039C8 _text$mn        segment para public 'CODE' use32
.text$mn:000039C8                 assume cs:_text$mn
.text$mn:000039C8                 ;org 39C8h
.text$mn:000039C8 ; COMDAT (pick any)
.text$mn:000039C8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000039C8
.text$mn:000039C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000039C8
.text$mn:000039C8 ; Attributes: bp-based frame
.text$mn:000039C8
.text$mn:000039C8 ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:000039C8                 public ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000039C8 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:000039C8                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+29p
.text$mn:000039C8
.text$mn:000039C8 var_10          = dword ptr -10h
.text$mn:000039C8 var_C           = dword ptr -0Ch
.text$mn:000039C8 var_4           = dword ptr -4
.text$mn:000039C8
.text$mn:000039C8                 push    ebp
.text$mn:000039C9                 mov     ebp, esp
.text$mn:000039CB                 push    0FFFFFFFFh
.text$mn:000039CD                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000039D2                 mov     eax, large fs:0
.text$mn:000039D8                 push    eax
.text$mn:000039D9                 push    ecx
.text$mn:000039DA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000039DF                 xor     eax, ebp
.text$mn:000039E1                 push    eax
.text$mn:000039E2                 lea     eax, [ebp+var_C]
.text$mn:000039E5                 mov     large fs:0, eax
.text$mn:000039EB                 mov     [ebp+var_10], ecx
.text$mn:000039EE                 mov     ecx, [ebp+var_10] ; this
.text$mn:000039F1                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:000039F6                 mov     [ebp+var_4], 0
.text$mn:000039FD                 mov     eax, [ebp+var_10]
.text$mn:00003A00                 mov     dword ptr [eax+14h], 0
.text$mn:00003A07                 mov     ecx, [ebp+var_10]
.text$mn:00003A0A                 mov     dword ptr [ecx+18h], 0
.text$mn:00003A11                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003A18                 mov     eax, [ebp+var_10]
.text$mn:00003A1B                 mov     ecx, [ebp+var_C]
.text$mn:00003A1E                 mov     large fs:0, ecx
.text$mn:00003A25                 pop     ecx
.text$mn:00003A26                 mov     esp, ebp
.text$mn:00003A28                 pop     ebp
.text$mn:00003A29                 retn
.text$mn:00003A29 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:00003A29
.text$mn:00003A29 ; ---------------------------------------------------------------------------
.text$mn:00003A2A                 align 4
.text$mn:00003A2A _text$mn        ends
.text$mn:00003A2A
.text$x:00003A2C ; ===========================================================================
.text$x:00003A2C
.text$x:00003A2C ; Segment type: Pure code
.text$x:00003A2C ; Segment permissions: Read/Execute
.text$x:00003A2C _text$x         segment para public 'CODE' use32
.text$x:00003A2C                 assume cs:_text$x
.text$x:00003A2C                 ;org 3A2Ch
.text$x:00003A2C ; COMDAT (pick associative to section at 39C8)
.text$x:00003A2C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:00003A2C
.text$x:00003A2C ; =============== S U B R O U T I N E =======================================
.text$x:00003A2C
.text$x:00003A2C
.text$x:00003A2C __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00003A2C                                         ; DATA XREF: .xdata$x:00006B30o
.text$x:00003A2C                 mov     ecx, [ebp-10h]  ; this
.text$x:00003A2F                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00003A2F __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:00003A2F
.text$x:00003A34
.text$x:00003A34 ; =============== S U B R O U T I N E =======================================
.text$x:00003A34
.text$x:00003A34
.text$x:00003A34 __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:00003A34                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:00003A34
.text$x:00003A34 arg_4           = dword ptr  8
.text$x:00003A34
.text$x:00003A34                 mov     edx, [esp+arg_4]
.text$x:00003A38                 lea     eax, [edx+0Ch]
.text$x:00003A3B                 mov     ecx, [edx-8]
.text$x:00003A3E                 xor     ecx, eax
.text$x:00003A40                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003A45                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:00003A4A                 jmp     ___CxxFrameHandler3
.text$x:00003A4A __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:00003A4A
.text$x:00003A4A ; ---------------------------------------------------------------------------
.text$x:00003A4F                 align 10h
.text$x:00003A4F _text$x         ends
.text$x:00003A4F
.text$mn:00003A50 ; ===========================================================================
.text$mn:00003A50
.text$mn:00003A50 ; Segment type: Pure code
.text$mn:00003A50 ; Segment permissions: Read/Execute
.text$mn:00003A50 _text$mn        segment para public 'CODE' use32
.text$mn:00003A50                 assume cs:_text$mn
.text$mn:00003A50                 ;org 3A50h
.text$mn:00003A50 ; COMDAT (pick any)
.text$mn:00003A50                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003A50
.text$mn:00003A50 ; =============== S U B R O U T I N E =======================================
.text$mn:00003A50
.text$mn:00003A50 ; Attributes: bp-based frame
.text$mn:00003A50
.text$mn:00003A50 ; public: __thiscall std::_Wrap_alloc<class std::allocator<char>>::_Wrap_alloc<class std::allocator<char>>(void)
.text$mn:00003A50                 public ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
.text$mn:00003A50 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
.text$mn:00003A50                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)+Ap
.text$mn:00003A50
.text$mn:00003A50 var_4           = dword ptr -4
.text$mn:00003A50
.text$mn:00003A50                 push    ebp
.text$mn:00003A51                 mov     ebp, esp
.text$mn:00003A53                 push    ecx
.text$mn:00003A54                 mov     [ebp+var_4], ecx
.text$mn:00003A57                 mov     ecx, [ebp+var_4]
.text$mn:00003A5A                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:00003A5F                 mov     eax, [ebp+var_4]
.text$mn:00003A62                 mov     esp, ebp
.text$mn:00003A64                 pop     ebp
.text$mn:00003A65                 retn
.text$mn:00003A65 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ endp
.text$mn:00003A65
.text$mn:00003A65 ; ---------------------------------------------------------------------------
.text$mn:00003A66                 align 4
.text$mn:00003A66 _text$mn        ends
.text$mn:00003A66
.text$mn:00003A68 ; ===========================================================================
.text$mn:00003A68
.text$mn:00003A68 ; Segment type: Pure code
.text$mn:00003A68 ; Segment permissions: Read/Execute
.text$mn:00003A68 _text$mn        segment para public 'CODE' use32
.text$mn:00003A68                 assume cs:_text$mn
.text$mn:00003A68                 ;org 3A68h
.text$mn:00003A68 ; COMDAT (pick any)
.text$mn:00003A68                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003A68
.text$mn:00003A68 ; =============== S U B R O U T I N E =======================================
.text$mn:00003A68
.text$mn:00003A68 ; Attributes: bp-based frame
.text$mn:00003A68
.text$mn:00003A68 ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(class std::allocator<wchar_t> const &)
.text$mn:00003A68                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:00003A68 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:00003A68                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)+1Dp
.text$mn:00003A68
.text$mn:00003A68 var_4           = dword ptr -4
.text$mn:00003A68 arg_0           = dword ptr  8
.text$mn:00003A68
.text$mn:00003A68                 push    ebp
.text$mn:00003A69                 mov     ebp, esp
.text$mn:00003A6B                 push    ecx
.text$mn:00003A6C                 mov     [ebp+var_4], ecx
.text$mn:00003A6F                 mov     eax, [ebp+arg_0]
.text$mn:00003A72                 push    eax
.text$mn:00003A73                 mov     ecx, [ebp+var_4]
.text$mn:00003A76                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:00003A7B                 mov     eax, [ebp+var_4]
.text$mn:00003A7E                 mov     esp, ebp
.text$mn:00003A80                 pop     ebp
.text$mn:00003A81                 retn    4
.text$mn:00003A81 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:00003A81
.text$mn:00003A81 _text$mn        ends
.text$mn:00003A81
.text$mn:00003A84 ; ===========================================================================
.text$mn:00003A84
.text$mn:00003A84 ; Segment type: Pure code
.text$mn:00003A84 ; Segment permissions: Read/Execute
.text$mn:00003A84 _text$mn        segment para public 'CODE' use32
.text$mn:00003A84                 assume cs:_text$mn
.text$mn:00003A84                 ;org 3A84h
.text$mn:00003A84 ; COMDAT (pick any)
.text$mn:00003A84                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003A84
.text$mn:00003A84 ; =============== S U B R O U T I N E =======================================
.text$mn:00003A84
.text$mn:00003A84 ; Attributes: bp-based frame
.text$mn:00003A84
.text$mn:00003A84 ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(void)
.text$mn:00003A84                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ
.text$mn:00003A84 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ proc near
.text$mn:00003A84                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)+Ap
.text$mn:00003A84
.text$mn:00003A84 var_4           = dword ptr -4
.text$mn:00003A84
.text$mn:00003A84                 push    ebp
.text$mn:00003A85                 mov     ebp, esp
.text$mn:00003A87                 push    ecx
.text$mn:00003A88                 mov     [ebp+var_4], ecx
.text$mn:00003A8B                 mov     ecx, [ebp+var_4]
.text$mn:00003A8E                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00003A93                 mov     eax, [ebp+var_4]
.text$mn:00003A96                 mov     esp, ebp
.text$mn:00003A98                 pop     ebp
.text$mn:00003A99                 retn
.text$mn:00003A99 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ endp
.text$mn:00003A99
.text$mn:00003A99 ; ---------------------------------------------------------------------------
.text$mn:00003A9A                 align 4
.text$mn:00003A9A _text$mn        ends
.text$mn:00003A9A
.text$mn:00003A9C ; ===========================================================================
.text$mn:00003A9C
.text$mn:00003A9C ; Segment type: Pure code
.text$mn:00003A9C ; Segment permissions: Read/Execute
.text$mn:00003A9C _text$mn        segment para public 'CODE' use32
.text$mn:00003A9C                 assume cs:_text$mn
.text$mn:00003A9C                 ;org 3A9Ch
.text$mn:00003A9C ; COMDAT (pick any)
.text$mn:00003A9C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003A9C
.text$mn:00003A9C ; =============== S U B R O U T I N E =======================================
.text$mn:00003A9C
.text$mn:00003A9C ; Attributes: bp-based frame
.text$mn:00003A9C
.text$mn:00003A9C ; public: __thiscall std::allocator<char>::allocator<char>(void)
.text$mn:00003A9C                 public ??0?$allocator@D@std@@QAE@XZ
.text$mn:00003A9C ??0?$allocator@D@std@@QAE@XZ proc near  ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)+Ap
.text$mn:00003A9C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+2Bp
.text$mn:00003A9C
.text$mn:00003A9C var_4           = dword ptr -4
.text$mn:00003A9C
.text$mn:00003A9C                 push    ebp
.text$mn:00003A9D                 mov     ebp, esp
.text$mn:00003A9F                 push    ecx
.text$mn:00003AA0                 mov     [ebp+var_4], ecx
.text$mn:00003AA3                 mov     eax, [ebp+var_4]
.text$mn:00003AA6                 mov     esp, ebp
.text$mn:00003AA8                 pop     ebp
.text$mn:00003AA9                 retn
.text$mn:00003AA9 ??0?$allocator@D@std@@QAE@XZ endp
.text$mn:00003AA9
.text$mn:00003AA9 ; ---------------------------------------------------------------------------
.text$mn:00003AAA                 align 4
.text$mn:00003AAA _text$mn        ends
.text$mn:00003AAA
.text$mn:00003AAC ; ===========================================================================
.text$mn:00003AAC
.text$mn:00003AAC ; Segment type: Pure code
.text$mn:00003AAC ; Segment permissions: Read/Execute
.text$mn:00003AAC _text$mn        segment para public 'CODE' use32
.text$mn:00003AAC                 assume cs:_text$mn
.text$mn:00003AAC                 ;org 3AACh
.text$mn:00003AAC ; COMDAT (pick any)
.text$mn:00003AAC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003AAC
.text$mn:00003AAC ; =============== S U B R O U T I N E =======================================
.text$mn:00003AAC
.text$mn:00003AAC ; Attributes: bp-based frame
.text$mn:00003AAC
.text$mn:00003AAC ; public: __thiscall std::allocator<struct std::_Container_proxy>::allocator<struct std::_Container_proxy>(void)
.text$mn:00003AAC                 public ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
.text$mn:00003AAC ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc near
.text$mn:00003AAC                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+Cp
.text$mn:00003AAC                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+Cp ...
.text$mn:00003AAC
.text$mn:00003AAC var_4           = dword ptr -4
.text$mn:00003AAC
.text$mn:00003AAC                 push    ebp
.text$mn:00003AAD                 mov     ebp, esp
.text$mn:00003AAF                 push    ecx
.text$mn:00003AB0                 mov     [ebp+var_4], ecx
.text$mn:00003AB3                 mov     eax, [ebp+var_4]
.text$mn:00003AB6                 mov     esp, ebp
.text$mn:00003AB8                 pop     ebp
.text$mn:00003AB9                 retn
.text$mn:00003AB9 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ endp
.text$mn:00003AB9
.text$mn:00003AB9 ; ---------------------------------------------------------------------------
.text$mn:00003ABA                 align 4
.text$mn:00003ABA _text$mn        ends
.text$mn:00003ABA
.text$mn:00003ABC ; ===========================================================================
.text$mn:00003ABC
.text$mn:00003ABC ; Segment type: Pure code
.text$mn:00003ABC ; Segment permissions: Read/Execute
.text$mn:00003ABC _text$mn        segment para public 'CODE' use32
.text$mn:00003ABC                 assume cs:_text$mn
.text$mn:00003ABC                 ;org 3ABCh
.text$mn:00003ABC ; COMDAT (pick any)
.text$mn:00003ABC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003ABC
.text$mn:00003ABC ; =============== S U B R O U T I N E =======================================
.text$mn:00003ABC
.text$mn:00003ABC ; Attributes: bp-based frame
.text$mn:00003ABC
.text$mn:00003ABC ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(class std::allocator<wchar_t> const &)
.text$mn:00003ABC                 public ??0?$allocator@_W@std@@QAE@ABV01@@Z
.text$mn:00003ABC ??0?$allocator@_W@std@@QAE@ABV01@@Z proc near
.text$mn:00003ABC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(std::allocator<wchar_t> const &)+Ep
.text$mn:00003ABC                                         ; std::allocator<wchar_t>::select_on_container_copy_construction(void)+Ep
.text$mn:00003ABC
.text$mn:00003ABC var_4           = dword ptr -4
.text$mn:00003ABC
.text$mn:00003ABC                 push    ebp
.text$mn:00003ABD                 mov     ebp, esp
.text$mn:00003ABF                 push    ecx
.text$mn:00003AC0                 mov     [ebp+var_4], ecx
.text$mn:00003AC3                 mov     eax, [ebp+var_4]
.text$mn:00003AC6                 mov     esp, ebp
.text$mn:00003AC8                 pop     ebp
.text$mn:00003AC9                 retn    4
.text$mn:00003AC9 ??0?$allocator@_W@std@@QAE@ABV01@@Z endp
.text$mn:00003AC9
.text$mn:00003AC9 _text$mn        ends
.text$mn:00003AC9
.text$mn:00003ACC ; ===========================================================================
.text$mn:00003ACC
.text$mn:00003ACC ; Segment type: Pure code
.text$mn:00003ACC ; Segment permissions: Read/Execute
.text$mn:00003ACC _text$mn        segment para public 'CODE' use32
.text$mn:00003ACC                 assume cs:_text$mn
.text$mn:00003ACC                 ;org 3ACCh
.text$mn:00003ACC ; COMDAT (pick any)
.text$mn:00003ACC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003ACC
.text$mn:00003ACC ; =============== S U B R O U T I N E =======================================
.text$mn:00003ACC
.text$mn:00003ACC ; Attributes: bp-based frame
.text$mn:00003ACC
.text$mn:00003ACC ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00003ACC                 public ??0?$allocator@_W@std@@QAE@XZ
.text$mn:00003ACC ??0?$allocator@_W@std@@QAE@XZ proc near ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)+Ap
.text$mn:00003ACC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+2Bp
.text$mn:00003ACC
.text$mn:00003ACC var_4           = dword ptr -4
.text$mn:00003ACC
.text$mn:00003ACC                 push    ebp
.text$mn:00003ACD                 mov     ebp, esp
.text$mn:00003ACF                 push    ecx
.text$mn:00003AD0                 mov     [ebp+var_4], ecx
.text$mn:00003AD3                 mov     eax, [ebp+var_4]
.text$mn:00003AD6                 mov     esp, ebp
.text$mn:00003AD8                 pop     ebp
.text$mn:00003AD9                 retn
.text$mn:00003AD9 ??0?$allocator@_W@std@@QAE@XZ endp
.text$mn:00003AD9
.text$mn:00003AD9 ; ---------------------------------------------------------------------------
.text$mn:00003ADA                 align 4
.text$mn:00003ADA _text$mn        ends
.text$mn:00003ADA
.text$mn:00003ADC ; ===========================================================================
.text$mn:00003ADC
.text$mn:00003ADC ; Segment type: Pure code
.text$mn:00003ADC ; Segment permissions: Read/Execute
.text$mn:00003ADC _text$mn        segment para public 'CODE' use32
.text$mn:00003ADC                 assume cs:_text$mn
.text$mn:00003ADC                 ;org 3ADCh
.text$mn:00003ADC ; COMDAT (pick any)
.text$mn:00003ADC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003ADC
.text$mn:00003ADC ; =============== S U B R O U T I N E =======================================
.text$mn:00003ADC
.text$mn:00003ADC ; Attributes: bp-based frame
.text$mn:00003ADC
.text$mn:00003ADC ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char *Str)
.text$mn:00003ADC                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:00003ADC ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$mn:00003ADC                                         ; CODE XREF: std::_Generic_error_category::message(int)+5Ap
.text$mn:00003ADC                                         ; std::_Iostream_error_category::message(int)+3Dp ...
.text$mn:00003ADC
.text$mn:00003ADC var_14          = dword ptr -14h
.text$mn:00003ADC var_D           = byte ptr -0Dh
.text$mn:00003ADC var_C           = dword ptr -0Ch
.text$mn:00003ADC var_4           = dword ptr -4
.text$mn:00003ADC Str             = dword ptr  8
.text$mn:00003ADC
.text$mn:00003ADC                 push    ebp
.text$mn:00003ADD                 mov     ebp, esp
.text$mn:00003ADF                 push    0FFFFFFFFh
.text$mn:00003AE1                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:00003AE6                 mov     eax, large fs:0
.text$mn:00003AEC                 push    eax
.text$mn:00003AED                 sub     esp, 8
.text$mn:00003AF0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003AF5                 xor     eax, ebp
.text$mn:00003AF7                 push    eax
.text$mn:00003AF8                 lea     eax, [ebp+var_C]
.text$mn:00003AFB                 mov     large fs:0, eax
.text$mn:00003B01                 mov     [ebp+var_14], ecx
.text$mn:00003B04                 lea     ecx, [ebp+var_D]
.text$mn:00003B07                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:00003B0C                 push    eax
.text$mn:00003B0D                 mov     ecx, [ebp+var_14]
.text$mn:00003B10                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:00003B15                 mov     [ebp+var_4], 0
.text$mn:00003B1C                 push    0               ; Size
.text$mn:00003B1E                 push    0               ; char
.text$mn:00003B20                 mov     ecx, [ebp+var_14]
.text$mn:00003B23                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00003B28                 mov     eax, [ebp+Str]
.text$mn:00003B2B                 push    eax             ; Str
.text$mn:00003B2C                 mov     ecx, [ebp+var_14]
.text$mn:00003B2F                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)
.text$mn:00003B34                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003B3B                 mov     eax, [ebp+var_14]
.text$mn:00003B3E                 mov     ecx, [ebp+var_C]
.text$mn:00003B41                 mov     large fs:0, ecx
.text$mn:00003B48                 pop     ecx
.text$mn:00003B49                 mov     esp, ebp
.text$mn:00003B4B                 pop     ebp
.text$mn:00003B4C                 retn    4
.text$mn:00003B4C ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$mn:00003B4C
.text$mn:00003B4C ; ---------------------------------------------------------------------------
.text$mn:00003B4F                 align 10h
.text$mn:00003B4F _text$mn        ends
.text$mn:00003B4F
.text$x:00003B50 ; ===========================================================================
.text$x:00003B50
.text$x:00003B50 ; Segment type: Pure code
.text$x:00003B50 ; Segment permissions: Read/Execute
.text$x:00003B50 _text$x         segment para public 'CODE' use32
.text$x:00003B50                 assume cs:_text$x
.text$x:00003B50                 ;org 3B50h
.text$x:00003B50 ; COMDAT (pick associative to section at 3ADC)
.text$x:00003B50                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:00003B50
.text$x:00003B50 ; =============== S U B R O U T I N E =======================================
.text$x:00003B50
.text$x:00003B50
.text$x:00003B50 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
.text$x:00003B50                                         ; DATA XREF: .xdata$x:000068C0o
.text$x:00003B50                 mov     ecx, [ebp-14h]
.text$x:00003B53                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:00003B53 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 endp
.text$x:00003B53
.text$x:00003B58
.text$x:00003B58 ; =============== S U B R O U T I N E =======================================
.text$x:00003B58
.text$x:00003B58
.text$x:00003B58 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$x:00003B58                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+5o
.text$x:00003B58
.text$x:00003B58 arg_4           = dword ptr  8
.text$x:00003B58
.text$x:00003B58                 mov     edx, [esp+arg_4]
.text$x:00003B5C                 lea     eax, [edx+0Ch]
.text$x:00003B5F                 mov     ecx, [edx-0Ch]
.text$x:00003B62                 xor     ecx, eax
.text$x:00003B64                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003B69                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$x:00003B6E                 jmp     ___CxxFrameHandler3
.text$x:00003B6E __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$x:00003B6E
.text$x:00003B6E ; ---------------------------------------------------------------------------
.text$x:00003B73                 align 4
.text$x:00003B73 _text$x         ends
.text$x:00003B73
.text$mn:00003B74 ; ===========================================================================
.text$mn:00003B74
.text$mn:00003B74 ; Segment type: Pure code
.text$mn:00003B74 ; Segment permissions: Read/Execute
.text$mn:00003B74 _text$mn        segment para public 'CODE' use32
.text$mn:00003B74                 assume cs:_text$mn
.text$mn:00003B74                 ;org 3B74h
.text$mn:00003B74 ; COMDAT (pick any)
.text$mn:00003B74                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003B74
.text$mn:00003B74 ; =============== S U B R O U T I N E =======================================
.text$mn:00003B74
.text$mn:00003B74 ; Attributes: bp-based frame
.text$mn:00003B74
.text$mn:00003B74 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00003B74                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$mn:00003B74 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z proc near
.text$mn:00003B74                                         ; CODE XREF: Printer::doPrint(bool)+A96p
.text$mn:00003B74                                         ; Printer::doPrint(bool)+C3Fp ...
.text$mn:00003B74
.text$mn:00003B74 var_14          = dword ptr -14h
.text$mn:00003B74 var_E           = byte ptr -0Eh
.text$mn:00003B74 var_D           = byte ptr -0Dh
.text$mn:00003B74 var_C           = dword ptr -0Ch
.text$mn:00003B74 var_4           = dword ptr -4
.text$mn:00003B74 arg_0           = dword ptr  8
.text$mn:00003B74
.text$mn:00003B74                 push    ebp
.text$mn:00003B75                 mov     ebp, esp
.text$mn:00003B77                 push    0FFFFFFFFh
.text$mn:00003B79                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$mn:00003B7E                 mov     eax, large fs:0
.text$mn:00003B84                 push    eax
.text$mn:00003B85                 sub     esp, 8
.text$mn:00003B88                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003B8D                 xor     eax, ebp
.text$mn:00003B8F                 push    eax
.text$mn:00003B90                 lea     eax, [ebp+var_C]
.text$mn:00003B93                 mov     large fs:0, eax
.text$mn:00003B99                 mov     [ebp+var_14], ecx
.text$mn:00003B9C                 lea     eax, [ebp+var_D]
.text$mn:00003B9F                 push    eax
.text$mn:00003BA0                 lea     ecx, [ebp+var_E]
.text$mn:00003BA3                 push    ecx
.text$mn:00003BA4                 mov     ecx, [ebp+arg_0]
.text$mn:00003BA7                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00003BAC                 mov     ecx, eax
.text$mn:00003BAE                 call    ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)
.text$mn:00003BB3                 push    eax
.text$mn:00003BB4                 mov     ecx, [ebp+var_14]
.text$mn:00003BB7                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00003BBC                 mov     [ebp+var_4], 0
.text$mn:00003BC3                 push    0
.text$mn:00003BC5                 push    0
.text$mn:00003BC7                 mov     ecx, [ebp+var_14]
.text$mn:00003BCA                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00003BCF                 mov     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00003BD5                 push    edx
.text$mn:00003BD6                 push    0
.text$mn:00003BD8                 mov     eax, [ebp+arg_0]
.text$mn:00003BDB                 push    eax
.text$mn:00003BDC                 mov     ecx, [ebp+var_14]
.text$mn:00003BDF                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00003BE4                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003BEB                 mov     eax, [ebp+var_14]
.text$mn:00003BEE                 mov     ecx, [ebp+var_C]
.text$mn:00003BF1                 mov     large fs:0, ecx
.text$mn:00003BF8                 pop     ecx
.text$mn:00003BF9                 mov     esp, ebp
.text$mn:00003BFB                 pop     ebp
.text$mn:00003BFC                 retn    4
.text$mn:00003BFC ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z endp
.text$mn:00003BFC
.text$mn:00003BFC ; ---------------------------------------------------------------------------
.text$mn:00003BFF                 align 10h
.text$mn:00003BFF _text$mn        ends
.text$mn:00003BFF
.text$x:00003C00 ; ===========================================================================
.text$x:00003C00
.text$x:00003C00 ; Segment type: Pure code
.text$x:00003C00 ; Segment permissions: Read/Execute
.text$x:00003C00 _text$x         segment para public 'CODE' use32
.text$x:00003C00                 assume cs:_text$x
.text$x:00003C00                 ;org 3C00h
.text$x:00003C00 ; COMDAT (pick associative to section at 3B74)
.text$x:00003C00                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:00003C00
.text$x:00003C00 ; =============== S U B R O U T I N E =======================================
.text$x:00003C00
.text$x:00003C00
.text$x:00003C00 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00003C00                                         ; DATA XREF: .xdata$x:00006BE0o
.text$x:00003C00                 mov     ecx, [ebp-14h]
.text$x:00003C03                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00003C03 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 endp
.text$x:00003C03
.text$x:00003C08
.text$x:00003C08 ; =============== S U B R O U T I N E =======================================
.text$x:00003C08
.text$x:00003C08
.text$x:00003C08 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z proc near
.text$x:00003C08                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5o
.text$x:00003C08
.text$x:00003C08 arg_4           = dword ptr  8
.text$x:00003C08
.text$x:00003C08                 mov     edx, [esp+arg_4]
.text$x:00003C0C                 lea     eax, [edx+0Ch]
.text$x:00003C0F                 mov     ecx, [edx-0Ch]
.text$x:00003C12                 xor     ecx, eax
.text$x:00003C14                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C19                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$x:00003C1E                 jmp     ___CxxFrameHandler3
.text$x:00003C1E __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z endp
.text$x:00003C1E
.text$x:00003C1E ; ---------------------------------------------------------------------------
.text$x:00003C23                 align 4
.text$x:00003C23 _text$x         ends
.text$x:00003C23
.text$mn:00003C24 ; ===========================================================================
.text$mn:00003C24
.text$mn:00003C24 ; Segment type: Pure code
.text$mn:00003C24 ; Segment permissions: Read/Execute
.text$mn:00003C24 _text$mn        segment para public 'CODE' use32
.text$mn:00003C24                 assume cs:_text$mn
.text$mn:00003C24                 ;org 3C24h
.text$mn:00003C24 ; COMDAT (pick any)
.text$mn:00003C24                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003C24
.text$mn:00003C24 ; =============== S U B R O U T I N E =======================================
.text$mn:00003C24
.text$mn:00003C24 ; Attributes: bp-based frame
.text$mn:00003C24
.text$mn:00003C24 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t *Str)
.text$mn:00003C24                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:00003C24 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$mn:00003C24                                         ; CODE XREF: Printer::doPrint(bool)+AD3p
.text$mn:00003C24                                         ; Printer::doPrint(bool)+B00p ...
.text$mn:00003C24
.text$mn:00003C24 var_14          = dword ptr -14h
.text$mn:00003C24 var_D           = byte ptr -0Dh
.text$mn:00003C24 var_C           = dword ptr -0Ch
.text$mn:00003C24 var_4           = dword ptr -4
.text$mn:00003C24 Str             = dword ptr  8
.text$mn:00003C24
.text$mn:00003C24                 push    ebp
.text$mn:00003C25                 mov     ebp, esp
.text$mn:00003C27                 push    0FFFFFFFFh
.text$mn:00003C29                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:00003C2E                 mov     eax, large fs:0
.text$mn:00003C34                 push    eax
.text$mn:00003C35                 sub     esp, 8
.text$mn:00003C38                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003C3D                 xor     eax, ebp
.text$mn:00003C3F                 push    eax
.text$mn:00003C40                 lea     eax, [ebp+var_C]
.text$mn:00003C43                 mov     large fs:0, eax
.text$mn:00003C49                 mov     [ebp+var_14], ecx
.text$mn:00003C4C                 lea     ecx, [ebp+var_D]
.text$mn:00003C4F                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00003C54                 push    eax
.text$mn:00003C55                 mov     ecx, [ebp+var_14]
.text$mn:00003C58                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00003C5D                 mov     [ebp+var_4], 0
.text$mn:00003C64                 push    0
.text$mn:00003C66                 push    0
.text$mn:00003C68                 mov     ecx, [ebp+var_14]
.text$mn:00003C6B                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00003C70                 mov     eax, [ebp+Str]
.text$mn:00003C73                 push    eax             ; Str
.text$mn:00003C74                 mov     ecx, [ebp+var_14]
.text$mn:00003C77                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:00003C7C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003C83                 mov     eax, [ebp+var_14]
.text$mn:00003C86                 mov     ecx, [ebp+var_C]
.text$mn:00003C89                 mov     large fs:0, ecx
.text$mn:00003C90                 pop     ecx
.text$mn:00003C91                 mov     esp, ebp
.text$mn:00003C93                 pop     ebp
.text$mn:00003C94                 retn    4
.text$mn:00003C94 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$mn:00003C94
.text$mn:00003C94 ; ---------------------------------------------------------------------------
.text$mn:00003C97                 align 4
.text$mn:00003C97 _text$mn        ends
.text$mn:00003C97
.text$x:00003C98 ; ===========================================================================
.text$x:00003C98
.text$x:00003C98 ; Segment type: Pure code
.text$x:00003C98 ; Segment permissions: Read/Execute
.text$x:00003C98 _text$x         segment para public 'CODE' use32
.text$x:00003C98                 assume cs:_text$x
.text$x:00003C98                 ;org 3C98h
.text$x:00003C98 ; COMDAT (pick associative to section at 3C24)
.text$x:00003C98                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:00003C98
.text$x:00003C98 ; =============== S U B R O U T I N E =======================================
.text$x:00003C98
.text$x:00003C98
.text$x:00003C98 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 proc near
.text$x:00003C98                                         ; DATA XREF: .xdata$x:00006C0Co
.text$x:00003C98                 mov     ecx, [ebp-14h]
.text$x:00003C9B                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00003C9B __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 endp
.text$x:00003C9B
.text$x:00003CA0
.text$x:00003CA0 ; =============== S U B R O U T I N E =======================================
.text$x:00003CA0
.text$x:00003CA0
.text$x:00003CA0 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$x:00003CA0                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+5o
.text$x:00003CA0
.text$x:00003CA0 arg_4           = dword ptr  8
.text$x:00003CA0
.text$x:00003CA0                 mov     edx, [esp+arg_4]
.text$x:00003CA4                 lea     eax, [edx+0Ch]
.text$x:00003CA7                 mov     ecx, [edx-0Ch]
.text$x:00003CAA                 xor     ecx, eax
.text$x:00003CAC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003CB1                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$x:00003CB6                 jmp     ___CxxFrameHandler3
.text$x:00003CB6 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$x:00003CB6
.text$x:00003CB6 ; ---------------------------------------------------------------------------
.text$x:00003CBB                 align 4
.text$x:00003CBB _text$x         ends
.text$x:00003CBB
.text$mn:00003CBC ; ===========================================================================
.text$mn:00003CBC
.text$mn:00003CBC ; Segment type: Pure code
.text$mn:00003CBC ; Segment permissions: Read/Execute
.text$mn:00003CBC _text$mn        segment para public 'CODE' use32
.text$mn:00003CBC                 assume cs:_text$mn
.text$mn:00003CBC                 ;org 3CBCh
.text$mn:00003CBC ; COMDAT (pick any)
.text$mn:00003CBC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003CBC
.text$mn:00003CBC ; =============== S U B R O U T I N E =======================================
.text$mn:00003CBC
.text$mn:00003CBC ; Attributes: bp-based frame
.text$mn:00003CBC
.text$mn:00003CBC ; _DWORD __thiscall std::_Container_base12::_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:00003CBC                 public ??0_Container_base12@std@@QAE@XZ
.text$mn:00003CBC ??0_Container_base12@std@@QAE@XZ proc near
.text$mn:00003CBC                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+29p
.text$mn:00003CBC                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+29p
.text$mn:00003CBC
.text$mn:00003CBC var_4           = dword ptr -4
.text$mn:00003CBC
.text$mn:00003CBC                 push    ebp
.text$mn:00003CBD                 mov     ebp, esp
.text$mn:00003CBF                 push    ecx
.text$mn:00003CC0                 mov     [ebp+var_4], ecx
.text$mn:00003CC3                 mov     eax, [ebp+var_4]
.text$mn:00003CC6                 mov     dword ptr [eax], 0
.text$mn:00003CCC                 mov     eax, [ebp+var_4]
.text$mn:00003CCF                 mov     esp, ebp
.text$mn:00003CD1                 pop     ebp
.text$mn:00003CD2                 retn
.text$mn:00003CD2 ??0_Container_base12@std@@QAE@XZ endp
.text$mn:00003CD2
.text$mn:00003CD2 ; ---------------------------------------------------------------------------
.text$mn:00003CD3                 align 4
.text$mn:00003CD3 _text$mn        ends
.text$mn:00003CD3
.text$mn:00003CD4 ; ===========================================================================
.text$mn:00003CD4
.text$mn:00003CD4 ; Segment type: Pure code
.text$mn:00003CD4 ; Segment permissions: Read/Execute
.text$mn:00003CD4 _text$mn        segment para public 'CODE' use32
.text$mn:00003CD4                 assume cs:_text$mn
.text$mn:00003CD4                 ;org 3CD4h
.text$mn:00003CD4 ; COMDAT (pick any)
.text$mn:00003CD4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003CD4
.text$mn:00003CD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00003CD4
.text$mn:00003CD4 ; Attributes: bp-based frame
.text$mn:00003CD4
.text$mn:00003CD4 ; _DWORD __thiscall std::_Container_proxy::_Container_proxy(std::_Container_proxy *__hidden this)
.text$mn:00003CD4                 public ??0_Container_proxy@std@@QAE@XZ
.text$mn:00003CD4 ??0_Container_proxy@std@@QAE@XZ proc near
.text$mn:00003CD4                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+23p
.text$mn:00003CD4                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+23p
.text$mn:00003CD4
.text$mn:00003CD4 var_4           = dword ptr -4
.text$mn:00003CD4
.text$mn:00003CD4                 push    ebp
.text$mn:00003CD5                 mov     ebp, esp
.text$mn:00003CD7                 push    ecx
.text$mn:00003CD8                 mov     [ebp+var_4], ecx
.text$mn:00003CDB                 mov     eax, [ebp+var_4]
.text$mn:00003CDE                 mov     dword ptr [eax], 0
.text$mn:00003CE4                 mov     ecx, [ebp+var_4]
.text$mn:00003CE7                 mov     dword ptr [ecx+4], 0
.text$mn:00003CEE                 mov     eax, [ebp+var_4]
.text$mn:00003CF1                 mov     esp, ebp
.text$mn:00003CF3                 pop     ebp
.text$mn:00003CF4                 retn
.text$mn:00003CF4 ??0_Container_proxy@std@@QAE@XZ endp
.text$mn:00003CF4
.text$mn:00003CF4 ; ---------------------------------------------------------------------------
.text$mn:00003CF5                 align 4
.text$mn:00003CF5 _text$mn        ends
.text$mn:00003CF5
.text$mn:00003CF8 ; ===========================================================================
.text$mn:00003CF8
.text$mn:00003CF8 ; Segment type: Pure code
.text$mn:00003CF8 ; Segment permissions: Read/Execute
.text$mn:00003CF8 _text$mn        segment para public 'CODE' use32
.text$mn:00003CF8                 assume cs:_text$mn
.text$mn:00003CF8                 ;org 3CF8h
.text$mn:00003CF8 ; COMDAT (pick any)
.text$mn:00003CF8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003CF8
.text$mn:00003CF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003CF8
.text$mn:00003CF8 ; Attributes: bp-based frame
.text$mn:00003CF8
.text$mn:00003CF8 ; _DWORD __thiscall std::_Generic_error_category::_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:00003CF8                 public ??0_Generic_error_category@std@@QAE@XZ
.text$mn:00003CF8 ??0_Generic_error_category@std@@QAE@XZ proc near
.text$mn:00003CF8                                         ; CODE XREF: std::_Iostream_error_category::_Iostream_error_category(void)+29p
.text$mn:00003CF8                                         ; std::_System_error_category::_System_error_category(void)+29p ...
.text$mn:00003CF8
.text$mn:00003CF8 var_10          = dword ptr -10h
.text$mn:00003CF8 var_C           = dword ptr -0Ch
.text$mn:00003CF8 var_4           = dword ptr -4
.text$mn:00003CF8
.text$mn:00003CF8                 push    ebp
.text$mn:00003CF9                 mov     ebp, esp
.text$mn:00003CFB                 push    0FFFFFFFFh
.text$mn:00003CFD                 push    offset __ehhandler$??0_Generic_error_category@std@@QAE@XZ
.text$mn:00003D02                 mov     eax, large fs:0
.text$mn:00003D08                 push    eax
.text$mn:00003D09                 push    ecx
.text$mn:00003D0A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003D0F                 xor     eax, ebp
.text$mn:00003D11                 push    eax
.text$mn:00003D12                 lea     eax, [ebp+var_C]
.text$mn:00003D15                 mov     large fs:0, eax
.text$mn:00003D1B                 mov     [ebp+var_10], ecx
.text$mn:00003D1E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003D21                 call    ??0error_category@std@@QAE@XZ ; std::error_category::error_category(void)
.text$mn:00003D26                 mov     [ebp+var_4], 0
.text$mn:00003D2D                 mov     eax, [ebp+var_10]
.text$mn:00003D30                 mov     dword ptr [eax], offset ??_7_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`vftable'
.text$mn:00003D36                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003D3D                 mov     eax, [ebp+var_10]
.text$mn:00003D40                 mov     ecx, [ebp+var_C]
.text$mn:00003D43                 mov     large fs:0, ecx
.text$mn:00003D4A                 pop     ecx
.text$mn:00003D4B                 mov     esp, ebp
.text$mn:00003D4D                 pop     ebp
.text$mn:00003D4E                 retn
.text$mn:00003D4E ??0_Generic_error_category@std@@QAE@XZ endp
.text$mn:00003D4E
.text$mn:00003D4E ; ---------------------------------------------------------------------------
.text$mn:00003D4F                 align 10h
.text$mn:00003D4F _text$mn        ends
.text$mn:00003D4F
.text$x:00003D50 ; ===========================================================================
.text$x:00003D50
.text$x:00003D50 ; Segment type: Pure code
.text$x:00003D50 ; Segment permissions: Read/Execute
.text$x:00003D50 _text$x         segment para public 'CODE' use32
.text$x:00003D50                 assume cs:_text$x
.text$x:00003D50                 ;org 3D50h
.text$x:00003D50 ; COMDAT (pick associative to section at 3CF8)
.text$x:00003D50                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:00003D50
.text$x:00003D50 ; =============== S U B R O U T I N E =======================================
.text$x:00003D50
.text$x:00003D50
.text$x:00003D50 __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 proc near
.text$x:00003D50                                         ; DATA XREF: .xdata$x:000069A4o
.text$x:00003D50                 mov     ecx, [ebp-10h]  ; this
.text$x:00003D53                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:00003D53 __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 endp
.text$x:00003D53
.text$x:00003D58
.text$x:00003D58 ; =============== S U B R O U T I N E =======================================
.text$x:00003D58
.text$x:00003D58
.text$x:00003D58 __ehhandler$??0_Generic_error_category@std@@QAE@XZ proc near
.text$x:00003D58                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+5o
.text$x:00003D58
.text$x:00003D58 arg_4           = dword ptr  8
.text$x:00003D58
.text$x:00003D58                 mov     edx, [esp+arg_4]
.text$x:00003D5C                 lea     eax, [edx+0Ch]
.text$x:00003D5F                 mov     ecx, [edx-8]
.text$x:00003D62                 xor     ecx, eax
.text$x:00003D64                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003D69                 mov     eax, offset __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ
.text$x:00003D6E                 jmp     ___CxxFrameHandler3
.text$x:00003D6E __ehhandler$??0_Generic_error_category@std@@QAE@XZ endp
.text$x:00003D6E
.text$x:00003D6E ; ---------------------------------------------------------------------------
.text$x:00003D73                 align 4
.text$x:00003D73 _text$x         ends
.text$x:00003D73
.text$mn:00003D74 ; ===========================================================================
.text$mn:00003D74
.text$mn:00003D74 ; Segment type: Pure code
.text$mn:00003D74 ; Segment permissions: Read/Execute
.text$mn:00003D74 _text$mn        segment para public 'CODE' use32
.text$mn:00003D74                 assume cs:_text$mn
.text$mn:00003D74                 ;org 3D74h
.text$mn:00003D74 ; COMDAT (pick any)
.text$mn:00003D74                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003D74
.text$mn:00003D74 ; =============== S U B R O U T I N E =======================================
.text$mn:00003D74
.text$mn:00003D74 ; Attributes: bp-based frame
.text$mn:00003D74
.text$mn:00003D74 ; _DWORD __thiscall std::_Ignore::_Ignore(std::_Ignore *__hidden this)
.text$mn:00003D74                 public ??0_Ignore@std@@QAE@XZ
.text$mn:00003D74 ??0_Ignore@std@@QAE@XZ proc near        ; CODE XREF: std::`dynamic initializer for 'ignore''(void)+8p
.text$mn:00003D74
.text$mn:00003D74 var_4           = dword ptr -4
.text$mn:00003D74
.text$mn:00003D74                 push    ebp
.text$mn:00003D75                 mov     ebp, esp
.text$mn:00003D77                 push    ecx
.text$mn:00003D78                 mov     [ebp+var_4], ecx
.text$mn:00003D7B                 mov     eax, [ebp+var_4]
.text$mn:00003D7E                 mov     esp, ebp
.text$mn:00003D80                 pop     ebp
.text$mn:00003D81                 retn
.text$mn:00003D81 ??0_Ignore@std@@QAE@XZ endp
.text$mn:00003D81
.text$mn:00003D81 ; ---------------------------------------------------------------------------
.text$mn:00003D82                 align 4
.text$mn:00003D82 _text$mn        ends
.text$mn:00003D82
.text$mn:00003D84 ; ===========================================================================
.text$mn:00003D84
.text$mn:00003D84 ; Segment type: Pure code
.text$mn:00003D84 ; Segment permissions: Read/Execute
.text$mn:00003D84 _text$mn        segment para public 'CODE' use32
.text$mn:00003D84                 assume cs:_text$mn
.text$mn:00003D84                 ;org 3D84h
.text$mn:00003D84 ; COMDAT (pick any)
.text$mn:00003D84                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003D84
.text$mn:00003D84 ; =============== S U B R O U T I N E =======================================
.text$mn:00003D84
.text$mn:00003D84 ; Attributes: bp-based frame
.text$mn:00003D84
.text$mn:00003D84 ; _DWORD __thiscall std::_Iostream_error_category::_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:00003D84                 public ??0_Iostream_error_category@std@@QAE@XZ
.text$mn:00003D84 ??0_Iostream_error_category@std@@QAE@XZ proc near
.text$mn:00003D84                                         ; CODE XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:00003D84
.text$mn:00003D84 var_10          = dword ptr -10h
.text$mn:00003D84 var_C           = dword ptr -0Ch
.text$mn:00003D84 var_4           = dword ptr -4
.text$mn:00003D84
.text$mn:00003D84                 push    ebp
.text$mn:00003D85                 mov     ebp, esp
.text$mn:00003D87                 push    0FFFFFFFFh
.text$mn:00003D89                 push    offset __ehhandler$??0_Iostream_error_category@std@@QAE@XZ
.text$mn:00003D8E                 mov     eax, large fs:0
.text$mn:00003D94                 push    eax
.text$mn:00003D95                 push    ecx
.text$mn:00003D96                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003D9B                 xor     eax, ebp
.text$mn:00003D9D                 push    eax
.text$mn:00003D9E                 lea     eax, [ebp+var_C]
.text$mn:00003DA1                 mov     large fs:0, eax
.text$mn:00003DA7                 mov     [ebp+var_10], ecx
.text$mn:00003DAA                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003DAD                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:00003DB2                 mov     [ebp+var_4], 0
.text$mn:00003DB9                 mov     eax, [ebp+var_10]
.text$mn:00003DBC                 mov     dword ptr [eax], offset ??_7_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`vftable'
.text$mn:00003DC2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003DC9                 mov     eax, [ebp+var_10]
.text$mn:00003DCC                 mov     ecx, [ebp+var_C]
.text$mn:00003DCF                 mov     large fs:0, ecx
.text$mn:00003DD6                 pop     ecx
.text$mn:00003DD7                 mov     esp, ebp
.text$mn:00003DD9                 pop     ebp
.text$mn:00003DDA                 retn
.text$mn:00003DDA ??0_Iostream_error_category@std@@QAE@XZ endp
.text$mn:00003DDA
.text$mn:00003DDA ; ---------------------------------------------------------------------------
.text$mn:00003DDB                 align 4
.text$mn:00003DDB _text$mn        ends
.text$mn:00003DDB
.text$x:00003DDC ; ===========================================================================
.text$x:00003DDC
.text$x:00003DDC ; Segment type: Pure code
.text$x:00003DDC ; Segment permissions: Read/Execute
.text$x:00003DDC _text$x         segment para public 'CODE' use32
.text$x:00003DDC                 assume cs:_text$x
.text$x:00003DDC                 ;org 3DDCh
.text$x:00003DDC ; COMDAT (pick associative to section at 3D84)
.text$x:00003DDC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:00003DDC
.text$x:00003DDC ; =============== S U B R O U T I N E =======================================
.text$x:00003DDC
.text$x:00003DDC
.text$x:00003DDC __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 proc near
.text$x:00003DDC                                         ; DATA XREF: .xdata$x:00006A28o
.text$x:00003DDC                 mov     ecx, [ebp-10h]  ; this
.text$x:00003DDF                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00003DDF __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 endp
.text$x:00003DDF
.text$x:00003DE4
.text$x:00003DE4 ; =============== S U B R O U T I N E =======================================
.text$x:00003DE4
.text$x:00003DE4
.text$x:00003DE4 __ehhandler$??0_Iostream_error_category@std@@QAE@XZ proc near
.text$x:00003DE4                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+5o
.text$x:00003DE4
.text$x:00003DE4 arg_4           = dword ptr  8
.text$x:00003DE4
.text$x:00003DE4                 mov     edx, [esp+arg_4]
.text$x:00003DE8                 lea     eax, [edx+0Ch]
.text$x:00003DEB                 mov     ecx, [edx-8]
.text$x:00003DEE                 xor     ecx, eax
.text$x:00003DF0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003DF5                 mov     eax, offset __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ
.text$x:00003DFA                 jmp     ___CxxFrameHandler3
.text$x:00003DFA __ehhandler$??0_Iostream_error_category@std@@QAE@XZ endp
.text$x:00003DFA
.text$x:00003DFA ; ---------------------------------------------------------------------------
.text$x:00003DFF                 align 10h
.text$x:00003DFF _text$x         ends
.text$x:00003DFF
.text$mn:00003E00 ; ===========================================================================
.text$mn:00003E00
.text$mn:00003E00 ; Segment type: Pure code
.text$mn:00003E00 ; Segment permissions: Read/Execute
.text$mn:00003E00 _text$mn        segment para public 'CODE' use32
.text$mn:00003E00                 assume cs:_text$mn
.text$mn:00003E00                 ;org 3E00h
.text$mn:00003E00 ; COMDAT (pick any)
.text$mn:00003E00                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003E00
.text$mn:00003E00 ; =============== S U B R O U T I N E =======================================
.text$mn:00003E00
.text$mn:00003E00 ; Attributes: bp-based frame
.text$mn:00003E00
.text$mn:00003E00 ; _DWORD __thiscall std::_System_error_category::_System_error_category(std::_System_error_category *__hidden this)
.text$mn:00003E00                 public ??0_System_error_category@std@@QAE@XZ
.text$mn:00003E00 ??0_System_error_category@std@@QAE@XZ proc near
.text$mn:00003E00                                         ; CODE XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:00003E00
.text$mn:00003E00 var_10          = dword ptr -10h
.text$mn:00003E00 var_C           = dword ptr -0Ch
.text$mn:00003E00 var_4           = dword ptr -4
.text$mn:00003E00
.text$mn:00003E00                 push    ebp
.text$mn:00003E01                 mov     ebp, esp
.text$mn:00003E03                 push    0FFFFFFFFh
.text$mn:00003E05                 push    offset __ehhandler$??0_System_error_category@std@@QAE@XZ
.text$mn:00003E0A                 mov     eax, large fs:0
.text$mn:00003E10                 push    eax
.text$mn:00003E11                 push    ecx
.text$mn:00003E12                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003E17                 xor     eax, ebp
.text$mn:00003E19                 push    eax
.text$mn:00003E1A                 lea     eax, [ebp+var_C]
.text$mn:00003E1D                 mov     large fs:0, eax
.text$mn:00003E23                 mov     [ebp+var_10], ecx
.text$mn:00003E26                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003E29                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:00003E2E                 mov     [ebp+var_4], 0
.text$mn:00003E35                 mov     eax, [ebp+var_10]
.text$mn:00003E38                 mov     dword ptr [eax], offset ??_7_System_error_category@std@@6B@ ; const std::_System_error_category::`vftable'
.text$mn:00003E3E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003E45                 mov     eax, [ebp+var_10]
.text$mn:00003E48                 mov     ecx, [ebp+var_C]
.text$mn:00003E4B                 mov     large fs:0, ecx
.text$mn:00003E52                 pop     ecx
.text$mn:00003E53                 mov     esp, ebp
.text$mn:00003E55                 pop     ebp
.text$mn:00003E56                 retn
.text$mn:00003E56 ??0_System_error_category@std@@QAE@XZ endp
.text$mn:00003E56
.text$mn:00003E56 ; ---------------------------------------------------------------------------
.text$mn:00003E57                 align 4
.text$mn:00003E57 _text$mn        ends
.text$mn:00003E57
.text$x:00003E58 ; ===========================================================================
.text$x:00003E58
.text$x:00003E58 ; Segment type: Pure code
.text$x:00003E58 ; Segment permissions: Read/Execute
.text$x:00003E58 _text$x         segment para public 'CODE' use32
.text$x:00003E58                 assume cs:_text$x
.text$x:00003E58                 ;org 3E58h
.text$x:00003E58 ; COMDAT (pick associative to section at 3E00)
.text$x:00003E58                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:00003E58
.text$x:00003E58 ; =============== S U B R O U T I N E =======================================
.text$x:00003E58
.text$x:00003E58
.text$x:00003E58 __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 proc near
.text$x:00003E58                                         ; DATA XREF: .xdata$x:00006AACo
.text$x:00003E58                 mov     ecx, [ebp-10h]  ; this
.text$x:00003E5B                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00003E5B __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 endp
.text$x:00003E5B
.text$x:00003E60
.text$x:00003E60 ; =============== S U B R O U T I N E =======================================
.text$x:00003E60
.text$x:00003E60
.text$x:00003E60 __ehhandler$??0_System_error_category@std@@QAE@XZ proc near
.text$x:00003E60                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+5o
.text$x:00003E60
.text$x:00003E60 arg_4           = dword ptr  8
.text$x:00003E60
.text$x:00003E60                 mov     edx, [esp+arg_4]
.text$x:00003E64                 lea     eax, [edx+0Ch]
.text$x:00003E67                 mov     ecx, [edx-8]
.text$x:00003E6A                 xor     ecx, eax
.text$x:00003E6C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003E71                 mov     eax, offset __ehfuncinfo$??0_System_error_category@std@@QAE@XZ
.text$x:00003E76                 jmp     ___CxxFrameHandler3
.text$x:00003E76 __ehhandler$??0_System_error_category@std@@QAE@XZ endp
.text$x:00003E76
.text$x:00003E76 ; ---------------------------------------------------------------------------
.text$x:00003E7B                 align 4
.text$x:00003E7B _text$x         ends
.text$x:00003E7B
.text$mn:00003E7C ; ===========================================================================
.text$mn:00003E7C
.text$mn:00003E7C ; Segment type: Pure code
.text$mn:00003E7C ; Segment permissions: Read/Execute
.text$mn:00003E7C _text$mn        segment para public 'CODE' use32
.text$mn:00003E7C                 assume cs:_text$mn
.text$mn:00003E7C                 ;org 3E7Ch
.text$mn:00003E7C ; COMDAT (pick any)
.text$mn:00003E7C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003E7C
.text$mn:00003E7C ; =============== S U B R O U T I N E =======================================
.text$mn:00003E7C
.text$mn:00003E7C ; Attributes: bp-based frame
.text$mn:00003E7C
.text$mn:00003E7C ; _DWORD __thiscall std::error_category::error_category(std::error_category *__hidden this)
.text$mn:00003E7C                 public ??0error_category@std@@QAE@XZ
.text$mn:00003E7C ??0error_category@std@@QAE@XZ proc near ; CODE XREF: std::_Generic_error_category::_Generic_error_category(void)+29p
.text$mn:00003E7C
.text$mn:00003E7C var_4           = dword ptr -4
.text$mn:00003E7C
.text$mn:00003E7C                 push    ebp
.text$mn:00003E7D                 mov     ebp, esp
.text$mn:00003E7F                 push    ecx
.text$mn:00003E80                 mov     [ebp+var_4], ecx
.text$mn:00003E83                 mov     eax, [ebp+var_4]
.text$mn:00003E86                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:00003E8C                 mov     eax, [ebp+var_4]
.text$mn:00003E8F                 mov     esp, ebp
.text$mn:00003E91                 pop     ebp
.text$mn:00003E92                 retn
.text$mn:00003E92 ??0error_category@std@@QAE@XZ endp
.text$mn:00003E92
.text$mn:00003E92 ; ---------------------------------------------------------------------------
.text$mn:00003E93                 align 4
.text$mn:00003E93 _text$mn        ends
.text$mn:00003E93
.text$mn:00003E94 ; ===========================================================================
.text$mn:00003E94
.text$mn:00003E94 ; Segment type: Pure code
.text$mn:00003E94 ; Segment permissions: Read/Execute
.text$mn:00003E94 _text$mn        segment para public 'CODE' use32
.text$mn:00003E94                 assume cs:_text$mn
.text$mn:00003E94                 ;org 3E94h
.text$mn:00003E94 ; COMDAT (pick any)
.text$mn:00003E94                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003E94
.text$mn:00003E94 ; =============== S U B R O U T I N E =======================================
.text$mn:00003E94
.text$mn:00003E94 ; Attributes: bp-based frame
.text$mn:00003E94
.text$mn:00003E94 ; _DWORD __thiscall std::error_condition::error_condition(std::error_condition *this, int, const struct std::error_category *)
.text$mn:00003E94                 public ??0error_condition@std@@QAE@HABVerror_category@1@@Z
.text$mn:00003E94 ??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
.text$mn:00003E94                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+24p
.text$mn:00003E94                                         ; std::_System_error_category::default_error_condition(int)+3Dp ...
.text$mn:00003E94
.text$mn:00003E94 var_4           = dword ptr -4
.text$mn:00003E94 arg_0           = dword ptr  8
.text$mn:00003E94 arg_4           = dword ptr  0Ch
.text$mn:00003E94
.text$mn:00003E94                 push    ebp
.text$mn:00003E95                 mov     ebp, esp
.text$mn:00003E97                 push    ecx
.text$mn:00003E98                 mov     [ebp+var_4], ecx
.text$mn:00003E9B                 mov     eax, [ebp+var_4]
.text$mn:00003E9E                 mov     ecx, [ebp+arg_0]
.text$mn:00003EA1                 mov     [eax], ecx
.text$mn:00003EA3                 mov     edx, [ebp+var_4]
.text$mn:00003EA6                 mov     eax, [ebp+arg_4]
.text$mn:00003EA9                 mov     [edx+4], eax
.text$mn:00003EAC                 mov     eax, [ebp+var_4]
.text$mn:00003EAF                 mov     esp, ebp
.text$mn:00003EB1                 pop     ebp
.text$mn:00003EB2                 retn    8
.text$mn:00003EB2 ??0error_condition@std@@QAE@HABVerror_category@1@@Z endp
.text$mn:00003EB2
.text$mn:00003EB2 ; ---------------------------------------------------------------------------
.text$mn:00003EB5                 align 4
.text$mn:00003EB5 _text$mn        ends
.text$mn:00003EB5
.text$mn:00003EB8 ; ===========================================================================
.text$mn:00003EB8
.text$mn:00003EB8 ; Segment type: Pure code
.text$mn:00003EB8 ; Segment permissions: Read/Execute
.text$mn:00003EB8 _text$mn        segment para public 'CODE' use32
.text$mn:00003EB8                 assume cs:_text$mn
.text$mn:00003EB8                 ;org 3EB8h
.text$mn:00003EB8 ; COMDAT (pick any)
.text$mn:00003EB8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003EB8
.text$mn:00003EB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003EB8
.text$mn:00003EB8 ; Attributes: bp-based frame
.text$mn:00003EB8
.text$mn:00003EB8 ; _DWORD __thiscall std::locale::id::id(std::locale::id *this, unsigned int)
.text$mn:00003EB8                 public ??0id@locale@std@@QAE@I@Z
.text$mn:00003EB8 ??0id@locale@std@@QAE@I@Z proc near     ; CODE XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+Ap
.text$mn:00003EB8                                         ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+Ap ...
.text$mn:00003EB8
.text$mn:00003EB8 var_4           = dword ptr -4
.text$mn:00003EB8 arg_0           = dword ptr  8
.text$mn:00003EB8
.text$mn:00003EB8                 push    ebp
.text$mn:00003EB9                 mov     ebp, esp
.text$mn:00003EBB                 push    ecx
.text$mn:00003EBC                 mov     [ebp+var_4], ecx
.text$mn:00003EBF                 mov     eax, [ebp+var_4]
.text$mn:00003EC2                 mov     ecx, [ebp+arg_0]
.text$mn:00003EC5                 mov     [eax], ecx
.text$mn:00003EC7                 mov     eax, [ebp+var_4]
.text$mn:00003ECA                 mov     esp, ebp
.text$mn:00003ECC                 pop     ebp
.text$mn:00003ECD                 retn    4
.text$mn:00003ECD ??0id@locale@std@@QAE@I@Z endp
.text$mn:00003ECD
.text$mn:00003ECD _text$mn        ends
.text$mn:00003ECD
.text$mn:00003ED0 ; ===========================================================================
.text$mn:00003ED0
.text$mn:00003ED0 ; Segment type: Pure code
.text$mn:00003ED0 ; Segment permissions: Read/Execute
.text$mn:00003ED0 _text$mn        segment para public 'CODE' use32
.text$mn:00003ED0                 assume cs:_text$mn
.text$mn:00003ED0                 ;org 3ED0h
.text$mn:00003ED0 ; COMDAT (pick any)
.text$mn:00003ED0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003ED0
.text$mn:00003ED0 ; =============== S U B R O U T I N E =======================================
.text$mn:00003ED0
.text$mn:00003ED0 ; Attributes: bp-based frame
.text$mn:00003ED0
.text$mn:00003ED0 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::~_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(void)
.text$mn:00003ED0                 public ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:00003ED0 ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00003ED0                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0+3j
.text$mn:00003ED0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+43p ...
.text$mn:00003ED0
.text$mn:00003ED0 var_10          = dword ptr -10h
.text$mn:00003ED0 var_C           = dword ptr -0Ch
.text$mn:00003ED0 var_4           = dword ptr -4
.text$mn:00003ED0
.text$mn:00003ED0                 push    ebp
.text$mn:00003ED1                 mov     ebp, esp
.text$mn:00003ED3                 push    0FFFFFFFFh
.text$mn:00003ED5                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:00003EDA                 mov     eax, large fs:0
.text$mn:00003EE0                 push    eax
.text$mn:00003EE1                 push    ecx
.text$mn:00003EE2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003EE7                 xor     eax, ebp
.text$mn:00003EE9                 push    eax
.text$mn:00003EEA                 lea     eax, [ebp+var_C]
.text$mn:00003EED                 mov     large fs:0, eax
.text$mn:00003EF3                 mov     [ebp+var_10], ecx
.text$mn:00003EF6                 mov     [ebp+var_4], 0
.text$mn:00003EFD                 mov     ecx, [ebp+var_10]
.text$mn:00003F00                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)
.text$mn:00003F05                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003F0C                 mov     ecx, [ebp+var_10]
.text$mn:00003F0F                 call    ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$mn:00003F14                 mov     ecx, [ebp+var_C]
.text$mn:00003F17                 mov     large fs:0, ecx
.text$mn:00003F1E                 pop     ecx
.text$mn:00003F1F                 mov     esp, ebp
.text$mn:00003F21                 pop     ebp
.text$mn:00003F22                 retn
.text$mn:00003F22 ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$mn:00003F22
.text$mn:00003F22 ; ---------------------------------------------------------------------------
.text$mn:00003F23                 align 4
.text$mn:00003F23 _text$mn        ends
.text$mn:00003F23
.text$x:00003F24 ; ===========================================================================
.text$x:00003F24
.text$x:00003F24 ; Segment type: Pure code
.text$x:00003F24 ; Segment permissions: Read/Execute
.text$x:00003F24 _text$x         segment para public 'CODE' use32
.text$x:00003F24                 assume cs:_text$x
.text$x:00003F24                 ;org 3F24h
.text$x:00003F24 ; COMDAT (pick associative to section at 3ED0)
.text$x:00003F24                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:00003F24
.text$x:00003F24 ; =============== S U B R O U T I N E =======================================
.text$x:00003F24
.text$x:00003F24
.text$x:00003F24 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00003F24                                         ; DATA XREF: .xdata$x:00006894o
.text$x:00003F24                 mov     ecx, [ebp-10h]
.text$x:00003F27                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:00003F27 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00003F27
.text$x:00003F2C
.text$x:00003F2C ; =============== S U B R O U T I N E =======================================
.text$x:00003F2C
.text$x:00003F2C
.text$x:00003F2C __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$x:00003F2C                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+5o
.text$x:00003F2C
.text$x:00003F2C arg_4           = dword ptr  8
.text$x:00003F2C
.text$x:00003F2C                 mov     edx, [esp+arg_4]
.text$x:00003F30                 lea     eax, [edx+0Ch]
.text$x:00003F33                 mov     ecx, [edx-8]
.text$x:00003F36                 xor     ecx, eax
.text$x:00003F38                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003F3D                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$x:00003F42                 jmp     ___CxxFrameHandler3
.text$x:00003F42 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$x:00003F42
.text$x:00003F42 ; ---------------------------------------------------------------------------
.text$x:00003F47                 align 4
.text$x:00003F47 _text$x         ends
.text$x:00003F47
.text$mn:00003F48 ; ===========================================================================
.text$mn:00003F48
.text$mn:00003F48 ; Segment type: Pure code
.text$mn:00003F48 ; Segment permissions: Read/Execute
.text$mn:00003F48 _text$mn        segment para public 'CODE' use32
.text$mn:00003F48                 assume cs:_text$mn
.text$mn:00003F48                 ;org 3F48h
.text$mn:00003F48 ; COMDAT (pick any)
.text$mn:00003F48                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003F48
.text$mn:00003F48 ; =============== S U B R O U T I N E =======================================
.text$mn:00003F48
.text$mn:00003F48 ; Attributes: bp-based frame
.text$mn:00003F48
.text$mn:00003F48 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::~_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(void)
.text$mn:00003F48                 public ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00003F48 ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00003F48                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0+3j
.text$mn:00003F48                                         ; __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0+3j ...
.text$mn:00003F48
.text$mn:00003F48 var_10          = dword ptr -10h
.text$mn:00003F48 var_C           = dword ptr -0Ch
.text$mn:00003F48 var_4           = dword ptr -4
.text$mn:00003F48
.text$mn:00003F48                 push    ebp
.text$mn:00003F49                 mov     ebp, esp
.text$mn:00003F4B                 push    0FFFFFFFFh
.text$mn:00003F4D                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00003F52                 mov     eax, large fs:0
.text$mn:00003F58                 push    eax
.text$mn:00003F59                 push    ecx
.text$mn:00003F5A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003F5F                 xor     eax, ebp
.text$mn:00003F61                 push    eax
.text$mn:00003F62                 lea     eax, [ebp+var_C]
.text$mn:00003F65                 mov     large fs:0, eax
.text$mn:00003F6B                 mov     [ebp+var_10], ecx
.text$mn:00003F6E                 mov     [ebp+var_4], 0
.text$mn:00003F75                 mov     ecx, [ebp+var_10]
.text$mn:00003F78                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:00003F7D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003F84                 mov     ecx, [ebp+var_10]
.text$mn:00003F87                 call    ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:00003F8C                 mov     ecx, [ebp+var_C]
.text$mn:00003F8F                 mov     large fs:0, ecx
.text$mn:00003F96                 pop     ecx
.text$mn:00003F97                 mov     esp, ebp
.text$mn:00003F99                 pop     ebp
.text$mn:00003F9A                 retn
.text$mn:00003F9A ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:00003F9A
.text$mn:00003F9A ; ---------------------------------------------------------------------------
.text$mn:00003F9B                 align 4
.text$mn:00003F9B _text$mn        ends
.text$mn:00003F9B
.text$x:00003F9C ; ===========================================================================
.text$x:00003F9C
.text$x:00003F9C ; Segment type: Pure code
.text$x:00003F9C ; Segment permissions: Read/Execute
.text$x:00003F9C _text$x         segment para public 'CODE' use32
.text$x:00003F9C                 assume cs:_text$x
.text$x:00003F9C                 ;org 3F9Ch
.text$x:00003F9C ; COMDAT (pick associative to section at 3F48)
.text$x:00003F9C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:00003F9C
.text$x:00003F9C ; =============== S U B R O U T I N E =======================================
.text$x:00003F9C
.text$x:00003F9C
.text$x:00003F9C __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00003F9C                                         ; DATA XREF: .xdata$x:00006BB4o
.text$x:00003F9C                 mov     ecx, [ebp-10h]
.text$x:00003F9F                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:00003F9F __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00003F9F
.text$x:00003FA4
.text$x:00003FA4 ; =============== S U B R O U T I N E =======================================
.text$x:00003FA4
.text$x:00003FA4
.text$x:00003FA4 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:00003FA4                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+5o
.text$x:00003FA4
.text$x:00003FA4 arg_4           = dword ptr  8
.text$x:00003FA4
.text$x:00003FA4                 mov     edx, [esp+arg_4]
.text$x:00003FA8                 lea     eax, [edx+0Ch]
.text$x:00003FAB                 mov     ecx, [edx-8]
.text$x:00003FAE                 xor     ecx, eax
.text$x:00003FB0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003FB5                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$x:00003FBA                 jmp     ___CxxFrameHandler3
.text$x:00003FBA __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:00003FBA
.text$x:00003FBA ; ---------------------------------------------------------------------------
.text$x:00003FBF                 align 10h
.text$x:00003FBF _text$x         ends
.text$x:00003FBF
.text$mn:00003FC0 ; ===========================================================================
.text$mn:00003FC0
.text$mn:00003FC0 ; Segment type: Pure code
.text$mn:00003FC0 ; Segment permissions: Read/Execute
.text$mn:00003FC0 _text$mn        segment para public 'CODE' use32
.text$mn:00003FC0                 assume cs:_text$mn
.text$mn:00003FC0                 ;org 3FC0h
.text$mn:00003FC0 ; COMDAT (pick any)
.text$mn:00003FC0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00003FC0
.text$mn:00003FC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00003FC0
.text$mn:00003FC0 ; Attributes: bp-based frame
.text$mn:00003FC0
.text$mn:00003FC0 ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::~_String_val<struct std::_Simple_types<char>>(void)
.text$mn:00003FC0                 public ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00003FC0 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:00003FC0                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0+3j
.text$mn:00003FC0                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+3Fp ...
.text$mn:00003FC0
.text$mn:00003FC0 var_10          = dword ptr -10h
.text$mn:00003FC0 var_C           = dword ptr -0Ch
.text$mn:00003FC0 var_4           = dword ptr -4
.text$mn:00003FC0
.text$mn:00003FC0                 push    ebp
.text$mn:00003FC1                 mov     ebp, esp
.text$mn:00003FC3                 push    0FFFFFFFFh
.text$mn:00003FC5                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00003FCA                 mov     eax, large fs:0
.text$mn:00003FD0                 push    eax
.text$mn:00003FD1                 push    ecx
.text$mn:00003FD2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003FD7                 xor     eax, ebp
.text$mn:00003FD9                 push    eax
.text$mn:00003FDA                 lea     eax, [ebp+var_C]
.text$mn:00003FDD                 mov     large fs:0, eax
.text$mn:00003FE3                 mov     [ebp+var_10], ecx
.text$mn:00003FE6                 mov     [ebp+var_4], 0
.text$mn:00003FED                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003FF4                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003FF7                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00003FFC                 mov     ecx, [ebp+var_C]
.text$mn:00003FFF                 mov     large fs:0, ecx
.text$mn:00004006                 pop     ecx
.text$mn:00004007                 mov     esp, ebp
.text$mn:00004009                 pop     ebp
.text$mn:0000400A                 retn
.text$mn:0000400A ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:0000400A
.text$mn:0000400A ; ---------------------------------------------------------------------------
.text$mn:0000400B                 align 4
.text$mn:0000400B _text$mn        ends
.text$mn:0000400B
.text$x:0000400C ; ===========================================================================
.text$x:0000400C
.text$x:0000400C ; Segment type: Pure code
.text$x:0000400C ; Segment permissions: Read/Execute
.text$x:0000400C _text$x         segment para public 'CODE' use32
.text$x:0000400C                 assume cs:_text$x
.text$x:0000400C                 ;org 400Ch
.text$x:0000400C ; COMDAT (pick associative to section at 3FC0)
.text$x:0000400C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:0000400C
.text$x:0000400C ; =============== S U B R O U T I N E =======================================
.text$x:0000400C
.text$x:0000400C
.text$x:0000400C __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:0000400C                                         ; DATA XREF: .xdata$x:0000683Co
.text$x:0000400C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000400F                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:0000400F __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:0000400F
.text$x:00004014
.text$x:00004014 ; =============== S U B R O U T I N E =======================================
.text$x:00004014
.text$x:00004014
.text$x:00004014 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:00004014                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)+5o
.text$x:00004014
.text$x:00004014 arg_4           = dword ptr  8
.text$x:00004014
.text$x:00004014                 mov     edx, [esp+arg_4]
.text$x:00004018                 lea     eax, [edx+0Ch]
.text$x:0000401B                 mov     ecx, [edx-8]
.text$x:0000401E                 xor     ecx, eax
.text$x:00004020                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004025                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:0000402A                 jmp     ___CxxFrameHandler3
.text$x:0000402A __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:0000402A
.text$x:0000402A ; ---------------------------------------------------------------------------
.text$x:0000402F                 align 10h
.text$x:0000402F _text$x         ends
.text$x:0000402F
.text$mn:00004030 ; ===========================================================================
.text$mn:00004030
.text$mn:00004030 ; Segment type: Pure code
.text$mn:00004030 ; Segment permissions: Read/Execute
.text$mn:00004030 _text$mn        segment para public 'CODE' use32
.text$mn:00004030                 assume cs:_text$mn
.text$mn:00004030                 ;org 4030h
.text$mn:00004030 ; COMDAT (pick any)
.text$mn:00004030                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004030
.text$mn:00004030 ; =============== S U B R O U T I N E =======================================
.text$mn:00004030
.text$mn:00004030 ; Attributes: bp-based frame
.text$mn:00004030
.text$mn:00004030 ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::~_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:00004030                 public ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00004030 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:00004030                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0+3j
.text$mn:00004030                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+3Fp ...
.text$mn:00004030
.text$mn:00004030 var_10          = dword ptr -10h
.text$mn:00004030 var_C           = dword ptr -0Ch
.text$mn:00004030 var_4           = dword ptr -4
.text$mn:00004030
.text$mn:00004030                 push    ebp
.text$mn:00004031                 mov     ebp, esp
.text$mn:00004033                 push    0FFFFFFFFh
.text$mn:00004035                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:0000403A                 mov     eax, large fs:0
.text$mn:00004040                 push    eax
.text$mn:00004041                 push    ecx
.text$mn:00004042                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004047                 xor     eax, ebp
.text$mn:00004049                 push    eax
.text$mn:0000404A                 lea     eax, [ebp+var_C]
.text$mn:0000404D                 mov     large fs:0, eax
.text$mn:00004053                 mov     [ebp+var_10], ecx
.text$mn:00004056                 mov     [ebp+var_4], 0
.text$mn:0000405D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004064                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004067                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:0000406C                 mov     ecx, [ebp+var_C]
.text$mn:0000406F                 mov     large fs:0, ecx
.text$mn:00004076                 pop     ecx
.text$mn:00004077                 mov     esp, ebp
.text$mn:00004079                 pop     ebp
.text$mn:0000407A                 retn
.text$mn:0000407A ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:0000407A
.text$mn:0000407A ; ---------------------------------------------------------------------------
.text$mn:0000407B                 align 4
.text$mn:0000407B _text$mn        ends
.text$mn:0000407B
.text$x:0000407C ; ===========================================================================
.text$x:0000407C
.text$x:0000407C ; Segment type: Pure code
.text$x:0000407C ; Segment permissions: Read/Execute
.text$x:0000407C _text$x         segment para public 'CODE' use32
.text$x:0000407C                 assume cs:_text$x
.text$x:0000407C                 ;org 407Ch
.text$x:0000407C ; COMDAT (pick associative to section at 4030)
.text$x:0000407C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:0000407C
.text$x:0000407C ; =============== S U B R O U T I N E =======================================
.text$x:0000407C
.text$x:0000407C
.text$x:0000407C __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:0000407C                                         ; DATA XREF: .xdata$x:00006B5Co
.text$x:0000407C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000407F                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:0000407F __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:0000407F
.text$x:00004084
.text$x:00004084 ; =============== S U B R O U T I N E =======================================
.text$x:00004084
.text$x:00004084
.text$x:00004084 __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:00004084                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:00004084
.text$x:00004084 arg_4           = dword ptr  8
.text$x:00004084
.text$x:00004084                 mov     edx, [esp+arg_4]
.text$x:00004088                 lea     eax, [edx+0Ch]
.text$x:0000408B                 mov     ecx, [edx-8]
.text$x:0000408E                 xor     ecx, eax
.text$x:00004090                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004095                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:0000409A                 jmp     ___CxxFrameHandler3
.text$x:0000409A __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:0000409A
.text$x:0000409A ; ---------------------------------------------------------------------------
.text$x:0000409F                 align 10h
.text$x:0000409F _text$x         ends
.text$x:0000409F
.text$mn:000040A0 ; ===========================================================================
.text$mn:000040A0
.text$mn:000040A0 ; Segment type: Pure code
.text$mn:000040A0 ; Segment permissions: Read/Execute
.text$mn:000040A0 _text$mn        segment para public 'CODE' use32
.text$mn:000040A0                 assume cs:_text$mn
.text$mn:000040A0                 ;org 40A0h
.text$mn:000040A0 ; COMDAT (pick any)
.text$mn:000040A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000040A0
.text$mn:000040A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000040A0
.text$mn:000040A0 ; Attributes: bp-based frame
.text$mn:000040A0
.text$mn:000040A0 ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::~basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
.text$mn:000040A0                 public ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:000040A0 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$mn:000040A0                                         ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+13j
.text$mn:000040A0                                         ; __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+13j ...
.text$mn:000040A0
.text$mn:000040A0 var_10          = dword ptr -10h
.text$mn:000040A0 var_C           = dword ptr -0Ch
.text$mn:000040A0 var_4           = dword ptr -4
.text$mn:000040A0
.text$mn:000040A0                 push    ebp
.text$mn:000040A1                 mov     ebp, esp
.text$mn:000040A3                 push    0FFFFFFFFh
.text$mn:000040A5                 push    offset __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:000040AA                 mov     eax, large fs:0
.text$mn:000040B0                 push    eax
.text$mn:000040B1                 push    ecx
.text$mn:000040B2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000040B7                 xor     eax, ebp
.text$mn:000040B9                 push    eax
.text$mn:000040BA                 lea     eax, [ebp+var_C]
.text$mn:000040BD                 mov     large fs:0, eax
.text$mn:000040C3                 mov     [ebp+var_10], ecx
.text$mn:000040C6                 mov     [ebp+var_4], 0
.text$mn:000040CD                 push    0               ; Size
.text$mn:000040CF                 push    1               ; char
.text$mn:000040D1                 mov     ecx, [ebp+var_10]
.text$mn:000040D4                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:000040D9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000040E0                 mov     ecx, [ebp+var_10]
.text$mn:000040E3                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$mn:000040E8                 mov     ecx, [ebp+var_C]
.text$mn:000040EB                 mov     large fs:0, ecx
.text$mn:000040F2                 pop     ecx
.text$mn:000040F3                 mov     esp, ebp
.text$mn:000040F5                 pop     ebp
.text$mn:000040F6                 retn
.text$mn:000040F6 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$mn:000040F6
.text$mn:000040F6 ; ---------------------------------------------------------------------------
.text$mn:000040F7                 align 4
.text$mn:000040F7 _text$mn        ends
.text$mn:000040F7
.text$x:000040F8 ; ===========================================================================
.text$x:000040F8
.text$x:000040F8 ; Segment type: Pure code
.text$x:000040F8 ; Segment permissions: Read/Execute
.text$x:000040F8 _text$x         segment para public 'CODE' use32
.text$x:000040F8                 assume cs:_text$x
.text$x:000040F8                 ;org 40F8h
.text$x:000040F8 ; COMDAT (pick associative to section at 40A0)
.text$x:000040F8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:000040F8
.text$x:000040F8 ; =============== S U B R O U T I N E =======================================
.text$x:000040F8
.text$x:000040F8
.text$x:000040F8 __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
.text$x:000040F8                                         ; DATA XREF: .xdata$x:000068ECo
.text$x:000040F8                 mov     ecx, [ebp-10h]
.text$x:000040FB                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:000040FB __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 endp
.text$x:000040FB
.text$x:00004100
.text$x:00004100 ; =============== S U B R O U T I N E =======================================
.text$x:00004100
.text$x:00004100
.text$x:00004100 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$x:00004100                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+5o
.text$x:00004100
.text$x:00004100 arg_4           = dword ptr  8
.text$x:00004100
.text$x:00004100                 mov     edx, [esp+arg_4]
.text$x:00004104                 lea     eax, [edx+0Ch]
.text$x:00004107                 mov     ecx, [edx-8]
.text$x:0000410A                 xor     ecx, eax
.text$x:0000410C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004111                 mov     eax, offset __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$x:00004116                 jmp     ___CxxFrameHandler3
.text$x:00004116 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$x:00004116
.text$x:00004116 ; ---------------------------------------------------------------------------
.text$x:0000411B                 align 4
.text$x:0000411B _text$x         ends
.text$x:0000411B
.text$mn:0000411C ; ===========================================================================
.text$mn:0000411C
.text$mn:0000411C ; Segment type: Pure code
.text$mn:0000411C ; Segment permissions: Read/Execute
.text$mn:0000411C _text$mn        segment para public 'CODE' use32
.text$mn:0000411C                 assume cs:_text$mn
.text$mn:0000411C                 ;org 411Ch
.text$mn:0000411C ; COMDAT (pick any)
.text$mn:0000411C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:0000411C
.text$mn:0000411C ; =============== S U B R O U T I N E =======================================
.text$mn:0000411C
.text$mn:0000411C ; Attributes: bp-based frame
.text$mn:0000411C
.text$mn:0000411C ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::~basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:0000411C                 public ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:0000411C ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:0000411C                                         ; CODE XREF: Printer::doPrint(bool)+F82p
.text$mn:0000411C                                         ; Printer::doPrint(bool)+F91p ...
.text$mn:0000411C
.text$mn:0000411C var_10          = dword ptr -10h
.text$mn:0000411C var_C           = dword ptr -0Ch
.text$mn:0000411C var_4           = dword ptr -4
.text$mn:0000411C
.text$mn:0000411C                 push    ebp
.text$mn:0000411D                 mov     ebp, esp
.text$mn:0000411F                 push    0FFFFFFFFh
.text$mn:00004121                 push    offset __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00004126                 mov     eax, large fs:0
.text$mn:0000412C                 push    eax
.text$mn:0000412D                 push    ecx
.text$mn:0000412E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004133                 xor     eax, ebp
.text$mn:00004135                 push    eax
.text$mn:00004136                 lea     eax, [ebp+var_C]
.text$mn:00004139                 mov     large fs:0, eax
.text$mn:0000413F                 mov     [ebp+var_10], ecx
.text$mn:00004142                 mov     [ebp+var_4], 0
.text$mn:00004149                 push    0
.text$mn:0000414B                 push    1
.text$mn:0000414D                 mov     ecx, [ebp+var_10]
.text$mn:00004150                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00004155                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000415C                 mov     ecx, [ebp+var_10]
.text$mn:0000415F                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$mn:00004164                 mov     ecx, [ebp+var_C]
.text$mn:00004167                 mov     large fs:0, ecx
.text$mn:0000416E                 pop     ecx
.text$mn:0000416F                 mov     esp, ebp
.text$mn:00004171                 pop     ebp
.text$mn:00004172                 retn
.text$mn:00004172 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:00004172
.text$mn:00004172 ; ---------------------------------------------------------------------------
.text$mn:00004173                 align 4
.text$mn:00004173 _text$mn        ends
.text$mn:00004173
.text$x:00004174 ; ===========================================================================
.text$x:00004174
.text$x:00004174 ; Segment type: Pure code
.text$x:00004174 ; Segment permissions: Read/Execute
.text$x:00004174 _text$x         segment para public 'CODE' use32
.text$x:00004174                 assume cs:_text$x
.text$x:00004174                 ;org 4174h
.text$x:00004174 ; COMDAT (pick associative to section at 411C)
.text$x:00004174                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:00004174
.text$x:00004174 ; =============== S U B R O U T I N E =======================================
.text$x:00004174
.text$x:00004174
.text$x:00004174 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:00004174                                         ; DATA XREF: .xdata$x:00006C38o
.text$x:00004174                 mov     ecx, [ebp-10h]
.text$x:00004177                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00004177 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:00004177
.text$x:0000417C
.text$x:0000417C ; =============== S U B R O U T I N E =======================================
.text$x:0000417C
.text$x:0000417C
.text$x:0000417C __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:0000417C                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:0000417C
.text$x:0000417C arg_4           = dword ptr  8
.text$x:0000417C
.text$x:0000417C                 mov     edx, [esp+arg_4]
.text$x:00004180                 lea     eax, [edx+0Ch]
.text$x:00004183                 mov     ecx, [edx-8]
.text$x:00004186                 xor     ecx, eax
.text$x:00004188                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000418D                 mov     eax, offset __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:00004192                 jmp     ___CxxFrameHandler3
.text$x:00004192 __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:00004192
.text$x:00004192 ; ---------------------------------------------------------------------------
.text$x:00004197                 align 4
.text$x:00004197 _text$x         ends
.text$x:00004197
.text$mn:00004198 ; ===========================================================================
.text$mn:00004198
.text$mn:00004198 ; Segment type: Pure code
.text$mn:00004198 ; Segment permissions: Read/Execute
.text$mn:00004198 _text$mn        segment para public 'CODE' use32
.text$mn:00004198                 assume cs:_text$mn
.text$mn:00004198                 ;org 4198h
.text$mn:00004198 ; COMDAT (pick any)
.text$mn:00004198                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004198
.text$mn:00004198 ; =============== S U B R O U T I N E =======================================
.text$mn:00004198
.text$mn:00004198 ; Attributes: bp-based frame
.text$mn:00004198
.text$mn:00004198 ; _DWORD __thiscall std::_Container_base12::~_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:00004198                 public ??1_Container_base12@std@@QAE@XZ
.text$mn:00004198 ??1_Container_base12@std@@QAE@XZ proc near
.text$mn:00004198                                         ; CODE XREF: __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0+3j
.text$mn:00004198                                         ; __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0+3j ...
.text$mn:00004198
.text$mn:00004198 var_4           = dword ptr -4
.text$mn:00004198
.text$mn:00004198                 push    ebp
.text$mn:00004199                 mov     ebp, esp
.text$mn:0000419B                 push    ecx
.text$mn:0000419C                 mov     [ebp+var_4], ecx
.text$mn:0000419F                 mov     ecx, [ebp+var_4] ; this
.text$mn:000041A2                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:000041A7                 mov     esp, ebp
.text$mn:000041A9                 pop     ebp
.text$mn:000041AA                 retn
.text$mn:000041AA ??1_Container_base12@std@@QAE@XZ endp
.text$mn:000041AA
.text$mn:000041AA ; ---------------------------------------------------------------------------
.text$mn:000041AB                 align 4
.text$mn:000041AB _text$mn        ends
.text$mn:000041AB
.text$mn:000041AC ; ===========================================================================
.text$mn:000041AC
.text$mn:000041AC ; Segment type: Pure code
.text$mn:000041AC ; Segment permissions: Read/Execute
.text$mn:000041AC _text$mn        segment para public 'CODE' use32
.text$mn:000041AC                 assume cs:_text$mn
.text$mn:000041AC                 ;org 41ACh
.text$mn:000041AC ; COMDAT (pick any)
.text$mn:000041AC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000041AC
.text$mn:000041AC ; =============== S U B R O U T I N E =======================================
.text$mn:000041AC
.text$mn:000041AC ; Attributes: bp-based frame
.text$mn:000041AC
.text$mn:000041AC ; _DWORD __thiscall std::_Generic_error_category::~_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:000041AC                 public ??1_Generic_error_category@std@@UAE@XZ
.text$mn:000041AC ??1_Generic_error_category@std@@UAE@XZ proc near
.text$mn:000041AC                                         ; CODE XREF: __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0+3j
.text$mn:000041AC                                         ; __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0+3j ...
.text$mn:000041AC
.text$mn:000041AC var_10          = dword ptr -10h
.text$mn:000041AC var_C           = dword ptr -0Ch
.text$mn:000041AC var_4           = dword ptr -4
.text$mn:000041AC
.text$mn:000041AC                 push    ebp
.text$mn:000041AD                 mov     ebp, esp
.text$mn:000041AF                 push    0FFFFFFFFh
.text$mn:000041B1                 push    offset __ehhandler$??1_Generic_error_category@std@@UAE@XZ
.text$mn:000041B6                 mov     eax, large fs:0
.text$mn:000041BC                 push    eax
.text$mn:000041BD                 push    ecx
.text$mn:000041BE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000041C3                 xor     eax, ebp
.text$mn:000041C5                 push    eax
.text$mn:000041C6                 lea     eax, [ebp+var_C]
.text$mn:000041C9                 mov     large fs:0, eax
.text$mn:000041CF                 mov     [ebp+var_10], ecx
.text$mn:000041D2                 mov     [ebp+var_4], 0
.text$mn:000041D9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000041E0                 mov     ecx, [ebp+var_10] ; this
.text$mn:000041E3                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:000041E8                 mov     ecx, [ebp+var_C]
.text$mn:000041EB                 mov     large fs:0, ecx
.text$mn:000041F2                 pop     ecx
.text$mn:000041F3                 mov     esp, ebp
.text$mn:000041F5                 pop     ebp
.text$mn:000041F6                 retn
.text$mn:000041F6 ??1_Generic_error_category@std@@UAE@XZ endp
.text$mn:000041F6
.text$mn:000041F6 ; ---------------------------------------------------------------------------
.text$mn:000041F7                 align 4
.text$mn:000041F7 _text$mn        ends
.text$mn:000041F7
.text$x:000041F8 ; ===========================================================================
.text$x:000041F8
.text$x:000041F8 ; Segment type: Pure code
.text$x:000041F8 ; Segment permissions: Read/Execute
.text$x:000041F8 _text$x         segment para public 'CODE' use32
.text$x:000041F8                 assume cs:_text$x
.text$x:000041F8                 ;org 41F8h
.text$x:000041F8 ; COMDAT (pick associative to section at 41AC)
.text$x:000041F8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:000041F8
.text$x:000041F8 ; =============== S U B R O U T I N E =======================================
.text$x:000041F8
.text$x:000041F8
.text$x:000041F8 __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 proc near
.text$x:000041F8                                         ; DATA XREF: .xdata$x:000069FCo
.text$x:000041F8                 mov     ecx, [ebp-10h]  ; this
.text$x:000041FB                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:000041FB __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 endp
.text$x:000041FB
.text$x:00004200
.text$x:00004200 ; =============== S U B R O U T I N E =======================================
.text$x:00004200
.text$x:00004200
.text$x:00004200 __ehhandler$??1_Generic_error_category@std@@UAE@XZ proc near
.text$x:00004200                                         ; DATA XREF: std::_Generic_error_category::~_Generic_error_category(void)+5o
.text$x:00004200
.text$x:00004200 arg_4           = dword ptr  8
.text$x:00004200
.text$x:00004200                 mov     edx, [esp+arg_4]
.text$x:00004204                 lea     eax, [edx+0Ch]
.text$x:00004207                 mov     ecx, [edx-8]
.text$x:0000420A                 xor     ecx, eax
.text$x:0000420C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004211                 mov     eax, offset __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ
.text$x:00004216                 jmp     ___CxxFrameHandler3
.text$x:00004216 __ehhandler$??1_Generic_error_category@std@@UAE@XZ endp
.text$x:00004216
.text$x:00004216 ; ---------------------------------------------------------------------------
.text$x:0000421B                 align 4
.text$x:0000421B _text$x         ends
.text$x:0000421B
.text$mn:0000421C ; ===========================================================================
.text$mn:0000421C
.text$mn:0000421C ; Segment type: Pure code
.text$mn:0000421C ; Segment permissions: Read/Execute
.text$mn:0000421C _text$mn        segment para public 'CODE' use32
.text$mn:0000421C                 assume cs:_text$mn
.text$mn:0000421C                 ;org 421Ch
.text$mn:0000421C ; COMDAT (pick any)
.text$mn:0000421C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:0000421C
.text$mn:0000421C ; =============== S U B R O U T I N E =======================================
.text$mn:0000421C
.text$mn:0000421C ; Attributes: bp-based frame
.text$mn:0000421C
.text$mn:0000421C ; _DWORD __thiscall std::_Iostream_error_category::~_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:0000421C                 public ??1_Iostream_error_category@std@@UAE@XZ
.text$mn:0000421C ??1_Iostream_error_category@std@@UAE@XZ proc near
.text$mn:0000421C                                         ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:0000421C                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:0000421C
.text$mn:0000421C var_10          = dword ptr -10h
.text$mn:0000421C var_C           = dword ptr -0Ch
.text$mn:0000421C var_4           = dword ptr -4
.text$mn:0000421C
.text$mn:0000421C                 push    ebp
.text$mn:0000421D                 mov     ebp, esp
.text$mn:0000421F                 push    0FFFFFFFFh
.text$mn:00004221                 push    offset __ehhandler$??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00004226                 mov     eax, large fs:0
.text$mn:0000422C                 push    eax
.text$mn:0000422D                 push    ecx
.text$mn:0000422E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004233                 xor     eax, ebp
.text$mn:00004235                 push    eax
.text$mn:00004236                 lea     eax, [ebp+var_C]
.text$mn:00004239                 mov     large fs:0, eax
.text$mn:0000423F                 mov     [ebp+var_10], ecx
.text$mn:00004242                 mov     [ebp+var_4], 0
.text$mn:00004249                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004250                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004253                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00004258                 mov     ecx, [ebp+var_C]
.text$mn:0000425B                 mov     large fs:0, ecx
.text$mn:00004262                 pop     ecx
.text$mn:00004263                 mov     esp, ebp
.text$mn:00004265                 pop     ebp
.text$mn:00004266                 retn
.text$mn:00004266 ??1_Iostream_error_category@std@@UAE@XZ endp
.text$mn:00004266
.text$mn:00004266 ; ---------------------------------------------------------------------------
.text$mn:00004267                 align 4
.text$mn:00004267 _text$mn        ends
.text$mn:00004267
.text$x:00004268 ; ===========================================================================
.text$x:00004268
.text$x:00004268 ; Segment type: Pure code
.text$x:00004268 ; Segment permissions: Read/Execute
.text$x:00004268 _text$x         segment para public 'CODE' use32
.text$x:00004268                 assume cs:_text$x
.text$x:00004268                 ;org 4268h
.text$x:00004268 ; COMDAT (pick associative to section at 421C)
.text$x:00004268                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:00004268
.text$x:00004268 ; =============== S U B R O U T I N E =======================================
.text$x:00004268
.text$x:00004268
.text$x:00004268 __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 proc near
.text$x:00004268                                         ; DATA XREF: .xdata$x:00006A80o
.text$x:00004268                 mov     ecx, [ebp-10h]  ; this
.text$x:0000426B                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:0000426B __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 endp
.text$x:0000426B
.text$x:00004270
.text$x:00004270 ; =============== S U B R O U T I N E =======================================
.text$x:00004270
.text$x:00004270
.text$x:00004270 __ehhandler$??1_Iostream_error_category@std@@UAE@XZ proc near
.text$x:00004270                                         ; DATA XREF: std::_Iostream_error_category::~_Iostream_error_category(void)+5o
.text$x:00004270
.text$x:00004270 arg_4           = dword ptr  8
.text$x:00004270
.text$x:00004270                 mov     edx, [esp+arg_4]
.text$x:00004274                 lea     eax, [edx+0Ch]
.text$x:00004277                 mov     ecx, [edx-8]
.text$x:0000427A                 xor     ecx, eax
.text$x:0000427C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004281                 mov     eax, offset __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ
.text$x:00004286                 jmp     ___CxxFrameHandler3
.text$x:00004286 __ehhandler$??1_Iostream_error_category@std@@UAE@XZ endp
.text$x:00004286
.text$x:00004286 ; ---------------------------------------------------------------------------
.text$x:0000428B                 align 4
.text$x:0000428B _text$x         ends
.text$x:0000428B
.text$mn:0000428C ; ===========================================================================
.text$mn:0000428C
.text$mn:0000428C ; Segment type: Pure code
.text$mn:0000428C ; Segment permissions: Read/Execute
.text$mn:0000428C _text$mn        segment para public 'CODE' use32
.text$mn:0000428C                 assume cs:_text$mn
.text$mn:0000428C                 ;org 428Ch
.text$mn:0000428C ; COMDAT (pick any)
.text$mn:0000428C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:0000428C
.text$mn:0000428C ; =============== S U B R O U T I N E =======================================
.text$mn:0000428C
.text$mn:0000428C ; Attributes: bp-based frame
.text$mn:0000428C
.text$mn:0000428C ; _DWORD __thiscall std::_System_error_category::~_System_error_category(std::_System_error_category *__hidden this)
.text$mn:0000428C                 public ??1_System_error_category@std@@UAE@XZ
.text$mn:0000428C ??1_System_error_category@std@@UAE@XZ proc near
.text$mn:0000428C                                         ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:0000428C                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:0000428C
.text$mn:0000428C var_10          = dword ptr -10h
.text$mn:0000428C var_C           = dword ptr -0Ch
.text$mn:0000428C var_4           = dword ptr -4
.text$mn:0000428C
.text$mn:0000428C                 push    ebp
.text$mn:0000428D                 mov     ebp, esp
.text$mn:0000428F                 push    0FFFFFFFFh
.text$mn:00004291                 push    offset __ehhandler$??1_System_error_category@std@@UAE@XZ
.text$mn:00004296                 mov     eax, large fs:0
.text$mn:0000429C                 push    eax
.text$mn:0000429D                 push    ecx
.text$mn:0000429E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000042A3                 xor     eax, ebp
.text$mn:000042A5                 push    eax
.text$mn:000042A6                 lea     eax, [ebp+var_C]
.text$mn:000042A9                 mov     large fs:0, eax
.text$mn:000042AF                 mov     [ebp+var_10], ecx
.text$mn:000042B2                 mov     [ebp+var_4], 0
.text$mn:000042B9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000042C0                 mov     ecx, [ebp+var_10] ; this
.text$mn:000042C3                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:000042C8                 mov     ecx, [ebp+var_C]
.text$mn:000042CB                 mov     large fs:0, ecx
.text$mn:000042D2                 pop     ecx
.text$mn:000042D3                 mov     esp, ebp
.text$mn:000042D5                 pop     ebp
.text$mn:000042D6                 retn
.text$mn:000042D6 ??1_System_error_category@std@@UAE@XZ endp
.text$mn:000042D6
.text$mn:000042D6 ; ---------------------------------------------------------------------------
.text$mn:000042D7                 align 4
.text$mn:000042D7 _text$mn        ends
.text$mn:000042D7
.text$x:000042D8 ; ===========================================================================
.text$x:000042D8
.text$x:000042D8 ; Segment type: Pure code
.text$x:000042D8 ; Segment permissions: Read/Execute
.text$x:000042D8 _text$x         segment para public 'CODE' use32
.text$x:000042D8                 assume cs:_text$x
.text$x:000042D8                 ;org 42D8h
.text$x:000042D8 ; COMDAT (pick associative to section at 428C)
.text$x:000042D8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:000042D8
.text$x:000042D8 ; =============== S U B R O U T I N E =======================================
.text$x:000042D8
.text$x:000042D8
.text$x:000042D8 __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 proc near
.text$x:000042D8                                         ; DATA XREF: .xdata$x:00006B04o
.text$x:000042D8                 mov     ecx, [ebp-10h]  ; this
.text$x:000042DB                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:000042DB __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 endp
.text$x:000042DB
.text$x:000042E0
.text$x:000042E0 ; =============== S U B R O U T I N E =======================================
.text$x:000042E0
.text$x:000042E0
.text$x:000042E0 __ehhandler$??1_System_error_category@std@@UAE@XZ proc near
.text$x:000042E0                                         ; DATA XREF: std::_System_error_category::~_System_error_category(void)+5o
.text$x:000042E0
.text$x:000042E0 arg_4           = dword ptr  8
.text$x:000042E0
.text$x:000042E0                 mov     edx, [esp+arg_4]
.text$x:000042E4                 lea     eax, [edx+0Ch]
.text$x:000042E7                 mov     ecx, [edx-8]
.text$x:000042EA                 xor     ecx, eax
.text$x:000042EC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000042F1                 mov     eax, offset __ehfuncinfo$??1_System_error_category@std@@UAE@XZ
.text$x:000042F6                 jmp     ___CxxFrameHandler3
.text$x:000042F6 __ehhandler$??1_System_error_category@std@@UAE@XZ endp
.text$x:000042F6
.text$x:000042F6 ; ---------------------------------------------------------------------------
.text$x:000042FB                 align 4
.text$x:000042FB _text$x         ends
.text$x:000042FB
.text$mn:000042FC ; ===========================================================================
.text$mn:000042FC
.text$mn:000042FC ; Segment type: Pure code
.text$mn:000042FC ; Segment permissions: Read/Execute
.text$mn:000042FC _text$mn        segment para public 'CODE' use32
.text$mn:000042FC                 assume cs:_text$mn
.text$mn:000042FC                 ;org 42FCh
.text$mn:000042FC ; COMDAT (pick any)
.text$mn:000042FC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000042FC
.text$mn:000042FC ; =============== S U B R O U T I N E =======================================
.text$mn:000042FC
.text$mn:000042FC ; Attributes: bp-based frame
.text$mn:000042FC
.text$mn:000042FC ; _DWORD __thiscall std::error_category::~error_category(std::error_category *__hidden this)
.text$mn:000042FC                 public ??1error_category@std@@UAE@XZ
.text$mn:000042FC ??1error_category@std@@UAE@XZ proc near ; CODE XREF: __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0+3j
.text$mn:000042FC                                         ; std::_Generic_error_category::~_Generic_error_category(void)+37p ...
.text$mn:000042FC
.text$mn:000042FC var_4           = dword ptr -4
.text$mn:000042FC
.text$mn:000042FC                 push    ebp
.text$mn:000042FD                 mov     ebp, esp
.text$mn:000042FF                 push    ecx
.text$mn:00004300                 mov     [ebp+var_4], ecx
.text$mn:00004303                 mov     eax, [ebp+var_4]
.text$mn:00004306                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:0000430C                 mov     esp, ebp
.text$mn:0000430E                 pop     ebp
.text$mn:0000430F                 retn
.text$mn:0000430F ??1error_category@std@@UAE@XZ endp
.text$mn:0000430F
.text$mn:0000430F _text$mn        ends
.text$mn:0000430F
.text$mn:00004310 ; ===========================================================================
.text$mn:00004310
.text$mn:00004310 ; Segment type: Pure code
.text$mn:00004310 ; Segment permissions: Read/Execute
.text$mn:00004310 _text$mn        segment para public 'CODE' use32
.text$mn:00004310                 assume cs:_text$mn
.text$mn:00004310                 ;org 4310h
.text$mn:00004310 ; COMDAT (pick any)
.text$mn:00004310                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004310
.text$mn:00004310 ; =============== S U B R O U T I N E =======================================
.text$mn:00004310
.text$mn:00004310 ; Attributes: bp-based frame
.text$mn:00004310
.text$mn:00004310 ; void *__cdecl operator new(unsigned int, void *)
.text$mn:00004310                 public ??2@YAPAXIPAX@Z
.text$mn:00004310 ??2@YAPAXIPAX@Z proc near               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+2Ep
.text$mn:00004310                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+2Ep ...
.text$mn:00004310
.text$mn:00004310 arg_4           = dword ptr  0Ch
.text$mn:00004310
.text$mn:00004310                 push    ebp
.text$mn:00004311                 mov     ebp, esp
.text$mn:00004313                 mov     eax, [ebp+arg_4]
.text$mn:00004316                 pop     ebp
.text$mn:00004317                 retn
.text$mn:00004317 ??2@YAPAXIPAX@Z endp
.text$mn:00004317
.text$mn:00004317 _text$mn        ends
.text$mn:00004317
.text$mn:00004318 ; ===========================================================================
.text$mn:00004318
.text$mn:00004318 ; Segment type: Pure code
.text$mn:00004318 ; Segment permissions: Read/Execute
.text$mn:00004318 _text$mn        segment para public 'CODE' use32
.text$mn:00004318                 assume cs:_text$mn
.text$mn:00004318                 ;org 4318h
.text$mn:00004318 ; COMDAT (pick any)
.text$mn:00004318                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004318
.text$mn:00004318 ; =============== S U B R O U T I N E =======================================
.text$mn:00004318
.text$mn:00004318 ; Attributes: bp-based frame
.text$mn:00004318
.text$mn:00004318 ; void __cdecl operator delete(void *)
.text$mn:00004318                 public ??3@YAXPAX0@Z
.text$mn:00004318 ??3@YAXPAX0@Z   proc near               ; CODE XREF: __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0+8p
.text$mn:00004318                                         ; __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0+8p ...
.text$mn:00004318                 push    ebp
.text$mn:00004319                 mov     ebp, esp
.text$mn:0000431B                 pop     ebp
.text$mn:0000431C                 retn
.text$mn:0000431C ??3@YAXPAX0@Z   endp
.text$mn:0000431C
.text$mn:0000431C ; ---------------------------------------------------------------------------
.text$mn:0000431D                 align 10h
.text$mn:0000431D _text$mn        ends
.text$mn:0000431D
.text$mn:00004320 ; ===========================================================================
.text$mn:00004320
.text$mn:00004320 ; Segment type: Pure code
.text$mn:00004320 ; Segment permissions: Read/Execute
.text$mn:00004320 _text$mn        segment para public 'CODE' use32
.text$mn:00004320                 assume cs:_text$mn
.text$mn:00004320                 ;org 4320h
.text$mn:00004320 ; COMDAT (pick any)
.text$mn:00004320                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004320
.text$mn:00004320 ; =============== S U B R O U T I N E =======================================
.text$mn:00004320
.text$mn:00004320 ; Attributes: bp-based frame
.text$mn:00004320
.text$mn:00004320 ; public: bool __thiscall std::error_category::operator==(class std::error_category const &)const
.text$mn:00004320                 public ??8error_category@std@@QBE_NABV01@@Z
.text$mn:00004320 ??8error_category@std@@QBE_NABV01@@Z proc near
.text$mn:00004320                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+1Dp
.text$mn:00004320                                         ; std::error_category::equivalent(std::error_code const &,int)+15p
.text$mn:00004320
.text$mn:00004320 var_8           = dword ptr -8
.text$mn:00004320 var_4           = dword ptr -4
.text$mn:00004320 arg_0           = dword ptr  8
.text$mn:00004320
.text$mn:00004320                 push    ebp
.text$mn:00004321                 mov     ebp, esp
.text$mn:00004323                 sub     esp, 8
.text$mn:00004326                 mov     [ebp+var_8], ecx
.text$mn:00004329                 mov     eax, [ebp+var_8]
.text$mn:0000432C                 cmp     eax, [ebp+arg_0]
.text$mn:0000432F                 jnz     short loc_433A
.text$mn:00004331                 mov     [ebp+var_4], 1
.text$mn:00004338                 jmp     short loc_4341
.text$mn:0000433A ; ---------------------------------------------------------------------------
.text$mn:0000433A
.text$mn:0000433A loc_433A:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+Fj
.text$mn:0000433A                 mov     [ebp+var_4], 0
.text$mn:00004341
.text$mn:00004341 loc_4341:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+18j
.text$mn:00004341                 mov     al, byte ptr [ebp+var_4]
.text$mn:00004344                 mov     esp, ebp
.text$mn:00004346                 pop     ebp
.text$mn:00004347                 retn    4
.text$mn:00004347 ??8error_category@std@@QBE_NABV01@@Z endp
.text$mn:00004347
.text$mn:00004347 ; ---------------------------------------------------------------------------
.text$mn:0000434A                 align 4
.text$mn:0000434A _text$mn        ends
.text$mn:0000434A
.text$mn:0000434C ; ===========================================================================
.text$mn:0000434C
.text$mn:0000434C ; Segment type: Pure code
.text$mn:0000434C ; Segment permissions: Read/Execute
.text$mn:0000434C _text$mn        segment para public 'CODE' use32
.text$mn:0000434C                 assume cs:_text$mn
.text$mn:0000434C                 ;org 434Ch
.text$mn:0000434C ; COMDAT (pick any)
.text$mn:0000434C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:0000434C
.text$mn:0000434C ; =============== S U B R O U T I N E =======================================
.text$mn:0000434C
.text$mn:0000434C ; Attributes: bp-based frame
.text$mn:0000434C
.text$mn:0000434C ; int __stdcall std::error_condition::operator==(std::error_condition *)
.text$mn:0000434C                 public ??8error_condition@std@@QBE_NABV01@@Z
.text$mn:0000434C ??8error_condition@std@@QBE_NABV01@@Z proc near
.text$mn:0000434C                                         ; CODE XREF: std::error_category::equivalent(int,std::error_condition const &)+24p
.text$mn:0000434C
.text$mn:0000434C var_8           = dword ptr -8
.text$mn:0000434C var_4           = dword ptr -4
.text$mn:0000434C arg_0           = dword ptr  8
.text$mn:0000434C
.text$mn:0000434C                 push    ebp
.text$mn:0000434D                 mov     ebp, esp
.text$mn:0000434F                 sub     esp, 8
.text$mn:00004352                 push    esi
.text$mn:00004353                 mov     [ebp+var_4], ecx
.text$mn:00004356                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00004359                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:0000435E                 push    eax
.text$mn:0000435F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00004362                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:00004367                 mov     ecx, eax
.text$mn:00004369                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:0000436E                 movzx   eax, al
.text$mn:00004371                 test    eax, eax
.text$mn:00004373                 jz      short loc_4394
.text$mn:00004375                 mov     ecx, [ebp+var_4] ; this
.text$mn:00004378                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:0000437D                 mov     esi, eax
.text$mn:0000437F                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00004382                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:00004387                 cmp     esi, eax
.text$mn:00004389                 jnz     short loc_4394
.text$mn:0000438B                 mov     [ebp+var_8], 1
.text$mn:00004392                 jmp     short loc_439B
.text$mn:00004394 ; ---------------------------------------------------------------------------
.text$mn:00004394
.text$mn:00004394 loc_4394:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+27j
.text$mn:00004394                                         ; std::error_condition::operator==(std::error_condition const &)+3Dj
.text$mn:00004394                 mov     [ebp+var_8], 0
.text$mn:0000439B
.text$mn:0000439B loc_439B:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+46j
.text$mn:0000439B                 mov     al, byte ptr [ebp+var_8]
.text$mn:0000439E                 pop     esi
.text$mn:0000439F                 mov     esp, ebp
.text$mn:000043A1                 pop     ebp
.text$mn:000043A2                 retn    4
.text$mn:000043A2 ??8error_condition@std@@QBE_NABV01@@Z endp
.text$mn:000043A2
.text$mn:000043A2 ; ---------------------------------------------------------------------------
.text$mn:000043A5                 align 4
.text$mn:000043A5 _text$mn        ends
.text$mn:000043A5
.text$mn:000043A8 ; ===========================================================================
.text$mn:000043A8
.text$mn:000043A8 ; Segment type: Pure code
.text$mn:000043A8 ; Segment permissions: Read/Execute
.text$mn:000043A8 _text$mn        segment para public 'CODE' use32
.text$mn:000043A8                 assume cs:_text$mn
.text$mn:000043A8                 ;org 43A8h
.text$mn:000043A8 ; COMDAT (pick any)
.text$mn:000043A8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000043A8
.text$mn:000043A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000043A8
.text$mn:000043A8 ; Attributes: bp-based frame
.text$mn:000043A8
.text$mn:000043A8 ; public: virtual void * __thiscall std::_Generic_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:000043A8                 public ??_G_Generic_error_category@std@@UAEPAXI@Z
.text$mn:000043A8 ??_G_Generic_error_category@std@@UAEPAXI@Z proc near
.text$mn:000043A8
.text$mn:000043A8 var_4           = dword ptr -4
.text$mn:000043A8 arg_0           = dword ptr  8
.text$mn:000043A8
.text$mn:000043A8                 push    ebp
.text$mn:000043A9                 mov     ebp, esp
.text$mn:000043AB                 push    ecx
.text$mn:000043AC                 mov     [ebp+var_4], ecx
.text$mn:000043AF                 mov     ecx, [ebp+var_4] ; this
.text$mn:000043B2                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:000043B7                 mov     eax, [ebp+arg_0]
.text$mn:000043BA                 and     eax, 1
.text$mn:000043BD                 jz      short loc_43CB
.text$mn:000043BF                 mov     ecx, [ebp+var_4]
.text$mn:000043C2                 push    ecx             ; void *
.text$mn:000043C3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000043C8                 add     esp, 4
.text$mn:000043CB
.text$mn:000043CB loc_43CB:                               ; CODE XREF: std::_Generic_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:000043CB                 mov     eax, [ebp+var_4]
.text$mn:000043CE                 mov     esp, ebp
.text$mn:000043D0                 pop     ebp
.text$mn:000043D1                 retn    4
.text$mn:000043D1 ??_G_Generic_error_category@std@@UAEPAXI@Z endp
.text$mn:000043D1
.text$mn:000043D1 _text$mn        ends
.text$mn:000043D1
.text$mn:000043D4 ; ===========================================================================
.text$mn:000043D4
.text$mn:000043D4 ; Segment type: Pure code
.text$mn:000043D4 ; Segment permissions: Read/Execute
.text$mn:000043D4 _text$mn        segment para public 'CODE' use32
.text$mn:000043D4                 assume cs:_text$mn
.text$mn:000043D4                 ;org 43D4h
.text$mn:000043D4 ; COMDAT (pick any)
.text$mn:000043D4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000043D4
.text$mn:000043D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000043D4
.text$mn:000043D4 ; Attributes: bp-based frame
.text$mn:000043D4
.text$mn:000043D4 ; public: virtual void * __thiscall std::_Iostream_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:000043D4                 public ??_G_Iostream_error_category@std@@UAEPAXI@Z
.text$mn:000043D4 ??_G_Iostream_error_category@std@@UAEPAXI@Z proc near
.text$mn:000043D4
.text$mn:000043D4 var_4           = dword ptr -4
.text$mn:000043D4 arg_0           = dword ptr  8
.text$mn:000043D4
.text$mn:000043D4                 push    ebp
.text$mn:000043D5                 mov     ebp, esp
.text$mn:000043D7                 push    ecx
.text$mn:000043D8                 mov     [ebp+var_4], ecx
.text$mn:000043DB                 mov     ecx, [ebp+var_4] ; this
.text$mn:000043DE                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$mn:000043E3                 mov     eax, [ebp+arg_0]
.text$mn:000043E6                 and     eax, 1
.text$mn:000043E9                 jz      short loc_43F7
.text$mn:000043EB                 mov     ecx, [ebp+var_4]
.text$mn:000043EE                 push    ecx             ; void *
.text$mn:000043EF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000043F4                 add     esp, 4
.text$mn:000043F7
.text$mn:000043F7 loc_43F7:                               ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:000043F7                 mov     eax, [ebp+var_4]
.text$mn:000043FA                 mov     esp, ebp
.text$mn:000043FC                 pop     ebp
.text$mn:000043FD                 retn    4
.text$mn:000043FD ??_G_Iostream_error_category@std@@UAEPAXI@Z endp
.text$mn:000043FD
.text$mn:000043FD _text$mn        ends
.text$mn:000043FD
.text$mn:00004400 ; ===========================================================================
.text$mn:00004400
.text$mn:00004400 ; Segment type: Pure code
.text$mn:00004400 ; Segment permissions: Read/Execute
.text$mn:00004400 _text$mn        segment para public 'CODE' use32
.text$mn:00004400                 assume cs:_text$mn
.text$mn:00004400                 ;org 4400h
.text$mn:00004400 ; COMDAT (pick any)
.text$mn:00004400                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004400
.text$mn:00004400 ; =============== S U B R O U T I N E =======================================
.text$mn:00004400
.text$mn:00004400 ; Attributes: bp-based frame
.text$mn:00004400
.text$mn:00004400 ; public: virtual void * __thiscall std::_System_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00004400                 public ??_G_System_error_category@std@@UAEPAXI@Z
.text$mn:00004400 ??_G_System_error_category@std@@UAEPAXI@Z proc near
.text$mn:00004400
.text$mn:00004400 var_4           = dword ptr -4
.text$mn:00004400 arg_0           = dword ptr  8
.text$mn:00004400
.text$mn:00004400                 push    ebp
.text$mn:00004401                 mov     ebp, esp
.text$mn:00004403                 push    ecx
.text$mn:00004404                 mov     [ebp+var_4], ecx
.text$mn:00004407                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000440A                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$mn:0000440F                 mov     eax, [ebp+arg_0]
.text$mn:00004412                 and     eax, 1
.text$mn:00004415                 jz      short loc_4423
.text$mn:00004417                 mov     ecx, [ebp+var_4]
.text$mn:0000441A                 push    ecx             ; void *
.text$mn:0000441B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00004420                 add     esp, 4
.text$mn:00004423
.text$mn:00004423 loc_4423:                               ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00004423                 mov     eax, [ebp+var_4]
.text$mn:00004426                 mov     esp, ebp
.text$mn:00004428                 pop     ebp
.text$mn:00004429                 retn    4
.text$mn:00004429 ??_G_System_error_category@std@@UAEPAXI@Z endp
.text$mn:00004429
.text$mn:00004429 _text$mn        ends
.text$mn:00004429
.text$mn:0000442C ; ===========================================================================
.text$mn:0000442C
.text$mn:0000442C ; Segment type: Pure code
.text$mn:0000442C ; Segment permissions: Read/Execute
.text$mn:0000442C _text$mn        segment para public 'CODE' use32
.text$mn:0000442C                 assume cs:_text$mn
.text$mn:0000442C                 ;org 442Ch
.text$mn:0000442C ; COMDAT (pick any)
.text$mn:0000442C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:0000442C
.text$mn:0000442C ; =============== S U B R O U T I N E =======================================
.text$mn:0000442C
.text$mn:0000442C ; Attributes: bp-based frame
.text$mn:0000442C
.text$mn:0000442C ; public: virtual void * __thiscall std::error_category::`scalar deleting destructor'(unsigned int)
.text$mn:0000442C                 public ??_Gerror_category@std@@UAEPAXI@Z
.text$mn:0000442C ??_Gerror_category@std@@UAEPAXI@Z proc near
.text$mn:0000442C
.text$mn:0000442C var_4           = dword ptr -4
.text$mn:0000442C arg_0           = dword ptr  8
.text$mn:0000442C
.text$mn:0000442C                 push    ebp
.text$mn:0000442D                 mov     ebp, esp
.text$mn:0000442F                 push    ecx
.text$mn:00004430                 mov     [ebp+var_4], ecx
.text$mn:00004433                 mov     ecx, [ebp+var_4] ; this
.text$mn:00004436                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:0000443B                 mov     eax, [ebp+arg_0]
.text$mn:0000443E                 and     eax, 1
.text$mn:00004441                 jz      short loc_444F
.text$mn:00004443                 mov     ecx, [ebp+var_4]
.text$mn:00004446                 push    ecx             ; void *
.text$mn:00004447                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000444C                 add     esp, 4
.text$mn:0000444F
.text$mn:0000444F loc_444F:                               ; CODE XREF: std::error_category::`scalar deleting destructor'(uint)+15j
.text$mn:0000444F                 mov     eax, [ebp+var_4]
.text$mn:00004452                 mov     esp, ebp
.text$mn:00004454                 pop     ebp
.text$mn:00004455                 retn    4
.text$mn:00004455 ??_Gerror_category@std@@UAEPAXI@Z endp
.text$mn:00004455
.text$mn:00004455 _text$mn        ends
.text$mn:00004455
.text$di:00004458 ; ===========================================================================
.text$di:00004458
.text$di:00004458 ; Segment type: Pure code
.text$di:00004458 ; Segment permissions: Read/Execute
.text$di:00004458 _text$di        segment para public 'CODE' use32
.text$di:00004458                 assume cs:_text$di
.text$di:00004458                 ;org 4458h
.text$di:00004458 ; COMDAT (pick any)
.text$di:00004458                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$di:00004458
.text$di:00004458 ; =============== S U B R O U T I N E =======================================
.text$di:00004458
.text$di:00004458 ; Attributes: bp-based frame
.text$di:00004458
.text$di:00004458 ; void __cdecl `dynamic initializer for 'public: static class std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.text$di:00004458 ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$di:00004458                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Generic_object$initializer$)(void)o
.text$di:00004458                 push    ebp
.text$di:00004459                 mov     ebp, esp
.text$di:0000445B                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$di:00004460                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$di:00004465                 push    offset ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:0000446A                 call    _atexit
.text$di:0000446F                 add     esp, 4
.text$di:00004472                 pop     ebp
.text$di:00004473                 retn
.text$di:00004473 ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$di:00004473
.text$di:00004473 _text$di        ends
.text$di:00004473
.text$di:00004474 ; ===========================================================================
.text$di:00004474
.text$di:00004474 ; Segment type: Pure code
.text$di:00004474 ; Segment permissions: Read/Execute
.text$di:00004474 _text$di        segment para public 'CODE' use32
.text$di:00004474                 assume cs:_text$di
.text$di:00004474                 ;org 4474h
.text$di:00004474 ; COMDAT (pick any)
.text$di:00004474                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$di:00004474
.text$di:00004474 ; =============== S U B R O U T I N E =======================================
.text$di:00004474
.text$di:00004474 ; Attributes: bp-based frame
.text$di:00004474
.text$di:00004474 ; void __cdecl `dynamic initializer for 'public: static class std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.text$di:00004474 ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$di:00004474                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Iostream_object$initializer$)(void)o
.text$di:00004474                 push    ebp
.text$di:00004475                 mov     ebp, esp
.text$di:00004477                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$di:0000447C                 call    ??0_Iostream_error_category@std@@QAE@XZ ; std::_Iostream_error_category::_Iostream_error_category(void)
.text$di:00004481                 push    offset ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:00004486                 call    _atexit
.text$di:0000448B                 add     esp, 4
.text$di:0000448E                 pop     ebp
.text$di:0000448F                 retn
.text$di:0000448F ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$di:0000448F
.text$di:0000448F _text$di        ends
.text$di:0000448F
.text$di:00004490 ; ===========================================================================
.text$di:00004490
.text$di:00004490 ; Segment type: Pure code
.text$di:00004490 ; Segment permissions: Read/Execute
.text$di:00004490 _text$di        segment para public 'CODE' use32
.text$di:00004490                 assume cs:_text$di
.text$di:00004490                 ;org 4490h
.text$di:00004490 ; COMDAT (pick any)
.text$di:00004490                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$di:00004490
.text$di:00004490 ; =============== S U B R O U T I N E =======================================
.text$di:00004490
.text$di:00004490 ; Attributes: bp-based frame
.text$di:00004490
.text$di:00004490 ; void __cdecl `dynamic initializer for 'public: static class std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.text$di:00004490 ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$di:00004490                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_System_object$initializer$)(void)o
.text$di:00004490                 push    ebp
.text$di:00004491                 mov     ebp, esp
.text$di:00004493                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$di:00004498                 call    ??0_System_error_category@std@@QAE@XZ ; std::_System_error_category::_System_error_category(void)
.text$di:0000449D                 push    offset ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:000044A2                 call    _atexit
.text$di:000044A7                 add     esp, 4
.text$di:000044AA                 pop     ebp
.text$di:000044AB                 retn
.text$di:000044AB ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$di:000044AB
.text$di:000044AB _text$di        ends
.text$di:000044AB
.text$di:000044AC ; ===========================================================================
.text$di:000044AC
.text$di:000044AC ; Segment type: Pure code
.text$di:000044AC ; Segment permissions: Read/Execute
.text$di:000044AC _text$di        segment para public 'CODE' use32
.text$di:000044AC                 assume cs:_text$di
.text$di:000044AC                 ;org 44ACh
.text$di:000044AC ; COMDAT (pick any)
.text$di:000044AC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$di:000044AC
.text$di:000044AC ; =============== S U B R O U T I N E =======================================
.text$di:000044AC
.text$di:000044AC ; Attributes: bp-based frame
.text$di:000044AC
.text$di:000044AC ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id''(void)
.text$di:000044AC ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:000044AC                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id$initializer$)(void)o
.text$di:000044AC                 push    ebp
.text$di:000044AD                 mov     ebp, esp
.text$di:000044AF                 push    0               ; unsigned int
.text$di:000044B1                 mov     ecx, offset ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:000044B6                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:000044BB                 pop     ebp
.text$di:000044BC                 retn
.text$di:000044BC ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:000044BC
.text$di:000044BC ; ---------------------------------------------------------------------------
.text$di:000044BD                 align 10h
.text$di:000044BD _text$di        ends
.text$di:000044BD
.text$di:000044C0 ; ===========================================================================
.text$di:000044C0
.text$di:000044C0 ; Segment type: Pure code
.text$di:000044C0 ; Segment permissions: Read/Execute
.text$di:000044C0 _text$di        segment para public 'CODE' use32
.text$di:000044C0                 assume cs:_text$di
.text$di:000044C0                 ;org 44C0h
.text$di:000044C0 ; COMDAT (pick any)
.text$di:000044C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$di:000044C0
.text$di:000044C0 ; =============== S U B R O U T I N E =======================================
.text$di:000044C0
.text$di:000044C0 ; Attributes: bp-based frame
.text$di:000044C0
.text$di:000044C0 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id''(void)
.text$di:000044C0 ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:000044C0                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id$initializer$)(void)o
.text$di:000044C0                 push    ebp
.text$di:000044C1                 mov     ebp, esp
.text$di:000044C3                 push    0               ; unsigned int
.text$di:000044C5                 mov     ecx, offset ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:000044CA                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:000044CF                 pop     ebp
.text$di:000044D0                 retn
.text$di:000044D0 ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:000044D0
.text$di:000044D0 ; ---------------------------------------------------------------------------
.text$di:000044D1                 align 4
.text$di:000044D1 _text$di        ends
.text$di:000044D1
.text$di:000044D4 ; ===========================================================================
.text$di:000044D4
.text$di:000044D4 ; Segment type: Pure code
.text$di:000044D4 ; Segment permissions: Read/Execute
.text$di:000044D4 _text$di        segment para public 'CODE' use32
.text$di:000044D4                 assume cs:_text$di
.text$di:000044D4                 ;org 44D4h
.text$di:000044D4 ; COMDAT (pick any)
.text$di:000044D4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$di:000044D4
.text$di:000044D4 ; =============== S U B R O U T I N E =======================================
.text$di:000044D4
.text$di:000044D4 ; Attributes: bp-based frame
.text$di:000044D4
.text$di:000044D4 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<char>::id''(void)
.text$di:000044D4 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:000044D4                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<char>::id$initializer$)(void)o
.text$di:000044D4                 push    ebp
.text$di:000044D5                 mov     ebp, esp
.text$di:000044D7                 push    0               ; unsigned int
.text$di:000044D9                 mov     ecx, offset ?id@?$numpunct@D@std@@2V0locale@2@A ; this
.text$di:000044DE                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:000044E3                 pop     ebp
.text$di:000044E4                 retn
.text$di:000044E4 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ endp
.text$di:000044E4
.text$di:000044E4 ; ---------------------------------------------------------------------------
.text$di:000044E5                 align 4
.text$di:000044E5 _text$di        ends
.text$di:000044E5
.text$di:000044E8 ; ===========================================================================
.text$di:000044E8
.text$di:000044E8 ; Segment type: Pure code
.text$di:000044E8 ; Segment permissions: Read/Execute
.text$di:000044E8 _text$di        segment para public 'CODE' use32
.text$di:000044E8                 assume cs:_text$di
.text$di:000044E8                 ;org 44E8h
.text$di:000044E8 ; COMDAT (pick any)
.text$di:000044E8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$di:000044E8
.text$di:000044E8 ; =============== S U B R O U T I N E =======================================
.text$di:000044E8
.text$di:000044E8 ; Attributes: bp-based frame
.text$di:000044E8
.text$di:000044E8 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<wchar_t>::id''(void)
.text$di:000044E8 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:000044E8                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<wchar_t>::id$initializer$)(void)o
.text$di:000044E8                 push    ebp
.text$di:000044E9                 mov     ebp, esp
.text$di:000044EB                 push    0               ; unsigned int
.text$di:000044ED                 mov     ecx, offset ?id@?$numpunct@_W@std@@2V0locale@2@A ; this
.text$di:000044F2                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:000044F7                 pop     ebp
.text$di:000044F8                 retn
.text$di:000044F8 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ endp
.text$di:000044F8
.text$di:000044F8 ; ---------------------------------------------------------------------------
.text$di:000044F9                 align 4
.text$di:000044F9 _text$di        ends
.text$di:000044F9
.text$di:000044FC ; ===========================================================================
.text$di:000044FC
.text$di:000044FC ; Segment type: Pure code
.text$di:000044FC ; Segment permissions: Read/Execute
.text$di:000044FC _text$di        segment para public 'CODE' use32
.text$di:000044FC                 assume cs:_text$di
.text$di:000044FC                 ;org 44FCh
.text$di:000044FC ; COMDAT (pick any)
.text$di:000044FC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$di:000044FC
.text$di:000044FC ; =============== S U B R O U T I N E =======================================
.text$di:000044FC
.text$di:000044FC ; Attributes: bp-based frame
.text$di:000044FC
.text$di:000044FC ; void __cdecl std::`dynamic initializer for '_Tuple_alloc''(void)
.text$di:000044FC ??__E_Tuple_alloc@std@@YAXXZ proc near  ; DATA XREF: .CRT$XCU:__Tuple_alloc$initializer$o
.text$di:000044FC
.text$di:000044FC var_1           = byte ptr -1
.text$di:000044FC
.text$di:000044FC                 push    ebp
.text$di:000044FD                 mov     ebp, esp
.text$di:000044FF                 push    ecx
.text$di:00004500                 xor     eax, eax
.text$di:00004502                 mov     [ebp+var_1], al
.text$di:00004505                 mov     esp, ebp
.text$di:00004507                 pop     ebp
.text$di:00004508                 retn
.text$di:00004508 ??__E_Tuple_alloc@std@@YAXXZ endp
.text$di:00004508
.text$di:00004508 ; ---------------------------------------------------------------------------
.text$di:00004509                 align 4
.text$di:00004509 _text$di        ends
.text$di:00004509
.text$di:0000450C ; ===========================================================================
.text$di:0000450C
.text$di:0000450C ; Segment type: Pure code
.text$di:0000450C ; Segment permissions: Read/Execute
.text$di:0000450C _text$di        segment para public 'CODE' use32
.text$di:0000450C                 assume cs:_text$di
.text$di:0000450C                 ;org 450Ch
.text$di:0000450C ; COMDAT (pick any)
.text$di:0000450C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$di:0000450C
.text$di:0000450C ; =============== S U B R O U T I N E =======================================
.text$di:0000450C
.text$di:0000450C ; Attributes: bp-based frame
.text$di:0000450C
.text$di:0000450C ; void __cdecl std::`dynamic initializer for 'allocator_arg''(void)
.text$di:0000450C ??__Eallocator_arg@std@@YAXXZ proc near ; DATA XREF: .CRT$XCU:_allocator_arg$initializer$o
.text$di:0000450C
.text$di:0000450C var_1           = byte ptr -1
.text$di:0000450C
.text$di:0000450C                 push    ebp
.text$di:0000450D                 mov     ebp, esp
.text$di:0000450F                 push    ecx
.text$di:00004510                 xor     eax, eax
.text$di:00004512                 mov     [ebp+var_1], al
.text$di:00004515                 mov     esp, ebp
.text$di:00004517                 pop     ebp
.text$di:00004518                 retn
.text$di:00004518 ??__Eallocator_arg@std@@YAXXZ endp
.text$di:00004518
.text$di:00004518 ; ---------------------------------------------------------------------------
.text$di:00004519                 align 4
.text$di:00004519 _text$di        ends
.text$di:00004519
.text$di:0000451C ; ===========================================================================
.text$di:0000451C
.text$di:0000451C ; Segment type: Pure code
.text$di:0000451C ; Segment permissions: Read/Execute
.text$di:0000451C _text$di        segment para public 'CODE' use32
.text$di:0000451C                 assume cs:_text$di
.text$di:0000451C                 ;org 451Ch
.text$di:0000451C ; COMDAT (pick any)
.text$di:0000451C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$di:0000451C
.text$di:0000451C ; =============== S U B R O U T I N E =======================================
.text$di:0000451C
.text$di:0000451C ; Attributes: bp-based frame
.text$di:0000451C
.text$di:0000451C ; void __cdecl std::`dynamic initializer for 'ignore''(void)
.text$di:0000451C ??__Eignore@std@@YAXXZ proc near        ; DATA XREF: .CRT$XCU:_ignore$initializer$o
.text$di:0000451C                 push    ebp
.text$di:0000451D                 mov     ebp, esp
.text$di:0000451F                 mov     ecx, offset _ignore ; this
.text$di:00004524                 call    ??0_Ignore@std@@QAE@XZ ; std::_Ignore::_Ignore(void)
.text$di:00004529                 pop     ebp
.text$di:0000452A                 retn
.text$di:0000452A ??__Eignore@std@@YAXXZ endp
.text$di:0000452A
.text$di:0000452A ; ---------------------------------------------------------------------------
.text$di:0000452B                 align 4
.text$di:0000452B _text$di        ends
.text$di:0000452B
.text$di:0000452C ; ===========================================================================
.text$di:0000452C
.text$di:0000452C ; Segment type: Pure code
.text$di:0000452C ; Segment permissions: Read/Execute
.text$di:0000452C _text$di        segment para public 'CODE' use32
.text$di:0000452C                 assume cs:_text$di
.text$di:0000452C                 ;org 452Ch
.text$di:0000452C ; COMDAT (pick any)
.text$di:0000452C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$di:0000452C
.text$di:0000452C ; =============== S U B R O U T I N E =======================================
.text$di:0000452C
.text$di:0000452C ; Attributes: bp-based frame
.text$di:0000452C
.text$di:0000452C ; void __cdecl std::`dynamic initializer for 'piecewise_construct''(void)
.text$di:0000452C ??__Epiecewise_construct@std@@YAXXZ proc near
.text$di:0000452C                                         ; DATA XREF: .CRT$XCU:_piecewise_construct$initializer$o
.text$di:0000452C
.text$di:0000452C var_1           = byte ptr -1
.text$di:0000452C
.text$di:0000452C                 push    ebp
.text$di:0000452D                 mov     ebp, esp
.text$di:0000452F                 push    ecx
.text$di:00004530                 xor     eax, eax
.text$di:00004532                 mov     [ebp+var_1], al
.text$di:00004535                 mov     esp, ebp
.text$di:00004537                 pop     ebp
.text$di:00004538                 retn
.text$di:00004538 ??__Epiecewise_construct@std@@YAXXZ endp
.text$di:00004538
.text$di:00004538 ; ---------------------------------------------------------------------------
.text$di:00004539                 align 4
.text$di:00004539 _text$di        ends
.text$di:00004539
.text$yd:0000453C ; ===========================================================================
.text$yd:0000453C
.text$yd:0000453C ; Segment type: Pure code
.text$yd:0000453C ; Segment permissions: Read/Execute
.text$yd:0000453C _text$yd        segment para public 'CODE' use32
.text$yd:0000453C                 assume cs:_text$yd
.text$yd:0000453C                 ;org 453Ch
.text$yd:0000453C ; COMDAT (pick any)
.text$yd:0000453C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$yd:0000453C
.text$yd:0000453C ; =============== S U B R O U T I N E =======================================
.text$yd:0000453C
.text$yd:0000453C ; Attributes: bp-based frame
.text$yd:0000453C
.text$yd:0000453C ; void __cdecl `dynamic atexit destructor for 'public: static std::_Generic_error_category std::_Error_objects<int>::_Generic_object''()
.text$yd:0000453C ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$yd:0000453C                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+Do
.text$yd:0000453C                 push    ebp
.text$yd:0000453D                 mov     ebp, esp
.text$yd:0000453F                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$yd:00004544                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$yd:00004549                 pop     ebp
.text$yd:0000454A                 retn
.text$yd:0000454A ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$yd:0000454A
.text$yd:0000454A ; ---------------------------------------------------------------------------
.text$yd:0000454B                 align 4
.text$yd:0000454B _text$yd        ends
.text$yd:0000454B
.text$yd:0000454C ; ===========================================================================
.text$yd:0000454C
.text$yd:0000454C ; Segment type: Pure code
.text$yd:0000454C ; Segment permissions: Read/Execute
.text$yd:0000454C _text$yd        segment para public 'CODE' use32
.text$yd:0000454C                 assume cs:_text$yd
.text$yd:0000454C                 ;org 454Ch
.text$yd:0000454C ; COMDAT (pick any)
.text$yd:0000454C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$yd:0000454C
.text$yd:0000454C ; =============== S U B R O U T I N E =======================================
.text$yd:0000454C
.text$yd:0000454C ; Attributes: bp-based frame
.text$yd:0000454C
.text$yd:0000454C ; void __cdecl `dynamic atexit destructor for 'public: static std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''()
.text$yd:0000454C ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$yd:0000454C                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+Do
.text$yd:0000454C                 push    ebp
.text$yd:0000454D                 mov     ebp, esp
.text$yd:0000454F                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$yd:00004554                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$yd:00004559                 pop     ebp
.text$yd:0000455A                 retn
.text$yd:0000455A ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$yd:0000455A
.text$yd:0000455A ; ---------------------------------------------------------------------------
.text$yd:0000455B                 align 4
.text$yd:0000455B _text$yd        ends
.text$yd:0000455B
.text$yd:0000455C ; ===========================================================================
.text$yd:0000455C
.text$yd:0000455C ; Segment type: Pure code
.text$yd:0000455C ; Segment permissions: Read/Execute
.text$yd:0000455C _text$yd        segment para public 'CODE' use32
.text$yd:0000455C                 assume cs:_text$yd
.text$yd:0000455C                 ;org 455Ch
.text$yd:0000455C ; COMDAT (pick any)
.text$yd:0000455C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$yd:0000455C
.text$yd:0000455C ; =============== S U B R O U T I N E =======================================
.text$yd:0000455C
.text$yd:0000455C ; Attributes: bp-based frame
.text$yd:0000455C
.text$yd:0000455C ; void __cdecl `dynamic atexit destructor for 'public: static std::_System_error_category std::_Error_objects<int>::_System_object''()
.text$yd:0000455C ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$yd:0000455C                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+Do
.text$yd:0000455C                 push    ebp
.text$yd:0000455D                 mov     ebp, esp
.text$yd:0000455F                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$yd:00004564                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$yd:00004569                 pop     ebp
.text$yd:0000456A                 retn
.text$yd:0000456A ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$yd:0000456A
.text$yd:0000456A ; ---------------------------------------------------------------------------
.text$yd:0000456B                 align 4
.text$yd:0000456B _text$yd        ends
.text$yd:0000456B
.text$mn:0000456C ; ===========================================================================
.text$mn:0000456C
.text$mn:0000456C ; Segment type: Pure code
.text$mn:0000456C ; Segment permissions: Read/Execute
.text$mn:0000456C _text$mn        segment para public 'CODE' use32
.text$mn:0000456C                 assume cs:_text$mn
.text$mn:0000456C                 ;org 456Ch
.text$mn:0000456C ; COMDAT (pick any)
.text$mn:0000456C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:0000456C
.text$mn:0000456C ; =============== S U B R O U T I N E =======================================
.text$mn:0000456C
.text$mn:0000456C ; Attributes: bp-based frame
.text$mn:0000456C
.text$mn:0000456C ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:0000456C                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:0000456C ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:0000456C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+38p
.text$mn:0000456C
.text$mn:0000456C var_10          = byte ptr -10h
.text$mn:0000456C var_8           = dword ptr -8
.text$mn:0000456C var_1           = byte ptr -1
.text$mn:0000456C
.text$mn:0000456C                 push    ebp
.text$mn:0000456D                 mov     ebp, esp
.text$mn:0000456F                 sub     esp, 10h
.text$mn:00004572                 mov     [ebp+var_8], ecx
.text$mn:00004575                 lea     ecx, [ebp+var_1]
.text$mn:00004578                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:0000457D                 push    1
.text$mn:0000457F                 lea     ecx, [ebp+var_1]
.text$mn:00004582                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:00004587                 mov     ecx, [ebp+var_8]
.text$mn:0000458A                 mov     [ecx], eax
.text$mn:0000458C                 lea     ecx, [ebp+var_10] ; this
.text$mn:0000458F                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:00004594                 push    eax             ; int
.text$mn:00004595                 mov     edx, [ebp+var_8]
.text$mn:00004598                 mov     eax, [edx]
.text$mn:0000459A                 push    eax             ; void *
.text$mn:0000459B                 lea     ecx, [ebp+var_1]
.text$mn:0000459E                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:000045A3                 mov     ecx, [ebp+var_8]
.text$mn:000045A6                 mov     edx, [ecx]
.text$mn:000045A8                 mov     eax, [ebp+var_8]
.text$mn:000045AB                 mov     [edx], eax
.text$mn:000045AD                 mov     esp, ebp
.text$mn:000045AF                 pop     ebp
.text$mn:000045B0                 retn
.text$mn:000045B0 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:000045B0
.text$mn:000045B0 ; ---------------------------------------------------------------------------
.text$mn:000045B1                 align 4
.text$mn:000045B1 _text$mn        ends
.text$mn:000045B1
.text$mn:000045B4 ; ===========================================================================
.text$mn:000045B4
.text$mn:000045B4 ; Segment type: Pure code
.text$mn:000045B4 ; Segment permissions: Read/Execute
.text$mn:000045B4 _text$mn        segment para public 'CODE' use32
.text$mn:000045B4                 assume cs:_text$mn
.text$mn:000045B4                 ;org 45B4h
.text$mn:000045B4 ; COMDAT (pick any)
.text$mn:000045B4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000045B4
.text$mn:000045B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000045B4
.text$mn:000045B4 ; Attributes: bp-based frame
.text$mn:000045B4
.text$mn:000045B4 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:000045B4                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:000045B4 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:000045B4                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+38p
.text$mn:000045B4
.text$mn:000045B4 var_10          = byte ptr -10h
.text$mn:000045B4 var_8           = dword ptr -8
.text$mn:000045B4 var_1           = byte ptr -1
.text$mn:000045B4
.text$mn:000045B4                 push    ebp
.text$mn:000045B5                 mov     ebp, esp
.text$mn:000045B7                 sub     esp, 10h
.text$mn:000045BA                 mov     [ebp+var_8], ecx
.text$mn:000045BD                 lea     ecx, [ebp+var_1]
.text$mn:000045C0                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:000045C5                 push    1
.text$mn:000045C7                 lea     ecx, [ebp+var_1]
.text$mn:000045CA                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:000045CF                 mov     ecx, [ebp+var_8]
.text$mn:000045D2                 mov     [ecx], eax
.text$mn:000045D4                 lea     ecx, [ebp+var_10] ; this
.text$mn:000045D7                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:000045DC                 push    eax             ; int
.text$mn:000045DD                 mov     edx, [ebp+var_8]
.text$mn:000045E0                 mov     eax, [edx]
.text$mn:000045E2                 push    eax             ; void *
.text$mn:000045E3                 lea     ecx, [ebp+var_1]
.text$mn:000045E6                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:000045EB                 mov     ecx, [ebp+var_8]
.text$mn:000045EE                 mov     edx, [ecx]
.text$mn:000045F0                 mov     eax, [ebp+var_8]
.text$mn:000045F3                 mov     [edx], eax
.text$mn:000045F5                 mov     esp, ebp
.text$mn:000045F7                 pop     ebp
.text$mn:000045F8                 retn
.text$mn:000045F8 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:000045F8
.text$mn:000045F8 ; ---------------------------------------------------------------------------
.text$mn:000045F9                 align 4
.text$mn:000045F9 _text$mn        ends
.text$mn:000045F9
.text$mn:000045FC ; ===========================================================================
.text$mn:000045FC
.text$mn:000045FC ; Segment type: Pure code
.text$mn:000045FC ; Segment permissions: Read/Execute
.text$mn:000045FC _text$mn        segment para public 'CODE' use32
.text$mn:000045FC                 assume cs:_text$mn
.text$mn:000045FC                 ;org 45FCh
.text$mn:000045FC ; COMDAT (pick any)
.text$mn:000045FC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000045FC
.text$mn:000045FC ; =============== S U B R O U T I N E =======================================
.text$mn:000045FC
.text$mn:000045FC ; Attributes: bp-based frame
.text$mn:000045FC
.text$mn:000045FC ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Copy(unsigned int, unsigned int)
.text$mn:000045FC                 public ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:000045FC ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$mn:000045FC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+37p
.text$mn:000045FC
.text$mn:000045FC var_20          = dword ptr -20h
.text$mn:000045FC var_1C          = dword ptr -1Ch
.text$mn:000045FC var_18          = dword ptr -18h
.text$mn:000045FC var_11          = byte ptr -11h
.text$mn:000045FC var_10          = dword ptr -10h
.text$mn:000045FC var_C           = byte ptr -0Ch
.text$mn:000045FC var_4           = dword ptr -4
.text$mn:000045FC arg_0           = dword ptr  8
.text$mn:000045FC
.text$mn:000045FC ; FUNCTION CHUNK AT .text$mn:0000471E SIZE 00000009 BYTES
.text$mn:000045FC
.text$mn:000045FC                 push    ebp
.text$mn:000045FD                 mov     ebp, esp
.text$mn:000045FF                 push    0FFFFFFFFh
.text$mn:00004601                 push    offset __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00004606                 mov     eax, large fs:0
.text$mn:0000460C                 push    eax
.text$mn:0000460D                 push    ecx
.text$mn:0000460E                 sub     esp, 10h
.text$mn:00004611                 push    ebx
.text$mn:00004612                 push    esi
.text$mn:00004613                 push    edi
.text$mn:00004614                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004619                 xor     eax, ebp
.text$mn:0000461B                 push    eax
.text$mn:0000461C                 lea     eax, [ebp+var_C]
.text$mn:0000461F                 mov     large fs:0, eax
.text$mn:00004625                 mov     [ebp+var_10], esp
.text$mn:00004628                 mov     [ebp+var_18], ecx
.text$mn:0000462B                 mov     eax, [ebp+arg_0]
.text$mn:0000462E                 or      eax, 0Fh
.text$mn:00004631                 mov     [ebp+var_1C], eax
.text$mn:00004634                 mov     ecx, [ebp+var_18]
.text$mn:00004637                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:0000463C                 cmp     eax, [ebp+var_1C]
.text$mn:0000463F                 jnb     short loc_4649
.text$mn:00004641                 mov     ecx, [ebp+arg_0]
.text$mn:00004644                 mov     [ebp+var_1C], ecx
.text$mn:00004647                 jmp     short loc_469B
.text$mn:00004649 ; ---------------------------------------------------------------------------
.text$mn:00004649
.text$mn:00004649 loc_4649:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+43j
.text$mn:00004649                 mov     edx, [ebp+var_18]
.text$mn:0000464C                 mov     ecx, [edx+18h]
.text$mn:0000464F                 shr     ecx, 1
.text$mn:00004651                 mov     eax, [ebp+var_1C]
.text$mn:00004654                 xor     edx, edx
.text$mn:00004656                 mov     esi, 3
.text$mn:0000465B                 div     esi
.text$mn:0000465D                 cmp     ecx, eax
.text$mn:0000465F                 ja      short loc_4663
.text$mn:00004661                 jmp     short loc_469B
.text$mn:00004663 ; ---------------------------------------------------------------------------
.text$mn:00004663
.text$mn:00004663 loc_4663:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+63j
.text$mn:00004663                 mov     ecx, [ebp+var_18]
.text$mn:00004666                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:0000466B                 mov     edx, [ebp+var_18]
.text$mn:0000466E                 mov     ecx, [edx+18h]
.text$mn:00004671                 shr     ecx, 1
.text$mn:00004673                 sub     eax, ecx
.text$mn:00004675                 mov     edx, [ebp+var_18]
.text$mn:00004678                 cmp     [edx+18h], eax
.text$mn:0000467B                 ja      short loc_4690
.text$mn:0000467D                 mov     eax, [ebp+var_18]
.text$mn:00004680                 mov     ecx, [eax+18h]
.text$mn:00004683                 shr     ecx, 1
.text$mn:00004685                 mov     edx, [ebp+var_18]
.text$mn:00004688                 add     ecx, [edx+18h]
.text$mn:0000468B                 mov     [ebp+var_1C], ecx
.text$mn:0000468E                 jmp     short loc_469B
.text$mn:00004690 ; ---------------------------------------------------------------------------
.text$mn:00004690
.text$mn:00004690 loc_4690:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+7Fj
.text$mn:00004690                 mov     ecx, [ebp+var_18]
.text$mn:00004693                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00004698                 mov     [ebp+var_1C], eax
.text$mn:0000469B
.text$mn:0000469B loc_469B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+4Bj
.text$mn:0000469B                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+65j ...
.text$mn:0000469B                 mov     [ebp+var_4], 0
.text$mn:000046A2                 mov     eax, [ebp+var_1C]
.text$mn:000046A5                 add     eax, 1
.text$mn:000046A8                 push    eax
.text$mn:000046A9                 lea     ecx, [ebp+var_11]
.text$mn:000046AC                 push    ecx
.text$mn:000046AD                 mov     ecx, [ebp+var_18]
.text$mn:000046B0                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000046B5                 mov     ecx, eax
.text$mn:000046B7                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:000046BC                 mov     [ebp+var_20], eax
.text$mn:000046BF                 jmp     short loc_471E
.text$mn:000046BF ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$mn:000046BF
.text$mn:000046C1
.text$mn:000046C1 ; =============== S U B R O U T I N E =======================================
.text$mn:000046C1
.text$mn:000046C1
.text$mn:000046C1 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
.text$mn:000046C1                                         ; DATA XREF: .xdata$x:00006920o
.text$mn:000046C1
.text$mn:000046C1 ; FUNCTION CHUNK AT .text$mn:00004708 SIZE 00000009 BYTES
.text$mn:000046C1 ; FUNCTION CHUNK AT .text$mn:00004718 SIZE 00000006 BYTES
.text$mn:000046C1
.text$mn:000046C1                 mov     [ebp-10h], esp
.text$mn:000046C4                 mov     edx, [ebp+8]
.text$mn:000046C7                 mov     [ebp-1Ch], edx
.text$mn:000046CA                 mov     byte ptr [ebp-4], 2
.text$mn:000046CE                 mov     eax, [ebp-1Ch]
.text$mn:000046D1                 add     eax, 1
.text$mn:000046D4                 push    eax
.text$mn:000046D5                 lea     ecx, [ebp-12h]
.text$mn:000046D8                 push    ecx
.text$mn:000046D9                 mov     ecx, [ebp-18h]
.text$mn:000046DC                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000046E1                 mov     ecx, eax
.text$mn:000046E3                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:000046E8                 mov     [ebp-20h], eax
.text$mn:000046EB                 jmp     short loc_4708
.text$mn:000046EB __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 endp
.text$mn:000046EB
.text$mn:000046ED
.text$mn:000046ED ; =============== S U B R O U T I N E =======================================
.text$mn:000046ED
.text$mn:000046ED ; Attributes: noreturn
.text$mn:000046ED
.text$mn:000046ED __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
.text$mn:000046ED                                         ; DATA XREF: .xdata$x:00006930o
.text$mn:000046ED                 push    0               ; Size
.text$mn:000046EF                 push    1               ; char
.text$mn:000046F1                 mov     ecx, [ebp-18h]
.text$mn:000046F4                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:000046F9                 push    0
.text$mn:000046FB                 push    0
.text$mn:000046FD                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:000046FD __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 endp
.text$mn:000046FD
.text$mn:00004702 ; ---------------------------------------------------------------------------
.text$mn:00004702                 mov     eax, offset $LN17
.text$mn:00004707                 retn
.text$mn:00004708 ; ---------------------------------------------------------------------------
.text$mn:00004708 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00004708
.text$mn:00004708 loc_4708:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+2Aj
.text$mn:00004708                 mov     dword ptr [ebp-4], 1
.text$mn:0000470F                 jmp     short loc_4718
.text$mn:0000470F ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00004711
.text$mn:00004711 ; =============== S U B R O U T I N E =======================================
.text$mn:00004711
.text$mn:00004711
.text$mn:00004711 $LN17           proc near               ; DATA XREF: .text$mn:00004702o
.text$mn:00004711                 mov     dword ptr [ebp-4], 1
.text$mn:00004711 $LN17           endp ; sp-analysis failed
.text$mn:00004711
.text$mn:00004718 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00004718
.text$mn:00004718 loc_4718:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+4Ej
.text$mn:00004718                 mov     eax, offset $LN19
.text$mn:0000471D                 retn
.text$mn:0000471D ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:0000471E ; ---------------------------------------------------------------------------
.text$mn:0000471E ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:0000471E
.text$mn:0000471E loc_471E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+C3j
.text$mn:0000471E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004725                 jmp     short loc_472E
.text$mn:00004725 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00004727
.text$mn:00004727 ; =============== S U B R O U T I N E =======================================
.text$mn:00004727
.text$mn:00004727
.text$mn:00004727 $LN19           proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:loc_4718o
.text$mn:00004727                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:0000472E
.text$mn:0000472E loc_472E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+129j
.text$mn:0000472E                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:00004732                 jbe     short loc_474D
.text$mn:00004734                 mov     edx, [ebp+0Ch]
.text$mn:00004737                 push    edx             ; Size
.text$mn:00004738                 mov     ecx, [ebp-18h]
.text$mn:0000473B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00004740                 push    eax             ; Src
.text$mn:00004741                 mov     eax, [ebp-20h]
.text$mn:00004744                 push    eax             ; Dst
.text$mn:00004745                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:0000474A                 add     esp, 0Ch
.text$mn:0000474D
.text$mn:0000474D loc_474D:                               ; CODE XREF: $LN19+Bj
.text$mn:0000474D                 push    0               ; Size
.text$mn:0000474F                 push    1               ; char
.text$mn:00004751                 mov     ecx, [ebp-18h]
.text$mn:00004754                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00004759                 lea     ecx, [ebp-20h]
.text$mn:0000475C                 push    ecx             ; int
.text$mn:0000475D                 mov     edx, [ebp-18h]
.text$mn:00004760                 add     edx, 4
.text$mn:00004763                 push    edx             ; void *
.text$mn:00004764                 lea     eax, [ebp-13h]
.text$mn:00004767                 push    eax
.text$mn:00004768                 mov     ecx, [ebp-18h]
.text$mn:0000476B                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00004770                 mov     ecx, eax
.text$mn:00004772                 call    ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)
.text$mn:00004777                 mov     ecx, [ebp-18h]
.text$mn:0000477A                 mov     edx, [ebp-1Ch]
.text$mn:0000477D                 mov     [ecx+18h], edx
.text$mn:00004780                 mov     eax, [ebp+0Ch]
.text$mn:00004783                 push    eax
.text$mn:00004784                 mov     ecx, [ebp-18h]
.text$mn:00004787                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000478C                 mov     ecx, [ebp-0Ch]
.text$mn:0000478F                 mov     large fs:0, ecx
.text$mn:00004796                 pop     ecx
.text$mn:00004797                 pop     edi
.text$mn:00004798                 pop     esi
.text$mn:00004799                 pop     ebx
.text$mn:0000479A                 mov     esp, ebp
.text$mn:0000479C                 pop     ebp
.text$mn:0000479D                 retn    8
.text$mn:0000479D $LN19           endp ; sp-analysis failed
.text$mn:0000479D
.text$mn:0000479D _text$mn        ends
.text$mn:0000479D
.text$x:000047A0 ; ===========================================================================
.text$x:000047A0
.text$x:000047A0 ; Segment type: Pure code
.text$x:000047A0 ; Segment permissions: Read/Execute
.text$x:000047A0 _text$x         segment para public 'CODE' use32
.text$x:000047A0                 assume cs:_text$x
.text$x:000047A0                 ;org 47A0h
.text$x:000047A0 ; COMDAT (pick associative to section at 45FC)
.text$x:000047A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:000047A0
.text$x:000047A0 ; =============== S U B R O U T I N E =======================================
.text$x:000047A0
.text$x:000047A0
.text$x:000047A0 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$x:000047A0                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+5o
.text$x:000047A0
.text$x:000047A0 arg_4           = dword ptr  8
.text$x:000047A0
.text$x:000047A0                 mov     edx, [esp+arg_4]
.text$x:000047A4                 lea     eax, [edx+0Ch]
.text$x:000047A7                 mov     ecx, [edx-24h]
.text$x:000047AA                 xor     ecx, eax
.text$x:000047AC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000047B1                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$x:000047B6                 jmp     ___CxxFrameHandler3
.text$x:000047B6 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$x:000047B6
.text$x:000047B6 ; ---------------------------------------------------------------------------
.text$x:000047BB                 align 4
.text$x:000047BB _text$x         ends
.text$x:000047BB
.text$mn:000047BC ; ===========================================================================
.text$mn:000047BC
.text$mn:000047BC ; Segment type: Pure code
.text$mn:000047BC ; Segment permissions: Read/Execute
.text$mn:000047BC _text$mn        segment para public 'CODE' use32
.text$mn:000047BC                 assume cs:_text$mn
.text$mn:000047BC                 ;org 47BCh
.text$mn:000047BC ; COMDAT (pick any)
.text$mn:000047BC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000047BC
.text$mn:000047BC ; =============== S U B R O U T I N E =======================================
.text$mn:000047BC
.text$mn:000047BC ; Attributes: bp-based frame
.text$mn:000047BC
.text$mn:000047BC ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Copy(unsigned int, unsigned int)
.text$mn:000047BC                 public ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:000047BC ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$mn:000047BC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+37p
.text$mn:000047BC
.text$mn:000047BC var_20          = dword ptr -20h
.text$mn:000047BC var_1C          = dword ptr -1Ch
.text$mn:000047BC var_18          = dword ptr -18h
.text$mn:000047BC var_11          = byte ptr -11h
.text$mn:000047BC var_10          = dword ptr -10h
.text$mn:000047BC var_C           = byte ptr -0Ch
.text$mn:000047BC var_4           = dword ptr -4
.text$mn:000047BC arg_0           = dword ptr  8
.text$mn:000047BC
.text$mn:000047BC ; FUNCTION CHUNK AT .text$mn:000048DE SIZE 00000009 BYTES
.text$mn:000047BC
.text$mn:000047BC                 push    ebp
.text$mn:000047BD                 mov     ebp, esp
.text$mn:000047BF                 push    0FFFFFFFFh
.text$mn:000047C1                 push    offset __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:000047C6                 mov     eax, large fs:0
.text$mn:000047CC                 push    eax
.text$mn:000047CD                 push    ecx
.text$mn:000047CE                 sub     esp, 10h
.text$mn:000047D1                 push    ebx
.text$mn:000047D2                 push    esi
.text$mn:000047D3                 push    edi
.text$mn:000047D4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000047D9                 xor     eax, ebp
.text$mn:000047DB                 push    eax
.text$mn:000047DC                 lea     eax, [ebp+var_C]
.text$mn:000047DF                 mov     large fs:0, eax
.text$mn:000047E5                 mov     [ebp+var_10], esp
.text$mn:000047E8                 mov     [ebp+var_18], ecx
.text$mn:000047EB                 mov     eax, [ebp+arg_0]
.text$mn:000047EE                 or      eax, 7
.text$mn:000047F1                 mov     [ebp+var_1C], eax
.text$mn:000047F4                 mov     ecx, [ebp+var_18]
.text$mn:000047F7                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:000047FC                 cmp     eax, [ebp+var_1C]
.text$mn:000047FF                 jnb     short loc_4809
.text$mn:00004801                 mov     ecx, [ebp+arg_0]
.text$mn:00004804                 mov     [ebp+var_1C], ecx
.text$mn:00004807                 jmp     short loc_485B
.text$mn:00004809 ; ---------------------------------------------------------------------------
.text$mn:00004809
.text$mn:00004809 loc_4809:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+43j
.text$mn:00004809                 mov     edx, [ebp+var_18]
.text$mn:0000480C                 mov     ecx, [edx+18h]
.text$mn:0000480F                 shr     ecx, 1
.text$mn:00004811                 mov     eax, [ebp+var_1C]
.text$mn:00004814                 xor     edx, edx
.text$mn:00004816                 mov     esi, 3
.text$mn:0000481B                 div     esi
.text$mn:0000481D                 cmp     ecx, eax
.text$mn:0000481F                 ja      short loc_4823
.text$mn:00004821                 jmp     short loc_485B
.text$mn:00004823 ; ---------------------------------------------------------------------------
.text$mn:00004823
.text$mn:00004823 loc_4823:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+63j
.text$mn:00004823                 mov     ecx, [ebp+var_18]
.text$mn:00004826                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:0000482B                 mov     edx, [ebp+var_18]
.text$mn:0000482E                 mov     ecx, [edx+18h]
.text$mn:00004831                 shr     ecx, 1
.text$mn:00004833                 sub     eax, ecx
.text$mn:00004835                 mov     edx, [ebp+var_18]
.text$mn:00004838                 cmp     [edx+18h], eax
.text$mn:0000483B                 ja      short loc_4850
.text$mn:0000483D                 mov     eax, [ebp+var_18]
.text$mn:00004840                 mov     ecx, [eax+18h]
.text$mn:00004843                 shr     ecx, 1
.text$mn:00004845                 mov     edx, [ebp+var_18]
.text$mn:00004848                 add     ecx, [edx+18h]
.text$mn:0000484B                 mov     [ebp+var_1C], ecx
.text$mn:0000484E                 jmp     short loc_485B
.text$mn:00004850 ; ---------------------------------------------------------------------------
.text$mn:00004850
.text$mn:00004850 loc_4850:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+7Fj
.text$mn:00004850                 mov     ecx, [ebp+var_18]
.text$mn:00004853                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00004858                 mov     [ebp+var_1C], eax
.text$mn:0000485B
.text$mn:0000485B loc_485B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+4Bj
.text$mn:0000485B                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+65j ...
.text$mn:0000485B                 mov     [ebp+var_4], 0
.text$mn:00004862                 mov     eax, [ebp+var_1C]
.text$mn:00004865                 add     eax, 1
.text$mn:00004868                 push    eax
.text$mn:00004869                 lea     ecx, [ebp+var_11]
.text$mn:0000486C                 push    ecx
.text$mn:0000486D                 mov     ecx, [ebp+var_18]
.text$mn:00004870                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00004875                 mov     ecx, eax
.text$mn:00004877                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:0000487C                 mov     [ebp+var_20], eax
.text$mn:0000487F                 jmp     short loc_48DE
.text$mn:0000487F ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$mn:0000487F
.text$mn:00004881
.text$mn:00004881 ; =============== S U B R O U T I N E =======================================
.text$mn:00004881
.text$mn:00004881
.text$mn:00004881 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 proc near
.text$mn:00004881                                         ; DATA XREF: .xdata$x:00006C6Co
.text$mn:00004881
.text$mn:00004881 ; FUNCTION CHUNK AT .text$mn:000048C8 SIZE 00000009 BYTES
.text$mn:00004881 ; FUNCTION CHUNK AT .text$mn:000048D8 SIZE 00000006 BYTES
.text$mn:00004881
.text$mn:00004881                 mov     [ebp-10h], esp
.text$mn:00004884                 mov     edx, [ebp+8]
.text$mn:00004887                 mov     [ebp-1Ch], edx
.text$mn:0000488A                 mov     byte ptr [ebp-4], 2
.text$mn:0000488E                 mov     eax, [ebp-1Ch]
.text$mn:00004891                 add     eax, 1
.text$mn:00004894                 push    eax
.text$mn:00004895                 lea     ecx, [ebp-12h]
.text$mn:00004898                 push    ecx
.text$mn:00004899                 mov     ecx, [ebp-18h]
.text$mn:0000489C                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000048A1                 mov     ecx, eax
.text$mn:000048A3                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:000048A8                 mov     [ebp-20h], eax
.text$mn:000048AB                 jmp     short loc_48C8
.text$mn:000048AB __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 endp
.text$mn:000048AB
.text$mn:000048AD
.text$mn:000048AD ; =============== S U B R O U T I N E =======================================
.text$mn:000048AD
.text$mn:000048AD ; Attributes: noreturn
.text$mn:000048AD
.text$mn:000048AD __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 proc near
.text$mn:000048AD                                         ; DATA XREF: .xdata$x:00006C7Co
.text$mn:000048AD                 push    0
.text$mn:000048AF                 push    1
.text$mn:000048B1                 mov     ecx, [ebp-18h]
.text$mn:000048B4                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000048B9                 push    0
.text$mn:000048BB                 push    0
.text$mn:000048BD                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:000048BD __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 endp
.text$mn:000048BD
.text$mn:000048C2 ; ---------------------------------------------------------------------------
.text$mn:000048C2                 mov     eax, offset $LN17_0
.text$mn:000048C7                 retn
.text$mn:000048C8 ; ---------------------------------------------------------------------------
.text$mn:000048C8 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:000048C8
.text$mn:000048C8 loc_48C8:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+2Aj
.text$mn:000048C8                 mov     dword ptr [ebp-4], 1
.text$mn:000048CF                 jmp     short loc_48D8
.text$mn:000048CF ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:000048D1
.text$mn:000048D1 ; =============== S U B R O U T I N E =======================================
.text$mn:000048D1
.text$mn:000048D1
.text$mn:000048D1 $LN17_0         proc near               ; DATA XREF: .text$mn:000048C2o
.text$mn:000048D1                 mov     dword ptr [ebp-4], 1
.text$mn:000048D1 $LN17_0         endp ; sp-analysis failed
.text$mn:000048D1
.text$mn:000048D8 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:000048D8
.text$mn:000048D8 loc_48D8:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+4Ej
.text$mn:000048D8                 mov     eax, offset $LN19_0
.text$mn:000048DD                 retn
.text$mn:000048DD ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:000048DE ; ---------------------------------------------------------------------------
.text$mn:000048DE ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:000048DE
.text$mn:000048DE loc_48DE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+C3j
.text$mn:000048DE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000048E5                 jmp     short loc_48EE
.text$mn:000048E5 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:000048E7
.text$mn:000048E7 ; =============== S U B R O U T I N E =======================================
.text$mn:000048E7
.text$mn:000048E7
.text$mn:000048E7 $LN19_0         proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0:loc_48D8o
.text$mn:000048E7                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:000048EE
.text$mn:000048EE loc_48EE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+129j
.text$mn:000048EE                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:000048F2                 jbe     short loc_490D
.text$mn:000048F4                 mov     edx, [ebp+0Ch]
.text$mn:000048F7                 push    edx             ; int
.text$mn:000048F8                 mov     ecx, [ebp-18h]
.text$mn:000048FB                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00004900                 push    eax             ; Src
.text$mn:00004901                 mov     eax, [ebp-20h]
.text$mn:00004904                 push    eax             ; Dst
.text$mn:00004905                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000490A                 add     esp, 0Ch
.text$mn:0000490D
.text$mn:0000490D loc_490D:                               ; CODE XREF: $LN19_0+Bj
.text$mn:0000490D                 push    0
.text$mn:0000490F                 push    1
.text$mn:00004911                 mov     ecx, [ebp-18h]
.text$mn:00004914                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00004919                 lea     ecx, [ebp-20h]
.text$mn:0000491C                 push    ecx             ; int
.text$mn:0000491D                 mov     edx, [ebp-18h]
.text$mn:00004920                 add     edx, 4
.text$mn:00004923                 push    edx             ; void *
.text$mn:00004924                 lea     eax, [ebp-13h]
.text$mn:00004927                 push    eax
.text$mn:00004928                 mov     ecx, [ebp-18h]
.text$mn:0000492B                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00004930                 mov     ecx, eax
.text$mn:00004932                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00004937                 mov     ecx, [ebp-18h]
.text$mn:0000493A                 mov     edx, [ebp-1Ch]
.text$mn:0000493D                 mov     [ecx+18h], edx
.text$mn:00004940                 mov     eax, [ebp+0Ch]
.text$mn:00004943                 push    eax
.text$mn:00004944                 mov     ecx, [ebp-18h]
.text$mn:00004947                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000494C                 mov     ecx, [ebp-0Ch]
.text$mn:0000494F                 mov     large fs:0, ecx
.text$mn:00004956                 pop     ecx
.text$mn:00004957                 pop     edi
.text$mn:00004958                 pop     esi
.text$mn:00004959                 pop     ebx
.text$mn:0000495A                 mov     esp, ebp
.text$mn:0000495C                 pop     ebp
.text$mn:0000495D                 retn    8
.text$mn:0000495D $LN19_0         endp ; sp-analysis failed
.text$mn:0000495D
.text$mn:0000495D _text$mn        ends
.text$mn:0000495D
.text$x:00004960 ; ===========================================================================
.text$x:00004960
.text$x:00004960 ; Segment type: Pure code
.text$x:00004960 ; Segment permissions: Read/Execute
.text$x:00004960 _text$x         segment para public 'CODE' use32
.text$x:00004960                 assume cs:_text$x
.text$x:00004960                 ;org 4960h
.text$x:00004960 ; COMDAT (pick associative to section at 47BC)
.text$x:00004960                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:00004960
.text$x:00004960 ; =============== S U B R O U T I N E =======================================
.text$x:00004960
.text$x:00004960
.text$x:00004960 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$x:00004960                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+5o
.text$x:00004960
.text$x:00004960 arg_4           = dword ptr  8
.text$x:00004960
.text$x:00004960                 mov     edx, [esp+arg_4]
.text$x:00004964                 lea     eax, [edx+0Ch]
.text$x:00004967                 mov     ecx, [edx-24h]
.text$x:0000496A                 xor     ecx, eax
.text$x:0000496C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004971                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$x:00004976                 jmp     ___CxxFrameHandler3
.text$x:00004976 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$x:00004976
.text$x:00004976 ; ---------------------------------------------------------------------------
.text$x:0000497B                 align 4
.text$x:0000497B _text$x         ends
.text$x:0000497B
.text$mn:0000497C ; ===========================================================================
.text$mn:0000497C
.text$mn:0000497C ; Segment type: Pure code
.text$mn:0000497C ; Segment permissions: Read/Execute
.text$mn:0000497C _text$mn        segment para public 'CODE' use32
.text$mn:0000497C                 assume cs:_text$mn
.text$mn:0000497C                 ;org 497Ch
.text$mn:0000497C ; COMDAT (pick any)
.text$mn:0000497C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:0000497C
.text$mn:0000497C ; =============== S U B R O U T I N E =======================================
.text$mn:0000497C
.text$mn:0000497C ; Attributes: bp-based frame
.text$mn:0000497C
.text$mn:0000497C ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Eos(unsigned int)
.text$mn:0000497C                 public ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
.text$mn:0000497C ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc near
.text$mn:0000497C                                         ; CODE XREF: $LN19+60p
.text$mn:0000497C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+83p ...
.text$mn:0000497C
.text$mn:0000497C var_8           = dword ptr -8
.text$mn:0000497C var_1           = byte ptr -1
.text$mn:0000497C arg_0           = dword ptr  8
.text$mn:0000497C
.text$mn:0000497C                 push    ebp
.text$mn:0000497D                 mov     ebp, esp
.text$mn:0000497F                 sub     esp, 8
.text$mn:00004982                 mov     [ebp+var_8], ecx
.text$mn:00004985                 mov     [ebp+var_1], 0
.text$mn:00004989                 mov     eax, [ebp+var_8]
.text$mn:0000498C                 mov     ecx, [ebp+arg_0]
.text$mn:0000498F                 mov     [eax+14h], ecx
.text$mn:00004992                 lea     edx, [ebp+var_1]
.text$mn:00004995                 push    edx
.text$mn:00004996                 mov     ecx, [ebp+var_8]
.text$mn:00004999                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000499E                 add     eax, [ebp+arg_0]
.text$mn:000049A1                 push    eax
.text$mn:000049A2                 call    ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign(char &,char const &)
.text$mn:000049A7                 add     esp, 8
.text$mn:000049AA                 mov     esp, ebp
.text$mn:000049AC                 pop     ebp
.text$mn:000049AD                 retn    4
.text$mn:000049AD ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z endp
.text$mn:000049AD
.text$mn:000049AD _text$mn        ends
.text$mn:000049AD
.text$mn:000049B0 ; ===========================================================================
.text$mn:000049B0
.text$mn:000049B0 ; Segment type: Pure code
.text$mn:000049B0 ; Segment permissions: Read/Execute
.text$mn:000049B0 _text$mn        segment para public 'CODE' use32
.text$mn:000049B0                 assume cs:_text$mn
.text$mn:000049B0                 ;org 49B0h
.text$mn:000049B0 ; COMDAT (pick any)
.text$mn:000049B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000049B0
.text$mn:000049B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000049B0
.text$mn:000049B0 ; Attributes: bp-based frame
.text$mn:000049B0
.text$mn:000049B0 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Eos(unsigned int)
.text$mn:000049B0                 public ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
.text$mn:000049B0 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z proc near
.text$mn:000049B0                                         ; CODE XREF: $LN19_0+60p
.text$mn:000049B0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+83p ...
.text$mn:000049B0
.text$mn:000049B0 var_8           = dword ptr -8
.text$mn:000049B0 var_2           = word ptr -2
.text$mn:000049B0 arg_0           = dword ptr  8
.text$mn:000049B0
.text$mn:000049B0                 push    ebp
.text$mn:000049B1                 mov     ebp, esp
.text$mn:000049B3                 sub     esp, 8
.text$mn:000049B6                 mov     [ebp+var_8], ecx
.text$mn:000049B9                 xor     eax, eax
.text$mn:000049BB                 mov     [ebp+var_2], ax
.text$mn:000049BF                 mov     ecx, [ebp+var_8]
.text$mn:000049C2                 mov     edx, [ebp+arg_0]
.text$mn:000049C5                 mov     [ecx+14h], edx
.text$mn:000049C8                 lea     eax, [ebp+var_2]
.text$mn:000049CB                 push    eax
.text$mn:000049CC                 mov     ecx, [ebp+var_8]
.text$mn:000049CF                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000049D4                 mov     ecx, [ebp+arg_0]
.text$mn:000049D7                 lea     edx, [eax+ecx*2]
.text$mn:000049DA                 push    edx
.text$mn:000049DB                 call    ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ; std::char_traits<wchar_t>::assign(wchar_t &,wchar_t const &)
.text$mn:000049E0                 add     esp, 8
.text$mn:000049E3                 mov     esp, ebp
.text$mn:000049E5                 pop     ebp
.text$mn:000049E6                 retn    4
.text$mn:000049E6 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z endp
.text$mn:000049E6
.text$mn:000049E6 ; ---------------------------------------------------------------------------
.text$mn:000049E9                 align 4
.text$mn:000049E9 _text$mn        ends
.text$mn:000049E9
.text$mn:000049EC ; ===========================================================================
.text$mn:000049EC
.text$mn:000049EC ; Segment type: Pure code
.text$mn:000049EC ; Segment permissions: Read/Execute
.text$mn:000049EC _text$mn        segment para public 'CODE' use32
.text$mn:000049EC                 assume cs:_text$mn
.text$mn:000049EC                 ;org 49ECh
.text$mn:000049EC ; COMDAT (pick any)
.text$mn:000049EC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000049EC
.text$mn:000049EC ; =============== S U B R O U T I N E =======================================
.text$mn:000049EC
.text$mn:000049EC ; Attributes: bp-based frame
.text$mn:000049EC
.text$mn:000049EC ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Free_proxy(void)
.text$mn:000049EC                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:000049EC ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:000049EC                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+30p
.text$mn:000049EC
.text$mn:000049EC var_8           = dword ptr -8
.text$mn:000049EC var_1           = byte ptr -1
.text$mn:000049EC
.text$mn:000049EC                 push    ebp
.text$mn:000049ED                 mov     ebp, esp
.text$mn:000049EF                 sub     esp, 8
.text$mn:000049F2                 mov     [ebp+var_8], ecx
.text$mn:000049F5                 lea     ecx, [ebp+var_1]
.text$mn:000049F8                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:000049FD                 mov     ecx, [ebp+var_8] ; this
.text$mn:00004A00                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00004A05                 mov     eax, [ebp+var_8]
.text$mn:00004A08                 mov     ecx, [eax]
.text$mn:00004A0A                 push    ecx
.text$mn:00004A0B                 lea     ecx, [ebp+var_1]
.text$mn:00004A0E                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:00004A13                 push    1               ; int
.text$mn:00004A15                 mov     edx, [ebp+var_8]
.text$mn:00004A18                 mov     eax, [edx]
.text$mn:00004A1A                 push    eax             ; void *
.text$mn:00004A1B                 lea     ecx, [ebp+var_1]
.text$mn:00004A1E                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:00004A23                 mov     ecx, [ebp+var_8]
.text$mn:00004A26                 mov     dword ptr [ecx], 0
.text$mn:00004A2C                 mov     esp, ebp
.text$mn:00004A2E                 pop     ebp
.text$mn:00004A2F                 retn
.text$mn:00004A2F ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:00004A2F
.text$mn:00004A2F _text$mn        ends
.text$mn:00004A2F
.text$mn:00004A30 ; ===========================================================================
.text$mn:00004A30
.text$mn:00004A30 ; Segment type: Pure code
.text$mn:00004A30 ; Segment permissions: Read/Execute
.text$mn:00004A30 _text$mn        segment para public 'CODE' use32
.text$mn:00004A30                 assume cs:_text$mn
.text$mn:00004A30                 ;org 4A30h
.text$mn:00004A30 ; COMDAT (pick any)
.text$mn:00004A30                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004A30
.text$mn:00004A30 ; =============== S U B R O U T I N E =======================================
.text$mn:00004A30
.text$mn:00004A30 ; Attributes: bp-based frame
.text$mn:00004A30
.text$mn:00004A30 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:00004A30                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:00004A30 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00004A30                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+30p
.text$mn:00004A30
.text$mn:00004A30 var_8           = dword ptr -8
.text$mn:00004A30 var_1           = byte ptr -1
.text$mn:00004A30
.text$mn:00004A30                 push    ebp
.text$mn:00004A31                 mov     ebp, esp
.text$mn:00004A33                 sub     esp, 8
.text$mn:00004A36                 mov     [ebp+var_8], ecx
.text$mn:00004A39                 lea     ecx, [ebp+var_1]
.text$mn:00004A3C                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00004A41                 mov     ecx, [ebp+var_8] ; this
.text$mn:00004A44                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00004A49                 mov     eax, [ebp+var_8]
.text$mn:00004A4C                 mov     ecx, [eax]
.text$mn:00004A4E                 push    ecx
.text$mn:00004A4F                 lea     ecx, [ebp+var_1]
.text$mn:00004A52                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:00004A57                 push    1               ; int
.text$mn:00004A59                 mov     edx, [ebp+var_8]
.text$mn:00004A5C                 mov     eax, [edx]
.text$mn:00004A5E                 push    eax             ; void *
.text$mn:00004A5F                 lea     ecx, [ebp+var_1]
.text$mn:00004A62                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:00004A67                 mov     ecx, [ebp+var_8]
.text$mn:00004A6A                 mov     dword ptr [ecx], 0
.text$mn:00004A70                 mov     esp, ebp
.text$mn:00004A72                 pop     ebp
.text$mn:00004A73                 retn
.text$mn:00004A73 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:00004A73
.text$mn:00004A73 _text$mn        ends
.text$mn:00004A73
.text$mn:00004A74 ; ===========================================================================
.text$mn:00004A74
.text$mn:00004A74 ; Segment type: Pure code
.text$mn:00004A74 ; Segment permissions: Read/Execute
.text$mn:00004A74 _text$mn        segment para public 'CODE' use32
.text$mn:00004A74                 assume cs:_text$mn
.text$mn:00004A74                 ;org 4A74h
.text$mn:00004A74 ; COMDAT (pick any)
.text$mn:00004A74                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004A74
.text$mn:00004A74 ; =============== S U B R O U T I N E =======================================
.text$mn:00004A74
.text$mn:00004A74 ; Attributes: bp-based frame
.text$mn:00004A74
.text$mn:00004A74 ; public: struct std::_Wrap_alloc<class std::allocator<char>> __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Getal(void)const
.text$mn:00004A74                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
.text$mn:00004A74 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
.text$mn:00004A74                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+B4p
.text$mn:00004A74                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+1Bp ...
.text$mn:00004A74
.text$mn:00004A74 var_4           = dword ptr -4
.text$mn:00004A74 arg_0           = dword ptr  8
.text$mn:00004A74
.text$mn:00004A74                 push    ebp
.text$mn:00004A75                 mov     ebp, esp
.text$mn:00004A77                 push    ecx
.text$mn:00004A78                 mov     [ebp+var_4], ecx
.text$mn:00004A7B                 mov     ecx, [ebp+arg_0]
.text$mn:00004A7E                 call    ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)
.text$mn:00004A83                 mov     eax, [ebp+arg_0]
.text$mn:00004A86                 mov     esp, ebp
.text$mn:00004A88                 pop     ebp
.text$mn:00004A89                 retn    4
.text$mn:00004A89 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ endp
.text$mn:00004A89
.text$mn:00004A89 _text$mn        ends
.text$mn:00004A89
.text$mn:00004A8C ; ===========================================================================
.text$mn:00004A8C
.text$mn:00004A8C ; Segment type: Pure code
.text$mn:00004A8C ; Segment permissions: Read/Execute
.text$mn:00004A8C _text$mn        segment para public 'CODE' use32
.text$mn:00004A8C                 assume cs:_text$mn
.text$mn:00004A8C                 ;org 4A8Ch
.text$mn:00004A8C ; COMDAT (pick any)
.text$mn:00004A8C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004A8C
.text$mn:00004A8C ; =============== S U B R O U T I N E =======================================
.text$mn:00004A8C
.text$mn:00004A8C ; Attributes: bp-based frame
.text$mn:00004A8C
.text$mn:00004A8C ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Getal(void)const
.text$mn:00004A8C                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
.text$mn:00004A8C ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ proc near
.text$mn:00004A8C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+33p
.text$mn:00004A8C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+B4p ...
.text$mn:00004A8C
.text$mn:00004A8C var_4           = dword ptr -4
.text$mn:00004A8C arg_0           = dword ptr  8
.text$mn:00004A8C
.text$mn:00004A8C                 push    ebp
.text$mn:00004A8D                 mov     ebp, esp
.text$mn:00004A8F                 push    ecx
.text$mn:00004A90                 mov     [ebp+var_4], ecx
.text$mn:00004A93                 mov     ecx, [ebp+arg_0]
.text$mn:00004A96                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)
.text$mn:00004A9B                 mov     eax, [ebp+arg_0]
.text$mn:00004A9E                 mov     esp, ebp
.text$mn:00004AA0                 pop     ebp
.text$mn:00004AA1                 retn    4
.text$mn:00004AA1 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ endp
.text$mn:00004AA1
.text$mn:00004AA1 _text$mn        ends
.text$mn:00004AA1
.text$mn:00004AA4 ; ===========================================================================
.text$mn:00004AA4
.text$mn:00004AA4 ; Segment type: Pure code
.text$mn:00004AA4 ; Segment permissions: Read/Execute
.text$mn:00004AA4 _text$mn        segment para public 'CODE' use32
.text$mn:00004AA4                 assume cs:_text$mn
.text$mn:00004AA4                 ;org 4AA4h
.text$mn:00004AA4 ; COMDAT (pick any)
.text$mn:00004AA4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004AA4
.text$mn:00004AA4 ; =============== S U B R O U T I N E =======================================
.text$mn:00004AA4
.text$mn:00004AA4 ; Attributes: bp-based frame
.text$mn:00004AA4
.text$mn:00004AA4 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Grow(unsigned int, bool)
.text$mn:00004AA4                 public ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
.text$mn:00004AA4 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
.text$mn:00004AA4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+6Ap
.text$mn:00004AA4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+5Fp
.text$mn:00004AA4
.text$mn:00004AA4 var_C           = dword ptr -0Ch
.text$mn:00004AA4 Size            = dword ptr -8
.text$mn:00004AA4 var_4           = dword ptr -4
.text$mn:00004AA4 arg_0           = dword ptr  8
.text$mn:00004AA4 arg_4           = byte ptr  0Ch
.text$mn:00004AA4
.text$mn:00004AA4                 push    ebp
.text$mn:00004AA5                 mov     ebp, esp
.text$mn:00004AA7                 sub     esp, 0Ch
.text$mn:00004AAA                 mov     [ebp+var_4], ecx
.text$mn:00004AAD                 mov     ecx, [ebp+var_4]
.text$mn:00004AB0                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00004AB5                 cmp     eax, [ebp+arg_0]
.text$mn:00004AB8                 jnb     short loc_4AC2
.text$mn:00004ABA                 mov     ecx, [ebp+var_4]
.text$mn:00004ABD                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:00004AC2
.text$mn:00004AC2 loc_4AC2:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+14j
.text$mn:00004AC2                 mov     eax, [ebp+var_4]
.text$mn:00004AC5                 mov     ecx, [eax+18h]
.text$mn:00004AC8                 cmp     ecx, [ebp+arg_0]
.text$mn:00004ACB                 jnb     short loc_4AE2
.text$mn:00004ACD                 mov     edx, [ebp+var_4]
.text$mn:00004AD0                 mov     eax, [edx+14h]
.text$mn:00004AD3                 push    eax
.text$mn:00004AD4                 mov     ecx, [ebp+arg_0]
.text$mn:00004AD7                 push    ecx
.text$mn:00004AD8                 mov     ecx, [ebp+var_4]
.text$mn:00004ADB                 call    ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)
.text$mn:00004AE0                 jmp     short loc_4B2C
.text$mn:00004AE2 ; ---------------------------------------------------------------------------
.text$mn:00004AE2
.text$mn:00004AE2 loc_4AE2:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+27j
.text$mn:00004AE2                 movzx   edx, [ebp+arg_4]
.text$mn:00004AE6                 test    edx, edx
.text$mn:00004AE8                 jz      short loc_4B1C
.text$mn:00004AEA                 cmp     [ebp+arg_0], 10h
.text$mn:00004AEE                 jnb     short loc_4B1C
.text$mn:00004AF0                 mov     eax, [ebp+var_4]
.text$mn:00004AF3                 mov     ecx, [ebp+arg_0]
.text$mn:00004AF6                 cmp     ecx, [eax+14h]
.text$mn:00004AF9                 jnb     short loc_4B03
.text$mn:00004AFB                 mov     edx, [ebp+arg_0]
.text$mn:00004AFE                 mov     [ebp+Size], edx
.text$mn:00004B01                 jmp     short loc_4B0C
.text$mn:00004B03 ; ---------------------------------------------------------------------------
.text$mn:00004B03
.text$mn:00004B03 loc_4B03:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+55j
.text$mn:00004B03                 mov     eax, [ebp+var_4]
.text$mn:00004B06                 mov     ecx, [eax+14h]
.text$mn:00004B09                 mov     [ebp+Size], ecx
.text$mn:00004B0C
.text$mn:00004B0C loc_4B0C:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+5Dj
.text$mn:00004B0C                 mov     edx, [ebp+Size]
.text$mn:00004B0F                 push    edx             ; Size
.text$mn:00004B10                 push    1               ; char
.text$mn:00004B12                 mov     ecx, [ebp+var_4]
.text$mn:00004B15                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00004B1A                 jmp     short loc_4B2C
.text$mn:00004B1C ; ---------------------------------------------------------------------------
.text$mn:00004B1C
.text$mn:00004B1C loc_4B1C:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+44j
.text$mn:00004B1C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+4Aj
.text$mn:00004B1C                 cmp     [ebp+arg_0], 0
.text$mn:00004B20                 jnz     short loc_4B2C
.text$mn:00004B22                 push    0
.text$mn:00004B24                 mov     ecx, [ebp+var_4]
.text$mn:00004B27                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00004B2C
.text$mn:00004B2C loc_4B2C:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+3Cj
.text$mn:00004B2C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+76j ...
.text$mn:00004B2C                 cmp     [ebp+arg_0], 0
.text$mn:00004B30                 jbe     short loc_4B3B
.text$mn:00004B32                 mov     [ebp+var_C], 1
.text$mn:00004B39                 jmp     short loc_4B42
.text$mn:00004B3B ; ---------------------------------------------------------------------------
.text$mn:00004B3B
.text$mn:00004B3B loc_4B3B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+8Cj
.text$mn:00004B3B                 mov     [ebp+var_C], 0
.text$mn:00004B42
.text$mn:00004B42 loc_4B42:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+95j
.text$mn:00004B42                 mov     al, byte ptr [ebp+var_C]
.text$mn:00004B45                 mov     esp, ebp
.text$mn:00004B47                 pop     ebp
.text$mn:00004B48                 retn    8
.text$mn:00004B48 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z endp
.text$mn:00004B48
.text$mn:00004B48 ; ---------------------------------------------------------------------------
.text$mn:00004B4B                 align 4
.text$mn:00004B4B _text$mn        ends
.text$mn:00004B4B
.text$mn:00004B4C ; ===========================================================================
.text$mn:00004B4C
.text$mn:00004B4C ; Segment type: Pure code
.text$mn:00004B4C ; Segment permissions: Read/Execute
.text$mn:00004B4C _text$mn        segment para public 'CODE' use32
.text$mn:00004B4C                 assume cs:_text$mn
.text$mn:00004B4C                 ;org 4B4Ch
.text$mn:00004B4C ; COMDAT (pick any)
.text$mn:00004B4C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004B4C
.text$mn:00004B4C ; =============== S U B R O U T I N E =======================================
.text$mn:00004B4C
.text$mn:00004B4C ; Attributes: bp-based frame
.text$mn:00004B4C
.text$mn:00004B4C ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Grow(unsigned int, bool)
.text$mn:00004B4C                 public ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z
.text$mn:00004B4C ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z proc near
.text$mn:00004B4C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+6Ap
.text$mn:00004B4C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+61p ...
.text$mn:00004B4C
.text$mn:00004B4C var_C           = dword ptr -0Ch
.text$mn:00004B4C var_8           = dword ptr -8
.text$mn:00004B4C var_4           = dword ptr -4
.text$mn:00004B4C arg_0           = dword ptr  8
.text$mn:00004B4C arg_4           = byte ptr  0Ch
.text$mn:00004B4C
.text$mn:00004B4C                 push    ebp
.text$mn:00004B4D                 mov     ebp, esp
.text$mn:00004B4F                 sub     esp, 0Ch
.text$mn:00004B52                 mov     [ebp+var_4], ecx
.text$mn:00004B55                 mov     ecx, [ebp+var_4]
.text$mn:00004B58                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00004B5D                 cmp     eax, [ebp+arg_0]
.text$mn:00004B60                 jnb     short loc_4B6A
.text$mn:00004B62                 mov     ecx, [ebp+var_4]
.text$mn:00004B65                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:00004B6A
.text$mn:00004B6A loc_4B6A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+14j
.text$mn:00004B6A                 mov     eax, [ebp+var_4]
.text$mn:00004B6D                 mov     ecx, [eax+18h]
.text$mn:00004B70                 cmp     ecx, [ebp+arg_0]
.text$mn:00004B73                 jnb     short loc_4B8A
.text$mn:00004B75                 mov     edx, [ebp+var_4]
.text$mn:00004B78                 mov     eax, [edx+14h]
.text$mn:00004B7B                 push    eax
.text$mn:00004B7C                 mov     ecx, [ebp+arg_0]
.text$mn:00004B7F                 push    ecx
.text$mn:00004B80                 mov     ecx, [ebp+var_4]
.text$mn:00004B83                 call    ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)
.text$mn:00004B88                 jmp     short loc_4BD4
.text$mn:00004B8A ; ---------------------------------------------------------------------------
.text$mn:00004B8A
.text$mn:00004B8A loc_4B8A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+27j
.text$mn:00004B8A                 movzx   edx, [ebp+arg_4]
.text$mn:00004B8E                 test    edx, edx
.text$mn:00004B90                 jz      short loc_4BC4
.text$mn:00004B92                 cmp     [ebp+arg_0], 8
.text$mn:00004B96                 jnb     short loc_4BC4
.text$mn:00004B98                 mov     eax, [ebp+var_4]
.text$mn:00004B9B                 mov     ecx, [ebp+arg_0]
.text$mn:00004B9E                 cmp     ecx, [eax+14h]
.text$mn:00004BA1                 jnb     short loc_4BAB
.text$mn:00004BA3                 mov     edx, [ebp+arg_0]
.text$mn:00004BA6                 mov     [ebp+var_8], edx
.text$mn:00004BA9                 jmp     short loc_4BB4
.text$mn:00004BAB ; ---------------------------------------------------------------------------
.text$mn:00004BAB
.text$mn:00004BAB loc_4BAB:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+55j
.text$mn:00004BAB                 mov     eax, [ebp+var_4]
.text$mn:00004BAE                 mov     ecx, [eax+14h]
.text$mn:00004BB1                 mov     [ebp+var_8], ecx
.text$mn:00004BB4
.text$mn:00004BB4 loc_4BB4:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+5Dj
.text$mn:00004BB4                 mov     edx, [ebp+var_8]
.text$mn:00004BB7                 push    edx
.text$mn:00004BB8                 push    1
.text$mn:00004BBA                 mov     ecx, [ebp+var_4]
.text$mn:00004BBD                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00004BC2                 jmp     short loc_4BD4
.text$mn:00004BC4 ; ---------------------------------------------------------------------------
.text$mn:00004BC4
.text$mn:00004BC4 loc_4BC4:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+44j
.text$mn:00004BC4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+4Aj
.text$mn:00004BC4                 cmp     [ebp+arg_0], 0
.text$mn:00004BC8                 jnz     short loc_4BD4
.text$mn:00004BCA                 push    0
.text$mn:00004BCC                 mov     ecx, [ebp+var_4]
.text$mn:00004BCF                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00004BD4
.text$mn:00004BD4 loc_4BD4:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+3Cj
.text$mn:00004BD4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+76j ...
.text$mn:00004BD4                 cmp     [ebp+arg_0], 0
.text$mn:00004BD8                 jbe     short loc_4BE3
.text$mn:00004BDA                 mov     [ebp+var_C], 1
.text$mn:00004BE1                 jmp     short loc_4BEA
.text$mn:00004BE3 ; ---------------------------------------------------------------------------
.text$mn:00004BE3
.text$mn:00004BE3 loc_4BE3:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+8Cj
.text$mn:00004BE3                 mov     [ebp+var_C], 0
.text$mn:00004BEA
.text$mn:00004BEA loc_4BEA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+95j
.text$mn:00004BEA                 mov     al, byte ptr [ebp+var_C]
.text$mn:00004BED                 mov     esp, ebp
.text$mn:00004BEF                 pop     ebp
.text$mn:00004BF0                 retn    8
.text$mn:00004BF0 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z endp
.text$mn:00004BF0
.text$mn:00004BF0 ; ---------------------------------------------------------------------------
.text$mn:00004BF3                 align 4
.text$mn:00004BF3 _text$mn        ends
.text$mn:00004BF3
.text$mn:00004BF4 ; ===========================================================================
.text$mn:00004BF4
.text$mn:00004BF4 ; Segment type: Pure code
.text$mn:00004BF4 ; Segment permissions: Read/Execute
.text$mn:00004BF4 _text$mn        segment para public 'CODE' use32
.text$mn:00004BF4                 assume cs:_text$mn
.text$mn:00004BF4                 ;org 4BF4h
.text$mn:00004BF4 ; COMDAT (pick any)
.text$mn:00004BF4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004BF4
.text$mn:00004BF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00004BF4
.text$mn:00004BF4 ; Attributes: bp-based frame
.text$mn:00004BF4
.text$mn:00004BF4 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Inside(char const *)
.text$mn:00004BF4                 public ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
.text$mn:00004BF4 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
.text$mn:00004BF4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+2Ap
.text$mn:00004BF4
.text$mn:00004BF4 var_4           = dword ptr -4
.text$mn:00004BF4 arg_0           = dword ptr  8
.text$mn:00004BF4
.text$mn:00004BF4                 push    ebp
.text$mn:00004BF5                 mov     ebp, esp
.text$mn:00004BF7                 push    ecx
.text$mn:00004BF8                 mov     [ebp+var_4], ecx
.text$mn:00004BFB                 cmp     [ebp+arg_0], 0
.text$mn:00004BFF                 jz      short loc_4C21
.text$mn:00004C01                 mov     ecx, [ebp+var_4]
.text$mn:00004C04                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00004C09                 cmp     [ebp+arg_0], eax
.text$mn:00004C0C                 jb      short loc_4C21
.text$mn:00004C0E                 mov     ecx, [ebp+var_4]
.text$mn:00004C11                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00004C16                 mov     ecx, [ebp+var_4]
.text$mn:00004C19                 add     eax, [ecx+14h]
.text$mn:00004C1C                 cmp     eax, [ebp+arg_0]
.text$mn:00004C1F                 ja      short loc_4C27
.text$mn:00004C21
.text$mn:00004C21 loc_4C21:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+Bj
.text$mn:00004C21                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+18j
.text$mn:00004C21                 xor     al, al
.text$mn:00004C23                 jmp     short loc_4C29
.text$mn:00004C25 ; ---------------------------------------------------------------------------
.text$mn:00004C25                 jmp     short loc_4C29
.text$mn:00004C27 ; ---------------------------------------------------------------------------
.text$mn:00004C27
.text$mn:00004C27 loc_4C27:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Bj
.text$mn:00004C27                 mov     al, 1
.text$mn:00004C29
.text$mn:00004C29 loc_4C29:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Fj
.text$mn:00004C29                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+31j
.text$mn:00004C29                 mov     esp, ebp
.text$mn:00004C2B                 pop     ebp
.text$mn:00004C2C                 retn    4
.text$mn:00004C2C ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z endp
.text$mn:00004C2C
.text$mn:00004C2C ; ---------------------------------------------------------------------------
.text$mn:00004C2F                 align 10h
.text$mn:00004C2F _text$mn        ends
.text$mn:00004C2F
.text$mn:00004C30 ; ===========================================================================
.text$mn:00004C30
.text$mn:00004C30 ; Segment type: Pure code
.text$mn:00004C30 ; Segment permissions: Read/Execute
.text$mn:00004C30 _text$mn        segment para public 'CODE' use32
.text$mn:00004C30                 assume cs:_text$mn
.text$mn:00004C30                 ;org 4C30h
.text$mn:00004C30 ; COMDAT (pick any)
.text$mn:00004C30                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004C30
.text$mn:00004C30 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C30
.text$mn:00004C30 ; Attributes: bp-based frame
.text$mn:00004C30
.text$mn:00004C30 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:00004C30                 public ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z
.text$mn:00004C30 ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z proc near
.text$mn:00004C30                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+2Ap
.text$mn:00004C30                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+2Cp
.text$mn:00004C30
.text$mn:00004C30 var_4           = dword ptr -4
.text$mn:00004C30 arg_0           = dword ptr  8
.text$mn:00004C30
.text$mn:00004C30                 push    ebp
.text$mn:00004C31                 mov     ebp, esp
.text$mn:00004C33                 push    ecx
.text$mn:00004C34                 mov     [ebp+var_4], ecx
.text$mn:00004C37                 cmp     [ebp+arg_0], 0
.text$mn:00004C3B                 jz      short loc_4C60
.text$mn:00004C3D                 mov     ecx, [ebp+var_4]
.text$mn:00004C40                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00004C45                 cmp     [ebp+arg_0], eax
.text$mn:00004C48                 jb      short loc_4C60
.text$mn:00004C4A                 mov     ecx, [ebp+var_4]
.text$mn:00004C4D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00004C52                 mov     ecx, [ebp+var_4]
.text$mn:00004C55                 mov     edx, [ecx+14h]
.text$mn:00004C58                 lea     eax, [eax+edx*2]
.text$mn:00004C5B                 cmp     eax, [ebp+arg_0]
.text$mn:00004C5E                 ja      short loc_4C66
.text$mn:00004C60
.text$mn:00004C60 loc_4C60:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+Bj
.text$mn:00004C60                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+18j
.text$mn:00004C60                 xor     al, al
.text$mn:00004C62                 jmp     short loc_4C68
.text$mn:00004C64 ; ---------------------------------------------------------------------------
.text$mn:00004C64                 jmp     short loc_4C68
.text$mn:00004C66 ; ---------------------------------------------------------------------------
.text$mn:00004C66
.text$mn:00004C66 loc_4C66:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+2Ej
.text$mn:00004C66                 mov     al, 1
.text$mn:00004C68
.text$mn:00004C68 loc_4C68:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+32j
.text$mn:00004C68                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+34j
.text$mn:00004C68                 mov     esp, ebp
.text$mn:00004C6A                 pop     ebp
.text$mn:00004C6B                 retn    4
.text$mn:00004C6B ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z endp
.text$mn:00004C6B
.text$mn:00004C6B ; ---------------------------------------------------------------------------
.text$mn:00004C6E                 align 10h
.text$mn:00004C6E _text$mn        ends
.text$mn:00004C6E
.text$mn:00004C70 ; ===========================================================================
.text$mn:00004C70
.text$mn:00004C70 ; Segment type: Pure code
.text$mn:00004C70 ; Segment permissions: Read/Execute
.text$mn:00004C70 _text$mn        segment para public 'CODE' use32
.text$mn:00004C70                 assume cs:_text$mn
.text$mn:00004C70                 ;org 4C70h
.text$mn:00004C70 ; COMDAT (pick any)
.text$mn:00004C70                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004C70
.text$mn:00004C70 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C70
.text$mn:00004C70 ; Attributes: bp-based frame
.text$mn:00004C70
.text$mn:00004C70 ; public: char * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)
.text$mn:00004C70                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
.text$mn:00004C70 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
.text$mn:00004C70                                         ; CODE XREF: $LN19+14p
.text$mn:00004C70                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+1Dp ...
.text$mn:00004C70
.text$mn:00004C70 var_8           = dword ptr -8
.text$mn:00004C70 var_4           = dword ptr -4
.text$mn:00004C70
.text$mn:00004C70                 push    ebp
.text$mn:00004C71                 mov     ebp, esp
.text$mn:00004C73                 sub     esp, 8
.text$mn:00004C76                 mov     [ebp+var_4], ecx
.text$mn:00004C79                 mov     eax, [ebp+var_4]
.text$mn:00004C7C                 cmp     dword ptr [eax+18h], 10h
.text$mn:00004C80                 jb      short loc_4C96
.text$mn:00004C82                 mov     ecx, [ebp+var_4]
.text$mn:00004C85                 mov     edx, [ecx+4]
.text$mn:00004C88                 push    edx
.text$mn:00004C89                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00004C8E                 add     esp, 4
.text$mn:00004C91                 mov     [ebp+var_8], eax
.text$mn:00004C94                 jmp     short loc_4C9F
.text$mn:00004C96 ; ---------------------------------------------------------------------------
.text$mn:00004C96
.text$mn:00004C96 loc_4C96:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:00004C96                 mov     eax, [ebp+var_4]
.text$mn:00004C99                 add     eax, 4
.text$mn:00004C9C                 mov     [ebp+var_8], eax
.text$mn:00004C9F
.text$mn:00004C9F loc_4C9F:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:00004C9F                 mov     eax, [ebp+var_8]
.text$mn:00004CA2                 mov     esp, ebp
.text$mn:00004CA4                 pop     ebp
.text$mn:00004CA5                 retn
.text$mn:00004CA5 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ endp
.text$mn:00004CA5
.text$mn:00004CA5 ; ---------------------------------------------------------------------------
.text$mn:00004CA6                 align 4
.text$mn:00004CA6 _text$mn        ends
.text$mn:00004CA6
.text$mn:00004CA8 ; ===========================================================================
.text$mn:00004CA8
.text$mn:00004CA8 ; Segment type: Pure code
.text$mn:00004CA8 ; Segment permissions: Read/Execute
.text$mn:00004CA8 _text$mn        segment para public 'CODE' use32
.text$mn:00004CA8                 assume cs:_text$mn
.text$mn:00004CA8                 ;org 4CA8h
.text$mn:00004CA8 ; COMDAT (pick any)
.text$mn:00004CA8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004CA8
.text$mn:00004CA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00004CA8
.text$mn:00004CA8 ; Attributes: bp-based frame
.text$mn:00004CA8
.text$mn:00004CA8 ; public: char const * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)const
.text$mn:00004CA8                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
.text$mn:00004CA8 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
.text$mn:00004CA8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+7Dp
.text$mn:00004CA8
.text$mn:00004CA8 var_8           = dword ptr -8
.text$mn:00004CA8 var_4           = dword ptr -4
.text$mn:00004CA8
.text$mn:00004CA8                 push    ebp
.text$mn:00004CA9                 mov     ebp, esp
.text$mn:00004CAB                 sub     esp, 8
.text$mn:00004CAE                 mov     [ebp+var_4], ecx
.text$mn:00004CB1                 mov     eax, [ebp+var_4]
.text$mn:00004CB4                 cmp     dword ptr [eax+18h], 10h
.text$mn:00004CB8                 jb      short loc_4CCE
.text$mn:00004CBA                 mov     ecx, [ebp+var_4]
.text$mn:00004CBD                 mov     edx, [ecx+4]
.text$mn:00004CC0                 push    edx
.text$mn:00004CC1                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00004CC6                 add     esp, 4
.text$mn:00004CC9                 mov     [ebp+var_8], eax
.text$mn:00004CCC                 jmp     short loc_4CD7
.text$mn:00004CCE ; ---------------------------------------------------------------------------
.text$mn:00004CCE
.text$mn:00004CCE loc_4CCE:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:00004CCE                 mov     eax, [ebp+var_4]
.text$mn:00004CD1                 add     eax, 4
.text$mn:00004CD4                 mov     [ebp+var_8], eax
.text$mn:00004CD7
.text$mn:00004CD7 loc_4CD7:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:00004CD7                 mov     eax, [ebp+var_8]
.text$mn:00004CDA                 mov     esp, ebp
.text$mn:00004CDC                 pop     ebp
.text$mn:00004CDD                 retn
.text$mn:00004CDD ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ endp
.text$mn:00004CDD
.text$mn:00004CDD ; ---------------------------------------------------------------------------
.text$mn:00004CDE                 align 10h
.text$mn:00004CDE _text$mn        ends
.text$mn:00004CDE
.text$mn:00004CE0 ; ===========================================================================
.text$mn:00004CE0
.text$mn:00004CE0 ; Segment type: Pure code
.text$mn:00004CE0 ; Segment permissions: Read/Execute
.text$mn:00004CE0 _text$mn        segment para public 'CODE' use32
.text$mn:00004CE0                 assume cs:_text$mn
.text$mn:00004CE0                 ;org 4CE0h
.text$mn:00004CE0 ; COMDAT (pick any)
.text$mn:00004CE0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004CE0
.text$mn:00004CE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004CE0
.text$mn:00004CE0 ; Attributes: bp-based frame
.text$mn:00004CE0
.text$mn:00004CE0 ; public: wchar_t * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00004CE0                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
.text$mn:00004CE0 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ proc near
.text$mn:00004CE0                                         ; CODE XREF: $LN19_0+14p
.text$mn:00004CE0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)+1Fp ...
.text$mn:00004CE0
.text$mn:00004CE0 var_8           = dword ptr -8
.text$mn:00004CE0 var_4           = dword ptr -4
.text$mn:00004CE0
.text$mn:00004CE0                 push    ebp
.text$mn:00004CE1                 mov     ebp, esp
.text$mn:00004CE3                 sub     esp, 8
.text$mn:00004CE6                 mov     [ebp+var_4], ecx
.text$mn:00004CE9                 mov     eax, [ebp+var_4]
.text$mn:00004CEC                 cmp     dword ptr [eax+18h], 8
.text$mn:00004CF0                 jb      short loc_4D06
.text$mn:00004CF2                 mov     ecx, [ebp+var_4]
.text$mn:00004CF5                 mov     edx, [ecx+4]
.text$mn:00004CF8                 push    edx
.text$mn:00004CF9                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00004CFE                 add     esp, 4
.text$mn:00004D01                 mov     [ebp+var_8], eax
.text$mn:00004D04                 jmp     short loc_4D0F
.text$mn:00004D06 ; ---------------------------------------------------------------------------
.text$mn:00004D06
.text$mn:00004D06 loc_4D06:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:00004D06                 mov     eax, [ebp+var_4]
.text$mn:00004D09                 add     eax, 4
.text$mn:00004D0C                 mov     [ebp+var_8], eax
.text$mn:00004D0F
.text$mn:00004D0F loc_4D0F:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:00004D0F                 mov     eax, [ebp+var_8]
.text$mn:00004D12                 mov     esp, ebp
.text$mn:00004D14                 pop     ebp
.text$mn:00004D15                 retn
.text$mn:00004D15 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ endp
.text$mn:00004D15
.text$mn:00004D15 ; ---------------------------------------------------------------------------
.text$mn:00004D16                 align 4
.text$mn:00004D16 _text$mn        ends
.text$mn:00004D16
.text$mn:00004D18 ; ===========================================================================
.text$mn:00004D18
.text$mn:00004D18 ; Segment type: Pure code
.text$mn:00004D18 ; Segment permissions: Read/Execute
.text$mn:00004D18 _text$mn        segment para public 'CODE' use32
.text$mn:00004D18                 assume cs:_text$mn
.text$mn:00004D18                 ;org 4D18h
.text$mn:00004D18 ; COMDAT (pick any)
.text$mn:00004D18                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004D18
.text$mn:00004D18 ; =============== S U B R O U T I N E =======================================
.text$mn:00004D18
.text$mn:00004D18 ; Attributes: bp-based frame
.text$mn:00004D18
.text$mn:00004D18 ; public: wchar_t const * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)const
.text$mn:00004D18                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
.text$mn:00004D18 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ proc near
.text$mn:00004D18                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+7Dp
.text$mn:00004D18                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)+Ap ...
.text$mn:00004D18
.text$mn:00004D18 var_8           = dword ptr -8
.text$mn:00004D18 var_4           = dword ptr -4
.text$mn:00004D18
.text$mn:00004D18                 push    ebp
.text$mn:00004D19                 mov     ebp, esp
.text$mn:00004D1B                 sub     esp, 8
.text$mn:00004D1E                 mov     [ebp+var_4], ecx
.text$mn:00004D21                 mov     eax, [ebp+var_4]
.text$mn:00004D24                 cmp     dword ptr [eax+18h], 8
.text$mn:00004D28                 jb      short loc_4D3E
.text$mn:00004D2A                 mov     ecx, [ebp+var_4]
.text$mn:00004D2D                 mov     edx, [ecx+4]
.text$mn:00004D30                 push    edx
.text$mn:00004D31                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00004D36                 add     esp, 4
.text$mn:00004D39                 mov     [ebp+var_8], eax
.text$mn:00004D3C                 jmp     short loc_4D47
.text$mn:00004D3E ; ---------------------------------------------------------------------------
.text$mn:00004D3E
.text$mn:00004D3E loc_4D3E:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:00004D3E                 mov     eax, [ebp+var_4]
.text$mn:00004D41                 add     eax, 4
.text$mn:00004D44                 mov     [ebp+var_8], eax
.text$mn:00004D47
.text$mn:00004D47 loc_4D47:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:00004D47                 mov     eax, [ebp+var_8]
.text$mn:00004D4A                 mov     esp, ebp
.text$mn:00004D4C                 pop     ebp
.text$mn:00004D4D                 retn
.text$mn:00004D4D ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ endp
.text$mn:00004D4D
.text$mn:00004D4D ; ---------------------------------------------------------------------------
.text$mn:00004D4E                 align 10h
.text$mn:00004D4E _text$mn        ends
.text$mn:00004D4E
.text$mn:00004D50 ; ===========================================================================
.text$mn:00004D50
.text$mn:00004D50 ; Segment type: Pure code
.text$mn:00004D50 ; Segment permissions: Read/Execute
.text$mn:00004D50 _text$mn        segment para public 'CODE' use32
.text$mn:00004D50                 assume cs:_text$mn
.text$mn:00004D50                 ;org 4D50h
.text$mn:00004D50 ; COMDAT (pick any)
.text$mn:00004D50                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004D50
.text$mn:00004D50 ; =============== S U B R O U T I N E =======================================
.text$mn:00004D50
.text$mn:00004D50 ; Attributes: bp-based frame
.text$mn:00004D50
.text$mn:00004D50 ; void __thiscall std::_Container_base12::_Orphan_all(std::_Container_base12 *__hidden this)
.text$mn:00004D50                 public ?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:00004D50 ?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$mn:00004D50                                         ; CODE XREF: std::_Container_base12::~_Container_base12(void)+Ap
.text$mn:00004D50                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+14p ...
.text$mn:00004D50
.text$mn:00004D50 var_18          = byte ptr -18h
.text$mn:00004D50 var_14          = dword ptr -14h
.text$mn:00004D50 var_10          = dword ptr -10h
.text$mn:00004D50 var_C           = dword ptr -0Ch
.text$mn:00004D50 var_4           = dword ptr -4
.text$mn:00004D50
.text$mn:00004D50                 push    ebp
.text$mn:00004D51                 mov     ebp, esp
.text$mn:00004D53                 push    0FFFFFFFFh
.text$mn:00004D55                 push    offset __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:00004D5A                 mov     eax, large fs:0
.text$mn:00004D60                 push    eax
.text$mn:00004D61                 sub     esp, 0Ch
.text$mn:00004D64                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004D69                 xor     eax, ebp
.text$mn:00004D6B                 push    eax
.text$mn:00004D6C                 lea     eax, [ebp+var_C]
.text$mn:00004D6F                 mov     large fs:0, eax
.text$mn:00004D75                 mov     [ebp+var_14], ecx
.text$mn:00004D78                 mov     eax, [ebp+var_14]
.text$mn:00004D7B                 cmp     dword ptr [eax], 0
.text$mn:00004D7E                 jz      short loc_4DDB
.text$mn:00004D80                 push    3               ; int
.text$mn:00004D82                 lea     ecx, [ebp+var_18] ; this
.text$mn:00004D85                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00004D8A                 mov     [ebp+var_4], 0
.text$mn:00004D91                 mov     ecx, [ebp+var_14]
.text$mn:00004D94                 mov     edx, [ecx]
.text$mn:00004D96                 add     edx, 4
.text$mn:00004D99                 mov     [ebp+var_10], edx
.text$mn:00004D9C                 jmp     short loc_4DAB
.text$mn:00004D9E ; ---------------------------------------------------------------------------
.text$mn:00004D9E
.text$mn:00004D9E loc_4D9E:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+6Ej
.text$mn:00004D9E                 mov     eax, [ebp+var_10]
.text$mn:00004DA1                 mov     ecx, [eax]
.text$mn:00004DA3                 mov     edx, [ebp+var_10]
.text$mn:00004DA6                 mov     eax, [ecx+4]
.text$mn:00004DA9                 mov     [edx], eax
.text$mn:00004DAB
.text$mn:00004DAB loc_4DAB:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+4Cj
.text$mn:00004DAB                 mov     ecx, [ebp+var_10]
.text$mn:00004DAE                 cmp     dword ptr [ecx], 0
.text$mn:00004DB1                 jz      short loc_4DC0
.text$mn:00004DB3                 mov     edx, [ebp+var_10]
.text$mn:00004DB6                 mov     eax, [edx]
.text$mn:00004DB8                 mov     dword ptr [eax], 0
.text$mn:00004DBE                 jmp     short loc_4D9E
.text$mn:00004DC0 ; ---------------------------------------------------------------------------
.text$mn:00004DC0
.text$mn:00004DC0 loc_4DC0:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+61j
.text$mn:00004DC0                 mov     ecx, [ebp+var_14]
.text$mn:00004DC3                 mov     edx, [ecx]
.text$mn:00004DC5                 mov     dword ptr [edx+4], 0
.text$mn:00004DCC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004DD3                 lea     ecx, [ebp+var_18] ; this
.text$mn:00004DD6                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00004DDB
.text$mn:00004DDB loc_4DDB:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+2Ej
.text$mn:00004DDB                 mov     ecx, [ebp+var_C]
.text$mn:00004DDE                 mov     large fs:0, ecx
.text$mn:00004DE5                 pop     ecx
.text$mn:00004DE6                 mov     esp, ebp
.text$mn:00004DE8                 pop     ebp
.text$mn:00004DE9                 retn
.text$mn:00004DE9 ?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$mn:00004DE9
.text$mn:00004DE9 ; ---------------------------------------------------------------------------
.text$mn:00004DEA                 align 4
.text$mn:00004DEA _text$mn        ends
.text$mn:00004DEA
.text$x:00004DEC ; ===========================================================================
.text$x:00004DEC
.text$x:00004DEC ; Segment type: Pure code
.text$x:00004DEC ; Segment permissions: Read/Execute
.text$x:00004DEC _text$x         segment para public 'CODE' use32
.text$x:00004DEC                 assume cs:_text$x
.text$x:00004DEC                 ;org 4DECh
.text$x:00004DEC ; COMDAT (pick associative to section at 4D50)
.text$x:00004DEC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:00004DEC
.text$x:00004DEC ; =============== S U B R O U T I N E =======================================
.text$x:00004DEC
.text$x:00004DEC
.text$x:00004DEC __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 proc near
.text$x:00004DEC                                         ; DATA XREF: .xdata$x:000067E4o
.text$x:00004DEC                 lea     ecx, [ebp-18h]  ; this
.text$x:00004DEF                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00004DEF __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 endp
.text$x:00004DEF
.text$x:00004DF4
.text$x:00004DF4 ; =============== S U B R O U T I N E =======================================
.text$x:00004DF4
.text$x:00004DF4
.text$x:00004DF4 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$x:00004DF4                                         ; DATA XREF: std::_Container_base12::_Orphan_all(void)+5o
.text$x:00004DF4
.text$x:00004DF4 arg_4           = dword ptr  8
.text$x:00004DF4
.text$x:00004DF4                 mov     edx, [esp+arg_4]
.text$x:00004DF8                 lea     eax, [edx+0Ch]
.text$x:00004DFB                 mov     ecx, [edx-10h]
.text$x:00004DFE                 xor     ecx, eax
.text$x:00004E00                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004E05                 mov     eax, offset __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$x:00004E0A                 jmp     ___CxxFrameHandler3
.text$x:00004E0A __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$x:00004E0A
.text$x:00004E0A ; ---------------------------------------------------------------------------
.text$x:00004E0F                 align 10h
.text$x:00004E0F _text$x         ends
.text$x:00004E0F
.text$mn:00004E10 ; ===========================================================================
.text$mn:00004E10
.text$mn:00004E10 ; Segment type: Pure code
.text$mn:00004E10 ; Segment permissions: Read/Execute
.text$mn:00004E10 _text$mn        segment para public 'CODE' use32
.text$mn:00004E10                 assume cs:_text$mn
.text$mn:00004E10                 ;org 4E10h
.text$mn:00004E10 ; COMDAT (pick any)
.text$mn:00004E10                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004E10
.text$mn:00004E10 ; =============== S U B R O U T I N E =======================================
.text$mn:00004E10
.text$mn:00004E10 ; Attributes: bp-based frame
.text$mn:00004E10
.text$mn:00004E10 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(char, size_t Size)
.text$mn:00004E10                 public ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
.text$mn:00004E10 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
.text$mn:00004E10                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+47p
.text$mn:00004E10                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+34p ...
.text$mn:00004E10
.text$mn:00004E10 var_C           = dword ptr -0Ch
.text$mn:00004E10 var_8           = dword ptr -8
.text$mn:00004E10 var_2           = byte ptr -2
.text$mn:00004E10 var_1           = byte ptr -1
.text$mn:00004E10 arg_0           = byte ptr  8
.text$mn:00004E10 Size            = dword ptr  0Ch
.text$mn:00004E10
.text$mn:00004E10                 push    ebp
.text$mn:00004E11                 mov     ebp, esp
.text$mn:00004E13                 sub     esp, 0Ch
.text$mn:00004E16                 mov     [ebp+var_8], ecx
.text$mn:00004E19                 movzx   eax, [ebp+arg_0]
.text$mn:00004E1D                 test    eax, eax
.text$mn:00004E1F                 jnz     short loc_4E23
.text$mn:00004E21                 jmp     short loc_4E96
.text$mn:00004E23 ; ---------------------------------------------------------------------------
.text$mn:00004E23
.text$mn:00004E23 loc_4E23:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+Fj
.text$mn:00004E23                 mov     ecx, [ebp+var_8]
.text$mn:00004E26                 cmp     dword ptr [ecx+18h], 10h
.text$mn:00004E2A                 jb      short loc_4E96
.text$mn:00004E2C                 mov     edx, [ebp+var_8]
.text$mn:00004E2F                 mov     eax, [edx+4]
.text$mn:00004E32                 mov     [ebp+var_C], eax
.text$mn:00004E35                 mov     ecx, [ebp+var_8]
.text$mn:00004E38                 add     ecx, 4
.text$mn:00004E3B                 push    ecx
.text$mn:00004E3C                 lea     edx, [ebp+var_1]
.text$mn:00004E3F                 push    edx
.text$mn:00004E40                 mov     ecx, [ebp+var_8]
.text$mn:00004E43                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00004E48                 mov     ecx, eax
.text$mn:00004E4A                 call    ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)
.text$mn:00004E4F                 cmp     [ebp+Size], 0
.text$mn:00004E53                 jbe     short loc_4E75
.text$mn:00004E55                 mov     eax, [ebp+Size]
.text$mn:00004E58                 push    eax             ; Size
.text$mn:00004E59                 mov     ecx, [ebp+var_C]
.text$mn:00004E5C                 push    ecx
.text$mn:00004E5D                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00004E62                 add     esp, 4
.text$mn:00004E65                 push    eax             ; Src
.text$mn:00004E66                 mov     edx, [ebp+var_8]
.text$mn:00004E69                 add     edx, 4
.text$mn:00004E6C                 push    edx             ; Dst
.text$mn:00004E6D                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00004E72                 add     esp, 0Ch
.text$mn:00004E75
.text$mn:00004E75 loc_4E75:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+43j
.text$mn:00004E75                 mov     eax, [ebp+var_8]
.text$mn:00004E78                 mov     ecx, [eax+18h]
.text$mn:00004E7B                 add     ecx, 1
.text$mn:00004E7E                 push    ecx             ; int
.text$mn:00004E7F                 mov     edx, [ebp+var_C]
.text$mn:00004E82                 push    edx             ; void *
.text$mn:00004E83                 lea     eax, [ebp+var_2]
.text$mn:00004E86                 push    eax
.text$mn:00004E87                 mov     ecx, [ebp+var_8]
.text$mn:00004E8A                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00004E8F                 mov     ecx, eax
.text$mn:00004E91                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)
.text$mn:00004E96
.text$mn:00004E96 loc_4E96:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+11j
.text$mn:00004E96                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+1Aj
.text$mn:00004E96                 mov     ecx, [ebp+var_8]
.text$mn:00004E99                 mov     dword ptr [ecx+18h], 0Fh
.text$mn:00004EA0                 mov     edx, [ebp+Size]
.text$mn:00004EA3                 push    edx
.text$mn:00004EA4                 mov     ecx, [ebp+var_8]
.text$mn:00004EA7                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00004EAC                 mov     esp, ebp
.text$mn:00004EAE                 pop     ebp
.text$mn:00004EAF                 retn    8
.text$mn:00004EAF ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z endp
.text$mn:00004EAF
.text$mn:00004EAF ; ---------------------------------------------------------------------------
.text$mn:00004EB2                 align 4
.text$mn:00004EB2 _text$mn        ends
.text$mn:00004EB2
.text$mn:00004EB4 ; ===========================================================================
.text$mn:00004EB4
.text$mn:00004EB4 ; Segment type: Pure code
.text$mn:00004EB4 ; Segment permissions: Read/Execute
.text$mn:00004EB4 _text$mn        segment para public 'CODE' use32
.text$mn:00004EB4                 assume cs:_text$mn
.text$mn:00004EB4                 ;org 4EB4h
.text$mn:00004EB4 ; COMDAT (pick any)
.text$mn:00004EB4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004EB4
.text$mn:00004EB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00004EB4
.text$mn:00004EB4 ; Attributes: bp-based frame
.text$mn:00004EB4
.text$mn:00004EB4 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Tidy(bool, unsigned int)
.text$mn:00004EB4                 public ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z
.text$mn:00004EB4 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z proc near
.text$mn:00004EB4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+56p
.text$mn:00004EB4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+47p ...
.text$mn:00004EB4
.text$mn:00004EB4 var_C           = dword ptr -0Ch
.text$mn:00004EB4 var_8           = dword ptr -8
.text$mn:00004EB4 var_2           = byte ptr -2
.text$mn:00004EB4 var_1           = byte ptr -1
.text$mn:00004EB4 arg_0           = byte ptr  8
.text$mn:00004EB4 arg_4           = dword ptr  0Ch
.text$mn:00004EB4
.text$mn:00004EB4                 push    ebp
.text$mn:00004EB5                 mov     ebp, esp
.text$mn:00004EB7                 sub     esp, 0Ch
.text$mn:00004EBA                 mov     [ebp+var_8], ecx
.text$mn:00004EBD                 movzx   eax, [ebp+arg_0]
.text$mn:00004EC1                 test    eax, eax
.text$mn:00004EC3                 jnz     short loc_4EC7
.text$mn:00004EC5                 jmp     short loc_4F3A
.text$mn:00004EC7 ; ---------------------------------------------------------------------------
.text$mn:00004EC7
.text$mn:00004EC7 loc_4EC7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+Fj
.text$mn:00004EC7                 mov     ecx, [ebp+var_8]
.text$mn:00004ECA                 cmp     dword ptr [ecx+18h], 8
.text$mn:00004ECE                 jb      short loc_4F3A
.text$mn:00004ED0                 mov     edx, [ebp+var_8]
.text$mn:00004ED3                 mov     eax, [edx+4]
.text$mn:00004ED6                 mov     [ebp+var_C], eax
.text$mn:00004ED9                 mov     ecx, [ebp+var_8]
.text$mn:00004EDC                 add     ecx, 4
.text$mn:00004EDF                 push    ecx
.text$mn:00004EE0                 lea     edx, [ebp+var_1]
.text$mn:00004EE3                 push    edx
.text$mn:00004EE4                 mov     ecx, [ebp+var_8]
.text$mn:00004EE7                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00004EEC                 mov     ecx, eax
.text$mn:00004EEE                 call    ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00004EF3                 cmp     [ebp+arg_4], 0
.text$mn:00004EF7                 jbe     short loc_4F19
.text$mn:00004EF9                 mov     eax, [ebp+arg_4]
.text$mn:00004EFC                 push    eax             ; int
.text$mn:00004EFD                 mov     ecx, [ebp+var_C]
.text$mn:00004F00                 push    ecx
.text$mn:00004F01                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00004F06                 add     esp, 4
.text$mn:00004F09                 push    eax             ; Src
.text$mn:00004F0A                 mov     edx, [ebp+var_8]
.text$mn:00004F0D                 add     edx, 4
.text$mn:00004F10                 push    edx             ; Dst
.text$mn:00004F11                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00004F16                 add     esp, 0Ch
.text$mn:00004F19
.text$mn:00004F19 loc_4F19:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+43j
.text$mn:00004F19                 mov     eax, [ebp+var_8]
.text$mn:00004F1C                 mov     ecx, [eax+18h]
.text$mn:00004F1F                 add     ecx, 1
.text$mn:00004F22                 push    ecx             ; int
.text$mn:00004F23                 mov     edx, [ebp+var_C]
.text$mn:00004F26                 push    edx             ; void *
.text$mn:00004F27                 lea     eax, [ebp+var_2]
.text$mn:00004F2A                 push    eax
.text$mn:00004F2B                 mov     ecx, [ebp+var_8]
.text$mn:00004F2E                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00004F33                 mov     ecx, eax
.text$mn:00004F35                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)
.text$mn:00004F3A
.text$mn:00004F3A loc_4F3A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+11j
.text$mn:00004F3A                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+1Aj
.text$mn:00004F3A                 mov     ecx, [ebp+var_8]
.text$mn:00004F3D                 mov     dword ptr [ecx+18h], 7
.text$mn:00004F44                 mov     edx, [ebp+arg_4]
.text$mn:00004F47                 push    edx
.text$mn:00004F48                 mov     ecx, [ebp+var_8]
.text$mn:00004F4B                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00004F50                 mov     esp, ebp
.text$mn:00004F52                 pop     ebp
.text$mn:00004F53                 retn    8
.text$mn:00004F53 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z endp
.text$mn:00004F53
.text$mn:00004F53 ; ---------------------------------------------------------------------------
.text$mn:00004F56                 align 4
.text$mn:00004F56 _text$mn        ends
.text$mn:00004F56
.text$mn:00004F58 ; ===========================================================================
.text$mn:00004F58
.text$mn:00004F58 ; Segment type: Pure code
.text$mn:00004F58 ; Segment permissions: Read/Execute
.text$mn:00004F58 _text$mn        segment para public 'CODE' use32
.text$mn:00004F58                 assume cs:_text$mn
.text$mn:00004F58                 ;org 4F58h
.text$mn:00004F58 ; COMDAT (pick any)
.text$mn:00004F58                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004F58
.text$mn:00004F58 ; =============== S U B R O U T I N E =======================================
.text$mn:00004F58
.text$mn:00004F58 ; Attributes: bp-based frame
.text$mn:00004F58
.text$mn:00004F58 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xlen(void)const
.text$mn:00004F58                 public ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:00004F58 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:00004F58                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+19p
.text$mn:00004F58
.text$mn:00004F58 var_4           = dword ptr -4
.text$mn:00004F58
.text$mn:00004F58                 push    ebp
.text$mn:00004F59                 mov     ebp, esp
.text$mn:00004F5B                 push    ecx
.text$mn:00004F5C                 mov     [ebp+var_4], ecx
.text$mn:00004F5F                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:00004F64                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:00004F69                 mov     esp, ebp
.text$mn:00004F6B                 pop     ebp
.text$mn:00004F6C                 retn
.text$mn:00004F6C ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:00004F6C
.text$mn:00004F6C ; ---------------------------------------------------------------------------
.text$mn:00004F6D                 align 10h
.text$mn:00004F6D _text$mn        ends
.text$mn:00004F6D
.text$mn:00004F70 ; ===========================================================================
.text$mn:00004F70
.text$mn:00004F70 ; Segment type: Pure code
.text$mn:00004F70 ; Segment permissions: Read/Execute
.text$mn:00004F70 _text$mn        segment para public 'CODE' use32
.text$mn:00004F70                 assume cs:_text$mn
.text$mn:00004F70                 ;org 4F70h
.text$mn:00004F70 ; COMDAT (pick any)
.text$mn:00004F70                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004F70
.text$mn:00004F70 ; =============== S U B R O U T I N E =======================================
.text$mn:00004F70
.text$mn:00004F70 ; Attributes: bp-based frame
.text$mn:00004F70
.text$mn:00004F70 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xlen(void)const
.text$mn:00004F70                 public ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:00004F70 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:00004F70                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+19p
.text$mn:00004F70                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+78p ...
.text$mn:00004F70
.text$mn:00004F70 var_4           = dword ptr -4
.text$mn:00004F70
.text$mn:00004F70                 push    ebp
.text$mn:00004F71                 mov     ebp, esp
.text$mn:00004F73                 push    ecx
.text$mn:00004F74                 mov     [ebp+var_4], ecx
.text$mn:00004F77                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:00004F7C                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:00004F81                 mov     esp, ebp
.text$mn:00004F83                 pop     ebp
.text$mn:00004F84                 retn
.text$mn:00004F84 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:00004F84
.text$mn:00004F84 ; ---------------------------------------------------------------------------
.text$mn:00004F85                 align 4
.text$mn:00004F85 _text$mn        ends
.text$mn:00004F85
.text$mn:00004F88 ; ===========================================================================
.text$mn:00004F88
.text$mn:00004F88 ; Segment type: Pure code
.text$mn:00004F88 ; Segment permissions: Read/Execute
.text$mn:00004F88 _text$mn        segment para public 'CODE' use32
.text$mn:00004F88                 assume cs:_text$mn
.text$mn:00004F88                 ;org 4F88h
.text$mn:00004F88 ; COMDAT (pick any)
.text$mn:00004F88                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004F88
.text$mn:00004F88 ; =============== S U B R O U T I N E =======================================
.text$mn:00004F88
.text$mn:00004F88 ; Attributes: bp-based frame
.text$mn:00004F88
.text$mn:00004F88 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xran(void)const
.text$mn:00004F88                 public ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:00004F88 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:00004F88                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+19p
.text$mn:00004F88                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+15p ...
.text$mn:00004F88
.text$mn:00004F88 var_4           = dword ptr -4
.text$mn:00004F88
.text$mn:00004F88                 push    ebp
.text$mn:00004F89                 mov     ebp, esp
.text$mn:00004F8B                 push    ecx
.text$mn:00004F8C                 mov     [ebp+var_4], ecx
.text$mn:00004F8F                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:00004F94                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:00004F99                 mov     esp, ebp
.text$mn:00004F9B                 pop     ebp
.text$mn:00004F9C                 retn
.text$mn:00004F9C ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:00004F9C
.text$mn:00004F9C ; ---------------------------------------------------------------------------
.text$mn:00004F9D                 align 10h
.text$mn:00004F9D _text$mn        ends
.text$mn:00004F9D
.text$mn:00004FA0 ; ===========================================================================
.text$mn:00004FA0
.text$mn:00004FA0 ; Segment type: Pure code
.text$mn:00004FA0 ; Segment permissions: Read/Execute
.text$mn:00004FA0 _text$mn        segment para public 'CODE' use32
.text$mn:00004FA0                 assume cs:_text$mn
.text$mn:00004FA0                 ;org 4FA0h
.text$mn:00004FA0 ; COMDAT (pick any)
.text$mn:00004FA0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004FA0
.text$mn:00004FA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004FA0
.text$mn:00004FA0 ; Attributes: bp-based frame
.text$mn:00004FA0
.text$mn:00004FA0 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xran(void)const
.text$mn:00004FA0                 public ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:00004FA0 ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:00004FA0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p
.text$mn:00004FA0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+33p ...
.text$mn:00004FA0
.text$mn:00004FA0 var_4           = dword ptr -4
.text$mn:00004FA0
.text$mn:00004FA0                 push    ebp
.text$mn:00004FA1                 mov     ebp, esp
.text$mn:00004FA3                 push    ecx
.text$mn:00004FA4                 mov     [ebp+var_4], ecx
.text$mn:00004FA7                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:00004FAC                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:00004FB1                 mov     esp, ebp
.text$mn:00004FB3                 pop     ebp
.text$mn:00004FB4                 retn
.text$mn:00004FB4 ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:00004FB4
.text$mn:00004FB4 ; ---------------------------------------------------------------------------
.text$mn:00004FB5                 align 4
.text$mn:00004FB5 _text$mn        ends
.text$mn:00004FB5
.text$mn:00004FB8 ; ===========================================================================
.text$mn:00004FB8
.text$mn:00004FB8 ; Segment type: Pure code
.text$mn:00004FB8 ; Segment permissions: Read/Execute
.text$mn:00004FB8 _text$mn        segment para public 'CODE' use32
.text$mn:00004FB8                 assume cs:_text$mn
.text$mn:00004FB8                 ;org 4FB8h
.text$mn:00004FB8 ; COMDAT (pick any)
.text$mn:00004FB8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004FB8
.text$mn:00004FB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00004FB8
.text$mn:00004FB8 ; Attributes: bp-based frame
.text$mn:00004FB8
.text$mn:00004FB8 ; public: char * __thiscall std::_Wrap_alloc<class std::allocator<char>>::allocate(unsigned int)
.text$mn:00004FB8                 public ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
.text$mn:00004FB8 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
.text$mn:00004FB8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+BBp
.text$mn:00004FB8                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+22p
.text$mn:00004FB8
.text$mn:00004FB8 var_4           = dword ptr -4
.text$mn:00004FB8 arg_0           = dword ptr  8
.text$mn:00004FB8
.text$mn:00004FB8                 push    ebp
.text$mn:00004FB9                 mov     ebp, esp
.text$mn:00004FBB                 push    ecx
.text$mn:00004FBC                 mov     [ebp+var_4], ecx
.text$mn:00004FBF                 mov     eax, [ebp+arg_0]
.text$mn:00004FC2                 push    eax
.text$mn:00004FC3                 mov     ecx, [ebp+var_4]
.text$mn:00004FC6                 call    ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate(uint)
.text$mn:00004FCB                 mov     esp, ebp
.text$mn:00004FCD                 pop     ebp
.text$mn:00004FCE                 retn    4
.text$mn:00004FCE ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z endp
.text$mn:00004FCE
.text$mn:00004FCE ; ---------------------------------------------------------------------------
.text$mn:00004FD1                 align 4
.text$mn:00004FD1 _text$mn        ends
.text$mn:00004FD1
.text$mn:00004FD4 ; ===========================================================================
.text$mn:00004FD4
.text$mn:00004FD4 ; Segment type: Pure code
.text$mn:00004FD4 ; Segment permissions: Read/Execute
.text$mn:00004FD4 _text$mn        segment para public 'CODE' use32
.text$mn:00004FD4                 assume cs:_text$mn
.text$mn:00004FD4                 ;org 4FD4h
.text$mn:00004FD4 ; COMDAT (pick any)
.text$mn:00004FD4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004FD4
.text$mn:00004FD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00004FD4
.text$mn:00004FD4 ; Attributes: bp-based frame
.text$mn:00004FD4
.text$mn:00004FD4 ; public: wchar_t * __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::allocate(unsigned int)
.text$mn:00004FD4                 public ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z
.text$mn:00004FD4 ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z proc near
.text$mn:00004FD4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+BBp
.text$mn:00004FD4                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+22p
.text$mn:00004FD4
.text$mn:00004FD4 var_4           = dword ptr -4
.text$mn:00004FD4 arg_0           = dword ptr  8
.text$mn:00004FD4
.text$mn:00004FD4                 push    ebp
.text$mn:00004FD5                 mov     ebp, esp
.text$mn:00004FD7                 push    ecx
.text$mn:00004FD8                 mov     [ebp+var_4], ecx
.text$mn:00004FDB                 mov     eax, [ebp+arg_0]
.text$mn:00004FDE                 push    eax
.text$mn:00004FDF                 mov     ecx, [ebp+var_4]
.text$mn:00004FE2                 call    ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate(uint)
.text$mn:00004FE7                 mov     esp, ebp
.text$mn:00004FE9                 pop     ebp
.text$mn:00004FEA                 retn    4
.text$mn:00004FEA ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z endp
.text$mn:00004FEA
.text$mn:00004FEA ; ---------------------------------------------------------------------------
.text$mn:00004FED                 align 10h
.text$mn:00004FED _text$mn        ends
.text$mn:00004FED
.text$mn:00004FF0 ; ===========================================================================
.text$mn:00004FF0
.text$mn:00004FF0 ; Segment type: Pure code
.text$mn:00004FF0 ; Segment permissions: Read/Execute
.text$mn:00004FF0 _text$mn        segment para public 'CODE' use32
.text$mn:00004FF0                 assume cs:_text$mn
.text$mn:00004FF0                 ;org 4FF0h
.text$mn:00004FF0 ; COMDAT (pick any)
.text$mn:00004FF0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00004FF0
.text$mn:00004FF0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004FF0
.text$mn:00004FF0 ; Attributes: bp-based frame
.text$mn:00004FF0
.text$mn:00004FF0 ; public: char * __thiscall std::allocator<char>::allocate(unsigned int)
.text$mn:00004FF0                 public ?allocate@?$allocator@D@std@@QAEPADI@Z
.text$mn:00004FF0 ?allocate@?$allocator@D@std@@QAEPADI@Z proc near
.text$mn:00004FF0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::allocate(uint)+Ep
.text$mn:00004FF0
.text$mn:00004FF0 var_4           = dword ptr -4
.text$mn:00004FF0 arg_0           = dword ptr  8
.text$mn:00004FF0
.text$mn:00004FF0                 push    ebp
.text$mn:00004FF1                 mov     ebp, esp
.text$mn:00004FF3                 push    ecx
.text$mn:00004FF4                 mov     [ebp+var_4], ecx
.text$mn:00004FF7                 push    0
.text$mn:00004FF9                 mov     eax, [ebp+arg_0]
.text$mn:00004FFC                 push    eax
.text$mn:00004FFD                 call    ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>(uint,char *)
.text$mn:00005002                 add     esp, 8
.text$mn:00005005                 mov     esp, ebp
.text$mn:00005007                 pop     ebp
.text$mn:00005008                 retn    4
.text$mn:00005008 ?allocate@?$allocator@D@std@@QAEPADI@Z endp
.text$mn:00005008
.text$mn:00005008 ; ---------------------------------------------------------------------------
.text$mn:0000500B                 align 4
.text$mn:0000500B _text$mn        ends
.text$mn:0000500B
.text$mn:0000500C ; ===========================================================================
.text$mn:0000500C
.text$mn:0000500C ; Segment type: Pure code
.text$mn:0000500C ; Segment permissions: Read/Execute
.text$mn:0000500C _text$mn        segment para public 'CODE' use32
.text$mn:0000500C                 assume cs:_text$mn
.text$mn:0000500C                 ;org 500Ch
.text$mn:0000500C ; COMDAT (pick any)
.text$mn:0000500C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:0000500C
.text$mn:0000500C ; =============== S U B R O U T I N E =======================================
.text$mn:0000500C
.text$mn:0000500C ; Attributes: bp-based frame
.text$mn:0000500C
.text$mn:0000500C ; public: struct std::_Container_proxy * __thiscall std::allocator<struct std::_Container_proxy>::allocate(unsigned int)
.text$mn:0000500C                 public ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:0000500C ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:0000500C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+16p
.text$mn:0000500C                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+16p
.text$mn:0000500C
.text$mn:0000500C var_4           = dword ptr -4
.text$mn:0000500C arg_0           = dword ptr  8
.text$mn:0000500C
.text$mn:0000500C                 push    ebp
.text$mn:0000500D                 mov     ebp, esp
.text$mn:0000500F                 push    ecx
.text$mn:00005010                 mov     [ebp+var_4], ecx
.text$mn:00005013                 push    0
.text$mn:00005015                 mov     eax, [ebp+arg_0]
.text$mn:00005018                 push    eax
.text$mn:00005019                 call    ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)
.text$mn:0000501E                 add     esp, 8
.text$mn:00005021                 mov     esp, ebp
.text$mn:00005023                 pop     ebp
.text$mn:00005024                 retn    4
.text$mn:00005024 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:00005024
.text$mn:00005024 ; ---------------------------------------------------------------------------
.text$mn:00005027                 align 4
.text$mn:00005027 _text$mn        ends
.text$mn:00005027
.text$mn:00005028 ; ===========================================================================
.text$mn:00005028
.text$mn:00005028 ; Segment type: Pure code
.text$mn:00005028 ; Segment permissions: Read/Execute
.text$mn:00005028 _text$mn        segment para public 'CODE' use32
.text$mn:00005028                 assume cs:_text$mn
.text$mn:00005028                 ;org 5028h
.text$mn:00005028 ; COMDAT (pick any)
.text$mn:00005028                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005028
.text$mn:00005028 ; =============== S U B R O U T I N E =======================================
.text$mn:00005028
.text$mn:00005028 ; Attributes: bp-based frame
.text$mn:00005028
.text$mn:00005028 ; public: wchar_t * __thiscall std::allocator<wchar_t>::allocate(unsigned int)
.text$mn:00005028                 public ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
.text$mn:00005028 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z proc near
.text$mn:00005028                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)+Ep
.text$mn:00005028
.text$mn:00005028 var_4           = dword ptr -4
.text$mn:00005028 arg_0           = dword ptr  8
.text$mn:00005028
.text$mn:00005028                 push    ebp
.text$mn:00005029                 mov     ebp, esp
.text$mn:0000502B                 push    ecx
.text$mn:0000502C                 mov     [ebp+var_4], ecx
.text$mn:0000502F                 push    0
.text$mn:00005031                 mov     eax, [ebp+arg_0]
.text$mn:00005034                 push    eax
.text$mn:00005035                 call    ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>(uint,wchar_t *)
.text$mn:0000503A                 add     esp, 8
.text$mn:0000503D                 mov     esp, ebp
.text$mn:0000503F                 pop     ebp
.text$mn:00005040                 retn    4
.text$mn:00005040 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z endp
.text$mn:00005040
.text$mn:00005040 ; ---------------------------------------------------------------------------
.text$mn:00005043                 align 4
.text$mn:00005043 _text$mn        ends
.text$mn:00005043
.text$mn:00005044 ; ===========================================================================
.text$mn:00005044
.text$mn:00005044 ; Segment type: Pure code
.text$mn:00005044 ; Segment permissions: Read/Execute
.text$mn:00005044 _text$mn        segment para public 'CODE' use32
.text$mn:00005044                 assume cs:_text$mn
.text$mn:00005044                 ;org 5044h
.text$mn:00005044 ; COMDAT (pick any)
.text$mn:00005044                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005044
.text$mn:00005044 ; =============== S U B R O U T I N E =======================================
.text$mn:00005044
.text$mn:00005044 ; Attributes: bp-based frame
.text$mn:00005044
.text$mn:00005044 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::assign(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, unsigned int, unsigned int)
.text$mn:00005044                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00005044 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00005044                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+4Fp
.text$mn:00005044
.text$mn:00005044 Size            = dword ptr -8
.text$mn:00005044 var_4           = dword ptr -4
.text$mn:00005044 arg_0           = dword ptr  8
.text$mn:00005044 arg_4           = dword ptr  0Ch
.text$mn:00005044 arg_8           = dword ptr  10h
.text$mn:00005044
.text$mn:00005044                 push    ebp
.text$mn:00005045                 mov     ebp, esp
.text$mn:00005047                 sub     esp, 8
.text$mn:0000504A                 mov     [ebp+var_4], ecx
.text$mn:0000504D                 mov     ecx, [ebp+arg_0]
.text$mn:00005050                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:00005055                 cmp     eax, [ebp+arg_4]
.text$mn:00005058                 jnb     short loc_5062
.text$mn:0000505A                 mov     ecx, [ebp+var_4]
.text$mn:0000505D                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:00005062
.text$mn:00005062 loc_5062:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+14j
.text$mn:00005062                 mov     ecx, [ebp+arg_0]
.text$mn:00005065                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:0000506A                 sub     eax, [ebp+arg_4]
.text$mn:0000506D                 mov     [ebp+Size], eax
.text$mn:00005070                 mov     eax, [ebp+arg_8]
.text$mn:00005073                 cmp     eax, [ebp+Size]
.text$mn:00005076                 jnb     short loc_507E
.text$mn:00005078                 mov     ecx, [ebp+arg_8]
.text$mn:0000507B                 mov     [ebp+Size], ecx
.text$mn:0000507E
.text$mn:0000507E loc_507E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+32j
.text$mn:0000507E                 mov     edx, [ebp+var_4]
.text$mn:00005081                 cmp     edx, [ebp+arg_0]
.text$mn:00005084                 jnz     short loc_50A5
.text$mn:00005086                 mov     eax, [ebp+arg_4]
.text$mn:00005089                 add     eax, [ebp+Size]
.text$mn:0000508C                 push    eax
.text$mn:0000508D                 mov     ecx, [ebp+var_4]
.text$mn:00005090                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)
.text$mn:00005095                 mov     ecx, [ebp+arg_4]
.text$mn:00005098                 push    ecx
.text$mn:00005099                 push    0
.text$mn:0000509B                 mov     ecx, [ebp+var_4]
.text$mn:0000509E                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)
.text$mn:000050A3                 jmp     short loc_50E7
.text$mn:000050A5 ; ---------------------------------------------------------------------------
.text$mn:000050A5
.text$mn:000050A5 loc_50A5:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+40j
.text$mn:000050A5                 push    0
.text$mn:000050A7                 mov     edx, [ebp+Size]
.text$mn:000050AA                 push    edx
.text$mn:000050AB                 mov     ecx, [ebp+var_4]
.text$mn:000050AE                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:000050B3                 movzx   eax, al
.text$mn:000050B6                 test    eax, eax
.text$mn:000050B8                 jz      short loc_50E7
.text$mn:000050BA                 mov     ecx, [ebp+Size]
.text$mn:000050BD                 push    ecx             ; Size
.text$mn:000050BE                 mov     ecx, [ebp+arg_0]
.text$mn:000050C1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000050C6                 add     eax, [ebp+arg_4]
.text$mn:000050C9                 push    eax             ; Src
.text$mn:000050CA                 mov     ecx, [ebp+var_4]
.text$mn:000050CD                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000050D2                 push    eax             ; Dst
.text$mn:000050D3                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:000050D8                 add     esp, 0Ch
.text$mn:000050DB                 mov     edx, [ebp+Size]
.text$mn:000050DE                 push    edx
.text$mn:000050DF                 mov     ecx, [ebp+var_4]
.text$mn:000050E2                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:000050E7
.text$mn:000050E7 loc_50E7:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Fj
.text$mn:000050E7                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+74j
.text$mn:000050E7                 mov     eax, [ebp+var_4]
.text$mn:000050EA                 mov     esp, ebp
.text$mn:000050EC                 pop     ebp
.text$mn:000050ED                 retn    0Ch
.text$mn:000050ED ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:000050ED
.text$mn:000050ED _text$mn        ends
.text$mn:000050ED
.text$mn:000050F0 ; ===========================================================================
.text$mn:000050F0
.text$mn:000050F0 ; Segment type: Pure code
.text$mn:000050F0 ; Segment permissions: Read/Execute
.text$mn:000050F0 _text$mn        segment para public 'CODE' use32
.text$mn:000050F0                 assume cs:_text$mn
.text$mn:000050F0                 ;org 50F0h
.text$mn:000050F0 ; COMDAT (pick any)
.text$mn:000050F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000050F0
.text$mn:000050F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000050F0
.text$mn:000050F0 ; Attributes: bp-based frame
.text$mn:000050F0
.text$mn:000050F0 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char *Str)
.text$mn:000050F0                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
.text$mn:000050F0 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
.text$mn:000050F0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+53p
.text$mn:000050F0
.text$mn:000050F0 var_4           = dword ptr -4
.text$mn:000050F0 Str             = dword ptr  8
.text$mn:000050F0
.text$mn:000050F0                 push    ebp
.text$mn:000050F1                 mov     ebp, esp
.text$mn:000050F3                 push    ecx
.text$mn:000050F4                 mov     [ebp+var_4], ecx
.text$mn:000050F7                 push    490h            ; unsigned int
.text$mn:000050FC                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005101                 mov     eax, [ebp+Str]
.text$mn:00005104                 push    eax             ; int
.text$mn:00005105                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:0000510A                 add     esp, 0Ch
.text$mn:0000510D                 mov     ecx, [ebp+Str]
.text$mn:00005110                 push    ecx             ; Str
.text$mn:00005111                 call    ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length(char const *)
.text$mn:00005116                 add     esp, 4
.text$mn:00005119                 push    eax             ; Size
.text$mn:0000511A                 mov     edx, [ebp+Str]
.text$mn:0000511D                 push    edx             ; Src
.text$mn:0000511E                 mov     ecx, [ebp+var_4]
.text$mn:00005121                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)
.text$mn:00005126                 mov     esp, ebp
.text$mn:00005128                 pop     ebp
.text$mn:00005129                 retn    4
.text$mn:00005129 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z endp
.text$mn:00005129
.text$mn:00005129 _text$mn        ends
.text$mn:00005129
.text$mn:0000512C ; ===========================================================================
.text$mn:0000512C
.text$mn:0000512C ; Segment type: Pure code
.text$mn:0000512C ; Segment permissions: Read/Execute
.text$mn:0000512C _text$mn        segment para public 'CODE' use32
.text$mn:0000512C                 assume cs:_text$mn
.text$mn:0000512C                 ;org 512Ch
.text$mn:0000512C ; COMDAT (pick any)
.text$mn:0000512C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:0000512C
.text$mn:0000512C ; =============== S U B R O U T I N E =======================================
.text$mn:0000512C
.text$mn:0000512C ; Attributes: bp-based frame
.text$mn:0000512C
.text$mn:0000512C ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(void *Src, size_t Size)
.text$mn:0000512C                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
.text$mn:0000512C ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
.text$mn:0000512C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+31p
.text$mn:0000512C
.text$mn:0000512C var_4           = dword ptr -4
.text$mn:0000512C Src             = dword ptr  8
.text$mn:0000512C Size            = dword ptr  0Ch
.text$mn:0000512C
.text$mn:0000512C                 push    ebp
.text$mn:0000512D                 mov     ebp, esp
.text$mn:0000512F                 push    ecx
.text$mn:00005130                 mov     [ebp+var_4], ecx
.text$mn:00005133                 cmp     [ebp+Size], 0
.text$mn:00005137                 jz      short loc_514F
.text$mn:00005139                 push    47Fh            ; unsigned int
.text$mn:0000513E                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005143                 mov     eax, [ebp+Src]
.text$mn:00005146                 push    eax             ; int
.text$mn:00005147                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:0000514C                 add     esp, 0Ch
.text$mn:0000514F
.text$mn:0000514F loc_514F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+Bj
.text$mn:0000514F                 mov     ecx, [ebp+Src]
.text$mn:00005152                 push    ecx
.text$mn:00005153                 mov     ecx, [ebp+var_4]
.text$mn:00005156                 call    ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)
.text$mn:0000515B                 movzx   edx, al
.text$mn:0000515E                 test    edx, edx
.text$mn:00005160                 jz      short loc_5182
.text$mn:00005162                 mov     eax, [ebp+Size]
.text$mn:00005165                 push    eax
.text$mn:00005166                 mov     ecx, [ebp+var_4]
.text$mn:00005169                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000516E                 mov     ecx, [ebp+Src]
.text$mn:00005171                 sub     ecx, eax
.text$mn:00005173                 push    ecx
.text$mn:00005174                 mov     edx, [ebp+var_4]
.text$mn:00005177                 push    edx
.text$mn:00005178                 mov     ecx, [ebp+var_4]
.text$mn:0000517B                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:00005180                 jmp     short loc_51BF
.text$mn:00005182 ; ---------------------------------------------------------------------------
.text$mn:00005182
.text$mn:00005182 loc_5182:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+34j
.text$mn:00005182                 push    0
.text$mn:00005184                 mov     eax, [ebp+Size]
.text$mn:00005187                 push    eax
.text$mn:00005188                 mov     ecx, [ebp+var_4]
.text$mn:0000518B                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:00005190                 movzx   ecx, al
.text$mn:00005193                 test    ecx, ecx
.text$mn:00005195                 jz      short loc_51BC
.text$mn:00005197                 mov     edx, [ebp+Size]
.text$mn:0000519A                 push    edx             ; Size
.text$mn:0000519B                 mov     eax, [ebp+Src]
.text$mn:0000519E                 push    eax             ; Src
.text$mn:0000519F                 mov     ecx, [ebp+var_4]
.text$mn:000051A2                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000051A7                 push    eax             ; Dst
.text$mn:000051A8                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:000051AD                 add     esp, 0Ch
.text$mn:000051B0                 mov     ecx, [ebp+Size]
.text$mn:000051B3                 push    ecx
.text$mn:000051B4                 mov     ecx, [ebp+var_4]
.text$mn:000051B7                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:000051BC
.text$mn:000051BC loc_51BC:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+69j
.text$mn:000051BC                 mov     eax, [ebp+var_4]
.text$mn:000051BF
.text$mn:000051BF loc_51BF:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+54j
.text$mn:000051BF                 mov     esp, ebp
.text$mn:000051C1                 pop     ebp
.text$mn:000051C2                 retn    8
.text$mn:000051C2 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z endp
.text$mn:000051C2
.text$mn:000051C2 ; ---------------------------------------------------------------------------
.text$mn:000051C5                 align 4
.text$mn:000051C5 _text$mn        ends
.text$mn:000051C5
.text$mn:000051C8 ; ===========================================================================
.text$mn:000051C8
.text$mn:000051C8 ; Segment type: Pure code
.text$mn:000051C8 ; Segment permissions: Read/Execute
.text$mn:000051C8 _text$mn        segment para public 'CODE' use32
.text$mn:000051C8                 assume cs:_text$mn
.text$mn:000051C8                 ;org 51C8h
.text$mn:000051C8 ; COMDAT (pick any)
.text$mn:000051C8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000051C8
.text$mn:000051C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000051C8
.text$mn:000051C8 ; Attributes: bp-based frame
.text$mn:000051C8
.text$mn:000051C8 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:000051C8                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:000051C8 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:000051C8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+6Bp
.text$mn:000051C8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+51p
.text$mn:000051C8
.text$mn:000051C8 var_8           = dword ptr -8
.text$mn:000051C8 var_4           = dword ptr -4
.text$mn:000051C8 arg_0           = dword ptr  8
.text$mn:000051C8 arg_4           = dword ptr  0Ch
.text$mn:000051C8 arg_8           = dword ptr  10h
.text$mn:000051C8
.text$mn:000051C8                 push    ebp
.text$mn:000051C9                 mov     ebp, esp
.text$mn:000051CB                 sub     esp, 8
.text$mn:000051CE                 mov     [ebp+var_4], ecx
.text$mn:000051D1                 mov     ecx, [ebp+arg_0]
.text$mn:000051D4                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:000051D9                 cmp     eax, [ebp+arg_4]
.text$mn:000051DC                 jnb     short loc_51E6
.text$mn:000051DE                 mov     ecx, [ebp+var_4]
.text$mn:000051E1                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:000051E6
.text$mn:000051E6 loc_51E6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:000051E6                 mov     ecx, [ebp+arg_0]
.text$mn:000051E9                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:000051EE                 sub     eax, [ebp+arg_4]
.text$mn:000051F1                 mov     [ebp+var_8], eax
.text$mn:000051F4                 mov     eax, [ebp+arg_8]
.text$mn:000051F7                 cmp     eax, [ebp+var_8]
.text$mn:000051FA                 jnb     short loc_5202
.text$mn:000051FC                 mov     ecx, [ebp+arg_8]
.text$mn:000051FF                 mov     [ebp+var_8], ecx
.text$mn:00005202
.text$mn:00005202 loc_5202:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:00005202                 mov     edx, [ebp+var_4]
.text$mn:00005205                 cmp     edx, [ebp+arg_0]
.text$mn:00005208                 jnz     short loc_5229
.text$mn:0000520A                 mov     eax, [ebp+arg_4]
.text$mn:0000520D                 add     eax, [ebp+var_8]
.text$mn:00005210                 push    eax
.text$mn:00005211                 mov     ecx, [ebp+var_4]
.text$mn:00005214                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)
.text$mn:00005219                 mov     ecx, [ebp+arg_4]
.text$mn:0000521C                 push    ecx
.text$mn:0000521D                 push    0
.text$mn:0000521F                 mov     ecx, [ebp+var_4]
.text$mn:00005222                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)
.text$mn:00005227                 jmp     short loc_526E
.text$mn:00005229 ; ---------------------------------------------------------------------------
.text$mn:00005229
.text$mn:00005229 loc_5229:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+40j
.text$mn:00005229                 push    0
.text$mn:0000522B                 mov     edx, [ebp+var_8]
.text$mn:0000522E                 push    edx
.text$mn:0000522F                 mov     ecx, [ebp+var_4]
.text$mn:00005232                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00005237                 movzx   eax, al
.text$mn:0000523A                 test    eax, eax
.text$mn:0000523C                 jz      short loc_526E
.text$mn:0000523E                 mov     ecx, [ebp+var_8]
.text$mn:00005241                 push    ecx             ; int
.text$mn:00005242                 mov     ecx, [ebp+arg_0]
.text$mn:00005245                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000524A                 mov     edx, [ebp+arg_4]
.text$mn:0000524D                 lea     eax, [eax+edx*2]
.text$mn:00005250                 push    eax             ; Src
.text$mn:00005251                 mov     ecx, [ebp+var_4]
.text$mn:00005254                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00005259                 push    eax             ; Dst
.text$mn:0000525A                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000525F                 add     esp, 0Ch
.text$mn:00005262                 mov     ecx, [ebp+var_8]
.text$mn:00005265                 push    ecx
.text$mn:00005266                 mov     ecx, [ebp+var_4]
.text$mn:00005269                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000526E
.text$mn:0000526E loc_526E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Fj
.text$mn:0000526E                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+74j
.text$mn:0000526E                 mov     eax, [ebp+var_4]
.text$mn:00005271                 mov     esp, ebp
.text$mn:00005273                 pop     ebp
.text$mn:00005274                 retn    0Ch
.text$mn:00005274 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:00005274
.text$mn:00005274 ; ---------------------------------------------------------------------------
.text$mn:00005277                 align 4
.text$mn:00005277 _text$mn        ends
.text$mn:00005277
.text$mn:00005278 ; ===========================================================================
.text$mn:00005278
.text$mn:00005278 ; Segment type: Pure code
.text$mn:00005278 ; Segment permissions: Read/Execute
.text$mn:00005278 _text$mn        segment para public 'CODE' use32
.text$mn:00005278                 assume cs:_text$mn
.text$mn:00005278                 ;org 5278h
.text$mn:00005278 ; COMDAT (pick any)
.text$mn:00005278                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005278
.text$mn:00005278 ; =============== S U B R O U T I N E =======================================
.text$mn:00005278
.text$mn:00005278 ; Attributes: bp-based frame
.text$mn:00005278
.text$mn:00005278 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t *Str)
.text$mn:00005278                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:00005278 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:00005278                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+53p
.text$mn:00005278
.text$mn:00005278 var_4           = dword ptr -4
.text$mn:00005278 Str             = dword ptr  8
.text$mn:00005278
.text$mn:00005278                 push    ebp
.text$mn:00005279                 mov     ebp, esp
.text$mn:0000527B                 push    ecx
.text$mn:0000527C                 mov     [ebp+var_4], ecx
.text$mn:0000527F                 push    490h            ; unsigned int
.text$mn:00005284                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005289                 mov     eax, [ebp+Str]
.text$mn:0000528C                 push    eax             ; int
.text$mn:0000528D                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00005292                 add     esp, 0Ch
.text$mn:00005295                 mov     ecx, [ebp+Str]
.text$mn:00005298                 push    ecx             ; Str
.text$mn:00005299                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:0000529E                 add     esp, 4
.text$mn:000052A1                 push    eax             ; int
.text$mn:000052A2                 mov     edx, [ebp+Str]
.text$mn:000052A5                 push    edx             ; Src
.text$mn:000052A6                 mov     ecx, [ebp+var_4]
.text$mn:000052A9                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)
.text$mn:000052AE                 mov     esp, ebp
.text$mn:000052B0                 pop     ebp
.text$mn:000052B1                 retn    4
.text$mn:000052B1 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:000052B1
.text$mn:000052B1 _text$mn        ends
.text$mn:000052B1
.text$mn:000052B4 ; ===========================================================================
.text$mn:000052B4
.text$mn:000052B4 ; Segment type: Pure code
.text$mn:000052B4 ; Segment permissions: Read/Execute
.text$mn:000052B4 _text$mn        segment para public 'CODE' use32
.text$mn:000052B4                 assume cs:_text$mn
.text$mn:000052B4                 ;org 52B4h
.text$mn:000052B4 ; COMDAT (pick any)
.text$mn:000052B4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000052B4
.text$mn:000052B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000052B4
.text$mn:000052B4 ; Attributes: bp-based frame
.text$mn:000052B4
.text$mn:000052B4 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(void *Src, int)
.text$mn:000052B4                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:000052B4 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:000052B4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+31p
.text$mn:000052B4
.text$mn:000052B4 var_4           = dword ptr -4
.text$mn:000052B4 Src             = dword ptr  8
.text$mn:000052B4 arg_4           = dword ptr  0Ch
.text$mn:000052B4
.text$mn:000052B4                 push    ebp
.text$mn:000052B5                 mov     ebp, esp
.text$mn:000052B7                 push    ecx
.text$mn:000052B8                 mov     [ebp+var_4], ecx
.text$mn:000052BB                 cmp     [ebp+arg_4], 0
.text$mn:000052BF                 jz      short loc_52D7
.text$mn:000052C1                 push    47Fh            ; unsigned int
.text$mn:000052C6                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000052CB                 mov     eax, [ebp+Src]
.text$mn:000052CE                 push    eax             ; int
.text$mn:000052CF                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:000052D4                 add     esp, 0Ch
.text$mn:000052D7
.text$mn:000052D7 loc_52D7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+Bj
.text$mn:000052D7                 mov     ecx, [ebp+Src]
.text$mn:000052DA                 push    ecx
.text$mn:000052DB                 mov     ecx, [ebp+var_4]
.text$mn:000052DE                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:000052E3                 movzx   edx, al
.text$mn:000052E6                 test    edx, edx
.text$mn:000052E8                 jz      short loc_530C
.text$mn:000052EA                 mov     eax, [ebp+arg_4]
.text$mn:000052ED                 push    eax
.text$mn:000052EE                 mov     ecx, [ebp+var_4]
.text$mn:000052F1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000052F6                 mov     ecx, [ebp+Src]
.text$mn:000052F9                 sub     ecx, eax
.text$mn:000052FB                 sar     ecx, 1
.text$mn:000052FD                 push    ecx
.text$mn:000052FE                 mov     edx, [ebp+var_4]
.text$mn:00005301                 push    edx
.text$mn:00005302                 mov     ecx, [ebp+var_4]
.text$mn:00005305                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000530A                 jmp     short loc_5349
.text$mn:0000530C ; ---------------------------------------------------------------------------
.text$mn:0000530C
.text$mn:0000530C loc_530C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+34j
.text$mn:0000530C                 push    0
.text$mn:0000530E                 mov     eax, [ebp+arg_4]
.text$mn:00005311                 push    eax
.text$mn:00005312                 mov     ecx, [ebp+var_4]
.text$mn:00005315                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000531A                 movzx   ecx, al
.text$mn:0000531D                 test    ecx, ecx
.text$mn:0000531F                 jz      short loc_5346
.text$mn:00005321                 mov     edx, [ebp+arg_4]
.text$mn:00005324                 push    edx             ; int
.text$mn:00005325                 mov     eax, [ebp+Src]
.text$mn:00005328                 push    eax             ; Src
.text$mn:00005329                 mov     ecx, [ebp+var_4]
.text$mn:0000532C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00005331                 push    eax             ; Dst
.text$mn:00005332                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00005337                 add     esp, 0Ch
.text$mn:0000533A                 mov     ecx, [ebp+arg_4]
.text$mn:0000533D                 push    ecx
.text$mn:0000533E                 mov     ecx, [ebp+var_4]
.text$mn:00005341                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00005346
.text$mn:00005346 loc_5346:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+6Bj
.text$mn:00005346                 mov     eax, [ebp+var_4]
.text$mn:00005349
.text$mn:00005349 loc_5349:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+56j
.text$mn:00005349                 mov     esp, ebp
.text$mn:0000534B                 pop     ebp
.text$mn:0000534C                 retn    8
.text$mn:0000534C ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:0000534C
.text$mn:0000534C ; ---------------------------------------------------------------------------
.text$mn:0000534F                 align 10h
.text$mn:0000534F _text$mn        ends
.text$mn:0000534F
.text$mn:00005350 ; ===========================================================================
.text$mn:00005350
.text$mn:00005350 ; Segment type: Pure code
.text$mn:00005350 ; Segment permissions: Read/Execute
.text$mn:00005350 _text$mn        segment para public 'CODE' use32
.text$mn:00005350                 assume cs:_text$mn
.text$mn:00005350                 ;org 5350h
.text$mn:00005350 ; COMDAT (pick any)
.text$mn:00005350                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005350
.text$mn:00005350 ; =============== S U B R O U T I N E =======================================
.text$mn:00005350
.text$mn:00005350 ; Attributes: bp-based frame
.text$mn:00005350
.text$mn:00005350 ; public: static void __cdecl std::char_traits<char>::assign(char &, char const &)
.text$mn:00005350                 public ?assign@?$char_traits@D@std@@SAXAADABD@Z
.text$mn:00005350 ?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
.text$mn:00005350                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+26p
.text$mn:00005350
.text$mn:00005350 arg_0           = dword ptr  8
.text$mn:00005350 arg_4           = dword ptr  0Ch
.text$mn:00005350
.text$mn:00005350                 push    ebp
.text$mn:00005351                 mov     ebp, esp
.text$mn:00005353                 mov     eax, [ebp+arg_0]
.text$mn:00005356                 mov     ecx, [ebp+arg_4]
.text$mn:00005359                 mov     dl, [ecx]
.text$mn:0000535B                 mov     [eax], dl
.text$mn:0000535D                 pop     ebp
.text$mn:0000535E                 retn
.text$mn:0000535E ?assign@?$char_traits@D@std@@SAXAADABD@Z endp
.text$mn:0000535E
.text$mn:0000535E ; ---------------------------------------------------------------------------
.text$mn:0000535F                 align 10h
.text$mn:0000535F _text$mn        ends
.text$mn:0000535F
.text$mn:00005360 ; ===========================================================================
.text$mn:00005360
.text$mn:00005360 ; Segment type: Pure code
.text$mn:00005360 ; Segment permissions: Read/Execute
.text$mn:00005360 _text$mn        segment para public 'CODE' use32
.text$mn:00005360                 assume cs:_text$mn
.text$mn:00005360                 ;org 5360h
.text$mn:00005360 ; COMDAT (pick any)
.text$mn:00005360                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005360
.text$mn:00005360 ; =============== S U B R O U T I N E =======================================
.text$mn:00005360
.text$mn:00005360 ; Attributes: bp-based frame
.text$mn:00005360
.text$mn:00005360 ; public: static void __cdecl std::char_traits<wchar_t>::assign(wchar_t &, wchar_t const &)
.text$mn:00005360                 public ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
.text$mn:00005360 ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z proc near
.text$mn:00005360                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)+2Bp
.text$mn:00005360
.text$mn:00005360 arg_0           = dword ptr  8
.text$mn:00005360 arg_4           = dword ptr  0Ch
.text$mn:00005360
.text$mn:00005360                 push    ebp
.text$mn:00005361                 mov     ebp, esp
.text$mn:00005363                 mov     eax, [ebp+arg_0]
.text$mn:00005366                 mov     ecx, [ebp+arg_4]
.text$mn:00005369                 mov     dx, [ecx]
.text$mn:0000536C                 mov     [eax], dx
.text$mn:0000536F                 pop     ebp
.text$mn:00005370                 retn
.text$mn:00005370 ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z endp
.text$mn:00005370
.text$mn:00005370 ; ---------------------------------------------------------------------------
.text$mn:00005371                 align 4
.text$mn:00005371 _text$mn        ends
.text$mn:00005371
.text$mn:00005374 ; ===========================================================================
.text$mn:00005374
.text$mn:00005374 ; Segment type: Pure code
.text$mn:00005374 ; Segment permissions: Read/Execute
.text$mn:00005374 _text$mn        segment para public 'CODE' use32
.text$mn:00005374                 assume cs:_text$mn
.text$mn:00005374                 ;org 5374h
.text$mn:00005374 ; COMDAT (pick any)
.text$mn:00005374                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005374
.text$mn:00005374 ; =============== S U B R O U T I N E =======================================
.text$mn:00005374
.text$mn:00005374 ; Attributes: bp-based frame
.text$mn:00005374
.text$mn:00005374 ; public: wchar_t const * __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::c_str(void)const
.text$mn:00005374                 public ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
.text$mn:00005374 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ proc near
.text$mn:00005374                                         ; CODE XREF: Printer::doPrint(bool)+3EFp
.text$mn:00005374                                         ; Printer::doPrint(bool)+575p ...
.text$mn:00005374
.text$mn:00005374 var_4           = dword ptr -4
.text$mn:00005374
.text$mn:00005374                 push    ebp
.text$mn:00005375                 mov     ebp, esp
.text$mn:00005377                 push    ecx
.text$mn:00005378                 mov     [ebp+var_4], ecx
.text$mn:0000537B                 mov     ecx, [ebp+var_4]
.text$mn:0000537E                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00005383                 mov     esp, ebp
.text$mn:00005385                 pop     ebp
.text$mn:00005386                 retn
.text$mn:00005386 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ endp
.text$mn:00005386
.text$mn:00005386 ; ---------------------------------------------------------------------------
.text$mn:00005387                 align 4
.text$mn:00005387 _text$mn        ends
.text$mn:00005387
.text$mn:00005388 ; ===========================================================================
.text$mn:00005388
.text$mn:00005388 ; Segment type: Pure code
.text$mn:00005388 ; Segment permissions: Read/Execute
.text$mn:00005388 _text$mn        segment para public 'CODE' use32
.text$mn:00005388                 assume cs:_text$mn
.text$mn:00005388                 ;org 5388h
.text$mn:00005388 ; COMDAT (pick any)
.text$mn:00005388                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005388
.text$mn:00005388 ; =============== S U B R O U T I N E =======================================
.text$mn:00005388
.text$mn:00005388 ; Attributes: bp-based frame
.text$mn:00005388
.text$mn:00005388 ; const struct std::error_category *__thiscall std::error_code::category(std::error_code *__hidden this)
.text$mn:00005388                 public ?category@error_code@std@@QBEABVerror_category@2@XZ
.text$mn:00005388 ?category@error_code@std@@QBEABVerror_category@2@XZ proc near
.text$mn:00005388                                         ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+Cp
.text$mn:00005388
.text$mn:00005388 var_4           = dword ptr -4
.text$mn:00005388
.text$mn:00005388                 push    ebp
.text$mn:00005389                 mov     ebp, esp
.text$mn:0000538B                 push    ecx
.text$mn:0000538C                 mov     [ebp+var_4], ecx
.text$mn:0000538F                 mov     eax, [ebp+var_4]
.text$mn:00005392                 mov     eax, [eax+4]
.text$mn:00005395                 mov     esp, ebp
.text$mn:00005397                 pop     ebp
.text$mn:00005398                 retn
.text$mn:00005398 ?category@error_code@std@@QBEABVerror_category@2@XZ endp
.text$mn:00005398
.text$mn:00005398 ; ---------------------------------------------------------------------------
.text$mn:00005399                 align 4
.text$mn:00005399 _text$mn        ends
.text$mn:00005399
.text$mn:0000539C ; ===========================================================================
.text$mn:0000539C
.text$mn:0000539C ; Segment type: Pure code
.text$mn:0000539C ; Segment permissions: Read/Execute
.text$mn:0000539C _text$mn        segment para public 'CODE' use32
.text$mn:0000539C                 assume cs:_text$mn
.text$mn:0000539C                 ;org 539Ch
.text$mn:0000539C ; COMDAT (pick any)
.text$mn:0000539C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:0000539C
.text$mn:0000539C ; =============== S U B R O U T I N E =======================================
.text$mn:0000539C
.text$mn:0000539C ; Attributes: bp-based frame
.text$mn:0000539C
.text$mn:0000539C ; const struct std::error_category *__thiscall std::error_condition::category(std::error_condition *__hidden this)
.text$mn:0000539C                 public ?category@error_condition@std@@QBEABVerror_category@2@XZ
.text$mn:0000539C ?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
.text$mn:0000539C                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+Dp
.text$mn:0000539C                                         ; std::error_condition::operator==(std::error_condition const &)+16p
.text$mn:0000539C
.text$mn:0000539C var_4           = dword ptr -4
.text$mn:0000539C
.text$mn:0000539C                 push    ebp
.text$mn:0000539D                 mov     ebp, esp
.text$mn:0000539F                 push    ecx
.text$mn:000053A0                 mov     [ebp+var_4], ecx
.text$mn:000053A3                 mov     eax, [ebp+var_4]
.text$mn:000053A6                 mov     eax, [eax+4]
.text$mn:000053A9                 mov     esp, ebp
.text$mn:000053AB                 pop     ebp
.text$mn:000053AC                 retn
.text$mn:000053AC ?category@error_condition@std@@QBEABVerror_category@2@XZ endp
.text$mn:000053AC
.text$mn:000053AC ; ---------------------------------------------------------------------------
.text$mn:000053AD                 align 10h
.text$mn:000053AD _text$mn        ends
.text$mn:000053AD
.text$mn:000053B0 ; ===========================================================================
.text$mn:000053B0
.text$mn:000053B0 ; Segment type: Pure code
.text$mn:000053B0 ; Segment permissions: Read/Execute
.text$mn:000053B0 _text$mn        segment para public 'CODE' use32
.text$mn:000053B0                 assume cs:_text$mn
.text$mn:000053B0                 ;org 53B0h
.text$mn:000053B0 ; COMDAT (pick any)
.text$mn:000053B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000053B0
.text$mn:000053B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000053B0
.text$mn:000053B0 ; Attributes: bp-based frame
.text$mn:000053B0
.text$mn:000053B0 ; public: int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::compare(unsigned int, unsigned int, wchar_t const *, unsigned int)const
.text$mn:000053B0                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z
.text$mn:000053B0 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z proc near
.text$mn:000053B0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t const *)+3Ap
.text$mn:000053B0
.text$mn:000053B0 var_18          = dword ptr -18h
.text$mn:000053B0 var_14          = dword ptr -14h
.text$mn:000053B0 var_10          = dword ptr -10h
.text$mn:000053B0 var_C           = dword ptr -0Ch
.text$mn:000053B0 var_8           = dword ptr -8
.text$mn:000053B0 var_4           = dword ptr -4
.text$mn:000053B0 arg_0           = dword ptr  8
.text$mn:000053B0 arg_4           = dword ptr  0Ch
.text$mn:000053B0 arg_8           = dword ptr  10h
.text$mn:000053B0 arg_C           = dword ptr  14h
.text$mn:000053B0
.text$mn:000053B0                 push    ebp
.text$mn:000053B1                 mov     ebp, esp
.text$mn:000053B3                 sub     esp, 18h
.text$mn:000053B6                 mov     [ebp+var_4], ecx
.text$mn:000053B9                 cmp     [ebp+arg_C], 0
.text$mn:000053BD                 jz      short loc_53D5
.text$mn:000053BF                 push    87Dh            ; unsigned int
.text$mn:000053C4                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000053C9                 mov     eax, [ebp+arg_8]
.text$mn:000053CC                 push    eax             ; int
.text$mn:000053CD                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:000053D2                 add     esp, 0Ch
.text$mn:000053D5
.text$mn:000053D5 loc_53D5:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+Dj
.text$mn:000053D5                 mov     ecx, [ebp+var_4]
.text$mn:000053D8                 mov     edx, [ecx+14h]
.text$mn:000053DB                 cmp     edx, [ebp+arg_0]
.text$mn:000053DE                 jnb     short loc_53E8
.text$mn:000053E0                 mov     ecx, [ebp+var_4]
.text$mn:000053E3                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:000053E8
.text$mn:000053E8 loc_53E8:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+2Ej
.text$mn:000053E8                 mov     eax, [ebp+var_4]
.text$mn:000053EB                 mov     ecx, [eax+14h]
.text$mn:000053EE                 sub     ecx, [ebp+arg_0]
.text$mn:000053F1                 cmp     ecx, [ebp+arg_4]
.text$mn:000053F4                 jnb     short loc_5402
.text$mn:000053F6                 mov     edx, [ebp+var_4]
.text$mn:000053F9                 mov     eax, [edx+14h]
.text$mn:000053FC                 sub     eax, [ebp+arg_0]
.text$mn:000053FF                 mov     [ebp+arg_4], eax
.text$mn:00005402
.text$mn:00005402 loc_5402:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+44j
.text$mn:00005402                 mov     ecx, [ebp+arg_4]
.text$mn:00005405                 cmp     ecx, [ebp+arg_C]
.text$mn:00005408                 jnb     short loc_5412
.text$mn:0000540A                 mov     edx, [ebp+arg_4]
.text$mn:0000540D                 mov     [ebp+var_8], edx
.text$mn:00005410                 jmp     short loc_5418
.text$mn:00005412 ; ---------------------------------------------------------------------------
.text$mn:00005412
.text$mn:00005412 loc_5412:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+58j
.text$mn:00005412                 mov     eax, [ebp+arg_C]
.text$mn:00005415                 mov     [ebp+var_8], eax
.text$mn:00005418
.text$mn:00005418 loc_5418:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+60j
.text$mn:00005418                 mov     ecx, [ebp+var_8]
.text$mn:0000541B                 push    ecx
.text$mn:0000541C                 mov     edx, [ebp+arg_8]
.text$mn:0000541F                 push    edx
.text$mn:00005420                 mov     ecx, [ebp+var_4]
.text$mn:00005423                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00005428                 mov     ecx, [ebp+arg_0]
.text$mn:0000542B                 lea     edx, [eax+ecx*2]
.text$mn:0000542E                 push    edx
.text$mn:0000542F                 call    ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z ; std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)
.text$mn:00005434                 add     esp, 0Ch
.text$mn:00005437                 mov     [ebp+var_C], eax
.text$mn:0000543A                 cmp     [ebp+var_C], 0
.text$mn:0000543E                 jz      short loc_5448
.text$mn:00005440                 mov     eax, [ebp+var_C]
.text$mn:00005443                 mov     [ebp+var_18], eax
.text$mn:00005446                 jmp     short loc_547D
.text$mn:00005448 ; ---------------------------------------------------------------------------
.text$mn:00005448
.text$mn:00005448 loc_5448:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+8Ej
.text$mn:00005448                 mov     ecx, [ebp+arg_4]
.text$mn:0000544B                 cmp     ecx, [ebp+arg_C]
.text$mn:0000544E                 jnb     short loc_5459
.text$mn:00005450                 mov     [ebp+var_14], 0FFFFFFFFh
.text$mn:00005457                 jmp     short loc_5477
.text$mn:00005459 ; ---------------------------------------------------------------------------
.text$mn:00005459
.text$mn:00005459 loc_5459:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+9Ej
.text$mn:00005459                 mov     edx, [ebp+arg_4]
.text$mn:0000545C                 cmp     edx, [ebp+arg_C]
.text$mn:0000545F                 jnz     short loc_546A
.text$mn:00005461                 mov     [ebp+var_10], 0
.text$mn:00005468                 jmp     short loc_5471
.text$mn:0000546A ; ---------------------------------------------------------------------------
.text$mn:0000546A
.text$mn:0000546A loc_546A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+AFj
.text$mn:0000546A                 mov     [ebp+var_10], 1
.text$mn:00005471
.text$mn:00005471 loc_5471:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+B8j
.text$mn:00005471                 mov     eax, [ebp+var_10]
.text$mn:00005474                 mov     [ebp+var_14], eax
.text$mn:00005477
.text$mn:00005477 loc_5477:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+A7j
.text$mn:00005477                 mov     ecx, [ebp+var_14]
.text$mn:0000547A                 mov     [ebp+var_18], ecx
.text$mn:0000547D
.text$mn:0000547D loc_547D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+96j
.text$mn:0000547D                 mov     eax, [ebp+var_18]
.text$mn:00005480                 mov     esp, ebp
.text$mn:00005482                 pop     ebp
.text$mn:00005483                 retn    10h
.text$mn:00005483 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z endp
.text$mn:00005483
.text$mn:00005483 ; ---------------------------------------------------------------------------
.text$mn:00005486                 align 4
.text$mn:00005486 _text$mn        ends
.text$mn:00005486
.text$mn:00005488 ; ===========================================================================
.text$mn:00005488
.text$mn:00005488 ; Segment type: Pure code
.text$mn:00005488 ; Segment permissions: Read/Execute
.text$mn:00005488 _text$mn        segment para public 'CODE' use32
.text$mn:00005488                 assume cs:_text$mn
.text$mn:00005488                 ;org 5488h
.text$mn:00005488 ; COMDAT (pick any)
.text$mn:00005488                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005488
.text$mn:00005488 ; =============== S U B R O U T I N E =======================================
.text$mn:00005488
.text$mn:00005488 ; Attributes: bp-based frame
.text$mn:00005488
.text$mn:00005488 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t *Str)
.text$mn:00005488                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z
.text$mn:00005488 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z proc near
.text$mn:00005488                                         ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+Bp
.text$mn:00005488
.text$mn:00005488 var_4           = dword ptr -4
.text$mn:00005488 Str             = dword ptr  8
.text$mn:00005488
.text$mn:00005488                 push    ebp
.text$mn:00005489                 mov     ebp, esp
.text$mn:0000548B                 push    ecx
.text$mn:0000548C                 mov     [ebp+var_4], ecx
.text$mn:0000548F                 push    86Eh            ; unsigned int
.text$mn:00005494                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005499                 mov     eax, [ebp+Str]
.text$mn:0000549C                 push    eax             ; int
.text$mn:0000549D                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:000054A2                 add     esp, 0Ch
.text$mn:000054A5                 mov     ecx, [ebp+Str]
.text$mn:000054A8                 push    ecx             ; Str
.text$mn:000054A9                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:000054AE                 add     esp, 4
.text$mn:000054B1                 push    eax
.text$mn:000054B2                 mov     edx, [ebp+Str]
.text$mn:000054B5                 push    edx
.text$mn:000054B6                 mov     eax, [ebp+var_4]
.text$mn:000054B9                 mov     ecx, [eax+14h]
.text$mn:000054BC                 push    ecx
.text$mn:000054BD                 push    0
.text$mn:000054BF                 mov     ecx, [ebp+var_4]
.text$mn:000054C2                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)
.text$mn:000054C7                 mov     esp, ebp
.text$mn:000054C9                 pop     ebp
.text$mn:000054CA                 retn    4
.text$mn:000054CA ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z endp
.text$mn:000054CA
.text$mn:000054CA ; ---------------------------------------------------------------------------
.text$mn:000054CD                 align 10h
.text$mn:000054CD _text$mn        ends
.text$mn:000054CD
.text$mn:000054D0 ; ===========================================================================
.text$mn:000054D0
.text$mn:000054D0 ; Segment type: Pure code
.text$mn:000054D0 ; Segment permissions: Read/Execute
.text$mn:000054D0 _text$mn        segment para public 'CODE' use32
.text$mn:000054D0                 assume cs:_text$mn
.text$mn:000054D0                 ;org 54D0h
.text$mn:000054D0 ; COMDAT (pick any)
.text$mn:000054D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000054D0
.text$mn:000054D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000054D0
.text$mn:000054D0 ; Attributes: bp-based frame
.text$mn:000054D0
.text$mn:000054D0 ; public: static int __cdecl std::char_traits<wchar_t>::compare(wchar_t const *, wchar_t const *, unsigned int)
.text$mn:000054D0                 public ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z
.text$mn:000054D0 ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z proc near
.text$mn:000054D0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+7Fp
.text$mn:000054D0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+CBp
.text$mn:000054D0
.text$mn:000054D0 var_4           = dword ptr -4
.text$mn:000054D0 arg_0           = dword ptr  8
.text$mn:000054D0 arg_4           = dword ptr  0Ch
.text$mn:000054D0 arg_8           = dword ptr  10h
.text$mn:000054D0
.text$mn:000054D0                 push    ebp
.text$mn:000054D1                 mov     ebp, esp
.text$mn:000054D3                 push    ecx
.text$mn:000054D4                 cmp     [ebp+arg_8], 0
.text$mn:000054D8                 jnz     short loc_54E3
.text$mn:000054DA                 mov     [ebp+var_4], 0
.text$mn:000054E1                 jmp     short loc_54FA
.text$mn:000054E3 ; ---------------------------------------------------------------------------
.text$mn:000054E3
.text$mn:000054E3 loc_54E3:                               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+8j
.text$mn:000054E3                 mov     eax, [ebp+arg_8]
.text$mn:000054E6                 push    eax
.text$mn:000054E7                 mov     ecx, [ebp+arg_4]
.text$mn:000054EA                 push    ecx
.text$mn:000054EB                 mov     edx, [ebp+arg_0]
.text$mn:000054EE                 push    edx
.text$mn:000054EF                 call    _wmemcmp
.text$mn:000054F4                 add     esp, 0Ch
.text$mn:000054F7                 mov     [ebp+var_4], eax
.text$mn:000054FA
.text$mn:000054FA loc_54FA:                               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+11j
.text$mn:000054FA                 mov     eax, [ebp+var_4]
.text$mn:000054FD                 mov     esp, ebp
.text$mn:000054FF                 pop     ebp
.text$mn:00005500                 retn
.text$mn:00005500 ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z endp
.text$mn:00005500
.text$mn:00005500 ; ---------------------------------------------------------------------------
.text$mn:00005501                 align 4
.text$mn:00005501 _text$mn        ends
.text$mn:00005501
.text$mn:00005504 ; ===========================================================================
.text$mn:00005504
.text$mn:00005504 ; Segment type: Pure code
.text$mn:00005504 ; Segment permissions: Read/Execute
.text$mn:00005504 _text$mn        segment para public 'CODE' use32
.text$mn:00005504                 assume cs:_text$mn
.text$mn:00005504                 ;org 5504h
.text$mn:00005504 ; COMDAT (pick any)
.text$mn:00005504                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005504
.text$mn:00005504 ; =============== S U B R O U T I N E =======================================
.text$mn:00005504
.text$mn:00005504 ; Attributes: bp-based frame
.text$mn:00005504
.text$mn:00005504 ; int __cdecl std::char_traits<char>::copy(void *Dst, void *Src, size_t Size)
.text$mn:00005504                 public ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:00005504 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near ; CODE XREF: $LN19+1Ep
.text$mn:00005504                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+5Dp ...
.text$mn:00005504
.text$mn:00005504 var_4           = dword ptr -4
.text$mn:00005504 Dst             = dword ptr  8
.text$mn:00005504 Src             = dword ptr  0Ch
.text$mn:00005504 Size            = dword ptr  10h
.text$mn:00005504
.text$mn:00005504                 push    ebp
.text$mn:00005505                 mov     ebp, esp
.text$mn:00005507                 push    ecx
.text$mn:00005508                 cmp     [ebp+Size], 0
.text$mn:0000550C                 jnz     short loc_5516
.text$mn:0000550E                 mov     eax, [ebp+Dst]
.text$mn:00005511                 mov     [ebp+var_4], eax
.text$mn:00005514                 jmp     short loc_552D
.text$mn:00005516 ; ---------------------------------------------------------------------------
.text$mn:00005516
.text$mn:00005516 loc_5516:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+8j
.text$mn:00005516                 mov     ecx, [ebp+Size]
.text$mn:00005519                 push    ecx             ; Size
.text$mn:0000551A                 mov     edx, [ebp+Src]
.text$mn:0000551D                 push    edx             ; Src
.text$mn:0000551E                 mov     eax, [ebp+Dst]
.text$mn:00005521                 push    eax             ; Dst
.text$mn:00005522                 call    _memcpy
.text$mn:00005527                 add     esp, 0Ch
.text$mn:0000552A                 mov     [ebp+var_4], eax
.text$mn:0000552D
.text$mn:0000552D loc_552D:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+10j
.text$mn:0000552D                 mov     eax, [ebp+var_4]
.text$mn:00005530                 mov     esp, ebp
.text$mn:00005532                 pop     ebp
.text$mn:00005533                 retn
.text$mn:00005533 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:00005533
.text$mn:00005533 _text$mn        ends
.text$mn:00005533
.text$mn:00005534 ; ===========================================================================
.text$mn:00005534
.text$mn:00005534 ; Segment type: Pure code
.text$mn:00005534 ; Segment permissions: Read/Execute
.text$mn:00005534 _text$mn        segment para public 'CODE' use32
.text$mn:00005534                 assume cs:_text$mn
.text$mn:00005534                 ;org 5534h
.text$mn:00005534 ; COMDAT (pick any)
.text$mn:00005534                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005534
.text$mn:00005534 ; =============== S U B R O U T I N E =======================================
.text$mn:00005534
.text$mn:00005534 ; Attributes: bp-based frame
.text$mn:00005534
.text$mn:00005534 ; int __cdecl std::char_traits<wchar_t>::copy(void *Dst, void *Src, int)
.text$mn:00005534                 public ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:00005534 ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:00005534                                         ; CODE XREF: $LN19_0+1Ep
.text$mn:00005534                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+5Dp ...
.text$mn:00005534
.text$mn:00005534 var_4           = dword ptr -4
.text$mn:00005534 Dst             = dword ptr  8
.text$mn:00005534 Src             = dword ptr  0Ch
.text$mn:00005534 arg_8           = dword ptr  10h
.text$mn:00005534
.text$mn:00005534                 push    ebp
.text$mn:00005535                 mov     ebp, esp
.text$mn:00005537                 push    ecx
.text$mn:00005538                 cmp     [ebp+arg_8], 0
.text$mn:0000553C                 jnz     short loc_5546
.text$mn:0000553E                 mov     eax, [ebp+Dst]
.text$mn:00005541                 mov     [ebp+var_4], eax
.text$mn:00005544                 jmp     short loc_555D
.text$mn:00005546 ; ---------------------------------------------------------------------------
.text$mn:00005546
.text$mn:00005546 loc_5546:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+8j
.text$mn:00005546                 mov     ecx, [ebp+arg_8]
.text$mn:00005549                 push    ecx             ; int
.text$mn:0000554A                 mov     edx, [ebp+Src]
.text$mn:0000554D                 push    edx             ; Src
.text$mn:0000554E                 mov     eax, [ebp+Dst]
.text$mn:00005551                 push    eax             ; Dst
.text$mn:00005552                 call    _wmemcpy
.text$mn:00005557                 add     esp, 0Ch
.text$mn:0000555A                 mov     [ebp+var_4], eax
.text$mn:0000555D
.text$mn:0000555D loc_555D:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+10j
.text$mn:0000555D                 mov     eax, [ebp+var_4]
.text$mn:00005560                 mov     esp, ebp
.text$mn:00005562                 pop     ebp
.text$mn:00005563                 retn
.text$mn:00005563 ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:00005563
.text$mn:00005563 _text$mn        ends
.text$mn:00005563
.text$mn:00005564 ; ===========================================================================
.text$mn:00005564
.text$mn:00005564 ; Segment type: Pure code
.text$mn:00005564 ; Segment permissions: Read/Execute
.text$mn:00005564 _text$mn        segment para public 'CODE' use32
.text$mn:00005564                 assume cs:_text$mn
.text$mn:00005564                 ;org 5564h
.text$mn:00005564 ; COMDAT (pick any)
.text$mn:00005564                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005564
.text$mn:00005564 ; =============== S U B R O U T I N E =======================================
.text$mn:00005564
.text$mn:00005564 ; Attributes: bp-based frame
.text$mn:00005564
.text$mn:00005564 ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::deallocate(void *, int)
.text$mn:00005564                 public ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
.text$mn:00005564 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
.text$mn:00005564                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+81p
.text$mn:00005564
.text$mn:00005564 var_4           = dword ptr -4
.text$mn:00005564 arg_0           = dword ptr  8
.text$mn:00005564 arg_4           = dword ptr  0Ch
.text$mn:00005564
.text$mn:00005564                 push    ebp
.text$mn:00005565                 mov     ebp, esp
.text$mn:00005567                 push    ecx
.text$mn:00005568                 mov     [ebp+var_4], ecx
.text$mn:0000556B                 mov     eax, [ebp+arg_4]
.text$mn:0000556E                 push    eax             ; int
.text$mn:0000556F                 mov     ecx, [ebp+arg_0]
.text$mn:00005572                 push    ecx             ; void *
.text$mn:00005573                 mov     ecx, [ebp+var_4]
.text$mn:00005576                 call    ?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate(char *,uint)
.text$mn:0000557B                 mov     esp, ebp
.text$mn:0000557D                 pop     ebp
.text$mn:0000557E                 retn    8
.text$mn:0000557E ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z endp
.text$mn:0000557E
.text$mn:0000557E ; ---------------------------------------------------------------------------
.text$mn:00005581                 align 4
.text$mn:00005581 _text$mn        ends
.text$mn:00005581
.text$mn:00005584 ; ===========================================================================
.text$mn:00005584
.text$mn:00005584 ; Segment type: Pure code
.text$mn:00005584 ; Segment permissions: Read/Execute
.text$mn:00005584 _text$mn        segment para public 'CODE' use32
.text$mn:00005584                 assume cs:_text$mn
.text$mn:00005584                 ;org 5584h
.text$mn:00005584 ; COMDAT (pick any)
.text$mn:00005584                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005584
.text$mn:00005584 ; =============== S U B R O U T I N E =======================================
.text$mn:00005584
.text$mn:00005584 ; Attributes: bp-based frame
.text$mn:00005584
.text$mn:00005584 ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(void *, int)
.text$mn:00005584                 public ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z
.text$mn:00005584 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z proc near
.text$mn:00005584                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+81p
.text$mn:00005584
.text$mn:00005584 var_4           = dword ptr -4
.text$mn:00005584 arg_0           = dword ptr  8
.text$mn:00005584 arg_4           = dword ptr  0Ch
.text$mn:00005584
.text$mn:00005584                 push    ebp
.text$mn:00005585                 mov     ebp, esp
.text$mn:00005587                 push    ecx
.text$mn:00005588                 mov     [ebp+var_4], ecx
.text$mn:0000558B                 mov     eax, [ebp+arg_4]
.text$mn:0000558E                 push    eax             ; int
.text$mn:0000558F                 mov     ecx, [ebp+arg_0]
.text$mn:00005592                 push    ecx             ; void *
.text$mn:00005593                 mov     ecx, [ebp+var_4]
.text$mn:00005596                 call    ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ; std::allocator<wchar_t>::deallocate(wchar_t *,uint)
.text$mn:0000559B                 mov     esp, ebp
.text$mn:0000559D                 pop     ebp
.text$mn:0000559E                 retn    8
.text$mn:0000559E ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z endp
.text$mn:0000559E
.text$mn:0000559E ; ---------------------------------------------------------------------------
.text$mn:000055A1                 align 4
.text$mn:000055A1 _text$mn        ends
.text$mn:000055A1
.text$mn:000055A4 ; ===========================================================================
.text$mn:000055A4
.text$mn:000055A4 ; Segment type: Pure code
.text$mn:000055A4 ; Segment permissions: Read/Execute
.text$mn:000055A4 _text$mn        segment para public 'CODE' use32
.text$mn:000055A4                 assume cs:_text$mn
.text$mn:000055A4                 ;org 55A4h
.text$mn:000055A4 ; COMDAT (pick any)
.text$mn:000055A4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000055A4
.text$mn:000055A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000055A4
.text$mn:000055A4 ; Attributes: bp-based frame
.text$mn:000055A4
.text$mn:000055A4 ; int __stdcall std::allocator<char>::deallocate(void *, int)
.text$mn:000055A4                 public ?deallocate@?$allocator@D@std@@QAEXPADI@Z
.text$mn:000055A4 ?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
.text$mn:000055A4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)+12p
.text$mn:000055A4
.text$mn:000055A4 var_4           = dword ptr -4
.text$mn:000055A4 arg_0           = dword ptr  8
.text$mn:000055A4
.text$mn:000055A4                 push    ebp
.text$mn:000055A5                 mov     ebp, esp
.text$mn:000055A7                 push    ecx
.text$mn:000055A8                 mov     [ebp+var_4], ecx
.text$mn:000055AB                 mov     eax, [ebp+arg_0]
.text$mn:000055AE                 push    eax             ; void *
.text$mn:000055AF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000055B4                 add     esp, 4
.text$mn:000055B7                 mov     esp, ebp
.text$mn:000055B9                 pop     ebp
.text$mn:000055BA                 retn    8
.text$mn:000055BA ?deallocate@?$allocator@D@std@@QAEXPADI@Z endp
.text$mn:000055BA
.text$mn:000055BA ; ---------------------------------------------------------------------------
.text$mn:000055BD                 align 10h
.text$mn:000055BD _text$mn        ends
.text$mn:000055BD
.text$mn:000055C0 ; ===========================================================================
.text$mn:000055C0
.text$mn:000055C0 ; Segment type: Pure code
.text$mn:000055C0 ; Segment permissions: Read/Execute
.text$mn:000055C0 _text$mn        segment para public 'CODE' use32
.text$mn:000055C0                 assume cs:_text$mn
.text$mn:000055C0                 ;org 55C0h
.text$mn:000055C0 ; COMDAT (pick any)
.text$mn:000055C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000055C0
.text$mn:000055C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000055C0
.text$mn:000055C0 ; Attributes: bp-based frame
.text$mn:000055C0
.text$mn:000055C0 ; int __stdcall std::allocator<std::_Container_proxy>::deallocate(void *, int)
.text$mn:000055C0                 public ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:000055C0 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:000055C0                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+32p
.text$mn:000055C0                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)+32p
.text$mn:000055C0
.text$mn:000055C0 var_4           = dword ptr -4
.text$mn:000055C0 arg_0           = dword ptr  8
.text$mn:000055C0
.text$mn:000055C0                 push    ebp
.text$mn:000055C1                 mov     ebp, esp
.text$mn:000055C3                 push    ecx
.text$mn:000055C4                 mov     [ebp+var_4], ecx
.text$mn:000055C7                 mov     eax, [ebp+arg_0]
.text$mn:000055CA                 push    eax             ; void *
.text$mn:000055CB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000055D0                 add     esp, 4
.text$mn:000055D3                 mov     esp, ebp
.text$mn:000055D5                 pop     ebp
.text$mn:000055D6                 retn    8
.text$mn:000055D6 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:000055D6
.text$mn:000055D6 ; ---------------------------------------------------------------------------
.text$mn:000055D9                 align 4
.text$mn:000055D9 _text$mn        ends
.text$mn:000055D9
.text$mn:000055DC ; ===========================================================================
.text$mn:000055DC
.text$mn:000055DC ; Segment type: Pure code
.text$mn:000055DC ; Segment permissions: Read/Execute
.text$mn:000055DC _text$mn        segment para public 'CODE' use32
.text$mn:000055DC                 assume cs:_text$mn
.text$mn:000055DC                 ;org 55DCh
.text$mn:000055DC ; COMDAT (pick any)
.text$mn:000055DC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000055DC
.text$mn:000055DC ; =============== S U B R O U T I N E =======================================
.text$mn:000055DC
.text$mn:000055DC ; Attributes: bp-based frame
.text$mn:000055DC
.text$mn:000055DC ; int __stdcall std::allocator<wchar_t>::deallocate(void *, int)
.text$mn:000055DC                 public ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
.text$mn:000055DC ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z proc near
.text$mn:000055DC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)+12p
.text$mn:000055DC
.text$mn:000055DC var_4           = dword ptr -4
.text$mn:000055DC arg_0           = dword ptr  8
.text$mn:000055DC
.text$mn:000055DC                 push    ebp
.text$mn:000055DD                 mov     ebp, esp
.text$mn:000055DF                 push    ecx
.text$mn:000055E0                 mov     [ebp+var_4], ecx
.text$mn:000055E3                 mov     eax, [ebp+arg_0]
.text$mn:000055E6                 push    eax             ; void *
.text$mn:000055E7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000055EC                 add     esp, 4
.text$mn:000055EF                 mov     esp, ebp
.text$mn:000055F1                 pop     ebp
.text$mn:000055F2                 retn    8
.text$mn:000055F2 ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z endp
.text$mn:000055F2
.text$mn:000055F2 ; ---------------------------------------------------------------------------
.text$mn:000055F5                 align 4
.text$mn:000055F5 _text$mn        ends
.text$mn:000055F5
.text$mn:000055F8 ; ===========================================================================
.text$mn:000055F8
.text$mn:000055F8 ; Segment type: Pure code
.text$mn:000055F8 ; Segment permissions: Read/Execute
.text$mn:000055F8 _text$mn        segment para public 'CODE' use32
.text$mn:000055F8                 assume cs:_text$mn
.text$mn:000055F8                 ;org 55F8h
.text$mn:000055F8 ; COMDAT (pick any)
.text$mn:000055F8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000055F8
.text$mn:000055F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000055F8
.text$mn:000055F8 ; Attributes: bp-based frame
.text$mn:000055F8
.text$mn:000055F8 ; public: virtual class std::error_condition __thiscall std::_System_error_category::default_error_condition(int)const
.text$mn:000055F8                 public ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:000055F8 ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:000055F8                                         ; DATA XREF: .rdata:00006FECo
.text$mn:000055F8
.text$mn:000055F8 var_4           = dword ptr -4
.text$mn:000055F8 arg_0           = dword ptr  8
.text$mn:000055F8 arg_4           = dword ptr  0Ch
.text$mn:000055F8
.text$mn:000055F8                 push    ebp
.text$mn:000055F9                 mov     ebp, esp
.text$mn:000055FB                 push    ecx
.text$mn:000055FC                 mov     [ebp+var_4], ecx
.text$mn:000055FF                 mov     eax, [ebp+arg_4]
.text$mn:00005602                 push    eax             ; int
.text$mn:00005603                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:00005608                 add     esp, 4
.text$mn:0000560B                 test    eax, eax
.text$mn:0000560D                 jz      short loc_5628
.text$mn:0000560F                 call    ?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category(void)
.text$mn:00005614                 push    eax             ; struct std::error_category *
.text$mn:00005615                 mov     ecx, [ebp+arg_4]
.text$mn:00005618                 push    ecx             ; int
.text$mn:00005619                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000561C                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:00005621                 mov     eax, [ebp+arg_0]
.text$mn:00005624                 jmp     short loc_563D
.text$mn:00005626 ; ---------------------------------------------------------------------------
.text$mn:00005626                 jmp     short loc_563D
.text$mn:00005628 ; ---------------------------------------------------------------------------
.text$mn:00005628
.text$mn:00005628 loc_5628:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+15j
.text$mn:00005628                 call    ?system_category@std@@YAABVerror_category@1@XZ ; std::system_category(void)
.text$mn:0000562D                 push    eax             ; struct std::error_category *
.text$mn:0000562E                 mov     edx, [ebp+arg_4]
.text$mn:00005631                 push    edx             ; int
.text$mn:00005632                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00005635                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000563A                 mov     eax, [ebp+arg_0]
.text$mn:0000563D
.text$mn:0000563D loc_563D:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+2Cj
.text$mn:0000563D                                         ; std::_System_error_category::default_error_condition(int)+2Ej
.text$mn:0000563D                 mov     esp, ebp
.text$mn:0000563F                 pop     ebp
.text$mn:00005640                 retn    8
.text$mn:00005640 ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:00005640
.text$mn:00005640 ; ---------------------------------------------------------------------------
.text$mn:00005643                 align 4
.text$mn:00005643 _text$mn        ends
.text$mn:00005643
.text$mn:00005644 ; ===========================================================================
.text$mn:00005644
.text$mn:00005644 ; Segment type: Pure code
.text$mn:00005644 ; Segment permissions: Read/Execute
.text$mn:00005644 _text$mn        segment para public 'CODE' use32
.text$mn:00005644                 assume cs:_text$mn
.text$mn:00005644                 ;org 5644h
.text$mn:00005644 ; COMDAT (pick any)
.text$mn:00005644                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005644
.text$mn:00005644 ; =============== S U B R O U T I N E =======================================
.text$mn:00005644
.text$mn:00005644 ; Attributes: bp-based frame
.text$mn:00005644
.text$mn:00005644 ; public: virtual class std::error_condition __thiscall std::error_category::default_error_condition(int)const
.text$mn:00005644                 public ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:00005644 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:00005644                                         ; DATA XREF: .rdata:00006F5Co
.text$mn:00005644                                         ; .rdata:00006F78o ...
.text$mn:00005644
.text$mn:00005644 var_4           = dword ptr -4
.text$mn:00005644 arg_0           = dword ptr  8
.text$mn:00005644 arg_4           = dword ptr  0Ch
.text$mn:00005644
.text$mn:00005644                 push    ebp
.text$mn:00005645                 mov     ebp, esp
.text$mn:00005647                 push    ecx
.text$mn:00005648                 mov     [ebp+var_4], ecx
.text$mn:0000564B                 mov     eax, [ebp+var_4]
.text$mn:0000564E                 push    eax             ; struct std::error_category *
.text$mn:0000564F                 mov     ecx, [ebp+arg_4]
.text$mn:00005652                 push    ecx             ; int
.text$mn:00005653                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00005656                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000565B                 mov     eax, [ebp+arg_0]
.text$mn:0000565E                 mov     esp, ebp
.text$mn:00005660                 pop     ebp
.text$mn:00005661                 retn    8
.text$mn:00005661 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:00005661
.text$mn:00005661 _text$mn        ends
.text$mn:00005661
.text$mn:00005664 ; ===========================================================================
.text$mn:00005664
.text$mn:00005664 ; Segment type: Pure code
.text$mn:00005664 ; Segment permissions: Read/Execute
.text$mn:00005664 _text$mn        segment para public 'CODE' use32
.text$mn:00005664                 assume cs:_text$mn
.text$mn:00005664                 ;org 5664h
.text$mn:00005664 ; COMDAT (pick any)
.text$mn:00005664                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005664
.text$mn:00005664 ; =============== S U B R O U T I N E =======================================
.text$mn:00005664
.text$mn:00005664 ; Attributes: bp-based frame
.text$mn:00005664
.text$mn:00005664 ; bool __thiscall std::error_category::equivalent(std::error_category *this, const struct std::error_code *, int)
.text$mn:00005664                 public ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
.text$mn:00005664 ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
.text$mn:00005664                                         ; DATA XREF: .rdata:00006F60o
.text$mn:00005664                                         ; .rdata:00006F7Co ...
.text$mn:00005664
.text$mn:00005664 var_8           = dword ptr -8
.text$mn:00005664 var_4           = dword ptr -4
.text$mn:00005664 arg_0           = dword ptr  8
.text$mn:00005664 arg_4           = dword ptr  0Ch
.text$mn:00005664
.text$mn:00005664                 push    ebp
.text$mn:00005665                 mov     ebp, esp
.text$mn:00005667                 sub     esp, 8
.text$mn:0000566A                 mov     [ebp+var_8], ecx
.text$mn:0000566D                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00005670                 call    ?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category(void)
.text$mn:00005675                 push    eax
.text$mn:00005676                 mov     ecx, [ebp+var_8]
.text$mn:00005679                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:0000567E                 movzx   eax, al
.text$mn:00005681                 test    eax, eax
.text$mn:00005683                 jz      short loc_569B
.text$mn:00005685                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00005688                 call    ?value@error_code@std@@QBEHXZ ; std::error_code::value(void)
.text$mn:0000568D                 cmp     eax, [ebp+arg_4]
.text$mn:00005690                 jnz     short loc_569B
.text$mn:00005692                 mov     [ebp+var_4], 1
.text$mn:00005699                 jmp     short loc_56A2
.text$mn:0000569B ; ---------------------------------------------------------------------------
.text$mn:0000569B
.text$mn:0000569B loc_569B:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+1Fj
.text$mn:0000569B                                         ; std::error_category::equivalent(std::error_code const &,int)+2Cj
.text$mn:0000569B                 mov     [ebp+var_4], 0
.text$mn:000056A2
.text$mn:000056A2 loc_56A2:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+35j
.text$mn:000056A2                 mov     al, byte ptr [ebp+var_4]
.text$mn:000056A5                 mov     esp, ebp
.text$mn:000056A7                 pop     ebp
.text$mn:000056A8                 retn    8
.text$mn:000056A8 ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z endp
.text$mn:000056A8
.text$mn:000056A8 ; ---------------------------------------------------------------------------
.text$mn:000056AB                 align 4
.text$mn:000056AB _text$mn        ends
.text$mn:000056AB
.text$mn:000056AC ; ===========================================================================
.text$mn:000056AC
.text$mn:000056AC ; Segment type: Pure code
.text$mn:000056AC ; Segment permissions: Read/Execute
.text$mn:000056AC _text$mn        segment para public 'CODE' use32
.text$mn:000056AC                 assume cs:_text$mn
.text$mn:000056AC                 ;org 56ACh
.text$mn:000056AC ; COMDAT (pick any)
.text$mn:000056AC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000056AC
.text$mn:000056AC ; =============== S U B R O U T I N E =======================================
.text$mn:000056AC
.text$mn:000056AC ; Attributes: bp-based frame
.text$mn:000056AC
.text$mn:000056AC ; bool __thiscall std::error_category::equivalent(std::error_category *this, int, const struct std::error_condition *)
.text$mn:000056AC                 public ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
.text$mn:000056AC ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
.text$mn:000056AC                                         ; DATA XREF: .rdata:00006F64o
.text$mn:000056AC                                         ; .rdata:00006F80o ...
.text$mn:000056AC
.text$mn:000056AC var_C           = byte ptr -0Ch
.text$mn:000056AC var_4           = dword ptr -4
.text$mn:000056AC arg_0           = dword ptr  8
.text$mn:000056AC arg_4           = dword ptr  0Ch
.text$mn:000056AC
.text$mn:000056AC                 push    ebp
.text$mn:000056AD                 mov     ebp, esp
.text$mn:000056AF                 sub     esp, 0Ch
.text$mn:000056B2                 mov     [ebp+var_4], ecx
.text$mn:000056B5                 mov     eax, [ebp+arg_4]
.text$mn:000056B8                 push    eax             ; std::error_condition *
.text$mn:000056B9                 mov     ecx, [ebp+arg_0]
.text$mn:000056BC                 push    ecx
.text$mn:000056BD                 lea     edx, [ebp+var_C]
.text$mn:000056C0                 push    edx
.text$mn:000056C1                 mov     eax, [ebp+var_4]
.text$mn:000056C4                 mov     edx, [eax]
.text$mn:000056C6                 mov     ecx, [ebp+var_4]
.text$mn:000056C9                 mov     eax, [edx+0Ch]
.text$mn:000056CC                 call    eax
.text$mn:000056CE                 mov     ecx, eax
.text$mn:000056D0                 call    ??8error_condition@std@@QBE_NABV01@@Z ; std::error_condition::operator==(std::error_condition const &)
.text$mn:000056D5                 mov     esp, ebp
.text$mn:000056D7                 pop     ebp
.text$mn:000056D8                 retn    8
.text$mn:000056D8 ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z endp
.text$mn:000056D8
.text$mn:000056D8 ; ---------------------------------------------------------------------------
.text$mn:000056DB                 align 4
.text$mn:000056DB _text$mn        ends
.text$mn:000056DB
.text$mn:000056DC ; ===========================================================================
.text$mn:000056DC
.text$mn:000056DC ; Segment type: Pure code
.text$mn:000056DC ; Segment permissions: Read/Execute
.text$mn:000056DC _text$mn        segment para public 'CODE' use32
.text$mn:000056DC                 assume cs:_text$mn
.text$mn:000056DC                 ;org 56DCh
.text$mn:000056DC ; COMDAT (pick any)
.text$mn:000056DC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000056DC
.text$mn:000056DC ; =============== S U B R O U T I N E =======================================
.text$mn:000056DC
.text$mn:000056DC ; Attributes: bp-based frame
.text$mn:000056DC
.text$mn:000056DC ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int)
.text$mn:000056DC                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
.text$mn:000056DC ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
.text$mn:000056DC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+4Cp
.text$mn:000056DC
.text$mn:000056DC var_4           = dword ptr -4
.text$mn:000056DC arg_0           = dword ptr  8
.text$mn:000056DC
.text$mn:000056DC                 push    ebp
.text$mn:000056DD                 mov     ebp, esp
.text$mn:000056DF                 push    ecx
.text$mn:000056E0                 mov     [ebp+var_4], ecx
.text$mn:000056E3                 mov     eax, [ebp+var_4]
.text$mn:000056E6                 mov     ecx, [eax+14h]
.text$mn:000056E9                 cmp     ecx, [ebp+arg_0]
.text$mn:000056EC                 jnb     short loc_56F6
.text$mn:000056EE                 mov     ecx, [ebp+var_4]
.text$mn:000056F1                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:000056F6
.text$mn:000056F6 loc_56F6:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+10j
.text$mn:000056F6                 mov     edx, [ebp+arg_0]
.text$mn:000056F9                 push    edx
.text$mn:000056FA                 mov     ecx, [ebp+var_4]
.text$mn:000056FD                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00005702                 mov     eax, [ebp+var_4]
.text$mn:00005705                 mov     esp, ebp
.text$mn:00005707                 pop     ebp
.text$mn:00005708                 retn    4
.text$mn:00005708 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z endp
.text$mn:00005708
.text$mn:00005708 ; ---------------------------------------------------------------------------
.text$mn:0000570B                 align 4
.text$mn:0000570B _text$mn        ends
.text$mn:0000570B
.text$mn:0000570C ; ===========================================================================
.text$mn:0000570C
.text$mn:0000570C ; Segment type: Pure code
.text$mn:0000570C ; Segment permissions: Read/Execute
.text$mn:0000570C _text$mn        segment para public 'CODE' use32
.text$mn:0000570C                 assume cs:_text$mn
.text$mn:0000570C                 ;org 570Ch
.text$mn:0000570C ; COMDAT (pick any)
.text$mn:0000570C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:0000570C
.text$mn:0000570C ; =============== S U B R O U T I N E =======================================
.text$mn:0000570C
.text$mn:0000570C ; Attributes: bp-based frame
.text$mn:0000570C
.text$mn:0000570C ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int, unsigned int)
.text$mn:0000570C                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
.text$mn:0000570C ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
.text$mn:0000570C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Ap
.text$mn:0000570C
.text$mn:0000570C var_C           = dword ptr -0Ch
.text$mn:0000570C Dst             = dword ptr -8
.text$mn:0000570C var_4           = dword ptr -4
.text$mn:0000570C arg_0           = dword ptr  8
.text$mn:0000570C arg_4           = dword ptr  0Ch
.text$mn:0000570C
.text$mn:0000570C                 push    ebp
.text$mn:0000570D                 mov     ebp, esp
.text$mn:0000570F                 sub     esp, 0Ch
.text$mn:00005712                 mov     [ebp+var_4], ecx
.text$mn:00005715                 mov     eax, [ebp+var_4]
.text$mn:00005718                 mov     ecx, [eax+14h]
.text$mn:0000571B                 cmp     ecx, [ebp+arg_0]
.text$mn:0000571E                 jnb     short loc_5728
.text$mn:00005720                 mov     ecx, [ebp+var_4]
.text$mn:00005723                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:00005728
.text$mn:00005728 loc_5728:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+12j
.text$mn:00005728                 mov     edx, [ebp+var_4]
.text$mn:0000572B                 mov     eax, [edx+14h]
.text$mn:0000572E                 sub     eax, [ebp+arg_0]
.text$mn:00005731                 cmp     eax, [ebp+arg_4]
.text$mn:00005734                 ja      short loc_5744
.text$mn:00005736                 mov     ecx, [ebp+arg_0]
.text$mn:00005739                 push    ecx
.text$mn:0000573A                 mov     ecx, [ebp+var_4]
.text$mn:0000573D                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00005742                 jmp     short loc_578A
.text$mn:00005744 ; ---------------------------------------------------------------------------
.text$mn:00005744
.text$mn:00005744 loc_5744:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+28j
.text$mn:00005744                 cmp     [ebp+arg_4], 0
.text$mn:00005748                 jbe     short loc_578A
.text$mn:0000574A                 mov     ecx, [ebp+var_4]
.text$mn:0000574D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00005752                 add     eax, [ebp+arg_0]
.text$mn:00005755                 mov     [ebp+Dst], eax
.text$mn:00005758                 mov     edx, [ebp+var_4]
.text$mn:0000575B                 mov     eax, [edx+14h]
.text$mn:0000575E                 sub     eax, [ebp+arg_4]
.text$mn:00005761                 mov     [ebp+var_C], eax
.text$mn:00005764                 mov     ecx, [ebp+var_C]
.text$mn:00005767                 sub     ecx, [ebp+arg_0]
.text$mn:0000576A                 push    ecx             ; Size
.text$mn:0000576B                 mov     edx, [ebp+Dst]
.text$mn:0000576E                 add     edx, [ebp+arg_4]
.text$mn:00005771                 push    edx             ; Src
.text$mn:00005772                 mov     eax, [ebp+Dst]
.text$mn:00005775                 push    eax             ; Dst
.text$mn:00005776                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:0000577B                 add     esp, 0Ch
.text$mn:0000577E                 mov     ecx, [ebp+var_C]
.text$mn:00005781                 push    ecx
.text$mn:00005782                 mov     ecx, [ebp+var_4]
.text$mn:00005785                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000578A
.text$mn:0000578A loc_578A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+36j
.text$mn:0000578A                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+3Cj
.text$mn:0000578A                 mov     eax, [ebp+var_4]
.text$mn:0000578D                 mov     esp, ebp
.text$mn:0000578F                 pop     ebp
.text$mn:00005790                 retn    8
.text$mn:00005790 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z endp
.text$mn:00005790
.text$mn:00005790 ; ---------------------------------------------------------------------------
.text$mn:00005793                 align 4
.text$mn:00005793 _text$mn        ends
.text$mn:00005793
.text$mn:00005794 ; ===========================================================================
.text$mn:00005794
.text$mn:00005794 ; Segment type: Pure code
.text$mn:00005794 ; Segment permissions: Read/Execute
.text$mn:00005794 _text$mn        segment para public 'CODE' use32
.text$mn:00005794                 assume cs:_text$mn
.text$mn:00005794                 ;org 5794h
.text$mn:00005794 ; COMDAT (pick any)
.text$mn:00005794                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005794
.text$mn:00005794 ; =============== S U B R O U T I N E =======================================
.text$mn:00005794
.text$mn:00005794 ; Attributes: bp-based frame
.text$mn:00005794
.text$mn:00005794 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int)
.text$mn:00005794                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z
.text$mn:00005794 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z proc near
.text$mn:00005794                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Cp
.text$mn:00005794
.text$mn:00005794 var_4           = dword ptr -4
.text$mn:00005794 arg_0           = dword ptr  8
.text$mn:00005794
.text$mn:00005794                 push    ebp
.text$mn:00005795                 mov     ebp, esp
.text$mn:00005797                 push    ecx
.text$mn:00005798                 mov     [ebp+var_4], ecx
.text$mn:0000579B                 mov     eax, [ebp+var_4]
.text$mn:0000579E                 mov     ecx, [eax+14h]
.text$mn:000057A1                 cmp     ecx, [ebp+arg_0]
.text$mn:000057A4                 jnb     short loc_57AE
.text$mn:000057A6                 mov     ecx, [ebp+var_4]
.text$mn:000057A9                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:000057AE
.text$mn:000057AE loc_57AE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)+10j
.text$mn:000057AE                 mov     edx, [ebp+arg_0]
.text$mn:000057B1                 push    edx
.text$mn:000057B2                 mov     ecx, [ebp+var_4]
.text$mn:000057B5                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000057BA                 mov     eax, [ebp+var_4]
.text$mn:000057BD                 mov     esp, ebp
.text$mn:000057BF                 pop     ebp
.text$mn:000057C0                 retn    4
.text$mn:000057C0 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z endp
.text$mn:000057C0
.text$mn:000057C0 ; ---------------------------------------------------------------------------
.text$mn:000057C3                 align 4
.text$mn:000057C3 _text$mn        ends
.text$mn:000057C3
.text$mn:000057C4 ; ===========================================================================
.text$mn:000057C4
.text$mn:000057C4 ; Segment type: Pure code
.text$mn:000057C4 ; Segment permissions: Read/Execute
.text$mn:000057C4 _text$mn        segment para public 'CODE' use32
.text$mn:000057C4                 assume cs:_text$mn
.text$mn:000057C4                 ;org 57C4h
.text$mn:000057C4 ; COMDAT (pick any)
.text$mn:000057C4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000057C4
.text$mn:000057C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000057C4
.text$mn:000057C4 ; Attributes: bp-based frame
.text$mn:000057C4
.text$mn:000057C4 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int, unsigned int)
.text$mn:000057C4                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
.text$mn:000057C4 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z proc near
.text$mn:000057C4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Ap
.text$mn:000057C4
.text$mn:000057C4 var_C           = dword ptr -0Ch
.text$mn:000057C4 Dst             = dword ptr -8
.text$mn:000057C4 var_4           = dword ptr -4
.text$mn:000057C4 arg_0           = dword ptr  8
.text$mn:000057C4 arg_4           = dword ptr  0Ch
.text$mn:000057C4
.text$mn:000057C4                 push    ebp
.text$mn:000057C5                 mov     ebp, esp
.text$mn:000057C7                 sub     esp, 0Ch
.text$mn:000057CA                 mov     [ebp+var_4], ecx
.text$mn:000057CD                 mov     eax, [ebp+var_4]
.text$mn:000057D0                 mov     ecx, [eax+14h]
.text$mn:000057D3                 cmp     ecx, [ebp+arg_0]
.text$mn:000057D6                 jnb     short loc_57E0
.text$mn:000057D8                 mov     ecx, [ebp+var_4]
.text$mn:000057DB                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:000057E0
.text$mn:000057E0 loc_57E0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+12j
.text$mn:000057E0                 mov     edx, [ebp+var_4]
.text$mn:000057E3                 mov     eax, [edx+14h]
.text$mn:000057E6                 sub     eax, [ebp+arg_0]
.text$mn:000057E9                 cmp     eax, [ebp+arg_4]
.text$mn:000057EC                 ja      short loc_57FC
.text$mn:000057EE                 mov     ecx, [ebp+arg_0]
.text$mn:000057F1                 push    ecx
.text$mn:000057F2                 mov     ecx, [ebp+var_4]
.text$mn:000057F5                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000057FA                 jmp     short loc_5848
.text$mn:000057FC ; ---------------------------------------------------------------------------
.text$mn:000057FC
.text$mn:000057FC loc_57FC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+28j
.text$mn:000057FC                 cmp     [ebp+arg_4], 0
.text$mn:00005800                 jbe     short loc_5848
.text$mn:00005802                 mov     ecx, [ebp+var_4]
.text$mn:00005805                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000580A                 mov     edx, [ebp+arg_0]
.text$mn:0000580D                 lea     eax, [eax+edx*2]
.text$mn:00005810                 mov     [ebp+Dst], eax
.text$mn:00005813                 mov     ecx, [ebp+var_4]
.text$mn:00005816                 mov     edx, [ecx+14h]
.text$mn:00005819                 sub     edx, [ebp+arg_4]
.text$mn:0000581C                 mov     [ebp+var_C], edx
.text$mn:0000581F                 mov     eax, [ebp+var_C]
.text$mn:00005822                 sub     eax, [ebp+arg_0]
.text$mn:00005825                 push    eax             ; int
.text$mn:00005826                 mov     ecx, [ebp+arg_4]
.text$mn:00005829                 mov     edx, [ebp+Dst]
.text$mn:0000582C                 lea     eax, [edx+ecx*2]
.text$mn:0000582F                 push    eax             ; Src
.text$mn:00005830                 mov     ecx, [ebp+Dst]
.text$mn:00005833                 push    ecx             ; Dst
.text$mn:00005834                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00005839                 add     esp, 0Ch
.text$mn:0000583C                 mov     edx, [ebp+var_C]
.text$mn:0000583F                 push    edx
.text$mn:00005840                 mov     ecx, [ebp+var_4]
.text$mn:00005843                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00005848
.text$mn:00005848 loc_5848:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+36j
.text$mn:00005848                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+3Cj
.text$mn:00005848                 mov     eax, [ebp+var_4]
.text$mn:0000584B                 mov     esp, ebp
.text$mn:0000584D                 pop     ebp
.text$mn:0000584E                 retn    8
.text$mn:0000584E ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z endp
.text$mn:0000584E
.text$mn:0000584E ; ---------------------------------------------------------------------------
.text$mn:00005851                 align 4
.text$mn:00005851 _text$mn        ends
.text$mn:00005851
.text$mn:00005854 ; ===========================================================================
.text$mn:00005854
.text$mn:00005854 ; Segment type: Pure code
.text$mn:00005854 ; Segment permissions: Read/Execute
.text$mn:00005854 _text$mn        segment para public 'CODE' use32
.text$mn:00005854                 assume cs:_text$mn
.text$mn:00005854                 ;org 5854h
.text$mn:00005854 ; COMDAT (pick any)
.text$mn:00005854                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005854
.text$mn:00005854 ; =============== S U B R O U T I N E =======================================
.text$mn:00005854
.text$mn:00005854 ; Attributes: bp-based frame
.text$mn:00005854
.text$mn:00005854 ; __int32 __thiscall ScintillaEditView::execute(ScintillaEditView *this, unsigned int, unsigned int, __int32)
.text$mn:00005854                 public ?execute@ScintillaEditView@@QBEJIIJ@Z
.text$mn:00005854 ?execute@ScintillaEditView@@QBEJIIJ@Z proc near
.text$mn:00005854                                         ; CODE XREF: Printer::doPrint(bool)+1AF1p
.text$mn:00005854                                         ; Printer::doPrint(bool)+1B13p ...
.text$mn:00005854
.text$mn:00005854 var_4           = dword ptr -4
.text$mn:00005854 arg_0           = dword ptr  8
.text$mn:00005854 arg_4           = dword ptr  0Ch
.text$mn:00005854 arg_8           = dword ptr  10h
.text$mn:00005854
.text$mn:00005854                 push    ebp
.text$mn:00005855                 mov     ebp, esp
.text$mn:00005857                 push    ecx
.text$mn:00005858                 mov     [ebp+var_4], ecx
.text$mn:0000585B                 mov     eax, [ebp+arg_8]
.text$mn:0000585E                 push    eax
.text$mn:0000585F                 mov     ecx, [ebp+arg_4]
.text$mn:00005862                 push    ecx
.text$mn:00005863                 mov     edx, [ebp+arg_0]
.text$mn:00005866                 push    edx
.text$mn:00005867                 mov     eax, [ebp+var_4]
.text$mn:0000586A                 mov     ecx, [eax+14h]
.text$mn:0000586D                 push    ecx
.text$mn:0000586E                 mov     edx, [ebp+var_4]
.text$mn:00005871                 mov     eax, [edx+10h]
.text$mn:00005874                 call    eax
.text$mn:00005876                 add     esp, 10h
.text$mn:00005879                 mov     esp, ebp
.text$mn:0000587B                 pop     ebp
.text$mn:0000587C                 retn    0Ch
.text$mn:0000587C ?execute@ScintillaEditView@@QBEJIIJ@Z endp
.text$mn:0000587C
.text$mn:0000587C ; ---------------------------------------------------------------------------
.text$mn:0000587F                 align 10h
.text$mn:0000587F _text$mn        ends
.text$mn:0000587F
.text$mn:00005880 ; ===========================================================================
.text$mn:00005880
.text$mn:00005880 ; Segment type: Pure code
.text$mn:00005880 ; Segment permissions: Read/Execute
.text$mn:00005880 _text$mn        segment para public 'CODE' use32
.text$mn:00005880                 assume cs:_text$mn
.text$mn:00005880                 ;org 5880h
.text$mn:00005880 ; COMDAT (pick any)
.text$mn:00005880                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005880
.text$mn:00005880 ; =============== S U B R O U T I N E =======================================
.text$mn:00005880
.text$mn:00005880 ; Attributes: bp-based frame
.text$mn:00005880
.text$mn:00005880 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::find(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int)const
.text$mn:00005880                 public ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIABV12@I@Z
.text$mn:00005880 ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIABV12@I@Z proc near
.text$mn:00005880                                         ; CODE XREF: replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+33p
.text$mn:00005880
.text$mn:00005880 var_4           = dword ptr -4
.text$mn:00005880 arg_0           = dword ptr  8
.text$mn:00005880 arg_4           = dword ptr  0Ch
.text$mn:00005880
.text$mn:00005880                 push    ebp
.text$mn:00005881                 mov     ebp, esp
.text$mn:00005883                 push    ecx
.text$mn:00005884                 mov     [ebp+var_4], ecx
.text$mn:00005887                 mov     ecx, [ebp+arg_0]
.text$mn:0000588A                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000588F                 push    eax
.text$mn:00005890                 mov     eax, [ebp+arg_4]
.text$mn:00005893                 push    eax
.text$mn:00005894                 mov     ecx, [ebp+arg_0]
.text$mn:00005897                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000589C                 push    eax
.text$mn:0000589D                 mov     ecx, [ebp+var_4]
.text$mn:000058A0                 call    ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)
.text$mn:000058A5                 mov     esp, ebp
.text$mn:000058A7                 pop     ebp
.text$mn:000058A8                 retn    8
.text$mn:000058A8 ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIABV12@I@Z endp
.text$mn:000058A8
.text$mn:000058A8 ; ---------------------------------------------------------------------------
.text$mn:000058AB                 align 4
.text$mn:000058AB _text$mn        ends
.text$mn:000058AB
.text$mn:000058AC ; ===========================================================================
.text$mn:000058AC
.text$mn:000058AC ; Segment type: Pure code
.text$mn:000058AC ; Segment permissions: Read/Execute
.text$mn:000058AC _text$mn        segment para public 'CODE' use32
.text$mn:000058AC                 assume cs:_text$mn
.text$mn:000058AC                 ;org 58ACh
.text$mn:000058AC ; COMDAT (pick any)
.text$mn:000058AC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000058AC
.text$mn:000058AC ; =============== S U B R O U T I N E =======================================
.text$mn:000058AC
.text$mn:000058AC ; Attributes: bp-based frame
.text$mn:000058AC
.text$mn:000058AC ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t *Str, int)
.text$mn:000058AC                 public ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z
.text$mn:000058AC ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z proc near
.text$mn:000058AC                                         ; CODE XREF: Printer::doPrint(bool)+171Dp
.text$mn:000058AC                                         ; Printer::doPrint(bool)+17FAp ...
.text$mn:000058AC
.text$mn:000058AC var_4           = dword ptr -4
.text$mn:000058AC Str             = dword ptr  8
.text$mn:000058AC arg_4           = dword ptr  0Ch
.text$mn:000058AC
.text$mn:000058AC                 push    ebp
.text$mn:000058AD                 mov     ebp, esp
.text$mn:000058AF                 push    ecx
.text$mn:000058B0                 mov     [ebp+var_4], ecx
.text$mn:000058B3                 push    77Eh            ; unsigned int
.text$mn:000058B8                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000058BD                 mov     eax, [ebp+Str]
.text$mn:000058C0                 push    eax             ; int
.text$mn:000058C1                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:000058C6                 add     esp, 0Ch
.text$mn:000058C9                 mov     ecx, [ebp+Str]
.text$mn:000058CC                 push    ecx             ; Str
.text$mn:000058CD                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:000058D2                 add     esp, 4
.text$mn:000058D5                 push    eax
.text$mn:000058D6                 mov     edx, [ebp+arg_4]
.text$mn:000058D9                 push    edx
.text$mn:000058DA                 mov     eax, [ebp+Str]
.text$mn:000058DD                 push    eax
.text$mn:000058DE                 mov     ecx, [ebp+var_4]
.text$mn:000058E1                 call    ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)
.text$mn:000058E6                 mov     esp, ebp
.text$mn:000058E8                 pop     ebp
.text$mn:000058E9                 retn    8
.text$mn:000058E9 ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WI@Z endp
.text$mn:000058E9
.text$mn:000058E9 _text$mn        ends
.text$mn:000058E9
.text$mn:000058EC ; ===========================================================================
.text$mn:000058EC
.text$mn:000058EC ; Segment type: Pure code
.text$mn:000058EC ; Segment permissions: Read/Execute
.text$mn:000058EC _text$mn        segment para public 'CODE' use32
.text$mn:000058EC                 assume cs:_text$mn
.text$mn:000058EC                 ;org 58ECh
.text$mn:000058EC ; COMDAT (pick any)
.text$mn:000058EC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000058EC
.text$mn:000058EC ; =============== S U B R O U T I N E =======================================
.text$mn:000058EC
.text$mn:000058EC ; Attributes: bp-based frame
.text$mn:000058EC
.text$mn:000058EC ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::find(wchar_t const *, unsigned int, unsigned int)const
.text$mn:000058EC                 public ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z
.text$mn:000058EC ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z proc near
.text$mn:000058EC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint)+20p
.text$mn:000058EC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint)+35p
.text$mn:000058EC
.text$mn:000058EC var_10          = dword ptr -10h
.text$mn:000058EC var_C           = dword ptr -0Ch
.text$mn:000058EC var_8           = dword ptr -8
.text$mn:000058EC var_4           = dword ptr -4
.text$mn:000058EC arg_0           = dword ptr  8
.text$mn:000058EC arg_4           = dword ptr  0Ch
.text$mn:000058EC arg_8           = dword ptr  10h
.text$mn:000058EC
.text$mn:000058EC                 push    ebp
.text$mn:000058ED                 mov     ebp, esp
.text$mn:000058EF                 sub     esp, 10h
.text$mn:000058F2                 mov     [ebp+var_8], ecx
.text$mn:000058F5                 cmp     [ebp+arg_8], 0
.text$mn:000058F9                 jz      short loc_5911
.text$mn:000058FB                 push    768h            ; unsigned int
.text$mn:00005900                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005905                 mov     eax, [ebp+arg_0]
.text$mn:00005908                 push    eax             ; int
.text$mn:00005909                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000590E                 add     esp, 0Ch
.text$mn:00005911
.text$mn:00005911 loc_5911:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+Dj
.text$mn:00005911                 cmp     [ebp+arg_8], 0
.text$mn:00005915                 jnz     short loc_592A
.text$mn:00005917                 mov     ecx, [ebp+var_8]
.text$mn:0000591A                 mov     edx, [ebp+arg_4]
.text$mn:0000591D                 cmp     edx, [ecx+14h]
.text$mn:00005920                 ja      short loc_592A
.text$mn:00005922                 mov     eax, [ebp+arg_4]
.text$mn:00005925                 jmp     loc_59DD
.text$mn:0000592A ; ---------------------------------------------------------------------------
.text$mn:0000592A
.text$mn:0000592A loc_592A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+29j
.text$mn:0000592A                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+34j
.text$mn:0000592A                 mov     eax, [ebp+var_8]
.text$mn:0000592D                 mov     ecx, [ebp+arg_4]
.text$mn:00005930                 cmp     ecx, [eax+14h]
.text$mn:00005933                 jnb     loc_59D8
.text$mn:00005939                 mov     edx, [ebp+var_8]
.text$mn:0000593C                 mov     eax, [edx+14h]
.text$mn:0000593F                 sub     eax, [ebp+arg_4]
.text$mn:00005942                 mov     [ebp+var_4], eax
.text$mn:00005945                 mov     ecx, [ebp+arg_8]
.text$mn:00005948                 cmp     ecx, [ebp+var_4]
.text$mn:0000594B                 ja      loc_59D8
.text$mn:00005951                 mov     edx, [ebp+arg_8]
.text$mn:00005954                 sub     edx, 1
.text$mn:00005957                 mov     eax, [ebp+var_4]
.text$mn:0000595A                 sub     eax, edx
.text$mn:0000595C                 mov     [ebp+var_4], eax
.text$mn:0000595F                 mov     ecx, [ebp+var_8]
.text$mn:00005962                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00005967                 mov     ecx, [ebp+arg_4]
.text$mn:0000596A                 lea     edx, [eax+ecx*2]
.text$mn:0000596D                 mov     [ebp+var_10], edx
.text$mn:00005970                 jmp     short loc_598E
.text$mn:00005972 ; ---------------------------------------------------------------------------
.text$mn:00005972
.text$mn:00005972 loc_5972:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint):loc_59D6j
.text$mn:00005972                 mov     eax, [ebp+var_C]
.text$mn:00005975                 sub     eax, [ebp+var_10]
.text$mn:00005978                 sar     eax, 1
.text$mn:0000597A                 add     eax, 1
.text$mn:0000597D                 mov     ecx, [ebp+var_4]
.text$mn:00005980                 sub     ecx, eax
.text$mn:00005982                 mov     [ebp+var_4], ecx
.text$mn:00005985                 mov     edx, [ebp+var_C]
.text$mn:00005988                 add     edx, 2
.text$mn:0000598B                 mov     [ebp+var_10], edx
.text$mn:0000598E
.text$mn:0000598E loc_598E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+84j
.text$mn:0000598E                 mov     eax, [ebp+arg_0]
.text$mn:00005991                 push    eax
.text$mn:00005992                 mov     ecx, [ebp+var_4]
.text$mn:00005995                 push    ecx
.text$mn:00005996                 mov     edx, [ebp+var_10]
.text$mn:00005999                 push    edx
.text$mn:0000599A                 call    ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z ; std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)
.text$mn:0000599F                 add     esp, 0Ch
.text$mn:000059A2                 mov     [ebp+var_C], eax
.text$mn:000059A5                 cmp     [ebp+var_C], 0
.text$mn:000059A9                 jz      short loc_59D8
.text$mn:000059AB                 mov     eax, [ebp+arg_8]
.text$mn:000059AE                 push    eax
.text$mn:000059AF                 mov     ecx, [ebp+arg_0]
.text$mn:000059B2                 push    ecx
.text$mn:000059B3                 mov     edx, [ebp+var_C]
.text$mn:000059B6                 push    edx
.text$mn:000059B7                 call    ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z ; std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)
.text$mn:000059BC                 add     esp, 0Ch
.text$mn:000059BF                 test    eax, eax
.text$mn:000059C1                 jnz     short loc_59D6
.text$mn:000059C3                 mov     ecx, [ebp+var_8]
.text$mn:000059C6                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000059CB                 mov     ecx, [ebp+var_C]
.text$mn:000059CE                 sub     ecx, eax
.text$mn:000059D0                 sar     ecx, 1
.text$mn:000059D2                 mov     eax, ecx
.text$mn:000059D4                 jmp     short loc_59DD
.text$mn:000059D6 ; ---------------------------------------------------------------------------
.text$mn:000059D6
.text$mn:000059D6 loc_59D6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+D5j
.text$mn:000059D6                 jmp     short loc_5972
.text$mn:000059D8 ; ---------------------------------------------------------------------------
.text$mn:000059D8
.text$mn:000059D8 loc_59D8:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+47j
.text$mn:000059D8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+5Fj ...
.text$mn:000059D8                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:000059DD
.text$mn:000059DD loc_59DD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+39j
.text$mn:000059DD                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+E8j
.text$mn:000059DD                 mov     esp, ebp
.text$mn:000059DF                 pop     ebp
.text$mn:000059E0                 retn    0Ch
.text$mn:000059E0 ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z endp
.text$mn:000059E0
.text$mn:000059E0 ; ---------------------------------------------------------------------------
.text$mn:000059E3                 align 4
.text$mn:000059E3 _text$mn        ends
.text$mn:000059E3
.text$mn:000059E4 ; ===========================================================================
.text$mn:000059E4
.text$mn:000059E4 ; Segment type: Pure code
.text$mn:000059E4 ; Segment permissions: Read/Execute
.text$mn:000059E4 _text$mn        segment para public 'CODE' use32
.text$mn:000059E4                 assume cs:_text$mn
.text$mn:000059E4                 ;org 59E4h
.text$mn:000059E4 ; COMDAT (pick any)
.text$mn:000059E4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000059E4
.text$mn:000059E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000059E4
.text$mn:000059E4 ; Attributes: bp-based frame
.text$mn:000059E4
.text$mn:000059E4 ; public: static wchar_t const * __cdecl std::char_traits<wchar_t>::find(wchar_t const *, unsigned int, wchar_t const &)
.text$mn:000059E4                 public ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z
.text$mn:000059E4 ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z proc near
.text$mn:000059E4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::find(wchar_t const *,uint,uint)+AEp
.text$mn:000059E4
.text$mn:000059E4 var_4           = dword ptr -4
.text$mn:000059E4 arg_0           = dword ptr  8
.text$mn:000059E4 arg_4           = dword ptr  0Ch
.text$mn:000059E4 arg_8           = dword ptr  10h
.text$mn:000059E4
.text$mn:000059E4                 push    ebp
.text$mn:000059E5                 mov     ebp, esp
.text$mn:000059E7                 push    ecx
.text$mn:000059E8                 cmp     [ebp+arg_4], 0
.text$mn:000059EC                 jnz     short loc_59F7
.text$mn:000059EE                 mov     [ebp+var_4], 0
.text$mn:000059F5                 jmp     short loc_5A11
.text$mn:000059F7 ; ---------------------------------------------------------------------------
.text$mn:000059F7
.text$mn:000059F7 loc_59F7:                               ; CODE XREF: std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)+8j
.text$mn:000059F7                 mov     eax, [ebp+arg_4]
.text$mn:000059FA                 push    eax
.text$mn:000059FB                 mov     ecx, [ebp+arg_8]
.text$mn:000059FE                 movzx   edx, word ptr [ecx]
.text$mn:00005A01                 push    edx
.text$mn:00005A02                 mov     eax, [ebp+arg_0]
.text$mn:00005A05                 push    eax
.text$mn:00005A06                 call    _wmemchr
.text$mn:00005A0B                 add     esp, 0Ch
.text$mn:00005A0E                 mov     [ebp+var_4], eax
.text$mn:00005A11
.text$mn:00005A11 loc_5A11:                               ; CODE XREF: std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)+11j
.text$mn:00005A11                 mov     eax, [ebp+var_4]
.text$mn:00005A14                 mov     esp, ebp
.text$mn:00005A16                 pop     ebp
.text$mn:00005A17                 retn
.text$mn:00005A17 ?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z endp
.text$mn:00005A17
.text$mn:00005A17 _text$mn        ends
.text$mn:00005A17
.text$mn:00005A18 ; ===========================================================================
.text$mn:00005A18
.text$mn:00005A18 ; Segment type: Pure code
.text$mn:00005A18 ; Segment permissions: Read/Execute
.text$mn:00005A18 _text$mn        segment para public 'CODE' use32
.text$mn:00005A18                 assume cs:_text$mn
.text$mn:00005A18                 ;org 5A18h
.text$mn:00005A18 ; COMDAT (pick any)
.text$mn:00005A18                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005A18
.text$mn:00005A18 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A18
.text$mn:00005A18 ; Attributes: bp-based frame
.text$mn:00005A18
.text$mn:00005A18 ; const struct std::error_category *__cdecl std::generic_category()
.text$mn:00005A18                 public ?generic_category@std@@YAABVerror_category@1@XZ
.text$mn:00005A18 ?generic_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:00005A18                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+17p
.text$mn:00005A18                 push    ebp
.text$mn:00005A19                 mov     ebp, esp
.text$mn:00005A1B                 mov     eax, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.text$mn:00005A20                 pop     ebp
.text$mn:00005A21                 retn
.text$mn:00005A21 ?generic_category@std@@YAABVerror_category@1@XZ endp
.text$mn:00005A21
.text$mn:00005A21 ; ---------------------------------------------------------------------------
.text$mn:00005A22                 align 4
.text$mn:00005A22 _text$mn        ends
.text$mn:00005A22
.text$mn:00005A24 ; ===========================================================================
.text$mn:00005A24
.text$mn:00005A24 ; Segment type: Pure code
.text$mn:00005A24 ; Segment permissions: Read/Execute
.text$mn:00005A24 _text$mn        segment para public 'CODE' use32
.text$mn:00005A24                 assume cs:_text$mn
.text$mn:00005A24                 ;org 5A24h
.text$mn:00005A24 ; COMDAT (pick any)
.text$mn:00005A24                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005A24
.text$mn:00005A24 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A24
.text$mn:00005A24 ; Attributes: bp-based frame
.text$mn:00005A24
.text$mn:00005A24 ; struct Buffer *__thiscall ScintillaEditView::getCurrentBuffer(ScintillaEditView *__hidden this)
.text$mn:00005A24                 public ?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ
.text$mn:00005A24 ?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ proc near
.text$mn:00005A24                                         ; CODE XREF: Printer::doPrint(bool)+68Dp
.text$mn:00005A24
.text$mn:00005A24 var_4           = dword ptr -4
.text$mn:00005A24
.text$mn:00005A24                 push    ebp
.text$mn:00005A25                 mov     ebp, esp
.text$mn:00005A27                 push    ecx
.text$mn:00005A28                 mov     [ebp+var_4], ecx
.text$mn:00005A2B                 mov     eax, [ebp+var_4]
.text$mn:00005A2E                 mov     eax, [eax+20h]
.text$mn:00005A31                 mov     esp, ebp
.text$mn:00005A33                 pop     ebp
.text$mn:00005A34                 retn
.text$mn:00005A34 ?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ endp
.text$mn:00005A34
.text$mn:00005A34 ; ---------------------------------------------------------------------------
.text$mn:00005A35                 align 4
.text$mn:00005A35 _text$mn        ends
.text$mn:00005A35
.text$mn:00005A38 ; ===========================================================================
.text$mn:00005A38
.text$mn:00005A38 ; Segment type: Pure code
.text$mn:00005A38 ; Segment permissions: Read/Execute
.text$mn:00005A38 _text$mn        segment para public 'CODE' use32
.text$mn:00005A38                 assume cs:_text$mn
.text$mn:00005A38                 ;org 5A38h
.text$mn:00005A38 ; COMDAT (pick any)
.text$mn:00005A38                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005A38
.text$mn:00005A38 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A38
.text$mn:00005A38 ; Attributes: bp-based frame
.text$mn:00005A38
.text$mn:00005A38 ; int __thiscall ScintillaEditView::getCurrentDocLen(ScintillaEditView *__hidden this)
.text$mn:00005A38                 public ?getCurrentDocLen@ScintillaEditView@@QBEHXZ
.text$mn:00005A38 ?getCurrentDocLen@ScintillaEditView@@QBEHXZ proc near
.text$mn:00005A38                                         ; CODE XREF: Printer::doPrint(bool)+6F9p
.text$mn:00005A38
.text$mn:00005A38 var_4           = dword ptr -4
.text$mn:00005A38
.text$mn:00005A38                 push    ebp
.text$mn:00005A39                 mov     ebp, esp
.text$mn:00005A3B                 push    ecx
.text$mn:00005A3C                 mov     [ebp+var_4], ecx
.text$mn:00005A3F                 push    0               ; __int32
.text$mn:00005A41                 push    0               ; unsigned int
.text$mn:00005A43                 push    7D6h            ; unsigned int
.text$mn:00005A48                 mov     ecx, [ebp+var_4] ; this
.text$mn:00005A4B                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00005A50                 mov     esp, ebp
.text$mn:00005A52                 pop     ebp
.text$mn:00005A53                 retn
.text$mn:00005A53 ?getCurrentDocLen@ScintillaEditView@@QBEHXZ endp
.text$mn:00005A53
.text$mn:00005A53 _text$mn        ends
.text$mn:00005A53
.text$mn:00005A54 ; ===========================================================================
.text$mn:00005A54
.text$mn:00005A54 ; Segment type: Pure code
.text$mn:00005A54 ; Segment permissions: Read/Execute
.text$mn:00005A54 _text$mn        segment para public 'CODE' use32
.text$mn:00005A54                 assume cs:_text$mn
.text$mn:00005A54                 ;org 5A54h
.text$mn:00005A54 ; COMDAT (pick any)
.text$mn:00005A54                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005A54
.text$mn:00005A54 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A54
.text$mn:00005A54 ; Attributes: bp-based frame
.text$mn:00005A54
.text$mn:00005A54 ; const wchar_t *__thiscall Buffer::getFullPathName(Buffer *__hidden this)
.text$mn:00005A54                 public ?getFullPathName@Buffer@@QBEPB_WXZ
.text$mn:00005A54 ?getFullPathName@Buffer@@QBEPB_WXZ proc near
.text$mn:00005A54                                         ; CODE XREF: Printer::doPrint(bool)+694p
.text$mn:00005A54
.text$mn:00005A54 var_4           = dword ptr -4
.text$mn:00005A54
.text$mn:00005A54                 push    ebp
.text$mn:00005A55                 mov     ebp, esp
.text$mn:00005A57                 push    ecx
.text$mn:00005A58                 mov     [ebp+var_4], ecx
.text$mn:00005A5B                 mov     ecx, [ebp+var_4]
.text$mn:00005A5E                 add     ecx, 8Ch ; 'î'
.text$mn:00005A64                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00005A69                 mov     esp, ebp
.text$mn:00005A6B                 pop     ebp
.text$mn:00005A6C                 retn
.text$mn:00005A6C ?getFullPathName@Buffer@@QBEPB_WXZ endp
.text$mn:00005A6C
.text$mn:00005A6C ; ---------------------------------------------------------------------------
.text$mn:00005A6D                 align 10h
.text$mn:00005A6D _text$mn        ends
.text$mn:00005A6D
.text$mn:00005A70 ; ===========================================================================
.text$mn:00005A70
.text$mn:00005A70 ; Segment type: Pure code
.text$mn:00005A70 ; Segment permissions: Read/Execute
.text$mn:00005A70 _text$mn        segment para public 'CODE' use32
.text$mn:00005A70                 assume cs:_text$mn
.text$mn:00005A70                 ;org 5A70h
.text$mn:00005A70 ; COMDAT (pick any)
.text$mn:00005A70                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005A70
.text$mn:00005A70 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A70
.text$mn:00005A70 ; Attributes: bp-based frame
.text$mn:00005A70
.text$mn:00005A70 ; struct NppParameters *__cdecl NppParameters::getInstance()
.text$mn:00005A70                 public ?getInstance@NppParameters@@SAPAV1@XZ
.text$mn:00005A70 ?getInstance@NppParameters@@SAPAV1@XZ proc near
.text$mn:00005A70                                         ; CODE XREF: Printer::doPrint(bool)+37p
.text$mn:00005A70                 push    ebp
.text$mn:00005A71                 mov     ebp, esp
.text$mn:00005A73                 mov     eax, dword ptr ds:?_pSelf@NppParameters@@0PAV1@A ; NppParameters * NppParameters::_pSelf
.text$mn:00005A78                 pop     ebp
.text$mn:00005A79                 retn
.text$mn:00005A79 ?getInstance@NppParameters@@SAPAV1@XZ endp
.text$mn:00005A79
.text$mn:00005A79 ; ---------------------------------------------------------------------------
.text$mn:00005A7A                 align 4
.text$mn:00005A7A _text$mn        ends
.text$mn:00005A7A
.text$mn:00005A7C ; ===========================================================================
.text$mn:00005A7C
.text$mn:00005A7C ; Segment type: Pure code
.text$mn:00005A7C ; Segment permissions: Read/Execute
.text$mn:00005A7C _text$mn        segment para public 'CODE' use32
.text$mn:00005A7C                 assume cs:_text$mn
.text$mn:00005A7C                 ;org 5A7Ch
.text$mn:00005A7C ; COMDAT (pick any)
.text$mn:00005A7C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005A7C
.text$mn:00005A7C ; =============== S U B R O U T I N E =======================================
.text$mn:00005A7C
.text$mn:00005A7C ; Attributes: bp-based frame
.text$mn:00005A7C
.text$mn:00005A7C ; const struct NppGUI *__thiscall NppParameters::getNppGUI(NppParameters *__hidden this)
.text$mn:00005A7C                 public ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ
.text$mn:00005A7C ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ proc near
.text$mn:00005A7C                                         ; CODE XREF: Printer::doPrint(bool)+3Ep
.text$mn:00005A7C
.text$mn:00005A7C var_4           = dword ptr -4
.text$mn:00005A7C
.text$mn:00005A7C                 push    ebp
.text$mn:00005A7D                 mov     ebp, esp
.text$mn:00005A7F                 push    ecx
.text$mn:00005A80                 mov     [ebp+var_4], ecx
.text$mn:00005A83                 mov     eax, [ebp+var_4]
.text$mn:00005A86                 add     eax, 118h
.text$mn:00005A8B                 mov     esp, ebp
.text$mn:00005A8D                 pop     ebp
.text$mn:00005A8E                 retn
.text$mn:00005A8E ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ endp
.text$mn:00005A8E
.text$mn:00005A8E ; ---------------------------------------------------------------------------
.text$mn:00005A8F                 align 10h
.text$mn:00005A8F _text$mn        ends
.text$mn:00005A8F
.text$mn:00005A90 ; ===========================================================================
.text$mn:00005A90
.text$mn:00005A90 ; Segment type: Pure code
.text$mn:00005A90 ; Segment permissions: Read/Execute
.text$mn:00005A90 _text$mn        segment para public 'CODE' use32
.text$mn:00005A90                 assume cs:_text$mn
.text$mn:00005A90                 ;org 5A90h
.text$mn:00005A90 ; COMDAT (pick any)
.text$mn:00005A90                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005A90
.text$mn:00005A90 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A90
.text$mn:00005A90 ; Attributes: bp-based frame
.text$mn:00005A90
.text$mn:00005A90 ; bool __thiscall ScintillaEditView::hasMarginShowed(ScintillaEditView *this, int)
.text$mn:00005A90                 public ?hasMarginShowed@ScintillaEditView@@QAE_NH@Z
.text$mn:00005A90 ?hasMarginShowed@ScintillaEditView@@QAE_NH@Z proc near
.text$mn:00005A90                                         ; CODE XREF: Printer::doPrint(bool)+1515p
.text$mn:00005A90
.text$mn:00005A90 var_8           = dword ptr -8
.text$mn:00005A90 var_4           = dword ptr -4
.text$mn:00005A90 arg_0           = dword ptr  8
.text$mn:00005A90
.text$mn:00005A90                 push    ebp
.text$mn:00005A91                 mov     ebp, esp
.text$mn:00005A93                 sub     esp, 8
.text$mn:00005A96                 mov     [ebp+var_8], ecx
.text$mn:00005A99                 push    0               ; __int32
.text$mn:00005A9B                 mov     eax, [ebp+arg_0]
.text$mn:00005A9E                 push    eax             ; unsigned int
.text$mn:00005A9F                 push    8C3h            ; unsigned int
.text$mn:00005AA4                 mov     ecx, [ebp+var_8] ; this
.text$mn:00005AA7                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00005AAC                 test    eax, eax
.text$mn:00005AAE                 jz      short loc_5AB9
.text$mn:00005AB0                 mov     [ebp+var_4], 1
.text$mn:00005AB7                 jmp     short loc_5AC0
.text$mn:00005AB9 ; ---------------------------------------------------------------------------
.text$mn:00005AB9
.text$mn:00005AB9 loc_5AB9:                               ; CODE XREF: ScintillaEditView::hasMarginShowed(int)+1Ej
.text$mn:00005AB9                 mov     [ebp+var_4], 0
.text$mn:00005AC0
.text$mn:00005AC0 loc_5AC0:                               ; CODE XREF: ScintillaEditView::hasMarginShowed(int)+27j
.text$mn:00005AC0                 mov     al, byte ptr [ebp+var_4]
.text$mn:00005AC3                 mov     esp, ebp
.text$mn:00005AC5                 pop     ebp
.text$mn:00005AC6                 retn    4
.text$mn:00005AC6 ?hasMarginShowed@ScintillaEditView@@QAE_NH@Z endp
.text$mn:00005AC6
.text$mn:00005AC6 ; ---------------------------------------------------------------------------
.text$mn:00005AC9                 align 4
.text$mn:00005AC9 _text$mn        ends
.text$mn:00005AC9
.text$mn:00005ACC ; ===========================================================================
.text$mn:00005ACC
.text$mn:00005ACC ; Segment type: Pure code
.text$mn:00005ACC ; Segment permissions: Read/Execute
.text$mn:00005ACC _text$mn        segment para public 'CODE' use32
.text$mn:00005ACC                 assume cs:_text$mn
.text$mn:00005ACC                 ;org 5ACCh
.text$mn:00005ACC ; COMDAT (pick any)
.text$mn:00005ACC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005ACC
.text$mn:00005ACC ; =============== S U B R O U T I N E =======================================
.text$mn:00005ACC
.text$mn:00005ACC ; Attributes: bp-based frame
.text$mn:00005ACC
.text$mn:00005ACC ; bool __thiscall PrintSettings::isFooterPresent(PrintSettings *__hidden this)
.text$mn:00005ACC                 public ?isFooterPresent@PrintSettings@@QBE_NXZ
.text$mn:00005ACC ?isFooterPresent@PrintSettings@@QBE_NXZ proc near
.text$mn:00005ACC                                         ; CODE XREF: Printer::doPrint(bool)+FB1p
.text$mn:00005ACC                                         ; Printer::doPrint(bool)+1B36p
.text$mn:00005ACC
.text$mn:00005ACC var_8           = dword ptr -8
.text$mn:00005ACC var_4           = dword ptr -4
.text$mn:00005ACC
.text$mn:00005ACC                 push    ebp
.text$mn:00005ACD                 mov     ebp, esp
.text$mn:00005ACF                 sub     esp, 8
.text$mn:00005AD2                 mov     [ebp+var_4], ecx
.text$mn:00005AD5                 push    offset ??_C@_11LOCGONAA@?$AA?$AA@ ; Str
.text$mn:00005ADA                 mov     eax, [ebp+var_4]
.text$mn:00005ADD                 add     eax, 80h ; 'Ç'
.text$mn:00005AE2                 push    eax             ; int
.text$mn:00005AE3                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00005AE8                 add     esp, 8
.text$mn:00005AEB                 movzx   ecx, al
.text$mn:00005AEE                 test    ecx, ecx
.text$mn:00005AF0                 jnz     short loc_5B37
.text$mn:00005AF2                 push    offset ??_C@_11LOCGONAA@?$AA?$AA@ ; Str
.text$mn:00005AF7                 mov     edx, [ebp+var_4]
.text$mn:00005AFA                 add     edx, 9Ch ; '£'
.text$mn:00005B00                 push    edx             ; int
.text$mn:00005B01                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00005B06                 add     esp, 8
.text$mn:00005B09                 movzx   eax, al
.text$mn:00005B0C                 test    eax, eax
.text$mn:00005B0E                 jnz     short loc_5B37
.text$mn:00005B10                 push    offset ??_C@_11LOCGONAA@?$AA?$AA@ ; Str
.text$mn:00005B15                 mov     ecx, [ebp+var_4]
.text$mn:00005B18                 add     ecx, 0B8h ; '+'
.text$mn:00005B1E                 push    ecx             ; int
.text$mn:00005B1F                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00005B24                 add     esp, 8
.text$mn:00005B27                 movzx   edx, al
.text$mn:00005B2A                 test    edx, edx
.text$mn:00005B2C                 jnz     short loc_5B37
.text$mn:00005B2E                 mov     [ebp+var_8], 0
.text$mn:00005B35                 jmp     short loc_5B3E
.text$mn:00005B37 ; ---------------------------------------------------------------------------
.text$mn:00005B37
.text$mn:00005B37 loc_5B37:                               ; CODE XREF: PrintSettings::isFooterPresent(void)+24j
.text$mn:00005B37                                         ; PrintSettings::isFooterPresent(void)+42j ...
.text$mn:00005B37                 mov     [ebp+var_8], 1
.text$mn:00005B3E
.text$mn:00005B3E loc_5B3E:                               ; CODE XREF: PrintSettings::isFooterPresent(void)+69j
.text$mn:00005B3E                 mov     al, byte ptr [ebp+var_8]
.text$mn:00005B41                 mov     esp, ebp
.text$mn:00005B43                 pop     ebp
.text$mn:00005B44                 retn
.text$mn:00005B44 ?isFooterPresent@PrintSettings@@QBE_NXZ endp
.text$mn:00005B44
.text$mn:00005B44 ; ---------------------------------------------------------------------------
.text$mn:00005B45                 align 4
.text$mn:00005B45 _text$mn        ends
.text$mn:00005B45
.text$mn:00005B48 ; ===========================================================================
.text$mn:00005B48
.text$mn:00005B48 ; Segment type: Pure code
.text$mn:00005B48 ; Segment permissions: Read/Execute
.text$mn:00005B48 _text$mn        segment para public 'CODE' use32
.text$mn:00005B48                 assume cs:_text$mn
.text$mn:00005B48                 ;org 5B48h
.text$mn:00005B48 ; COMDAT (pick any)
.text$mn:00005B48                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005B48
.text$mn:00005B48 ; =============== S U B R O U T I N E =======================================
.text$mn:00005B48
.text$mn:00005B48 ; Attributes: bp-based frame
.text$mn:00005B48
.text$mn:00005B48 ; bool __thiscall PrintSettings::isHeaderPresent(PrintSettings *__hidden this)
.text$mn:00005B48                 public ?isHeaderPresent@PrintSettings@@QBE_NXZ
.text$mn:00005B48 ?isHeaderPresent@PrintSettings@@QBE_NXZ proc near
.text$mn:00005B48                                         ; CODE XREF: Printer::doPrint(bool)+A57p
.text$mn:00005B48                                         ; Printer::doPrint(bool)+1618p
.text$mn:00005B48
.text$mn:00005B48 var_8           = dword ptr -8
.text$mn:00005B48 var_4           = dword ptr -4
.text$mn:00005B48
.text$mn:00005B48                 push    ebp
.text$mn:00005B49                 mov     ebp, esp
.text$mn:00005B4B                 sub     esp, 8
.text$mn:00005B4E                 mov     [ebp+var_4], ecx
.text$mn:00005B51                 push    offset ??_C@_11LOCGONAA@?$AA?$AA@ ; Str
.text$mn:00005B56                 mov     eax, [ebp+var_4]
.text$mn:00005B59                 add     eax, 8
.text$mn:00005B5C                 push    eax             ; int
.text$mn:00005B5D                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00005B62                 add     esp, 8
.text$mn:00005B65                 movzx   ecx, al
.text$mn:00005B68                 test    ecx, ecx
.text$mn:00005B6A                 jnz     short loc_5BAB
.text$mn:00005B6C                 push    offset ??_C@_11LOCGONAA@?$AA?$AA@ ; Str
.text$mn:00005B71                 mov     edx, [ebp+var_4]
.text$mn:00005B74                 add     edx, 24h ; '$'
.text$mn:00005B77                 push    edx             ; int
.text$mn:00005B78                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00005B7D                 add     esp, 8
.text$mn:00005B80                 movzx   eax, al
.text$mn:00005B83                 test    eax, eax
.text$mn:00005B85                 jnz     short loc_5BAB
.text$mn:00005B87                 push    offset ??_C@_11LOCGONAA@?$AA?$AA@ ; Str
.text$mn:00005B8C                 mov     ecx, [ebp+var_4]
.text$mn:00005B8F                 add     ecx, 40h ; '@'
.text$mn:00005B92                 push    ecx             ; int
.text$mn:00005B93                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00005B98                 add     esp, 8
.text$mn:00005B9B                 movzx   edx, al
.text$mn:00005B9E                 test    edx, edx
.text$mn:00005BA0                 jnz     short loc_5BAB
.text$mn:00005BA2                 mov     [ebp+var_8], 0
.text$mn:00005BA9                 jmp     short loc_5BB2
.text$mn:00005BAB ; ---------------------------------------------------------------------------
.text$mn:00005BAB
.text$mn:00005BAB loc_5BAB:                               ; CODE XREF: PrintSettings::isHeaderPresent(void)+22j
.text$mn:00005BAB                                         ; PrintSettings::isHeaderPresent(void)+3Dj ...
.text$mn:00005BAB                 mov     [ebp+var_8], 1
.text$mn:00005BB2
.text$mn:00005BB2 loc_5BB2:                               ; CODE XREF: PrintSettings::isHeaderPresent(void)+61j
.text$mn:00005BB2                 mov     al, byte ptr [ebp+var_8]
.text$mn:00005BB5                 mov     esp, ebp
.text$mn:00005BB7                 pop     ebp
.text$mn:00005BB8                 retn
.text$mn:00005BB8 ?isHeaderPresent@PrintSettings@@QBE_NXZ endp
.text$mn:00005BB8
.text$mn:00005BB8 ; ---------------------------------------------------------------------------
.text$mn:00005BB9                 align 4
.text$mn:00005BB9 _text$mn        ends
.text$mn:00005BB9
.text$mn:00005BBC ; ===========================================================================
.text$mn:00005BBC
.text$mn:00005BBC ; Segment type: Pure code
.text$mn:00005BBC ; Segment permissions: Read/Execute
.text$mn:00005BBC _text$mn        segment para public 'CODE' use32
.text$mn:00005BBC                 assume cs:_text$mn
.text$mn:00005BBC                 ;org 5BBCh
.text$mn:00005BBC ; COMDAT (pick any)
.text$mn:00005BBC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005BBC
.text$mn:00005BBC ; =============== S U B R O U T I N E =======================================
.text$mn:00005BBC
.text$mn:00005BBC ; Attributes: bp-based frame
.text$mn:00005BBC
.text$mn:00005BBC ; bool __thiscall PrintSettings::isUserMargePresent(PrintSettings *__hidden this)
.text$mn:00005BBC                 public ?isUserMargePresent@PrintSettings@@QBE_NXZ
.text$mn:00005BBC ?isUserMargePresent@PrintSettings@@QBE_NXZ proc near
.text$mn:00005BBC                                         ; CODE XREF: Printer::doPrint(bool)+12Ep
.text$mn:00005BBC
.text$mn:00005BBC var_8           = dword ptr -8
.text$mn:00005BBC var_4           = dword ptr -4
.text$mn:00005BBC
.text$mn:00005BBC                 push    ebp
.text$mn:00005BBD                 mov     ebp, esp
.text$mn:00005BBF                 sub     esp, 8
.text$mn:00005BC2                 mov     [ebp+var_4], ecx
.text$mn:00005BC5                 mov     eax, [ebp+var_4]
.text$mn:00005BC8                 cmp     dword ptr [eax+0F8h], 0
.text$mn:00005BCF                 jnz     short loc_5BFE
.text$mn:00005BD1                 mov     ecx, [ebp+var_4]
.text$mn:00005BD4                 cmp     dword ptr [ecx+0FCh], 0
.text$mn:00005BDB                 jnz     short loc_5BFE
.text$mn:00005BDD                 mov     edx, [ebp+var_4]
.text$mn:00005BE0                 cmp     dword ptr [edx+100h], 0
.text$mn:00005BE7                 jnz     short loc_5BFE
.text$mn:00005BE9                 mov     eax, [ebp+var_4]
.text$mn:00005BEC                 cmp     dword ptr [eax+104h], 0
.text$mn:00005BF3                 jnz     short loc_5BFE
.text$mn:00005BF5                 mov     [ebp+var_8], 0
.text$mn:00005BFC                 jmp     short loc_5C05
.text$mn:00005BFE ; ---------------------------------------------------------------------------
.text$mn:00005BFE
.text$mn:00005BFE loc_5BFE:                               ; CODE XREF: PrintSettings::isUserMargePresent(void)+13j
.text$mn:00005BFE                                         ; PrintSettings::isUserMargePresent(void)+1Fj ...
.text$mn:00005BFE                 mov     [ebp+var_8], 1
.text$mn:00005C05
.text$mn:00005C05 loc_5C05:                               ; CODE XREF: PrintSettings::isUserMargePresent(void)+40j
.text$mn:00005C05                 mov     al, byte ptr [ebp+var_8]
.text$mn:00005C08                 mov     esp, ebp
.text$mn:00005C0A                 pop     ebp
.text$mn:00005C0B                 retn
.text$mn:00005C0B ?isUserMargePresent@PrintSettings@@QBE_NXZ endp
.text$mn:00005C0B
.text$mn:00005C0B _text$mn        ends
.text$mn:00005C0B
.text$mn:00005C0C ; ===========================================================================
.text$mn:00005C0C
.text$mn:00005C0C ; Segment type: Pure code
.text$mn:00005C0C ; Segment permissions: Read/Execute
.text$mn:00005C0C _text$mn        segment para public 'CODE' use32
.text$mn:00005C0C                 assume cs:_text$mn
.text$mn:00005C0C                 ;org 5C0Ch
.text$mn:00005C0C ; COMDAT (pick any)
.text$mn:00005C0C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005C0C
.text$mn:00005C0C ; =============== S U B R O U T I N E =======================================
.text$mn:00005C0C
.text$mn:00005C0C ; Attributes: bp-based frame
.text$mn:00005C0C
.text$mn:00005C0C ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::length(void)const
.text$mn:00005C0C                 public ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:00005C0C ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:00005C0C                                         ; CODE XREF: Printer::doPrint(bool)+1762p
.text$mn:00005C0C                                         ; Printer::doPrint(bool)+1844p ...
.text$mn:00005C0C
.text$mn:00005C0C var_4           = dword ptr -4
.text$mn:00005C0C
.text$mn:00005C0C                 push    ebp
.text$mn:00005C0D                 mov     ebp, esp
.text$mn:00005C0F                 push    ecx
.text$mn:00005C10                 mov     [ebp+var_4], ecx
.text$mn:00005C13                 mov     eax, [ebp+var_4]
.text$mn:00005C16                 mov     eax, [eax+14h]
.text$mn:00005C19                 mov     esp, ebp
.text$mn:00005C1B                 pop     ebp
.text$mn:00005C1C                 retn
.text$mn:00005C1C ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:00005C1C
.text$mn:00005C1C ; ---------------------------------------------------------------------------
.text$mn:00005C1D                 align 10h
.text$mn:00005C1D _text$mn        ends
.text$mn:00005C1D
.text$mn:00005C20 ; ===========================================================================
.text$mn:00005C20
.text$mn:00005C20 ; Segment type: Pure code
.text$mn:00005C20 ; Segment permissions: Read/Execute
.text$mn:00005C20 _text$mn        segment para public 'CODE' use32
.text$mn:00005C20                 assume cs:_text$mn
.text$mn:00005C20                 ;org 5C20h
.text$mn:00005C20 ; COMDAT (pick any)
.text$mn:00005C20                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005C20
.text$mn:00005C20 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C20
.text$mn:00005C20 ; Attributes: bp-based frame
.text$mn:00005C20
.text$mn:00005C20 ; int __cdecl std::char_traits<char>::length(char *Str)
.text$mn:00005C20                 public ?length@?$char_traits@D@std@@SAIPBD@Z
.text$mn:00005C20 ?length@?$char_traits@D@std@@SAIPBD@Z proc near
.text$mn:00005C20                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+21p
.text$mn:00005C20
.text$mn:00005C20 var_4           = dword ptr -4
.text$mn:00005C20 Str             = dword ptr  8
.text$mn:00005C20
.text$mn:00005C20                 push    ebp
.text$mn:00005C21                 mov     ebp, esp
.text$mn:00005C23                 push    ecx
.text$mn:00005C24                 mov     eax, [ebp+Str]
.text$mn:00005C27                 movsx   ecx, byte ptr [eax]
.text$mn:00005C2A                 test    ecx, ecx
.text$mn:00005C2C                 jnz     short loc_5C37
.text$mn:00005C2E                 mov     [ebp+var_4], 0
.text$mn:00005C35                 jmp     short loc_5C46
.text$mn:00005C37 ; ---------------------------------------------------------------------------
.text$mn:00005C37
.text$mn:00005C37 loc_5C37:                               ; CODE XREF: std::char_traits<char>::length(char const *)+Cj
.text$mn:00005C37                 mov     edx, [ebp+Str]
.text$mn:00005C3A                 push    edx             ; Str
.text$mn:00005C3B                 call    _strlen
.text$mn:00005C40                 add     esp, 4
.text$mn:00005C43                 mov     [ebp+var_4], eax
.text$mn:00005C46
.text$mn:00005C46 loc_5C46:                               ; CODE XREF: std::char_traits<char>::length(char const *)+15j
.text$mn:00005C46                 mov     eax, [ebp+var_4]
.text$mn:00005C49                 mov     esp, ebp
.text$mn:00005C4B                 pop     ebp
.text$mn:00005C4C                 retn
.text$mn:00005C4C ?length@?$char_traits@D@std@@SAIPBD@Z endp
.text$mn:00005C4C
.text$mn:00005C4C ; ---------------------------------------------------------------------------
.text$mn:00005C4D                 align 10h
.text$mn:00005C4D _text$mn        ends
.text$mn:00005C4D
.text$mn:00005C50 ; ===========================================================================
.text$mn:00005C50
.text$mn:00005C50 ; Segment type: Pure code
.text$mn:00005C50 ; Segment permissions: Read/Execute
.text$mn:00005C50 _text$mn        segment para public 'CODE' use32
.text$mn:00005C50                 assume cs:_text$mn
.text$mn:00005C50                 ;org 5C50h
.text$mn:00005C50 ; COMDAT (pick any)
.text$mn:00005C50                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005C50
.text$mn:00005C50 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C50
.text$mn:00005C50 ; Attributes: bp-based frame
.text$mn:00005C50
.text$mn:00005C50 ; int __cdecl std::char_traits<wchar_t>::length(wchar_t *Str)
.text$mn:00005C50                 public ?length@?$char_traits@_W@std@@SAIPB_W@Z
.text$mn:00005C50 ?length@?$char_traits@_W@std@@SAIPB_W@Z proc near
.text$mn:00005C50                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+21p
.text$mn:00005C50                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t const *)+21p ...
.text$mn:00005C50
.text$mn:00005C50 var_4           = dword ptr -4
.text$mn:00005C50 Str             = dword ptr  8
.text$mn:00005C50
.text$mn:00005C50                 push    ebp
.text$mn:00005C51                 mov     ebp, esp
.text$mn:00005C53                 push    ecx
.text$mn:00005C54                 mov     eax, [ebp+Str]
.text$mn:00005C57                 movzx   ecx, word ptr [eax]
.text$mn:00005C5A                 test    ecx, ecx
.text$mn:00005C5C                 jnz     short loc_5C67
.text$mn:00005C5E                 mov     [ebp+var_4], 0
.text$mn:00005C65                 jmp     short loc_5C76
.text$mn:00005C67 ; ---------------------------------------------------------------------------
.text$mn:00005C67
.text$mn:00005C67 loc_5C67:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+Cj
.text$mn:00005C67                 mov     edx, [ebp+Str]
.text$mn:00005C6A                 push    edx             ; Str
.text$mn:00005C6B                 call    _wcslen
.text$mn:00005C70                 add     esp, 4
.text$mn:00005C73                 mov     [ebp+var_4], eax
.text$mn:00005C76
.text$mn:00005C76 loc_5C76:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+15j
.text$mn:00005C76                 mov     eax, [ebp+var_4]
.text$mn:00005C79                 mov     esp, ebp
.text$mn:00005C7B                 pop     ebp
.text$mn:00005C7C                 retn
.text$mn:00005C7C ?length@?$char_traits@_W@std@@SAIPB_W@Z endp
.text$mn:00005C7C
.text$mn:00005C7C ; ---------------------------------------------------------------------------
.text$mn:00005C7D                 align 10h
.text$mn:00005C7D _text$mn        ends
.text$mn:00005C7D
.text$mn:00005C80 ; ===========================================================================
.text$mn:00005C80
.text$mn:00005C80 ; Segment type: Pure code
.text$mn:00005C80 ; Segment permissions: Read/Execute
.text$mn:00005C80 _text$mn        segment para public 'CODE' use32
.text$mn:00005C80                 assume cs:_text$mn
.text$mn:00005C80                 ;org 5C80h
.text$mn:00005C80 ; COMDAT (pick any)
.text$mn:00005C80                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005C80
.text$mn:00005C80 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C80
.text$mn:00005C80 ; Attributes: bp-based frame
.text$mn:00005C80
.text$mn:00005C80 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<char>>::max_size(void)const
.text$mn:00005C80                 public ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
.text$mn:00005C80 ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
.text$mn:00005C80                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+17p
.text$mn:00005C80
.text$mn:00005C80 var_4           = dword ptr -4
.text$mn:00005C80
.text$mn:00005C80                 push    ebp
.text$mn:00005C81                 mov     ebp, esp
.text$mn:00005C83                 push    ecx
.text$mn:00005C84                 mov     [ebp+var_4], ecx
.text$mn:00005C87                 mov     eax, [ebp+var_4]
.text$mn:00005C8A                 push    eax
.text$mn:00005C8B                 call    ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)
.text$mn:00005C90                 add     esp, 4
.text$mn:00005C93                 mov     esp, ebp
.text$mn:00005C95                 pop     ebp
.text$mn:00005C96                 retn
.text$mn:00005C96 ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ endp
.text$mn:00005C96
.text$mn:00005C96 ; ---------------------------------------------------------------------------
.text$mn:00005C97                 align 4
.text$mn:00005C97 _text$mn        ends
.text$mn:00005C97
.text$mn:00005C98 ; ===========================================================================
.text$mn:00005C98
.text$mn:00005C98 ; Segment type: Pure code
.text$mn:00005C98 ; Segment permissions: Read/Execute
.text$mn:00005C98 _text$mn        segment para public 'CODE' use32
.text$mn:00005C98                 assume cs:_text$mn
.text$mn:00005C98                 ;org 5C98h
.text$mn:00005C98 ; COMDAT (pick any)
.text$mn:00005C98                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005C98
.text$mn:00005C98 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C98
.text$mn:00005C98 ; Attributes: bp-based frame
.text$mn:00005C98
.text$mn:00005C98 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::max_size(void)const
.text$mn:00005C98                 public ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ
.text$mn:00005C98 ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ proc near
.text$mn:00005C98                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+17p
.text$mn:00005C98
.text$mn:00005C98 var_4           = dword ptr -4
.text$mn:00005C98
.text$mn:00005C98                 push    ebp
.text$mn:00005C99                 mov     ebp, esp
.text$mn:00005C9B                 push    ecx
.text$mn:00005C9C                 mov     [ebp+var_4], ecx
.text$mn:00005C9F                 mov     eax, [ebp+var_4]
.text$mn:00005CA2                 push    eax
.text$mn:00005CA3                 call    ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)
.text$mn:00005CA8                 add     esp, 4
.text$mn:00005CAB                 mov     esp, ebp
.text$mn:00005CAD                 pop     ebp
.text$mn:00005CAE                 retn
.text$mn:00005CAE ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ endp
.text$mn:00005CAE
.text$mn:00005CAE ; ---------------------------------------------------------------------------
.text$mn:00005CAF                 align 10h
.text$mn:00005CAF _text$mn        ends
.text$mn:00005CAF
.text$mn:00005CB0 ; ===========================================================================
.text$mn:00005CB0
.text$mn:00005CB0 ; Segment type: Pure code
.text$mn:00005CB0 ; Segment permissions: Read/Execute
.text$mn:00005CB0 _text$mn        segment para public 'CODE' use32
.text$mn:00005CB0                 assume cs:_text$mn
.text$mn:00005CB0                 ;org 5CB0h
.text$mn:00005CB0 ; COMDAT (pick any)
.text$mn:00005CB0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005CB0
.text$mn:00005CB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00005CB0
.text$mn:00005CB0 ; Attributes: bp-based frame
.text$mn:00005CB0
.text$mn:00005CB0 ; public: unsigned int __thiscall std::allocator<char>::max_size(void)const
.text$mn:00005CB0                 public ?max_size@?$allocator@D@std@@QBEIXZ
.text$mn:00005CB0 ?max_size@?$allocator@D@std@@QBEIXZ proc near
.text$mn:00005CB0                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)+6p
.text$mn:00005CB0
.text$mn:00005CB0 var_4           = dword ptr -4
.text$mn:00005CB0
.text$mn:00005CB0                 push    ebp
.text$mn:00005CB1                 mov     ebp, esp
.text$mn:00005CB3                 push    ecx
.text$mn:00005CB4                 mov     [ebp+var_4], ecx
.text$mn:00005CB7                 or      eax, 0FFFFFFFFh
.text$mn:00005CBA                 mov     esp, ebp
.text$mn:00005CBC                 pop     ebp
.text$mn:00005CBD                 retn
.text$mn:00005CBD ?max_size@?$allocator@D@std@@QBEIXZ endp
.text$mn:00005CBD
.text$mn:00005CBD ; ---------------------------------------------------------------------------
.text$mn:00005CBE                 align 10h
.text$mn:00005CBE _text$mn        ends
.text$mn:00005CBE
.text$mn:00005CC0 ; ===========================================================================
.text$mn:00005CC0
.text$mn:00005CC0 ; Segment type: Pure code
.text$mn:00005CC0 ; Segment permissions: Read/Execute
.text$mn:00005CC0 _text$mn        segment para public 'CODE' use32
.text$mn:00005CC0                 assume cs:_text$mn
.text$mn:00005CC0                 ;org 5CC0h
.text$mn:00005CC0 ; COMDAT (pick any)
.text$mn:00005CC0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005CC0
.text$mn:00005CC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00005CC0
.text$mn:00005CC0 ; Attributes: bp-based frame
.text$mn:00005CC0
.text$mn:00005CC0 ; public: unsigned int __thiscall std::allocator<wchar_t>::max_size(void)const
.text$mn:00005CC0                 public ?max_size@?$allocator@_W@std@@QBEIXZ
.text$mn:00005CC0 ?max_size@?$allocator@_W@std@@QBEIXZ proc near
.text$mn:00005CC0                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)+6p
.text$mn:00005CC0
.text$mn:00005CC0 var_4           = dword ptr -4
.text$mn:00005CC0
.text$mn:00005CC0                 push    ebp
.text$mn:00005CC1                 mov     ebp, esp
.text$mn:00005CC3                 push    ecx
.text$mn:00005CC4                 mov     [ebp+var_4], ecx
.text$mn:00005CC7                 mov     eax, 7FFFFFFFh
.text$mn:00005CCC                 mov     esp, ebp
.text$mn:00005CCE                 pop     ebp
.text$mn:00005CCF                 retn
.text$mn:00005CCF ?max_size@?$allocator@_W@std@@QBEIXZ endp
.text$mn:00005CCF
.text$mn:00005CCF _text$mn        ends
.text$mn:00005CCF
.text$mn:00005CD0 ; ===========================================================================
.text$mn:00005CD0
.text$mn:00005CD0 ; Segment type: Pure code
.text$mn:00005CD0 ; Segment permissions: Read/Execute
.text$mn:00005CD0 _text$mn        segment para public 'CODE' use32
.text$mn:00005CD0                 assume cs:_text$mn
.text$mn:00005CD0                 ;org 5CD0h
.text$mn:00005CD0 ; COMDAT (pick any)
.text$mn:00005CD0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005CD0
.text$mn:00005CD0 ; =============== S U B R O U T I N E =======================================
.text$mn:00005CD0
.text$mn:00005CD0 ; Attributes: bp-based frame
.text$mn:00005CD0
.text$mn:00005CD0 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<char>>::max_size(class std::allocator<char> const &)
.text$mn:00005CD0                 public ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
.text$mn:00005CD0 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z proc near
.text$mn:00005CD0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::max_size(void)+Bp
.text$mn:00005CD0
.text$mn:00005CD0 arg_0           = dword ptr  8
.text$mn:00005CD0
.text$mn:00005CD0                 push    ebp
.text$mn:00005CD1                 mov     ebp, esp
.text$mn:00005CD3                 mov     ecx, [ebp+arg_0]
.text$mn:00005CD6                 call    ?max_size@?$allocator@D@std@@QBEIXZ ; std::allocator<char>::max_size(void)
.text$mn:00005CDB                 pop     ebp
.text$mn:00005CDC                 retn
.text$mn:00005CDC ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z endp
.text$mn:00005CDC
.text$mn:00005CDC ; ---------------------------------------------------------------------------
.text$mn:00005CDD                 align 10h
.text$mn:00005CDD _text$mn        ends
.text$mn:00005CDD
.text$mn:00005CE0 ; ===========================================================================
.text$mn:00005CE0
.text$mn:00005CE0 ; Segment type: Pure code
.text$mn:00005CE0 ; Segment permissions: Read/Execute
.text$mn:00005CE0 _text$mn        segment para public 'CODE' use32
.text$mn:00005CE0                 assume cs:_text$mn
.text$mn:00005CE0                 ;org 5CE0h
.text$mn:00005CE0 ; COMDAT (pick any)
.text$mn:00005CE0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005CE0
.text$mn:00005CE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00005CE0
.text$mn:00005CE0 ; Attributes: bp-based frame
.text$mn:00005CE0
.text$mn:00005CE0 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<wchar_t>>::max_size(class std::allocator<wchar_t> const &)
.text$mn:00005CE0                 public ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
.text$mn:00005CE0 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z proc near
.text$mn:00005CE0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)+Bp
.text$mn:00005CE0
.text$mn:00005CE0 arg_0           = dword ptr  8
.text$mn:00005CE0
.text$mn:00005CE0                 push    ebp
.text$mn:00005CE1                 mov     ebp, esp
.text$mn:00005CE3                 mov     ecx, [ebp+arg_0]
.text$mn:00005CE6                 call    ?max_size@?$allocator@_W@std@@QBEIXZ ; std::allocator<wchar_t>::max_size(void)
.text$mn:00005CEB                 pop     ebp
.text$mn:00005CEC                 retn
.text$mn:00005CEC ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z endp
.text$mn:00005CEC
.text$mn:00005CEC ; ---------------------------------------------------------------------------
.text$mn:00005CED                 align 10h
.text$mn:00005CED _text$mn        ends
.text$mn:00005CED
.text$mn:00005CF0 ; ===========================================================================
.text$mn:00005CF0
.text$mn:00005CF0 ; Segment type: Pure code
.text$mn:00005CF0 ; Segment permissions: Read/Execute
.text$mn:00005CF0 _text$mn        segment para public 'CODE' use32
.text$mn:00005CF0                 assume cs:_text$mn
.text$mn:00005CF0                 ;org 5CF0h
.text$mn:00005CF0 ; COMDAT (pick any)
.text$mn:00005CF0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005CF0
.text$mn:00005CF0 ; =============== S U B R O U T I N E =======================================
.text$mn:00005CF0
.text$mn:00005CF0 ; Attributes: bp-based frame
.text$mn:00005CF0
.text$mn:00005CF0 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::max_size(void)const
.text$mn:00005CF0                 public ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:00005CF0 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:00005CF0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+3Bp
.text$mn:00005CF0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+6Ap ...
.text$mn:00005CF0
.text$mn:00005CF0 var_10          = dword ptr -10h
.text$mn:00005CF0 var_C           = dword ptr -0Ch
.text$mn:00005CF0 var_8           = dword ptr -8
.text$mn:00005CF0 var_1           = byte ptr -1
.text$mn:00005CF0
.text$mn:00005CF0                 push    ebp
.text$mn:00005CF1                 mov     ebp, esp
.text$mn:00005CF3                 sub     esp, 10h
.text$mn:00005CF6                 mov     [ebp+var_10], ecx
.text$mn:00005CF9                 lea     eax, [ebp+var_1]
.text$mn:00005CFC                 push    eax
.text$mn:00005CFD                 mov     ecx, [ebp+var_10]
.text$mn:00005D00                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00005D05                 mov     ecx, eax
.text$mn:00005D07                 call    ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char>>::max_size(void)
.text$mn:00005D0C                 mov     [ebp+var_8], eax
.text$mn:00005D0F                 cmp     [ebp+var_8], 1
.text$mn:00005D13                 ja      short loc_5D1E
.text$mn:00005D15                 mov     [ebp+var_C], 1
.text$mn:00005D1C                 jmp     short loc_5D27
.text$mn:00005D1E ; ---------------------------------------------------------------------------
.text$mn:00005D1E
.text$mn:00005D1E loc_5D1E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+23j
.text$mn:00005D1E                 mov     ecx, [ebp+var_8]
.text$mn:00005D21                 sub     ecx, 1
.text$mn:00005D24                 mov     [ebp+var_C], ecx
.text$mn:00005D27
.text$mn:00005D27 loc_5D27:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+2Cj
.text$mn:00005D27                 mov     eax, [ebp+var_C]
.text$mn:00005D2A                 mov     esp, ebp
.text$mn:00005D2C                 pop     ebp
.text$mn:00005D2D                 retn
.text$mn:00005D2D ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:00005D2D
.text$mn:00005D2D ; ---------------------------------------------------------------------------
.text$mn:00005D2E                 align 10h
.text$mn:00005D2E _text$mn        ends
.text$mn:00005D2E
.text$mn:00005D30 ; ===========================================================================
.text$mn:00005D30
.text$mn:00005D30 ; Segment type: Pure code
.text$mn:00005D30 ; Segment permissions: Read/Execute
.text$mn:00005D30 _text$mn        segment para public 'CODE' use32
.text$mn:00005D30                 assume cs:_text$mn
.text$mn:00005D30                 ;org 5D30h
.text$mn:00005D30 ; COMDAT (pick any)
.text$mn:00005D30                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005D30
.text$mn:00005D30 ; =============== S U B R O U T I N E =======================================
.text$mn:00005D30
.text$mn:00005D30 ; Attributes: bp-based frame
.text$mn:00005D30
.text$mn:00005D30 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::max_size(void)const
.text$mn:00005D30                 public ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:00005D30 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:00005D30                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+3Bp
.text$mn:00005D30                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+6Ap ...
.text$mn:00005D30
.text$mn:00005D30 var_10          = dword ptr -10h
.text$mn:00005D30 var_C           = dword ptr -0Ch
.text$mn:00005D30 var_8           = dword ptr -8
.text$mn:00005D30 var_1           = byte ptr -1
.text$mn:00005D30
.text$mn:00005D30                 push    ebp
.text$mn:00005D31                 mov     ebp, esp
.text$mn:00005D33                 sub     esp, 10h
.text$mn:00005D36                 mov     [ebp+var_10], ecx
.text$mn:00005D39                 lea     eax, [ebp+var_1]
.text$mn:00005D3C                 push    eax
.text$mn:00005D3D                 mov     ecx, [ebp+var_10]
.text$mn:00005D40                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00005D45                 mov     ecx, eax
.text$mn:00005D47                 call    ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)
.text$mn:00005D4C                 mov     [ebp+var_8], eax
.text$mn:00005D4F                 cmp     [ebp+var_8], 1
.text$mn:00005D53                 ja      short loc_5D5E
.text$mn:00005D55                 mov     [ebp+var_C], 1
.text$mn:00005D5C                 jmp     short loc_5D67
.text$mn:00005D5E ; ---------------------------------------------------------------------------
.text$mn:00005D5E
.text$mn:00005D5E loc_5D5E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+23j
.text$mn:00005D5E                 mov     ecx, [ebp+var_8]
.text$mn:00005D61                 sub     ecx, 1
.text$mn:00005D64                 mov     [ebp+var_C], ecx
.text$mn:00005D67
.text$mn:00005D67 loc_5D67:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+2Cj
.text$mn:00005D67                 mov     eax, [ebp+var_C]
.text$mn:00005D6A                 mov     esp, ebp
.text$mn:00005D6C                 pop     ebp
.text$mn:00005D6D                 retn
.text$mn:00005D6D ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:00005D6D
.text$mn:00005D6D ; ---------------------------------------------------------------------------
.text$mn:00005D6E                 align 10h
.text$mn:00005D6E _text$mn        ends
.text$mn:00005D6E
.text$mn:00005D70 ; ===========================================================================
.text$mn:00005D70
.text$mn:00005D70 ; Segment type: Pure code
.text$mn:00005D70 ; Segment permissions: Read/Execute
.text$mn:00005D70 _text$mn        segment para public 'CODE' use32
.text$mn:00005D70                 assume cs:_text$mn
.text$mn:00005D70                 ;org 5D70h
.text$mn:00005D70 ; COMDAT (pick any)
.text$mn:00005D70                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005D70
.text$mn:00005D70 ; =============== S U B R O U T I N E =======================================
.text$mn:00005D70
.text$mn:00005D70 ; Attributes: bp-based frame
.text$mn:00005D70
.text$mn:00005D70 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Generic_error_category::message(int)const
.text$mn:00005D70                 public ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00005D70 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:00005D70                                         ; CODE XREF: std::_Iostream_error_category::message(int)+64p
.text$mn:00005D70                                         ; DATA XREF: .rdata:00006F74o
.text$mn:00005D70
.text$mn:00005D70 var_1C          = dword ptr -1Ch
.text$mn:00005D70 var_18          = dword ptr -18h
.text$mn:00005D70 Str             = dword ptr -14h
.text$mn:00005D70 var_10          = dword ptr -10h
.text$mn:00005D70 var_C           = dword ptr -0Ch
.text$mn:00005D70 var_4           = dword ptr -4
.text$mn:00005D70 arg_0           = dword ptr  8
.text$mn:00005D70 arg_4           = dword ptr  0Ch
.text$mn:00005D70
.text$mn:00005D70                 push    ebp
.text$mn:00005D71                 mov     ebp, esp
.text$mn:00005D73                 push    0FFFFFFFFh
.text$mn:00005D75                 push    offset __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00005D7A                 mov     eax, large fs:0
.text$mn:00005D80                 push    eax
.text$mn:00005D81                 sub     esp, 10h
.text$mn:00005D84                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005D89                 xor     eax, ebp
.text$mn:00005D8B                 push    eax
.text$mn:00005D8C                 lea     eax, [ebp+var_C]
.text$mn:00005D8F                 mov     large fs:0, eax
.text$mn:00005D95                 mov     [ebp+var_1C], ecx
.text$mn:00005D98                 mov     [ebp+var_18], 0
.text$mn:00005D9F                 mov     eax, [ebp+arg_4]
.text$mn:00005DA2                 push    eax             ; int
.text$mn:00005DA3                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:00005DA8                 add     esp, 4
.text$mn:00005DAB                 mov     [ebp+var_10], eax
.text$mn:00005DAE                 cmp     [ebp+var_10], 0
.text$mn:00005DB2                 jz      short loc_5DBC
.text$mn:00005DB4                 mov     ecx, [ebp+var_10]
.text$mn:00005DB7                 mov     [ebp+Str], ecx
.text$mn:00005DBA                 jmp     short loc_5DC3
.text$mn:00005DBC ; ---------------------------------------------------------------------------
.text$mn:00005DBC
.text$mn:00005DBC loc_5DBC:                               ; CODE XREF: std::_Generic_error_category::message(int)+42j
.text$mn:00005DBC                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:00005DC3
.text$mn:00005DC3 loc_5DC3:                               ; CODE XREF: std::_Generic_error_category::message(int)+4Aj
.text$mn:00005DC3                 mov     edx, [ebp+Str]
.text$mn:00005DC6                 push    edx             ; Str
.text$mn:00005DC7                 mov     ecx, [ebp+arg_0]
.text$mn:00005DCA                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00005DCF                 mov     [ebp+var_4], 0
.text$mn:00005DD6                 mov     eax, [ebp+var_18]
.text$mn:00005DD9                 or      eax, 1
.text$mn:00005DDC                 mov     [ebp+var_18], eax
.text$mn:00005DDF                 mov     eax, [ebp+arg_0]
.text$mn:00005DE2                 mov     ecx, [ebp+var_C]
.text$mn:00005DE5                 mov     large fs:0, ecx
.text$mn:00005DEC                 pop     ecx
.text$mn:00005DED                 mov     esp, ebp
.text$mn:00005DEF                 pop     ebp
.text$mn:00005DF0                 retn    8
.text$mn:00005DF0 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:00005DF0
.text$mn:00005DF0 ; ---------------------------------------------------------------------------
.text$mn:00005DF3                 align 4
.text$mn:00005DF3 _text$mn        ends
.text$mn:00005DF3
.text$x:00005DF4 ; ===========================================================================
.text$x:00005DF4
.text$x:00005DF4 ; Segment type: Pure code
.text$x:00005DF4 ; Segment permissions: Read/Execute
.text$x:00005DF4 _text$x         segment para public 'CODE' use32
.text$x:00005DF4                 assume cs:_text$x
.text$x:00005DF4                 ;org 5DF4h
.text$x:00005DF4 ; COMDAT (pick associative to section at 5D70)
.text$x:00005DF4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:00005DF4
.text$x:00005DF4 ; =============== S U B R O U T I N E =======================================
.text$x:00005DF4
.text$x:00005DF4
.text$x:00005DF4 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:00005DF4                                         ; DATA XREF: .xdata$x:000069D0o
.text$x:00005DF4                 mov     eax, [ebp-18h]
.text$x:00005DF7                 and     eax, 1
.text$x:00005DFA                 jz      $LN6
.text$x:00005E00                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:00005E04                 mov     ecx, [ebp+8]
.text$x:00005E07                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00005E0C ; ---------------------------------------------------------------------------
.text$x:00005E0C
.text$x:00005E0C $LN6:                                   ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:00005E0C                 retn
.text$x:00005E0C __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:00005E0C
.text$x:00005E0D
.text$x:00005E0D ; =============== S U B R O U T I N E =======================================
.text$x:00005E0D
.text$x:00005E0D
.text$x:00005E0D __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:00005E0D                                         ; DATA XREF: std::_Generic_error_category::message(int)+5o
.text$x:00005E0D
.text$x:00005E0D arg_4           = dword ptr  8
.text$x:00005E0D
.text$x:00005E0D                 mov     edx, [esp+arg_4]
.text$x:00005E11                 lea     eax, [edx+0Ch]
.text$x:00005E14                 mov     ecx, [edx-14h]
.text$x:00005E17                 xor     ecx, eax
.text$x:00005E19                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005E1E                 mov     eax, offset __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:00005E23                 jmp     ___CxxFrameHandler3
.text$x:00005E23 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:00005E23
.text$x:00005E23 _text$x         ends
.text$x:00005E23
.text$mn:00005E28 ; ===========================================================================
.text$mn:00005E28
.text$mn:00005E28 ; Segment type: Pure code
.text$mn:00005E28 ; Segment permissions: Read/Execute
.text$mn:00005E28 _text$mn        segment para public 'CODE' use32
.text$mn:00005E28                 assume cs:_text$mn
.text$mn:00005E28                 ;org 5E28h
.text$mn:00005E28 ; COMDAT (pick any)
.text$mn:00005E28                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005E28
.text$mn:00005E28 ; =============== S U B R O U T I N E =======================================
.text$mn:00005E28
.text$mn:00005E28 ; Attributes: bp-based frame
.text$mn:00005E28
.text$mn:00005E28 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Iostream_error_category::message(int)const
.text$mn:00005E28                 public ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00005E28 ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:00005E28                                         ; DATA XREF: .rdata:00006FA8o
.text$mn:00005E28
.text$mn:00005E28 var_14          = dword ptr -14h
.text$mn:00005E28 var_10          = dword ptr -10h
.text$mn:00005E28 var_C           = dword ptr -0Ch
.text$mn:00005E28 var_4           = dword ptr -4
.text$mn:00005E28 arg_0           = dword ptr  8
.text$mn:00005E28 arg_4           = dword ptr  0Ch
.text$mn:00005E28
.text$mn:00005E28                 push    ebp
.text$mn:00005E29                 mov     ebp, esp
.text$mn:00005E2B                 push    0FFFFFFFFh
.text$mn:00005E2D                 push    offset __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00005E32                 mov     eax, large fs:0
.text$mn:00005E38                 push    eax
.text$mn:00005E39                 sub     esp, 8
.text$mn:00005E3C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005E41                 xor     eax, ebp
.text$mn:00005E43                 push    eax
.text$mn:00005E44                 lea     eax, [ebp+var_C]
.text$mn:00005E47                 mov     large fs:0, eax
.text$mn:00005E4D                 mov     [ebp+var_14], ecx
.text$mn:00005E50                 mov     [ebp+var_10], 0
.text$mn:00005E57                 cmp     [ebp+arg_4], 1
.text$mn:00005E5B                 jnz     short loc_5E81
.text$mn:00005E5D                 push    offset ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ ; "iostream stream error"
.text$mn:00005E62                 mov     ecx, [ebp+arg_0]
.text$mn:00005E65                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00005E6A                 mov     [ebp+var_4], 0
.text$mn:00005E71                 mov     eax, [ebp+var_10]
.text$mn:00005E74                 or      eax, 1
.text$mn:00005E77                 mov     [ebp+var_10], eax
.text$mn:00005E7A                 mov     eax, [ebp+arg_0]
.text$mn:00005E7D                 jmp     short loc_5EA4
.text$mn:00005E7F ; ---------------------------------------------------------------------------
.text$mn:00005E7F                 jmp     short loc_5EA4
.text$mn:00005E81 ; ---------------------------------------------------------------------------
.text$mn:00005E81
.text$mn:00005E81 loc_5E81:                               ; CODE XREF: std::_Iostream_error_category::message(int)+33j
.text$mn:00005E81                 mov     ecx, [ebp+arg_4]
.text$mn:00005E84                 push    ecx
.text$mn:00005E85                 mov     edx, [ebp+arg_0]
.text$mn:00005E88                 push    edx
.text$mn:00005E89                 mov     ecx, [ebp+var_14]
.text$mn:00005E8C                 call    ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.text$mn:00005E91                 mov     [ebp+var_4], 0
.text$mn:00005E98                 mov     eax, [ebp+var_10]
.text$mn:00005E9B                 or      eax, 1
.text$mn:00005E9E                 mov     [ebp+var_10], eax
.text$mn:00005EA1                 mov     eax, [ebp+arg_0]
.text$mn:00005EA4
.text$mn:00005EA4 loc_5EA4:                               ; CODE XREF: std::_Iostream_error_category::message(int)+55j
.text$mn:00005EA4                                         ; std::_Iostream_error_category::message(int)+57j
.text$mn:00005EA4                 mov     ecx, [ebp+var_C]
.text$mn:00005EA7                 mov     large fs:0, ecx
.text$mn:00005EAE                 pop     ecx
.text$mn:00005EAF                 mov     esp, ebp
.text$mn:00005EB1                 pop     ebp
.text$mn:00005EB2                 retn    8
.text$mn:00005EB2 ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:00005EB2
.text$mn:00005EB2 ; ---------------------------------------------------------------------------
.text$mn:00005EB5                 align 4
.text$mn:00005EB5 _text$mn        ends
.text$mn:00005EB5
.text$x:00005EB8 ; ===========================================================================
.text$x:00005EB8
.text$x:00005EB8 ; Segment type: Pure code
.text$x:00005EB8 ; Segment permissions: Read/Execute
.text$x:00005EB8 _text$x         segment para public 'CODE' use32
.text$x:00005EB8                 assume cs:_text$x
.text$x:00005EB8                 ;org 5EB8h
.text$x:00005EB8 ; COMDAT (pick associative to section at 5E28)
.text$x:00005EB8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:00005EB8
.text$x:00005EB8 ; =============== S U B R O U T I N E =======================================
.text$x:00005EB8
.text$x:00005EB8
.text$x:00005EB8 __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:00005EB8                                         ; DATA XREF: .xdata$x:00006A54o
.text$x:00005EB8                 mov     eax, [ebp-10h]
.text$x:00005EBB                 and     eax, 1
.text$x:00005EBE                 jz      $LN6_0
.text$x:00005EC4                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:00005EC8                 mov     ecx, [ebp+8]
.text$x:00005ECB                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00005ED0 ; ---------------------------------------------------------------------------
.text$x:00005ED0
.text$x:00005ED0 $LN6_0:                                 ; CODE XREF: __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:00005ED0                 retn
.text$x:00005ED0 __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:00005ED0
.text$x:00005ED1
.text$x:00005ED1 ; =============== S U B R O U T I N E =======================================
.text$x:00005ED1
.text$x:00005ED1
.text$x:00005ED1 __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:00005ED1                                         ; DATA XREF: std::_Iostream_error_category::message(int)+5o
.text$x:00005ED1
.text$x:00005ED1 arg_4           = dword ptr  8
.text$x:00005ED1
.text$x:00005ED1                 mov     edx, [esp+arg_4]
.text$x:00005ED5                 lea     eax, [edx+0Ch]
.text$x:00005ED8                 mov     ecx, [edx-0Ch]
.text$x:00005EDB                 xor     ecx, eax
.text$x:00005EDD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005EE2                 mov     eax, offset __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:00005EE7                 jmp     ___CxxFrameHandler3
.text$x:00005EE7 __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:00005EE7
.text$x:00005EE7 _text$x         ends
.text$x:00005EE7
.text$mn:00005EEC ; ===========================================================================
.text$mn:00005EEC
.text$mn:00005EEC ; Segment type: Pure code
.text$mn:00005EEC ; Segment permissions: Read/Execute
.text$mn:00005EEC _text$mn        segment para public 'CODE' use32
.text$mn:00005EEC                 assume cs:_text$mn
.text$mn:00005EEC                 ;org 5EECh
.text$mn:00005EEC ; COMDAT (pick any)
.text$mn:00005EEC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005EEC
.text$mn:00005EEC ; =============== S U B R O U T I N E =======================================
.text$mn:00005EEC
.text$mn:00005EEC ; Attributes: bp-based frame
.text$mn:00005EEC
.text$mn:00005EEC ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_System_error_category::message(int)const
.text$mn:00005EEC                 public ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00005EEC ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:00005EEC                                         ; DATA XREF: .rdata:00006FE8o
.text$mn:00005EEC
.text$mn:00005EEC var_1C          = dword ptr -1Ch
.text$mn:00005EEC var_18          = dword ptr -18h
.text$mn:00005EEC Str             = dword ptr -14h
.text$mn:00005EEC var_10          = dword ptr -10h
.text$mn:00005EEC var_C           = dword ptr -0Ch
.text$mn:00005EEC var_4           = dword ptr -4
.text$mn:00005EEC arg_0           = dword ptr  8
.text$mn:00005EEC arg_4           = dword ptr  0Ch
.text$mn:00005EEC
.text$mn:00005EEC                 push    ebp
.text$mn:00005EED                 mov     ebp, esp
.text$mn:00005EEF                 push    0FFFFFFFFh
.text$mn:00005EF1                 push    offset __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00005EF6                 mov     eax, large fs:0
.text$mn:00005EFC                 push    eax
.text$mn:00005EFD                 sub     esp, 10h
.text$mn:00005F00                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005F05                 xor     eax, ebp
.text$mn:00005F07                 push    eax
.text$mn:00005F08                 lea     eax, [ebp+var_C]
.text$mn:00005F0B                 mov     large fs:0, eax
.text$mn:00005F11                 mov     [ebp+var_1C], ecx
.text$mn:00005F14                 mov     [ebp+var_18], 0
.text$mn:00005F1B                 mov     eax, [ebp+arg_4]
.text$mn:00005F1E                 push    eax             ; int
.text$mn:00005F1F                 call    ?_Winerror_map@std@@YAPBDH@Z ; std::_Winerror_map(int)
.text$mn:00005F24                 add     esp, 4
.text$mn:00005F27                 mov     [ebp+var_10], eax
.text$mn:00005F2A                 cmp     [ebp+var_10], 0
.text$mn:00005F2E                 jz      short loc_5F38
.text$mn:00005F30                 mov     ecx, [ebp+var_10]
.text$mn:00005F33                 mov     [ebp+Str], ecx
.text$mn:00005F36                 jmp     short loc_5F3F
.text$mn:00005F38 ; ---------------------------------------------------------------------------
.text$mn:00005F38
.text$mn:00005F38 loc_5F38:                               ; CODE XREF: std::_System_error_category::message(int)+42j
.text$mn:00005F38                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:00005F3F
.text$mn:00005F3F loc_5F3F:                               ; CODE XREF: std::_System_error_category::message(int)+4Aj
.text$mn:00005F3F                 mov     edx, [ebp+Str]
.text$mn:00005F42                 push    edx             ; Str
.text$mn:00005F43                 mov     ecx, [ebp+arg_0]
.text$mn:00005F46                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00005F4B                 mov     [ebp+var_4], 0
.text$mn:00005F52                 mov     eax, [ebp+var_18]
.text$mn:00005F55                 or      eax, 1
.text$mn:00005F58                 mov     [ebp+var_18], eax
.text$mn:00005F5B                 mov     eax, [ebp+arg_0]
.text$mn:00005F5E                 mov     ecx, [ebp+var_C]
.text$mn:00005F61                 mov     large fs:0, ecx
.text$mn:00005F68                 pop     ecx
.text$mn:00005F69                 mov     esp, ebp
.text$mn:00005F6B                 pop     ebp
.text$mn:00005F6C                 retn    8
.text$mn:00005F6C ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:00005F6C
.text$mn:00005F6C ; ---------------------------------------------------------------------------
.text$mn:00005F6F                 align 10h
.text$mn:00005F6F _text$mn        ends
.text$mn:00005F6F
.text$x:00005F70 ; ===========================================================================
.text$x:00005F70
.text$x:00005F70 ; Segment type: Pure code
.text$x:00005F70 ; Segment permissions: Read/Execute
.text$x:00005F70 _text$x         segment para public 'CODE' use32
.text$x:00005F70                 assume cs:_text$x
.text$x:00005F70                 ;org 5F70h
.text$x:00005F70 ; COMDAT (pick associative to section at 5EEC)
.text$x:00005F70                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:00005F70
.text$x:00005F70 ; =============== S U B R O U T I N E =======================================
.text$x:00005F70
.text$x:00005F70
.text$x:00005F70 __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:00005F70                                         ; DATA XREF: .xdata$x:00006AD8o
.text$x:00005F70                 mov     eax, [ebp-18h]
.text$x:00005F73                 and     eax, 1
.text$x:00005F76                 jz      $LN6_1
.text$x:00005F7C                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:00005F80                 mov     ecx, [ebp+8]
.text$x:00005F83                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00005F88 ; ---------------------------------------------------------------------------
.text$x:00005F88
.text$x:00005F88 $LN6_1:                                 ; CODE XREF: __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:00005F88                 retn
.text$x:00005F88 __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:00005F88
.text$x:00005F89
.text$x:00005F89 ; =============== S U B R O U T I N E =======================================
.text$x:00005F89
.text$x:00005F89
.text$x:00005F89 __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:00005F89                                         ; DATA XREF: std::_System_error_category::message(int)+5o
.text$x:00005F89
.text$x:00005F89 arg_4           = dword ptr  8
.text$x:00005F89
.text$x:00005F89                 mov     edx, [esp+arg_4]
.text$x:00005F8D                 lea     eax, [edx+0Ch]
.text$x:00005F90                 mov     ecx, [edx-14h]
.text$x:00005F93                 xor     ecx, eax
.text$x:00005F95                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005F9A                 mov     eax, offset __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:00005F9F                 jmp     ___CxxFrameHandler3
.text$x:00005F9F __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:00005F9F
.text$x:00005F9F _text$x         ends
.text$x:00005F9F
.text$mn:00005FA4 ; ===========================================================================
.text$mn:00005FA4
.text$mn:00005FA4 ; Segment type: Pure code
.text$mn:00005FA4 ; Segment permissions: Read/Execute
.text$mn:00005FA4 _text$mn        segment para public 'CODE' use32
.text$mn:00005FA4                 assume cs:_text$mn
.text$mn:00005FA4                 ;org 5FA4h
.text$mn:00005FA4 ; COMDAT (pick any)
.text$mn:00005FA4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005FA4
.text$mn:00005FA4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005FA4
.text$mn:00005FA4 ; Attributes: bp-based frame
.text$mn:00005FA4
.text$mn:00005FA4 ; int __cdecl std::char_traits<char>::move(void *Dst, void *Src, size_t Size)
.text$mn:00005FA4                 public ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:00005FA4 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
.text$mn:00005FA4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+6Ap
.text$mn:00005FA4
.text$mn:00005FA4 var_4           = dword ptr -4
.text$mn:00005FA4 Dst             = dword ptr  8
.text$mn:00005FA4 Src             = dword ptr  0Ch
.text$mn:00005FA4 Size            = dword ptr  10h
.text$mn:00005FA4
.text$mn:00005FA4                 push    ebp
.text$mn:00005FA5                 mov     ebp, esp
.text$mn:00005FA7                 push    ecx
.text$mn:00005FA8                 cmp     [ebp+Size], 0
.text$mn:00005FAC                 jnz     short loc_5FB6
.text$mn:00005FAE                 mov     eax, [ebp+Dst]
.text$mn:00005FB1                 mov     [ebp+var_4], eax
.text$mn:00005FB4                 jmp     short loc_5FCD
.text$mn:00005FB6 ; ---------------------------------------------------------------------------
.text$mn:00005FB6
.text$mn:00005FB6 loc_5FB6:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+8j
.text$mn:00005FB6                 mov     ecx, [ebp+Size]
.text$mn:00005FB9                 push    ecx             ; Size
.text$mn:00005FBA                 mov     edx, [ebp+Src]
.text$mn:00005FBD                 push    edx             ; Src
.text$mn:00005FBE                 mov     eax, [ebp+Dst]
.text$mn:00005FC1                 push    eax             ; Dst
.text$mn:00005FC2                 call    _memmove
.text$mn:00005FC7                 add     esp, 0Ch
.text$mn:00005FCA                 mov     [ebp+var_4], eax
.text$mn:00005FCD
.text$mn:00005FCD loc_5FCD:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+10j
.text$mn:00005FCD                 mov     eax, [ebp+var_4]
.text$mn:00005FD0                 mov     esp, ebp
.text$mn:00005FD2                 pop     ebp
.text$mn:00005FD3                 retn
.text$mn:00005FD3 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:00005FD3
.text$mn:00005FD3 _text$mn        ends
.text$mn:00005FD3
.text$mn:00005FD4 ; ===========================================================================
.text$mn:00005FD4
.text$mn:00005FD4 ; Segment type: Pure code
.text$mn:00005FD4 ; Segment permissions: Read/Execute
.text$mn:00005FD4 _text$mn        segment para public 'CODE' use32
.text$mn:00005FD4                 assume cs:_text$mn
.text$mn:00005FD4                 ;org 5FD4h
.text$mn:00005FD4 ; COMDAT (pick any)
.text$mn:00005FD4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00005FD4
.text$mn:00005FD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005FD4
.text$mn:00005FD4 ; Attributes: bp-based frame
.text$mn:00005FD4
.text$mn:00005FD4 ; int __cdecl std::char_traits<wchar_t>::move(void *Dst, void *Src, int)
.text$mn:00005FD4                 public ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:00005FD4 ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:00005FD4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+70p
.text$mn:00005FD4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+EAp ...
.text$mn:00005FD4
.text$mn:00005FD4 var_4           = dword ptr -4
.text$mn:00005FD4 Dst             = dword ptr  8
.text$mn:00005FD4 Src             = dword ptr  0Ch
.text$mn:00005FD4 arg_8           = dword ptr  10h
.text$mn:00005FD4
.text$mn:00005FD4                 push    ebp
.text$mn:00005FD5                 mov     ebp, esp
.text$mn:00005FD7                 push    ecx
.text$mn:00005FD8                 cmp     [ebp+arg_8], 0
.text$mn:00005FDC                 jnz     short loc_5FE6
.text$mn:00005FDE                 mov     eax, [ebp+Dst]
.text$mn:00005FE1                 mov     [ebp+var_4], eax
.text$mn:00005FE4                 jmp     short loc_5FFD
.text$mn:00005FE6 ; ---------------------------------------------------------------------------
.text$mn:00005FE6
.text$mn:00005FE6 loc_5FE6:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+8j
.text$mn:00005FE6                 mov     ecx, [ebp+arg_8]
.text$mn:00005FE9                 push    ecx             ; int
.text$mn:00005FEA                 mov     edx, [ebp+Src]
.text$mn:00005FED                 push    edx             ; Src
.text$mn:00005FEE                 mov     eax, [ebp+Dst]
.text$mn:00005FF1                 push    eax             ; Dst
.text$mn:00005FF2                 call    _wmemmove
.text$mn:00005FF7                 add     esp, 0Ch
.text$mn:00005FFA                 mov     [ebp+var_4], eax
.text$mn:00005FFD
.text$mn:00005FFD loc_5FFD:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+10j
.text$mn:00005FFD                 mov     eax, [ebp+var_4]
.text$mn:00006000                 mov     esp, ebp
.text$mn:00006002                 pop     ebp
.text$mn:00006003                 retn
.text$mn:00006003 ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:00006003
.text$mn:00006003 _text$mn        ends
.text$mn:00006003
.text$mn:00006004 ; ===========================================================================
.text$mn:00006004
.text$mn:00006004 ; Segment type: Pure code
.text$mn:00006004 ; Segment permissions: Read/Execute
.text$mn:00006004 _text$mn        segment para public 'CODE' use32
.text$mn:00006004                 assume cs:_text$mn
.text$mn:00006004                 ;org 6004h
.text$mn:00006004 ; COMDAT (pick any)
.text$mn:00006004                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00006004
.text$mn:00006004 ; =============== S U B R O U T I N E =======================================
.text$mn:00006004
.text$mn:00006004 ; Attributes: bp-based frame
.text$mn:00006004
.text$mn:00006004 ; const char *__thiscall std::_Generic_error_category::name(std::_Generic_error_category *__hidden this)
.text$mn:00006004                 public ?name@_Generic_error_category@std@@UBEPBDXZ
.text$mn:00006004 ?name@_Generic_error_category@std@@UBEPBDXZ proc near
.text$mn:00006004                                         ; DATA XREF: .rdata:00006F70o
.text$mn:00006004
.text$mn:00006004 var_4           = dword ptr -4
.text$mn:00006004
.text$mn:00006004                 push    ebp
.text$mn:00006005                 mov     ebp, esp
.text$mn:00006007                 push    ecx
.text$mn:00006008                 mov     [ebp+var_4], ecx
.text$mn:0000600B                 mov     eax, offset ??_C@_07DCLBNMLN@generic?$AA@ ; "generic"
.text$mn:00006010                 mov     esp, ebp
.text$mn:00006012                 pop     ebp
.text$mn:00006013                 retn
.text$mn:00006013 ?name@_Generic_error_category@std@@UBEPBDXZ endp
.text$mn:00006013
.text$mn:00006013 _text$mn        ends
.text$mn:00006013
.text$mn:00006014 ; ===========================================================================
.text$mn:00006014
.text$mn:00006014 ; Segment type: Pure code
.text$mn:00006014 ; Segment permissions: Read/Execute
.text$mn:00006014 _text$mn        segment para public 'CODE' use32
.text$mn:00006014                 assume cs:_text$mn
.text$mn:00006014                 ;org 6014h
.text$mn:00006014 ; COMDAT (pick any)
.text$mn:00006014                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00006014
.text$mn:00006014 ; =============== S U B R O U T I N E =======================================
.text$mn:00006014
.text$mn:00006014 ; Attributes: bp-based frame
.text$mn:00006014
.text$mn:00006014 ; const char *__thiscall std::_Iostream_error_category::name(std::_Iostream_error_category *__hidden this)
.text$mn:00006014                 public ?name@_Iostream_error_category@std@@UBEPBDXZ
.text$mn:00006014 ?name@_Iostream_error_category@std@@UBEPBDXZ proc near
.text$mn:00006014                                         ; DATA XREF: .rdata:00006FA4o
.text$mn:00006014
.text$mn:00006014 var_4           = dword ptr -4
.text$mn:00006014
.text$mn:00006014                 push    ebp
.text$mn:00006015                 mov     ebp, esp
.text$mn:00006017                 push    ecx
.text$mn:00006018                 mov     [ebp+var_4], ecx
.text$mn:0000601B                 mov     eax, offset ??_C@_08LLGCOLLL@iostream?$AA@ ; "iostream"
.text$mn:00006020                 mov     esp, ebp
.text$mn:00006022                 pop     ebp
.text$mn:00006023                 retn
.text$mn:00006023 ?name@_Iostream_error_category@std@@UBEPBDXZ endp
.text$mn:00006023
.text$mn:00006023 _text$mn        ends
.text$mn:00006023
.text$mn:00006024 ; ===========================================================================
.text$mn:00006024
.text$mn:00006024 ; Segment type: Pure code
.text$mn:00006024 ; Segment permissions: Read/Execute
.text$mn:00006024 _text$mn        segment para public 'CODE' use32
.text$mn:00006024                 assume cs:_text$mn
.text$mn:00006024                 ;org 6024h
.text$mn:00006024 ; COMDAT (pick any)
.text$mn:00006024                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00006024
.text$mn:00006024 ; =============== S U B R O U T I N E =======================================
.text$mn:00006024
.text$mn:00006024 ; Attributes: bp-based frame
.text$mn:00006024
.text$mn:00006024 ; const char *__thiscall std::_System_error_category::name(std::_System_error_category *__hidden this)
.text$mn:00006024                 public ?name@_System_error_category@std@@UBEPBDXZ
.text$mn:00006024 ?name@_System_error_category@std@@UBEPBDXZ proc near
.text$mn:00006024                                         ; DATA XREF: .rdata:00006FE4o
.text$mn:00006024
.text$mn:00006024 var_4           = dword ptr -4
.text$mn:00006024
.text$mn:00006024                 push    ebp
.text$mn:00006025                 mov     ebp, esp
.text$mn:00006027                 push    ecx
.text$mn:00006028                 mov     [ebp+var_4], ecx
.text$mn:0000602B                 mov     eax, offset ??_C@_06FHFOAHML@system?$AA@ ; "system"
.text$mn:00006030                 mov     esp, ebp
.text$mn:00006032                 pop     ebp
.text$mn:00006033                 retn
.text$mn:00006033 ?name@_System_error_category@std@@UBEPBDXZ endp
.text$mn:00006033
.text$mn:00006033 _text$mn        ends
.text$mn:00006033
.text$mn:00006034 ; ===========================================================================
.text$mn:00006034
.text$mn:00006034 ; Segment type: Pure code
.text$mn:00006034 ; Segment permissions: Read/Execute
.text$mn:00006034 _text$mn        segment para public 'CODE' use32
.text$mn:00006034                 assume cs:_text$mn
.text$mn:00006034                 ;org 6034h
.text$mn:00006034 ; COMDAT (pick any)
.text$mn:00006034                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00006034
.text$mn:00006034 ; =============== S U B R O U T I N E =======================================
.text$mn:00006034
.text$mn:00006034 ; Attributes: bp-based frame
.text$mn:00006034
.text$mn:00006034 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::replace(unsigned int, unsigned int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00006034                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@@Z
.text$mn:00006034 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@@Z proc near
.text$mn:00006034                                         ; CODE XREF: replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+5Ap
.text$mn:00006034
.text$mn:00006034 var_4           = dword ptr -4
.text$mn:00006034 arg_0           = dword ptr  8
.text$mn:00006034 arg_4           = dword ptr  0Ch
.text$mn:00006034 arg_8           = dword ptr  10h
.text$mn:00006034
.text$mn:00006034                 push    ebp
.text$mn:00006035                 mov     ebp, esp
.text$mn:00006037                 push    ecx
.text$mn:00006038                 mov     [ebp+var_4], ecx
.text$mn:0000603B                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00006040                 push    eax
.text$mn:00006041                 push    0
.text$mn:00006043                 mov     ecx, [ebp+arg_8]
.text$mn:00006046                 push    ecx
.text$mn:00006047                 mov     edx, [ebp+arg_4]
.text$mn:0000604A                 push    edx
.text$mn:0000604B                 mov     eax, [ebp+arg_0]
.text$mn:0000604E                 push    eax
.text$mn:0000604F                 mov     ecx, [ebp+var_4]
.text$mn:00006052                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00006057                 mov     esp, ebp
.text$mn:00006059                 pop     ebp
.text$mn:0000605A                 retn    0Ch
.text$mn:0000605A ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@@Z endp
.text$mn:0000605A
.text$mn:0000605A ; ---------------------------------------------------------------------------
.text$mn:0000605D                 align 10h
.text$mn:0000605D _text$mn        ends
.text$mn:0000605D
.text$mn:00006060 ; ===========================================================================
.text$mn:00006060
.text$mn:00006060 ; Segment type: Pure code
.text$mn:00006060 ; Segment permissions: Read/Execute
.text$mn:00006060 _text$mn        segment para public 'CODE' use32
.text$mn:00006060                 assume cs:_text$mn
.text$mn:00006060                 ;org 6060h
.text$mn:00006060 ; COMDAT (pick any)
.text$mn:00006060                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00006060
.text$mn:00006060 ; =============== S U B R O U T I N E =======================================
.text$mn:00006060
.text$mn:00006060 ; Attributes: bp-based frame
.text$mn:00006060
.text$mn:00006060 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::replace(unsigned int, unsigned int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:00006060                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z
.text$mn:00006060 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z proc near
.text$mn:00006060                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+1Ep
.text$mn:00006060                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+5Bp
.text$mn:00006060
.text$mn:00006060 var_10          = dword ptr -10h
.text$mn:00006060 var_C           = dword ptr -0Ch
.text$mn:00006060 var_8           = dword ptr -8
.text$mn:00006060 var_4           = dword ptr -4
.text$mn:00006060 arg_0           = dword ptr  8
.text$mn:00006060 arg_4           = dword ptr  0Ch
.text$mn:00006060 arg_8           = dword ptr  10h
.text$mn:00006060 arg_C           = dword ptr  14h
.text$mn:00006060 arg_10          = dword ptr  18h
.text$mn:00006060
.text$mn:00006060                 push    ebp
.text$mn:00006061                 mov     ebp, esp
.text$mn:00006063                 sub     esp, 10h
.text$mn:00006066                 mov     [ebp+var_4], ecx
.text$mn:00006069                 mov     eax, [ebp+var_4]
.text$mn:0000606C                 mov     ecx, [eax+14h]
.text$mn:0000606F                 cmp     ecx, [ebp+arg_0]
.text$mn:00006072                 jb      short loc_6081
.text$mn:00006074                 mov     ecx, [ebp+arg_8]
.text$mn:00006077                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000607C                 cmp     eax, [ebp+arg_C]
.text$mn:0000607F                 jnb     short loc_6089
.text$mn:00006081
.text$mn:00006081 loc_6081:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+12j
.text$mn:00006081                 mov     ecx, [ebp+var_4]
.text$mn:00006084                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00006089
.text$mn:00006089 loc_6089:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+1Fj
.text$mn:00006089                 mov     edx, [ebp+var_4]
.text$mn:0000608C                 mov     eax, [edx+14h]
.text$mn:0000608F                 sub     eax, [ebp+arg_0]
.text$mn:00006092                 cmp     eax, [ebp+arg_4]
.text$mn:00006095                 jnb     short loc_60A3
.text$mn:00006097                 mov     ecx, [ebp+var_4]
.text$mn:0000609A                 mov     edx, [ecx+14h]
.text$mn:0000609D                 sub     edx, [ebp+arg_0]
.text$mn:000060A0                 mov     [ebp+arg_4], edx
.text$mn:000060A3
.text$mn:000060A3 loc_60A3:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+35j
.text$mn:000060A3                 mov     ecx, [ebp+arg_8]
.text$mn:000060A6                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:000060AB                 sub     eax, [ebp+arg_C]
.text$mn:000060AE                 mov     [ebp+var_10], eax
.text$mn:000060B1                 mov     eax, [ebp+var_10]
.text$mn:000060B4                 cmp     eax, [ebp+arg_10]
.text$mn:000060B7                 jnb     short loc_60BF
.text$mn:000060B9                 mov     ecx, [ebp+var_10]
.text$mn:000060BC                 mov     [ebp+arg_10], ecx
.text$mn:000060BF
.text$mn:000060BF loc_60BF:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+57j
.text$mn:000060BF                 mov     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:000060C5                 sub     edx, [ebp+arg_10]
.text$mn:000060C8                 mov     eax, [ebp+var_4]
.text$mn:000060CB                 mov     ecx, [eax+14h]
.text$mn:000060CE                 sub     ecx, [ebp+arg_4]
.text$mn:000060D1                 cmp     edx, ecx
.text$mn:000060D3                 ja      short loc_60DD
.text$mn:000060D5                 mov     ecx, [ebp+var_4]
.text$mn:000060D8                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:000060DD
.text$mn:000060DD loc_60DD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+73j
.text$mn:000060DD                 mov     edx, [ebp+var_4]
.text$mn:000060E0                 mov     eax, [edx+14h]
.text$mn:000060E3                 sub     eax, [ebp+arg_4]
.text$mn:000060E6                 sub     eax, [ebp+arg_0]
.text$mn:000060E9                 mov     [ebp+var_8], eax
.text$mn:000060EC                 mov     ecx, [ebp+var_4]
.text$mn:000060EF                 mov     edx, [ecx+14h]
.text$mn:000060F2                 add     edx, [ebp+arg_10]
.text$mn:000060F5                 sub     edx, [ebp+arg_4]
.text$mn:000060F8                 mov     [ebp+var_C], edx
.text$mn:000060FB                 mov     eax, [ebp+var_4]
.text$mn:000060FE                 mov     ecx, [eax+14h]
.text$mn:00006101                 cmp     ecx, [ebp+var_C]
.text$mn:00006104                 jnb     short loc_6114
.text$mn:00006106                 push    0
.text$mn:00006108                 mov     edx, [ebp+var_C]
.text$mn:0000610B                 push    edx
.text$mn:0000610C                 mov     ecx, [ebp+var_4]
.text$mn:0000610F                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00006114
.text$mn:00006114 loc_6114:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+A4j
.text$mn:00006114                 mov     eax, [ebp+var_4]
.text$mn:00006117                 cmp     eax, [ebp+arg_8]
.text$mn:0000611A                 jz      short loc_6181
.text$mn:0000611C                 mov     ecx, [ebp+var_8]
.text$mn:0000611F                 push    ecx             ; int
.text$mn:00006120                 mov     ecx, [ebp+var_4]
.text$mn:00006123                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006128                 mov     edx, [ebp+arg_0]
.text$mn:0000612B                 lea     eax, [eax+edx*2]
.text$mn:0000612E                 mov     ecx, [ebp+arg_4]
.text$mn:00006131                 lea     edx, [eax+ecx*2]
.text$mn:00006134                 push    edx             ; Src
.text$mn:00006135                 mov     ecx, [ebp+var_4]
.text$mn:00006138                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000613D                 mov     ecx, [ebp+arg_0]
.text$mn:00006140                 lea     edx, [eax+ecx*2]
.text$mn:00006143                 mov     eax, [ebp+arg_10]
.text$mn:00006146                 lea     ecx, [edx+eax*2]
.text$mn:00006149                 push    ecx             ; Dst
.text$mn:0000614A                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000614F                 add     esp, 0Ch
.text$mn:00006152                 mov     edx, [ebp+arg_10]
.text$mn:00006155                 push    edx             ; int
.text$mn:00006156                 mov     ecx, [ebp+arg_8]
.text$mn:00006159                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000615E                 mov     ecx, [ebp+arg_C]
.text$mn:00006161                 lea     edx, [eax+ecx*2]
.text$mn:00006164                 push    edx             ; Src
.text$mn:00006165                 mov     ecx, [ebp+var_4]
.text$mn:00006168                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000616D                 mov     ecx, [ebp+arg_0]
.text$mn:00006170                 lea     edx, [eax+ecx*2]
.text$mn:00006173                 push    edx             ; Dst
.text$mn:00006174                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00006179                 add     esp, 0Ch
.text$mn:0000617C                 jmp     loc_636A
.text$mn:00006181 ; ---------------------------------------------------------------------------
.text$mn:00006181
.text$mn:00006181 loc_6181:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+BAj
.text$mn:00006181                 mov     eax, [ebp+arg_10]
.text$mn:00006184                 cmp     eax, [ebp+arg_4]
.text$mn:00006187                 ja      short loc_61EE
.text$mn:00006189                 mov     ecx, [ebp+arg_10]
.text$mn:0000618C                 push    ecx             ; int
.text$mn:0000618D                 mov     ecx, [ebp+var_4]
.text$mn:00006190                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006195                 mov     edx, [ebp+arg_C]
.text$mn:00006198                 lea     eax, [eax+edx*2]
.text$mn:0000619B                 push    eax             ; Src
.text$mn:0000619C                 mov     ecx, [ebp+var_4]
.text$mn:0000619F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000061A4                 mov     ecx, [ebp+arg_0]
.text$mn:000061A7                 lea     edx, [eax+ecx*2]
.text$mn:000061AA                 push    edx             ; Dst
.text$mn:000061AB                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:000061B0                 add     esp, 0Ch
.text$mn:000061B3                 mov     eax, [ebp+var_8]
.text$mn:000061B6                 push    eax             ; int
.text$mn:000061B7                 mov     ecx, [ebp+var_4]
.text$mn:000061BA                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000061BF                 mov     ecx, [ebp+arg_0]
.text$mn:000061C2                 lea     edx, [eax+ecx*2]
.text$mn:000061C5                 mov     eax, [ebp+arg_4]
.text$mn:000061C8                 lea     ecx, [edx+eax*2]
.text$mn:000061CB                 push    ecx             ; Src
.text$mn:000061CC                 mov     ecx, [ebp+var_4]
.text$mn:000061CF                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000061D4                 mov     edx, [ebp+arg_0]
.text$mn:000061D7                 lea     eax, [eax+edx*2]
.text$mn:000061DA                 mov     ecx, [ebp+arg_10]
.text$mn:000061DD                 lea     edx, [eax+ecx*2]
.text$mn:000061E0                 push    edx             ; Dst
.text$mn:000061E1                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:000061E6                 add     esp, 0Ch
.text$mn:000061E9                 jmp     loc_636A
.text$mn:000061EE ; ---------------------------------------------------------------------------
.text$mn:000061EE
.text$mn:000061EE loc_61EE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+127j
.text$mn:000061EE                 mov     eax, [ebp+arg_C]
.text$mn:000061F1                 cmp     eax, [ebp+arg_0]
.text$mn:000061F4                 ja      short loc_625B
.text$mn:000061F6                 mov     ecx, [ebp+var_8]
.text$mn:000061F9                 push    ecx             ; int
.text$mn:000061FA                 mov     ecx, [ebp+var_4]
.text$mn:000061FD                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006202                 mov     edx, [ebp+arg_0]
.text$mn:00006205                 lea     eax, [eax+edx*2]
.text$mn:00006208                 mov     ecx, [ebp+arg_4]
.text$mn:0000620B                 lea     edx, [eax+ecx*2]
.text$mn:0000620E                 push    edx             ; Src
.text$mn:0000620F                 mov     ecx, [ebp+var_4]
.text$mn:00006212                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006217                 mov     ecx, [ebp+arg_0]
.text$mn:0000621A                 lea     edx, [eax+ecx*2]
.text$mn:0000621D                 mov     eax, [ebp+arg_10]
.text$mn:00006220                 lea     ecx, [edx+eax*2]
.text$mn:00006223                 push    ecx             ; Dst
.text$mn:00006224                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00006229                 add     esp, 0Ch
.text$mn:0000622C                 mov     edx, [ebp+arg_10]
.text$mn:0000622F                 push    edx             ; int
.text$mn:00006230                 mov     ecx, [ebp+var_4]
.text$mn:00006233                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006238                 mov     ecx, [ebp+arg_C]
.text$mn:0000623B                 lea     edx, [eax+ecx*2]
.text$mn:0000623E                 push    edx             ; Src
.text$mn:0000623F                 mov     ecx, [ebp+var_4]
.text$mn:00006242                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006247                 mov     ecx, [ebp+arg_0]
.text$mn:0000624A                 lea     edx, [eax+ecx*2]
.text$mn:0000624D                 push    edx             ; Dst
.text$mn:0000624E                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00006253                 add     esp, 0Ch
.text$mn:00006256                 jmp     loc_636A
.text$mn:0000625B ; ---------------------------------------------------------------------------
.text$mn:0000625B
.text$mn:0000625B loc_625B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+194j
.text$mn:0000625B                 mov     eax, [ebp+arg_0]
.text$mn:0000625E                 add     eax, [ebp+arg_4]
.text$mn:00006261                 cmp     eax, [ebp+arg_C]
.text$mn:00006264                 ja      short loc_62D1
.text$mn:00006266                 mov     ecx, [ebp+var_8]
.text$mn:00006269                 push    ecx             ; int
.text$mn:0000626A                 mov     ecx, [ebp+var_4]
.text$mn:0000626D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006272                 mov     edx, [ebp+arg_0]
.text$mn:00006275                 lea     eax, [eax+edx*2]
.text$mn:00006278                 mov     ecx, [ebp+arg_4]
.text$mn:0000627B                 lea     edx, [eax+ecx*2]
.text$mn:0000627E                 push    edx             ; Src
.text$mn:0000627F                 mov     ecx, [ebp+var_4]
.text$mn:00006282                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006287                 mov     ecx, [ebp+arg_0]
.text$mn:0000628A                 lea     edx, [eax+ecx*2]
.text$mn:0000628D                 mov     eax, [ebp+arg_10]
.text$mn:00006290                 lea     ecx, [edx+eax*2]
.text$mn:00006293                 push    ecx             ; Dst
.text$mn:00006294                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00006299                 add     esp, 0Ch
.text$mn:0000629C                 mov     edx, [ebp+arg_10]
.text$mn:0000629F                 push    edx             ; int
.text$mn:000062A0                 mov     ecx, [ebp+var_4]
.text$mn:000062A3                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000062A8                 mov     ecx, [ebp+arg_C]
.text$mn:000062AB                 add     ecx, [ebp+arg_10]
.text$mn:000062AE                 sub     ecx, [ebp+arg_4]
.text$mn:000062B1                 lea     edx, [eax+ecx*2]
.text$mn:000062B4                 push    edx             ; Src
.text$mn:000062B5                 mov     ecx, [ebp+var_4]
.text$mn:000062B8                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000062BD                 mov     ecx, [ebp+arg_0]
.text$mn:000062C0                 lea     edx, [eax+ecx*2]
.text$mn:000062C3                 push    edx             ; Dst
.text$mn:000062C4                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:000062C9                 add     esp, 0Ch
.text$mn:000062CC                 jmp     loc_636A
.text$mn:000062D1 ; ---------------------------------------------------------------------------
.text$mn:000062D1
.text$mn:000062D1 loc_62D1:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+204j
.text$mn:000062D1                 mov     eax, [ebp+arg_4]
.text$mn:000062D4                 push    eax             ; int
.text$mn:000062D5                 mov     ecx, [ebp+var_4]
.text$mn:000062D8                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000062DD                 mov     ecx, [ebp+arg_C]
.text$mn:000062E0                 lea     edx, [eax+ecx*2]
.text$mn:000062E3                 push    edx             ; Src
.text$mn:000062E4                 mov     ecx, [ebp+var_4]
.text$mn:000062E7                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000062EC                 mov     ecx, [ebp+arg_0]
.text$mn:000062EF                 lea     edx, [eax+ecx*2]
.text$mn:000062F2                 push    edx             ; Dst
.text$mn:000062F3                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:000062F8                 add     esp, 0Ch
.text$mn:000062FB                 mov     eax, [ebp+var_8]
.text$mn:000062FE                 push    eax             ; int
.text$mn:000062FF                 mov     ecx, [ebp+var_4]
.text$mn:00006302                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006307                 mov     ecx, [ebp+arg_0]
.text$mn:0000630A                 lea     edx, [eax+ecx*2]
.text$mn:0000630D                 mov     eax, [ebp+arg_4]
.text$mn:00006310                 lea     ecx, [edx+eax*2]
.text$mn:00006313                 push    ecx             ; Src
.text$mn:00006314                 mov     ecx, [ebp+var_4]
.text$mn:00006317                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000631C                 mov     edx, [ebp+arg_0]
.text$mn:0000631F                 lea     eax, [eax+edx*2]
.text$mn:00006322                 mov     ecx, [ebp+arg_10]
.text$mn:00006325                 lea     edx, [eax+ecx*2]
.text$mn:00006328                 push    edx             ; Dst
.text$mn:00006329                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000632E                 add     esp, 0Ch
.text$mn:00006331                 mov     eax, [ebp+arg_10]
.text$mn:00006334                 sub     eax, [ebp+arg_4]
.text$mn:00006337                 push    eax             ; int
.text$mn:00006338                 mov     ecx, [ebp+var_4]
.text$mn:0000633B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006340                 mov     ecx, [ebp+arg_C]
.text$mn:00006343                 lea     edx, [eax+ecx*2]
.text$mn:00006346                 mov     eax, [ebp+arg_10]
.text$mn:00006349                 lea     ecx, [edx+eax*2]
.text$mn:0000634C                 push    ecx             ; Src
.text$mn:0000634D                 mov     ecx, [ebp+var_4]
.text$mn:00006350                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006355                 mov     edx, [ebp+arg_0]
.text$mn:00006358                 lea     eax, [eax+edx*2]
.text$mn:0000635B                 mov     ecx, [ebp+arg_4]
.text$mn:0000635E                 lea     edx, [eax+ecx*2]
.text$mn:00006361                 push    edx             ; Dst
.text$mn:00006362                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00006367                 add     esp, 0Ch
.text$mn:0000636A
.text$mn:0000636A loc_636A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+11Cj
.text$mn:0000636A                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+189j ...
.text$mn:0000636A                 mov     eax, [ebp+var_C]
.text$mn:0000636D                 push    eax
.text$mn:0000636E                 mov     ecx, [ebp+var_4]
.text$mn:00006371                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00006376                 mov     eax, [ebp+var_4]
.text$mn:00006379                 mov     esp, ebp
.text$mn:0000637B                 pop     ebp
.text$mn:0000637C                 retn    14h
.text$mn:0000637C ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z endp
.text$mn:0000637C
.text$mn:0000637C ; ---------------------------------------------------------------------------
.text$mn:0000637F                 align 10h
.text$mn:0000637F _text$mn        ends
.text$mn:0000637F
.text$mn:00006380 ; ===========================================================================
.text$mn:00006380
.text$mn:00006380 ; Segment type: Pure code
.text$mn:00006380 ; Segment permissions: Read/Execute
.text$mn:00006380 _text$mn        segment para public 'CODE' use32
.text$mn:00006380                 assume cs:_text$mn
.text$mn:00006380                 ;org 6380h
.text$mn:00006380 ; COMDAT (pick any)
.text$mn:00006380                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00006380
.text$mn:00006380 ; =============== S U B R O U T I N E =======================================
.text$mn:00006380
.text$mn:00006380 ; Attributes: bp-based frame
.text$mn:00006380
.text$mn:00006380 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(int, int, wchar_t *Str)
.text$mn:00006380                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_W@Z
.text$mn:00006380 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_W@Z proc near
.text$mn:00006380                                         ; CODE XREF: Printer::doPrint(bool)+1755p
.text$mn:00006380                                         ; Printer::doPrint(bool)+1832p ...
.text$mn:00006380
.text$mn:00006380 var_4           = dword ptr -4
.text$mn:00006380 arg_0           = dword ptr  8
.text$mn:00006380 arg_4           = dword ptr  0Ch
.text$mn:00006380 Str             = dword ptr  10h
.text$mn:00006380
.text$mn:00006380                 push    ebp
.text$mn:00006381                 mov     ebp, esp
.text$mn:00006383                 push    ecx
.text$mn:00006384                 mov     [ebp+var_4], ecx
.text$mn:00006387                 push    5CBh            ; unsigned int
.text$mn:0000638C                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00006391                 mov     eax, [ebp+Str]
.text$mn:00006394                 push    eax             ; int
.text$mn:00006395                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000639A                 add     esp, 0Ch
.text$mn:0000639D                 mov     ecx, [ebp+Str]
.text$mn:000063A0                 push    ecx             ; Str
.text$mn:000063A1                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:000063A6                 add     esp, 4
.text$mn:000063A9                 push    eax             ; int
.text$mn:000063AA                 mov     edx, [ebp+Str]
.text$mn:000063AD                 push    edx             ; Src
.text$mn:000063AE                 mov     eax, [ebp+arg_4]
.text$mn:000063B1                 push    eax             ; int
.text$mn:000063B2                 mov     ecx, [ebp+arg_0]
.text$mn:000063B5                 push    ecx             ; int
.text$mn:000063B6                 mov     ecx, [ebp+var_4]
.text$mn:000063B9                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)
.text$mn:000063BE                 mov     esp, ebp
.text$mn:000063C0                 pop     ebp
.text$mn:000063C1                 retn    0Ch
.text$mn:000063C1 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_W@Z endp
.text$mn:000063C1
.text$mn:000063C1 _text$mn        ends
.text$mn:000063C1
.text$mn:000063C4 ; ===========================================================================
.text$mn:000063C4
.text$mn:000063C4 ; Segment type: Pure code
.text$mn:000063C4 ; Segment permissions: Read/Execute
.text$mn:000063C4 _text$mn        segment para public 'CODE' use32
.text$mn:000063C4                 assume cs:_text$mn
.text$mn:000063C4                 ;org 63C4h
.text$mn:000063C4 ; COMDAT (pick any)
.text$mn:000063C4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000063C4
.text$mn:000063C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000063C4
.text$mn:000063C4 ; Attributes: bp-based frame
.text$mn:000063C4
.text$mn:000063C4 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(int, int, void *Src, int)
.text$mn:000063C4                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z
.text$mn:000063C4 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z proc near
.text$mn:000063C4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *)+39p
.text$mn:000063C4
.text$mn:000063C4 var_C           = dword ptr -0Ch
.text$mn:000063C4 var_8           = dword ptr -8
.text$mn:000063C4 var_4           = dword ptr -4
.text$mn:000063C4 arg_0           = dword ptr  8
.text$mn:000063C4 arg_4           = dword ptr  0Ch
.text$mn:000063C4 Src             = dword ptr  10h
.text$mn:000063C4 arg_C           = dword ptr  14h
.text$mn:000063C4
.text$mn:000063C4                 push    ebp
.text$mn:000063C5                 mov     ebp, esp
.text$mn:000063C7                 sub     esp, 0Ch
.text$mn:000063CA                 mov     [ebp+var_4], ecx
.text$mn:000063CD                 cmp     [ebp+arg_C], 0
.text$mn:000063D1                 jz      short loc_63E9
.text$mn:000063D3                 push    5A9h            ; unsigned int
.text$mn:000063D8                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000063DD                 mov     eax, [ebp+Src]
.text$mn:000063E0                 push    eax             ; int
.text$mn:000063E1                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:000063E6                 add     esp, 0Ch
.text$mn:000063E9
.text$mn:000063E9 loc_63E9:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+Dj
.text$mn:000063E9                 mov     ecx, [ebp+Src]
.text$mn:000063EC                 push    ecx
.text$mn:000063ED                 mov     ecx, [ebp+var_4]
.text$mn:000063F0                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:000063F5                 movzx   edx, al
.text$mn:000063F8                 test    edx, edx
.text$mn:000063FA                 jz      short loc_6429
.text$mn:000063FC                 mov     eax, [ebp+arg_C]
.text$mn:000063FF                 push    eax
.text$mn:00006400                 mov     ecx, [ebp+var_4]
.text$mn:00006403                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006408                 mov     ecx, [ebp+Src]
.text$mn:0000640B                 sub     ecx, eax
.text$mn:0000640D                 sar     ecx, 1
.text$mn:0000640F                 push    ecx
.text$mn:00006410                 mov     edx, [ebp+var_4]
.text$mn:00006413                 push    edx
.text$mn:00006414                 mov     eax, [ebp+arg_4]
.text$mn:00006417                 push    eax
.text$mn:00006418                 mov     ecx, [ebp+arg_0]
.text$mn:0000641B                 push    ecx
.text$mn:0000641C                 mov     ecx, [ebp+var_4]
.text$mn:0000641F                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00006424                 jmp     loc_6561
.text$mn:00006429 ; ---------------------------------------------------------------------------
.text$mn:00006429
.text$mn:00006429 loc_6429:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+36j
.text$mn:00006429                 mov     edx, [ebp+var_4]
.text$mn:0000642C                 mov     eax, [edx+14h]
.text$mn:0000642F                 cmp     eax, [ebp+arg_0]
.text$mn:00006432                 jnb     short loc_643C
.text$mn:00006434                 mov     ecx, [ebp+var_4]
.text$mn:00006437                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000643C
.text$mn:0000643C loc_643C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+6Ej
.text$mn:0000643C                 mov     ecx, [ebp+var_4]
.text$mn:0000643F                 mov     edx, [ecx+14h]
.text$mn:00006442                 sub     edx, [ebp+arg_0]
.text$mn:00006445                 cmp     edx, [ebp+arg_4]
.text$mn:00006448                 jnb     short loc_6456
.text$mn:0000644A                 mov     eax, [ebp+var_4]
.text$mn:0000644D                 mov     ecx, [eax+14h]
.text$mn:00006450                 sub     ecx, [ebp+arg_0]
.text$mn:00006453                 mov     [ebp+arg_4], ecx
.text$mn:00006456
.text$mn:00006456 loc_6456:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+84j
.text$mn:00006456                 mov     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000645C                 sub     edx, [ebp+arg_C]
.text$mn:0000645F                 mov     eax, [ebp+var_4]
.text$mn:00006462                 mov     ecx, [eax+14h]
.text$mn:00006465                 sub     ecx, [ebp+arg_4]
.text$mn:00006468                 cmp     edx, ecx
.text$mn:0000646A                 ja      short loc_6474
.text$mn:0000646C                 mov     ecx, [ebp+var_4]
.text$mn:0000646F                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:00006474
.text$mn:00006474 loc_6474:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+A6j
.text$mn:00006474                 mov     edx, [ebp+var_4]
.text$mn:00006477                 mov     eax, [edx+14h]
.text$mn:0000647A                 sub     eax, [ebp+arg_4]
.text$mn:0000647D                 sub     eax, [ebp+arg_0]
.text$mn:00006480                 mov     [ebp+var_8], eax
.text$mn:00006483                 mov     ecx, [ebp+arg_C]
.text$mn:00006486                 cmp     ecx, [ebp+arg_4]
.text$mn:00006489                 jnb     short loc_64C1
.text$mn:0000648B                 mov     edx, [ebp+var_8]
.text$mn:0000648E                 push    edx             ; int
.text$mn:0000648F                 mov     ecx, [ebp+var_4]
.text$mn:00006492                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006497                 mov     ecx, [ebp+arg_0]
.text$mn:0000649A                 lea     edx, [eax+ecx*2]
.text$mn:0000649D                 mov     eax, [ebp+arg_4]
.text$mn:000064A0                 lea     ecx, [edx+eax*2]
.text$mn:000064A3                 push    ecx             ; Src
.text$mn:000064A4                 mov     ecx, [ebp+var_4]
.text$mn:000064A7                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000064AC                 mov     edx, [ebp+arg_0]
.text$mn:000064AF                 lea     eax, [eax+edx*2]
.text$mn:000064B2                 mov     ecx, [ebp+arg_C]
.text$mn:000064B5                 lea     edx, [eax+ecx*2]
.text$mn:000064B8                 push    edx             ; Dst
.text$mn:000064B9                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:000064BE                 add     esp, 0Ch
.text$mn:000064C1
.text$mn:000064C1 loc_64C1:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+C5j
.text$mn:000064C1                 cmp     [ebp+arg_C], 0
.text$mn:000064C5                 ja      short loc_64D1
.text$mn:000064C7                 cmp     [ebp+arg_4], 0
.text$mn:000064CB                 jbe     loc_655E
.text$mn:000064D1
.text$mn:000064D1 loc_64D1:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+101j
.text$mn:000064D1                 mov     eax, [ebp+var_4]
.text$mn:000064D4                 mov     ecx, [eax+14h]
.text$mn:000064D7                 add     ecx, [ebp+arg_C]
.text$mn:000064DA                 sub     ecx, [ebp+arg_4]
.text$mn:000064DD                 mov     [ebp+var_C], ecx
.text$mn:000064E0                 push    0
.text$mn:000064E2                 mov     edx, [ebp+var_C]
.text$mn:000064E5                 push    edx
.text$mn:000064E6                 mov     ecx, [ebp+var_4]
.text$mn:000064E9                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:000064EE                 movzx   eax, al
.text$mn:000064F1                 test    eax, eax
.text$mn:000064F3                 jz      short loc_655E
.text$mn:000064F5                 mov     ecx, [ebp+arg_4]
.text$mn:000064F8                 cmp     ecx, [ebp+arg_C]
.text$mn:000064FB                 jnb     short loc_6533
.text$mn:000064FD                 mov     edx, [ebp+var_8]
.text$mn:00006500                 push    edx             ; int
.text$mn:00006501                 mov     ecx, [ebp+var_4]
.text$mn:00006504                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006509                 mov     ecx, [ebp+arg_0]
.text$mn:0000650C                 lea     edx, [eax+ecx*2]
.text$mn:0000650F                 mov     eax, [ebp+arg_4]
.text$mn:00006512                 lea     ecx, [edx+eax*2]
.text$mn:00006515                 push    ecx             ; Src
.text$mn:00006516                 mov     ecx, [ebp+var_4]
.text$mn:00006519                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000651E                 mov     edx, [ebp+arg_0]
.text$mn:00006521                 lea     eax, [eax+edx*2]
.text$mn:00006524                 mov     ecx, [ebp+arg_C]
.text$mn:00006527                 lea     edx, [eax+ecx*2]
.text$mn:0000652A                 push    edx             ; Dst
.text$mn:0000652B                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00006530                 add     esp, 0Ch
.text$mn:00006533
.text$mn:00006533 loc_6533:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+137j
.text$mn:00006533                 mov     eax, [ebp+arg_C]
.text$mn:00006536                 push    eax             ; int
.text$mn:00006537                 mov     ecx, [ebp+Src]
.text$mn:0000653A                 push    ecx             ; Src
.text$mn:0000653B                 mov     ecx, [ebp+var_4]
.text$mn:0000653E                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006543                 mov     edx, [ebp+arg_0]
.text$mn:00006546                 lea     eax, [eax+edx*2]
.text$mn:00006549                 push    eax             ; Dst
.text$mn:0000654A                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000654F                 add     esp, 0Ch
.text$mn:00006552                 mov     ecx, [ebp+var_C]
.text$mn:00006555                 push    ecx
.text$mn:00006556                 mov     ecx, [ebp+var_4]
.text$mn:00006559                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000655E
.text$mn:0000655E loc_655E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+107j
.text$mn:0000655E                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+12Fj
.text$mn:0000655E                 mov     eax, [ebp+var_4]
.text$mn:00006561
.text$mn:00006561 loc_6561:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+60j
.text$mn:00006561                 mov     esp, ebp
.text$mn:00006563                 pop     ebp
.text$mn:00006564                 retn    10h
.text$mn:00006564 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z endp
.text$mn:00006564
.text$mn:00006564 ; ---------------------------------------------------------------------------
.text$mn:00006567                 align 4
.text$mn:00006567 _text$mn        ends
.text$mn:00006567
.text$mn:00006568 ; ===========================================================================
.text$mn:00006568
.text$mn:00006568 ; Segment type: Pure code
.text$mn:00006568 ; Segment permissions: Read/Execute
.text$mn:00006568 _text$mn        segment para public 'CODE' use32
.text$mn:00006568                 assume cs:_text$mn
.text$mn:00006568                 ;org 6568h
.text$mn:00006568 ; COMDAT (pick any)
.text$mn:00006568                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00006568
.text$mn:00006568 ; =============== S U B R O U T I N E =======================================
.text$mn:00006568
.text$mn:00006568 ; Attributes: bp-based frame
.text$mn:00006568
.text$mn:00006568 ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::select_on_container_copy_construction(void)const
.text$mn:00006568                 public ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ
.text$mn:00006568 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ proc near
.text$mn:00006568                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+3Ap
.text$mn:00006568
.text$mn:00006568 var_8           = dword ptr -8
.text$mn:00006568 var_1           = byte ptr -1
.text$mn:00006568 arg_0           = dword ptr  8
.text$mn:00006568
.text$mn:00006568                 push    ebp
.text$mn:00006569                 mov     ebp, esp
.text$mn:0000656B                 sub     esp, 8
.text$mn:0000656E                 mov     [ebp+var_8], ecx
.text$mn:00006571                 mov     eax, [ebp+var_8]
.text$mn:00006574                 push    eax
.text$mn:00006575                 lea     ecx, [ebp+var_1]
.text$mn:00006578                 push    ecx
.text$mn:00006579                 call    ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ; std::allocator_traits<std::allocator<wchar_t>>::select_on_container_copy_construction(std::allocator<wchar_t> const &)
.text$mn:0000657E                 add     esp, 8
.text$mn:00006581                 push    eax
.text$mn:00006582                 mov     ecx, [ebp+arg_0]
.text$mn:00006585                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(std::allocator<wchar_t> const &)
.text$mn:0000658A                 mov     eax, [ebp+arg_0]
.text$mn:0000658D                 mov     esp, ebp
.text$mn:0000658F                 pop     ebp
.text$mn:00006590                 retn    4
.text$mn:00006590 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ endp
.text$mn:00006590
.text$mn:00006590 ; ---------------------------------------------------------------------------
.text$mn:00006593                 align 4
.text$mn:00006593 _text$mn        ends
.text$mn:00006593
.text$mn:00006594 ; ===========================================================================
.text$mn:00006594
.text$mn:00006594 ; Segment type: Pure code
.text$mn:00006594 ; Segment permissions: Read/Execute
.text$mn:00006594 _text$mn        segment para public 'CODE' use32
.text$mn:00006594                 assume cs:_text$mn
.text$mn:00006594                 ;org 6594h
.text$mn:00006594 ; COMDAT (pick any)
.text$mn:00006594                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00006594
.text$mn:00006594 ; =============== S U B R O U T I N E =======================================
.text$mn:00006594
.text$mn:00006594 ; Attributes: bp-based frame
.text$mn:00006594
.text$mn:00006594 ; public: class std::allocator<wchar_t> __thiscall std::allocator<wchar_t>::select_on_container_copy_construction(void)const
.text$mn:00006594                 public ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ
.text$mn:00006594 ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ proc near
.text$mn:00006594                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::select_on_container_copy_construction(std::allocator<wchar_t> const &)+Ap
.text$mn:00006594
.text$mn:00006594 var_4           = dword ptr -4
.text$mn:00006594 arg_0           = dword ptr  8
.text$mn:00006594
.text$mn:00006594                 push    ebp
.text$mn:00006595                 mov     ebp, esp
.text$mn:00006597                 push    ecx
.text$mn:00006598                 mov     [ebp+var_4], ecx
.text$mn:0000659B                 mov     eax, [ebp+var_4]
.text$mn:0000659E                 push    eax
.text$mn:0000659F                 mov     ecx, [ebp+arg_0]
.text$mn:000065A2                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:000065A7                 mov     eax, [ebp+arg_0]
.text$mn:000065AA                 mov     esp, ebp
.text$mn:000065AC                 pop     ebp
.text$mn:000065AD                 retn    4
.text$mn:000065AD ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ endp
.text$mn:000065AD
.text$mn:000065AD _text$mn        ends
.text$mn:000065AD
.text$mn:000065B0 ; ===========================================================================
.text$mn:000065B0
.text$mn:000065B0 ; Segment type: Pure code
.text$mn:000065B0 ; Segment permissions: Read/Execute
.text$mn:000065B0 _text$mn        segment para public 'CODE' use32
.text$mn:000065B0                 assume cs:_text$mn
.text$mn:000065B0                 ;org 65B0h
.text$mn:000065B0 ; COMDAT (pick any)
.text$mn:000065B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000065B0
.text$mn:000065B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000065B0
.text$mn:000065B0 ; Attributes: bp-based frame
.text$mn:000065B0
.text$mn:000065B0 ; public: static class std::allocator<wchar_t> __cdecl std::allocator_traits<class std::allocator<wchar_t>>::select_on_container_copy_construction(class std::allocator<wchar_t> const &)
.text$mn:000065B0                 public ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z
.text$mn:000065B0 ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z proc near
.text$mn:000065B0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)+11p
.text$mn:000065B0
.text$mn:000065B0 arg_0           = dword ptr  8
.text$mn:000065B0 arg_4           = dword ptr  0Ch
.text$mn:000065B0
.text$mn:000065B0                 push    ebp
.text$mn:000065B1                 mov     ebp, esp
.text$mn:000065B3                 mov     eax, [ebp+arg_0]
.text$mn:000065B6                 push    eax
.text$mn:000065B7                 mov     ecx, [ebp+arg_4]
.text$mn:000065BA                 call    ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ ; std::allocator<wchar_t>::select_on_container_copy_construction(void)
.text$mn:000065BF                 mov     eax, [ebp+arg_0]
.text$mn:000065C2                 pop     ebp
.text$mn:000065C3                 retn
.text$mn:000065C3 ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z endp
.text$mn:000065C3
.text$mn:000065C3 _text$mn        ends
.text$mn:000065C3
.text$mn:000065C4 ; ===========================================================================
.text$mn:000065C4
.text$mn:000065C4 ; Segment type: Pure code
.text$mn:000065C4 ; Segment permissions: Read/Execute
.text$mn:000065C4 _text$mn        segment para public 'CODE' use32
.text$mn:000065C4                 assume cs:_text$mn
.text$mn:000065C4                 ;org 65C4h
.text$mn:000065C4 ; COMDAT (pick any)
.text$mn:000065C4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000065C4
.text$mn:000065C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000065C4
.text$mn:000065C4 ; Attributes: bp-based frame
.text$mn:000065C4
.text$mn:000065C4 ; void __thiscall ScintillaEditView::showLineNumbersMargin(ScintillaEditView *this, bool)
.text$mn:000065C4                 public ?showLineNumbersMargin@ScintillaEditView@@QAEX_N@Z
.text$mn:000065C4 ?showLineNumbersMargin@ScintillaEditView@@QAEX_N@Z proc near
.text$mn:000065C4                                         ; CODE XREF: ScintillaEditView::showMargin(int,bool)+1Cp
.text$mn:000065C4
.text$mn:000065C4 var_4           = dword ptr -4
.text$mn:000065C4 arg_0           = byte ptr  8
.text$mn:000065C4
.text$mn:000065C4                 push    ebp
.text$mn:000065C5                 mov     ebp, esp
.text$mn:000065C7                 push    ecx
.text$mn:000065C8                 mov     [ebp+var_4], ecx
.text$mn:000065CB                 movzx   eax, [ebp+arg_0]
.text$mn:000065CF                 mov     ecx, [ebp+var_4]
.text$mn:000065D2                 movzx   edx, byte ptr [ecx+2Ch]
.text$mn:000065D6                 cmp     eax, edx
.text$mn:000065D8                 jnz     short loc_65DC
.text$mn:000065DA                 jmp     short loc_660C
.text$mn:000065DC ; ---------------------------------------------------------------------------
.text$mn:000065DC
.text$mn:000065DC loc_65DC:                               ; CODE XREF: ScintillaEditView::showLineNumbersMargin(bool)+14j
.text$mn:000065DC                 mov     eax, [ebp+var_4]
.text$mn:000065DF                 mov     cl, [ebp+arg_0]
.text$mn:000065E2                 mov     [eax+2Ch], cl
.text$mn:000065E5                 movzx   edx, [ebp+arg_0]
.text$mn:000065E9                 test    edx, edx
.text$mn:000065EB                 jz      short loc_65F7
.text$mn:000065ED                 mov     ecx, [ebp+var_4] ; this
.text$mn:000065F0                 call    ?updateLineNumberWidth@ScintillaEditView@@QAEXXZ ; ScintillaEditView::updateLineNumberWidth(void)
.text$mn:000065F5                 jmp     short loc_660C
.text$mn:000065F7 ; ---------------------------------------------------------------------------
.text$mn:000065F7
.text$mn:000065F7 loc_65F7:                               ; CODE XREF: ScintillaEditView::showLineNumbersMargin(bool)+27j
.text$mn:000065F7                 push    0               ; __int32
.text$mn:000065F9                 mov     eax, dword ptr ds:?_SC_MARGE_LINENUMBER@ScintillaEditView@@2HB ; int const ScintillaEditView::_SC_MARGE_LINENUMBER
.text$mn:000065FE                 push    eax             ; unsigned int
.text$mn:000065FF                 push    8C2h            ; unsigned int
.text$mn:00006604                 mov     ecx, [ebp+var_4] ; this
.text$mn:00006607                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:0000660C
.text$mn:0000660C loc_660C:                               ; CODE XREF: ScintillaEditView::showLineNumbersMargin(bool)+16j
.text$mn:0000660C                                         ; ScintillaEditView::showLineNumbersMargin(bool)+31j
.text$mn:0000660C                 mov     esp, ebp
.text$mn:0000660E                 pop     ebp
.text$mn:0000660F                 retn    4
.text$mn:0000660F ?showLineNumbersMargin@ScintillaEditView@@QAEX_N@Z endp
.text$mn:0000660F
.text$mn:0000660F ; ---------------------------------------------------------------------------
.text$mn:00006612                 align 4
.text$mn:00006612 _text$mn        ends
.text$mn:00006612
.text$mn:00006614 ; ===========================================================================
.text$mn:00006614
.text$mn:00006614 ; Segment type: Pure code
.text$mn:00006614 ; Segment permissions: Read/Execute
.text$mn:00006614 _text$mn        segment para public 'CODE' use32
.text$mn:00006614                 assume cs:_text$mn
.text$mn:00006614                 ;org 6614h
.text$mn:00006614 ; COMDAT (pick any)
.text$mn:00006614                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00006614
.text$mn:00006614 ; =============== S U B R O U T I N E =======================================
.text$mn:00006614
.text$mn:00006614 ; Attributes: bp-based frame
.text$mn:00006614
.text$mn:00006614 ; void __thiscall ScintillaEditView::showMargin(ScintillaEditView *this, unsigned int, bool)
.text$mn:00006614                 public ?showMargin@ScintillaEditView@@QAEXH_N@Z
.text$mn:00006614 ?showMargin@ScintillaEditView@@QAEXH_N@Z proc near
.text$mn:00006614                                         ; CODE XREF: Printer::doPrint(bool)+153Fp
.text$mn:00006614                                         ; Printer::doPrint(bool)+202Bp
.text$mn:00006614
.text$mn:00006614 var_C           = dword ptr -0Ch
.text$mn:00006614 var_8           = dword ptr -8
.text$mn:00006614 var_4           = dword ptr -4
.text$mn:00006614 arg_0           = dword ptr  8
.text$mn:00006614 arg_4           = byte ptr  0Ch
.text$mn:00006614
.text$mn:00006614                 push    ebp
.text$mn:00006615                 mov     ebp, esp
.text$mn:00006617                 sub     esp, 0Ch
.text$mn:0000661A                 mov     [ebp+var_C], ecx
.text$mn:0000661D                 mov     eax, [ebp+arg_0]
.text$mn:00006620                 cmp     eax, dword ptr ds:?_SC_MARGE_LINENUMBER@ScintillaEditView@@2HB ; int const ScintillaEditView::_SC_MARGE_LINENUMBER
.text$mn:00006626                 jnz     short loc_6637
.text$mn:00006628                 movzx   ecx, [ebp+arg_4]
.text$mn:0000662C                 push    ecx             ; bool
.text$mn:0000662D                 mov     ecx, [ebp+var_C] ; this
.text$mn:00006630                 call    ?showLineNumbersMargin@ScintillaEditView@@QAEX_N@Z ; ScintillaEditView::showLineNumbersMargin(bool)
.text$mn:00006635                 jmp     short loc_6687
.text$mn:00006637 ; ---------------------------------------------------------------------------
.text$mn:00006637
.text$mn:00006637 loc_6637:                               ; CODE XREF: ScintillaEditView::showMargin(int,bool)+12j
.text$mn:00006637                 mov     [ebp+var_4], 3
.text$mn:0000663E                 mov     edx, [ebp+arg_0]
.text$mn:00006641                 cmp     edx, dword ptr ds:?_SC_MARGE_SYBOLE@ScintillaEditView@@2HB ; int const ScintillaEditView::_SC_MARGE_SYBOLE
.text$mn:00006647                 jz      short loc_6654
.text$mn:00006649                 mov     eax, [ebp+arg_0]
.text$mn:0000664C                 cmp     eax, dword ptr ds:?_SC_MARGE_FOLDER@ScintillaEditView@@2HB ; int const ScintillaEditView::_SC_MARGE_FOLDER
.text$mn:00006652                 jnz     short loc_665B
.text$mn:00006654
.text$mn:00006654 loc_6654:                               ; CODE XREF: ScintillaEditView::showMargin(int,bool)+33j
.text$mn:00006654                 mov     [ebp+var_4], 0Eh
.text$mn:0000665B
.text$mn:0000665B loc_665B:                               ; CODE XREF: ScintillaEditView::showMargin(int,bool)+3Ej
.text$mn:0000665B                 movzx   ecx, [ebp+arg_4]
.text$mn:0000665F                 test    ecx, ecx
.text$mn:00006661                 jz      short loc_666B
.text$mn:00006663                 mov     edx, [ebp+var_4]
.text$mn:00006666                 mov     [ebp+var_8], edx
.text$mn:00006669                 jmp     short loc_6672
.text$mn:0000666B ; ---------------------------------------------------------------------------
.text$mn:0000666B
.text$mn:0000666B loc_666B:                               ; CODE XREF: ScintillaEditView::showMargin(int,bool)+4Dj
.text$mn:0000666B                 mov     [ebp+var_8], 0
.text$mn:00006672
.text$mn:00006672 loc_6672:                               ; CODE XREF: ScintillaEditView::showMargin(int,bool)+55j
.text$mn:00006672                 mov     eax, [ebp+var_8]
.text$mn:00006675                 push    eax             ; __int32
.text$mn:00006676                 mov     ecx, [ebp+arg_0]
.text$mn:00006679                 push    ecx             ; unsigned int
.text$mn:0000667A                 push    8C2h            ; unsigned int
.text$mn:0000667F                 mov     ecx, [ebp+var_C] ; this
.text$mn:00006682                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00006687
.text$mn:00006687 loc_6687:                               ; CODE XREF: ScintillaEditView::showMargin(int,bool)+21j
.text$mn:00006687                 mov     esp, ebp
.text$mn:00006689                 pop     ebp
.text$mn:0000668A                 retn    8
.text$mn:0000668A ?showMargin@ScintillaEditView@@QAEXH_N@Z endp
.text$mn:0000668A
.text$mn:0000668A ; ---------------------------------------------------------------------------
.text$mn:0000668D                 align 10h
.text$mn:0000668D _text$mn        ends
.text$mn:0000668D
.text$mn:00006690 ; ===========================================================================
.text$mn:00006690
.text$mn:00006690 ; Segment type: Pure code
.text$mn:00006690 ; Segment permissions: Read/Execute
.text$mn:00006690 _text$mn        segment para public 'CODE' use32
.text$mn:00006690                 assume cs:_text$mn
.text$mn:00006690                 ;org 6690h
.text$mn:00006690 ; COMDAT (pick any)
.text$mn:00006690                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00006690
.text$mn:00006690 ; =============== S U B R O U T I N E =======================================
.text$mn:00006690
.text$mn:00006690 ; Attributes: bp-based frame
.text$mn:00006690
.text$mn:00006690 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::size(void)const
.text$mn:00006690                 public ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:00006690 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:00006690                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+Cp
.text$mn:00006690                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+21p
.text$mn:00006690
.text$mn:00006690 var_4           = dword ptr -4
.text$mn:00006690
.text$mn:00006690                 push    ebp
.text$mn:00006691                 mov     ebp, esp
.text$mn:00006693                 push    ecx
.text$mn:00006694                 mov     [ebp+var_4], ecx
.text$mn:00006697                 mov     eax, [ebp+var_4]
.text$mn:0000669A                 mov     eax, [eax+14h]
.text$mn:0000669D                 mov     esp, ebp
.text$mn:0000669F                 pop     ebp
.text$mn:000066A0                 retn
.text$mn:000066A0 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:000066A0
.text$mn:000066A0 ; ---------------------------------------------------------------------------
.text$mn:000066A1                 align 4
.text$mn:000066A1 _text$mn        ends
.text$mn:000066A1
.text$mn:000066A4 ; ===========================================================================
.text$mn:000066A4
.text$mn:000066A4 ; Segment type: Pure code
.text$mn:000066A4 ; Segment permissions: Read/Execute
.text$mn:000066A4 _text$mn        segment para public 'CODE' use32
.text$mn:000066A4                 assume cs:_text$mn
.text$mn:000066A4                 ;org 66A4h
.text$mn:000066A4 ; COMDAT (pick any)
.text$mn:000066A4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000066A4
.text$mn:000066A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000066A4
.text$mn:000066A4 ; Attributes: bp-based frame
.text$mn:000066A4
.text$mn:000066A4 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::size(void)const
.text$mn:000066A4                 public ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:000066A4 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:000066A4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+Cp
.text$mn:000066A4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+21p ...
.text$mn:000066A4
.text$mn:000066A4 var_4           = dword ptr -4
.text$mn:000066A4
.text$mn:000066A4                 push    ebp
.text$mn:000066A5                 mov     ebp, esp
.text$mn:000066A7                 push    ecx
.text$mn:000066A8                 mov     [ebp+var_4], ecx
.text$mn:000066AB                 mov     eax, [ebp+var_4]
.text$mn:000066AE                 mov     eax, [eax+14h]
.text$mn:000066B1                 mov     esp, ebp
.text$mn:000066B3                 pop     ebp
.text$mn:000066B4                 retn
.text$mn:000066B4 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:000066B4
.text$mn:000066B4 ; ---------------------------------------------------------------------------
.text$mn:000066B5                 align 4
.text$mn:000066B5 _text$mn        ends
.text$mn:000066B5
.text$mn:000066B8 ; ===========================================================================
.text$mn:000066B8
.text$mn:000066B8 ; Segment type: Pure code
.text$mn:000066B8 ; Segment permissions: Read/Execute
.text$mn:000066B8 _text$mn        segment para public 'CODE' use32
.text$mn:000066B8                 assume cs:_text$mn
.text$mn:000066B8                 ;org 66B8h
.text$mn:000066B8 ; COMDAT (pick any)
.text$mn:000066B8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000066B8
.text$mn:000066B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000066B8
.text$mn:000066B8 ; Attributes: bp-based frame
.text$mn:000066B8
.text$mn:000066B8 ; const struct std::error_category *__cdecl std::system_category()
.text$mn:000066B8                 public ?system_category@std@@YAABVerror_category@1@XZ
.text$mn:000066B8 ?system_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:000066B8                                         ; CODE XREF: std::_System_error_category::default_error_condition(int):loc_5628p
.text$mn:000066B8                 push    ebp
.text$mn:000066B9                 mov     ebp, esp
.text$mn:000066BB                 mov     eax, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_System_error_category std::_Error_objects<int>::_System_object
.text$mn:000066C0                 pop     ebp
.text$mn:000066C1                 retn
.text$mn:000066C1 ?system_category@std@@YAABVerror_category@1@XZ endp
.text$mn:000066C1
.text$mn:000066C1 ; ---------------------------------------------------------------------------
.text$mn:000066C2                 align 4
.text$mn:000066C2 _text$mn        ends
.text$mn:000066C2
.text$mn:000066C4 ; ===========================================================================
.text$mn:000066C4
.text$mn:000066C4 ; Segment type: Pure code
.text$mn:000066C4 ; Segment permissions: Read/Execute
.text$mn:000066C4 _text$mn        segment para public 'CODE' use32
.text$mn:000066C4                 assume cs:_text$mn
.text$mn:000066C4                 ;org 66C4h
.text$mn:000066C4 ; COMDAT (pick any)
.text$mn:000066C4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000066C4
.text$mn:000066C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000066C4
.text$mn:000066C4 ; Attributes: bp-based frame
.text$mn:000066C4
.text$mn:000066C4 ; int __thiscall std::error_code::value(std::error_code *__hidden this)
.text$mn:000066C4                 public ?value@error_code@std@@QBEHXZ
.text$mn:000066C4 ?value@error_code@std@@QBEHXZ proc near ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+24p
.text$mn:000066C4
.text$mn:000066C4 var_4           = dword ptr -4
.text$mn:000066C4
.text$mn:000066C4                 push    ebp
.text$mn:000066C5                 mov     ebp, esp
.text$mn:000066C7                 push    ecx
.text$mn:000066C8                 mov     [ebp+var_4], ecx
.text$mn:000066CB                 mov     eax, [ebp+var_4]
.text$mn:000066CE                 mov     eax, [eax]
.text$mn:000066D0                 mov     esp, ebp
.text$mn:000066D2                 pop     ebp
.text$mn:000066D3                 retn
.text$mn:000066D3 ?value@error_code@std@@QBEHXZ endp
.text$mn:000066D3
.text$mn:000066D3 _text$mn        ends
.text$mn:000066D3
.text$mn:000066D4 ; ===========================================================================
.text$mn:000066D4
.text$mn:000066D4 ; Segment type: Pure code
.text$mn:000066D4 ; Segment permissions: Read/Execute
.text$mn:000066D4 _text$mn        segment para public 'CODE' use32
.text$mn:000066D4                 assume cs:_text$mn
.text$mn:000066D4                 ;org 66D4h
.text$mn:000066D4 ; COMDAT (pick any)
.text$mn:000066D4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000066D4
.text$mn:000066D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000066D4
.text$mn:000066D4 ; Attributes: bp-based frame
.text$mn:000066D4
.text$mn:000066D4 ; int __thiscall std::error_condition::value(std::error_condition *__hidden this)
.text$mn:000066D4                 public ?value@error_condition@std@@QBEHXZ
.text$mn:000066D4 ?value@error_condition@std@@QBEHXZ proc near
.text$mn:000066D4                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+2Cp
.text$mn:000066D4                                         ; std::error_condition::operator==(std::error_condition const &)+36p
.text$mn:000066D4
.text$mn:000066D4 var_4           = dword ptr -4
.text$mn:000066D4
.text$mn:000066D4                 push    ebp
.text$mn:000066D5                 mov     ebp, esp
.text$mn:000066D7                 push    ecx
.text$mn:000066D8                 mov     [ebp+var_4], ecx
.text$mn:000066DB                 mov     eax, [ebp+var_4]
.text$mn:000066DE                 mov     eax, [eax]
.text$mn:000066E0                 mov     esp, ebp
.text$mn:000066E2                 pop     ebp
.text$mn:000066E3                 retn
.text$mn:000066E3 ?value@error_condition@std@@QBEHXZ endp
.text$mn:000066E3
.text$mn:000066E3 _text$mn        ends
.text$mn:000066E3
.text$mn:000066E4 ; ===========================================================================
.text$mn:000066E4
.text$mn:000066E4 ; Segment type: Pure code
.text$mn:000066E4 ; Segment permissions: Read/Execute
.text$mn:000066E4 _text$mn        segment para public 'CODE' use32
.text$mn:000066E4                 assume cs:_text$mn
.text$mn:000066E4                 ;org 66E4h
.text$mn:000066E4 ; COMDAT (pick any)
.text$mn:000066E4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000066E4
.text$mn:000066E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000066E4
.text$mn:000066E4 ; Attributes: bp-based frame
.text$mn:000066E4
.text$mn:000066E4                 public _hypot
.text$mn:000066E4 _hypot          proc near
.text$mn:000066E4
.text$mn:000066E4 var_10          = qword ptr -10h
.text$mn:000066E4 var_8           = qword ptr -8
.text$mn:000066E4 arg_0           = qword ptr  8
.text$mn:000066E4 arg_8           = qword ptr  10h
.text$mn:000066E4
.text$mn:000066E4                 push    ebp
.text$mn:000066E5                 mov     ebp, esp
.text$mn:000066E7                 sub     esp, 8
.text$mn:000066EA                 movsd   xmm0, [ebp+arg_8]
.text$mn:000066EF                 movsd   [esp+8+var_8], xmm0
.text$mn:000066F4                 sub     esp, 8
.text$mn:000066F7                 movsd   xmm0, [ebp+arg_0]
.text$mn:000066FC                 movsd   [esp+10h+var_10], xmm0
.text$mn:00006701                 call    __hypot
.text$mn:00006706                 add     esp, 10h
.text$mn:00006709                 pop     ebp
.text$mn:0000670A                 retn
.text$mn:0000670A _hypot          endp
.text$mn:0000670A
.text$mn:0000670A ; ---------------------------------------------------------------------------
.text$mn:0000670B                 align 4
.text$mn:0000670B _text$mn        ends
.text$mn:0000670B
.text$mn:0000670C ; ===========================================================================
.text$mn:0000670C
.text$mn:0000670C ; Segment type: Pure code
.text$mn:0000670C ; Segment permissions: Read/Execute
.text$mn:0000670C _text$mn        segment para public 'CODE' use32
.text$mn:0000670C                 assume cs:_text$mn
.text$mn:0000670C                 ;org 670Ch
.text$mn:0000670C ; COMDAT (pick any)
.text$mn:0000670C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:0000670C
.text$mn:0000670C ; =============== S U B R O U T I N E =======================================
.text$mn:0000670C
.text$mn:0000670C ; Attributes: bp-based frame
.text$mn:0000670C
.text$mn:0000670C                 public _wmemchr
.text$mn:0000670C _wmemchr        proc near               ; CODE XREF: std::char_traits<wchar_t>::find(wchar_t const *,uint,wchar_t const &)+22p
.text$mn:0000670C
.text$mn:0000670C arg_0           = dword ptr  8
.text$mn:0000670C arg_4           = word ptr  0Ch
.text$mn:0000670C arg_8           = dword ptr  10h
.text$mn:0000670C
.text$mn:0000670C                 push    ebp
.text$mn:0000670D                 mov     ebp, esp
.text$mn:0000670F                 jmp     short loc_6723
.text$mn:00006711 ; ---------------------------------------------------------------------------
.text$mn:00006711
.text$mn:00006711 loc_6711:                               ; CODE XREF: _wmemchr:loc_673Cj
.text$mn:00006711                 mov     eax, [ebp+arg_0]
.text$mn:00006714                 add     eax, 2
.text$mn:00006717                 mov     [ebp+arg_0], eax
.text$mn:0000671A                 mov     ecx, [ebp+arg_8]
.text$mn:0000671D                 sub     ecx, 1
.text$mn:00006720                 mov     [ebp+arg_8], ecx
.text$mn:00006723
.text$mn:00006723 loc_6723:                               ; CODE XREF: _wmemchr+3j
.text$mn:00006723                 cmp     [ebp+arg_8], 0
.text$mn:00006727                 jbe     short loc_673E
.text$mn:00006729                 mov     edx, [ebp+arg_0]
.text$mn:0000672C                 movzx   eax, word ptr [edx]
.text$mn:0000672F                 movzx   ecx, [ebp+arg_4]
.text$mn:00006733                 cmp     eax, ecx
.text$mn:00006735                 jnz     short loc_673C
.text$mn:00006737                 mov     eax, [ebp+arg_0]
.text$mn:0000673A                 jmp     short loc_6740
.text$mn:0000673C ; ---------------------------------------------------------------------------
.text$mn:0000673C
.text$mn:0000673C loc_673C:                               ; CODE XREF: _wmemchr+29j
.text$mn:0000673C                 jmp     short loc_6711
.text$mn:0000673E ; ---------------------------------------------------------------------------
.text$mn:0000673E
.text$mn:0000673E loc_673E:                               ; CODE XREF: _wmemchr+1Bj
.text$mn:0000673E                 xor     eax, eax
.text$mn:00006740
.text$mn:00006740 loc_6740:                               ; CODE XREF: _wmemchr+2Ej
.text$mn:00006740                 pop     ebp
.text$mn:00006741                 retn
.text$mn:00006741 _wmemchr        endp
.text$mn:00006741
.text$mn:00006741 ; ---------------------------------------------------------------------------
.text$mn:00006742                 align 4
.text$mn:00006742 _text$mn        ends
.text$mn:00006742
.text$mn:00006744 ; ===========================================================================
.text$mn:00006744
.text$mn:00006744 ; Segment type: Pure code
.text$mn:00006744 ; Segment permissions: Read/Execute
.text$mn:00006744 _text$mn        segment para public 'CODE' use32
.text$mn:00006744                 assume cs:_text$mn
.text$mn:00006744                 ;org 6744h
.text$mn:00006744 ; COMDAT (pick any)
.text$mn:00006744                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00006744
.text$mn:00006744 ; =============== S U B R O U T I N E =======================================
.text$mn:00006744
.text$mn:00006744 ; Attributes: bp-based frame
.text$mn:00006744
.text$mn:00006744                 public _wmemcmp
.text$mn:00006744 _wmemcmp        proc near               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+1Fp
.text$mn:00006744
.text$mn:00006744 var_4           = dword ptr -4
.text$mn:00006744 arg_0           = dword ptr  8
.text$mn:00006744 arg_4           = dword ptr  0Ch
.text$mn:00006744 arg_8           = dword ptr  10h
.text$mn:00006744
.text$mn:00006744                 push    ebp
.text$mn:00006745                 mov     ebp, esp
.text$mn:00006747                 push    ecx
.text$mn:00006748                 jmp     short loc_6765
.text$mn:0000674A ; ---------------------------------------------------------------------------
.text$mn:0000674A
.text$mn:0000674A loc_674A:                               ; CODE XREF: _wmemcmp:loc_67A0j
.text$mn:0000674A                 mov     eax, [ebp+arg_0]
.text$mn:0000674D                 add     eax, 2
.text$mn:00006750                 mov     [ebp+arg_0], eax
.text$mn:00006753                 mov     ecx, [ebp+arg_4]
.text$mn:00006756                 add     ecx, 2
.text$mn:00006759                 mov     [ebp+arg_4], ecx
.text$mn:0000675C                 mov     edx, [ebp+arg_8]
.text$mn:0000675F                 sub     edx, 1
.text$mn:00006762                 mov     [ebp+arg_8], edx
.text$mn:00006765
.text$mn:00006765 loc_6765:                               ; CODE XREF: _wmemcmp+4j
.text$mn:00006765                 cmp     [ebp+arg_8], 0
.text$mn:00006769                 jbe     short loc_67A2
.text$mn:0000676B                 mov     eax, [ebp+arg_0]
.text$mn:0000676E                 movzx   ecx, word ptr [eax]
.text$mn:00006771                 mov     edx, [ebp+arg_4]
.text$mn:00006774                 movzx   eax, word ptr [edx]
.text$mn:00006777                 cmp     ecx, eax
.text$mn:00006779                 jz      short loc_67A0
.text$mn:0000677B                 mov     ecx, [ebp+arg_0]
.text$mn:0000677E                 movzx   edx, word ptr [ecx]
.text$mn:00006781                 mov     eax, [ebp+arg_4]
.text$mn:00006784                 movzx   ecx, word ptr [eax]
.text$mn:00006787                 cmp     edx, ecx
.text$mn:00006789                 jge     short loc_6794
.text$mn:0000678B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006792                 jmp     short loc_679B
.text$mn:00006794 ; ---------------------------------------------------------------------------
.text$mn:00006794
.text$mn:00006794 loc_6794:                               ; CODE XREF: _wmemcmp+45j
.text$mn:00006794                 mov     [ebp+var_4], 1
.text$mn:0000679B
.text$mn:0000679B loc_679B:                               ; CODE XREF: _wmemcmp+4Ej
.text$mn:0000679B                 mov     eax, [ebp+var_4]
.text$mn:0000679E                 jmp     short loc_67A4
.text$mn:000067A0 ; ---------------------------------------------------------------------------
.text$mn:000067A0
.text$mn:000067A0 loc_67A0:                               ; CODE XREF: _wmemcmp+35j
.text$mn:000067A0                 jmp     short loc_674A
.text$mn:000067A2 ; ---------------------------------------------------------------------------
.text$mn:000067A2
.text$mn:000067A2 loc_67A2:                               ; CODE XREF: _wmemcmp+25j
.text$mn:000067A2                 xor     eax, eax
.text$mn:000067A4
.text$mn:000067A4 loc_67A4:                               ; CODE XREF: _wmemcmp+5Aj
.text$mn:000067A4                 mov     esp, ebp
.text$mn:000067A6                 pop     ebp
.text$mn:000067A7                 retn
.text$mn:000067A7 _wmemcmp        endp
.text$mn:000067A7
.text$mn:000067A7 _text$mn        ends
.text$mn:000067A7
.text$mn:000067A8 ; ===========================================================================
.text$mn:000067A8
.text$mn:000067A8 ; Segment type: Pure code
.text$mn:000067A8 ; Segment permissions: Read/Execute
.text$mn:000067A8 _text$mn        segment para public 'CODE' use32
.text$mn:000067A8                 assume cs:_text$mn
.text$mn:000067A8                 ;org 67A8h
.text$mn:000067A8 ; COMDAT (pick any)
.text$mn:000067A8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000067A8
.text$mn:000067A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000067A8
.text$mn:000067A8 ; Attributes: bp-based frame
.text$mn:000067A8
.text$mn:000067A8 ; int __cdecl wmemcpy(void *Dst, void *Src, int)
.text$mn:000067A8                 public _wmemcpy
.text$mn:000067A8 _wmemcpy        proc near               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:000067A8
.text$mn:000067A8 Dst             = dword ptr  8
.text$mn:000067A8 Src             = dword ptr  0Ch
.text$mn:000067A8 arg_8           = dword ptr  10h
.text$mn:000067A8
.text$mn:000067A8                 push    ebp
.text$mn:000067A9                 mov     ebp, esp
.text$mn:000067AB                 mov     eax, [ebp+arg_8]
.text$mn:000067AE                 shl     eax, 1
.text$mn:000067B0                 push    eax             ; Size
.text$mn:000067B1                 mov     ecx, [ebp+Src]
.text$mn:000067B4                 push    ecx             ; Src
.text$mn:000067B5                 mov     edx, [ebp+Dst]
.text$mn:000067B8                 push    edx             ; Dst
.text$mn:000067B9                 call    _memcpy
.text$mn:000067BE                 add     esp, 0Ch
.text$mn:000067C1                 pop     ebp
.text$mn:000067C2                 retn
.text$mn:000067C2 _wmemcpy        endp
.text$mn:000067C2
.text$mn:000067C2 ; ---------------------------------------------------------------------------
.text$mn:000067C3                 align 4
.text$mn:000067C3 _text$mn        ends
.text$mn:000067C3
.text$mn:000067C4 ; ===========================================================================
.text$mn:000067C4
.text$mn:000067C4 ; Segment type: Pure code
.text$mn:000067C4 ; Segment permissions: Read/Execute
.text$mn:000067C4 _text$mn        segment para public 'CODE' use32
.text$mn:000067C4                 assume cs:_text$mn
.text$mn:000067C4                 ;org 67C4h
.text$mn:000067C4 ; COMDAT (pick any)
.text$mn:000067C4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:000067C4
.text$mn:000067C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000067C4
.text$mn:000067C4 ; Attributes: bp-based frame
.text$mn:000067C4
.text$mn:000067C4 ; int __cdecl wmemmove(void *Dst, void *Src, int)
.text$mn:000067C4                 public _wmemmove
.text$mn:000067C4 _wmemmove       proc near               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:000067C4
.text$mn:000067C4 Dst             = dword ptr  8
.text$mn:000067C4 Src             = dword ptr  0Ch
.text$mn:000067C4 arg_8           = dword ptr  10h
.text$mn:000067C4
.text$mn:000067C4                 push    ebp
.text$mn:000067C5                 mov     ebp, esp
.text$mn:000067C7                 mov     eax, [ebp+arg_8]
.text$mn:000067CA                 shl     eax, 1
.text$mn:000067CC                 push    eax             ; Size
.text$mn:000067CD                 mov     ecx, [ebp+Src]
.text$mn:000067D0                 push    ecx             ; Src
.text$mn:000067D1                 mov     edx, [ebp+Dst]
.text$mn:000067D4                 push    edx             ; Dst
.text$mn:000067D5                 call    _memmove
.text$mn:000067DA                 add     esp, 0Ch
.text$mn:000067DD                 pop     ebp
.text$mn:000067DE                 retn
.text$mn:000067DE _wmemmove       endp
.text$mn:000067DE
.text$mn:000067DE ; ---------------------------------------------------------------------------
.text$mn:000067DF                 align 10h
.text$mn:000067DF _text$mn        ends
.text$mn:000067DF
.xdata$x:000067E0 ; ===========================================================================
.xdata$x:000067E0
.xdata$x:000067E0 ; Segment type: Pure data
.xdata$x:000067E0 ; Segment permissions: Read
.xdata$x:000067E0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000067E0                 assume cs:_xdata$x
.xdata$x:000067E0                 ;org 67E0h
.xdata$x:000067E0 ; COMDAT (pick associative to section at 4D50)
.xdata$x:000067E0 __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ db 0FFh
.xdata$x:000067E0                                         ; DATA XREF: .xdata$x:000067F0o
.xdata$x:000067E1                 db 0FFh
.xdata$x:000067E2                 db 0FFh
.xdata$x:000067E3                 db 0FFh
.xdata$x:000067E4                 dd offset __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
.xdata$x:000067E8 __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ db  22h ; "
.xdata$x:000067E8                                         ; DATA XREF: __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ+11o
.xdata$x:000067E9                 db    5
.xdata$x:000067EA                 db  93h ; ô
.xdata$x:000067EB                 db  19h
.xdata$x:000067EC                 db    1
.xdata$x:000067ED                 db    0
.xdata$x:000067EE                 db    0
.xdata$x:000067EF                 db    0
.xdata$x:000067F0                 dd offset __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
.xdata$x:000067F4                 db    0
.xdata$x:000067F5                 db    0
.xdata$x:000067F6                 db    0
.xdata$x:000067F7                 db    0
.xdata$x:000067F8                 db    0
.xdata$x:000067F9                 db    0
.xdata$x:000067FA                 db    0
.xdata$x:000067FB                 db    0
.xdata$x:000067FC                 db    0
.xdata$x:000067FD                 db    0
.xdata$x:000067FE                 db    0
.xdata$x:000067FF                 db    0
.xdata$x:00006800                 db    0
.xdata$x:00006801                 db    0
.xdata$x:00006802                 db    0
.xdata$x:00006803                 db    0
.xdata$x:00006804                 db    0
.xdata$x:00006805                 db    0
.xdata$x:00006806                 db    0
.xdata$x:00006807                 db    0
.xdata$x:00006808                 db    0
.xdata$x:00006809                 db    0
.xdata$x:0000680A                 db    0
.xdata$x:0000680B                 db    0
.xdata$x:0000680B _xdata$x        ends
.xdata$x:0000680B
.xdata$x:0000680C ; ===========================================================================
.xdata$x:0000680C
.xdata$x:0000680C ; Segment type: Pure data
.xdata$x:0000680C ; Segment permissions: Read
.xdata$x:0000680C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000680C                 assume cs:_xdata$x
.xdata$x:0000680C                 ;org 680Ch
.xdata$x:0000680C ; COMDAT (pick associative to section at 3940)
.xdata$x:0000680C __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000680C                                         ; DATA XREF: .xdata$x:0000681Co
.xdata$x:0000680D                 db 0FFh
.xdata$x:0000680E                 db 0FFh
.xdata$x:0000680F                 db 0FFh
.xdata$x:00006810                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:00006814 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00006814                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:00006815                 db    5
.xdata$x:00006816                 db  93h ; ô
.xdata$x:00006817                 db  19h
.xdata$x:00006818                 db    1
.xdata$x:00006819                 db    0
.xdata$x:0000681A                 db    0
.xdata$x:0000681B                 db    0
.xdata$x:0000681C                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:00006820                 db    0
.xdata$x:00006821                 db    0
.xdata$x:00006822                 db    0
.xdata$x:00006823                 db    0
.xdata$x:00006824                 db    0
.xdata$x:00006825                 db    0
.xdata$x:00006826                 db    0
.xdata$x:00006827                 db    0
.xdata$x:00006828                 db    0
.xdata$x:00006829                 db    0
.xdata$x:0000682A                 db    0
.xdata$x:0000682B                 db    0
.xdata$x:0000682C                 db    0
.xdata$x:0000682D                 db    0
.xdata$x:0000682E                 db    0
.xdata$x:0000682F                 db    0
.xdata$x:00006830                 db    0
.xdata$x:00006831                 db    0
.xdata$x:00006832                 db    0
.xdata$x:00006833                 db    0
.xdata$x:00006834                 db    0
.xdata$x:00006835                 db    0
.xdata$x:00006836                 db    0
.xdata$x:00006837                 db    0
.xdata$x:00006837 _xdata$x        ends
.xdata$x:00006837
.xdata$x:00006838 ; ===========================================================================
.xdata$x:00006838
.xdata$x:00006838 ; Segment type: Pure data
.xdata$x:00006838 ; Segment permissions: Read
.xdata$x:00006838 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006838                 assume cs:_xdata$x
.xdata$x:00006838                 ;org 6838h
.xdata$x:00006838 ; COMDAT (pick associative to section at 3FC0)
.xdata$x:00006838 __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00006838                                         ; DATA XREF: .xdata$x:00006848o
.xdata$x:00006839                 db 0FFh
.xdata$x:0000683A                 db 0FFh
.xdata$x:0000683B                 db 0FFh
.xdata$x:0000683C                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:00006840 __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00006840                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:00006841                 db    5
.xdata$x:00006842                 db  93h ; ô
.xdata$x:00006843                 db  19h
.xdata$x:00006844                 db    1
.xdata$x:00006845                 db    0
.xdata$x:00006846                 db    0
.xdata$x:00006847                 db    0
.xdata$x:00006848                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:0000684C                 db    0
.xdata$x:0000684D                 db    0
.xdata$x:0000684E                 db    0
.xdata$x:0000684F                 db    0
.xdata$x:00006850                 db    0
.xdata$x:00006851                 db    0
.xdata$x:00006852                 db    0
.xdata$x:00006853                 db    0
.xdata$x:00006854                 db    0
.xdata$x:00006855                 db    0
.xdata$x:00006856                 db    0
.xdata$x:00006857                 db    0
.xdata$x:00006858                 db    0
.xdata$x:00006859                 db    0
.xdata$x:0000685A                 db    0
.xdata$x:0000685B                 db    0
.xdata$x:0000685C                 db    0
.xdata$x:0000685D                 db    0
.xdata$x:0000685E                 db    0
.xdata$x:0000685F                 db    0
.xdata$x:00006860                 db    0
.xdata$x:00006861                 db    0
.xdata$x:00006862                 db    0
.xdata$x:00006863                 db    0
.xdata$x:00006863 _xdata$x        ends
.xdata$x:00006863
.xdata$x:00006864 ; ===========================================================================
.xdata$x:00006864
.xdata$x:00006864 ; Segment type: Pure data
.xdata$x:00006864 ; Segment permissions: Read
.xdata$x:00006864 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006864                 assume cs:_xdata$x
.xdata$x:00006864                 ;org 6864h
.xdata$x:00006864 ; COMDAT (pick associative to section at 3848)
.xdata$x:00006864 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db 0FFh
.xdata$x:00006864                                         ; DATA XREF: .xdata$x:00006874o
.xdata$x:00006865                 db 0FFh
.xdata$x:00006866                 db 0FFh
.xdata$x:00006867                 db 0FFh
.xdata$x:00006868                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
.xdata$x:0000686C __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db  22h ; "
.xdata$x:0000686C                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z+11o
.xdata$x:0000686D                 db    5
.xdata$x:0000686E                 db  93h ; ô
.xdata$x:0000686F                 db  19h
.xdata$x:00006870                 db    1
.xdata$x:00006871                 db    0
.xdata$x:00006872                 db    0
.xdata$x:00006873                 db    0
.xdata$x:00006874                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.xdata$x:00006878                 db    0
.xdata$x:00006879                 db    0
.xdata$x:0000687A                 db    0
.xdata$x:0000687B                 db    0
.xdata$x:0000687C                 db    0
.xdata$x:0000687D                 db    0
.xdata$x:0000687E                 db    0
.xdata$x:0000687F                 db    0
.xdata$x:00006880                 db    0
.xdata$x:00006881                 db    0
.xdata$x:00006882                 db    0
.xdata$x:00006883                 db    0
.xdata$x:00006884                 db    0
.xdata$x:00006885                 db    0
.xdata$x:00006886                 db    0
.xdata$x:00006887                 db    0
.xdata$x:00006888                 db    0
.xdata$x:00006889                 db    0
.xdata$x:0000688A                 db    0
.xdata$x:0000688B                 db    0
.xdata$x:0000688C                 db    0
.xdata$x:0000688D                 db    0
.xdata$x:0000688E                 db    0
.xdata$x:0000688F                 db    0
.xdata$x:0000688F _xdata$x        ends
.xdata$x:0000688F
.xdata$x:00006890 ; ===========================================================================
.xdata$x:00006890
.xdata$x:00006890 ; Segment type: Pure data
.xdata$x:00006890 ; Segment permissions: Read
.xdata$x:00006890 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006890                 assume cs:_xdata$x
.xdata$x:00006890                 ;org 6890h
.xdata$x:00006890 ; COMDAT (pick associative to section at 3ED0)
.xdata$x:00006890 __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00006890                                         ; DATA XREF: .xdata$x:000068A0o
.xdata$x:00006891                 db 0FFh
.xdata$x:00006892                 db 0FFh
.xdata$x:00006893                 db 0FFh
.xdata$x:00006894                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00006898 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00006898                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00006899                 db    5
.xdata$x:0000689A                 db  93h ; ô
.xdata$x:0000689B                 db  19h
.xdata$x:0000689C                 db    1
.xdata$x:0000689D                 db    0
.xdata$x:0000689E                 db    0
.xdata$x:0000689F                 db    0
.xdata$x:000068A0                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.xdata$x:000068A4                 db    0
.xdata$x:000068A5                 db    0
.xdata$x:000068A6                 db    0
.xdata$x:000068A7                 db    0
.xdata$x:000068A8                 db    0
.xdata$x:000068A9                 db    0
.xdata$x:000068AA                 db    0
.xdata$x:000068AB                 db    0
.xdata$x:000068AC                 db    0
.xdata$x:000068AD                 db    0
.xdata$x:000068AE                 db    0
.xdata$x:000068AF                 db    0
.xdata$x:000068B0                 db    0
.xdata$x:000068B1                 db    0
.xdata$x:000068B2                 db    0
.xdata$x:000068B3                 db    0
.xdata$x:000068B4                 db    0
.xdata$x:000068B5                 db    0
.xdata$x:000068B6                 db    0
.xdata$x:000068B7                 db    0
.xdata$x:000068B8                 db    0
.xdata$x:000068B9                 db    0
.xdata$x:000068BA                 db    0
.xdata$x:000068BB                 db    0
.xdata$x:000068BB _xdata$x        ends
.xdata$x:000068BB
.xdata$x:000068BC ; ===========================================================================
.xdata$x:000068BC
.xdata$x:000068BC ; Segment type: Pure data
.xdata$x:000068BC ; Segment permissions: Read
.xdata$x:000068BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000068BC                 assume cs:_xdata$x
.xdata$x:000068BC                 ;org 68BCh
.xdata$x:000068BC ; COMDAT (pick associative to section at 3ADC)
.xdata$x:000068BC __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db 0FFh
.xdata$x:000068BC                                         ; DATA XREF: .xdata$x:000068CCo
.xdata$x:000068BD                 db 0FFh
.xdata$x:000068BE                 db 0FFh
.xdata$x:000068BF                 db 0FFh
.xdata$x:000068C0                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
.xdata$x:000068C4 __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db  22h ; "
.xdata$x:000068C4                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z+11o
.xdata$x:000068C5                 db    5
.xdata$x:000068C6                 db  93h ; ô
.xdata$x:000068C7                 db  19h
.xdata$x:000068C8                 db    1
.xdata$x:000068C9                 db    0
.xdata$x:000068CA                 db    0
.xdata$x:000068CB                 db    0
.xdata$x:000068CC                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.xdata$x:000068D0                 db    0
.xdata$x:000068D1                 db    0
.xdata$x:000068D2                 db    0
.xdata$x:000068D3                 db    0
.xdata$x:000068D4                 db    0
.xdata$x:000068D5                 db    0
.xdata$x:000068D6                 db    0
.xdata$x:000068D7                 db    0
.xdata$x:000068D8                 db    0
.xdata$x:000068D9                 db    0
.xdata$x:000068DA                 db    0
.xdata$x:000068DB                 db    0
.xdata$x:000068DC                 db    0
.xdata$x:000068DD                 db    0
.xdata$x:000068DE                 db    0
.xdata$x:000068DF                 db    0
.xdata$x:000068E0                 db    0
.xdata$x:000068E1                 db    0
.xdata$x:000068E2                 db    0
.xdata$x:000068E3                 db    0
.xdata$x:000068E4                 db    0
.xdata$x:000068E5                 db    0
.xdata$x:000068E6                 db    0
.xdata$x:000068E7                 db    0
.xdata$x:000068E7 _xdata$x        ends
.xdata$x:000068E7
.xdata$x:000068E8 ; ===========================================================================
.xdata$x:000068E8
.xdata$x:000068E8 ; Segment type: Pure data
.xdata$x:000068E8 ; Segment permissions: Read
.xdata$x:000068E8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000068E8                 assume cs:_xdata$x
.xdata$x:000068E8                 ;org 68E8h
.xdata$x:000068E8 ; COMDAT (pick associative to section at 40A0)
.xdata$x:000068E8 __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db 0FFh
.xdata$x:000068E8                                         ; DATA XREF: .xdata$x:000068F8o
.xdata$x:000068E9                 db 0FFh
.xdata$x:000068EA                 db 0FFh
.xdata$x:000068EB                 db 0FFh
.xdata$x:000068EC                 dd offset __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
.xdata$x:000068F0 __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db  22h ; "
.xdata$x:000068F0                                         ; DATA XREF: __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ+11o
.xdata$x:000068F1                 db    5
.xdata$x:000068F2                 db  93h ; ô
.xdata$x:000068F3                 db  19h
.xdata$x:000068F4                 db    1
.xdata$x:000068F5                 db    0
.xdata$x:000068F6                 db    0
.xdata$x:000068F7                 db    0
.xdata$x:000068F8                 dd offset __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.xdata$x:000068FC                 db    0
.xdata$x:000068FD                 db    0
.xdata$x:000068FE                 db    0
.xdata$x:000068FF                 db    0
.xdata$x:00006900                 db    0
.xdata$x:00006901                 db    0
.xdata$x:00006902                 db    0
.xdata$x:00006903                 db    0
.xdata$x:00006904                 db    0
.xdata$x:00006905                 db    0
.xdata$x:00006906                 db    0
.xdata$x:00006907                 db    0
.xdata$x:00006908                 db    0
.xdata$x:00006909                 db    0
.xdata$x:0000690A                 db    0
.xdata$x:0000690B                 db    0
.xdata$x:0000690C                 db    0
.xdata$x:0000690D                 db    0
.xdata$x:0000690E                 db    0
.xdata$x:0000690F                 db    0
.xdata$x:00006910                 db    0
.xdata$x:00006911                 db    0
.xdata$x:00006912                 db    0
.xdata$x:00006913                 db    0
.xdata$x:00006913 _xdata$x        ends
.xdata$x:00006913
.xdata$x:00006914 ; ===========================================================================
.xdata$x:00006914
.xdata$x:00006914 ; Segment type: Pure data
.xdata$x:00006914 ; Segment permissions: Read
.xdata$x:00006914 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006914                 assume cs:_xdata$x
.xdata$x:00006914                 ;org 6914h
.xdata$x:00006914 ; COMDAT (pick associative to section at 45FC)
.xdata$x:00006914 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 db    0
.xdata$x:00006914                                         ; DATA XREF: .xdata$x:0000699Co
.xdata$x:00006915                 db    0
.xdata$x:00006916                 db    0
.xdata$x:00006917                 db    0
.xdata$x:00006918                 db    0
.xdata$x:00006919                 db    0
.xdata$x:0000691A                 db    0
.xdata$x:0000691B                 db    0
.xdata$x:0000691C                 db    0
.xdata$x:0000691D                 db    0
.xdata$x:0000691E                 db    0
.xdata$x:0000691F                 db    0
.xdata$x:00006920                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.xdata$x:00006924 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 db    0
.xdata$x:00006924                                         ; DATA XREF: .xdata$x:00006988o
.xdata$x:00006925                 db    0
.xdata$x:00006926                 db    0
.xdata$x:00006927                 db    0
.xdata$x:00006928                 db    0
.xdata$x:00006929                 db    0
.xdata$x:0000692A                 db    0
.xdata$x:0000692B                 db    0
.xdata$x:0000692C                 db    0
.xdata$x:0000692D                 db    0
.xdata$x:0000692E                 db    0
.xdata$x:0000692F                 db    0
.xdata$x:00006930                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
.xdata$x:00006934 __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db 0FFh
.xdata$x:00006934                                         ; DATA XREF: .xdata$x:0000695Co
.xdata$x:00006935                 db 0FFh
.xdata$x:00006936                 db 0FFh
.xdata$x:00006937                 db 0FFh
.xdata$x:00006938                 db    0
.xdata$x:00006939                 db    0
.xdata$x:0000693A                 db    0
.xdata$x:0000693B                 db    0
.xdata$x:0000693C                 db 0FFh
.xdata$x:0000693D                 db 0FFh
.xdata$x:0000693E                 db 0FFh
.xdata$x:0000693F                 db 0FFh
.xdata$x:00006940                 db    0
.xdata$x:00006941                 db    0
.xdata$x:00006942                 db    0
.xdata$x:00006943                 db    0
.xdata$x:00006944                 db    1
.xdata$x:00006945                 db    0
.xdata$x:00006946                 db    0
.xdata$x:00006947                 db    0
.xdata$x:00006948                 db    0
.xdata$x:00006949                 db    0
.xdata$x:0000694A                 db    0
.xdata$x:0000694B                 db    0
.xdata$x:0000694C                 db    1
.xdata$x:0000694D                 db    0
.xdata$x:0000694E                 db    0
.xdata$x:0000694F                 db    0
.xdata$x:00006950                 db    0
.xdata$x:00006951                 db    0
.xdata$x:00006952                 db    0
.xdata$x:00006953                 db    0
.xdata$x:00006954 __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:00006954                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z+11o
.xdata$x:00006955                 db    5
.xdata$x:00006956                 db  93h ; ô
.xdata$x:00006957                 db  19h
.xdata$x:00006958                 db    4
.xdata$x:00006959                 db    0
.xdata$x:0000695A                 db    0
.xdata$x:0000695B                 db    0
.xdata$x:0000695C                 dd offset __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:00006960                 db    2
.xdata$x:00006961                 db    0
.xdata$x:00006962                 db    0
.xdata$x:00006963                 db    0
.xdata$x:00006964                 dd offset __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:00006968                 db    0
.xdata$x:00006969                 db    0
.xdata$x:0000696A                 db    0
.xdata$x:0000696B                 db    0
.xdata$x:0000696C                 db    0
.xdata$x:0000696D                 db    0
.xdata$x:0000696E                 db    0
.xdata$x:0000696F                 db    0
.xdata$x:00006970                 db    0
.xdata$x:00006971                 db    0
.xdata$x:00006972                 db    0
.xdata$x:00006973                 db    0
.xdata$x:00006974                 db    0
.xdata$x:00006975                 db    0
.xdata$x:00006976                 db    0
.xdata$x:00006977                 db    0
.xdata$x:00006978 __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db    2
.xdata$x:00006978                                         ; DATA XREF: .xdata$x:00006964o
.xdata$x:00006979                 db    0
.xdata$x:0000697A                 db    0
.xdata$x:0000697B                 db    0
.xdata$x:0000697C                 db    2
.xdata$x:0000697D                 db    0
.xdata$x:0000697E                 db    0
.xdata$x:0000697F                 db    0
.xdata$x:00006980                 db    3
.xdata$x:00006981                 db    0
.xdata$x:00006982                 db    0
.xdata$x:00006983                 db    0
.xdata$x:00006984                 db    1
.xdata$x:00006985                 db    0
.xdata$x:00006986                 db    0
.xdata$x:00006987                 db    0
.xdata$x:00006988                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
.xdata$x:0000698C                 db    0
.xdata$x:0000698D                 db    0
.xdata$x:0000698E                 db    0
.xdata$x:0000698F                 db    0
.xdata$x:00006990                 db    0
.xdata$x:00006991                 db    0
.xdata$x:00006992                 db    0
.xdata$x:00006993                 db    0
.xdata$x:00006994                 db    3
.xdata$x:00006995                 db    0
.xdata$x:00006996                 db    0
.xdata$x:00006997                 db    0
.xdata$x:00006998                 db    1
.xdata$x:00006999                 db    0
.xdata$x:0000699A                 db    0
.xdata$x:0000699B                 db    0
.xdata$x:0000699C                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
.xdata$x:0000699C _xdata$x        ends
.xdata$x:0000699C
.xdata$x:000069A0 ; ===========================================================================
.xdata$x:000069A0
.xdata$x:000069A0 ; Segment type: Pure data
.xdata$x:000069A0 ; Segment permissions: Read
.xdata$x:000069A0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000069A0                 assume cs:_xdata$x
.xdata$x:000069A0                 ;org 69A0h
.xdata$x:000069A0 ; COMDAT (pick associative to section at 3CF8)
.xdata$x:000069A0 __unwindtable$??0_Generic_error_category@std@@QAE@XZ db 0FFh
.xdata$x:000069A0                                         ; DATA XREF: .xdata$x:000069B0o
.xdata$x:000069A1                 db 0FFh
.xdata$x:000069A2                 db 0FFh
.xdata$x:000069A3                 db 0FFh
.xdata$x:000069A4                 dd offset __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0
.xdata$x:000069A8 __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:000069A8                                         ; DATA XREF: __ehhandler$??0_Generic_error_category@std@@QAE@XZ+11o
.xdata$x:000069A9                 db    5
.xdata$x:000069AA                 db  93h ; ô
.xdata$x:000069AB                 db  19h
.xdata$x:000069AC                 db    1
.xdata$x:000069AD                 db    0
.xdata$x:000069AE                 db    0
.xdata$x:000069AF                 db    0
.xdata$x:000069B0                 dd offset __unwindtable$??0_Generic_error_category@std@@QAE@XZ
.xdata$x:000069B4                 db    0
.xdata$x:000069B5                 db    0
.xdata$x:000069B6                 db    0
.xdata$x:000069B7                 db    0
.xdata$x:000069B8                 db    0
.xdata$x:000069B9                 db    0
.xdata$x:000069BA                 db    0
.xdata$x:000069BB                 db    0
.xdata$x:000069BC                 db    0
.xdata$x:000069BD                 db    0
.xdata$x:000069BE                 db    0
.xdata$x:000069BF                 db    0
.xdata$x:000069C0                 db    0
.xdata$x:000069C1                 db    0
.xdata$x:000069C2                 db    0
.xdata$x:000069C3                 db    0
.xdata$x:000069C4                 db    0
.xdata$x:000069C5                 db    0
.xdata$x:000069C6                 db    0
.xdata$x:000069C7                 db    0
.xdata$x:000069C8                 db    0
.xdata$x:000069C9                 db    0
.xdata$x:000069CA                 db    0
.xdata$x:000069CB                 db    0
.xdata$x:000069CB _xdata$x        ends
.xdata$x:000069CB
.xdata$x:000069CC ; ===========================================================================
.xdata$x:000069CC
.xdata$x:000069CC ; Segment type: Pure data
.xdata$x:000069CC ; Segment permissions: Read
.xdata$x:000069CC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000069CC                 assume cs:_xdata$x
.xdata$x:000069CC                 ;org 69CCh
.xdata$x:000069CC ; COMDAT (pick associative to section at 5D70)
.xdata$x:000069CC __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:000069CC                                         ; DATA XREF: .xdata$x:000069DCo
.xdata$x:000069CD                 db 0FFh
.xdata$x:000069CE                 db 0FFh
.xdata$x:000069CF                 db 0FFh
.xdata$x:000069D0                 dd offset __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:000069D4 __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:000069D4                                         ; DATA XREF: __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:000069D5                 db    5
.xdata$x:000069D6                 db  93h ; ô
.xdata$x:000069D7                 db  19h
.xdata$x:000069D8                 db    1
.xdata$x:000069D9                 db    0
.xdata$x:000069DA                 db    0
.xdata$x:000069DB                 db    0
.xdata$x:000069DC                 dd offset __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:000069E0                 db    0
.xdata$x:000069E1                 db    0
.xdata$x:000069E2                 db    0
.xdata$x:000069E3                 db    0
.xdata$x:000069E4                 db    0
.xdata$x:000069E5                 db    0
.xdata$x:000069E6                 db    0
.xdata$x:000069E7                 db    0
.xdata$x:000069E8                 db    0
.xdata$x:000069E9                 db    0
.xdata$x:000069EA                 db    0
.xdata$x:000069EB                 db    0
.xdata$x:000069EC                 db    0
.xdata$x:000069ED                 db    0
.xdata$x:000069EE                 db    0
.xdata$x:000069EF                 db    0
.xdata$x:000069F0                 db    0
.xdata$x:000069F1                 db    0
.xdata$x:000069F2                 db    0
.xdata$x:000069F3                 db    0
.xdata$x:000069F4                 db    0
.xdata$x:000069F5                 db    0
.xdata$x:000069F6                 db    0
.xdata$x:000069F7                 db    0
.xdata$x:000069F7 _xdata$x        ends
.xdata$x:000069F7
.xdata$x:000069F8 ; ===========================================================================
.xdata$x:000069F8
.xdata$x:000069F8 ; Segment type: Pure data
.xdata$x:000069F8 ; Segment permissions: Read
.xdata$x:000069F8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000069F8                 assume cs:_xdata$x
.xdata$x:000069F8                 ;org 69F8h
.xdata$x:000069F8 ; COMDAT (pick associative to section at 41AC)
.xdata$x:000069F8 __unwindtable$??1_Generic_error_category@std@@UAE@XZ db 0FFh
.xdata$x:000069F8                                         ; DATA XREF: .xdata$x:00006A08o
.xdata$x:000069F9                 db 0FFh
.xdata$x:000069FA                 db 0FFh
.xdata$x:000069FB                 db 0FFh
.xdata$x:000069FC                 dd offset __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0
.xdata$x:00006A00 __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:00006A00                                         ; DATA XREF: __ehhandler$??1_Generic_error_category@std@@UAE@XZ+11o
.xdata$x:00006A01                 db    5
.xdata$x:00006A02                 db  93h ; ô
.xdata$x:00006A03                 db  19h
.xdata$x:00006A04                 db    1
.xdata$x:00006A05                 db    0
.xdata$x:00006A06                 db    0
.xdata$x:00006A07                 db    0
.xdata$x:00006A08                 dd offset __unwindtable$??1_Generic_error_category@std@@UAE@XZ
.xdata$x:00006A0C                 db    0
.xdata$x:00006A0D                 db    0
.xdata$x:00006A0E                 db    0
.xdata$x:00006A0F                 db    0
.xdata$x:00006A10                 db    0
.xdata$x:00006A11                 db    0
.xdata$x:00006A12                 db    0
.xdata$x:00006A13                 db    0
.xdata$x:00006A14                 db    0
.xdata$x:00006A15                 db    0
.xdata$x:00006A16                 db    0
.xdata$x:00006A17                 db    0
.xdata$x:00006A18                 db    0
.xdata$x:00006A19                 db    0
.xdata$x:00006A1A                 db    0
.xdata$x:00006A1B                 db    0
.xdata$x:00006A1C                 db    0
.xdata$x:00006A1D                 db    0
.xdata$x:00006A1E                 db    0
.xdata$x:00006A1F                 db    0
.xdata$x:00006A20                 db    0
.xdata$x:00006A21                 db    0
.xdata$x:00006A22                 db    0
.xdata$x:00006A23                 db    0
.xdata$x:00006A23 _xdata$x        ends
.xdata$x:00006A23
.xdata$x:00006A24 ; ===========================================================================
.xdata$x:00006A24
.xdata$x:00006A24 ; Segment type: Pure data
.xdata$x:00006A24 ; Segment permissions: Read
.xdata$x:00006A24 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006A24                 assume cs:_xdata$x
.xdata$x:00006A24                 ;org 6A24h
.xdata$x:00006A24 ; COMDAT (pick associative to section at 3D84)
.xdata$x:00006A24 __unwindtable$??0_Iostream_error_category@std@@QAE@XZ db 0FFh
.xdata$x:00006A24                                         ; DATA XREF: .xdata$x:00006A34o
.xdata$x:00006A25                 db 0FFh
.xdata$x:00006A26                 db 0FFh
.xdata$x:00006A27                 db 0FFh
.xdata$x:00006A28                 dd offset __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0
.xdata$x:00006A2C __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:00006A2C                                         ; DATA XREF: __ehhandler$??0_Iostream_error_category@std@@QAE@XZ+11o
.xdata$x:00006A2D                 db    5
.xdata$x:00006A2E                 db  93h ; ô
.xdata$x:00006A2F                 db  19h
.xdata$x:00006A30                 db    1
.xdata$x:00006A31                 db    0
.xdata$x:00006A32                 db    0
.xdata$x:00006A33                 db    0
.xdata$x:00006A34                 dd offset __unwindtable$??0_Iostream_error_category@std@@QAE@XZ
.xdata$x:00006A38                 db    0
.xdata$x:00006A39                 db    0
.xdata$x:00006A3A                 db    0
.xdata$x:00006A3B                 db    0
.xdata$x:00006A3C                 db    0
.xdata$x:00006A3D                 db    0
.xdata$x:00006A3E                 db    0
.xdata$x:00006A3F                 db    0
.xdata$x:00006A40                 db    0
.xdata$x:00006A41                 db    0
.xdata$x:00006A42                 db    0
.xdata$x:00006A43                 db    0
.xdata$x:00006A44                 db    0
.xdata$x:00006A45                 db    0
.xdata$x:00006A46                 db    0
.xdata$x:00006A47                 db    0
.xdata$x:00006A48                 db    0
.xdata$x:00006A49                 db    0
.xdata$x:00006A4A                 db    0
.xdata$x:00006A4B                 db    0
.xdata$x:00006A4C                 db    0
.xdata$x:00006A4D                 db    0
.xdata$x:00006A4E                 db    0
.xdata$x:00006A4F                 db    0
.xdata$x:00006A4F _xdata$x        ends
.xdata$x:00006A4F
.xdata$x:00006A50 ; ===========================================================================
.xdata$x:00006A50
.xdata$x:00006A50 ; Segment type: Pure data
.xdata$x:00006A50 ; Segment permissions: Read
.xdata$x:00006A50 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006A50                 assume cs:_xdata$x
.xdata$x:00006A50                 ;org 6A50h
.xdata$x:00006A50 ; COMDAT (pick associative to section at 5E28)
.xdata$x:00006A50 __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:00006A50                                         ; DATA XREF: .xdata$x:00006A60o
.xdata$x:00006A51                 db 0FFh
.xdata$x:00006A52                 db 0FFh
.xdata$x:00006A53                 db 0FFh
.xdata$x:00006A54                 dd offset __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:00006A58 __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:00006A58                                         ; DATA XREF: __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:00006A59                 db    5
.xdata$x:00006A5A                 db  93h ; ô
.xdata$x:00006A5B                 db  19h
.xdata$x:00006A5C                 db    1
.xdata$x:00006A5D                 db    0
.xdata$x:00006A5E                 db    0
.xdata$x:00006A5F                 db    0
.xdata$x:00006A60                 dd offset __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:00006A64                 db    0
.xdata$x:00006A65                 db    0
.xdata$x:00006A66                 db    0
.xdata$x:00006A67                 db    0
.xdata$x:00006A68                 db    0
.xdata$x:00006A69                 db    0
.xdata$x:00006A6A                 db    0
.xdata$x:00006A6B                 db    0
.xdata$x:00006A6C                 db    0
.xdata$x:00006A6D                 db    0
.xdata$x:00006A6E                 db    0
.xdata$x:00006A6F                 db    0
.xdata$x:00006A70                 db    0
.xdata$x:00006A71                 db    0
.xdata$x:00006A72                 db    0
.xdata$x:00006A73                 db    0
.xdata$x:00006A74                 db    0
.xdata$x:00006A75                 db    0
.xdata$x:00006A76                 db    0
.xdata$x:00006A77                 db    0
.xdata$x:00006A78                 db    0
.xdata$x:00006A79                 db    0
.xdata$x:00006A7A                 db    0
.xdata$x:00006A7B                 db    0
.xdata$x:00006A7B _xdata$x        ends
.xdata$x:00006A7B
.xdata$x:00006A7C ; ===========================================================================
.xdata$x:00006A7C
.xdata$x:00006A7C ; Segment type: Pure data
.xdata$x:00006A7C ; Segment permissions: Read
.xdata$x:00006A7C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006A7C                 assume cs:_xdata$x
.xdata$x:00006A7C                 ;org 6A7Ch
.xdata$x:00006A7C ; COMDAT (pick associative to section at 421C)
.xdata$x:00006A7C __unwindtable$??1_Iostream_error_category@std@@UAE@XZ db 0FFh
.xdata$x:00006A7C                                         ; DATA XREF: .xdata$x:00006A8Co
.xdata$x:00006A7D                 db 0FFh
.xdata$x:00006A7E                 db 0FFh
.xdata$x:00006A7F                 db 0FFh
.xdata$x:00006A80                 dd offset __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0
.xdata$x:00006A84 __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:00006A84                                         ; DATA XREF: __ehhandler$??1_Iostream_error_category@std@@UAE@XZ+11o
.xdata$x:00006A85                 db    5
.xdata$x:00006A86                 db  93h ; ô
.xdata$x:00006A87                 db  19h
.xdata$x:00006A88                 db    1
.xdata$x:00006A89                 db    0
.xdata$x:00006A8A                 db    0
.xdata$x:00006A8B                 db    0
.xdata$x:00006A8C                 dd offset __unwindtable$??1_Iostream_error_category@std@@UAE@XZ
.xdata$x:00006A90                 db    0
.xdata$x:00006A91                 db    0
.xdata$x:00006A92                 db    0
.xdata$x:00006A93                 db    0
.xdata$x:00006A94                 db    0
.xdata$x:00006A95                 db    0
.xdata$x:00006A96                 db    0
.xdata$x:00006A97                 db    0
.xdata$x:00006A98                 db    0
.xdata$x:00006A99                 db    0
.xdata$x:00006A9A                 db    0
.xdata$x:00006A9B                 db    0
.xdata$x:00006A9C                 db    0
.xdata$x:00006A9D                 db    0
.xdata$x:00006A9E                 db    0
.xdata$x:00006A9F                 db    0
.xdata$x:00006AA0                 db    0
.xdata$x:00006AA1                 db    0
.xdata$x:00006AA2                 db    0
.xdata$x:00006AA3                 db    0
.xdata$x:00006AA4                 db    0
.xdata$x:00006AA5                 db    0
.xdata$x:00006AA6                 db    0
.xdata$x:00006AA7                 db    0
.xdata$x:00006AA7 _xdata$x        ends
.xdata$x:00006AA7
.xdata$x:00006AA8 ; ===========================================================================
.xdata$x:00006AA8
.xdata$x:00006AA8 ; Segment type: Pure data
.xdata$x:00006AA8 ; Segment permissions: Read
.xdata$x:00006AA8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006AA8                 assume cs:_xdata$x
.xdata$x:00006AA8                 ;org 6AA8h
.xdata$x:00006AA8 ; COMDAT (pick associative to section at 3E00)
.xdata$x:00006AA8 __unwindtable$??0_System_error_category@std@@QAE@XZ db 0FFh
.xdata$x:00006AA8                                         ; DATA XREF: .xdata$x:00006AB8o
.xdata$x:00006AA9                 db 0FFh
.xdata$x:00006AAA                 db 0FFh
.xdata$x:00006AAB                 db 0FFh
.xdata$x:00006AAC                 dd offset __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0
.xdata$x:00006AB0 __ehfuncinfo$??0_System_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:00006AB0                                         ; DATA XREF: __ehhandler$??0_System_error_category@std@@QAE@XZ+11o
.xdata$x:00006AB1                 db    5
.xdata$x:00006AB2                 db  93h ; ô
.xdata$x:00006AB3                 db  19h
.xdata$x:00006AB4                 db    1
.xdata$x:00006AB5                 db    0
.xdata$x:00006AB6                 db    0
.xdata$x:00006AB7                 db    0
.xdata$x:00006AB8                 dd offset __unwindtable$??0_System_error_category@std@@QAE@XZ
.xdata$x:00006ABC                 db    0
.xdata$x:00006ABD                 db    0
.xdata$x:00006ABE                 db    0
.xdata$x:00006ABF                 db    0
.xdata$x:00006AC0                 db    0
.xdata$x:00006AC1                 db    0
.xdata$x:00006AC2                 db    0
.xdata$x:00006AC3                 db    0
.xdata$x:00006AC4                 db    0
.xdata$x:00006AC5                 db    0
.xdata$x:00006AC6                 db    0
.xdata$x:00006AC7                 db    0
.xdata$x:00006AC8                 db    0
.xdata$x:00006AC9                 db    0
.xdata$x:00006ACA                 db    0
.xdata$x:00006ACB                 db    0
.xdata$x:00006ACC                 db    0
.xdata$x:00006ACD                 db    0
.xdata$x:00006ACE                 db    0
.xdata$x:00006ACF                 db    0
.xdata$x:00006AD0                 db    0
.xdata$x:00006AD1                 db    0
.xdata$x:00006AD2                 db    0
.xdata$x:00006AD3                 db    0
.xdata$x:00006AD3 _xdata$x        ends
.xdata$x:00006AD3
.xdata$x:00006AD4 ; ===========================================================================
.xdata$x:00006AD4
.xdata$x:00006AD4 ; Segment type: Pure data
.xdata$x:00006AD4 ; Segment permissions: Read
.xdata$x:00006AD4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006AD4                 assume cs:_xdata$x
.xdata$x:00006AD4                 ;org 6AD4h
.xdata$x:00006AD4 ; COMDAT (pick associative to section at 5EEC)
.xdata$x:00006AD4 __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:00006AD4                                         ; DATA XREF: .xdata$x:00006AE4o
.xdata$x:00006AD5                 db 0FFh
.xdata$x:00006AD6                 db 0FFh
.xdata$x:00006AD7                 db 0FFh
.xdata$x:00006AD8                 dd offset __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:00006ADC __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:00006ADC                                         ; DATA XREF: __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:00006ADD                 db    5
.xdata$x:00006ADE                 db  93h ; ô
.xdata$x:00006ADF                 db  19h
.xdata$x:00006AE0                 db    1
.xdata$x:00006AE1                 db    0
.xdata$x:00006AE2                 db    0
.xdata$x:00006AE3                 db    0
.xdata$x:00006AE4                 dd offset __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:00006AE8                 align 20h
.xdata$x:00006AE8 _xdata$x        ends
.xdata$x:00006AE8
.xdata$x:00006B00 ; ===========================================================================
.xdata$x:00006B00
.xdata$x:00006B00 ; Segment type: Pure data
.xdata$x:00006B00 ; Segment permissions: Read
.xdata$x:00006B00 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006B00                 assume cs:_xdata$x
.xdata$x:00006B00                 ;org 6B00h
.xdata$x:00006B00 ; COMDAT (pick associative to section at 428C)
.xdata$x:00006B00 __unwindtable$??1_System_error_category@std@@UAE@XZ db 0FFh
.xdata$x:00006B00                                         ; DATA XREF: .xdata$x:00006B10o
.xdata$x:00006B01                 db 0FFh
.xdata$x:00006B02                 db 0FFh
.xdata$x:00006B03                 db 0FFh
.xdata$x:00006B04                 dd offset __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0
.xdata$x:00006B08 __ehfuncinfo$??1_System_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:00006B08                                         ; DATA XREF: __ehhandler$??1_System_error_category@std@@UAE@XZ+11o
.xdata$x:00006B09                 db    5
.xdata$x:00006B0A                 db  93h ; ô
.xdata$x:00006B0B                 db  19h
.xdata$x:00006B0C                 db    1
.xdata$x:00006B0D                 db    0
.xdata$x:00006B0E                 db    0
.xdata$x:00006B0F                 db    0
.xdata$x:00006B10                 dd offset __unwindtable$??1_System_error_category@std@@UAE@XZ
.xdata$x:00006B14                 db    0
.xdata$x:00006B15                 db    0
.xdata$x:00006B16                 db    0
.xdata$x:00006B17                 db    0
.xdata$x:00006B18                 db    0
.xdata$x:00006B19                 db    0
.xdata$x:00006B1A                 db    0
.xdata$x:00006B1B                 db    0
.xdata$x:00006B1C                 db    0
.xdata$x:00006B1D                 db    0
.xdata$x:00006B1E                 db    0
.xdata$x:00006B1F                 db    0
.xdata$x:00006B20                 db    0
.xdata$x:00006B21                 db    0
.xdata$x:00006B22                 db    0
.xdata$x:00006B23                 db    0
.xdata$x:00006B24                 db    0
.xdata$x:00006B25                 db    0
.xdata$x:00006B26                 db    0
.xdata$x:00006B27                 db    0
.xdata$x:00006B28                 db    0
.xdata$x:00006B29                 db    0
.xdata$x:00006B2A                 db    0
.xdata$x:00006B2B                 db    0
.xdata$x:00006B2B _xdata$x        ends
.xdata$x:00006B2B
.xdata$x:00006B2C ; ===========================================================================
.xdata$x:00006B2C
.xdata$x:00006B2C ; Segment type: Pure data
.xdata$x:00006B2C ; Segment permissions: Read
.xdata$x:00006B2C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006B2C                 assume cs:_xdata$x
.xdata$x:00006B2C                 ;org 6B2Ch
.xdata$x:00006B2C ; COMDAT (pick associative to section at 39C8)
.xdata$x:00006B2C __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00006B2C                                         ; DATA XREF: .xdata$x:00006B3Co
.xdata$x:00006B2D                 db 0FFh
.xdata$x:00006B2E                 db 0FFh
.xdata$x:00006B2F                 db 0FFh
.xdata$x:00006B30                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:00006B34 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00006B34                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:00006B35                 db    5
.xdata$x:00006B36                 db  93h ; ô
.xdata$x:00006B37                 db  19h
.xdata$x:00006B38                 db    1
.xdata$x:00006B39                 db    0
.xdata$x:00006B3A                 db    0
.xdata$x:00006B3B                 db    0
.xdata$x:00006B3C                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:00006B40                 db    0
.xdata$x:00006B41                 db    0
.xdata$x:00006B42                 db    0
.xdata$x:00006B43                 db    0
.xdata$x:00006B44                 db    0
.xdata$x:00006B45                 db    0
.xdata$x:00006B46                 db    0
.xdata$x:00006B47                 db    0
.xdata$x:00006B48                 db    0
.xdata$x:00006B49                 db    0
.xdata$x:00006B4A                 db    0
.xdata$x:00006B4B                 db    0
.xdata$x:00006B4C                 db    0
.xdata$x:00006B4D                 db    0
.xdata$x:00006B4E                 db    0
.xdata$x:00006B4F                 db    0
.xdata$x:00006B50                 db    0
.xdata$x:00006B51                 db    0
.xdata$x:00006B52                 db    0
.xdata$x:00006B53                 db    0
.xdata$x:00006B54                 db    0
.xdata$x:00006B55                 db    0
.xdata$x:00006B56                 db    0
.xdata$x:00006B57                 db    0
.xdata$x:00006B57 _xdata$x        ends
.xdata$x:00006B57
.xdata$x:00006B58 ; ===========================================================================
.xdata$x:00006B58
.xdata$x:00006B58 ; Segment type: Pure data
.xdata$x:00006B58 ; Segment permissions: Read
.xdata$x:00006B58 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006B58                 assume cs:_xdata$x
.xdata$x:00006B58                 ;org 6B58h
.xdata$x:00006B58 ; COMDAT (pick associative to section at 4030)
.xdata$x:00006B58 __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00006B58                                         ; DATA XREF: .xdata$x:00006B68o
.xdata$x:00006B59                 db 0FFh
.xdata$x:00006B5A                 db 0FFh
.xdata$x:00006B5B                 db 0FFh
.xdata$x:00006B5C                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:00006B60 __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00006B60                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:00006B61                 db    5
.xdata$x:00006B62                 db  93h ; ô
.xdata$x:00006B63                 db  19h
.xdata$x:00006B64                 db    1
.xdata$x:00006B65                 db    0
.xdata$x:00006B66                 db    0
.xdata$x:00006B67                 db    0
.xdata$x:00006B68                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:00006B6C                 db    0
.xdata$x:00006B6D                 db    0
.xdata$x:00006B6E                 db    0
.xdata$x:00006B6F                 db    0
.xdata$x:00006B70                 db    0
.xdata$x:00006B71                 db    0
.xdata$x:00006B72                 db    0
.xdata$x:00006B73                 db    0
.xdata$x:00006B74                 db    0
.xdata$x:00006B75                 db    0
.xdata$x:00006B76                 db    0
.xdata$x:00006B77                 db    0
.xdata$x:00006B78                 db    0
.xdata$x:00006B79                 db    0
.xdata$x:00006B7A                 db    0
.xdata$x:00006B7B                 db    0
.xdata$x:00006B7C                 db    0
.xdata$x:00006B7D                 db    0
.xdata$x:00006B7E                 db    0
.xdata$x:00006B7F                 db    0
.xdata$x:00006B80                 db    0
.xdata$x:00006B81                 db    0
.xdata$x:00006B82                 db    0
.xdata$x:00006B83                 db    0
.xdata$x:00006B83 _xdata$x        ends
.xdata$x:00006B83
.xdata$x:00006B84 ; ===========================================================================
.xdata$x:00006B84
.xdata$x:00006B84 ; Segment type: Pure data
.xdata$x:00006B84 ; Segment permissions: Read
.xdata$x:00006B84 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006B84                 assume cs:_xdata$x
.xdata$x:00006B84                 ;org 6B84h
.xdata$x:00006B84 ; COMDAT (pick associative to section at 38C4)
.xdata$x:00006B84 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db 0FFh
.xdata$x:00006B84                                         ; DATA XREF: .xdata$x:00006B94o
.xdata$x:00006B85                 db 0FFh
.xdata$x:00006B86                 db 0FFh
.xdata$x:00006B87                 db 0FFh
.xdata$x:00006B88                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0
.xdata$x:00006B8C __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db  22h ; "
.xdata$x:00006B8C                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z+11o
.xdata$x:00006B8D                 db    5
.xdata$x:00006B8E                 db  93h ; ô
.xdata$x:00006B8F                 db  19h
.xdata$x:00006B90                 db    1
.xdata$x:00006B91                 db    0
.xdata$x:00006B92                 db    0
.xdata$x:00006B93                 db    0
.xdata$x:00006B94                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.xdata$x:00006B98                 db    0
.xdata$x:00006B99                 db    0
.xdata$x:00006B9A                 db    0
.xdata$x:00006B9B                 db    0
.xdata$x:00006B9C                 db    0
.xdata$x:00006B9D                 db    0
.xdata$x:00006B9E                 db    0
.xdata$x:00006B9F                 db    0
.xdata$x:00006BA0                 db    0
.xdata$x:00006BA1                 db    0
.xdata$x:00006BA2                 db    0
.xdata$x:00006BA3                 db    0
.xdata$x:00006BA4                 db    0
.xdata$x:00006BA5                 db    0
.xdata$x:00006BA6                 db    0
.xdata$x:00006BA7                 db    0
.xdata$x:00006BA8                 db    0
.xdata$x:00006BA9                 db    0
.xdata$x:00006BAA                 db    0
.xdata$x:00006BAB                 db    0
.xdata$x:00006BAC                 db    0
.xdata$x:00006BAD                 db    0
.xdata$x:00006BAE                 db    0
.xdata$x:00006BAF                 db    0
.xdata$x:00006BAF _xdata$x        ends
.xdata$x:00006BAF
.xdata$x:00006BB0 ; ===========================================================================
.xdata$x:00006BB0
.xdata$x:00006BB0 ; Segment type: Pure data
.xdata$x:00006BB0 ; Segment permissions: Read
.xdata$x:00006BB0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006BB0                 assume cs:_xdata$x
.xdata$x:00006BB0                 ;org 6BB0h
.xdata$x:00006BB0 ; COMDAT (pick associative to section at 3F48)
.xdata$x:00006BB0 __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00006BB0                                         ; DATA XREF: .xdata$x:00006BC0o
.xdata$x:00006BB1                 db 0FFh
.xdata$x:00006BB2                 db 0FFh
.xdata$x:00006BB3                 db 0FFh
.xdata$x:00006BB4                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00006BB8 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00006BB8                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00006BB9                 db    5
.xdata$x:00006BBA                 db  93h ; ô
.xdata$x:00006BBB                 db  19h
.xdata$x:00006BBC                 db    1
.xdata$x:00006BBD                 db    0
.xdata$x:00006BBE                 db    0
.xdata$x:00006BBF                 db    0
.xdata$x:00006BC0                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:00006BC4                 db    0
.xdata$x:00006BC5                 db    0
.xdata$x:00006BC6                 db    0
.xdata$x:00006BC7                 db    0
.xdata$x:00006BC8                 db    0
.xdata$x:00006BC9                 db    0
.xdata$x:00006BCA                 db    0
.xdata$x:00006BCB                 db    0
.xdata$x:00006BCC                 db    0
.xdata$x:00006BCD                 db    0
.xdata$x:00006BCE                 db    0
.xdata$x:00006BCF                 db    0
.xdata$x:00006BD0                 db    0
.xdata$x:00006BD1                 db    0
.xdata$x:00006BD2                 db    0
.xdata$x:00006BD3                 db    0
.xdata$x:00006BD4                 db    0
.xdata$x:00006BD5                 db    0
.xdata$x:00006BD6                 db    0
.xdata$x:00006BD7                 db    0
.xdata$x:00006BD8                 db    0
.xdata$x:00006BD9                 db    0
.xdata$x:00006BDA                 db    0
.xdata$x:00006BDB                 db    0
.xdata$x:00006BDB _xdata$x        ends
.xdata$x:00006BDB
.xdata$x:00006BDC ; ===========================================================================
.xdata$x:00006BDC
.xdata$x:00006BDC ; Segment type: Pure data
.xdata$x:00006BDC ; Segment permissions: Read
.xdata$x:00006BDC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006BDC                 assume cs:_xdata$x
.xdata$x:00006BDC                 ;org 6BDCh
.xdata$x:00006BDC ; COMDAT (pick associative to section at 3B74)
.xdata$x:00006BDC __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:00006BDC                                         ; DATA XREF: .xdata$x:00006BECo
.xdata$x:00006BDD                 db 0FFh
.xdata$x:00006BDE                 db 0FFh
.xdata$x:00006BDF                 db 0FFh
.xdata$x:00006BE0                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0
.xdata$x:00006BE4 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:00006BE4                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z+11o
.xdata$x:00006BE5                 db    5
.xdata$x:00006BE6                 db  93h ; ô
.xdata$x:00006BE7                 db  19h
.xdata$x:00006BE8                 db    1
.xdata$x:00006BE9                 db    0
.xdata$x:00006BEA                 db    0
.xdata$x:00006BEB                 db    0
.xdata$x:00006BEC                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.xdata$x:00006BF0                 db    0
.xdata$x:00006BF1                 db    0
.xdata$x:00006BF2                 db    0
.xdata$x:00006BF3                 db    0
.xdata$x:00006BF4                 db    0
.xdata$x:00006BF5                 db    0
.xdata$x:00006BF6                 db    0
.xdata$x:00006BF7                 db    0
.xdata$x:00006BF8                 db    0
.xdata$x:00006BF9                 db    0
.xdata$x:00006BFA                 db    0
.xdata$x:00006BFB                 db    0
.xdata$x:00006BFC                 db    0
.xdata$x:00006BFD                 db    0
.xdata$x:00006BFE                 db    0
.xdata$x:00006BFF                 db    0
.xdata$x:00006C00                 db    0
.xdata$x:00006C01                 db    0
.xdata$x:00006C02                 db    0
.xdata$x:00006C03                 db    0
.xdata$x:00006C04                 db    0
.xdata$x:00006C05                 db    0
.xdata$x:00006C06                 db    0
.xdata$x:00006C07                 db    0
.xdata$x:00006C07 _xdata$x        ends
.xdata$x:00006C07
.xdata$x:00006C08 ; ===========================================================================
.xdata$x:00006C08
.xdata$x:00006C08 ; Segment type: Pure data
.xdata$x:00006C08 ; Segment permissions: Read
.xdata$x:00006C08 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006C08                 assume cs:_xdata$x
.xdata$x:00006C08                 ;org 6C08h
.xdata$x:00006C08 ; COMDAT (pick associative to section at 3C24)
.xdata$x:00006C08 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db 0FFh
.xdata$x:00006C08                                         ; DATA XREF: .xdata$x:00006C18o
.xdata$x:00006C09                 db 0FFh
.xdata$x:00006C0A                 db 0FFh
.xdata$x:00006C0B                 db 0FFh
.xdata$x:00006C0C                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0
.xdata$x:00006C10 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db  22h ; "
.xdata$x:00006C10                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z+11o
.xdata$x:00006C11                 db    5
.xdata$x:00006C12                 db  93h ; ô
.xdata$x:00006C13                 db  19h
.xdata$x:00006C14                 db    1
.xdata$x:00006C15                 db    0
.xdata$x:00006C16                 db    0
.xdata$x:00006C17                 db    0
.xdata$x:00006C18                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.xdata$x:00006C1C                 db    0
.xdata$x:00006C1D                 db    0
.xdata$x:00006C1E                 db    0
.xdata$x:00006C1F                 db    0
.xdata$x:00006C20                 db    0
.xdata$x:00006C21                 db    0
.xdata$x:00006C22                 db    0
.xdata$x:00006C23                 db    0
.xdata$x:00006C24                 db    0
.xdata$x:00006C25                 db    0
.xdata$x:00006C26                 db    0
.xdata$x:00006C27                 db    0
.xdata$x:00006C28                 db    0
.xdata$x:00006C29                 db    0
.xdata$x:00006C2A                 db    0
.xdata$x:00006C2B                 db    0
.xdata$x:00006C2C                 db    0
.xdata$x:00006C2D                 db    0
.xdata$x:00006C2E                 db    0
.xdata$x:00006C2F                 db    0
.xdata$x:00006C30                 db    0
.xdata$x:00006C31                 db    0
.xdata$x:00006C32                 db    0
.xdata$x:00006C33                 db    0
.xdata$x:00006C33 _xdata$x        ends
.xdata$x:00006C33
.xdata$x:00006C34 ; ===========================================================================
.xdata$x:00006C34
.xdata$x:00006C34 ; Segment type: Pure data
.xdata$x:00006C34 ; Segment permissions: Read
.xdata$x:00006C34 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006C34                 assume cs:_xdata$x
.xdata$x:00006C34                 ;org 6C34h
.xdata$x:00006C34 ; COMDAT (pick associative to section at 411C)
.xdata$x:00006C34 __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:00006C34                                         ; DATA XREF: .xdata$x:00006C44o
.xdata$x:00006C35                 db 0FFh
.xdata$x:00006C36                 db 0FFh
.xdata$x:00006C37                 db 0FFh
.xdata$x:00006C38                 dd offset __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:00006C3C __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00006C3C                                         ; DATA XREF: __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:00006C3D                 db    5
.xdata$x:00006C3E                 db  93h ; ô
.xdata$x:00006C3F                 db  19h
.xdata$x:00006C40                 db    1
.xdata$x:00006C41                 db    0
.xdata$x:00006C42                 db    0
.xdata$x:00006C43                 db    0
.xdata$x:00006C44                 dd offset __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:00006C48                 align 20h
.xdata$x:00006C48 _xdata$x        ends
.xdata$x:00006C48
.xdata$x:00006C60 ; ===========================================================================
.xdata$x:00006C60
.xdata$x:00006C60 ; Segment type: Pure data
.xdata$x:00006C60 ; Segment permissions: Read
.xdata$x:00006C60 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006C60                 assume cs:_xdata$x
.xdata$x:00006C60                 ;org 6C60h
.xdata$x:00006C60 ; COMDAT (pick associative to section at 47BC)
.xdata$x:00006C60 __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5 db    0
.xdata$x:00006C60                                         ; DATA XREF: .xdata$x:00006CE8o
.xdata$x:00006C61                 db    0
.xdata$x:00006C62                 db    0
.xdata$x:00006C63                 db    0
.xdata$x:00006C64                 db    0
.xdata$x:00006C65                 db    0
.xdata$x:00006C66                 db    0
.xdata$x:00006C67                 db    0
.xdata$x:00006C68                 db    0
.xdata$x:00006C69                 db    0
.xdata$x:00006C6A                 db    0
.xdata$x:00006C6B                 db    0
.xdata$x:00006C6C                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.xdata$x:00006C70 __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4 db    0
.xdata$x:00006C70                                         ; DATA XREF: .xdata$x:00006CD4o
.xdata$x:00006C71                 db    0
.xdata$x:00006C72                 db    0
.xdata$x:00006C73                 db    0
.xdata$x:00006C74                 db    0
.xdata$x:00006C75                 db    0
.xdata$x:00006C76                 db    0
.xdata$x:00006C77                 db    0
.xdata$x:00006C78                 db    0
.xdata$x:00006C79                 db    0
.xdata$x:00006C7A                 db    0
.xdata$x:00006C7B                 db    0
.xdata$x:00006C7C                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1
.xdata$x:00006C80 __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db 0FFh
.xdata$x:00006C80                                         ; DATA XREF: .xdata$x:00006CA8o
.xdata$x:00006C81                 db 0FFh
.xdata$x:00006C82                 db 0FFh
.xdata$x:00006C83                 db 0FFh
.xdata$x:00006C84                 db    0
.xdata$x:00006C85                 db    0
.xdata$x:00006C86                 db    0
.xdata$x:00006C87                 db    0
.xdata$x:00006C88                 db 0FFh
.xdata$x:00006C89                 db 0FFh
.xdata$x:00006C8A                 db 0FFh
.xdata$x:00006C8B                 db 0FFh
.xdata$x:00006C8C                 db    0
.xdata$x:00006C8D                 db    0
.xdata$x:00006C8E                 db    0
.xdata$x:00006C8F                 db    0
.xdata$x:00006C90                 db    1
.xdata$x:00006C91                 db    0
.xdata$x:00006C92                 db    0
.xdata$x:00006C93                 db    0
.xdata$x:00006C94                 db    0
.xdata$x:00006C95                 db    0
.xdata$x:00006C96                 db    0
.xdata$x:00006C97                 db    0
.xdata$x:00006C98                 db    1
.xdata$x:00006C99                 db    0
.xdata$x:00006C9A                 db    0
.xdata$x:00006C9B                 db    0
.xdata$x:00006C9C                 db    0
.xdata$x:00006C9D                 db    0
.xdata$x:00006C9E                 db    0
.xdata$x:00006C9F                 db    0
.xdata$x:00006CA0 __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:00006CA0                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z+11o
.xdata$x:00006CA1                 db    5
.xdata$x:00006CA2                 db  93h ; ô
.xdata$x:00006CA3                 db  19h
.xdata$x:00006CA4                 db    4
.xdata$x:00006CA5                 db    0
.xdata$x:00006CA6                 db    0
.xdata$x:00006CA7                 db    0
.xdata$x:00006CA8                 dd offset __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:00006CAC                 db    2
.xdata$x:00006CAD                 db    0
.xdata$x:00006CAE                 db    0
.xdata$x:00006CAF                 db    0
.xdata$x:00006CB0                 dd offset __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:00006CB4                 db    0
.xdata$x:00006CB5                 db    0
.xdata$x:00006CB6                 db    0
.xdata$x:00006CB7                 db    0
.xdata$x:00006CB8                 db    0
.xdata$x:00006CB9                 db    0
.xdata$x:00006CBA                 db    0
.xdata$x:00006CBB                 db    0
.xdata$x:00006CBC                 db    0
.xdata$x:00006CBD                 db    0
.xdata$x:00006CBE                 db    0
.xdata$x:00006CBF                 db    0
.xdata$x:00006CC0                 db    0
.xdata$x:00006CC1                 db    0
.xdata$x:00006CC2                 db    0
.xdata$x:00006CC3                 db    0
.xdata$x:00006CC4 __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db    2
.xdata$x:00006CC4                                         ; DATA XREF: .xdata$x:00006CB0o
.xdata$x:00006CC5                 db    0
.xdata$x:00006CC6                 db    0
.xdata$x:00006CC7                 db    0
.xdata$x:00006CC8                 db    2
.xdata$x:00006CC9                 db    0
.xdata$x:00006CCA                 db    0
.xdata$x:00006CCB                 db    0
.xdata$x:00006CCC                 db    3
.xdata$x:00006CCD                 db    0
.xdata$x:00006CCE                 db    0
.xdata$x:00006CCF                 db    0
.xdata$x:00006CD0                 db    1
.xdata$x:00006CD1                 db    0
.xdata$x:00006CD2                 db    0
.xdata$x:00006CD3                 db    0
.xdata$x:00006CD4                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4
.xdata$x:00006CD8                 align 10h
.xdata$x:00006CE0                 db    3
.xdata$x:00006CE1                 db    0
.xdata$x:00006CE2                 db    0
.xdata$x:00006CE3                 db    0
.xdata$x:00006CE4                 db    1
.xdata$x:00006CE5                 db    0
.xdata$x:00006CE6                 db    0
.xdata$x:00006CE7                 db    0
.xdata$x:00006CE8                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5
.xdata$x:00006CE8 _xdata$x        ends
.xdata$x:00006CE8
.xdata$x:00006CEC ; ===========================================================================
.xdata$x:00006CEC
.xdata$x:00006CEC ; Segment type: Pure data
.xdata$x:00006CEC ; Segment permissions: Read
.xdata$x:00006CEC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006CEC                 assume cs:_xdata$x
.xdata$x:00006CEC                 ;org 6CECh
.xdata$x:00006CEC __unwindtable$?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z db 0FFh
.xdata$x:00006CEC                                         ; DATA XREF: .xdata$x:00006D04o
.xdata$x:00006CED                 db 0FFh
.xdata$x:00006CEE                 db 0FFh
.xdata$x:00006CEF                 db 0FFh
.xdata$x:00006CF0                 dd offset __unwindfunclet$?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z$0
.xdata$x:00006CF4                 align 8
.xdata$x:00006CF8                 dd offset __unwindfunclet$?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z$1
.xdata$x:00006CFC __ehfuncinfo$?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z db  22h ; "
.xdata$x:00006CFC                                         ; DATA XREF: __ehhandler$?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z+11o
.xdata$x:00006CFD                 db    5
.xdata$x:00006CFE                 db  93h ; ô
.xdata$x:00006CFF                 db  19h
.xdata$x:00006D00                 db    2
.xdata$x:00006D01                 db    0
.xdata$x:00006D02                 db    0
.xdata$x:00006D03                 db    0
.xdata$x:00006D04                 dd offset __unwindtable$?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z
.xdata$x:00006D08                 align 20h
.xdata$x:00006D20 __ehfuncinfo$?doPrint@Printer@@QAEI_N@Z db  22h ; "
.xdata$x:00006D20                                         ; DATA XREF: __ehhandler$?doPrint@Printer@@QAEI_N@Z+1Eo
.xdata$x:00006D21                 db    5
.xdata$x:00006D22                 db  93h ; ô
.xdata$x:00006D23                 db  19h
.xdata$x:00006D24                 db  30h ; 0
.xdata$x:00006D25                 db    0
.xdata$x:00006D26                 db    0
.xdata$x:00006D27                 db    0
.xdata$x:00006D28                 dd offset __unwindtable$?doPrint@Printer@@QAEI_N@Z
.xdata$x:00006D2C                 db    0
.xdata$x:00006D2D                 db    0
.xdata$x:00006D2E                 db    0
.xdata$x:00006D2F                 db    0
.xdata$x:00006D30                 db    0
.xdata$x:00006D31                 db    0
.xdata$x:00006D32                 db    0
.xdata$x:00006D33                 db    0
.xdata$x:00006D34                 db    0
.xdata$x:00006D35                 db    0
.xdata$x:00006D36                 db    0
.xdata$x:00006D37                 db    0
.xdata$x:00006D38                 db    0
.xdata$x:00006D39                 db    0
.xdata$x:00006D3A                 db    0
.xdata$x:00006D3B                 db    0
.xdata$x:00006D3C                 db    0
.xdata$x:00006D3D                 db    0
.xdata$x:00006D3E                 db    0
.xdata$x:00006D3F                 db    0
.xdata$x:00006D40                 db    0
.xdata$x:00006D41                 db    0
.xdata$x:00006D42                 db    0
.xdata$x:00006D43                 db    0
.xdata$x:00006D44 __unwindtable$?doPrint@Printer@@QAEI_N@Z db 0FFh
.xdata$x:00006D44                                         ; DATA XREF: .xdata$x:00006D28o
.xdata$x:00006D45                 db 0FFh
.xdata$x:00006D46                 db 0FFh
.xdata$x:00006D47                 db 0FFh
.xdata$x:00006D48                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$0
.xdata$x:00006D4C                 align 10h
.xdata$x:00006D50                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$1
.xdata$x:00006D54                 db    1
.xdata$x:00006D55                 db    0
.xdata$x:00006D56                 db    0
.xdata$x:00006D57                 db    0
.xdata$x:00006D58                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$2
.xdata$x:00006D5C                 align 10h
.xdata$x:00006D60                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$3
.xdata$x:00006D64                 db    3
.xdata$x:00006D65                 db    0
.xdata$x:00006D66                 db    0
.xdata$x:00006D67                 db    0
.xdata$x:00006D68                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$4
.xdata$x:00006D6C                 align 10h
.xdata$x:00006D70                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$5
.xdata$x:00006D74                 db    5
.xdata$x:00006D75                 db    0
.xdata$x:00006D76                 db    0
.xdata$x:00006D77                 db    0
.xdata$x:00006D78                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$6
.xdata$x:00006D7C                 align 10h
.xdata$x:00006D80                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$7
.xdata$x:00006D84                 db    7
.xdata$x:00006D85                 db    0
.xdata$x:00006D86                 db    0
.xdata$x:00006D87                 db    0
.xdata$x:00006D88                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$8
.xdata$x:00006D8C                 db    8
.xdata$x:00006D8D                 db    0
.xdata$x:00006D8E                 db    0
.xdata$x:00006D8F                 db    0
.xdata$x:00006D90                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$9
.xdata$x:00006D94                 db    7
.xdata$x:00006D95                 db    0
.xdata$x:00006D96                 db    0
.xdata$x:00006D97                 db    0
.xdata$x:00006D98                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$10
.xdata$x:00006D9C                 db  0Ah
.xdata$x:00006D9D                 db    0
.xdata$x:00006D9E                 db    0
.xdata$x:00006D9F                 db    0
.xdata$x:00006DA0                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$11
.xdata$x:00006DA4                 db    7
.xdata$x:00006DA5                 db    0
.xdata$x:00006DA6                 db    0
.xdata$x:00006DA7                 db    0
.xdata$x:00006DA8                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$12
.xdata$x:00006DAC                 db  0Ch
.xdata$x:00006DAD                 db    0
.xdata$x:00006DAE                 db    0
.xdata$x:00006DAF                 db    0
.xdata$x:00006DB0                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$13
.xdata$x:00006DB4                 db    7
.xdata$x:00006DB5                 db    0
.xdata$x:00006DB6                 db    0
.xdata$x:00006DB7                 db    0
.xdata$x:00006DB8                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$14
.xdata$x:00006DBC                 db  0Eh
.xdata$x:00006DBD                 db    0
.xdata$x:00006DBE                 db    0
.xdata$x:00006DBF                 db    0
.xdata$x:00006DC0                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$15
.xdata$x:00006DC4                 db  0Fh
.xdata$x:00006DC5                 db    0
.xdata$x:00006DC6                 db    0
.xdata$x:00006DC7                 db    0
.xdata$x:00006DC8                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$16
.xdata$x:00006DCC                 db  0Eh
.xdata$x:00006DCD                 db    0
.xdata$x:00006DCE                 db    0
.xdata$x:00006DCF                 db    0
.xdata$x:00006DD0                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$17
.xdata$x:00006DD4                 db  11h
.xdata$x:00006DD5                 db    0
.xdata$x:00006DD6                 db    0
.xdata$x:00006DD7                 db    0
.xdata$x:00006DD8                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$18
.xdata$x:00006DDC                 db  0Eh
.xdata$x:00006DDD                 db    0
.xdata$x:00006DDE                 db    0
.xdata$x:00006DDF                 db    0
.xdata$x:00006DE0                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$19
.xdata$x:00006DE4                 db  13h
.xdata$x:00006DE5                 db    0
.xdata$x:00006DE6                 db    0
.xdata$x:00006DE7                 db    0
.xdata$x:00006DE8                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$20
.xdata$x:00006DEC                 db 0FFh
.xdata$x:00006DED                 db 0FFh
.xdata$x:00006DEE                 db 0FFh
.xdata$x:00006DEF                 db 0FFh
.xdata$x:00006DF0                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$21
.xdata$x:00006DF4                 db  15h
.xdata$x:00006DF5                 db    0
.xdata$x:00006DF6                 db    0
.xdata$x:00006DF7                 db    0
.xdata$x:00006DF8                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$22
.xdata$x:00006DFC                 db  16h
.xdata$x:00006DFD                 db    0
.xdata$x:00006DFE                 db    0
.xdata$x:00006DFF                 db    0
.xdata$x:00006E00                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$23
.xdata$x:00006E04                 db  15h
.xdata$x:00006E05                 db    0
.xdata$x:00006E06                 db    0
.xdata$x:00006E07                 db    0
.xdata$x:00006E08                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$24
.xdata$x:00006E0C                 db  18h
.xdata$x:00006E0D                 db    0
.xdata$x:00006E0E                 db    0
.xdata$x:00006E0F                 db    0
.xdata$x:00006E10                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$25
.xdata$x:00006E14                 db  15h
.xdata$x:00006E15                 db    0
.xdata$x:00006E16                 db    0
.xdata$x:00006E17                 db    0
.xdata$x:00006E18                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$26
.xdata$x:00006E1C                 db  1Ah
.xdata$x:00006E1D                 db    0
.xdata$x:00006E1E                 db    0
.xdata$x:00006E1F                 db    0
.xdata$x:00006E20                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$27
.xdata$x:00006E24                 db  15h
.xdata$x:00006E25                 db    0
.xdata$x:00006E26                 db    0
.xdata$x:00006E27                 db    0
.xdata$x:00006E28                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$28
.xdata$x:00006E2C                 db  1Ch
.xdata$x:00006E2D                 db    0
.xdata$x:00006E2E                 db    0
.xdata$x:00006E2F                 db    0
.xdata$x:00006E30                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$29
.xdata$x:00006E34                 db  1Dh
.xdata$x:00006E35                 db    0
.xdata$x:00006E36                 db    0
.xdata$x:00006E37                 db    0
.xdata$x:00006E38                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$30
.xdata$x:00006E3C                 db  1Ch
.xdata$x:00006E3D                 db    0
.xdata$x:00006E3E                 db    0
.xdata$x:00006E3F                 db    0
.xdata$x:00006E40                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$31
.xdata$x:00006E44                 db  1Fh
.xdata$x:00006E45                 db    0
.xdata$x:00006E46                 db    0
.xdata$x:00006E47                 db    0
.xdata$x:00006E48                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$32
.xdata$x:00006E4C                 db  1Ch
.xdata$x:00006E4D                 db    0
.xdata$x:00006E4E                 db    0
.xdata$x:00006E4F                 db    0
.xdata$x:00006E50                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$33
.xdata$x:00006E54                 dd offset off_20+1
.xdata$x:00006E58                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$34
.xdata$x:00006E5C                 db  1Ch
.xdata$x:00006E5D                 db    0
.xdata$x:00006E5E                 db    0
.xdata$x:00006E5F                 db    0
.xdata$x:00006E60                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$35
.xdata$x:00006E64                 dd offset off_20+3
.xdata$x:00006E68                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$36
.xdata$x:00006E6C                 dd offset off_24
.xdata$x:00006E70                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$37
.xdata$x:00006E74                 dd offset off_20+3
.xdata$x:00006E78                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$38
.xdata$x:00006E7C                 dd offset off_24+2
.xdata$x:00006E80                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$39
.xdata$x:00006E84                 dd offset off_20+3
.xdata$x:00006E88                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$40
.xdata$x:00006E8C                 dd offset off_28
.xdata$x:00006E90                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$41
.xdata$x:00006E94                 db 0FFh
.xdata$x:00006E95                 db 0FFh
.xdata$x:00006E96                 db 0FFh
.xdata$x:00006E97                 db 0FFh
.xdata$x:00006E98                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$42
.xdata$x:00006E9C                 db 0FFh
.xdata$x:00006E9D                 db 0FFh
.xdata$x:00006E9E                 db 0FFh
.xdata$x:00006E9F                 db 0FFh
.xdata$x:00006EA0                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$43
.xdata$x:00006EA4                 db 0FFh
.xdata$x:00006EA5                 db 0FFh
.xdata$x:00006EA6                 db 0FFh
.xdata$x:00006EA7                 db 0FFh
.xdata$x:00006EA8                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$44
.xdata$x:00006EAC                 db 0FFh
.xdata$x:00006EAD                 db 0FFh
.xdata$x:00006EAE                 db 0FFh
.xdata$x:00006EAF                 db 0FFh
.xdata$x:00006EB0                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$45
.xdata$x:00006EB4                 db 0FFh
.xdata$x:00006EB5                 db 0FFh
.xdata$x:00006EB6                 db 0FFh
.xdata$x:00006EB7                 db 0FFh
.xdata$x:00006EB8                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$46
.xdata$x:00006EBC                 db 0FFh
.xdata$x:00006EBD                 db 0FFh
.xdata$x:00006EBE                 db 0FFh
.xdata$x:00006EBF                 db 0FFh
.xdata$x:00006EC0                 dd offset __unwindfunclet$?doPrint@Printer@@QAEI_N@Z$47
.xdata$x:00006EC0 _xdata$x        ends
.xdata$x:00006EC0
.xdata$x:00006EC4 ; ===========================================================================
.xdata$x:00006EC4
.xdata$x:00006EC4 ; Segment type: Pure data
.xdata$x:00006EC4 ; Segment permissions: Read
.xdata$x:00006EC4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006EC4                 assume cs:_xdata$x
.xdata$x:00006EC4                 ;org 6EC4h
.xdata$x:00006EC4 ; COMDAT (pick associative to section at 36E0)
.xdata$x:00006EC4 __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db 0FFh
.xdata$x:00006EC4                                         ; DATA XREF: .xdata$x:00006ED4o
.xdata$x:00006EC5                 db 0FFh
.xdata$x:00006EC6                 db 0FFh
.xdata$x:00006EC7                 db 0FFh
.xdata$x:00006EC8                 dd offset __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
.xdata$x:00006ECC __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db  22h ; "
.xdata$x:00006ECC                                         ; DATA XREF: __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z+11o
.xdata$x:00006ECD                 db    5
.xdata$x:00006ECE                 db  93h ; ô
.xdata$x:00006ECF                 db  19h
.xdata$x:00006ED0                 db    1
.xdata$x:00006ED1                 db    0
.xdata$x:00006ED2                 db    0
.xdata$x:00006ED3                 db    0
.xdata$x:00006ED4                 dd offset __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.xdata$x:00006ED8                 db    0
.xdata$x:00006ED9                 db    0
.xdata$x:00006EDA                 db    0
.xdata$x:00006EDB                 db    0
.xdata$x:00006EDC                 db    0
.xdata$x:00006EDD                 db    0
.xdata$x:00006EDE                 db    0
.xdata$x:00006EDF                 db    0
.xdata$x:00006EE0                 db    0
.xdata$x:00006EE1                 db    0
.xdata$x:00006EE2                 db    0
.xdata$x:00006EE3                 db    0
.xdata$x:00006EE4                 db    0
.xdata$x:00006EE5                 db    0
.xdata$x:00006EE6                 db    0
.xdata$x:00006EE7                 db    0
.xdata$x:00006EE8                 db    0
.xdata$x:00006EE9                 db    0
.xdata$x:00006EEA                 db    0
.xdata$x:00006EEB                 db    0
.xdata$x:00006EEC                 db    0
.xdata$x:00006EED                 db    0
.xdata$x:00006EEE                 db    0
.xdata$x:00006EEF                 db    0
.xdata$x:00006EEF _xdata$x        ends
.xdata$x:00006EEF
.xdata$x:00006EF0 ; ===========================================================================
.xdata$x:00006EF0
.xdata$x:00006EF0 ; Segment type: Pure data
.xdata$x:00006EF0 ; Segment permissions: Read
.xdata$x:00006EF0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006EF0                 assume cs:_xdata$x
.xdata$x:00006EF0                 ;org 6EF0h
.xdata$x:00006EF0 ; COMDAT (pick associative to section at 350C)
.xdata$x:00006EF0 __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db 0FFh
.xdata$x:00006EF0                                         ; DATA XREF: .xdata$x:00006F00o
.xdata$x:00006EF1                 db 0FFh
.xdata$x:00006EF2                 db 0FFh
.xdata$x:00006EF3                 db 0FFh
.xdata$x:00006EF4                 dd offset __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
.xdata$x:00006EF8 __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db  22h ; "
.xdata$x:00006EF8                                         ; DATA XREF: __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z+11o
.xdata$x:00006EF9                 db    5
.xdata$x:00006EFA                 db  93h ; ô
.xdata$x:00006EFB                 db  19h
.xdata$x:00006EFC                 db    1
.xdata$x:00006EFD                 db    0
.xdata$x:00006EFE                 db    0
.xdata$x:00006EFF                 db    0
.xdata$x:00006F00                 dd offset __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.xdata$x:00006F04                 db    0
.xdata$x:00006F05                 db    0
.xdata$x:00006F06                 db    0
.xdata$x:00006F07                 db    0
.xdata$x:00006F08                 db    0
.xdata$x:00006F09                 db    0
.xdata$x:00006F0A                 db    0
.xdata$x:00006F0B                 db    0
.xdata$x:00006F0C                 db    0
.xdata$x:00006F0D                 db    0
.xdata$x:00006F0E                 db    0
.xdata$x:00006F0F                 db    0
.xdata$x:00006F10                 db    0
.xdata$x:00006F11                 db    0
.xdata$x:00006F12                 db    0
.xdata$x:00006F13                 db    0
.xdata$x:00006F14                 db    0
.xdata$x:00006F15                 db    0
.xdata$x:00006F16                 db    0
.xdata$x:00006F17                 db    0
.xdata$x:00006F18                 db    0
.xdata$x:00006F19                 db    0
.xdata$x:00006F1A                 db    0
.xdata$x:00006F1B                 db    0
.xdata$x:00006F1B _xdata$x        ends
.xdata$x:00006F1B
.xdata$x:00006F1C ; ===========================================================================
.xdata$x:00006F1C
.xdata$x:00006F1C ; Segment type: Pure data
.xdata$x:00006F1C ; Segment permissions: Read
.xdata$x:00006F1C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006F1C                 assume cs:_xdata$x
.xdata$x:00006F1C                 ;org 6F1Ch
.xdata$x:00006F1C ; COMDAT (pick associative to section at 360C)
.xdata$x:00006F1C __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db 0FFh
.xdata$x:00006F1C                                         ; DATA XREF: .xdata$x:00006F2Co
.xdata$x:00006F1D                 db 0FFh
.xdata$x:00006F1E                 db 0FFh
.xdata$x:00006F1F                 db 0FFh
.xdata$x:00006F20                 dd offset __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0
.xdata$x:00006F24 __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db  22h ; "
.xdata$x:00006F24                                         ; DATA XREF: __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z+11o
.xdata$x:00006F25                 db    5
.xdata$x:00006F26                 db  93h ; ô
.xdata$x:00006F27                 db  19h
.xdata$x:00006F28                 db    1
.xdata$x:00006F29                 db    0
.xdata$x:00006F2A                 db    0
.xdata$x:00006F2B                 db    0
.xdata$x:00006F2C                 dd offset __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.xdata$x:00006F30                 db    0
.xdata$x:00006F31                 db    0
.xdata$x:00006F32                 db    0
.xdata$x:00006F33                 db    0
.xdata$x:00006F34                 db    0
.xdata$x:00006F35                 db    0
.xdata$x:00006F36                 db    0
.xdata$x:00006F37                 db    0
.xdata$x:00006F38                 db    0
.xdata$x:00006F39                 db    0
.xdata$x:00006F3A                 db    0
.xdata$x:00006F3B                 db    0
.xdata$x:00006F3C                 db    0
.xdata$x:00006F3D                 db    0
.xdata$x:00006F3E                 db    0
.xdata$x:00006F3F                 db    0
.xdata$x:00006F40                 db    0
.xdata$x:00006F41                 db    0
.xdata$x:00006F42                 db    0
.xdata$x:00006F43                 db    0
.xdata$x:00006F44                 db    0
.xdata$x:00006F45                 db    0
.xdata$x:00006F46                 db    0
.xdata$x:00006F47                 db    0
.xdata$x:00006F47 _xdata$x        ends
.xdata$x:00006F47
.bss:00006F48 ; ===========================================================================
.bss:00006F48
.bss:00006F48 ; Segment type: Uninitialized
.bss:00006F48 ; Segment permissions: Read/Write
.bss:00006F48 _bss            segment byte public 'BSS' use32
.bss:00006F48                 assume cs:_bss
.bss:00006F48                 ;org 6F48h
.bss:00006F48                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00006F48 __Tuple_alloc   db    ? ;
.bss:00006F49 ; std::_Ignore ignore
.bss:00006F49 _ignore         db    ? ;               ; DATA XREF: std::`dynamic initializer for 'ignore''(void)+3o
.bss:00006F4A _allocator_arg  db    ? ;
.bss:00006F4B _piecewise_construct db    ? ;
.bss:00006F4B _bss            ends
.bss:00006F4B
.rdata:00006F4C ; ===========================================================================
.rdata:00006F4C
.rdata:00006F4C ; Segment type: Pure data
.rdata:00006F4C ; Segment permissions: Read
.rdata:00006F4C _rdata          segment dword public 'DATA' use32
.rdata:00006F4C                 assume cs:_rdata
.rdata:00006F4C                 ;org 6F4Ch
.rdata:00006F4C ; COMDAT (pick largest)
.rdata:00006F4C                 dd offset ??_R4error_category@std@@6B@ ; const std::error_category::`RTTI Complete Object Locator'
.rdata:00006F50                 public ??_7error_category@std@@6B@
.rdata:00006F50 ; const std::error_category::`vftable'
.rdata:00006F50 ??_7error_category@std@@6B@ dd offset ??_Eerror_category@std@@UAEPAXI@Z
.rdata:00006F50                                         ; DATA XREF: std::error_category::error_category(void)+Ao
.rdata:00006F50                                         ; std::error_category::~error_category(void)+Ao
.rdata:00006F50                                         ; std::error_category::`vector deleting destructor'(uint)
.rdata:00006F54                 dd offset __purecall
.rdata:00006F58                 dd offset __purecall
.rdata:00006F5C                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:00006F60                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00006F64                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00006F64 _rdata          ends
.rdata:00006F64
.rdata:00006F68 ; ===========================================================================
.rdata:00006F68
.rdata:00006F68 ; Segment type: Pure data
.rdata:00006F68 ; Segment permissions: Read
.rdata:00006F68 _rdata          segment dword public 'DATA' use32
.rdata:00006F68                 assume cs:_rdata
.rdata:00006F68                 ;org 6F68h
.rdata:00006F68 ; COMDAT (pick largest)
.rdata:00006F68                 dd offset ??_R4_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata:00006F6C                 public ??_7_Generic_error_category@std@@6B@
.rdata:00006F6C ; const std::_Generic_error_category::`vftable'
.rdata:00006F6C ??_7_Generic_error_category@std@@6B@ dd offset ??_E_Generic_error_category@std@@UAEPAXI@Z
.rdata:00006F6C                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+38o
.rdata:00006F6C                                         ; std::_Generic_error_category::`vector deleting destructor'(uint)
.rdata:00006F70                 dd offset ?name@_Generic_error_category@std@@UBEPBDXZ ; std::_Generic_error_category::name(void)
.rdata:00006F74                 dd offset ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.rdata:00006F78                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:00006F7C                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00006F80                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00006F80 _rdata          ends
.rdata:00006F80
.rdata:00006F84 ; ===========================================================================
.rdata:00006F84
.rdata:00006F84 ; Segment type: Pure data
.rdata:00006F84 ; Segment permissions: Read
.rdata:00006F84 _rdata          segment dword public 'DATA' use32
.rdata:00006F84                 assume cs:_rdata
.rdata:00006F84                 ;org 6F84h
.rdata:00006F84 ; COMDAT (pick any)
.rdata:00006F84                 public ??_C@_07DCLBNMLN@generic?$AA@
.rdata:00006F84 ; `string'
.rdata:00006F84 ??_C@_07DCLBNMLN@generic?$AA@ db 'generic',0
.rdata:00006F84                                         ; DATA XREF: std::_Generic_error_category::name(void)+7o
.rdata:00006F84 _rdata          ends
.rdata:00006F84
.rdata:00006F8C ; ===========================================================================
.rdata:00006F8C
.rdata:00006F8C ; Segment type: Pure data
.rdata:00006F8C ; Segment permissions: Read
.rdata:00006F8C _rdata          segment dword public 'DATA' use32
.rdata:00006F8C                 assume cs:_rdata
.rdata:00006F8C                 ;org 6F8Ch
.rdata:00006F8C ; COMDAT (pick any)
.rdata:00006F8C                 public ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
.rdata:00006F8C ; `string'
.rdata:00006F8C ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ db 'unknown error',0
.rdata:00006F8C                                         ; DATA XREF: std::_Generic_error_category::message(int):loc_5DBCo
.rdata:00006F8C                                         ; std::_System_error_category::message(int):loc_5F38o
.rdata:00006F9A                 align 4
.rdata:00006F9A _rdata          ends
.rdata:00006F9A
.rdata:00006F9C ; ===========================================================================
.rdata:00006F9C
.rdata:00006F9C ; Segment type: Pure data
.rdata:00006F9C ; Segment permissions: Read
.rdata:00006F9C _rdata          segment dword public 'DATA' use32
.rdata:00006F9C                 assume cs:_rdata
.rdata:00006F9C                 ;org 6F9Ch
.rdata:00006F9C ; COMDAT (pick largest)
.rdata:00006F9C                 dd offset ??_R4_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata:00006FA0                 public ??_7_Iostream_error_category@std@@6B@
.rdata:00006FA0 ; const std::_Iostream_error_category::`vftable'
.rdata:00006FA0 ??_7_Iostream_error_category@std@@6B@ dd offset ??_E_Iostream_error_category@std@@UAEPAXI@Z
.rdata:00006FA0                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+38o
.rdata:00006FA0                                         ; std::_Iostream_error_category::`vector deleting destructor'(uint)
.rdata:00006FA4                 dd offset ?name@_Iostream_error_category@std@@UBEPBDXZ ; std::_Iostream_error_category::name(void)
.rdata:00006FA8                 dd offset ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message(int)
.rdata:00006FAC                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:00006FB0                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00006FB4                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00006FB4 _rdata          ends
.rdata:00006FB4
.rdata:00006FB8 ; ===========================================================================
.rdata:00006FB8
.rdata:00006FB8 ; Segment type: Pure data
.rdata:00006FB8 ; Segment permissions: Read
.rdata:00006FB8 _rdata          segment dword public 'DATA' use32
.rdata:00006FB8                 assume cs:_rdata
.rdata:00006FB8                 ;org 6FB8h
.rdata:00006FB8 ; COMDAT (pick any)
.rdata:00006FB8                 public ??_C@_08LLGCOLLL@iostream?$AA@
.rdata:00006FB8 ; `string'
.rdata:00006FB8 ??_C@_08LLGCOLLL@iostream?$AA@ db 'iostream',0
.rdata:00006FB8                                         ; DATA XREF: std::_Iostream_error_category::name(void)+7o
.rdata:00006FC1                 align 4
.rdata:00006FC1 _rdata          ends
.rdata:00006FC1
.rdata:00006FC4 ; ===========================================================================
.rdata:00006FC4
.rdata:00006FC4 ; Segment type: Pure data
.rdata:00006FC4 ; Segment permissions: Read
.rdata:00006FC4 _rdata          segment dword public 'DATA' use32
.rdata:00006FC4                 assume cs:_rdata
.rdata:00006FC4                 ;org 6FC4h
.rdata:00006FC4 ; COMDAT (pick any)
.rdata:00006FC4                 public ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
.rdata:00006FC4 ; char `string'[]
.rdata:00006FC4 ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ db 'iostream stream error',0
.rdata:00006FC4                                         ; DATA XREF: std::_Iostream_error_category::message(int)+35o
.rdata:00006FDA                 align 4
.rdata:00006FDA _rdata          ends
.rdata:00006FDA
.rdata:00006FDC ; ===========================================================================
.rdata:00006FDC
.rdata:00006FDC ; Segment type: Pure data
.rdata:00006FDC ; Segment permissions: Read
.rdata:00006FDC _rdata          segment dword public 'DATA' use32
.rdata:00006FDC                 assume cs:_rdata
.rdata:00006FDC                 ;org 6FDCh
.rdata:00006FDC ; COMDAT (pick largest)
.rdata:00006FDC                 dd offset ??_R4_System_error_category@std@@6B@ ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata:00006FE0                 public ??_7_System_error_category@std@@6B@
.rdata:00006FE0 ; const std::_System_error_category::`vftable'
.rdata:00006FE0 ??_7_System_error_category@std@@6B@ dd offset ??_E_System_error_category@std@@UAEPAXI@Z
.rdata:00006FE0                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+38o
.rdata:00006FE0                                         ; std::_System_error_category::`vector deleting destructor'(uint)
.rdata:00006FE4                 dd offset ?name@_System_error_category@std@@UBEPBDXZ ; std::_System_error_category::name(void)
.rdata:00006FE8                 dd offset ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message(int)
.rdata:00006FEC                 dd offset ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition(int)
.rdata:00006FF0                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00006FF4                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00006FF4 _rdata          ends
.rdata:00006FF4
.rdata:00006FF8 ; ===========================================================================
.rdata:00006FF8
.rdata:00006FF8 ; Segment type: Pure data
.rdata:00006FF8 ; Segment permissions: Read
.rdata:00006FF8 _rdata          segment dword public 'DATA' use32
.rdata:00006FF8                 assume cs:_rdata
.rdata:00006FF8                 ;org 6FF8h
.rdata:00006FF8 ; COMDAT (pick any)
.rdata:00006FF8                 public ??_C@_06FHFOAHML@system?$AA@
.rdata:00006FF8 ; `string'
.rdata:00006FF8 ??_C@_06FHFOAHML@system?$AA@ db 'system',0
.rdata:00006FF8                                         ; DATA XREF: std::_System_error_category::name(void)+7o
.rdata:00006FFF                 align 10h
.rdata:00006FFF _rdata          ends
.rdata:00006FFF
.bss:00007000 ; ===========================================================================
.bss:00007000
.bss:00007000 ; Segment type: Uninitialized
.bss:00007000 ; Segment permissions: Read/Write
.bss:00007000 _bss            segment dword public 'BSS' use32
.bss:00007000                 assume cs:_bss
.bss:00007000                 ;org 7000h
.bss:00007000 ; COMDAT (pick any)
.bss:00007000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00007000                 public ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.bss:00007000 ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.bss:00007000 ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A db    ? ;
.bss:00007000                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o
.bss:00007000                                         ; `dynamic atexit destructor for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o ...
.bss:00007001                 db    ? ;
.bss:00007002                 db    ? ;
.bss:00007003                 db    ? ;
.bss:00007003 _bss            ends
.bss:00007003
.bss:00007004 ; ===========================================================================
.bss:00007004
.bss:00007004 ; Segment type: Uninitialized
.bss:00007004 ; Segment permissions: Read/Write
.bss:00007004 _bss            segment dword public 'BSS' use32
.bss:00007004                 assume cs:_bss
.bss:00007004                 ;org 7004h
.bss:00007004 ; COMDAT (pick any)
.bss:00007004                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00007004                 public ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.bss:00007004 ; std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object
.bss:00007004 ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A db    ? ;
.bss:00007004                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:00007004                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:00007005                 db    ? ;
.bss:00007006                 db    ? ;
.bss:00007007                 db    ? ;
.bss:00007007 _bss            ends
.bss:00007007
.bss:00007008 ; ===========================================================================
.bss:00007008
.bss:00007008 ; Segment type: Uninitialized
.bss:00007008 ; Segment permissions: Read/Write
.bss:00007008 _bss            segment dword public 'BSS' use32
.bss:00007008                 assume cs:_bss
.bss:00007008                 ;org 7008h
.bss:00007008 ; COMDAT (pick any)
.bss:00007008                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00007008                 public ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.bss:00007008 ; std::_System_error_category std::_Error_objects<int>::_System_object
.bss:00007008 ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A db    ? ;
.bss:00007008                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o
.bss:00007008                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o ...
.bss:00007009                 db    ? ;
.bss:0000700A                 db    ? ;
.bss:0000700B                 db    ? ;
.bss:0000700B _bss            ends
.bss:0000700B
.rdata:0000700C ; ===========================================================================
.rdata:0000700C
.rdata:0000700C ; Segment type: Pure data
.rdata:0000700C ; Segment permissions: Read
.rdata:0000700C _rdata          segment dword public 'DATA' use32
.rdata:0000700C                 assume cs:_rdata
.rdata:0000700C                 ;org 700Ch
.rdata:0000700C ; COMDAT (pick any)
.rdata:0000700C                 public ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
.rdata:0000700C ; public: static unsigned int const std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::npos
.rdata:0000700C ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB dd 0FFFFFFFFh
.rdata:0000700C                                         ; DATA XREF: Printer::doPrint(bool)+172Er
.rdata:0000700C                                         ; Printer::doPrint(bool)+180Br ...
.rdata:0000700C _rdata          ends
.rdata:0000700C
.bss:00007010 ; ===========================================================================
.bss:00007010
.bss:00007010 ; Segment type: Uninitialized
.bss:00007010 ; Segment permissions: Read/Write
.bss:00007010 _bss            segment dword public 'BSS' use32
.bss:00007010                 assume cs:_bss
.bss:00007010                 ;org 7010h
.bss:00007010 ; COMDAT (pick any)
.bss:00007010                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00007010                 public ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.bss:00007010 ; std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id
.bss:00007010 ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:00007010                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+5o
.bss:00007011                 db    ? ;
.bss:00007012                 db    ? ;
.bss:00007013                 db    ? ;
.bss:00007013 _bss            ends
.bss:00007013
.bss:00007014 ; ===========================================================================
.bss:00007014
.bss:00007014 ; Segment type: Uninitialized
.bss:00007014 ; Segment permissions: Read/Write
.bss:00007014 _bss            segment dword public 'BSS' use32
.bss:00007014                 assume cs:_bss
.bss:00007014                 ;org 7014h
.bss:00007014 ; COMDAT (pick any)
.bss:00007014                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00007014                 public ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.bss:00007014 ; std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id
.bss:00007014 ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:00007014                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+5o
.bss:00007015                 db    ? ;
.bss:00007016                 db    ? ;
.bss:00007017                 db    ? ;
.bss:00007017 _bss            ends
.bss:00007017
.rdata:00007018 ; ===========================================================================
.rdata:00007018
.rdata:00007018 ; Segment type: Pure data
.rdata:00007018 ; Segment permissions: Read
.rdata:00007018 _rdata          segment dword public 'DATA' use32
.rdata:00007018                 assume cs:_rdata
.rdata:00007018                 ;org 7018h
.rdata:00007018 ; COMDAT (pick any)
.rdata:00007018                 public ??_C@_11LOCGONAA@?$AA?$AA@
.rdata:00007018 ; wchar_t `string'
.rdata:00007018 ??_C@_11LOCGONAA@?$AA?$AA@ dw 0         ; DATA XREF: PrintSettings::isFooterPresent(void)+9o
.rdata:00007018                                         ; PrintSettings::isFooterPresent(void)+26o ...
.rdata:0000701A                 align 4
.rdata:0000701A _rdata          ends
.rdata:0000701A
.rdata:0000701C ; ===========================================================================
.rdata:0000701C
.rdata:0000701C ; Segment type: Pure data
.rdata:0000701C ; Segment permissions: Read
.rdata:0000701C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000701C _rdata          segment para public 'DATA' use32
.rdata:0000701C                 assume cs:_rdata
.rdata:0000701C                 ;org 701Ch
.rdata:0000701C ; COMDAT (pick any)
.rdata:0000701C                 public ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000701C ; wchar_t `string'
.rdata:0000701C ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000701C                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+Co
.rdata:0000701C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+12o ...
.rdata:0000701C                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000701C                 unicode 0, <clude\xstring>,0
.rdata:000070AA                 align 4
.rdata:000070AA _rdata          ends
.rdata:000070AA
.bss:000070AC ; ===========================================================================
.bss:000070AC
.bss:000070AC ; Segment type: Uninitialized
.bss:000070AC ; Segment permissions: Read/Write
.bss:000070AC _bss            segment dword public 'BSS' use32
.bss:000070AC                 assume cs:_bss
.bss:000070AC                 ;org 70ACh
.bss:000070AC ; COMDAT (pick any)
.bss:000070AC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000070AC                 public ?id@?$numpunct@D@std@@2V0locale@2@A
.bss:000070AC ; std::locale::id std::numpunct<char>::id
.bss:000070AC ?id@?$numpunct@D@std@@2V0locale@2@A db    ? ;
.bss:000070AC                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)+5o
.bss:000070AD                 db    ? ;
.bss:000070AE                 db    ? ;
.bss:000070AF                 db    ? ;
.bss:000070AF _bss            ends
.bss:000070AF
.bss:000070B0 ; ===========================================================================
.bss:000070B0
.bss:000070B0 ; Segment type: Uninitialized
.bss:000070B0 ; Segment permissions: Read/Write
.bss:000070B0 _bss            segment dword public 'BSS' use32
.bss:000070B0                 assume cs:_bss
.bss:000070B0                 ;org 70B0h
.bss:000070B0 ; COMDAT (pick any)
.bss:000070B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000070B0                 public ?id@?$numpunct@_W@std@@2V0locale@2@A
.bss:000070B0 ; std::locale::id std::numpunct<wchar_t>::id
.bss:000070B0 ?id@?$numpunct@_W@std@@2V0locale@2@A db    ? ;
.bss:000070B0                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)+5o
.bss:000070B1                 db    ? ;
.bss:000070B2                 db    ? ;
.bss:000070B3                 db    ? ;
.bss:000070B3 _bss            ends
.bss:000070B3
.rdata:000070B4 ; ===========================================================================
.rdata:000070B4
.rdata:000070B4 ; Segment type: Pure data
.rdata:000070B4 ; Segment permissions: Read
.rdata:000070B4 _rdata          segment dword public 'DATA' use32
.rdata:000070B4                 assume cs:_rdata
.rdata:000070B4                 ;org 70B4h
.rdata:000070B4 ; COMDAT (pick any)
.rdata:000070B4                 public ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
.rdata:000070B4 ; char `string'[]
.rdata:000070B4 ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ db 'string too long',0
.rdata:000070B4                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+7o
.rdata:000070B4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+7o
.rdata:000070B4 _rdata          ends
.rdata:000070B4
.rdata:000070C4 ; ===========================================================================
.rdata:000070C4
.rdata:000070C4 ; Segment type: Pure data
.rdata:000070C4 ; Segment permissions: Read
.rdata:000070C4 _rdata          segment dword public 'DATA' use32
.rdata:000070C4                 assume cs:_rdata
.rdata:000070C4                 ;org 70C4h
.rdata:000070C4 ; COMDAT (pick any)
.rdata:000070C4                 public ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
.rdata:000070C4 ; char `string'[]
.rdata:000070C4 ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ db 'invalid string position',0
.rdata:000070C4                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+7o
.rdata:000070C4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+7o
.rdata:000070C4 _rdata          ends
.rdata:000070C4
.rdata:000070DC ; ===========================================================================
.rdata:000070DC
.rdata:000070DC ; Segment type: Pure data
.rdata:000070DC ; Segment permissions: Read
.rdata:000070DC _rdata          segment dword public 'DATA' use32
.rdata:000070DC                 assume cs:_rdata
.rdata:000070DC                 ;org 70DCh
.rdata:000070DC ; COMDAT (pick any)
.rdata:000070DC                 public ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
.rdata:000070DC ; wchar_t `string'
.rdata:000070DC ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@:
.rdata:000070DC                                         ; DATA XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+11o
.rdata:000070DC                                         ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)+11o
.rdata:000070DC                 unicode 0, <invalid null pointer>,0
.rdata:00007106                 align 4
.rdata:00007106 _rdata          ends
.rdata:00007106
.rdata$r:00007108 ; ===========================================================================
.rdata$r:00007108
.rdata$r:00007108 ; Segment type: Pure data
.rdata$r:00007108 ; Segment permissions: Read
.rdata$r:00007108 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007108                 assume cs:_rdata$r
.rdata$r:00007108                 ;org 7108h
.rdata$r:00007108 ; COMDAT (pick any)
.rdata$r:00007108                 public ??_R4error_category@std@@6B@
.rdata$r:00007108 ; const std::error_category::`RTTI Complete Object Locator'
.rdata$r:00007108 ??_R4error_category@std@@6B@ db    0    ; DATA XREF: .rdata:00006F4Co
.rdata$r:00007109                 db    0
.rdata$r:0000710A                 db    0
.rdata$r:0000710B                 db    0
.rdata$r:0000710C                 db    0
.rdata$r:0000710D                 db    0
.rdata$r:0000710E                 db    0
.rdata$r:0000710F                 db    0
.rdata$r:00007110                 db    0
.rdata$r:00007111                 db    0
.rdata$r:00007112                 db    0
.rdata$r:00007113                 db    0
.rdata$r:00007114                 dd offset ??_R0?AVerror_category@std@@@8 ; std::error_category `RTTI Type Descriptor'
.rdata$r:00007118                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007118 _rdata$r        ends
.rdata$r:00007118
.data$r:0000711C ; ===========================================================================
.data$r:0000711C
.data$r:0000711C ; Segment type: Pure data
.data$r:0000711C ; Segment permissions: Read/Write
.data$r:0000711C _data$r         segment dword public 'DATA' use32
.data$r:0000711C                 assume cs:_data$r
.data$r:0000711C                 ;org 711Ch
.data$r:0000711C ; COMDAT (pick any)
.data$r:0000711C                 public ??_R0?AVerror_category@std@@@8
.data$r:0000711C ; class std::error_category `RTTI Type Descriptor'
.data$r:0000711C ??_R0?AVerror_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000711C                                         ; DATA XREF: .rdata$r:00007114o
.data$r:0000711C                                         ; .rdata$r:std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000711C                                         ; const type_info::`vftable'
.data$r:00007120                 db    0
.data$r:00007121                 db    0
.data$r:00007122                 db    0
.data$r:00007123                 db    0
.data$r:00007124                 db  2Eh ; .
.data$r:00007125                 db  3Fh ; ?
.data$r:00007126                 db  41h ; A
.data$r:00007127                 db  56h ; V
.data$r:00007128                 db  65h ; e
.data$r:00007129                 db  72h ; r
.data$r:0000712A                 db  72h ; r
.data$r:0000712B                 db  6Fh ; o
.data$r:0000712C                 db  72h ; r
.data$r:0000712D                 db  5Fh ; _
.data$r:0000712E                 db  63h ; c
.data$r:0000712F                 db  61h ; a
.data$r:00007130                 db  74h ; t
.data$r:00007131                 db  65h ; e
.data$r:00007132                 db  67h ; g
.data$r:00007133                 db  6Fh ; o
.data$r:00007134                 db  72h ; r
.data$r:00007135                 db  79h ; y
.data$r:00007136                 db  40h ; @
.data$r:00007137                 db  73h ; s
.data$r:00007138                 db  74h ; t
.data$r:00007139                 db  64h ; d
.data$r:0000713A                 db  40h ; @
.data$r:0000713B                 db  40h ; @
.data$r:0000713C                 db    0
.data$r:0000713D                 align 10h
.data$r:0000713D _data$r         ends
.data$r:0000713D
.rdata$r:00007140 ; ===========================================================================
.rdata$r:00007140
.rdata$r:00007140 ; Segment type: Pure data
.rdata$r:00007140 ; Segment permissions: Read
.rdata$r:00007140 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007140                 assume cs:_rdata$r
.rdata$r:00007140                 ;org 7140h
.rdata$r:00007140 ; COMDAT (pick any)
.rdata$r:00007140                 public ??_R3error_category@std@@8
.rdata$r:00007140 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007140 ??_R3error_category@std@@8 db    0      ; DATA XREF: .rdata$r:00007118o
.rdata$r:00007140                                         ; .rdata$r:00007170o
.rdata$r:00007141                 db    0
.rdata$r:00007142                 db    0
.rdata$r:00007143                 db    0
.rdata$r:00007144                 db    0
.rdata$r:00007145                 db    0
.rdata$r:00007146                 db    0
.rdata$r:00007147                 db    0
.rdata$r:00007148                 db    1
.rdata$r:00007149                 db    0
.rdata$r:0000714A                 db    0
.rdata$r:0000714B                 db    0
.rdata$r:0000714C                 dd offset ??_R2error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
.rdata$r:0000714C _rdata$r        ends
.rdata$r:0000714C
.rdata$r:00007150 ; ===========================================================================
.rdata$r:00007150
.rdata$r:00007150 ; Segment type: Pure data
.rdata$r:00007150 ; Segment permissions: Read
.rdata$r:00007150 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007150                 assume cs:_rdata$r
.rdata$r:00007150                 ;org 7150h
.rdata$r:00007150 ; COMDAT (pick any)
.rdata$r:00007150                 public ??_R2error_category@std@@8
.rdata$r:00007150 ; std::error_category::`RTTI Base Class Array'
.rdata$r:00007150 ??_R2error_category@std@@8 dd offset ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:00007150                                         ; DATA XREF: .rdata$r:0000714Co
.rdata$r:00007150                                         ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007154                 db    0
.rdata$r:00007155                 align 4
.rdata$r:00007155 _rdata$r        ends
.rdata$r:00007155
.rdata$r:00007158 ; ===========================================================================
.rdata$r:00007158
.rdata$r:00007158 ; Segment type: Pure data
.rdata$r:00007158 ; Segment permissions: Read
.rdata$r:00007158 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007158                 assume cs:_rdata$r
.rdata$r:00007158                 ;org 7158h
.rdata$r:00007158 ; COMDAT (pick any)
.rdata$r:00007158                 public ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:00007158 ; std::error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00007158 ??_R1A@?0A@EA@error_category@std@@8 dd offset ??_R0?AVerror_category@std@@@8
.rdata$r:00007158                                         ; DATA XREF: .rdata$r:std::error_category::`RTTI Base Class Array'o
.rdata$r:00007158                                         ; .rdata$r:000071C8o ...
.rdata$r:00007158                                         ; std::error_category `RTTI Type Descriptor'
.rdata$r:0000715C                 db    0
.rdata$r:0000715D                 db    0
.rdata$r:0000715E                 db    0
.rdata$r:0000715F                 db    0
.rdata$r:00007160                 db    0
.rdata$r:00007161                 db    0
.rdata$r:00007162                 db    0
.rdata$r:00007163                 db    0
.rdata$r:00007164                 db 0FFh
.rdata$r:00007165                 db 0FFh
.rdata$r:00007166                 db 0FFh
.rdata$r:00007167                 db 0FFh
.rdata$r:00007168                 db    0
.rdata$r:00007169                 db    0
.rdata$r:0000716A                 db    0
.rdata$r:0000716B                 db    0
.rdata$r:0000716C                 db  40h ; @
.rdata$r:0000716D                 db    0
.rdata$r:0000716E                 db    0
.rdata$r:0000716F                 db    0
.rdata$r:00007170                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007170 _rdata$r        ends
.rdata$r:00007170
.rdata$r:00007174 ; ===========================================================================
.rdata$r:00007174
.rdata$r:00007174 ; Segment type: Pure data
.rdata$r:00007174 ; Segment permissions: Read
.rdata$r:00007174 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007174                 assume cs:_rdata$r
.rdata$r:00007174                 ;org 7174h
.rdata$r:00007174 ; COMDAT (pick any)
.rdata$r:00007174                 public ??_R4_Generic_error_category@std@@6B@
.rdata$r:00007174 ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata$r:00007174 ??_R4_Generic_error_category@std@@6B@ db    0
.rdata$r:00007174                                         ; DATA XREF: .rdata:00006F68o
.rdata$r:00007175                 db    0
.rdata$r:00007176                 db    0
.rdata$r:00007177                 db    0
.rdata$r:00007178                 db    0
.rdata$r:00007179                 db    0
.rdata$r:0000717A                 db    0
.rdata$r:0000717B                 db    0
.rdata$r:0000717C                 db    0
.rdata$r:0000717D                 db    0
.rdata$r:0000717E                 db    0
.rdata$r:0000717F                 db    0
.rdata$r:00007180                 dd offset ??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:00007184                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007184 _rdata$r        ends
.rdata$r:00007184
.data$r:00007188 ; ===========================================================================
.data$r:00007188
.data$r:00007188 ; Segment type: Pure data
.data$r:00007188 ; Segment permissions: Read/Write
.data$r:00007188 _data$r         segment dword public 'DATA' use32
.data$r:00007188                 assume cs:_data$r
.data$r:00007188                 ;org 7188h
.data$r:00007188 ; COMDAT (pick any)
.data$r:00007188                 public ??_R0?AV_Generic_error_category@std@@@8
.data$r:00007188 ; class std::_Generic_error_category `RTTI Type Descriptor'
.data$r:00007188 ??_R0?AV_Generic_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00007188                                         ; DATA XREF: .rdata$r:00007180o
.data$r:00007188                                         ; .rdata$r:std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00007188                                         ; const type_info::`vftable'
.data$r:0000718C                 align 10h
.data$r:00007190 a_?av_generic_e db '.?AV_Generic_error_category@std@@',0
.data$r:000071B2                 align 4
.data$r:000071B2 _data$r         ends
.data$r:000071B2
.rdata$r:000071B4 ; ===========================================================================
.rdata$r:000071B4
.rdata$r:000071B4 ; Segment type: Pure data
.rdata$r:000071B4 ; Segment permissions: Read
.rdata$r:000071B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000071B4                 assume cs:_rdata$r
.rdata$r:000071B4                 ;org 71B4h
.rdata$r:000071B4 ; COMDAT (pick any)
.rdata$r:000071B4                 public ??_R3_Generic_error_category@std@@8
.rdata$r:000071B4 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:000071B4 ??_R3_Generic_error_category@std@@8 db    0
.rdata$r:000071B4                                         ; DATA XREF: .rdata$r:00007184o
.rdata$r:000071B4                                         ; .rdata$r:000071E8o
.rdata$r:000071B5                 db    0
.rdata$r:000071B6                 db    0
.rdata$r:000071B7                 db    0
.rdata$r:000071B8                 db    0
.rdata$r:000071B9                 db    0
.rdata$r:000071BA                 db    0
.rdata$r:000071BB                 db    0
.rdata$r:000071BC                 db    2
.rdata$r:000071BD                 db    0
.rdata$r:000071BE                 db    0
.rdata$r:000071BF                 db    0
.rdata$r:000071C0                 dd offset ??_R2_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:000071C0 _rdata$r        ends
.rdata$r:000071C0
.rdata$r:000071C4 ; ===========================================================================
.rdata$r:000071C4
.rdata$r:000071C4 ; Segment type: Pure data
.rdata$r:000071C4 ; Segment permissions: Read
.rdata$r:000071C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000071C4                 assume cs:_rdata$r
.rdata$r:000071C4                 ;org 71C4h
.rdata$r:000071C4 ; COMDAT (pick any)
.rdata$r:000071C4                 public ??_R2_Generic_error_category@std@@8
.rdata$r:000071C4 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:000071C4 ??_R2_Generic_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:000071C4                                         ; DATA XREF: .rdata$r:000071C0o
.rdata$r:000071C4                                         ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000071C8                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000071CC                 db    0
.rdata$r:000071CD                 align 10h
.rdata$r:000071CD _rdata$r        ends
.rdata$r:000071CD
.rdata$r:000071D0 ; ===========================================================================
.rdata$r:000071D0
.rdata$r:000071D0 ; Segment type: Pure data
.rdata$r:000071D0 ; Segment permissions: Read
.rdata$r:000071D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000071D0                 assume cs:_rdata$r
.rdata$r:000071D0                 ;org 71D0h
.rdata$r:000071D0 ; COMDAT (pick any)
.rdata$r:000071D0                 public ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:000071D0 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000071D0 ??_R1A@?0A@EA@_Generic_error_category@std@@8 dd offset ??_R0?AV_Generic_error_category@std@@@8
.rdata$r:000071D0                                         ; DATA XREF: .rdata$r:std::_Generic_error_category::`RTTI Base Class Array'o
.rdata$r:000071D0                                         ; .rdata$r:00007240o ...
.rdata$r:000071D0                                         ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:000071D4                 db    1
.rdata$r:000071D5                 db    0
.rdata$r:000071D6                 db    0
.rdata$r:000071D7                 db    0
.rdata$r:000071D8                 db    0
.rdata$r:000071D9                 db    0
.rdata$r:000071DA                 db    0
.rdata$r:000071DB                 db    0
.rdata$r:000071DC                 db 0FFh
.rdata$r:000071DD                 db 0FFh
.rdata$r:000071DE                 db 0FFh
.rdata$r:000071DF                 db 0FFh
.rdata$r:000071E0                 db    0
.rdata$r:000071E1                 db    0
.rdata$r:000071E2                 db    0
.rdata$r:000071E3                 db    0
.rdata$r:000071E4                 db  40h ; @
.rdata$r:000071E5                 db    0
.rdata$r:000071E6                 db    0
.rdata$r:000071E7                 db    0
.rdata$r:000071E8                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:000071E8 _rdata$r        ends
.rdata$r:000071E8
.rdata$r:000071EC ; ===========================================================================
.rdata$r:000071EC
.rdata$r:000071EC ; Segment type: Pure data
.rdata$r:000071EC ; Segment permissions: Read
.rdata$r:000071EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000071EC                 assume cs:_rdata$r
.rdata$r:000071EC                 ;org 71ECh
.rdata$r:000071EC ; COMDAT (pick any)
.rdata$r:000071EC                 public ??_R4_Iostream_error_category@std@@6B@
.rdata$r:000071EC ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata$r:000071EC ??_R4_Iostream_error_category@std@@6B@ db    0
.rdata$r:000071EC                                         ; DATA XREF: .rdata:00006F9Co
.rdata$r:000071ED                 db    0
.rdata$r:000071EE                 db    0
.rdata$r:000071EF                 db    0
.rdata$r:000071F0                 db    0
.rdata$r:000071F1                 db    0
.rdata$r:000071F2                 db    0
.rdata$r:000071F3                 db    0
.rdata$r:000071F4                 db    0
.rdata$r:000071F5                 db    0
.rdata$r:000071F6                 db    0
.rdata$r:000071F7                 db    0
.rdata$r:000071F8                 dd offset ??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:000071FC                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:000071FC _rdata$r        ends
.rdata$r:000071FC
.data$r:00007200 ; ===========================================================================
.data$r:00007200
.data$r:00007200 ; Segment type: Pure data
.data$r:00007200 ; Segment permissions: Read/Write
.data$r:00007200 _data$r         segment dword public 'DATA' use32
.data$r:00007200                 assume cs:_data$r
.data$r:00007200                 ;org 7200h
.data$r:00007200 ; COMDAT (pick any)
.data$r:00007200                 public ??_R0?AV_Iostream_error_category@std@@@8
.data$r:00007200 ; class std::_Iostream_error_category `RTTI Type Descriptor'
.data$r:00007200 ??_R0?AV_Iostream_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00007200                                         ; DATA XREF: .rdata$r:000071F8o
.data$r:00007200                                         ; .rdata$r:std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00007200                                         ; const type_info::`vftable'
.data$r:00007204                 align 8
.data$r:00007208 a_?av_iostream_ db '.?AV_Iostream_error_category@std@@',0
.data$r:0000722B                 align 4
.data$r:0000722B _data$r         ends
.data$r:0000722B
.rdata$r:0000722C ; ===========================================================================
.rdata$r:0000722C
.rdata$r:0000722C ; Segment type: Pure data
.rdata$r:0000722C ; Segment permissions: Read
.rdata$r:0000722C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000722C                 assume cs:_rdata$r
.rdata$r:0000722C                 ;org 722Ch
.rdata$r:0000722C ; COMDAT (pick any)
.rdata$r:0000722C                 public ??_R3_Iostream_error_category@std@@8
.rdata$r:0000722C ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000722C ??_R3_Iostream_error_category@std@@8 db    0
.rdata$r:0000722C                                         ; DATA XREF: .rdata$r:000071FCo
.rdata$r:0000722C                                         ; .rdata$r:00007264o
.rdata$r:0000722D                 db    0
.rdata$r:0000722E                 db    0
.rdata$r:0000722F                 db    0
.rdata$r:00007230                 db    0
.rdata$r:00007231                 db    0
.rdata$r:00007232                 db    0
.rdata$r:00007233                 db    0
.rdata$r:00007234                 db    3
.rdata$r:00007235                 db    0
.rdata$r:00007236                 db    0
.rdata$r:00007237                 db    0
.rdata$r:00007238                 dd offset ??_R2_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:00007238 _rdata$r        ends
.rdata$r:00007238
.rdata$r:0000723C ; ===========================================================================
.rdata$r:0000723C
.rdata$r:0000723C ; Segment type: Pure data
.rdata$r:0000723C ; Segment permissions: Read
.rdata$r:0000723C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000723C                 assume cs:_rdata$r
.rdata$r:0000723C                 ;org 723Ch
.rdata$r:0000723C ; COMDAT (pick any)
.rdata$r:0000723C                 public ??_R2_Iostream_error_category@std@@8
.rdata$r:0000723C ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:0000723C ??_R2_Iostream_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:0000723C                                         ; DATA XREF: .rdata$r:00007238o
.rdata$r:0000723C                                         ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007240                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007244                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00007248                 db    0
.rdata$r:00007249                 align 4
.rdata$r:00007249 _rdata$r        ends
.rdata$r:00007249
.rdata$r:0000724C ; ===========================================================================
.rdata$r:0000724C
.rdata$r:0000724C ; Segment type: Pure data
.rdata$r:0000724C ; Segment permissions: Read
.rdata$r:0000724C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000724C                 assume cs:_rdata$r
.rdata$r:0000724C                 ;org 724Ch
.rdata$r:0000724C ; COMDAT (pick any)
.rdata$r:0000724C                 public ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:0000724C ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000724C ??_R1A@?0A@EA@_Iostream_error_category@std@@8 dd offset ??_R0?AV_Iostream_error_category@std@@@8
.rdata$r:0000724C                                         ; DATA XREF: .rdata$r:std::_Iostream_error_category::`RTTI Base Class Array'o
.rdata$r:0000724C                                         ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:00007250                 db    2
.rdata$r:00007251                 db    0
.rdata$r:00007252                 db    0
.rdata$r:00007253                 db    0
.rdata$r:00007254                 db    0
.rdata$r:00007255                 db    0
.rdata$r:00007256                 db    0
.rdata$r:00007257                 db    0
.rdata$r:00007258                 db 0FFh
.rdata$r:00007259                 db 0FFh
.rdata$r:0000725A                 db 0FFh
.rdata$r:0000725B                 db 0FFh
.rdata$r:0000725C                 db    0
.rdata$r:0000725D                 db    0
.rdata$r:0000725E                 db    0
.rdata$r:0000725F                 db    0
.rdata$r:00007260                 db  40h ; @
.rdata$r:00007261                 db    0
.rdata$r:00007262                 db    0
.rdata$r:00007263                 db    0
.rdata$r:00007264                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007264 _rdata$r        ends
.rdata$r:00007264
.rdata$r:00007268 ; ===========================================================================
.rdata$r:00007268
.rdata$r:00007268 ; Segment type: Pure data
.rdata$r:00007268 ; Segment permissions: Read
.rdata$r:00007268 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00007268                 assume cs:_rdata$r
.rdata$r:00007268                 ;org 7268h
.rdata$r:00007268 ; COMDAT (pick any)
.rdata$r:00007268                 public ??_R4_System_error_category@std@@6B@
.rdata$r:00007268 ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata$r:00007268 ??_R4_System_error_category@std@@6B@ db    0 ; DATA XREF: .rdata:00006FDCo
.rdata$r:00007269                 db    0
.rdata$r:0000726A                 db    0
.rdata$r:0000726B                 db    0
.rdata$r:0000726C                 db    0
.rdata$r:0000726D                 db    0
.rdata$r:0000726E                 db    0
.rdata$r:0000726F                 db    0
.rdata$r:00007270                 db    0
.rdata$r:00007271                 db    0
.rdata$r:00007272                 db    0
.rdata$r:00007273                 db    0
.rdata$r:00007274                 dd offset ??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:00007278                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00007278 _rdata$r        ends
.rdata$r:00007278
.data$r:0000727C ; ===========================================================================
.data$r:0000727C
.data$r:0000727C ; Segment type: Pure data
.data$r:0000727C ; Segment permissions: Read/Write
.data$r:0000727C _data$r         segment dword public 'DATA' use32
.data$r:0000727C                 assume cs:_data$r
.data$r:0000727C                 ;org 727Ch
.data$r:0000727C ; COMDAT (pick any)
.data$r:0000727C                 public ??_R0?AV_System_error_category@std@@@8
.data$r:0000727C ; class std::_System_error_category `RTTI Type Descriptor'
.data$r:0000727C ??_R0?AV_System_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000727C                                         ; DATA XREF: .rdata$r:00007274o
.data$r:0000727C                                         ; .rdata$r:std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000727C                                         ; const type_info::`vftable'
.data$r:00007280                 db    0
.data$r:00007281                 db    0
.data$r:00007282                 db    0
.data$r:00007283                 db    0
.data$r:00007284                 db  2Eh ; .
.data$r:00007285                 db  3Fh ; ?
.data$r:00007286                 db  41h ; A
.data$r:00007287                 db  56h ; V
.data$r:00007288                 db  5Fh ; _
.data$r:00007289                 db  53h ; S
.data$r:0000728A                 db  79h ; y
.data$r:0000728B                 db  73h ; s
.data$r:0000728C                 db  74h ; t
.data$r:0000728D                 db  65h ; e
.data$r:0000728E                 db  6Dh ; m
.data$r:0000728F                 db  5Fh ; _
.data$r:00007290                 db  65h ; e
.data$r:00007291                 db  72h ; r
.data$r:00007292                 db  72h ; r
.data$r:00007293                 db  6Fh ; o
.data$r:00007294                 db  72h ; r
.data$r:00007295                 db  5Fh ; _
.data$r:00007296                 db  63h ; c
.data$r:00007297                 db  61h ; a
.data$r:00007298                 db  74h ; t
.data$r:00007299                 db  65h ; e
.data$r:0000729A                 db  67h ; g
.data$r:0000729B                 db  6Fh ; o
.data$r:0000729C                 db  72h ; r
.data$r:0000729D                 db  79h ; y
.data$r:0000729E                 db  40h ; @
.data$r:0000729F                 db  73h ; s
.data$r:000072A0                 db  74h ; t
.data$r:000072A1                 db  64h ; d
.data$r:000072A2                 db  40h ; @
.data$r:000072A3                 db  40h ; @
.data$r:000072A4                 db    0
.data$r:000072A5                 align 4
.data$r:000072A5 _data$r         ends
.data$r:000072A5
.rdata$r:000072A8 ; ===========================================================================
.rdata$r:000072A8
.rdata$r:000072A8 ; Segment type: Pure data
.rdata$r:000072A8 ; Segment permissions: Read
.rdata$r:000072A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000072A8                 assume cs:_rdata$r
.rdata$r:000072A8                 ;org 72A8h
.rdata$r:000072A8 ; COMDAT (pick any)
.rdata$r:000072A8                 public ??_R3_System_error_category@std@@8
.rdata$r:000072A8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:000072A8 ??_R3_System_error_category@std@@8 db    0 ; DATA XREF: .rdata$r:00007278o
.rdata$r:000072A8                                         ; .rdata$r:000072E0o
.rdata$r:000072A9                 db    0
.rdata$r:000072AA                 db    0
.rdata$r:000072AB                 db    0
.rdata$r:000072AC                 db    0
.rdata$r:000072AD                 db    0
.rdata$r:000072AE                 db    0
.rdata$r:000072AF                 db    0
.rdata$r:000072B0                 db    3
.rdata$r:000072B1                 db    0
.rdata$r:000072B2                 db    0
.rdata$r:000072B3                 db    0
.rdata$r:000072B4                 dd offset ??_R2_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:000072B4 _rdata$r        ends
.rdata$r:000072B4
.rdata$r:000072B8 ; ===========================================================================
.rdata$r:000072B8
.rdata$r:000072B8 ; Segment type: Pure data
.rdata$r:000072B8 ; Segment permissions: Read
.rdata$r:000072B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000072B8                 assume cs:_rdata$r
.rdata$r:000072B8                 ;org 72B8h
.rdata$r:000072B8 ; COMDAT (pick any)
.rdata$r:000072B8                 public ??_R2_System_error_category@std@@8
.rdata$r:000072B8 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:000072B8 ??_R2_System_error_category@std@@8 dd offset ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:000072B8                                         ; DATA XREF: .rdata$r:000072B4o
.rdata$r:000072B8                                         ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000072BC                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000072C0                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000072C4                 db    0
.rdata$r:000072C5                 align 4
.rdata$r:000072C5 _rdata$r        ends
.rdata$r:000072C5
.rdata$r:000072C8 ; ===========================================================================
.rdata$r:000072C8
.rdata$r:000072C8 ; Segment type: Pure data
.rdata$r:000072C8 ; Segment permissions: Read
.rdata$r:000072C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000072C8                 assume cs:_rdata$r
.rdata$r:000072C8                 ;org 72C8h
.rdata$r:000072C8 ; COMDAT (pick any)
.rdata$r:000072C8                 public ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:000072C8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000072C8 ??_R1A@?0A@EA@_System_error_category@std@@8 dd offset ??_R0?AV_System_error_category@std@@@8
.rdata$r:000072C8                                         ; DATA XREF: .rdata$r:std::_System_error_category::`RTTI Base Class Array'o
.rdata$r:000072C8                                         ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:000072CC                 db    2
.rdata$r:000072CD                 db    0
.rdata$r:000072CE                 db    0
.rdata$r:000072CF                 db    0
.rdata$r:000072D0                 db    0
.rdata$r:000072D1                 db    0
.rdata$r:000072D2                 db    0
.rdata$r:000072D3                 db    0
.rdata$r:000072D4                 db 0FFh
.rdata$r:000072D5                 db 0FFh
.rdata$r:000072D6                 db 0FFh
.rdata$r:000072D7                 db 0FFh
.rdata$r:000072D8                 db    0
.rdata$r:000072D9                 db    0
.rdata$r:000072DA                 db    0
.rdata$r:000072DB                 db    0
.rdata$r:000072DC                 db  40h ; @
.rdata$r:000072DD                 db    0
.rdata$r:000072DE                 db    0
.rdata$r:000072DF                 db    0
.rdata$r:000072E0                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:000072E0 _rdata$r        ends
.rdata$r:000072E0
.CRT$XCU:000072E4 ; ===========================================================================
.CRT$XCU:000072E4
.CRT$XCU:000072E4 ; Segment type: Pure data
.CRT$XCU:000072E4 ; Segment permissions: Read
.CRT$XCU:000072E4 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000072E4                 assume cs:_CRT$XCU
.CRT$XCU:000072E4                 ;org 72E4h
.CRT$XCU:000072E4 _piecewise_construct$initializer$ dd offset ??__Epiecewise_construct@std@@YAXXZ ; std::`dynamic initializer for 'piecewise_construct''(void)
.CRT$XCU:000072E8 _allocator_arg$initializer$ dd offset ??__Eallocator_arg@std@@YAXXZ ; std::`dynamic initializer for 'allocator_arg''(void)
.CRT$XCU:000072EC _ignore$initializer$ dd offset ??__Eignore@std@@YAXXZ ; std::`dynamic initializer for 'ignore''(void)
.CRT$XCU:000072F0 __Tuple_alloc$initializer$ dd offset ??__E_Tuple_alloc@std@@YAXXZ ; std::`dynamic initializer for '_Tuple_alloc''(void)
.CRT$XCU:000072F0 _CRT$XCU        ends
.CRT$XCU:000072F0
.CRT$XCU:000072F4 ; ===========================================================================
.CRT$XCU:000072F4
.CRT$XCU:000072F4 ; Segment type: Pure data
.CRT$XCU:000072F4 ; Segment permissions: Read
.CRT$XCU:000072F4 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000072F4                 assume cs:_CRT$XCU
.CRT$XCU:000072F4                 ;org 72F4h
.CRT$XCU:000072F4 ; COMDAT (pick associative to section at 7000)
.CRT$XCU:000072F4 ; public: static void (__cdecl *std::_Error_objects<int>::_Generic_object$initializer$)(void)
.CRT$XCU:000072F4 ?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.CRT$XCU:000072F4 _CRT$XCU        ends
.CRT$XCU:000072F4
.CRT$XCU:000072F8 ; ===========================================================================
.CRT$XCU:000072F8
.CRT$XCU:000072F8 ; Segment type: Pure data
.CRT$XCU:000072F8 ; Segment permissions: Read
.CRT$XCU:000072F8 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000072F8                 assume cs:_CRT$XCU
.CRT$XCU:000072F8                 ;org 72F8h
.CRT$XCU:000072F8 ; COMDAT (pick associative to section at 7004)
.CRT$XCU:000072F8 ; public: static void (__cdecl *std::_Error_objects<int>::_Iostream_object$initializer$)(void)
.CRT$XCU:000072F8 ?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.CRT$XCU:000072F8 _CRT$XCU        ends
.CRT$XCU:000072F8
.CRT$XCU:000072FC ; ===========================================================================
.CRT$XCU:000072FC
.CRT$XCU:000072FC ; Segment type: Pure data
.CRT$XCU:000072FC ; Segment permissions: Read
.CRT$XCU:000072FC _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000072FC                 assume cs:_CRT$XCU
.CRT$XCU:000072FC                 ;org 72FCh
.CRT$XCU:000072FC ; COMDAT (pick associative to section at 7008)
.CRT$XCU:000072FC ; public: static void (__cdecl *std::_Error_objects<int>::_System_object$initializer$)(void)
.CRT$XCU:000072FC ?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.CRT$XCU:000072FC _CRT$XCU        ends
.CRT$XCU:000072FC
.CRT$XCU:00007300 ; ===========================================================================
.CRT$XCU:00007300
.CRT$XCU:00007300 ; Segment type: Pure data
.CRT$XCU:00007300 ; Segment permissions: Read
.CRT$XCU:00007300 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00007300                 assume cs:_CRT$XCU
.CRT$XCU:00007300                 ;org 7300h
.CRT$XCU:00007300 ; COMDAT (pick associative to section at 7010)
.CRT$XCU:00007300 ; public: static void (__cdecl *std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id$initializer$)(void)
.CRT$XCU:00007300 ?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)
.CRT$XCU:00007300 _CRT$XCU        ends
.CRT$XCU:00007300
.CRT$XCU:00007304 ; ===========================================================================
.CRT$XCU:00007304
.CRT$XCU:00007304 ; Segment type: Pure data
.CRT$XCU:00007304 ; Segment permissions: Read
.CRT$XCU:00007304 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00007304                 assume cs:_CRT$XCU
.CRT$XCU:00007304                 ;org 7304h
.CRT$XCU:00007304 ; COMDAT (pick associative to section at 7014)
.CRT$XCU:00007304 ; public: static void (__cdecl *std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id$initializer$)(void)
.CRT$XCU:00007304 ?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)
.CRT$XCU:00007304 _CRT$XCU        ends
.CRT$XCU:00007304
.CRT$XCU:00007308 ; ===========================================================================
.CRT$XCU:00007308
.CRT$XCU:00007308 ; Segment type: Pure data
.CRT$XCU:00007308 ; Segment permissions: Read
.CRT$XCU:00007308 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00007308                 assume cs:_CRT$XCU
.CRT$XCU:00007308                 ;org 7308h
.CRT$XCU:00007308 ; COMDAT (pick associative to section at 70AC)
.CRT$XCU:00007308 ; public: static void (__cdecl *std::numpunct<char>::id$initializer$)(void)
.CRT$XCU:00007308 ?id$initializer$@?$numpunct@D@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)
.CRT$XCU:00007308 _CRT$XCU        ends
.CRT$XCU:00007308
.CRT$XCU:0000730C ; ===========================================================================
.CRT$XCU:0000730C
.CRT$XCU:0000730C ; Segment type: Pure data
.CRT$XCU:0000730C ; Segment permissions: Read
.CRT$XCU:0000730C _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000730C                 assume cs:_CRT$XCU
.CRT$XCU:0000730C                 ;org 730Ch
.CRT$XCU:0000730C ; COMDAT (pick associative to section at 70B0)
.CRT$XCU:0000730C ; public: static void (__cdecl *std::numpunct<wchar_t>::id$initializer$)(void)
.CRT$XCU:0000730C ?id$initializer$@?$numpunct@_W@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)
.CRT$XCU:0000730C _CRT$XCU        ends
.CRT$XCU:0000730C
UNDEF:00007310 ; ===========================================================================
UNDEF:00007310
UNDEF:00007310 ; Segment type: Externs
UNDEF:00007310 ; UNDEF
UNDEF:00007310                 extrn __purecall:near   ; DATA XREF: .rdata:00006F54o
UNDEF:00007310                                         ; .rdata:00006F58o
UNDEF:00007314 ; void *__cdecl operator new(unsigned int)
UNDEF:00007314                 extrn ??2@YAPAXI@Z:near ; CODE XREF: std::_Allocate<char>(uint,char *)+1Dp
UNDEF:00007314                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+23p ...
UNDEF:00007318 ; void __cdecl operator delete(void *)
UNDEF:00007318                 extrn ??3@YAXPAX@Z:near ; CODE XREF: std::_Generic_error_category::`scalar deleting destructor'(uint)+1Bp
UNDEF:00007318                                         ; std::_Iostream_error_category::`scalar deleting destructor'(uint)+1Bp ...
UNDEF:0000731C ; int __cdecl atexit(void (__cdecl *)())
UNDEF:0000731C                 extrn _atexit:near      ; CODE XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+12p
UNDEF:0000731C                                         ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+12p ...
UNDEF:00007320 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00007320                 extrn _memcpy:near      ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+1Ep
UNDEF:00007320                                         ; _wmemcpy+11p
UNDEF:00007324 ; size_t __cdecl strlen(const char *Str)
UNDEF:00007324                 extrn _strlen:near      ; CODE XREF: std::char_traits<char>::length(char const *)+1Bp
UNDEF:00007328 ; void *__cdecl memmove(void *Dst, const void *Src, size_t Size)
UNDEF:00007328                 extrn _memmove:near     ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+1Ep
UNDEF:00007328                                         ; _wmemmove+11p
UNDEF:0000732C ; size_t __cdecl wcslen(const wchar_t *Str)
UNDEF:0000732C                 extrn _wcslen:near      ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+1Bp
UNDEF:00007330 ; void __stdcall GetLocalTime(LPSYSTEMTIME lpSystemTime)
UNDEF:00007330                 extrn __imp__GetLocalTime@4:near
UNDEF:00007330                                         ; CODE XREF: Printer::doPrint(bool)+9EBp
UNDEF:00007330                                         ; DATA XREF: Printer::doPrint(bool)+9EBr
UNDEF:00007334 ; int __stdcall MulDiv(int nNumber, int nNumerator, int nDenominator)
UNDEF:00007334                 extrn __imp__MulDiv@12:near
UNDEF:00007334                                         ; CODE XREF: Printer::doPrint(bool)+158p
UNDEF:00007334                                         ; Printer::doPrint(bool)+17Ep ...
UNDEF:00007338 ; int __stdcall lstrlenW(LPCWSTR lpString)
UNDEF:00007338                 extrn __imp__lstrlenW@4:near
UNDEF:00007338                                         ; CODE XREF: Printer::doPrint(bool)+1741p
UNDEF:00007338                                         ; Printer::doPrint(bool)+181Ep ...
UNDEF:0000733C ; HFONT __stdcall CreateFontW(int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic, DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision, DWORD iQuality, DWORD iPitchAndFamily, LPCWSTR pszFaceName)
UNDEF:0000733C                 extrn __imp__CreateFontW@56:near
UNDEF:0000733C                                         ; CODE XREF: Printer::doPrint(bool)+45Ep
UNDEF:0000733C                                         ; Printer::doPrint(bool)+5E4p
UNDEF:0000733C                                         ; DATA XREF: ...
UNDEF:00007340 ; HPEN __stdcall CreatePen(int iStyle, int cWidth, COLORREF color)
UNDEF:00007340                 extrn __imp__CreatePen@12:near
UNDEF:00007340                                         ; CODE XREF: Printer::doPrint(bool)+1A12p
UNDEF:00007340                                         ; Printer::doPrint(bool)+1F16p
UNDEF:00007340                                         ; DATA XREF: ...
UNDEF:00007344 ; BOOL __stdcall DeleteDC(HDC hdc)
UNDEF:00007344                 extrn __imp__DeleteDC@4:near
UNDEF:00007344                                         ; CODE XREF: Printer::doPrint(bool)+2061p
UNDEF:00007344                                         ; DATA XREF: Printer::doPrint(bool)+2061r
UNDEF:00007348 ; BOOL __stdcall DeleteObject(HGDIOBJ ho)
UNDEF:00007348                 extrn __imp__DeleteObject@4:near
UNDEF:00007348                                         ; CODE XREF: Printer::doPrint(bool)+1AB9p
UNDEF:00007348                                         ; Printer::doPrint(bool)+1FB9p ...
UNDEF:0000734C ; int __stdcall GetDeviceCaps(HDC hdc, int index)
UNDEF:0000734C                 extrn __imp__GetDeviceCaps@8:near
UNDEF:0000734C                                         ; CODE XREF: Printer::doPrint(bool)+55p
UNDEF:0000734C                                         ; Printer::doPrint(bool)+6Dp ...
UNDEF:00007350 ; BOOL __stdcall GetTextExtentPoint32W(HDC hdc, LPCWSTR lpString, int c, LPSIZE psizl)
UNDEF:00007350                 extrn __imp__GetTextExtentPoint32W@16:near
UNDEF:00007350                                         ; CODE XREF: Printer::doPrint(bool)+1860p
UNDEF:00007350                                         ; Printer::doPrint(bool)+1989p ...
UNDEF:00007354 ; BOOL __stdcall LineTo(HDC hdc, int x, int y)
UNDEF:00007354                 extrn __imp__LineTo@12:near
UNDEF:00007354                                         ; CODE XREF: Printer::doPrint(bool)+1A95p
UNDEF:00007354                                         ; Printer::doPrint(bool)+1F95p
UNDEF:00007354                                         ; DATA XREF: ...
UNDEF:00007358 ; HGDIOBJ __stdcall SelectObject(HDC hdc, HGDIOBJ h)
UNDEF:00007358                 extrn __imp__SelectObject@8:near
UNDEF:00007358                                         ; CODE XREF: Printer::doPrint(bool)+47Bp
UNDEF:00007358                                         ; Printer::doPrint(bool)+601p ...
UNDEF:0000735C ; COLORREF __stdcall SetBkColor(HDC hdc, COLORREF color)
UNDEF:0000735C                 extrn __imp__SetBkColor@8:near
UNDEF:0000735C                                         ; CODE XREF: Printer::doPrint(bool)+1660p
UNDEF:0000735C                                         ; Printer::doPrint(bool)+1B7Ep
UNDEF:0000735C                                         ; DATA XREF: ...
UNDEF:00007360 ; COLORREF __stdcall SetTextColor(HDC hdc, COLORREF color)
UNDEF:00007360                 extrn __imp__SetTextColor@8:near
UNDEF:00007360                                         ; CODE XREF: Printer::doPrint(bool)+164Bp
UNDEF:00007360                                         ; Printer::doPrint(bool)+1B69p
UNDEF:00007360                                         ; DATA XREF: ...
UNDEF:00007364 ; UINT __stdcall SetTextAlign(HDC hdc, UINT align)
UNDEF:00007364                 extrn __imp__SetTextAlign@8:near
UNDEF:00007364                                         ; CODE XREF: Printer::doPrint(bool)+1672p
UNDEF:00007364                                         ; Printer::doPrint(bool)+1A06p ...
UNDEF:00007368 ; BOOL __stdcall GetTextMetricsW(HDC hdc, LPTEXTMETRICW lptm)
UNDEF:00007368                 extrn __imp__GetTextMetricsW@8:near
UNDEF:00007368                                         ; CODE XREF: Printer::doPrint(bool)+492p
UNDEF:00007368                                         ; Printer::doPrint(bool)+618p ...
UNDEF:0000736C ; int __stdcall StartDocW(HDC hdc, const DOCINFOW *lpdi)
UNDEF:0000736C                 extrn __imp__StartDocW@8:near
UNDEF:0000736C                                         ; CODE XREF: Printer::doPrint(bool)+6C4p
UNDEF:0000736C                                         ; DATA XREF: Printer::doPrint(bool)+6C4r
UNDEF:00007370 ; int __stdcall EndDoc(HDC hdc)
UNDEF:00007370                 extrn __imp__EndDoc@4:near
UNDEF:00007370                                         ; CODE XREF: Printer::doPrint(bool)+2051p
UNDEF:00007370                                         ; DATA XREF: Printer::doPrint(bool)+2051r
UNDEF:00007374 ; int __stdcall StartPage(HDC hdc)
UNDEF:00007374                 extrn __imp__StartPage@4:near
UNDEF:00007374                                         ; CODE XREF: Printer::doPrint(bool)+1609p
UNDEF:00007374                                         ; DATA XREF: Printer::doPrint(bool)+1609r
UNDEF:00007378 ; int __stdcall EndPage(HDC hdc)
UNDEF:00007378                 extrn __imp__EndPage@4:near
UNDEF:00007378                                         ; CODE XREF: Printer::doPrint(bool)+1FC9p
UNDEF:00007378                                         ; DATA XREF: Printer::doPrint(bool)+1FC9r
UNDEF:0000737C ; BOOL __stdcall MoveToEx(HDC hdc, int x, int y, LPPOINT lppt)
UNDEF:0000737C                 extrn __imp__MoveToEx@16:near
UNDEF:0000737C                                         ; CODE XREF: Printer::doPrint(bool)+1A66p
UNDEF:0000737C                                         ; Printer::doPrint(bool)+1F68p
UNDEF:0000737C                                         ; DATA XREF: ...
UNDEF:00007380 ; BOOL __stdcall ExtTextOutW(HDC hdc, int x, int y, UINT options, const RECT *lprect, LPCWSTR lpString, UINT c, const INT *lpDx)
UNDEF:00007380                 extrn __imp__ExtTextOutW@32:near
UNDEF:00007380                                         ; CODE XREF: Printer::doPrint(bool)+17A5p
UNDEF:00007380                                         ; Printer::doPrint(bool)+18CEp ...
UNDEF:00007384 ; BOOL __stdcall DPtoLP(HDC hdc, LPPOINT lppt, int c)
UNDEF:00007384                 extrn __imp__DPtoLP@12:near
UNDEF:00007384                                         ; CODE XREF: Printer::doPrint(bool)+2EBp
UNDEF:00007384                                         ; Printer::doPrint(bool)+304p ...
UNDEF:00007388 ; int _wsprintfW(LPWSTR, LPCWSTR, ...)
UNDEF:00007388                 extrn __imp__wsprintfW:near
UNDEF:00007388                                         ; CODE XREF: Printer::doPrint(bool)+15E7p
UNDEF:00007388                                         ; DATA XREF: Printer::doPrint(bool)+15E7r
UNDEF:0000738C ; int __stdcall MessageBoxW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType)
UNDEF:0000738C                 extrn __imp__MessageBoxW@16:near
UNDEF:0000738C                                         ; CODE XREF: Printer::doPrint(bool)+6D9p
UNDEF:0000738C                                         ; DATA XREF: Printer::doPrint(bool)+6D9r
UNDEF:00007390 ; int __stdcall GetDateFormatW(LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate)
UNDEF:00007390                 extrn __imp__GetDateFormatW@24:near
UNDEF:00007390                                         ; CODE XREF: Printer::doPrint(bool)+A0Ap
UNDEF:00007390                                         ; Printer::doPrint(bool)+A29p
UNDEF:00007390                                         ; DATA XREF: ...
UNDEF:00007394 ; int __stdcall GetTimeFormatW(LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int cchTime)
UNDEF:00007394                 extrn __imp__GetTimeFormatW@24:near
UNDEF:00007394                                         ; CODE XREF: Printer::doPrint(bool)+A48p
UNDEF:00007394                                         ; DATA XREF: Printer::doPrint(bool)+A48r
UNDEF:00007398 ; _DWORD __thiscall std::_Lockit::_Lockit(std::_Lockit *__hidden this, int)
UNDEF:00007398                 extrn ??0_Lockit@std@@QAE@H@Z:near
UNDEF:00007398                                         ; CODE XREF: std::_Container_base12::_Orphan_all(void)+35p
UNDEF:0000739C ; _DWORD __thiscall std::_Lockit::~_Lockit(std::_Lockit *__hidden this)
UNDEF:0000739C                 extrn ??1_Lockit@std@@QAE@XZ:near
UNDEF:0000739C                                         ; CODE XREF: std::_Container_base12::_Orphan_all(void)+86p
UNDEF:0000739C                                         ; __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0+3j
UNDEF:000073A0                 extrn __hypot:near      ; CODE XREF: _hypot+1Dp
UNDEF:000073A4 ; void __cdecl std::_Debug_message(const wchar_t *, const wchar_t *, unsigned int)
UNDEF:000073A4                 extrn ?_Debug_message@std@@YAXPB_W0I@Z:near
UNDEF:000073A4                                         ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+16p
UNDEF:000073A4                                         ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)+16p
UNDEF:000073A8 ; void __cdecl std::_Xbad_alloc()
UNDEF:000073A8                 extrn ?_Xbad_alloc@std@@YAXXZ:near
UNDEF:000073A8                                         ; CODE XREF: std::_Allocate<char>(uint,char *):loc_3402p
UNDEF:000073A8                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *):loc_3444p ...
UNDEF:000073AC ; void __cdecl std::_Xlength_error(const char *)
UNDEF:000073AC                 extrn ?_Xlength_error@std@@YAXPBD@Z:near
UNDEF:000073AC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+Cp
UNDEF:000073AC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+Cp
UNDEF:000073B0 ; void __cdecl std::_Xout_of_range(const char *)
UNDEF:000073B0                 extrn ?_Xout_of_range@std@@YAXPBD@Z:near
UNDEF:000073B0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+Cp
UNDEF:000073B0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+Cp
UNDEF:000073B4 ; public: virtual void * __thiscall std::error_category::`vector deleting destructor'(unsigned int)
UNDEF:000073B4                 extrn ??_Eerror_category@std@@UAEPAXI@Z:near ; weak
UNDEF:000073B4                                         ; DATA XREF: .rdata:const std::error_category::`vftable'o
UNDEF:000073B8 ; const char *__cdecl std::_Syserror_map(int)
UNDEF:000073B8                 extrn ?_Syserror_map@std@@YAPBDH@Z:near
UNDEF:000073B8                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+Bp
UNDEF:000073B8                                         ; std::_Generic_error_category::message(int)+33p
UNDEF:000073BC ; const char *__cdecl std::_Winerror_map(int)
UNDEF:000073BC                 extrn ?_Winerror_map@std@@YAPBDH@Z:near
UNDEF:000073BC                                         ; CODE XREF: std::_System_error_category::message(int)+33p
UNDEF:000073C0 ; public: virtual void * __thiscall std::_Generic_error_category::`vector deleting destructor'(unsigned int)
UNDEF:000073C0                 extrn ??_E_Generic_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:000073C0                                         ; DATA XREF: .rdata:const std::_Generic_error_category::`vftable'o
UNDEF:000073C4 ; public: virtual void * __thiscall std::_Iostream_error_category::`vector deleting destructor'(unsigned int)
UNDEF:000073C4                 extrn ??_E_Iostream_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:000073C4                                         ; DATA XREF: .rdata:const std::_Iostream_error_category::`vftable'o
UNDEF:000073C8 ; public: virtual void * __thiscall std::_System_error_category::`vector deleting destructor'(unsigned int)
UNDEF:000073C8                 extrn ??_E_System_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:000073C8                                         ; DATA XREF: .rdata:const std::_System_error_category::`vftable'o
UNDEF:000073CC ; void __thiscall ScintillaEditView::updateLineNumberWidth(ScintillaEditView *__hidden this)
UNDEF:000073CC                 extrn ?updateLineNumberWidth@ScintillaEditView@@QAEXXZ:near
UNDEF:000073CC                                         ; CODE XREF: ScintillaEditView::showLineNumbersMargin(bool)+2Cp
UNDEF:000073D0 ; void __cdecl expandNppEnvironmentStrs(const wchar_t *, wchar_t *, unsigned int, HWND)
UNDEF:000073D0                 extrn ?expandNppEnvironmentStrs@@YAXPB_WPA_WIPAUHWND__@@@Z:near
UNDEF:000073D0                                         ; CODE XREF: Printer::doPrint(bool)+C24p
UNDEF:000073D0                                         ; Printer::doPrint(bool)+DCAp ...
UNDEF:000073D4 ; __fastcall __security_check_cookie(x)
UNDEF:000073D4                 extrn @__security_check_cookie@4:near
UNDEF:000073D4                                         ; CODE XREF: Printer::doPrint(bool)+20AEp
UNDEF:000073D4                                         ; __ehhandler$?doPrint@Printer@@QAEI_N@Z+Fp ...
UNDEF:000073D8 ; __stdcall _CxxThrowException(x, x)
UNDEF:000073D8                 extrn __CxxThrowException@8:near
UNDEF:000073D8                                         ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1+10p
UNDEF:000073D8                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1+10p
UNDEF:000073DC                 extrn ___CxxFrameHandler3:near
UNDEF:000073DC                                         ; CODE XREF: __ehhandler$?doPrint@Printer@@QAEI_N@Z+23j
UNDEF:000073DC                                         ; __ehhandler$?replaceStr@@YAXAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@1@Z+16j ...
UNDEF:000073E0                 extrn __chkstk:near     ; CODE XREF: Printer::doPrint(bool)+16p
UNDEF:000073E4 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:000073E4                 extrn _memset:near      ; CODE XREF: Printer::doPrint(bool)+8DAp
UNDEF:000073E4                                         ; Printer::doPrint(bool)+8FEp ...
UNDEF:000073E8 ; const type_info::`vftable'
UNDEF:000073E8                 extrn ??_7type_info@@6B@:near
UNDEF:000073E8                                         ; DATA XREF: .data$r:std::error_category `RTTI Type Descriptor'o
UNDEF:000073E8                                         ; .data$r:std::_Generic_error_category `RTTI Type Descriptor'o ...
UNDEF:000073EC ; private: static class NppParameters * NppParameters::_pSelf
UNDEF:000073EC                 extrn ?_pSelf@NppParameters@@0PAV1@A:near
UNDEF:000073EC                                         ; DATA XREF: NppParameters::getInstance(void)+3r
UNDEF:000073F0 ; unsigned int ScintillaEditView::_SC_MARGE_LINENUMBER
UNDEF:000073F0                 extrn ?_SC_MARGE_LINENUMBER@ScintillaEditView@@2HB:near
UNDEF:000073F0                                         ; DATA XREF: Printer::doPrint(bool):loc_24C9r
UNDEF:000073F0                                         ; Printer::doPrint(bool)+1530r ...
UNDEF:000073F4 ; public: static int const ScintillaEditView::_SC_MARGE_SYBOLE
UNDEF:000073F4                 extrn ?_SC_MARGE_SYBOLE@ScintillaEditView@@2HB:near
UNDEF:000073F4                                         ; DATA XREF: ScintillaEditView::showMargin(int,bool)+2Dr
UNDEF:000073F8 ; public: static int const ScintillaEditView::_SC_MARGE_FOLDER
UNDEF:000073F8                 extrn ?_SC_MARGE_FOLDER@ScintillaEditView@@2HB:near
UNDEF:000073F8                                         ; DATA XREF: ScintillaEditView::showMargin(int,bool)+38r
UNDEF:000073FC                 extrn ___security_cookie:near
UNDEF:000073FC                                         ; DATA XREF: Printer::doPrint(bool)+1Br
UNDEF:000073FC                                         ; replaceStr(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+12r ...
UNDEF:00007400                 extrn __fltused:near
UNDEF:00007400
UNDEF:00007400
UNDEF:00007400                 end