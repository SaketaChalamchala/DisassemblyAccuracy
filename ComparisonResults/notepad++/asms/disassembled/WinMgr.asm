.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 00336282557BD05E7D8C1FA984399E8F
.rdata:00000000 ; Input CRC32 : 86BAA83F
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\WinMgr.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "LIBCMTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 _SIZEZERO       dd 0                    ; DATA XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+19r
.rdata:00000000                                         ; CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+85r ...
.rdata:00000004 dword_4         dd 0                    ; DATA XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+22r
.rdata:00000004                                         ; CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+8Er ...
.rdata:00000008 _SIZEMAX        dd 7FFFh                ; DATA XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+2Er
.rdata:0000000C dword_C         dd 7FFFh                ; DATA XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+37r
.rdata:00000010 ; const WCHAR _SG63879
.rdata:00000010 $SG63879:                               ; DATA XREF: `dynamic initializer for 'WM_WINMGR''(void)+3o
.rdata:00000010                 unicode 0, <WM_WINMGR>,0
.rdata:00000024 ; wchar_t _SG63918
.rdata:00000024 $SG63918:                               ; DATA XREF: CWinMgr::InitToFitSizeFromCurrent(HWND__ *)+16o
.rdata:00000024                 unicode 0, <hWnd>,0
.rdata:0000002E                 align 10h
.rdata:00000030 ; wchar_t _SG63917
.rdata:00000030 $SG63917:                               ; DATA XREF: CWinMgr::InitToFitSizeFromCurrent(HWND__ *)+11o
.rdata:00000030                 unicode 0, <..\src\WinControls\WindowsDlg\WinMgr.cpp>,0
.rdata:00000082                 align 8
.rdata:00000088 ; wchar_t _SG63920
.rdata:00000088 $SG63920:                               ; DATA XREF: CWinMgr::InitToFitSizeFromCurrent(HWND__ *)+2Eo
.rdata:00000088                 unicode 0, <..\src\WinControls\WindowsDlg\WinMgr.cpp>,0
.rdata:000000DA                 align 4
.rdata:000000DC ; wchar_t _SG63921
.rdata:000000DC $SG63921:                               ; DATA XREF: CWinMgr::InitToFitSizeFromCurrent(HWND__ *)+33o
.rdata:000000DC                 unicode 0, <m_map>,0
.rdata:000000E8 ; wchar_t _SG63933
.rdata:000000E8 $SG63933:                               ; DATA XREF: CWinMgr::GetWindowPositions(HWND__ *)+14o
.rdata:000000E8                 unicode 0, <..\src\WinControls\WindowsDlg\WinMgr.cpp>,0
.rdata:0000013A                 align 4
.rdata:0000013C ; wchar_t _SG63934
.rdata:0000013C $SG63934:                               ; DATA XREF: CWinMgr::GetWindowPositions(HWND__ *)+19o
.rdata:0000013C                 unicode 0, <m_map>,0
.rdata:00000148 ; wchar_t _SG63936
.rdata:00000148 $SG63936:                               ; DATA XREF: CWinMgr::GetWindowPositions(HWND__ *)+2Eo
.rdata:00000148                 unicode 0, <..\src\WinControls\WindowsDlg\WinMgr.cpp>,0
.rdata:0000019A                 align 4
.rdata:0000019C ; wchar_t _SG63937
.rdata:0000019C $SG63937:                               ; DATA XREF: CWinMgr::GetWindowPositions(HWND__ *)+33o
.rdata:0000019C                 unicode 0, <hWnd>,0
.rdata:000001A6                 align 4
.rdata:000001A8 ; wchar_t _SG63961
.rdata:000001A8 $SG63961:                               ; DATA XREF: CWinMgr::SetWindowPositions(HWND__ *)+87o
.rdata:000001A8                 unicode 0, <..\src\WinControls\WindowsDlg\WinMgr.cpp>,0
.rdata:000001FA                 align 4
.rdata:000001FC ; wchar_t _SG63962
.rdata:000001FC $SG63962:                               ; DATA XREF: CWinMgr::SetWindowPositions(HWND__ *)+8Co
.rdata:000001FC                 unicode 0, <count >
.rdata:000001FC                 dw 3Ch
.rdata:000001FC                 unicode 0, < nWindows>,0
.rdata:0000021E                 align 10h
.rdata:00000220 ; wchar_t _SG63971
.rdata:00000220 $SG63971:                               ; DATA XREF: CWinMgr::CountWindows(void)+14o
.rdata:00000220                 unicode 0, <..\src\WinControls\WindowsDlg\WinMgr.cpp>,0
.rdata:00000272                 align 4
.rdata:00000274 ; wchar_t _SG63972
.rdata:00000274 $SG63972:                               ; DATA XREF: CWinMgr::CountWindows(void)+19o
.rdata:00000274                 unicode 0, <m_map>,0
.rdata:00000280 ; wchar_t _SG63984
.rdata:00000280 $SG63984:                               ; DATA XREF: CWinMgr::FindRect(int)+14o
.rdata:00000280                 unicode 0, <..\src\WinControls\WindowsDlg\WinMgr.cpp>,0
.rdata:000002D2                 align 4
.rdata:000002D4 ; wchar_t _SG63985
.rdata:000002D4 $SG63985:                               ; DATA XREF: CWinMgr::FindRect(int)+19o
.rdata:000002D4                 unicode 0, <m_map>,0
.rdata:000002E0 ; wchar_t _SG63998
.rdata:000002E0 $SG63998:                               ; DATA XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+2Bo
.rdata:000002E0                 unicode 0, <..\src\WinControls\WindowsDlg\WinMgr.cpp>,0
.rdata:00000332                 align 4
.rdata:00000334 ; wchar_t _SG63999
.rdata:00000334 $SG63999:                               ; DATA XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+30o
.rdata:00000334                 unicode 0, <pGroup && pGroup->
.rdata:00000334                 dw 3Eh
.rdata:00000334                 unicode 0, <IsGroup()>,0
.rdata:0000036C                 align 10h
.rdata:00000370 ; wchar_t _SG64001
.rdata:00000370 $SG64001:                               ; DATA XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+48o
.rdata:00000370                 unicode 0, <..\src\WinControls\WindowsDlg\WinMgr.cpp>,0
.rdata:000003C2                 align 4
.rdata:000003C4 ; wchar_t _SG64002
.rdata:000003C4 $SG64002:                               ; DATA XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+4Do
.rdata:000003C4                 unicode 0, <hWnd>,0
.rdata:000003CE                 align 10h
.rdata:000003D0 ; wchar_t _SG64017
.rdata:000003D0 $SG64017:                               ; DATA XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+222o
.rdata:000003D0                 unicode 0, <..\src\WinControls\WindowsDlg\WinMgr.cpp>,0
.rdata:00000422                 align 4
.rdata:00000424 ; wchar_t _SG64018
.rdata:00000424 $SG64018:                               ; DATA XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+227o
.rdata:00000424                 unicode 0, <hwRemaining>
.rdata:00000424                 dw 3Eh
.rdata:00000424                 unicode 0, <=0>,0
.rdata:00000442                 align 8
.rdata:00000448 ; wchar_t _SG64026
.rdata:00000448 $SG64026:                               ; DATA XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+288o
.rdata:00000448                 unicode 0, <..\src\WinControls\WindowsDlg\WinMgr.cpp>,0
.rdata:0000049A                 align 4
.rdata:0000049C ; wchar_t _SG64027
.rdata:0000049C $SG64027:                               ; DATA XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+28Do
.rdata:0000049C                 unicode 0, <pRestRect==NULL>,0
.rdata:000004BC                 align 10h
.rdata:000004C0 ; wchar_t _SG64030
.rdata:000004C0 $SG64030:                               ; DATA XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+2CCo
.rdata:000004C0                 unicode 0, <..\src\WinControls\WindowsDlg\WinMgr.cpp>,0
.rdata:00000512                 align 4
.rdata:00000514 ; wchar_t _SG64031
.rdata:00000514 $SG64031:                               ; DATA XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+2D1o
.rdata:00000514                 unicode 0, <hwRemaining>
.rdata:00000514                 dw 3Eh
.rdata:00000514                 unicode 0, <=0>,0
.rdata:00000532                 align 8
.rdata:00000538 ; wchar_t _SG64034
.rdata:00000538 $SG64034:                               ; DATA XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+30Co
.rdata:00000538                 unicode 0, <..\src\WinControls\WindowsDlg\WinMgr.cpp>,0
.rdata:0000058A                 align 4
.rdata:0000058C ; wchar_t _SG64035
.rdata:0000058C $SG64035:                               ; DATA XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+311o
.rdata:0000058C                 unicode 0, <hwRemaining==0>,0
.rdata:000005AA                 align 10h
.rdata:000005B0 ; wchar_t _SG64093
.rdata:000005B0 $SG64093:                               ; DATA XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+347o
.rdata:000005B0                 unicode 0, <..\src\WinControls\WindowsDlg\WinMgr.cpp>,0
.rdata:00000602                 align 4
.rdata:00000604 ; wchar_t _SG64094
.rdata:00000604 $SG64094:                               ; DATA XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+34Co
.rdata:00000604                 unicode 0, <parent>,0
.rdata:00000612                 align 8
.rdata:00000618 ; wchar_t _SG64111
.rdata:00000618 $SG64111:                               ; DATA XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+41Fo
.rdata:00000618                 unicode 0, <..\src\WinControls\WindowsDlg\WinMgr.cpp>,0
.rdata:0000066A                 align 4
.rdata:0000066C ; wchar_t _SG64112
.rdata:0000066C $SG64112:                               ; DATA XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+424o
.rdata:0000066C                 unicode 0, <0>
.rdata:0000066C                 dw 3Ch
.rdata:0000066C                 unicode 0, <pct && pct>
.rdata:0000066C                 dw 3Ch
.rdata:0000066C                 unicode 0, <100>,0
.rdata:0000068E                 align 10h
.rdata:00000690 ; wchar_t _SG64124
.rdata:00000690 $SG64124:                               ; DATA XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+55Eo
.rdata:00000690                 unicode 0, <..\src\WinControls\WindowsDlg\WinMgr.cpp>,0
.rdata:000006E2                 align 4
.rdata:000006E4 ; wchar_t _SG64125
.rdata:000006E4 $SG64125:                               ; DATA XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+563o
.rdata:000006E4                 unicode 0, <FALSE>,0
.rdata:000006F0 ; wchar_t _SG64179
.rdata:000006F0 $SG64179:                               ; DATA XREF: CWinMgr::MoveRect(WINRECT *,tagPOINT,HWND__ *)+14o
.rdata:000006F0                 unicode 0, <..\src\WinControls\WindowsDlg\WinMgr.cpp>,0
.rdata:00000742                 align 4
.rdata:00000744 ; wchar_t _SG64180
.rdata:00000744 $SG64180:                               ; DATA XREF: CWinMgr::MoveRect(WINRECT *,tagPOINT,HWND__ *)+19o
.rdata:00000744                 unicode 0, <pwrcMove>,0
.rdata:00000756                 align 4
.rdata:00000758 ; wchar_t _SG64183
.rdata:00000758 $SG64183:                               ; DATA XREF: CWinMgr::MoveRect(WINRECT *,tagPOINT,HWND__ *)+3Co
.rdata:00000758                 unicode 0, <..\src\WinControls\WindowsDlg\WinMgr.cpp>,0
.rdata:000007AA                 align 4
.rdata:000007AC ; wchar_t _SG64184
.rdata:000007AC $SG64184:                               ; DATA XREF: CWinMgr::MoveRect(WINRECT *,tagPOINT,HWND__ *)+41o
.rdata:000007AC                 unicode 0, <prev>,0
.rdata:000007B6                 align 4
.rdata:000007B8 ; wchar_t _SG64187
.rdata:000007B8 $SG64187:                               ; DATA XREF: CWinMgr::MoveRect(WINRECT *,tagPOINT,HWND__ *)+64o
.rdata:000007B8                 unicode 0, <..\src\WinControls\WindowsDlg\WinMgr.cpp>,0
.rdata:0000080A                 align 4
.rdata:0000080C ; wchar_t _SG64188
.rdata:0000080C $SG64188:                               ; DATA XREF: CWinMgr::MoveRect(WINRECT *,tagPOINT,HWND__ *)+69o
.rdata:0000080C                 unicode 0, <next>,0
.rdata:00000816                 align 4
.rdata:00000816 _rdata          ends
.rdata:00000816
.text$mn:00000818 ; ===========================================================================
.text$mn:00000818
.text$mn:00000818 ; Segment type: Pure code
.text$mn:00000818 ; Segment permissions: Read/Execute
.text$mn:00000818 _text$mn        segment para public 'CODE' use32
.text$mn:00000818                 assume cs:_text$mn
.text$mn:00000818                 ;org 818h
.text$mn:00000818                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000818
.text$mn:00000818 ; =============== S U B R O U T I N E =======================================
.text$mn:00000818
.text$mn:00000818 ; Attributes: bp-based frame
.text$mn:00000818
.text$mn:00000818 ; public: __thiscall CWinMgr::CWinMgr(class WINRECT *)
.text$mn:00000818                 public ??0CWinMgr@@QAE@PAVWINRECT@@@Z
.text$mn:00000818 ??0CWinMgr@@QAE@PAVWINRECT@@@Z proc near
.text$mn:00000818
.text$mn:00000818 var_4           = dword ptr -4
.text$mn:00000818 arg_0           = dword ptr  8
.text$mn:00000818
.text$mn:00000818                 push    ebp
.text$mn:00000819                 mov     ebp, esp
.text$mn:0000081B                 push    ecx
.text$mn:0000081C                 mov     [ebp+var_4], ecx
.text$mn:0000081F                 mov     eax, [ebp+var_4]
.text$mn:00000822                 mov     dword ptr [eax], offset ??_7CWinMgr@@6B@ ; const CWinMgr::`vftable'
.text$mn:00000828                 mov     ecx, [ebp+var_4]
.text$mn:0000082B                 mov     edx, [ebp+arg_0]
.text$mn:0000082E                 mov     [ecx+4], edx
.text$mn:00000831                 push    0               ; struct WINRECT *
.text$mn:00000833                 mov     eax, [ebp+var_4]
.text$mn:00000836                 mov     ecx, [eax+4]
.text$mn:00000839                 push    ecx             ; struct WINRECT *
.text$mn:0000083A                 call    ?InitMap@WINRECT@@SAPAV1@PAV1@0@Z ; WINRECT::InitMap(WINRECT *,WINRECT *)
.text$mn:0000083F                 add     esp, 8
.text$mn:00000842                 mov     eax, [ebp+var_4]
.text$mn:00000845                 mov     esp, ebp
.text$mn:00000847                 pop     ebp
.text$mn:00000848                 retn    4
.text$mn:00000848 ??0CWinMgr@@QAE@PAVWINRECT@@@Z endp
.text$mn:00000848
.text$mn:00000848 ; ---------------------------------------------------------------------------
.text$mn:0000084B                 db 0Dh dup(0CCh)
.text$mn:00000858
.text$mn:00000858 ; =============== S U B R O U T I N E =======================================
.text$mn:00000858
.text$mn:00000858 ; Attributes: bp-based frame
.text$mn:00000858
.text$mn:00000858 ; _DWORD __thiscall CWinMgr::~CWinMgr(CWinMgr *__hidden this)
.text$mn:00000858                 public ??1CWinMgr@@UAE@XZ
.text$mn:00000858 ??1CWinMgr@@UAE@XZ proc near            ; CODE XREF: CWinMgr::`scalar deleting destructor'(uint)+Ap
.text$mn:00000858
.text$mn:00000858 var_4           = dword ptr -4
.text$mn:00000858
.text$mn:00000858                 push    ebp
.text$mn:00000859                 mov     ebp, esp
.text$mn:0000085B                 push    ecx
.text$mn:0000085C                 mov     [ebp+var_4], ecx
.text$mn:0000085F                 mov     eax, [ebp+var_4]
.text$mn:00000862                 mov     dword ptr [eax], offset ??_7CWinMgr@@6B@ ; const CWinMgr::`vftable'
.text$mn:00000868                 mov     esp, ebp
.text$mn:0000086A                 pop     ebp
.text$mn:0000086B                 retn
.text$mn:0000086B ??1CWinMgr@@UAE@XZ endp
.text$mn:0000086B
.text$mn:0000086B ; ---------------------------------------------------------------------------
.text$mn:0000086C                 db 0Ch dup(0CCh)
.text$mn:00000878
.text$mn:00000878 ; =============== S U B R O U T I N E =======================================
.text$mn:00000878
.text$mn:00000878 ; Attributes: bp-based frame
.text$mn:00000878
.text$mn:00000878 ; void __thiscall CWinMgr::GetWindowPositions(CWinMgr *this, HWND)
.text$mn:00000878                 public ?GetWindowPositions@CWinMgr@@UAEXPAUHWND__@@@Z
.text$mn:00000878 ?GetWindowPositions@CWinMgr@@UAEXPAUHWND__@@@Z proc near
.text$mn:00000878                                         ; DATA XREF: .rdata:00002360o
.text$mn:00000878
.text$mn:00000878 Point           = tagPOINT ptr -1Ch
.text$mn:00000878 var_14          = dword ptr -14h
.text$mn:00000878 var_10          = dword ptr -10h
.text$mn:00000878 hWnd            = dword ptr -0Ch
.text$mn:00000878 var_8           = dword ptr -8
.text$mn:00000878 var_4           = dword ptr -4
.text$mn:00000878 hDlg            = dword ptr  8
.text$mn:00000878
.text$mn:00000878                 push    ebp
.text$mn:00000879                 mov     ebp, esp
.text$mn:0000087B                 sub     esp, 1Ch
.text$mn:0000087E                 mov     [ebp+var_8], ecx
.text$mn:00000881                 mov     eax, [ebp+var_8]
.text$mn:00000884                 cmp     dword ptr [eax+4], 0
.text$mn:00000888                 jnz     short loc_89E
.text$mn:0000088A                 push    37h ; '7'       ; Line
.text$mn:0000088C                 push    offset $SG63933 ; "..\\src\\WinControls\\WindowsDlg\\WinMg"...
.text$mn:00000891                 push    offset $SG63934 ; "m_map"
.text$mn:00000896                 call    __wassert
.text$mn:0000089B ; ---------------------------------------------------------------------------
.text$mn:0000089B                 add     esp, 0Ch
.text$mn:0000089E
.text$mn:0000089E loc_89E:                                ; CODE XREF: CWinMgr::GetWindowPositions(HWND__ *)+10j
.text$mn:0000089E                 cmp     [ebp+hDlg], 0
.text$mn:000008A2                 jnz     short loc_8B8
.text$mn:000008A4                 push    38h ; '8'       ; Line
.text$mn:000008A6                 push    offset $SG63936 ; "..\\src\\WinControls\\WindowsDlg\\WinMg"...
.text$mn:000008AB                 push    offset $SG63937 ; "hWnd"
.text$mn:000008B0                 call    __wassert
.text$mn:000008B5 ; ---------------------------------------------------------------------------
.text$mn:000008B5                 add     esp, 0Ch
.text$mn:000008B8
.text$mn:000008B8 loc_8B8:                                ; CODE XREF: CWinMgr::GetWindowPositions(HWND__ *)+2Aj
.text$mn:000008B8                 mov     eax, [ebp+var_8]
.text$mn:000008BB                 mov     ecx, [eax+4]
.text$mn:000008BE                 mov     [ebp+var_4], ecx
.text$mn:000008C1                 jmp     short loc_8CC
.text$mn:000008C3 ; ---------------------------------------------------------------------------
.text$mn:000008C3
.text$mn:000008C3 loc_8C3:                                ; CODE XREF: CWinMgr::GetWindowPositions(HWND__ *):loc_944j
.text$mn:000008C3                 mov     edx, [ebp+var_4]
.text$mn:000008C6                 add     edx, 24h ; '$'
.text$mn:000008C9                 mov     [ebp+var_4], edx
.text$mn:000008CC
.text$mn:000008CC loc_8CC:                                ; CODE XREF: CWinMgr::GetWindowPositions(HWND__ *)+49j
.text$mn:000008CC                 mov     ecx, [ebp+var_4] ; this
.text$mn:000008CF                 call    ?IsEnd@WINRECT@@QBEHXZ ; WINRECT::IsEnd(void)
.text$mn:000008D4                 test    eax, eax
.text$mn:000008D6                 jnz     short loc_949
.text$mn:000008D8                 mov     ecx, [ebp+var_4] ; this
.text$mn:000008DB                 call    ?IsWindow@WINRECT@@QBEHXZ ; WINRECT::IsWindow(void)
.text$mn:000008E0                 test    eax, eax
.text$mn:000008E2                 jz      short loc_944
.text$mn:000008E4                 mov     ecx, [ebp+var_4] ; this
.text$mn:000008E7                 call    ?GetID@WINRECT@@QAEIXZ ; WINRECT::GetID(void)
.text$mn:000008EC                 push    eax             ; nIDDlgItem
.text$mn:000008ED                 mov     eax, [ebp+hDlg]
.text$mn:000008F0                 push    eax             ; hDlg
.text$mn:000008F1                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:000008F7                 mov     [ebp+hWnd], eax
.text$mn:000008FA                 cmp     [ebp+hWnd], 0
.text$mn:000008FE                 jz      short loc_944
.text$mn:00000900                 mov     ecx, [ebp+var_4] ; this
.text$mn:00000903                 call    ?GetRect@WINRECT@@QAEAAUtagRECT@@XZ ; WINRECT::GetRect(void)
.text$mn:00000908                 push    eax             ; lpRect
.text$mn:00000909                 mov     ecx, [ebp+hWnd]
.text$mn:0000090C                 push    ecx             ; hWnd
.text$mn:0000090D                 call    dword ptr ds:__imp__GetWindowRect@8 ; GetWindowRect(x,x)
.text$mn:00000913                 mov     ecx, [ebp+var_4] ; this
.text$mn:00000916                 call    ?GetRect@WINRECT@@QAEAAUtagRECT@@XZ ; WINRECT::GetRect(void)
.text$mn:0000091B                 push    eax             ; struct tagRECT *
.text$mn:0000091C                 call    ?RectToPoint@@YA?AUtagPOINT@@ABUtagRECT@@@Z ; RectToPoint(tagRECT const &)
.text$mn:00000921                 add     esp, 4
.text$mn:00000924                 mov     [ebp+var_14], eax
.text$mn:00000927                 mov     [ebp+var_10], edx
.text$mn:0000092A                 mov     edx, [ebp+var_14]
.text$mn:0000092D                 mov     [ebp+Point.x], edx
.text$mn:00000930                 mov     eax, [ebp+var_10]
.text$mn:00000933                 mov     [ebp+Point.y], eax
.text$mn:00000936                 lea     ecx, [ebp+Point]
.text$mn:00000939                 push    ecx             ; lpPoint
.text$mn:0000093A                 mov     edx, [ebp+hDlg]
.text$mn:0000093D                 push    edx             ; hWnd
.text$mn:0000093E                 call    dword ptr ds:__imp__ScreenToClient@8 ; ScreenToClient(x,x)
.text$mn:00000944
.text$mn:00000944 loc_944:                                ; CODE XREF: CWinMgr::GetWindowPositions(HWND__ *)+6Aj
.text$mn:00000944                                         ; CWinMgr::GetWindowPositions(HWND__ *)+86j
.text$mn:00000944                 jmp     loc_8C3
.text$mn:00000949 ; ---------------------------------------------------------------------------
.text$mn:00000949
.text$mn:00000949 loc_949:                                ; CODE XREF: CWinMgr::GetWindowPositions(HWND__ *)+5Ej
.text$mn:00000949                 mov     esp, ebp
.text$mn:0000094B                 pop     ebp
.text$mn:0000094C                 retn    4
.text$mn:0000094C ?GetWindowPositions@CWinMgr@@UAEXPAUHWND__@@@Z endp
.text$mn:0000094C
.text$mn:0000094C ; ---------------------------------------------------------------------------
.text$mn:0000094F                 db 9 dup(0CCh)
.text$mn:00000958
.text$mn:00000958 ; =============== S U B R O U T I N E =======================================
.text$mn:00000958
.text$mn:00000958 ; Attributes: bp-based frame
.text$mn:00000958
.text$mn:00000958 ; void __thiscall CWinMgr::SetWindowPositions(CWinMgr *this, HWND)
.text$mn:00000958                 public ?SetWindowPositions@CWinMgr@@UAEXPAUHWND__@@@Z
.text$mn:00000958 ?SetWindowPositions@CWinMgr@@UAEXPAUHWND__@@@Z proc near
.text$mn:00000958                                         ; DATA XREF: .rdata:00002364o
.text$mn:00000958
.text$mn:00000958 hWinPosInfo     = dword ptr -1Ch
.text$mn:00000958 var_18          = dword ptr -18h
.text$mn:00000958 hWnd            = dword ptr -14h
.text$mn:00000958 nNumWindows     = dword ptr -10h
.text$mn:00000958 var_C           = dword ptr -0Ch
.text$mn:00000958 var_8           = dword ptr -8
.text$mn:00000958 var_4           = dword ptr -4
.text$mn:00000958 hDlg            = dword ptr  8
.text$mn:00000958
.text$mn:00000958                 push    ebp
.text$mn:00000959                 mov     ebp, esp
.text$mn:0000095B                 sub     esp, 1Ch
.text$mn:0000095E                 mov     [ebp+var_C], ecx
.text$mn:00000961                 mov     ecx, [ebp+var_C] ; this
.text$mn:00000964                 call    ?CountWindows@CWinMgr@@IAEHXZ ; CWinMgr::CountWindows(void)
.text$mn:00000969                 mov     [ebp+nNumWindows], eax
.text$mn:0000096C                 mov     eax, [ebp+var_C]
.text$mn:0000096F                 cmp     dword ptr [eax+4], 0
.text$mn:00000973                 jz      loc_A8E
.text$mn:00000979                 cmp     [ebp+hDlg], 0
.text$mn:0000097D                 jz      loc_A8E
.text$mn:00000983                 cmp     [ebp+nNumWindows], 0
.text$mn:00000987                 jle     loc_A8E
.text$mn:0000098D                 mov     ecx, [ebp+nNumWindows]
.text$mn:00000990                 push    ecx             ; nNumWindows
.text$mn:00000991                 call    dword ptr ds:__imp__BeginDeferWindowPos@4 ; BeginDeferWindowPos(x)
.text$mn:00000997                 mov     [ebp+hWinPosInfo], eax
.text$mn:0000099A                 mov     [ebp+var_18], 0
.text$mn:000009A1                 mov     edx, [ebp+var_C]
.text$mn:000009A4                 mov     eax, [edx+4]
.text$mn:000009A7                 mov     [ebp+var_4], eax
.text$mn:000009AA                 jmp     short loc_9B5
.text$mn:000009AC ; ---------------------------------------------------------------------------
.text$mn:000009AC
.text$mn:000009AC loc_9AC:                                ; CODE XREF: CWinMgr::SetWindowPositions(HWND__ *):loc_A7Fj
.text$mn:000009AC                 mov     ecx, [ebp+var_4]
.text$mn:000009AF                 add     ecx, 24h ; '$'
.text$mn:000009B2                 mov     [ebp+var_4], ecx
.text$mn:000009B5
.text$mn:000009B5 loc_9B5:                                ; CODE XREF: CWinMgr::SetWindowPositions(HWND__ *)+52j
.text$mn:000009B5                 mov     ecx, [ebp+var_4] ; this
.text$mn:000009B8                 call    ?IsEnd@WINRECT@@QBEHXZ ; WINRECT::IsEnd(void)
.text$mn:000009BD                 test    eax, eax
.text$mn:000009BF                 jnz     loc_A84
.text$mn:000009C5                 mov     ecx, [ebp+var_4] ; this
.text$mn:000009C8                 call    ?IsWindow@WINRECT@@QBEHXZ ; WINRECT::IsWindow(void)
.text$mn:000009CD                 test    eax, eax
.text$mn:000009CF                 jz      loc_A6A
.text$mn:000009D5                 mov     edx, [ebp+var_18]
.text$mn:000009D8                 cmp     edx, [ebp+nNumWindows]
.text$mn:000009DB                 jl      short loc_9F1
.text$mn:000009DD                 push    51h ; 'Q'       ; Line
.text$mn:000009DF                 push    offset $SG63961 ; "..\\src\\WinControls\\WindowsDlg\\WinMg"...
.text$mn:000009E4                 push    offset $SG63962 ; "count < nWindows"
.text$mn:000009E9                 call    __wassert
.text$mn:000009EE ; ---------------------------------------------------------------------------
.text$mn:000009EE                 add     esp, 0Ch
.text$mn:000009F1
.text$mn:000009F1 loc_9F1:                                ; CODE XREF: CWinMgr::SetWindowPositions(HWND__ *)+83j
.text$mn:000009F1                 mov     ecx, [ebp+var_4] ; this
.text$mn:000009F4                 call    ?GetID@WINRECT@@QAEIXZ ; WINRECT::GetID(void)
.text$mn:000009F9                 push    eax             ; nIDDlgItem
.text$mn:000009FA                 mov     ecx, [ebp+hDlg]
.text$mn:000009FD                 push    ecx             ; hDlg
.text$mn:000009FE                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00000A04                 mov     [ebp+hWnd], eax
.text$mn:00000A07                 cmp     [ebp+hWnd], 0
.text$mn:00000A0B                 jz      short loc_A68
.text$mn:00000A0D                 mov     ecx, [ebp+var_4] ; this
.text$mn:00000A10                 call    ?GetRect@WINRECT@@QAEAAUtagRECT@@XZ ; WINRECT::GetRect(void)
.text$mn:00000A15                 mov     [ebp+var_8], eax
.text$mn:00000A18                 push    4               ; uFlags
.text$mn:00000A1A                 mov     edx, [ebp+var_8]
.text$mn:00000A1D                 push    edx             ; struct tagRECT *
.text$mn:00000A1E                 call    ?RectHeight@@YAJABUtagRECT@@@Z ; RectHeight(tagRECT const &)
.text$mn:00000A23                 add     esp, 4
.text$mn:00000A26                 push    eax             ; cy
.text$mn:00000A27                 mov     eax, [ebp+var_8]
.text$mn:00000A2A                 push    eax             ; struct tagRECT *
.text$mn:00000A2B                 call    ?RectWidth@@YAJABUtagRECT@@@Z ; RectWidth(tagRECT const &)
.text$mn:00000A30                 add     esp, 4
.text$mn:00000A33                 push    eax             ; cx
.text$mn:00000A34                 mov     ecx, [ebp+var_8]
.text$mn:00000A37                 mov     edx, [ecx+4]
.text$mn:00000A3A                 push    edx             ; y
.text$mn:00000A3B                 mov     eax, [ebp+var_8]
.text$mn:00000A3E                 mov     ecx, [eax]
.text$mn:00000A40                 push    ecx             ; x
.text$mn:00000A41                 push    0               ; hWndInsertAfter
.text$mn:00000A43                 mov     edx, [ebp+hWnd]
.text$mn:00000A46                 push    edx             ; hWnd
.text$mn:00000A47                 mov     eax, [ebp+hWinPosInfo]
.text$mn:00000A4A                 push    eax             ; hWinPosInfo
.text$mn:00000A4B                 call    dword ptr ds:__imp__DeferWindowPos@32 ; DeferWindowPos(x,x,x,x,x,x,x,x)
.text$mn:00000A51                 push    1               ; bErase
.text$mn:00000A53                 push    0               ; lpRect
.text$mn:00000A55                 mov     ecx, [ebp+hWnd]
.text$mn:00000A58                 push    ecx             ; hWnd
.text$mn:00000A59                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text$mn:00000A5F                 mov     edx, [ebp+var_18]
.text$mn:00000A62                 add     edx, 1
.text$mn:00000A65                 mov     [ebp+var_18], edx
.text$mn:00000A68
.text$mn:00000A68 loc_A68:                                ; CODE XREF: CWinMgr::SetWindowPositions(HWND__ *)+B3j
.text$mn:00000A68                 jmp     short loc_A7F
.text$mn:00000A6A ; ---------------------------------------------------------------------------
.text$mn:00000A6A
.text$mn:00000A6A loc_A6A:                                ; CODE XREF: CWinMgr::SetWindowPositions(HWND__ *)+77j
.text$mn:00000A6A                 push    1               ; bErase
.text$mn:00000A6C                 mov     ecx, [ebp+var_4] ; this
.text$mn:00000A6F                 call    ?GetRect@WINRECT@@QAEAAUtagRECT@@XZ ; WINRECT::GetRect(void)
.text$mn:00000A74                 push    eax             ; lpRect
.text$mn:00000A75                 mov     eax, [ebp+hDlg]
.text$mn:00000A78                 push    eax             ; hWnd
.text$mn:00000A79                 call    dword ptr ds:__imp__InvalidateRect@12 ; InvalidateRect(x,x,x)
.text$mn:00000A7F
.text$mn:00000A7F loc_A7F:                                ; CODE XREF: CWinMgr::SetWindowPositions(HWND__ *):loc_A68j
.text$mn:00000A7F                 jmp     loc_9AC
.text$mn:00000A84 ; ---------------------------------------------------------------------------
.text$mn:00000A84
.text$mn:00000A84 loc_A84:                                ; CODE XREF: CWinMgr::SetWindowPositions(HWND__ *)+67j
.text$mn:00000A84                 mov     ecx, [ebp+hWinPosInfo]
.text$mn:00000A87                 push    ecx             ; hWinPosInfo
.text$mn:00000A88                 call    dword ptr ds:__imp__EndDeferWindowPos@4 ; EndDeferWindowPos(x)
.text$mn:00000A8E
.text$mn:00000A8E loc_A8E:                                ; CODE XREF: CWinMgr::SetWindowPositions(HWND__ *)+1Bj
.text$mn:00000A8E                                         ; CWinMgr::SetWindowPositions(HWND__ *)+25j ...
.text$mn:00000A8E                 mov     esp, ebp
.text$mn:00000A90                 pop     ebp
.text$mn:00000A91                 retn    4
.text$mn:00000A91 ?SetWindowPositions@CWinMgr@@UAEXPAUHWND__@@@Z endp
.text$mn:00000A91
.text$mn:00000A91 ; ---------------------------------------------------------------------------
.text$mn:00000A94                 align 8
.text$mn:00000A98
.text$mn:00000A98 ; =============== S U B R O U T I N E =======================================
.text$mn:00000A98
.text$mn:00000A98 ; Attributes: bp-based frame
.text$mn:00000A98
.text$mn:00000A98 ; void __thiscall CWinMgr::OnGetSizeInfo(CWinMgr *this, struct SIZEINFO *, struct WINRECT *, HWND)
.text$mn:00000A98                 public ?OnGetSizeInfo@CWinMgr@@UAEXAAUSIZEINFO@@PAVWINRECT@@PAUHWND__@@@Z
.text$mn:00000A98 ?OnGetSizeInfo@CWinMgr@@UAEXAAUSIZEINFO@@PAVWINRECT@@PAUHWND__@@@Z proc near
.text$mn:00000A98                                         ; DATA XREF: .rdata:00002368o
.text$mn:00000A98
.text$mn:00000A98 var_DC          = byte ptr -0DCh
.text$mn:00000A98 var_D4          = dword ptr -0D4h
.text$mn:00000A98 var_D0          = dword ptr -0D0h
.text$mn:00000A98 var_CC          = dword ptr -0CCh
.text$mn:00000A98 var_C8          = dword ptr -0C8h
.text$mn:00000A98 var_C4          = dword ptr -0C4h
.text$mn:00000A98 var_C0          = dword ptr -0C0h
.text$mn:00000A98 var_BC          = dword ptr -0BCh
.text$mn:00000A98 var_B8          = dword ptr -0B8h
.text$mn:00000A98 var_B4          = dword ptr -0B4h
.text$mn:00000A98 var_B0          = dword ptr -0B0h
.text$mn:00000A98 var_AC          = dword ptr -0ACh
.text$mn:00000A98 var_A8          = dword ptr -0A8h
.text$mn:00000A98 var_A4          = dword ptr -0A4h
.text$mn:00000A98 var_A0          = dword ptr -0A0h
.text$mn:00000A98 var_9C          = dword ptr -9Ch
.text$mn:00000A98 var_98          = tagSIZE ptr -98h
.text$mn:00000A98 var_90          = dword ptr -90h
.text$mn:00000A98 var_8C          = dword ptr -8Ch
.text$mn:00000A98 var_88          = dword ptr -88h
.text$mn:00000A98 var_84          = dword ptr -84h
.text$mn:00000A98 var_80          = dword ptr -80h
.text$mn:00000A98 hWnd            = dword ptr -7Ch
.text$mn:00000A98 var_78          = dword ptr -78h
.text$mn:00000A98 var_74          = dword ptr -74h
.text$mn:00000A98 var_70          = dword ptr -70h
.text$mn:00000A98 var_6C          = dword ptr -6Ch
.text$mn:00000A98 var_68          = dword ptr -68h
.text$mn:00000A98 var_64          = dword ptr -64h
.text$mn:00000A98 var_60          = dword ptr -60h
.text$mn:00000A98 var_5C          = dword ptr -5Ch
.text$mn:00000A98 var_58          = dword ptr -58h
.text$mn:00000A98 var_54          = dword ptr -54h
.text$mn:00000A98 var_50          = dword ptr -50h
.text$mn:00000A98 var_4C          = dword ptr -4Ch
.text$mn:00000A98 var_48          = dword ptr -48h
.text$mn:00000A98 var_44          = dword ptr -44h
.text$mn:00000A98 var_40          = dword ptr -40h
.text$mn:00000A98 var_3C          = byte ptr -3Ch
.text$mn:00000A98 var_38          = dword ptr -38h
.text$mn:00000A98 X               = dword ptr -34h
.text$mn:00000A98 var_30          = dword ptr -30h
.text$mn:00000A98 var_2C          = dword ptr -2Ch
.text$mn:00000A98 var_28          = dword ptr -28h
.text$mn:00000A98 var_24          = byte ptr -24h
.text$mn:00000A98 var_1C          = dword ptr -1Ch
.text$mn:00000A98 var_18          = dword ptr -18h
.text$mn:00000A98 var_14          = dword ptr -14h
.text$mn:00000A98 var_10          = dword ptr -10h
.text$mn:00000A98 var_C           = dword ptr -0Ch
.text$mn:00000A98 var_8           = dword ptr -8
.text$mn:00000A98 var_4           = dword ptr -4
.text$mn:00000A98 arg_0           = dword ptr  8
.text$mn:00000A98 arg_4           = dword ptr  0Ch
.text$mn:00000A98 hDlg            = dword ptr  10h
.text$mn:00000A98
.text$mn:00000A98                 push    ebp
.text$mn:00000A99                 mov     ebp, esp
.text$mn:00000A9B                 sub     esp, 0DCh
.text$mn:00000AA1                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000AA6                 xor     eax, ebp
.text$mn:00000AA8                 mov     [ebp+var_4], eax
.text$mn:00000AAB                 mov     [ebp+var_48], ecx
.text$mn:00000AAE                 mov     eax, [ebp+arg_0]
.text$mn:00000AB1                 mov     ecx, _SIZEZERO
.text$mn:00000AB7                 mov     [eax+10h], ecx
.text$mn:00000ABA                 mov     edx, dword_4
.text$mn:00000AC0                 mov     [eax+14h], edx
.text$mn:00000AC3                 mov     eax, [ebp+arg_0]
.text$mn:00000AC6                 mov     ecx, _SIZEMAX
.text$mn:00000ACC                 mov     [eax+18h], ecx
.text$mn:00000ACF                 mov     edx, dword_C
.text$mn:00000AD5                 mov     [eax+1Ch], edx
.text$mn:00000AD8                 mov     ecx, [ebp+arg_4] ; this
.text$mn:00000ADB                 call    ?GetRect@WINRECT@@QAEAAUtagRECT@@XZ ; WINRECT::GetRect(void)
.text$mn:00000AE0                 push    eax             ; struct tagRECT *
.text$mn:00000AE1                 call    ?RectToSize@@YA?AUtagSIZE@@ABUtagRECT@@@Z ; RectToSize(tagRECT const &)
.text$mn:00000AE6                 add     esp, 4
.text$mn:00000AE9                 mov     [ebp+var_B4], eax
.text$mn:00000AEF                 mov     [ebp+var_B0], edx
.text$mn:00000AF5                 mov     eax, [ebp+arg_0]
.text$mn:00000AF8                 mov     ecx, [ebp+var_B4]
.text$mn:00000AFE                 mov     [eax+8], ecx
.text$mn:00000B01                 mov     edx, [ebp+var_B0]
.text$mn:00000B07                 mov     [eax+0Ch], edx
.text$mn:00000B0A                 mov     ecx, [ebp+arg_4] ; this
.text$mn:00000B0D                 call    ?IsGroup@WINRECT@@QBEHXZ ; WINRECT::IsGroup(void)
.text$mn:00000B12                 test    eax, eax
.text$mn:00000B14                 jz      loc_DC9
.text$mn:00000B1A                 mov     eax, [ebp+arg_0]
.text$mn:00000B1D                 mov     ecx, _SIZEZERO
.text$mn:00000B23                 mov     [eax+8], ecx
.text$mn:00000B26                 mov     edx, dword_4
.text$mn:00000B2C                 mov     [eax+0Ch], edx
.text$mn:00000B2F                 mov     ecx, [ebp+arg_4] ; this
.text$mn:00000B32                 call    ?IsRowGroup@WINRECT@@QBEHXZ ; WINRECT::IsRowGroup(void)
.text$mn:00000B37                 mov     [ebp+var_88], eax
.text$mn:00000B3D                 lea     ecx, [ebp+var_3C] ; this
.text$mn:00000B40                 call    ??0CWinGroupIterator@@QAE@XZ ; CWinGroupIterator::CWinGroupIterator(void)
.text$mn:00000B45                 mov     eax, [ebp+arg_4]
.text$mn:00000B48                 push    eax             ; WINRECT *
.text$mn:00000B49                 lea     ecx, [ebp+var_3C]
.text$mn:00000B4C                 call    ??4CWinGroupIterator@@QAEAAV0@PAVWINRECT@@@Z ; CWinGroupIterator::operator=(WINRECT *)
.text$mn:00000B51                 jmp     short loc_B5B
.text$mn:00000B53 ; ---------------------------------------------------------------------------
.text$mn:00000B53
.text$mn:00000B53 loc_B53:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *):loc_D27j
.text$mn:00000B53                 lea     ecx, [ebp+var_3C] ; this
.text$mn:00000B56                 call    ?Next@CWinGroupIterator@@QAEPAVWINRECT@@XZ ; CWinGroupIterator::Next(void)
.text$mn:00000B5B
.text$mn:00000B5B loc_B5B:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+B9j
.text$mn:00000B5B                 lea     ecx, [ebp+var_3C]
.text$mn:00000B5E                 call    ??BCWinGroupIterator@@QAEPAVWINRECT@@XZ ; CWinGroupIterator::operator WINRECT *(void)
.text$mn:00000B63                 test    eax, eax
.text$mn:00000B65                 jz      loc_D2C
.text$mn:00000B6B                 lea     ecx, [ebp+var_3C]
.text$mn:00000B6E                 call    ??BCWinGroupIterator@@QAEPAVWINRECT@@XZ ; CWinGroupIterator::operator WINRECT *(void)
.text$mn:00000B73                 mov     [ebp+var_C0], eax
.text$mn:00000B79                 mov     ecx, [ebp+hDlg]
.text$mn:00000B7C                 push    ecx
.text$mn:00000B7D                 mov     edx, [ebp+var_C0]
.text$mn:00000B83                 push    edx
.text$mn:00000B84                 lea     eax, [ebp+var_24]
.text$mn:00000B87                 push    eax
.text$mn:00000B88                 mov     ecx, [ebp+var_48]
.text$mn:00000B8B                 mov     edx, [ecx]
.text$mn:00000B8D                 mov     ecx, [ebp+var_48]
.text$mn:00000B90                 mov     eax, [edx+0Ch]
.text$mn:00000B93                 call    eax
.text$mn:00000B95                 cmp     [ebp+var_88], 0
.text$mn:00000B9C                 jz      loc_C6C
.text$mn:00000BA2                 mov     ecx, [ebp+arg_0]
.text$mn:00000BA5                 mov     edx, [ecx+10h]
.text$mn:00000BA8                 cmp     edx, [ebp+var_14]
.text$mn:00000BAB                 jle     short loc_BB8
.text$mn:00000BAD                 mov     eax, [ebp+arg_0]
.text$mn:00000BB0                 mov     ecx, [eax+10h]
.text$mn:00000BB3                 mov     [ebp+var_58], ecx
.text$mn:00000BB6                 jmp     short loc_BBE
.text$mn:00000BB8 ; ---------------------------------------------------------------------------
.text$mn:00000BB8
.text$mn:00000BB8 loc_BB8:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+113j
.text$mn:00000BB8                 mov     edx, [ebp+var_14]
.text$mn:00000BBB                 mov     [ebp+var_58], edx
.text$mn:00000BBE
.text$mn:00000BBE loc_BBE:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+11Ej
.text$mn:00000BBE                 mov     eax, [ebp+arg_0]
.text$mn:00000BC1                 mov     ecx, [ebp+var_58]
.text$mn:00000BC4                 mov     [eax+10h], ecx
.text$mn:00000BC7                 mov     edx, [ebp+arg_0]
.text$mn:00000BCA                 mov     eax, [edx+14h]
.text$mn:00000BCD                 add     eax, [ebp+var_10]
.text$mn:00000BD0                 mov     ecx, [ebp+arg_0]
.text$mn:00000BD3                 mov     [ecx+14h], eax
.text$mn:00000BD6                 mov     edx, [ebp+arg_0]
.text$mn:00000BD9                 mov     eax, [edx+18h]
.text$mn:00000BDC                 cmp     eax, [ebp+var_C]
.text$mn:00000BDF                 jge     short loc_BEC
.text$mn:00000BE1                 mov     ecx, [ebp+arg_0]
.text$mn:00000BE4                 mov     edx, [ecx+18h]
.text$mn:00000BE7                 mov     [ebp+var_70], edx
.text$mn:00000BEA                 jmp     short loc_BF2
.text$mn:00000BEC ; ---------------------------------------------------------------------------
.text$mn:00000BEC
.text$mn:00000BEC loc_BEC:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+147j
.text$mn:00000BEC                 mov     eax, [ebp+var_C]
.text$mn:00000BEF                 mov     [ebp+var_70], eax
.text$mn:00000BF2
.text$mn:00000BF2 loc_BF2:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+152j
.text$mn:00000BF2                 mov     ecx, [ebp+arg_0]
.text$mn:00000BF5                 mov     edx, [ebp+var_70]
.text$mn:00000BF8                 mov     [ecx+18h], edx
.text$mn:00000BFB                 mov     eax, [ebp+arg_0]
.text$mn:00000BFE                 mov     ecx, [eax+1Ch]
.text$mn:00000C01                 add     ecx, [ebp+var_8]
.text$mn:00000C04                 cmp     ecx, 7FFFh
.text$mn:00000C0A                 jge     short loc_C1D
.text$mn:00000C0C                 mov     edx, [ebp+arg_0]
.text$mn:00000C0F                 mov     eax, [edx+1Ch]
.text$mn:00000C12                 add     eax, [ebp+var_8]
.text$mn:00000C15                 mov     [ebp+var_84], eax
.text$mn:00000C1B                 jmp     short loc_C27
.text$mn:00000C1D ; ---------------------------------------------------------------------------
.text$mn:00000C1D
.text$mn:00000C1D loc_C1D:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+172j
.text$mn:00000C1D                 mov     [ebp+var_84], 7FFFh
.text$mn:00000C27
.text$mn:00000C27 loc_C27:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+183j
.text$mn:00000C27                 mov     ecx, [ebp+arg_0]
.text$mn:00000C2A                 mov     edx, [ebp+var_84]
.text$mn:00000C30                 mov     [ecx+1Ch], edx
.text$mn:00000C33                 mov     eax, [ebp+arg_0]
.text$mn:00000C36                 mov     ecx, [eax+8]
.text$mn:00000C39                 cmp     ecx, [ebp+var_1C]
.text$mn:00000C3C                 jle     short loc_C49
.text$mn:00000C3E                 mov     edx, [ebp+arg_0]
.text$mn:00000C41                 mov     eax, [edx+8]
.text$mn:00000C44                 mov     [ebp+var_60], eax
.text$mn:00000C47                 jmp     short loc_C4F
.text$mn:00000C49 ; ---------------------------------------------------------------------------
.text$mn:00000C49
.text$mn:00000C49 loc_C49:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+1A4j
.text$mn:00000C49                 mov     ecx, [ebp+var_1C]
.text$mn:00000C4C                 mov     [ebp+var_60], ecx
.text$mn:00000C4F
.text$mn:00000C4F loc_C4F:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+1AFj
.text$mn:00000C4F                 mov     edx, [ebp+arg_0]
.text$mn:00000C52                 mov     eax, [ebp+var_60]
.text$mn:00000C55                 mov     [edx+8], eax
.text$mn:00000C58                 mov     ecx, [ebp+arg_0]
.text$mn:00000C5B                 mov     edx, [ecx+0Ch]
.text$mn:00000C5E                 add     edx, [ebp+var_18]
.text$mn:00000C61                 mov     eax, [ebp+arg_0]
.text$mn:00000C64                 mov     [eax+0Ch], edx
.text$mn:00000C67                 jmp     loc_D27
.text$mn:00000C6C ; ---------------------------------------------------------------------------
.text$mn:00000C6C
.text$mn:00000C6C loc_C6C:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+104j
.text$mn:00000C6C                 mov     ecx, [ebp+arg_0]
.text$mn:00000C6F                 mov     edx, [ecx+10h]
.text$mn:00000C72                 add     edx, [ebp+var_14]
.text$mn:00000C75                 mov     eax, [ebp+arg_0]
.text$mn:00000C78                 mov     [eax+10h], edx
.text$mn:00000C7B                 mov     ecx, [ebp+arg_0]
.text$mn:00000C7E                 mov     edx, [ecx+14h]
.text$mn:00000C81                 cmp     edx, [ebp+var_10]
.text$mn:00000C84                 jle     short loc_C91
.text$mn:00000C86                 mov     eax, [ebp+arg_0]
.text$mn:00000C89                 mov     ecx, [eax+14h]
.text$mn:00000C8C                 mov     [ebp+var_80], ecx
.text$mn:00000C8F                 jmp     short loc_C97
.text$mn:00000C91 ; ---------------------------------------------------------------------------
.text$mn:00000C91
.text$mn:00000C91 loc_C91:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+1ECj
.text$mn:00000C91                 mov     edx, [ebp+var_10]
.text$mn:00000C94                 mov     [ebp+var_80], edx
.text$mn:00000C97
.text$mn:00000C97 loc_C97:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+1F7j
.text$mn:00000C97                 mov     eax, [ebp+arg_0]
.text$mn:00000C9A                 mov     ecx, [ebp+var_80]
.text$mn:00000C9D                 mov     [eax+14h], ecx
.text$mn:00000CA0                 mov     edx, [ebp+arg_0]
.text$mn:00000CA3                 mov     eax, [edx+18h]
.text$mn:00000CA6                 add     eax, [ebp+var_C]
.text$mn:00000CA9                 cmp     eax, 7FFFh
.text$mn:00000CAE                 jge     short loc_CBE
.text$mn:00000CB0                 mov     ecx, [ebp+arg_0]
.text$mn:00000CB3                 mov     edx, [ecx+18h]
.text$mn:00000CB6                 add     edx, [ebp+var_C]
.text$mn:00000CB9                 mov     [ebp+var_68], edx
.text$mn:00000CBC                 jmp     short loc_CC5
.text$mn:00000CBE ; ---------------------------------------------------------------------------
.text$mn:00000CBE
.text$mn:00000CBE loc_CBE:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+216j
.text$mn:00000CBE                 mov     [ebp+var_68], 7FFFh
.text$mn:00000CC5
.text$mn:00000CC5 loc_CC5:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+224j
.text$mn:00000CC5                 mov     eax, [ebp+arg_0]
.text$mn:00000CC8                 mov     ecx, [ebp+var_68]
.text$mn:00000CCB                 mov     [eax+18h], ecx
.text$mn:00000CCE                 mov     edx, [ebp+arg_0]
.text$mn:00000CD1                 mov     eax, [edx+1Ch]
.text$mn:00000CD4                 cmp     eax, [ebp+var_8]
.text$mn:00000CD7                 jge     short loc_CE4
.text$mn:00000CD9                 mov     ecx, [ebp+arg_0]
.text$mn:00000CDC                 mov     edx, [ecx+1Ch]
.text$mn:00000CDF                 mov     [ebp+var_78], edx
.text$mn:00000CE2                 jmp     short loc_CEA
.text$mn:00000CE4 ; ---------------------------------------------------------------------------
.text$mn:00000CE4
.text$mn:00000CE4 loc_CE4:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+23Fj
.text$mn:00000CE4                 mov     eax, [ebp+var_8]
.text$mn:00000CE7                 mov     [ebp+var_78], eax
.text$mn:00000CEA
.text$mn:00000CEA loc_CEA:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+24Aj
.text$mn:00000CEA                 mov     ecx, [ebp+arg_0]
.text$mn:00000CED                 mov     edx, [ebp+var_78]
.text$mn:00000CF0                 mov     [ecx+1Ch], edx
.text$mn:00000CF3                 mov     eax, [ebp+arg_0]
.text$mn:00000CF6                 mov     ecx, [eax+8]
.text$mn:00000CF9                 add     ecx, [ebp+var_1C]
.text$mn:00000CFC                 mov     edx, [ebp+arg_0]
.text$mn:00000CFF                 mov     [edx+8], ecx
.text$mn:00000D02                 mov     eax, [ebp+arg_0]
.text$mn:00000D05                 mov     ecx, [eax+0Ch]
.text$mn:00000D08                 cmp     ecx, [ebp+var_18]
.text$mn:00000D0B                 jle     short loc_D18
.text$mn:00000D0D                 mov     edx, [ebp+arg_0]
.text$mn:00000D10                 mov     eax, [edx+0Ch]
.text$mn:00000D13                 mov     [ebp+var_54], eax
.text$mn:00000D16                 jmp     short loc_D1E
.text$mn:00000D18 ; ---------------------------------------------------------------------------
.text$mn:00000D18
.text$mn:00000D18 loc_D18:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+273j
.text$mn:00000D18                 mov     ecx, [ebp+var_18]
.text$mn:00000D1B                 mov     [ebp+var_54], ecx
.text$mn:00000D1E
.text$mn:00000D1E loc_D1E:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+27Ej
.text$mn:00000D1E                 mov     edx, [ebp+arg_0]
.text$mn:00000D21                 mov     eax, [ebp+var_54]
.text$mn:00000D24                 mov     [edx+0Ch], eax
.text$mn:00000D27
.text$mn:00000D27 loc_D27:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+1CFj
.text$mn:00000D27                 jmp     loc_B53
.text$mn:00000D2C ; ---------------------------------------------------------------------------
.text$mn:00000D2C
.text$mn:00000D2C loc_D2C:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+CDj
.text$mn:00000D2C                 lea     ecx, [ebp+var_2C]
.text$mn:00000D2F                 push    ecx             ; int *
.text$mn:00000D30                 lea     edx, [ebp+X]
.text$mn:00000D33                 push    edx             ; int *
.text$mn:00000D34                 mov     ecx, [ebp+arg_4] ; this
.text$mn:00000D37                 call    ?GetMargins@WINRECT@@QAEHAAH0@Z ; WINRECT::GetMargins(int &,int &)
.text$mn:00000D3C                 mov     eax, [ebp+X]
.text$mn:00000D3F                 shl     eax, 1
.text$mn:00000D41                 mov     [ebp+X], eax
.text$mn:00000D44                 mov     ecx, [ebp+var_2C]
.text$mn:00000D47                 shl     ecx, 1
.text$mn:00000D49                 mov     [ebp+var_2C], ecx
.text$mn:00000D4C                 cmp     [ebp+X], 0
.text$mn:00000D50                 jge     short loc_D5B
.text$mn:00000D52                 mov     [ebp+var_5C], 0
.text$mn:00000D59                 jmp     short loc_D61
.text$mn:00000D5B ; ---------------------------------------------------------------------------
.text$mn:00000D5B
.text$mn:00000D5B loc_D5B:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+2B8j
.text$mn:00000D5B                 mov     edx, [ebp+X]
.text$mn:00000D5E                 mov     [ebp+var_5C], edx
.text$mn:00000D61
.text$mn:00000D61 loc_D61:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+2C1j
.text$mn:00000D61                 mov     eax, [ebp+arg_0]
.text$mn:00000D64                 mov     ecx, [eax+10h]
.text$mn:00000D67                 add     ecx, [ebp+var_5C]
.text$mn:00000D6A                 mov     edx, [ebp+arg_0]
.text$mn:00000D6D                 mov     [edx+10h], ecx
.text$mn:00000D70                 cmp     [ebp+var_2C], 0
.text$mn:00000D74                 jge     short loc_D7F
.text$mn:00000D76                 mov     [ebp+var_64], 0
.text$mn:00000D7D                 jmp     short loc_D85
.text$mn:00000D7F ; ---------------------------------------------------------------------------
.text$mn:00000D7F
.text$mn:00000D7F loc_D7F:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+2DCj
.text$mn:00000D7F                 mov     eax, [ebp+var_2C]
.text$mn:00000D82                 mov     [ebp+var_64], eax
.text$mn:00000D85
.text$mn:00000D85 loc_D85:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+2E5j
.text$mn:00000D85                 mov     ecx, [ebp+arg_0]
.text$mn:00000D88                 mov     edx, [ecx+14h]
.text$mn:00000D8B                 add     edx, [ebp+var_64]
.text$mn:00000D8E                 mov     eax, [ebp+arg_0]
.text$mn:00000D91                 mov     [eax+14h], edx
.text$mn:00000D94                 mov     ecx, [ebp+X]
.text$mn:00000D97                 push    ecx             ; X
.text$mn:00000D98                 call    _abs
.text$mn:00000D9D                 add     esp, 4
.text$mn:00000DA0                 mov     edx, [ebp+arg_0]
.text$mn:00000DA3                 add     eax, [edx+8]
.text$mn:00000DA6                 mov     ecx, [ebp+arg_0]
.text$mn:00000DA9                 mov     [ecx+8], eax
.text$mn:00000DAC                 mov     edx, [ebp+var_2C]
.text$mn:00000DAF                 push    edx             ; X
.text$mn:00000DB0                 call    _abs
.text$mn:00000DB5                 add     esp, 4
.text$mn:00000DB8                 mov     ecx, [ebp+arg_0]
.text$mn:00000DBB                 add     eax, [ecx+0Ch]
.text$mn:00000DBE                 mov     edx, [ebp+arg_0]
.text$mn:00000DC1                 mov     [edx+0Ch], eax
.text$mn:00000DC4                 jmp     loc_1122
.text$mn:00000DC9 ; ---------------------------------------------------------------------------
.text$mn:00000DC9
.text$mn:00000DC9 loc_DC9:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+7Cj
.text$mn:00000DC9                 mov     ecx, [ebp+arg_4] ; this
.text$mn:00000DCC                 call    ?Parent@WINRECT@@QAEPAV1@XZ ; WINRECT::Parent(void)
.text$mn:00000DD1                 mov     [ebp+var_50], eax
.text$mn:00000DD4                 cmp     [ebp+var_50], 0
.text$mn:00000DD8                 jnz     short loc_DF1
.text$mn:00000DDA                 push    13Fh            ; Line
.text$mn:00000DDF                 push    offset $SG64093 ; "..\\src\\WinControls\\WindowsDlg\\WinMg"...
.text$mn:00000DE4                 push    offset $SG64094 ; "parent"
.text$mn:00000DE9                 call    __wassert
.text$mn:00000DEE ; ---------------------------------------------------------------------------
.text$mn:00000DEE                 add     esp, 0Ch
.text$mn:00000DF1
.text$mn:00000DF1 loc_DF1:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+340j
.text$mn:00000DF1                 mov     ecx, [ebp+var_50] ; this
.text$mn:00000DF4                 call    ?GetRect@WINRECT@@QAEAAUtagRECT@@XZ ; WINRECT::GetRect(void)
.text$mn:00000DF9                 mov     [ebp+var_30], eax
.text$mn:00000DFC                 mov     ecx, [ebp+var_50] ; this
.text$mn:00000DFF                 call    ?IsRowGroup@WINRECT@@QBEHXZ ; WINRECT::IsRowGroup(void)
.text$mn:00000E04                 mov     [ebp+var_4C], eax
.text$mn:00000E07                 mov     ecx, [ebp+arg_4] ; this
.text$mn:00000E0A                 call    ?Type@WINRECT@@QBEGXZ ; WINRECT::Type(void)
.text$mn:00000E0F                 movzx   ecx, ax
.text$mn:00000E12                 mov     [ebp+var_38], ecx
.text$mn:00000E15                 mov     edx, [ebp+var_38]
.text$mn:00000E18                 sub     edx, 1
.text$mn:00000E1B                 mov     [ebp+var_38], edx
.text$mn:00000E1E                 cmp     [ebp+var_38], 3 ; switch 4 cases
.text$mn:00000E22                 ja      loc_FED         ; jumptable 00000E2B default case
.text$mn:00000E28                 mov     eax, [ebp+var_38]
.text$mn:00000E2B                 jmp     ds:$LN53[eax*4] ; switch jump
.text$mn:00000E32 ; ---------------------------------------------------------------------------
.text$mn:00000E32
.text$mn:00000E32 $LN13:                                  ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+393j
.text$mn:00000E32                                         ; DATA XREF: .text$mn:$LN53o
.text$mn:00000E32                 mov     ecx, [ebp+arg_4] ; jumptable 00000E2B case 0
.text$mn:00000E35                 call    ?GetParam@WINRECT@@QAEJXZ ; WINRECT::GetParam(void)
.text$mn:00000E3A                 mov     [ebp+var_40], eax
.text$mn:00000E3D                 mov     ecx, [ebp+var_40]
.text$mn:00000E40                 mov     [ebp+var_28], ecx
.text$mn:00000E43                 cmp     [ebp+var_28], 0
.text$mn:00000E47                 jge     short loc_E58
.text$mn:00000E49                 mov     edx, [ebp+var_28]
.text$mn:00000E4C                 neg     edx
.text$mn:00000E4E                 mov     [ebp+var_28], edx
.text$mn:00000E51                 mov     [ebp+var_40], 0
.text$mn:00000E58
.text$mn:00000E58 loc_E58:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+3AFj
.text$mn:00000E58                 cmp     [ebp+var_4C], 0
.text$mn:00000E5C                 jz      short loc_E7B
.text$mn:00000E5E                 mov     eax, [ebp+arg_0]
.text$mn:00000E61                 mov     ecx, [ebp+var_28]
.text$mn:00000E64                 mov     [eax+0Ch], ecx
.text$mn:00000E67                 mov     edx, [ebp+arg_0]
.text$mn:00000E6A                 mov     eax, [ebp+var_28]
.text$mn:00000E6D                 mov     [edx+1Ch], eax
.text$mn:00000E70                 mov     ecx, [ebp+arg_0]
.text$mn:00000E73                 mov     edx, [ebp+var_40]
.text$mn:00000E76                 mov     [ecx+14h], edx
.text$mn:00000E79                 jmp     short loc_E96
.text$mn:00000E7B ; ---------------------------------------------------------------------------
.text$mn:00000E7B
.text$mn:00000E7B loc_E7B:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+3C4j
.text$mn:00000E7B                 mov     eax, [ebp+arg_0]
.text$mn:00000E7E                 mov     ecx, [ebp+var_28]
.text$mn:00000E81                 mov     [eax+8], ecx
.text$mn:00000E84                 mov     edx, [ebp+arg_0]
.text$mn:00000E87                 mov     eax, [ebp+var_28]
.text$mn:00000E8A                 mov     [edx+18h], eax
.text$mn:00000E8D                 mov     ecx, [ebp+arg_0]
.text$mn:00000E90                 mov     edx, [ebp+var_40]
.text$mn:00000E93                 mov     [ecx+10h], edx
.text$mn:00000E96
.text$mn:00000E96 loc_E96:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+3E1j
.text$mn:00000E96                 jmp     loc_1008
.text$mn:00000E9B ; ---------------------------------------------------------------------------
.text$mn:00000E9B
.text$mn:00000E9B $LN9:                                   ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+393j
.text$mn:00000E9B                                         ; DATA XREF: .text$mn:$LN53o
.text$mn:00000E9B                 mov     ecx, [ebp+arg_4] ; jumptable 00000E2B case 1
.text$mn:00000E9E                 call    ?GetParam@WINRECT@@QAEJXZ ; WINRECT::GetParam(void)
.text$mn:00000EA3                 mov     [ebp+var_44], eax
.text$mn:00000EA6                 cmp     [ebp+var_44], 0
.text$mn:00000EAA                 jle     short loc_EB2
.text$mn:00000EAC                 cmp     [ebp+var_44], 64h ; 'd'
.text$mn:00000EB0                 jl      short loc_EC9
.text$mn:00000EB2
.text$mn:00000EB2 loc_EB2:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+412j
.text$mn:00000EB2                 push    156h            ; Line
.text$mn:00000EB7                 push    offset $SG64111 ; "..\\src\\WinControls\\WindowsDlg\\WinMg"...
.text$mn:00000EBC                 push    offset $SG64112 ; "0<pct && pct<100"
.text$mn:00000EC1                 call    __wassert
.text$mn:00000EC6 ; ---------------------------------------------------------------------------
.text$mn:00000EC6                 add     esp, 0Ch
.text$mn:00000EC9
.text$mn:00000EC9 loc_EC9:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+418j
.text$mn:00000EC9                 cmp     [ebp+var_4C], 0
.text$mn:00000ECD                 jz      short loc_EE0
.text$mn:00000ECF                 mov     ecx, [ebp+var_30]
.text$mn:00000ED2                 push    ecx             ; struct tagRECT *
.text$mn:00000ED3                 call    ?RectHeight@@YAJABUtagRECT@@@Z ; RectHeight(tagRECT const &)
.text$mn:00000ED8                 add     esp, 4
.text$mn:00000EDB                 mov     [ebp+var_6C], eax
.text$mn:00000EDE                 jmp     short loc_EEF
.text$mn:00000EE0 ; ---------------------------------------------------------------------------
.text$mn:00000EE0
.text$mn:00000EE0 loc_EE0:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+435j
.text$mn:00000EE0                 mov     edx, [ebp+var_30]
.text$mn:00000EE3                 push    edx             ; struct tagRECT *
.text$mn:00000EE4                 call    ?RectWidth@@YAJABUtagRECT@@@Z ; RectWidth(tagRECT const &)
.text$mn:00000EE9                 add     esp, 4
.text$mn:00000EEC                 mov     [ebp+var_6C], eax
.text$mn:00000EEF
.text$mn:00000EEF loc_EEF:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+446j
.text$mn:00000EEF                 mov     eax, [ebp+var_6C]
.text$mn:00000EF2                 mov     [ebp+var_C4], eax
.text$mn:00000EF8                 mov     eax, [ebp+var_C4]
.text$mn:00000EFE                 imul    eax, [ebp+var_44]
.text$mn:00000F02                 cdq
.text$mn:00000F03                 mov     ecx, 64h ; 'd'
.text$mn:00000F08                 idiv    ecx
.text$mn:00000F0A                 mov     [ebp+var_28], eax
.text$mn:00000F0D                 cmp     [ebp+var_4C], 0
.text$mn:00000F11                 jz      short loc_F5B
.text$mn:00000F13                 mov     edx, [ebp+var_28]
.text$mn:00000F16                 push    edx             ; __int32
.text$mn:00000F17                 mov     eax, [ebp+var_30]
.text$mn:00000F1A                 push    eax             ; struct tagRECT *
.text$mn:00000F1B                 call    ?RectWidth@@YAJABUtagRECT@@@Z ; RectWidth(tagRECT const &)
.text$mn:00000F20                 add     esp, 4
.text$mn:00000F23                 push    eax             ; __int32
.text$mn:00000F24                 call    ?GetSize@@YA?AUtagSIZE@@JJ@Z ; GetSize(long,long)
.text$mn:00000F29                 add     esp, 8
.text$mn:00000F2C                 mov     [ebp+var_AC], eax
.text$mn:00000F32                 mov     [ebp+var_A8], edx
.text$mn:00000F38                 mov     ecx, [ebp+var_AC]
.text$mn:00000F3E                 mov     [ebp+var_CC], ecx
.text$mn:00000F44                 mov     edx, [ebp+var_A8]
.text$mn:00000F4A                 mov     [ebp+var_C8], edx
.text$mn:00000F50                 lea     eax, [ebp+var_CC]
.text$mn:00000F56                 mov     [ebp+var_74], eax
.text$mn:00000F59                 jmp     short loc_FA1
.text$mn:00000F5B ; ---------------------------------------------------------------------------
.text$mn:00000F5B
.text$mn:00000F5B loc_F5B:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+479j
.text$mn:00000F5B                 mov     ecx, [ebp+var_30]
.text$mn:00000F5E                 push    ecx             ; struct tagRECT *
.text$mn:00000F5F                 call    ?RectHeight@@YAJABUtagRECT@@@Z ; RectHeight(tagRECT const &)
.text$mn:00000F64                 add     esp, 4
.text$mn:00000F67                 push    eax             ; __int32
.text$mn:00000F68                 mov     edx, [ebp+var_28]
.text$mn:00000F6B                 push    edx             ; __int32
.text$mn:00000F6C                 call    ?GetSize@@YA?AUtagSIZE@@JJ@Z ; GetSize(long,long)
.text$mn:00000F71                 add     esp, 8
.text$mn:00000F74                 mov     [ebp+var_BC], eax
.text$mn:00000F7A                 mov     [ebp+var_B8], edx
.text$mn:00000F80                 mov     eax, [ebp+var_BC]
.text$mn:00000F86                 mov     [ebp+var_D4], eax
.text$mn:00000F8C                 mov     ecx, [ebp+var_B8]
.text$mn:00000F92                 mov     [ebp+var_D0], ecx
.text$mn:00000F98                 lea     edx, [ebp+var_D4]
.text$mn:00000F9E                 mov     [ebp+var_74], edx
.text$mn:00000FA1
.text$mn:00000FA1 loc_FA1:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+4C1j
.text$mn:00000FA1                 mov     eax, [ebp+var_74]
.text$mn:00000FA4                 mov     [ebp+var_9C], eax
.text$mn:00000FAA                 mov     ecx, [ebp+var_9C]
.text$mn:00000FB0                 mov     edx, [ecx]
.text$mn:00000FB2                 mov     eax, [ecx+4]
.text$mn:00000FB5                 mov     ecx, [ebp+arg_0]
.text$mn:00000FB8                 mov     [ecx+8], edx
.text$mn:00000FBB                 mov     [ecx+0Ch], eax
.text$mn:00000FBE                 jmp     short loc_1008
.text$mn:00000FC0 ; ---------------------------------------------------------------------------
.text$mn:00000FC0
.text$mn:00000FC0 $LN8:                                   ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+393j
.text$mn:00000FC0                                         ; DATA XREF: .text$mn:$LN53o
.text$mn:00000FC0                 mov     ecx, [ebp+arg_4] ; jumptable 00000E2B case 3
.text$mn:00000FC3                 call    ?HasToFitSize@WINRECT@@QAEHXZ ; WINRECT::HasToFitSize(void)
.text$mn:00000FC8                 test    eax, eax
.text$mn:00000FCA                 jz      short loc_FE9
.text$mn:00000FCC                 lea     edx, [ebp+var_DC]
.text$mn:00000FD2                 push    edx
.text$mn:00000FD3                 mov     ecx, [ebp+arg_4] ; this
.text$mn:00000FD6                 call    ?GetToFitSize@WINRECT@@QAE?AUtagSIZE@@XZ ; WINRECT::GetToFitSize(void)
.text$mn:00000FDB                 mov     ecx, [eax]
.text$mn:00000FDD                 mov     edx, [eax+4]
.text$mn:00000FE0                 mov     eax, [ebp+arg_0]
.text$mn:00000FE3                 mov     [eax+8], ecx
.text$mn:00000FE6                 mov     [eax+0Ch], edx
.text$mn:00000FE9
.text$mn:00000FE9 loc_FE9:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+532j
.text$mn:00000FE9                 jmp     short loc_1008
.text$mn:00000FEB ; ---------------------------------------------------------------------------
.text$mn:00000FEB
.text$mn:00000FEB $LN6:                                   ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+393j
.text$mn:00000FEB                                         ; DATA XREF: .text$mn:$LN53o
.text$mn:00000FEB                 jmp     short loc_1008  ; jumptable 00000E2B case 2
.text$mn:00000FED ; ---------------------------------------------------------------------------
.text$mn:00000FED
.text$mn:00000FED loc_FED:                                ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+38Aj
.text$mn:00000FED                 xor     ecx, ecx        ; jumptable 00000E2B default case
.text$mn:00000FEF                 jnz     short loc_1008
.text$mn:00000FF1                 push    166h            ; Line
.text$mn:00000FF6                 push    offset $SG64124 ; "..\\src\\WinControls\\WindowsDlg\\WinMg"...
.text$mn:00000FFB                 push    offset $SG64125 ; "FALSE"
.text$mn:00001000                 call    __wassert
.text$mn:00001005 ; ---------------------------------------------------------------------------
.text$mn:00001005                 add     esp, 0Ch
.text$mn:00001008
.text$mn:00001008 loc_1008:                               ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *):loc_E96j
.text$mn:00001008                                         ; CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+526j ...
.text$mn:00001008                 mov     ecx, [ebp+arg_4] ; this
.text$mn:0000100B                 call    ?IsWindow@WINRECT@@QBEHXZ ; WINRECT::IsWindow(void)
.text$mn:00001010                 test    eax, eax
.text$mn:00001012                 jz      loc_10B6
.text$mn:00001018                 cmp     [ebp+hDlg], 0
.text$mn:0000101C                 jz      loc_10B6
.text$mn:00001022                 mov     ecx, [ebp+arg_4] ; this
.text$mn:00001025                 call    ?GetID@WINRECT@@QAEIXZ ; WINRECT::GetID(void)
.text$mn:0000102A                 push    eax             ; nIDDlgItem
.text$mn:0000102B                 mov     eax, [ebp+hDlg]
.text$mn:0000102E                 push    eax             ; hDlg
.text$mn:0000102F                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00001035                 mov     [ebp+hWnd], eax
.text$mn:00001038                 cmp     [ebp+hWnd], 0
.text$mn:0000103C                 jz      short loc_10B6
.text$mn:0000103E                 mov     ecx, [ebp+hWnd]
.text$mn:00001041                 push    ecx             ; hWnd
.text$mn:00001042                 call    dword ptr ds:__imp__IsWindowVisible@4 ; IsWindowVisible(x)
.text$mn:00001048                 test    eax, eax
.text$mn:0000104A                 jnz     short loc_1071
.text$mn:0000104C                 mov     edx, [ebp+hDlg]
.text$mn:0000104F                 push    edx             ; hWnd
.text$mn:00001050                 call    dword ptr ds:__imp__IsWindowVisible@4 ; IsWindowVisible(x)
.text$mn:00001056                 test    eax, eax
.text$mn:00001058                 jz      short loc_1071
.text$mn:0000105A                 mov     eax, [ebp+arg_0]
.text$mn:0000105D                 mov     ecx, _SIZEZERO
.text$mn:00001063                 mov     [eax+8], ecx
.text$mn:00001066                 mov     edx, dword_4
.text$mn:0000106C                 mov     [eax+0Ch], edx
.text$mn:0000106F                 jmp     short loc_10B6
.text$mn:00001071 ; ---------------------------------------------------------------------------
.text$mn:00001071
.text$mn:00001071 loc_1071:                               ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+5B2j
.text$mn:00001071                                         ; CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+5C0j
.text$mn:00001071                 mov     eax, [ebp+var_30]
.text$mn:00001074                 push    eax             ; struct tagRECT *
.text$mn:00001075                 call    ?RectToSize@@YA?AUtagSIZE@@ABUtagRECT@@@Z ; RectToSize(tagRECT const &)
.text$mn:0000107A                 add     esp, 4
.text$mn:0000107D                 mov     [ebp+var_90], eax
.text$mn:00001083                 mov     [ebp+var_8C], edx
.text$mn:00001089                 mov     ecx, [ebp+arg_0]
.text$mn:0000108C                 mov     edx, [ebp+var_90]
.text$mn:00001092                 mov     [ecx], edx
.text$mn:00001094                 mov     eax, [ebp+var_8C]
.text$mn:0000109A                 mov     [ecx+4], eax
.text$mn:0000109D                 mov     ecx, [ebp+arg_4] ; this
.text$mn:000010A0                 call    ?GetID@WINRECT@@QAEIXZ ; WINRECT::GetID(void)
.text$mn:000010A5                 push    eax             ; unsigned int
.text$mn:000010A6                 mov     ecx, [ebp+hDlg]
.text$mn:000010A9                 push    ecx             ; hWnd
.text$mn:000010AA                 mov     edx, [ebp+arg_0]
.text$mn:000010AD                 push    edx             ; struct SIZEINFO *
.text$mn:000010AE                 mov     ecx, [ebp+var_48] ; this
.text$mn:000010B1                 call    ?SendGetSizeInfo@CWinMgr@@IAEHAAUSIZEINFO@@PAUHWND__@@I@Z ; CWinMgr::SendGetSizeInfo(SIZEINFO &,HWND__ *,uint)
.text$mn:000010B6
.text$mn:000010B6 loc_10B6:                               ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+57Aj
.text$mn:000010B6                                         ; CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+584j ...
.text$mn:000010B6                 mov     eax, [ebp+arg_0]
.text$mn:000010B9                 mov     ecx, [eax+1Ch]
.text$mn:000010BC                 push    ecx
.text$mn:000010BD                 mov     edx, [eax+18h]
.text$mn:000010C0                 push    edx             ; struct tagSIZE
.text$mn:000010C1                 mov     eax, [ebp+arg_0]
.text$mn:000010C4                 mov     ecx, [eax+0Ch]
.text$mn:000010C7                 push    ecx
.text$mn:000010C8                 mov     edx, [eax+8]
.text$mn:000010CB                 push    edx             ; struct tagSIZE
.text$mn:000010CC                 call    ?minsize@@YA?AUtagSIZE@@U1@0@Z ; minsize(tagSIZE,tagSIZE)
.text$mn:000010D1                 add     esp, 10h
.text$mn:000010D4                 mov     [ebp+var_98._cx], eax
.text$mn:000010DA                 mov     [ebp+var_98.cy], edx
.text$mn:000010E0                 mov     eax, [ebp+arg_0]
.text$mn:000010E3                 mov     ecx, [eax+14h]
.text$mn:000010E6                 push    ecx
.text$mn:000010E7                 mov     edx, [eax+10h]
.text$mn:000010EA                 push    edx             ; struct tagSIZE
.text$mn:000010EB                 mov     eax, [ebp+var_98.cy]
.text$mn:000010F1                 push    eax
.text$mn:000010F2                 mov     ecx, [ebp+var_98._cx]
.text$mn:000010F8                 push    ecx             ; struct tagSIZE
.text$mn:000010F9                 call    ?maxsize@@YA?AUtagSIZE@@U1@0@Z ; maxsize(tagSIZE,tagSIZE)
.text$mn:000010FE                 add     esp, 10h
.text$mn:00001101                 mov     [ebp+var_A4], eax
.text$mn:00001107                 mov     [ebp+var_A0], edx
.text$mn:0000110D                 mov     edx, [ebp+arg_0]
.text$mn:00001110                 mov     eax, [ebp+var_A4]
.text$mn:00001116                 mov     [edx+8], eax
.text$mn:00001119                 mov     ecx, [ebp+var_A0]
.text$mn:0000111F                 mov     [edx+0Ch], ecx
.text$mn:00001122
.text$mn:00001122 loc_1122:                               ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+32Cj
.text$mn:00001122                 mov     ecx, [ebp+var_4]
.text$mn:00001125                 xor     ecx, ebp
.text$mn:00001127                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000112C                 mov     esp, ebp
.text$mn:0000112E                 pop     ebp
.text$mn:0000112F                 retn    0Ch
.text$mn:0000112F ?OnGetSizeInfo@CWinMgr@@UAEXAAUSIZEINFO@@PAVWINRECT@@PAUHWND__@@@Z endp
.text$mn:0000112F
.text$mn:0000112F ; ---------------------------------------------------------------------------
.text$mn:00001132                 align 4
.text$mn:00001134 $LN53           dd offset $LN13         ; DATA XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+393r
.text$mn:00001134                 dd offset $LN9          ; jump table for switch statement
.text$mn:00001134                 dd offset $LN6
.text$mn:00001134                 dd offset $LN8
.text$mn:00001144                 align 8
.text$mn:00001148
.text$mn:00001148 ; =============== S U B R O U T I N E =======================================
.text$mn:00001148
.text$mn:00001148 ; Attributes: bp-based frame
.text$mn:00001148
.text$mn:00001148 ; void __thiscall CWinMgr::MoveRect(CWinMgr *this, struct WINRECT *, struct tagPOINT, HWND)
.text$mn:00001148                 public ?MoveRect@CWinMgr@@QAEXPAVWINRECT@@UtagPOINT@@PAUHWND__@@@Z
.text$mn:00001148 ?MoveRect@CWinMgr@@QAEXPAVWINRECT@@UtagPOINT@@PAUHWND__@@@Z proc near
.text$mn:00001148
.text$mn:00001148 var_18          = dword ptr -18h
.text$mn:00001148 var_14          = dword ptr -14h
.text$mn:00001148 var_10          = dword ptr -10h
.text$mn:00001148 var_C           = dword ptr -0Ch
.text$mn:00001148 var_8           = dword ptr -8
.text$mn:00001148 var_4           = dword ptr -4
.text$mn:00001148 arg_0           = dword ptr  8
.text$mn:00001148 arg_4           = tagPOINT ptr  0Ch
.text$mn:00001148 arg_C           = dword ptr  14h
.text$mn:00001148
.text$mn:00001148                 push    ebp
.text$mn:00001149                 mov     ebp, esp
.text$mn:0000114B                 sub     esp, 18h
.text$mn:0000114E                 mov     [ebp+var_14], ecx
.text$mn:00001151                 cmp     [ebp+arg_0], 0
.text$mn:00001155                 jnz     short loc_116E
.text$mn:00001157                 push    1C4h            ; Line
.text$mn:0000115C                 push    offset $SG64179 ; "..\\src\\WinControls\\WindowsDlg\\WinMg"...
.text$mn:00001161                 push    offset $SG64180 ; "pwrcMove"
.text$mn:00001166                 call    __wassert
.text$mn:0000116B ; ---------------------------------------------------------------------------
.text$mn:0000116B                 add     esp, 0Ch
.text$mn:0000116E
.text$mn:0000116E loc_116E:                               ; CODE XREF: CWinMgr::MoveRect(WINRECT *,tagPOINT,HWND__ *)+Dj
.text$mn:0000116E                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00001171                 call    ?Prev@WINRECT@@QAEPAV1@XZ ; WINRECT::Prev(void)
.text$mn:00001176                 mov     [ebp+var_C], eax
.text$mn:00001179                 cmp     [ebp+var_C], 0
.text$mn:0000117D                 jnz     short loc_1196
.text$mn:0000117F                 push    1C6h            ; Line
.text$mn:00001184                 push    offset $SG64183 ; "..\\src\\WinControls\\WindowsDlg\\WinMg"...
.text$mn:00001189                 push    offset $SG64184 ; "prev"
.text$mn:0000118E                 call    __wassert
.text$mn:00001193 ; ---------------------------------------------------------------------------
.text$mn:00001193                 add     esp, 0Ch
.text$mn:00001196
.text$mn:00001196 loc_1196:                               ; CODE XREF: CWinMgr::MoveRect(WINRECT *,tagPOINT,HWND__ *)+35j
.text$mn:00001196                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00001199                 call    ?Next@WINRECT@@QAEPAV1@XZ ; WINRECT::Next(void)
.text$mn:0000119E                 mov     [ebp+var_10], eax
.text$mn:000011A1                 cmp     [ebp+var_10], 0
.text$mn:000011A5                 jnz     short loc_11BE
.text$mn:000011A7                 push    1C8h            ; Line
.text$mn:000011AC                 push    offset $SG64187 ; "..\\src\\WinControls\\WindowsDlg\\WinMg"...
.text$mn:000011B1                 push    offset $SG64188 ; "next"
.text$mn:000011B6                 call    __wassert
.text$mn:000011BB ; ---------------------------------------------------------------------------
.text$mn:000011BB                 add     esp, 0Ch
.text$mn:000011BE
.text$mn:000011BE loc_11BE:                               ; CODE XREF: CWinMgr::MoveRect(WINRECT *,tagPOINT,HWND__ *)+5Dj
.text$mn:000011BE                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000011C1                 call    ?Parent@WINRECT@@QAEPAV1@XZ ; WINRECT::Parent(void)
.text$mn:000011C6                 mov     ecx, eax        ; this
.text$mn:000011C8                 call    ?IsRowGroup@WINRECT@@QBEHXZ ; WINRECT::IsRowGroup(void)
.text$mn:000011CD                 mov     [ebp+var_18], eax
.text$mn:000011D0                 mov     ecx, [ebp+var_10] ; this
.text$mn:000011D3                 call    ?GetRect@WINRECT@@QAEAAUtagRECT@@XZ ; WINRECT::GetRect(void)
.text$mn:000011D8                 mov     [ebp+var_8], eax
.text$mn:000011DB                 mov     ecx, [ebp+var_C] ; this
.text$mn:000011DE                 call    ?GetRect@WINRECT@@QAEAAUtagRECT@@XZ ; WINRECT::GetRect(void)
.text$mn:000011E3                 mov     [ebp+var_4], eax
.text$mn:000011E6                 cmp     [ebp+var_18], 0
.text$mn:000011EA                 jz      short loc_1213
.text$mn:000011EC                 mov     [ebp+arg_4.x], 0
.text$mn:000011F3                 mov     eax, [ebp+var_4]
.text$mn:000011F6                 mov     ecx, [eax+0Ch]
.text$mn:000011F9                 add     ecx, [ebp+arg_4.y]
.text$mn:000011FC                 mov     edx, [ebp+var_4]
.text$mn:000011FF                 mov     [edx+0Ch], ecx
.text$mn:00001202                 mov     eax, [ebp+var_8]
.text$mn:00001205                 mov     ecx, [eax+4]
.text$mn:00001208                 add     ecx, [ebp+arg_4.y]
.text$mn:0000120B                 mov     edx, [ebp+var_8]
.text$mn:0000120E                 mov     [edx+4], ecx
.text$mn:00001211                 jmp     short loc_1236
.text$mn:00001213 ; ---------------------------------------------------------------------------
.text$mn:00001213
.text$mn:00001213 loc_1213:                               ; CODE XREF: CWinMgr::MoveRect(WINRECT *,tagPOINT,HWND__ *)+A2j
.text$mn:00001213                 mov     [ebp+arg_4.y], 0
.text$mn:0000121A                 mov     eax, [ebp+var_4]
.text$mn:0000121D                 mov     ecx, [eax+8]
.text$mn:00001220                 add     ecx, [ebp+arg_4.x]
.text$mn:00001223                 mov     edx, [ebp+var_4]
.text$mn:00001226                 mov     [edx+8], ecx
.text$mn:00001229                 mov     eax, [ebp+var_8]
.text$mn:0000122C                 mov     ecx, [eax]
.text$mn:0000122E                 add     ecx, [ebp+arg_4.x]
.text$mn:00001231                 mov     edx, [ebp+var_8]
.text$mn:00001234                 mov     [edx], ecx
.text$mn:00001236
.text$mn:00001236 loc_1236:                               ; CODE XREF: CWinMgr::MoveRect(WINRECT *,tagPOINT,HWND__ *)+C9j
.text$mn:00001236                 mov     eax, [ebp+arg_4.y]
.text$mn:00001239                 push    eax
.text$mn:0000123A                 mov     ecx, [ebp+arg_4.x]
.text$mn:0000123D                 push    ecx             ; struct tagPOINT
.text$mn:0000123E                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00001241                 call    ?GetRect@WINRECT@@QAEAAUtagRECT@@XZ ; WINRECT::GetRect(void)
.text$mn:00001246                 push    eax             ; struct tagRECT *
.text$mn:00001247                 call    ?OffsetRect@@YAAAUtagRECT@@AAU1@UtagPOINT@@@Z ; OffsetRect(tagRECT &,tagPOINT)
.text$mn:0000124C                 add     esp, 0Ch
.text$mn:0000124F                 mov     ecx, [ebp+var_C] ; this
.text$mn:00001252                 call    ?IsGroup@WINRECT@@QBEHXZ ; WINRECT::IsGroup(void)
.text$mn:00001257                 test    eax, eax
.text$mn:00001259                 jz      short loc_1270
.text$mn:0000125B                 mov     edx, [ebp+arg_C]
.text$mn:0000125E                 push    edx
.text$mn:0000125F                 mov     eax, [ebp+var_C]
.text$mn:00001262                 push    eax
.text$mn:00001263                 mov     ecx, [ebp+var_14]
.text$mn:00001266                 mov     edx, [ecx]
.text$mn:00001268                 mov     ecx, [ebp+var_14]
.text$mn:0000126B                 mov     eax, [edx+10h]
.text$mn:0000126E                 call    eax
.text$mn:00001270
.text$mn:00001270 loc_1270:                               ; CODE XREF: CWinMgr::MoveRect(WINRECT *,tagPOINT,HWND__ *)+111j
.text$mn:00001270                 mov     ecx, [ebp+var_10] ; this
.text$mn:00001273                 call    ?IsGroup@WINRECT@@QBEHXZ ; WINRECT::IsGroup(void)
.text$mn:00001278                 test    eax, eax
.text$mn:0000127A                 jz      short loc_1291
.text$mn:0000127C                 mov     ecx, [ebp+arg_C]
.text$mn:0000127F                 push    ecx
.text$mn:00001280                 mov     edx, [ebp+var_10]
.text$mn:00001283                 push    edx
.text$mn:00001284                 mov     eax, [ebp+var_14]
.text$mn:00001287                 mov     edx, [eax]
.text$mn:00001289                 mov     ecx, [ebp+var_14]
.text$mn:0000128C                 mov     eax, [edx+10h]
.text$mn:0000128F                 call    eax
.text$mn:00001291
.text$mn:00001291 loc_1291:                               ; CODE XREF: CWinMgr::MoveRect(WINRECT *,tagPOINT,HWND__ *)+132j
.text$mn:00001291                 mov     esp, ebp
.text$mn:00001293                 pop     ebp
.text$mn:00001294                 retn    10h
.text$mn:00001294 ?MoveRect@CWinMgr@@QAEXPAVWINRECT@@UtagPOINT@@PAUHWND__@@@Z endp
.text$mn:00001294
.text$mn:00001294 ; ---------------------------------------------------------------------------
.text$mn:00001297                 align 4
.text$mn:00001298
.text$mn:00001298 ; =============== S U B R O U T I N E =======================================
.text$mn:00001298
.text$mn:00001298 ; Attributes: bp-based frame
.text$mn:00001298
.text$mn:00001298 ; struct WINRECT *__thiscall CWinMgr::FindRect(CWinMgr *this, int)
.text$mn:00001298                 public ?FindRect@CWinMgr@@QAEPAVWINRECT@@H@Z
.text$mn:00001298 ?FindRect@CWinMgr@@QAEPAVWINRECT@@H@Z proc near
.text$mn:00001298
.text$mn:00001298 var_8           = dword ptr -8
.text$mn:00001298 var_4           = dword ptr -4
.text$mn:00001298 arg_0           = dword ptr  8
.text$mn:00001298
.text$mn:00001298                 push    ebp
.text$mn:00001299                 mov     ebp, esp
.text$mn:0000129B                 sub     esp, 8
.text$mn:0000129E                 mov     [ebp+var_8], ecx
.text$mn:000012A1                 mov     eax, [ebp+var_8]
.text$mn:000012A4                 cmp     dword ptr [eax+4], 0
.text$mn:000012A8                 jnz     short loc_12BE
.text$mn:000012AA                 push    7Ah ; 'z'       ; Line
.text$mn:000012AC                 push    offset $SG63984 ; "..\\src\\WinControls\\WindowsDlg\\WinMg"...
.text$mn:000012B1                 push    offset $SG63985 ; "m_map"
.text$mn:000012B6                 call    __wassert
.text$mn:000012BB ; ---------------------------------------------------------------------------
.text$mn:000012BB                 add     esp, 0Ch
.text$mn:000012BE
.text$mn:000012BE loc_12BE:                               ; CODE XREF: CWinMgr::FindRect(int)+10j
.text$mn:000012BE                 mov     edx, [ebp+var_8]
.text$mn:000012C1                 mov     eax, [edx+4]
.text$mn:000012C4                 mov     [ebp+var_4], eax
.text$mn:000012C7                 jmp     short loc_12D2
.text$mn:000012C9 ; ---------------------------------------------------------------------------
.text$mn:000012C9
.text$mn:000012C9 loc_12C9:                               ; CODE XREF: CWinMgr::FindRect(int):loc_12F0j
.text$mn:000012C9                 mov     ecx, [ebp+var_4]
.text$mn:000012CC                 add     ecx, 24h ; '$'
.text$mn:000012CF                 mov     [ebp+var_4], ecx
.text$mn:000012D2
.text$mn:000012D2 loc_12D2:                               ; CODE XREF: CWinMgr::FindRect(int)+2Fj
.text$mn:000012D2                 mov     ecx, [ebp+var_4] ; this
.text$mn:000012D5                 call    ?IsEnd@WINRECT@@QBEHXZ ; WINRECT::IsEnd(void)
.text$mn:000012DA                 test    eax, eax
.text$mn:000012DC                 jnz     short loc_12F2
.text$mn:000012DE                 mov     ecx, [ebp+var_4] ; this
.text$mn:000012E1                 call    ?GetID@WINRECT@@QAEIXZ ; WINRECT::GetID(void)
.text$mn:000012E6                 cmp     eax, [ebp+arg_0]
.text$mn:000012E9                 jnz     short loc_12F0
.text$mn:000012EB                 mov     eax, [ebp+var_4]
.text$mn:000012EE                 jmp     short loc_12F4
.text$mn:000012F0 ; ---------------------------------------------------------------------------
.text$mn:000012F0
.text$mn:000012F0 loc_12F0:                               ; CODE XREF: CWinMgr::FindRect(int)+51j
.text$mn:000012F0                 jmp     short loc_12C9
.text$mn:000012F2 ; ---------------------------------------------------------------------------
.text$mn:000012F2
.text$mn:000012F2 loc_12F2:                               ; CODE XREF: CWinMgr::FindRect(int)+44j
.text$mn:000012F2                 xor     eax, eax
.text$mn:000012F4
.text$mn:000012F4 loc_12F4:                               ; CODE XREF: CWinMgr::FindRect(int)+56j
.text$mn:000012F4                 mov     esp, ebp
.text$mn:000012F6                 pop     ebp
.text$mn:000012F7                 retn    4
.text$mn:000012F7 ?FindRect@CWinMgr@@QAEPAVWINRECT@@H@Z endp
.text$mn:000012F7
.text$mn:000012F7 ; ---------------------------------------------------------------------------
.text$mn:000012FA                 db 0Eh dup(0CCh)
.text$mn:00001308
.text$mn:00001308 ; =============== S U B R O U T I N E =======================================
.text$mn:00001308
.text$mn:00001308 ; Attributes: bp-based frame
.text$mn:00001308
.text$mn:00001308 ; void __thiscall CWinMgr::GetMinMaxInfo(CWinMgr *this, HWND hWnd, struct tagMINMAXINFO *)
.text$mn:00001308                 public ?GetMinMaxInfo@CWinMgr@@QAEXPAUHWND__@@PAUtagMINMAXINFO@@@Z
.text$mn:00001308 ?GetMinMaxInfo@CWinMgr@@QAEXPAUHWND__@@PAUtagMINMAXINFO@@@Z proc near
.text$mn:00001308
.text$mn:00001308 var_38          = dword ptr -38h
.text$mn:00001308 var_34          = dword ptr -34h
.text$mn:00001308 var_30          = dword ptr -30h
.text$mn:00001308 var_2C          = dword ptr -2Ch
.text$mn:00001308 var_28          = dword ptr -28h
.text$mn:00001308 var_24          = byte ptr -24h
.text$mn:00001308 var_14          = tagSIZE ptr -14h
.text$mn:00001308 var_C           = tagSIZE ptr -0Ch
.text$mn:00001308 var_4           = dword ptr -4
.text$mn:00001308 hWnd            = dword ptr  8
.text$mn:00001308 arg_4           = dword ptr  0Ch
.text$mn:00001308
.text$mn:00001308                 push    ebp
.text$mn:00001309                 mov     ebp, esp
.text$mn:0000130B                 sub     esp, 38h
.text$mn:0000130E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001313                 xor     eax, ebp
.text$mn:00001315                 mov     [ebp+var_4], eax
.text$mn:00001318                 mov     [ebp+var_38], ecx
.text$mn:0000131B                 lea     eax, [ebp+var_24]
.text$mn:0000131E                 push    eax             ; struct SIZEINFO *
.text$mn:0000131F                 mov     ecx, [ebp+hWnd]
.text$mn:00001322                 push    ecx             ; hWnd
.text$mn:00001323                 mov     ecx, [ebp+var_38] ; this
.text$mn:00001326                 call    ?GetMinMaxInfo@CWinMgr@@QAEXPAUHWND__@@AAUSIZEINFO@@@Z ; CWinMgr::GetMinMaxInfo(HWND__ *,SIZEINFO &)
.text$mn:0000132B                 mov     edx, [ebp+var_14.cy]
.text$mn:0000132E                 push    edx
.text$mn:0000132F                 mov     eax, [ebp+var_14._cx]
.text$mn:00001332                 push    eax             ; struct tagSIZE
.text$mn:00001333                 call    ?SizeToPoint@@YA?AUtagPOINT@@UtagSIZE@@@Z ; SizeToPoint(tagSIZE)
.text$mn:00001338                 add     esp, 8
.text$mn:0000133B                 mov     [ebp+var_2C], eax
.text$mn:0000133E                 mov     [ebp+var_28], edx
.text$mn:00001341                 mov     ecx, [ebp+arg_4]
.text$mn:00001344                 mov     edx, [ebp+var_2C]
.text$mn:00001347                 mov     [ecx+18h], edx
.text$mn:0000134A                 mov     eax, [ebp+var_28]
.text$mn:0000134D                 mov     [ecx+1Ch], eax
.text$mn:00001350                 mov     ecx, [ebp+var_C.cy]
.text$mn:00001353                 push    ecx
.text$mn:00001354                 mov     edx, [ebp+var_C._cx]
.text$mn:00001357                 push    edx             ; struct tagSIZE
.text$mn:00001358                 call    ?SizeToPoint@@YA?AUtagPOINT@@UtagSIZE@@@Z ; SizeToPoint(tagSIZE)
.text$mn:0000135D                 add     esp, 8
.text$mn:00001360                 mov     [ebp+var_34], eax
.text$mn:00001363                 mov     [ebp+var_30], edx
.text$mn:00001366                 mov     eax, [ebp+arg_4]
.text$mn:00001369                 mov     ecx, [ebp+var_34]
.text$mn:0000136C                 mov     [eax+20h], ecx
.text$mn:0000136F                 mov     edx, [ebp+var_30]
.text$mn:00001372                 mov     [eax+24h], edx
.text$mn:00001375                 mov     ecx, [ebp+var_4]
.text$mn:00001378                 xor     ecx, ebp
.text$mn:0000137A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000137F                 mov     esp, ebp
.text$mn:00001381                 pop     ebp
.text$mn:00001382                 retn    8
.text$mn:00001382 ?GetMinMaxInfo@CWinMgr@@QAEXPAUHWND__@@PAUtagMINMAXINFO@@@Z endp
.text$mn:00001382
.text$mn:00001382 ; ---------------------------------------------------------------------------
.text$mn:00001385                 align 4
.text$mn:00001388
.text$mn:00001388 ; =============== S U B R O U T I N E =======================================
.text$mn:00001388
.text$mn:00001388 ; Attributes: bp-based frame
.text$mn:00001388
.text$mn:00001388 ; void __thiscall CWinMgr::GetMinMaxInfo(CWinMgr *this, HWND hWnd, struct SIZEINFO *)
.text$mn:00001388                 public ?GetMinMaxInfo@CWinMgr@@QAEXPAUHWND__@@AAUSIZEINFO@@@Z
.text$mn:00001388 ?GetMinMaxInfo@CWinMgr@@QAEXPAUHWND__@@AAUSIZEINFO@@@Z proc near
.text$mn:00001388                                         ; CODE XREF: CWinMgr::GetMinMaxInfo(HWND__ *,tagMINMAXINFO *)+1Ep
.text$mn:00001388
.text$mn:00001388 var_10          = dword ptr -10h
.text$mn:00001388 var_C           = dword ptr -0Ch
.text$mn:00001388 var_8           = dword ptr -8
.text$mn:00001388 var_4           = dword ptr -4
.text$mn:00001388 hWnd            = dword ptr  8
.text$mn:00001388 arg_4           = dword ptr  0Ch
.text$mn:00001388
.text$mn:00001388                 push    ebp
.text$mn:00001389                 mov     ebp, esp
.text$mn:0000138B                 sub     esp, 10h
.text$mn:0000138E                 mov     [ebp+var_C], ecx
.text$mn:00001391                 mov     eax, [ebp+hWnd]
.text$mn:00001394                 push    eax
.text$mn:00001395                 mov     ecx, [ebp+var_C]
.text$mn:00001398                 mov     edx, [ecx+4]
.text$mn:0000139B                 push    edx
.text$mn:0000139C                 mov     eax, [ebp+arg_4]
.text$mn:0000139F                 push    eax
.text$mn:000013A0                 mov     ecx, [ebp+var_C]
.text$mn:000013A3                 mov     edx, [ecx]
.text$mn:000013A5                 mov     ecx, [ebp+var_C]
.text$mn:000013A8                 mov     eax, [edx+0Ch]
.text$mn:000013AB                 call    eax
.text$mn:000013AD                 cmp     [ebp+hWnd], 0
.text$mn:000013B1                 jnz     short loc_13B8
.text$mn:000013B3                 jmp     loc_14DE
.text$mn:000013B8 ; ---------------------------------------------------------------------------
.text$mn:000013B8
.text$mn:000013B8 loc_13B8:                               ; CODE XREF: CWinMgr::GetMinMaxInfo(HWND__ *,SIZEINFO &)+29j
.text$mn:000013B8                 mov     ecx, [ebp+hWnd]
.text$mn:000013BB                 push    ecx             ; hWnd
.text$mn:000013BC                 call    ?GetStyle@@YAKPAUHWND__@@@Z ; GetStyle(HWND__ *)
.text$mn:000013C1                 add     esp, 4
.text$mn:000013C4                 mov     [ebp+var_8], eax
.text$mn:000013C7                 mov     edx, [ebp+hWnd]
.text$mn:000013CA                 push    edx             ; hWnd
.text$mn:000013CB                 call    ?GetExStyle@@YAKPAUHWND__@@@Z ; GetExStyle(HWND__ *)
.text$mn:000013D0                 add     esp, 4
.text$mn:000013D3                 mov     [ebp+var_10], eax
.text$mn:000013D6                 mov     eax, [ebp+var_8]
.text$mn:000013D9                 and     eax, 10000000h
.text$mn:000013DE                 jz      loc_14DE
.text$mn:000013E4                 mov     ecx, [ebp+arg_4]
.text$mn:000013E7                 add     ecx, 10h
.text$mn:000013EA                 mov     [ebp+var_4], ecx
.text$mn:000013ED                 mov     edx, [ebp+var_8]
.text$mn:000013F0                 and     edx, 40000000h
.text$mn:000013F6                 jnz     short loc_1438
.text$mn:000013F8                 mov     eax, [ebp+var_8]
.text$mn:000013FB                 and     eax, 0C00000h
.text$mn:00001400                 jz      short loc_1416
.text$mn:00001402                 push    4               ; nIndex
.text$mn:00001404                 call    dword ptr ds:__imp__GetSystemMetrics@4 ; GetSystemMetrics(x)
.text$mn:0000140A                 mov     ecx, [ebp+var_4]
.text$mn:0000140D                 add     eax, [ecx+4]
.text$mn:00001410                 mov     edx, [ebp+var_4]
.text$mn:00001413                 mov     [edx+4], eax
.text$mn:00001416
.text$mn:00001416 loc_1416:                               ; CODE XREF: CWinMgr::GetMinMaxInfo(HWND__ *,SIZEINFO &)+78j
.text$mn:00001416                 mov     eax, [ebp+hWnd]
.text$mn:00001419                 push    eax             ; hWnd
.text$mn:0000141A                 call    dword ptr ds:__imp__GetMenu@4 ; GetMenu(x)
.text$mn:00001420                 test    eax, eax
.text$mn:00001422                 jz      short loc_1438
.text$mn:00001424                 push    0Fh             ; nIndex
.text$mn:00001426                 call    dword ptr ds:__imp__GetSystemMetrics@4 ; GetSystemMetrics(x)
.text$mn:0000142C                 mov     ecx, [ebp+var_4]
.text$mn:0000142F                 add     eax, [ecx+4]
.text$mn:00001432                 mov     edx, [ebp+var_4]
.text$mn:00001435                 mov     [edx+4], eax
.text$mn:00001438
.text$mn:00001438 loc_1438:                               ; CODE XREF: CWinMgr::GetMinMaxInfo(HWND__ *,SIZEINFO &)+6Ej
.text$mn:00001438                                         ; CWinMgr::GetMinMaxInfo(HWND__ *,SIZEINFO &)+9Aj
.text$mn:00001438                 mov     eax, [ebp+var_8]
.text$mn:0000143B                 and     eax, 40000h
.text$mn:00001440                 jz      short loc_1470
.text$mn:00001442                 push    20h ; ' '       ; nIndex
.text$mn:00001444                 call    dword ptr ds:__imp__GetSystemMetrics@4 ; GetSystemMetrics(x)
.text$mn:0000144A                 mov     ecx, [ebp+var_4]
.text$mn:0000144D                 mov     edx, [ecx]
.text$mn:0000144F                 lea     eax, [edx+eax*2]
.text$mn:00001452                 mov     ecx, [ebp+var_4]
.text$mn:00001455                 mov     [ecx], eax
.text$mn:00001457                 push    21h ; '!'       ; nIndex
.text$mn:00001459                 call    dword ptr ds:__imp__GetSystemMetrics@4 ; GetSystemMetrics(x)
.text$mn:0000145F                 mov     edx, [ebp+var_4]
.text$mn:00001462                 mov     ecx, [edx+4]
.text$mn:00001465                 lea     edx, [ecx+eax*2]
.text$mn:00001468                 mov     eax, [ebp+var_4]
.text$mn:0000146B                 mov     [eax+4], edx
.text$mn:0000146E                 jmp     short loc_14A7
.text$mn:00001470 ; ---------------------------------------------------------------------------
.text$mn:00001470
.text$mn:00001470 loc_1470:                               ; CODE XREF: CWinMgr::GetMinMaxInfo(HWND__ *,SIZEINFO &)+B8j
.text$mn:00001470                 mov     ecx, [ebp+var_8]
.text$mn:00001473                 and     ecx, 800000h
.text$mn:00001479                 jz      short loc_14A7
.text$mn:0000147B                 push    5               ; nIndex
.text$mn:0000147D                 call    dword ptr ds:__imp__GetSystemMetrics@4 ; GetSystemMetrics(x)
.text$mn:00001483                 mov     edx, [ebp+var_4]
.text$mn:00001486                 mov     ecx, [edx]
.text$mn:00001488                 lea     edx, [ecx+eax*2]
.text$mn:0000148B                 mov     eax, [ebp+var_4]
.text$mn:0000148E                 mov     [eax], edx
.text$mn:00001490                 push    6               ; nIndex
.text$mn:00001492                 call    dword ptr ds:__imp__GetSystemMetrics@4 ; GetSystemMetrics(x)
.text$mn:00001498                 mov     ecx, [ebp+var_4]
.text$mn:0000149B                 mov     edx, [ecx+4]
.text$mn:0000149E                 lea     eax, [edx+eax*2]
.text$mn:000014A1                 mov     ecx, [ebp+var_4]
.text$mn:000014A4                 mov     [ecx+4], eax
.text$mn:000014A7
.text$mn:000014A7 loc_14A7:                               ; CODE XREF: CWinMgr::GetMinMaxInfo(HWND__ *,SIZEINFO &)+E6j
.text$mn:000014A7                                         ; CWinMgr::GetMinMaxInfo(HWND__ *,SIZEINFO &)+F1j
.text$mn:000014A7                 mov     edx, [ebp+var_10]
.text$mn:000014AA                 and     edx, 200h
.text$mn:000014B0                 jz      short loc_14DE
.text$mn:000014B2                 push    2Dh ; '-'       ; nIndex
.text$mn:000014B4                 call    dword ptr ds:__imp__GetSystemMetrics@4 ; GetSystemMetrics(x)
.text$mn:000014BA                 mov     ecx, [ebp+var_4]
.text$mn:000014BD                 mov     edx, [ecx]
.text$mn:000014BF                 lea     eax, [edx+eax*2]
.text$mn:000014C2                 mov     ecx, [ebp+var_4]
.text$mn:000014C5                 mov     [ecx], eax
.text$mn:000014C7                 push    2Eh ; '.'       ; nIndex
.text$mn:000014C9                 call    dword ptr ds:__imp__GetSystemMetrics@4 ; GetSystemMetrics(x)
.text$mn:000014CF                 mov     edx, [ebp+var_4]
.text$mn:000014D2                 mov     ecx, [edx+4]
.text$mn:000014D5                 lea     edx, [ecx+eax*2]
.text$mn:000014D8                 mov     eax, [ebp+var_4]
.text$mn:000014DB                 mov     [eax+4], edx
.text$mn:000014DE
.text$mn:000014DE loc_14DE:                               ; CODE XREF: CWinMgr::GetMinMaxInfo(HWND__ *,SIZEINFO &)+2Bj
.text$mn:000014DE                                         ; CWinMgr::GetMinMaxInfo(HWND__ *,SIZEINFO &)+56j ...
.text$mn:000014DE                 mov     esp, ebp
.text$mn:000014E0                 pop     ebp
.text$mn:000014E1                 retn    8
.text$mn:000014E1 ?GetMinMaxInfo@CWinMgr@@QAEXPAUHWND__@@AAUSIZEINFO@@@Z endp
.text$mn:000014E1
.text$mn:000014E1 ; ---------------------------------------------------------------------------
.text$mn:000014E4                 align 8
.text$mn:000014E8
.text$mn:000014E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000014E8
.text$mn:000014E8 ; Attributes: bp-based frame
.text$mn:000014E8
.text$mn:000014E8 ; void __thiscall CWinMgr::InitToFitSizeFromCurrent(CWinMgr *this, HWND)
.text$mn:000014E8                 public ?InitToFitSizeFromCurrent@CWinMgr@@QAEXPAUHWND__@@@Z
.text$mn:000014E8 ?InitToFitSizeFromCurrent@CWinMgr@@QAEXPAUHWND__@@@Z proc near
.text$mn:000014E8
.text$mn:000014E8 var_10          = tagSIZE ptr -10h
.text$mn:000014E8 var_8           = dword ptr -8
.text$mn:000014E8 var_4           = dword ptr -4
.text$mn:000014E8 arg_0           = dword ptr  8
.text$mn:000014E8
.text$mn:000014E8                 push    ebp
.text$mn:000014E9                 mov     ebp, esp
.text$mn:000014EB                 sub     esp, 10h
.text$mn:000014EE                 mov     [ebp+var_8], ecx
.text$mn:000014F1                 cmp     [ebp+arg_0], 0
.text$mn:000014F5                 jnz     short loc_150B
.text$mn:000014F7                 push    28h ; '('       ; Line
.text$mn:000014F9                 push    offset $SG63917 ; "..\\src\\WinControls\\WindowsDlg\\WinMg"...
.text$mn:000014FE                 push    offset $SG63918 ; "hWnd"
.text$mn:00001503                 call    __wassert
.text$mn:00001508 ; ---------------------------------------------------------------------------
.text$mn:00001508                 add     esp, 0Ch
.text$mn:0000150B
.text$mn:0000150B loc_150B:                               ; CODE XREF: CWinMgr::InitToFitSizeFromCurrent(HWND__ *)+Dj
.text$mn:0000150B                 mov     ecx, [ebp+var_8]
.text$mn:0000150E                 cmp     dword ptr [ecx+4], 0
.text$mn:00001512                 jnz     short loc_1528
.text$mn:00001514                 push    29h ; ')'       ; Line
.text$mn:00001516                 push    offset $SG63920 ; "..\\src\\WinControls\\WindowsDlg\\WinMg"...
.text$mn:0000151B                 push    offset $SG63921 ; "m_map"
.text$mn:00001520                 call    __wassert
.text$mn:00001525 ; ---------------------------------------------------------------------------
.text$mn:00001525                 add     esp, 0Ch
.text$mn:00001528
.text$mn:00001528 loc_1528:                               ; CODE XREF: CWinMgr::InitToFitSizeFromCurrent(HWND__ *)+2Aj
.text$mn:00001528                 mov     eax, [ebp+arg_0]
.text$mn:0000152B                 push    eax
.text$mn:0000152C                 mov     ecx, [ebp+var_8]
.text$mn:0000152F                 mov     edx, [ecx]
.text$mn:00001531                 mov     ecx, [ebp+var_8]
.text$mn:00001534                 mov     eax, [edx+4]
.text$mn:00001537                 call    eax
.text$mn:00001539                 mov     ecx, [ebp+var_8]
.text$mn:0000153C                 mov     edx, [ecx+4]
.text$mn:0000153F                 mov     [ebp+var_4], edx
.text$mn:00001542                 jmp     short loc_154D
.text$mn:00001544 ; ---------------------------------------------------------------------------
.text$mn:00001544
.text$mn:00001544 loc_1544:                               ; CODE XREF: CWinMgr::InitToFitSizeFromCurrent(HWND__ *):loc_159Cj
.text$mn:00001544                 mov     eax, [ebp+var_4]
.text$mn:00001547                 add     eax, 24h ; '$'
.text$mn:0000154A                 mov     [ebp+var_4], eax
.text$mn:0000154D
.text$mn:0000154D loc_154D:                               ; CODE XREF: CWinMgr::InitToFitSizeFromCurrent(HWND__ *)+5Aj
.text$mn:0000154D                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001550                 call    ?IsEnd@WINRECT@@QBEHXZ ; WINRECT::IsEnd(void)
.text$mn:00001555                 test    eax, eax
.text$mn:00001557                 jnz     short loc_159E
.text$mn:00001559                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000155C                 call    ?Type@WINRECT@@QBEGXZ ; WINRECT::Type(void)
.text$mn:00001561                 movzx   ecx, ax
.text$mn:00001564                 cmp     ecx, 4
.text$mn:00001567                 jnz     short loc_159C
.text$mn:00001569                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000156C                 call    ?IsGroup@WINRECT@@QBEHXZ ; WINRECT::IsGroup(void)
.text$mn:00001571                 test    eax, eax
.text$mn:00001573                 jnz     short loc_159C
.text$mn:00001575                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001578                 call    ?GetRect@WINRECT@@QAEAAUtagRECT@@XZ ; WINRECT::GetRect(void)
.text$mn:0000157D                 push    eax             ; struct tagRECT *
.text$mn:0000157E                 call    ?RectToSize@@YA?AUtagSIZE@@ABUtagRECT@@@Z ; RectToSize(tagRECT const &)
.text$mn:00001583                 add     esp, 4
.text$mn:00001586                 mov     [ebp+var_10._cx], eax
.text$mn:00001589                 mov     [ebp+var_10.cy], edx
.text$mn:0000158C                 mov     edx, [ebp+var_10.cy]
.text$mn:0000158F                 push    edx
.text$mn:00001590                 mov     eax, [ebp+var_10._cx]
.text$mn:00001593                 push    eax             ; struct tagSIZE
.text$mn:00001594                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001597                 call    ?SetToFitSize@WINRECT@@QAEXUtagSIZE@@@Z ; WINRECT::SetToFitSize(tagSIZE)
.text$mn:0000159C
.text$mn:0000159C loc_159C:                               ; CODE XREF: CWinMgr::InitToFitSizeFromCurrent(HWND__ *)+7Fj
.text$mn:0000159C                                         ; CWinMgr::InitToFitSizeFromCurrent(HWND__ *)+8Bj
.text$mn:0000159C                 jmp     short loc_1544
.text$mn:0000159E ; ---------------------------------------------------------------------------
.text$mn:0000159E
.text$mn:0000159E loc_159E:                               ; CODE XREF: CWinMgr::InitToFitSizeFromCurrent(HWND__ *)+6Fj
.text$mn:0000159E                 mov     esp, ebp
.text$mn:000015A0                 pop     ebp
.text$mn:000015A1                 retn    4
.text$mn:000015A1 ?InitToFitSizeFromCurrent@CWinMgr@@QAEXPAUHWND__@@@Z endp
.text$mn:000015A1
.text$mn:000015A1 ; ---------------------------------------------------------------------------
.text$mn:000015A4                 align 8
.text$mn:000015A8
.text$mn:000015A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000015A8
.text$mn:000015A8 ; Attributes: bp-based frame
.text$mn:000015A8
.text$mn:000015A8 ; int __thiscall CWinMgr::CountWindows(CWinMgr *__hidden this)
.text$mn:000015A8                 public ?CountWindows@CWinMgr@@IAEHXZ
.text$mn:000015A8 ?CountWindows@CWinMgr@@IAEHXZ proc near ; CODE XREF: CWinMgr::SetWindowPositions(HWND__ *)+Cp
.text$mn:000015A8
.text$mn:000015A8 var_C           = dword ptr -0Ch
.text$mn:000015A8 var_8           = dword ptr -8
.text$mn:000015A8 var_4           = dword ptr -4
.text$mn:000015A8
.text$mn:000015A8                 push    ebp
.text$mn:000015A9                 mov     ebp, esp
.text$mn:000015AB                 sub     esp, 0Ch
.text$mn:000015AE                 mov     [ebp+var_C], ecx
.text$mn:000015B1                 mov     eax, [ebp+var_C]
.text$mn:000015B4                 cmp     dword ptr [eax+4], 0
.text$mn:000015B8                 jnz     short loc_15CE
.text$mn:000015BA                 push    6Ch ; 'l'       ; Line
.text$mn:000015BC                 push    offset $SG63971 ; "..\\src\\WinControls\\WindowsDlg\\WinMg"...
.text$mn:000015C1                 push    offset $SG63972 ; "m_map"
.text$mn:000015C6                 call    __wassert
.text$mn:000015CB ; ---------------------------------------------------------------------------
.text$mn:000015CB                 add     esp, 0Ch
.text$mn:000015CE
.text$mn:000015CE loc_15CE:                               ; CODE XREF: CWinMgr::CountWindows(void)+10j
.text$mn:000015CE                 mov     [ebp+var_8], 0
.text$mn:000015D5                 mov     edx, [ebp+var_C]
.text$mn:000015D8                 mov     eax, [edx+4]
.text$mn:000015DB                 mov     [ebp+var_4], eax
.text$mn:000015DE                 jmp     short loc_15E9
.text$mn:000015E0 ; ---------------------------------------------------------------------------
.text$mn:000015E0
.text$mn:000015E0 loc_15E0:                               ; CODE XREF: CWinMgr::CountWindows(void):loc_160Aj
.text$mn:000015E0                 mov     ecx, [ebp+var_4]
.text$mn:000015E3                 add     ecx, 24h ; '$'
.text$mn:000015E6                 mov     [ebp+var_4], ecx
.text$mn:000015E9
.text$mn:000015E9 loc_15E9:                               ; CODE XREF: CWinMgr::CountWindows(void)+36j
.text$mn:000015E9                 mov     ecx, [ebp+var_4] ; this
.text$mn:000015EC                 call    ?IsEnd@WINRECT@@QBEHXZ ; WINRECT::IsEnd(void)
.text$mn:000015F1                 test    eax, eax
.text$mn:000015F3                 jnz     short loc_160C
.text$mn:000015F5                 mov     ecx, [ebp+var_4] ; this
.text$mn:000015F8                 call    ?IsWindow@WINRECT@@QBEHXZ ; WINRECT::IsWindow(void)
.text$mn:000015FD                 test    eax, eax
.text$mn:000015FF                 jz      short loc_160A
.text$mn:00001601                 mov     edx, [ebp+var_8]
.text$mn:00001604                 add     edx, 1
.text$mn:00001607                 mov     [ebp+var_8], edx
.text$mn:0000160A
.text$mn:0000160A loc_160A:                               ; CODE XREF: CWinMgr::CountWindows(void)+57j
.text$mn:0000160A                 jmp     short loc_15E0
.text$mn:0000160C ; ---------------------------------------------------------------------------
.text$mn:0000160C
.text$mn:0000160C loc_160C:                               ; CODE XREF: CWinMgr::CountWindows(void)+4Bj
.text$mn:0000160C                 mov     eax, [ebp+var_8]
.text$mn:0000160F                 mov     esp, ebp
.text$mn:00001611                 pop     ebp
.text$mn:00001612                 retn
.text$mn:00001612 ?CountWindows@CWinMgr@@IAEHXZ endp
.text$mn:00001612
.text$mn:00001612 ; ---------------------------------------------------------------------------
.text$mn:00001613                 align 8
.text$mn:00001618
.text$mn:00001618 ; =============== S U B R O U T I N E =======================================
.text$mn:00001618
.text$mn:00001618 ; Attributes: bp-based frame
.text$mn:00001618
.text$mn:00001618 ; int __thiscall CWinMgr::SendGetSizeInfo(CWinMgr *this, struct SIZEINFO *, HWND hWnd, unsigned int)
.text$mn:00001618                 public ?SendGetSizeInfo@CWinMgr@@IAEHAAUSIZEINFO@@PAUHWND__@@I@Z
.text$mn:00001618 ?SendGetSizeInfo@CWinMgr@@IAEHAAUSIZEINFO@@PAUHWND__@@I@Z proc near
.text$mn:00001618                                         ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+619p
.text$mn:00001618
.text$mn:00001618 lParam          = dword ptr -38h
.text$mn:00001618 var_34          = dword ptr -34h
.text$mn:00001618 var_30          = dword ptr -30h
.text$mn:00001618 var_2C          = byte ptr -2Ch
.text$mn:00001618 var_C           = dword ptr -0Ch
.text$mn:00001618 var_8           = dword ptr -8
.text$mn:00001618 var_4           = dword ptr -4
.text$mn:00001618 arg_0           = dword ptr  8
.text$mn:00001618 hWnd            = dword ptr  0Ch
.text$mn:00001618 wParam          = dword ptr  10h
.text$mn:00001618
.text$mn:00001618                 push    ebp
.text$mn:00001619                 mov     ebp, esp
.text$mn:0000161B                 sub     esp, 38h
.text$mn:0000161E                 push    esi
.text$mn:0000161F                 push    edi
.text$mn:00001620                 mov     [ebp+var_8], ecx
.text$mn:00001623                 lea     ecx, [ebp+lParam] ; this
.text$mn:00001626                 call    ??0NMWINMGR@@QAE@XZ ; NMWINMGR::NMWINMGR(void)
.text$mn:0000162B                 mov     [ebp+var_30], 1
.text$mn:00001632                 mov     eax, [ebp+wParam]
.text$mn:00001635                 mov     [ebp+var_34], eax
.text$mn:00001638                 mov     ecx, 8
.text$mn:0000163D                 mov     esi, [ebp+arg_0]
.text$mn:00001640                 lea     edi, [ebp+var_2C]
.text$mn:00001643                 rep movsd
.text$mn:00001645                 lea     ecx, [ebp+lParam]
.text$mn:00001648                 push    ecx             ; lParam
.text$mn:00001649                 mov     edx, [ebp+wParam]
.text$mn:0000164C                 push    edx             ; wParam
.text$mn:0000164D                 mov     eax, ds:?WM_WINMGR@@3IB ; uint const WM_WINMGR
.text$mn:00001652                 push    eax             ; Msg
.text$mn:00001653                 mov     ecx, [ebp+hWnd]
.text$mn:00001656                 push    ecx             ; hWnd
.text$mn:00001657                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000165D                 test    eax, eax
.text$mn:0000165F                 jnz     short loc_169E
.text$mn:00001661                 cmp     [ebp+var_C], 0
.text$mn:00001665                 jnz     short loc_169E
.text$mn:00001667                 mov     edx, [ebp+wParam]
.text$mn:0000166A                 push    edx             ; nIDDlgItem
.text$mn:0000166B                 mov     eax, [ebp+hWnd]
.text$mn:0000166E                 push    eax             ; hDlg
.text$mn:0000166F                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00001675                 mov     [ebp+var_4], eax
.text$mn:00001678                 cmp     [ebp+var_4], 0
.text$mn:0000167C                 jz      short loc_169A
.text$mn:0000167E                 lea     ecx, [ebp+lParam]
.text$mn:00001681                 push    ecx             ; lParam
.text$mn:00001682                 mov     edx, [ebp+wParam]
.text$mn:00001685                 push    edx             ; wParam
.text$mn:00001686                 mov     eax, ds:?WM_WINMGR@@3IB ; uint const WM_WINMGR
.text$mn:0000168B                 push    eax             ; Msg
.text$mn:0000168C                 mov     ecx, [ebp+var_4]
.text$mn:0000168F                 push    ecx             ; hWnd
.text$mn:00001690                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00001696                 test    eax, eax
.text$mn:00001698                 jnz     short loc_169E
.text$mn:0000169A
.text$mn:0000169A loc_169A:                               ; CODE XREF: CWinMgr::SendGetSizeInfo(SIZEINFO &,HWND__ *,uint)+64j
.text$mn:0000169A                 xor     eax, eax
.text$mn:0000169C                 jmp     short loc_16B0
.text$mn:0000169E ; ---------------------------------------------------------------------------
.text$mn:0000169E
.text$mn:0000169E loc_169E:                               ; CODE XREF: CWinMgr::SendGetSizeInfo(SIZEINFO &,HWND__ *,uint)+47j
.text$mn:0000169E                                         ; CWinMgr::SendGetSizeInfo(SIZEINFO &,HWND__ *,uint)+4Dj ...
.text$mn:0000169E                 mov     ecx, 8
.text$mn:000016A3                 lea     esi, [ebp+var_2C]
.text$mn:000016A6                 mov     edi, [ebp+arg_0]
.text$mn:000016A9                 rep movsd
.text$mn:000016AB                 mov     eax, 1
.text$mn:000016B0
.text$mn:000016B0 loc_16B0:                               ; CODE XREF: CWinMgr::SendGetSizeInfo(SIZEINFO &,HWND__ *,uint)+84j
.text$mn:000016B0                 pop     edi
.text$mn:000016B1                 pop     esi
.text$mn:000016B2                 mov     esp, ebp
.text$mn:000016B4                 pop     ebp
.text$mn:000016B5                 retn    0Ch
.text$mn:000016B5 ?SendGetSizeInfo@CWinMgr@@IAEHAAUSIZEINFO@@PAUHWND__@@I@Z endp
.text$mn:000016B5
.text$mn:000016B8
.text$mn:000016B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000016B8
.text$mn:000016B8 ; Attributes: bp-based frame
.text$mn:000016B8
.text$mn:000016B8 ; void __thiscall CWinMgr::CalcGroup(CWinMgr *this, struct WINRECT *, HWND)
.text$mn:000016B8                 public ?CalcGroup@CWinMgr@@MAEXPAVWINRECT@@PAUHWND__@@@Z
.text$mn:000016B8 ?CalcGroup@CWinMgr@@MAEXPAVWINRECT@@PAUHWND__@@@Z proc near
.text$mn:000016B8                                         ; DATA XREF: .rdata:0000236Co
.text$mn:000016B8
.text$mn:000016B8 var_74          = dword ptr -74h
.text$mn:000016B8 var_70          = dword ptr -70h
.text$mn:000016B8 var_6C          = dword ptr -6Ch
.text$mn:000016B8 var_68          = dword ptr -68h
.text$mn:000016B8 var_64          = dword ptr -64h
.text$mn:000016B8 var_60          = dword ptr -60h
.text$mn:000016B8 var_5C          = dword ptr -5Ch
.text$mn:000016B8 var_58          = dword ptr -58h
.text$mn:000016B8 X               = dword ptr -54h
.text$mn:000016B8 var_50          = dword ptr -50h
.text$mn:000016B8 var_4C          = dword ptr -4Ch
.text$mn:000016B8 var_48          = dword ptr -48h
.text$mn:000016B8 var_44          = dword ptr -44h
.text$mn:000016B8 var_40          = dword ptr -40h
.text$mn:000016B8 var_3C          = dword ptr -3Ch
.text$mn:000016B8 var_38          = byte ptr -38h
.text$mn:000016B8 var_34          = byte ptr -34h
.text$mn:000016B8 var_24          = dword ptr -24h
.text$mn:000016B8 var_20          = dword ptr -20h
.text$mn:000016B8 rc              = tagRECT ptr -14h
.text$mn:000016B8 var_4           = dword ptr -4
.text$mn:000016B8 arg_0           = dword ptr  8
.text$mn:000016B8 arg_4           = dword ptr  0Ch
.text$mn:000016B8
.text$mn:000016B8                 push    ebp
.text$mn:000016B9                 mov     ebp, esp
.text$mn:000016BB                 sub     esp, 74h
.text$mn:000016BE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000016C3                 xor     eax, ebp
.text$mn:000016C5                 mov     [ebp+var_4], eax
.text$mn:000016C8                 push    esi
.text$mn:000016C9                 mov     [ebp+var_3C], ecx
.text$mn:000016CC                 cmp     [ebp+arg_0], 0
.text$mn:000016D0                 jz      short loc_16DE
.text$mn:000016D2                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000016D5                 call    ?IsGroup@WINRECT@@QBEHXZ ; WINRECT::IsGroup(void)
.text$mn:000016DA                 test    eax, eax
.text$mn:000016DC                 jnz     short loc_16F5
.text$mn:000016DE
.text$mn:000016DE loc_16DE:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+18j
.text$mn:000016DE                 push    8Bh ; 'ï'       ; Line
.text$mn:000016E3                 push    offset $SG63998 ; "..\\src\\WinControls\\WindowsDlg\\WinMg"...
.text$mn:000016E8                 push    offset $SG63999 ; "pGroup && pGroup->IsGroup()"
.text$mn:000016ED                 call    __wassert
.text$mn:000016F2 ; ---------------------------------------------------------------------------
.text$mn:000016F2                 add     esp, 0Ch
.text$mn:000016F5
.text$mn:000016F5 loc_16F5:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+24j
.text$mn:000016F5                 cmp     [ebp+arg_4], 0
.text$mn:000016F9                 jnz     short loc_1712
.text$mn:000016FB                 push    8Ch ; 'î'       ; Line
.text$mn:00001700                 push    offset $SG64001 ; "..\\src\\WinControls\\WindowsDlg\\WinMg"...
.text$mn:00001705                 push    offset $SG64002 ; "hWnd"
.text$mn:0000170A                 call    __wassert
.text$mn:0000170F ; ---------------------------------------------------------------------------
.text$mn:0000170F                 add     esp, 0Ch
.text$mn:00001712
.text$mn:00001712 loc_1712:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+41j
.text$mn:00001712                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00001715                 call    ?GetRect@WINRECT@@QAEAAUtagRECT@@XZ ; WINRECT::GetRect(void)
.text$mn:0000171A                 mov     edx, [eax]
.text$mn:0000171C                 mov     [ebp+rc.left], edx
.text$mn:0000171F                 mov     ecx, [eax+4]
.text$mn:00001722                 mov     [ebp+rc.top], ecx
.text$mn:00001725                 mov     edx, [eax+8]
.text$mn:00001728                 mov     [ebp+rc.right], edx
.text$mn:0000172B                 mov     eax, [eax+0Ch]
.text$mn:0000172E                 mov     [ebp+rc.bottom], eax
.text$mn:00001731                 lea     ecx, [ebp+var_4C]
.text$mn:00001734                 push    ecx             ; int *
.text$mn:00001735                 lea     edx, [ebp+X]
.text$mn:00001738                 push    edx             ; int *
.text$mn:00001739                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000173C                 call    ?GetMargins@WINRECT@@QAEHAAH0@Z ; WINRECT::GetMargins(int &,int &)
.text$mn:00001741                 test    eax, eax
.text$mn:00001743                 jz      loc_17FB
.text$mn:00001749                 mov     eax, [ebp+X]
.text$mn:0000174C                 push    eax             ; X
.text$mn:0000174D                 call    _abs
.text$mn:00001752                 add     esp, 4
.text$mn:00001755                 mov     esi, eax
.text$mn:00001757                 lea     ecx, [ebp+rc]
.text$mn:0000175A                 push    ecx             ; struct tagRECT *
.text$mn:0000175B                 call    ?RectWidth@@YAJABUtagRECT@@@Z ; RectWidth(tagRECT const &)
.text$mn:00001760                 add     esp, 4
.text$mn:00001763                 cdq
.text$mn:00001764                 sub     eax, edx
.text$mn:00001766                 sar     eax, 1
.text$mn:00001768                 cmp     esi, eax
.text$mn:0000176A                 jge     short loc_177D
.text$mn:0000176C                 mov     edx, [ebp+X]
.text$mn:0000176F                 push    edx             ; X
.text$mn:00001770                 call    _abs
.text$mn:00001775                 add     esp, 4
.text$mn:00001778                 mov     [ebp+var_6C], eax
.text$mn:0000177B                 jmp     short loc_1791
.text$mn:0000177D ; ---------------------------------------------------------------------------
.text$mn:0000177D
.text$mn:0000177D loc_177D:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+B2j
.text$mn:0000177D                 lea     eax, [ebp+rc]
.text$mn:00001780                 push    eax             ; struct tagRECT *
.text$mn:00001781                 call    ?RectWidth@@YAJABUtagRECT@@@Z ; RectWidth(tagRECT const &)
.text$mn:00001786                 add     esp, 4
.text$mn:00001789                 cdq
.text$mn:0000178A                 sub     eax, edx
.text$mn:0000178C                 sar     eax, 1
.text$mn:0000178E                 mov     [ebp+var_6C], eax
.text$mn:00001791
.text$mn:00001791 loc_1791:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+C3j
.text$mn:00001791                 mov     ecx, [ebp+var_6C]
.text$mn:00001794                 mov     [ebp+X], ecx
.text$mn:00001797                 mov     edx, [ebp+var_4C]
.text$mn:0000179A                 push    edx             ; X
.text$mn:0000179B                 call    _abs
.text$mn:000017A0                 add     esp, 4
.text$mn:000017A3                 mov     esi, eax
.text$mn:000017A5                 lea     eax, [ebp+rc]
.text$mn:000017A8                 push    eax             ; struct tagRECT *
.text$mn:000017A9                 call    ?RectHeight@@YAJABUtagRECT@@@Z ; RectHeight(tagRECT const &)
.text$mn:000017AE                 add     esp, 4
.text$mn:000017B1                 cdq
.text$mn:000017B2                 sub     eax, edx
.text$mn:000017B4                 sar     eax, 1
.text$mn:000017B6                 cmp     esi, eax
.text$mn:000017B8                 jge     short loc_17CB
.text$mn:000017BA                 mov     ecx, [ebp+var_4C]
.text$mn:000017BD                 push    ecx             ; X
.text$mn:000017BE                 call    _abs
.text$mn:000017C3                 add     esp, 4
.text$mn:000017C6                 mov     [ebp+var_74], eax
.text$mn:000017C9                 jmp     short loc_17DF
.text$mn:000017CB ; ---------------------------------------------------------------------------
.text$mn:000017CB
.text$mn:000017CB loc_17CB:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+100j
.text$mn:000017CB                 lea     edx, [ebp+rc]
.text$mn:000017CE                 push    edx             ; struct tagRECT *
.text$mn:000017CF                 call    ?RectHeight@@YAJABUtagRECT@@@Z ; RectHeight(tagRECT const &)
.text$mn:000017D4                 add     esp, 4
.text$mn:000017D7                 cdq
.text$mn:000017D8                 sub     eax, edx
.text$mn:000017DA                 sar     eax, 1
.text$mn:000017DC                 mov     [ebp+var_74], eax
.text$mn:000017DF
.text$mn:000017DF loc_17DF:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+111j
.text$mn:000017DF                 mov     eax, [ebp+var_74]
.text$mn:000017E2                 mov     [ebp+var_4C], eax
.text$mn:000017E5                 mov     ecx, [ebp+var_4C]
.text$mn:000017E8                 neg     ecx
.text$mn:000017EA                 push    ecx             ; dy
.text$mn:000017EB                 mov     edx, [ebp+X]
.text$mn:000017EE                 neg     edx
.text$mn:000017F0                 push    edx             ; dx
.text$mn:000017F1                 lea     eax, [ebp+rc]
.text$mn:000017F4                 push    eax             ; lprc
.text$mn:000017F5                 call    dword ptr ds:__imp__InflateRect@12 ; InflateRect(x,x,x)
.text$mn:000017FB
.text$mn:000017FB loc_17FB:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+8Bj
.text$mn:000017FB                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000017FE                 call    ?IsRowGroup@WINRECT@@QBEHXZ ; WINRECT::IsRowGroup(void)
.text$mn:00001803                 mov     [ebp+var_44], eax
.text$mn:00001806                 cmp     [ebp+var_44], 0
.text$mn:0000180A                 jz      short loc_181D
.text$mn:0000180C                 lea     ecx, [ebp+rc]
.text$mn:0000180F                 push    ecx             ; struct tagRECT *
.text$mn:00001810                 call    ?RectHeight@@YAJABUtagRECT@@@Z ; RectHeight(tagRECT const &)
.text$mn:00001815                 add     esp, 4
.text$mn:00001818                 mov     [ebp+var_60], eax
.text$mn:0000181B                 jmp     short loc_182C
.text$mn:0000181D ; ---------------------------------------------------------------------------
.text$mn:0000181D
.text$mn:0000181D loc_181D:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+152j
.text$mn:0000181D                 lea     edx, [ebp+rc]
.text$mn:00001820                 push    edx             ; struct tagRECT *
.text$mn:00001821                 call    ?RectWidth@@YAJABUtagRECT@@@Z ; RectWidth(tagRECT const &)
.text$mn:00001826                 add     esp, 4
.text$mn:00001829                 mov     [ebp+var_60], eax
.text$mn:0000182C
.text$mn:0000182C loc_182C:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+163j
.text$mn:0000182C                 mov     eax, [ebp+var_60]
.text$mn:0000182F                 mov     [ebp+var_40], eax
.text$mn:00001832                 lea     ecx, [ebp+var_38] ; this
.text$mn:00001835                 call    ??0CWinGroupIterator@@QAE@XZ ; CWinGroupIterator::CWinGroupIterator(void)
.text$mn:0000183A                 mov     ecx, [ebp+arg_0]
.text$mn:0000183D                 push    ecx             ; WINRECT *
.text$mn:0000183E                 lea     ecx, [ebp+var_38]
.text$mn:00001841                 call    ??4CWinGroupIterator@@QAEAAV0@PAVWINRECT@@@Z ; CWinGroupIterator::operator=(WINRECT *)
.text$mn:00001846                 jmp     short loc_1850
.text$mn:00001848 ; ---------------------------------------------------------------------------
.text$mn:00001848
.text$mn:00001848 loc_1848:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *):loc_18ECj
.text$mn:00001848                 lea     ecx, [ebp+var_38] ; this
.text$mn:0000184B                 call    ?Next@CWinGroupIterator@@QAEPAVWINRECT@@XZ ; CWinGroupIterator::Next(void)
.text$mn:00001850
.text$mn:00001850 loc_1850:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+18Ej
.text$mn:00001850                 lea     ecx, [ebp+var_38]
.text$mn:00001853                 call    ??BCWinGroupIterator@@QAEPAVWINRECT@@XZ ; CWinGroupIterator::operator WINRECT *(void)
.text$mn:00001858                 test    eax, eax
.text$mn:0000185A                 jz      loc_18F1
.text$mn:00001860                 lea     ecx, [ebp+var_38]
.text$mn:00001863                 call    ??BCWinGroupIterator@@QAEPAVWINRECT@@XZ ; CWinGroupIterator::operator WINRECT *(void)
.text$mn:00001868                 mov     [ebp+var_5C], eax
.text$mn:0000186B                 mov     edx, [ebp+arg_4]
.text$mn:0000186E                 push    edx
.text$mn:0000186F                 mov     eax, [ebp+var_5C]
.text$mn:00001872                 push    eax
.text$mn:00001873                 lea     ecx, [ebp+var_34]
.text$mn:00001876                 push    ecx
.text$mn:00001877                 mov     edx, [ebp+var_3C]
.text$mn:0000187A                 mov     eax, [edx]
.text$mn:0000187C                 mov     ecx, [ebp+var_3C]
.text$mn:0000187F                 mov     edx, [eax+0Ch]
.text$mn:00001882                 call    edx
.text$mn:00001884                 cmp     [ebp+var_44], 0
.text$mn:00001888                 jz      short loc_1892
.text$mn:0000188A                 mov     eax, [ebp+var_20]
.text$mn:0000188D                 mov     [ebp+var_70], eax
.text$mn:00001890                 jmp     short loc_1898
.text$mn:00001892 ; ---------------------------------------------------------------------------
.text$mn:00001892
.text$mn:00001892 loc_1892:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+1D0j
.text$mn:00001892                 mov     ecx, [ebp+var_24]
.text$mn:00001895                 mov     [ebp+var_70], ecx
.text$mn:00001898
.text$mn:00001898 loc_1898:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+1D8j
.text$mn:00001898                 mov     edx, [ebp+var_70]
.text$mn:0000189B                 mov     [ebp+var_48], edx
.text$mn:0000189E                 mov     eax, [ebp+var_48]
.text$mn:000018A1                 cmp     eax, [ebp+var_40]
.text$mn:000018A4                 jge     short loc_18AE
.text$mn:000018A6                 mov     ecx, [ebp+var_48]
.text$mn:000018A9                 mov     [ebp+var_68], ecx
.text$mn:000018AC                 jmp     short loc_18B4
.text$mn:000018AE ; ---------------------------------------------------------------------------
.text$mn:000018AE
.text$mn:000018AE loc_18AE:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+1ECj
.text$mn:000018AE                 mov     edx, [ebp+var_40]
.text$mn:000018B1                 mov     [ebp+var_68], edx
.text$mn:000018B4
.text$mn:000018B4 loc_18B4:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+1F4j
.text$mn:000018B4                 mov     eax, [ebp+var_68]
.text$mn:000018B7                 mov     [ebp+var_48], eax
.text$mn:000018BA                 mov     ecx, [ebp+var_44]
.text$mn:000018BD                 push    ecx             ; int
.text$mn:000018BE                 mov     edx, [ebp+var_48]
.text$mn:000018C1                 push    edx             ; __int32
.text$mn:000018C2                 mov     ecx, [ebp+var_5C] ; this
.text$mn:000018C5                 call    ?SetHeightOrWidth@WINRECT@@QAEXJH@Z ; WINRECT::SetHeightOrWidth(long,int)
.text$mn:000018CA                 mov     eax, [ebp+var_40]
.text$mn:000018CD                 sub     eax, [ebp+var_48]
.text$mn:000018D0                 mov     [ebp+var_40], eax
.text$mn:000018D3                 jns     short loc_18EC
.text$mn:000018D5                 push    0A7h ; 'º'      ; Line
.text$mn:000018DA                 push    offset $SG64017 ; "..\\src\\WinControls\\WindowsDlg\\WinMg"...
.text$mn:000018DF                 push    offset $SG64018 ; "hwRemaining>=0"
.text$mn:000018E4                 call    __wassert
.text$mn:000018E9 ; ---------------------------------------------------------------------------
.text$mn:000018E9                 add     esp, 0Ch
.text$mn:000018EC
.text$mn:000018EC loc_18EC:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+21Bj
.text$mn:000018EC                 jmp     loc_1848
.text$mn:000018F1 ; ---------------------------------------------------------------------------
.text$mn:000018F1
.text$mn:000018F1 loc_18F1:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+1A2j
.text$mn:000018F1                 mov     [ebp+var_50], 0
.text$mn:000018F8                 mov     edx, [ebp+arg_0]
.text$mn:000018FB                 push    edx             ; WINRECT *
.text$mn:000018FC                 lea     ecx, [ebp+var_38]
.text$mn:000018FF                 call    ??4CWinGroupIterator@@QAEAAV0@PAVWINRECT@@@Z ; CWinGroupIterator::operator=(WINRECT *)
.text$mn:00001904                 jmp     short loc_190E
.text$mn:00001906 ; ---------------------------------------------------------------------------
.text$mn:00001906
.text$mn:00001906 loc_1906:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *):loc_1977j
.text$mn:00001906                 lea     ecx, [ebp+var_38] ; this
.text$mn:00001909                 call    ?Next@CWinGroupIterator@@QAEPAVWINRECT@@XZ ; CWinGroupIterator::Next(void)
.text$mn:0000190E
.text$mn:0000190E loc_190E:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+24Cj
.text$mn:0000190E                 lea     ecx, [ebp+var_38]
.text$mn:00001911                 call    ??BCWinGroupIterator@@QAEPAVWINRECT@@XZ ; CWinGroupIterator::operator WINRECT *(void)
.text$mn:00001916                 test    eax, eax
.text$mn:00001918                 jz      short loc_1979
.text$mn:0000191A                 lea     ecx, [ebp+var_38]
.text$mn:0000191D                 call    ??BCWinGroupIterator@@QAEPAVWINRECT@@XZ ; CWinGroupIterator::operator WINRECT *(void)
.text$mn:00001922                 mov     [ebp+var_58], eax
.text$mn:00001925                 mov     ecx, [ebp+var_58] ; this
.text$mn:00001928                 call    ?Type@WINRECT@@QBEGXZ ; WINRECT::Type(void)
.text$mn:0000192D                 movzx   eax, ax
.text$mn:00001930                 cmp     eax, 3
.text$mn:00001933                 jnz     short loc_195A
.text$mn:00001935                 cmp     [ebp+var_50], 0
.text$mn:00001939                 jz      short loc_1952
.text$mn:0000193B                 push    0AFh ; '»'      ; Line
.text$mn:00001940                 push    offset $SG64026 ; "..\\src\\WinControls\\WindowsDlg\\WinMg"...
.text$mn:00001945                 push    offset $SG64027 ; "pRestRect==NULL"
.text$mn:0000194A                 call    __wassert
.text$mn:0000194F ; ---------------------------------------------------------------------------
.text$mn:0000194F                 add     esp, 0Ch
.text$mn:00001952
.text$mn:00001952 loc_1952:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+281j
.text$mn:00001952                 mov     edx, [ebp+var_58]
.text$mn:00001955                 mov     [ebp+var_50], edx
.text$mn:00001958                 jmp     short loc_1977
.text$mn:0000195A ; ---------------------------------------------------------------------------
.text$mn:0000195A
.text$mn:0000195A loc_195A:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+27Bj
.text$mn:0000195A                 mov     eax, [ebp+arg_4]
.text$mn:0000195D                 push    eax
.text$mn:0000195E                 lea     ecx, [ebp+var_40]
.text$mn:00001961                 push    ecx
.text$mn:00001962                 mov     edx, [ebp+var_44]
.text$mn:00001965                 push    edx
.text$mn:00001966                 mov     eax, [ebp+var_58]
.text$mn:00001969                 push    eax
.text$mn:0000196A                 mov     ecx, [ebp+var_3C]
.text$mn:0000196D                 mov     edx, [ecx]
.text$mn:0000196F                 mov     ecx, [ebp+var_3C]
.text$mn:00001972                 mov     eax, [edx+14h]
.text$mn:00001975                 call    eax
.text$mn:00001977
.text$mn:00001977 loc_1977:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+2A0j
.text$mn:00001977                 jmp     short loc_1906
.text$mn:00001979 ; ---------------------------------------------------------------------------
.text$mn:00001979
.text$mn:00001979 loc_1979:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+260j
.text$mn:00001979                 cmp     [ebp+var_40], 0
.text$mn:0000197D                 jge     short loc_1996
.text$mn:0000197F                 push    0B5h ; '¦'      ; Line
.text$mn:00001984                 push    offset $SG64030 ; "..\\src\\WinControls\\WindowsDlg\\WinMg"...
.text$mn:00001989                 push    offset $SG64031 ; "hwRemaining>=0"
.text$mn:0000198E                 call    __wassert
.text$mn:00001993 ; ---------------------------------------------------------------------------
.text$mn:00001993                 add     esp, 0Ch
.text$mn:00001996
.text$mn:00001996 loc_1996:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+2C5j
.text$mn:00001996                 cmp     [ebp+var_50], 0
.text$mn:0000199A                 jz      short loc_19D6
.text$mn:0000199C                 mov     edx, [ebp+arg_4]
.text$mn:0000199F                 push    edx
.text$mn:000019A0                 lea     eax, [ebp+var_40]
.text$mn:000019A3                 push    eax
.text$mn:000019A4                 mov     ecx, [ebp+var_44]
.text$mn:000019A7                 push    ecx
.text$mn:000019A8                 mov     edx, [ebp+var_50]
.text$mn:000019AB                 push    edx
.text$mn:000019AC                 mov     eax, [ebp+var_3C]
.text$mn:000019AF                 mov     edx, [eax]
.text$mn:000019B1                 mov     ecx, [ebp+var_3C]
.text$mn:000019B4                 mov     eax, [edx+14h]
.text$mn:000019B7                 call    eax
.text$mn:000019B9                 cmp     [ebp+var_40], 0
.text$mn:000019BD                 jz      short loc_19D6
.text$mn:000019BF                 push    0BAh ; '¦'      ; Line
.text$mn:000019C4                 push    offset $SG64034 ; "..\\src\\WinControls\\WindowsDlg\\WinMg"...
.text$mn:000019C9                 push    offset $SG64035 ; "hwRemaining==0"
.text$mn:000019CE                 call    __wassert
.text$mn:000019D3 ; ---------------------------------------------------------------------------
.text$mn:000019D3                 add     esp, 0Ch
.text$mn:000019D6
.text$mn:000019D6 loc_19D6:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+2E2j
.text$mn:000019D6                                         ; CWinMgr::CalcGroup(WINRECT *,HWND__ *)+305j
.text$mn:000019D6                 mov     edx, [ebp+var_44]
.text$mn:000019D9                 push    edx
.text$mn:000019DA                 lea     eax, [ebp+rc]
.text$mn:000019DD                 push    eax
.text$mn:000019DE                 mov     ecx, [ebp+arg_0]
.text$mn:000019E1                 push    ecx
.text$mn:000019E2                 mov     edx, [ebp+var_3C]
.text$mn:000019E5                 mov     eax, [edx]
.text$mn:000019E7                 mov     ecx, [ebp+var_3C]
.text$mn:000019EA                 mov     edx, [eax+18h]
.text$mn:000019ED                 call    edx
.text$mn:000019EF                 mov     eax, [ebp+arg_0]
.text$mn:000019F2                 push    eax             ; WINRECT *
.text$mn:000019F3                 lea     ecx, [ebp+var_38]
.text$mn:000019F6                 call    ??4CWinGroupIterator@@QAEAAV0@PAVWINRECT@@@Z ; CWinGroupIterator::operator=(WINRECT *)
.text$mn:000019FB                 jmp     short loc_1A05
.text$mn:000019FD ; ---------------------------------------------------------------------------
.text$mn:000019FD
.text$mn:000019FD loc_19FD:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *):loc_1A3Dj
.text$mn:000019FD                 lea     ecx, [ebp+var_38] ; this
.text$mn:00001A00                 call    ?Next@CWinGroupIterator@@QAEPAVWINRECT@@XZ ; CWinGroupIterator::Next(void)
.text$mn:00001A05
.text$mn:00001A05 loc_1A05:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+343j
.text$mn:00001A05                 lea     ecx, [ebp+var_38]
.text$mn:00001A08                 call    ??BCWinGroupIterator@@QAEPAVWINRECT@@XZ ; CWinGroupIterator::operator WINRECT *(void)
.text$mn:00001A0D                 test    eax, eax
.text$mn:00001A0F                 jz      short loc_1A3F
.text$mn:00001A11                 lea     ecx, [ebp+var_38]
.text$mn:00001A14                 call    ??BCWinGroupIterator@@QAEPAVWINRECT@@XZ ; CWinGroupIterator::operator WINRECT *(void)
.text$mn:00001A19                 mov     [ebp+var_64], eax
.text$mn:00001A1C                 mov     ecx, [ebp+var_64] ; this
.text$mn:00001A1F                 call    ?IsGroup@WINRECT@@QBEHXZ ; WINRECT::IsGroup(void)
.text$mn:00001A24                 test    eax, eax
.text$mn:00001A26                 jz      short loc_1A3D
.text$mn:00001A28                 mov     ecx, [ebp+arg_4]
.text$mn:00001A2B                 push    ecx
.text$mn:00001A2C                 mov     edx, [ebp+var_64]
.text$mn:00001A2F                 push    edx
.text$mn:00001A30                 mov     eax, [ebp+var_3C]
.text$mn:00001A33                 mov     edx, [eax]
.text$mn:00001A35                 mov     ecx, [ebp+var_3C]
.text$mn:00001A38                 mov     eax, [edx+10h]
.text$mn:00001A3B                 call    eax
.text$mn:00001A3D
.text$mn:00001A3D loc_1A3D:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+36Ej
.text$mn:00001A3D                 jmp     short loc_19FD
.text$mn:00001A3F ; ---------------------------------------------------------------------------
.text$mn:00001A3F
.text$mn:00001A3F loc_1A3F:                               ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+357j
.text$mn:00001A3F                 pop     esi
.text$mn:00001A40                 mov     ecx, [ebp+var_4]
.text$mn:00001A43                 xor     ecx, ebp
.text$mn:00001A45                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00001A4A                 mov     esp, ebp
.text$mn:00001A4C                 pop     ebp
.text$mn:00001A4D                 retn    8
.text$mn:00001A4D ?CalcGroup@CWinMgr@@MAEXPAVWINRECT@@PAUHWND__@@@Z endp
.text$mn:00001A4D
.text$mn:00001A4D ; ---------------------------------------------------------------------------
.text$mn:00001A50                 db 8 dup(0CCh)
.text$mn:00001A58
.text$mn:00001A58 ; =============== S U B R O U T I N E =======================================
.text$mn:00001A58
.text$mn:00001A58 ; Attributes: bp-based frame
.text$mn:00001A58
.text$mn:00001A58 ; void __thiscall CWinMgr::AdjustSize(CWinMgr *this, struct WINRECT *, int, int *, HWND)
.text$mn:00001A58                 public ?AdjustSize@CWinMgr@@MAEXPAVWINRECT@@HAAHPAUHWND__@@@Z
.text$mn:00001A58 ?AdjustSize@CWinMgr@@MAEXPAVWINRECT@@HAAHPAUHWND__@@@Z proc near
.text$mn:00001A58                                         ; DATA XREF: .rdata:00002370o
.text$mn:00001A58
.text$mn:00001A58 var_4C          = dword ptr -4Ch
.text$mn:00001A58 var_48          = dword ptr -48h
.text$mn:00001A58 var_44          = dword ptr -44h
.text$mn:00001A58 var_40          = dword ptr -40h
.text$mn:00001A58 var_3C          = dword ptr -3Ch
.text$mn:00001A58 var_38          = dword ptr -38h
.text$mn:00001A58 var_34          = dword ptr -34h
.text$mn:00001A58 var_30          = dword ptr -30h
.text$mn:00001A58 var_2C          = dword ptr -2Ch
.text$mn:00001A58 var_28          = dword ptr -28h
.text$mn:00001A58 var_24          = byte ptr -24h
.text$mn:00001A58 var_1C          = dword ptr -1Ch
.text$mn:00001A58 var_18          = dword ptr -18h
.text$mn:00001A58 var_4           = dword ptr -4
.text$mn:00001A58 arg_0           = dword ptr  8
.text$mn:00001A58 arg_4           = dword ptr  0Ch
.text$mn:00001A58 arg_8           = dword ptr  10h
.text$mn:00001A58 arg_C           = dword ptr  14h
.text$mn:00001A58
.text$mn:00001A58                 push    ebp
.text$mn:00001A59                 mov     ebp, esp
.text$mn:00001A5B                 sub     esp, 4Ch
.text$mn:00001A5E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001A63                 xor     eax, ebp
.text$mn:00001A65                 mov     [ebp+var_4], eax
.text$mn:00001A68                 mov     [ebp+var_48], ecx
.text$mn:00001A6B                 mov     eax, [ebp+arg_C]
.text$mn:00001A6E                 push    eax
.text$mn:00001A6F                 mov     ecx, [ebp+arg_0]
.text$mn:00001A72                 push    ecx
.text$mn:00001A73                 lea     edx, [ebp+var_24]
.text$mn:00001A76                 push    edx
.text$mn:00001A77                 mov     eax, [ebp+var_48]
.text$mn:00001A7A                 mov     edx, [eax]
.text$mn:00001A7C                 mov     ecx, [ebp+var_48]
.text$mn:00001A7F                 mov     eax, [edx+0Ch]
.text$mn:00001A82                 call    eax
.text$mn:00001A84                 cmp     [ebp+arg_4], 0
.text$mn:00001A88                 jz      short loc_1A92
.text$mn:00001A8A                 mov     ecx, [ebp+var_18]
.text$mn:00001A8D                 mov     [ebp+var_4C], ecx
.text$mn:00001A90                 jmp     short loc_1A98
.text$mn:00001A92 ; ---------------------------------------------------------------------------
.text$mn:00001A92
.text$mn:00001A92 loc_1A92:                               ; CODE XREF: CWinMgr::AdjustSize(WINRECT *,int,int &,HWND__ *)+30j
.text$mn:00001A92                 mov     edx, [ebp+var_1C]
.text$mn:00001A95                 mov     [ebp+var_4C], edx
.text$mn:00001A98
.text$mn:00001A98 loc_1A98:                               ; CODE XREF: CWinMgr::AdjustSize(WINRECT *,int,int &,HWND__ *)+38j
.text$mn:00001A98                 mov     eax, [ebp+var_4C]
.text$mn:00001A9B                 mov     [ebp+var_2C], eax
.text$mn:00001A9E                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00001AA1                 call    ?Type@WINRECT@@QBEGXZ ; WINRECT::Type(void)
.text$mn:00001AA6                 movzx   ecx, ax
.text$mn:00001AA9                 cmp     ecx, 3
.text$mn:00001AAC                 jnz     short loc_1AEA
.text$mn:00001AAE                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00001AB1                 call    ?GetRect@WINRECT@@QAEAAUtagRECT@@XZ ; WINRECT::GetRect(void)
.text$mn:00001AB6                 mov     [ebp+var_38], eax
.text$mn:00001AB9                 cmp     [ebp+arg_4], 0
.text$mn:00001ABD                 jz      short loc_1AD0
.text$mn:00001ABF                 mov     edx, [ebp+var_38]
.text$mn:00001AC2                 push    edx             ; struct tagRECT *
.text$mn:00001AC3                 call    ?RectHeight@@YAJABUtagRECT@@@Z ; RectHeight(tagRECT const &)
.text$mn:00001AC8                 add     esp, 4
.text$mn:00001ACB                 mov     [ebp+var_30], eax
.text$mn:00001ACE                 jmp     short loc_1ADF
.text$mn:00001AD0 ; ---------------------------------------------------------------------------
.text$mn:00001AD0
.text$mn:00001AD0 loc_1AD0:                               ; CODE XREF: CWinMgr::AdjustSize(WINRECT *,int,int &,HWND__ *)+65j
.text$mn:00001AD0                 mov     eax, [ebp+var_38]
.text$mn:00001AD3                 push    eax             ; struct tagRECT *
.text$mn:00001AD4                 call    ?RectWidth@@YAJABUtagRECT@@@Z ; RectWidth(tagRECT const &)
.text$mn:00001AD9                 add     esp, 4
.text$mn:00001ADC                 mov     [ebp+var_30], eax
.text$mn:00001ADF
.text$mn:00001ADF loc_1ADF:                               ; CODE XREF: CWinMgr::AdjustSize(WINRECT *,int,int &,HWND__ *)+76j
.text$mn:00001ADF                 mov     ecx, [ebp+arg_8]
.text$mn:00001AE2                 mov     edx, [ecx]
.text$mn:00001AE4                 add     edx, [ebp+var_30]
.text$mn:00001AE7                 mov     [ebp+var_2C], edx
.text$mn:00001AEA
.text$mn:00001AEA loc_1AEA:                               ; CODE XREF: CWinMgr::AdjustSize(WINRECT *,int,int &,HWND__ *)+54j
.text$mn:00001AEA                 mov     eax, [ebp+arg_4]
.text$mn:00001AED                 push    eax             ; int
.text$mn:00001AEE                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00001AF1                 call    ?GetHeightOrWidth@WINRECT@@QBEJH@Z ; WINRECT::GetHeightOrWidth(int)
.text$mn:00001AF6                 mov     [ebp+var_44], eax
.text$mn:00001AF9                 mov     ecx, [ebp+var_2C]
.text$mn:00001AFC                 sub     ecx, [ebp+var_44]
.text$mn:00001AFF                 mov     [ebp+var_28], ecx
.text$mn:00001B02                 cmp     [ebp+var_28], 0
.text$mn:00001B06                 jle     short loc_1B10
.text$mn:00001B08                 mov     edx, [ebp+var_28]
.text$mn:00001B0B                 mov     [ebp+var_40], edx
.text$mn:00001B0E                 jmp     short loc_1B17
.text$mn:00001B10 ; ---------------------------------------------------------------------------
.text$mn:00001B10
.text$mn:00001B10 loc_1B10:                               ; CODE XREF: CWinMgr::AdjustSize(WINRECT *,int,int &,HWND__ *)+AEj
.text$mn:00001B10                 mov     [ebp+var_40], 0
.text$mn:00001B17
.text$mn:00001B17 loc_1B17:                               ; CODE XREF: CWinMgr::AdjustSize(WINRECT *,int,int &,HWND__ *)+B6j
.text$mn:00001B17                 mov     eax, [ebp+arg_8]
.text$mn:00001B1A                 mov     ecx, [ebp+var_40]
.text$mn:00001B1D                 cmp     ecx, [eax]
.text$mn:00001B1F                 jge     short loc_1B3E
.text$mn:00001B21                 cmp     [ebp+var_28], 0
.text$mn:00001B25                 jle     short loc_1B2F
.text$mn:00001B27                 mov     edx, [ebp+var_28]
.text$mn:00001B2A                 mov     [ebp+var_34], edx
.text$mn:00001B2D                 jmp     short loc_1B36
.text$mn:00001B2F ; ---------------------------------------------------------------------------
.text$mn:00001B2F
.text$mn:00001B2F loc_1B2F:                               ; CODE XREF: CWinMgr::AdjustSize(WINRECT *,int,int &,HWND__ *)+CDj
.text$mn:00001B2F                 mov     [ebp+var_34], 0
.text$mn:00001B36
.text$mn:00001B36 loc_1B36:                               ; CODE XREF: CWinMgr::AdjustSize(WINRECT *,int,int &,HWND__ *)+D5j
.text$mn:00001B36                 mov     eax, [ebp+var_34]
.text$mn:00001B39                 mov     [ebp+var_3C], eax
.text$mn:00001B3C                 jmp     short loc_1B46
.text$mn:00001B3E ; ---------------------------------------------------------------------------
.text$mn:00001B3E
.text$mn:00001B3E loc_1B3E:                               ; CODE XREF: CWinMgr::AdjustSize(WINRECT *,int,int &,HWND__ *)+C7j
.text$mn:00001B3E                 mov     ecx, [ebp+arg_8]
.text$mn:00001B41                 mov     edx, [ecx]
.text$mn:00001B43                 mov     [ebp+var_3C], edx
.text$mn:00001B46
.text$mn:00001B46 loc_1B46:                               ; CODE XREF: CWinMgr::AdjustSize(WINRECT *,int,int &,HWND__ *)+E4j
.text$mn:00001B46                 mov     eax, [ebp+var_3C]
.text$mn:00001B49                 mov     [ebp+var_28], eax
.text$mn:00001B4C                 mov     ecx, [ebp+var_44]
.text$mn:00001B4F                 add     ecx, [ebp+var_28]
.text$mn:00001B52                 mov     [ebp+var_2C], ecx
.text$mn:00001B55                 mov     edx, [ebp+arg_4]
.text$mn:00001B58                 push    edx             ; int
.text$mn:00001B59                 mov     eax, [ebp+var_2C]
.text$mn:00001B5C                 push    eax             ; __int32
.text$mn:00001B5D                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00001B60                 call    ?SetHeightOrWidth@WINRECT@@QAEXJH@Z ; WINRECT::SetHeightOrWidth(long,int)
.text$mn:00001B65                 mov     ecx, [ebp+arg_8]
.text$mn:00001B68                 mov     edx, [ecx]
.text$mn:00001B6A                 sub     edx, [ebp+var_28]
.text$mn:00001B6D                 mov     eax, [ebp+arg_8]
.text$mn:00001B70                 mov     [eax], edx
.text$mn:00001B72                 mov     ecx, [ebp+var_4]
.text$mn:00001B75                 xor     ecx, ebp
.text$mn:00001B77                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00001B7C                 mov     esp, ebp
.text$mn:00001B7E                 pop     ebp
.text$mn:00001B7F                 retn    10h
.text$mn:00001B7F ?AdjustSize@CWinMgr@@MAEXPAVWINRECT@@HAAHPAUHWND__@@@Z endp
.text$mn:00001B7F
.text$mn:00001B7F ; ---------------------------------------------------------------------------
.text$mn:00001B82                 align 8
.text$mn:00001B88
.text$mn:00001B88 ; =============== S U B R O U T I N E =======================================
.text$mn:00001B88
.text$mn:00001B88 ; Attributes: bp-based frame
.text$mn:00001B88
.text$mn:00001B88 ; void __thiscall CWinMgr::PositionRects(CWinMgr *this, struct WINRECT *, const struct tagRECT *, int)
.text$mn:00001B88                 public ?PositionRects@CWinMgr@@MAEXPAVWINRECT@@ABUtagRECT@@H@Z
.text$mn:00001B88 ?PositionRects@CWinMgr@@MAEXPAVWINRECT@@ABUtagRECT@@H@Z proc near
.text$mn:00001B88                                         ; DATA XREF: .rdata:00002374o
.text$mn:00001B88
.text$mn:00001B88 var_20          = dword ptr -20h
.text$mn:00001B88 var_1C          = dword ptr -1Ch
.text$mn:00001B88 var_18          = dword ptr -18h
.text$mn:00001B88 var_14          = dword ptr -14h
.text$mn:00001B88 var_10          = dword ptr -10h
.text$mn:00001B88 var_C           = byte ptr -0Ch
.text$mn:00001B88 var_8           = dword ptr -8
.text$mn:00001B88 var_4           = dword ptr -4
.text$mn:00001B88 arg_0           = dword ptr  8
.text$mn:00001B88 arg_4           = dword ptr  0Ch
.text$mn:00001B88 arg_8           = dword ptr  10h
.text$mn:00001B88
.text$mn:00001B88                 push    ebp
.text$mn:00001B89                 mov     ebp, esp
.text$mn:00001B8B                 sub     esp, 20h
.text$mn:00001B8E                 mov     [ebp+var_20], ecx
.text$mn:00001B91                 cmp     [ebp+arg_8], 0
.text$mn:00001B95                 jz      short loc_1BA2
.text$mn:00001B97                 mov     eax, [ebp+arg_4]
.text$mn:00001B9A                 mov     ecx, [eax+4]
.text$mn:00001B9D                 mov     [ebp+var_10], ecx
.text$mn:00001BA0                 jmp     short loc_1BAA
.text$mn:00001BA2 ; ---------------------------------------------------------------------------
.text$mn:00001BA2
.text$mn:00001BA2 loc_1BA2:                               ; CODE XREF: CWinMgr::PositionRects(WINRECT *,tagRECT const &,int)+Dj
.text$mn:00001BA2                 mov     edx, [ebp+arg_4]
.text$mn:00001BA5                 mov     eax, [edx]
.text$mn:00001BA7                 mov     [ebp+var_10], eax
.text$mn:00001BAA
.text$mn:00001BAA loc_1BAA:                               ; CODE XREF: CWinMgr::PositionRects(WINRECT *,tagRECT const &,int)+18j
.text$mn:00001BAA                 mov     ecx, [ebp+var_10]
.text$mn:00001BAD                 mov     [ebp+var_8], ecx
.text$mn:00001BB0                 lea     ecx, [ebp+var_C] ; this
.text$mn:00001BB3                 call    ??0CWinGroupIterator@@QAE@XZ ; CWinGroupIterator::CWinGroupIterator(void)
.text$mn:00001BB8                 mov     edx, [ebp+arg_0]
.text$mn:00001BBB                 push    edx             ; WINRECT *
.text$mn:00001BBC                 lea     ecx, [ebp+var_C]
.text$mn:00001BBF                 call    ??4CWinGroupIterator@@QAEAAV0@PAVWINRECT@@@Z ; CWinGroupIterator::operator=(WINRECT *)
.text$mn:00001BC4                 jmp     short loc_1BCE
.text$mn:00001BC6 ; ---------------------------------------------------------------------------
.text$mn:00001BC6
.text$mn:00001BC6 loc_1BC6:                               ; CODE XREF: CWinMgr::PositionRects(WINRECT *,tagRECT const &,int):loc_1C88j
.text$mn:00001BC6                 lea     ecx, [ebp+var_C] ; this
.text$mn:00001BC9                 call    ?Next@CWinGroupIterator@@QAEPAVWINRECT@@XZ ; CWinGroupIterator::Next(void)
.text$mn:00001BCE
.text$mn:00001BCE loc_1BCE:                               ; CODE XREF: CWinMgr::PositionRects(WINRECT *,tagRECT const &,int)+3Cj
.text$mn:00001BCE                 lea     ecx, [ebp+var_C]
.text$mn:00001BD1                 call    ??BCWinGroupIterator@@QAEPAVWINRECT@@XZ ; CWinGroupIterator::operator WINRECT *(void)
.text$mn:00001BD6                 test    eax, eax
.text$mn:00001BD8                 jz      loc_1C8D
.text$mn:00001BDE                 lea     ecx, [ebp+var_C]
.text$mn:00001BE1                 call    ??BCWinGroupIterator@@QAEPAVWINRECT@@XZ ; CWinGroupIterator::operator WINRECT *(void)
.text$mn:00001BE6                 mov     [ebp+var_1C], eax
.text$mn:00001BE9                 mov     ecx, [ebp+var_1C] ; this
.text$mn:00001BEC                 call    ?GetRect@WINRECT@@QAEAAUtagRECT@@XZ ; WINRECT::GetRect(void)
.text$mn:00001BF1                 mov     [ebp+var_4], eax
.text$mn:00001BF4                 cmp     [ebp+arg_8], 0
.text$mn:00001BF8                 jz      short loc_1C42
.text$mn:00001BFA                 mov     eax, [ebp+var_4]
.text$mn:00001BFD                 push    eax             ; struct tagRECT *
.text$mn:00001BFE                 call    ?RectHeight@@YAJABUtagRECT@@@Z ; RectHeight(tagRECT const &)
.text$mn:00001C03                 add     esp, 4
.text$mn:00001C06                 mov     [ebp+var_14], eax
.text$mn:00001C09                 mov     ecx, [ebp+var_4]
.text$mn:00001C0C                 mov     edx, [ebp+var_8]
.text$mn:00001C0F                 mov     [ecx+4], edx
.text$mn:00001C12                 mov     eax, [ebp+var_4]
.text$mn:00001C15                 mov     ecx, [eax+4]
.text$mn:00001C18                 add     ecx, [ebp+var_14]
.text$mn:00001C1B                 mov     edx, [ebp+var_4]
.text$mn:00001C1E                 mov     [edx+0Ch], ecx
.text$mn:00001C21                 mov     eax, [ebp+var_4]
.text$mn:00001C24                 mov     ecx, [ebp+arg_4]
.text$mn:00001C27                 mov     edx, [ecx]
.text$mn:00001C29                 mov     [eax], edx
.text$mn:00001C2B                 mov     eax, [ebp+var_4]
.text$mn:00001C2E                 mov     ecx, [ebp+arg_4]
.text$mn:00001C31                 mov     edx, [ecx+8]
.text$mn:00001C34                 mov     [eax+8], edx
.text$mn:00001C37                 mov     eax, [ebp+var_8]
.text$mn:00001C3A                 add     eax, [ebp+var_14]
.text$mn:00001C3D                 mov     [ebp+var_8], eax
.text$mn:00001C40                 jmp     short loc_1C88
.text$mn:00001C42 ; ---------------------------------------------------------------------------
.text$mn:00001C42
.text$mn:00001C42 loc_1C42:                               ; CODE XREF: CWinMgr::PositionRects(WINRECT *,tagRECT const &,int)+70j
.text$mn:00001C42                 mov     ecx, [ebp+var_4]
.text$mn:00001C45                 push    ecx             ; struct tagRECT *
.text$mn:00001C46                 call    ?RectWidth@@YAJABUtagRECT@@@Z ; RectWidth(tagRECT const &)
.text$mn:00001C4B                 add     esp, 4
.text$mn:00001C4E                 mov     [ebp+var_18], eax
.text$mn:00001C51                 mov     edx, [ebp+var_4]
.text$mn:00001C54                 mov     eax, [ebp+var_8]
.text$mn:00001C57                 mov     [edx], eax
.text$mn:00001C59                 mov     ecx, [ebp+var_4]
.text$mn:00001C5C                 mov     edx, [ecx]
.text$mn:00001C5E                 add     edx, [ebp+var_18]
.text$mn:00001C61                 mov     eax, [ebp+var_4]
.text$mn:00001C64                 mov     [eax+8], edx
.text$mn:00001C67                 mov     ecx, [ebp+var_4]
.text$mn:00001C6A                 mov     edx, [ebp+arg_4]
.text$mn:00001C6D                 mov     eax, [edx+4]
.text$mn:00001C70                 mov     [ecx+4], eax
.text$mn:00001C73                 mov     ecx, [ebp+var_4]
.text$mn:00001C76                 mov     edx, [ebp+arg_4]
.text$mn:00001C79                 mov     eax, [edx+0Ch]
.text$mn:00001C7C                 mov     [ecx+0Ch], eax
.text$mn:00001C7F                 mov     ecx, [ebp+var_8]
.text$mn:00001C82                 add     ecx, [ebp+var_18]
.text$mn:00001C85                 mov     [ebp+var_8], ecx
.text$mn:00001C88
.text$mn:00001C88 loc_1C88:                               ; CODE XREF: CWinMgr::PositionRects(WINRECT *,tagRECT const &,int)+B8j
.text$mn:00001C88                 jmp     loc_1BC6
.text$mn:00001C8D ; ---------------------------------------------------------------------------
.text$mn:00001C8D
.text$mn:00001C8D loc_1C8D:                               ; CODE XREF: CWinMgr::PositionRects(WINRECT *,tagRECT const &,int)+50j
.text$mn:00001C8D                 mov     esp, ebp
.text$mn:00001C8F                 pop     ebp
.text$mn:00001C90                 retn    0Ch
.text$mn:00001C90 ?PositionRects@CWinMgr@@MAEXPAVWINRECT@@ABUtagRECT@@H@Z endp
.text$mn:00001C90
.text$mn:00001C90 ; ---------------------------------------------------------------------------
.text$mn:00001C93                 align 8
.text$mn:00001C98
.text$mn:00001C98 ; =============== S U B R O U T I N E =======================================
.text$mn:00001C98
.text$mn:00001C98 ; Attributes: bp-based frame
.text$mn:00001C98
.text$mn:00001C98 ; int __cdecl GetStyle(HWND hWnd)
.text$mn:00001C98 ?GetStyle@@YAKPAUHWND__@@@Z proc near   ; CODE XREF: CWinMgr::GetMinMaxInfo(HWND__ *,SIZEINFO &)+34p
.text$mn:00001C98
.text$mn:00001C98 hWnd            = dword ptr  8
.text$mn:00001C98
.text$mn:00001C98                 push    ebp
.text$mn:00001C99                 mov     ebp, esp
.text$mn:00001C9B                 push    0FFFFFFF0h      ; nIndex
.text$mn:00001C9D                 mov     eax, [ebp+hWnd]
.text$mn:00001CA0                 push    eax             ; hWnd
.text$mn:00001CA1                 call    dword ptr ds:__imp__GetWindowLongW@8 ; GetWindowLongW(x,x)
.text$mn:00001CA7                 pop     ebp
.text$mn:00001CA8                 retn
.text$mn:00001CA8 ?GetStyle@@YAKPAUHWND__@@@Z endp
.text$mn:00001CA8
.text$mn:00001CA8 ; ---------------------------------------------------------------------------
.text$mn:00001CA9                 db 0Fh dup(0CCh)
.text$mn:00001CB8
.text$mn:00001CB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00001CB8
.text$mn:00001CB8 ; Attributes: bp-based frame
.text$mn:00001CB8
.text$mn:00001CB8 ; int __cdecl GetExStyle(HWND hWnd)
.text$mn:00001CB8 ?GetExStyle@@YAKPAUHWND__@@@Z proc near ; CODE XREF: CWinMgr::GetMinMaxInfo(HWND__ *,SIZEINFO &)+43p
.text$mn:00001CB8
.text$mn:00001CB8 hWnd            = dword ptr  8
.text$mn:00001CB8
.text$mn:00001CB8                 push    ebp
.text$mn:00001CB9                 mov     ebp, esp
.text$mn:00001CBB                 push    0FFFFFFECh      ; nIndex
.text$mn:00001CBD                 mov     eax, [ebp+hWnd]
.text$mn:00001CC0                 push    eax             ; hWnd
.text$mn:00001CC1                 call    dword ptr ds:__imp__GetWindowLongW@8 ; GetWindowLongW(x,x)
.text$mn:00001CC7                 pop     ebp
.text$mn:00001CC8                 retn
.text$mn:00001CC8 ?GetExStyle@@YAKPAUHWND__@@@Z endp
.text$mn:00001CC8
.text$mn:00001CC8 ; ---------------------------------------------------------------------------
.text$mn:00001CC9                 align 4
.text$mn:00001CC9 _text$mn        ends
.text$mn:00001CC9
.text$mn:00001CCC ; ===========================================================================
.text$mn:00001CCC
.text$mn:00001CCC ; Segment type: Pure code
.text$mn:00001CCC ; Segment permissions: Read/Execute
.text$mn:00001CCC _text$mn        segment para public 'CODE' use32
.text$mn:00001CCC                 assume cs:_text$mn
.text$mn:00001CCC                 ;org 1CCCh
.text$mn:00001CCC ; COMDAT (pick any)
.text$mn:00001CCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001CCC
.text$mn:00001CCC ; =============== S U B R O U T I N E =======================================
.text$mn:00001CCC
.text$mn:00001CCC ; Attributes: bp-based frame
.text$mn:00001CCC
.text$mn:00001CCC ; _DWORD __thiscall CWinGroupIterator::CWinGroupIterator(CWinGroupIterator *__hidden this)
.text$mn:00001CCC                 public ??0CWinGroupIterator@@QAE@XZ
.text$mn:00001CCC ??0CWinGroupIterator@@QAE@XZ proc near  ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+A8p
.text$mn:00001CCC                                         ; CWinMgr::CalcGroup(WINRECT *,HWND__ *)+17Dp ...
.text$mn:00001CCC
.text$mn:00001CCC var_4           = dword ptr -4
.text$mn:00001CCC
.text$mn:00001CCC                 push    ebp
.text$mn:00001CCD                 mov     ebp, esp
.text$mn:00001CCF                 push    ecx
.text$mn:00001CD0                 mov     [ebp+var_4], ecx
.text$mn:00001CD3                 mov     eax, [ebp+var_4]
.text$mn:00001CD6                 mov     dword ptr [eax], 0
.text$mn:00001CDC                 mov     eax, [ebp+var_4]
.text$mn:00001CDF                 mov     esp, ebp
.text$mn:00001CE1                 pop     ebp
.text$mn:00001CE2                 retn
.text$mn:00001CE2 ??0CWinGroupIterator@@QAE@XZ endp
.text$mn:00001CE2
.text$mn:00001CE2 ; ---------------------------------------------------------------------------
.text$mn:00001CE3                 align 4
.text$mn:00001CE3 _text$mn        ends
.text$mn:00001CE3
.text$mn:00001CE4 ; ===========================================================================
.text$mn:00001CE4
.text$mn:00001CE4 ; Segment type: Pure code
.text$mn:00001CE4 ; Segment permissions: Read/Execute
.text$mn:00001CE4 _text$mn        segment para public 'CODE' use32
.text$mn:00001CE4                 assume cs:_text$mn
.text$mn:00001CE4                 ;org 1CE4h
.text$mn:00001CE4 ; COMDAT (pick any)
.text$mn:00001CE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001CE4
.text$mn:00001CE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00001CE4
.text$mn:00001CE4 ; Attributes: bp-based frame
.text$mn:00001CE4
.text$mn:00001CE4 ; _DWORD __thiscall NMWINMGR::NMWINMGR(NMWINMGR *__hidden this)
.text$mn:00001CE4                 public ??0NMWINMGR@@QAE@XZ
.text$mn:00001CE4 ??0NMWINMGR@@QAE@XZ proc near           ; CODE XREF: CWinMgr::SendGetSizeInfo(SIZEINFO &,HWND__ *,uint)+Ep
.text$mn:00001CE4
.text$mn:00001CE4 Dst             = dword ptr -4
.text$mn:00001CE4
.text$mn:00001CE4                 push    ebp
.text$mn:00001CE5                 mov     ebp, esp
.text$mn:00001CE7                 push    ecx
.text$mn:00001CE8                 mov     [ebp+Dst], ecx
.text$mn:00001CEB                 push    30h ; '0'       ; Size
.text$mn:00001CED                 push    0               ; Val
.text$mn:00001CEF                 mov     eax, [ebp+Dst]
.text$mn:00001CF2                 push    eax             ; Dst
.text$mn:00001CF3                 call    _memset
.text$mn:00001CF8                 add     esp, 0Ch
.text$mn:00001CFB                 mov     eax, [ebp+Dst]
.text$mn:00001CFE                 mov     esp, ebp
.text$mn:00001D00                 pop     ebp
.text$mn:00001D01                 retn
.text$mn:00001D01 ??0NMWINMGR@@QAE@XZ endp
.text$mn:00001D01
.text$mn:00001D01 ; ---------------------------------------------------------------------------
.text$mn:00001D02                 align 4
.text$mn:00001D02 _text$mn        ends
.text$mn:00001D02
.text$mn:00001D04 ; ===========================================================================
.text$mn:00001D04
.text$mn:00001D04 ; Segment type: Pure code
.text$mn:00001D04 ; Segment permissions: Read/Execute
.text$mn:00001D04 _text$mn        segment para public 'CODE' use32
.text$mn:00001D04                 assume cs:_text$mn
.text$mn:00001D04                 ;org 1D04h
.text$mn:00001D04 ; COMDAT (pick any)
.text$mn:00001D04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001D04
.text$mn:00001D04 ; =============== S U B R O U T I N E =======================================
.text$mn:00001D04
.text$mn:00001D04 ; Attributes: bp-based frame
.text$mn:00001D04
.text$mn:00001D04 ; int __stdcall CWinGroupIterator::operator=(WINRECT *)
.text$mn:00001D04                 public ??4CWinGroupIterator@@QAEAAV0@PAVWINRECT@@@Z
.text$mn:00001D04 ??4CWinGroupIterator@@QAEAAV0@PAVWINRECT@@@Z proc near
.text$mn:00001D04                                         ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+B4p
.text$mn:00001D04                                         ; CWinMgr::CalcGroup(WINRECT *,HWND__ *)+189p ...
.text$mn:00001D04
.text$mn:00001D04 var_4           = dword ptr -4
.text$mn:00001D04 arg_0           = dword ptr  8
.text$mn:00001D04
.text$mn:00001D04                 push    ebp
.text$mn:00001D05                 mov     ebp, esp
.text$mn:00001D07                 push    ecx
.text$mn:00001D08                 mov     [ebp+var_4], ecx
.text$mn:00001D0B                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00001D0E                 call    ?IsGroup@WINRECT@@QBEHXZ ; WINRECT::IsGroup(void)
.text$mn:00001D13                 test    eax, eax
.text$mn:00001D15                 jnz     short loc_1D2E
.text$mn:00001D17                 push    0BEh ; '+'      ; Line
.text$mn:00001D1C                 push    offset ??_C@_1KO@LJAFCIDL@?$AAc?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?2?$AAn?$AAo?$AAt?$AAe?$AAp?$AAa?$AAd?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AA6@ ; "c:\\workspace\\notepad-plus-plus-6.7.9."...
.text$mn:00001D21                 push    offset ??_C@_1BM@GEOBLKFJ@?$AAp?$AAg?$AA?9?$AA?$DO?$AAI?$AAs?$AAG?$AAr?$AAo?$AAu?$AAp?$AA?$CI?$AA?$CJ?$AA?$AA@ ; "pg->IsGroup()"
.text$mn:00001D26                 call    __wassert
.text$mn:00001D2B ; ---------------------------------------------------------------------------
.text$mn:00001D2B                 add     esp, 0Ch
.text$mn:00001D2E
.text$mn:00001D2E loc_1D2E:                               ; CODE XREF: CWinGroupIterator::operator=(WINRECT *)+11j
.text$mn:00001D2E                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00001D31                 call    ?Children@WINRECT@@QAEPAV1@XZ ; WINRECT::Children(void)
.text$mn:00001D36                 mov     ecx, [ebp+var_4]
.text$mn:00001D39                 mov     [ecx], eax
.text$mn:00001D3B                 mov     eax, [ebp+var_4]
.text$mn:00001D3E                 mov     esp, ebp
.text$mn:00001D40                 pop     ebp
.text$mn:00001D41                 retn    4
.text$mn:00001D41 ??4CWinGroupIterator@@QAEAAV0@PAVWINRECT@@@Z endp
.text$mn:00001D41
.text$mn:00001D41 _text$mn        ends
.text$mn:00001D41
.text$mn:00001D44 ; ===========================================================================
.text$mn:00001D44
.text$mn:00001D44 ; Segment type: Pure code
.text$mn:00001D44 ; Segment permissions: Read/Execute
.text$mn:00001D44 _text$mn        segment para public 'CODE' use32
.text$mn:00001D44                 assume cs:_text$mn
.text$mn:00001D44                 ;org 1D44h
.text$mn:00001D44 ; COMDAT (pick any)
.text$mn:00001D44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001D44
.text$mn:00001D44 ; =============== S U B R O U T I N E =======================================
.text$mn:00001D44
.text$mn:00001D44 ; Attributes: bp-based frame
.text$mn:00001D44
.text$mn:00001D44 ; public: __thiscall CWinGroupIterator::operator class WINRECT *(void)
.text$mn:00001D44                 public ??BCWinGroupIterator@@QAEPAVWINRECT@@XZ
.text$mn:00001D44 ??BCWinGroupIterator@@QAEPAVWINRECT@@XZ proc near
.text$mn:00001D44                                         ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+C6p
.text$mn:00001D44                                         ; CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+D6p ...
.text$mn:00001D44
.text$mn:00001D44 var_4           = dword ptr -4
.text$mn:00001D44
.text$mn:00001D44                 push    ebp
.text$mn:00001D45                 mov     ebp, esp
.text$mn:00001D47                 push    ecx
.text$mn:00001D48                 mov     [ebp+var_4], ecx
.text$mn:00001D4B                 mov     eax, [ebp+var_4]
.text$mn:00001D4E                 mov     eax, [eax]
.text$mn:00001D50                 mov     esp, ebp
.text$mn:00001D52                 pop     ebp
.text$mn:00001D53                 retn
.text$mn:00001D53 ??BCWinGroupIterator@@QAEPAVWINRECT@@XZ endp
.text$mn:00001D53
.text$mn:00001D53 _text$mn        ends
.text$mn:00001D53
.text$mn:00001D54 ; ===========================================================================
.text$mn:00001D54
.text$mn:00001D54 ; Segment type: Pure code
.text$mn:00001D54 ; Segment permissions: Read/Execute
.text$mn:00001D54 _text$mn        segment para public 'CODE' use32
.text$mn:00001D54                 assume cs:_text$mn
.text$mn:00001D54                 ;org 1D54h
.text$mn:00001D54 ; COMDAT (pick any)
.text$mn:00001D54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001D54
.text$mn:00001D54 ; =============== S U B R O U T I N E =======================================
.text$mn:00001D54
.text$mn:00001D54 ; Attributes: bp-based frame
.text$mn:00001D54
.text$mn:00001D54 ; public: virtual void * __thiscall CWinMgr::`scalar deleting destructor'(unsigned int)
.text$mn:00001D54                 public ??_GCWinMgr@@UAEPAXI@Z
.text$mn:00001D54 ??_GCWinMgr@@UAEPAXI@Z proc near
.text$mn:00001D54
.text$mn:00001D54 var_4           = dword ptr -4
.text$mn:00001D54 arg_0           = dword ptr  8
.text$mn:00001D54
.text$mn:00001D54                 push    ebp
.text$mn:00001D55                 mov     ebp, esp
.text$mn:00001D57                 push    ecx
.text$mn:00001D58                 mov     [ebp+var_4], ecx
.text$mn:00001D5B                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001D5E                 call    ??1CWinMgr@@UAE@XZ ; CWinMgr::~CWinMgr(void)
.text$mn:00001D63                 mov     eax, [ebp+arg_0]
.text$mn:00001D66                 and     eax, 1
.text$mn:00001D69                 jz      short loc_1D77
.text$mn:00001D6B                 mov     ecx, [ebp+var_4]
.text$mn:00001D6E                 push    ecx             ; void *
.text$mn:00001D6F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00001D74                 add     esp, 4
.text$mn:00001D77
.text$mn:00001D77 loc_1D77:                               ; CODE XREF: CWinMgr::`scalar deleting destructor'(uint)+15j
.text$mn:00001D77                 mov     eax, [ebp+var_4]
.text$mn:00001D7A                 mov     esp, ebp
.text$mn:00001D7C                 pop     ebp
.text$mn:00001D7D                 retn    4
.text$mn:00001D7D ??_GCWinMgr@@UAEPAXI@Z endp
.text$mn:00001D7D
.text$mn:00001D7D _text$mn        ends
.text$mn:00001D7D
.text$di:00001D80 ; ===========================================================================
.text$di:00001D80
.text$di:00001D80 ; Segment type: Pure code
.text$di:00001D80 ; Segment permissions: Read/Execute
.text$di:00001D80 _text$di        segment para public 'CODE' use32
.text$di:00001D80                 assume cs:_text$di
.text$di:00001D80                 ;org 1D80h
.text$di:00001D80 ; COMDAT (pick any)
.text$di:00001D80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00001D80
.text$di:00001D80 ; =============== S U B R O U T I N E =======================================
.text$di:00001D80
.text$di:00001D80 ; Attributes: bp-based frame
.text$di:00001D80
.text$di:00001D80 ; void __cdecl `dynamic initializer for 'WM_WINMGR''(void)
.text$di:00001D80 ??__EWM_WINMGR@@YAXXZ proc near         ; DATA XREF: .CRT$XCU:_WM_WINMGR$initializer$o
.text$di:00001D80                 push    ebp
.text$di:00001D81                 mov     ebp, esp
.text$di:00001D83                 push    offset $SG63879 ; "WM_WINMGR"
.text$di:00001D88                 call    dword ptr ds:__imp__RegisterWindowMessageW@4 ; RegisterWindowMessageW(x)
.text$di:00001D8E                 mov     ds:?WM_WINMGR@@3IB, eax ; uint const WM_WINMGR
.text$di:00001D93                 pop     ebp
.text$di:00001D94                 retn
.text$di:00001D94 ??__EWM_WINMGR@@YAXXZ endp
.text$di:00001D94
.text$di:00001D94 ; ---------------------------------------------------------------------------
.text$di:00001D95                 align 4
.text$di:00001D95 _text$di        ends
.text$di:00001D95
.text$mn:00001D98 ; ===========================================================================
.text$mn:00001D98
.text$mn:00001D98 ; Segment type: Pure code
.text$mn:00001D98 ; Segment permissions: Read/Execute
.text$mn:00001D98 _text$mn        segment para public 'CODE' use32
.text$mn:00001D98                 assume cs:_text$mn
.text$mn:00001D98                 ;org 1D98h
.text$mn:00001D98 ; COMDAT (pick any)
.text$mn:00001D98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001D98
.text$mn:00001D98 ; =============== S U B R O U T I N E =======================================
.text$mn:00001D98
.text$mn:00001D98 ; Attributes: bp-based frame
.text$mn:00001D98
.text$mn:00001D98 ; struct WINRECT *__thiscall WINRECT::Children(WINRECT *__hidden this)
.text$mn:00001D98                 public ?Children@WINRECT@@QAEPAV1@XZ
.text$mn:00001D98 ?Children@WINRECT@@QAEPAV1@XZ proc near ; CODE XREF: CWinGroupIterator::operator=(WINRECT *)+2Dp
.text$mn:00001D98
.text$mn:00001D98 var_8           = dword ptr -8
.text$mn:00001D98 var_4           = dword ptr -4
.text$mn:00001D98
.text$mn:00001D98                 push    ebp
.text$mn:00001D99                 mov     ebp, esp
.text$mn:00001D9B                 sub     esp, 8
.text$mn:00001D9E                 mov     [ebp+var_4], ecx
.text$mn:00001DA1                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001DA4                 call    ?IsGroup@WINRECT@@QBEHXZ ; WINRECT::IsGroup(void)
.text$mn:00001DA9                 test    eax, eax
.text$mn:00001DAB                 jz      short loc_1DB8
.text$mn:00001DAD                 mov     eax, [ebp+var_4]
.text$mn:00001DB0                 add     eax, 24h ; '$'
.text$mn:00001DB3                 mov     [ebp+var_8], eax
.text$mn:00001DB6                 jmp     short loc_1DBF
.text$mn:00001DB8 ; ---------------------------------------------------------------------------
.text$mn:00001DB8
.text$mn:00001DB8 loc_1DB8:                               ; CODE XREF: WINRECT::Children(void)+13j
.text$mn:00001DB8                 mov     [ebp+var_8], 0
.text$mn:00001DBF
.text$mn:00001DBF loc_1DBF:                               ; CODE XREF: WINRECT::Children(void)+1Ej
.text$mn:00001DBF                 mov     eax, [ebp+var_8]
.text$mn:00001DC2                 mov     esp, ebp
.text$mn:00001DC4                 pop     ebp
.text$mn:00001DC5                 retn
.text$mn:00001DC5 ?Children@WINRECT@@QAEPAV1@XZ endp
.text$mn:00001DC5
.text$mn:00001DC5 ; ---------------------------------------------------------------------------
.text$mn:00001DC6                 align 4
.text$mn:00001DC6 _text$mn        ends
.text$mn:00001DC6
.text$mn:00001DC8 ; ===========================================================================
.text$mn:00001DC8
.text$mn:00001DC8 ; Segment type: Pure code
.text$mn:00001DC8 ; Segment permissions: Read/Execute
.text$mn:00001DC8 _text$mn        segment para public 'CODE' use32
.text$mn:00001DC8                 assume cs:_text$mn
.text$mn:00001DC8                 ;org 1DC8h
.text$mn:00001DC8 ; COMDAT (pick any)
.text$mn:00001DC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001DC8
.text$mn:00001DC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00001DC8
.text$mn:00001DC8 ; Attributes: bp-based frame
.text$mn:00001DC8
.text$mn:00001DC8 ; __int32 __thiscall WINRECT::GetHeightOrWidth(WINRECT *this, int)
.text$mn:00001DC8                 public ?GetHeightOrWidth@WINRECT@@QBEJH@Z
.text$mn:00001DC8 ?GetHeightOrWidth@WINRECT@@QBEJH@Z proc near
.text$mn:00001DC8                                         ; CODE XREF: CWinMgr::AdjustSize(WINRECT *,int,int &,HWND__ *)+99p
.text$mn:00001DC8
.text$mn:00001DC8 var_8           = dword ptr -8
.text$mn:00001DC8 var_4           = dword ptr -4
.text$mn:00001DC8 arg_0           = dword ptr  8
.text$mn:00001DC8
.text$mn:00001DC8                 push    ebp
.text$mn:00001DC9                 mov     ebp, esp
.text$mn:00001DCB                 sub     esp, 8
.text$mn:00001DCE                 mov     [ebp+var_4], ecx
.text$mn:00001DD1                 cmp     [ebp+arg_0], 0
.text$mn:00001DD5                 jz      short loc_1DEB
.text$mn:00001DD7                 mov     eax, [ebp+var_4]
.text$mn:00001DDA                 add     eax, 8
.text$mn:00001DDD                 push    eax             ; struct tagRECT *
.text$mn:00001DDE                 call    ?RectHeight@@YAJABUtagRECT@@@Z ; RectHeight(tagRECT const &)
.text$mn:00001DE3                 add     esp, 4
.text$mn:00001DE6                 mov     [ebp+var_8], eax
.text$mn:00001DE9                 jmp     short loc_1DFD
.text$mn:00001DEB ; ---------------------------------------------------------------------------
.text$mn:00001DEB
.text$mn:00001DEB loc_1DEB:                               ; CODE XREF: WINRECT::GetHeightOrWidth(int)+Dj
.text$mn:00001DEB                 mov     ecx, [ebp+var_4]
.text$mn:00001DEE                 add     ecx, 8
.text$mn:00001DF1                 push    ecx             ; struct tagRECT *
.text$mn:00001DF2                 call    ?RectWidth@@YAJABUtagRECT@@@Z ; RectWidth(tagRECT const &)
.text$mn:00001DF7                 add     esp, 4
.text$mn:00001DFA                 mov     [ebp+var_8], eax
.text$mn:00001DFD
.text$mn:00001DFD loc_1DFD:                               ; CODE XREF: WINRECT::GetHeightOrWidth(int)+21j
.text$mn:00001DFD                 mov     eax, [ebp+var_8]
.text$mn:00001E00                 mov     esp, ebp
.text$mn:00001E02                 pop     ebp
.text$mn:00001E03                 retn    4
.text$mn:00001E03 ?GetHeightOrWidth@WINRECT@@QBEJH@Z endp
.text$mn:00001E03
.text$mn:00001E03 ; ---------------------------------------------------------------------------
.text$mn:00001E06                 align 4
.text$mn:00001E06 _text$mn        ends
.text$mn:00001E06
.text$mn:00001E08 ; ===========================================================================
.text$mn:00001E08
.text$mn:00001E08 ; Segment type: Pure code
.text$mn:00001E08 ; Segment permissions: Read/Execute
.text$mn:00001E08 _text$mn        segment para public 'CODE' use32
.text$mn:00001E08                 assume cs:_text$mn
.text$mn:00001E08                 ;org 1E08h
.text$mn:00001E08 ; COMDAT (pick any)
.text$mn:00001E08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001E08
.text$mn:00001E08 ; =============== S U B R O U T I N E =======================================
.text$mn:00001E08
.text$mn:00001E08 ; Attributes: bp-based frame
.text$mn:00001E08
.text$mn:00001E08 ; unsigned int __thiscall WINRECT::GetID(WINRECT *__hidden this)
.text$mn:00001E08                 public ?GetID@WINRECT@@QAEIXZ
.text$mn:00001E08 ?GetID@WINRECT@@QAEIXZ proc near        ; CODE XREF: CWinMgr::GetWindowPositions(HWND__ *)+6Fp
.text$mn:00001E08                                         ; CWinMgr::SetWindowPositions(HWND__ *)+9Cp ...
.text$mn:00001E08
.text$mn:00001E08 var_4           = dword ptr -4
.text$mn:00001E08
.text$mn:00001E08                 push    ebp
.text$mn:00001E09                 mov     ebp, esp
.text$mn:00001E0B                 push    ecx
.text$mn:00001E0C                 mov     [ebp+var_4], ecx
.text$mn:00001E0F                 mov     eax, [ebp+var_4]
.text$mn:00001E12                 mov     eax, [eax+1Ch]
.text$mn:00001E15                 mov     esp, ebp
.text$mn:00001E17                 pop     ebp
.text$mn:00001E18                 retn
.text$mn:00001E18 ?GetID@WINRECT@@QAEIXZ endp
.text$mn:00001E18
.text$mn:00001E18 ; ---------------------------------------------------------------------------
.text$mn:00001E19                 align 4
.text$mn:00001E19 _text$mn        ends
.text$mn:00001E19
.text$mn:00001E1C ; ===========================================================================
.text$mn:00001E1C
.text$mn:00001E1C ; Segment type: Pure code
.text$mn:00001E1C ; Segment permissions: Read/Execute
.text$mn:00001E1C _text$mn        segment para public 'CODE' use32
.text$mn:00001E1C                 assume cs:_text$mn
.text$mn:00001E1C                 ;org 1E1Ch
.text$mn:00001E1C ; COMDAT (pick any)
.text$mn:00001E1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001E1C
.text$mn:00001E1C ; =============== S U B R O U T I N E =======================================
.text$mn:00001E1C
.text$mn:00001E1C ; Attributes: bp-based frame
.text$mn:00001E1C
.text$mn:00001E1C ; __int32 __thiscall WINRECT::GetParam(WINRECT *__hidden this)
.text$mn:00001E1C                 public ?GetParam@WINRECT@@QAEJXZ
.text$mn:00001E1C ?GetParam@WINRECT@@QAEJXZ proc near     ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+39Dp
.text$mn:00001E1C                                         ; CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+406p
.text$mn:00001E1C
.text$mn:00001E1C var_4           = dword ptr -4
.text$mn:00001E1C
.text$mn:00001E1C                 push    ebp
.text$mn:00001E1D                 mov     ebp, esp
.text$mn:00001E1F                 push    ecx
.text$mn:00001E20                 mov     [ebp+var_4], ecx
.text$mn:00001E23                 mov     eax, [ebp+var_4]
.text$mn:00001E26                 mov     eax, [eax+20h]
.text$mn:00001E29                 mov     esp, ebp
.text$mn:00001E2B                 pop     ebp
.text$mn:00001E2C                 retn
.text$mn:00001E2C ?GetParam@WINRECT@@QAEJXZ endp
.text$mn:00001E2C
.text$mn:00001E2C ; ---------------------------------------------------------------------------
.text$mn:00001E2D                 align 10h
.text$mn:00001E2D _text$mn        ends
.text$mn:00001E2D
.text$mn:00001E30 ; ===========================================================================
.text$mn:00001E30
.text$mn:00001E30 ; Segment type: Pure code
.text$mn:00001E30 ; Segment permissions: Read/Execute
.text$mn:00001E30 _text$mn        segment para public 'CODE' use32
.text$mn:00001E30                 assume cs:_text$mn
.text$mn:00001E30                 ;org 1E30h
.text$mn:00001E30 ; COMDAT (pick any)
.text$mn:00001E30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001E30
.text$mn:00001E30 ; =============== S U B R O U T I N E =======================================
.text$mn:00001E30
.text$mn:00001E30 ; Attributes: bp-based frame
.text$mn:00001E30
.text$mn:00001E30 ; struct tagPOINT __cdecl GetPoint(__int32, __int32)
.text$mn:00001E30                 public ?GetPoint@@YA?AUtagPOINT@@JJ@Z
.text$mn:00001E30 ?GetPoint@@YA?AUtagPOINT@@JJ@Z proc near
.text$mn:00001E30                                         ; CODE XREF: SizeToPoint(tagSIZE)+Ep
.text$mn:00001E30
.text$mn:00001E30 var_8           = dword ptr -8
.text$mn:00001E30 var_4           = dword ptr -4
.text$mn:00001E30 arg_0           = dword ptr  8
.text$mn:00001E30 arg_4           = dword ptr  0Ch
.text$mn:00001E30
.text$mn:00001E30                 push    ebp
.text$mn:00001E31                 mov     ebp, esp
.text$mn:00001E33                 sub     esp, 8
.text$mn:00001E36                 mov     eax, [ebp+arg_0]
.text$mn:00001E39                 mov     [ebp+var_8], eax
.text$mn:00001E3C                 mov     ecx, [ebp+arg_4]
.text$mn:00001E3F                 mov     [ebp+var_4], ecx
.text$mn:00001E42                 mov     eax, [ebp+var_8]
.text$mn:00001E45                 mov     edx, [ebp+var_4]
.text$mn:00001E48                 mov     esp, ebp
.text$mn:00001E4A                 pop     ebp
.text$mn:00001E4B                 retn
.text$mn:00001E4B ?GetPoint@@YA?AUtagPOINT@@JJ@Z endp
.text$mn:00001E4B
.text$mn:00001E4B _text$mn        ends
.text$mn:00001E4B
.text$mn:00001E4C ; ===========================================================================
.text$mn:00001E4C
.text$mn:00001E4C ; Segment type: Pure code
.text$mn:00001E4C ; Segment permissions: Read/Execute
.text$mn:00001E4C _text$mn        segment para public 'CODE' use32
.text$mn:00001E4C                 assume cs:_text$mn
.text$mn:00001E4C                 ;org 1E4Ch
.text$mn:00001E4C ; COMDAT (pick any)
.text$mn:00001E4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001E4C
.text$mn:00001E4C ; =============== S U B R O U T I N E =======================================
.text$mn:00001E4C
.text$mn:00001E4C ; Attributes: bp-based frame
.text$mn:00001E4C
.text$mn:00001E4C ; struct tagRECT *__thiscall WINRECT::GetRect(WINRECT *__hidden this)
.text$mn:00001E4C                 public ?GetRect@WINRECT@@QAEAAUtagRECT@@XZ
.text$mn:00001E4C ?GetRect@WINRECT@@QAEAAUtagRECT@@XZ proc near
.text$mn:00001E4C                                         ; CODE XREF: CWinMgr::GetWindowPositions(HWND__ *)+8Bp
.text$mn:00001E4C                                         ; CWinMgr::GetWindowPositions(HWND__ *)+9Ep ...
.text$mn:00001E4C
.text$mn:00001E4C var_4           = dword ptr -4
.text$mn:00001E4C
.text$mn:00001E4C                 push    ebp
.text$mn:00001E4D                 mov     ebp, esp
.text$mn:00001E4F                 push    ecx
.text$mn:00001E50                 mov     [ebp+var_4], ecx
.text$mn:00001E53                 mov     eax, [ebp+var_4]
.text$mn:00001E56                 add     eax, 8
.text$mn:00001E59                 mov     esp, ebp
.text$mn:00001E5B                 pop     ebp
.text$mn:00001E5C                 retn
.text$mn:00001E5C ?GetRect@WINRECT@@QAEAAUtagRECT@@XZ endp
.text$mn:00001E5C
.text$mn:00001E5C ; ---------------------------------------------------------------------------
.text$mn:00001E5D                 align 10h
.text$mn:00001E5D _text$mn        ends
.text$mn:00001E5D
.text$mn:00001E60 ; ===========================================================================
.text$mn:00001E60
.text$mn:00001E60 ; Segment type: Pure code
.text$mn:00001E60 ; Segment permissions: Read/Execute
.text$mn:00001E60 _text$mn        segment para public 'CODE' use32
.text$mn:00001E60                 assume cs:_text$mn
.text$mn:00001E60                 ;org 1E60h
.text$mn:00001E60 ; COMDAT (pick any)
.text$mn:00001E60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001E60
.text$mn:00001E60 ; =============== S U B R O U T I N E =======================================
.text$mn:00001E60
.text$mn:00001E60 ; Attributes: bp-based frame
.text$mn:00001E60
.text$mn:00001E60 ; struct tagSIZE __cdecl GetSize(__int32, __int32)
.text$mn:00001E60                 public ?GetSize@@YA?AUtagSIZE@@JJ@Z
.text$mn:00001E60 ?GetSize@@YA?AUtagSIZE@@JJ@Z proc near  ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+48Cp
.text$mn:00001E60                                         ; CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+4D4p ...
.text$mn:00001E60
.text$mn:00001E60 var_8           = dword ptr -8
.text$mn:00001E60 var_4           = dword ptr -4
.text$mn:00001E60 arg_0           = dword ptr  8
.text$mn:00001E60 arg_4           = dword ptr  0Ch
.text$mn:00001E60
.text$mn:00001E60                 push    ebp
.text$mn:00001E61                 mov     ebp, esp
.text$mn:00001E63                 sub     esp, 8
.text$mn:00001E66                 mov     eax, [ebp+arg_0]
.text$mn:00001E69                 mov     [ebp+var_8], eax
.text$mn:00001E6C                 mov     ecx, [ebp+arg_4]
.text$mn:00001E6F                 mov     [ebp+var_4], ecx
.text$mn:00001E72                 mov     eax, [ebp+var_8]
.text$mn:00001E75                 mov     edx, [ebp+var_4]
.text$mn:00001E78                 mov     esp, ebp
.text$mn:00001E7A                 pop     ebp
.text$mn:00001E7B                 retn
.text$mn:00001E7B ?GetSize@@YA?AUtagSIZE@@JJ@Z endp
.text$mn:00001E7B
.text$mn:00001E7B _text$mn        ends
.text$mn:00001E7B
.text$mn:00001E7C ; ===========================================================================
.text$mn:00001E7C
.text$mn:00001E7C ; Segment type: Pure code
.text$mn:00001E7C ; Segment permissions: Read/Execute
.text$mn:00001E7C _text$mn        segment para public 'CODE' use32
.text$mn:00001E7C                 assume cs:_text$mn
.text$mn:00001E7C                 ;org 1E7Ch
.text$mn:00001E7C ; COMDAT (pick any)
.text$mn:00001E7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001E7C
.text$mn:00001E7C ; =============== S U B R O U T I N E =======================================
.text$mn:00001E7C
.text$mn:00001E7C ; Attributes: bp-based frame
.text$mn:00001E7C
.text$mn:00001E7C ; struct tagSIZE __thiscall WINRECT::GetToFitSize(WINRECT *this)
.text$mn:00001E7C                 public ?GetToFitSize@WINRECT@@QAE?AUtagSIZE@@XZ
.text$mn:00001E7C ?GetToFitSize@WINRECT@@QAE?AUtagSIZE@@XZ proc near
.text$mn:00001E7C                                         ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+53Ep
.text$mn:00001E7C
.text$mn:00001E7C var_C           = dword ptr -0Ch
.text$mn:00001E7C var_8           = dword ptr -8
.text$mn:00001E7C var_4           = dword ptr -4
.text$mn:00001E7C arg_0           = dword ptr  8
.text$mn:00001E7C
.text$mn:00001E7C                 push    ebp
.text$mn:00001E7D                 mov     ebp, esp
.text$mn:00001E7F                 sub     esp, 0Ch
.text$mn:00001E82                 mov     [ebp+var_4], ecx
.text$mn:00001E85                 mov     eax, [ebp+var_4]
.text$mn:00001E88                 mov     ecx, [eax+20h]
.text$mn:00001E8B                 and     ecx, 0FFFFh
.text$mn:00001E91                 movzx   edx, cx
.text$mn:00001E94                 mov     [ebp+var_C], edx
.text$mn:00001E97                 mov     eax, [ebp+var_4]
.text$mn:00001E9A                 mov     ecx, [eax+20h]
.text$mn:00001E9D                 shr     ecx, 10h
.text$mn:00001EA0                 and     ecx, 0FFFFh
.text$mn:00001EA6                 movzx   edx, cx
.text$mn:00001EA9                 mov     [ebp+var_8], edx
.text$mn:00001EAC                 mov     eax, [ebp+arg_0]
.text$mn:00001EAF                 mov     ecx, [ebp+var_C]
.text$mn:00001EB2                 mov     [eax], ecx
.text$mn:00001EB4                 mov     edx, [ebp+var_8]
.text$mn:00001EB7                 mov     [eax+4], edx
.text$mn:00001EBA                 mov     eax, [ebp+arg_0]
.text$mn:00001EBD                 mov     esp, ebp
.text$mn:00001EBF                 pop     ebp
.text$mn:00001EC0                 retn    4
.text$mn:00001EC0 ?GetToFitSize@WINRECT@@QAE?AUtagSIZE@@XZ endp
.text$mn:00001EC0
.text$mn:00001EC0 ; ---------------------------------------------------------------------------
.text$mn:00001EC3                 align 4
.text$mn:00001EC3 _text$mn        ends
.text$mn:00001EC3
.text$mn:00001EC4 ; ===========================================================================
.text$mn:00001EC4
.text$mn:00001EC4 ; Segment type: Pure code
.text$mn:00001EC4 ; Segment permissions: Read/Execute
.text$mn:00001EC4 _text$mn        segment para public 'CODE' use32
.text$mn:00001EC4                 assume cs:_text$mn
.text$mn:00001EC4                 ;org 1EC4h
.text$mn:00001EC4 ; COMDAT (pick any)
.text$mn:00001EC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001EC4
.text$mn:00001EC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00001EC4
.text$mn:00001EC4 ; Attributes: bp-based frame
.text$mn:00001EC4
.text$mn:00001EC4 ; unsigned __int16 __thiscall WINRECT::GroupType(WINRECT *__hidden this)
.text$mn:00001EC4                 public ?GroupType@WINRECT@@QBEGXZ
.text$mn:00001EC4 ?GroupType@WINRECT@@QBEGXZ proc near    ; CODE XREF: WINRECT::IsGroup(void)+Cp
.text$mn:00001EC4                                         ; WINRECT::IsGroup(void)+1Bp
.text$mn:00001EC4
.text$mn:00001EC4 var_4           = dword ptr -4
.text$mn:00001EC4
.text$mn:00001EC4                 push    ebp
.text$mn:00001EC5                 mov     ebp, esp
.text$mn:00001EC7                 push    ecx
.text$mn:00001EC8                 mov     [ebp+var_4], ecx
.text$mn:00001ECB                 mov     eax, [ebp+var_4]
.text$mn:00001ECE                 movzx   eax, word ptr [eax+18h]
.text$mn:00001ED2                 and     eax, 0F0h
.text$mn:00001ED7                 mov     esp, ebp
.text$mn:00001ED9                 pop     ebp
.text$mn:00001EDA                 retn
.text$mn:00001EDA ?GroupType@WINRECT@@QBEGXZ endp
.text$mn:00001EDA
.text$mn:00001EDA ; ---------------------------------------------------------------------------
.text$mn:00001EDB                 align 4
.text$mn:00001EDB _text$mn        ends
.text$mn:00001EDB
.text$mn:00001EDC ; ===========================================================================
.text$mn:00001EDC
.text$mn:00001EDC ; Segment type: Pure code
.text$mn:00001EDC ; Segment permissions: Read/Execute
.text$mn:00001EDC _text$mn        segment para public 'CODE' use32
.text$mn:00001EDC                 assume cs:_text$mn
.text$mn:00001EDC                 ;org 1EDCh
.text$mn:00001EDC ; COMDAT (pick any)
.text$mn:00001EDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001EDC
.text$mn:00001EDC ; =============== S U B R O U T I N E =======================================
.text$mn:00001EDC
.text$mn:00001EDC ; Attributes: bp-based frame
.text$mn:00001EDC
.text$mn:00001EDC ; int __thiscall WINRECT::HasToFitSize(WINRECT *__hidden this)
.text$mn:00001EDC                 public ?HasToFitSize@WINRECT@@QAEHXZ
.text$mn:00001EDC ?HasToFitSize@WINRECT@@QAEHXZ proc near ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+52Bp
.text$mn:00001EDC
.text$mn:00001EDC var_8           = dword ptr -8
.text$mn:00001EDC var_4           = dword ptr -4
.text$mn:00001EDC
.text$mn:00001EDC                 push    ebp
.text$mn:00001EDD                 mov     ebp, esp
.text$mn:00001EDF                 sub     esp, 8
.text$mn:00001EE2                 mov     [ebp+var_8], ecx
.text$mn:00001EE5                 mov     eax, [ebp+var_8]
.text$mn:00001EE8                 cmp     dword ptr [eax+20h], 0
.text$mn:00001EEC                 jz      short loc_1EF7
.text$mn:00001EEE                 mov     [ebp+var_4], 1
.text$mn:00001EF5                 jmp     short loc_1EFE
.text$mn:00001EF7 ; ---------------------------------------------------------------------------
.text$mn:00001EF7
.text$mn:00001EF7 loc_1EF7:                               ; CODE XREF: WINRECT::HasToFitSize(void)+10j
.text$mn:00001EF7                 mov     [ebp+var_4], 0
.text$mn:00001EFE
.text$mn:00001EFE loc_1EFE:                               ; CODE XREF: WINRECT::HasToFitSize(void)+19j
.text$mn:00001EFE                 mov     eax, [ebp+var_4]
.text$mn:00001F01                 mov     esp, ebp
.text$mn:00001F03                 pop     ebp
.text$mn:00001F04                 retn
.text$mn:00001F04 ?HasToFitSize@WINRECT@@QAEHXZ endp
.text$mn:00001F04
.text$mn:00001F04 ; ---------------------------------------------------------------------------
.text$mn:00001F05                 align 4
.text$mn:00001F05 _text$mn        ends
.text$mn:00001F05
.text$mn:00001F08 ; ===========================================================================
.text$mn:00001F08
.text$mn:00001F08 ; Segment type: Pure code
.text$mn:00001F08 ; Segment permissions: Read/Execute
.text$mn:00001F08 _text$mn        segment para public 'CODE' use32
.text$mn:00001F08                 assume cs:_text$mn
.text$mn:00001F08                 ;org 1F08h
.text$mn:00001F08 ; COMDAT (pick any)
.text$mn:00001F08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001F08
.text$mn:00001F08 ; =============== S U B R O U T I N E =======================================
.text$mn:00001F08
.text$mn:00001F08 ; Attributes: bp-based frame
.text$mn:00001F08
.text$mn:00001F08 ; int __thiscall WINRECT::IsEnd(WINRECT *__hidden this)
.text$mn:00001F08                 public ?IsEnd@WINRECT@@QBEHXZ
.text$mn:00001F08 ?IsEnd@WINRECT@@QBEHXZ proc near        ; CODE XREF: CWinMgr::GetWindowPositions(HWND__ *)+57p
.text$mn:00001F08                                         ; CWinMgr::SetWindowPositions(HWND__ *)+60p ...
.text$mn:00001F08
.text$mn:00001F08 var_8           = dword ptr -8
.text$mn:00001F08 var_4           = dword ptr -4
.text$mn:00001F08
.text$mn:00001F08                 push    ebp
.text$mn:00001F09                 mov     ebp, esp
.text$mn:00001F0B                 sub     esp, 8
.text$mn:00001F0E                 mov     [ebp+var_8], ecx
.text$mn:00001F11                 mov     eax, [ebp+var_8]
.text$mn:00001F14                 movzx   ecx, word ptr [eax+18h]
.text$mn:00001F18                 test    ecx, ecx
.text$mn:00001F1A                 jnz     short loc_1F25
.text$mn:00001F1C                 mov     [ebp+var_4], 1
.text$mn:00001F23                 jmp     short loc_1F2C
.text$mn:00001F25 ; ---------------------------------------------------------------------------
.text$mn:00001F25
.text$mn:00001F25 loc_1F25:                               ; CODE XREF: WINRECT::IsEnd(void)+12j
.text$mn:00001F25                 mov     [ebp+var_4], 0
.text$mn:00001F2C
.text$mn:00001F2C loc_1F2C:                               ; CODE XREF: WINRECT::IsEnd(void)+1Bj
.text$mn:00001F2C                 mov     eax, [ebp+var_4]
.text$mn:00001F2F                 mov     esp, ebp
.text$mn:00001F31                 pop     ebp
.text$mn:00001F32                 retn
.text$mn:00001F32 ?IsEnd@WINRECT@@QBEHXZ endp
.text$mn:00001F32
.text$mn:00001F32 ; ---------------------------------------------------------------------------
.text$mn:00001F33                 align 4
.text$mn:00001F33 _text$mn        ends
.text$mn:00001F33
.text$mn:00001F34 ; ===========================================================================
.text$mn:00001F34
.text$mn:00001F34 ; Segment type: Pure code
.text$mn:00001F34 ; Segment permissions: Read/Execute
.text$mn:00001F34 _text$mn        segment para public 'CODE' use32
.text$mn:00001F34                 assume cs:_text$mn
.text$mn:00001F34                 ;org 1F34h
.text$mn:00001F34 ; COMDAT (pick any)
.text$mn:00001F34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001F34
.text$mn:00001F34 ; =============== S U B R O U T I N E =======================================
.text$mn:00001F34
.text$mn:00001F34 ; Attributes: bp-based frame
.text$mn:00001F34
.text$mn:00001F34 ; int __thiscall WINRECT::IsGroup(WINRECT *__hidden this)
.text$mn:00001F34                 public ?IsGroup@WINRECT@@QBEHXZ
.text$mn:00001F34 ?IsGroup@WINRECT@@QBEHXZ proc near      ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+75p
.text$mn:00001F34                                         ; CWinMgr::MoveRect(WINRECT *,tagPOINT,HWND__ *)+10Ap ...
.text$mn:00001F34
.text$mn:00001F34 var_8           = dword ptr -8
.text$mn:00001F34 var_4           = dword ptr -4
.text$mn:00001F34
.text$mn:00001F34                 push    ebp
.text$mn:00001F35                 mov     ebp, esp
.text$mn:00001F37                 sub     esp, 8
.text$mn:00001F3A                 mov     [ebp+var_4], ecx
.text$mn:00001F3D                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001F40                 call    ?GroupType@WINRECT@@QBEGXZ ; WINRECT::GroupType(void)
.text$mn:00001F45                 movzx   eax, ax
.text$mn:00001F48                 test    eax, eax
.text$mn:00001F4A                 jz      short loc_1F68
.text$mn:00001F4C                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001F4F                 call    ?GroupType@WINRECT@@QBEGXZ ; WINRECT::GroupType(void)
.text$mn:00001F54                 movzx   ecx, ax
.text$mn:00001F57                 cmp     ecx, 0F0h ; '='
.text$mn:00001F5D                 jz      short loc_1F68
.text$mn:00001F5F                 mov     [ebp+var_8], 1
.text$mn:00001F66                 jmp     short loc_1F6F
.text$mn:00001F68 ; ---------------------------------------------------------------------------
.text$mn:00001F68
.text$mn:00001F68 loc_1F68:                               ; CODE XREF: WINRECT::IsGroup(void)+16j
.text$mn:00001F68                                         ; WINRECT::IsGroup(void)+29j
.text$mn:00001F68                 mov     [ebp+var_8], 0
.text$mn:00001F6F
.text$mn:00001F6F loc_1F6F:                               ; CODE XREF: WINRECT::IsGroup(void)+32j
.text$mn:00001F6F                 mov     eax, [ebp+var_8]
.text$mn:00001F72                 mov     esp, ebp
.text$mn:00001F74                 pop     ebp
.text$mn:00001F75                 retn
.text$mn:00001F75 ?IsGroup@WINRECT@@QBEHXZ endp
.text$mn:00001F75
.text$mn:00001F75 ; ---------------------------------------------------------------------------
.text$mn:00001F76                 align 4
.text$mn:00001F76 _text$mn        ends
.text$mn:00001F76
.text$mn:00001F78 ; ===========================================================================
.text$mn:00001F78
.text$mn:00001F78 ; Segment type: Pure code
.text$mn:00001F78 ; Segment permissions: Read/Execute
.text$mn:00001F78 _text$mn        segment para public 'CODE' use32
.text$mn:00001F78                 assume cs:_text$mn
.text$mn:00001F78                 ;org 1F78h
.text$mn:00001F78 ; COMDAT (pick any)
.text$mn:00001F78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001F78
.text$mn:00001F78 ; =============== S U B R O U T I N E =======================================
.text$mn:00001F78
.text$mn:00001F78 ; Attributes: bp-based frame
.text$mn:00001F78
.text$mn:00001F78 ; int __thiscall WINRECT::IsRowGroup(WINRECT *__hidden this)
.text$mn:00001F78                 public ?IsRowGroup@WINRECT@@QBEHXZ
.text$mn:00001F78 ?IsRowGroup@WINRECT@@QBEHXZ proc near   ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+9Ap
.text$mn:00001F78                                         ; CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+367p ...
.text$mn:00001F78
.text$mn:00001F78 var_8           = dword ptr -8
.text$mn:00001F78 var_4           = dword ptr -4
.text$mn:00001F78
.text$mn:00001F78                 push    ebp
.text$mn:00001F79                 mov     ebp, esp
.text$mn:00001F7B                 sub     esp, 8
.text$mn:00001F7E                 mov     [ebp+var_8], ecx
.text$mn:00001F81                 mov     eax, [ebp+var_8]
.text$mn:00001F84                 movzx   ecx, word ptr [eax+18h]
.text$mn:00001F88                 and     ecx, 0F0h
.text$mn:00001F8E                 cmp     ecx, 10h
.text$mn:00001F91                 jnz     short loc_1F9C
.text$mn:00001F93                 mov     [ebp+var_4], 1
.text$mn:00001F9A                 jmp     short loc_1FA3
.text$mn:00001F9C ; ---------------------------------------------------------------------------
.text$mn:00001F9C
.text$mn:00001F9C loc_1F9C:                               ; CODE XREF: WINRECT::IsRowGroup(void)+19j
.text$mn:00001F9C                 mov     [ebp+var_4], 0
.text$mn:00001FA3
.text$mn:00001FA3 loc_1FA3:                               ; CODE XREF: WINRECT::IsRowGroup(void)+22j
.text$mn:00001FA3                 mov     eax, [ebp+var_4]
.text$mn:00001FA6                 mov     esp, ebp
.text$mn:00001FA8                 pop     ebp
.text$mn:00001FA9                 retn
.text$mn:00001FA9 ?IsRowGroup@WINRECT@@QBEHXZ endp
.text$mn:00001FA9
.text$mn:00001FA9 ; ---------------------------------------------------------------------------
.text$mn:00001FAA                 align 4
.text$mn:00001FAA _text$mn        ends
.text$mn:00001FAA
.text$mn:00001FAC ; ===========================================================================
.text$mn:00001FAC
.text$mn:00001FAC ; Segment type: Pure code
.text$mn:00001FAC ; Segment permissions: Read/Execute
.text$mn:00001FAC _text$mn        segment para public 'CODE' use32
.text$mn:00001FAC                 assume cs:_text$mn
.text$mn:00001FAC                 ;org 1FACh
.text$mn:00001FAC ; COMDAT (pick any)
.text$mn:00001FAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001FAC
.text$mn:00001FAC ; =============== S U B R O U T I N E =======================================
.text$mn:00001FAC
.text$mn:00001FAC ; Attributes: bp-based frame
.text$mn:00001FAC
.text$mn:00001FAC ; int __thiscall WINRECT::IsWindow(WINRECT *__hidden this)
.text$mn:00001FAC                 public ?IsWindow@WINRECT@@QBEHXZ
.text$mn:00001FAC ?IsWindow@WINRECT@@QBEHXZ proc near     ; CODE XREF: CWinMgr::GetWindowPositions(HWND__ *)+63p
.text$mn:00001FAC                                         ; CWinMgr::SetWindowPositions(HWND__ *)+70p ...
.text$mn:00001FAC
.text$mn:00001FAC var_8           = dword ptr -8
.text$mn:00001FAC var_4           = dword ptr -4
.text$mn:00001FAC
.text$mn:00001FAC                 push    ebp
.text$mn:00001FAD                 mov     ebp, esp
.text$mn:00001FAF                 sub     esp, 8
.text$mn:00001FB2                 mov     [ebp+var_8], ecx
.text$mn:00001FB5                 mov     eax, [ebp+var_8]
.text$mn:00001FB8                 cmp     dword ptr [eax+1Ch], 0
.text$mn:00001FBC                 jbe     short loc_1FC7
.text$mn:00001FBE                 mov     [ebp+var_4], 1
.text$mn:00001FC5                 jmp     short loc_1FCE
.text$mn:00001FC7 ; ---------------------------------------------------------------------------
.text$mn:00001FC7
.text$mn:00001FC7 loc_1FC7:                               ; CODE XREF: WINRECT::IsWindow(void)+10j
.text$mn:00001FC7                 mov     [ebp+var_4], 0
.text$mn:00001FCE
.text$mn:00001FCE loc_1FCE:                               ; CODE XREF: WINRECT::IsWindow(void)+19j
.text$mn:00001FCE                 mov     eax, [ebp+var_4]
.text$mn:00001FD1                 mov     esp, ebp
.text$mn:00001FD3                 pop     ebp
.text$mn:00001FD4                 retn
.text$mn:00001FD4 ?IsWindow@WINRECT@@QBEHXZ endp
.text$mn:00001FD4
.text$mn:00001FD4 ; ---------------------------------------------------------------------------
.text$mn:00001FD5                 align 4
.text$mn:00001FD5 _text$mn        ends
.text$mn:00001FD5
.text$mn:00001FD8 ; ===========================================================================
.text$mn:00001FD8
.text$mn:00001FD8 ; Segment type: Pure code
.text$mn:00001FD8 ; Segment permissions: Read/Execute
.text$mn:00001FD8 _text$mn        segment para public 'CODE' use32
.text$mn:00001FD8                 assume cs:_text$mn
.text$mn:00001FD8                 ;org 1FD8h
.text$mn:00001FD8 ; COMDAT (pick any)
.text$mn:00001FD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001FD8
.text$mn:00001FD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00001FD8
.text$mn:00001FD8 ; Attributes: bp-based frame
.text$mn:00001FD8
.text$mn:00001FD8 ; struct WINRECT *__thiscall CWinGroupIterator::Next(CWinGroupIterator *__hidden this)
.text$mn:00001FD8                 public ?Next@CWinGroupIterator@@QAEPAVWINRECT@@XZ
.text$mn:00001FD8 ?Next@CWinGroupIterator@@QAEPAVWINRECT@@XZ proc near
.text$mn:00001FD8                                         ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+BEp
.text$mn:00001FD8                                         ; CWinMgr::CalcGroup(WINRECT *,HWND__ *)+193p ...
.text$mn:00001FD8
.text$mn:00001FD8 var_8           = dword ptr -8
.text$mn:00001FD8 var_4           = dword ptr -4
.text$mn:00001FD8
.text$mn:00001FD8                 push    ebp
.text$mn:00001FD9                 mov     ebp, esp
.text$mn:00001FDB                 sub     esp, 8
.text$mn:00001FDE                 mov     [ebp+var_4], ecx
.text$mn:00001FE1                 mov     eax, [ebp+var_4]
.text$mn:00001FE4                 cmp     dword ptr [eax], 0
.text$mn:00001FE7                 jz      short loc_1FF8
.text$mn:00001FE9                 mov     ecx, [ebp+var_4]
.text$mn:00001FEC                 mov     ecx, [ecx]      ; this
.text$mn:00001FEE                 call    ?Next@WINRECT@@QAEPAV1@XZ ; WINRECT::Next(void)
.text$mn:00001FF3                 mov     [ebp+var_8], eax
.text$mn:00001FF6                 jmp     short loc_1FFF
.text$mn:00001FF8 ; ---------------------------------------------------------------------------
.text$mn:00001FF8
.text$mn:00001FF8 loc_1FF8:                               ; CODE XREF: CWinGroupIterator::Next(void)+Fj
.text$mn:00001FF8                 mov     [ebp+var_8], 0
.text$mn:00001FFF
.text$mn:00001FFF loc_1FFF:                               ; CODE XREF: CWinGroupIterator::Next(void)+1Ej
.text$mn:00001FFF                 mov     edx, [ebp+var_4]
.text$mn:00002002                 mov     eax, [ebp+var_8]
.text$mn:00002005                 mov     [edx], eax
.text$mn:00002007                 mov     eax, [ebp+var_8]
.text$mn:0000200A                 mov     esp, ebp
.text$mn:0000200C                 pop     ebp
.text$mn:0000200D                 retn
.text$mn:0000200D ?Next@CWinGroupIterator@@QAEPAVWINRECT@@XZ endp
.text$mn:0000200D
.text$mn:0000200D ; ---------------------------------------------------------------------------
.text$mn:0000200E                 align 10h
.text$mn:0000200E _text$mn        ends
.text$mn:0000200E
.text$mn:00002010 ; ===========================================================================
.text$mn:00002010
.text$mn:00002010 ; Segment type: Pure code
.text$mn:00002010 ; Segment permissions: Read/Execute
.text$mn:00002010 _text$mn        segment para public 'CODE' use32
.text$mn:00002010                 assume cs:_text$mn
.text$mn:00002010                 ;org 2010h
.text$mn:00002010 ; COMDAT (pick any)
.text$mn:00002010                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002010
.text$mn:00002010 ; =============== S U B R O U T I N E =======================================
.text$mn:00002010
.text$mn:00002010 ; Attributes: bp-based frame
.text$mn:00002010
.text$mn:00002010 ; struct WINRECT *__thiscall WINRECT::Next(WINRECT *__hidden this)
.text$mn:00002010                 public ?Next@WINRECT@@QAEPAV1@XZ
.text$mn:00002010 ?Next@WINRECT@@QAEPAV1@XZ proc near     ; CODE XREF: CWinMgr::MoveRect(WINRECT *,tagPOINT,HWND__ *)+51p
.text$mn:00002010                                         ; CWinGroupIterator::Next(void)+16p
.text$mn:00002010
.text$mn:00002010 var_4           = dword ptr -4
.text$mn:00002010
.text$mn:00002010                 push    ebp
.text$mn:00002011                 mov     ebp, esp
.text$mn:00002013                 push    ecx
.text$mn:00002014                 mov     [ebp+var_4], ecx
.text$mn:00002017                 mov     eax, [ebp+var_4]
.text$mn:0000201A                 mov     eax, [eax]
.text$mn:0000201C                 mov     esp, ebp
.text$mn:0000201E                 pop     ebp
.text$mn:0000201F                 retn
.text$mn:0000201F ?Next@WINRECT@@QAEPAV1@XZ endp
.text$mn:0000201F
.text$mn:0000201F _text$mn        ends
.text$mn:0000201F
.text$mn:00002020 ; ===========================================================================
.text$mn:00002020
.text$mn:00002020 ; Segment type: Pure code
.text$mn:00002020 ; Segment permissions: Read/Execute
.text$mn:00002020 _text$mn        segment para public 'CODE' use32
.text$mn:00002020                 assume cs:_text$mn
.text$mn:00002020                 ;org 2020h
.text$mn:00002020 ; COMDAT (pick any)
.text$mn:00002020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002020
.text$mn:00002020 ; =============== S U B R O U T I N E =======================================
.text$mn:00002020
.text$mn:00002020 ; Attributes: bp-based frame
.text$mn:00002020
.text$mn:00002020 ; struct tagRECT *__cdecl OffsetRect(struct tagRECT *, struct tagPOINT)
.text$mn:00002020                 public ?OffsetRect@@YAAAUtagRECT@@AAU1@UtagPOINT@@@Z
.text$mn:00002020 ?OffsetRect@@YAAAUtagRECT@@AAU1@UtagPOINT@@@Z proc near
.text$mn:00002020                                         ; CODE XREF: CWinMgr::MoveRect(WINRECT *,tagPOINT,HWND__ *)+FFp
.text$mn:00002020
.text$mn:00002020 arg_0           = dword ptr  8
.text$mn:00002020 arg_4           = tagPOINT ptr  0Ch
.text$mn:00002020
.text$mn:00002020                 push    ebp
.text$mn:00002021                 mov     ebp, esp
.text$mn:00002023                 mov     eax, [ebp+arg_0]
.text$mn:00002026                 mov     ecx, [eax]
.text$mn:00002028                 add     ecx, [ebp+arg_4.x]
.text$mn:0000202B                 mov     edx, [ebp+arg_0]
.text$mn:0000202E                 mov     [edx], ecx
.text$mn:00002030                 mov     eax, [ebp+arg_0]
.text$mn:00002033                 mov     ecx, [eax+8]
.text$mn:00002036                 add     ecx, [ebp+arg_4.x]
.text$mn:00002039                 mov     edx, [ebp+arg_0]
.text$mn:0000203C                 mov     [edx+8], ecx
.text$mn:0000203F                 mov     eax, [ebp+arg_0]
.text$mn:00002042                 mov     ecx, [eax+4]
.text$mn:00002045                 add     ecx, [ebp+arg_4.y]
.text$mn:00002048                 mov     edx, [ebp+arg_0]
.text$mn:0000204B                 mov     [edx+4], ecx
.text$mn:0000204E                 mov     eax, [ebp+arg_0]
.text$mn:00002051                 mov     ecx, [eax+0Ch]
.text$mn:00002054                 add     ecx, [ebp+arg_4.y]
.text$mn:00002057                 mov     edx, [ebp+arg_0]
.text$mn:0000205A                 mov     [edx+0Ch], ecx
.text$mn:0000205D                 mov     eax, [ebp+arg_0]
.text$mn:00002060                 pop     ebp
.text$mn:00002061                 retn
.text$mn:00002061 ?OffsetRect@@YAAAUtagRECT@@AAU1@UtagPOINT@@@Z endp
.text$mn:00002061
.text$mn:00002061 ; ---------------------------------------------------------------------------
.text$mn:00002062                 align 4
.text$mn:00002062 _text$mn        ends
.text$mn:00002062
.text$mn:00002064 ; ===========================================================================
.text$mn:00002064
.text$mn:00002064 ; Segment type: Pure code
.text$mn:00002064 ; Segment permissions: Read/Execute
.text$mn:00002064 _text$mn        segment para public 'CODE' use32
.text$mn:00002064                 assume cs:_text$mn
.text$mn:00002064                 ;org 2064h
.text$mn:00002064 ; COMDAT (pick any)
.text$mn:00002064                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002064
.text$mn:00002064 ; =============== S U B R O U T I N E =======================================
.text$mn:00002064
.text$mn:00002064 ; Attributes: bp-based frame
.text$mn:00002064
.text$mn:00002064 ; struct WINRECT *__thiscall WINRECT::Prev(WINRECT *__hidden this)
.text$mn:00002064                 public ?Prev@WINRECT@@QAEPAV1@XZ
.text$mn:00002064 ?Prev@WINRECT@@QAEPAV1@XZ proc near     ; CODE XREF: CWinMgr::MoveRect(WINRECT *,tagPOINT,HWND__ *)+29p
.text$mn:00002064
.text$mn:00002064 var_4           = dword ptr -4
.text$mn:00002064
.text$mn:00002064                 push    ebp
.text$mn:00002065                 mov     ebp, esp
.text$mn:00002067                 push    ecx
.text$mn:00002068                 mov     [ebp+var_4], ecx
.text$mn:0000206B                 mov     eax, [ebp+var_4]
.text$mn:0000206E                 mov     eax, [eax+4]
.text$mn:00002071                 mov     esp, ebp
.text$mn:00002073                 pop     ebp
.text$mn:00002074                 retn
.text$mn:00002074 ?Prev@WINRECT@@QAEPAV1@XZ endp
.text$mn:00002074
.text$mn:00002074 ; ---------------------------------------------------------------------------
.text$mn:00002075                 align 4
.text$mn:00002075 _text$mn        ends
.text$mn:00002075
.text$mn:00002078 ; ===========================================================================
.text$mn:00002078
.text$mn:00002078 ; Segment type: Pure code
.text$mn:00002078 ; Segment permissions: Read/Execute
.text$mn:00002078 _text$mn        segment para public 'CODE' use32
.text$mn:00002078                 assume cs:_text$mn
.text$mn:00002078                 ;org 2078h
.text$mn:00002078 ; COMDAT (pick any)
.text$mn:00002078                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002078
.text$mn:00002078 ; =============== S U B R O U T I N E =======================================
.text$mn:00002078
.text$mn:00002078 ; Attributes: bp-based frame
.text$mn:00002078
.text$mn:00002078 ; __int32 __cdecl RectHeight(const struct tagRECT *)
.text$mn:00002078                 public ?RectHeight@@YAJABUtagRECT@@@Z
.text$mn:00002078 ?RectHeight@@YAJABUtagRECT@@@Z proc near
.text$mn:00002078                                         ; CODE XREF: CWinMgr::SetWindowPositions(HWND__ *)+C6p
.text$mn:00002078                                         ; CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+43Bp ...
.text$mn:00002078
.text$mn:00002078 arg_0           = dword ptr  8
.text$mn:00002078
.text$mn:00002078                 push    ebp
.text$mn:00002079                 mov     ebp, esp
.text$mn:0000207B                 mov     eax, [ebp+arg_0]
.text$mn:0000207E                 mov     ecx, [ebp+arg_0]
.text$mn:00002081                 mov     eax, [eax+0Ch]
.text$mn:00002084                 sub     eax, [ecx+4]
.text$mn:00002087                 pop     ebp
.text$mn:00002088                 retn
.text$mn:00002088 ?RectHeight@@YAJABUtagRECT@@@Z endp
.text$mn:00002088
.text$mn:00002088 ; ---------------------------------------------------------------------------
.text$mn:00002089                 align 4
.text$mn:00002089 _text$mn        ends
.text$mn:00002089
.text$mn:0000208C ; ===========================================================================
.text$mn:0000208C
.text$mn:0000208C ; Segment type: Pure code
.text$mn:0000208C ; Segment permissions: Read/Execute
.text$mn:0000208C _text$mn        segment para public 'CODE' use32
.text$mn:0000208C                 assume cs:_text$mn
.text$mn:0000208C                 ;org 208Ch
.text$mn:0000208C ; COMDAT (pick any)
.text$mn:0000208C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000208C
.text$mn:0000208C ; =============== S U B R O U T I N E =======================================
.text$mn:0000208C
.text$mn:0000208C ; Attributes: bp-based frame
.text$mn:0000208C
.text$mn:0000208C ; struct tagPOINT __cdecl RectToPoint(const struct tagRECT *)
.text$mn:0000208C                 public ?RectToPoint@@YA?AUtagPOINT@@ABUtagRECT@@@Z
.text$mn:0000208C ?RectToPoint@@YA?AUtagPOINT@@ABUtagRECT@@@Z proc near
.text$mn:0000208C                                         ; CODE XREF: CWinMgr::GetWindowPositions(HWND__ *)+A4p
.text$mn:0000208C
.text$mn:0000208C var_8           = dword ptr -8
.text$mn:0000208C var_4           = dword ptr -4
.text$mn:0000208C arg_0           = dword ptr  8
.text$mn:0000208C
.text$mn:0000208C                 push    ebp
.text$mn:0000208D                 mov     ebp, esp
.text$mn:0000208F                 sub     esp, 8
.text$mn:00002092                 mov     eax, [ebp+arg_0]
.text$mn:00002095                 mov     ecx, [eax]
.text$mn:00002097                 mov     [ebp+var_8], ecx
.text$mn:0000209A                 mov     edx, [ebp+arg_0]
.text$mn:0000209D                 mov     eax, [edx+4]
.text$mn:000020A0                 mov     [ebp+var_4], eax
.text$mn:000020A3                 mov     eax, [ebp+var_8]
.text$mn:000020A6                 mov     edx, [ebp+var_4]
.text$mn:000020A9                 mov     esp, ebp
.text$mn:000020AB                 pop     ebp
.text$mn:000020AC                 retn
.text$mn:000020AC ?RectToPoint@@YA?AUtagPOINT@@ABUtagRECT@@@Z endp
.text$mn:000020AC
.text$mn:000020AC ; ---------------------------------------------------------------------------
.text$mn:000020AD                 align 10h
.text$mn:000020AD _text$mn        ends
.text$mn:000020AD
.text$mn:000020B0 ; ===========================================================================
.text$mn:000020B0
.text$mn:000020B0 ; Segment type: Pure code
.text$mn:000020B0 ; Segment permissions: Read/Execute
.text$mn:000020B0 _text$mn        segment para public 'CODE' use32
.text$mn:000020B0                 assume cs:_text$mn
.text$mn:000020B0                 ;org 20B0h
.text$mn:000020B0 ; COMDAT (pick any)
.text$mn:000020B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000020B0
.text$mn:000020B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000020B0
.text$mn:000020B0 ; Attributes: bp-based frame
.text$mn:000020B0
.text$mn:000020B0 ; struct tagSIZE __cdecl RectToSize(const struct tagRECT *)
.text$mn:000020B0                 public ?RectToSize@@YA?AUtagSIZE@@ABUtagRECT@@@Z
.text$mn:000020B0 ?RectToSize@@YA?AUtagSIZE@@ABUtagRECT@@@Z proc near
.text$mn:000020B0                                         ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+49p
.text$mn:000020B0                                         ; CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+5DDp ...
.text$mn:000020B0
.text$mn:000020B0 var_8           = dword ptr -8
.text$mn:000020B0 var_4           = dword ptr -4
.text$mn:000020B0 arg_0           = dword ptr  8
.text$mn:000020B0
.text$mn:000020B0                 push    ebp
.text$mn:000020B1                 mov     ebp, esp
.text$mn:000020B3                 sub     esp, 8
.text$mn:000020B6                 mov     eax, [ebp+arg_0]
.text$mn:000020B9                 push    eax             ; struct tagRECT *
.text$mn:000020BA                 call    ?RectHeight@@YAJABUtagRECT@@@Z ; RectHeight(tagRECT const &)
.text$mn:000020BF                 add     esp, 4
.text$mn:000020C2                 push    eax             ; __int32
.text$mn:000020C3                 mov     ecx, [ebp+arg_0]
.text$mn:000020C6                 push    ecx             ; struct tagRECT *
.text$mn:000020C7                 call    ?RectWidth@@YAJABUtagRECT@@@Z ; RectWidth(tagRECT const &)
.text$mn:000020CC                 add     esp, 4
.text$mn:000020CF                 push    eax             ; __int32
.text$mn:000020D0                 call    ?GetSize@@YA?AUtagSIZE@@JJ@Z ; GetSize(long,long)
.text$mn:000020D5                 add     esp, 8
.text$mn:000020D8                 mov     [ebp+var_8], eax
.text$mn:000020DB                 mov     [ebp+var_4], edx
.text$mn:000020DE                 mov     eax, [ebp+var_8]
.text$mn:000020E1                 mov     edx, [ebp+var_4]
.text$mn:000020E4                 mov     esp, ebp
.text$mn:000020E6                 pop     ebp
.text$mn:000020E7                 retn
.text$mn:000020E7 ?RectToSize@@YA?AUtagSIZE@@ABUtagRECT@@@Z endp
.text$mn:000020E7
.text$mn:000020E7 _text$mn        ends
.text$mn:000020E7
.text$mn:000020E8 ; ===========================================================================
.text$mn:000020E8
.text$mn:000020E8 ; Segment type: Pure code
.text$mn:000020E8 ; Segment permissions: Read/Execute
.text$mn:000020E8 _text$mn        segment para public 'CODE' use32
.text$mn:000020E8                 assume cs:_text$mn
.text$mn:000020E8                 ;org 20E8h
.text$mn:000020E8 ; COMDAT (pick any)
.text$mn:000020E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000020E8
.text$mn:000020E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000020E8
.text$mn:000020E8 ; Attributes: bp-based frame
.text$mn:000020E8
.text$mn:000020E8 ; __int32 __cdecl RectWidth(const struct tagRECT *)
.text$mn:000020E8                 public ?RectWidth@@YAJABUtagRECT@@@Z
.text$mn:000020E8 ?RectWidth@@YAJABUtagRECT@@@Z proc near ; CODE XREF: CWinMgr::SetWindowPositions(HWND__ *)+D3p
.text$mn:000020E8                                         ; CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+44Cp ...
.text$mn:000020E8
.text$mn:000020E8 arg_0           = dword ptr  8
.text$mn:000020E8
.text$mn:000020E8                 push    ebp
.text$mn:000020E9                 mov     ebp, esp
.text$mn:000020EB                 mov     eax, [ebp+arg_0]
.text$mn:000020EE                 mov     ecx, [ebp+arg_0]
.text$mn:000020F1                 mov     eax, [eax+8]
.text$mn:000020F4                 sub     eax, [ecx]
.text$mn:000020F6                 pop     ebp
.text$mn:000020F7                 retn
.text$mn:000020F7 ?RectWidth@@YAJABUtagRECT@@@Z endp
.text$mn:000020F7
.text$mn:000020F7 _text$mn        ends
.text$mn:000020F7
.text$mn:000020F8 ; ===========================================================================
.text$mn:000020F8
.text$mn:000020F8 ; Segment type: Pure code
.text$mn:000020F8 ; Segment permissions: Read/Execute
.text$mn:000020F8 _text$mn        segment para public 'CODE' use32
.text$mn:000020F8                 assume cs:_text$mn
.text$mn:000020F8                 ;org 20F8h
.text$mn:000020F8 ; COMDAT (pick any)
.text$mn:000020F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000020F8
.text$mn:000020F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000020F8
.text$mn:000020F8 ; Attributes: bp-based frame
.text$mn:000020F8
.text$mn:000020F8 ; void __thiscall WINRECT::SetHeight(WINRECT *this, __int32)
.text$mn:000020F8                 public ?SetHeight@WINRECT@@QAEXJ@Z
.text$mn:000020F8 ?SetHeight@WINRECT@@QAEXJ@Z proc near   ; CODE XREF: WINRECT::SetHeightOrWidth(long,int)+16p
.text$mn:000020F8
.text$mn:000020F8 var_4           = dword ptr -4
.text$mn:000020F8 arg_0           = dword ptr  8
.text$mn:000020F8
.text$mn:000020F8                 push    ebp
.text$mn:000020F9                 mov     ebp, esp
.text$mn:000020FB                 push    ecx
.text$mn:000020FC                 mov     [ebp+var_4], ecx
.text$mn:000020FF                 mov     eax, [ebp+var_4]
.text$mn:00002102                 mov     ecx, [eax+0Ch]
.text$mn:00002105                 add     ecx, [ebp+arg_0]
.text$mn:00002108                 mov     edx, [ebp+var_4]
.text$mn:0000210B                 mov     [edx+14h], ecx
.text$mn:0000210E                 mov     esp, ebp
.text$mn:00002110                 pop     ebp
.text$mn:00002111                 retn    4
.text$mn:00002111 ?SetHeight@WINRECT@@QAEXJ@Z endp
.text$mn:00002111
.text$mn:00002111 _text$mn        ends
.text$mn:00002111
.text$mn:00002114 ; ===========================================================================
.text$mn:00002114
.text$mn:00002114 ; Segment type: Pure code
.text$mn:00002114 ; Segment permissions: Read/Execute
.text$mn:00002114 _text$mn        segment para public 'CODE' use32
.text$mn:00002114                 assume cs:_text$mn
.text$mn:00002114                 ;org 2114h
.text$mn:00002114 ; COMDAT (pick any)
.text$mn:00002114                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002114
.text$mn:00002114 ; =============== S U B R O U T I N E =======================================
.text$mn:00002114
.text$mn:00002114 ; Attributes: bp-based frame
.text$mn:00002114
.text$mn:00002114 ; void __thiscall WINRECT::SetHeightOrWidth(WINRECT *this, __int32, int)
.text$mn:00002114                 public ?SetHeightOrWidth@WINRECT@@QAEXJH@Z
.text$mn:00002114 ?SetHeightOrWidth@WINRECT@@QAEXJH@Z proc near
.text$mn:00002114                                         ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+20Dp
.text$mn:00002114                                         ; CWinMgr::AdjustSize(WINRECT *,int,int &,HWND__ *)+108p
.text$mn:00002114
.text$mn:00002114 var_8           = dword ptr -8
.text$mn:00002114 var_4           = dword ptr -4
.text$mn:00002114 arg_0           = dword ptr  8
.text$mn:00002114 arg_4           = dword ptr  0Ch
.text$mn:00002114
.text$mn:00002114                 push    ebp
.text$mn:00002115                 mov     ebp, esp
.text$mn:00002117                 sub     esp, 8
.text$mn:0000211A                 mov     [ebp+var_4], ecx
.text$mn:0000211D                 cmp     [ebp+arg_4], 0
.text$mn:00002121                 jz      short loc_2138
.text$mn:00002123                 mov     eax, [ebp+arg_0]
.text$mn:00002126                 push    eax             ; __int32
.text$mn:00002127                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000212A                 call    ?SetHeight@WINRECT@@QAEXJ@Z ; WINRECT::SetHeight(long)
.text$mn:0000212F                 mov     [ebp+var_8], 0
.text$mn:00002136                 jmp     short loc_214B
.text$mn:00002138 ; ---------------------------------------------------------------------------
.text$mn:00002138
.text$mn:00002138 loc_2138:                               ; CODE XREF: WINRECT::SetHeightOrWidth(long,int)+Dj
.text$mn:00002138                 mov     ecx, [ebp+arg_0]
.text$mn:0000213B                 push    ecx             ; __int32
.text$mn:0000213C                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000213F                 call    ?SetWidth@WINRECT@@QAEXJ@Z ; WINRECT::SetWidth(long)
.text$mn:00002144                 mov     [ebp+var_8], 0
.text$mn:0000214B
.text$mn:0000214B loc_214B:                               ; CODE XREF: WINRECT::SetHeightOrWidth(long,int)+22j
.text$mn:0000214B                 mov     esp, ebp
.text$mn:0000214D                 pop     ebp
.text$mn:0000214E                 retn    8
.text$mn:0000214E ?SetHeightOrWidth@WINRECT@@QAEXJH@Z endp
.text$mn:0000214E
.text$mn:0000214E ; ---------------------------------------------------------------------------
.text$mn:00002151                 align 4
.text$mn:00002151 _text$mn        ends
.text$mn:00002151
.text$mn:00002154 ; ===========================================================================
.text$mn:00002154
.text$mn:00002154 ; Segment type: Pure code
.text$mn:00002154 ; Segment permissions: Read/Execute
.text$mn:00002154 _text$mn        segment para public 'CODE' use32
.text$mn:00002154                 assume cs:_text$mn
.text$mn:00002154                 ;org 2154h
.text$mn:00002154 ; COMDAT (pick any)
.text$mn:00002154                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002154
.text$mn:00002154 ; =============== S U B R O U T I N E =======================================
.text$mn:00002154
.text$mn:00002154 ; Attributes: bp-based frame
.text$mn:00002154
.text$mn:00002154 ; void __thiscall WINRECT::SetToFitSize(WINRECT *this, struct tagSIZE)
.text$mn:00002154                 public ?SetToFitSize@WINRECT@@QAEXUtagSIZE@@@Z
.text$mn:00002154 ?SetToFitSize@WINRECT@@QAEXUtagSIZE@@@Z proc near
.text$mn:00002154                                         ; CODE XREF: CWinMgr::InitToFitSizeFromCurrent(HWND__ *)+AFp
.text$mn:00002154
.text$mn:00002154 var_4           = dword ptr -4
.text$mn:00002154 arg_0           = tagSIZE ptr  8
.text$mn:00002154
.text$mn:00002154                 push    ebp
.text$mn:00002155                 mov     ebp, esp
.text$mn:00002157                 push    ecx
.text$mn:00002158                 mov     [ebp+var_4], ecx
.text$mn:0000215B                 mov     eax, [ebp+arg_0._cx]
.text$mn:0000215E                 and     eax, 0FFFFh
.text$mn:00002163                 movzx   ecx, ax
.text$mn:00002166                 mov     edx, [ebp+arg_0.cy]
.text$mn:00002169                 and     edx, 0FFFFh
.text$mn:0000216F                 movzx   eax, dx
.text$mn:00002172                 shl     eax, 10h
.text$mn:00002175                 or      ecx, eax
.text$mn:00002177                 mov     edx, [ebp+var_4]
.text$mn:0000217A                 mov     [edx+20h], ecx
.text$mn:0000217D                 mov     esp, ebp
.text$mn:0000217F                 pop     ebp
.text$mn:00002180                 retn    8
.text$mn:00002180 ?SetToFitSize@WINRECT@@QAEXUtagSIZE@@@Z endp
.text$mn:00002180
.text$mn:00002180 ; ---------------------------------------------------------------------------
.text$mn:00002183                 align 4
.text$mn:00002183 _text$mn        ends
.text$mn:00002183
.text$mn:00002184 ; ===========================================================================
.text$mn:00002184
.text$mn:00002184 ; Segment type: Pure code
.text$mn:00002184 ; Segment permissions: Read/Execute
.text$mn:00002184 _text$mn        segment para public 'CODE' use32
.text$mn:00002184                 assume cs:_text$mn
.text$mn:00002184                 ;org 2184h
.text$mn:00002184 ; COMDAT (pick any)
.text$mn:00002184                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002184
.text$mn:00002184 ; =============== S U B R O U T I N E =======================================
.text$mn:00002184
.text$mn:00002184 ; Attributes: bp-based frame
.text$mn:00002184
.text$mn:00002184 ; void __thiscall WINRECT::SetWidth(WINRECT *this, __int32)
.text$mn:00002184                 public ?SetWidth@WINRECT@@QAEXJ@Z
.text$mn:00002184 ?SetWidth@WINRECT@@QAEXJ@Z proc near    ; CODE XREF: WINRECT::SetHeightOrWidth(long,int)+2Bp
.text$mn:00002184
.text$mn:00002184 var_4           = dword ptr -4
.text$mn:00002184 arg_0           = dword ptr  8
.text$mn:00002184
.text$mn:00002184                 push    ebp
.text$mn:00002185                 mov     ebp, esp
.text$mn:00002187                 push    ecx
.text$mn:00002188                 mov     [ebp+var_4], ecx
.text$mn:0000218B                 mov     eax, [ebp+var_4]
.text$mn:0000218E                 mov     ecx, [eax+8]
.text$mn:00002191                 add     ecx, [ebp+arg_0]
.text$mn:00002194                 mov     edx, [ebp+var_4]
.text$mn:00002197                 mov     [edx+10h], ecx
.text$mn:0000219A                 mov     esp, ebp
.text$mn:0000219C                 pop     ebp
.text$mn:0000219D                 retn    4
.text$mn:0000219D ?SetWidth@WINRECT@@QAEXJ@Z endp
.text$mn:0000219D
.text$mn:0000219D _text$mn        ends
.text$mn:0000219D
.text$mn:000021A0 ; ===========================================================================
.text$mn:000021A0
.text$mn:000021A0 ; Segment type: Pure code
.text$mn:000021A0 ; Segment permissions: Read/Execute
.text$mn:000021A0 _text$mn        segment para public 'CODE' use32
.text$mn:000021A0                 assume cs:_text$mn
.text$mn:000021A0                 ;org 21A0h
.text$mn:000021A0 ; COMDAT (pick any)
.text$mn:000021A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000021A0
.text$mn:000021A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000021A0
.text$mn:000021A0 ; Attributes: bp-based frame
.text$mn:000021A0
.text$mn:000021A0 ; struct tagPOINT __cdecl SizeToPoint(struct tagSIZE)
.text$mn:000021A0                 public ?SizeToPoint@@YA?AUtagPOINT@@UtagSIZE@@@Z
.text$mn:000021A0 ?SizeToPoint@@YA?AUtagPOINT@@UtagSIZE@@@Z proc near
.text$mn:000021A0                                         ; CODE XREF: CWinMgr::GetMinMaxInfo(HWND__ *,tagMINMAXINFO *)+2Bp
.text$mn:000021A0                                         ; CWinMgr::GetMinMaxInfo(HWND__ *,tagMINMAXINFO *)+50p
.text$mn:000021A0
.text$mn:000021A0 var_8           = dword ptr -8
.text$mn:000021A0 var_4           = dword ptr -4
.text$mn:000021A0 arg_0           = tagSIZE ptr  8
.text$mn:000021A0
.text$mn:000021A0                 push    ebp
.text$mn:000021A1                 mov     ebp, esp
.text$mn:000021A3                 sub     esp, 8
.text$mn:000021A6                 mov     eax, [ebp+arg_0.cy]
.text$mn:000021A9                 push    eax             ; __int32
.text$mn:000021AA                 mov     ecx, [ebp+arg_0._cx]
.text$mn:000021AD                 push    ecx             ; __int32
.text$mn:000021AE                 call    ?GetPoint@@YA?AUtagPOINT@@JJ@Z ; GetPoint(long,long)
.text$mn:000021B3                 add     esp, 8
.text$mn:000021B6                 mov     [ebp+var_8], eax
.text$mn:000021B9                 mov     [ebp+var_4], edx
.text$mn:000021BC                 mov     eax, [ebp+var_8]
.text$mn:000021BF                 mov     edx, [ebp+var_4]
.text$mn:000021C2                 mov     esp, ebp
.text$mn:000021C4                 pop     ebp
.text$mn:000021C5                 retn
.text$mn:000021C5 ?SizeToPoint@@YA?AUtagPOINT@@UtagSIZE@@@Z endp
.text$mn:000021C5
.text$mn:000021C5 ; ---------------------------------------------------------------------------
.text$mn:000021C6                 align 4
.text$mn:000021C6 _text$mn        ends
.text$mn:000021C6
.text$mn:000021C8 ; ===========================================================================
.text$mn:000021C8
.text$mn:000021C8 ; Segment type: Pure code
.text$mn:000021C8 ; Segment permissions: Read/Execute
.text$mn:000021C8 _text$mn        segment para public 'CODE' use32
.text$mn:000021C8                 assume cs:_text$mn
.text$mn:000021C8                 ;org 21C8h
.text$mn:000021C8 ; COMDAT (pick any)
.text$mn:000021C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000021C8
.text$mn:000021C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000021C8
.text$mn:000021C8 ; Attributes: bp-based frame
.text$mn:000021C8
.text$mn:000021C8 ; unsigned __int16 __thiscall WINRECT::Type(WINRECT *__hidden this)
.text$mn:000021C8                 public ?Type@WINRECT@@QBEGXZ
.text$mn:000021C8 ?Type@WINRECT@@QBEGXZ proc near         ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+372p
.text$mn:000021C8                                         ; CWinMgr::InitToFitSizeFromCurrent(HWND__ *)+74p ...
.text$mn:000021C8
.text$mn:000021C8 var_4           = dword ptr -4
.text$mn:000021C8
.text$mn:000021C8                 push    ebp
.text$mn:000021C9                 mov     ebp, esp
.text$mn:000021CB                 push    ecx
.text$mn:000021CC                 mov     [ebp+var_4], ecx
.text$mn:000021CF                 mov     eax, [ebp+var_4]
.text$mn:000021D2                 movzx   eax, word ptr [eax+18h]
.text$mn:000021D6                 and     eax, 0Fh
.text$mn:000021D9                 mov     esp, ebp
.text$mn:000021DB                 pop     ebp
.text$mn:000021DC                 retn
.text$mn:000021DC ?Type@WINRECT@@QBEGXZ endp
.text$mn:000021DC
.text$mn:000021DC ; ---------------------------------------------------------------------------
.text$mn:000021DD                 align 10h
.text$mn:000021DD _text$mn        ends
.text$mn:000021DD
.text$mn:000021E0 ; ===========================================================================
.text$mn:000021E0
.text$mn:000021E0 ; Segment type: Pure code
.text$mn:000021E0 ; Segment permissions: Read/Execute
.text$mn:000021E0 _text$mn        segment para public 'CODE' use32
.text$mn:000021E0                 assume cs:_text$mn
.text$mn:000021E0                 ;org 21E0h
.text$mn:000021E0 ; COMDAT (pick any)
.text$mn:000021E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000021E0
.text$mn:000021E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000021E0
.text$mn:000021E0 ; Attributes: bp-based frame
.text$mn:000021E0
.text$mn:000021E0 ; struct tagSIZE __cdecl maxsize(struct tagSIZE, struct tagSIZE)
.text$mn:000021E0                 public ?maxsize@@YA?AUtagSIZE@@U1@0@Z
.text$mn:000021E0 ?maxsize@@YA?AUtagSIZE@@U1@0@Z proc near
.text$mn:000021E0                                         ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+661p
.text$mn:000021E0
.text$mn:000021E0 var_10          = dword ptr -10h
.text$mn:000021E0 var_C           = dword ptr -0Ch
.text$mn:000021E0 var_8           = dword ptr -8
.text$mn:000021E0 var_4           = dword ptr -4
.text$mn:000021E0 arg_0           = tagSIZE ptr  8
.text$mn:000021E0 arg_8           = tagSIZE ptr  10h
.text$mn:000021E0
.text$mn:000021E0                 push    ebp
.text$mn:000021E1                 mov     ebp, esp
.text$mn:000021E3                 sub     esp, 10h
.text$mn:000021E6                 mov     eax, [ebp+arg_0.cy]
.text$mn:000021E9                 cmp     eax, [ebp+arg_8.cy]
.text$mn:000021EC                 jbe     short loc_21F6
.text$mn:000021EE                 mov     ecx, [ebp+arg_0.cy]
.text$mn:000021F1                 mov     [ebp+var_4], ecx
.text$mn:000021F4                 jmp     short loc_21FC
.text$mn:000021F6 ; ---------------------------------------------------------------------------
.text$mn:000021F6
.text$mn:000021F6 loc_21F6:                               ; CODE XREF: maxsize(tagSIZE,tagSIZE)+Cj
.text$mn:000021F6                 mov     edx, [ebp+arg_8.cy]
.text$mn:000021F9                 mov     [ebp+var_4], edx
.text$mn:000021FC
.text$mn:000021FC loc_21FC:                               ; CODE XREF: maxsize(tagSIZE,tagSIZE)+14j
.text$mn:000021FC                 mov     eax, [ebp+arg_0._cx]
.text$mn:000021FF                 cmp     eax, [ebp+arg_8._cx]
.text$mn:00002202                 jbe     short loc_220C
.text$mn:00002204                 mov     ecx, [ebp+arg_0._cx]
.text$mn:00002207                 mov     [ebp+var_8], ecx
.text$mn:0000220A                 jmp     short loc_2212
.text$mn:0000220C ; ---------------------------------------------------------------------------
.text$mn:0000220C
.text$mn:0000220C loc_220C:                               ; CODE XREF: maxsize(tagSIZE,tagSIZE)+22j
.text$mn:0000220C                 mov     edx, [ebp+arg_8._cx]
.text$mn:0000220F                 mov     [ebp+var_8], edx
.text$mn:00002212
.text$mn:00002212 loc_2212:                               ; CODE XREF: maxsize(tagSIZE,tagSIZE)+2Aj
.text$mn:00002212                 mov     eax, [ebp+var_4]
.text$mn:00002215                 push    eax             ; __int32
.text$mn:00002216                 mov     ecx, [ebp+var_8]
.text$mn:00002219                 push    ecx             ; __int32
.text$mn:0000221A                 call    ?GetSize@@YA?AUtagSIZE@@JJ@Z ; GetSize(long,long)
.text$mn:0000221F                 add     esp, 8
.text$mn:00002222                 mov     [ebp+var_10], eax
.text$mn:00002225                 mov     [ebp+var_C], edx
.text$mn:00002228                 mov     eax, [ebp+var_10]
.text$mn:0000222B                 mov     edx, [ebp+var_C]
.text$mn:0000222E                 mov     esp, ebp
.text$mn:00002230                 pop     ebp
.text$mn:00002231                 retn
.text$mn:00002231 ?maxsize@@YA?AUtagSIZE@@U1@0@Z endp
.text$mn:00002231
.text$mn:00002231 ; ---------------------------------------------------------------------------
.text$mn:00002232                 align 4
.text$mn:00002232 _text$mn        ends
.text$mn:00002232
.text$mn:00002234 ; ===========================================================================
.text$mn:00002234
.text$mn:00002234 ; Segment type: Pure code
.text$mn:00002234 ; Segment permissions: Read/Execute
.text$mn:00002234 _text$mn        segment para public 'CODE' use32
.text$mn:00002234                 assume cs:_text$mn
.text$mn:00002234                 ;org 2234h
.text$mn:00002234 ; COMDAT (pick any)
.text$mn:00002234                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002234
.text$mn:00002234 ; =============== S U B R O U T I N E =======================================
.text$mn:00002234
.text$mn:00002234 ; Attributes: bp-based frame
.text$mn:00002234
.text$mn:00002234 ; struct tagSIZE __cdecl minsize(struct tagSIZE, struct tagSIZE)
.text$mn:00002234                 public ?minsize@@YA?AUtagSIZE@@U1@0@Z
.text$mn:00002234 ?minsize@@YA?AUtagSIZE@@U1@0@Z proc near
.text$mn:00002234                                         ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+634p
.text$mn:00002234
.text$mn:00002234 var_10          = dword ptr -10h
.text$mn:00002234 var_C           = dword ptr -0Ch
.text$mn:00002234 var_8           = dword ptr -8
.text$mn:00002234 var_4           = dword ptr -4
.text$mn:00002234 arg_0           = tagSIZE ptr  8
.text$mn:00002234 arg_8           = tagSIZE ptr  10h
.text$mn:00002234
.text$mn:00002234                 push    ebp
.text$mn:00002235                 mov     ebp, esp
.text$mn:00002237                 sub     esp, 10h
.text$mn:0000223A                 mov     eax, [ebp+arg_0.cy]
.text$mn:0000223D                 cmp     eax, [ebp+arg_8.cy]
.text$mn:00002240                 jnb     short loc_224A
.text$mn:00002242                 mov     ecx, [ebp+arg_0.cy]
.text$mn:00002245                 mov     [ebp+var_4], ecx
.text$mn:00002248                 jmp     short loc_2250
.text$mn:0000224A ; ---------------------------------------------------------------------------
.text$mn:0000224A
.text$mn:0000224A loc_224A:                               ; CODE XREF: minsize(tagSIZE,tagSIZE)+Cj
.text$mn:0000224A                 mov     edx, [ebp+arg_8.cy]
.text$mn:0000224D                 mov     [ebp+var_4], edx
.text$mn:00002250
.text$mn:00002250 loc_2250:                               ; CODE XREF: minsize(tagSIZE,tagSIZE)+14j
.text$mn:00002250                 mov     eax, [ebp+arg_0._cx]
.text$mn:00002253                 cmp     eax, [ebp+arg_8._cx]
.text$mn:00002256                 jnb     short loc_2260
.text$mn:00002258                 mov     ecx, [ebp+arg_0._cx]
.text$mn:0000225B                 mov     [ebp+var_8], ecx
.text$mn:0000225E                 jmp     short loc_2266
.text$mn:00002260 ; ---------------------------------------------------------------------------
.text$mn:00002260
.text$mn:00002260 loc_2260:                               ; CODE XREF: minsize(tagSIZE,tagSIZE)+22j
.text$mn:00002260                 mov     edx, [ebp+arg_8._cx]
.text$mn:00002263                 mov     [ebp+var_8], edx
.text$mn:00002266
.text$mn:00002266 loc_2266:                               ; CODE XREF: minsize(tagSIZE,tagSIZE)+2Aj
.text$mn:00002266                 mov     eax, [ebp+var_4]
.text$mn:00002269                 push    eax             ; __int32
.text$mn:0000226A                 mov     ecx, [ebp+var_8]
.text$mn:0000226D                 push    ecx             ; __int32
.text$mn:0000226E                 call    ?GetSize@@YA?AUtagSIZE@@JJ@Z ; GetSize(long,long)
.text$mn:00002273                 add     esp, 8
.text$mn:00002276                 mov     [ebp+var_10], eax
.text$mn:00002279                 mov     [ebp+var_C], edx
.text$mn:0000227C                 mov     eax, [ebp+var_10]
.text$mn:0000227F                 mov     edx, [ebp+var_C]
.text$mn:00002282                 mov     esp, ebp
.text$mn:00002284                 pop     ebp
.text$mn:00002285                 retn
.text$mn:00002285 ?minsize@@YA?AUtagSIZE@@U1@0@Z endp
.text$mn:00002285
.text$mn:00002285 ; ---------------------------------------------------------------------------
.text$mn:00002286                 align 4
.text$mn:00002286 _text$mn        ends
.text$mn:00002286
.rdata:00002288 ; ===========================================================================
.rdata:00002288
.rdata:00002288 ; Segment type: Pure data
.rdata:00002288 ; Segment permissions: Read
.rdata:00002288 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00002288 _rdata          segment para public 'DATA' use32
.rdata:00002288                 assume cs:_rdata
.rdata:00002288                 ;org 2288h
.rdata:00002288 ; COMDAT (pick any)
.rdata:00002288                 public ??_C@_1KO@LJAFCIDL@?$AAc?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?2?$AAn?$AAo?$AAt?$AAe?$AAp?$AAa?$AAd?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AA6@
.rdata:00002288 ; wchar_t `string'
.rdata:00002288 ??_C@_1KO@LJAFCIDL@?$AAc?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?2?$AAn?$AAo?$AAt?$AAe?$AAp?$AAa?$AAd?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AA6@:
.rdata:00002288                                         ; DATA XREF: CWinGroupIterator::operator=(WINRECT *)+18o
.rdata:00002288                 unicode 0, <c:\workspace\notepad-plus-plus-6.7.9.2\powereditor\src\wi>
.rdata:00002288                 unicode 0, <ncontrols\windowsdlg\WinMgr.h>,0
.rdata:00002336                 align 4
.rdata:00002336 _rdata          ends
.rdata:00002336
.rdata:00002338 ; ===========================================================================
.rdata:00002338
.rdata:00002338 ; Segment type: Pure data
.rdata:00002338 ; Segment permissions: Read
.rdata:00002338 _rdata          segment dword public 'DATA' use32
.rdata:00002338                 assume cs:_rdata
.rdata:00002338                 ;org 2338h
.rdata:00002338 ; COMDAT (pick any)
.rdata:00002338                 public ??_C@_1BM@GEOBLKFJ@?$AAp?$AAg?$AA?9?$AA?$DO?$AAI?$AAs?$AAG?$AAr?$AAo?$AAu?$AAp?$AA?$CI?$AA?$CJ?$AA?$AA@
.rdata:00002338 ; wchar_t `string'
.rdata:00002338 ??_C@_1BM@GEOBLKFJ@?$AAp?$AAg?$AA?9?$AA?$DO?$AAI?$AAs?$AAG?$AAr?$AAo?$AAu?$AAp?$AA?$CI?$AA?$CJ?$AA?$AA@:
.rdata:00002338                                         ; DATA XREF: CWinGroupIterator::operator=(WINRECT *)+1Do
.rdata:00002338                 unicode 0, <pg->
.rdata:00002338                 dw 3Eh
.rdata:00002338                 unicode 0, <IsGroup()>,0
.rdata:00002338 _rdata          ends
.rdata:00002338
.bss:00002354 ; ===========================================================================
.bss:00002354
.bss:00002354 ; Segment type: Uninitialized
.bss:00002354 ; Segment permissions: Read/Write
.bss:00002354 _bss            segment dword public 'BSS' use32
.bss:00002354                 assume cs:_bss
.bss:00002354                 ;org 2354h
.bss:00002354                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00002354                 public ?WM_WINMGR@@3IB
.bss:00002354 ; UINT WM_WINMGR
.bss:00002354 ?WM_WINMGR@@3IB dd ?                    ; DATA XREF: CWinMgr::SendGetSizeInfo(SIZEINFO &,HWND__ *,uint)+35r
.bss:00002354                                         ; CWinMgr::SendGetSizeInfo(SIZEINFO &,HWND__ *,uint)+6Er ...
.bss:00002354 _bss            ends
.bss:00002354
.rdata:00002358 ; ===========================================================================
.rdata:00002358
.rdata:00002358 ; Segment type: Pure data
.rdata:00002358 ; Segment permissions: Read
.rdata:00002358 _rdata          segment dword public 'DATA' use32
.rdata:00002358                 assume cs:_rdata
.rdata:00002358                 ;org 2358h
.rdata:00002358 ; COMDAT (pick largest)
.rdata:00002358                 dd offset ??_R4CWinMgr@@6B@ ; const CWinMgr::`RTTI Complete Object Locator'
.rdata:0000235C                 public ??_7CWinMgr@@6B@
.rdata:0000235C ; const CWinMgr::`vftable'
.rdata:0000235C ??_7CWinMgr@@6B@ dd offset ??_ECWinMgr@@UAEPAXI@Z
.rdata:0000235C                                         ; DATA XREF: CWinMgr::CWinMgr(WINRECT *)+Ao
.rdata:0000235C                                         ; CWinMgr::~CWinMgr(void)+Ao
.rdata:0000235C                                         ; CWinMgr::`vector deleting destructor'(uint)
.rdata:00002360                 dd offset ?GetWindowPositions@CWinMgr@@UAEXPAUHWND__@@@Z ; CWinMgr::GetWindowPositions(HWND__ *)
.rdata:00002364                 dd offset ?SetWindowPositions@CWinMgr@@UAEXPAUHWND__@@@Z ; CWinMgr::SetWindowPositions(HWND__ *)
.rdata:00002368                 dd offset ?OnGetSizeInfo@CWinMgr@@UAEXAAUSIZEINFO@@PAVWINRECT@@PAUHWND__@@@Z ; CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)
.rdata:0000236C                 dd offset ?CalcGroup@CWinMgr@@MAEXPAVWINRECT@@PAUHWND__@@@Z ; CWinMgr::CalcGroup(WINRECT *,HWND__ *)
.rdata:00002370                 dd offset ?AdjustSize@CWinMgr@@MAEXPAVWINRECT@@HAAHPAUHWND__@@@Z ; CWinMgr::AdjustSize(WINRECT *,int,int &,HWND__ *)
.rdata:00002374                 dd offset ?PositionRects@CWinMgr@@MAEXPAVWINRECT@@ABUtagRECT@@H@Z ; CWinMgr::PositionRects(WINRECT *,tagRECT const &,int)
.rdata:00002374 _rdata          ends
.rdata:00002374
.rdata$r:00002378 ; ===========================================================================
.rdata$r:00002378
.rdata$r:00002378 ; Segment type: Pure data
.rdata$r:00002378 ; Segment permissions: Read
.rdata$r:00002378 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002378                 assume cs:_rdata$r
.rdata$r:00002378                 ;org 2378h
.rdata$r:00002378 ; COMDAT (pick any)
.rdata$r:00002378                 public ??_R4CWinMgr@@6B@
.rdata$r:00002378 ; const CWinMgr::`RTTI Complete Object Locator'
.rdata$r:00002378 ??_R4CWinMgr@@6B@ db    0               ; DATA XREF: .rdata:00002358o
.rdata$r:00002379                 db    0
.rdata$r:0000237A                 db    0
.rdata$r:0000237B                 db    0
.rdata$r:0000237C                 db    0
.rdata$r:0000237D                 db    0
.rdata$r:0000237E                 db    0
.rdata$r:0000237F                 db    0
.rdata$r:00002380                 db    0
.rdata$r:00002381                 db    0
.rdata$r:00002382                 db    0
.rdata$r:00002383                 db    0
.rdata$r:00002384                 dd offset ??_R0?AVCWinMgr@@@8 ; CWinMgr `RTTI Type Descriptor'
.rdata$r:00002388                 dd offset ??_R3CWinMgr@@8 ; CWinMgr::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002388 _rdata$r        ends
.rdata$r:00002388
.data$r:0000238C ; ===========================================================================
.data$r:0000238C
.data$r:0000238C ; Segment type: Pure data
.data$r:0000238C ; Segment permissions: Read/Write
.data$r:0000238C _data$r         segment dword public 'DATA' use32
.data$r:0000238C                 assume cs:_data$r
.data$r:0000238C                 ;org 238Ch
.data$r:0000238C ; COMDAT (pick any)
.data$r:0000238C                 public ??_R0?AVCWinMgr@@@8
.data$r:0000238C ; class CWinMgr `RTTI Type Descriptor'
.data$r:0000238C ??_R0?AVCWinMgr@@@8 dd offset ??_7type_info@@6B@
.data$r:0000238C                                         ; DATA XREF: .rdata$r:00002384o
.data$r:0000238C                                         ; .rdata$r:CWinMgr::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000238C                                         ; const type_info::`vftable'
.data$r:00002390                 db    0
.data$r:00002391                 db    0
.data$r:00002392                 db    0
.data$r:00002393                 db    0
.data$r:00002394                 db  2Eh ; .
.data$r:00002395                 db  3Fh ; ?
.data$r:00002396                 db  41h ; A
.data$r:00002397                 db  56h ; V
.data$r:00002398                 db  43h ; C
.data$r:00002399                 db  57h ; W
.data$r:0000239A                 db  69h ; i
.data$r:0000239B                 db  6Eh ; n
.data$r:0000239C                 db  4Dh ; M
.data$r:0000239D                 db  67h ; g
.data$r:0000239E                 db  72h ; r
.data$r:0000239F                 db  40h ; @
.data$r:000023A0                 db  40h ; @
.data$r:000023A1                 db    0
.data$r:000023A2                 align 4
.data$r:000023A2 _data$r         ends
.data$r:000023A2
.rdata$r:000023A4 ; ===========================================================================
.rdata$r:000023A4
.rdata$r:000023A4 ; Segment type: Pure data
.rdata$r:000023A4 ; Segment permissions: Read
.rdata$r:000023A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000023A4                 assume cs:_rdata$r
.rdata$r:000023A4                 ;org 23A4h
.rdata$r:000023A4 ; COMDAT (pick any)
.rdata$r:000023A4                 public ??_R3CWinMgr@@8
.rdata$r:000023A4 ; CWinMgr::`RTTI Class Hierarchy Descriptor'
.rdata$r:000023A4 ??_R3CWinMgr@@8 db    0                 ; DATA XREF: .rdata$r:00002388o
.rdata$r:000023A4                                         ; .rdata$r:000023D4o
.rdata$r:000023A5                 db    0
.rdata$r:000023A6                 db    0
.rdata$r:000023A7                 db    0
.rdata$r:000023A8                 db    0
.rdata$r:000023A9                 db    0
.rdata$r:000023AA                 db    0
.rdata$r:000023AB                 db    0
.rdata$r:000023AC                 db    1
.rdata$r:000023AD                 db    0
.rdata$r:000023AE                 db    0
.rdata$r:000023AF                 db    0
.rdata$r:000023B0                 dd offset ??_R2CWinMgr@@8 ; CWinMgr::`RTTI Base Class Array'
.rdata$r:000023B0 _rdata$r        ends
.rdata$r:000023B0
.rdata$r:000023B4 ; ===========================================================================
.rdata$r:000023B4
.rdata$r:000023B4 ; Segment type: Pure data
.rdata$r:000023B4 ; Segment permissions: Read
.rdata$r:000023B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000023B4                 assume cs:_rdata$r
.rdata$r:000023B4                 ;org 23B4h
.rdata$r:000023B4 ; COMDAT (pick any)
.rdata$r:000023B4                 public ??_R2CWinMgr@@8
.rdata$r:000023B4 ; CWinMgr::`RTTI Base Class Array'
.rdata$r:000023B4 ??_R2CWinMgr@@8 dd offset ??_R1A@?0A@EA@CWinMgr@@8
.rdata$r:000023B4                                         ; DATA XREF: .rdata$r:000023B0o
.rdata$r:000023B4                                         ; CWinMgr::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000023B8                 db    0
.rdata$r:000023B9                 align 4
.rdata$r:000023B9 _rdata$r        ends
.rdata$r:000023B9
.rdata$r:000023BC ; ===========================================================================
.rdata$r:000023BC
.rdata$r:000023BC ; Segment type: Pure data
.rdata$r:000023BC ; Segment permissions: Read
.rdata$r:000023BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000023BC                 assume cs:_rdata$r
.rdata$r:000023BC                 ;org 23BCh
.rdata$r:000023BC ; COMDAT (pick any)
.rdata$r:000023BC                 public ??_R1A@?0A@EA@CWinMgr@@8
.rdata$r:000023BC ; CWinMgr::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000023BC ??_R1A@?0A@EA@CWinMgr@@8 dd offset ??_R0?AVCWinMgr@@@8
.rdata$r:000023BC                                         ; DATA XREF: .rdata$r:CWinMgr::`RTTI Base Class Array'o
.rdata$r:000023BC                                         ; CWinMgr `RTTI Type Descriptor'
.rdata$r:000023C0                 db    0
.rdata$r:000023C1                 db    0
.rdata$r:000023C2                 db    0
.rdata$r:000023C3                 db    0
.rdata$r:000023C4                 db    0
.rdata$r:000023C5                 db    0
.rdata$r:000023C6                 db    0
.rdata$r:000023C7                 db    0
.rdata$r:000023C8                 db 0FFh
.rdata$r:000023C9                 db 0FFh
.rdata$r:000023CA                 db 0FFh
.rdata$r:000023CB                 db 0FFh
.rdata$r:000023CC                 db    0
.rdata$r:000023CD                 db    0
.rdata$r:000023CE                 db    0
.rdata$r:000023CF                 db    0
.rdata$r:000023D0                 db  40h ; @
.rdata$r:000023D1                 db    0
.rdata$r:000023D2                 db    0
.rdata$r:000023D3                 db    0
.rdata$r:000023D4                 dd offset ??_R3CWinMgr@@8 ; CWinMgr::`RTTI Class Hierarchy Descriptor'
.rdata$r:000023D4 _rdata$r        ends
.rdata$r:000023D4
.CRT$XCU:000023D8 ; ===========================================================================
.CRT$XCU:000023D8
.CRT$XCU:000023D8 ; Segment type: Pure data
.CRT$XCU:000023D8 ; Segment permissions: Read
.CRT$XCU:000023D8 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000023D8                 assume cs:_CRT$XCU
.CRT$XCU:000023D8                 ;org 23D8h
.CRT$XCU:000023D8 _WM_WINMGR$initializer$ dd offset ??__EWM_WINMGR@@YAXXZ ; `dynamic initializer for 'WM_WINMGR''(void)
.CRT$XCU:000023D8 _CRT$XCU        ends
.CRT$XCU:000023D8
UNDEF:000023E0 ; ===========================================================================
UNDEF:000023E0
UNDEF:000023E0 ; Segment type: Externs
UNDEF:000023E0 ; UNDEF
UNDEF:000023E0 ; void __cdecl operator delete(void *)
UNDEF:000023E0                 extrn ??3@YAXPAX@Z:near ; CODE XREF: CWinMgr::`scalar deleting destructor'(uint)+1Bp
UNDEF:000023E4 ; void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line)
UNDEF:000023E4                 extrn __wassert:near    ; CODE XREF: CWinMgr::GetWindowPositions(HWND__ *)+1Ep
UNDEF:000023E4                                         ; CWinMgr::GetWindowPositions(HWND__ *)+38p ...
UNDEF:000023E8 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:000023E8                 extrn _memset:near      ; CODE XREF: NMWINMGR::NMWINMGR(void)+Fp
UNDEF:000023EC ; UINT __stdcall RegisterWindowMessageW(LPCWSTR lpString)
UNDEF:000023EC                 extrn __imp__RegisterWindowMessageW@4:near
UNDEF:000023EC                                         ; CODE XREF: `dynamic initializer for 'WM_WINMGR''(void)+8p
UNDEF:000023EC                                         ; DATA XREF: `dynamic initializer for 'WM_WINMGR''(void)+8r
UNDEF:000023F0 ; LRESULT __stdcall SendMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:000023F0                 extrn __imp__SendMessageW@16:near
UNDEF:000023F0                                         ; CODE XREF: CWinMgr::SendGetSizeInfo(SIZEINFO &,HWND__ *,uint)+3Fp
UNDEF:000023F0                                         ; CWinMgr::SendGetSizeInfo(SIZEINFO &,HWND__ *,uint)+78p
UNDEF:000023F0                                         ; DATA XREF: ...
UNDEF:000023F4 ; HDWP __stdcall BeginDeferWindowPos(int nNumWindows)
UNDEF:000023F4                 extrn __imp__BeginDeferWindowPos@4:near
UNDEF:000023F4                                         ; CODE XREF: CWinMgr::SetWindowPositions(HWND__ *)+39p
UNDEF:000023F4                                         ; DATA XREF: CWinMgr::SetWindowPositions(HWND__ *)+39r
UNDEF:000023F8 ; HDWP __stdcall DeferWindowPos(HDWP hWinPosInfo, HWND hWnd, HWND hWndInsertAfter, int x, int y, int cx, int cy, UINT uFlags)
UNDEF:000023F8                 extrn __imp__DeferWindowPos@32:near
UNDEF:000023F8                                         ; CODE XREF: CWinMgr::SetWindowPositions(HWND__ *)+F3p
UNDEF:000023F8                                         ; DATA XREF: CWinMgr::SetWindowPositions(HWND__ *)+F3r
UNDEF:000023FC ; BOOL __stdcall EndDeferWindowPos(HDWP hWinPosInfo)
UNDEF:000023FC                 extrn __imp__EndDeferWindowPos@4:near
UNDEF:000023FC                                         ; CODE XREF: CWinMgr::SetWindowPositions(HWND__ *)+130p
UNDEF:000023FC                                         ; DATA XREF: CWinMgr::SetWindowPositions(HWND__ *)+130r
UNDEF:00002400 ; BOOL __stdcall IsWindowVisible(HWND hWnd)
UNDEF:00002400                 extrn __imp__IsWindowVisible@4:near
UNDEF:00002400                                         ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+5AAp
UNDEF:00002400                                         ; CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+5B8p
UNDEF:00002400                                         ; DATA XREF: ...
UNDEF:00002404 ; HWND __stdcall GetDlgItem(HWND hDlg, int nIDDlgItem)
UNDEF:00002404                 extrn __imp__GetDlgItem@8:near
UNDEF:00002404                                         ; CODE XREF: CWinMgr::GetWindowPositions(HWND__ *)+79p
UNDEF:00002404                                         ; CWinMgr::SetWindowPositions(HWND__ *)+A6p ...
UNDEF:00002408 ; int __stdcall GetSystemMetrics(int nIndex)
UNDEF:00002408                 extrn __imp__GetSystemMetrics@4:near
UNDEF:00002408                                         ; CODE XREF: CWinMgr::GetMinMaxInfo(HWND__ *,SIZEINFO &)+7Cp
UNDEF:00002408                                         ; CWinMgr::GetMinMaxInfo(HWND__ *,SIZEINFO &)+9Ep ...
UNDEF:0000240C ; HMENU __stdcall GetMenu(HWND hWnd)
UNDEF:0000240C                 extrn __imp__GetMenu@4:near
UNDEF:0000240C                                         ; CODE XREF: CWinMgr::GetMinMaxInfo(HWND__ *,SIZEINFO &)+92p
UNDEF:0000240C                                         ; DATA XREF: CWinMgr::GetMinMaxInfo(HWND__ *,SIZEINFO &)+92r
UNDEF:00002410 ; BOOL __stdcall InvalidateRect(HWND hWnd, const RECT *lpRect, BOOL bErase)
UNDEF:00002410                 extrn __imp__InvalidateRect@12:near
UNDEF:00002410                                         ; CODE XREF: CWinMgr::SetWindowPositions(HWND__ *)+101p
UNDEF:00002410                                         ; CWinMgr::SetWindowPositions(HWND__ *)+121p
UNDEF:00002410                                         ; DATA XREF: ...
UNDEF:00002414 ; BOOL __stdcall GetWindowRect(HWND hWnd, LPRECT lpRect)
UNDEF:00002414                 extrn __imp__GetWindowRect@8:near
UNDEF:00002414                                         ; CODE XREF: CWinMgr::GetWindowPositions(HWND__ *)+95p
UNDEF:00002414                                         ; DATA XREF: CWinMgr::GetWindowPositions(HWND__ *)+95r
UNDEF:00002418 ; BOOL __stdcall ScreenToClient(HWND hWnd, LPPOINT lpPoint)
UNDEF:00002418                 extrn __imp__ScreenToClient@8:near
UNDEF:00002418                                         ; CODE XREF: CWinMgr::GetWindowPositions(HWND__ *)+C6p
UNDEF:00002418                                         ; DATA XREF: CWinMgr::GetWindowPositions(HWND__ *)+C6r
UNDEF:0000241C ; BOOL __stdcall InflateRect(LPRECT lprc, int dx, int dy)
UNDEF:0000241C                 extrn __imp__InflateRect@12:near
UNDEF:0000241C                                         ; CODE XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+13Dp
UNDEF:0000241C                                         ; DATA XREF: CWinMgr::CalcGroup(WINRECT *,HWND__ *)+13Dr
UNDEF:00002420 ; LONG __stdcall GetWindowLongW(HWND hWnd, int nIndex)
UNDEF:00002420                 extrn __imp__GetWindowLongW@8:near
UNDEF:00002420                                         ; CODE XREF: GetStyle(HWND__ *)+9p
UNDEF:00002420                                         ; GetExStyle(HWND__ *)+9p
UNDEF:00002420                                         ; DATA XREF: ...
UNDEF:00002424 ; int __cdecl abs(int X)
UNDEF:00002424                 extrn _abs:near         ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+300p
UNDEF:00002424                                         ; CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+318p ...
UNDEF:00002428 ; struct WINRECT *__cdecl static WINRECT::InitMap(struct WINRECT *, struct WINRECT *)
UNDEF:00002428                 extrn ?InitMap@WINRECT@@SAPAV1@PAV1@0@Z:near
UNDEF:00002428                                         ; CODE XREF: CWinMgr::CWinMgr(WINRECT *)+22p
UNDEF:0000242C ; struct WINRECT *__thiscall WINRECT::Parent(WINRECT *__hidden this)
UNDEF:0000242C                 extrn ?Parent@WINRECT@@QAEPAV1@XZ:near
UNDEF:0000242C                                         ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+334p
UNDEF:0000242C                                         ; CWinMgr::MoveRect(WINRECT *,tagPOINT,HWND__ *)+79p
UNDEF:00002430 ; int __thiscall WINRECT::GetMargins(WINRECT *__hidden this, int *, int *)
UNDEF:00002430                 extrn ?GetMargins@WINRECT@@QAEHAAH0@Z:near
UNDEF:00002430                                         ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+29Fp
UNDEF:00002430                                         ; CWinMgr::CalcGroup(WINRECT *,HWND__ *)+84p
UNDEF:00002434 ; public: virtual void * __thiscall CWinMgr::`vector deleting destructor'(unsigned int)
UNDEF:00002434                 extrn ??_ECWinMgr@@UAEPAXI@Z:near ; weak
UNDEF:00002434                                         ; DATA XREF: .rdata:const CWinMgr::`vftable'o
UNDEF:00002438 ; __fastcall __security_check_cookie(x)
UNDEF:00002438                 extrn @__security_check_cookie@4:near
UNDEF:00002438                                         ; CODE XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+68Fp
UNDEF:00002438                                         ; CWinMgr::GetMinMaxInfo(HWND__ *,tagMINMAXINFO *)+72p ...
UNDEF:0000243C ; const type_info::`vftable'
UNDEF:0000243C                 extrn ??_7type_info@@6B@:near
UNDEF:0000243C                                         ; DATA XREF: .data$r:CWinMgr `RTTI Type Descriptor'o
UNDEF:00002440                 extrn ___security_cookie:near
UNDEF:00002440                                         ; DATA XREF: CWinMgr::OnGetSizeInfo(SIZEINFO &,WINRECT *,HWND__ *)+9r
UNDEF:00002440                                         ; CWinMgr::GetMinMaxInfo(HWND__ *,tagMINMAXINFO *)+6r ...
UNDEF:00002440
UNDEF:00002440
UNDEF:00002440                 end